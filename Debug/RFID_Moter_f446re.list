
RFID_Moter_f446re.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000199f4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001254  08019bc8  08019bc8  0001abc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ae1c  0801ae1c  0001c284  2**0
                  CONTENTS
  4 .ARM          00000008  0801ae1c  0801ae1c  0001be1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ae24  0801ae24  0001c284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801ae24  0801ae24  0001be24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801ae2c  0801ae2c  0001be2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000284  20000000  0801ae30  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010b50  20000288  0801b0b4  0001c288  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20010dd8  0801b0b4  0001cdd8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001c284  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ee84  00000000  00000000  0001c2b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004f9f  00000000  00000000  0003b138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001820  00000000  00000000  000400d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001272  00000000  00000000  000418f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029911  00000000  00000000  00042b6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020e68  00000000  00000000  0006c47b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e8689  00000000  00000000  0008d2e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  0017596c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007644  00000000  00000000  001759e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0017d028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000288 	.word	0x20000288
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08019bac 	.word	0x08019bac

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000028c 	.word	0x2000028c
 800020c:	08019bac 	.word	0x08019bac

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_ldivmod>:
 8000c08:	b97b      	cbnz	r3, 8000c2a <__aeabi_ldivmod+0x22>
 8000c0a:	b972      	cbnz	r2, 8000c2a <__aeabi_ldivmod+0x22>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bfbe      	ittt	lt
 8000c10:	2000      	movlt	r0, #0
 8000c12:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c16:	e006      	blt.n	8000c26 <__aeabi_ldivmod+0x1e>
 8000c18:	bf08      	it	eq
 8000c1a:	2800      	cmpeq	r0, #0
 8000c1c:	bf1c      	itt	ne
 8000c1e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c22:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c26:	f000 b9b5 	b.w	8000f94 <__aeabi_idiv0>
 8000c2a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c2e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c32:	2900      	cmp	r1, #0
 8000c34:	db09      	blt.n	8000c4a <__aeabi_ldivmod+0x42>
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	db1a      	blt.n	8000c70 <__aeabi_ldivmod+0x68>
 8000c3a:	f000 f84d 	bl	8000cd8 <__udivmoddi4>
 8000c3e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c46:	b004      	add	sp, #16
 8000c48:	4770      	bx	lr
 8000c4a:	4240      	negs	r0, r0
 8000c4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	db1b      	blt.n	8000c8c <__aeabi_ldivmod+0x84>
 8000c54:	f000 f840 	bl	8000cd8 <__udivmoddi4>
 8000c58:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c60:	b004      	add	sp, #16
 8000c62:	4240      	negs	r0, r0
 8000c64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c68:	4252      	negs	r2, r2
 8000c6a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c6e:	4770      	bx	lr
 8000c70:	4252      	negs	r2, r2
 8000c72:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c76:	f000 f82f 	bl	8000cd8 <__udivmoddi4>
 8000c7a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c82:	b004      	add	sp, #16
 8000c84:	4240      	negs	r0, r0
 8000c86:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c8a:	4770      	bx	lr
 8000c8c:	4252      	negs	r2, r2
 8000c8e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c92:	f000 f821 	bl	8000cd8 <__udivmoddi4>
 8000c96:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c9e:	b004      	add	sp, #16
 8000ca0:	4252      	negs	r2, r2
 8000ca2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cbc:	f000 b96a 	b.w	8000f94 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9d08      	ldr	r5, [sp, #32]
 8000cde:	460c      	mov	r4, r1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d14e      	bne.n	8000d82 <__udivmoddi4+0xaa>
 8000ce4:	4694      	mov	ip, r2
 8000ce6:	458c      	cmp	ip, r1
 8000ce8:	4686      	mov	lr, r0
 8000cea:	fab2 f282 	clz	r2, r2
 8000cee:	d962      	bls.n	8000db6 <__udivmoddi4+0xde>
 8000cf0:	b14a      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf2:	f1c2 0320 	rsb	r3, r2, #32
 8000cf6:	4091      	lsls	r1, r2
 8000cf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d00:	4319      	orrs	r1, r3
 8000d02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0a:	fa1f f68c 	uxth.w	r6, ip
 8000d0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d16:	fb07 1114 	mls	r1, r7, r4, r1
 8000d1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1e:	fb04 f106 	mul.w	r1, r4, r6
 8000d22:	4299      	cmp	r1, r3
 8000d24:	d90a      	bls.n	8000d3c <__udivmoddi4+0x64>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d2e:	f080 8112 	bcs.w	8000f56 <__udivmoddi4+0x27e>
 8000d32:	4299      	cmp	r1, r3
 8000d34:	f240 810f 	bls.w	8000f56 <__udivmoddi4+0x27e>
 8000d38:	3c02      	subs	r4, #2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	1a59      	subs	r1, r3, r1
 8000d3e:	fa1f f38e 	uxth.w	r3, lr
 8000d42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d46:	fb07 1110 	mls	r1, r7, r0, r1
 8000d4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4e:	fb00 f606 	mul.w	r6, r0, r6
 8000d52:	429e      	cmp	r6, r3
 8000d54:	d90a      	bls.n	8000d6c <__udivmoddi4+0x94>
 8000d56:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d5e:	f080 80fc 	bcs.w	8000f5a <__udivmoddi4+0x282>
 8000d62:	429e      	cmp	r6, r3
 8000d64:	f240 80f9 	bls.w	8000f5a <__udivmoddi4+0x282>
 8000d68:	4463      	add	r3, ip
 8000d6a:	3802      	subs	r0, #2
 8000d6c:	1b9b      	subs	r3, r3, r6
 8000d6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d72:	2100      	movs	r1, #0
 8000d74:	b11d      	cbz	r5, 8000d7e <__udivmoddi4+0xa6>
 8000d76:	40d3      	lsrs	r3, r2
 8000d78:	2200      	movs	r2, #0
 8000d7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d905      	bls.n	8000d92 <__udivmoddi4+0xba>
 8000d86:	b10d      	cbz	r5, 8000d8c <__udivmoddi4+0xb4>
 8000d88:	e9c5 0100 	strd	r0, r1, [r5]
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	4608      	mov	r0, r1
 8000d90:	e7f5      	b.n	8000d7e <__udivmoddi4+0xa6>
 8000d92:	fab3 f183 	clz	r1, r3
 8000d96:	2900      	cmp	r1, #0
 8000d98:	d146      	bne.n	8000e28 <__udivmoddi4+0x150>
 8000d9a:	42a3      	cmp	r3, r4
 8000d9c:	d302      	bcc.n	8000da4 <__udivmoddi4+0xcc>
 8000d9e:	4290      	cmp	r0, r2
 8000da0:	f0c0 80f0 	bcc.w	8000f84 <__udivmoddi4+0x2ac>
 8000da4:	1a86      	subs	r6, r0, r2
 8000da6:	eb64 0303 	sbc.w	r3, r4, r3
 8000daa:	2001      	movs	r0, #1
 8000dac:	2d00      	cmp	r5, #0
 8000dae:	d0e6      	beq.n	8000d7e <__udivmoddi4+0xa6>
 8000db0:	e9c5 6300 	strd	r6, r3, [r5]
 8000db4:	e7e3      	b.n	8000d7e <__udivmoddi4+0xa6>
 8000db6:	2a00      	cmp	r2, #0
 8000db8:	f040 8090 	bne.w	8000edc <__udivmoddi4+0x204>
 8000dbc:	eba1 040c 	sub.w	r4, r1, ip
 8000dc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dc4:	fa1f f78c 	uxth.w	r7, ip
 8000dc8:	2101      	movs	r1, #1
 8000dca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dda:	fb07 f006 	mul.w	r0, r7, r6
 8000dde:	4298      	cmp	r0, r3
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x11c>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x11a>
 8000dec:	4298      	cmp	r0, r3
 8000dee:	f200 80cd 	bhi.w	8000f8c <__udivmoddi4+0x2b4>
 8000df2:	4626      	mov	r6, r4
 8000df4:	1a1c      	subs	r4, r3, r0
 8000df6:	fa1f f38e 	uxth.w	r3, lr
 8000dfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000e02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e06:	fb00 f707 	mul.w	r7, r0, r7
 8000e0a:	429f      	cmp	r7, r3
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x148>
 8000e0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e12:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e16:	d202      	bcs.n	8000e1e <__udivmoddi4+0x146>
 8000e18:	429f      	cmp	r7, r3
 8000e1a:	f200 80b0 	bhi.w	8000f7e <__udivmoddi4+0x2a6>
 8000e1e:	4620      	mov	r0, r4
 8000e20:	1bdb      	subs	r3, r3, r7
 8000e22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e26:	e7a5      	b.n	8000d74 <__udivmoddi4+0x9c>
 8000e28:	f1c1 0620 	rsb	r6, r1, #32
 8000e2c:	408b      	lsls	r3, r1
 8000e2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e32:	431f      	orrs	r7, r3
 8000e34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e38:	fa04 f301 	lsl.w	r3, r4, r1
 8000e3c:	ea43 030c 	orr.w	r3, r3, ip
 8000e40:	40f4      	lsrs	r4, r6
 8000e42:	fa00 f801 	lsl.w	r8, r0, r1
 8000e46:	0c38      	lsrs	r0, r7, #16
 8000e48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e50:	fa1f fc87 	uxth.w	ip, r7
 8000e54:	fb00 441e 	mls	r4, r0, lr, r4
 8000e58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e60:	45a1      	cmp	r9, r4
 8000e62:	fa02 f201 	lsl.w	r2, r2, r1
 8000e66:	d90a      	bls.n	8000e7e <__udivmoddi4+0x1a6>
 8000e68:	193c      	adds	r4, r7, r4
 8000e6a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e6e:	f080 8084 	bcs.w	8000f7a <__udivmoddi4+0x2a2>
 8000e72:	45a1      	cmp	r9, r4
 8000e74:	f240 8081 	bls.w	8000f7a <__udivmoddi4+0x2a2>
 8000e78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e7c:	443c      	add	r4, r7
 8000e7e:	eba4 0409 	sub.w	r4, r4, r9
 8000e82:	fa1f f983 	uxth.w	r9, r3
 8000e86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e96:	45a4      	cmp	ip, r4
 8000e98:	d907      	bls.n	8000eaa <__udivmoddi4+0x1d2>
 8000e9a:	193c      	adds	r4, r7, r4
 8000e9c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000ea0:	d267      	bcs.n	8000f72 <__udivmoddi4+0x29a>
 8000ea2:	45a4      	cmp	ip, r4
 8000ea4:	d965      	bls.n	8000f72 <__udivmoddi4+0x29a>
 8000ea6:	3b02      	subs	r3, #2
 8000ea8:	443c      	add	r4, r7
 8000eaa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000eae:	fba0 9302 	umull	r9, r3, r0, r2
 8000eb2:	eba4 040c 	sub.w	r4, r4, ip
 8000eb6:	429c      	cmp	r4, r3
 8000eb8:	46ce      	mov	lr, r9
 8000eba:	469c      	mov	ip, r3
 8000ebc:	d351      	bcc.n	8000f62 <__udivmoddi4+0x28a>
 8000ebe:	d04e      	beq.n	8000f5e <__udivmoddi4+0x286>
 8000ec0:	b155      	cbz	r5, 8000ed8 <__udivmoddi4+0x200>
 8000ec2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ec6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eca:	fa04 f606 	lsl.w	r6, r4, r6
 8000ece:	40cb      	lsrs	r3, r1
 8000ed0:	431e      	orrs	r6, r3
 8000ed2:	40cc      	lsrs	r4, r1
 8000ed4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ed8:	2100      	movs	r1, #0
 8000eda:	e750      	b.n	8000d7e <__udivmoddi4+0xa6>
 8000edc:	f1c2 0320 	rsb	r3, r2, #32
 8000ee0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ee4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ee8:	fa24 f303 	lsr.w	r3, r4, r3
 8000eec:	4094      	lsls	r4, r2
 8000eee:	430c      	orrs	r4, r1
 8000ef0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ef4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ef8:	fa1f f78c 	uxth.w	r7, ip
 8000efc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f00:	fb08 3110 	mls	r1, r8, r0, r3
 8000f04:	0c23      	lsrs	r3, r4, #16
 8000f06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f0a:	fb00 f107 	mul.w	r1, r0, r7
 8000f0e:	4299      	cmp	r1, r3
 8000f10:	d908      	bls.n	8000f24 <__udivmoddi4+0x24c>
 8000f12:	eb1c 0303 	adds.w	r3, ip, r3
 8000f16:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f1a:	d22c      	bcs.n	8000f76 <__udivmoddi4+0x29e>
 8000f1c:	4299      	cmp	r1, r3
 8000f1e:	d92a      	bls.n	8000f76 <__udivmoddi4+0x29e>
 8000f20:	3802      	subs	r0, #2
 8000f22:	4463      	add	r3, ip
 8000f24:	1a5b      	subs	r3, r3, r1
 8000f26:	b2a4      	uxth	r4, r4
 8000f28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f34:	fb01 f307 	mul.w	r3, r1, r7
 8000f38:	42a3      	cmp	r3, r4
 8000f3a:	d908      	bls.n	8000f4e <__udivmoddi4+0x276>
 8000f3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f40:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f44:	d213      	bcs.n	8000f6e <__udivmoddi4+0x296>
 8000f46:	42a3      	cmp	r3, r4
 8000f48:	d911      	bls.n	8000f6e <__udivmoddi4+0x296>
 8000f4a:	3902      	subs	r1, #2
 8000f4c:	4464      	add	r4, ip
 8000f4e:	1ae4      	subs	r4, r4, r3
 8000f50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f54:	e739      	b.n	8000dca <__udivmoddi4+0xf2>
 8000f56:	4604      	mov	r4, r0
 8000f58:	e6f0      	b.n	8000d3c <__udivmoddi4+0x64>
 8000f5a:	4608      	mov	r0, r1
 8000f5c:	e706      	b.n	8000d6c <__udivmoddi4+0x94>
 8000f5e:	45c8      	cmp	r8, r9
 8000f60:	d2ae      	bcs.n	8000ec0 <__udivmoddi4+0x1e8>
 8000f62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f6a:	3801      	subs	r0, #1
 8000f6c:	e7a8      	b.n	8000ec0 <__udivmoddi4+0x1e8>
 8000f6e:	4631      	mov	r1, r6
 8000f70:	e7ed      	b.n	8000f4e <__udivmoddi4+0x276>
 8000f72:	4603      	mov	r3, r0
 8000f74:	e799      	b.n	8000eaa <__udivmoddi4+0x1d2>
 8000f76:	4630      	mov	r0, r6
 8000f78:	e7d4      	b.n	8000f24 <__udivmoddi4+0x24c>
 8000f7a:	46d6      	mov	lr, sl
 8000f7c:	e77f      	b.n	8000e7e <__udivmoddi4+0x1a6>
 8000f7e:	4463      	add	r3, ip
 8000f80:	3802      	subs	r0, #2
 8000f82:	e74d      	b.n	8000e20 <__udivmoddi4+0x148>
 8000f84:	4606      	mov	r6, r0
 8000f86:	4623      	mov	r3, r4
 8000f88:	4608      	mov	r0, r1
 8000f8a:	e70f      	b.n	8000dac <__udivmoddi4+0xd4>
 8000f8c:	3e02      	subs	r6, #2
 8000f8e:	4463      	add	r3, ip
 8000f90:	e730      	b.n	8000df4 <__udivmoddi4+0x11c>
 8000f92:	bf00      	nop

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08a      	sub	sp, #40	@ 0x28
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000fa4:	f007 fe78 	bl	8008c98 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000fa8:	4b5a      	ldr	r3, [pc, #360]	@ (8001114 <pvPortMallocMicroROS+0x17c>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d101      	bne.n	8000fb4 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000fb0:	f000 f986 	bl	80012c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000fb4:	4b58      	ldr	r3, [pc, #352]	@ (8001118 <pvPortMallocMicroROS+0x180>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	f040 8090 	bne.w	80010e2 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d01e      	beq.n	8001006 <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8000fc8:	2208      	movs	r2, #8
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4413      	add	r3, r2
 8000fce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f003 0307 	and.w	r3, r3, #7
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d015      	beq.n	8001006 <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	f023 0307 	bic.w	r3, r3, #7
 8000fe0:	3308      	adds	r3, #8
 8000fe2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f003 0307 	and.w	r3, r3, #7
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d00b      	beq.n	8001006 <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000ff2:	f383 8811 	msr	BASEPRI, r3
 8000ff6:	f3bf 8f6f 	isb	sy
 8000ffa:	f3bf 8f4f 	dsb	sy
 8000ffe:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001000:	bf00      	nop
 8001002:	bf00      	nop
 8001004:	e7fd      	b.n	8001002 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d06a      	beq.n	80010e2 <pvPortMallocMicroROS+0x14a>
 800100c:	4b43      	ldr	r3, [pc, #268]	@ (800111c <pvPortMallocMicroROS+0x184>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	429a      	cmp	r2, r3
 8001014:	d865      	bhi.n	80010e2 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001016:	4b42      	ldr	r3, [pc, #264]	@ (8001120 <pvPortMallocMicroROS+0x188>)
 8001018:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800101a:	4b41      	ldr	r3, [pc, #260]	@ (8001120 <pvPortMallocMicroROS+0x188>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001020:	e004      	b.n	800102c <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8001022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001024:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800102c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	429a      	cmp	r2, r3
 8001034:	d903      	bls.n	800103e <pvPortMallocMicroROS+0xa6>
 8001036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d1f1      	bne.n	8001022 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800103e:	4b35      	ldr	r3, [pc, #212]	@ (8001114 <pvPortMallocMicroROS+0x17c>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001044:	429a      	cmp	r2, r3
 8001046:	d04c      	beq.n	80010e2 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001048:	6a3b      	ldr	r3, [r7, #32]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2208      	movs	r2, #8
 800104e:	4413      	add	r3, r2
 8001050:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	6a3b      	ldr	r3, [r7, #32]
 8001058:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800105a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800105c:	685a      	ldr	r2, [r3, #4]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	1ad2      	subs	r2, r2, r3
 8001062:	2308      	movs	r3, #8
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	429a      	cmp	r2, r3
 8001068:	d920      	bls.n	80010ac <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800106a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	4413      	add	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	f003 0307 	and.w	r3, r3, #7
 8001078:	2b00      	cmp	r3, #0
 800107a:	d00b      	beq.n	8001094 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 800107c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001080:	f383 8811 	msr	BASEPRI, r3
 8001084:	f3bf 8f6f 	isb	sy
 8001088:	f3bf 8f4f 	dsb	sy
 800108c:	613b      	str	r3, [r7, #16]
}
 800108e:	bf00      	nop
 8001090:	bf00      	nop
 8001092:	e7fd      	b.n	8001090 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001096:	685a      	ldr	r2, [r3, #4]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	1ad2      	subs	r2, r2, r3
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80010a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80010a6:	69b8      	ldr	r0, [r7, #24]
 80010a8:	f000 f96c 	bl	8001384 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80010ac:	4b1b      	ldr	r3, [pc, #108]	@ (800111c <pvPortMallocMicroROS+0x184>)
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	4a19      	ldr	r2, [pc, #100]	@ (800111c <pvPortMallocMicroROS+0x184>)
 80010b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80010ba:	4b18      	ldr	r3, [pc, #96]	@ (800111c <pvPortMallocMicroROS+0x184>)
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	4b19      	ldr	r3, [pc, #100]	@ (8001124 <pvPortMallocMicroROS+0x18c>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	429a      	cmp	r2, r3
 80010c4:	d203      	bcs.n	80010ce <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80010c6:	4b15      	ldr	r3, [pc, #84]	@ (800111c <pvPortMallocMicroROS+0x184>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a16      	ldr	r2, [pc, #88]	@ (8001124 <pvPortMallocMicroROS+0x18c>)
 80010cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80010ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d0:	685a      	ldr	r2, [r3, #4]
 80010d2:	4b11      	ldr	r3, [pc, #68]	@ (8001118 <pvPortMallocMicroROS+0x180>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	431a      	orrs	r2, r3
 80010d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80010dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80010e2:	f007 fde7 	bl	8008cb4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	f003 0307 	and.w	r3, r3, #7
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d00b      	beq.n	8001108 <pvPortMallocMicroROS+0x170>
	__asm volatile
 80010f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80010f4:	f383 8811 	msr	BASEPRI, r3
 80010f8:	f3bf 8f6f 	isb	sy
 80010fc:	f3bf 8f4f 	dsb	sy
 8001100:	60fb      	str	r3, [r7, #12]
}
 8001102:	bf00      	nop
 8001104:	bf00      	nop
 8001106:	e7fd      	b.n	8001104 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8001108:	69fb      	ldr	r3, [r7, #28]
}
 800110a:	4618      	mov	r0, r3
 800110c:	3728      	adds	r7, #40	@ 0x28
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20003eac 	.word	0x20003eac
 8001118:	20003eb8 	.word	0x20003eb8
 800111c:	20003eb0 	.word	0x20003eb0
 8001120:	20003ea4 	.word	0x20003ea4
 8001124:	20003eb4 	.word	0x20003eb4

08001128 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d04a      	beq.n	80011d0 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800113a:	2308      	movs	r3, #8
 800113c:	425b      	negs	r3, r3
 800113e:	697a      	ldr	r2, [r7, #20]
 8001140:	4413      	add	r3, r2
 8001142:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	685a      	ldr	r2, [r3, #4]
 800114c:	4b22      	ldr	r3, [pc, #136]	@ (80011d8 <vPortFreeMicroROS+0xb0>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4013      	ands	r3, r2
 8001152:	2b00      	cmp	r3, #0
 8001154:	d10b      	bne.n	800116e <vPortFreeMicroROS+0x46>
	__asm volatile
 8001156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800115a:	f383 8811 	msr	BASEPRI, r3
 800115e:	f3bf 8f6f 	isb	sy
 8001162:	f3bf 8f4f 	dsb	sy
 8001166:	60fb      	str	r3, [r7, #12]
}
 8001168:	bf00      	nop
 800116a:	bf00      	nop
 800116c:	e7fd      	b.n	800116a <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d00b      	beq.n	800118e <vPortFreeMicroROS+0x66>
	__asm volatile
 8001176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800117a:	f383 8811 	msr	BASEPRI, r3
 800117e:	f3bf 8f6f 	isb	sy
 8001182:	f3bf 8f4f 	dsb	sy
 8001186:	60bb      	str	r3, [r7, #8]
}
 8001188:	bf00      	nop
 800118a:	bf00      	nop
 800118c:	e7fd      	b.n	800118a <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	685a      	ldr	r2, [r3, #4]
 8001192:	4b11      	ldr	r3, [pc, #68]	@ (80011d8 <vPortFreeMicroROS+0xb0>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4013      	ands	r3, r2
 8001198:	2b00      	cmp	r3, #0
 800119a:	d019      	beq.n	80011d0 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d115      	bne.n	80011d0 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	685a      	ldr	r2, [r3, #4]
 80011a8:	4b0b      	ldr	r3, [pc, #44]	@ (80011d8 <vPortFreeMicroROS+0xb0>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	43db      	mvns	r3, r3
 80011ae:	401a      	ands	r2, r3
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80011b4:	f007 fd70 	bl	8008c98 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	685a      	ldr	r2, [r3, #4]
 80011bc:	4b07      	ldr	r3, [pc, #28]	@ (80011dc <vPortFreeMicroROS+0xb4>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4413      	add	r3, r2
 80011c2:	4a06      	ldr	r2, [pc, #24]	@ (80011dc <vPortFreeMicroROS+0xb4>)
 80011c4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80011c6:	6938      	ldr	r0, [r7, #16]
 80011c8:	f000 f8dc 	bl	8001384 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80011cc:	f007 fd72 	bl	8008cb4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80011d0:	bf00      	nop
 80011d2:	3718      	adds	r7, #24
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20003eb8 	.word	0x20003eb8
 80011dc:	20003eb0 	.word	0x20003eb0

080011e0 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 80011e0:	b480      	push	{r7}
 80011e2:	b087      	sub	sp, #28
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 80011ec:	2308      	movs	r3, #8
 80011ee:	425b      	negs	r3, r3
 80011f0:	697a      	ldr	r2, [r7, #20]
 80011f2:	4413      	add	r3, r2
 80011f4:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	685a      	ldr	r2, [r3, #4]
 80011fe:	4b06      	ldr	r3, [pc, #24]	@ (8001218 <getBlockSize+0x38>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	43db      	mvns	r3, r3
 8001204:	4013      	ands	r3, r2
 8001206:	60fb      	str	r3, [r7, #12]

	return count;
 8001208:	68fb      	ldr	r3, [r7, #12]
}
 800120a:	4618      	mov	r0, r3
 800120c:	371c      	adds	r7, #28
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	20003eb8 	.word	0x20003eb8

0800121c <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001226:	f007 fd37 	bl	8008c98 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 800122a:	6838      	ldr	r0, [r7, #0]
 800122c:	f7ff feb4 	bl	8000f98 <pvPortMallocMicroROS>
 8001230:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d017      	beq.n	8001268 <pvPortReallocMicroROS+0x4c>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d014      	beq.n	8001268 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f7ff ffce 	bl	80011e0 <getBlockSize>
 8001244:	4603      	mov	r3, r0
 8001246:	2208      	movs	r2, #8
 8001248:	1a9b      	subs	r3, r3, r2
 800124a:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 800124c:	683a      	ldr	r2, [r7, #0]
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	429a      	cmp	r2, r3
 8001252:	d201      	bcs.n	8001258 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8001258:	68fa      	ldr	r2, [r7, #12]
 800125a:	6879      	ldr	r1, [r7, #4]
 800125c:	68b8      	ldr	r0, [r7, #8]
 800125e:	f016 fe06 	bl	8017e6e <memcpy>

		vPortFreeMicroROS(pv);
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f7ff ff60 	bl	8001128 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8001268:	f007 fd24 	bl	8008cb4 <xTaskResumeAll>

	return newmem;
 800126c:	68bb      	ldr	r3, [r7, #8]
}
 800126e:	4618      	mov	r0, r3
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b086      	sub	sp, #24
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
 800127e:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001280:	f007 fd0a 	bl	8008c98 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	fb02 f303 	mul.w	r3, r2, r3
 800128c:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 800128e:	6978      	ldr	r0, [r7, #20]
 8001290:	f7ff fe82 	bl	8000f98 <pvPortMallocMicroROS>
 8001294:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	613b      	str	r3, [r7, #16]

  	while(count--)
 800129a:	e004      	b.n	80012a6 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	1c5a      	adds	r2, r3, #1
 80012a0:	613a      	str	r2, [r7, #16]
 80012a2:	2200      	movs	r2, #0
 80012a4:	701a      	strb	r2, [r3, #0]
  	while(count--)
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	1e5a      	subs	r2, r3, #1
 80012aa:	617a      	str	r2, [r7, #20]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d1f5      	bne.n	800129c <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 80012b0:	f007 fd00 	bl	8008cb4 <xTaskResumeAll>
  	return mem;
 80012b4:	68fb      	ldr	r3, [r7, #12]
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3718      	adds	r7, #24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
	...

080012c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80012c0:	b480      	push	{r7}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80012c6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80012ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80012cc:	4b27      	ldr	r3, [pc, #156]	@ (800136c <prvHeapInit+0xac>)
 80012ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	f003 0307 	and.w	r3, r3, #7
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d00c      	beq.n	80012f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	3307      	adds	r3, #7
 80012de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	f023 0307 	bic.w	r3, r3, #7
 80012e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80012e8:	68ba      	ldr	r2, [r7, #8]
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	4a1f      	ldr	r2, [pc, #124]	@ (800136c <prvHeapInit+0xac>)
 80012f0:	4413      	add	r3, r2
 80012f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80012f8:	4a1d      	ldr	r2, [pc, #116]	@ (8001370 <prvHeapInit+0xb0>)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80012fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001370 <prvHeapInit+0xb0>)
 8001300:	2200      	movs	r2, #0
 8001302:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	68ba      	ldr	r2, [r7, #8]
 8001308:	4413      	add	r3, r2
 800130a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800130c:	2208      	movs	r2, #8
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	1a9b      	subs	r3, r3, r2
 8001312:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	f023 0307 	bic.w	r3, r3, #7
 800131a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	4a15      	ldr	r2, [pc, #84]	@ (8001374 <prvHeapInit+0xb4>)
 8001320:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001322:	4b14      	ldr	r3, [pc, #80]	@ (8001374 <prvHeapInit+0xb4>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2200      	movs	r2, #0
 8001328:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800132a:	4b12      	ldr	r3, [pc, #72]	@ (8001374 <prvHeapInit+0xb4>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	68fa      	ldr	r2, [r7, #12]
 800133a:	1ad2      	subs	r2, r2, r3
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001340:	4b0c      	ldr	r3, [pc, #48]	@ (8001374 <prvHeapInit+0xb4>)
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	4a0a      	ldr	r2, [pc, #40]	@ (8001378 <prvHeapInit+0xb8>)
 800134e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	4a09      	ldr	r2, [pc, #36]	@ (800137c <prvHeapInit+0xbc>)
 8001356:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001358:	4b09      	ldr	r3, [pc, #36]	@ (8001380 <prvHeapInit+0xc0>)
 800135a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800135e:	601a      	str	r2, [r3, #0]
}
 8001360:	bf00      	nop
 8001362:	3714      	adds	r7, #20
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	200002a4 	.word	0x200002a4
 8001370:	20003ea4 	.word	0x20003ea4
 8001374:	20003eac 	.word	0x20003eac
 8001378:	20003eb4 	.word	0x20003eb4
 800137c:	20003eb0 	.word	0x20003eb0
 8001380:	20003eb8 	.word	0x20003eb8

08001384 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001384:	b480      	push	{r7}
 8001386:	b085      	sub	sp, #20
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800138c:	4b28      	ldr	r3, [pc, #160]	@ (8001430 <prvInsertBlockIntoFreeList+0xac>)
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	e002      	b.n	8001398 <prvInsertBlockIntoFreeList+0x14>
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	429a      	cmp	r2, r3
 80013a0:	d8f7      	bhi.n	8001392 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	68ba      	ldr	r2, [r7, #8]
 80013ac:	4413      	add	r3, r2
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d108      	bne.n	80013c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	685a      	ldr	r2, [r3, #4]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	441a      	add	r2, r3
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	68ba      	ldr	r2, [r7, #8]
 80013d0:	441a      	add	r2, r3
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	429a      	cmp	r2, r3
 80013d8:	d118      	bne.n	800140c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	4b15      	ldr	r3, [pc, #84]	@ (8001434 <prvInsertBlockIntoFreeList+0xb0>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d00d      	beq.n	8001402 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	685a      	ldr	r2, [r3, #4]
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	441a      	add	r2, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	e008      	b.n	8001414 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001402:	4b0c      	ldr	r3, [pc, #48]	@ (8001434 <prvInsertBlockIntoFreeList+0xb0>)
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	e003      	b.n	8001414 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001414:	68fa      	ldr	r2, [r7, #12]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	429a      	cmp	r2, r3
 800141a:	d002      	beq.n	8001422 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001422:	bf00      	nop
 8001424:	3714      	adds	r7, #20
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	20003ea4 	.word	0x20003ea4
 8001434:	20003eac 	.word	0x20003eac

08001438 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	607b      	str	r3, [r7, #4]
 8001442:	4b1f      	ldr	r3, [pc, #124]	@ (80014c0 <MX_DMA_Init+0x88>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001446:	4a1e      	ldr	r2, [pc, #120]	@ (80014c0 <MX_DMA_Init+0x88>)
 8001448:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800144c:	6313      	str	r3, [r2, #48]	@ 0x30
 800144e:	4b1c      	ldr	r3, [pc, #112]	@ (80014c0 <MX_DMA_Init+0x88>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001452:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001456:	607b      	str	r3, [r7, #4]
 8001458:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	603b      	str	r3, [r7, #0]
 800145e:	4b18      	ldr	r3, [pc, #96]	@ (80014c0 <MX_DMA_Init+0x88>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001462:	4a17      	ldr	r2, [pc, #92]	@ (80014c0 <MX_DMA_Init+0x88>)
 8001464:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001468:	6313      	str	r3, [r2, #48]	@ 0x30
 800146a:	4b15      	ldr	r3, [pc, #84]	@ (80014c0 <MX_DMA_Init+0x88>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001472:	603b      	str	r3, [r7, #0]
 8001474:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001476:	2200      	movs	r2, #0
 8001478:	2105      	movs	r1, #5
 800147a:	2010      	movs	r0, #16
 800147c:	f002 fbdc 	bl	8003c38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001480:	2010      	movs	r0, #16
 8001482:	f002 fbf5 	bl	8003c70 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8001486:	2200      	movs	r2, #0
 8001488:	2105      	movs	r1, #5
 800148a:	2039      	movs	r0, #57	@ 0x39
 800148c:	f002 fbd4 	bl	8003c38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001490:	2039      	movs	r0, #57	@ 0x39
 8001492:	f002 fbed 	bl	8003c70 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 8001496:	2200      	movs	r2, #0
 8001498:	2105      	movs	r1, #5
 800149a:	2044      	movs	r0, #68	@ 0x44
 800149c:	f002 fbcc 	bl	8003c38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80014a0:	2044      	movs	r0, #68	@ 0x44
 80014a2:	f002 fbe5 	bl	8003c70 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 80014a6:	2200      	movs	r2, #0
 80014a8:	2105      	movs	r1, #5
 80014aa:	2045      	movs	r0, #69	@ 0x45
 80014ac:	f002 fbc4 	bl	8003c38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80014b0:	2045      	movs	r0, #69	@ 0x45
 80014b2:	f002 fbdd 	bl	8003c70 <HAL_NVIC_EnableIRQ>

}
 80014b6:	bf00      	nop
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40023800 	.word	0x40023800

080014c4 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80014d2:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 80014d4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80014d8:	4904      	ldr	r1, [pc, #16]	@ (80014ec <cubemx_transport_open+0x28>)
 80014da:	68f8      	ldr	r0, [r7, #12]
 80014dc:	f005 fc9c 	bl	8006e18 <HAL_UART_Receive_DMA>
    return true;
 80014e0:	2301      	movs	r3, #1
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3710      	adds	r7, #16
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	20003ebc 	.word	0x20003ebc

080014f0 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80014fe:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8001500:	68f8      	ldr	r0, [r7, #12]
 8001502:	f005 fcae 	bl	8006e62 <HAL_UART_DMAStop>
    return true;
 8001506:	2301      	movs	r3, #1
}
 8001508:	4618      	mov	r0, r3
 800150a:	3710      	adds	r7, #16
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
 800151c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001524:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800152c:	b2db      	uxtb	r3, r3
 800152e:	2b20      	cmp	r3, #32
 8001530:	d11c      	bne.n	800156c <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	b29b      	uxth	r3, r3
 8001536:	461a      	mov	r2, r3
 8001538:	68b9      	ldr	r1, [r7, #8]
 800153a:	6978      	ldr	r0, [r7, #20]
 800153c:	f005 fbfc 	bl	8006d38 <HAL_UART_Transmit_DMA>
 8001540:	4603      	mov	r3, r0
 8001542:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001544:	e002      	b.n	800154c <cubemx_transport_write+0x3c>
            osDelay(1);
 8001546:	2001      	movs	r0, #1
 8001548:	f006 fedd 	bl	8008306 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 800154c:	7cfb      	ldrb	r3, [r7, #19]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d105      	bne.n	800155e <cubemx_transport_write+0x4e>
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001558:	b2db      	uxtb	r3, r3
 800155a:	2b20      	cmp	r3, #32
 800155c:	d1f3      	bne.n	8001546 <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 800155e:	7cfb      	ldrb	r3, [r7, #19]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d101      	bne.n	8001568 <cubemx_transport_write+0x58>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	e002      	b.n	800156e <cubemx_transport_write+0x5e>
 8001568:	2300      	movs	r3, #0
 800156a:	e000      	b.n	800156e <cubemx_transport_write+0x5e>
    }else{
        return 0;
 800156c:	2300      	movs	r3, #0
    }
}
 800156e:	4618      	mov	r0, r3
 8001570:	3718      	adds	r7, #24
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
	...

08001578 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8001578:	b580      	push	{r7, lr}
 800157a:	b088      	sub	sp, #32
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
 8001584:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800158c:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 800158e:	2300      	movs	r3, #0
 8001590:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001592:	b672      	cpsid	i
}
 8001594:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80015a2:	4a1c      	ldr	r2, [pc, #112]	@ (8001614 <cubemx_transport_read+0x9c>)
 80015a4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80015a6:	b662      	cpsie	i
}
 80015a8:	bf00      	nop
        __enable_irq();
        ms_used++;
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	3301      	adds	r3, #1
 80015ae:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 80015b0:	2001      	movs	r0, #1
 80015b2:	f006 fea8 	bl	8008306 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 80015b6:	4b18      	ldr	r3, [pc, #96]	@ (8001618 <cubemx_transport_read+0xa0>)
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	4b16      	ldr	r3, [pc, #88]	@ (8001614 <cubemx_transport_read+0x9c>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	429a      	cmp	r2, r3
 80015c0:	d103      	bne.n	80015ca <cubemx_transport_read+0x52>
 80015c2:	69fa      	ldr	r2, [r7, #28]
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	429a      	cmp	r2, r3
 80015c8:	dbe3      	blt.n	8001592 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80015ca:	2300      	movs	r3, #0
 80015cc:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80015ce:	e011      	b.n	80015f4 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 80015d0:	4b11      	ldr	r3, [pc, #68]	@ (8001618 <cubemx_transport_read+0xa0>)
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	68b9      	ldr	r1, [r7, #8]
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	440b      	add	r3, r1
 80015da:	4910      	ldr	r1, [pc, #64]	@ (800161c <cubemx_transport_read+0xa4>)
 80015dc:	5c8a      	ldrb	r2, [r1, r2]
 80015de:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80015e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001618 <cubemx_transport_read+0xa0>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	3301      	adds	r3, #1
 80015e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015ea:	4a0b      	ldr	r2, [pc, #44]	@ (8001618 <cubemx_transport_read+0xa0>)
 80015ec:	6013      	str	r3, [r2, #0]
        wrote++;
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	3301      	adds	r3, #1
 80015f2:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80015f4:	4b08      	ldr	r3, [pc, #32]	@ (8001618 <cubemx_transport_read+0xa0>)
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	4b06      	ldr	r3, [pc, #24]	@ (8001614 <cubemx_transport_read+0x9c>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d003      	beq.n	8001608 <cubemx_transport_read+0x90>
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	429a      	cmp	r2, r3
 8001606:	d3e3      	bcc.n	80015d0 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8001608:	69bb      	ldr	r3, [r7, #24]
}
 800160a:	4618      	mov	r0, r3
 800160c:	3720      	adds	r7, #32
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	200046c0 	.word	0x200046c0
 8001618:	200046bc 	.word	0x200046bc
 800161c:	20003ebc 	.word	0x20003ebc

08001620 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001620:	b480      	push	{r7}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0
 8001626:	60f8      	str	r0, [r7, #12]
 8001628:	60b9      	str	r1, [r7, #8]
 800162a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	4a07      	ldr	r2, [pc, #28]	@ (800164c <vApplicationGetIdleTaskMemory+0x2c>)
 8001630:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	4a06      	ldr	r2, [pc, #24]	@ (8001650 <vApplicationGetIdleTaskMemory+0x30>)
 8001636:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2280      	movs	r2, #128	@ 0x80
 800163c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800163e:	bf00      	nop
 8001640:	3714      	adds	r7, #20
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	20007684 	.word	0x20007684
 8001650:	20007724 	.word	0x20007724

08001654 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001654:	b5b0      	push	{r4, r5, r7, lr}
 8001656:	b0b2      	sub	sp, #200	@ 0xc8
 8001658:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800165a:	4b43      	ldr	r3, [pc, #268]	@ (8001768 <MX_FREERTOS_Init+0x114>)
 800165c:	f107 04ac 	add.w	r4, r7, #172	@ 0xac
 8001660:	461d      	mov	r5, r3
 8001662:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001664:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001666:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800166a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800166e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001672:	2100      	movs	r1, #0
 8001674:	4618      	mov	r0, r3
 8001676:	f006 fdfa 	bl	800826e <osThreadCreate>
 800167a:	4603      	mov	r3, r0
 800167c:	4a3b      	ldr	r2, [pc, #236]	@ (800176c <MX_FREERTOS_Init+0x118>)
 800167e:	6013      	str	r3, [r2, #0]

  /* definition and creation of rfidExecuteTask */
  osThreadDef(rfidExecuteTask, StartRfidExecuteTask, osPriorityNormal, 0, 128);
 8001680:	4b3b      	ldr	r3, [pc, #236]	@ (8001770 <MX_FREERTOS_Init+0x11c>)
 8001682:	f107 0490 	add.w	r4, r7, #144	@ 0x90
 8001686:	461d      	mov	r5, r3
 8001688:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800168a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800168c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001690:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  rfidExecuteTaskHandle = osThreadCreate(osThread(rfidExecuteTask), NULL);
 8001694:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001698:	2100      	movs	r1, #0
 800169a:	4618      	mov	r0, r3
 800169c:	f006 fde7 	bl	800826e <osThreadCreate>
 80016a0:	4603      	mov	r3, r0
 80016a2:	4a34      	ldr	r2, [pc, #208]	@ (8001774 <MX_FREERTOS_Init+0x120>)
 80016a4:	6013      	str	r3, [r2, #0]

  /* definition and creation of tagNumTransmitT */
  osThreadDef(tagNumTransmitT, StartTagNumTransmitTask, osPriorityNormal, 0, 128);
 80016a6:	4b34      	ldr	r3, [pc, #208]	@ (8001778 <MX_FREERTOS_Init+0x124>)
 80016a8:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 80016ac:	461d      	mov	r5, r3
 80016ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tagNumTransmitTHandle = osThreadCreate(osThread(tagNumTransmitT), NULL);
 80016ba:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80016be:	2100      	movs	r1, #0
 80016c0:	4618      	mov	r0, r3
 80016c2:	f006 fdd4 	bl	800826e <osThreadCreate>
 80016c6:	4603      	mov	r3, r0
 80016c8:	4a2c      	ldr	r2, [pc, #176]	@ (800177c <MX_FREERTOS_Init+0x128>)
 80016ca:	6013      	str	r3, [r2, #0]

  /* definition and creation of rc522_read */
  osThreadDef(rc522_read, rc522_readTask, osPriorityNormal, 0, 128);
 80016cc:	4b2c      	ldr	r3, [pc, #176]	@ (8001780 <MX_FREERTOS_Init+0x12c>)
 80016ce:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 80016d2:	461d      	mov	r5, r3
 80016d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  rc522_readHandle = osThreadCreate(osThread(rc522_read), NULL);
 80016e0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80016e4:	2100      	movs	r1, #0
 80016e6:	4618      	mov	r0, r3
 80016e8:	f006 fdc1 	bl	800826e <osThreadCreate>
 80016ec:	4603      	mov	r3, r0
 80016ee:	4a25      	ldr	r2, [pc, #148]	@ (8001784 <MX_FREERTOS_Init+0x130>)
 80016f0:	6013      	str	r3, [r2, #0]

  /* definition and creation of motorTask */
  osThreadDef(motorTask, controlmotor, osPriorityLow, 0, 128);
 80016f2:	4b25      	ldr	r3, [pc, #148]	@ (8001788 <MX_FREERTOS_Init+0x134>)
 80016f4:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80016f8:	461d      	mov	r5, r3
 80016fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016fe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001702:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  motorTaskHandle = osThreadCreate(osThread(motorTask), NULL);
 8001706:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800170a:	2100      	movs	r1, #0
 800170c:	4618      	mov	r0, r3
 800170e:	f006 fdae 	bl	800826e <osThreadCreate>
 8001712:	4603      	mov	r3, r0
 8001714:	4a1d      	ldr	r2, [pc, #116]	@ (800178c <MX_FREERTOS_Init+0x138>)
 8001716:	6013      	str	r3, [r2, #0]

  /* definition and creation of transmitTask2 */
  osThreadDef(transmitTask2, StarttransmitTask2, osPriorityNormal, 0, 128);
 8001718:	4b1d      	ldr	r3, [pc, #116]	@ (8001790 <MX_FREERTOS_Init+0x13c>)
 800171a:	f107 0420 	add.w	r4, r7, #32
 800171e:	461d      	mov	r5, r3
 8001720:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001722:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001724:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001728:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  transmitTask2Handle = osThreadCreate(osThread(transmitTask2), NULL);
 800172c:	f107 0320 	add.w	r3, r7, #32
 8001730:	2100      	movs	r1, #0
 8001732:	4618      	mov	r0, r3
 8001734:	f006 fd9b 	bl	800826e <osThreadCreate>
 8001738:	4603      	mov	r3, r0
 800173a:	4a16      	ldr	r2, [pc, #88]	@ (8001794 <MX_FREERTOS_Init+0x140>)
 800173c:	6013      	str	r3, [r2, #0]

  /* definition and creation of RosTask */
  osThreadStaticDef(RosTask, StartRosTask, osPriorityLow, 0, 3000, RosTaskBuffer, &RosTaskControlBlock);
 800173e:	4b16      	ldr	r3, [pc, #88]	@ (8001798 <MX_FREERTOS_Init+0x144>)
 8001740:	1d3c      	adds	r4, r7, #4
 8001742:	461d      	mov	r5, r3
 8001744:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001746:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001748:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800174c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  RosTaskHandle = osThreadCreate(osThread(RosTask), NULL);
 8001750:	1d3b      	adds	r3, r7, #4
 8001752:	2100      	movs	r1, #0
 8001754:	4618      	mov	r0, r3
 8001756:	f006 fd8a 	bl	800826e <osThreadCreate>
 800175a:	4603      	mov	r3, r0
 800175c:	4a0f      	ldr	r2, [pc, #60]	@ (800179c <MX_FREERTOS_Init+0x148>)
 800175e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001760:	bf00      	nop
 8001762:	37c8      	adds	r7, #200	@ 0xc8
 8001764:	46bd      	mov	sp, r7
 8001766:	bdb0      	pop	{r4, r5, r7, pc}
 8001768:	08019bd4 	.word	0x08019bd4
 800176c:	200046e8 	.word	0x200046e8
 8001770:	08019c00 	.word	0x08019c00
 8001774:	200046ec 	.word	0x200046ec
 8001778:	08019c2c 	.word	0x08019c2c
 800177c:	200046f0 	.word	0x200046f0
 8001780:	08019c54 	.word	0x08019c54
 8001784:	200046f4 	.word	0x200046f4
 8001788:	08019c7c 	.word	0x08019c7c
 800178c:	200046f8 	.word	0x200046f8
 8001790:	08019ca8 	.word	0x08019ca8
 8001794:	200046fc 	.word	0x200046fc
 8001798:	08019ccc 	.word	0x08019ccc
 800179c:	20004700 	.word	0x20004700

080017a0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	read_rfid_number();
 80017a8:	f001 fc96 	bl	80030d8 <read_rfid_number>
	read_command();
 80017ac:	f001 fd9c 	bl	80032e8 <read_command>
    osDelay(1);
 80017b0:	2001      	movs	r0, #1
 80017b2:	f006 fda8 	bl	8008306 <osDelay>
	read_rfid_number();
 80017b6:	bf00      	nop
 80017b8:	e7f6      	b.n	80017a8 <StartDefaultTask+0x8>
	...

080017bc <StartRfidExecuteTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRfidExecuteTask */
void StartRfidExecuteTask(void const * argument)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRfidExecuteTask */
	  uint8_t read_tag_single_time[] = {0xBB, 0x00, 0x22, 0x00, 0x00, 0x22, 0x7E};
 80017c4:	4a0e      	ldr	r2, [pc, #56]	@ (8001800 <StartRfidExecuteTask+0x44>)
 80017c6:	f107 0308 	add.w	r3, r7, #8
 80017ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017ce:	6018      	str	r0, [r3, #0]
 80017d0:	3304      	adds	r3, #4
 80017d2:	8019      	strh	r1, [r3, #0]
 80017d4:	3302      	adds	r3, #2
 80017d6:	0c0a      	lsrs	r2, r1, #16
 80017d8:	701a      	strb	r2, [r3, #0]
	  vTaskSuspend(rfidExecuteTaskHandle);
 80017da:	4b0a      	ldr	r3, [pc, #40]	@ (8001804 <StartRfidExecuteTask+0x48>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4618      	mov	r0, r3
 80017e0:	f007 f8cc 	bl	800897c <vTaskSuspend>
	  /* Infinite loop */
	  for(;;)
	  {
		HAL_UART_Transmit(&huart1, read_tag_single_time, sizeof(read_tag_single_time), HAL_MAX_DELAY);
 80017e4:	f107 0108 	add.w	r1, r7, #8
 80017e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80017ec:	2207      	movs	r2, #7
 80017ee:	4806      	ldr	r0, [pc, #24]	@ (8001808 <StartRfidExecuteTask+0x4c>)
 80017f0:	f005 fa16 	bl	8006c20 <HAL_UART_Transmit>
		//vTaskResume(defaultTaskHandle);
	    osDelay(300);
 80017f4:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80017f8:	f006 fd85 	bl	8008306 <osDelay>
		HAL_UART_Transmit(&huart1, read_tag_single_time, sizeof(read_tag_single_time), HAL_MAX_DELAY);
 80017fc:	bf00      	nop
 80017fe:	e7f1      	b.n	80017e4 <StartRfidExecuteTask+0x28>
 8001800:	08019ce8 	.word	0x08019ce8
 8001804:	200046ec 	.word	0x200046ec
 8001808:	20008118 	.word	0x20008118

0800180c <StartTagNumTransmitTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTagNumTransmitTask */
void StartTagNumTransmitTask(void const * argument)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTagNumTransmitTask */
  /* Infinite loop */
  osEvent event;
  for(;;)
  {
	event = osSignalWait(transmitSignal, 100);
 8001814:	f107 030c 	add.w	r3, r7, #12
 8001818:	2264      	movs	r2, #100	@ 0x64
 800181a:	2101      	movs	r1, #1
 800181c:	4618      	mov	r0, r3
 800181e:	f006 fdc7 	bl	80083b0 <osSignalWait>
	if(event.value.signals == transmitSignal){
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d101      	bne.n	800182c <StartTagNumTransmitTask+0x20>
		transmitData();
 8001828:	f001 fcb0 	bl	800318c <transmitData>
		}
  osDelay(1);
 800182c:	2001      	movs	r0, #1
 800182e:	f006 fd6a 	bl	8008306 <osDelay>
	event = osSignalWait(transmitSignal, 100);
 8001832:	e7ef      	b.n	8001814 <StartTagNumTransmitTask+0x8>

08001834 <rc522_readTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_rc522_readTask */
void rc522_readTask(void const * argument)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b088      	sub	sp, #32
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN rc522_readTask */
  uint8_t status,cardstr[16] = {0,};
 800183c:	2300      	movs	r3, #0
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	f107 0310 	add.w	r3, r7, #16
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	605a      	str	r2, [r3, #4]
 800184a:	609a      	str	r2, [r3, #8]

  /* Infinite loop */
  for(;;)
  {

	if(MFRC522_Request(PICC_REQIDL, cardstr) == MI_OK){
 800184c:	f107 030c 	add.w	r3, r7, #12
 8001850:	4619      	mov	r1, r3
 8001852:	2026      	movs	r0, #38	@ 0x26
 8001854:	f000 ff51 	bl	80026fa <MFRC522_Request>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d111      	bne.n	8001882 <rc522_readTask+0x4e>
		status = MFRC522_Anticoll(cardstr);
 800185e:	f107 030c 	add.w	r3, r7, #12
 8001862:	4618      	mov	r0, r3
 8001864:	f000 ff6e 	bl	8002744 <MFRC522_Anticoll>
 8001868:	4603      	mov	r3, r0
 800186a:	77fb      	strb	r3, [r7, #31]
		if(status == MI_OK){
 800186c:	7ffb      	ldrb	r3, [r7, #31]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d107      	bne.n	8001882 <rc522_readTask+0x4e>
			HAL_UART_Transmit(&huart2, cardstr, 5, 500);
 8001872:	f107 010c 	add.w	r1, r7, #12
 8001876:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800187a:	2205      	movs	r2, #5
 800187c:	4803      	ldr	r0, [pc, #12]	@ (800188c <rc522_readTask+0x58>)
 800187e:	f005 f9cf 	bl	8006c20 <HAL_UART_Transmit>
		}
	}
	osDelay(300);
 8001882:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001886:	f006 fd3e 	bl	8008306 <osDelay>
	if(MFRC522_Request(PICC_REQIDL, cardstr) == MI_OK){
 800188a:	e7df      	b.n	800184c <rc522_readTask+0x18>
 800188c:	20008160 	.word	0x20008160

08001890 <controlmotor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_controlmotor */
void controlmotor(void const * argument)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN controlmotor */
  /* Infinite loop */
	vTaskSuspend(motorTaskHandle);
 8001898:	4b0a      	ldr	r3, [pc, #40]	@ (80018c4 <controlmotor+0x34>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4618      	mov	r0, r3
 800189e:	f007 f86d 	bl	800897c <vTaskSuspend>
  /* Infinite loop */
  for(;;)
  {
	  if(motor_status == 0){
 80018a2:	4b09      	ldr	r3, [pc, #36]	@ (80018c8 <controlmotor+0x38>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d102      	bne.n	80018b0 <controlmotor+0x20>
		  scan_motor_up();
 80018aa:	f000 ff89 	bl	80027c0 <scan_motor_up>
 80018ae:	e005      	b.n	80018bc <controlmotor+0x2c>
	  }else if(motor_status == 1){
 80018b0:	4b05      	ldr	r3, [pc, #20]	@ (80018c8 <controlmotor+0x38>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d101      	bne.n	80018bc <controlmotor+0x2c>
		  scan_motor_down();
 80018b8:	f000 ffb2 	bl	8002820 <scan_motor_down>
	  }
	  osDelay(100);
 80018bc:	2064      	movs	r0, #100	@ 0x64
 80018be:	f006 fd22 	bl	8008306 <osDelay>
	  if(motor_status == 0){
 80018c2:	e7ee      	b.n	80018a2 <controlmotor+0x12>
 80018c4:	200046f8 	.word	0x200046f8
 80018c8:	200046e4 	.word	0x200046e4

080018cc <StarttransmitTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StarttransmitTask2 */
void StarttransmitTask2(void const * argument)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StarttransmitTask2 */
	osEvent event;
  /* Infinite loop */
	  for(;;)
	  {
		  event = osSignalWait(transmitSignal2, 100);
 80018d4:	f107 030c 	add.w	r3, r7, #12
 80018d8:	2264      	movs	r2, #100	@ 0x64
 80018da:	2102      	movs	r1, #2
 80018dc:	4618      	mov	r0, r3
 80018de:	f006 fd67 	bl	80083b0 <osSignalWait>
		  if(event.value.signals == transmitSignal2){
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d101      	bne.n	80018ec <StarttransmitTask2+0x20>
			  transmitCommand();
 80018e8:	f001 fd30 	bl	800334c <transmitCommand>
		  }
		  osDelay(1);
 80018ec:	2001      	movs	r0, #1
 80018ee:	f006 fd0a 	bl	8008306 <osDelay>
		  event = osSignalWait(transmitSignal2, 100);
 80018f2:	e7ef      	b.n	80018d4 <StarttransmitTask2+0x8>
 80018f4:	0000      	movs	r0, r0
	...

080018f8 <subscription_str_callback>:
#define ARRAY_LEN 200
#define RCCHECK(fn) { rcl_ret_t temp_rc = fn; if((temp_rc != RCL_RET_OK)){printf("Failed status on line %d: %d. Aborting.\n",__LINE__,(int)temp_rc); return 1;}}
#define RCSOFTCHECK(fn) { rcl_ret_t temp_rc = fn; if((temp_rc != RCL_RET_OK)){printf("Failed status on line %d: %d. Continuing.\n",__LINE__,(int)temp_rc);}}

void subscription_str_callback(const void * msgin)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b09c      	sub	sp, #112	@ 0x70
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  std_msgs__msg__String * msg = (std_msgs__msg__String *)msgin;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	66fb      	str	r3, [r7, #108]	@ 0x6c
  pub_str_msg = *msg;
 8001904:	4b30      	ldr	r3, [pc, #192]	@ (80019c8 <subscription_str_callback+0xd0>)
 8001906:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001908:	ca07      	ldmia	r2, {r0, r1, r2}
 800190a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  char str[100];
  strcpy(str, msg->data.data);
 800190e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	f107 0308 	add.w	r3, r7, #8
 8001916:	4611      	mov	r1, r2
 8001918:	4618      	mov	r0, r3
 800191a:	f016 faa0 	bl	8017e5e <strcpy>
  if(!strcmp(str,"scan")){
 800191e:	f107 0308 	add.w	r3, r7, #8
 8001922:	492a      	ldr	r1, [pc, #168]	@ (80019cc <subscription_str_callback+0xd4>)
 8001924:	4618      	mov	r0, r3
 8001926:	f7fe fc73 	bl	8000210 <strcmp>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d112      	bne.n	8001956 <subscription_str_callback+0x5e>
	  sprintf(pub_str_msg.data.data, "launch", str);
 8001930:	4b25      	ldr	r3, [pc, #148]	@ (80019c8 <subscription_str_callback+0xd0>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f107 0208 	add.w	r2, r7, #8
 8001938:	4925      	ldr	r1, [pc, #148]	@ (80019d0 <subscription_str_callback+0xd8>)
 800193a:	4618      	mov	r0, r3
 800193c:	f016 f81a 	bl	8017974 <siprintf>
	  vTaskResume(motorTaskHandle);
 8001940:	4b24      	ldr	r3, [pc, #144]	@ (80019d4 <subscription_str_callback+0xdc>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4618      	mov	r0, r3
 8001946:	f007 f8df 	bl	8008b08 <vTaskResume>
	  vTaskResume(rfidExecuteTaskHandle);
 800194a:	4b23      	ldr	r3, [pc, #140]	@ (80019d8 <subscription_str_callback+0xe0>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4618      	mov	r0, r3
 8001950:	f007 f8da 	bl	8008b08 <vTaskResume>
 8001954:	e007      	b.n	8001966 <subscription_str_callback+0x6e>
  }else{
	  sprintf(pub_str_msg.data.data, "F446RE heard: %s", str);
 8001956:	4b1c      	ldr	r3, [pc, #112]	@ (80019c8 <subscription_str_callback+0xd0>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f107 0208 	add.w	r2, r7, #8
 800195e:	491f      	ldr	r1, [pc, #124]	@ (80019dc <subscription_str_callback+0xe4>)
 8001960:	4618      	mov	r0, r3
 8001962:	f016 f807 	bl	8017974 <siprintf>
  }
  //sprintf(pub_str_msg.data.data, "F446RE heard: %s", str);
  pub_str_msg.data.size = strlen(pub_str_msg.data.data);
 8001966:	4b18      	ldr	r3, [pc, #96]	@ (80019c8 <subscription_str_callback+0xd0>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4618      	mov	r0, r3
 800196c:	f7fe fcb0 	bl	80002d0 <strlen>
 8001970:	4603      	mov	r3, r0
 8001972:	4a15      	ldr	r2, [pc, #84]	@ (80019c8 <subscription_str_callback+0xd0>)
 8001974:	6053      	str	r3, [r2, #4]
  rcl_publish(&publisher_string_scan, &pub_str_msg, NULL);
 8001976:	2200      	movs	r2, #0
 8001978:	4913      	ldr	r1, [pc, #76]	@ (80019c8 <subscription_str_callback+0xd0>)
 800197a:	4819      	ldr	r0, [pc, #100]	@ (80019e0 <subscription_str_callback+0xe8>)
 800197c:	f008 fdd8 	bl	800a530 <rcl_publish>
  Publisher_pos(0.5,0.12);
 8001980:	ed9f 1b09 	vldr	d1, [pc, #36]	@ 80019a8 <subscription_str_callback+0xb0>
 8001984:	ed9f 0b0a 	vldr	d0, [pc, #40]	@ 80019b0 <subscription_str_callback+0xb8>
 8001988:	f001 ffd0 	bl	800392c <Publisher_pos>
  Publisher_pos(5.5,9.6);
 800198c:	ed9f 1b0a 	vldr	d1, [pc, #40]	@ 80019b8 <subscription_str_callback+0xc0>
 8001990:	ed9f 0b0b 	vldr	d0, [pc, #44]	@ 80019c0 <subscription_str_callback+0xc8>
 8001994:	f001 ffca 	bl	800392c <Publisher_pos>
  Publisher_state();
 8001998:	f001 ff9e 	bl	80038d8 <Publisher_state>
  debug_led();
 800199c:	f000 f822 	bl	80019e4 <debug_led>
}
 80019a0:	bf00      	nop
 80019a2:	3770      	adds	r7, #112	@ 0x70
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	eb851eb8 	.word	0xeb851eb8
 80019ac:	3fbeb851 	.word	0x3fbeb851
 80019b0:	00000000 	.word	0x00000000
 80019b4:	3fe00000 	.word	0x3fe00000
 80019b8:	33333333 	.word	0x33333333
 80019bc:	40233333 	.word	0x40233333
 80019c0:	00000000 	.word	0x00000000
 80019c4:	40160000 	.word	0x40160000
 80019c8:	200046cc 	.word	0x200046cc
 80019cc:	08019cf0 	.word	0x08019cf0
 80019d0:	08019cf8 	.word	0x08019cf8
 80019d4:	200046f8 	.word	0x200046f8
 80019d8:	200046ec 	.word	0x200046ec
 80019dc:	08019d00 	.word	0x08019d00
 80019e0:	200046c4 	.word	0x200046c4

080019e4 <debug_led>:

void debug_led()
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET); //LED turned on
 80019e8:	2201      	movs	r2, #1
 80019ea:	2120      	movs	r1, #32
 80019ec:	4807      	ldr	r0, [pc, #28]	@ (8001a0c <debug_led+0x28>)
 80019ee:	f002 fee3 	bl	80047b8 <HAL_GPIO_WritePin>
  HAL_Delay(200); //Wait for 200[ms]
 80019f2:	20c8      	movs	r0, #200	@ 0xc8
 80019f4:	f002 f844 	bl	8003a80 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); //LED turned off
 80019f8:	2200      	movs	r2, #0
 80019fa:	2120      	movs	r1, #32
 80019fc:	4803      	ldr	r0, [pc, #12]	@ (8001a0c <debug_led+0x28>)
 80019fe:	f002 fedb 	bl	80047b8 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 8001a02:	20c8      	movs	r0, #200	@ 0xc8
 8001a04:	f002 f83c 	bl	8003a80 <HAL_Delay>
}
 8001a08:	bf00      	nop
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	40020000 	.word	0x40020000

08001a10 <StartRosTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRosTask */
void StartRosTask(void const * argument)
{
 8001a10:	b5b0      	push	{r4, r5, r7, lr}
 8001a12:	f5ad 7d56 	sub.w	sp, sp, #856	@ 0x358
 8001a16:	af02      	add	r7, sp, #8
 8001a18:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 8001a1c:	f5a3 734d 	sub.w	r3, r3, #820	@ 0x334
 8001a20:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartRosTask */
	  // micro-ROS configuration
	  char test_array[ARRAY_LEN];
	  memset(test_array,'z',ARRAY_LEN);
 8001a22:	f507 7317 	add.w	r3, r7, #604	@ 0x25c
 8001a26:	22c8      	movs	r2, #200	@ 0xc8
 8001a28:	217a      	movs	r1, #122	@ 0x7a
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f016 f8fc 	bl	8017c28 <memset>

	  rmw_uros_set_custom_transport(
 8001a30:	4bcb      	ldr	r3, [pc, #812]	@ (8001d60 <StartRosTask+0x350>)
 8001a32:	9301      	str	r3, [sp, #4]
 8001a34:	4bcb      	ldr	r3, [pc, #812]	@ (8001d64 <StartRosTask+0x354>)
 8001a36:	9300      	str	r3, [sp, #0]
 8001a38:	4bcb      	ldr	r3, [pc, #812]	@ (8001d68 <StartRosTask+0x358>)
 8001a3a:	4acc      	ldr	r2, [pc, #816]	@ (8001d6c <StartRosTask+0x35c>)
 8001a3c:	49cc      	ldr	r1, [pc, #816]	@ (8001d70 <StartRosTask+0x360>)
 8001a3e:	2001      	movs	r0, #1
 8001a40:	f00a f99c 	bl	800bd7c <rmw_uros_set_custom_transport>
	    cubemx_transport_open,
	    cubemx_transport_close,
	    cubemx_transport_write,
	    cubemx_transport_read);

	  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001a44:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 8001a48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f009 fe65 	bl	800b71c <rcutils_get_zero_initialized_allocator>
	  freeRTOS_allocator.allocate = microros_allocate;
 8001a52:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 8001a56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001a5a:	4ac6      	ldr	r2, [pc, #792]	@ (8001d74 <StartRosTask+0x364>)
 8001a5c:	601a      	str	r2, [r3, #0]
	  freeRTOS_allocator.deallocate = microros_deallocate;
 8001a5e:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 8001a62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001a66:	4ac4      	ldr	r2, [pc, #784]	@ (8001d78 <StartRosTask+0x368>)
 8001a68:	605a      	str	r2, [r3, #4]
	  freeRTOS_allocator.reallocate = microros_reallocate;
 8001a6a:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 8001a6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001a72:	4ac2      	ldr	r2, [pc, #776]	@ (8001d7c <StartRosTask+0x36c>)
 8001a74:	609a      	str	r2, [r3, #8]
	  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8001a76:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 8001a7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001a7e:	4ac0      	ldr	r2, [pc, #768]	@ (8001d80 <StartRosTask+0x370>)
 8001a80:	60da      	str	r2, [r3, #12]

	  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8001a82:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8001a86:	4618      	mov	r0, r3
 8001a88:	f009 fe56 	bl	800b738 <rcutils_set_default_allocator>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	f083 0301 	eor.w	r3, r3, #1
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d004      	beq.n	8001aa2 <StartRosTask+0x92>
	    printf("Error on default allocators (line %d)\n", __LINE__);
 8001a98:	f44f 71c6 	mov.w	r1, #396	@ 0x18c
 8001a9c:	48b9      	ldr	r0, [pc, #740]	@ (8001d84 <StartRosTask+0x374>)
 8001a9e:	f015 ff23 	bl	80178e8 <iprintf>
	  sensor_msgs__msg__Imu sub_imu_msg;
	  rclc_support_t support;
	  rcl_allocator_t allocator;
	  rcl_node_t node;

	  allocator = rcl_get_default_allocator();
 8001aa2:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 8001aa6:	f5a3 7428 	sub.w	r4, r3, #672	@ 0x2a0
 8001aaa:	463b      	mov	r3, r7
 8001aac:	4618      	mov	r0, r3
 8001aae:	f009 fe61 	bl	800b774 <rcutils_get_default_allocator>
 8001ab2:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 8001ab6:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8001aba:	461d      	mov	r5, r3
 8001abc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001abe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ac0:	682b      	ldr	r3, [r5, #0]
 8001ac2:	6023      	str	r3, [r4, #0]

	  // create init_options
	  RCCHECK(rclc_support_init(&support, 0, NULL, &allocator));
 8001ac4:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8001ac8:	f107 00c4 	add.w	r0, r7, #196	@ 0xc4
 8001acc:	2200      	movs	r2, #0
 8001ace:	2100      	movs	r1, #0
 8001ad0:	f009 fd2e 	bl	800b530 <rclc_support_init>
 8001ad4:	f8c7 034c 	str.w	r0, [r7, #844]	@ 0x34c
 8001ad8:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d007      	beq.n	8001af0 <StartRosTask+0xe0>
 8001ae0:	f8d7 234c 	ldr.w	r2, [r7, #844]	@ 0x34c
 8001ae4:	f240 1199 	movw	r1, #409	@ 0x199
 8001ae8:	48a7      	ldr	r0, [pc, #668]	@ (8001d88 <StartRosTask+0x378>)
 8001aea:	f015 fefd 	bl	80178e8 <iprintf>
 8001aee:	e132      	b.n	8001d56 <StartRosTask+0x346>

	  // create node
	  RCCHECK(rclc_node_init_default(&node, "f446re_node", "", &support));
 8001af0:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8001af4:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 8001af8:	4aa4      	ldr	r2, [pc, #656]	@ (8001d8c <StartRosTask+0x37c>)
 8001afa:	49a5      	ldr	r1, [pc, #660]	@ (8001d90 <StartRosTask+0x380>)
 8001afc:	f009 fd62 	bl	800b5c4 <rclc_node_init_default>
 8001b00:	f8c7 0348 	str.w	r0, [r7, #840]	@ 0x348
 8001b04:	f8d7 3348 	ldr.w	r3, [r7, #840]	@ 0x348
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d007      	beq.n	8001b1c <StartRosTask+0x10c>
 8001b0c:	f8d7 2348 	ldr.w	r2, [r7, #840]	@ 0x348
 8001b10:	f44f 71ce 	mov.w	r1, #412	@ 0x19c
 8001b14:	489c      	ldr	r0, [pc, #624]	@ (8001d88 <StartRosTask+0x378>)
 8001b16:	f015 fee7 	bl	80178e8 <iprintf>
 8001b1a:	e11c      	b.n	8001d56 <StartRosTask+0x346>

	  // create publisher
	  RCCHECK(rclc_publisher_init_best_effort(
 8001b1c:	f00b f958 	bl	800cdd0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>
 8001b20:	4602      	mov	r2, r0
 8001b22:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 8001b26:	4b9b      	ldr	r3, [pc, #620]	@ (8001d94 <StartRosTask+0x384>)
 8001b28:	489b      	ldr	r0, [pc, #620]	@ (8001d98 <StartRosTask+0x388>)
 8001b2a:	f009 fd87 	bl	800b63c <rclc_publisher_init_best_effort>
 8001b2e:	f8c7 0344 	str.w	r0, [r7, #836]	@ 0x344
 8001b32:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d007      	beq.n	8001b4a <StartRosTask+0x13a>
 8001b3a:	f8d7 2344 	ldr.w	r2, [r7, #836]	@ 0x344
 8001b3e:	f240 119f 	movw	r1, #415	@ 0x19f
 8001b42:	4891      	ldr	r0, [pc, #580]	@ (8001d88 <StartRosTask+0x378>)
 8001b44:	f015 fed0 	bl	80178e8 <iprintf>
 8001b48:	e105      	b.n	8001d56 <StartRosTask+0x346>
	    &publisher_string_scan,
	    &node,
	    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, String),
	    "/f446re_scan_status"));

	  RCCHECK(rclc_publisher_init_best_effort(
 8001b4a:	f00b f941 	bl	800cdd0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 8001b54:	4b91      	ldr	r3, [pc, #580]	@ (8001d9c <StartRosTask+0x38c>)
 8001b56:	4892      	ldr	r0, [pc, #584]	@ (8001da0 <StartRosTask+0x390>)
 8001b58:	f009 fd70 	bl	800b63c <rclc_publisher_init_best_effort>
 8001b5c:	f8c7 0340 	str.w	r0, [r7, #832]	@ 0x340
 8001b60:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d007      	beq.n	8001b78 <StartRosTask+0x168>
 8001b68:	f8d7 2340 	ldr.w	r2, [r7, #832]	@ 0x340
 8001b6c:	f240 11a5 	movw	r1, #421	@ 0x1a5
 8001b70:	4885      	ldr	r0, [pc, #532]	@ (8001d88 <StartRosTask+0x378>)
 8001b72:	f015 feb9 	bl	80178e8 <iprintf>
 8001b76:	e0ee      	b.n	8001d56 <StartRosTask+0x346>
	    &node,
	    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, String),
	    "/f446re_nav_pos"));

	  // create subscriber
	  RCCHECK(rclc_subscription_init_default(
 8001b78:	f00b f92a 	bl	800cdd0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 8001b82:	f507 7011 	add.w	r0, r7, #580	@ 0x244
 8001b86:	4b87      	ldr	r3, [pc, #540]	@ (8001da4 <StartRosTask+0x394>)
 8001b88:	f009 fd8c 	bl	800b6a4 <rclc_subscription_init_default>
 8001b8c:	f8c7 033c 	str.w	r0, [r7, #828]	@ 0x33c
 8001b90:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d007      	beq.n	8001ba8 <StartRosTask+0x198>
 8001b98:	f8d7 233c 	ldr.w	r2, [r7, #828]	@ 0x33c
 8001b9c:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 8001ba0:	4879      	ldr	r0, [pc, #484]	@ (8001d88 <StartRosTask+0x378>)
 8001ba2:	f015 fea1 	bl	80178e8 <iprintf>
 8001ba6:	e0d6      	b.n	8001d56 <StartRosTask+0x346>
	    &node,
	    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, String),
	    "/f446re_scan_oper"));

	  // create executor
	  rclc_executor_t executor = rclc_executor_get_zero_initialized_executor();
 8001ba8:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 8001bac:	f5a3 734c 	sub.w	r3, r3, #816	@ 0x330
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f009 f9e3 	bl	800af7c <rclc_executor_get_zero_initialized_executor>
	  RCCHECK(rclc_executor_init(&executor, &support.context, 2, &allocator));
 8001bb6:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8001bba:	f107 01c4 	add.w	r1, r7, #196	@ 0xc4
 8001bbe:	f107 0020 	add.w	r0, r7, #32
 8001bc2:	2202      	movs	r2, #2
 8001bc4:	f009 f9e4 	bl	800af90 <rclc_executor_init>
 8001bc8:	f8c7 0338 	str.w	r0, [r7, #824]	@ 0x338
 8001bcc:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d007      	beq.n	8001be4 <StartRosTask+0x1d4>
 8001bd4:	f8d7 2338 	ldr.w	r2, [r7, #824]	@ 0x338
 8001bd8:	f44f 71da 	mov.w	r1, #436	@ 0x1b4
 8001bdc:	486a      	ldr	r0, [pc, #424]	@ (8001d88 <StartRosTask+0x378>)
 8001bde:	f015 fe83 	bl	80178e8 <iprintf>
 8001be2:	e0b8      	b.n	8001d56 <StartRosTask+0x346>
	  RCCHECK(rclc_executor_add_subscription(&executor, &subscriber_oper, &sub_str_msg, &subscription_str_callback, ON_NEW_DATA));
 8001be4:	f507 720e 	add.w	r2, r7, #568	@ 0x238
 8001be8:	f507 7111 	add.w	r1, r7, #580	@ 0x244
 8001bec:	f107 0020 	add.w	r0, r7, #32
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	9300      	str	r3, [sp, #0]
 8001bf4:	4b6c      	ldr	r3, [pc, #432]	@ (8001da8 <StartRosTask+0x398>)
 8001bf6:	f009 fa3b 	bl	800b070 <rclc_executor_add_subscription>
 8001bfa:	f8c7 0334 	str.w	r0, [r7, #820]	@ 0x334
 8001bfe:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d007      	beq.n	8001c16 <StartRosTask+0x206>
 8001c06:	f8d7 2334 	ldr.w	r2, [r7, #820]	@ 0x334
 8001c0a:	f240 11b5 	movw	r1, #437	@ 0x1b5
 8001c0e:	485e      	ldr	r0, [pc, #376]	@ (8001d88 <StartRosTask+0x378>)
 8001c10:	f015 fe6a 	bl	80178e8 <iprintf>
 8001c14:	e09f      	b.n	8001d56 <StartRosTask+0x346>

	  // initialize message memory
	  pub_str_msg.data.data = (char * ) malloc(ARRAY_LEN * sizeof(char));
 8001c16:	20c8      	movs	r0, #200	@ 0xc8
 8001c18:	f014 ff1a 	bl	8016a50 <malloc>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	461a      	mov	r2, r3
 8001c20:	4b62      	ldr	r3, [pc, #392]	@ (8001dac <StartRosTask+0x39c>)
 8001c22:	601a      	str	r2, [r3, #0]
	  pub_str_msg.data.size = 0;
 8001c24:	4b61      	ldr	r3, [pc, #388]	@ (8001dac <StartRosTask+0x39c>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	605a      	str	r2, [r3, #4]
	  pub_str_msg.data.capacity = ARRAY_LEN;
 8001c2a:	4b60      	ldr	r3, [pc, #384]	@ (8001dac <StartRosTask+0x39c>)
 8001c2c:	22c8      	movs	r2, #200	@ 0xc8
 8001c2e:	609a      	str	r2, [r3, #8]

	  pub_str_pos.data.data = (char * ) malloc(ARRAY_LEN * sizeof(char));
 8001c30:	20c8      	movs	r0, #200	@ 0xc8
 8001c32:	f014 ff0d 	bl	8016a50 <malloc>
 8001c36:	4603      	mov	r3, r0
 8001c38:	461a      	mov	r2, r3
 8001c3a:	4b5d      	ldr	r3, [pc, #372]	@ (8001db0 <StartRosTask+0x3a0>)
 8001c3c:	601a      	str	r2, [r3, #0]
	  pub_str_pos.data.size = 0;
 8001c3e:	4b5c      	ldr	r3, [pc, #368]	@ (8001db0 <StartRosTask+0x3a0>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	605a      	str	r2, [r3, #4]
	  pub_str_pos.data.capacity = ARRAY_LEN;
 8001c44:	4b5a      	ldr	r3, [pc, #360]	@ (8001db0 <StartRosTask+0x3a0>)
 8001c46:	22c8      	movs	r2, #200	@ 0xc8
 8001c48:	609a      	str	r2, [r3, #8]

	  sub_str_msg.data.data = (char * ) malloc(ARRAY_LEN * sizeof(char));
 8001c4a:	20c8      	movs	r0, #200	@ 0xc8
 8001c4c:	f014 ff00 	bl	8016a50 <malloc>
 8001c50:	4603      	mov	r3, r0
 8001c52:	461a      	mov	r2, r3
 8001c54:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 8001c58:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001c5c:	601a      	str	r2, [r3, #0]
	  sub_str_msg.data.size = 0;
 8001c5e:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 8001c62:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001c66:	2200      	movs	r2, #0
 8001c68:	605a      	str	r2, [r3, #4]
	  sub_str_msg.data.capacity = ARRAY_LEN;
 8001c6a:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 8001c6e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001c72:	22c8      	movs	r2, #200	@ 0xc8
 8001c74:	609a      	str	r2, [r3, #8]

	  sub_imu_msg.header.frame_id.capacity = 100;
 8001c76:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 8001c7a:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8001c7e:	2264      	movs	r2, #100	@ 0x64
 8001c80:	611a      	str	r2, [r3, #16]
	  sub_imu_msg.header.frame_id.data =(char * ) malloc(100 * sizeof(char));
 8001c82:	2064      	movs	r0, #100	@ 0x64
 8001c84:	f014 fee4 	bl	8016a50 <malloc>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 8001c90:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8001c94:	609a      	str	r2, [r3, #8]
	  sub_imu_msg.header.frame_id.size = 0;
 8001c96:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 8001c9a:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	60da      	str	r2, [r3, #12]

	  // execute subscriber
	  rclc_executor_spin(&executor);
 8001ca2:	f107 0320 	add.w	r3, r7, #32
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f009 fc02 	bl	800b4b0 <rclc_executor_spin>
	  // cleaning Up
	  RCCHECK(rcl_publisher_fini(&publisher_string_scan, &node));
 8001cac:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4839      	ldr	r0, [pc, #228]	@ (8001d98 <StartRosTask+0x388>)
 8001cb4:	f008 fbe2 	bl	800a47c <rcl_publisher_fini>
 8001cb8:	f8c7 0330 	str.w	r0, [r7, #816]	@ 0x330
 8001cbc:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d007      	beq.n	8001cd4 <StartRosTask+0x2c4>
 8001cc4:	f8d7 2330 	ldr.w	r2, [r7, #816]	@ 0x330
 8001cc8:	f240 11cb 	movw	r1, #459	@ 0x1cb
 8001ccc:	482e      	ldr	r0, [pc, #184]	@ (8001d88 <StartRosTask+0x378>)
 8001cce:	f015 fe0b 	bl	80178e8 <iprintf>
 8001cd2:	e040      	b.n	8001d56 <StartRosTask+0x346>
	  RCCHECK(rcl_publisher_fini(&publisher_string_pos, &node));
 8001cd4:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4831      	ldr	r0, [pc, #196]	@ (8001da0 <StartRosTask+0x390>)
 8001cdc:	f008 fbce 	bl	800a47c <rcl_publisher_fini>
 8001ce0:	f8c7 032c 	str.w	r0, [r7, #812]	@ 0x32c
 8001ce4:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d007      	beq.n	8001cfc <StartRosTask+0x2ec>
 8001cec:	f8d7 232c 	ldr.w	r2, [r7, #812]	@ 0x32c
 8001cf0:	f44f 71e6 	mov.w	r1, #460	@ 0x1cc
 8001cf4:	4824      	ldr	r0, [pc, #144]	@ (8001d88 <StartRosTask+0x378>)
 8001cf6:	f015 fdf7 	bl	80178e8 <iprintf>
 8001cfa:	e02c      	b.n	8001d56 <StartRosTask+0x346>
	  RCCHECK(rcl_subscription_fini(&subscriber_oper, &node));
 8001cfc:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 8001d00:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 8001d04:	4611      	mov	r1, r2
 8001d06:	4618      	mov	r0, r3
 8001d08:	f008 fd06 	bl	800a718 <rcl_subscription_fini>
 8001d0c:	f8c7 0328 	str.w	r0, [r7, #808]	@ 0x328
 8001d10:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d007      	beq.n	8001d28 <StartRosTask+0x318>
 8001d18:	f8d7 2328 	ldr.w	r2, [r7, #808]	@ 0x328
 8001d1c:	f240 11cd 	movw	r1, #461	@ 0x1cd
 8001d20:	4819      	ldr	r0, [pc, #100]	@ (8001d88 <StartRosTask+0x378>)
 8001d22:	f015 fde1 	bl	80178e8 <iprintf>
 8001d26:	e016      	b.n	8001d56 <StartRosTask+0x346>
	  RCCHECK(rcl_node_fini(&node));
 8001d28:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f008 fa83 	bl	800a238 <rcl_node_fini>
 8001d32:	f8c7 0324 	str.w	r0, [r7, #804]	@ 0x324
 8001d36:	f8d7 3324 	ldr.w	r3, [r7, #804]	@ 0x324
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d007      	beq.n	8001d4e <StartRosTask+0x33e>
 8001d3e:	f8d7 2324 	ldr.w	r2, [r7, #804]	@ 0x324
 8001d42:	f44f 71e7 	mov.w	r1, #462	@ 0x1ce
 8001d46:	4810      	ldr	r0, [pc, #64]	@ (8001d88 <StartRosTask+0x378>)
 8001d48:	f015 fdce 	bl	80178e8 <iprintf>
 8001d4c:	e003      	b.n	8001d56 <StartRosTask+0x346>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001d4e:	2001      	movs	r0, #1
 8001d50:	f006 fad9 	bl	8008306 <osDelay>
 8001d54:	e7fb      	b.n	8001d4e <StartRosTask+0x33e>
  }
  /* USER CODE END StartRosTask */
}
 8001d56:	f507 7754 	add.w	r7, r7, #848	@ 0x350
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bdb0      	pop	{r4, r5, r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	08001579 	.word	0x08001579
 8001d64:	08001511 	.word	0x08001511
 8001d68:	080014f1 	.word	0x080014f1
 8001d6c:	080014c5 	.word	0x080014c5
 8001d70:	200081f0 	.word	0x200081f0
 8001d74:	080020dd 	.word	0x080020dd
 8001d78:	08002121 	.word	0x08002121
 8001d7c:	08002159 	.word	0x08002159
 8001d80:	080021c5 	.word	0x080021c5
 8001d84:	08019d14 	.word	0x08019d14
 8001d88:	08019d3c 	.word	0x08019d3c
 8001d8c:	08019d68 	.word	0x08019d68
 8001d90:	08019d6c 	.word	0x08019d6c
 8001d94:	08019d78 	.word	0x08019d78
 8001d98:	200046c4 	.word	0x200046c4
 8001d9c:	08019d8c 	.word	0x08019d8c
 8001da0:	200046c8 	.word	0x200046c8
 8001da4:	08019d9c 	.word	0x08019d9c
 8001da8:	080018f9 	.word	0x080018f9
 8001dac:	200046cc 	.word	0x200046cc
 8001db0:	200046d8 	.word	0x200046d8

08001db4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b08a      	sub	sp, #40	@ 0x28
 8001db8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dba:	f107 0314 	add.w	r3, r7, #20
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	601a      	str	r2, [r3, #0]
 8001dc2:	605a      	str	r2, [r3, #4]
 8001dc4:	609a      	str	r2, [r3, #8]
 8001dc6:	60da      	str	r2, [r3, #12]
 8001dc8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	613b      	str	r3, [r7, #16]
 8001dce:	4b43      	ldr	r3, [pc, #268]	@ (8001edc <MX_GPIO_Init+0x128>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd2:	4a42      	ldr	r2, [pc, #264]	@ (8001edc <MX_GPIO_Init+0x128>)
 8001dd4:	f043 0304 	orr.w	r3, r3, #4
 8001dd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dda:	4b40      	ldr	r3, [pc, #256]	@ (8001edc <MX_GPIO_Init+0x128>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dde:	f003 0304 	and.w	r3, r3, #4
 8001de2:	613b      	str	r3, [r7, #16]
 8001de4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	60fb      	str	r3, [r7, #12]
 8001dea:	4b3c      	ldr	r3, [pc, #240]	@ (8001edc <MX_GPIO_Init+0x128>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dee:	4a3b      	ldr	r2, [pc, #236]	@ (8001edc <MX_GPIO_Init+0x128>)
 8001df0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001df4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001df6:	4b39      	ldr	r3, [pc, #228]	@ (8001edc <MX_GPIO_Init+0x128>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dfe:	60fb      	str	r3, [r7, #12]
 8001e00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	60bb      	str	r3, [r7, #8]
 8001e06:	4b35      	ldr	r3, [pc, #212]	@ (8001edc <MX_GPIO_Init+0x128>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0a:	4a34      	ldr	r2, [pc, #208]	@ (8001edc <MX_GPIO_Init+0x128>)
 8001e0c:	f043 0301 	orr.w	r3, r3, #1
 8001e10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e12:	4b32      	ldr	r3, [pc, #200]	@ (8001edc <MX_GPIO_Init+0x128>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	60bb      	str	r3, [r7, #8]
 8001e1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e1e:	2300      	movs	r3, #0
 8001e20:	607b      	str	r3, [r7, #4]
 8001e22:	4b2e      	ldr	r3, [pc, #184]	@ (8001edc <MX_GPIO_Init+0x128>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e26:	4a2d      	ldr	r2, [pc, #180]	@ (8001edc <MX_GPIO_Init+0x128>)
 8001e28:	f043 0302 	orr.w	r3, r3, #2
 8001e2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e2e:	4b2b      	ldr	r3, [pc, #172]	@ (8001edc <MX_GPIO_Init+0x128>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	607b      	str	r3, [r7, #4]
 8001e38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Direction0_Pin|Direction1_Pin|LD2_Pin|RC522_CS_Pin, GPIO_PIN_RESET);
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	2163      	movs	r1, #99	@ 0x63
 8001e3e:	4828      	ldr	r0, [pc, #160]	@ (8001ee0 <MX_GPIO_Init+0x12c>)
 8001e40:	f002 fcba 	bl	80047b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001e44:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e4a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001e4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e50:	2300      	movs	r3, #0
 8001e52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e54:	f107 0314 	add.w	r3, r7, #20
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4822      	ldr	r0, [pc, #136]	@ (8001ee4 <MX_GPIO_Init+0x130>)
 8001e5c:	f002 fb18 	bl	8004490 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = Direction0_Pin|Direction1_Pin;
 8001e60:	2303      	movs	r3, #3
 8001e62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e64:	2301      	movs	r3, #1
 8001e66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e70:	f107 0314 	add.w	r3, r7, #20
 8001e74:	4619      	mov	r1, r3
 8001e76:	481a      	ldr	r0, [pc, #104]	@ (8001ee0 <MX_GPIO_Init+0x12c>)
 8001e78:	f002 fb0a 	bl	8004490 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|RC522_CS_Pin;
 8001e7c:	2360      	movs	r3, #96	@ 0x60
 8001e7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e80:	2301      	movs	r3, #1
 8001e82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e84:	2300      	movs	r3, #0
 8001e86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e8c:	f107 0314 	add.w	r3, r7, #20
 8001e90:	4619      	mov	r1, r3
 8001e92:	4813      	ldr	r0, [pc, #76]	@ (8001ee0 <MX_GPIO_Init+0x12c>)
 8001e94:	f002 fafc 	bl	8004490 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Limit_switch_up_Pin|Limit_switch_down_Pin;
 8001e98:	2330      	movs	r3, #48	@ 0x30
 8001e9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e9c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001ea0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ea6:	f107 0314 	add.w	r3, r7, #20
 8001eaa:	4619      	mov	r1, r3
 8001eac:	480e      	ldr	r0, [pc, #56]	@ (8001ee8 <MX_GPIO_Init+0x134>)
 8001eae:	f002 faef 	bl	8004490 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	2105      	movs	r1, #5
 8001eb6:	200a      	movs	r0, #10
 8001eb8:	f001 febe 	bl	8003c38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001ebc:	200a      	movs	r0, #10
 8001ebe:	f001 fed7 	bl	8003c70 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	2105      	movs	r1, #5
 8001ec6:	2017      	movs	r0, #23
 8001ec8:	f001 feb6 	bl	8003c38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001ecc:	2017      	movs	r0, #23
 8001ece:	f001 fecf 	bl	8003c70 <HAL_NVIC_EnableIRQ>

}
 8001ed2:	bf00      	nop
 8001ed4:	3728      	adds	r7, #40	@ 0x28
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	40020000 	.word	0x40020000
 8001ee4:	40020800 	.word	0x40020800
 8001ee8:	40020400 	.word	0x40020400

08001eec <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 0 */
extern SPI_HandleTypeDef hspi2;
uint8_t rc522_rx_buf[100];
uint8_t cardstr[17];

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	80fb      	strh	r3, [r7, #6]
	static uint32_t before_tick1 = 0;
	static uint32_t before_tick2 = 0;

	if(GPIO_Pin == Limit_switch_up_Pin){
 8001ef6:	88fb      	ldrh	r3, [r7, #6]
 8001ef8:	2b10      	cmp	r3, #16
 8001efa:	d111      	bne.n	8001f20 <HAL_GPIO_EXTI_Callback+0x34>
		if(HAL_GetTick() - before_tick1 >= 300){
 8001efc:	f001 fdb4 	bl	8003a68 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	4b13      	ldr	r3, [pc, #76]	@ (8001f50 <HAL_GPIO_EXTI_Callback+0x64>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001f0c:	d31c      	bcc.n	8001f48 <HAL_GPIO_EXTI_Callback+0x5c>
			before_tick1 = HAL_GetTick();
 8001f0e:	f001 fdab 	bl	8003a68 <HAL_GetTick>
 8001f12:	4603      	mov	r3, r0
 8001f14:	4a0e      	ldr	r2, [pc, #56]	@ (8001f50 <HAL_GPIO_EXTI_Callback+0x64>)
 8001f16:	6013      	str	r3, [r2, #0]
			limit_switch_up = 1;
 8001f18:	4b0e      	ldr	r3, [pc, #56]	@ (8001f54 <HAL_GPIO_EXTI_Callback+0x68>)
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	601a      	str	r2, [r3, #0]
		if(HAL_GetTick() - before_tick2 >= 300){
			before_tick2 = HAL_GetTick();
			limit_switch_down = 1;
		}
	}
}
 8001f1e:	e013      	b.n	8001f48 <HAL_GPIO_EXTI_Callback+0x5c>
	}else if(GPIO_Pin == Limit_switch_down_Pin){
 8001f20:	88fb      	ldrh	r3, [r7, #6]
 8001f22:	2b20      	cmp	r3, #32
 8001f24:	d110      	bne.n	8001f48 <HAL_GPIO_EXTI_Callback+0x5c>
		if(HAL_GetTick() - before_tick2 >= 300){
 8001f26:	f001 fd9f 	bl	8003a68 <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f58 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001f36:	d307      	bcc.n	8001f48 <HAL_GPIO_EXTI_Callback+0x5c>
			before_tick2 = HAL_GetTick();
 8001f38:	f001 fd96 	bl	8003a68 <HAL_GetTick>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	4a06      	ldr	r2, [pc, #24]	@ (8001f58 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001f40:	6013      	str	r3, [r2, #0]
			limit_switch_down = 1;
 8001f42:	4b06      	ldr	r3, [pc, #24]	@ (8001f5c <HAL_GPIO_EXTI_Callback+0x70>)
 8001f44:	2201      	movs	r2, #1
 8001f46:	601a      	str	r2, [r3, #0]
}
 8001f48:	bf00      	nop
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	20007924 	.word	0x20007924
 8001f54:	20007934 	.word	0x20007934
 8001f58:	20007928 	.word	0x20007928
 8001f5c:	20007938 	.word	0x20007938

08001f60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f64:	f001 fd4a 	bl	80039fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f68:	f000 f82e 	bl	8001fc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f6c:	f7ff ff22 	bl	8001db4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001f70:	f7ff fa62 	bl	8001438 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001f74:	f001 fa42 	bl	80033fc <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001f78:	f001 fa16 	bl	80033a8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001f7c:	f001 fa68 	bl	8003450 <MX_USART3_UART_Init>
  MX_SPI2_Init();
 8001f80:	f000 fca4 	bl	80028cc <MX_SPI2_Init>
  MX_TIM1_Init();
 8001f84:	f000 ff5c 	bl	8002e40 <MX_TIM1_Init>
  MX_USART6_UART_Init();
 8001f88:	f001 fa8c 	bl	80034a4 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  uart_init();
 8001f8c:	f001 f838 	bl	8003000 <uart_init>
  uart2_init();
 8001f90:	f001 f93e 	bl	8003210 <uart2_init>
  MFRC522_Init();
 8001f94:	f000 faba 	bl	800250c <MFRC522_Init>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001f98:	2100      	movs	r1, #0
 8001f9a:	4809      	ldr	r0, [pc, #36]	@ (8001fc0 <main+0x60>)
 8001f9c:	f003 ffea 	bl	8005f74 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(Direction0_GPIO_Port, Direction0_Pin, GPIO_PIN_SET);
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	2101      	movs	r1, #1
 8001fa4:	4807      	ldr	r0, [pc, #28]	@ (8001fc4 <main+0x64>)
 8001fa6:	f002 fc07 	bl	80047b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Direction1_GPIO_Port, Direction1_Pin, GPIO_PIN_RESET);
 8001faa:	2200      	movs	r2, #0
 8001fac:	2102      	movs	r1, #2
 8001fae:	4805      	ldr	r0, [pc, #20]	@ (8001fc4 <main+0x64>)
 8001fb0:	f002 fc02 	bl	80047b8 <HAL_GPIO_WritePin>
//  HAL_SPI_Receive_IT(&hspi2,rc522_rx_buf,sizeof(rc522_rx_buf));

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001fb4:	f7ff fb4e 	bl	8001654 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001fb8:	f006 f952 	bl	8008260 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001fbc:	bf00      	nop
 8001fbe:	e7fd      	b.n	8001fbc <main+0x5c>
 8001fc0:	200079e4 	.word	0x200079e4
 8001fc4:	40020000 	.word	0x40020000

08001fc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b094      	sub	sp, #80	@ 0x50
 8001fcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fce:	f107 031c 	add.w	r3, r7, #28
 8001fd2:	2234      	movs	r2, #52	@ 0x34
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f015 fe26 	bl	8017c28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fdc:	f107 0308 	add.w	r3, r7, #8
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	601a      	str	r2, [r3, #0]
 8001fe4:	605a      	str	r2, [r3, #4]
 8001fe6:	609a      	str	r2, [r3, #8]
 8001fe8:	60da      	str	r2, [r3, #12]
 8001fea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fec:	2300      	movs	r3, #0
 8001fee:	607b      	str	r3, [r7, #4]
 8001ff0:	4b2c      	ldr	r3, [pc, #176]	@ (80020a4 <SystemClock_Config+0xdc>)
 8001ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff4:	4a2b      	ldr	r2, [pc, #172]	@ (80020a4 <SystemClock_Config+0xdc>)
 8001ff6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ffa:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ffc:	4b29      	ldr	r3, [pc, #164]	@ (80020a4 <SystemClock_Config+0xdc>)
 8001ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002000:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002004:	607b      	str	r3, [r7, #4]
 8002006:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002008:	2300      	movs	r3, #0
 800200a:	603b      	str	r3, [r7, #0]
 800200c:	4b26      	ldr	r3, [pc, #152]	@ (80020a8 <SystemClock_Config+0xe0>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a25      	ldr	r2, [pc, #148]	@ (80020a8 <SystemClock_Config+0xe0>)
 8002012:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002016:	6013      	str	r3, [r2, #0]
 8002018:	4b23      	ldr	r3, [pc, #140]	@ (80020a8 <SystemClock_Config+0xe0>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002020:	603b      	str	r3, [r7, #0]
 8002022:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002024:	2301      	movs	r3, #1
 8002026:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002028:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800202c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800202e:	2302      	movs	r3, #2
 8002030:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002032:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002036:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002038:	2304      	movs	r3, #4
 800203a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800203c:	23b4      	movs	r3, #180	@ 0xb4
 800203e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002040:	2302      	movs	r3, #2
 8002042:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002044:	2302      	movs	r3, #2
 8002046:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002048:	2302      	movs	r3, #2
 800204a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800204c:	f107 031c 	add.w	r3, r7, #28
 8002050:	4618      	mov	r0, r3
 8002052:	f002 ffaf 	bl	8004fb4 <HAL_RCC_OscConfig>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800205c:	f000 f838 	bl	80020d0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002060:	f002 fbdc 	bl	800481c <HAL_PWREx_EnableOverDrive>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800206a:	f000 f831 	bl	80020d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800206e:	230f      	movs	r3, #15
 8002070:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002072:	2302      	movs	r3, #2
 8002074:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002076:	2300      	movs	r3, #0
 8002078:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800207a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800207e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002080:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002084:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002086:	f107 0308 	add.w	r3, r7, #8
 800208a:	2105      	movs	r1, #5
 800208c:	4618      	mov	r0, r3
 800208e:	f002 fc15 	bl	80048bc <HAL_RCC_ClockConfig>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002098:	f000 f81a 	bl	80020d0 <Error_Handler>
  }
}
 800209c:	bf00      	nop
 800209e:	3750      	adds	r7, #80	@ 0x50
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	40023800 	.word	0x40023800
 80020a8:	40007000 	.word	0x40007000

080020ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a04      	ldr	r2, [pc, #16]	@ (80020cc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d101      	bne.n	80020c2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80020be:	f001 fcbf 	bl	8003a40 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80020c2:	bf00      	nop
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	40000800 	.word	0x40000800

080020d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80020d4:	b672      	cpsid	i
}
 80020d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020d8:	bf00      	nop
 80020da:	e7fd      	b.n	80020d8 <Error_Handler+0x8>

080020dc <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80020e6:	4b0c      	ldr	r3, [pc, #48]	@ (8002118 <microros_allocate+0x3c>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	461a      	mov	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4413      	add	r3, r2
 80020f0:	461a      	mov	r2, r3
 80020f2:	4b09      	ldr	r3, [pc, #36]	@ (8002118 <microros_allocate+0x3c>)
 80020f4:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80020f6:	4b09      	ldr	r3, [pc, #36]	@ (800211c <microros_allocate+0x40>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	461a      	mov	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	4413      	add	r3, r2
 8002100:	461a      	mov	r2, r3
 8002102:	4b06      	ldr	r3, [pc, #24]	@ (800211c <microros_allocate+0x40>)
 8002104:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f7fe ff46 	bl	8000f98 <pvPortMallocMicroROS>
 800210c:	4603      	mov	r3, r0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	2000792c 	.word	0x2000792c
 800211c:	20007930 	.word	0x20007930

08002120 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d00c      	beq.n	800214a <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f7ff f855 	bl	80011e0 <getBlockSize>
 8002136:	4603      	mov	r3, r0
 8002138:	4a06      	ldr	r2, [pc, #24]	@ (8002154 <microros_deallocate+0x34>)
 800213a:	6812      	ldr	r2, [r2, #0]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	461a      	mov	r2, r3
 8002140:	4b04      	ldr	r3, [pc, #16]	@ (8002154 <microros_deallocate+0x34>)
 8002142:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f7fe ffef 	bl	8001128 <vPortFreeMicroROS>
  }
}
 800214a:	bf00      	nop
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	20007930 	.word	0x20007930

08002158 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002164:	4b15      	ldr	r3, [pc, #84]	@ (80021bc <microros_reallocate+0x64>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	461a      	mov	r2, r3
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	4413      	add	r3, r2
 800216e:	461a      	mov	r2, r3
 8002170:	4b12      	ldr	r3, [pc, #72]	@ (80021bc <microros_reallocate+0x64>)
 8002172:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002174:	4b12      	ldr	r3, [pc, #72]	@ (80021c0 <microros_reallocate+0x68>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	461a      	mov	r2, r3
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	4413      	add	r3, r2
 800217e:	461a      	mov	r2, r3
 8002180:	4b0f      	ldr	r3, [pc, #60]	@ (80021c0 <microros_reallocate+0x68>)
 8002182:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d104      	bne.n	8002194 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 800218a:	68b8      	ldr	r0, [r7, #8]
 800218c:	f7fe ff04 	bl	8000f98 <pvPortMallocMicroROS>
 8002190:	4603      	mov	r3, r0
 8002192:	e00e      	b.n	80021b2 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8002194:	68f8      	ldr	r0, [r7, #12]
 8002196:	f7ff f823 	bl	80011e0 <getBlockSize>
 800219a:	4603      	mov	r3, r0
 800219c:	4a08      	ldr	r2, [pc, #32]	@ (80021c0 <microros_reallocate+0x68>)
 800219e:	6812      	ldr	r2, [r2, #0]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	461a      	mov	r2, r3
 80021a4:	4b06      	ldr	r3, [pc, #24]	@ (80021c0 <microros_reallocate+0x68>)
 80021a6:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 80021a8:	68b9      	ldr	r1, [r7, #8]
 80021aa:	68f8      	ldr	r0, [r7, #12]
 80021ac:	f7ff f836 	bl	800121c <pvPortReallocMicroROS>
 80021b0:	4603      	mov	r3, r0
  }
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3710      	adds	r7, #16
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	2000792c 	.word	0x2000792c
 80021c0:	20007930 	.word	0x20007930

080021c4 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	68ba      	ldr	r2, [r7, #8]
 80021d4:	fb02 f303 	mul.w	r3, r2, r3
 80021d8:	4a0c      	ldr	r2, [pc, #48]	@ (800220c <microros_zero_allocate+0x48>)
 80021da:	6812      	ldr	r2, [r2, #0]
 80021dc:	4413      	add	r3, r2
 80021de:	461a      	mov	r2, r3
 80021e0:	4b0a      	ldr	r3, [pc, #40]	@ (800220c <microros_zero_allocate+0x48>)
 80021e2:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	68ba      	ldr	r2, [r7, #8]
 80021e8:	fb02 f303 	mul.w	r3, r2, r3
 80021ec:	4a08      	ldr	r2, [pc, #32]	@ (8002210 <microros_zero_allocate+0x4c>)
 80021ee:	6812      	ldr	r2, [r2, #0]
 80021f0:	4413      	add	r3, r2
 80021f2:	461a      	mov	r2, r3
 80021f4:	4b06      	ldr	r3, [pc, #24]	@ (8002210 <microros_zero_allocate+0x4c>)
 80021f6:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 80021f8:	68b9      	ldr	r1, [r7, #8]
 80021fa:	68f8      	ldr	r0, [r7, #12]
 80021fc:	f7ff f83b 	bl	8001276 <pvPortCallocMicroROS>
 8002200:	4603      	mov	r3, r0
 8002202:	4618      	mov	r0, r3
 8002204:	3710      	adds	r7, #16
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	2000792c 	.word	0x2000792c
 8002210:	20007930 	.word	0x20007930
 8002214:	00000000 	.word	0x00000000

08002218 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8002218:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800221c:	b086      	sub	sp, #24
 800221e:	af00      	add	r7, sp, #0
 8002220:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002224:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8002226:	2300      	movs	r3, #0
 8002228:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 800222a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800222e:	a320      	add	r3, pc, #128	@ (adr r3, 80022b0 <UTILS_NanosecondsToTimespec+0x98>)
 8002230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002234:	f7fe fce8 	bl	8000c08 <__aeabi_ldivmod>
 8002238:	4602      	mov	r2, r0
 800223a:	460b      	mov	r3, r1
 800223c:	6879      	ldr	r1, [r7, #4]
 800223e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8002242:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002246:	a31a      	add	r3, pc, #104	@ (adr r3, 80022b0 <UTILS_NanosecondsToTimespec+0x98>)
 8002248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800224c:	f7fe fcdc 	bl	8000c08 <__aeabi_ldivmod>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	2b00      	cmp	r3, #0
 800225a:	da20      	bge.n	800229e <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	4a11      	ldr	r2, [pc, #68]	@ (80022a8 <UTILS_NanosecondsToTimespec+0x90>)
 8002262:	fb82 1203 	smull	r1, r2, r2, r3
 8002266:	1712      	asrs	r2, r2, #28
 8002268:	17db      	asrs	r3, r3, #31
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	3301      	adds	r3, #1
 800226e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002276:	6979      	ldr	r1, [r7, #20]
 8002278:	17c8      	asrs	r0, r1, #31
 800227a:	460c      	mov	r4, r1
 800227c:	4605      	mov	r5, r0
 800227e:	ebb2 0804 	subs.w	r8, r2, r4
 8002282:	eb63 0905 	sbc.w	r9, r3, r5
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	689a      	ldr	r2, [r3, #8]
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	4906      	ldr	r1, [pc, #24]	@ (80022ac <UTILS_NanosecondsToTimespec+0x94>)
 8002294:	fb01 f303 	mul.w	r3, r1, r3
 8002298:	441a      	add	r2, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	609a      	str	r2, [r3, #8]
    }
}
 800229e:	bf00      	nop
 80022a0:	3718      	adds	r7, #24
 80022a2:	46bd      	mov	sp, r7
 80022a4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80022a8:	44b82fa1 	.word	0x44b82fa1
 80022ac:	3b9aca00 	.word	0x3b9aca00
 80022b0:	3b9aca00 	.word	0x3b9aca00
 80022b4:	00000000 	.word	0x00000000

080022b8 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80022b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022bc:	b08e      	sub	sp, #56	@ 0x38
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6278      	str	r0, [r7, #36]	@ 0x24
 80022c2:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80022c4:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80022c8:	2300      	movs	r3, #0
 80022ca:	6013      	str	r3, [r2, #0]
 80022cc:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80022ce:	f04f 0200 	mov.w	r2, #0
 80022d2:	f04f 0300 	mov.w	r3, #0
 80022d6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 80022da:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80022de:	4618      	mov	r0, r3
 80022e0:	f006 fea4 	bl	800902c <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 80022e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022e6:	17da      	asrs	r2, r3, #31
 80022e8:	61bb      	str	r3, [r7, #24]
 80022ea:	61fa      	str	r2, [r7, #28]
 80022ec:	f04f 0200 	mov.w	r2, #0
 80022f0:	f04f 0300 	mov.w	r3, #0
 80022f4:	69b9      	ldr	r1, [r7, #24]
 80022f6:	000b      	movs	r3, r1
 80022f8:	2200      	movs	r2, #0
 80022fa:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 80022fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002300:	2200      	movs	r2, #0
 8002302:	461c      	mov	r4, r3
 8002304:	4615      	mov	r5, r2
 8002306:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800230a:	1911      	adds	r1, r2, r4
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	416b      	adcs	r3, r5
 8002310:	60fb      	str	r3, [r7, #12]
 8002312:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002316:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 800231a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800231e:	4602      	mov	r2, r0
 8002320:	460b      	mov	r3, r1
 8002322:	f04f 0400 	mov.w	r4, #0
 8002326:	f04f 0500 	mov.w	r5, #0
 800232a:	015d      	lsls	r5, r3, #5
 800232c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002330:	0154      	lsls	r4, r2, #5
 8002332:	4622      	mov	r2, r4
 8002334:	462b      	mov	r3, r5
 8002336:	ebb2 0800 	subs.w	r8, r2, r0
 800233a:	eb63 0901 	sbc.w	r9, r3, r1
 800233e:	f04f 0200 	mov.w	r2, #0
 8002342:	f04f 0300 	mov.w	r3, #0
 8002346:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800234a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800234e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8002352:	4690      	mov	r8, r2
 8002354:	4699      	mov	r9, r3
 8002356:	eb18 0a00 	adds.w	sl, r8, r0
 800235a:	eb49 0b01 	adc.w	fp, r9, r1
 800235e:	f04f 0200 	mov.w	r2, #0
 8002362:	f04f 0300 	mov.w	r3, #0
 8002366:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800236a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800236e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002372:	ebb2 040a 	subs.w	r4, r2, sl
 8002376:	603c      	str	r4, [r7, #0]
 8002378:	eb63 030b 	sbc.w	r3, r3, fp
 800237c:	607b      	str	r3, [r7, #4]
 800237e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002382:	4623      	mov	r3, r4
 8002384:	181b      	adds	r3, r3, r0
 8002386:	613b      	str	r3, [r7, #16]
 8002388:	462b      	mov	r3, r5
 800238a:	eb41 0303 	adc.w	r3, r1, r3
 800238e:	617b      	str	r3, [r7, #20]
 8002390:	6a3a      	ldr	r2, [r7, #32]
 8002392:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002396:	f7ff ff3f 	bl	8002218 <UTILS_NanosecondsToTimespec>

    return 0;
 800239a:	2300      	movs	r3, #0
 800239c:	4618      	mov	r0, r3
 800239e:	3738      	adds	r7, #56	@ 0x38
 80023a0:	46bd      	mov	sp, r7
 80023a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080023a8 <RC522_SPI_Transfer>:
 * Description: A common function used by Write_MFRC522 and Read_MFRC522
 * Input Parameters: data - the value to be written
 * Returns: a byte of data read from the module
 */
uint8_t RC522_SPI_Transfer(uchar data)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b086      	sub	sp, #24
 80023ac:	af02      	add	r7, sp, #8
 80023ae:	4603      	mov	r3, r0
 80023b0:	71fb      	strb	r3, [r7, #7]
	uchar rx_data;
	HAL_SPI_TransmitReceive(HSPI_INSTANCE,&data,&rx_data,1,100);
 80023b2:	f107 020f 	add.w	r2, r7, #15
 80023b6:	1df9      	adds	r1, r7, #7
 80023b8:	2364      	movs	r3, #100	@ 0x64
 80023ba:	9300      	str	r3, [sp, #0]
 80023bc:	2301      	movs	r3, #1
 80023be:	4804      	ldr	r0, [pc, #16]	@ (80023d0 <RC522_SPI_Transfer+0x28>)
 80023c0:	f003 f91f 	bl	8005602 <HAL_SPI_TransmitReceive>

	return rx_data;
 80023c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3710      	adds	r7, #16
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	2000793c 	.word	0x2000793c

080023d4 <Write_MFRC522>:
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parameters: addr - register address; val - the value to be written
 * Return value: None
 */
void Write_MFRC522(uchar addr, uchar val)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	4603      	mov	r3, r0
 80023dc:	460a      	mov	r2, r1
 80023de:	71fb      	strb	r3, [r7, #7]
 80023e0:	4613      	mov	r3, r2
 80023e2:	71bb      	strb	r3, [r7, #6]
	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 80023e4:	2200      	movs	r2, #0
 80023e6:	2140      	movs	r1, #64	@ 0x40
 80023e8:	480c      	ldr	r0, [pc, #48]	@ (800241c <Write_MFRC522+0x48>)
 80023ea:	f002 f9e5 	bl	80047b8 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and clear the MSb to indicate a write
	  // - bottom 8 bits are the data bits being sent for that address, we send them
	RC522_SPI_Transfer((addr<<1)&0x7E);
 80023ee:	79fb      	ldrb	r3, [r7, #7]
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7ff ffd4 	bl	80023a8 <RC522_SPI_Transfer>
	RC522_SPI_Transfer(val);
 8002400:	79bb      	ldrb	r3, [r7, #6]
 8002402:	4618      	mov	r0, r3
 8002404:	f7ff ffd0 	bl	80023a8 <RC522_SPI_Transfer>

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8002408:	2201      	movs	r2, #1
 800240a:	2140      	movs	r1, #64	@ 0x40
 800240c:	4803      	ldr	r0, [pc, #12]	@ (800241c <Write_MFRC522+0x48>)
 800240e:	f002 f9d3 	bl	80047b8 <HAL_GPIO_WritePin>
}
 8002412:	bf00      	nop
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	40020000 	.word	0x40020000

08002420 <Read_MFRC522>:
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the module
 */
uchar Read_MFRC522(uchar addr)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	4603      	mov	r3, r0
 8002428:	71fb      	strb	r3, [r7, #7]
	uchar val;

	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 800242a:	2200      	movs	r2, #0
 800242c:	2140      	movs	r1, #64	@ 0x40
 800242e:	480f      	ldr	r0, [pc, #60]	@ (800246c <Read_MFRC522+0x4c>)
 8002430:	f002 f9c2 	bl	80047b8 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and set the MSb to indicate a read
	  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
	RC522_SPI_Transfer(((addr<<1)&0x7E) | 0x80);
 8002434:	79fb      	ldrb	r3, [r7, #7]
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	b25b      	sxtb	r3, r3
 800243a:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 800243e:	b25b      	sxtb	r3, r3
 8002440:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002444:	b25b      	sxtb	r3, r3
 8002446:	b2db      	uxtb	r3, r3
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff ffad 	bl	80023a8 <RC522_SPI_Transfer>
	val = RC522_SPI_Transfer(0x00);
 800244e:	2000      	movs	r0, #0
 8002450:	f7ff ffaa 	bl	80023a8 <RC522_SPI_Transfer>
 8002454:	4603      	mov	r3, r0
 8002456:	73fb      	strb	r3, [r7, #15]

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8002458:	2201      	movs	r2, #1
 800245a:	2140      	movs	r1, #64	@ 0x40
 800245c:	4803      	ldr	r0, [pc, #12]	@ (800246c <Read_MFRC522+0x4c>)
 800245e:	f002 f9ab 	bl	80047b8 <HAL_GPIO_WritePin>

	return val;
 8002462:	7bfb      	ldrb	r3, [r7, #15]

}
 8002464:	4618      	mov	r0, r3
 8002466:	3710      	adds	r7, #16
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	40020000 	.word	0x40020000

08002470 <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(uchar reg, uchar mask)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	4603      	mov	r3, r0
 8002478:	460a      	mov	r2, r1
 800247a:	71fb      	strb	r3, [r7, #7]
 800247c:	4613      	mov	r3, r2
 800247e:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 8002480:	79fb      	ldrb	r3, [r7, #7]
 8002482:	4618      	mov	r0, r3
 8002484:	f7ff ffcc 	bl	8002420 <Read_MFRC522>
 8002488:	4603      	mov	r3, r0
 800248a:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 800248c:	7bfa      	ldrb	r2, [r7, #15]
 800248e:	79bb      	ldrb	r3, [r7, #6]
 8002490:	4313      	orrs	r3, r2
 8002492:	b2da      	uxtb	r2, r3
 8002494:	79fb      	ldrb	r3, [r7, #7]
 8002496:	4611      	mov	r1, r2
 8002498:	4618      	mov	r0, r3
 800249a:	f7ff ff9b 	bl	80023d4 <Write_MFRC522>
}
 800249e:	bf00      	nop
 80024a0:	3710      	adds	r7, #16
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(uchar reg, uchar mask)
{
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b084      	sub	sp, #16
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	4603      	mov	r3, r0
 80024ae:	460a      	mov	r2, r1
 80024b0:	71fb      	strb	r3, [r7, #7]
 80024b2:	4613      	mov	r3, r2
 80024b4:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 80024b6:	79fb      	ldrb	r3, [r7, #7]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7ff ffb1 	bl	8002420 <Read_MFRC522>
 80024be:	4603      	mov	r3, r0
 80024c0:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 80024c2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80024c6:	43db      	mvns	r3, r3
 80024c8:	b25a      	sxtb	r2, r3
 80024ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024ce:	4013      	ands	r3, r2
 80024d0:	b25b      	sxtb	r3, r3
 80024d2:	b2da      	uxtb	r2, r3
 80024d4:	79fb      	ldrb	r3, [r7, #7]
 80024d6:	4611      	mov	r1, r2
 80024d8:	4618      	mov	r0, r3
 80024da:	f7ff ff7b 	bl	80023d4 <Write_MFRC522>
}
 80024de:	bf00      	nop
 80024e0:	3710      	adds	r7, #16
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 80024e6:	b580      	push	{r7, lr}
 80024e8:	af00      	add	r7, sp, #0

	Read_MFRC522(TxControlReg);
 80024ea:	2014      	movs	r0, #20
 80024ec:	f7ff ff98 	bl	8002420 <Read_MFRC522>
	SetBitMask(TxControlReg, 0x03);
 80024f0:	2103      	movs	r1, #3
 80024f2:	2014      	movs	r0, #20
 80024f4:	f7ff ffbc 	bl	8002470 <SetBitMask>
}
 80024f8:	bf00      	nop
 80024fa:	bd80      	pop	{r7, pc}

080024fc <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
    Write_MFRC522(CommandReg, PCD_RESETPHASE);
 8002500:	210f      	movs	r1, #15
 8002502:	2001      	movs	r0, #1
 8002504:	f7ff ff66 	bl	80023d4 <Write_MFRC522>
}
 8002508:	bf00      	nop
 800250a:	bd80      	pop	{r7, pc}

0800250c <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8002510:	2201      	movs	r2, #1
 8002512:	2140      	movs	r1, #64	@ 0x40
 8002514:	4812      	ldr	r0, [pc, #72]	@ (8002560 <MFRC522_Init+0x54>)
 8002516:	f002 f94f 	bl	80047b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MFRC522_RST_PORT,MFRC522_RST_PIN,GPIO_PIN_SET);
 800251a:	2201      	movs	r2, #1
 800251c:	2101      	movs	r1, #1
 800251e:	4811      	ldr	r0, [pc, #68]	@ (8002564 <MFRC522_Init+0x58>)
 8002520:	f002 f94a 	bl	80047b8 <HAL_GPIO_WritePin>
	MFRC522_Reset();
 8002524:	f7ff ffea 	bl	80024fc <MFRC522_Reset>

	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_MFRC522(TModeReg, 0x8D);		//Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 8002528:	218d      	movs	r1, #141	@ 0x8d
 800252a:	202a      	movs	r0, #42	@ 0x2a
 800252c:	f7ff ff52 	bl	80023d4 <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E);	//TModeReg[3..0] + TPrescalerReg
 8002530:	213e      	movs	r1, #62	@ 0x3e
 8002532:	202b      	movs	r0, #43	@ 0x2b
 8002534:	f7ff ff4e 	bl	80023d4 <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);
 8002538:	211e      	movs	r1, #30
 800253a:	202d      	movs	r0, #45	@ 0x2d
 800253c:	f7ff ff4a 	bl	80023d4 <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 8002540:	2100      	movs	r1, #0
 8002542:	202c      	movs	r0, #44	@ 0x2c
 8002544:	f7ff ff46 	bl	80023d4 <Write_MFRC522>

	Write_MFRC522(TxAutoReg, 0x40);		// force 100% ASK modulation
 8002548:	2140      	movs	r1, #64	@ 0x40
 800254a:	2015      	movs	r0, #21
 800254c:	f7ff ff42 	bl	80023d4 <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);		// CRC Initial value 0x6363
 8002550:	213d      	movs	r1, #61	@ 0x3d
 8002552:	2011      	movs	r0, #17
 8002554:	f7ff ff3e 	bl	80023d4 <Write_MFRC522>

	AntennaOn();
 8002558:	f7ff ffc5 	bl	80024e6 <AntennaOn>
}
 800255c:	bf00      	nop
 800255e:	bd80      	pop	{r7, pc}
 8002560:	40020000 	.word	0x40020000
 8002564:	40020400 	.word	0x40020400

08002568 <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
uchar MFRC522_ToCard(uchar command, uchar *sendData, uchar sendLen, uchar *backData, uint *backLen)
{
 8002568:	b590      	push	{r4, r7, lr}
 800256a:	b089      	sub	sp, #36	@ 0x24
 800256c:	af00      	add	r7, sp, #0
 800256e:	60b9      	str	r1, [r7, #8]
 8002570:	607b      	str	r3, [r7, #4]
 8002572:	4603      	mov	r3, r0
 8002574:	73fb      	strb	r3, [r7, #15]
 8002576:	4613      	mov	r3, r2
 8002578:	73bb      	strb	r3, [r7, #14]
    uchar status = MI_ERR;
 800257a:	2302      	movs	r3, #2
 800257c:	77fb      	strb	r3, [r7, #31]
    uchar irqEn = 0x00;
 800257e:	2300      	movs	r3, #0
 8002580:	77bb      	strb	r3, [r7, #30]
    uchar waitIRq = 0x00;
 8002582:	2300      	movs	r3, #0
 8002584:	777b      	strb	r3, [r7, #29]
    uchar lastBits;
    uchar n;
    uint i;

    switch (command)
 8002586:	7bfb      	ldrb	r3, [r7, #15]
 8002588:	2b0c      	cmp	r3, #12
 800258a:	d006      	beq.n	800259a <MFRC522_ToCard+0x32>
 800258c:	2b0e      	cmp	r3, #14
 800258e:	d109      	bne.n	80025a4 <MFRC522_ToCard+0x3c>
    {
        case PCD_AUTHENT:		// Certification cards close
		{
			irqEn = 0x12;
 8002590:	2312      	movs	r3, #18
 8002592:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x10;
 8002594:	2310      	movs	r3, #16
 8002596:	777b      	strb	r3, [r7, #29]
			break;
 8002598:	e005      	b.n	80025a6 <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE:	// Transmit FIFO data
		{
			irqEn = 0x77;
 800259a:	2377      	movs	r3, #119	@ 0x77
 800259c:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x30;
 800259e:	2330      	movs	r3, #48	@ 0x30
 80025a0:	777b      	strb	r3, [r7, #29]
			break;
 80025a2:	e000      	b.n	80025a6 <MFRC522_ToCard+0x3e>
		}
		default:
			break;
 80025a4:	bf00      	nop
    }

    Write_MFRC522(CommIEnReg, irqEn|0x80);	// Interrupt request
 80025a6:	7fbb      	ldrb	r3, [r7, #30]
 80025a8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	4619      	mov	r1, r3
 80025b0:	2002      	movs	r0, #2
 80025b2:	f7ff ff0f 	bl	80023d4 <Write_MFRC522>
    ClearBitMask(CommIrqReg, 0x80);			// Clear all interrupt request bit
 80025b6:	2180      	movs	r1, #128	@ 0x80
 80025b8:	2004      	movs	r0, #4
 80025ba:	f7ff ff74 	bl	80024a6 <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);			// FlushBuffer=1, FIFO Initialization
 80025be:	2180      	movs	r1, #128	@ 0x80
 80025c0:	200a      	movs	r0, #10
 80025c2:	f7ff ff55 	bl	8002470 <SetBitMask>

	Write_MFRC522(CommandReg, PCD_IDLE);	// NO action; Cancel the current command
 80025c6:	2100      	movs	r1, #0
 80025c8:	2001      	movs	r0, #1
 80025ca:	f7ff ff03 	bl	80023d4 <Write_MFRC522>

	// Writing data to the FIFO
    for (i=0; i<sendLen; i++)
 80025ce:	2300      	movs	r3, #0
 80025d0:	61bb      	str	r3, [r7, #24]
 80025d2:	e00a      	b.n	80025ea <MFRC522_ToCard+0x82>
    {
		Write_MFRC522(FIFODataReg, sendData[i]);
 80025d4:	68ba      	ldr	r2, [r7, #8]
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	4413      	add	r3, r2
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	4619      	mov	r1, r3
 80025de:	2009      	movs	r0, #9
 80025e0:	f7ff fef8 	bl	80023d4 <Write_MFRC522>
    for (i=0; i<sendLen; i++)
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	3301      	adds	r3, #1
 80025e8:	61bb      	str	r3, [r7, #24]
 80025ea:	7bbb      	ldrb	r3, [r7, #14]
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d3f0      	bcc.n	80025d4 <MFRC522_ToCard+0x6c>
	}

    // Execute the command
	Write_MFRC522(CommandReg, command);
 80025f2:	7bfb      	ldrb	r3, [r7, #15]
 80025f4:	4619      	mov	r1, r3
 80025f6:	2001      	movs	r0, #1
 80025f8:	f7ff feec 	bl	80023d4 <Write_MFRC522>
    if (command == PCD_TRANSCEIVE)
 80025fc:	7bfb      	ldrb	r3, [r7, #15]
 80025fe:	2b0c      	cmp	r3, #12
 8002600:	d103      	bne.n	800260a <MFRC522_ToCard+0xa2>
    {
		SetBitMask(BitFramingReg, 0x80);		// StartSend=1,transmission of data starts
 8002602:	2180      	movs	r1, #128	@ 0x80
 8002604:	200d      	movs	r0, #13
 8002606:	f7ff ff33 	bl	8002470 <SetBitMask>
	}

    // Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 800260a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800260e:	61bb      	str	r3, [r7, #24]
    do
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = Read_MFRC522(CommIrqReg);
 8002610:	2004      	movs	r0, #4
 8002612:	f7ff ff05 	bl	8002420 <Read_MFRC522>
 8002616:	4603      	mov	r3, r0
 8002618:	773b      	strb	r3, [r7, #28]
        i--;
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	3b01      	subs	r3, #1
 800261e:	61bb      	str	r3, [r7, #24]
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d00a      	beq.n	800263c <MFRC522_ToCard+0xd4>
 8002626:	7f3b      	ldrb	r3, [r7, #28]
 8002628:	f003 0301 	and.w	r3, r3, #1
 800262c:	2b00      	cmp	r3, #0
 800262e:	d105      	bne.n	800263c <MFRC522_ToCard+0xd4>
 8002630:	7f3a      	ldrb	r2, [r7, #28]
 8002632:	7f7b      	ldrb	r3, [r7, #29]
 8002634:	4013      	ands	r3, r2
 8002636:	b2db      	uxtb	r3, r3
 8002638:	2b00      	cmp	r3, #0
 800263a:	d0e9      	beq.n	8002610 <MFRC522_ToCard+0xa8>

    ClearBitMask(BitFramingReg, 0x80);			//StartSend=0
 800263c:	2180      	movs	r1, #128	@ 0x80
 800263e:	200d      	movs	r0, #13
 8002640:	f7ff ff31 	bl	80024a6 <ClearBitMask>

    if (i != 0)
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d052      	beq.n	80026f0 <MFRC522_ToCard+0x188>
    {
        if(!(Read_MFRC522(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 800264a:	2006      	movs	r0, #6
 800264c:	f7ff fee8 	bl	8002420 <Read_MFRC522>
 8002650:	4603      	mov	r3, r0
 8002652:	f003 031b 	and.w	r3, r3, #27
 8002656:	2b00      	cmp	r3, #0
 8002658:	d148      	bne.n	80026ec <MFRC522_ToCard+0x184>
        {
            status = MI_OK;
 800265a:	2300      	movs	r3, #0
 800265c:	77fb      	strb	r3, [r7, #31]
            if (n & irqEn & 0x01)
 800265e:	7f3a      	ldrb	r2, [r7, #28]
 8002660:	7fbb      	ldrb	r3, [r7, #30]
 8002662:	4013      	ands	r3, r2
 8002664:	b2db      	uxtb	r3, r3
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <MFRC522_ToCard+0x10a>
            {
				status = MI_NOTAGERR;
 800266e:	2301      	movs	r3, #1
 8002670:	77fb      	strb	r3, [r7, #31]
			}

            if (command == PCD_TRANSCEIVE)
 8002672:	7bfb      	ldrb	r3, [r7, #15]
 8002674:	2b0c      	cmp	r3, #12
 8002676:	d13b      	bne.n	80026f0 <MFRC522_ToCard+0x188>
            {
               	n = Read_MFRC522(FIFOLevelReg);
 8002678:	200a      	movs	r0, #10
 800267a:	f7ff fed1 	bl	8002420 <Read_MFRC522>
 800267e:	4603      	mov	r3, r0
 8002680:	773b      	strb	r3, [r7, #28]
              	lastBits = Read_MFRC522(ControlReg) & 0x07;
 8002682:	200c      	movs	r0, #12
 8002684:	f7ff fecc 	bl	8002420 <Read_MFRC522>
 8002688:	4603      	mov	r3, r0
 800268a:	f003 0307 	and.w	r3, r3, #7
 800268e:	75fb      	strb	r3, [r7, #23]
                if (lastBits)
 8002690:	7dfb      	ldrb	r3, [r7, #23]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d008      	beq.n	80026a8 <MFRC522_ToCard+0x140>
                {
					*backLen = (n-1)*8 + lastBits;
 8002696:	7f3b      	ldrb	r3, [r7, #28]
 8002698:	3b01      	subs	r3, #1
 800269a:	00da      	lsls	r2, r3, #3
 800269c:	7dfb      	ldrb	r3, [r7, #23]
 800269e:	4413      	add	r3, r2
 80026a0:	461a      	mov	r2, r3
 80026a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026a4:	601a      	str	r2, [r3, #0]
 80026a6:	e004      	b.n	80026b2 <MFRC522_ToCard+0x14a>
				}
                else
                {
					*backLen = n*8;
 80026a8:	7f3b      	ldrb	r3, [r7, #28]
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	461a      	mov	r2, r3
 80026ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026b0:	601a      	str	r2, [r3, #0]
				}

                if (n == 0)
 80026b2:	7f3b      	ldrb	r3, [r7, #28]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d101      	bne.n	80026bc <MFRC522_ToCard+0x154>
                {
					n = 1;
 80026b8:	2301      	movs	r3, #1
 80026ba:	773b      	strb	r3, [r7, #28]
				}
                if (n > MAX_LEN)
 80026bc:	7f3b      	ldrb	r3, [r7, #28]
 80026be:	2b10      	cmp	r3, #16
 80026c0:	d901      	bls.n	80026c6 <MFRC522_ToCard+0x15e>
                {
					n = MAX_LEN;
 80026c2:	2310      	movs	r3, #16
 80026c4:	773b      	strb	r3, [r7, #28]
				}

                // Reading the received data in FIFO
                for (i=0; i<n; i++)
 80026c6:	2300      	movs	r3, #0
 80026c8:	61bb      	str	r3, [r7, #24]
 80026ca:	e00a      	b.n	80026e2 <MFRC522_ToCard+0x17a>
                {
					backData[i] = Read_MFRC522(FIFODataReg);
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	18d4      	adds	r4, r2, r3
 80026d2:	2009      	movs	r0, #9
 80026d4:	f7ff fea4 	bl	8002420 <Read_MFRC522>
 80026d8:	4603      	mov	r3, r0
 80026da:	7023      	strb	r3, [r4, #0]
                for (i=0; i<n; i++)
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	3301      	adds	r3, #1
 80026e0:	61bb      	str	r3, [r7, #24]
 80026e2:	7f3b      	ldrb	r3, [r7, #28]
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d3f0      	bcc.n	80026cc <MFRC522_ToCard+0x164>
 80026ea:	e001      	b.n	80026f0 <MFRC522_ToCard+0x188>
				}
            }
        }
        else
        {
			status = MI_ERR;
 80026ec:	2302      	movs	r3, #2
 80026ee:	77fb      	strb	r3, [r7, #31]
    }

    //SetBitMask(ControlReg,0x80);           //timer stops
    //Write_MFRC522(CommandReg, PCD_IDLE);

    return status;
 80026f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3724      	adds	r7, #36	@ 0x24
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd90      	pop	{r4, r7, pc}

080026fa <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Request(uchar reqMode, uchar *TagType)
{
 80026fa:	b580      	push	{r7, lr}
 80026fc:	b086      	sub	sp, #24
 80026fe:	af02      	add	r7, sp, #8
 8002700:	4603      	mov	r3, r0
 8002702:	6039      	str	r1, [r7, #0]
 8002704:	71fb      	strb	r3, [r7, #7]
	uchar status;
	uint backBits;			 // The received data bits

	Write_MFRC522(BitFramingReg, 0x07);		//TxLastBists = BitFramingReg[2..0]
 8002706:	2107      	movs	r1, #7
 8002708:	200d      	movs	r0, #13
 800270a:	f7ff fe63 	bl	80023d4 <Write_MFRC522>

	TagType[0] = reqMode;
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	79fa      	ldrb	r2, [r7, #7]
 8002712:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8002714:	f107 0308 	add.w	r3, r7, #8
 8002718:	9300      	str	r3, [sp, #0]
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	2201      	movs	r2, #1
 800271e:	6839      	ldr	r1, [r7, #0]
 8002720:	200c      	movs	r0, #12
 8002722:	f7ff ff21 	bl	8002568 <MFRC522_ToCard>
 8002726:	4603      	mov	r3, r0
 8002728:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (backBits != 0x10))
 800272a:	7bfb      	ldrb	r3, [r7, #15]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d102      	bne.n	8002736 <MFRC522_Request+0x3c>
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	2b10      	cmp	r3, #16
 8002734:	d001      	beq.n	800273a <MFRC522_Request+0x40>
	{
		status = MI_ERR;
 8002736:	2302      	movs	r3, #2
 8002738:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 800273a:	7bfb      	ldrb	r3, [r7, #15]
}
 800273c:	4618      	mov	r0, r3
 800273e:	3710      	adds	r7, #16
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Anticoll(uchar *serNum)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af02      	add	r7, sp, #8
 800274a:	6078      	str	r0, [r7, #4]
    uchar status;
    uchar i;
	uchar serNumCheck=0;
 800274c:	2300      	movs	r3, #0
 800274e:	737b      	strb	r3, [r7, #13]
    uint unLen;

	Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8002750:	2100      	movs	r1, #0
 8002752:	200d      	movs	r0, #13
 8002754:	f7ff fe3e 	bl	80023d4 <Write_MFRC522>

    serNum[0] = PICC_ANTICOLL;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2293      	movs	r2, #147	@ 0x93
 800275c:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	3301      	adds	r3, #1
 8002762:	2220      	movs	r2, #32
 8002764:	701a      	strb	r2, [r3, #0]
    status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8002766:	f107 0308 	add.w	r3, r7, #8
 800276a:	9300      	str	r3, [sp, #0]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2202      	movs	r2, #2
 8002770:	6879      	ldr	r1, [r7, #4]
 8002772:	200c      	movs	r0, #12
 8002774:	f7ff fef8 	bl	8002568 <MFRC522_ToCard>
 8002778:	4603      	mov	r3, r0
 800277a:	73fb      	strb	r3, [r7, #15]

    if (status == MI_OK)
 800277c:	7bfb      	ldrb	r3, [r7, #15]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d118      	bne.n	80027b4 <MFRC522_Anticoll+0x70>
	{
    	 //Check card serial number
		for (i=0; i<4; i++)
 8002782:	2300      	movs	r3, #0
 8002784:	73bb      	strb	r3, [r7, #14]
 8002786:	e009      	b.n	800279c <MFRC522_Anticoll+0x58>
		{
		 	serNumCheck ^= serNum[i];
 8002788:	7bbb      	ldrb	r3, [r7, #14]
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	4413      	add	r3, r2
 800278e:	781a      	ldrb	r2, [r3, #0]
 8002790:	7b7b      	ldrb	r3, [r7, #13]
 8002792:	4053      	eors	r3, r2
 8002794:	737b      	strb	r3, [r7, #13]
		for (i=0; i<4; i++)
 8002796:	7bbb      	ldrb	r3, [r7, #14]
 8002798:	3301      	adds	r3, #1
 800279a:	73bb      	strb	r3, [r7, #14]
 800279c:	7bbb      	ldrb	r3, [r7, #14]
 800279e:	2b03      	cmp	r3, #3
 80027a0:	d9f2      	bls.n	8002788 <MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i])
 80027a2:	7bbb      	ldrb	r3, [r7, #14]
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	4413      	add	r3, r2
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	7b7a      	ldrb	r2, [r7, #13]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d001      	beq.n	80027b4 <MFRC522_Anticoll+0x70>
		{
			status = MI_ERR;
 80027b0:	2302      	movs	r3, #2
 80027b2:	73fb      	strb	r3, [r7, #15]
		}
    }

    return status;
 80027b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3710      	adds	r7, #16
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
	...

080027c0 <scan_motor_up>:

extern int motor_status;
extern osThreadId motorTaskHandle;
extern osThreadId rfidExecuteTaskHandle;

void scan_motor_up(){
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
	if(limit_switch_up){
 80027c4:	4b11      	ldr	r3, [pc, #68]	@ (800280c <scan_motor_up+0x4c>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d015      	beq.n	80027f8 <scan_motor_up+0x38>
		TIM1->CCR1 = 0;
 80027cc:	4b10      	ldr	r3, [pc, #64]	@ (8002810 <scan_motor_up+0x50>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	635a      	str	r2, [r3, #52]	@ 0x34
		motor_status = 1;
 80027d2:	4b10      	ldr	r3, [pc, #64]	@ (8002814 <scan_motor_up+0x54>)
 80027d4:	2201      	movs	r2, #1
 80027d6:	601a      	str	r2, [r3, #0]
		limit_switch_up = 0;
 80027d8:	4b0c      	ldr	r3, [pc, #48]	@ (800280c <scan_motor_up+0x4c>)
 80027da:	2200      	movs	r2, #0
 80027dc:	601a      	str	r2, [r3, #0]
		Publisher_state();
 80027de:	f001 f87b 	bl	80038d8 <Publisher_state>
		vTaskSuspend(rfidExecuteTaskHandle);
 80027e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002818 <scan_motor_up+0x58>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f006 f8c8 	bl	800897c <vTaskSuspend>
		vTaskSuspend(motorTaskHandle);
 80027ec:	4b0b      	ldr	r3, [pc, #44]	@ (800281c <scan_motor_up+0x5c>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f006 f8c3 	bl	800897c <vTaskSuspend>
	}else{
		change_motor_direction(1);
		TIM1->CCR1 = 400;
	}
}
 80027f6:	e006      	b.n	8002806 <scan_motor_up+0x46>
		change_motor_direction(1);
 80027f8:	2001      	movs	r0, #1
 80027fa:	f000 f841 	bl	8002880 <change_motor_direction>
		TIM1->CCR1 = 400;
 80027fe:	4b04      	ldr	r3, [pc, #16]	@ (8002810 <scan_motor_up+0x50>)
 8002800:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8002804:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002806:	bf00      	nop
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	20007934 	.word	0x20007934
 8002810:	40010000 	.word	0x40010000
 8002814:	200046e4 	.word	0x200046e4
 8002818:	200046ec 	.word	0x200046ec
 800281c:	200046f8 	.word	0x200046f8

08002820 <scan_motor_down>:

void scan_motor_down(){
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0
	if(limit_switch_down){
 8002824:	4b11      	ldr	r3, [pc, #68]	@ (800286c <scan_motor_down+0x4c>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d015      	beq.n	8002858 <scan_motor_down+0x38>
		TIM1->CCR1 = 0;
 800282c:	4b10      	ldr	r3, [pc, #64]	@ (8002870 <scan_motor_down+0x50>)
 800282e:	2200      	movs	r2, #0
 8002830:	635a      	str	r2, [r3, #52]	@ 0x34
		motor_status = 0;
 8002832:	4b10      	ldr	r3, [pc, #64]	@ (8002874 <scan_motor_down+0x54>)
 8002834:	2200      	movs	r2, #0
 8002836:	601a      	str	r2, [r3, #0]
		limit_switch_down = 0;
 8002838:	4b0c      	ldr	r3, [pc, #48]	@ (800286c <scan_motor_down+0x4c>)
 800283a:	2200      	movs	r2, #0
 800283c:	601a      	str	r2, [r3, #0]
		Publisher_state();
 800283e:	f001 f84b 	bl	80038d8 <Publisher_state>
		vTaskSuspend(rfidExecuteTaskHandle);
 8002842:	4b0d      	ldr	r3, [pc, #52]	@ (8002878 <scan_motor_down+0x58>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4618      	mov	r0, r3
 8002848:	f006 f898 	bl	800897c <vTaskSuspend>
		vTaskSuspend(motorTaskHandle);
 800284c:	4b0b      	ldr	r3, [pc, #44]	@ (800287c <scan_motor_down+0x5c>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4618      	mov	r0, r3
 8002852:	f006 f893 	bl	800897c <vTaskSuspend>
	}else{
		change_motor_direction(0);
		TIM1->CCR1 = 400;
	}
}
 8002856:	e006      	b.n	8002866 <scan_motor_down+0x46>
		change_motor_direction(0);
 8002858:	2000      	movs	r0, #0
 800285a:	f000 f811 	bl	8002880 <change_motor_direction>
		TIM1->CCR1 = 400;
 800285e:	4b04      	ldr	r3, [pc, #16]	@ (8002870 <scan_motor_down+0x50>)
 8002860:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8002864:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002866:	bf00      	nop
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	20007938 	.word	0x20007938
 8002870:	40010000 	.word	0x40010000
 8002874:	200046e4 	.word	0x200046e4
 8002878:	200046ec 	.word	0x200046ec
 800287c:	200046f8 	.word	0x200046f8

08002880 <change_motor_direction>:

/* 1:반시계 0:시계*/
void change_motor_direction(int direction){
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
	if(direction == 1){
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2b01      	cmp	r3, #1
 800288c:	d10a      	bne.n	80028a4 <change_motor_direction+0x24>
		HAL_GPIO_WritePin(Direction0_GPIO_Port, Direction0_Pin, GPIO_PIN_SET);
 800288e:	2201      	movs	r2, #1
 8002890:	2101      	movs	r1, #1
 8002892:	480d      	ldr	r0, [pc, #52]	@ (80028c8 <change_motor_direction+0x48>)
 8002894:	f001 ff90 	bl	80047b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Direction1_GPIO_Port, Direction1_Pin, GPIO_PIN_RESET);
 8002898:	2200      	movs	r2, #0
 800289a:	2102      	movs	r1, #2
 800289c:	480a      	ldr	r0, [pc, #40]	@ (80028c8 <change_motor_direction+0x48>)
 800289e:	f001 ff8b 	bl	80047b8 <HAL_GPIO_WritePin>
	}else if(direction == 0){
		HAL_GPIO_WritePin(Direction0_GPIO_Port, Direction0_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(Direction1_GPIO_Port, Direction1_Pin, GPIO_PIN_SET);
	}
}
 80028a2:	e00c      	b.n	80028be <change_motor_direction+0x3e>
	}else if(direction == 0){
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d109      	bne.n	80028be <change_motor_direction+0x3e>
		HAL_GPIO_WritePin(Direction0_GPIO_Port, Direction0_Pin, GPIO_PIN_RESET);
 80028aa:	2200      	movs	r2, #0
 80028ac:	2101      	movs	r1, #1
 80028ae:	4806      	ldr	r0, [pc, #24]	@ (80028c8 <change_motor_direction+0x48>)
 80028b0:	f001 ff82 	bl	80047b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Direction1_GPIO_Port, Direction1_Pin, GPIO_PIN_SET);
 80028b4:	2201      	movs	r2, #1
 80028b6:	2102      	movs	r1, #2
 80028b8:	4803      	ldr	r0, [pc, #12]	@ (80028c8 <change_motor_direction+0x48>)
 80028ba:	f001 ff7d 	bl	80047b8 <HAL_GPIO_WritePin>
}
 80028be:	bf00      	nop
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	40020000 	.word	0x40020000

080028cc <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80028d0:	4b17      	ldr	r3, [pc, #92]	@ (8002930 <MX_SPI2_Init+0x64>)
 80028d2:	4a18      	ldr	r2, [pc, #96]	@ (8002934 <MX_SPI2_Init+0x68>)
 80028d4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80028d6:	4b16      	ldr	r3, [pc, #88]	@ (8002930 <MX_SPI2_Init+0x64>)
 80028d8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80028dc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80028de:	4b14      	ldr	r3, [pc, #80]	@ (8002930 <MX_SPI2_Init+0x64>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80028e4:	4b12      	ldr	r3, [pc, #72]	@ (8002930 <MX_SPI2_Init+0x64>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80028ea:	4b11      	ldr	r3, [pc, #68]	@ (8002930 <MX_SPI2_Init+0x64>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80028f0:	4b0f      	ldr	r3, [pc, #60]	@ (8002930 <MX_SPI2_Init+0x64>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80028f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002930 <MX_SPI2_Init+0x64>)
 80028f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028fc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80028fe:	4b0c      	ldr	r3, [pc, #48]	@ (8002930 <MX_SPI2_Init+0x64>)
 8002900:	2210      	movs	r2, #16
 8002902:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002904:	4b0a      	ldr	r3, [pc, #40]	@ (8002930 <MX_SPI2_Init+0x64>)
 8002906:	2200      	movs	r2, #0
 8002908:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800290a:	4b09      	ldr	r3, [pc, #36]	@ (8002930 <MX_SPI2_Init+0x64>)
 800290c:	2200      	movs	r2, #0
 800290e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002910:	4b07      	ldr	r3, [pc, #28]	@ (8002930 <MX_SPI2_Init+0x64>)
 8002912:	2200      	movs	r2, #0
 8002914:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002916:	4b06      	ldr	r3, [pc, #24]	@ (8002930 <MX_SPI2_Init+0x64>)
 8002918:	220a      	movs	r2, #10
 800291a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800291c:	4804      	ldr	r0, [pc, #16]	@ (8002930 <MX_SPI2_Init+0x64>)
 800291e:	f002 fde7 	bl	80054f0 <HAL_SPI_Init>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002928:	f7ff fbd2 	bl	80020d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800292c:	bf00      	nop
 800292e:	bd80      	pop	{r7, pc}
 8002930:	2000793c 	.word	0x2000793c
 8002934:	40003800 	.word	0x40003800

08002938 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b08a      	sub	sp, #40	@ 0x28
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002940:	f107 0314 	add.w	r3, r7, #20
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]
 8002948:	605a      	str	r2, [r3, #4]
 800294a:	609a      	str	r2, [r3, #8]
 800294c:	60da      	str	r2, [r3, #12]
 800294e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a34      	ldr	r2, [pc, #208]	@ (8002a28 <HAL_SPI_MspInit+0xf0>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d162      	bne.n	8002a20 <HAL_SPI_MspInit+0xe8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800295a:	2300      	movs	r3, #0
 800295c:	613b      	str	r3, [r7, #16]
 800295e:	4b33      	ldr	r3, [pc, #204]	@ (8002a2c <HAL_SPI_MspInit+0xf4>)
 8002960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002962:	4a32      	ldr	r2, [pc, #200]	@ (8002a2c <HAL_SPI_MspInit+0xf4>)
 8002964:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002968:	6413      	str	r3, [r2, #64]	@ 0x40
 800296a:	4b30      	ldr	r3, [pc, #192]	@ (8002a2c <HAL_SPI_MspInit+0xf4>)
 800296c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800296e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002972:	613b      	str	r3, [r7, #16]
 8002974:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002976:	2300      	movs	r3, #0
 8002978:	60fb      	str	r3, [r7, #12]
 800297a:	4b2c      	ldr	r3, [pc, #176]	@ (8002a2c <HAL_SPI_MspInit+0xf4>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800297e:	4a2b      	ldr	r2, [pc, #172]	@ (8002a2c <HAL_SPI_MspInit+0xf4>)
 8002980:	f043 0304 	orr.w	r3, r3, #4
 8002984:	6313      	str	r3, [r2, #48]	@ 0x30
 8002986:	4b29      	ldr	r3, [pc, #164]	@ (8002a2c <HAL_SPI_MspInit+0xf4>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800298a:	f003 0304 	and.w	r3, r3, #4
 800298e:	60fb      	str	r3, [r7, #12]
 8002990:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002992:	2300      	movs	r3, #0
 8002994:	60bb      	str	r3, [r7, #8]
 8002996:	4b25      	ldr	r3, [pc, #148]	@ (8002a2c <HAL_SPI_MspInit+0xf4>)
 8002998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800299a:	4a24      	ldr	r2, [pc, #144]	@ (8002a2c <HAL_SPI_MspInit+0xf4>)
 800299c:	f043 0302 	orr.w	r3, r3, #2
 80029a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80029a2:	4b22      	ldr	r3, [pc, #136]	@ (8002a2c <HAL_SPI_MspInit+0xf4>)
 80029a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	60bb      	str	r3, [r7, #8]
 80029ac:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80029ae:	2302      	movs	r3, #2
 80029b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b2:	2302      	movs	r3, #2
 80029b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b6:	2300      	movs	r3, #0
 80029b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ba:	2303      	movs	r3, #3
 80029bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 80029be:	2307      	movs	r3, #7
 80029c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029c2:	f107 0314 	add.w	r3, r7, #20
 80029c6:	4619      	mov	r1, r3
 80029c8:	4819      	ldr	r0, [pc, #100]	@ (8002a30 <HAL_SPI_MspInit+0xf8>)
 80029ca:	f001 fd61 	bl	8004490 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80029ce:	2304      	movs	r3, #4
 80029d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d2:	2302      	movs	r3, #2
 80029d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d6:	2300      	movs	r3, #0
 80029d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029da:	2303      	movs	r3, #3
 80029dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80029de:	2305      	movs	r3, #5
 80029e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029e2:	f107 0314 	add.w	r3, r7, #20
 80029e6:	4619      	mov	r1, r3
 80029e8:	4811      	ldr	r0, [pc, #68]	@ (8002a30 <HAL_SPI_MspInit+0xf8>)
 80029ea:	f001 fd51 	bl	8004490 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80029ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80029f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f4:	2302      	movs	r3, #2
 80029f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f8:	2300      	movs	r3, #0
 80029fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029fc:	2303      	movs	r3, #3
 80029fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002a00:	2305      	movs	r3, #5
 8002a02:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a04:	f107 0314 	add.w	r3, r7, #20
 8002a08:	4619      	mov	r1, r3
 8002a0a:	480a      	ldr	r0, [pc, #40]	@ (8002a34 <HAL_SPI_MspInit+0xfc>)
 8002a0c:	f001 fd40 	bl	8004490 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8002a10:	2200      	movs	r2, #0
 8002a12:	2105      	movs	r1, #5
 8002a14:	2024      	movs	r0, #36	@ 0x24
 8002a16:	f001 f90f 	bl	8003c38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002a1a:	2024      	movs	r0, #36	@ 0x24
 8002a1c:	f001 f928 	bl	8003c70 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002a20:	bf00      	nop
 8002a22:	3728      	adds	r7, #40	@ 0x28
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	40003800 	.word	0x40003800
 8002a2c:	40023800 	.word	0x40023800
 8002a30:	40020800 	.word	0x40020800
 8002a34:	40020400 	.word	0x40020400

08002a38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a3e:	2300      	movs	r3, #0
 8002a40:	607b      	str	r3, [r7, #4]
 8002a42:	4b12      	ldr	r3, [pc, #72]	@ (8002a8c <HAL_MspInit+0x54>)
 8002a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a46:	4a11      	ldr	r2, [pc, #68]	@ (8002a8c <HAL_MspInit+0x54>)
 8002a48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a4e:	4b0f      	ldr	r3, [pc, #60]	@ (8002a8c <HAL_MspInit+0x54>)
 8002a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a56:	607b      	str	r3, [r7, #4]
 8002a58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	603b      	str	r3, [r7, #0]
 8002a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8002a8c <HAL_MspInit+0x54>)
 8002a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a62:	4a0a      	ldr	r2, [pc, #40]	@ (8002a8c <HAL_MspInit+0x54>)
 8002a64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a68:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a6a:	4b08      	ldr	r3, [pc, #32]	@ (8002a8c <HAL_MspInit+0x54>)
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a72:	603b      	str	r3, [r7, #0]
 8002a74:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002a76:	2200      	movs	r2, #0
 8002a78:	210f      	movs	r1, #15
 8002a7a:	f06f 0001 	mvn.w	r0, #1
 8002a7e:	f001 f8db 	bl	8003c38 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a82:	bf00      	nop
 8002a84:	3708      	adds	r7, #8
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	40023800 	.word	0x40023800

08002a90 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b08e      	sub	sp, #56	@ 0x38
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	60fb      	str	r3, [r7, #12]
 8002aa4:	4b33      	ldr	r3, [pc, #204]	@ (8002b74 <HAL_InitTick+0xe4>)
 8002aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa8:	4a32      	ldr	r2, [pc, #200]	@ (8002b74 <HAL_InitTick+0xe4>)
 8002aaa:	f043 0304 	orr.w	r3, r3, #4
 8002aae:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ab0:	4b30      	ldr	r3, [pc, #192]	@ (8002b74 <HAL_InitTick+0xe4>)
 8002ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab4:	f003 0304 	and.w	r3, r3, #4
 8002ab8:	60fb      	str	r3, [r7, #12]
 8002aba:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002abc:	f107 0210 	add.w	r2, r7, #16
 8002ac0:	f107 0314 	add.w	r3, r7, #20
 8002ac4:	4611      	mov	r1, r2
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f002 f812 	bl	8004af0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002acc:	6a3b      	ldr	r3, [r7, #32]
 8002ace:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002ad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d103      	bne.n	8002ade <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002ad6:	f001 ffe3 	bl	8004aa0 <HAL_RCC_GetPCLK1Freq>
 8002ada:	6378      	str	r0, [r7, #52]	@ 0x34
 8002adc:	e004      	b.n	8002ae8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002ade:	f001 ffdf 	bl	8004aa0 <HAL_RCC_GetPCLK1Freq>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002ae8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002aea:	4a23      	ldr	r2, [pc, #140]	@ (8002b78 <HAL_InitTick+0xe8>)
 8002aec:	fba2 2303 	umull	r2, r3, r2, r3
 8002af0:	0c9b      	lsrs	r3, r3, #18
 8002af2:	3b01      	subs	r3, #1
 8002af4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8002af6:	4b21      	ldr	r3, [pc, #132]	@ (8002b7c <HAL_InitTick+0xec>)
 8002af8:	4a21      	ldr	r2, [pc, #132]	@ (8002b80 <HAL_InitTick+0xf0>)
 8002afa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8002afc:	4b1f      	ldr	r3, [pc, #124]	@ (8002b7c <HAL_InitTick+0xec>)
 8002afe:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002b02:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8002b04:	4a1d      	ldr	r2, [pc, #116]	@ (8002b7c <HAL_InitTick+0xec>)
 8002b06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b08:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8002b0a:	4b1c      	ldr	r3, [pc, #112]	@ (8002b7c <HAL_InitTick+0xec>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b10:	4b1a      	ldr	r3, [pc, #104]	@ (8002b7c <HAL_InitTick+0xec>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b16:	4b19      	ldr	r3, [pc, #100]	@ (8002b7c <HAL_InitTick+0xec>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8002b1c:	4817      	ldr	r0, [pc, #92]	@ (8002b7c <HAL_InitTick+0xec>)
 8002b1e:	f003 f90f 	bl	8005d40 <HAL_TIM_Base_Init>
 8002b22:	4603      	mov	r3, r0
 8002b24:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002b28:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d11b      	bne.n	8002b68 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8002b30:	4812      	ldr	r0, [pc, #72]	@ (8002b7c <HAL_InitTick+0xec>)
 8002b32:	f003 f95f 	bl	8005df4 <HAL_TIM_Base_Start_IT>
 8002b36:	4603      	mov	r3, r0
 8002b38:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002b3c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d111      	bne.n	8002b68 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002b44:	201e      	movs	r0, #30
 8002b46:	f001 f893 	bl	8003c70 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2b0f      	cmp	r3, #15
 8002b4e:	d808      	bhi.n	8002b62 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8002b50:	2200      	movs	r2, #0
 8002b52:	6879      	ldr	r1, [r7, #4]
 8002b54:	201e      	movs	r0, #30
 8002b56:	f001 f86f 	bl	8003c38 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002b5a:	4a0a      	ldr	r2, [pc, #40]	@ (8002b84 <HAL_InitTick+0xf4>)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6013      	str	r3, [r2, #0]
 8002b60:	e002      	b.n	8002b68 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002b68:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3738      	adds	r7, #56	@ 0x38
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	40023800 	.word	0x40023800
 8002b78:	431bde83 	.word	0x431bde83
 8002b7c:	20007994 	.word	0x20007994
 8002b80:	40000800 	.word	0x40000800
 8002b84:	20000010 	.word	0x20000010

08002b88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002b8c:	bf00      	nop
 8002b8e:	e7fd      	b.n	8002b8c <NMI_Handler+0x4>

08002b90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b94:	bf00      	nop
 8002b96:	e7fd      	b.n	8002b94 <HardFault_Handler+0x4>

08002b98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b9c:	bf00      	nop
 8002b9e:	e7fd      	b.n	8002b9c <MemManage_Handler+0x4>

08002ba0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ba4:	bf00      	nop
 8002ba6:	e7fd      	b.n	8002ba4 <BusFault_Handler+0x4>

08002ba8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bac:	bf00      	nop
 8002bae:	e7fd      	b.n	8002bac <UsageFault_Handler+0x4>

08002bb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bb4:	bf00      	nop
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr

08002bbe <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Limit_switch_up_Pin);
 8002bc2:	2010      	movs	r0, #16
 8002bc4:	f001 fe12 	bl	80047ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002bc8:	bf00      	nop
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002bd0:	4802      	ldr	r0, [pc, #8]	@ (8002bdc <DMA1_Stream5_IRQHandler+0x10>)
 8002bd2:	f001 f9f3 	bl	8003fbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002bd6:	bf00      	nop
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	20008298 	.word	0x20008298

08002be0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Limit_switch_down_Pin);
 8002be4:	2020      	movs	r0, #32
 8002be6:	f001 fe01 	bl	80047ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002bea:	bf00      	nop
 8002bec:	bd80      	pop	{r7, pc}
	...

08002bf0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002bf4:	4802      	ldr	r0, [pc, #8]	@ (8002c00 <TIM4_IRQHandler+0x10>)
 8002bf6:	f003 fa85 	bl	8006104 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002bfa:	bf00      	nop
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	20007994 	.word	0x20007994

08002c04 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002c08:	4802      	ldr	r0, [pc, #8]	@ (8002c14 <SPI2_IRQHandler+0x10>)
 8002c0a:	f002 feab 	bl	8005964 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002c0e:	bf00      	nop
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	2000793c 	.word	0x2000793c

08002c18 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002c1c:	4802      	ldr	r0, [pc, #8]	@ (8002c28 <USART1_IRQHandler+0x10>)
 8002c1e:	f004 f99f 	bl	8006f60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002c22:	bf00      	nop
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	20008118 	.word	0x20008118

08002c2c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002c30:	4802      	ldr	r0, [pc, #8]	@ (8002c3c <USART3_IRQHandler+0x10>)
 8002c32:	f004 f995 	bl	8006f60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002c36:	bf00      	nop
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	200081a8 	.word	0x200081a8

08002c40 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8002c44:	4802      	ldr	r0, [pc, #8]	@ (8002c50 <DMA2_Stream1_IRQHandler+0x10>)
 8002c46:	f001 f9b9 	bl	8003fbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002c4a:	bf00      	nop
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	200082f8 	.word	0x200082f8

08002c54 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002c58:	4802      	ldr	r0, [pc, #8]	@ (8002c64 <DMA2_Stream5_IRQHandler+0x10>)
 8002c5a:	f001 f9af 	bl	8003fbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8002c5e:	bf00      	nop
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	20008238 	.word	0x20008238

08002c68 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8002c6c:	4802      	ldr	r0, [pc, #8]	@ (8002c78 <DMA2_Stream6_IRQHandler+0x10>)
 8002c6e:	f001 f9a5 	bl	8003fbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8002c72:	bf00      	nop
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	20008358 	.word	0x20008358

08002c7c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002c80:	4802      	ldr	r0, [pc, #8]	@ (8002c8c <USART6_IRQHandler+0x10>)
 8002c82:	f004 f96d 	bl	8006f60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002c86:	bf00      	nop
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	200081f0 	.word	0x200081f0

08002c90 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0
  return 1;
 8002c94:	2301      	movs	r3, #1
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <_kill>:

int _kill(int pid, int sig)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002caa:	f015 f8ab 	bl	8017e04 <__errno>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2216      	movs	r2, #22
 8002cb2:	601a      	str	r2, [r3, #0]
  return -1;
 8002cb4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3708      	adds	r7, #8
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <_exit>:

void _exit (int status)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002cc8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f7ff ffe7 	bl	8002ca0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002cd2:	bf00      	nop
 8002cd4:	e7fd      	b.n	8002cd2 <_exit+0x12>

08002cd6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b086      	sub	sp, #24
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	60f8      	str	r0, [r7, #12]
 8002cde:	60b9      	str	r1, [r7, #8]
 8002ce0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	617b      	str	r3, [r7, #20]
 8002ce6:	e00a      	b.n	8002cfe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002ce8:	f3af 8000 	nop.w
 8002cec:	4601      	mov	r1, r0
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	1c5a      	adds	r2, r3, #1
 8002cf2:	60ba      	str	r2, [r7, #8]
 8002cf4:	b2ca      	uxtb	r2, r1
 8002cf6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	617b      	str	r3, [r7, #20]
 8002cfe:	697a      	ldr	r2, [r7, #20]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	dbf0      	blt.n	8002ce8 <_read+0x12>
  }

  return len;
 8002d06:	687b      	ldr	r3, [r7, #4]
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3718      	adds	r7, #24
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b086      	sub	sp, #24
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	617b      	str	r3, [r7, #20]
 8002d20:	e009      	b.n	8002d36 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	1c5a      	adds	r2, r3, #1
 8002d26:	60ba      	str	r2, [r7, #8]
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	3301      	adds	r3, #1
 8002d34:	617b      	str	r3, [r7, #20]
 8002d36:	697a      	ldr	r2, [r7, #20]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	dbf1      	blt.n	8002d22 <_write+0x12>
  }
  return len;
 8002d3e:	687b      	ldr	r3, [r7, #4]
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3718      	adds	r7, #24
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <_close>:

int _close(int file)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002d50:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002d70:	605a      	str	r2, [r3, #4]
  return 0;
 8002d72:	2300      	movs	r3, #0
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <_isatty>:

int _isatty(int file)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002d88:	2301      	movs	r3, #1
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr

08002d96 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d96:	b480      	push	{r7}
 8002d98:	b085      	sub	sp, #20
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	60f8      	str	r0, [r7, #12]
 8002d9e:	60b9      	str	r1, [r7, #8]
 8002da0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3714      	adds	r7, #20
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b086      	sub	sp, #24
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002db8:	4a14      	ldr	r2, [pc, #80]	@ (8002e0c <_sbrk+0x5c>)
 8002dba:	4b15      	ldr	r3, [pc, #84]	@ (8002e10 <_sbrk+0x60>)
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002dc4:	4b13      	ldr	r3, [pc, #76]	@ (8002e14 <_sbrk+0x64>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d102      	bne.n	8002dd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002dcc:	4b11      	ldr	r3, [pc, #68]	@ (8002e14 <_sbrk+0x64>)
 8002dce:	4a12      	ldr	r2, [pc, #72]	@ (8002e18 <_sbrk+0x68>)
 8002dd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002dd2:	4b10      	ldr	r3, [pc, #64]	@ (8002e14 <_sbrk+0x64>)
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4413      	add	r3, r2
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d207      	bcs.n	8002df0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002de0:	f015 f810 	bl	8017e04 <__errno>
 8002de4:	4603      	mov	r3, r0
 8002de6:	220c      	movs	r2, #12
 8002de8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002dea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002dee:	e009      	b.n	8002e04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002df0:	4b08      	ldr	r3, [pc, #32]	@ (8002e14 <_sbrk+0x64>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002df6:	4b07      	ldr	r3, [pc, #28]	@ (8002e14 <_sbrk+0x64>)
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	4a05      	ldr	r2, [pc, #20]	@ (8002e14 <_sbrk+0x64>)
 8002e00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e02:	68fb      	ldr	r3, [r7, #12]
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3718      	adds	r7, #24
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	20020000 	.word	0x20020000
 8002e10:	00000400 	.word	0x00000400
 8002e14:	200079e0 	.word	0x200079e0
 8002e18:	20010dd8 	.word	0x20010dd8

08002e1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e20:	4b06      	ldr	r3, [pc, #24]	@ (8002e3c <SystemInit+0x20>)
 8002e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e26:	4a05      	ldr	r2, [pc, #20]	@ (8002e3c <SystemInit+0x20>)
 8002e28:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002e2c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e30:	bf00      	nop
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	e000ed00 	.word	0xe000ed00

08002e40 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b092      	sub	sp, #72	@ 0x48
 8002e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e46:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	601a      	str	r2, [r3, #0]
 8002e4e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e54:	2200      	movs	r2, #0
 8002e56:	601a      	str	r2, [r3, #0]
 8002e58:	605a      	str	r2, [r3, #4]
 8002e5a:	609a      	str	r2, [r3, #8]
 8002e5c:	60da      	str	r2, [r3, #12]
 8002e5e:	611a      	str	r2, [r3, #16]
 8002e60:	615a      	str	r2, [r3, #20]
 8002e62:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002e64:	1d3b      	adds	r3, r7, #4
 8002e66:	2220      	movs	r2, #32
 8002e68:	2100      	movs	r1, #0
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f014 fedc 	bl	8017c28 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002e70:	4b33      	ldr	r3, [pc, #204]	@ (8002f40 <MX_TIM1_Init+0x100>)
 8002e72:	4a34      	ldr	r2, [pc, #208]	@ (8002f44 <MX_TIM1_Init+0x104>)
 8002e74:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 180-1;
 8002e76:	4b32      	ldr	r3, [pc, #200]	@ (8002f40 <MX_TIM1_Init+0x100>)
 8002e78:	22b3      	movs	r2, #179	@ 0xb3
 8002e7a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e7c:	4b30      	ldr	r3, [pc, #192]	@ (8002f40 <MX_TIM1_Init+0x100>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8002e82:	4b2f      	ldr	r3, [pc, #188]	@ (8002f40 <MX_TIM1_Init+0x100>)
 8002e84:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002e88:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e8a:	4b2d      	ldr	r3, [pc, #180]	@ (8002f40 <MX_TIM1_Init+0x100>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002e90:	4b2b      	ldr	r3, [pc, #172]	@ (8002f40 <MX_TIM1_Init+0x100>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e96:	4b2a      	ldr	r3, [pc, #168]	@ (8002f40 <MX_TIM1_Init+0x100>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002e9c:	4828      	ldr	r0, [pc, #160]	@ (8002f40 <MX_TIM1_Init+0x100>)
 8002e9e:	f003 f819 	bl	8005ed4 <HAL_TIM_PWM_Init>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d001      	beq.n	8002eac <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8002ea8:	f7ff f912 	bl	80020d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002eac:	2300      	movs	r3, #0
 8002eae:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002eb4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002eb8:	4619      	mov	r1, r3
 8002eba:	4821      	ldr	r0, [pc, #132]	@ (8002f40 <MX_TIM1_Init+0x100>)
 8002ebc:	f003 fd7e 	bl	80069bc <HAL_TIMEx_MasterConfigSynchronization>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8002ec6:	f7ff f903 	bl	80020d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002eca:	2360      	movs	r3, #96	@ 0x60
 8002ecc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002eda:	2300      	movs	r3, #0
 8002edc:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ee6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002eea:	2200      	movs	r2, #0
 8002eec:	4619      	mov	r1, r3
 8002eee:	4814      	ldr	r0, [pc, #80]	@ (8002f40 <MX_TIM1_Init+0x100>)
 8002ef0:	f003 f9f8 	bl	80062e4 <HAL_TIM_PWM_ConfigChannel>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8002efa:	f7ff f8e9 	bl	80020d0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002efe:	2300      	movs	r3, #0
 8002f00:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002f02:	2300      	movs	r3, #0
 8002f04:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002f06:	2300      	movs	r3, #0
 8002f08:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002f12:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002f16:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002f1c:	1d3b      	adds	r3, r7, #4
 8002f1e:	4619      	mov	r1, r3
 8002f20:	4807      	ldr	r0, [pc, #28]	@ (8002f40 <MX_TIM1_Init+0x100>)
 8002f22:	f003 fdc7 	bl	8006ab4 <HAL_TIMEx_ConfigBreakDeadTime>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8002f2c:	f7ff f8d0 	bl	80020d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002f30:	4803      	ldr	r0, [pc, #12]	@ (8002f40 <MX_TIM1_Init+0x100>)
 8002f32:	f000 f82b 	bl	8002f8c <HAL_TIM_MspPostInit>

}
 8002f36:	bf00      	nop
 8002f38:	3748      	adds	r7, #72	@ 0x48
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	200079e4 	.word	0x200079e4
 8002f44:	40010000 	.word	0x40010000

08002f48 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b085      	sub	sp, #20
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a0b      	ldr	r2, [pc, #44]	@ (8002f84 <HAL_TIM_PWM_MspInit+0x3c>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d10d      	bne.n	8002f76 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	60fb      	str	r3, [r7, #12]
 8002f5e:	4b0a      	ldr	r3, [pc, #40]	@ (8002f88 <HAL_TIM_PWM_MspInit+0x40>)
 8002f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f62:	4a09      	ldr	r2, [pc, #36]	@ (8002f88 <HAL_TIM_PWM_MspInit+0x40>)
 8002f64:	f043 0301 	orr.w	r3, r3, #1
 8002f68:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f6a:	4b07      	ldr	r3, [pc, #28]	@ (8002f88 <HAL_TIM_PWM_MspInit+0x40>)
 8002f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	60fb      	str	r3, [r7, #12]
 8002f74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002f76:	bf00      	nop
 8002f78:	3714      	adds	r7, #20
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	40010000 	.word	0x40010000
 8002f88:	40023800 	.word	0x40023800

08002f8c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b088      	sub	sp, #32
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f94:	f107 030c 	add.w	r3, r7, #12
 8002f98:	2200      	movs	r2, #0
 8002f9a:	601a      	str	r2, [r3, #0]
 8002f9c:	605a      	str	r2, [r3, #4]
 8002f9e:	609a      	str	r2, [r3, #8]
 8002fa0:	60da      	str	r2, [r3, #12]
 8002fa2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a12      	ldr	r2, [pc, #72]	@ (8002ff4 <HAL_TIM_MspPostInit+0x68>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d11e      	bne.n	8002fec <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fae:	2300      	movs	r3, #0
 8002fb0:	60bb      	str	r3, [r7, #8]
 8002fb2:	4b11      	ldr	r3, [pc, #68]	@ (8002ff8 <HAL_TIM_MspPostInit+0x6c>)
 8002fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb6:	4a10      	ldr	r2, [pc, #64]	@ (8002ff8 <HAL_TIM_MspPostInit+0x6c>)
 8002fb8:	f043 0301 	orr.w	r3, r3, #1
 8002fbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fbe:	4b0e      	ldr	r3, [pc, #56]	@ (8002ff8 <HAL_TIM_MspPostInit+0x6c>)
 8002fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fc2:	f003 0301 	and.w	r3, r3, #1
 8002fc6:	60bb      	str	r3, [r7, #8]
 8002fc8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = Motor_pwm_Pin;
 8002fca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002fce:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fd0:	2302      	movs	r3, #2
 8002fd2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Motor_pwm_GPIO_Port, &GPIO_InitStruct);
 8002fe0:	f107 030c 	add.w	r3, r7, #12
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	4805      	ldr	r0, [pc, #20]	@ (8002ffc <HAL_TIM_MspPostInit+0x70>)
 8002fe8:	f001 fa52 	bl	8004490 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002fec:	bf00      	nop
 8002fee:	3720      	adds	r7, #32
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	40010000 	.word	0x40010000
 8002ff8:	40023800 	.word	0x40023800
 8002ffc:	40020000 	.word	0x40020000

08003000 <uart_init>:
extern osThreadId rfidExecuteTaskHandle;

queue8_t uart_queue;
queue8_t uart2_queue;

void uart_init(){
 8003000:	b580      	push	{r7, lr}
 8003002:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&huart1, uart_queue.buf, QUEUE_BUF_MAX) ;
 8003004:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003008:	4906      	ldr	r1, [pc, #24]	@ (8003024 <uart_init+0x24>)
 800300a:	4807      	ldr	r0, [pc, #28]	@ (8003028 <uart_init+0x28>)
 800300c:	f003 ff04 	bl	8006e18 <HAL_UART_Receive_DMA>
	uart_queue.q_in_index = 0;
 8003010:	4b04      	ldr	r3, [pc, #16]	@ (8003024 <uart_init+0x24>)
 8003012:	2200      	movs	r2, #0
 8003014:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
	uart_queue.q_out_index = 0;
 8003018:	4b02      	ldr	r3, [pc, #8]	@ (8003024 <uart_init+0x24>)
 800301a:	2200      	movs	r2, #0
 800301c:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
}
 8003020:	bf00      	nop
 8003022:	bd80      	pop	{r7, pc}
 8003024:	20007a2c 	.word	0x20007a2c
 8003028:	20008118 	.word	0x20008118

0800302c <uart_available>:

uint32_t uart_available(void){
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
	uint32_t ret = 0;
 8003032:	2300      	movs	r3, #0
 8003034:	607b      	str	r3, [r7, #4]
	uart_queue.q_in_index = (QUEUE_BUF_MAX - huart1.hdmarx->Instance->NDTR) % QUEUE_BUF_MAX; //원형 큐
 8003036:	4b11      	ldr	r3, [pc, #68]	@ (800307c <uart_available+0x50>)
 8003038:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	b29b      	uxth	r3, r3
 8003040:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8003044:	b29b      	uxth	r3, r3
 8003046:	b2db      	uxtb	r3, r3
 8003048:	b29a      	uxth	r2, r3
 800304a:	4b0d      	ldr	r3, [pc, #52]	@ (8003080 <uart_available+0x54>)
 800304c:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
//	hdmarx->Instance->CNDTR
	ret = (QUEUE_BUF_MAX + uart_queue.q_in_index - uart_queue.q_out_index) % QUEUE_BUF_MAX; // 버퍼 데이터 개수
 8003050:	4b0b      	ldr	r3, [pc, #44]	@ (8003080 <uart_available+0x54>)
 8003052:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 8003056:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800305a:	4a09      	ldr	r2, [pc, #36]	@ (8003080 <uart_available+0x54>)
 800305c:	f8b2 2102 	ldrh.w	r2, [r2, #258]	@ 0x102
 8003060:	1a9b      	subs	r3, r3, r2
 8003062:	425a      	negs	r2, r3
 8003064:	b2db      	uxtb	r3, r3
 8003066:	b2d2      	uxtb	r2, r2
 8003068:	bf58      	it	pl
 800306a:	4253      	negpl	r3, r2
 800306c:	607b      	str	r3, [r7, #4]

	return ret;
 800306e:	687b      	ldr	r3, [r7, #4]
}
 8003070:	4618      	mov	r0, r3
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr
 800307c:	20008118 	.word	0x20008118
 8003080:	20007a2c 	.word	0x20007a2c

08003084 <uart_q8_read>:

uint8_t uart_q8_read(void){
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
	uint8_t ret =0;
 800308a:	2300      	movs	r3, #0
 800308c:	71fb      	strb	r3, [r7, #7]
	if(uart_queue.q_out_index != uart_queue.q_in_index){
 800308e:	4b11      	ldr	r3, [pc, #68]	@ (80030d4 <uart_q8_read+0x50>)
 8003090:	f8b3 2102 	ldrh.w	r2, [r3, #258]	@ 0x102
 8003094:	4b0f      	ldr	r3, [pc, #60]	@ (80030d4 <uart_q8_read+0x50>)
 8003096:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 800309a:	429a      	cmp	r2, r3
 800309c:	d013      	beq.n	80030c6 <uart_q8_read+0x42>
		ret = uart_queue.buf[uart_queue.q_out_index];
 800309e:	4b0d      	ldr	r3, [pc, #52]	@ (80030d4 <uart_q8_read+0x50>)
 80030a0:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 80030a4:	461a      	mov	r2, r3
 80030a6:	4b0b      	ldr	r3, [pc, #44]	@ (80030d4 <uart_q8_read+0x50>)
 80030a8:	5c9b      	ldrb	r3, [r3, r2]
 80030aa:	71fb      	strb	r3, [r7, #7]
		uart_queue.q_out_index = (uart_queue.q_out_index +1) % QUEUE_BUF_MAX;
 80030ac:	4b09      	ldr	r3, [pc, #36]	@ (80030d4 <uart_q8_read+0x50>)
 80030ae:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 80030b2:	3301      	adds	r3, #1
 80030b4:	425a      	negs	r2, r3
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	b2d2      	uxtb	r2, r2
 80030ba:	bf58      	it	pl
 80030bc:	4253      	negpl	r3, r2
 80030be:	b29a      	uxth	r2, r3
 80030c0:	4b04      	ldr	r3, [pc, #16]	@ (80030d4 <uart_q8_read+0x50>)
 80030c2:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
	}

	return ret;
 80030c6:	79fb      	ldrb	r3, [r7, #7]
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr
 80030d4:	20007a2c 	.word	0x20007a2c

080030d8 <read_rfid_number>:

uint8_t rfid_number[READ_BOOK_MAX_SIZE][12] = {0,}; //파싱한 rfid 번호 저장
uint8_t recive_data[24] = {0,}; //RFID 태그 한개에서 receive 한 data 저장
uint8_t book_num = 0;  //책 순서
uint8_t book_byte_num = 0; //책 태그의 바이트 순서
void read_rfid_number(){
 80030d8:	b590      	push	{r4, r7, lr}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
	uint8_t i;
	if(uart_available()){ // 데이터 있으면
 80030de:	f7ff ffa5 	bl	800302c <uart_available>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d042      	beq.n	800316e <read_rfid_number+0x96>
		uint8_t read_byte =  uart_q8_read(); // 버퍼에서 1byte 읽고
 80030e8:	f7ff ffcc 	bl	8003084 <uart_q8_read>
 80030ec:	4603      	mov	r3, r0
 80030ee:	71bb      	strb	r3, [r7, #6]
		recive_data[book_byte_num++] = read_byte;
 80030f0:	4b21      	ldr	r3, [pc, #132]	@ (8003178 <read_rfid_number+0xa0>)
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	1c5a      	adds	r2, r3, #1
 80030f6:	b2d1      	uxtb	r1, r2
 80030f8:	4a1f      	ldr	r2, [pc, #124]	@ (8003178 <read_rfid_number+0xa0>)
 80030fa:	7011      	strb	r1, [r2, #0]
 80030fc:	4619      	mov	r1, r3
 80030fe:	4a1f      	ldr	r2, [pc, #124]	@ (800317c <read_rfid_number+0xa4>)
 8003100:	79bb      	ldrb	r3, [r7, #6]
 8003102:	5453      	strb	r3, [r2, r1]
		if(read_byte == 0x7E) { // 마지막 데이터이면
 8003104:	79bb      	ldrb	r3, [r7, #6]
 8003106:	2b7e      	cmp	r3, #126	@ 0x7e
 8003108:	d126      	bne.n	8003158 <read_rfid_number+0x80>
			if(recive_data[1] != 0x01){ //인식이 된 경우 8~19 12byte rfid number
 800310a:	4b1c      	ldr	r3, [pc, #112]	@ (800317c <read_rfid_number+0xa4>)
 800310c:	785b      	ldrb	r3, [r3, #1]
 800310e:	2b01      	cmp	r3, #1
 8003110:	d01f      	beq.n	8003152 <read_rfid_number+0x7a>
				for( i=8; i<=19; i ++)
 8003112:	2308      	movs	r3, #8
 8003114:	71fb      	strb	r3, [r7, #7]
 8003116:	e013      	b.n	8003140 <read_rfid_number+0x68>
					rfid_number[book_num][i-8] = recive_data[i];
 8003118:	79fb      	ldrb	r3, [r7, #7]
 800311a:	4a19      	ldr	r2, [pc, #100]	@ (8003180 <read_rfid_number+0xa8>)
 800311c:	7812      	ldrb	r2, [r2, #0]
 800311e:	4610      	mov	r0, r2
 8003120:	79fa      	ldrb	r2, [r7, #7]
 8003122:	3a08      	subs	r2, #8
 8003124:	4915      	ldr	r1, [pc, #84]	@ (800317c <read_rfid_number+0xa4>)
 8003126:	5ccc      	ldrb	r4, [r1, r3]
 8003128:	4916      	ldr	r1, [pc, #88]	@ (8003184 <read_rfid_number+0xac>)
 800312a:	4603      	mov	r3, r0
 800312c:	005b      	lsls	r3, r3, #1
 800312e:	4403      	add	r3, r0
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	440b      	add	r3, r1
 8003134:	4413      	add	r3, r2
 8003136:	4622      	mov	r2, r4
 8003138:	701a      	strb	r2, [r3, #0]
				for( i=8; i<=19; i ++)
 800313a:	79fb      	ldrb	r3, [r7, #7]
 800313c:	3301      	adds	r3, #1
 800313e:	71fb      	strb	r3, [r7, #7]
 8003140:	79fb      	ldrb	r3, [r7, #7]
 8003142:	2b13      	cmp	r3, #19
 8003144:	d9e8      	bls.n	8003118 <read_rfid_number+0x40>
				book_num ++;
 8003146:	4b0e      	ldr	r3, [pc, #56]	@ (8003180 <read_rfid_number+0xa8>)
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	3301      	adds	r3, #1
 800314c:	b2da      	uxtb	r2, r3
 800314e:	4b0c      	ldr	r3, [pc, #48]	@ (8003180 <read_rfid_number+0xa8>)
 8003150:	701a      	strb	r2, [r3, #0]
			}
			book_byte_num = 0;
 8003152:	4b09      	ldr	r3, [pc, #36]	@ (8003178 <read_rfid_number+0xa0>)
 8003154:	2200      	movs	r2, #0
 8003156:	701a      	strb	r2, [r3, #0]
		}
		if(!uart_available()){ //다 읽었으면
 8003158:	f7ff ff68 	bl	800302c <uart_available>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d105      	bne.n	800316e <read_rfid_number+0x96>
			osSignalSet(tagNumTransmitTHandle, transmitSignal); //전송 이벤트 생성
 8003162:	4b09      	ldr	r3, [pc, #36]	@ (8003188 <read_rfid_number+0xb0>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2101      	movs	r1, #1
 8003168:	4618      	mov	r0, r3
 800316a:	f005 f8e1 	bl	8008330 <osSignalSet>
			//vTaskSuspend(defaultTaskHandle);
			}
		}
}
 800316e:	bf00      	nop
 8003170:	370c      	adds	r7, #12
 8003172:	46bd      	mov	sp, r7
 8003174:	bd90      	pop	{r4, r7, pc}
 8003176:	bf00      	nop
 8003178:	200080fd 	.word	0x200080fd
 800317c:	200080e4 	.word	0x200080e4
 8003180:	200080fc 	.word	0x200080fc
 8003184:	20007c34 	.word	0x20007c34
 8003188:	200046f0 	.word	0x200046f0

0800318c <transmitData>:

void transmitData(){
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
	int i=0;
 8003192:	2300      	movs	r3, #0
 8003194:	607b      	str	r3, [r7, #4]
	while(rfid_number[i][0] != 0){
 8003196:	e01c      	b.n	80031d2 <transmitData+0x46>
		//computer
		HAL_UART_Transmit(&huart2, rfid_number[i], sizeof(rfid_number[i]), 500);
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	4613      	mov	r3, r2
 800319c:	005b      	lsls	r3, r3, #1
 800319e:	4413      	add	r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	4a17      	ldr	r2, [pc, #92]	@ (8003200 <transmitData+0x74>)
 80031a4:	1899      	adds	r1, r3, r2
 80031a6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80031aa:	220c      	movs	r2, #12
 80031ac:	4815      	ldr	r0, [pc, #84]	@ (8003204 <transmitData+0x78>)
 80031ae:	f003 fd37 	bl	8006c20 <HAL_UART_Transmit>
		//esp32
		HAL_UART_Transmit(&huart3, rfid_number[i], sizeof(rfid_number[i]), 500);
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	4613      	mov	r3, r2
 80031b6:	005b      	lsls	r3, r3, #1
 80031b8:	4413      	add	r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	4a10      	ldr	r2, [pc, #64]	@ (8003200 <transmitData+0x74>)
 80031be:	1899      	adds	r1, r3, r2
 80031c0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80031c4:	220c      	movs	r2, #12
 80031c6:	4810      	ldr	r0, [pc, #64]	@ (8003208 <transmitData+0x7c>)
 80031c8:	f003 fd2a 	bl	8006c20 <HAL_UART_Transmit>
		i++;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	3301      	adds	r3, #1
 80031d0:	607b      	str	r3, [r7, #4]
	while(rfid_number[i][0] != 0){
 80031d2:	490b      	ldr	r1, [pc, #44]	@ (8003200 <transmitData+0x74>)
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	4613      	mov	r3, r2
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	4413      	add	r3, r2
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	440b      	add	r3, r1
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d1d8      	bne.n	8003198 <transmitData+0xc>
		}
	memset(rfid_number,0,sizeof(rfid_number));
 80031e6:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 80031ea:	2100      	movs	r1, #0
 80031ec:	4804      	ldr	r0, [pc, #16]	@ (8003200 <transmitData+0x74>)
 80031ee:	f014 fd1b 	bl	8017c28 <memset>
	book_num =0;
 80031f2:	4b06      	ldr	r3, [pc, #24]	@ (800320c <transmitData+0x80>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	701a      	strb	r2, [r3, #0]

}
 80031f8:	bf00      	nop
 80031fa:	3708      	adds	r7, #8
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	20007c34 	.word	0x20007c34
 8003204:	20008160 	.word	0x20008160
 8003208:	200081a8 	.word	0x200081a8
 800320c:	200080fc 	.word	0x200080fc

08003210 <uart2_init>:
//	}
//}

//------------------------------------------------------

void uart2_init(){
 8003210:	b580      	push	{r7, lr}
 8003212:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&huart2, uart2_queue.buf, QUEUE_BUF_MAX);
 8003214:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003218:	4906      	ldr	r1, [pc, #24]	@ (8003234 <uart2_init+0x24>)
 800321a:	4807      	ldr	r0, [pc, #28]	@ (8003238 <uart2_init+0x28>)
 800321c:	f003 fdfc 	bl	8006e18 <HAL_UART_Receive_DMA>
	uart2_queue.q_in_index = 0;
 8003220:	4b04      	ldr	r3, [pc, #16]	@ (8003234 <uart2_init+0x24>)
 8003222:	2200      	movs	r2, #0
 8003224:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
	uart2_queue.q_out_index = 0;
 8003228:	4b02      	ldr	r3, [pc, #8]	@ (8003234 <uart2_init+0x24>)
 800322a:	2200      	movs	r2, #0
 800322c:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
}
 8003230:	bf00      	nop
 8003232:	bd80      	pop	{r7, pc}
 8003234:	20007b30 	.word	0x20007b30
 8003238:	20008160 	.word	0x20008160

0800323c <uart2_available>:



uint32_t uart2_available(void){
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
	uint32_t ret = 0;
 8003242:	2300      	movs	r3, #0
 8003244:	607b      	str	r3, [r7, #4]
	uart2_queue.q_in_index = (QUEUE_BUF_MAX - huart2.hdmarx->Instance->NDTR) % QUEUE_BUF_MAX; //원형 큐
 8003246:	4b11      	ldr	r3, [pc, #68]	@ (800328c <uart2_available+0x50>)
 8003248:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	b29b      	uxth	r3, r3
 8003250:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8003254:	b29b      	uxth	r3, r3
 8003256:	b2db      	uxtb	r3, r3
 8003258:	b29a      	uxth	r2, r3
 800325a:	4b0d      	ldr	r3, [pc, #52]	@ (8003290 <uart2_available+0x54>)
 800325c:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
	ret = (QUEUE_BUF_MAX + uart2_queue.q_in_index - uart2_queue.q_out_index) % QUEUE_BUF_MAX; // 버퍼 데이터 개수
 8003260:	4b0b      	ldr	r3, [pc, #44]	@ (8003290 <uart2_available+0x54>)
 8003262:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 8003266:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800326a:	4a09      	ldr	r2, [pc, #36]	@ (8003290 <uart2_available+0x54>)
 800326c:	f8b2 2102 	ldrh.w	r2, [r2, #258]	@ 0x102
 8003270:	1a9b      	subs	r3, r3, r2
 8003272:	425a      	negs	r2, r3
 8003274:	b2db      	uxtb	r3, r3
 8003276:	b2d2      	uxtb	r2, r2
 8003278:	bf58      	it	pl
 800327a:	4253      	negpl	r3, r2
 800327c:	607b      	str	r3, [r7, #4]

	return ret;
 800327e:	687b      	ldr	r3, [r7, #4]
}
 8003280:	4618      	mov	r0, r3
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr
 800328c:	20008160 	.word	0x20008160
 8003290:	20007b30 	.word	0x20007b30

08003294 <uart2_q8_read>:


uint8_t uart2_q8_read(void){
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
	uint8_t ret =0;
 800329a:	2300      	movs	r3, #0
 800329c:	71fb      	strb	r3, [r7, #7]
	if(uart2_queue.q_out_index != uart2_queue.q_in_index){
 800329e:	4b11      	ldr	r3, [pc, #68]	@ (80032e4 <uart2_q8_read+0x50>)
 80032a0:	f8b3 2102 	ldrh.w	r2, [r3, #258]	@ 0x102
 80032a4:	4b0f      	ldr	r3, [pc, #60]	@ (80032e4 <uart2_q8_read+0x50>)
 80032a6:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d013      	beq.n	80032d6 <uart2_q8_read+0x42>
		ret = uart2_queue.buf[uart2_queue.q_out_index];
 80032ae:	4b0d      	ldr	r3, [pc, #52]	@ (80032e4 <uart2_q8_read+0x50>)
 80032b0:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 80032b4:	461a      	mov	r2, r3
 80032b6:	4b0b      	ldr	r3, [pc, #44]	@ (80032e4 <uart2_q8_read+0x50>)
 80032b8:	5c9b      	ldrb	r3, [r3, r2]
 80032ba:	71fb      	strb	r3, [r7, #7]
		uart2_queue.q_out_index = (uart2_queue.q_out_index +1) % QUEUE_BUF_MAX;
 80032bc:	4b09      	ldr	r3, [pc, #36]	@ (80032e4 <uart2_q8_read+0x50>)
 80032be:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 80032c2:	3301      	adds	r3, #1
 80032c4:	425a      	negs	r2, r3
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	b2d2      	uxtb	r2, r2
 80032ca:	bf58      	it	pl
 80032cc:	4253      	negpl	r3, r2
 80032ce:	b29a      	uxth	r2, r3
 80032d0:	4b04      	ldr	r3, [pc, #16]	@ (80032e4 <uart2_q8_read+0x50>)
 80032d2:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
	}

	return ret;
 80032d6:	79fb      	ldrb	r3, [r7, #7]
}
 80032d8:	4618      	mov	r0, r3
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr
 80032e4:	20007b30 	.word	0x20007b30

080032e8 <read_command>:

uint8_t scan_command[20] = {0,}; //파싱한 rfid 번호 저장
uint8_t command_byte_num = 0; //책 태그의 바이트 순서
void read_command(){
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
	if(uart2_available()){ // 데이터 있으면
 80032ee:	f7ff ffa5 	bl	800323c <uart2_available>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d01e      	beq.n	8003336 <read_command+0x4e>
		uint8_t read_byte =  uart2_q8_read(); // 버퍼에서 1byte 읽고
 80032f8:	f7ff ffcc 	bl	8003294 <uart2_q8_read>
 80032fc:	4603      	mov	r3, r0
 80032fe:	71fb      	strb	r3, [r7, #7]
		scan_command[command_byte_num++] = read_byte;
 8003300:	4b0f      	ldr	r3, [pc, #60]	@ (8003340 <read_command+0x58>)
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	1c5a      	adds	r2, r3, #1
 8003306:	b2d1      	uxtb	r1, r2
 8003308:	4a0d      	ldr	r2, [pc, #52]	@ (8003340 <read_command+0x58>)
 800330a:	7011      	strb	r1, [r2, #0]
 800330c:	4619      	mov	r1, r3
 800330e:	4a0d      	ldr	r2, [pc, #52]	@ (8003344 <read_command+0x5c>)
 8003310:	79fb      	ldrb	r3, [r7, #7]
 8003312:	5453      	strb	r3, [r2, r1]
		if(read_byte == 0x0A) { // 마지막 데이터이면
 8003314:	79fb      	ldrb	r3, [r7, #7]
 8003316:	2b0a      	cmp	r3, #10
 8003318:	d102      	bne.n	8003320 <read_command+0x38>
			command_byte_num = 0;
 800331a:	4b09      	ldr	r3, [pc, #36]	@ (8003340 <read_command+0x58>)
 800331c:	2200      	movs	r2, #0
 800331e:	701a      	strb	r2, [r3, #0]
		}
		if(!uart2_available()){ //다 읽었으면
 8003320:	f7ff ff8c 	bl	800323c <uart2_available>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d105      	bne.n	8003336 <read_command+0x4e>
			osSignalSet(transmitTask2Handle, transmitSignal2); //전송 이벤트 생성
 800332a:	4b07      	ldr	r3, [pc, #28]	@ (8003348 <read_command+0x60>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2102      	movs	r1, #2
 8003330:	4618      	mov	r0, r3
 8003332:	f004 fffd 	bl	8008330 <osSignalSet>
		}
	}
}
 8003336:	bf00      	nop
 8003338:	3708      	adds	r7, #8
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	20008114 	.word	0x20008114
 8003344:	20008100 	.word	0x20008100
 8003348:	200046fc 	.word	0x200046fc

0800334c <transmitCommand>:

char motor_command1[] = "scan\n";
char motor_command2[] = "stop\n";

void transmitCommand(){
 800334c:	b580      	push	{r7, lr}
 800334e:	af00      	add	r7, sp, #0
//	int i=0;
//	while(scan_command[i] != 10){
//		HAL_UART_Transmit(&huart2, scan_command[i], sizeof(scan_command[i]), 1);
//		i++;
//	}
	if(!(strchr(scan_command,motor_command1))){
 8003350:	4b0f      	ldr	r3, [pc, #60]	@ (8003390 <transmitCommand+0x44>)
 8003352:	4619      	mov	r1, r3
 8003354:	480f      	ldr	r0, [pc, #60]	@ (8003394 <transmitCommand+0x48>)
 8003356:	f014 fc6f 	bl	8017c38 <strchr>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d10f      	bne.n	8003380 <transmitCommand+0x34>
		HAL_UART_Transmit(&huart2, "ok\r\n", sizeof("ok\r\n"), 1);
 8003360:	2301      	movs	r3, #1
 8003362:	2205      	movs	r2, #5
 8003364:	490c      	ldr	r1, [pc, #48]	@ (8003398 <transmitCommand+0x4c>)
 8003366:	480d      	ldr	r0, [pc, #52]	@ (800339c <transmitCommand+0x50>)
 8003368:	f003 fc5a 	bl	8006c20 <HAL_UART_Transmit>
		vTaskResume(motorTaskHandle);
 800336c:	4b0c      	ldr	r3, [pc, #48]	@ (80033a0 <transmitCommand+0x54>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4618      	mov	r0, r3
 8003372:	f005 fbc9 	bl	8008b08 <vTaskResume>
		vTaskResume(rfidExecuteTaskHandle);
 8003376:	4b0b      	ldr	r3, [pc, #44]	@ (80033a4 <transmitCommand+0x58>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4618      	mov	r0, r3
 800337c:	f005 fbc4 	bl	8008b08 <vTaskResume>
	}
//	}else if(!(strchr(scan_command,motor_command2))){
//		HAL_UART_Transmit(&huart2, "ok\r\n", sizeof("ok\r\n"), 1);
//		vTaskSuspend(rfidExecuteHandle);
//	}
	memset(scan_command,0,sizeof(scan_command));
 8003380:	2214      	movs	r2, #20
 8003382:	2100      	movs	r1, #0
 8003384:	4803      	ldr	r0, [pc, #12]	@ (8003394 <transmitCommand+0x48>)
 8003386:	f014 fc4f 	bl	8017c28 <memset>
}
 800338a:	bf00      	nop
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	20000008 	.word	0x20000008
 8003394:	20008100 	.word	0x20008100
 8003398:	08019db0 	.word	0x08019db0
 800339c:	20008160 	.word	0x20008160
 80033a0:	200046f8 	.word	0x200046f8
 80033a4:	200046ec 	.word	0x200046ec

080033a8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80033ac:	4b11      	ldr	r3, [pc, #68]	@ (80033f4 <MX_USART1_UART_Init+0x4c>)
 80033ae:	4a12      	ldr	r2, [pc, #72]	@ (80033f8 <MX_USART1_UART_Init+0x50>)
 80033b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80033b2:	4b10      	ldr	r3, [pc, #64]	@ (80033f4 <MX_USART1_UART_Init+0x4c>)
 80033b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80033b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80033ba:	4b0e      	ldr	r3, [pc, #56]	@ (80033f4 <MX_USART1_UART_Init+0x4c>)
 80033bc:	2200      	movs	r2, #0
 80033be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80033c0:	4b0c      	ldr	r3, [pc, #48]	@ (80033f4 <MX_USART1_UART_Init+0x4c>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80033c6:	4b0b      	ldr	r3, [pc, #44]	@ (80033f4 <MX_USART1_UART_Init+0x4c>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80033cc:	4b09      	ldr	r3, [pc, #36]	@ (80033f4 <MX_USART1_UART_Init+0x4c>)
 80033ce:	220c      	movs	r2, #12
 80033d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033d2:	4b08      	ldr	r3, [pc, #32]	@ (80033f4 <MX_USART1_UART_Init+0x4c>)
 80033d4:	2200      	movs	r2, #0
 80033d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80033d8:	4b06      	ldr	r3, [pc, #24]	@ (80033f4 <MX_USART1_UART_Init+0x4c>)
 80033da:	2200      	movs	r2, #0
 80033dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80033de:	4805      	ldr	r0, [pc, #20]	@ (80033f4 <MX_USART1_UART_Init+0x4c>)
 80033e0:	f003 fbce 	bl	8006b80 <HAL_UART_Init>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80033ea:	f7fe fe71 	bl	80020d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80033ee:	bf00      	nop
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	20008118 	.word	0x20008118
 80033f8:	40011000 	.word	0x40011000

080033fc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003400:	4b11      	ldr	r3, [pc, #68]	@ (8003448 <MX_USART2_UART_Init+0x4c>)
 8003402:	4a12      	ldr	r2, [pc, #72]	@ (800344c <MX_USART2_UART_Init+0x50>)
 8003404:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003406:	4b10      	ldr	r3, [pc, #64]	@ (8003448 <MX_USART2_UART_Init+0x4c>)
 8003408:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800340c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800340e:	4b0e      	ldr	r3, [pc, #56]	@ (8003448 <MX_USART2_UART_Init+0x4c>)
 8003410:	2200      	movs	r2, #0
 8003412:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003414:	4b0c      	ldr	r3, [pc, #48]	@ (8003448 <MX_USART2_UART_Init+0x4c>)
 8003416:	2200      	movs	r2, #0
 8003418:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800341a:	4b0b      	ldr	r3, [pc, #44]	@ (8003448 <MX_USART2_UART_Init+0x4c>)
 800341c:	2200      	movs	r2, #0
 800341e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003420:	4b09      	ldr	r3, [pc, #36]	@ (8003448 <MX_USART2_UART_Init+0x4c>)
 8003422:	220c      	movs	r2, #12
 8003424:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003426:	4b08      	ldr	r3, [pc, #32]	@ (8003448 <MX_USART2_UART_Init+0x4c>)
 8003428:	2200      	movs	r2, #0
 800342a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800342c:	4b06      	ldr	r3, [pc, #24]	@ (8003448 <MX_USART2_UART_Init+0x4c>)
 800342e:	2200      	movs	r2, #0
 8003430:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003432:	4805      	ldr	r0, [pc, #20]	@ (8003448 <MX_USART2_UART_Init+0x4c>)
 8003434:	f003 fba4 	bl	8006b80 <HAL_UART_Init>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d001      	beq.n	8003442 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800343e:	f7fe fe47 	bl	80020d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003442:	bf00      	nop
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	20008160 	.word	0x20008160
 800344c:	40004400 	.word	0x40004400

08003450 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003454:	4b11      	ldr	r3, [pc, #68]	@ (800349c <MX_USART3_UART_Init+0x4c>)
 8003456:	4a12      	ldr	r2, [pc, #72]	@ (80034a0 <MX_USART3_UART_Init+0x50>)
 8003458:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800345a:	4b10      	ldr	r3, [pc, #64]	@ (800349c <MX_USART3_UART_Init+0x4c>)
 800345c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003460:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003462:	4b0e      	ldr	r3, [pc, #56]	@ (800349c <MX_USART3_UART_Init+0x4c>)
 8003464:	2200      	movs	r2, #0
 8003466:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003468:	4b0c      	ldr	r3, [pc, #48]	@ (800349c <MX_USART3_UART_Init+0x4c>)
 800346a:	2200      	movs	r2, #0
 800346c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800346e:	4b0b      	ldr	r3, [pc, #44]	@ (800349c <MX_USART3_UART_Init+0x4c>)
 8003470:	2200      	movs	r2, #0
 8003472:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003474:	4b09      	ldr	r3, [pc, #36]	@ (800349c <MX_USART3_UART_Init+0x4c>)
 8003476:	220c      	movs	r2, #12
 8003478:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800347a:	4b08      	ldr	r3, [pc, #32]	@ (800349c <MX_USART3_UART_Init+0x4c>)
 800347c:	2200      	movs	r2, #0
 800347e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003480:	4b06      	ldr	r3, [pc, #24]	@ (800349c <MX_USART3_UART_Init+0x4c>)
 8003482:	2200      	movs	r2, #0
 8003484:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003486:	4805      	ldr	r0, [pc, #20]	@ (800349c <MX_USART3_UART_Init+0x4c>)
 8003488:	f003 fb7a 	bl	8006b80 <HAL_UART_Init>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d001      	beq.n	8003496 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003492:	f7fe fe1d 	bl	80020d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003496:	bf00      	nop
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	200081a8 	.word	0x200081a8
 80034a0:	40004800 	.word	0x40004800

080034a4 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80034a8:	4b11      	ldr	r3, [pc, #68]	@ (80034f0 <MX_USART6_UART_Init+0x4c>)
 80034aa:	4a12      	ldr	r2, [pc, #72]	@ (80034f4 <MX_USART6_UART_Init+0x50>)
 80034ac:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80034ae:	4b10      	ldr	r3, [pc, #64]	@ (80034f0 <MX_USART6_UART_Init+0x4c>)
 80034b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80034b4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80034b6:	4b0e      	ldr	r3, [pc, #56]	@ (80034f0 <MX_USART6_UART_Init+0x4c>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80034bc:	4b0c      	ldr	r3, [pc, #48]	@ (80034f0 <MX_USART6_UART_Init+0x4c>)
 80034be:	2200      	movs	r2, #0
 80034c0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80034c2:	4b0b      	ldr	r3, [pc, #44]	@ (80034f0 <MX_USART6_UART_Init+0x4c>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80034c8:	4b09      	ldr	r3, [pc, #36]	@ (80034f0 <MX_USART6_UART_Init+0x4c>)
 80034ca:	220c      	movs	r2, #12
 80034cc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80034ce:	4b08      	ldr	r3, [pc, #32]	@ (80034f0 <MX_USART6_UART_Init+0x4c>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80034d4:	4b06      	ldr	r3, [pc, #24]	@ (80034f0 <MX_USART6_UART_Init+0x4c>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80034da:	4805      	ldr	r0, [pc, #20]	@ (80034f0 <MX_USART6_UART_Init+0x4c>)
 80034dc:	f003 fb50 	bl	8006b80 <HAL_UART_Init>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d001      	beq.n	80034ea <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80034e6:	f7fe fdf3 	bl	80020d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80034ea:	bf00      	nop
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	200081f0 	.word	0x200081f0
 80034f4:	40011400 	.word	0x40011400

080034f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b090      	sub	sp, #64	@ 0x40
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003500:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003504:	2200      	movs	r2, #0
 8003506:	601a      	str	r2, [r3, #0]
 8003508:	605a      	str	r2, [r3, #4]
 800350a:	609a      	str	r2, [r3, #8]
 800350c:	60da      	str	r2, [r3, #12]
 800350e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a90      	ldr	r2, [pc, #576]	@ (8003758 <HAL_UART_MspInit+0x260>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d164      	bne.n	80035e4 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800351a:	2300      	movs	r3, #0
 800351c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800351e:	4b8f      	ldr	r3, [pc, #572]	@ (800375c <HAL_UART_MspInit+0x264>)
 8003520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003522:	4a8e      	ldr	r2, [pc, #568]	@ (800375c <HAL_UART_MspInit+0x264>)
 8003524:	f043 0310 	orr.w	r3, r3, #16
 8003528:	6453      	str	r3, [r2, #68]	@ 0x44
 800352a:	4b8c      	ldr	r3, [pc, #560]	@ (800375c <HAL_UART_MspInit+0x264>)
 800352c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800352e:	f003 0310 	and.w	r3, r3, #16
 8003532:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003534:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003536:	2300      	movs	r3, #0
 8003538:	627b      	str	r3, [r7, #36]	@ 0x24
 800353a:	4b88      	ldr	r3, [pc, #544]	@ (800375c <HAL_UART_MspInit+0x264>)
 800353c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800353e:	4a87      	ldr	r2, [pc, #540]	@ (800375c <HAL_UART_MspInit+0x264>)
 8003540:	f043 0301 	orr.w	r3, r3, #1
 8003544:	6313      	str	r3, [r2, #48]	@ 0x30
 8003546:	4b85      	ldr	r3, [pc, #532]	@ (800375c <HAL_UART_MspInit+0x264>)
 8003548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800354a:	f003 0301 	and.w	r3, r3, #1
 800354e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = UHF01_TX_Pin|UHF01_RX_Pin;
 8003552:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003556:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003558:	2302      	movs	r3, #2
 800355a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800355c:	2300      	movs	r3, #0
 800355e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003560:	2303      	movs	r3, #3
 8003562:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003564:	2307      	movs	r3, #7
 8003566:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003568:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800356c:	4619      	mov	r1, r3
 800356e:	487c      	ldr	r0, [pc, #496]	@ (8003760 <HAL_UART_MspInit+0x268>)
 8003570:	f000 ff8e 	bl	8004490 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 8003574:	4b7b      	ldr	r3, [pc, #492]	@ (8003764 <HAL_UART_MspInit+0x26c>)
 8003576:	4a7c      	ldr	r2, [pc, #496]	@ (8003768 <HAL_UART_MspInit+0x270>)
 8003578:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800357a:	4b7a      	ldr	r3, [pc, #488]	@ (8003764 <HAL_UART_MspInit+0x26c>)
 800357c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003580:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003582:	4b78      	ldr	r3, [pc, #480]	@ (8003764 <HAL_UART_MspInit+0x26c>)
 8003584:	2200      	movs	r2, #0
 8003586:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003588:	4b76      	ldr	r3, [pc, #472]	@ (8003764 <HAL_UART_MspInit+0x26c>)
 800358a:	2200      	movs	r2, #0
 800358c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800358e:	4b75      	ldr	r3, [pc, #468]	@ (8003764 <HAL_UART_MspInit+0x26c>)
 8003590:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003594:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003596:	4b73      	ldr	r3, [pc, #460]	@ (8003764 <HAL_UART_MspInit+0x26c>)
 8003598:	2200      	movs	r2, #0
 800359a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800359c:	4b71      	ldr	r3, [pc, #452]	@ (8003764 <HAL_UART_MspInit+0x26c>)
 800359e:	2200      	movs	r2, #0
 80035a0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80035a2:	4b70      	ldr	r3, [pc, #448]	@ (8003764 <HAL_UART_MspInit+0x26c>)
 80035a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80035a8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80035aa:	4b6e      	ldr	r3, [pc, #440]	@ (8003764 <HAL_UART_MspInit+0x26c>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80035b0:	4b6c      	ldr	r3, [pc, #432]	@ (8003764 <HAL_UART_MspInit+0x26c>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80035b6:	486b      	ldr	r0, [pc, #428]	@ (8003764 <HAL_UART_MspInit+0x26c>)
 80035b8:	f000 fb68 	bl	8003c8c <HAL_DMA_Init>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d001      	beq.n	80035c6 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80035c2:	f7fe fd85 	bl	80020d0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a66      	ldr	r2, [pc, #408]	@ (8003764 <HAL_UART_MspInit+0x26c>)
 80035ca:	63da      	str	r2, [r3, #60]	@ 0x3c
 80035cc:	4a65      	ldr	r2, [pc, #404]	@ (8003764 <HAL_UART_MspInit+0x26c>)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80035d2:	2200      	movs	r2, #0
 80035d4:	2105      	movs	r1, #5
 80035d6:	2025      	movs	r0, #37	@ 0x25
 80035d8:	f000 fb2e 	bl	8003c38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80035dc:	2025      	movs	r0, #37	@ 0x25
 80035de:	f000 fb47 	bl	8003c70 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80035e2:	e167      	b.n	80038b4 <HAL_UART_MspInit+0x3bc>
  else if(uartHandle->Instance==USART2)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a60      	ldr	r2, [pc, #384]	@ (800376c <HAL_UART_MspInit+0x274>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d15a      	bne.n	80036a4 <HAL_UART_MspInit+0x1ac>
    __HAL_RCC_USART2_CLK_ENABLE();
 80035ee:	2300      	movs	r3, #0
 80035f0:	623b      	str	r3, [r7, #32]
 80035f2:	4b5a      	ldr	r3, [pc, #360]	@ (800375c <HAL_UART_MspInit+0x264>)
 80035f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f6:	4a59      	ldr	r2, [pc, #356]	@ (800375c <HAL_UART_MspInit+0x264>)
 80035f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80035fe:	4b57      	ldr	r3, [pc, #348]	@ (800375c <HAL_UART_MspInit+0x264>)
 8003600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003602:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003606:	623b      	str	r3, [r7, #32]
 8003608:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800360a:	2300      	movs	r3, #0
 800360c:	61fb      	str	r3, [r7, #28]
 800360e:	4b53      	ldr	r3, [pc, #332]	@ (800375c <HAL_UART_MspInit+0x264>)
 8003610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003612:	4a52      	ldr	r2, [pc, #328]	@ (800375c <HAL_UART_MspInit+0x264>)
 8003614:	f043 0301 	orr.w	r3, r3, #1
 8003618:	6313      	str	r3, [r2, #48]	@ 0x30
 800361a:	4b50      	ldr	r3, [pc, #320]	@ (800375c <HAL_UART_MspInit+0x264>)
 800361c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800361e:	f003 0301 	and.w	r3, r3, #1
 8003622:	61fb      	str	r3, [r7, #28]
 8003624:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = com_TX_Pin|com_RX_Pin;
 8003626:	230c      	movs	r3, #12
 8003628:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800362a:	2302      	movs	r3, #2
 800362c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800362e:	2300      	movs	r3, #0
 8003630:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003632:	2303      	movs	r3, #3
 8003634:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003636:	2307      	movs	r3, #7
 8003638:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800363a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800363e:	4619      	mov	r1, r3
 8003640:	4847      	ldr	r0, [pc, #284]	@ (8003760 <HAL_UART_MspInit+0x268>)
 8003642:	f000 ff25 	bl	8004490 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003646:	4b4a      	ldr	r3, [pc, #296]	@ (8003770 <HAL_UART_MspInit+0x278>)
 8003648:	4a4a      	ldr	r2, [pc, #296]	@ (8003774 <HAL_UART_MspInit+0x27c>)
 800364a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800364c:	4b48      	ldr	r3, [pc, #288]	@ (8003770 <HAL_UART_MspInit+0x278>)
 800364e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003652:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003654:	4b46      	ldr	r3, [pc, #280]	@ (8003770 <HAL_UART_MspInit+0x278>)
 8003656:	2200      	movs	r2, #0
 8003658:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800365a:	4b45      	ldr	r3, [pc, #276]	@ (8003770 <HAL_UART_MspInit+0x278>)
 800365c:	2200      	movs	r2, #0
 800365e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003660:	4b43      	ldr	r3, [pc, #268]	@ (8003770 <HAL_UART_MspInit+0x278>)
 8003662:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003666:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003668:	4b41      	ldr	r3, [pc, #260]	@ (8003770 <HAL_UART_MspInit+0x278>)
 800366a:	2200      	movs	r2, #0
 800366c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800366e:	4b40      	ldr	r3, [pc, #256]	@ (8003770 <HAL_UART_MspInit+0x278>)
 8003670:	2200      	movs	r2, #0
 8003672:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003674:	4b3e      	ldr	r3, [pc, #248]	@ (8003770 <HAL_UART_MspInit+0x278>)
 8003676:	2200      	movs	r2, #0
 8003678:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800367a:	4b3d      	ldr	r3, [pc, #244]	@ (8003770 <HAL_UART_MspInit+0x278>)
 800367c:	2200      	movs	r2, #0
 800367e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003680:	4b3b      	ldr	r3, [pc, #236]	@ (8003770 <HAL_UART_MspInit+0x278>)
 8003682:	2200      	movs	r2, #0
 8003684:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003686:	483a      	ldr	r0, [pc, #232]	@ (8003770 <HAL_UART_MspInit+0x278>)
 8003688:	f000 fb00 	bl	8003c8c <HAL_DMA_Init>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d001      	beq.n	8003696 <HAL_UART_MspInit+0x19e>
      Error_Handler();
 8003692:	f7fe fd1d 	bl	80020d0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a35      	ldr	r2, [pc, #212]	@ (8003770 <HAL_UART_MspInit+0x278>)
 800369a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800369c:	4a34      	ldr	r2, [pc, #208]	@ (8003770 <HAL_UART_MspInit+0x278>)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80036a2:	e107      	b.n	80038b4 <HAL_UART_MspInit+0x3bc>
  else if(uartHandle->Instance==USART3)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a33      	ldr	r2, [pc, #204]	@ (8003778 <HAL_UART_MspInit+0x280>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d16a      	bne.n	8003784 <HAL_UART_MspInit+0x28c>
    __HAL_RCC_USART3_CLK_ENABLE();
 80036ae:	2300      	movs	r3, #0
 80036b0:	61bb      	str	r3, [r7, #24]
 80036b2:	4b2a      	ldr	r3, [pc, #168]	@ (800375c <HAL_UART_MspInit+0x264>)
 80036b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b6:	4a29      	ldr	r2, [pc, #164]	@ (800375c <HAL_UART_MspInit+0x264>)
 80036b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80036bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80036be:	4b27      	ldr	r3, [pc, #156]	@ (800375c <HAL_UART_MspInit+0x264>)
 80036c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80036c6:	61bb      	str	r3, [r7, #24]
 80036c8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80036ca:	2300      	movs	r3, #0
 80036cc:	617b      	str	r3, [r7, #20]
 80036ce:	4b23      	ldr	r3, [pc, #140]	@ (800375c <HAL_UART_MspInit+0x264>)
 80036d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036d2:	4a22      	ldr	r2, [pc, #136]	@ (800375c <HAL_UART_MspInit+0x264>)
 80036d4:	f043 0304 	orr.w	r3, r3, #4
 80036d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80036da:	4b20      	ldr	r3, [pc, #128]	@ (800375c <HAL_UART_MspInit+0x264>)
 80036dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036de:	f003 0304 	and.w	r3, r3, #4
 80036e2:	617b      	str	r3, [r7, #20]
 80036e4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036e6:	2300      	movs	r3, #0
 80036e8:	613b      	str	r3, [r7, #16]
 80036ea:	4b1c      	ldr	r3, [pc, #112]	@ (800375c <HAL_UART_MspInit+0x264>)
 80036ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ee:	4a1b      	ldr	r2, [pc, #108]	@ (800375c <HAL_UART_MspInit+0x264>)
 80036f0:	f043 0302 	orr.w	r3, r3, #2
 80036f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80036f6:	4b19      	ldr	r3, [pc, #100]	@ (800375c <HAL_UART_MspInit+0x264>)
 80036f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	613b      	str	r3, [r7, #16]
 8003700:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = esp32_RX_Pin;
 8003702:	2320      	movs	r3, #32
 8003704:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003706:	2302      	movs	r3, #2
 8003708:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800370a:	2300      	movs	r3, #0
 800370c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800370e:	2303      	movs	r3, #3
 8003710:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003712:	2307      	movs	r3, #7
 8003714:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(esp32_RX_GPIO_Port, &GPIO_InitStruct);
 8003716:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800371a:	4619      	mov	r1, r3
 800371c:	4817      	ldr	r0, [pc, #92]	@ (800377c <HAL_UART_MspInit+0x284>)
 800371e:	f000 feb7 	bl	8004490 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = esp32_TX_Pin;
 8003722:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003726:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003728:	2302      	movs	r3, #2
 800372a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800372c:	2300      	movs	r3, #0
 800372e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003730:	2303      	movs	r3, #3
 8003732:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003734:	2307      	movs	r3, #7
 8003736:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(esp32_TX_GPIO_Port, &GPIO_InitStruct);
 8003738:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800373c:	4619      	mov	r1, r3
 800373e:	4810      	ldr	r0, [pc, #64]	@ (8003780 <HAL_UART_MspInit+0x288>)
 8003740:	f000 fea6 	bl	8004490 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8003744:	2200      	movs	r2, #0
 8003746:	2105      	movs	r1, #5
 8003748:	2027      	movs	r0, #39	@ 0x27
 800374a:	f000 fa75 	bl	8003c38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800374e:	2027      	movs	r0, #39	@ 0x27
 8003750:	f000 fa8e 	bl	8003c70 <HAL_NVIC_EnableIRQ>
}
 8003754:	e0ae      	b.n	80038b4 <HAL_UART_MspInit+0x3bc>
 8003756:	bf00      	nop
 8003758:	40011000 	.word	0x40011000
 800375c:	40023800 	.word	0x40023800
 8003760:	40020000 	.word	0x40020000
 8003764:	20008238 	.word	0x20008238
 8003768:	40026488 	.word	0x40026488
 800376c:	40004400 	.word	0x40004400
 8003770:	20008298 	.word	0x20008298
 8003774:	40026088 	.word	0x40026088
 8003778:	40004800 	.word	0x40004800
 800377c:	40020800 	.word	0x40020800
 8003780:	40020400 	.word	0x40020400
  else if(uartHandle->Instance==USART6)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a4c      	ldr	r2, [pc, #304]	@ (80038bc <HAL_UART_MspInit+0x3c4>)
 800378a:	4293      	cmp	r3, r2
 800378c:	f040 8092 	bne.w	80038b4 <HAL_UART_MspInit+0x3bc>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003790:	2300      	movs	r3, #0
 8003792:	60fb      	str	r3, [r7, #12]
 8003794:	4b4a      	ldr	r3, [pc, #296]	@ (80038c0 <HAL_UART_MspInit+0x3c8>)
 8003796:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003798:	4a49      	ldr	r2, [pc, #292]	@ (80038c0 <HAL_UART_MspInit+0x3c8>)
 800379a:	f043 0320 	orr.w	r3, r3, #32
 800379e:	6453      	str	r3, [r2, #68]	@ 0x44
 80037a0:	4b47      	ldr	r3, [pc, #284]	@ (80038c0 <HAL_UART_MspInit+0x3c8>)
 80037a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037a4:	f003 0320 	and.w	r3, r3, #32
 80037a8:	60fb      	str	r3, [r7, #12]
 80037aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80037ac:	2300      	movs	r3, #0
 80037ae:	60bb      	str	r3, [r7, #8]
 80037b0:	4b43      	ldr	r3, [pc, #268]	@ (80038c0 <HAL_UART_MspInit+0x3c8>)
 80037b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037b4:	4a42      	ldr	r2, [pc, #264]	@ (80038c0 <HAL_UART_MspInit+0x3c8>)
 80037b6:	f043 0304 	orr.w	r3, r3, #4
 80037ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80037bc:	4b40      	ldr	r3, [pc, #256]	@ (80038c0 <HAL_UART_MspInit+0x3c8>)
 80037be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037c0:	f003 0304 	and.w	r3, r3, #4
 80037c4:	60bb      	str	r3, [r7, #8]
 80037c6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Micro_ROS_TX_Pin|Micro_ROS_RX_Pin;
 80037c8:	23c0      	movs	r3, #192	@ 0xc0
 80037ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037cc:	2302      	movs	r3, #2
 80037ce:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037d0:	2300      	movs	r3, #0
 80037d2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037d4:	2303      	movs	r3, #3
 80037d6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80037d8:	2308      	movs	r3, #8
 80037da:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037dc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80037e0:	4619      	mov	r1, r3
 80037e2:	4838      	ldr	r0, [pc, #224]	@ (80038c4 <HAL_UART_MspInit+0x3cc>)
 80037e4:	f000 fe54 	bl	8004490 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80037e8:	4b37      	ldr	r3, [pc, #220]	@ (80038c8 <HAL_UART_MspInit+0x3d0>)
 80037ea:	4a38      	ldr	r2, [pc, #224]	@ (80038cc <HAL_UART_MspInit+0x3d4>)
 80037ec:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80037ee:	4b36      	ldr	r3, [pc, #216]	@ (80038c8 <HAL_UART_MspInit+0x3d0>)
 80037f0:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 80037f4:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80037f6:	4b34      	ldr	r3, [pc, #208]	@ (80038c8 <HAL_UART_MspInit+0x3d0>)
 80037f8:	2200      	movs	r2, #0
 80037fa:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80037fc:	4b32      	ldr	r3, [pc, #200]	@ (80038c8 <HAL_UART_MspInit+0x3d0>)
 80037fe:	2200      	movs	r2, #0
 8003800:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003802:	4b31      	ldr	r3, [pc, #196]	@ (80038c8 <HAL_UART_MspInit+0x3d0>)
 8003804:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003808:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800380a:	4b2f      	ldr	r3, [pc, #188]	@ (80038c8 <HAL_UART_MspInit+0x3d0>)
 800380c:	2200      	movs	r2, #0
 800380e:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003810:	4b2d      	ldr	r3, [pc, #180]	@ (80038c8 <HAL_UART_MspInit+0x3d0>)
 8003812:	2200      	movs	r2, #0
 8003814:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8003816:	4b2c      	ldr	r3, [pc, #176]	@ (80038c8 <HAL_UART_MspInit+0x3d0>)
 8003818:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800381c:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800381e:	4b2a      	ldr	r3, [pc, #168]	@ (80038c8 <HAL_UART_MspInit+0x3d0>)
 8003820:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003824:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003826:	4b28      	ldr	r3, [pc, #160]	@ (80038c8 <HAL_UART_MspInit+0x3d0>)
 8003828:	2200      	movs	r2, #0
 800382a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 800382c:	4826      	ldr	r0, [pc, #152]	@ (80038c8 <HAL_UART_MspInit+0x3d0>)
 800382e:	f000 fa2d 	bl	8003c8c <HAL_DMA_Init>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d001      	beq.n	800383c <HAL_UART_MspInit+0x344>
      Error_Handler();
 8003838:	f7fe fc4a 	bl	80020d0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4a22      	ldr	r2, [pc, #136]	@ (80038c8 <HAL_UART_MspInit+0x3d0>)
 8003840:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003842:	4a21      	ldr	r2, [pc, #132]	@ (80038c8 <HAL_UART_MspInit+0x3d0>)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8003848:	4b21      	ldr	r3, [pc, #132]	@ (80038d0 <HAL_UART_MspInit+0x3d8>)
 800384a:	4a22      	ldr	r2, [pc, #136]	@ (80038d4 <HAL_UART_MspInit+0x3dc>)
 800384c:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 800384e:	4b20      	ldr	r3, [pc, #128]	@ (80038d0 <HAL_UART_MspInit+0x3d8>)
 8003850:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8003854:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003856:	4b1e      	ldr	r3, [pc, #120]	@ (80038d0 <HAL_UART_MspInit+0x3d8>)
 8003858:	2240      	movs	r2, #64	@ 0x40
 800385a:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800385c:	4b1c      	ldr	r3, [pc, #112]	@ (80038d0 <HAL_UART_MspInit+0x3d8>)
 800385e:	2200      	movs	r2, #0
 8003860:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003862:	4b1b      	ldr	r3, [pc, #108]	@ (80038d0 <HAL_UART_MspInit+0x3d8>)
 8003864:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003868:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800386a:	4b19      	ldr	r3, [pc, #100]	@ (80038d0 <HAL_UART_MspInit+0x3d8>)
 800386c:	2200      	movs	r2, #0
 800386e:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003870:	4b17      	ldr	r3, [pc, #92]	@ (80038d0 <HAL_UART_MspInit+0x3d8>)
 8003872:	2200      	movs	r2, #0
 8003874:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8003876:	4b16      	ldr	r3, [pc, #88]	@ (80038d0 <HAL_UART_MspInit+0x3d8>)
 8003878:	2200      	movs	r2, #0
 800387a:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 800387c:	4b14      	ldr	r3, [pc, #80]	@ (80038d0 <HAL_UART_MspInit+0x3d8>)
 800387e:	2200      	movs	r2, #0
 8003880:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003882:	4b13      	ldr	r3, [pc, #76]	@ (80038d0 <HAL_UART_MspInit+0x3d8>)
 8003884:	2200      	movs	r2, #0
 8003886:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8003888:	4811      	ldr	r0, [pc, #68]	@ (80038d0 <HAL_UART_MspInit+0x3d8>)
 800388a:	f000 f9ff 	bl	8003c8c <HAL_DMA_Init>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d001      	beq.n	8003898 <HAL_UART_MspInit+0x3a0>
      Error_Handler();
 8003894:	f7fe fc1c 	bl	80020d0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a0d      	ldr	r2, [pc, #52]	@ (80038d0 <HAL_UART_MspInit+0x3d8>)
 800389c:	639a      	str	r2, [r3, #56]	@ 0x38
 800389e:	4a0c      	ldr	r2, [pc, #48]	@ (80038d0 <HAL_UART_MspInit+0x3d8>)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 80038a4:	2200      	movs	r2, #0
 80038a6:	2105      	movs	r1, #5
 80038a8:	2047      	movs	r0, #71	@ 0x47
 80038aa:	f000 f9c5 	bl	8003c38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80038ae:	2047      	movs	r0, #71	@ 0x47
 80038b0:	f000 f9de 	bl	8003c70 <HAL_NVIC_EnableIRQ>
}
 80038b4:	bf00      	nop
 80038b6:	3740      	adds	r7, #64	@ 0x40
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	40011400 	.word	0x40011400
 80038c0:	40023800 	.word	0x40023800
 80038c4:	40020800 	.word	0x40020800
 80038c8:	200082f8 	.word	0x200082f8
 80038cc:	40026428 	.word	0x40026428
 80038d0:	20008358 	.word	0x20008358
 80038d4:	400264a0 	.word	0x400264a0

080038d8 <Publisher_state>:

extern rcl_publisher_t publisher_string_scan;
extern rcl_publisher_t publisher_string_pos;
extern UART_HandleTypeDef huart2;

void Publisher_state(){
 80038d8:	b580      	push	{r7, lr}
 80038da:	b088      	sub	sp, #32
 80038dc:	af00      	add	r7, sp, #0
	std_msgs__msg__String msg;
	char str[20] = "finish";
 80038de:	4a11      	ldr	r2, [pc, #68]	@ (8003924 <Publisher_state+0x4c>)
 80038e0:	463b      	mov	r3, r7
 80038e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80038e6:	6018      	str	r0, [r3, #0]
 80038e8:	3304      	adds	r3, #4
 80038ea:	8019      	strh	r1, [r3, #0]
 80038ec:	3302      	adds	r3, #2
 80038ee:	0c0a      	lsrs	r2, r1, #16
 80038f0:	701a      	strb	r2, [r3, #0]
 80038f2:	1dfb      	adds	r3, r7, #7
 80038f4:	2200      	movs	r2, #0
 80038f6:	601a      	str	r2, [r3, #0]
 80038f8:	605a      	str	r2, [r3, #4]
 80038fa:	609a      	str	r2, [r3, #8]
 80038fc:	731a      	strb	r2, [r3, #12]
	msg.data.data = str;
 80038fe:	463b      	mov	r3, r7
 8003900:	617b      	str	r3, [r7, #20]
	msg.data.size = strlen(str);
 8003902:	463b      	mov	r3, r7
 8003904:	4618      	mov	r0, r3
 8003906:	f7fc fce3 	bl	80002d0 <strlen>
 800390a:	4603      	mov	r3, r0
 800390c:	61bb      	str	r3, [r7, #24]
	rcl_publish(&publisher_string_scan, &msg, NULL);
 800390e:	f107 0314 	add.w	r3, r7, #20
 8003912:	2200      	movs	r2, #0
 8003914:	4619      	mov	r1, r3
 8003916:	4804      	ldr	r0, [pc, #16]	@ (8003928 <Publisher_state+0x50>)
 8003918:	f006 fe0a 	bl	800a530 <rcl_publish>
}
 800391c:	bf00      	nop
 800391e:	3720      	adds	r7, #32
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}
 8003924:	08019db8 	.word	0x08019db8
 8003928:	200046c4 	.word	0x200046c4

0800392c <Publisher_pos>:

/*double type input X,Y */
void Publisher_pos(double x, double y){
 800392c:	b580      	push	{r7, lr}
 800392e:	b0a2      	sub	sp, #136	@ 0x88
 8003930:	af02      	add	r7, sp, #8
 8003932:	ed87 0b02 	vstr	d0, [r7, #8]
 8003936:	ed87 1b00 	vstr	d1, [r7]
	std_msgs__msg__String msg;
	char str[100] = "";
 800393a:	2300      	movs	r3, #0
 800393c:	613b      	str	r3, [r7, #16]
 800393e:	f107 0314 	add.w	r3, r7, #20
 8003942:	2260      	movs	r2, #96	@ 0x60
 8003944:	2100      	movs	r1, #0
 8003946:	4618      	mov	r0, r3
 8003948:	f014 f96e 	bl	8017c28 <memset>
	sprintf(str, "%lf %lf", x,y);
 800394c:	f107 0010 	add.w	r0, r7, #16
 8003950:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003954:	e9cd 2300 	strd	r2, r3, [sp]
 8003958:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800395c:	490f      	ldr	r1, [pc, #60]	@ (800399c <Publisher_pos+0x70>)
 800395e:	f014 f809 	bl	8017974 <siprintf>
	msg.data.data = str;
 8003962:	f107 0310 	add.w	r3, r7, #16
 8003966:	677b      	str	r3, [r7, #116]	@ 0x74
	msg.data.size = strlen(str);
 8003968:	f107 0310 	add.w	r3, r7, #16
 800396c:	4618      	mov	r0, r3
 800396e:	f7fc fcaf 	bl	80002d0 <strlen>
 8003972:	4603      	mov	r3, r0
 8003974:	67bb      	str	r3, [r7, #120]	@ 0x78
	rcl_publish(&publisher_string_pos, &msg, NULL);
 8003976:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800397a:	2200      	movs	r2, #0
 800397c:	4619      	mov	r1, r3
 800397e:	4808      	ldr	r0, [pc, #32]	@ (80039a0 <Publisher_pos+0x74>)
 8003980:	f006 fdd6 	bl	800a530 <rcl_publish>
	HAL_UART_Transmit(&huart2, str, sizeof(str), 100);
 8003984:	f107 0110 	add.w	r1, r7, #16
 8003988:	2364      	movs	r3, #100	@ 0x64
 800398a:	2264      	movs	r2, #100	@ 0x64
 800398c:	4805      	ldr	r0, [pc, #20]	@ (80039a4 <Publisher_pos+0x78>)
 800398e:	f003 f947 	bl	8006c20 <HAL_UART_Transmit>
}
 8003992:	bf00      	nop
 8003994:	3780      	adds	r7, #128	@ 0x80
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	08019dcc 	.word	0x08019dcc
 80039a0:	200046c8 	.word	0x200046c8
 80039a4:	20008160 	.word	0x20008160

080039a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80039a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80039e0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80039ac:	f7ff fa36 	bl	8002e1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80039b0:	480c      	ldr	r0, [pc, #48]	@ (80039e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80039b2:	490d      	ldr	r1, [pc, #52]	@ (80039e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80039b4:	4a0d      	ldr	r2, [pc, #52]	@ (80039ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80039b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80039b8:	e002      	b.n	80039c0 <LoopCopyDataInit>

080039ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80039ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80039bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80039be:	3304      	adds	r3, #4

080039c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80039c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80039c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80039c4:	d3f9      	bcc.n	80039ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80039c6:	4a0a      	ldr	r2, [pc, #40]	@ (80039f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80039c8:	4c0a      	ldr	r4, [pc, #40]	@ (80039f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80039ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80039cc:	e001      	b.n	80039d2 <LoopFillZerobss>

080039ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80039ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80039d0:	3204      	adds	r2, #4

080039d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80039d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80039d4:	d3fb      	bcc.n	80039ce <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80039d6:	f014 fa1b 	bl	8017e10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80039da:	f7fe fac1 	bl	8001f60 <main>
  bx  lr    
 80039de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80039e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80039e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80039e8:	20000284 	.word	0x20000284
  ldr r2, =_sidata
 80039ec:	0801ae30 	.word	0x0801ae30
  ldr r2, =_sbss
 80039f0:	20000288 	.word	0x20000288
  ldr r4, =_ebss
 80039f4:	20010dd8 	.word	0x20010dd8

080039f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80039f8:	e7fe      	b.n	80039f8 <ADC_IRQHandler>
	...

080039fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003a00:	4b0e      	ldr	r3, [pc, #56]	@ (8003a3c <HAL_Init+0x40>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a0d      	ldr	r2, [pc, #52]	@ (8003a3c <HAL_Init+0x40>)
 8003a06:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003a0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003a0c:	4b0b      	ldr	r3, [pc, #44]	@ (8003a3c <HAL_Init+0x40>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a0a      	ldr	r2, [pc, #40]	@ (8003a3c <HAL_Init+0x40>)
 8003a12:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003a16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a18:	4b08      	ldr	r3, [pc, #32]	@ (8003a3c <HAL_Init+0x40>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a07      	ldr	r2, [pc, #28]	@ (8003a3c <HAL_Init+0x40>)
 8003a1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a24:	2003      	movs	r0, #3
 8003a26:	f000 f8fc 	bl	8003c22 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a2a:	200f      	movs	r0, #15
 8003a2c:	f7ff f830 	bl	8002a90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003a30:	f7ff f802 	bl	8002a38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	40023c00 	.word	0x40023c00

08003a40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a40:	b480      	push	{r7}
 8003a42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a44:	4b06      	ldr	r3, [pc, #24]	@ (8003a60 <HAL_IncTick+0x20>)
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	461a      	mov	r2, r3
 8003a4a:	4b06      	ldr	r3, [pc, #24]	@ (8003a64 <HAL_IncTick+0x24>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4413      	add	r3, r2
 8003a50:	4a04      	ldr	r2, [pc, #16]	@ (8003a64 <HAL_IncTick+0x24>)
 8003a52:	6013      	str	r3, [r2, #0]
}
 8003a54:	bf00      	nop
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	20000014 	.word	0x20000014
 8003a64:	200083b8 	.word	0x200083b8

08003a68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	af00      	add	r7, sp, #0
  return uwTick;
 8003a6c:	4b03      	ldr	r3, [pc, #12]	@ (8003a7c <HAL_GetTick+0x14>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	200083b8 	.word	0x200083b8

08003a80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a88:	f7ff ffee 	bl	8003a68 <HAL_GetTick>
 8003a8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003a98:	d005      	beq.n	8003aa6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a9a:	4b0a      	ldr	r3, [pc, #40]	@ (8003ac4 <HAL_Delay+0x44>)
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003aa6:	bf00      	nop
 8003aa8:	f7ff ffde 	bl	8003a68 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	68fa      	ldr	r2, [r7, #12]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d8f7      	bhi.n	8003aa8 <HAL_Delay+0x28>
  {
  }
}
 8003ab8:	bf00      	nop
 8003aba:	bf00      	nop
 8003abc:	3710      	adds	r7, #16
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	20000014 	.word	0x20000014

08003ac8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b085      	sub	sp, #20
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f003 0307 	and.w	r3, r3, #7
 8003ad6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8003b0c <__NVIC_SetPriorityGrouping+0x44>)
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ade:	68ba      	ldr	r2, [r7, #8]
 8003ae0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003af0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003af4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003af8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003afa:	4a04      	ldr	r2, [pc, #16]	@ (8003b0c <__NVIC_SetPriorityGrouping+0x44>)
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	60d3      	str	r3, [r2, #12]
}
 8003b00:	bf00      	nop
 8003b02:	3714      	adds	r7, #20
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr
 8003b0c:	e000ed00 	.word	0xe000ed00

08003b10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b10:	b480      	push	{r7}
 8003b12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b14:	4b04      	ldr	r3, [pc, #16]	@ (8003b28 <__NVIC_GetPriorityGrouping+0x18>)
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	0a1b      	lsrs	r3, r3, #8
 8003b1a:	f003 0307 	and.w	r3, r3, #7
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr
 8003b28:	e000ed00 	.word	0xe000ed00

08003b2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	4603      	mov	r3, r0
 8003b34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	db0b      	blt.n	8003b56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b3e:	79fb      	ldrb	r3, [r7, #7]
 8003b40:	f003 021f 	and.w	r2, r3, #31
 8003b44:	4907      	ldr	r1, [pc, #28]	@ (8003b64 <__NVIC_EnableIRQ+0x38>)
 8003b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b4a:	095b      	lsrs	r3, r3, #5
 8003b4c:	2001      	movs	r0, #1
 8003b4e:	fa00 f202 	lsl.w	r2, r0, r2
 8003b52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003b56:	bf00      	nop
 8003b58:	370c      	adds	r7, #12
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	e000e100 	.word	0xe000e100

08003b68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	4603      	mov	r3, r0
 8003b70:	6039      	str	r1, [r7, #0]
 8003b72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	db0a      	blt.n	8003b92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	b2da      	uxtb	r2, r3
 8003b80:	490c      	ldr	r1, [pc, #48]	@ (8003bb4 <__NVIC_SetPriority+0x4c>)
 8003b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b86:	0112      	lsls	r2, r2, #4
 8003b88:	b2d2      	uxtb	r2, r2
 8003b8a:	440b      	add	r3, r1
 8003b8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b90:	e00a      	b.n	8003ba8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	b2da      	uxtb	r2, r3
 8003b96:	4908      	ldr	r1, [pc, #32]	@ (8003bb8 <__NVIC_SetPriority+0x50>)
 8003b98:	79fb      	ldrb	r3, [r7, #7]
 8003b9a:	f003 030f 	and.w	r3, r3, #15
 8003b9e:	3b04      	subs	r3, #4
 8003ba0:	0112      	lsls	r2, r2, #4
 8003ba2:	b2d2      	uxtb	r2, r2
 8003ba4:	440b      	add	r3, r1
 8003ba6:	761a      	strb	r2, [r3, #24]
}
 8003ba8:	bf00      	nop
 8003baa:	370c      	adds	r7, #12
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr
 8003bb4:	e000e100 	.word	0xe000e100
 8003bb8:	e000ed00 	.word	0xe000ed00

08003bbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b089      	sub	sp, #36	@ 0x24
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f003 0307 	and.w	r3, r3, #7
 8003bce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	f1c3 0307 	rsb	r3, r3, #7
 8003bd6:	2b04      	cmp	r3, #4
 8003bd8:	bf28      	it	cs
 8003bda:	2304      	movcs	r3, #4
 8003bdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	3304      	adds	r3, #4
 8003be2:	2b06      	cmp	r3, #6
 8003be4:	d902      	bls.n	8003bec <NVIC_EncodePriority+0x30>
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	3b03      	subs	r3, #3
 8003bea:	e000      	b.n	8003bee <NVIC_EncodePriority+0x32>
 8003bec:	2300      	movs	r3, #0
 8003bee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bf0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfa:	43da      	mvns	r2, r3
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	401a      	ands	r2, r3
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c04:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c0e:	43d9      	mvns	r1, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c14:	4313      	orrs	r3, r2
         );
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3724      	adds	r7, #36	@ 0x24
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr

08003c22 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c22:	b580      	push	{r7, lr}
 8003c24:	b082      	sub	sp, #8
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f7ff ff4c 	bl	8003ac8 <__NVIC_SetPriorityGrouping>
}
 8003c30:	bf00      	nop
 8003c32:	3708      	adds	r7, #8
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b086      	sub	sp, #24
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	4603      	mov	r3, r0
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	607a      	str	r2, [r7, #4]
 8003c44:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c46:	2300      	movs	r3, #0
 8003c48:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c4a:	f7ff ff61 	bl	8003b10 <__NVIC_GetPriorityGrouping>
 8003c4e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	68b9      	ldr	r1, [r7, #8]
 8003c54:	6978      	ldr	r0, [r7, #20]
 8003c56:	f7ff ffb1 	bl	8003bbc <NVIC_EncodePriority>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c60:	4611      	mov	r1, r2
 8003c62:	4618      	mov	r0, r3
 8003c64:	f7ff ff80 	bl	8003b68 <__NVIC_SetPriority>
}
 8003c68:	bf00      	nop
 8003c6a:	3718      	adds	r7, #24
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	4603      	mov	r3, r0
 8003c78:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f7ff ff54 	bl	8003b2c <__NVIC_EnableIRQ>
}
 8003c84:	bf00      	nop
 8003c86:	3708      	adds	r7, #8
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b086      	sub	sp, #24
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003c94:	2300      	movs	r3, #0
 8003c96:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003c98:	f7ff fee6 	bl	8003a68 <HAL_GetTick>
 8003c9c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d101      	bne.n	8003ca8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e099      	b.n	8003ddc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2202      	movs	r2, #2
 8003cac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f022 0201 	bic.w	r2, r2, #1
 8003cc6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003cc8:	e00f      	b.n	8003cea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003cca:	f7ff fecd 	bl	8003a68 <HAL_GetTick>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	2b05      	cmp	r3, #5
 8003cd6:	d908      	bls.n	8003cea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2220      	movs	r2, #32
 8003cdc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2203      	movs	r2, #3
 8003ce2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e078      	b.n	8003ddc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0301 	and.w	r3, r3, #1
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d1e8      	bne.n	8003cca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003d00:	697a      	ldr	r2, [r7, #20]
 8003d02:	4b38      	ldr	r3, [pc, #224]	@ (8003de4 <HAL_DMA_Init+0x158>)
 8003d04:	4013      	ands	r3, r2
 8003d06:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	685a      	ldr	r2, [r3, #4]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d16:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	691b      	ldr	r3, [r3, #16]
 8003d1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	699b      	ldr	r3, [r3, #24]
 8003d28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a1b      	ldr	r3, [r3, #32]
 8003d34:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d36:	697a      	ldr	r2, [r7, #20]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d40:	2b04      	cmp	r3, #4
 8003d42:	d107      	bne.n	8003d54 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	697a      	ldr	r2, [r7, #20]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	697a      	ldr	r2, [r7, #20]
 8003d5a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	695b      	ldr	r3, [r3, #20]
 8003d62:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	f023 0307 	bic.w	r3, r3, #7
 8003d6a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d70:	697a      	ldr	r2, [r7, #20]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d7a:	2b04      	cmp	r3, #4
 8003d7c:	d117      	bne.n	8003dae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d82:	697a      	ldr	r2, [r7, #20]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d00e      	beq.n	8003dae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f000 fb01 	bl	8004398 <DMA_CheckFifoParam>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d008      	beq.n	8003dae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2240      	movs	r2, #64	@ 0x40
 8003da0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2201      	movs	r2, #1
 8003da6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003daa:	2301      	movs	r3, #1
 8003dac:	e016      	b.n	8003ddc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	697a      	ldr	r2, [r7, #20]
 8003db4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 fab8 	bl	800432c <DMA_CalcBaseAndBitshift>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dc4:	223f      	movs	r2, #63	@ 0x3f
 8003dc6:	409a      	lsls	r2, r3
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003dda:	2300      	movs	r3, #0
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3718      	adds	r7, #24
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	f010803f 	.word	0xf010803f

08003de8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b086      	sub	sp, #24
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	607a      	str	r2, [r7, #4]
 8003df4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003df6:	2300      	movs	r3, #0
 8003df8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dfe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d101      	bne.n	8003e0e <HAL_DMA_Start_IT+0x26>
 8003e0a:	2302      	movs	r3, #2
 8003e0c:	e040      	b.n	8003e90 <HAL_DMA_Start_IT+0xa8>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2201      	movs	r2, #1
 8003e12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d12f      	bne.n	8003e82 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2202      	movs	r2, #2
 8003e26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	68b9      	ldr	r1, [r7, #8]
 8003e36:	68f8      	ldr	r0, [r7, #12]
 8003e38:	f000 fa4a 	bl	80042d0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e40:	223f      	movs	r2, #63	@ 0x3f
 8003e42:	409a      	lsls	r2, r3
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f042 0216 	orr.w	r2, r2, #22
 8003e56:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d007      	beq.n	8003e70 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f042 0208 	orr.w	r2, r2, #8
 8003e6e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f042 0201 	orr.w	r2, r2, #1
 8003e7e:	601a      	str	r2, [r3, #0]
 8003e80:	e005      	b.n	8003e8e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003e8a:	2302      	movs	r3, #2
 8003e8c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003e8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3718      	adds	r7, #24
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ea4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003ea6:	f7ff fddf 	bl	8003a68 <HAL_GetTick>
 8003eaa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d008      	beq.n	8003eca <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2280      	movs	r2, #128	@ 0x80
 8003ebc:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e052      	b.n	8003f70 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f022 0216 	bic.w	r2, r2, #22
 8003ed8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	695a      	ldr	r2, [r3, #20]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003ee8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d103      	bne.n	8003efa <HAL_DMA_Abort+0x62>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d007      	beq.n	8003f0a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f022 0208 	bic.w	r2, r2, #8
 8003f08:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f022 0201 	bic.w	r2, r2, #1
 8003f18:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f1a:	e013      	b.n	8003f44 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f1c:	f7ff fda4 	bl	8003a68 <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	2b05      	cmp	r3, #5
 8003f28:	d90c      	bls.n	8003f44 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2220      	movs	r2, #32
 8003f2e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2203      	movs	r2, #3
 8003f34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e015      	b.n	8003f70 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d1e4      	bne.n	8003f1c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f56:	223f      	movs	r2, #63	@ 0x3f
 8003f58:	409a      	lsls	r2, r3
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2201      	movs	r2, #1
 8003f62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3710      	adds	r7, #16
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d004      	beq.n	8003f96 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2280      	movs	r2, #128	@ 0x80
 8003f90:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e00c      	b.n	8003fb0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2205      	movs	r2, #5
 8003f9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f022 0201 	bic.w	r2, r2, #1
 8003fac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003fae:	2300      	movs	r3, #0
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	370c      	adds	r7, #12
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b086      	sub	sp, #24
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003fc8:	4b8e      	ldr	r3, [pc, #568]	@ (8004204 <HAL_DMA_IRQHandler+0x248>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a8e      	ldr	r2, [pc, #568]	@ (8004208 <HAL_DMA_IRQHandler+0x24c>)
 8003fce:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd2:	0a9b      	lsrs	r3, r3, #10
 8003fd4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fda:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fe6:	2208      	movs	r2, #8
 8003fe8:	409a      	lsls	r2, r3
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	4013      	ands	r3, r2
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d01a      	beq.n	8004028 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0304 	and.w	r3, r3, #4
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d013      	beq.n	8004028 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f022 0204 	bic.w	r2, r2, #4
 800400e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004014:	2208      	movs	r2, #8
 8004016:	409a      	lsls	r2, r3
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004020:	f043 0201 	orr.w	r2, r3, #1
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800402c:	2201      	movs	r2, #1
 800402e:	409a      	lsls	r2, r3
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	4013      	ands	r3, r2
 8004034:	2b00      	cmp	r3, #0
 8004036:	d012      	beq.n	800405e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004042:	2b00      	cmp	r3, #0
 8004044:	d00b      	beq.n	800405e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800404a:	2201      	movs	r2, #1
 800404c:	409a      	lsls	r2, r3
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004056:	f043 0202 	orr.w	r2, r3, #2
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004062:	2204      	movs	r2, #4
 8004064:	409a      	lsls	r2, r3
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	4013      	ands	r3, r2
 800406a:	2b00      	cmp	r3, #0
 800406c:	d012      	beq.n	8004094 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0302 	and.w	r3, r3, #2
 8004078:	2b00      	cmp	r3, #0
 800407a:	d00b      	beq.n	8004094 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004080:	2204      	movs	r2, #4
 8004082:	409a      	lsls	r2, r3
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800408c:	f043 0204 	orr.w	r2, r3, #4
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004098:	2210      	movs	r2, #16
 800409a:	409a      	lsls	r2, r3
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	4013      	ands	r3, r2
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d043      	beq.n	800412c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0308 	and.w	r3, r3, #8
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d03c      	beq.n	800412c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040b6:	2210      	movs	r2, #16
 80040b8:	409a      	lsls	r2, r3
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d018      	beq.n	80040fe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d108      	bne.n	80040ec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d024      	beq.n	800412c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	4798      	blx	r3
 80040ea:	e01f      	b.n	800412c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d01b      	beq.n	800412c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	4798      	blx	r3
 80040fc:	e016      	b.n	800412c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004108:	2b00      	cmp	r3, #0
 800410a:	d107      	bne.n	800411c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f022 0208 	bic.w	r2, r2, #8
 800411a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004120:	2b00      	cmp	r3, #0
 8004122:	d003      	beq.n	800412c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004130:	2220      	movs	r2, #32
 8004132:	409a      	lsls	r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	4013      	ands	r3, r2
 8004138:	2b00      	cmp	r3, #0
 800413a:	f000 808f 	beq.w	800425c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0310 	and.w	r3, r3, #16
 8004148:	2b00      	cmp	r3, #0
 800414a:	f000 8087 	beq.w	800425c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004152:	2220      	movs	r2, #32
 8004154:	409a      	lsls	r2, r3
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004160:	b2db      	uxtb	r3, r3
 8004162:	2b05      	cmp	r3, #5
 8004164:	d136      	bne.n	80041d4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f022 0216 	bic.w	r2, r2, #22
 8004174:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	695a      	ldr	r2, [r3, #20]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004184:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800418a:	2b00      	cmp	r3, #0
 800418c:	d103      	bne.n	8004196 <HAL_DMA_IRQHandler+0x1da>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004192:	2b00      	cmp	r3, #0
 8004194:	d007      	beq.n	80041a6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f022 0208 	bic.w	r2, r2, #8
 80041a4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041aa:	223f      	movs	r2, #63	@ 0x3f
 80041ac:	409a      	lsls	r2, r3
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2201      	movs	r2, #1
 80041b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d07e      	beq.n	80042c8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	4798      	blx	r3
        }
        return;
 80041d2:	e079      	b.n	80042c8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d01d      	beq.n	800421e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d10d      	bne.n	800420c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d031      	beq.n	800425c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	4798      	blx	r3
 8004200:	e02c      	b.n	800425c <HAL_DMA_IRQHandler+0x2a0>
 8004202:	bf00      	nop
 8004204:	20000004 	.word	0x20000004
 8004208:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004210:	2b00      	cmp	r3, #0
 8004212:	d023      	beq.n	800425c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	4798      	blx	r3
 800421c:	e01e      	b.n	800425c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004228:	2b00      	cmp	r3, #0
 800422a:	d10f      	bne.n	800424c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f022 0210 	bic.w	r2, r2, #16
 800423a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004250:	2b00      	cmp	r3, #0
 8004252:	d003      	beq.n	800425c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004260:	2b00      	cmp	r3, #0
 8004262:	d032      	beq.n	80042ca <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004268:	f003 0301 	and.w	r3, r3, #1
 800426c:	2b00      	cmp	r3, #0
 800426e:	d022      	beq.n	80042b6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2205      	movs	r2, #5
 8004274:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f022 0201 	bic.w	r2, r2, #1
 8004286:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	3301      	adds	r3, #1
 800428c:	60bb      	str	r3, [r7, #8]
 800428e:	697a      	ldr	r2, [r7, #20]
 8004290:	429a      	cmp	r2, r3
 8004292:	d307      	bcc.n	80042a4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0301 	and.w	r3, r3, #1
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d1f2      	bne.n	8004288 <HAL_DMA_IRQHandler+0x2cc>
 80042a2:	e000      	b.n	80042a6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80042a4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2201      	movs	r2, #1
 80042aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d005      	beq.n	80042ca <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	4798      	blx	r3
 80042c6:	e000      	b.n	80042ca <HAL_DMA_IRQHandler+0x30e>
        return;
 80042c8:	bf00      	nop
    }
  }
}
 80042ca:	3718      	adds	r7, #24
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	60b9      	str	r1, [r7, #8]
 80042da:	607a      	str	r2, [r7, #4]
 80042dc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80042ec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	683a      	ldr	r2, [r7, #0]
 80042f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	2b40      	cmp	r3, #64	@ 0x40
 80042fc:	d108      	bne.n	8004310 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	68ba      	ldr	r2, [r7, #8]
 800430c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800430e:	e007      	b.n	8004320 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	68ba      	ldr	r2, [r7, #8]
 8004316:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	60da      	str	r2, [r3, #12]
}
 8004320:	bf00      	nop
 8004322:	3714      	adds	r7, #20
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800432c:	b480      	push	{r7}
 800432e:	b085      	sub	sp, #20
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	b2db      	uxtb	r3, r3
 800433a:	3b10      	subs	r3, #16
 800433c:	4a14      	ldr	r2, [pc, #80]	@ (8004390 <DMA_CalcBaseAndBitshift+0x64>)
 800433e:	fba2 2303 	umull	r2, r3, r2, r3
 8004342:	091b      	lsrs	r3, r3, #4
 8004344:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004346:	4a13      	ldr	r2, [pc, #76]	@ (8004394 <DMA_CalcBaseAndBitshift+0x68>)
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	4413      	add	r3, r2
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	461a      	mov	r2, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2b03      	cmp	r3, #3
 8004358:	d909      	bls.n	800436e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004362:	f023 0303 	bic.w	r3, r3, #3
 8004366:	1d1a      	adds	r2, r3, #4
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	659a      	str	r2, [r3, #88]	@ 0x58
 800436c:	e007      	b.n	800437e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004376:	f023 0303 	bic.w	r3, r3, #3
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004382:	4618      	mov	r0, r3
 8004384:	3714      	adds	r7, #20
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop
 8004390:	aaaaaaab 	.word	0xaaaaaaab
 8004394:	08019e10 	.word	0x08019e10

08004398 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004398:	b480      	push	{r7}
 800439a:	b085      	sub	sp, #20
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043a0:	2300      	movs	r3, #0
 80043a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	699b      	ldr	r3, [r3, #24]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d11f      	bne.n	80043f2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	2b03      	cmp	r3, #3
 80043b6:	d856      	bhi.n	8004466 <DMA_CheckFifoParam+0xce>
 80043b8:	a201      	add	r2, pc, #4	@ (adr r2, 80043c0 <DMA_CheckFifoParam+0x28>)
 80043ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043be:	bf00      	nop
 80043c0:	080043d1 	.word	0x080043d1
 80043c4:	080043e3 	.word	0x080043e3
 80043c8:	080043d1 	.word	0x080043d1
 80043cc:	08004467 	.word	0x08004467
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d046      	beq.n	800446a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043e0:	e043      	b.n	800446a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043e6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80043ea:	d140      	bne.n	800446e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043f0:	e03d      	b.n	800446e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	699b      	ldr	r3, [r3, #24]
 80043f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043fa:	d121      	bne.n	8004440 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	2b03      	cmp	r3, #3
 8004400:	d837      	bhi.n	8004472 <DMA_CheckFifoParam+0xda>
 8004402:	a201      	add	r2, pc, #4	@ (adr r2, 8004408 <DMA_CheckFifoParam+0x70>)
 8004404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004408:	08004419 	.word	0x08004419
 800440c:	0800441f 	.word	0x0800441f
 8004410:	08004419 	.word	0x08004419
 8004414:	08004431 	.word	0x08004431
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	73fb      	strb	r3, [r7, #15]
      break;
 800441c:	e030      	b.n	8004480 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004422:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d025      	beq.n	8004476 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800442e:	e022      	b.n	8004476 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004434:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004438:	d11f      	bne.n	800447a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800443e:	e01c      	b.n	800447a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	2b02      	cmp	r3, #2
 8004444:	d903      	bls.n	800444e <DMA_CheckFifoParam+0xb6>
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	2b03      	cmp	r3, #3
 800444a:	d003      	beq.n	8004454 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800444c:	e018      	b.n	8004480 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	73fb      	strb	r3, [r7, #15]
      break;
 8004452:	e015      	b.n	8004480 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004458:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d00e      	beq.n	800447e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	73fb      	strb	r3, [r7, #15]
      break;
 8004464:	e00b      	b.n	800447e <DMA_CheckFifoParam+0xe6>
      break;
 8004466:	bf00      	nop
 8004468:	e00a      	b.n	8004480 <DMA_CheckFifoParam+0xe8>
      break;
 800446a:	bf00      	nop
 800446c:	e008      	b.n	8004480 <DMA_CheckFifoParam+0xe8>
      break;
 800446e:	bf00      	nop
 8004470:	e006      	b.n	8004480 <DMA_CheckFifoParam+0xe8>
      break;
 8004472:	bf00      	nop
 8004474:	e004      	b.n	8004480 <DMA_CheckFifoParam+0xe8>
      break;
 8004476:	bf00      	nop
 8004478:	e002      	b.n	8004480 <DMA_CheckFifoParam+0xe8>
      break;   
 800447a:	bf00      	nop
 800447c:	e000      	b.n	8004480 <DMA_CheckFifoParam+0xe8>
      break;
 800447e:	bf00      	nop
    }
  } 
  
  return status; 
 8004480:	7bfb      	ldrb	r3, [r7, #15]
}
 8004482:	4618      	mov	r0, r3
 8004484:	3714      	adds	r7, #20
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr
 800448e:	bf00      	nop

08004490 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004490:	b480      	push	{r7}
 8004492:	b089      	sub	sp, #36	@ 0x24
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800449a:	2300      	movs	r3, #0
 800449c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800449e:	2300      	movs	r3, #0
 80044a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80044a2:	2300      	movs	r3, #0
 80044a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044a6:	2300      	movs	r3, #0
 80044a8:	61fb      	str	r3, [r7, #28]
 80044aa:	e165      	b.n	8004778 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80044ac:	2201      	movs	r2, #1
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	fa02 f303 	lsl.w	r3, r2, r3
 80044b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	697a      	ldr	r2, [r7, #20]
 80044bc:	4013      	ands	r3, r2
 80044be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80044c0:	693a      	ldr	r2, [r7, #16]
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	429a      	cmp	r2, r3
 80044c6:	f040 8154 	bne.w	8004772 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f003 0303 	and.w	r3, r3, #3
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d005      	beq.n	80044e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d130      	bne.n	8004544 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	005b      	lsls	r3, r3, #1
 80044ec:	2203      	movs	r2, #3
 80044ee:	fa02 f303 	lsl.w	r3, r2, r3
 80044f2:	43db      	mvns	r3, r3
 80044f4:	69ba      	ldr	r2, [r7, #24]
 80044f6:	4013      	ands	r3, r2
 80044f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	68da      	ldr	r2, [r3, #12]
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	005b      	lsls	r3, r3, #1
 8004502:	fa02 f303 	lsl.w	r3, r2, r3
 8004506:	69ba      	ldr	r2, [r7, #24]
 8004508:	4313      	orrs	r3, r2
 800450a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	69ba      	ldr	r2, [r7, #24]
 8004510:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004518:	2201      	movs	r2, #1
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	fa02 f303 	lsl.w	r3, r2, r3
 8004520:	43db      	mvns	r3, r3
 8004522:	69ba      	ldr	r2, [r7, #24]
 8004524:	4013      	ands	r3, r2
 8004526:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	091b      	lsrs	r3, r3, #4
 800452e:	f003 0201 	and.w	r2, r3, #1
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	fa02 f303 	lsl.w	r3, r2, r3
 8004538:	69ba      	ldr	r2, [r7, #24]
 800453a:	4313      	orrs	r3, r2
 800453c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	69ba      	ldr	r2, [r7, #24]
 8004542:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	f003 0303 	and.w	r3, r3, #3
 800454c:	2b03      	cmp	r3, #3
 800454e:	d017      	beq.n	8004580 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	005b      	lsls	r3, r3, #1
 800455a:	2203      	movs	r2, #3
 800455c:	fa02 f303 	lsl.w	r3, r2, r3
 8004560:	43db      	mvns	r3, r3
 8004562:	69ba      	ldr	r2, [r7, #24]
 8004564:	4013      	ands	r3, r2
 8004566:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	689a      	ldr	r2, [r3, #8]
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	005b      	lsls	r3, r3, #1
 8004570:	fa02 f303 	lsl.w	r3, r2, r3
 8004574:	69ba      	ldr	r2, [r7, #24]
 8004576:	4313      	orrs	r3, r2
 8004578:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	69ba      	ldr	r2, [r7, #24]
 800457e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f003 0303 	and.w	r3, r3, #3
 8004588:	2b02      	cmp	r3, #2
 800458a:	d123      	bne.n	80045d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	08da      	lsrs	r2, r3, #3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	3208      	adds	r2, #8
 8004594:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004598:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	f003 0307 	and.w	r3, r3, #7
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	220f      	movs	r2, #15
 80045a4:	fa02 f303 	lsl.w	r3, r2, r3
 80045a8:	43db      	mvns	r3, r3
 80045aa:	69ba      	ldr	r2, [r7, #24]
 80045ac:	4013      	ands	r3, r2
 80045ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	691a      	ldr	r2, [r3, #16]
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	f003 0307 	and.w	r3, r3, #7
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	fa02 f303 	lsl.w	r3, r2, r3
 80045c0:	69ba      	ldr	r2, [r7, #24]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	08da      	lsrs	r2, r3, #3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	3208      	adds	r2, #8
 80045ce:	69b9      	ldr	r1, [r7, #24]
 80045d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	005b      	lsls	r3, r3, #1
 80045de:	2203      	movs	r2, #3
 80045e0:	fa02 f303 	lsl.w	r3, r2, r3
 80045e4:	43db      	mvns	r3, r3
 80045e6:	69ba      	ldr	r2, [r7, #24]
 80045e8:	4013      	ands	r3, r2
 80045ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f003 0203 	and.w	r2, r3, #3
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	005b      	lsls	r3, r3, #1
 80045f8:	fa02 f303 	lsl.w	r3, r2, r3
 80045fc:	69ba      	ldr	r2, [r7, #24]
 80045fe:	4313      	orrs	r3, r2
 8004600:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	69ba      	ldr	r2, [r7, #24]
 8004606:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004610:	2b00      	cmp	r3, #0
 8004612:	f000 80ae 	beq.w	8004772 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004616:	2300      	movs	r3, #0
 8004618:	60fb      	str	r3, [r7, #12]
 800461a:	4b5d      	ldr	r3, [pc, #372]	@ (8004790 <HAL_GPIO_Init+0x300>)
 800461c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800461e:	4a5c      	ldr	r2, [pc, #368]	@ (8004790 <HAL_GPIO_Init+0x300>)
 8004620:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004624:	6453      	str	r3, [r2, #68]	@ 0x44
 8004626:	4b5a      	ldr	r3, [pc, #360]	@ (8004790 <HAL_GPIO_Init+0x300>)
 8004628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800462a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800462e:	60fb      	str	r3, [r7, #12]
 8004630:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004632:	4a58      	ldr	r2, [pc, #352]	@ (8004794 <HAL_GPIO_Init+0x304>)
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	089b      	lsrs	r3, r3, #2
 8004638:	3302      	adds	r3, #2
 800463a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800463e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	f003 0303 	and.w	r3, r3, #3
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	220f      	movs	r2, #15
 800464a:	fa02 f303 	lsl.w	r3, r2, r3
 800464e:	43db      	mvns	r3, r3
 8004650:	69ba      	ldr	r2, [r7, #24]
 8004652:	4013      	ands	r3, r2
 8004654:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a4f      	ldr	r2, [pc, #316]	@ (8004798 <HAL_GPIO_Init+0x308>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d025      	beq.n	80046aa <HAL_GPIO_Init+0x21a>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a4e      	ldr	r2, [pc, #312]	@ (800479c <HAL_GPIO_Init+0x30c>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d01f      	beq.n	80046a6 <HAL_GPIO_Init+0x216>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a4d      	ldr	r2, [pc, #308]	@ (80047a0 <HAL_GPIO_Init+0x310>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d019      	beq.n	80046a2 <HAL_GPIO_Init+0x212>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4a4c      	ldr	r2, [pc, #304]	@ (80047a4 <HAL_GPIO_Init+0x314>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d013      	beq.n	800469e <HAL_GPIO_Init+0x20e>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a4b      	ldr	r2, [pc, #300]	@ (80047a8 <HAL_GPIO_Init+0x318>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d00d      	beq.n	800469a <HAL_GPIO_Init+0x20a>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a4a      	ldr	r2, [pc, #296]	@ (80047ac <HAL_GPIO_Init+0x31c>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d007      	beq.n	8004696 <HAL_GPIO_Init+0x206>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a49      	ldr	r2, [pc, #292]	@ (80047b0 <HAL_GPIO_Init+0x320>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d101      	bne.n	8004692 <HAL_GPIO_Init+0x202>
 800468e:	2306      	movs	r3, #6
 8004690:	e00c      	b.n	80046ac <HAL_GPIO_Init+0x21c>
 8004692:	2307      	movs	r3, #7
 8004694:	e00a      	b.n	80046ac <HAL_GPIO_Init+0x21c>
 8004696:	2305      	movs	r3, #5
 8004698:	e008      	b.n	80046ac <HAL_GPIO_Init+0x21c>
 800469a:	2304      	movs	r3, #4
 800469c:	e006      	b.n	80046ac <HAL_GPIO_Init+0x21c>
 800469e:	2303      	movs	r3, #3
 80046a0:	e004      	b.n	80046ac <HAL_GPIO_Init+0x21c>
 80046a2:	2302      	movs	r3, #2
 80046a4:	e002      	b.n	80046ac <HAL_GPIO_Init+0x21c>
 80046a6:	2301      	movs	r3, #1
 80046a8:	e000      	b.n	80046ac <HAL_GPIO_Init+0x21c>
 80046aa:	2300      	movs	r3, #0
 80046ac:	69fa      	ldr	r2, [r7, #28]
 80046ae:	f002 0203 	and.w	r2, r2, #3
 80046b2:	0092      	lsls	r2, r2, #2
 80046b4:	4093      	lsls	r3, r2
 80046b6:	69ba      	ldr	r2, [r7, #24]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80046bc:	4935      	ldr	r1, [pc, #212]	@ (8004794 <HAL_GPIO_Init+0x304>)
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	089b      	lsrs	r3, r3, #2
 80046c2:	3302      	adds	r3, #2
 80046c4:	69ba      	ldr	r2, [r7, #24]
 80046c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80046ca:	4b3a      	ldr	r3, [pc, #232]	@ (80047b4 <HAL_GPIO_Init+0x324>)
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	43db      	mvns	r3, r3
 80046d4:	69ba      	ldr	r2, [r7, #24]
 80046d6:	4013      	ands	r3, r2
 80046d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d003      	beq.n	80046ee <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80046e6:	69ba      	ldr	r2, [r7, #24]
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80046ee:	4a31      	ldr	r2, [pc, #196]	@ (80047b4 <HAL_GPIO_Init+0x324>)
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80046f4:	4b2f      	ldr	r3, [pc, #188]	@ (80047b4 <HAL_GPIO_Init+0x324>)
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	43db      	mvns	r3, r3
 80046fe:	69ba      	ldr	r2, [r7, #24]
 8004700:	4013      	ands	r3, r2
 8004702:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d003      	beq.n	8004718 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004710:	69ba      	ldr	r2, [r7, #24]
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	4313      	orrs	r3, r2
 8004716:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004718:	4a26      	ldr	r2, [pc, #152]	@ (80047b4 <HAL_GPIO_Init+0x324>)
 800471a:	69bb      	ldr	r3, [r7, #24]
 800471c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800471e:	4b25      	ldr	r3, [pc, #148]	@ (80047b4 <HAL_GPIO_Init+0x324>)
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	43db      	mvns	r3, r3
 8004728:	69ba      	ldr	r2, [r7, #24]
 800472a:	4013      	ands	r3, r2
 800472c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d003      	beq.n	8004742 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800473a:	69ba      	ldr	r2, [r7, #24]
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	4313      	orrs	r3, r2
 8004740:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004742:	4a1c      	ldr	r2, [pc, #112]	@ (80047b4 <HAL_GPIO_Init+0x324>)
 8004744:	69bb      	ldr	r3, [r7, #24]
 8004746:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004748:	4b1a      	ldr	r3, [pc, #104]	@ (80047b4 <HAL_GPIO_Init+0x324>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	43db      	mvns	r3, r3
 8004752:	69ba      	ldr	r2, [r7, #24]
 8004754:	4013      	ands	r3, r2
 8004756:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004760:	2b00      	cmp	r3, #0
 8004762:	d003      	beq.n	800476c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004764:	69ba      	ldr	r2, [r7, #24]
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	4313      	orrs	r3, r2
 800476a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800476c:	4a11      	ldr	r2, [pc, #68]	@ (80047b4 <HAL_GPIO_Init+0x324>)
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004772:	69fb      	ldr	r3, [r7, #28]
 8004774:	3301      	adds	r3, #1
 8004776:	61fb      	str	r3, [r7, #28]
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	2b0f      	cmp	r3, #15
 800477c:	f67f ae96 	bls.w	80044ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004780:	bf00      	nop
 8004782:	bf00      	nop
 8004784:	3724      	adds	r7, #36	@ 0x24
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr
 800478e:	bf00      	nop
 8004790:	40023800 	.word	0x40023800
 8004794:	40013800 	.word	0x40013800
 8004798:	40020000 	.word	0x40020000
 800479c:	40020400 	.word	0x40020400
 80047a0:	40020800 	.word	0x40020800
 80047a4:	40020c00 	.word	0x40020c00
 80047a8:	40021000 	.word	0x40021000
 80047ac:	40021400 	.word	0x40021400
 80047b0:	40021800 	.word	0x40021800
 80047b4:	40013c00 	.word	0x40013c00

080047b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	460b      	mov	r3, r1
 80047c2:	807b      	strh	r3, [r7, #2]
 80047c4:	4613      	mov	r3, r2
 80047c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80047c8:	787b      	ldrb	r3, [r7, #1]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d003      	beq.n	80047d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80047ce:	887a      	ldrh	r2, [r7, #2]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80047d4:	e003      	b.n	80047de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80047d6:	887b      	ldrh	r3, [r7, #2]
 80047d8:	041a      	lsls	r2, r3, #16
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	619a      	str	r2, [r3, #24]
}
 80047de:	bf00      	nop
 80047e0:	370c      	adds	r7, #12
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr
	...

080047ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b082      	sub	sp, #8
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	4603      	mov	r3, r0
 80047f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80047f6:	4b08      	ldr	r3, [pc, #32]	@ (8004818 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80047f8:	695a      	ldr	r2, [r3, #20]
 80047fa:	88fb      	ldrh	r3, [r7, #6]
 80047fc:	4013      	ands	r3, r2
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d006      	beq.n	8004810 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004802:	4a05      	ldr	r2, [pc, #20]	@ (8004818 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004804:	88fb      	ldrh	r3, [r7, #6]
 8004806:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004808:	88fb      	ldrh	r3, [r7, #6]
 800480a:	4618      	mov	r0, r3
 800480c:	f7fd fb6e 	bl	8001eec <HAL_GPIO_EXTI_Callback>
  }
}
 8004810:	bf00      	nop
 8004812:	3708      	adds	r7, #8
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}
 8004818:	40013c00 	.word	0x40013c00

0800481c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b082      	sub	sp, #8
 8004820:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004822:	2300      	movs	r3, #0
 8004824:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004826:	2300      	movs	r3, #0
 8004828:	603b      	str	r3, [r7, #0]
 800482a:	4b20      	ldr	r3, [pc, #128]	@ (80048ac <HAL_PWREx_EnableOverDrive+0x90>)
 800482c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800482e:	4a1f      	ldr	r2, [pc, #124]	@ (80048ac <HAL_PWREx_EnableOverDrive+0x90>)
 8004830:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004834:	6413      	str	r3, [r2, #64]	@ 0x40
 8004836:	4b1d      	ldr	r3, [pc, #116]	@ (80048ac <HAL_PWREx_EnableOverDrive+0x90>)
 8004838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800483a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800483e:	603b      	str	r3, [r7, #0]
 8004840:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004842:	4b1b      	ldr	r3, [pc, #108]	@ (80048b0 <HAL_PWREx_EnableOverDrive+0x94>)
 8004844:	2201      	movs	r2, #1
 8004846:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004848:	f7ff f90e 	bl	8003a68 <HAL_GetTick>
 800484c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800484e:	e009      	b.n	8004864 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004850:	f7ff f90a 	bl	8003a68 <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800485e:	d901      	bls.n	8004864 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	e01f      	b.n	80048a4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004864:	4b13      	ldr	r3, [pc, #76]	@ (80048b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800486c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004870:	d1ee      	bne.n	8004850 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004872:	4b11      	ldr	r3, [pc, #68]	@ (80048b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004874:	2201      	movs	r2, #1
 8004876:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004878:	f7ff f8f6 	bl	8003a68 <HAL_GetTick>
 800487c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800487e:	e009      	b.n	8004894 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004880:	f7ff f8f2 	bl	8003a68 <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800488e:	d901      	bls.n	8004894 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004890:	2303      	movs	r3, #3
 8004892:	e007      	b.n	80048a4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004894:	4b07      	ldr	r3, [pc, #28]	@ (80048b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800489c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80048a0:	d1ee      	bne.n	8004880 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80048a2:	2300      	movs	r3, #0
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3708      	adds	r7, #8
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	40023800 	.word	0x40023800
 80048b0:	420e0040 	.word	0x420e0040
 80048b4:	40007000 	.word	0x40007000
 80048b8:	420e0044 	.word	0x420e0044

080048bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b084      	sub	sp, #16
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d101      	bne.n	80048d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e0cc      	b.n	8004a6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048d0:	4b68      	ldr	r3, [pc, #416]	@ (8004a74 <HAL_RCC_ClockConfig+0x1b8>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 030f 	and.w	r3, r3, #15
 80048d8:	683a      	ldr	r2, [r7, #0]
 80048da:	429a      	cmp	r2, r3
 80048dc:	d90c      	bls.n	80048f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048de:	4b65      	ldr	r3, [pc, #404]	@ (8004a74 <HAL_RCC_ClockConfig+0x1b8>)
 80048e0:	683a      	ldr	r2, [r7, #0]
 80048e2:	b2d2      	uxtb	r2, r2
 80048e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048e6:	4b63      	ldr	r3, [pc, #396]	@ (8004a74 <HAL_RCC_ClockConfig+0x1b8>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 030f 	and.w	r3, r3, #15
 80048ee:	683a      	ldr	r2, [r7, #0]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d001      	beq.n	80048f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e0b8      	b.n	8004a6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0302 	and.w	r3, r3, #2
 8004900:	2b00      	cmp	r3, #0
 8004902:	d020      	beq.n	8004946 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0304 	and.w	r3, r3, #4
 800490c:	2b00      	cmp	r3, #0
 800490e:	d005      	beq.n	800491c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004910:	4b59      	ldr	r3, [pc, #356]	@ (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	4a58      	ldr	r2, [pc, #352]	@ (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 8004916:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800491a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0308 	and.w	r3, r3, #8
 8004924:	2b00      	cmp	r3, #0
 8004926:	d005      	beq.n	8004934 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004928:	4b53      	ldr	r3, [pc, #332]	@ (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	4a52      	ldr	r2, [pc, #328]	@ (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 800492e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004932:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004934:	4b50      	ldr	r3, [pc, #320]	@ (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	494d      	ldr	r1, [pc, #308]	@ (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 8004942:	4313      	orrs	r3, r2
 8004944:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0301 	and.w	r3, r3, #1
 800494e:	2b00      	cmp	r3, #0
 8004950:	d044      	beq.n	80049dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	2b01      	cmp	r3, #1
 8004958:	d107      	bne.n	800496a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800495a:	4b47      	ldr	r3, [pc, #284]	@ (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d119      	bne.n	800499a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e07f      	b.n	8004a6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	2b02      	cmp	r3, #2
 8004970:	d003      	beq.n	800497a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004976:	2b03      	cmp	r3, #3
 8004978:	d107      	bne.n	800498a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800497a:	4b3f      	ldr	r3, [pc, #252]	@ (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d109      	bne.n	800499a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e06f      	b.n	8004a6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800498a:	4b3b      	ldr	r3, [pc, #236]	@ (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 0302 	and.w	r3, r3, #2
 8004992:	2b00      	cmp	r3, #0
 8004994:	d101      	bne.n	800499a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e067      	b.n	8004a6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800499a:	4b37      	ldr	r3, [pc, #220]	@ (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	f023 0203 	bic.w	r2, r3, #3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	4934      	ldr	r1, [pc, #208]	@ (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049ac:	f7ff f85c 	bl	8003a68 <HAL_GetTick>
 80049b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049b2:	e00a      	b.n	80049ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049b4:	f7ff f858 	bl	8003a68 <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d901      	bls.n	80049ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	e04f      	b.n	8004a6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049ca:	4b2b      	ldr	r3, [pc, #172]	@ (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f003 020c 	and.w	r2, r3, #12
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	429a      	cmp	r2, r3
 80049da:	d1eb      	bne.n	80049b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049dc:	4b25      	ldr	r3, [pc, #148]	@ (8004a74 <HAL_RCC_ClockConfig+0x1b8>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 030f 	and.w	r3, r3, #15
 80049e4:	683a      	ldr	r2, [r7, #0]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d20c      	bcs.n	8004a04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ea:	4b22      	ldr	r3, [pc, #136]	@ (8004a74 <HAL_RCC_ClockConfig+0x1b8>)
 80049ec:	683a      	ldr	r2, [r7, #0]
 80049ee:	b2d2      	uxtb	r2, r2
 80049f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049f2:	4b20      	ldr	r3, [pc, #128]	@ (8004a74 <HAL_RCC_ClockConfig+0x1b8>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 030f 	and.w	r3, r3, #15
 80049fa:	683a      	ldr	r2, [r7, #0]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d001      	beq.n	8004a04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e032      	b.n	8004a6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0304 	and.w	r3, r3, #4
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d008      	beq.n	8004a22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a10:	4b19      	ldr	r3, [pc, #100]	@ (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	4916      	ldr	r1, [pc, #88]	@ (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0308 	and.w	r3, r3, #8
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d009      	beq.n	8004a42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a2e:	4b12      	ldr	r3, [pc, #72]	@ (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	00db      	lsls	r3, r3, #3
 8004a3c:	490e      	ldr	r1, [pc, #56]	@ (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a42:	f000 f887 	bl	8004b54 <HAL_RCC_GetSysClockFreq>
 8004a46:	4602      	mov	r2, r0
 8004a48:	4b0b      	ldr	r3, [pc, #44]	@ (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	091b      	lsrs	r3, r3, #4
 8004a4e:	f003 030f 	and.w	r3, r3, #15
 8004a52:	490a      	ldr	r1, [pc, #40]	@ (8004a7c <HAL_RCC_ClockConfig+0x1c0>)
 8004a54:	5ccb      	ldrb	r3, [r1, r3]
 8004a56:	fa22 f303 	lsr.w	r3, r2, r3
 8004a5a:	4a09      	ldr	r2, [pc, #36]	@ (8004a80 <HAL_RCC_ClockConfig+0x1c4>)
 8004a5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a5e:	4b09      	ldr	r3, [pc, #36]	@ (8004a84 <HAL_RCC_ClockConfig+0x1c8>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4618      	mov	r0, r3
 8004a64:	f7fe f814 	bl	8002a90 <HAL_InitTick>

  return HAL_OK;
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3710      	adds	r7, #16
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	40023c00 	.word	0x40023c00
 8004a78:	40023800 	.word	0x40023800
 8004a7c:	08019df8 	.word	0x08019df8
 8004a80:	20000004 	.word	0x20000004
 8004a84:	20000010 	.word	0x20000010

08004a88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a8c:	4b03      	ldr	r3, [pc, #12]	@ (8004a9c <HAL_RCC_GetHCLKFreq+0x14>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	20000004 	.word	0x20000004

08004aa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004aa4:	f7ff fff0 	bl	8004a88 <HAL_RCC_GetHCLKFreq>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	4b05      	ldr	r3, [pc, #20]	@ (8004ac0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	0a9b      	lsrs	r3, r3, #10
 8004ab0:	f003 0307 	and.w	r3, r3, #7
 8004ab4:	4903      	ldr	r1, [pc, #12]	@ (8004ac4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ab6:	5ccb      	ldrb	r3, [r1, r3]
 8004ab8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	40023800 	.word	0x40023800
 8004ac4:	08019e08 	.word	0x08019e08

08004ac8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004acc:	f7ff ffdc 	bl	8004a88 <HAL_RCC_GetHCLKFreq>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	4b05      	ldr	r3, [pc, #20]	@ (8004ae8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	0b5b      	lsrs	r3, r3, #13
 8004ad8:	f003 0307 	and.w	r3, r3, #7
 8004adc:	4903      	ldr	r1, [pc, #12]	@ (8004aec <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ade:	5ccb      	ldrb	r3, [r1, r3]
 8004ae0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	40023800 	.word	0x40023800
 8004aec:	08019e08 	.word	0x08019e08

08004af0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	220f      	movs	r2, #15
 8004afe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004b00:	4b12      	ldr	r3, [pc, #72]	@ (8004b4c <HAL_RCC_GetClockConfig+0x5c>)
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	f003 0203 	and.w	r2, r3, #3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004b0c:	4b0f      	ldr	r3, [pc, #60]	@ (8004b4c <HAL_RCC_GetClockConfig+0x5c>)
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004b18:	4b0c      	ldr	r3, [pc, #48]	@ (8004b4c <HAL_RCC_GetClockConfig+0x5c>)
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004b24:	4b09      	ldr	r3, [pc, #36]	@ (8004b4c <HAL_RCC_GetClockConfig+0x5c>)
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	08db      	lsrs	r3, r3, #3
 8004b2a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004b32:	4b07      	ldr	r3, [pc, #28]	@ (8004b50 <HAL_RCC_GetClockConfig+0x60>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 020f 	and.w	r2, r3, #15
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	601a      	str	r2, [r3, #0]
}
 8004b3e:	bf00      	nop
 8004b40:	370c      	adds	r7, #12
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr
 8004b4a:	bf00      	nop
 8004b4c:	40023800 	.word	0x40023800
 8004b50:	40023c00 	.word	0x40023c00

08004b54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b58:	b0ae      	sub	sp, #184	@ 0xb8
 8004b5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8004b62:	2300      	movs	r3, #0
 8004b64:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004b74:	2300      	movs	r3, #0
 8004b76:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b7a:	4bcb      	ldr	r3, [pc, #812]	@ (8004ea8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	f003 030c 	and.w	r3, r3, #12
 8004b82:	2b0c      	cmp	r3, #12
 8004b84:	f200 8206 	bhi.w	8004f94 <HAL_RCC_GetSysClockFreq+0x440>
 8004b88:	a201      	add	r2, pc, #4	@ (adr r2, 8004b90 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b8e:	bf00      	nop
 8004b90:	08004bc5 	.word	0x08004bc5
 8004b94:	08004f95 	.word	0x08004f95
 8004b98:	08004f95 	.word	0x08004f95
 8004b9c:	08004f95 	.word	0x08004f95
 8004ba0:	08004bcd 	.word	0x08004bcd
 8004ba4:	08004f95 	.word	0x08004f95
 8004ba8:	08004f95 	.word	0x08004f95
 8004bac:	08004f95 	.word	0x08004f95
 8004bb0:	08004bd5 	.word	0x08004bd5
 8004bb4:	08004f95 	.word	0x08004f95
 8004bb8:	08004f95 	.word	0x08004f95
 8004bbc:	08004f95 	.word	0x08004f95
 8004bc0:	08004dc5 	.word	0x08004dc5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004bc4:	4bb9      	ldr	r3, [pc, #740]	@ (8004eac <HAL_RCC_GetSysClockFreq+0x358>)
 8004bc6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8004bca:	e1e7      	b.n	8004f9c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004bcc:	4bb8      	ldr	r3, [pc, #736]	@ (8004eb0 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004bce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004bd2:	e1e3      	b.n	8004f9c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004bd4:	4bb4      	ldr	r3, [pc, #720]	@ (8004ea8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004bdc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004be0:	4bb1      	ldr	r3, [pc, #708]	@ (8004ea8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d071      	beq.n	8004cd0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bec:	4bae      	ldr	r3, [pc, #696]	@ (8004ea8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	099b      	lsrs	r3, r3, #6
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004bf8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004bfc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004c00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c04:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004c08:	2300      	movs	r3, #0
 8004c0a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004c0e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004c12:	4622      	mov	r2, r4
 8004c14:	462b      	mov	r3, r5
 8004c16:	f04f 0000 	mov.w	r0, #0
 8004c1a:	f04f 0100 	mov.w	r1, #0
 8004c1e:	0159      	lsls	r1, r3, #5
 8004c20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c24:	0150      	lsls	r0, r2, #5
 8004c26:	4602      	mov	r2, r0
 8004c28:	460b      	mov	r3, r1
 8004c2a:	4621      	mov	r1, r4
 8004c2c:	1a51      	subs	r1, r2, r1
 8004c2e:	6439      	str	r1, [r7, #64]	@ 0x40
 8004c30:	4629      	mov	r1, r5
 8004c32:	eb63 0301 	sbc.w	r3, r3, r1
 8004c36:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c38:	f04f 0200 	mov.w	r2, #0
 8004c3c:	f04f 0300 	mov.w	r3, #0
 8004c40:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004c44:	4649      	mov	r1, r9
 8004c46:	018b      	lsls	r3, r1, #6
 8004c48:	4641      	mov	r1, r8
 8004c4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c4e:	4641      	mov	r1, r8
 8004c50:	018a      	lsls	r2, r1, #6
 8004c52:	4641      	mov	r1, r8
 8004c54:	1a51      	subs	r1, r2, r1
 8004c56:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004c58:	4649      	mov	r1, r9
 8004c5a:	eb63 0301 	sbc.w	r3, r3, r1
 8004c5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c60:	f04f 0200 	mov.w	r2, #0
 8004c64:	f04f 0300 	mov.w	r3, #0
 8004c68:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004c6c:	4649      	mov	r1, r9
 8004c6e:	00cb      	lsls	r3, r1, #3
 8004c70:	4641      	mov	r1, r8
 8004c72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c76:	4641      	mov	r1, r8
 8004c78:	00ca      	lsls	r2, r1, #3
 8004c7a:	4610      	mov	r0, r2
 8004c7c:	4619      	mov	r1, r3
 8004c7e:	4603      	mov	r3, r0
 8004c80:	4622      	mov	r2, r4
 8004c82:	189b      	adds	r3, r3, r2
 8004c84:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c86:	462b      	mov	r3, r5
 8004c88:	460a      	mov	r2, r1
 8004c8a:	eb42 0303 	adc.w	r3, r2, r3
 8004c8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c90:	f04f 0200 	mov.w	r2, #0
 8004c94:	f04f 0300 	mov.w	r3, #0
 8004c98:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004c9c:	4629      	mov	r1, r5
 8004c9e:	024b      	lsls	r3, r1, #9
 8004ca0:	4621      	mov	r1, r4
 8004ca2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004ca6:	4621      	mov	r1, r4
 8004ca8:	024a      	lsls	r2, r1, #9
 8004caa:	4610      	mov	r0, r2
 8004cac:	4619      	mov	r1, r3
 8004cae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004cb8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004cbc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004cc0:	f7fb fff2 	bl	8000ca8 <__aeabi_uldivmod>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	460b      	mov	r3, r1
 8004cc8:	4613      	mov	r3, r2
 8004cca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004cce:	e067      	b.n	8004da0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cd0:	4b75      	ldr	r3, [pc, #468]	@ (8004ea8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	099b      	lsrs	r3, r3, #6
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004cdc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004ce0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004ce4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ce8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004cea:	2300      	movs	r3, #0
 8004cec:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004cee:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004cf2:	4622      	mov	r2, r4
 8004cf4:	462b      	mov	r3, r5
 8004cf6:	f04f 0000 	mov.w	r0, #0
 8004cfa:	f04f 0100 	mov.w	r1, #0
 8004cfe:	0159      	lsls	r1, r3, #5
 8004d00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d04:	0150      	lsls	r0, r2, #5
 8004d06:	4602      	mov	r2, r0
 8004d08:	460b      	mov	r3, r1
 8004d0a:	4621      	mov	r1, r4
 8004d0c:	1a51      	subs	r1, r2, r1
 8004d0e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004d10:	4629      	mov	r1, r5
 8004d12:	eb63 0301 	sbc.w	r3, r3, r1
 8004d16:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d18:	f04f 0200 	mov.w	r2, #0
 8004d1c:	f04f 0300 	mov.w	r3, #0
 8004d20:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004d24:	4649      	mov	r1, r9
 8004d26:	018b      	lsls	r3, r1, #6
 8004d28:	4641      	mov	r1, r8
 8004d2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d2e:	4641      	mov	r1, r8
 8004d30:	018a      	lsls	r2, r1, #6
 8004d32:	4641      	mov	r1, r8
 8004d34:	ebb2 0a01 	subs.w	sl, r2, r1
 8004d38:	4649      	mov	r1, r9
 8004d3a:	eb63 0b01 	sbc.w	fp, r3, r1
 8004d3e:	f04f 0200 	mov.w	r2, #0
 8004d42:	f04f 0300 	mov.w	r3, #0
 8004d46:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d4a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d4e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d52:	4692      	mov	sl, r2
 8004d54:	469b      	mov	fp, r3
 8004d56:	4623      	mov	r3, r4
 8004d58:	eb1a 0303 	adds.w	r3, sl, r3
 8004d5c:	623b      	str	r3, [r7, #32]
 8004d5e:	462b      	mov	r3, r5
 8004d60:	eb4b 0303 	adc.w	r3, fp, r3
 8004d64:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d66:	f04f 0200 	mov.w	r2, #0
 8004d6a:	f04f 0300 	mov.w	r3, #0
 8004d6e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004d72:	4629      	mov	r1, r5
 8004d74:	028b      	lsls	r3, r1, #10
 8004d76:	4621      	mov	r1, r4
 8004d78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d7c:	4621      	mov	r1, r4
 8004d7e:	028a      	lsls	r2, r1, #10
 8004d80:	4610      	mov	r0, r2
 8004d82:	4619      	mov	r1, r3
 8004d84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004d88:	2200      	movs	r2, #0
 8004d8a:	673b      	str	r3, [r7, #112]	@ 0x70
 8004d8c:	677a      	str	r2, [r7, #116]	@ 0x74
 8004d8e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004d92:	f7fb ff89 	bl	8000ca8 <__aeabi_uldivmod>
 8004d96:	4602      	mov	r2, r0
 8004d98:	460b      	mov	r3, r1
 8004d9a:	4613      	mov	r3, r2
 8004d9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004da0:	4b41      	ldr	r3, [pc, #260]	@ (8004ea8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	0c1b      	lsrs	r3, r3, #16
 8004da6:	f003 0303 	and.w	r3, r3, #3
 8004daa:	3301      	adds	r3, #1
 8004dac:	005b      	lsls	r3, r3, #1
 8004dae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8004db2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004db6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dbe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004dc2:	e0eb      	b.n	8004f9c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004dc4:	4b38      	ldr	r3, [pc, #224]	@ (8004ea8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004dcc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004dd0:	4b35      	ldr	r3, [pc, #212]	@ (8004ea8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d06b      	beq.n	8004eb4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ddc:	4b32      	ldr	r3, [pc, #200]	@ (8004ea8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	099b      	lsrs	r3, r3, #6
 8004de2:	2200      	movs	r2, #0
 8004de4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004de6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004de8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004dea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dee:	663b      	str	r3, [r7, #96]	@ 0x60
 8004df0:	2300      	movs	r3, #0
 8004df2:	667b      	str	r3, [r7, #100]	@ 0x64
 8004df4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004df8:	4622      	mov	r2, r4
 8004dfa:	462b      	mov	r3, r5
 8004dfc:	f04f 0000 	mov.w	r0, #0
 8004e00:	f04f 0100 	mov.w	r1, #0
 8004e04:	0159      	lsls	r1, r3, #5
 8004e06:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e0a:	0150      	lsls	r0, r2, #5
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	460b      	mov	r3, r1
 8004e10:	4621      	mov	r1, r4
 8004e12:	1a51      	subs	r1, r2, r1
 8004e14:	61b9      	str	r1, [r7, #24]
 8004e16:	4629      	mov	r1, r5
 8004e18:	eb63 0301 	sbc.w	r3, r3, r1
 8004e1c:	61fb      	str	r3, [r7, #28]
 8004e1e:	f04f 0200 	mov.w	r2, #0
 8004e22:	f04f 0300 	mov.w	r3, #0
 8004e26:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004e2a:	4659      	mov	r1, fp
 8004e2c:	018b      	lsls	r3, r1, #6
 8004e2e:	4651      	mov	r1, sl
 8004e30:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e34:	4651      	mov	r1, sl
 8004e36:	018a      	lsls	r2, r1, #6
 8004e38:	4651      	mov	r1, sl
 8004e3a:	ebb2 0801 	subs.w	r8, r2, r1
 8004e3e:	4659      	mov	r1, fp
 8004e40:	eb63 0901 	sbc.w	r9, r3, r1
 8004e44:	f04f 0200 	mov.w	r2, #0
 8004e48:	f04f 0300 	mov.w	r3, #0
 8004e4c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e50:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e54:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e58:	4690      	mov	r8, r2
 8004e5a:	4699      	mov	r9, r3
 8004e5c:	4623      	mov	r3, r4
 8004e5e:	eb18 0303 	adds.w	r3, r8, r3
 8004e62:	613b      	str	r3, [r7, #16]
 8004e64:	462b      	mov	r3, r5
 8004e66:	eb49 0303 	adc.w	r3, r9, r3
 8004e6a:	617b      	str	r3, [r7, #20]
 8004e6c:	f04f 0200 	mov.w	r2, #0
 8004e70:	f04f 0300 	mov.w	r3, #0
 8004e74:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004e78:	4629      	mov	r1, r5
 8004e7a:	024b      	lsls	r3, r1, #9
 8004e7c:	4621      	mov	r1, r4
 8004e7e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004e82:	4621      	mov	r1, r4
 8004e84:	024a      	lsls	r2, r1, #9
 8004e86:	4610      	mov	r0, r2
 8004e88:	4619      	mov	r1, r3
 8004e8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004e8e:	2200      	movs	r2, #0
 8004e90:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004e92:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004e94:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004e98:	f7fb ff06 	bl	8000ca8 <__aeabi_uldivmod>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	4613      	mov	r3, r2
 8004ea2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004ea6:	e065      	b.n	8004f74 <HAL_RCC_GetSysClockFreq+0x420>
 8004ea8:	40023800 	.word	0x40023800
 8004eac:	00f42400 	.word	0x00f42400
 8004eb0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004eb4:	4b3d      	ldr	r3, [pc, #244]	@ (8004fac <HAL_RCC_GetSysClockFreq+0x458>)
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	099b      	lsrs	r3, r3, #6
 8004eba:	2200      	movs	r2, #0
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	4611      	mov	r1, r2
 8004ec0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004ec4:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	657b      	str	r3, [r7, #84]	@ 0x54
 8004eca:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004ece:	4642      	mov	r2, r8
 8004ed0:	464b      	mov	r3, r9
 8004ed2:	f04f 0000 	mov.w	r0, #0
 8004ed6:	f04f 0100 	mov.w	r1, #0
 8004eda:	0159      	lsls	r1, r3, #5
 8004edc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ee0:	0150      	lsls	r0, r2, #5
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	460b      	mov	r3, r1
 8004ee6:	4641      	mov	r1, r8
 8004ee8:	1a51      	subs	r1, r2, r1
 8004eea:	60b9      	str	r1, [r7, #8]
 8004eec:	4649      	mov	r1, r9
 8004eee:	eb63 0301 	sbc.w	r3, r3, r1
 8004ef2:	60fb      	str	r3, [r7, #12]
 8004ef4:	f04f 0200 	mov.w	r2, #0
 8004ef8:	f04f 0300 	mov.w	r3, #0
 8004efc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004f00:	4659      	mov	r1, fp
 8004f02:	018b      	lsls	r3, r1, #6
 8004f04:	4651      	mov	r1, sl
 8004f06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f0a:	4651      	mov	r1, sl
 8004f0c:	018a      	lsls	r2, r1, #6
 8004f0e:	4651      	mov	r1, sl
 8004f10:	1a54      	subs	r4, r2, r1
 8004f12:	4659      	mov	r1, fp
 8004f14:	eb63 0501 	sbc.w	r5, r3, r1
 8004f18:	f04f 0200 	mov.w	r2, #0
 8004f1c:	f04f 0300 	mov.w	r3, #0
 8004f20:	00eb      	lsls	r3, r5, #3
 8004f22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f26:	00e2      	lsls	r2, r4, #3
 8004f28:	4614      	mov	r4, r2
 8004f2a:	461d      	mov	r5, r3
 8004f2c:	4643      	mov	r3, r8
 8004f2e:	18e3      	adds	r3, r4, r3
 8004f30:	603b      	str	r3, [r7, #0]
 8004f32:	464b      	mov	r3, r9
 8004f34:	eb45 0303 	adc.w	r3, r5, r3
 8004f38:	607b      	str	r3, [r7, #4]
 8004f3a:	f04f 0200 	mov.w	r2, #0
 8004f3e:	f04f 0300 	mov.w	r3, #0
 8004f42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f46:	4629      	mov	r1, r5
 8004f48:	028b      	lsls	r3, r1, #10
 8004f4a:	4621      	mov	r1, r4
 8004f4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f50:	4621      	mov	r1, r4
 8004f52:	028a      	lsls	r2, r1, #10
 8004f54:	4610      	mov	r0, r2
 8004f56:	4619      	mov	r1, r3
 8004f58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f60:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004f62:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004f66:	f7fb fe9f 	bl	8000ca8 <__aeabi_uldivmod>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	460b      	mov	r3, r1
 8004f6e:	4613      	mov	r3, r2
 8004f70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004f74:	4b0d      	ldr	r3, [pc, #52]	@ (8004fac <HAL_RCC_GetSysClockFreq+0x458>)
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	0f1b      	lsrs	r3, r3, #28
 8004f7a:	f003 0307 	and.w	r3, r3, #7
 8004f7e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8004f82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004f86:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f8e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004f92:	e003      	b.n	8004f9c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f94:	4b06      	ldr	r3, [pc, #24]	@ (8004fb0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004f96:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004f9a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f9c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	37b8      	adds	r7, #184	@ 0xb8
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004faa:	bf00      	nop
 8004fac:	40023800 	.word	0x40023800
 8004fb0:	00f42400 	.word	0x00f42400

08004fb4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b086      	sub	sp, #24
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d101      	bne.n	8004fc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e28d      	b.n	80054e2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 0301 	and.w	r3, r3, #1
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	f000 8083 	beq.w	80050da <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004fd4:	4b94      	ldr	r3, [pc, #592]	@ (8005228 <HAL_RCC_OscConfig+0x274>)
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	f003 030c 	and.w	r3, r3, #12
 8004fdc:	2b04      	cmp	r3, #4
 8004fde:	d019      	beq.n	8005014 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004fe0:	4b91      	ldr	r3, [pc, #580]	@ (8005228 <HAL_RCC_OscConfig+0x274>)
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004fe8:	2b08      	cmp	r3, #8
 8004fea:	d106      	bne.n	8004ffa <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004fec:	4b8e      	ldr	r3, [pc, #568]	@ (8005228 <HAL_RCC_OscConfig+0x274>)
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ff4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ff8:	d00c      	beq.n	8005014 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ffa:	4b8b      	ldr	r3, [pc, #556]	@ (8005228 <HAL_RCC_OscConfig+0x274>)
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005002:	2b0c      	cmp	r3, #12
 8005004:	d112      	bne.n	800502c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005006:	4b88      	ldr	r3, [pc, #544]	@ (8005228 <HAL_RCC_OscConfig+0x274>)
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800500e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005012:	d10b      	bne.n	800502c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005014:	4b84      	ldr	r3, [pc, #528]	@ (8005228 <HAL_RCC_OscConfig+0x274>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800501c:	2b00      	cmp	r3, #0
 800501e:	d05b      	beq.n	80050d8 <HAL_RCC_OscConfig+0x124>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d157      	bne.n	80050d8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e25a      	b.n	80054e2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005034:	d106      	bne.n	8005044 <HAL_RCC_OscConfig+0x90>
 8005036:	4b7c      	ldr	r3, [pc, #496]	@ (8005228 <HAL_RCC_OscConfig+0x274>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a7b      	ldr	r2, [pc, #492]	@ (8005228 <HAL_RCC_OscConfig+0x274>)
 800503c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005040:	6013      	str	r3, [r2, #0]
 8005042:	e01d      	b.n	8005080 <HAL_RCC_OscConfig+0xcc>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800504c:	d10c      	bne.n	8005068 <HAL_RCC_OscConfig+0xb4>
 800504e:	4b76      	ldr	r3, [pc, #472]	@ (8005228 <HAL_RCC_OscConfig+0x274>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a75      	ldr	r2, [pc, #468]	@ (8005228 <HAL_RCC_OscConfig+0x274>)
 8005054:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005058:	6013      	str	r3, [r2, #0]
 800505a:	4b73      	ldr	r3, [pc, #460]	@ (8005228 <HAL_RCC_OscConfig+0x274>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a72      	ldr	r2, [pc, #456]	@ (8005228 <HAL_RCC_OscConfig+0x274>)
 8005060:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005064:	6013      	str	r3, [r2, #0]
 8005066:	e00b      	b.n	8005080 <HAL_RCC_OscConfig+0xcc>
 8005068:	4b6f      	ldr	r3, [pc, #444]	@ (8005228 <HAL_RCC_OscConfig+0x274>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a6e      	ldr	r2, [pc, #440]	@ (8005228 <HAL_RCC_OscConfig+0x274>)
 800506e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005072:	6013      	str	r3, [r2, #0]
 8005074:	4b6c      	ldr	r3, [pc, #432]	@ (8005228 <HAL_RCC_OscConfig+0x274>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a6b      	ldr	r2, [pc, #428]	@ (8005228 <HAL_RCC_OscConfig+0x274>)
 800507a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800507e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d013      	beq.n	80050b0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005088:	f7fe fcee 	bl	8003a68 <HAL_GetTick>
 800508c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800508e:	e008      	b.n	80050a2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005090:	f7fe fcea 	bl	8003a68 <HAL_GetTick>
 8005094:	4602      	mov	r2, r0
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	2b64      	cmp	r3, #100	@ 0x64
 800509c:	d901      	bls.n	80050a2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800509e:	2303      	movs	r3, #3
 80050a0:	e21f      	b.n	80054e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050a2:	4b61      	ldr	r3, [pc, #388]	@ (8005228 <HAL_RCC_OscConfig+0x274>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d0f0      	beq.n	8005090 <HAL_RCC_OscConfig+0xdc>
 80050ae:	e014      	b.n	80050da <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050b0:	f7fe fcda 	bl	8003a68 <HAL_GetTick>
 80050b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050b6:	e008      	b.n	80050ca <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050b8:	f7fe fcd6 	bl	8003a68 <HAL_GetTick>
 80050bc:	4602      	mov	r2, r0
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	2b64      	cmp	r3, #100	@ 0x64
 80050c4:	d901      	bls.n	80050ca <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80050c6:	2303      	movs	r3, #3
 80050c8:	e20b      	b.n	80054e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050ca:	4b57      	ldr	r3, [pc, #348]	@ (8005228 <HAL_RCC_OscConfig+0x274>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d1f0      	bne.n	80050b8 <HAL_RCC_OscConfig+0x104>
 80050d6:	e000      	b.n	80050da <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 0302 	and.w	r3, r3, #2
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d06f      	beq.n	80051c6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80050e6:	4b50      	ldr	r3, [pc, #320]	@ (8005228 <HAL_RCC_OscConfig+0x274>)
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	f003 030c 	and.w	r3, r3, #12
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d017      	beq.n	8005122 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80050f2:	4b4d      	ldr	r3, [pc, #308]	@ (8005228 <HAL_RCC_OscConfig+0x274>)
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80050fa:	2b08      	cmp	r3, #8
 80050fc:	d105      	bne.n	800510a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80050fe:	4b4a      	ldr	r3, [pc, #296]	@ (8005228 <HAL_RCC_OscConfig+0x274>)
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00b      	beq.n	8005122 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800510a:	4b47      	ldr	r3, [pc, #284]	@ (8005228 <HAL_RCC_OscConfig+0x274>)
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005112:	2b0c      	cmp	r3, #12
 8005114:	d11c      	bne.n	8005150 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005116:	4b44      	ldr	r3, [pc, #272]	@ (8005228 <HAL_RCC_OscConfig+0x274>)
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800511e:	2b00      	cmp	r3, #0
 8005120:	d116      	bne.n	8005150 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005122:	4b41      	ldr	r3, [pc, #260]	@ (8005228 <HAL_RCC_OscConfig+0x274>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 0302 	and.w	r3, r3, #2
 800512a:	2b00      	cmp	r3, #0
 800512c:	d005      	beq.n	800513a <HAL_RCC_OscConfig+0x186>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	2b01      	cmp	r3, #1
 8005134:	d001      	beq.n	800513a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e1d3      	b.n	80054e2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800513a:	4b3b      	ldr	r3, [pc, #236]	@ (8005228 <HAL_RCC_OscConfig+0x274>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	691b      	ldr	r3, [r3, #16]
 8005146:	00db      	lsls	r3, r3, #3
 8005148:	4937      	ldr	r1, [pc, #220]	@ (8005228 <HAL_RCC_OscConfig+0x274>)
 800514a:	4313      	orrs	r3, r2
 800514c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800514e:	e03a      	b.n	80051c6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d020      	beq.n	800519a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005158:	4b34      	ldr	r3, [pc, #208]	@ (800522c <HAL_RCC_OscConfig+0x278>)
 800515a:	2201      	movs	r2, #1
 800515c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800515e:	f7fe fc83 	bl	8003a68 <HAL_GetTick>
 8005162:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005164:	e008      	b.n	8005178 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005166:	f7fe fc7f 	bl	8003a68 <HAL_GetTick>
 800516a:	4602      	mov	r2, r0
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	1ad3      	subs	r3, r2, r3
 8005170:	2b02      	cmp	r3, #2
 8005172:	d901      	bls.n	8005178 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005174:	2303      	movs	r3, #3
 8005176:	e1b4      	b.n	80054e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005178:	4b2b      	ldr	r3, [pc, #172]	@ (8005228 <HAL_RCC_OscConfig+0x274>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 0302 	and.w	r3, r3, #2
 8005180:	2b00      	cmp	r3, #0
 8005182:	d0f0      	beq.n	8005166 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005184:	4b28      	ldr	r3, [pc, #160]	@ (8005228 <HAL_RCC_OscConfig+0x274>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	691b      	ldr	r3, [r3, #16]
 8005190:	00db      	lsls	r3, r3, #3
 8005192:	4925      	ldr	r1, [pc, #148]	@ (8005228 <HAL_RCC_OscConfig+0x274>)
 8005194:	4313      	orrs	r3, r2
 8005196:	600b      	str	r3, [r1, #0]
 8005198:	e015      	b.n	80051c6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800519a:	4b24      	ldr	r3, [pc, #144]	@ (800522c <HAL_RCC_OscConfig+0x278>)
 800519c:	2200      	movs	r2, #0
 800519e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051a0:	f7fe fc62 	bl	8003a68 <HAL_GetTick>
 80051a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051a6:	e008      	b.n	80051ba <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051a8:	f7fe fc5e 	bl	8003a68 <HAL_GetTick>
 80051ac:	4602      	mov	r2, r0
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	1ad3      	subs	r3, r2, r3
 80051b2:	2b02      	cmp	r3, #2
 80051b4:	d901      	bls.n	80051ba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80051b6:	2303      	movs	r3, #3
 80051b8:	e193      	b.n	80054e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051ba:	4b1b      	ldr	r3, [pc, #108]	@ (8005228 <HAL_RCC_OscConfig+0x274>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 0302 	and.w	r3, r3, #2
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d1f0      	bne.n	80051a8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0308 	and.w	r3, r3, #8
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d036      	beq.n	8005240 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	695b      	ldr	r3, [r3, #20]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d016      	beq.n	8005208 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051da:	4b15      	ldr	r3, [pc, #84]	@ (8005230 <HAL_RCC_OscConfig+0x27c>)
 80051dc:	2201      	movs	r2, #1
 80051de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051e0:	f7fe fc42 	bl	8003a68 <HAL_GetTick>
 80051e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051e6:	e008      	b.n	80051fa <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051e8:	f7fe fc3e 	bl	8003a68 <HAL_GetTick>
 80051ec:	4602      	mov	r2, r0
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	2b02      	cmp	r3, #2
 80051f4:	d901      	bls.n	80051fa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	e173      	b.n	80054e2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051fa:	4b0b      	ldr	r3, [pc, #44]	@ (8005228 <HAL_RCC_OscConfig+0x274>)
 80051fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051fe:	f003 0302 	and.w	r3, r3, #2
 8005202:	2b00      	cmp	r3, #0
 8005204:	d0f0      	beq.n	80051e8 <HAL_RCC_OscConfig+0x234>
 8005206:	e01b      	b.n	8005240 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005208:	4b09      	ldr	r3, [pc, #36]	@ (8005230 <HAL_RCC_OscConfig+0x27c>)
 800520a:	2200      	movs	r2, #0
 800520c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800520e:	f7fe fc2b 	bl	8003a68 <HAL_GetTick>
 8005212:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005214:	e00e      	b.n	8005234 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005216:	f7fe fc27 	bl	8003a68 <HAL_GetTick>
 800521a:	4602      	mov	r2, r0
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	1ad3      	subs	r3, r2, r3
 8005220:	2b02      	cmp	r3, #2
 8005222:	d907      	bls.n	8005234 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005224:	2303      	movs	r3, #3
 8005226:	e15c      	b.n	80054e2 <HAL_RCC_OscConfig+0x52e>
 8005228:	40023800 	.word	0x40023800
 800522c:	42470000 	.word	0x42470000
 8005230:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005234:	4b8a      	ldr	r3, [pc, #552]	@ (8005460 <HAL_RCC_OscConfig+0x4ac>)
 8005236:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005238:	f003 0302 	and.w	r3, r3, #2
 800523c:	2b00      	cmp	r3, #0
 800523e:	d1ea      	bne.n	8005216 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 0304 	and.w	r3, r3, #4
 8005248:	2b00      	cmp	r3, #0
 800524a:	f000 8097 	beq.w	800537c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800524e:	2300      	movs	r3, #0
 8005250:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005252:	4b83      	ldr	r3, [pc, #524]	@ (8005460 <HAL_RCC_OscConfig+0x4ac>)
 8005254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005256:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800525a:	2b00      	cmp	r3, #0
 800525c:	d10f      	bne.n	800527e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800525e:	2300      	movs	r3, #0
 8005260:	60bb      	str	r3, [r7, #8]
 8005262:	4b7f      	ldr	r3, [pc, #508]	@ (8005460 <HAL_RCC_OscConfig+0x4ac>)
 8005264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005266:	4a7e      	ldr	r2, [pc, #504]	@ (8005460 <HAL_RCC_OscConfig+0x4ac>)
 8005268:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800526c:	6413      	str	r3, [r2, #64]	@ 0x40
 800526e:	4b7c      	ldr	r3, [pc, #496]	@ (8005460 <HAL_RCC_OscConfig+0x4ac>)
 8005270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005272:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005276:	60bb      	str	r3, [r7, #8]
 8005278:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800527a:	2301      	movs	r3, #1
 800527c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800527e:	4b79      	ldr	r3, [pc, #484]	@ (8005464 <HAL_RCC_OscConfig+0x4b0>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005286:	2b00      	cmp	r3, #0
 8005288:	d118      	bne.n	80052bc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800528a:	4b76      	ldr	r3, [pc, #472]	@ (8005464 <HAL_RCC_OscConfig+0x4b0>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a75      	ldr	r2, [pc, #468]	@ (8005464 <HAL_RCC_OscConfig+0x4b0>)
 8005290:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005294:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005296:	f7fe fbe7 	bl	8003a68 <HAL_GetTick>
 800529a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800529c:	e008      	b.n	80052b0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800529e:	f7fe fbe3 	bl	8003a68 <HAL_GetTick>
 80052a2:	4602      	mov	r2, r0
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	1ad3      	subs	r3, r2, r3
 80052a8:	2b02      	cmp	r3, #2
 80052aa:	d901      	bls.n	80052b0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80052ac:	2303      	movs	r3, #3
 80052ae:	e118      	b.n	80054e2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052b0:	4b6c      	ldr	r3, [pc, #432]	@ (8005464 <HAL_RCC_OscConfig+0x4b0>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d0f0      	beq.n	800529e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d106      	bne.n	80052d2 <HAL_RCC_OscConfig+0x31e>
 80052c4:	4b66      	ldr	r3, [pc, #408]	@ (8005460 <HAL_RCC_OscConfig+0x4ac>)
 80052c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052c8:	4a65      	ldr	r2, [pc, #404]	@ (8005460 <HAL_RCC_OscConfig+0x4ac>)
 80052ca:	f043 0301 	orr.w	r3, r3, #1
 80052ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80052d0:	e01c      	b.n	800530c <HAL_RCC_OscConfig+0x358>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	2b05      	cmp	r3, #5
 80052d8:	d10c      	bne.n	80052f4 <HAL_RCC_OscConfig+0x340>
 80052da:	4b61      	ldr	r3, [pc, #388]	@ (8005460 <HAL_RCC_OscConfig+0x4ac>)
 80052dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052de:	4a60      	ldr	r2, [pc, #384]	@ (8005460 <HAL_RCC_OscConfig+0x4ac>)
 80052e0:	f043 0304 	orr.w	r3, r3, #4
 80052e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80052e6:	4b5e      	ldr	r3, [pc, #376]	@ (8005460 <HAL_RCC_OscConfig+0x4ac>)
 80052e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052ea:	4a5d      	ldr	r2, [pc, #372]	@ (8005460 <HAL_RCC_OscConfig+0x4ac>)
 80052ec:	f043 0301 	orr.w	r3, r3, #1
 80052f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80052f2:	e00b      	b.n	800530c <HAL_RCC_OscConfig+0x358>
 80052f4:	4b5a      	ldr	r3, [pc, #360]	@ (8005460 <HAL_RCC_OscConfig+0x4ac>)
 80052f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052f8:	4a59      	ldr	r2, [pc, #356]	@ (8005460 <HAL_RCC_OscConfig+0x4ac>)
 80052fa:	f023 0301 	bic.w	r3, r3, #1
 80052fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8005300:	4b57      	ldr	r3, [pc, #348]	@ (8005460 <HAL_RCC_OscConfig+0x4ac>)
 8005302:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005304:	4a56      	ldr	r2, [pc, #344]	@ (8005460 <HAL_RCC_OscConfig+0x4ac>)
 8005306:	f023 0304 	bic.w	r3, r3, #4
 800530a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d015      	beq.n	8005340 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005314:	f7fe fba8 	bl	8003a68 <HAL_GetTick>
 8005318:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800531a:	e00a      	b.n	8005332 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800531c:	f7fe fba4 	bl	8003a68 <HAL_GetTick>
 8005320:	4602      	mov	r2, r0
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	1ad3      	subs	r3, r2, r3
 8005326:	f241 3288 	movw	r2, #5000	@ 0x1388
 800532a:	4293      	cmp	r3, r2
 800532c:	d901      	bls.n	8005332 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800532e:	2303      	movs	r3, #3
 8005330:	e0d7      	b.n	80054e2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005332:	4b4b      	ldr	r3, [pc, #300]	@ (8005460 <HAL_RCC_OscConfig+0x4ac>)
 8005334:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005336:	f003 0302 	and.w	r3, r3, #2
 800533a:	2b00      	cmp	r3, #0
 800533c:	d0ee      	beq.n	800531c <HAL_RCC_OscConfig+0x368>
 800533e:	e014      	b.n	800536a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005340:	f7fe fb92 	bl	8003a68 <HAL_GetTick>
 8005344:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005346:	e00a      	b.n	800535e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005348:	f7fe fb8e 	bl	8003a68 <HAL_GetTick>
 800534c:	4602      	mov	r2, r0
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005356:	4293      	cmp	r3, r2
 8005358:	d901      	bls.n	800535e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800535a:	2303      	movs	r3, #3
 800535c:	e0c1      	b.n	80054e2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800535e:	4b40      	ldr	r3, [pc, #256]	@ (8005460 <HAL_RCC_OscConfig+0x4ac>)
 8005360:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005362:	f003 0302 	and.w	r3, r3, #2
 8005366:	2b00      	cmp	r3, #0
 8005368:	d1ee      	bne.n	8005348 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800536a:	7dfb      	ldrb	r3, [r7, #23]
 800536c:	2b01      	cmp	r3, #1
 800536e:	d105      	bne.n	800537c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005370:	4b3b      	ldr	r3, [pc, #236]	@ (8005460 <HAL_RCC_OscConfig+0x4ac>)
 8005372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005374:	4a3a      	ldr	r2, [pc, #232]	@ (8005460 <HAL_RCC_OscConfig+0x4ac>)
 8005376:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800537a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	699b      	ldr	r3, [r3, #24]
 8005380:	2b00      	cmp	r3, #0
 8005382:	f000 80ad 	beq.w	80054e0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005386:	4b36      	ldr	r3, [pc, #216]	@ (8005460 <HAL_RCC_OscConfig+0x4ac>)
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	f003 030c 	and.w	r3, r3, #12
 800538e:	2b08      	cmp	r3, #8
 8005390:	d060      	beq.n	8005454 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	699b      	ldr	r3, [r3, #24]
 8005396:	2b02      	cmp	r3, #2
 8005398:	d145      	bne.n	8005426 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800539a:	4b33      	ldr	r3, [pc, #204]	@ (8005468 <HAL_RCC_OscConfig+0x4b4>)
 800539c:	2200      	movs	r2, #0
 800539e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053a0:	f7fe fb62 	bl	8003a68 <HAL_GetTick>
 80053a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053a6:	e008      	b.n	80053ba <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053a8:	f7fe fb5e 	bl	8003a68 <HAL_GetTick>
 80053ac:	4602      	mov	r2, r0
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	2b02      	cmp	r3, #2
 80053b4:	d901      	bls.n	80053ba <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80053b6:	2303      	movs	r3, #3
 80053b8:	e093      	b.n	80054e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053ba:	4b29      	ldr	r3, [pc, #164]	@ (8005460 <HAL_RCC_OscConfig+0x4ac>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d1f0      	bne.n	80053a8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	69da      	ldr	r2, [r3, #28]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6a1b      	ldr	r3, [r3, #32]
 80053ce:	431a      	orrs	r2, r3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053d4:	019b      	lsls	r3, r3, #6
 80053d6:	431a      	orrs	r2, r3
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053dc:	085b      	lsrs	r3, r3, #1
 80053de:	3b01      	subs	r3, #1
 80053e0:	041b      	lsls	r3, r3, #16
 80053e2:	431a      	orrs	r2, r3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053e8:	061b      	lsls	r3, r3, #24
 80053ea:	431a      	orrs	r2, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053f0:	071b      	lsls	r3, r3, #28
 80053f2:	491b      	ldr	r1, [pc, #108]	@ (8005460 <HAL_RCC_OscConfig+0x4ac>)
 80053f4:	4313      	orrs	r3, r2
 80053f6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053f8:	4b1b      	ldr	r3, [pc, #108]	@ (8005468 <HAL_RCC_OscConfig+0x4b4>)
 80053fa:	2201      	movs	r2, #1
 80053fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053fe:	f7fe fb33 	bl	8003a68 <HAL_GetTick>
 8005402:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005404:	e008      	b.n	8005418 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005406:	f7fe fb2f 	bl	8003a68 <HAL_GetTick>
 800540a:	4602      	mov	r2, r0
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	1ad3      	subs	r3, r2, r3
 8005410:	2b02      	cmp	r3, #2
 8005412:	d901      	bls.n	8005418 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005414:	2303      	movs	r3, #3
 8005416:	e064      	b.n	80054e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005418:	4b11      	ldr	r3, [pc, #68]	@ (8005460 <HAL_RCC_OscConfig+0x4ac>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005420:	2b00      	cmp	r3, #0
 8005422:	d0f0      	beq.n	8005406 <HAL_RCC_OscConfig+0x452>
 8005424:	e05c      	b.n	80054e0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005426:	4b10      	ldr	r3, [pc, #64]	@ (8005468 <HAL_RCC_OscConfig+0x4b4>)
 8005428:	2200      	movs	r2, #0
 800542a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800542c:	f7fe fb1c 	bl	8003a68 <HAL_GetTick>
 8005430:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005432:	e008      	b.n	8005446 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005434:	f7fe fb18 	bl	8003a68 <HAL_GetTick>
 8005438:	4602      	mov	r2, r0
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	1ad3      	subs	r3, r2, r3
 800543e:	2b02      	cmp	r3, #2
 8005440:	d901      	bls.n	8005446 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005442:	2303      	movs	r3, #3
 8005444:	e04d      	b.n	80054e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005446:	4b06      	ldr	r3, [pc, #24]	@ (8005460 <HAL_RCC_OscConfig+0x4ac>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800544e:	2b00      	cmp	r3, #0
 8005450:	d1f0      	bne.n	8005434 <HAL_RCC_OscConfig+0x480>
 8005452:	e045      	b.n	80054e0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	699b      	ldr	r3, [r3, #24]
 8005458:	2b01      	cmp	r3, #1
 800545a:	d107      	bne.n	800546c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e040      	b.n	80054e2 <HAL_RCC_OscConfig+0x52e>
 8005460:	40023800 	.word	0x40023800
 8005464:	40007000 	.word	0x40007000
 8005468:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800546c:	4b1f      	ldr	r3, [pc, #124]	@ (80054ec <HAL_RCC_OscConfig+0x538>)
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	699b      	ldr	r3, [r3, #24]
 8005476:	2b01      	cmp	r3, #1
 8005478:	d030      	beq.n	80054dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005484:	429a      	cmp	r2, r3
 8005486:	d129      	bne.n	80054dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005492:	429a      	cmp	r2, r3
 8005494:	d122      	bne.n	80054dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005496:	68fa      	ldr	r2, [r7, #12]
 8005498:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800549c:	4013      	ands	r3, r2
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80054a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d119      	bne.n	80054dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054b2:	085b      	lsrs	r3, r3, #1
 80054b4:	3b01      	subs	r3, #1
 80054b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d10f      	bne.n	80054dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d107      	bne.n	80054dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054d6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80054d8:	429a      	cmp	r2, r3
 80054da:	d001      	beq.n	80054e0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	e000      	b.n	80054e2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80054e0:	2300      	movs	r3, #0
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3718      	adds	r7, #24
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	bf00      	nop
 80054ec:	40023800 	.word	0x40023800

080054f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b082      	sub	sp, #8
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d101      	bne.n	8005502 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	e07b      	b.n	80055fa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005506:	2b00      	cmp	r3, #0
 8005508:	d108      	bne.n	800551c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005512:	d009      	beq.n	8005528 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	61da      	str	r2, [r3, #28]
 800551a:	e005      	b.n	8005528 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2200      	movs	r2, #0
 8005520:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005534:	b2db      	uxtb	r3, r3
 8005536:	2b00      	cmp	r3, #0
 8005538:	d106      	bne.n	8005548 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f7fd f9f8 	bl	8002938 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2202      	movs	r2, #2
 800554c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800555e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005570:	431a      	orrs	r2, r3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800557a:	431a      	orrs	r2, r3
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	691b      	ldr	r3, [r3, #16]
 8005580:	f003 0302 	and.w	r3, r3, #2
 8005584:	431a      	orrs	r2, r3
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	695b      	ldr	r3, [r3, #20]
 800558a:	f003 0301 	and.w	r3, r3, #1
 800558e:	431a      	orrs	r2, r3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	699b      	ldr	r3, [r3, #24]
 8005594:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005598:	431a      	orrs	r2, r3
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	69db      	ldr	r3, [r3, #28]
 800559e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80055a2:	431a      	orrs	r2, r3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6a1b      	ldr	r3, [r3, #32]
 80055a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055ac:	ea42 0103 	orr.w	r1, r2, r3
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055b4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	430a      	orrs	r2, r1
 80055be:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	699b      	ldr	r3, [r3, #24]
 80055c4:	0c1b      	lsrs	r3, r3, #16
 80055c6:	f003 0104 	and.w	r1, r3, #4
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ce:	f003 0210 	and.w	r2, r3, #16
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	430a      	orrs	r2, r1
 80055d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	69da      	ldr	r2, [r3, #28]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80055e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80055f8:	2300      	movs	r3, #0
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3708      	adds	r7, #8
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}

08005602 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005602:	b580      	push	{r7, lr}
 8005604:	b08c      	sub	sp, #48	@ 0x30
 8005606:	af00      	add	r7, sp, #0
 8005608:	60f8      	str	r0, [r7, #12]
 800560a:	60b9      	str	r1, [r7, #8]
 800560c:	607a      	str	r2, [r7, #4]
 800560e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005610:	2301      	movs	r3, #1
 8005612:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005614:	2300      	movs	r3, #0
 8005616:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005620:	2b01      	cmp	r3, #1
 8005622:	d101      	bne.n	8005628 <HAL_SPI_TransmitReceive+0x26>
 8005624:	2302      	movs	r3, #2
 8005626:	e198      	b.n	800595a <HAL_SPI_TransmitReceive+0x358>
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005630:	f7fe fa1a 	bl	8003a68 <HAL_GetTick>
 8005634:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800563c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005646:	887b      	ldrh	r3, [r7, #2]
 8005648:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800564a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800564e:	2b01      	cmp	r3, #1
 8005650:	d00f      	beq.n	8005672 <HAL_SPI_TransmitReceive+0x70>
 8005652:	69fb      	ldr	r3, [r7, #28]
 8005654:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005658:	d107      	bne.n	800566a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d103      	bne.n	800566a <HAL_SPI_TransmitReceive+0x68>
 8005662:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005666:	2b04      	cmp	r3, #4
 8005668:	d003      	beq.n	8005672 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800566a:	2302      	movs	r3, #2
 800566c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8005670:	e16d      	b.n	800594e <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d005      	beq.n	8005684 <HAL_SPI_TransmitReceive+0x82>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d002      	beq.n	8005684 <HAL_SPI_TransmitReceive+0x82>
 800567e:	887b      	ldrh	r3, [r7, #2]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d103      	bne.n	800568c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800568a:	e160      	b.n	800594e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005692:	b2db      	uxtb	r3, r3
 8005694:	2b04      	cmp	r3, #4
 8005696:	d003      	beq.n	80056a0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2205      	movs	r2, #5
 800569c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2200      	movs	r2, #0
 80056a4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	887a      	ldrh	r2, [r7, #2]
 80056b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	887a      	ldrh	r2, [r7, #2]
 80056b6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	68ba      	ldr	r2, [r7, #8]
 80056bc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	887a      	ldrh	r2, [r7, #2]
 80056c2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	887a      	ldrh	r2, [r7, #2]
 80056c8:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2200      	movs	r2, #0
 80056ce:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2200      	movs	r2, #0
 80056d4:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056e0:	2b40      	cmp	r3, #64	@ 0x40
 80056e2:	d007      	beq.n	80056f4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80056f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056fc:	d17c      	bne.n	80057f8 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d002      	beq.n	800570c <HAL_SPI_TransmitReceive+0x10a>
 8005706:	8b7b      	ldrh	r3, [r7, #26]
 8005708:	2b01      	cmp	r3, #1
 800570a:	d16a      	bne.n	80057e2 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005710:	881a      	ldrh	r2, [r3, #0]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800571c:	1c9a      	adds	r2, r3, #2
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005726:	b29b      	uxth	r3, r3
 8005728:	3b01      	subs	r3, #1
 800572a:	b29a      	uxth	r2, r3
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005730:	e057      	b.n	80057e2 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	f003 0302 	and.w	r3, r3, #2
 800573c:	2b02      	cmp	r3, #2
 800573e:	d11b      	bne.n	8005778 <HAL_SPI_TransmitReceive+0x176>
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005744:	b29b      	uxth	r3, r3
 8005746:	2b00      	cmp	r3, #0
 8005748:	d016      	beq.n	8005778 <HAL_SPI_TransmitReceive+0x176>
 800574a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800574c:	2b01      	cmp	r3, #1
 800574e:	d113      	bne.n	8005778 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005754:	881a      	ldrh	r2, [r3, #0]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005760:	1c9a      	adds	r2, r3, #2
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800576a:	b29b      	uxth	r3, r3
 800576c:	3b01      	subs	r3, #1
 800576e:	b29a      	uxth	r2, r3
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005774:	2300      	movs	r3, #0
 8005776:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	f003 0301 	and.w	r3, r3, #1
 8005782:	2b01      	cmp	r3, #1
 8005784:	d119      	bne.n	80057ba <HAL_SPI_TransmitReceive+0x1b8>
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800578a:	b29b      	uxth	r3, r3
 800578c:	2b00      	cmp	r3, #0
 800578e:	d014      	beq.n	80057ba <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	68da      	ldr	r2, [r3, #12]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800579a:	b292      	uxth	r2, r2
 800579c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057a2:	1c9a      	adds	r2, r3, #2
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	3b01      	subs	r3, #1
 80057b0:	b29a      	uxth	r2, r3
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80057b6:	2301      	movs	r3, #1
 80057b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80057ba:	f7fe f955 	bl	8003a68 <HAL_GetTick>
 80057be:	4602      	mov	r2, r0
 80057c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057c2:	1ad3      	subs	r3, r2, r3
 80057c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d80b      	bhi.n	80057e2 <HAL_SPI_TransmitReceive+0x1e0>
 80057ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80057d0:	d007      	beq.n	80057e2 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80057e0:	e0b5      	b.n	800594e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d1a2      	bne.n	8005732 <HAL_SPI_TransmitReceive+0x130>
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d19d      	bne.n	8005732 <HAL_SPI_TransmitReceive+0x130>
 80057f6:	e080      	b.n	80058fa <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d002      	beq.n	8005806 <HAL_SPI_TransmitReceive+0x204>
 8005800:	8b7b      	ldrh	r3, [r7, #26]
 8005802:	2b01      	cmp	r3, #1
 8005804:	d16f      	bne.n	80058e6 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	330c      	adds	r3, #12
 8005810:	7812      	ldrb	r2, [r2, #0]
 8005812:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005818:	1c5a      	adds	r2, r3, #1
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005822:	b29b      	uxth	r3, r3
 8005824:	3b01      	subs	r3, #1
 8005826:	b29a      	uxth	r2, r3
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800582c:	e05b      	b.n	80058e6 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	f003 0302 	and.w	r3, r3, #2
 8005838:	2b02      	cmp	r3, #2
 800583a:	d11c      	bne.n	8005876 <HAL_SPI_TransmitReceive+0x274>
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005840:	b29b      	uxth	r3, r3
 8005842:	2b00      	cmp	r3, #0
 8005844:	d017      	beq.n	8005876 <HAL_SPI_TransmitReceive+0x274>
 8005846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005848:	2b01      	cmp	r3, #1
 800584a:	d114      	bne.n	8005876 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	330c      	adds	r3, #12
 8005856:	7812      	ldrb	r2, [r2, #0]
 8005858:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800585e:	1c5a      	adds	r2, r3, #1
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005868:	b29b      	uxth	r3, r3
 800586a:	3b01      	subs	r3, #1
 800586c:	b29a      	uxth	r2, r3
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005872:	2300      	movs	r3, #0
 8005874:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	f003 0301 	and.w	r3, r3, #1
 8005880:	2b01      	cmp	r3, #1
 8005882:	d119      	bne.n	80058b8 <HAL_SPI_TransmitReceive+0x2b6>
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005888:	b29b      	uxth	r3, r3
 800588a:	2b00      	cmp	r3, #0
 800588c:	d014      	beq.n	80058b8 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	68da      	ldr	r2, [r3, #12]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005898:	b2d2      	uxtb	r2, r2
 800589a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058a0:	1c5a      	adds	r2, r3, #1
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	3b01      	subs	r3, #1
 80058ae:	b29a      	uxth	r2, r3
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80058b4:	2301      	movs	r3, #1
 80058b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80058b8:	f7fe f8d6 	bl	8003a68 <HAL_GetTick>
 80058bc:	4602      	mov	r2, r0
 80058be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c0:	1ad3      	subs	r3, r2, r3
 80058c2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d803      	bhi.n	80058d0 <HAL_SPI_TransmitReceive+0x2ce>
 80058c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80058ce:	d102      	bne.n	80058d6 <HAL_SPI_TransmitReceive+0x2d4>
 80058d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d107      	bne.n	80058e6 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80058d6:	2303      	movs	r3, #3
 80058d8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2201      	movs	r2, #1
 80058e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80058e4:	e033      	b.n	800594e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d19e      	bne.n	800582e <HAL_SPI_TransmitReceive+0x22c>
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d199      	bne.n	800582e <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80058fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058fc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80058fe:	68f8      	ldr	r0, [r7, #12]
 8005900:	f000 f9ca 	bl	8005c98 <SPI_EndRxTxTransaction>
 8005904:	4603      	mov	r3, r0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d006      	beq.n	8005918 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2220      	movs	r2, #32
 8005914:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8005916:	e01a      	b.n	800594e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d10a      	bne.n	8005936 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005920:	2300      	movs	r3, #0
 8005922:	617b      	str	r3, [r7, #20]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	617b      	str	r3, [r7, #20]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	617b      	str	r3, [r7, #20]
 8005934:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800593a:	2b00      	cmp	r3, #0
 800593c:	d003      	beq.n	8005946 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005944:	e003      	b.n	800594e <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2201      	movs	r2, #1
 800594a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2200      	movs	r2, #0
 8005952:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005956:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800595a:	4618      	mov	r0, r3
 800595c:	3730      	adds	r7, #48	@ 0x30
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}
	...

08005964 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b088      	sub	sp, #32
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005982:	2b00      	cmp	r3, #0
 8005984:	d10e      	bne.n	80059a4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005986:	69bb      	ldr	r3, [r7, #24]
 8005988:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800598c:	2b00      	cmp	r3, #0
 800598e:	d009      	beq.n	80059a4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005996:	2b00      	cmp	r3, #0
 8005998:	d004      	beq.n	80059a4 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	4798      	blx	r3
    return;
 80059a2:	e0ce      	b.n	8005b42 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80059a4:	69bb      	ldr	r3, [r7, #24]
 80059a6:	f003 0302 	and.w	r3, r3, #2
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d009      	beq.n	80059c2 <HAL_SPI_IRQHandler+0x5e>
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d004      	beq.n	80059c2 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	4798      	blx	r3
    return;
 80059c0:	e0bf      	b.n	8005b42 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80059c2:	69bb      	ldr	r3, [r7, #24]
 80059c4:	f003 0320 	and.w	r3, r3, #32
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d10a      	bne.n	80059e2 <HAL_SPI_IRQHandler+0x7e>
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d105      	bne.n	80059e2 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80059d6:	69bb      	ldr	r3, [r7, #24]
 80059d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059dc:	2b00      	cmp	r3, #0
 80059de:	f000 80b0 	beq.w	8005b42 <HAL_SPI_IRQHandler+0x1de>
 80059e2:	69fb      	ldr	r3, [r7, #28]
 80059e4:	f003 0320 	and.w	r3, r3, #32
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	f000 80aa 	beq.w	8005b42 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80059ee:	69bb      	ldr	r3, [r7, #24]
 80059f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d023      	beq.n	8005a40 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	2b03      	cmp	r3, #3
 8005a02:	d011      	beq.n	8005a28 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a08:	f043 0204 	orr.w	r2, r3, #4
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a10:	2300      	movs	r3, #0
 8005a12:	617b      	str	r3, [r7, #20]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	617b      	str	r3, [r7, #20]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	617b      	str	r3, [r7, #20]
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	e00b      	b.n	8005a40 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a28:	2300      	movs	r3, #0
 8005a2a:	613b      	str	r3, [r7, #16]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	613b      	str	r3, [r7, #16]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	613b      	str	r3, [r7, #16]
 8005a3c:	693b      	ldr	r3, [r7, #16]
        return;
 8005a3e:	e080      	b.n	8005b42 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005a40:	69bb      	ldr	r3, [r7, #24]
 8005a42:	f003 0320 	and.w	r3, r3, #32
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d014      	beq.n	8005a74 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a4e:	f043 0201 	orr.w	r2, r3, #1
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005a56:	2300      	movs	r3, #0
 8005a58:	60fb      	str	r3, [r7, #12]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	60fb      	str	r3, [r7, #12]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a70:	601a      	str	r2, [r3, #0]
 8005a72:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d00c      	beq.n	8005a98 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a82:	f043 0208 	orr.w	r2, r3, #8
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	60bb      	str	r3, [r7, #8]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	60bb      	str	r3, [r7, #8]
 8005a96:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d04f      	beq.n	8005b40 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	685a      	ldr	r2, [r3, #4]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005aae:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	f003 0302 	and.w	r3, r3, #2
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d104      	bne.n	8005acc <HAL_SPI_IRQHandler+0x168>
 8005ac2:	69fb      	ldr	r3, [r7, #28]
 8005ac4:	f003 0301 	and.w	r3, r3, #1
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d034      	beq.n	8005b36 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	685a      	ldr	r2, [r3, #4]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f022 0203 	bic.w	r2, r2, #3
 8005ada:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d011      	beq.n	8005b08 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ae8:	4a17      	ldr	r2, [pc, #92]	@ (8005b48 <HAL_SPI_IRQHandler+0x1e4>)
 8005aea:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005af0:	4618      	mov	r0, r3
 8005af2:	f7fe fa41 	bl	8003f78 <HAL_DMA_Abort_IT>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d005      	beq.n	8005b08 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b00:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d016      	beq.n	8005b3e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b14:	4a0c      	ldr	r2, [pc, #48]	@ (8005b48 <HAL_SPI_IRQHandler+0x1e4>)
 8005b16:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f7fe fa2b 	bl	8003f78 <HAL_DMA_Abort_IT>
 8005b22:	4603      	mov	r3, r0
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d00a      	beq.n	8005b3e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b2c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8005b34:	e003      	b.n	8005b3e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f000 f808 	bl	8005b4c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005b3c:	e000      	b.n	8005b40 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8005b3e:	bf00      	nop
    return;
 8005b40:	bf00      	nop
  }
}
 8005b42:	3720      	adds	r7, #32
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	08005b61 	.word	0x08005b61

08005b4c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b083      	sub	sp, #12
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005b54:	bf00      	nop
 8005b56:	370c      	adds	r7, #12
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b084      	sub	sp, #16
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b6c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2200      	movs	r2, #0
 8005b72:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2200      	movs	r2, #0
 8005b78:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005b7a:	68f8      	ldr	r0, [r7, #12]
 8005b7c:	f7ff ffe6 	bl	8005b4c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005b80:	bf00      	nop
 8005b82:	3710      	adds	r7, #16
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}

08005b88 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b088      	sub	sp, #32
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	60b9      	str	r1, [r7, #8]
 8005b92:	603b      	str	r3, [r7, #0]
 8005b94:	4613      	mov	r3, r2
 8005b96:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005b98:	f7fd ff66 	bl	8003a68 <HAL_GetTick>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ba0:	1a9b      	subs	r3, r3, r2
 8005ba2:	683a      	ldr	r2, [r7, #0]
 8005ba4:	4413      	add	r3, r2
 8005ba6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005ba8:	f7fd ff5e 	bl	8003a68 <HAL_GetTick>
 8005bac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005bae:	4b39      	ldr	r3, [pc, #228]	@ (8005c94 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	015b      	lsls	r3, r3, #5
 8005bb4:	0d1b      	lsrs	r3, r3, #20
 8005bb6:	69fa      	ldr	r2, [r7, #28]
 8005bb8:	fb02 f303 	mul.w	r3, r2, r3
 8005bbc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005bbe:	e054      	b.n	8005c6a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005bc6:	d050      	beq.n	8005c6a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005bc8:	f7fd ff4e 	bl	8003a68 <HAL_GetTick>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	69bb      	ldr	r3, [r7, #24]
 8005bd0:	1ad3      	subs	r3, r2, r3
 8005bd2:	69fa      	ldr	r2, [r7, #28]
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d902      	bls.n	8005bde <SPI_WaitFlagStateUntilTimeout+0x56>
 8005bd8:	69fb      	ldr	r3, [r7, #28]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d13d      	bne.n	8005c5a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	685a      	ldr	r2, [r3, #4]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005bec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005bf6:	d111      	bne.n	8005c1c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c00:	d004      	beq.n	8005c0c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c0a:	d107      	bne.n	8005c1c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c1a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c24:	d10f      	bne.n	8005c46 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005c34:	601a      	str	r2, [r3, #0]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005c44:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2201      	movs	r2, #1
 8005c4a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2200      	movs	r2, #0
 8005c52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005c56:	2303      	movs	r3, #3
 8005c58:	e017      	b.n	8005c8a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d101      	bne.n	8005c64 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005c60:	2300      	movs	r3, #0
 8005c62:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	3b01      	subs	r3, #1
 8005c68:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	689a      	ldr	r2, [r3, #8]
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	4013      	ands	r3, r2
 8005c74:	68ba      	ldr	r2, [r7, #8]
 8005c76:	429a      	cmp	r2, r3
 8005c78:	bf0c      	ite	eq
 8005c7a:	2301      	moveq	r3, #1
 8005c7c:	2300      	movne	r3, #0
 8005c7e:	b2db      	uxtb	r3, r3
 8005c80:	461a      	mov	r2, r3
 8005c82:	79fb      	ldrb	r3, [r7, #7]
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d19b      	bne.n	8005bc0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005c88:	2300      	movs	r3, #0
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3720      	adds	r7, #32
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}
 8005c92:	bf00      	nop
 8005c94:	20000004 	.word	0x20000004

08005c98 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b088      	sub	sp, #32
 8005c9c:	af02      	add	r7, sp, #8
 8005c9e:	60f8      	str	r0, [r7, #12]
 8005ca0:	60b9      	str	r1, [r7, #8]
 8005ca2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	9300      	str	r3, [sp, #0]
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	2201      	movs	r2, #1
 8005cac:	2102      	movs	r1, #2
 8005cae:	68f8      	ldr	r0, [r7, #12]
 8005cb0:	f7ff ff6a 	bl	8005b88 <SPI_WaitFlagStateUntilTimeout>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d007      	beq.n	8005cca <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cbe:	f043 0220 	orr.w	r2, r3, #32
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005cc6:	2303      	movs	r3, #3
 8005cc8:	e032      	b.n	8005d30 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005cca:	4b1b      	ldr	r3, [pc, #108]	@ (8005d38 <SPI_EndRxTxTransaction+0xa0>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a1b      	ldr	r2, [pc, #108]	@ (8005d3c <SPI_EndRxTxTransaction+0xa4>)
 8005cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8005cd4:	0d5b      	lsrs	r3, r3, #21
 8005cd6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005cda:	fb02 f303 	mul.w	r3, r2, r3
 8005cde:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ce8:	d112      	bne.n	8005d10 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	9300      	str	r3, [sp, #0]
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	2180      	movs	r1, #128	@ 0x80
 8005cf4:	68f8      	ldr	r0, [r7, #12]
 8005cf6:	f7ff ff47 	bl	8005b88 <SPI_WaitFlagStateUntilTimeout>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d016      	beq.n	8005d2e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d04:	f043 0220 	orr.w	r2, r3, #32
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005d0c:	2303      	movs	r3, #3
 8005d0e:	e00f      	b.n	8005d30 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d00a      	beq.n	8005d2c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	3b01      	subs	r3, #1
 8005d1a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d26:	2b80      	cmp	r3, #128	@ 0x80
 8005d28:	d0f2      	beq.n	8005d10 <SPI_EndRxTxTransaction+0x78>
 8005d2a:	e000      	b.n	8005d2e <SPI_EndRxTxTransaction+0x96>
        break;
 8005d2c:	bf00      	nop
  }

  return HAL_OK;
 8005d2e:	2300      	movs	r3, #0
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3718      	adds	r7, #24
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}
 8005d38:	20000004 	.word	0x20000004
 8005d3c:	165e9f81 	.word	0x165e9f81

08005d40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b082      	sub	sp, #8
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d101      	bne.n	8005d52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	e041      	b.n	8005dd6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d106      	bne.n	8005d6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f000 f839 	bl	8005dde <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2202      	movs	r2, #2
 8005d70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	3304      	adds	r3, #4
 8005d7c:	4619      	mov	r1, r3
 8005d7e:	4610      	mov	r0, r2
 8005d80:	f000 fb9a 	bl	80064b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005dd4:	2300      	movs	r3, #0
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3708      	adds	r7, #8
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}

08005dde <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005dde:	b480      	push	{r7}
 8005de0:	b083      	sub	sp, #12
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005de6:	bf00      	nop
 8005de8:	370c      	adds	r7, #12
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr
	...

08005df4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b085      	sub	sp, #20
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d001      	beq.n	8005e0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	e04e      	b.n	8005eaa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2202      	movs	r2, #2
 8005e10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	68da      	ldr	r2, [r3, #12]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f042 0201 	orr.w	r2, r2, #1
 8005e22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a23      	ldr	r2, [pc, #140]	@ (8005eb8 <HAL_TIM_Base_Start_IT+0xc4>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d022      	beq.n	8005e74 <HAL_TIM_Base_Start_IT+0x80>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e36:	d01d      	beq.n	8005e74 <HAL_TIM_Base_Start_IT+0x80>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a1f      	ldr	r2, [pc, #124]	@ (8005ebc <HAL_TIM_Base_Start_IT+0xc8>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d018      	beq.n	8005e74 <HAL_TIM_Base_Start_IT+0x80>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a1e      	ldr	r2, [pc, #120]	@ (8005ec0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d013      	beq.n	8005e74 <HAL_TIM_Base_Start_IT+0x80>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a1c      	ldr	r2, [pc, #112]	@ (8005ec4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d00e      	beq.n	8005e74 <HAL_TIM_Base_Start_IT+0x80>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a1b      	ldr	r2, [pc, #108]	@ (8005ec8 <HAL_TIM_Base_Start_IT+0xd4>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d009      	beq.n	8005e74 <HAL_TIM_Base_Start_IT+0x80>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a19      	ldr	r2, [pc, #100]	@ (8005ecc <HAL_TIM_Base_Start_IT+0xd8>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d004      	beq.n	8005e74 <HAL_TIM_Base_Start_IT+0x80>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a18      	ldr	r2, [pc, #96]	@ (8005ed0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d111      	bne.n	8005e98 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	f003 0307 	and.w	r3, r3, #7
 8005e7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2b06      	cmp	r3, #6
 8005e84:	d010      	beq.n	8005ea8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f042 0201 	orr.w	r2, r2, #1
 8005e94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e96:	e007      	b.n	8005ea8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f042 0201 	orr.w	r2, r2, #1
 8005ea6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ea8:	2300      	movs	r3, #0
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3714      	adds	r7, #20
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr
 8005eb6:	bf00      	nop
 8005eb8:	40010000 	.word	0x40010000
 8005ebc:	40000400 	.word	0x40000400
 8005ec0:	40000800 	.word	0x40000800
 8005ec4:	40000c00 	.word	0x40000c00
 8005ec8:	40010400 	.word	0x40010400
 8005ecc:	40014000 	.word	0x40014000
 8005ed0:	40001800 	.word	0x40001800

08005ed4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b082      	sub	sp, #8
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d101      	bne.n	8005ee6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	e041      	b.n	8005f6a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d106      	bne.n	8005f00 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f7fd f824 	bl	8002f48 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2202      	movs	r2, #2
 8005f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	3304      	adds	r3, #4
 8005f10:	4619      	mov	r1, r3
 8005f12:	4610      	mov	r0, r2
 8005f14:	f000 fad0 	bl	80064b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2201      	movs	r2, #1
 8005f54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3708      	adds	r7, #8
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
	...

08005f74 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b084      	sub	sp, #16
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d109      	bne.n	8005f98 <HAL_TIM_PWM_Start+0x24>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	bf14      	ite	ne
 8005f90:	2301      	movne	r3, #1
 8005f92:	2300      	moveq	r3, #0
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	e022      	b.n	8005fde <HAL_TIM_PWM_Start+0x6a>
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	2b04      	cmp	r3, #4
 8005f9c:	d109      	bne.n	8005fb2 <HAL_TIM_PWM_Start+0x3e>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	bf14      	ite	ne
 8005faa:	2301      	movne	r3, #1
 8005fac:	2300      	moveq	r3, #0
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	e015      	b.n	8005fde <HAL_TIM_PWM_Start+0x6a>
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	2b08      	cmp	r3, #8
 8005fb6:	d109      	bne.n	8005fcc <HAL_TIM_PWM_Start+0x58>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	bf14      	ite	ne
 8005fc4:	2301      	movne	r3, #1
 8005fc6:	2300      	moveq	r3, #0
 8005fc8:	b2db      	uxtb	r3, r3
 8005fca:	e008      	b.n	8005fde <HAL_TIM_PWM_Start+0x6a>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	bf14      	ite	ne
 8005fd8:	2301      	movne	r3, #1
 8005fda:	2300      	moveq	r3, #0
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d001      	beq.n	8005fe6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e07c      	b.n	80060e0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d104      	bne.n	8005ff6 <HAL_TIM_PWM_Start+0x82>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2202      	movs	r2, #2
 8005ff0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ff4:	e013      	b.n	800601e <HAL_TIM_PWM_Start+0xaa>
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	2b04      	cmp	r3, #4
 8005ffa:	d104      	bne.n	8006006 <HAL_TIM_PWM_Start+0x92>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2202      	movs	r2, #2
 8006000:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006004:	e00b      	b.n	800601e <HAL_TIM_PWM_Start+0xaa>
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	2b08      	cmp	r3, #8
 800600a:	d104      	bne.n	8006016 <HAL_TIM_PWM_Start+0xa2>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2202      	movs	r2, #2
 8006010:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006014:	e003      	b.n	800601e <HAL_TIM_PWM_Start+0xaa>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2202      	movs	r2, #2
 800601a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	2201      	movs	r2, #1
 8006024:	6839      	ldr	r1, [r7, #0]
 8006026:	4618      	mov	r0, r3
 8006028:	f000 fca2 	bl	8006970 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a2d      	ldr	r2, [pc, #180]	@ (80060e8 <HAL_TIM_PWM_Start+0x174>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d004      	beq.n	8006040 <HAL_TIM_PWM_Start+0xcc>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a2c      	ldr	r2, [pc, #176]	@ (80060ec <HAL_TIM_PWM_Start+0x178>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d101      	bne.n	8006044 <HAL_TIM_PWM_Start+0xd0>
 8006040:	2301      	movs	r3, #1
 8006042:	e000      	b.n	8006046 <HAL_TIM_PWM_Start+0xd2>
 8006044:	2300      	movs	r3, #0
 8006046:	2b00      	cmp	r3, #0
 8006048:	d007      	beq.n	800605a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006058:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a22      	ldr	r2, [pc, #136]	@ (80060e8 <HAL_TIM_PWM_Start+0x174>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d022      	beq.n	80060aa <HAL_TIM_PWM_Start+0x136>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800606c:	d01d      	beq.n	80060aa <HAL_TIM_PWM_Start+0x136>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a1f      	ldr	r2, [pc, #124]	@ (80060f0 <HAL_TIM_PWM_Start+0x17c>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d018      	beq.n	80060aa <HAL_TIM_PWM_Start+0x136>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a1d      	ldr	r2, [pc, #116]	@ (80060f4 <HAL_TIM_PWM_Start+0x180>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d013      	beq.n	80060aa <HAL_TIM_PWM_Start+0x136>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a1c      	ldr	r2, [pc, #112]	@ (80060f8 <HAL_TIM_PWM_Start+0x184>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d00e      	beq.n	80060aa <HAL_TIM_PWM_Start+0x136>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a16      	ldr	r2, [pc, #88]	@ (80060ec <HAL_TIM_PWM_Start+0x178>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d009      	beq.n	80060aa <HAL_TIM_PWM_Start+0x136>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a18      	ldr	r2, [pc, #96]	@ (80060fc <HAL_TIM_PWM_Start+0x188>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d004      	beq.n	80060aa <HAL_TIM_PWM_Start+0x136>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a16      	ldr	r2, [pc, #88]	@ (8006100 <HAL_TIM_PWM_Start+0x18c>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d111      	bne.n	80060ce <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	f003 0307 	and.w	r3, r3, #7
 80060b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2b06      	cmp	r3, #6
 80060ba:	d010      	beq.n	80060de <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f042 0201 	orr.w	r2, r2, #1
 80060ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060cc:	e007      	b.n	80060de <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f042 0201 	orr.w	r2, r2, #1
 80060dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80060de:	2300      	movs	r3, #0
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3710      	adds	r7, #16
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}
 80060e8:	40010000 	.word	0x40010000
 80060ec:	40010400 	.word	0x40010400
 80060f0:	40000400 	.word	0x40000400
 80060f4:	40000800 	.word	0x40000800
 80060f8:	40000c00 	.word	0x40000c00
 80060fc:	40014000 	.word	0x40014000
 8006100:	40001800 	.word	0x40001800

08006104 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b084      	sub	sp, #16
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	68db      	ldr	r3, [r3, #12]
 8006112:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	691b      	ldr	r3, [r3, #16]
 800611a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	f003 0302 	and.w	r3, r3, #2
 8006122:	2b00      	cmp	r3, #0
 8006124:	d020      	beq.n	8006168 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f003 0302 	and.w	r3, r3, #2
 800612c:	2b00      	cmp	r3, #0
 800612e:	d01b      	beq.n	8006168 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f06f 0202 	mvn.w	r2, #2
 8006138:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2201      	movs	r2, #1
 800613e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	699b      	ldr	r3, [r3, #24]
 8006146:	f003 0303 	and.w	r3, r3, #3
 800614a:	2b00      	cmp	r3, #0
 800614c:	d003      	beq.n	8006156 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 f994 	bl	800647c <HAL_TIM_IC_CaptureCallback>
 8006154:	e005      	b.n	8006162 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f000 f986 	bl	8006468 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f000 f997 	bl	8006490 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	f003 0304 	and.w	r3, r3, #4
 800616e:	2b00      	cmp	r3, #0
 8006170:	d020      	beq.n	80061b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	f003 0304 	and.w	r3, r3, #4
 8006178:	2b00      	cmp	r3, #0
 800617a:	d01b      	beq.n	80061b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f06f 0204 	mvn.w	r2, #4
 8006184:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2202      	movs	r2, #2
 800618a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	699b      	ldr	r3, [r3, #24]
 8006192:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006196:	2b00      	cmp	r3, #0
 8006198:	d003      	beq.n	80061a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 f96e 	bl	800647c <HAL_TIM_IC_CaptureCallback>
 80061a0:	e005      	b.n	80061ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 f960 	bl	8006468 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f000 f971 	bl	8006490 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2200      	movs	r2, #0
 80061b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	f003 0308 	and.w	r3, r3, #8
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d020      	beq.n	8006200 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f003 0308 	and.w	r3, r3, #8
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d01b      	beq.n	8006200 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f06f 0208 	mvn.w	r2, #8
 80061d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2204      	movs	r2, #4
 80061d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	69db      	ldr	r3, [r3, #28]
 80061de:	f003 0303 	and.w	r3, r3, #3
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d003      	beq.n	80061ee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f000 f948 	bl	800647c <HAL_TIM_IC_CaptureCallback>
 80061ec:	e005      	b.n	80061fa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 f93a 	bl	8006468 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 f94b 	bl	8006490 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2200      	movs	r2, #0
 80061fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	f003 0310 	and.w	r3, r3, #16
 8006206:	2b00      	cmp	r3, #0
 8006208:	d020      	beq.n	800624c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f003 0310 	and.w	r3, r3, #16
 8006210:	2b00      	cmp	r3, #0
 8006212:	d01b      	beq.n	800624c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f06f 0210 	mvn.w	r2, #16
 800621c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2208      	movs	r2, #8
 8006222:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	69db      	ldr	r3, [r3, #28]
 800622a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800622e:	2b00      	cmp	r3, #0
 8006230:	d003      	beq.n	800623a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 f922 	bl	800647c <HAL_TIM_IC_CaptureCallback>
 8006238:	e005      	b.n	8006246 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 f914 	bl	8006468 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f000 f925 	bl	8006490 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2200      	movs	r2, #0
 800624a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	f003 0301 	and.w	r3, r3, #1
 8006252:	2b00      	cmp	r3, #0
 8006254:	d00c      	beq.n	8006270 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f003 0301 	and.w	r3, r3, #1
 800625c:	2b00      	cmp	r3, #0
 800625e:	d007      	beq.n	8006270 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f06f 0201 	mvn.w	r2, #1
 8006268:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f7fb ff1e 	bl	80020ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006276:	2b00      	cmp	r3, #0
 8006278:	d00c      	beq.n	8006294 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006280:	2b00      	cmp	r3, #0
 8006282:	d007      	beq.n	8006294 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800628c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 fc6c 	bl	8006b6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800629a:	2b00      	cmp	r3, #0
 800629c:	d00c      	beq.n	80062b8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d007      	beq.n	80062b8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80062b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f000 f8f6 	bl	80064a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	f003 0320 	and.w	r3, r3, #32
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d00c      	beq.n	80062dc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f003 0320 	and.w	r3, r3, #32
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d007      	beq.n	80062dc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f06f 0220 	mvn.w	r2, #32
 80062d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f000 fc3e 	bl	8006b58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80062dc:	bf00      	nop
 80062de:	3710      	adds	r7, #16
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}

080062e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b086      	sub	sp, #24
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	60f8      	str	r0, [r7, #12]
 80062ec:	60b9      	str	r1, [r7, #8]
 80062ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062f0:	2300      	movs	r3, #0
 80062f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d101      	bne.n	8006302 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80062fe:	2302      	movs	r3, #2
 8006300:	e0ae      	b.n	8006460 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2201      	movs	r2, #1
 8006306:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2b0c      	cmp	r3, #12
 800630e:	f200 809f 	bhi.w	8006450 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006312:	a201      	add	r2, pc, #4	@ (adr r2, 8006318 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006318:	0800634d 	.word	0x0800634d
 800631c:	08006451 	.word	0x08006451
 8006320:	08006451 	.word	0x08006451
 8006324:	08006451 	.word	0x08006451
 8006328:	0800638d 	.word	0x0800638d
 800632c:	08006451 	.word	0x08006451
 8006330:	08006451 	.word	0x08006451
 8006334:	08006451 	.word	0x08006451
 8006338:	080063cf 	.word	0x080063cf
 800633c:	08006451 	.word	0x08006451
 8006340:	08006451 	.word	0x08006451
 8006344:	08006451 	.word	0x08006451
 8006348:	0800640f 	.word	0x0800640f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	68b9      	ldr	r1, [r7, #8]
 8006352:	4618      	mov	r0, r3
 8006354:	f000 f95c 	bl	8006610 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	699a      	ldr	r2, [r3, #24]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f042 0208 	orr.w	r2, r2, #8
 8006366:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	699a      	ldr	r2, [r3, #24]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f022 0204 	bic.w	r2, r2, #4
 8006376:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	6999      	ldr	r1, [r3, #24]
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	691a      	ldr	r2, [r3, #16]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	430a      	orrs	r2, r1
 8006388:	619a      	str	r2, [r3, #24]
      break;
 800638a:	e064      	b.n	8006456 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	68b9      	ldr	r1, [r7, #8]
 8006392:	4618      	mov	r0, r3
 8006394:	f000 f9ac 	bl	80066f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	699a      	ldr	r2, [r3, #24]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80063a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	699a      	ldr	r2, [r3, #24]
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80063b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	6999      	ldr	r1, [r3, #24]
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	021a      	lsls	r2, r3, #8
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	430a      	orrs	r2, r1
 80063ca:	619a      	str	r2, [r3, #24]
      break;
 80063cc:	e043      	b.n	8006456 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	68b9      	ldr	r1, [r7, #8]
 80063d4:	4618      	mov	r0, r3
 80063d6:	f000 fa01 	bl	80067dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	69da      	ldr	r2, [r3, #28]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f042 0208 	orr.w	r2, r2, #8
 80063e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	69da      	ldr	r2, [r3, #28]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f022 0204 	bic.w	r2, r2, #4
 80063f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	69d9      	ldr	r1, [r3, #28]
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	691a      	ldr	r2, [r3, #16]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	430a      	orrs	r2, r1
 800640a:	61da      	str	r2, [r3, #28]
      break;
 800640c:	e023      	b.n	8006456 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	68b9      	ldr	r1, [r7, #8]
 8006414:	4618      	mov	r0, r3
 8006416:	f000 fa55 	bl	80068c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	69da      	ldr	r2, [r3, #28]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006428:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	69da      	ldr	r2, [r3, #28]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006438:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	69d9      	ldr	r1, [r3, #28]
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	691b      	ldr	r3, [r3, #16]
 8006444:	021a      	lsls	r2, r3, #8
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	430a      	orrs	r2, r1
 800644c:	61da      	str	r2, [r3, #28]
      break;
 800644e:	e002      	b.n	8006456 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	75fb      	strb	r3, [r7, #23]
      break;
 8006454:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2200      	movs	r2, #0
 800645a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800645e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006460:	4618      	mov	r0, r3
 8006462:	3718      	adds	r7, #24
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006468:	b480      	push	{r7}
 800646a:	b083      	sub	sp, #12
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006470:	bf00      	nop
 8006472:	370c      	adds	r7, #12
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr

0800647c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800647c:	b480      	push	{r7}
 800647e:	b083      	sub	sp, #12
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006484:	bf00      	nop
 8006486:	370c      	adds	r7, #12
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr

08006490 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006490:	b480      	push	{r7}
 8006492:	b083      	sub	sp, #12
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006498:	bf00      	nop
 800649a:	370c      	adds	r7, #12
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr

080064a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80064ac:	bf00      	nop
 80064ae:	370c      	adds	r7, #12
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr

080064b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b085      	sub	sp, #20
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	4a46      	ldr	r2, [pc, #280]	@ (80065e4 <TIM_Base_SetConfig+0x12c>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d013      	beq.n	80064f8 <TIM_Base_SetConfig+0x40>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064d6:	d00f      	beq.n	80064f8 <TIM_Base_SetConfig+0x40>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	4a43      	ldr	r2, [pc, #268]	@ (80065e8 <TIM_Base_SetConfig+0x130>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d00b      	beq.n	80064f8 <TIM_Base_SetConfig+0x40>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	4a42      	ldr	r2, [pc, #264]	@ (80065ec <TIM_Base_SetConfig+0x134>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d007      	beq.n	80064f8 <TIM_Base_SetConfig+0x40>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	4a41      	ldr	r2, [pc, #260]	@ (80065f0 <TIM_Base_SetConfig+0x138>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d003      	beq.n	80064f8 <TIM_Base_SetConfig+0x40>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	4a40      	ldr	r2, [pc, #256]	@ (80065f4 <TIM_Base_SetConfig+0x13c>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d108      	bne.n	800650a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	68fa      	ldr	r2, [r7, #12]
 8006506:	4313      	orrs	r3, r2
 8006508:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	4a35      	ldr	r2, [pc, #212]	@ (80065e4 <TIM_Base_SetConfig+0x12c>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d02b      	beq.n	800656a <TIM_Base_SetConfig+0xb2>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006518:	d027      	beq.n	800656a <TIM_Base_SetConfig+0xb2>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	4a32      	ldr	r2, [pc, #200]	@ (80065e8 <TIM_Base_SetConfig+0x130>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d023      	beq.n	800656a <TIM_Base_SetConfig+0xb2>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	4a31      	ldr	r2, [pc, #196]	@ (80065ec <TIM_Base_SetConfig+0x134>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d01f      	beq.n	800656a <TIM_Base_SetConfig+0xb2>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	4a30      	ldr	r2, [pc, #192]	@ (80065f0 <TIM_Base_SetConfig+0x138>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d01b      	beq.n	800656a <TIM_Base_SetConfig+0xb2>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	4a2f      	ldr	r2, [pc, #188]	@ (80065f4 <TIM_Base_SetConfig+0x13c>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d017      	beq.n	800656a <TIM_Base_SetConfig+0xb2>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	4a2e      	ldr	r2, [pc, #184]	@ (80065f8 <TIM_Base_SetConfig+0x140>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d013      	beq.n	800656a <TIM_Base_SetConfig+0xb2>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	4a2d      	ldr	r2, [pc, #180]	@ (80065fc <TIM_Base_SetConfig+0x144>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d00f      	beq.n	800656a <TIM_Base_SetConfig+0xb2>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	4a2c      	ldr	r2, [pc, #176]	@ (8006600 <TIM_Base_SetConfig+0x148>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d00b      	beq.n	800656a <TIM_Base_SetConfig+0xb2>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	4a2b      	ldr	r2, [pc, #172]	@ (8006604 <TIM_Base_SetConfig+0x14c>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d007      	beq.n	800656a <TIM_Base_SetConfig+0xb2>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	4a2a      	ldr	r2, [pc, #168]	@ (8006608 <TIM_Base_SetConfig+0x150>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d003      	beq.n	800656a <TIM_Base_SetConfig+0xb2>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	4a29      	ldr	r2, [pc, #164]	@ (800660c <TIM_Base_SetConfig+0x154>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d108      	bne.n	800657c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006570:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	68fa      	ldr	r2, [r7, #12]
 8006578:	4313      	orrs	r3, r2
 800657a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	695b      	ldr	r3, [r3, #20]
 8006586:	4313      	orrs	r3, r2
 8006588:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	68fa      	ldr	r2, [r7, #12]
 800658e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	689a      	ldr	r2, [r3, #8]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	4a10      	ldr	r2, [pc, #64]	@ (80065e4 <TIM_Base_SetConfig+0x12c>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d003      	beq.n	80065b0 <TIM_Base_SetConfig+0xf8>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	4a12      	ldr	r2, [pc, #72]	@ (80065f4 <TIM_Base_SetConfig+0x13c>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d103      	bne.n	80065b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	691a      	ldr	r2, [r3, #16]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2201      	movs	r2, #1
 80065bc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	691b      	ldr	r3, [r3, #16]
 80065c2:	f003 0301 	and.w	r3, r3, #1
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	d105      	bne.n	80065d6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	691b      	ldr	r3, [r3, #16]
 80065ce:	f023 0201 	bic.w	r2, r3, #1
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	611a      	str	r2, [r3, #16]
  }
}
 80065d6:	bf00      	nop
 80065d8:	3714      	adds	r7, #20
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr
 80065e2:	bf00      	nop
 80065e4:	40010000 	.word	0x40010000
 80065e8:	40000400 	.word	0x40000400
 80065ec:	40000800 	.word	0x40000800
 80065f0:	40000c00 	.word	0x40000c00
 80065f4:	40010400 	.word	0x40010400
 80065f8:	40014000 	.word	0x40014000
 80065fc:	40014400 	.word	0x40014400
 8006600:	40014800 	.word	0x40014800
 8006604:	40001800 	.word	0x40001800
 8006608:	40001c00 	.word	0x40001c00
 800660c:	40002000 	.word	0x40002000

08006610 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006610:	b480      	push	{r7}
 8006612:	b087      	sub	sp, #28
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6a1b      	ldr	r3, [r3, #32]
 800661e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6a1b      	ldr	r3, [r3, #32]
 8006624:	f023 0201 	bic.w	r2, r3, #1
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	699b      	ldr	r3, [r3, #24]
 8006636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800663e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f023 0303 	bic.w	r3, r3, #3
 8006646:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	68fa      	ldr	r2, [r7, #12]
 800664e:	4313      	orrs	r3, r2
 8006650:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	f023 0302 	bic.w	r3, r3, #2
 8006658:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	697a      	ldr	r2, [r7, #20]
 8006660:	4313      	orrs	r3, r2
 8006662:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	4a20      	ldr	r2, [pc, #128]	@ (80066e8 <TIM_OC1_SetConfig+0xd8>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d003      	beq.n	8006674 <TIM_OC1_SetConfig+0x64>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	4a1f      	ldr	r2, [pc, #124]	@ (80066ec <TIM_OC1_SetConfig+0xdc>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d10c      	bne.n	800668e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	f023 0308 	bic.w	r3, r3, #8
 800667a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	68db      	ldr	r3, [r3, #12]
 8006680:	697a      	ldr	r2, [r7, #20]
 8006682:	4313      	orrs	r3, r2
 8006684:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	f023 0304 	bic.w	r3, r3, #4
 800668c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	4a15      	ldr	r2, [pc, #84]	@ (80066e8 <TIM_OC1_SetConfig+0xd8>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d003      	beq.n	800669e <TIM_OC1_SetConfig+0x8e>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	4a14      	ldr	r2, [pc, #80]	@ (80066ec <TIM_OC1_SetConfig+0xdc>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d111      	bne.n	80066c2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80066a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80066ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	695b      	ldr	r3, [r3, #20]
 80066b2:	693a      	ldr	r2, [r7, #16]
 80066b4:	4313      	orrs	r3, r2
 80066b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	699b      	ldr	r3, [r3, #24]
 80066bc:	693a      	ldr	r2, [r7, #16]
 80066be:	4313      	orrs	r3, r2
 80066c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	693a      	ldr	r2, [r7, #16]
 80066c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	68fa      	ldr	r2, [r7, #12]
 80066cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	685a      	ldr	r2, [r3, #4]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	697a      	ldr	r2, [r7, #20]
 80066da:	621a      	str	r2, [r3, #32]
}
 80066dc:	bf00      	nop
 80066de:	371c      	adds	r7, #28
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr
 80066e8:	40010000 	.word	0x40010000
 80066ec:	40010400 	.word	0x40010400

080066f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b087      	sub	sp, #28
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6a1b      	ldr	r3, [r3, #32]
 80066fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6a1b      	ldr	r3, [r3, #32]
 8006704:	f023 0210 	bic.w	r2, r3, #16
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	699b      	ldr	r3, [r3, #24]
 8006716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800671e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006726:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	021b      	lsls	r3, r3, #8
 800672e:	68fa      	ldr	r2, [r7, #12]
 8006730:	4313      	orrs	r3, r2
 8006732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	f023 0320 	bic.w	r3, r3, #32
 800673a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	011b      	lsls	r3, r3, #4
 8006742:	697a      	ldr	r2, [r7, #20]
 8006744:	4313      	orrs	r3, r2
 8006746:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	4a22      	ldr	r2, [pc, #136]	@ (80067d4 <TIM_OC2_SetConfig+0xe4>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d003      	beq.n	8006758 <TIM_OC2_SetConfig+0x68>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	4a21      	ldr	r2, [pc, #132]	@ (80067d8 <TIM_OC2_SetConfig+0xe8>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d10d      	bne.n	8006774 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800675e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	68db      	ldr	r3, [r3, #12]
 8006764:	011b      	lsls	r3, r3, #4
 8006766:	697a      	ldr	r2, [r7, #20]
 8006768:	4313      	orrs	r3, r2
 800676a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006772:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	4a17      	ldr	r2, [pc, #92]	@ (80067d4 <TIM_OC2_SetConfig+0xe4>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d003      	beq.n	8006784 <TIM_OC2_SetConfig+0x94>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	4a16      	ldr	r2, [pc, #88]	@ (80067d8 <TIM_OC2_SetConfig+0xe8>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d113      	bne.n	80067ac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800678a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006792:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	695b      	ldr	r3, [r3, #20]
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	693a      	ldr	r2, [r7, #16]
 800679c:	4313      	orrs	r3, r2
 800679e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	699b      	ldr	r3, [r3, #24]
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	693a      	ldr	r2, [r7, #16]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	693a      	ldr	r2, [r7, #16]
 80067b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	68fa      	ldr	r2, [r7, #12]
 80067b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	685a      	ldr	r2, [r3, #4]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	697a      	ldr	r2, [r7, #20]
 80067c4:	621a      	str	r2, [r3, #32]
}
 80067c6:	bf00      	nop
 80067c8:	371c      	adds	r7, #28
 80067ca:	46bd      	mov	sp, r7
 80067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d0:	4770      	bx	lr
 80067d2:	bf00      	nop
 80067d4:	40010000 	.word	0x40010000
 80067d8:	40010400 	.word	0x40010400

080067dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067dc:	b480      	push	{r7}
 80067de:	b087      	sub	sp, #28
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6a1b      	ldr	r3, [r3, #32]
 80067ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6a1b      	ldr	r3, [r3, #32]
 80067f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	69db      	ldr	r3, [r3, #28]
 8006802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800680a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f023 0303 	bic.w	r3, r3, #3
 8006812:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	68fa      	ldr	r2, [r7, #12]
 800681a:	4313      	orrs	r3, r2
 800681c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006824:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	689b      	ldr	r3, [r3, #8]
 800682a:	021b      	lsls	r3, r3, #8
 800682c:	697a      	ldr	r2, [r7, #20]
 800682e:	4313      	orrs	r3, r2
 8006830:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4a21      	ldr	r2, [pc, #132]	@ (80068bc <TIM_OC3_SetConfig+0xe0>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d003      	beq.n	8006842 <TIM_OC3_SetConfig+0x66>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	4a20      	ldr	r2, [pc, #128]	@ (80068c0 <TIM_OC3_SetConfig+0xe4>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d10d      	bne.n	800685e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006848:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	68db      	ldr	r3, [r3, #12]
 800684e:	021b      	lsls	r3, r3, #8
 8006850:	697a      	ldr	r2, [r7, #20]
 8006852:	4313      	orrs	r3, r2
 8006854:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800685c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	4a16      	ldr	r2, [pc, #88]	@ (80068bc <TIM_OC3_SetConfig+0xe0>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d003      	beq.n	800686e <TIM_OC3_SetConfig+0x92>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	4a15      	ldr	r2, [pc, #84]	@ (80068c0 <TIM_OC3_SetConfig+0xe4>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d113      	bne.n	8006896 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006874:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800687c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	695b      	ldr	r3, [r3, #20]
 8006882:	011b      	lsls	r3, r3, #4
 8006884:	693a      	ldr	r2, [r7, #16]
 8006886:	4313      	orrs	r3, r2
 8006888:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	699b      	ldr	r3, [r3, #24]
 800688e:	011b      	lsls	r3, r3, #4
 8006890:	693a      	ldr	r2, [r7, #16]
 8006892:	4313      	orrs	r3, r2
 8006894:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	693a      	ldr	r2, [r7, #16]
 800689a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	68fa      	ldr	r2, [r7, #12]
 80068a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	685a      	ldr	r2, [r3, #4]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	697a      	ldr	r2, [r7, #20]
 80068ae:	621a      	str	r2, [r3, #32]
}
 80068b0:	bf00      	nop
 80068b2:	371c      	adds	r7, #28
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr
 80068bc:	40010000 	.word	0x40010000
 80068c0:	40010400 	.word	0x40010400

080068c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b087      	sub	sp, #28
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6a1b      	ldr	r3, [r3, #32]
 80068d2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6a1b      	ldr	r3, [r3, #32]
 80068d8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	69db      	ldr	r3, [r3, #28]
 80068ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	021b      	lsls	r3, r3, #8
 8006902:	68fa      	ldr	r2, [r7, #12]
 8006904:	4313      	orrs	r3, r2
 8006906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800690e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	031b      	lsls	r3, r3, #12
 8006916:	693a      	ldr	r2, [r7, #16]
 8006918:	4313      	orrs	r3, r2
 800691a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	4a12      	ldr	r2, [pc, #72]	@ (8006968 <TIM_OC4_SetConfig+0xa4>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d003      	beq.n	800692c <TIM_OC4_SetConfig+0x68>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	4a11      	ldr	r2, [pc, #68]	@ (800696c <TIM_OC4_SetConfig+0xa8>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d109      	bne.n	8006940 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006932:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	695b      	ldr	r3, [r3, #20]
 8006938:	019b      	lsls	r3, r3, #6
 800693a:	697a      	ldr	r2, [r7, #20]
 800693c:	4313      	orrs	r3, r2
 800693e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	697a      	ldr	r2, [r7, #20]
 8006944:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	68fa      	ldr	r2, [r7, #12]
 800694a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	685a      	ldr	r2, [r3, #4]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	693a      	ldr	r2, [r7, #16]
 8006958:	621a      	str	r2, [r3, #32]
}
 800695a:	bf00      	nop
 800695c:	371c      	adds	r7, #28
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr
 8006966:	bf00      	nop
 8006968:	40010000 	.word	0x40010000
 800696c:	40010400 	.word	0x40010400

08006970 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006970:	b480      	push	{r7}
 8006972:	b087      	sub	sp, #28
 8006974:	af00      	add	r7, sp, #0
 8006976:	60f8      	str	r0, [r7, #12]
 8006978:	60b9      	str	r1, [r7, #8]
 800697a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	f003 031f 	and.w	r3, r3, #31
 8006982:	2201      	movs	r2, #1
 8006984:	fa02 f303 	lsl.w	r3, r2, r3
 8006988:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	6a1a      	ldr	r2, [r3, #32]
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	43db      	mvns	r3, r3
 8006992:	401a      	ands	r2, r3
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	6a1a      	ldr	r2, [r3, #32]
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	f003 031f 	and.w	r3, r3, #31
 80069a2:	6879      	ldr	r1, [r7, #4]
 80069a4:	fa01 f303 	lsl.w	r3, r1, r3
 80069a8:	431a      	orrs	r2, r3
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	621a      	str	r2, [r3, #32]
}
 80069ae:	bf00      	nop
 80069b0:	371c      	adds	r7, #28
 80069b2:	46bd      	mov	sp, r7
 80069b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b8:	4770      	bx	lr
	...

080069bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80069bc:	b480      	push	{r7}
 80069be:	b085      	sub	sp, #20
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d101      	bne.n	80069d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80069d0:	2302      	movs	r3, #2
 80069d2:	e05a      	b.n	8006a8a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2201      	movs	r2, #1
 80069d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2202      	movs	r2, #2
 80069e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	68fa      	ldr	r2, [r7, #12]
 8006a02:	4313      	orrs	r3, r2
 8006a04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	68fa      	ldr	r2, [r7, #12]
 8006a0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a21      	ldr	r2, [pc, #132]	@ (8006a98 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d022      	beq.n	8006a5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a20:	d01d      	beq.n	8006a5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a1d      	ldr	r2, [pc, #116]	@ (8006a9c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d018      	beq.n	8006a5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a1b      	ldr	r2, [pc, #108]	@ (8006aa0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d013      	beq.n	8006a5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a1a      	ldr	r2, [pc, #104]	@ (8006aa4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d00e      	beq.n	8006a5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a18      	ldr	r2, [pc, #96]	@ (8006aa8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d009      	beq.n	8006a5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a17      	ldr	r2, [pc, #92]	@ (8006aac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d004      	beq.n	8006a5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a15      	ldr	r2, [pc, #84]	@ (8006ab0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d10c      	bne.n	8006a78 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	68ba      	ldr	r2, [r7, #8]
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	68ba      	ldr	r2, [r7, #8]
 8006a76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006a88:	2300      	movs	r3, #0
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3714      	adds	r7, #20
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a94:	4770      	bx	lr
 8006a96:	bf00      	nop
 8006a98:	40010000 	.word	0x40010000
 8006a9c:	40000400 	.word	0x40000400
 8006aa0:	40000800 	.word	0x40000800
 8006aa4:	40000c00 	.word	0x40000c00
 8006aa8:	40010400 	.word	0x40010400
 8006aac:	40014000 	.word	0x40014000
 8006ab0:	40001800 	.word	0x40001800

08006ab4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b085      	sub	sp, #20
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d101      	bne.n	8006ad0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006acc:	2302      	movs	r3, #2
 8006ace:	e03d      	b.n	8006b4c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	68db      	ldr	r3, [r3, #12]
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	4313      	orrs	r3, r2
 8006af2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	4313      	orrs	r3, r2
 8006b00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	691b      	ldr	r3, [r3, #16]
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	695b      	ldr	r3, [r3, #20]
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	69db      	ldr	r3, [r3, #28]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	68fa      	ldr	r2, [r7, #12]
 8006b40:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2200      	movs	r2, #0
 8006b46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006b4a:	2300      	movs	r3, #0
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3714      	adds	r7, #20
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr

08006b58 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b083      	sub	sp, #12
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b60:	bf00      	nop
 8006b62:	370c      	adds	r7, #12
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr

08006b6c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b083      	sub	sp, #12
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b74:	bf00      	nop
 8006b76:	370c      	adds	r7, #12
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr

08006b80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b082      	sub	sp, #8
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d101      	bne.n	8006b92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	e042      	b.n	8006c18 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b98:	b2db      	uxtb	r3, r3
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d106      	bne.n	8006bac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f7fc fca6 	bl	80034f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2224      	movs	r2, #36	@ 0x24
 8006bb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	68da      	ldr	r2, [r3, #12]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006bc2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f001 f8ad 	bl	8007d24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	691a      	ldr	r2, [r3, #16]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006bd8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	695a      	ldr	r2, [r3, #20]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006be8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	68da      	ldr	r2, [r3, #12]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006bf8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2220      	movs	r2, #32
 8006c04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2220      	movs	r2, #32
 8006c0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2200      	movs	r2, #0
 8006c14:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006c16:	2300      	movs	r3, #0
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3708      	adds	r7, #8
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b08a      	sub	sp, #40	@ 0x28
 8006c24:	af02      	add	r7, sp, #8
 8006c26:	60f8      	str	r0, [r7, #12]
 8006c28:	60b9      	str	r1, [r7, #8]
 8006c2a:	603b      	str	r3, [r7, #0]
 8006c2c:	4613      	mov	r3, r2
 8006c2e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006c30:	2300      	movs	r3, #0
 8006c32:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c3a:	b2db      	uxtb	r3, r3
 8006c3c:	2b20      	cmp	r3, #32
 8006c3e:	d175      	bne.n	8006d2c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d002      	beq.n	8006c4c <HAL_UART_Transmit+0x2c>
 8006c46:	88fb      	ldrh	r3, [r7, #6]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d101      	bne.n	8006c50 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	e06e      	b.n	8006d2e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2200      	movs	r2, #0
 8006c54:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2221      	movs	r2, #33	@ 0x21
 8006c5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c5e:	f7fc ff03 	bl	8003a68 <HAL_GetTick>
 8006c62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	88fa      	ldrh	r2, [r7, #6]
 8006c68:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	88fa      	ldrh	r2, [r7, #6]
 8006c6e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c78:	d108      	bne.n	8006c8c <HAL_UART_Transmit+0x6c>
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	691b      	ldr	r3, [r3, #16]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d104      	bne.n	8006c8c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006c82:	2300      	movs	r3, #0
 8006c84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	61bb      	str	r3, [r7, #24]
 8006c8a:	e003      	b.n	8006c94 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c90:	2300      	movs	r3, #0
 8006c92:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006c94:	e02e      	b.n	8006cf4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	9300      	str	r3, [sp, #0]
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	2180      	movs	r1, #128	@ 0x80
 8006ca0:	68f8      	ldr	r0, [r7, #12]
 8006ca2:	f000 fd86 	bl	80077b2 <UART_WaitOnFlagUntilTimeout>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d005      	beq.n	8006cb8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2220      	movs	r2, #32
 8006cb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006cb4:	2303      	movs	r3, #3
 8006cb6:	e03a      	b.n	8006d2e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006cb8:	69fb      	ldr	r3, [r7, #28]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d10b      	bne.n	8006cd6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006cbe:	69bb      	ldr	r3, [r7, #24]
 8006cc0:	881b      	ldrh	r3, [r3, #0]
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ccc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006cce:	69bb      	ldr	r3, [r7, #24]
 8006cd0:	3302      	adds	r3, #2
 8006cd2:	61bb      	str	r3, [r7, #24]
 8006cd4:	e007      	b.n	8006ce6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006cd6:	69fb      	ldr	r3, [r7, #28]
 8006cd8:	781a      	ldrb	r2, [r3, #0]
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006ce0:	69fb      	ldr	r3, [r7, #28]
 8006ce2:	3301      	adds	r3, #1
 8006ce4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	3b01      	subs	r3, #1
 8006cee:	b29a      	uxth	r2, r3
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d1cb      	bne.n	8006c96 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	9300      	str	r3, [sp, #0]
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	2200      	movs	r2, #0
 8006d06:	2140      	movs	r1, #64	@ 0x40
 8006d08:	68f8      	ldr	r0, [r7, #12]
 8006d0a:	f000 fd52 	bl	80077b2 <UART_WaitOnFlagUntilTimeout>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d005      	beq.n	8006d20 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2220      	movs	r2, #32
 8006d18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006d1c:	2303      	movs	r3, #3
 8006d1e:	e006      	b.n	8006d2e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2220      	movs	r2, #32
 8006d24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	e000      	b.n	8006d2e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006d2c:	2302      	movs	r3, #2
  }
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3720      	adds	r7, #32
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}
	...

08006d38 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b08c      	sub	sp, #48	@ 0x30
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	60b9      	str	r1, [r7, #8]
 8006d42:	4613      	mov	r3, r2
 8006d44:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d4c:	b2db      	uxtb	r3, r3
 8006d4e:	2b20      	cmp	r3, #32
 8006d50:	d156      	bne.n	8006e00 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d002      	beq.n	8006d5e <HAL_UART_Transmit_DMA+0x26>
 8006d58:	88fb      	ldrh	r3, [r7, #6]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d101      	bne.n	8006d62 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	e04f      	b.n	8006e02 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8006d62:	68ba      	ldr	r2, [r7, #8]
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	88fa      	ldrh	r2, [r7, #6]
 8006d6c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	88fa      	ldrh	r2, [r7, #6]
 8006d72:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2200      	movs	r2, #0
 8006d78:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2221      	movs	r2, #33	@ 0x21
 8006d7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d86:	4a21      	ldr	r2, [pc, #132]	@ (8006e0c <HAL_UART_Transmit_DMA+0xd4>)
 8006d88:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d8e:	4a20      	ldr	r2, [pc, #128]	@ (8006e10 <HAL_UART_Transmit_DMA+0xd8>)
 8006d90:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d96:	4a1f      	ldr	r2, [pc, #124]	@ (8006e14 <HAL_UART_Transmit_DMA+0xdc>)
 8006d98:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d9e:	2200      	movs	r2, #0
 8006da0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8006da2:	f107 0308 	add.w	r3, r7, #8
 8006da6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006dac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dae:	6819      	ldr	r1, [r3, #0]
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	3304      	adds	r3, #4
 8006db6:	461a      	mov	r2, r3
 8006db8:	88fb      	ldrh	r3, [r7, #6]
 8006dba:	f7fd f815 	bl	8003de8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006dc6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	3314      	adds	r3, #20
 8006dce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd0:	69bb      	ldr	r3, [r7, #24]
 8006dd2:	e853 3f00 	ldrex	r3, [r3]
 8006dd6:	617b      	str	r3, [r7, #20]
   return(result);
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006dde:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	3314      	adds	r3, #20
 8006de6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006de8:	627a      	str	r2, [r7, #36]	@ 0x24
 8006dea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dec:	6a39      	ldr	r1, [r7, #32]
 8006dee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006df0:	e841 2300 	strex	r3, r2, [r1]
 8006df4:	61fb      	str	r3, [r7, #28]
   return(result);
 8006df6:	69fb      	ldr	r3, [r7, #28]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d1e5      	bne.n	8006dc8 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	e000      	b.n	8006e02 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8006e00:	2302      	movs	r3, #2
  }
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3730      	adds	r7, #48	@ 0x30
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}
 8006e0a:	bf00      	nop
 8006e0c:	08007501 	.word	0x08007501
 8006e10:	0800759b 	.word	0x0800759b
 8006e14:	0800771f 	.word	0x0800771f

08006e18 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b084      	sub	sp, #16
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	60f8      	str	r0, [r7, #12]
 8006e20:	60b9      	str	r1, [r7, #8]
 8006e22:	4613      	mov	r3, r2
 8006e24:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006e2c:	b2db      	uxtb	r3, r3
 8006e2e:	2b20      	cmp	r3, #32
 8006e30:	d112      	bne.n	8006e58 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d002      	beq.n	8006e3e <HAL_UART_Receive_DMA+0x26>
 8006e38:	88fb      	ldrh	r3, [r7, #6]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d101      	bne.n	8006e42 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	e00b      	b.n	8006e5a <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2200      	movs	r2, #0
 8006e46:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006e48:	88fb      	ldrh	r3, [r7, #6]
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	68b9      	ldr	r1, [r7, #8]
 8006e4e:	68f8      	ldr	r0, [r7, #12]
 8006e50:	f000 fd08 	bl	8007864 <UART_Start_Receive_DMA>
 8006e54:	4603      	mov	r3, r0
 8006e56:	e000      	b.n	8006e5a <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006e58:	2302      	movs	r3, #2
  }
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3710      	adds	r7, #16
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}

08006e62 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8006e62:	b580      	push	{r7, lr}
 8006e64:	b090      	sub	sp, #64	@ 0x40
 8006e66:	af00      	add	r7, sp, #0
 8006e68:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	695b      	ldr	r3, [r3, #20]
 8006e74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e78:	2b80      	cmp	r3, #128	@ 0x80
 8006e7a:	bf0c      	ite	eq
 8006e7c:	2301      	moveq	r3, #1
 8006e7e:	2300      	movne	r3, #0
 8006e80:	b2db      	uxtb	r3, r3
 8006e82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	2b21      	cmp	r3, #33	@ 0x21
 8006e8e:	d128      	bne.n	8006ee2 <HAL_UART_DMAStop+0x80>
 8006e90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d025      	beq.n	8006ee2 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	3314      	adds	r3, #20
 8006e9c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ea0:	e853 3f00 	ldrex	r3, [r3]
 8006ea4:	623b      	str	r3, [r7, #32]
   return(result);
 8006ea6:	6a3b      	ldr	r3, [r7, #32]
 8006ea8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006eac:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	3314      	adds	r3, #20
 8006eb4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006eb6:	633a      	str	r2, [r7, #48]	@ 0x30
 8006eb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ebc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ebe:	e841 2300 	strex	r3, r2, [r1]
 8006ec2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006ec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d1e5      	bne.n	8006e96 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d004      	beq.n	8006edc <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f7fc ffde 	bl	8003e98 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f000 fd5b 	bl	8007998 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	695b      	ldr	r3, [r3, #20]
 8006ee8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006eec:	2b40      	cmp	r3, #64	@ 0x40
 8006eee:	bf0c      	ite	eq
 8006ef0:	2301      	moveq	r3, #1
 8006ef2:	2300      	movne	r3, #0
 8006ef4:	b2db      	uxtb	r3, r3
 8006ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006efe:	b2db      	uxtb	r3, r3
 8006f00:	2b22      	cmp	r3, #34	@ 0x22
 8006f02:	d128      	bne.n	8006f56 <HAL_UART_DMAStop+0xf4>
 8006f04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d025      	beq.n	8006f56 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	3314      	adds	r3, #20
 8006f10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	e853 3f00 	ldrex	r3, [r3]
 8006f18:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f20:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	3314      	adds	r3, #20
 8006f28:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006f2a:	61fa      	str	r2, [r7, #28]
 8006f2c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f2e:	69b9      	ldr	r1, [r7, #24]
 8006f30:	69fa      	ldr	r2, [r7, #28]
 8006f32:	e841 2300 	strex	r3, r2, [r1]
 8006f36:	617b      	str	r3, [r7, #20]
   return(result);
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d1e5      	bne.n	8006f0a <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d004      	beq.n	8006f50 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f7fc ffa4 	bl	8003e98 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f000 fd49 	bl	80079e8 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8006f56:	2300      	movs	r3, #0
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3740      	adds	r7, #64	@ 0x40
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}

08006f60 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b0ba      	sub	sp, #232	@ 0xe8
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	68db      	ldr	r3, [r3, #12]
 8006f78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	695b      	ldr	r3, [r3, #20]
 8006f82:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006f86:	2300      	movs	r3, #0
 8006f88:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006f92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f96:	f003 030f 	and.w	r3, r3, #15
 8006f9a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006f9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d10f      	bne.n	8006fc6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006fa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006faa:	f003 0320 	and.w	r3, r3, #32
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d009      	beq.n	8006fc6 <HAL_UART_IRQHandler+0x66>
 8006fb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fb6:	f003 0320 	and.w	r3, r3, #32
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d003      	beq.n	8006fc6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 fdf1 	bl	8007ba6 <UART_Receive_IT>
      return;
 8006fc4:	e25b      	b.n	800747e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006fc6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	f000 80de 	beq.w	800718c <HAL_UART_IRQHandler+0x22c>
 8006fd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006fd4:	f003 0301 	and.w	r3, r3, #1
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d106      	bne.n	8006fea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006fdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fe0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	f000 80d1 	beq.w	800718c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006fea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fee:	f003 0301 	and.w	r3, r3, #1
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d00b      	beq.n	800700e <HAL_UART_IRQHandler+0xae>
 8006ff6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ffa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d005      	beq.n	800700e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007006:	f043 0201 	orr.w	r2, r3, #1
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800700e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007012:	f003 0304 	and.w	r3, r3, #4
 8007016:	2b00      	cmp	r3, #0
 8007018:	d00b      	beq.n	8007032 <HAL_UART_IRQHandler+0xd2>
 800701a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800701e:	f003 0301 	and.w	r3, r3, #1
 8007022:	2b00      	cmp	r3, #0
 8007024:	d005      	beq.n	8007032 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800702a:	f043 0202 	orr.w	r2, r3, #2
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007036:	f003 0302 	and.w	r3, r3, #2
 800703a:	2b00      	cmp	r3, #0
 800703c:	d00b      	beq.n	8007056 <HAL_UART_IRQHandler+0xf6>
 800703e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007042:	f003 0301 	and.w	r3, r3, #1
 8007046:	2b00      	cmp	r3, #0
 8007048:	d005      	beq.n	8007056 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800704e:	f043 0204 	orr.w	r2, r3, #4
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800705a:	f003 0308 	and.w	r3, r3, #8
 800705e:	2b00      	cmp	r3, #0
 8007060:	d011      	beq.n	8007086 <HAL_UART_IRQHandler+0x126>
 8007062:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007066:	f003 0320 	and.w	r3, r3, #32
 800706a:	2b00      	cmp	r3, #0
 800706c:	d105      	bne.n	800707a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800706e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007072:	f003 0301 	and.w	r3, r3, #1
 8007076:	2b00      	cmp	r3, #0
 8007078:	d005      	beq.n	8007086 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800707e:	f043 0208 	orr.w	r2, r3, #8
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800708a:	2b00      	cmp	r3, #0
 800708c:	f000 81f2 	beq.w	8007474 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007090:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007094:	f003 0320 	and.w	r3, r3, #32
 8007098:	2b00      	cmp	r3, #0
 800709a:	d008      	beq.n	80070ae <HAL_UART_IRQHandler+0x14e>
 800709c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070a0:	f003 0320 	and.w	r3, r3, #32
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d002      	beq.n	80070ae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f000 fd7c 	bl	8007ba6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	695b      	ldr	r3, [r3, #20]
 80070b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070b8:	2b40      	cmp	r3, #64	@ 0x40
 80070ba:	bf0c      	ite	eq
 80070bc:	2301      	moveq	r3, #1
 80070be:	2300      	movne	r3, #0
 80070c0:	b2db      	uxtb	r3, r3
 80070c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070ca:	f003 0308 	and.w	r3, r3, #8
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d103      	bne.n	80070da <HAL_UART_IRQHandler+0x17a>
 80070d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d04f      	beq.n	800717a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f000 fc84 	bl	80079e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	695b      	ldr	r3, [r3, #20]
 80070e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070ea:	2b40      	cmp	r3, #64	@ 0x40
 80070ec:	d141      	bne.n	8007172 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	3314      	adds	r3, #20
 80070f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80070fc:	e853 3f00 	ldrex	r3, [r3]
 8007100:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007104:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007108:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800710c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	3314      	adds	r3, #20
 8007116:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800711a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800711e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007122:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007126:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800712a:	e841 2300 	strex	r3, r2, [r1]
 800712e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007132:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007136:	2b00      	cmp	r3, #0
 8007138:	d1d9      	bne.n	80070ee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800713e:	2b00      	cmp	r3, #0
 8007140:	d013      	beq.n	800716a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007146:	4a7e      	ldr	r2, [pc, #504]	@ (8007340 <HAL_UART_IRQHandler+0x3e0>)
 8007148:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800714e:	4618      	mov	r0, r3
 8007150:	f7fc ff12 	bl	8003f78 <HAL_DMA_Abort_IT>
 8007154:	4603      	mov	r3, r0
 8007156:	2b00      	cmp	r3, #0
 8007158:	d016      	beq.n	8007188 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800715e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007160:	687a      	ldr	r2, [r7, #4]
 8007162:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007164:	4610      	mov	r0, r2
 8007166:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007168:	e00e      	b.n	8007188 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f000 f9b2 	bl	80074d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007170:	e00a      	b.n	8007188 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 f9ae 	bl	80074d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007178:	e006      	b.n	8007188 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f000 f9aa 	bl	80074d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007186:	e175      	b.n	8007474 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007188:	bf00      	nop
    return;
 800718a:	e173      	b.n	8007474 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007190:	2b01      	cmp	r3, #1
 8007192:	f040 814f 	bne.w	8007434 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800719a:	f003 0310 	and.w	r3, r3, #16
 800719e:	2b00      	cmp	r3, #0
 80071a0:	f000 8148 	beq.w	8007434 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80071a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071a8:	f003 0310 	and.w	r3, r3, #16
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	f000 8141 	beq.w	8007434 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80071b2:	2300      	movs	r3, #0
 80071b4:	60bb      	str	r3, [r7, #8]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	60bb      	str	r3, [r7, #8]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	60bb      	str	r3, [r7, #8]
 80071c6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	695b      	ldr	r3, [r3, #20]
 80071ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071d2:	2b40      	cmp	r3, #64	@ 0x40
 80071d4:	f040 80b6 	bne.w	8007344 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80071e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	f000 8145 	beq.w	8007478 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80071f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80071f6:	429a      	cmp	r2, r3
 80071f8:	f080 813e 	bcs.w	8007478 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007202:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007208:	69db      	ldr	r3, [r3, #28]
 800720a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800720e:	f000 8088 	beq.w	8007322 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	330c      	adds	r3, #12
 8007218:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800721c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007220:	e853 3f00 	ldrex	r3, [r3]
 8007224:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007228:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800722c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007230:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	330c      	adds	r3, #12
 800723a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800723e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007242:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007246:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800724a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800724e:	e841 2300 	strex	r3, r2, [r1]
 8007252:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007256:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800725a:	2b00      	cmp	r3, #0
 800725c:	d1d9      	bne.n	8007212 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	3314      	adds	r3, #20
 8007264:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007266:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007268:	e853 3f00 	ldrex	r3, [r3]
 800726c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800726e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007270:	f023 0301 	bic.w	r3, r3, #1
 8007274:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	3314      	adds	r3, #20
 800727e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007282:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007286:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007288:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800728a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800728e:	e841 2300 	strex	r3, r2, [r1]
 8007292:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007294:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007296:	2b00      	cmp	r3, #0
 8007298:	d1e1      	bne.n	800725e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	3314      	adds	r3, #20
 80072a0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80072a4:	e853 3f00 	ldrex	r3, [r3]
 80072a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80072aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80072ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80072b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	3314      	adds	r3, #20
 80072ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80072be:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80072c0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80072c4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80072c6:	e841 2300 	strex	r3, r2, [r1]
 80072ca:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80072cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d1e3      	bne.n	800729a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2220      	movs	r2, #32
 80072d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2200      	movs	r2, #0
 80072de:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	330c      	adds	r3, #12
 80072e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80072ea:	e853 3f00 	ldrex	r3, [r3]
 80072ee:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80072f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80072f2:	f023 0310 	bic.w	r3, r3, #16
 80072f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	330c      	adds	r3, #12
 8007300:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007304:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007306:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007308:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800730a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800730c:	e841 2300 	strex	r3, r2, [r1]
 8007310:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007312:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007314:	2b00      	cmp	r3, #0
 8007316:	d1e3      	bne.n	80072e0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800731c:	4618      	mov	r0, r3
 800731e:	f7fc fdbb 	bl	8003e98 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2202      	movs	r2, #2
 8007326:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007330:	b29b      	uxth	r3, r3
 8007332:	1ad3      	subs	r3, r2, r3
 8007334:	b29b      	uxth	r3, r3
 8007336:	4619      	mov	r1, r3
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f000 f8d5 	bl	80074e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800733e:	e09b      	b.n	8007478 <HAL_UART_IRQHandler+0x518>
 8007340:	08007aaf 	.word	0x08007aaf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800734c:	b29b      	uxth	r3, r3
 800734e:	1ad3      	subs	r3, r2, r3
 8007350:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007358:	b29b      	uxth	r3, r3
 800735a:	2b00      	cmp	r3, #0
 800735c:	f000 808e 	beq.w	800747c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007360:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007364:	2b00      	cmp	r3, #0
 8007366:	f000 8089 	beq.w	800747c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	330c      	adds	r3, #12
 8007370:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007374:	e853 3f00 	ldrex	r3, [r3]
 8007378:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800737a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800737c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007380:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	330c      	adds	r3, #12
 800738a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800738e:	647a      	str	r2, [r7, #68]	@ 0x44
 8007390:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007392:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007394:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007396:	e841 2300 	strex	r3, r2, [r1]
 800739a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800739c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d1e3      	bne.n	800736a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	3314      	adds	r3, #20
 80073a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ac:	e853 3f00 	ldrex	r3, [r3]
 80073b0:	623b      	str	r3, [r7, #32]
   return(result);
 80073b2:	6a3b      	ldr	r3, [r7, #32]
 80073b4:	f023 0301 	bic.w	r3, r3, #1
 80073b8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	3314      	adds	r3, #20
 80073c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80073c6:	633a      	str	r2, [r7, #48]	@ 0x30
 80073c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80073cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073ce:	e841 2300 	strex	r3, r2, [r1]
 80073d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80073d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d1e3      	bne.n	80073a2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2220      	movs	r2, #32
 80073de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2200      	movs	r2, #0
 80073e6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	330c      	adds	r3, #12
 80073ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	e853 3f00 	ldrex	r3, [r3]
 80073f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f023 0310 	bic.w	r3, r3, #16
 80073fe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	330c      	adds	r3, #12
 8007408:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800740c:	61fa      	str	r2, [r7, #28]
 800740e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007410:	69b9      	ldr	r1, [r7, #24]
 8007412:	69fa      	ldr	r2, [r7, #28]
 8007414:	e841 2300 	strex	r3, r2, [r1]
 8007418:	617b      	str	r3, [r7, #20]
   return(result);
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d1e3      	bne.n	80073e8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2202      	movs	r2, #2
 8007424:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007426:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800742a:	4619      	mov	r1, r3
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f000 f85b 	bl	80074e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007432:	e023      	b.n	800747c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007434:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007438:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800743c:	2b00      	cmp	r3, #0
 800743e:	d009      	beq.n	8007454 <HAL_UART_IRQHandler+0x4f4>
 8007440:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007444:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007448:	2b00      	cmp	r3, #0
 800744a:	d003      	beq.n	8007454 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f000 fb42 	bl	8007ad6 <UART_Transmit_IT>
    return;
 8007452:	e014      	b.n	800747e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007454:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007458:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800745c:	2b00      	cmp	r3, #0
 800745e:	d00e      	beq.n	800747e <HAL_UART_IRQHandler+0x51e>
 8007460:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007464:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007468:	2b00      	cmp	r3, #0
 800746a:	d008      	beq.n	800747e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f000 fb82 	bl	8007b76 <UART_EndTransmit_IT>
    return;
 8007472:	e004      	b.n	800747e <HAL_UART_IRQHandler+0x51e>
    return;
 8007474:	bf00      	nop
 8007476:	e002      	b.n	800747e <HAL_UART_IRQHandler+0x51e>
      return;
 8007478:	bf00      	nop
 800747a:	e000      	b.n	800747e <HAL_UART_IRQHandler+0x51e>
      return;
 800747c:	bf00      	nop
  }
}
 800747e:	37e8      	adds	r7, #232	@ 0xe8
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}

08007484 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007484:	b480      	push	{r7}
 8007486:	b083      	sub	sp, #12
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800748c:	bf00      	nop
 800748e:	370c      	adds	r7, #12
 8007490:	46bd      	mov	sp, r7
 8007492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007496:	4770      	bx	lr

08007498 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007498:	b480      	push	{r7}
 800749a:	b083      	sub	sp, #12
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80074a0:	bf00      	nop
 80074a2:	370c      	adds	r7, #12
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr

080074ac <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b083      	sub	sp, #12
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80074b4:	bf00      	nop
 80074b6:	370c      	adds	r7, #12
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr

080074c0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b083      	sub	sp, #12
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80074c8:	bf00      	nop
 80074ca:	370c      	adds	r7, #12
 80074cc:	46bd      	mov	sp, r7
 80074ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d2:	4770      	bx	lr

080074d4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b083      	sub	sp, #12
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80074dc:	bf00      	nop
 80074de:	370c      	adds	r7, #12
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr

080074e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b083      	sub	sp, #12
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	460b      	mov	r3, r1
 80074f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80074f4:	bf00      	nop
 80074f6:	370c      	adds	r7, #12
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr

08007500 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b090      	sub	sp, #64	@ 0x40
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800750c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007518:	2b00      	cmp	r3, #0
 800751a:	d137      	bne.n	800758c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800751c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800751e:	2200      	movs	r2, #0
 8007520:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007522:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	3314      	adds	r3, #20
 8007528:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800752a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800752c:	e853 3f00 	ldrex	r3, [r3]
 8007530:	623b      	str	r3, [r7, #32]
   return(result);
 8007532:	6a3b      	ldr	r3, [r7, #32]
 8007534:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007538:	63bb      	str	r3, [r7, #56]	@ 0x38
 800753a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	3314      	adds	r3, #20
 8007540:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007542:	633a      	str	r2, [r7, #48]	@ 0x30
 8007544:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007546:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007548:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800754a:	e841 2300 	strex	r3, r2, [r1]
 800754e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007552:	2b00      	cmp	r3, #0
 8007554:	d1e5      	bne.n	8007522 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007556:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	330c      	adds	r3, #12
 800755c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	e853 3f00 	ldrex	r3, [r3]
 8007564:	60fb      	str	r3, [r7, #12]
   return(result);
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800756c:	637b      	str	r3, [r7, #52]	@ 0x34
 800756e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	330c      	adds	r3, #12
 8007574:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007576:	61fa      	str	r2, [r7, #28]
 8007578:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800757a:	69b9      	ldr	r1, [r7, #24]
 800757c:	69fa      	ldr	r2, [r7, #28]
 800757e:	e841 2300 	strex	r3, r2, [r1]
 8007582:	617b      	str	r3, [r7, #20]
   return(result);
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d1e5      	bne.n	8007556 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800758a:	e002      	b.n	8007592 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800758c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800758e:	f7ff ff79 	bl	8007484 <HAL_UART_TxCpltCallback>
}
 8007592:	bf00      	nop
 8007594:	3740      	adds	r7, #64	@ 0x40
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}

0800759a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800759a:	b580      	push	{r7, lr}
 800759c:	b084      	sub	sp, #16
 800759e:	af00      	add	r7, sp, #0
 80075a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075a6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80075a8:	68f8      	ldr	r0, [r7, #12]
 80075aa:	f7ff ff75 	bl	8007498 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075ae:	bf00      	nop
 80075b0:	3710      	adds	r7, #16
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}

080075b6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80075b6:	b580      	push	{r7, lr}
 80075b8:	b09c      	sub	sp, #112	@ 0x70
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075c2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d172      	bne.n	80076b8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80075d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80075d4:	2200      	movs	r2, #0
 80075d6:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80075d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	330c      	adds	r3, #12
 80075de:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80075e2:	e853 3f00 	ldrex	r3, [r3]
 80075e6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80075e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80075ea:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80075ee:	66bb      	str	r3, [r7, #104]	@ 0x68
 80075f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	330c      	adds	r3, #12
 80075f6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80075f8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80075fa:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075fc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80075fe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007600:	e841 2300 	strex	r3, r2, [r1]
 8007604:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007606:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007608:	2b00      	cmp	r3, #0
 800760a:	d1e5      	bne.n	80075d8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800760c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	3314      	adds	r3, #20
 8007612:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007616:	e853 3f00 	ldrex	r3, [r3]
 800761a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800761c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800761e:	f023 0301 	bic.w	r3, r3, #1
 8007622:	667b      	str	r3, [r7, #100]	@ 0x64
 8007624:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	3314      	adds	r3, #20
 800762a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800762c:	647a      	str	r2, [r7, #68]	@ 0x44
 800762e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007630:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007632:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007634:	e841 2300 	strex	r3, r2, [r1]
 8007638:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800763a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800763c:	2b00      	cmp	r3, #0
 800763e:	d1e5      	bne.n	800760c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007640:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	3314      	adds	r3, #20
 8007646:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800764a:	e853 3f00 	ldrex	r3, [r3]
 800764e:	623b      	str	r3, [r7, #32]
   return(result);
 8007650:	6a3b      	ldr	r3, [r7, #32]
 8007652:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007656:	663b      	str	r3, [r7, #96]	@ 0x60
 8007658:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	3314      	adds	r3, #20
 800765e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007660:	633a      	str	r2, [r7, #48]	@ 0x30
 8007662:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007664:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007666:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007668:	e841 2300 	strex	r3, r2, [r1]
 800766c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800766e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007670:	2b00      	cmp	r3, #0
 8007672:	d1e5      	bne.n	8007640 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007674:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007676:	2220      	movs	r2, #32
 8007678:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800767c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800767e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007680:	2b01      	cmp	r3, #1
 8007682:	d119      	bne.n	80076b8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007684:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	330c      	adds	r3, #12
 800768a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800768c:	693b      	ldr	r3, [r7, #16]
 800768e:	e853 3f00 	ldrex	r3, [r3]
 8007692:	60fb      	str	r3, [r7, #12]
   return(result);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f023 0310 	bic.w	r3, r3, #16
 800769a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800769c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	330c      	adds	r3, #12
 80076a2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80076a4:	61fa      	str	r2, [r7, #28]
 80076a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a8:	69b9      	ldr	r1, [r7, #24]
 80076aa:	69fa      	ldr	r2, [r7, #28]
 80076ac:	e841 2300 	strex	r3, r2, [r1]
 80076b0:	617b      	str	r3, [r7, #20]
   return(result);
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d1e5      	bne.n	8007684 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80076ba:	2200      	movs	r2, #0
 80076bc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80076c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076c2:	2b01      	cmp	r3, #1
 80076c4:	d106      	bne.n	80076d4 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80076c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80076c8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80076ca:	4619      	mov	r1, r3
 80076cc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80076ce:	f7ff ff0b 	bl	80074e8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80076d2:	e002      	b.n	80076da <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80076d4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80076d6:	f7ff fee9 	bl	80074ac <HAL_UART_RxCpltCallback>
}
 80076da:	bf00      	nop
 80076dc:	3770      	adds	r7, #112	@ 0x70
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}

080076e2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80076e2:	b580      	push	{r7, lr}
 80076e4:	b084      	sub	sp, #16
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076ee:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2201      	movs	r2, #1
 80076f4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d108      	bne.n	8007710 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007702:	085b      	lsrs	r3, r3, #1
 8007704:	b29b      	uxth	r3, r3
 8007706:	4619      	mov	r1, r3
 8007708:	68f8      	ldr	r0, [r7, #12]
 800770a:	f7ff feed 	bl	80074e8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800770e:	e002      	b.n	8007716 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8007710:	68f8      	ldr	r0, [r7, #12]
 8007712:	f7ff fed5 	bl	80074c0 <HAL_UART_RxHalfCpltCallback>
}
 8007716:	bf00      	nop
 8007718:	3710      	adds	r7, #16
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}

0800771e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800771e:	b580      	push	{r7, lr}
 8007720:	b084      	sub	sp, #16
 8007722:	af00      	add	r7, sp, #0
 8007724:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007726:	2300      	movs	r3, #0
 8007728:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800772e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	695b      	ldr	r3, [r3, #20]
 8007736:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800773a:	2b80      	cmp	r3, #128	@ 0x80
 800773c:	bf0c      	ite	eq
 800773e:	2301      	moveq	r3, #1
 8007740:	2300      	movne	r3, #0
 8007742:	b2db      	uxtb	r3, r3
 8007744:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800774c:	b2db      	uxtb	r3, r3
 800774e:	2b21      	cmp	r3, #33	@ 0x21
 8007750:	d108      	bne.n	8007764 <UART_DMAError+0x46>
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d005      	beq.n	8007764 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	2200      	movs	r2, #0
 800775c:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800775e:	68b8      	ldr	r0, [r7, #8]
 8007760:	f000 f91a 	bl	8007998 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	695b      	ldr	r3, [r3, #20]
 800776a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800776e:	2b40      	cmp	r3, #64	@ 0x40
 8007770:	bf0c      	ite	eq
 8007772:	2301      	moveq	r3, #1
 8007774:	2300      	movne	r3, #0
 8007776:	b2db      	uxtb	r3, r3
 8007778:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007780:	b2db      	uxtb	r3, r3
 8007782:	2b22      	cmp	r3, #34	@ 0x22
 8007784:	d108      	bne.n	8007798 <UART_DMAError+0x7a>
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d005      	beq.n	8007798 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	2200      	movs	r2, #0
 8007790:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8007792:	68b8      	ldr	r0, [r7, #8]
 8007794:	f000 f928 	bl	80079e8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800779c:	f043 0210 	orr.w	r2, r3, #16
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80077a4:	68b8      	ldr	r0, [r7, #8]
 80077a6:	f7ff fe95 	bl	80074d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80077aa:	bf00      	nop
 80077ac:	3710      	adds	r7, #16
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}

080077b2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80077b2:	b580      	push	{r7, lr}
 80077b4:	b086      	sub	sp, #24
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	60f8      	str	r0, [r7, #12]
 80077ba:	60b9      	str	r1, [r7, #8]
 80077bc:	603b      	str	r3, [r7, #0]
 80077be:	4613      	mov	r3, r2
 80077c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077c2:	e03b      	b.n	800783c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077c4:	6a3b      	ldr	r3, [r7, #32]
 80077c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80077ca:	d037      	beq.n	800783c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077cc:	f7fc f94c 	bl	8003a68 <HAL_GetTick>
 80077d0:	4602      	mov	r2, r0
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	1ad3      	subs	r3, r2, r3
 80077d6:	6a3a      	ldr	r2, [r7, #32]
 80077d8:	429a      	cmp	r2, r3
 80077da:	d302      	bcc.n	80077e2 <UART_WaitOnFlagUntilTimeout+0x30>
 80077dc:	6a3b      	ldr	r3, [r7, #32]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d101      	bne.n	80077e6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80077e2:	2303      	movs	r3, #3
 80077e4:	e03a      	b.n	800785c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	68db      	ldr	r3, [r3, #12]
 80077ec:	f003 0304 	and.w	r3, r3, #4
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d023      	beq.n	800783c <UART_WaitOnFlagUntilTimeout+0x8a>
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	2b80      	cmp	r3, #128	@ 0x80
 80077f8:	d020      	beq.n	800783c <UART_WaitOnFlagUntilTimeout+0x8a>
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	2b40      	cmp	r3, #64	@ 0x40
 80077fe:	d01d      	beq.n	800783c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f003 0308 	and.w	r3, r3, #8
 800780a:	2b08      	cmp	r3, #8
 800780c:	d116      	bne.n	800783c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800780e:	2300      	movs	r3, #0
 8007810:	617b      	str	r3, [r7, #20]
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	617b      	str	r3, [r7, #20]
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	617b      	str	r3, [r7, #20]
 8007822:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007824:	68f8      	ldr	r0, [r7, #12]
 8007826:	f000 f8df 	bl	80079e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2208      	movs	r2, #8
 800782e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2200      	movs	r2, #0
 8007834:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007838:	2301      	movs	r3, #1
 800783a:	e00f      	b.n	800785c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	681a      	ldr	r2, [r3, #0]
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	4013      	ands	r3, r2
 8007846:	68ba      	ldr	r2, [r7, #8]
 8007848:	429a      	cmp	r2, r3
 800784a:	bf0c      	ite	eq
 800784c:	2301      	moveq	r3, #1
 800784e:	2300      	movne	r3, #0
 8007850:	b2db      	uxtb	r3, r3
 8007852:	461a      	mov	r2, r3
 8007854:	79fb      	ldrb	r3, [r7, #7]
 8007856:	429a      	cmp	r2, r3
 8007858:	d0b4      	beq.n	80077c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800785a:	2300      	movs	r3, #0
}
 800785c:	4618      	mov	r0, r3
 800785e:	3718      	adds	r7, #24
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}

08007864 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b098      	sub	sp, #96	@ 0x60
 8007868:	af00      	add	r7, sp, #0
 800786a:	60f8      	str	r0, [r7, #12]
 800786c:	60b9      	str	r1, [r7, #8]
 800786e:	4613      	mov	r3, r2
 8007870:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007872:	68ba      	ldr	r2, [r7, #8]
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	88fa      	ldrh	r2, [r7, #6]
 800787c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2200      	movs	r2, #0
 8007882:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2222      	movs	r2, #34	@ 0x22
 8007888:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007890:	4a3e      	ldr	r2, [pc, #248]	@ (800798c <UART_Start_Receive_DMA+0x128>)
 8007892:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007898:	4a3d      	ldr	r2, [pc, #244]	@ (8007990 <UART_Start_Receive_DMA+0x12c>)
 800789a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078a0:	4a3c      	ldr	r2, [pc, #240]	@ (8007994 <UART_Start_Receive_DMA+0x130>)
 80078a2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078a8:	2200      	movs	r2, #0
 80078aa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80078ac:	f107 0308 	add.w	r3, r7, #8
 80078b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	3304      	adds	r3, #4
 80078bc:	4619      	mov	r1, r3
 80078be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80078c0:	681a      	ldr	r2, [r3, #0]
 80078c2:	88fb      	ldrh	r3, [r7, #6]
 80078c4:	f7fc fa90 	bl	8003de8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80078c8:	2300      	movs	r3, #0
 80078ca:	613b      	str	r3, [r7, #16]
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	613b      	str	r3, [r7, #16]
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	613b      	str	r3, [r7, #16]
 80078dc:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	691b      	ldr	r3, [r3, #16]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d019      	beq.n	800791a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	330c      	adds	r3, #12
 80078ec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078f0:	e853 3f00 	ldrex	r3, [r3]
 80078f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80078f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80078fc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	330c      	adds	r3, #12
 8007904:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007906:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8007908:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800790a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800790c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800790e:	e841 2300 	strex	r3, r2, [r1]
 8007912:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007914:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007916:	2b00      	cmp	r3, #0
 8007918:	d1e5      	bne.n	80078e6 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	3314      	adds	r3, #20
 8007920:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007924:	e853 3f00 	ldrex	r3, [r3]
 8007928:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800792a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800792c:	f043 0301 	orr.w	r3, r3, #1
 8007930:	657b      	str	r3, [r7, #84]	@ 0x54
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	3314      	adds	r3, #20
 8007938:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800793a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800793c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800793e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007940:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007942:	e841 2300 	strex	r3, r2, [r1]
 8007946:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800794a:	2b00      	cmp	r3, #0
 800794c:	d1e5      	bne.n	800791a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	3314      	adds	r3, #20
 8007954:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007956:	69bb      	ldr	r3, [r7, #24]
 8007958:	e853 3f00 	ldrex	r3, [r3]
 800795c:	617b      	str	r3, [r7, #20]
   return(result);
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007964:	653b      	str	r3, [r7, #80]	@ 0x50
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	3314      	adds	r3, #20
 800796c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800796e:	627a      	str	r2, [r7, #36]	@ 0x24
 8007970:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007972:	6a39      	ldr	r1, [r7, #32]
 8007974:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007976:	e841 2300 	strex	r3, r2, [r1]
 800797a:	61fb      	str	r3, [r7, #28]
   return(result);
 800797c:	69fb      	ldr	r3, [r7, #28]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d1e5      	bne.n	800794e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8007982:	2300      	movs	r3, #0
}
 8007984:	4618      	mov	r0, r3
 8007986:	3760      	adds	r7, #96	@ 0x60
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}
 800798c:	080075b7 	.word	0x080075b7
 8007990:	080076e3 	.word	0x080076e3
 8007994:	0800771f 	.word	0x0800771f

08007998 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007998:	b480      	push	{r7}
 800799a:	b089      	sub	sp, #36	@ 0x24
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	330c      	adds	r3, #12
 80079a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	e853 3f00 	ldrex	r3, [r3]
 80079ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80079b6:	61fb      	str	r3, [r7, #28]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	330c      	adds	r3, #12
 80079be:	69fa      	ldr	r2, [r7, #28]
 80079c0:	61ba      	str	r2, [r7, #24]
 80079c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c4:	6979      	ldr	r1, [r7, #20]
 80079c6:	69ba      	ldr	r2, [r7, #24]
 80079c8:	e841 2300 	strex	r3, r2, [r1]
 80079cc:	613b      	str	r3, [r7, #16]
   return(result);
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d1e5      	bne.n	80079a0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2220      	movs	r2, #32
 80079d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80079dc:	bf00      	nop
 80079de:	3724      	adds	r7, #36	@ 0x24
 80079e0:	46bd      	mov	sp, r7
 80079e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e6:	4770      	bx	lr

080079e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b095      	sub	sp, #84	@ 0x54
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	330c      	adds	r3, #12
 80079f6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079fa:	e853 3f00 	ldrex	r3, [r3]
 80079fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a02:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007a06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	330c      	adds	r3, #12
 8007a0e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007a10:	643a      	str	r2, [r7, #64]	@ 0x40
 8007a12:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a14:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007a16:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007a18:	e841 2300 	strex	r3, r2, [r1]
 8007a1c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d1e5      	bne.n	80079f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	3314      	adds	r3, #20
 8007a2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a2c:	6a3b      	ldr	r3, [r7, #32]
 8007a2e:	e853 3f00 	ldrex	r3, [r3]
 8007a32:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a34:	69fb      	ldr	r3, [r7, #28]
 8007a36:	f023 0301 	bic.w	r3, r3, #1
 8007a3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	3314      	adds	r3, #20
 8007a42:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007a44:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007a46:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a48:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007a4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a4c:	e841 2300 	strex	r3, r2, [r1]
 8007a50:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d1e5      	bne.n	8007a24 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	d119      	bne.n	8007a94 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	330c      	adds	r3, #12
 8007a66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	e853 3f00 	ldrex	r3, [r3]
 8007a6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	f023 0310 	bic.w	r3, r3, #16
 8007a76:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	330c      	adds	r3, #12
 8007a7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007a80:	61ba      	str	r2, [r7, #24]
 8007a82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a84:	6979      	ldr	r1, [r7, #20]
 8007a86:	69ba      	ldr	r2, [r7, #24]
 8007a88:	e841 2300 	strex	r3, r2, [r1]
 8007a8c:	613b      	str	r3, [r7, #16]
   return(result);
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d1e5      	bne.n	8007a60 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2220      	movs	r2, #32
 8007a98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007aa2:	bf00      	nop
 8007aa4:	3754      	adds	r7, #84	@ 0x54
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aac:	4770      	bx	lr

08007aae <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007aae:	b580      	push	{r7, lr}
 8007ab0:	b084      	sub	sp, #16
 8007ab2:	af00      	add	r7, sp, #0
 8007ab4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007aba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007ac8:	68f8      	ldr	r0, [r7, #12]
 8007aca:	f7ff fd03 	bl	80074d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ace:	bf00      	nop
 8007ad0:	3710      	adds	r7, #16
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}

08007ad6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007ad6:	b480      	push	{r7}
 8007ad8:	b085      	sub	sp, #20
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ae4:	b2db      	uxtb	r3, r3
 8007ae6:	2b21      	cmp	r3, #33	@ 0x21
 8007ae8:	d13e      	bne.n	8007b68 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	689b      	ldr	r3, [r3, #8]
 8007aee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007af2:	d114      	bne.n	8007b1e <UART_Transmit_IT+0x48>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	691b      	ldr	r3, [r3, #16]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d110      	bne.n	8007b1e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6a1b      	ldr	r3, [r3, #32]
 8007b00:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	881b      	ldrh	r3, [r3, #0]
 8007b06:	461a      	mov	r2, r3
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b10:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6a1b      	ldr	r3, [r3, #32]
 8007b16:	1c9a      	adds	r2, r3, #2
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	621a      	str	r2, [r3, #32]
 8007b1c:	e008      	b.n	8007b30 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6a1b      	ldr	r3, [r3, #32]
 8007b22:	1c59      	adds	r1, r3, #1
 8007b24:	687a      	ldr	r2, [r7, #4]
 8007b26:	6211      	str	r1, [r2, #32]
 8007b28:	781a      	ldrb	r2, [r3, #0]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	3b01      	subs	r3, #1
 8007b38:	b29b      	uxth	r3, r3
 8007b3a:	687a      	ldr	r2, [r7, #4]
 8007b3c:	4619      	mov	r1, r3
 8007b3e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d10f      	bne.n	8007b64 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	68da      	ldr	r2, [r3, #12]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007b52:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	68da      	ldr	r2, [r3, #12]
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007b62:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007b64:	2300      	movs	r3, #0
 8007b66:	e000      	b.n	8007b6a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007b68:	2302      	movs	r3, #2
  }
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3714      	adds	r7, #20
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr

08007b76 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007b76:	b580      	push	{r7, lr}
 8007b78:	b082      	sub	sp, #8
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	68da      	ldr	r2, [r3, #12]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007b8c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2220      	movs	r2, #32
 8007b92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f7ff fc74 	bl	8007484 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007b9c:	2300      	movs	r3, #0
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3708      	adds	r7, #8
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}

08007ba6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007ba6:	b580      	push	{r7, lr}
 8007ba8:	b08c      	sub	sp, #48	@ 0x30
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007bb4:	b2db      	uxtb	r3, r3
 8007bb6:	2b22      	cmp	r3, #34	@ 0x22
 8007bb8:	f040 80ae 	bne.w	8007d18 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007bc4:	d117      	bne.n	8007bf6 <UART_Receive_IT+0x50>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	691b      	ldr	r3, [r3, #16]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d113      	bne.n	8007bf6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bd6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007be4:	b29a      	uxth	r2, r3
 8007be6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007be8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bee:	1c9a      	adds	r2, r3, #2
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	629a      	str	r2, [r3, #40]	@ 0x28
 8007bf4:	e026      	b.n	8007c44 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c08:	d007      	beq.n	8007c1a <UART_Receive_IT+0x74>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	689b      	ldr	r3, [r3, #8]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d10a      	bne.n	8007c28 <UART_Receive_IT+0x82>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	691b      	ldr	r3, [r3, #16]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d106      	bne.n	8007c28 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	b2da      	uxtb	r2, r3
 8007c22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c24:	701a      	strb	r2, [r3, #0]
 8007c26:	e008      	b.n	8007c3a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	b2db      	uxtb	r3, r3
 8007c30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c34:	b2da      	uxtb	r2, r3
 8007c36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c38:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c3e:	1c5a      	adds	r2, r3, #1
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007c48:	b29b      	uxth	r3, r3
 8007c4a:	3b01      	subs	r3, #1
 8007c4c:	b29b      	uxth	r3, r3
 8007c4e:	687a      	ldr	r2, [r7, #4]
 8007c50:	4619      	mov	r1, r3
 8007c52:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d15d      	bne.n	8007d14 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	68da      	ldr	r2, [r3, #12]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f022 0220 	bic.w	r2, r2, #32
 8007c66:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	68da      	ldr	r2, [r3, #12]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007c76:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	695a      	ldr	r2, [r3, #20]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f022 0201 	bic.w	r2, r2, #1
 8007c86:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2220      	movs	r2, #32
 8007c8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2200      	movs	r2, #0
 8007c94:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c9a:	2b01      	cmp	r3, #1
 8007c9c:	d135      	bne.n	8007d0a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	330c      	adds	r3, #12
 8007caa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	e853 3f00 	ldrex	r3, [r3]
 8007cb2:	613b      	str	r3, [r7, #16]
   return(result);
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	f023 0310 	bic.w	r3, r3, #16
 8007cba:	627b      	str	r3, [r7, #36]	@ 0x24
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	330c      	adds	r3, #12
 8007cc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007cc4:	623a      	str	r2, [r7, #32]
 8007cc6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc8:	69f9      	ldr	r1, [r7, #28]
 8007cca:	6a3a      	ldr	r2, [r7, #32]
 8007ccc:	e841 2300 	strex	r3, r2, [r1]
 8007cd0:	61bb      	str	r3, [r7, #24]
   return(result);
 8007cd2:	69bb      	ldr	r3, [r7, #24]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d1e5      	bne.n	8007ca4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f003 0310 	and.w	r3, r3, #16
 8007ce2:	2b10      	cmp	r3, #16
 8007ce4:	d10a      	bne.n	8007cfc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	60fb      	str	r3, [r7, #12]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	60fb      	str	r3, [r7, #12]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	60fb      	str	r3, [r7, #12]
 8007cfa:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007d00:	4619      	mov	r1, r3
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f7ff fbf0 	bl	80074e8 <HAL_UARTEx_RxEventCallback>
 8007d08:	e002      	b.n	8007d10 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f7ff fbce 	bl	80074ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007d10:	2300      	movs	r3, #0
 8007d12:	e002      	b.n	8007d1a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007d14:	2300      	movs	r3, #0
 8007d16:	e000      	b.n	8007d1a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007d18:	2302      	movs	r3, #2
  }
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3730      	adds	r7, #48	@ 0x30
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}
	...

08007d24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d28:	b0c0      	sub	sp, #256	@ 0x100
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	691b      	ldr	r3, [r3, #16]
 8007d38:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d40:	68d9      	ldr	r1, [r3, #12]
 8007d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d46:	681a      	ldr	r2, [r3, #0]
 8007d48:	ea40 0301 	orr.w	r3, r0, r1
 8007d4c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d52:	689a      	ldr	r2, [r3, #8]
 8007d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d58:	691b      	ldr	r3, [r3, #16]
 8007d5a:	431a      	orrs	r2, r3
 8007d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d60:	695b      	ldr	r3, [r3, #20]
 8007d62:	431a      	orrs	r2, r3
 8007d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d68:	69db      	ldr	r3, [r3, #28]
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	68db      	ldr	r3, [r3, #12]
 8007d78:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007d7c:	f021 010c 	bic.w	r1, r1, #12
 8007d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d84:	681a      	ldr	r2, [r3, #0]
 8007d86:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007d8a:	430b      	orrs	r3, r1
 8007d8c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	695b      	ldr	r3, [r3, #20]
 8007d96:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007d9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d9e:	6999      	ldr	r1, [r3, #24]
 8007da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007da4:	681a      	ldr	r2, [r3, #0]
 8007da6:	ea40 0301 	orr.w	r3, r0, r1
 8007daa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007db0:	681a      	ldr	r2, [r3, #0]
 8007db2:	4b8f      	ldr	r3, [pc, #572]	@ (8007ff0 <UART_SetConfig+0x2cc>)
 8007db4:	429a      	cmp	r2, r3
 8007db6:	d005      	beq.n	8007dc4 <UART_SetConfig+0xa0>
 8007db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dbc:	681a      	ldr	r2, [r3, #0]
 8007dbe:	4b8d      	ldr	r3, [pc, #564]	@ (8007ff4 <UART_SetConfig+0x2d0>)
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d104      	bne.n	8007dce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007dc4:	f7fc fe80 	bl	8004ac8 <HAL_RCC_GetPCLK2Freq>
 8007dc8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007dcc:	e003      	b.n	8007dd6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007dce:	f7fc fe67 	bl	8004aa0 <HAL_RCC_GetPCLK1Freq>
 8007dd2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dda:	69db      	ldr	r3, [r3, #28]
 8007ddc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007de0:	f040 810c 	bne.w	8007ffc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007de4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007de8:	2200      	movs	r2, #0
 8007dea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007dee:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007df2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007df6:	4622      	mov	r2, r4
 8007df8:	462b      	mov	r3, r5
 8007dfa:	1891      	adds	r1, r2, r2
 8007dfc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007dfe:	415b      	adcs	r3, r3
 8007e00:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007e02:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007e06:	4621      	mov	r1, r4
 8007e08:	eb12 0801 	adds.w	r8, r2, r1
 8007e0c:	4629      	mov	r1, r5
 8007e0e:	eb43 0901 	adc.w	r9, r3, r1
 8007e12:	f04f 0200 	mov.w	r2, #0
 8007e16:	f04f 0300 	mov.w	r3, #0
 8007e1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007e1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007e22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007e26:	4690      	mov	r8, r2
 8007e28:	4699      	mov	r9, r3
 8007e2a:	4623      	mov	r3, r4
 8007e2c:	eb18 0303 	adds.w	r3, r8, r3
 8007e30:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007e34:	462b      	mov	r3, r5
 8007e36:	eb49 0303 	adc.w	r3, r9, r3
 8007e3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	2200      	movs	r2, #0
 8007e46:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007e4a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007e4e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007e52:	460b      	mov	r3, r1
 8007e54:	18db      	adds	r3, r3, r3
 8007e56:	653b      	str	r3, [r7, #80]	@ 0x50
 8007e58:	4613      	mov	r3, r2
 8007e5a:	eb42 0303 	adc.w	r3, r2, r3
 8007e5e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007e60:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007e64:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007e68:	f7f8 ff1e 	bl	8000ca8 <__aeabi_uldivmod>
 8007e6c:	4602      	mov	r2, r0
 8007e6e:	460b      	mov	r3, r1
 8007e70:	4b61      	ldr	r3, [pc, #388]	@ (8007ff8 <UART_SetConfig+0x2d4>)
 8007e72:	fba3 2302 	umull	r2, r3, r3, r2
 8007e76:	095b      	lsrs	r3, r3, #5
 8007e78:	011c      	lsls	r4, r3, #4
 8007e7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e7e:	2200      	movs	r2, #0
 8007e80:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007e84:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007e88:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007e8c:	4642      	mov	r2, r8
 8007e8e:	464b      	mov	r3, r9
 8007e90:	1891      	adds	r1, r2, r2
 8007e92:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007e94:	415b      	adcs	r3, r3
 8007e96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e98:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007e9c:	4641      	mov	r1, r8
 8007e9e:	eb12 0a01 	adds.w	sl, r2, r1
 8007ea2:	4649      	mov	r1, r9
 8007ea4:	eb43 0b01 	adc.w	fp, r3, r1
 8007ea8:	f04f 0200 	mov.w	r2, #0
 8007eac:	f04f 0300 	mov.w	r3, #0
 8007eb0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007eb4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007eb8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007ebc:	4692      	mov	sl, r2
 8007ebe:	469b      	mov	fp, r3
 8007ec0:	4643      	mov	r3, r8
 8007ec2:	eb1a 0303 	adds.w	r3, sl, r3
 8007ec6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007eca:	464b      	mov	r3, r9
 8007ecc:	eb4b 0303 	adc.w	r3, fp, r3
 8007ed0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	2200      	movs	r2, #0
 8007edc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007ee0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007ee4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007ee8:	460b      	mov	r3, r1
 8007eea:	18db      	adds	r3, r3, r3
 8007eec:	643b      	str	r3, [r7, #64]	@ 0x40
 8007eee:	4613      	mov	r3, r2
 8007ef0:	eb42 0303 	adc.w	r3, r2, r3
 8007ef4:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ef6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007efa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007efe:	f7f8 fed3 	bl	8000ca8 <__aeabi_uldivmod>
 8007f02:	4602      	mov	r2, r0
 8007f04:	460b      	mov	r3, r1
 8007f06:	4611      	mov	r1, r2
 8007f08:	4b3b      	ldr	r3, [pc, #236]	@ (8007ff8 <UART_SetConfig+0x2d4>)
 8007f0a:	fba3 2301 	umull	r2, r3, r3, r1
 8007f0e:	095b      	lsrs	r3, r3, #5
 8007f10:	2264      	movs	r2, #100	@ 0x64
 8007f12:	fb02 f303 	mul.w	r3, r2, r3
 8007f16:	1acb      	subs	r3, r1, r3
 8007f18:	00db      	lsls	r3, r3, #3
 8007f1a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007f1e:	4b36      	ldr	r3, [pc, #216]	@ (8007ff8 <UART_SetConfig+0x2d4>)
 8007f20:	fba3 2302 	umull	r2, r3, r3, r2
 8007f24:	095b      	lsrs	r3, r3, #5
 8007f26:	005b      	lsls	r3, r3, #1
 8007f28:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007f2c:	441c      	add	r4, r3
 8007f2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f32:	2200      	movs	r2, #0
 8007f34:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007f38:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007f3c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007f40:	4642      	mov	r2, r8
 8007f42:	464b      	mov	r3, r9
 8007f44:	1891      	adds	r1, r2, r2
 8007f46:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007f48:	415b      	adcs	r3, r3
 8007f4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007f50:	4641      	mov	r1, r8
 8007f52:	1851      	adds	r1, r2, r1
 8007f54:	6339      	str	r1, [r7, #48]	@ 0x30
 8007f56:	4649      	mov	r1, r9
 8007f58:	414b      	adcs	r3, r1
 8007f5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f5c:	f04f 0200 	mov.w	r2, #0
 8007f60:	f04f 0300 	mov.w	r3, #0
 8007f64:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007f68:	4659      	mov	r1, fp
 8007f6a:	00cb      	lsls	r3, r1, #3
 8007f6c:	4651      	mov	r1, sl
 8007f6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f72:	4651      	mov	r1, sl
 8007f74:	00ca      	lsls	r2, r1, #3
 8007f76:	4610      	mov	r0, r2
 8007f78:	4619      	mov	r1, r3
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	4642      	mov	r2, r8
 8007f7e:	189b      	adds	r3, r3, r2
 8007f80:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007f84:	464b      	mov	r3, r9
 8007f86:	460a      	mov	r2, r1
 8007f88:	eb42 0303 	adc.w	r3, r2, r3
 8007f8c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f94:	685b      	ldr	r3, [r3, #4]
 8007f96:	2200      	movs	r2, #0
 8007f98:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007f9c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007fa0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007fa4:	460b      	mov	r3, r1
 8007fa6:	18db      	adds	r3, r3, r3
 8007fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007faa:	4613      	mov	r3, r2
 8007fac:	eb42 0303 	adc.w	r3, r2, r3
 8007fb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007fb2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007fb6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007fba:	f7f8 fe75 	bl	8000ca8 <__aeabi_uldivmod>
 8007fbe:	4602      	mov	r2, r0
 8007fc0:	460b      	mov	r3, r1
 8007fc2:	4b0d      	ldr	r3, [pc, #52]	@ (8007ff8 <UART_SetConfig+0x2d4>)
 8007fc4:	fba3 1302 	umull	r1, r3, r3, r2
 8007fc8:	095b      	lsrs	r3, r3, #5
 8007fca:	2164      	movs	r1, #100	@ 0x64
 8007fcc:	fb01 f303 	mul.w	r3, r1, r3
 8007fd0:	1ad3      	subs	r3, r2, r3
 8007fd2:	00db      	lsls	r3, r3, #3
 8007fd4:	3332      	adds	r3, #50	@ 0x32
 8007fd6:	4a08      	ldr	r2, [pc, #32]	@ (8007ff8 <UART_SetConfig+0x2d4>)
 8007fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8007fdc:	095b      	lsrs	r3, r3, #5
 8007fde:	f003 0207 	and.w	r2, r3, #7
 8007fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4422      	add	r2, r4
 8007fea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007fec:	e106      	b.n	80081fc <UART_SetConfig+0x4d8>
 8007fee:	bf00      	nop
 8007ff0:	40011000 	.word	0x40011000
 8007ff4:	40011400 	.word	0x40011400
 8007ff8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007ffc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008000:	2200      	movs	r2, #0
 8008002:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008006:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800800a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800800e:	4642      	mov	r2, r8
 8008010:	464b      	mov	r3, r9
 8008012:	1891      	adds	r1, r2, r2
 8008014:	6239      	str	r1, [r7, #32]
 8008016:	415b      	adcs	r3, r3
 8008018:	627b      	str	r3, [r7, #36]	@ 0x24
 800801a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800801e:	4641      	mov	r1, r8
 8008020:	1854      	adds	r4, r2, r1
 8008022:	4649      	mov	r1, r9
 8008024:	eb43 0501 	adc.w	r5, r3, r1
 8008028:	f04f 0200 	mov.w	r2, #0
 800802c:	f04f 0300 	mov.w	r3, #0
 8008030:	00eb      	lsls	r3, r5, #3
 8008032:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008036:	00e2      	lsls	r2, r4, #3
 8008038:	4614      	mov	r4, r2
 800803a:	461d      	mov	r5, r3
 800803c:	4643      	mov	r3, r8
 800803e:	18e3      	adds	r3, r4, r3
 8008040:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008044:	464b      	mov	r3, r9
 8008046:	eb45 0303 	adc.w	r3, r5, r3
 800804a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800804e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	2200      	movs	r2, #0
 8008056:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800805a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800805e:	f04f 0200 	mov.w	r2, #0
 8008062:	f04f 0300 	mov.w	r3, #0
 8008066:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800806a:	4629      	mov	r1, r5
 800806c:	008b      	lsls	r3, r1, #2
 800806e:	4621      	mov	r1, r4
 8008070:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008074:	4621      	mov	r1, r4
 8008076:	008a      	lsls	r2, r1, #2
 8008078:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800807c:	f7f8 fe14 	bl	8000ca8 <__aeabi_uldivmod>
 8008080:	4602      	mov	r2, r0
 8008082:	460b      	mov	r3, r1
 8008084:	4b60      	ldr	r3, [pc, #384]	@ (8008208 <UART_SetConfig+0x4e4>)
 8008086:	fba3 2302 	umull	r2, r3, r3, r2
 800808a:	095b      	lsrs	r3, r3, #5
 800808c:	011c      	lsls	r4, r3, #4
 800808e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008092:	2200      	movs	r2, #0
 8008094:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008098:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800809c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80080a0:	4642      	mov	r2, r8
 80080a2:	464b      	mov	r3, r9
 80080a4:	1891      	adds	r1, r2, r2
 80080a6:	61b9      	str	r1, [r7, #24]
 80080a8:	415b      	adcs	r3, r3
 80080aa:	61fb      	str	r3, [r7, #28]
 80080ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80080b0:	4641      	mov	r1, r8
 80080b2:	1851      	adds	r1, r2, r1
 80080b4:	6139      	str	r1, [r7, #16]
 80080b6:	4649      	mov	r1, r9
 80080b8:	414b      	adcs	r3, r1
 80080ba:	617b      	str	r3, [r7, #20]
 80080bc:	f04f 0200 	mov.w	r2, #0
 80080c0:	f04f 0300 	mov.w	r3, #0
 80080c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80080c8:	4659      	mov	r1, fp
 80080ca:	00cb      	lsls	r3, r1, #3
 80080cc:	4651      	mov	r1, sl
 80080ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80080d2:	4651      	mov	r1, sl
 80080d4:	00ca      	lsls	r2, r1, #3
 80080d6:	4610      	mov	r0, r2
 80080d8:	4619      	mov	r1, r3
 80080da:	4603      	mov	r3, r0
 80080dc:	4642      	mov	r2, r8
 80080de:	189b      	adds	r3, r3, r2
 80080e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80080e4:	464b      	mov	r3, r9
 80080e6:	460a      	mov	r2, r1
 80080e8:	eb42 0303 	adc.w	r3, r2, r3
 80080ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80080f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080f4:	685b      	ldr	r3, [r3, #4]
 80080f6:	2200      	movs	r2, #0
 80080f8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80080fa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80080fc:	f04f 0200 	mov.w	r2, #0
 8008100:	f04f 0300 	mov.w	r3, #0
 8008104:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008108:	4649      	mov	r1, r9
 800810a:	008b      	lsls	r3, r1, #2
 800810c:	4641      	mov	r1, r8
 800810e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008112:	4641      	mov	r1, r8
 8008114:	008a      	lsls	r2, r1, #2
 8008116:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800811a:	f7f8 fdc5 	bl	8000ca8 <__aeabi_uldivmod>
 800811e:	4602      	mov	r2, r0
 8008120:	460b      	mov	r3, r1
 8008122:	4611      	mov	r1, r2
 8008124:	4b38      	ldr	r3, [pc, #224]	@ (8008208 <UART_SetConfig+0x4e4>)
 8008126:	fba3 2301 	umull	r2, r3, r3, r1
 800812a:	095b      	lsrs	r3, r3, #5
 800812c:	2264      	movs	r2, #100	@ 0x64
 800812e:	fb02 f303 	mul.w	r3, r2, r3
 8008132:	1acb      	subs	r3, r1, r3
 8008134:	011b      	lsls	r3, r3, #4
 8008136:	3332      	adds	r3, #50	@ 0x32
 8008138:	4a33      	ldr	r2, [pc, #204]	@ (8008208 <UART_SetConfig+0x4e4>)
 800813a:	fba2 2303 	umull	r2, r3, r2, r3
 800813e:	095b      	lsrs	r3, r3, #5
 8008140:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008144:	441c      	add	r4, r3
 8008146:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800814a:	2200      	movs	r2, #0
 800814c:	673b      	str	r3, [r7, #112]	@ 0x70
 800814e:	677a      	str	r2, [r7, #116]	@ 0x74
 8008150:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008154:	4642      	mov	r2, r8
 8008156:	464b      	mov	r3, r9
 8008158:	1891      	adds	r1, r2, r2
 800815a:	60b9      	str	r1, [r7, #8]
 800815c:	415b      	adcs	r3, r3
 800815e:	60fb      	str	r3, [r7, #12]
 8008160:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008164:	4641      	mov	r1, r8
 8008166:	1851      	adds	r1, r2, r1
 8008168:	6039      	str	r1, [r7, #0]
 800816a:	4649      	mov	r1, r9
 800816c:	414b      	adcs	r3, r1
 800816e:	607b      	str	r3, [r7, #4]
 8008170:	f04f 0200 	mov.w	r2, #0
 8008174:	f04f 0300 	mov.w	r3, #0
 8008178:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800817c:	4659      	mov	r1, fp
 800817e:	00cb      	lsls	r3, r1, #3
 8008180:	4651      	mov	r1, sl
 8008182:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008186:	4651      	mov	r1, sl
 8008188:	00ca      	lsls	r2, r1, #3
 800818a:	4610      	mov	r0, r2
 800818c:	4619      	mov	r1, r3
 800818e:	4603      	mov	r3, r0
 8008190:	4642      	mov	r2, r8
 8008192:	189b      	adds	r3, r3, r2
 8008194:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008196:	464b      	mov	r3, r9
 8008198:	460a      	mov	r2, r1
 800819a:	eb42 0303 	adc.w	r3, r2, r3
 800819e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80081a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081a4:	685b      	ldr	r3, [r3, #4]
 80081a6:	2200      	movs	r2, #0
 80081a8:	663b      	str	r3, [r7, #96]	@ 0x60
 80081aa:	667a      	str	r2, [r7, #100]	@ 0x64
 80081ac:	f04f 0200 	mov.w	r2, #0
 80081b0:	f04f 0300 	mov.w	r3, #0
 80081b4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80081b8:	4649      	mov	r1, r9
 80081ba:	008b      	lsls	r3, r1, #2
 80081bc:	4641      	mov	r1, r8
 80081be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80081c2:	4641      	mov	r1, r8
 80081c4:	008a      	lsls	r2, r1, #2
 80081c6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80081ca:	f7f8 fd6d 	bl	8000ca8 <__aeabi_uldivmod>
 80081ce:	4602      	mov	r2, r0
 80081d0:	460b      	mov	r3, r1
 80081d2:	4b0d      	ldr	r3, [pc, #52]	@ (8008208 <UART_SetConfig+0x4e4>)
 80081d4:	fba3 1302 	umull	r1, r3, r3, r2
 80081d8:	095b      	lsrs	r3, r3, #5
 80081da:	2164      	movs	r1, #100	@ 0x64
 80081dc:	fb01 f303 	mul.w	r3, r1, r3
 80081e0:	1ad3      	subs	r3, r2, r3
 80081e2:	011b      	lsls	r3, r3, #4
 80081e4:	3332      	adds	r3, #50	@ 0x32
 80081e6:	4a08      	ldr	r2, [pc, #32]	@ (8008208 <UART_SetConfig+0x4e4>)
 80081e8:	fba2 2303 	umull	r2, r3, r2, r3
 80081ec:	095b      	lsrs	r3, r3, #5
 80081ee:	f003 020f 	and.w	r2, r3, #15
 80081f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	4422      	add	r2, r4
 80081fa:	609a      	str	r2, [r3, #8]
}
 80081fc:	bf00      	nop
 80081fe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008202:	46bd      	mov	sp, r7
 8008204:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008208:	51eb851f 	.word	0x51eb851f

0800820c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800820c:	b480      	push	{r7}
 800820e:	b085      	sub	sp, #20
 8008210:	af00      	add	r7, sp, #0
 8008212:	4603      	mov	r3, r0
 8008214:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008216:	2300      	movs	r3, #0
 8008218:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800821a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800821e:	2b84      	cmp	r3, #132	@ 0x84
 8008220:	d005      	beq.n	800822e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008222:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	4413      	add	r3, r2
 800822a:	3303      	adds	r3, #3
 800822c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800822e:	68fb      	ldr	r3, [r7, #12]
}
 8008230:	4618      	mov	r0, r3
 8008232:	3714      	adds	r7, #20
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr

0800823c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800823c:	b480      	push	{r7}
 800823e:	b083      	sub	sp, #12
 8008240:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008242:	f3ef 8305 	mrs	r3, IPSR
 8008246:	607b      	str	r3, [r7, #4]
  return(result);
 8008248:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800824a:	2b00      	cmp	r3, #0
 800824c:	bf14      	ite	ne
 800824e:	2301      	movne	r3, #1
 8008250:	2300      	moveq	r3, #0
 8008252:	b2db      	uxtb	r3, r3
}
 8008254:	4618      	mov	r0, r3
 8008256:	370c      	adds	r7, #12
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr

08008260 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008264:	f000 fcae 	bl	8008bc4 <vTaskStartScheduler>
  
  return osOK;
 8008268:	2300      	movs	r3, #0
}
 800826a:	4618      	mov	r0, r3
 800826c:	bd80      	pop	{r7, pc}

0800826e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800826e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008270:	b089      	sub	sp, #36	@ 0x24
 8008272:	af04      	add	r7, sp, #16
 8008274:	6078      	str	r0, [r7, #4]
 8008276:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	695b      	ldr	r3, [r3, #20]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d020      	beq.n	80082c2 <osThreadCreate+0x54>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	699b      	ldr	r3, [r3, #24]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d01c      	beq.n	80082c2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	685c      	ldr	r4, [r3, #4]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	691e      	ldr	r6, [r3, #16]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800829a:	4618      	mov	r0, r3
 800829c:	f7ff ffb6 	bl	800820c <makeFreeRtosPriority>
 80082a0:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	695b      	ldr	r3, [r3, #20]
 80082a6:	687a      	ldr	r2, [r7, #4]
 80082a8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80082aa:	9202      	str	r2, [sp, #8]
 80082ac:	9301      	str	r3, [sp, #4]
 80082ae:	9100      	str	r1, [sp, #0]
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	4632      	mov	r2, r6
 80082b4:	4629      	mov	r1, r5
 80082b6:	4620      	mov	r0, r4
 80082b8:	f000 f97a 	bl	80085b0 <xTaskCreateStatic>
 80082bc:	4603      	mov	r3, r0
 80082be:	60fb      	str	r3, [r7, #12]
 80082c0:	e01c      	b.n	80082fc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	685c      	ldr	r4, [r3, #4]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80082ce:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80082d6:	4618      	mov	r0, r3
 80082d8:	f7ff ff98 	bl	800820c <makeFreeRtosPriority>
 80082dc:	4602      	mov	r2, r0
 80082de:	f107 030c 	add.w	r3, r7, #12
 80082e2:	9301      	str	r3, [sp, #4]
 80082e4:	9200      	str	r2, [sp, #0]
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	4632      	mov	r2, r6
 80082ea:	4629      	mov	r1, r5
 80082ec:	4620      	mov	r0, r4
 80082ee:	f000 f9bf 	bl	8008670 <xTaskCreate>
 80082f2:	4603      	mov	r3, r0
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	d001      	beq.n	80082fc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80082f8:	2300      	movs	r3, #0
 80082fa:	e000      	b.n	80082fe <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80082fc:	68fb      	ldr	r3, [r7, #12]
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3714      	adds	r7, #20
 8008302:	46bd      	mov	sp, r7
 8008304:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008306 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008306:	b580      	push	{r7, lr}
 8008308:	b084      	sub	sp, #16
 800830a:	af00      	add	r7, sp, #0
 800830c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d001      	beq.n	800831c <osDelay+0x16>
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	e000      	b.n	800831e <osDelay+0x18>
 800831c:	2301      	movs	r3, #1
 800831e:	4618      	mov	r0, r3
 8008320:	f000 faf6 	bl	8008910 <vTaskDelay>
  
  return osOK;
 8008324:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008326:	4618      	mov	r0, r3
 8008328:	3710      	adds	r7, #16
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}
	...

08008330 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b086      	sub	sp, #24
 8008334:	af02      	add	r7, sp, #8
 8008336:	6078      	str	r0, [r7, #4]
 8008338:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800833a:	2300      	movs	r3, #0
 800833c:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 800833e:	2300      	movs	r3, #0
 8008340:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 8008342:	f7ff ff7b 	bl	800823c <inHandlerMode>
 8008346:	4603      	mov	r3, r0
 8008348:	2b00      	cmp	r3, #0
 800834a:	d01c      	beq.n	8008386 <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 800834c:	6839      	ldr	r1, [r7, #0]
 800834e:	f107 0208 	add.w	r2, r7, #8
 8008352:	f107 030c 	add.w	r3, r7, #12
 8008356:	9300      	str	r3, [sp, #0]
 8008358:	4613      	mov	r3, r2
 800835a:	2201      	movs	r2, #1
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f001 f88b 	bl	8009478 <xTaskGenericNotifyFromISR>
 8008362:	4603      	mov	r3, r0
 8008364:	2b01      	cmp	r3, #1
 8008366:	d002      	beq.n	800836e <osSignalSet+0x3e>
      return 0x80000000;
 8008368:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800836c:	e019      	b.n	80083a2 <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d015      	beq.n	80083a0 <osSignalSet+0x70>
 8008374:	4b0d      	ldr	r3, [pc, #52]	@ (80083ac <osSignalSet+0x7c>)
 8008376:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800837a:	601a      	str	r2, [r3, #0]
 800837c:	f3bf 8f4f 	dsb	sy
 8008380:	f3bf 8f6f 	isb	sy
 8008384:	e00c      	b.n	80083a0 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 8008386:	6839      	ldr	r1, [r7, #0]
 8008388:	f107 0308 	add.w	r3, r7, #8
 800838c:	2201      	movs	r2, #1
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f000 ffb0 	bl	80092f4 <xTaskGenericNotify>
 8008394:	4603      	mov	r3, r0
 8008396:	2b01      	cmp	r3, #1
 8008398:	d002      	beq.n	80083a0 <osSignalSet+0x70>
    return 0x80000000;
 800839a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800839e:	e000      	b.n	80083a2 <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 80083a0:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3710      	adds	r7, #16
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}
 80083aa:	bf00      	nop
 80083ac:	e000ed04 	.word	0xe000ed04

080083b0 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 80083b0:	b590      	push	{r4, r7, lr}
 80083b2:	b089      	sub	sp, #36	@ 0x24
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	60f8      	str	r0, [r7, #12]
 80083b8:	60b9      	str	r1, [r7, #8]
 80083ba:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 80083bc:	2300      	movs	r3, #0
 80083be:	617b      	str	r3, [r7, #20]
  ticks = 0;
 80083c0:	2300      	movs	r3, #0
 80083c2:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80083ca:	d103      	bne.n	80083d4 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 80083cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80083d0:	61fb      	str	r3, [r7, #28]
 80083d2:	e009      	b.n	80083e8 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d006      	beq.n	80083e8 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 80083de:	69fb      	ldr	r3, [r7, #28]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d101      	bne.n	80083e8 <osSignalWait+0x38>
      ticks = 1;
 80083e4:	2301      	movs	r3, #1
 80083e6:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 80083e8:	f7ff ff28 	bl	800823c <inHandlerMode>
 80083ec:	4603      	mov	r3, r0
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d002      	beq.n	80083f8 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 80083f2:	2382      	movs	r3, #130	@ 0x82
 80083f4:	613b      	str	r3, [r7, #16]
 80083f6:	e01b      	b.n	8008430 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 80083f8:	68b9      	ldr	r1, [r7, #8]
 80083fa:	f107 0310 	add.w	r3, r7, #16
 80083fe:	1d1a      	adds	r2, r3, #4
 8008400:	69fb      	ldr	r3, [r7, #28]
 8008402:	2000      	movs	r0, #0
 8008404:	f000 ff16 	bl	8009234 <xTaskNotifyWait>
 8008408:	4603      	mov	r3, r0
 800840a:	2b01      	cmp	r3, #1
 800840c:	d008      	beq.n	8008420 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 800840e:	69fb      	ldr	r3, [r7, #28]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d102      	bne.n	800841a <osSignalWait+0x6a>
 8008414:	2300      	movs	r3, #0
 8008416:	613b      	str	r3, [r7, #16]
 8008418:	e00a      	b.n	8008430 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 800841a:	2340      	movs	r3, #64	@ 0x40
 800841c:	613b      	str	r3, [r7, #16]
 800841e:	e007      	b.n	8008430 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	2b00      	cmp	r3, #0
 8008424:	da02      	bge.n	800842c <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 8008426:	2386      	movs	r3, #134	@ 0x86
 8008428:	613b      	str	r3, [r7, #16]
 800842a:	e001      	b.n	8008430 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 800842c:	2308      	movs	r3, #8
 800842e:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	461c      	mov	r4, r3
 8008434:	f107 0310 	add.w	r3, r7, #16
 8008438:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800843c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8008440:	68f8      	ldr	r0, [r7, #12]
 8008442:	3724      	adds	r7, #36	@ 0x24
 8008444:	46bd      	mov	sp, r7
 8008446:	bd90      	pop	{r4, r7, pc}

08008448 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008448:	b480      	push	{r7}
 800844a:	b083      	sub	sp, #12
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f103 0208 	add.w	r2, r3, #8
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008460:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f103 0208 	add.w	r2, r3, #8
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f103 0208 	add.w	r2, r3, #8
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2200      	movs	r2, #0
 800847a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800847c:	bf00      	nop
 800847e:	370c      	adds	r7, #12
 8008480:	46bd      	mov	sp, r7
 8008482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008486:	4770      	bx	lr

08008488 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008488:	b480      	push	{r7}
 800848a:	b083      	sub	sp, #12
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2200      	movs	r2, #0
 8008494:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008496:	bf00      	nop
 8008498:	370c      	adds	r7, #12
 800849a:	46bd      	mov	sp, r7
 800849c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a0:	4770      	bx	lr

080084a2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80084a2:	b480      	push	{r7}
 80084a4:	b085      	sub	sp, #20
 80084a6:	af00      	add	r7, sp, #0
 80084a8:	6078      	str	r0, [r7, #4]
 80084aa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	685b      	ldr	r3, [r3, #4]
 80084b0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	68fa      	ldr	r2, [r7, #12]
 80084b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	689a      	ldr	r2, [r3, #8]
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	689b      	ldr	r3, [r3, #8]
 80084c4:	683a      	ldr	r2, [r7, #0]
 80084c6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	683a      	ldr	r2, [r7, #0]
 80084cc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	687a      	ldr	r2, [r7, #4]
 80084d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	1c5a      	adds	r2, r3, #1
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	601a      	str	r2, [r3, #0]
}
 80084de:	bf00      	nop
 80084e0:	3714      	adds	r7, #20
 80084e2:	46bd      	mov	sp, r7
 80084e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e8:	4770      	bx	lr

080084ea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80084ea:	b480      	push	{r7}
 80084ec:	b085      	sub	sp, #20
 80084ee:	af00      	add	r7, sp, #0
 80084f0:	6078      	str	r0, [r7, #4]
 80084f2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008500:	d103      	bne.n	800850a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	691b      	ldr	r3, [r3, #16]
 8008506:	60fb      	str	r3, [r7, #12]
 8008508:	e00c      	b.n	8008524 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	3308      	adds	r3, #8
 800850e:	60fb      	str	r3, [r7, #12]
 8008510:	e002      	b.n	8008518 <vListInsert+0x2e>
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	685b      	ldr	r3, [r3, #4]
 8008516:	60fb      	str	r3, [r7, #12]
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	685b      	ldr	r3, [r3, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	68ba      	ldr	r2, [r7, #8]
 8008520:	429a      	cmp	r2, r3
 8008522:	d2f6      	bcs.n	8008512 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	685a      	ldr	r2, [r3, #4]
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	685b      	ldr	r3, [r3, #4]
 8008530:	683a      	ldr	r2, [r7, #0]
 8008532:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	68fa      	ldr	r2, [r7, #12]
 8008538:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	683a      	ldr	r2, [r7, #0]
 800853e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	687a      	ldr	r2, [r7, #4]
 8008544:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	1c5a      	adds	r2, r3, #1
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	601a      	str	r2, [r3, #0]
}
 8008550:	bf00      	nop
 8008552:	3714      	adds	r7, #20
 8008554:	46bd      	mov	sp, r7
 8008556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855a:	4770      	bx	lr

0800855c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800855c:	b480      	push	{r7}
 800855e:	b085      	sub	sp, #20
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	691b      	ldr	r3, [r3, #16]
 8008568:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	687a      	ldr	r2, [r7, #4]
 8008570:	6892      	ldr	r2, [r2, #8]
 8008572:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	689b      	ldr	r3, [r3, #8]
 8008578:	687a      	ldr	r2, [r7, #4]
 800857a:	6852      	ldr	r2, [r2, #4]
 800857c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	685b      	ldr	r3, [r3, #4]
 8008582:	687a      	ldr	r2, [r7, #4]
 8008584:	429a      	cmp	r2, r3
 8008586:	d103      	bne.n	8008590 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	689a      	ldr	r2, [r3, #8]
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2200      	movs	r2, #0
 8008594:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	1e5a      	subs	r2, r3, #1
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3714      	adds	r7, #20
 80085a8:	46bd      	mov	sp, r7
 80085aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ae:	4770      	bx	lr

080085b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b08e      	sub	sp, #56	@ 0x38
 80085b4:	af04      	add	r7, sp, #16
 80085b6:	60f8      	str	r0, [r7, #12]
 80085b8:	60b9      	str	r1, [r7, #8]
 80085ba:	607a      	str	r2, [r7, #4]
 80085bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80085be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d10b      	bne.n	80085dc <xTaskCreateStatic+0x2c>
	__asm volatile
 80085c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085c8:	f383 8811 	msr	BASEPRI, r3
 80085cc:	f3bf 8f6f 	isb	sy
 80085d0:	f3bf 8f4f 	dsb	sy
 80085d4:	623b      	str	r3, [r7, #32]
}
 80085d6:	bf00      	nop
 80085d8:	bf00      	nop
 80085da:	e7fd      	b.n	80085d8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80085dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d10b      	bne.n	80085fa <xTaskCreateStatic+0x4a>
	__asm volatile
 80085e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085e6:	f383 8811 	msr	BASEPRI, r3
 80085ea:	f3bf 8f6f 	isb	sy
 80085ee:	f3bf 8f4f 	dsb	sy
 80085f2:	61fb      	str	r3, [r7, #28]
}
 80085f4:	bf00      	nop
 80085f6:	bf00      	nop
 80085f8:	e7fd      	b.n	80085f6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80085fa:	23a0      	movs	r3, #160	@ 0xa0
 80085fc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80085fe:	693b      	ldr	r3, [r7, #16]
 8008600:	2ba0      	cmp	r3, #160	@ 0xa0
 8008602:	d00b      	beq.n	800861c <xTaskCreateStatic+0x6c>
	__asm volatile
 8008604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008608:	f383 8811 	msr	BASEPRI, r3
 800860c:	f3bf 8f6f 	isb	sy
 8008610:	f3bf 8f4f 	dsb	sy
 8008614:	61bb      	str	r3, [r7, #24]
}
 8008616:	bf00      	nop
 8008618:	bf00      	nop
 800861a:	e7fd      	b.n	8008618 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800861c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800861e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008620:	2b00      	cmp	r3, #0
 8008622:	d01e      	beq.n	8008662 <xTaskCreateStatic+0xb2>
 8008624:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008626:	2b00      	cmp	r3, #0
 8008628:	d01b      	beq.n	8008662 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800862a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800862c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800862e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008630:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008632:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008636:	2202      	movs	r2, #2
 8008638:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800863c:	2300      	movs	r3, #0
 800863e:	9303      	str	r3, [sp, #12]
 8008640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008642:	9302      	str	r3, [sp, #8]
 8008644:	f107 0314 	add.w	r3, r7, #20
 8008648:	9301      	str	r3, [sp, #4]
 800864a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800864c:	9300      	str	r3, [sp, #0]
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	687a      	ldr	r2, [r7, #4]
 8008652:	68b9      	ldr	r1, [r7, #8]
 8008654:	68f8      	ldr	r0, [r7, #12]
 8008656:	f000 f851 	bl	80086fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800865a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800865c:	f000 f8ee 	bl	800883c <prvAddNewTaskToReadyList>
 8008660:	e001      	b.n	8008666 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008662:	2300      	movs	r3, #0
 8008664:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008666:	697b      	ldr	r3, [r7, #20]
	}
 8008668:	4618      	mov	r0, r3
 800866a:	3728      	adds	r7, #40	@ 0x28
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}

08008670 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008670:	b580      	push	{r7, lr}
 8008672:	b08c      	sub	sp, #48	@ 0x30
 8008674:	af04      	add	r7, sp, #16
 8008676:	60f8      	str	r0, [r7, #12]
 8008678:	60b9      	str	r1, [r7, #8]
 800867a:	603b      	str	r3, [r7, #0]
 800867c:	4613      	mov	r3, r2
 800867e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008680:	88fb      	ldrh	r3, [r7, #6]
 8008682:	009b      	lsls	r3, r3, #2
 8008684:	4618      	mov	r0, r3
 8008686:	f001 fa99 	bl	8009bbc <pvPortMalloc>
 800868a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d00e      	beq.n	80086b0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008692:	20a0      	movs	r0, #160	@ 0xa0
 8008694:	f001 fa92 	bl	8009bbc <pvPortMalloc>
 8008698:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800869a:	69fb      	ldr	r3, [r7, #28]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d003      	beq.n	80086a8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80086a0:	69fb      	ldr	r3, [r7, #28]
 80086a2:	697a      	ldr	r2, [r7, #20]
 80086a4:	631a      	str	r2, [r3, #48]	@ 0x30
 80086a6:	e005      	b.n	80086b4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80086a8:	6978      	ldr	r0, [r7, #20]
 80086aa:	f001 fb55 	bl	8009d58 <vPortFree>
 80086ae:	e001      	b.n	80086b4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80086b0:	2300      	movs	r3, #0
 80086b2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80086b4:	69fb      	ldr	r3, [r7, #28]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d017      	beq.n	80086ea <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80086ba:	69fb      	ldr	r3, [r7, #28]
 80086bc:	2200      	movs	r2, #0
 80086be:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80086c2:	88fa      	ldrh	r2, [r7, #6]
 80086c4:	2300      	movs	r3, #0
 80086c6:	9303      	str	r3, [sp, #12]
 80086c8:	69fb      	ldr	r3, [r7, #28]
 80086ca:	9302      	str	r3, [sp, #8]
 80086cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086ce:	9301      	str	r3, [sp, #4]
 80086d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086d2:	9300      	str	r3, [sp, #0]
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	68b9      	ldr	r1, [r7, #8]
 80086d8:	68f8      	ldr	r0, [r7, #12]
 80086da:	f000 f80f 	bl	80086fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80086de:	69f8      	ldr	r0, [r7, #28]
 80086e0:	f000 f8ac 	bl	800883c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80086e4:	2301      	movs	r3, #1
 80086e6:	61bb      	str	r3, [r7, #24]
 80086e8:	e002      	b.n	80086f0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80086ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80086ee:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80086f0:	69bb      	ldr	r3, [r7, #24]
	}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3720      	adds	r7, #32
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}
	...

080086fc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b088      	sub	sp, #32
 8008700:	af00      	add	r7, sp, #0
 8008702:	60f8      	str	r0, [r7, #12]
 8008704:	60b9      	str	r1, [r7, #8]
 8008706:	607a      	str	r2, [r7, #4]
 8008708:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800870a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800870c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008714:	3b01      	subs	r3, #1
 8008716:	009b      	lsls	r3, r3, #2
 8008718:	4413      	add	r3, r2
 800871a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800871c:	69bb      	ldr	r3, [r7, #24]
 800871e:	f023 0307 	bic.w	r3, r3, #7
 8008722:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008724:	69bb      	ldr	r3, [r7, #24]
 8008726:	f003 0307 	and.w	r3, r3, #7
 800872a:	2b00      	cmp	r3, #0
 800872c:	d00b      	beq.n	8008746 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800872e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008732:	f383 8811 	msr	BASEPRI, r3
 8008736:	f3bf 8f6f 	isb	sy
 800873a:	f3bf 8f4f 	dsb	sy
 800873e:	617b      	str	r3, [r7, #20]
}
 8008740:	bf00      	nop
 8008742:	bf00      	nop
 8008744:	e7fd      	b.n	8008742 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d01f      	beq.n	800878c <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800874c:	2300      	movs	r3, #0
 800874e:	61fb      	str	r3, [r7, #28]
 8008750:	e012      	b.n	8008778 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008752:	68ba      	ldr	r2, [r7, #8]
 8008754:	69fb      	ldr	r3, [r7, #28]
 8008756:	4413      	add	r3, r2
 8008758:	7819      	ldrb	r1, [r3, #0]
 800875a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800875c:	69fb      	ldr	r3, [r7, #28]
 800875e:	4413      	add	r3, r2
 8008760:	3334      	adds	r3, #52	@ 0x34
 8008762:	460a      	mov	r2, r1
 8008764:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008766:	68ba      	ldr	r2, [r7, #8]
 8008768:	69fb      	ldr	r3, [r7, #28]
 800876a:	4413      	add	r3, r2
 800876c:	781b      	ldrb	r3, [r3, #0]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d006      	beq.n	8008780 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008772:	69fb      	ldr	r3, [r7, #28]
 8008774:	3301      	adds	r3, #1
 8008776:	61fb      	str	r3, [r7, #28]
 8008778:	69fb      	ldr	r3, [r7, #28]
 800877a:	2b0f      	cmp	r3, #15
 800877c:	d9e9      	bls.n	8008752 <prvInitialiseNewTask+0x56>
 800877e:	e000      	b.n	8008782 <prvInitialiseNewTask+0x86>
			{
				break;
 8008780:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008784:	2200      	movs	r2, #0
 8008786:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800878a:	e003      	b.n	8008794 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800878c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800878e:	2200      	movs	r2, #0
 8008790:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008796:	2b06      	cmp	r3, #6
 8008798:	d901      	bls.n	800879e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800879a:	2306      	movs	r3, #6
 800879c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800879e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80087a2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80087a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80087a8:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80087aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087ac:	2200      	movs	r2, #0
 80087ae:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80087b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087b2:	3304      	adds	r3, #4
 80087b4:	4618      	mov	r0, r3
 80087b6:	f7ff fe67 	bl	8008488 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80087ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087bc:	3318      	adds	r3, #24
 80087be:	4618      	mov	r0, r3
 80087c0:	f7ff fe62 	bl	8008488 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80087c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087c8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087cc:	f1c3 0207 	rsb	r2, r3, #7
 80087d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087d2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80087d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087d8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80087da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087dc:	2200      	movs	r2, #0
 80087de:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80087e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087e4:	2200      	movs	r2, #0
 80087e6:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80087ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087ec:	334c      	adds	r3, #76	@ 0x4c
 80087ee:	224c      	movs	r2, #76	@ 0x4c
 80087f0:	2100      	movs	r1, #0
 80087f2:	4618      	mov	r0, r3
 80087f4:	f00f fa18 	bl	8017c28 <memset>
 80087f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087fa:	4a0d      	ldr	r2, [pc, #52]	@ (8008830 <prvInitialiseNewTask+0x134>)
 80087fc:	651a      	str	r2, [r3, #80]	@ 0x50
 80087fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008800:	4a0c      	ldr	r2, [pc, #48]	@ (8008834 <prvInitialiseNewTask+0x138>)
 8008802:	655a      	str	r2, [r3, #84]	@ 0x54
 8008804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008806:	4a0c      	ldr	r2, [pc, #48]	@ (8008838 <prvInitialiseNewTask+0x13c>)
 8008808:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800880a:	683a      	ldr	r2, [r7, #0]
 800880c:	68f9      	ldr	r1, [r7, #12]
 800880e:	69b8      	ldr	r0, [r7, #24]
 8008810:	f000 ff7e 	bl	8009710 <pxPortInitialiseStack>
 8008814:	4602      	mov	r2, r0
 8008816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008818:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800881a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800881c:	2b00      	cmp	r3, #0
 800881e:	d002      	beq.n	8008826 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008822:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008824:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008826:	bf00      	nop
 8008828:	3720      	adds	r7, #32
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}
 800882e:	bf00      	nop
 8008830:	20010c94 	.word	0x20010c94
 8008834:	20010cfc 	.word	0x20010cfc
 8008838:	20010d64 	.word	0x20010d64

0800883c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b082      	sub	sp, #8
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008844:	f001 f898 	bl	8009978 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008848:	4b2a      	ldr	r3, [pc, #168]	@ (80088f4 <prvAddNewTaskToReadyList+0xb8>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	3301      	adds	r3, #1
 800884e:	4a29      	ldr	r2, [pc, #164]	@ (80088f4 <prvAddNewTaskToReadyList+0xb8>)
 8008850:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008852:	4b29      	ldr	r3, [pc, #164]	@ (80088f8 <prvAddNewTaskToReadyList+0xbc>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d109      	bne.n	800886e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800885a:	4a27      	ldr	r2, [pc, #156]	@ (80088f8 <prvAddNewTaskToReadyList+0xbc>)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008860:	4b24      	ldr	r3, [pc, #144]	@ (80088f4 <prvAddNewTaskToReadyList+0xb8>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	2b01      	cmp	r3, #1
 8008866:	d110      	bne.n	800888a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008868:	f000 fc20 	bl	80090ac <prvInitialiseTaskLists>
 800886c:	e00d      	b.n	800888a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800886e:	4b23      	ldr	r3, [pc, #140]	@ (80088fc <prvAddNewTaskToReadyList+0xc0>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d109      	bne.n	800888a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008876:	4b20      	ldr	r3, [pc, #128]	@ (80088f8 <prvAddNewTaskToReadyList+0xbc>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008880:	429a      	cmp	r2, r3
 8008882:	d802      	bhi.n	800888a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008884:	4a1c      	ldr	r2, [pc, #112]	@ (80088f8 <prvAddNewTaskToReadyList+0xbc>)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800888a:	4b1d      	ldr	r3, [pc, #116]	@ (8008900 <prvAddNewTaskToReadyList+0xc4>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	3301      	adds	r3, #1
 8008890:	4a1b      	ldr	r2, [pc, #108]	@ (8008900 <prvAddNewTaskToReadyList+0xc4>)
 8008892:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008898:	2201      	movs	r2, #1
 800889a:	409a      	lsls	r2, r3
 800889c:	4b19      	ldr	r3, [pc, #100]	@ (8008904 <prvAddNewTaskToReadyList+0xc8>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	4313      	orrs	r3, r2
 80088a2:	4a18      	ldr	r2, [pc, #96]	@ (8008904 <prvAddNewTaskToReadyList+0xc8>)
 80088a4:	6013      	str	r3, [r2, #0]
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088aa:	4613      	mov	r3, r2
 80088ac:	009b      	lsls	r3, r3, #2
 80088ae:	4413      	add	r3, r2
 80088b0:	009b      	lsls	r3, r3, #2
 80088b2:	4a15      	ldr	r2, [pc, #84]	@ (8008908 <prvAddNewTaskToReadyList+0xcc>)
 80088b4:	441a      	add	r2, r3
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	3304      	adds	r3, #4
 80088ba:	4619      	mov	r1, r3
 80088bc:	4610      	mov	r0, r2
 80088be:	f7ff fdf0 	bl	80084a2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80088c2:	f001 f88b 	bl	80099dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80088c6:	4b0d      	ldr	r3, [pc, #52]	@ (80088fc <prvAddNewTaskToReadyList+0xc0>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d00e      	beq.n	80088ec <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80088ce:	4b0a      	ldr	r3, [pc, #40]	@ (80088f8 <prvAddNewTaskToReadyList+0xbc>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088d8:	429a      	cmp	r2, r3
 80088da:	d207      	bcs.n	80088ec <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80088dc:	4b0b      	ldr	r3, [pc, #44]	@ (800890c <prvAddNewTaskToReadyList+0xd0>)
 80088de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80088e2:	601a      	str	r2, [r3, #0]
 80088e4:	f3bf 8f4f 	dsb	sy
 80088e8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80088ec:	bf00      	nop
 80088ee:	3708      	adds	r7, #8
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}
 80088f4:	200084bc 	.word	0x200084bc
 80088f8:	200083bc 	.word	0x200083bc
 80088fc:	200084c8 	.word	0x200084c8
 8008900:	200084d8 	.word	0x200084d8
 8008904:	200084c4 	.word	0x200084c4
 8008908:	200083c0 	.word	0x200083c0
 800890c:	e000ed04 	.word	0xe000ed04

08008910 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008910:	b580      	push	{r7, lr}
 8008912:	b084      	sub	sp, #16
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008918:	2300      	movs	r3, #0
 800891a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d018      	beq.n	8008954 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008922:	4b14      	ldr	r3, [pc, #80]	@ (8008974 <vTaskDelay+0x64>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d00b      	beq.n	8008942 <vTaskDelay+0x32>
	__asm volatile
 800892a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800892e:	f383 8811 	msr	BASEPRI, r3
 8008932:	f3bf 8f6f 	isb	sy
 8008936:	f3bf 8f4f 	dsb	sy
 800893a:	60bb      	str	r3, [r7, #8]
}
 800893c:	bf00      	nop
 800893e:	bf00      	nop
 8008940:	e7fd      	b.n	800893e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008942:	f000 f9a9 	bl	8008c98 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008946:	2100      	movs	r1, #0
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f000 fe7b 	bl	8009644 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800894e:	f000 f9b1 	bl	8008cb4 <xTaskResumeAll>
 8008952:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d107      	bne.n	800896a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800895a:	4b07      	ldr	r3, [pc, #28]	@ (8008978 <vTaskDelay+0x68>)
 800895c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008960:	601a      	str	r2, [r3, #0]
 8008962:	f3bf 8f4f 	dsb	sy
 8008966:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800896a:	bf00      	nop
 800896c:	3710      	adds	r7, #16
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}
 8008972:	bf00      	nop
 8008974:	200084e4 	.word	0x200084e4
 8008978:	e000ed04 	.word	0xe000ed04

0800897c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800897c:	b580      	push	{r7, lr}
 800897e:	b084      	sub	sp, #16
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8008984:	f000 fff8 	bl	8009978 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d102      	bne.n	8008994 <vTaskSuspend+0x18>
 800898e:	4b3d      	ldr	r3, [pc, #244]	@ (8008a84 <vTaskSuspend+0x108>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	e000      	b.n	8008996 <vTaskSuspend+0x1a>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	3304      	adds	r3, #4
 800899c:	4618      	mov	r0, r3
 800899e:	f7ff fddd 	bl	800855c <uxListRemove>
 80089a2:	4603      	mov	r3, r0
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d115      	bne.n	80089d4 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089ac:	4936      	ldr	r1, [pc, #216]	@ (8008a88 <vTaskSuspend+0x10c>)
 80089ae:	4613      	mov	r3, r2
 80089b0:	009b      	lsls	r3, r3, #2
 80089b2:	4413      	add	r3, r2
 80089b4:	009b      	lsls	r3, r3, #2
 80089b6:	440b      	add	r3, r1
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d10a      	bne.n	80089d4 <vTaskSuspend+0x58>
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089c2:	2201      	movs	r2, #1
 80089c4:	fa02 f303 	lsl.w	r3, r2, r3
 80089c8:	43da      	mvns	r2, r3
 80089ca:	4b30      	ldr	r3, [pc, #192]	@ (8008a8c <vTaskSuspend+0x110>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	4013      	ands	r3, r2
 80089d0:	4a2e      	ldr	r2, [pc, #184]	@ (8008a8c <vTaskSuspend+0x110>)
 80089d2:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d004      	beq.n	80089e6 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	3318      	adds	r3, #24
 80089e0:	4618      	mov	r0, r3
 80089e2:	f7ff fdbb 	bl	800855c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	3304      	adds	r3, #4
 80089ea:	4619      	mov	r1, r3
 80089ec:	4828      	ldr	r0, [pc, #160]	@ (8008a90 <vTaskSuspend+0x114>)
 80089ee:	f7ff fd58 	bl	80084a2 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 80089f8:	b2db      	uxtb	r3, r3
 80089fa:	2b01      	cmp	r3, #1
 80089fc:	d103      	bne.n	8008a06 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	2200      	movs	r2, #0
 8008a02:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8008a06:	f000 ffe9 	bl	80099dc <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8008a0a:	4b22      	ldr	r3, [pc, #136]	@ (8008a94 <vTaskSuspend+0x118>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d005      	beq.n	8008a1e <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8008a12:	f000 ffb1 	bl	8009978 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8008a16:	f000 fbed 	bl	80091f4 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8008a1a:	f000 ffdf 	bl	80099dc <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8008a1e:	4b19      	ldr	r3, [pc, #100]	@ (8008a84 <vTaskSuspend+0x108>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	68fa      	ldr	r2, [r7, #12]
 8008a24:	429a      	cmp	r2, r3
 8008a26:	d128      	bne.n	8008a7a <vTaskSuspend+0xfe>
		{
			if( xSchedulerRunning != pdFALSE )
 8008a28:	4b1a      	ldr	r3, [pc, #104]	@ (8008a94 <vTaskSuspend+0x118>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d018      	beq.n	8008a62 <vTaskSuspend+0xe6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8008a30:	4b19      	ldr	r3, [pc, #100]	@ (8008a98 <vTaskSuspend+0x11c>)
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d00b      	beq.n	8008a50 <vTaskSuspend+0xd4>
	__asm volatile
 8008a38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a3c:	f383 8811 	msr	BASEPRI, r3
 8008a40:	f3bf 8f6f 	isb	sy
 8008a44:	f3bf 8f4f 	dsb	sy
 8008a48:	60bb      	str	r3, [r7, #8]
}
 8008a4a:	bf00      	nop
 8008a4c:	bf00      	nop
 8008a4e:	e7fd      	b.n	8008a4c <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8008a50:	4b12      	ldr	r3, [pc, #72]	@ (8008a9c <vTaskSuspend+0x120>)
 8008a52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a56:	601a      	str	r2, [r3, #0]
 8008a58:	f3bf 8f4f 	dsb	sy
 8008a5c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008a60:	e00b      	b.n	8008a7a <vTaskSuspend+0xfe>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8008a62:	4b0b      	ldr	r3, [pc, #44]	@ (8008a90 <vTaskSuspend+0x114>)
 8008a64:	681a      	ldr	r2, [r3, #0]
 8008a66:	4b0e      	ldr	r3, [pc, #56]	@ (8008aa0 <vTaskSuspend+0x124>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	429a      	cmp	r2, r3
 8008a6c:	d103      	bne.n	8008a76 <vTaskSuspend+0xfa>
					pxCurrentTCB = NULL;
 8008a6e:	4b05      	ldr	r3, [pc, #20]	@ (8008a84 <vTaskSuspend+0x108>)
 8008a70:	2200      	movs	r2, #0
 8008a72:	601a      	str	r2, [r3, #0]
	}
 8008a74:	e001      	b.n	8008a7a <vTaskSuspend+0xfe>
					vTaskSwitchContext();
 8008a76:	f000 fa75 	bl	8008f64 <vTaskSwitchContext>
	}
 8008a7a:	bf00      	nop
 8008a7c:	3710      	adds	r7, #16
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}
 8008a82:	bf00      	nop
 8008a84:	200083bc 	.word	0x200083bc
 8008a88:	200083c0 	.word	0x200083c0
 8008a8c:	200084c4 	.word	0x200084c4
 8008a90:	200084a8 	.word	0x200084a8
 8008a94:	200084c8 	.word	0x200084c8
 8008a98:	200084e4 	.word	0x200084e4
 8008a9c:	e000ed04 	.word	0xe000ed04
 8008aa0:	200084bc 	.word	0x200084bc

08008aa4 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b087      	sub	sp, #28
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8008aac:	2300      	movs	r3, #0
 8008aae:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d10b      	bne.n	8008ad2 <prvTaskIsTaskSuspended+0x2e>
	__asm volatile
 8008aba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008abe:	f383 8811 	msr	BASEPRI, r3
 8008ac2:	f3bf 8f6f 	isb	sy
 8008ac6:	f3bf 8f4f 	dsb	sy
 8008aca:	60fb      	str	r3, [r7, #12]
}
 8008acc:	bf00      	nop
 8008ace:	bf00      	nop
 8008ad0:	e7fd      	b.n	8008ace <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	695b      	ldr	r3, [r3, #20]
 8008ad6:	4a0a      	ldr	r2, [pc, #40]	@ (8008b00 <prvTaskIsTaskSuspended+0x5c>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d10a      	bne.n	8008af2 <prvTaskIsTaskSuspended+0x4e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ae0:	4a08      	ldr	r2, [pc, #32]	@ (8008b04 <prvTaskIsTaskSuspended+0x60>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d005      	beq.n	8008af2 <prvTaskIsTaskSuspended+0x4e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d101      	bne.n	8008af2 <prvTaskIsTaskSuspended+0x4e>
				{
					xReturn = pdTRUE;
 8008aee:	2301      	movs	r3, #1
 8008af0:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008af2:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8008af4:	4618      	mov	r0, r3
 8008af6:	371c      	adds	r7, #28
 8008af8:	46bd      	mov	sp, r7
 8008afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afe:	4770      	bx	lr
 8008b00:	200084a8 	.word	0x200084a8
 8008b04:	2000847c 	.word	0x2000847c

08008b08 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b084      	sub	sp, #16
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d10b      	bne.n	8008b32 <vTaskResume+0x2a>
	__asm volatile
 8008b1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b1e:	f383 8811 	msr	BASEPRI, r3
 8008b22:	f3bf 8f6f 	isb	sy
 8008b26:	f3bf 8f4f 	dsb	sy
 8008b2a:	60bb      	str	r3, [r7, #8]
}
 8008b2c:	bf00      	nop
 8008b2e:	bf00      	nop
 8008b30:	e7fd      	b.n	8008b2e <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8008b32:	4b20      	ldr	r3, [pc, #128]	@ (8008bb4 <vTaskResume+0xac>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	68fa      	ldr	r2, [r7, #12]
 8008b38:	429a      	cmp	r2, r3
 8008b3a:	d037      	beq.n	8008bac <vTaskResume+0xa4>
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d034      	beq.n	8008bac <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 8008b42:	f000 ff19 	bl	8009978 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8008b46:	68f8      	ldr	r0, [r7, #12]
 8008b48:	f7ff ffac 	bl	8008aa4 <prvTaskIsTaskSuspended>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d02a      	beq.n	8008ba8 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	3304      	adds	r3, #4
 8008b56:	4618      	mov	r0, r3
 8008b58:	f7ff fd00 	bl	800855c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b60:	2201      	movs	r2, #1
 8008b62:	409a      	lsls	r2, r3
 8008b64:	4b14      	ldr	r3, [pc, #80]	@ (8008bb8 <vTaskResume+0xb0>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	4a13      	ldr	r2, [pc, #76]	@ (8008bb8 <vTaskResume+0xb0>)
 8008b6c:	6013      	str	r3, [r2, #0]
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b72:	4613      	mov	r3, r2
 8008b74:	009b      	lsls	r3, r3, #2
 8008b76:	4413      	add	r3, r2
 8008b78:	009b      	lsls	r3, r3, #2
 8008b7a:	4a10      	ldr	r2, [pc, #64]	@ (8008bbc <vTaskResume+0xb4>)
 8008b7c:	441a      	add	r2, r3
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	3304      	adds	r3, #4
 8008b82:	4619      	mov	r1, r3
 8008b84:	4610      	mov	r0, r2
 8008b86:	f7ff fc8c 	bl	80084a2 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b8e:	4b09      	ldr	r3, [pc, #36]	@ (8008bb4 <vTaskResume+0xac>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b94:	429a      	cmp	r2, r3
 8008b96:	d307      	bcc.n	8008ba8 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8008b98:	4b09      	ldr	r3, [pc, #36]	@ (8008bc0 <vTaskResume+0xb8>)
 8008b9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b9e:	601a      	str	r2, [r3, #0]
 8008ba0:	f3bf 8f4f 	dsb	sy
 8008ba4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8008ba8:	f000 ff18 	bl	80099dc <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008bac:	bf00      	nop
 8008bae:	3710      	adds	r7, #16
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}
 8008bb4:	200083bc 	.word	0x200083bc
 8008bb8:	200084c4 	.word	0x200084c4
 8008bbc:	200083c0 	.word	0x200083c0
 8008bc0:	e000ed04 	.word	0xe000ed04

08008bc4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b08a      	sub	sp, #40	@ 0x28
 8008bc8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008bd2:	463a      	mov	r2, r7
 8008bd4:	1d39      	adds	r1, r7, #4
 8008bd6:	f107 0308 	add.w	r3, r7, #8
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f7f8 fd20 	bl	8001620 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008be0:	6839      	ldr	r1, [r7, #0]
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	68ba      	ldr	r2, [r7, #8]
 8008be6:	9202      	str	r2, [sp, #8]
 8008be8:	9301      	str	r3, [sp, #4]
 8008bea:	2300      	movs	r3, #0
 8008bec:	9300      	str	r3, [sp, #0]
 8008bee:	2300      	movs	r3, #0
 8008bf0:	460a      	mov	r2, r1
 8008bf2:	4921      	ldr	r1, [pc, #132]	@ (8008c78 <vTaskStartScheduler+0xb4>)
 8008bf4:	4821      	ldr	r0, [pc, #132]	@ (8008c7c <vTaskStartScheduler+0xb8>)
 8008bf6:	f7ff fcdb 	bl	80085b0 <xTaskCreateStatic>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	4a20      	ldr	r2, [pc, #128]	@ (8008c80 <vTaskStartScheduler+0xbc>)
 8008bfe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008c00:	4b1f      	ldr	r3, [pc, #124]	@ (8008c80 <vTaskStartScheduler+0xbc>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d002      	beq.n	8008c0e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008c08:	2301      	movs	r3, #1
 8008c0a:	617b      	str	r3, [r7, #20]
 8008c0c:	e001      	b.n	8008c12 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008c12:	697b      	ldr	r3, [r7, #20]
 8008c14:	2b01      	cmp	r3, #1
 8008c16:	d11b      	bne.n	8008c50 <vTaskStartScheduler+0x8c>
	__asm volatile
 8008c18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c1c:	f383 8811 	msr	BASEPRI, r3
 8008c20:	f3bf 8f6f 	isb	sy
 8008c24:	f3bf 8f4f 	dsb	sy
 8008c28:	613b      	str	r3, [r7, #16]
}
 8008c2a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008c2c:	4b15      	ldr	r3, [pc, #84]	@ (8008c84 <vTaskStartScheduler+0xc0>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	334c      	adds	r3, #76	@ 0x4c
 8008c32:	4a15      	ldr	r2, [pc, #84]	@ (8008c88 <vTaskStartScheduler+0xc4>)
 8008c34:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008c36:	4b15      	ldr	r3, [pc, #84]	@ (8008c8c <vTaskStartScheduler+0xc8>)
 8008c38:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008c3c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008c3e:	4b14      	ldr	r3, [pc, #80]	@ (8008c90 <vTaskStartScheduler+0xcc>)
 8008c40:	2201      	movs	r2, #1
 8008c42:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008c44:	4b13      	ldr	r3, [pc, #76]	@ (8008c94 <vTaskStartScheduler+0xd0>)
 8008c46:	2200      	movs	r2, #0
 8008c48:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008c4a:	f000 fdf1 	bl	8009830 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008c4e:	e00f      	b.n	8008c70 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008c56:	d10b      	bne.n	8008c70 <vTaskStartScheduler+0xac>
	__asm volatile
 8008c58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c5c:	f383 8811 	msr	BASEPRI, r3
 8008c60:	f3bf 8f6f 	isb	sy
 8008c64:	f3bf 8f4f 	dsb	sy
 8008c68:	60fb      	str	r3, [r7, #12]
}
 8008c6a:	bf00      	nop
 8008c6c:	bf00      	nop
 8008c6e:	e7fd      	b.n	8008c6c <vTaskStartScheduler+0xa8>
}
 8008c70:	bf00      	nop
 8008c72:	3718      	adds	r7, #24
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}
 8008c78:	08019dd4 	.word	0x08019dd4
 8008c7c:	0800907d 	.word	0x0800907d
 8008c80:	200084e0 	.word	0x200084e0
 8008c84:	200083bc 	.word	0x200083bc
 8008c88:	200000c8 	.word	0x200000c8
 8008c8c:	200084dc 	.word	0x200084dc
 8008c90:	200084c8 	.word	0x200084c8
 8008c94:	200084c0 	.word	0x200084c0

08008c98 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008c98:	b480      	push	{r7}
 8008c9a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008c9c:	4b04      	ldr	r3, [pc, #16]	@ (8008cb0 <vTaskSuspendAll+0x18>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	3301      	adds	r3, #1
 8008ca2:	4a03      	ldr	r2, [pc, #12]	@ (8008cb0 <vTaskSuspendAll+0x18>)
 8008ca4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008ca6:	bf00      	nop
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cae:	4770      	bx	lr
 8008cb0:	200084e4 	.word	0x200084e4

08008cb4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b084      	sub	sp, #16
 8008cb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008cc2:	4b42      	ldr	r3, [pc, #264]	@ (8008dcc <xTaskResumeAll+0x118>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d10b      	bne.n	8008ce2 <xTaskResumeAll+0x2e>
	__asm volatile
 8008cca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cce:	f383 8811 	msr	BASEPRI, r3
 8008cd2:	f3bf 8f6f 	isb	sy
 8008cd6:	f3bf 8f4f 	dsb	sy
 8008cda:	603b      	str	r3, [r7, #0]
}
 8008cdc:	bf00      	nop
 8008cde:	bf00      	nop
 8008ce0:	e7fd      	b.n	8008cde <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008ce2:	f000 fe49 	bl	8009978 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008ce6:	4b39      	ldr	r3, [pc, #228]	@ (8008dcc <xTaskResumeAll+0x118>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	3b01      	subs	r3, #1
 8008cec:	4a37      	ldr	r2, [pc, #220]	@ (8008dcc <xTaskResumeAll+0x118>)
 8008cee:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008cf0:	4b36      	ldr	r3, [pc, #216]	@ (8008dcc <xTaskResumeAll+0x118>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d161      	bne.n	8008dbc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008cf8:	4b35      	ldr	r3, [pc, #212]	@ (8008dd0 <xTaskResumeAll+0x11c>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d05d      	beq.n	8008dbc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008d00:	e02e      	b.n	8008d60 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d02:	4b34      	ldr	r3, [pc, #208]	@ (8008dd4 <xTaskResumeAll+0x120>)
 8008d04:	68db      	ldr	r3, [r3, #12]
 8008d06:	68db      	ldr	r3, [r3, #12]
 8008d08:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	3318      	adds	r3, #24
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f7ff fc24 	bl	800855c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	3304      	adds	r3, #4
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f7ff fc1f 	bl	800855c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d22:	2201      	movs	r2, #1
 8008d24:	409a      	lsls	r2, r3
 8008d26:	4b2c      	ldr	r3, [pc, #176]	@ (8008dd8 <xTaskResumeAll+0x124>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	4313      	orrs	r3, r2
 8008d2c:	4a2a      	ldr	r2, [pc, #168]	@ (8008dd8 <xTaskResumeAll+0x124>)
 8008d2e:	6013      	str	r3, [r2, #0]
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d34:	4613      	mov	r3, r2
 8008d36:	009b      	lsls	r3, r3, #2
 8008d38:	4413      	add	r3, r2
 8008d3a:	009b      	lsls	r3, r3, #2
 8008d3c:	4a27      	ldr	r2, [pc, #156]	@ (8008ddc <xTaskResumeAll+0x128>)
 8008d3e:	441a      	add	r2, r3
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	3304      	adds	r3, #4
 8008d44:	4619      	mov	r1, r3
 8008d46:	4610      	mov	r0, r2
 8008d48:	f7ff fbab 	bl	80084a2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d50:	4b23      	ldr	r3, [pc, #140]	@ (8008de0 <xTaskResumeAll+0x12c>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d56:	429a      	cmp	r2, r3
 8008d58:	d302      	bcc.n	8008d60 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008d5a:	4b22      	ldr	r3, [pc, #136]	@ (8008de4 <xTaskResumeAll+0x130>)
 8008d5c:	2201      	movs	r2, #1
 8008d5e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008d60:	4b1c      	ldr	r3, [pc, #112]	@ (8008dd4 <xTaskResumeAll+0x120>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d1cc      	bne.n	8008d02 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d001      	beq.n	8008d72 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008d6e:	f000 fa41 	bl	80091f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008d72:	4b1d      	ldr	r3, [pc, #116]	@ (8008de8 <xTaskResumeAll+0x134>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d010      	beq.n	8008da0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008d7e:	f000 f837 	bl	8008df0 <xTaskIncrementTick>
 8008d82:	4603      	mov	r3, r0
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d002      	beq.n	8008d8e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008d88:	4b16      	ldr	r3, [pc, #88]	@ (8008de4 <xTaskResumeAll+0x130>)
 8008d8a:	2201      	movs	r2, #1
 8008d8c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	3b01      	subs	r3, #1
 8008d92:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d1f1      	bne.n	8008d7e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008d9a:	4b13      	ldr	r3, [pc, #76]	@ (8008de8 <xTaskResumeAll+0x134>)
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008da0:	4b10      	ldr	r3, [pc, #64]	@ (8008de4 <xTaskResumeAll+0x130>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d009      	beq.n	8008dbc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008da8:	2301      	movs	r3, #1
 8008daa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008dac:	4b0f      	ldr	r3, [pc, #60]	@ (8008dec <xTaskResumeAll+0x138>)
 8008dae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008db2:	601a      	str	r2, [r3, #0]
 8008db4:	f3bf 8f4f 	dsb	sy
 8008db8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008dbc:	f000 fe0e 	bl	80099dc <vPortExitCritical>

	return xAlreadyYielded;
 8008dc0:	68bb      	ldr	r3, [r7, #8]
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3710      	adds	r7, #16
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}
 8008dca:	bf00      	nop
 8008dcc:	200084e4 	.word	0x200084e4
 8008dd0:	200084bc 	.word	0x200084bc
 8008dd4:	2000847c 	.word	0x2000847c
 8008dd8:	200084c4 	.word	0x200084c4
 8008ddc:	200083c0 	.word	0x200083c0
 8008de0:	200083bc 	.word	0x200083bc
 8008de4:	200084d0 	.word	0x200084d0
 8008de8:	200084cc 	.word	0x200084cc
 8008dec:	e000ed04 	.word	0xe000ed04

08008df0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b086      	sub	sp, #24
 8008df4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008df6:	2300      	movs	r3, #0
 8008df8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008dfa:	4b4f      	ldr	r3, [pc, #316]	@ (8008f38 <xTaskIncrementTick+0x148>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	f040 808f 	bne.w	8008f22 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008e04:	4b4d      	ldr	r3, [pc, #308]	@ (8008f3c <xTaskIncrementTick+0x14c>)
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	3301      	adds	r3, #1
 8008e0a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008e0c:	4a4b      	ldr	r2, [pc, #300]	@ (8008f3c <xTaskIncrementTick+0x14c>)
 8008e0e:	693b      	ldr	r3, [r7, #16]
 8008e10:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d121      	bne.n	8008e5c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008e18:	4b49      	ldr	r3, [pc, #292]	@ (8008f40 <xTaskIncrementTick+0x150>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d00b      	beq.n	8008e3a <xTaskIncrementTick+0x4a>
	__asm volatile
 8008e22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e26:	f383 8811 	msr	BASEPRI, r3
 8008e2a:	f3bf 8f6f 	isb	sy
 8008e2e:	f3bf 8f4f 	dsb	sy
 8008e32:	603b      	str	r3, [r7, #0]
}
 8008e34:	bf00      	nop
 8008e36:	bf00      	nop
 8008e38:	e7fd      	b.n	8008e36 <xTaskIncrementTick+0x46>
 8008e3a:	4b41      	ldr	r3, [pc, #260]	@ (8008f40 <xTaskIncrementTick+0x150>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	60fb      	str	r3, [r7, #12]
 8008e40:	4b40      	ldr	r3, [pc, #256]	@ (8008f44 <xTaskIncrementTick+0x154>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	4a3e      	ldr	r2, [pc, #248]	@ (8008f40 <xTaskIncrementTick+0x150>)
 8008e46:	6013      	str	r3, [r2, #0]
 8008e48:	4a3e      	ldr	r2, [pc, #248]	@ (8008f44 <xTaskIncrementTick+0x154>)
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	6013      	str	r3, [r2, #0]
 8008e4e:	4b3e      	ldr	r3, [pc, #248]	@ (8008f48 <xTaskIncrementTick+0x158>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	3301      	adds	r3, #1
 8008e54:	4a3c      	ldr	r2, [pc, #240]	@ (8008f48 <xTaskIncrementTick+0x158>)
 8008e56:	6013      	str	r3, [r2, #0]
 8008e58:	f000 f9cc 	bl	80091f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008e5c:	4b3b      	ldr	r3, [pc, #236]	@ (8008f4c <xTaskIncrementTick+0x15c>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	693a      	ldr	r2, [r7, #16]
 8008e62:	429a      	cmp	r2, r3
 8008e64:	d348      	bcc.n	8008ef8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e66:	4b36      	ldr	r3, [pc, #216]	@ (8008f40 <xTaskIncrementTick+0x150>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d104      	bne.n	8008e7a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e70:	4b36      	ldr	r3, [pc, #216]	@ (8008f4c <xTaskIncrementTick+0x15c>)
 8008e72:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008e76:	601a      	str	r2, [r3, #0]
					break;
 8008e78:	e03e      	b.n	8008ef8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e7a:	4b31      	ldr	r3, [pc, #196]	@ (8008f40 <xTaskIncrementTick+0x150>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	68db      	ldr	r3, [r3, #12]
 8008e80:	68db      	ldr	r3, [r3, #12]
 8008e82:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	685b      	ldr	r3, [r3, #4]
 8008e88:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008e8a:	693a      	ldr	r2, [r7, #16]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	429a      	cmp	r2, r3
 8008e90:	d203      	bcs.n	8008e9a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008e92:	4a2e      	ldr	r2, [pc, #184]	@ (8008f4c <xTaskIncrementTick+0x15c>)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008e98:	e02e      	b.n	8008ef8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	3304      	adds	r3, #4
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f7ff fb5c 	bl	800855c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d004      	beq.n	8008eb6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	3318      	adds	r3, #24
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f7ff fb53 	bl	800855c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008eba:	2201      	movs	r2, #1
 8008ebc:	409a      	lsls	r2, r3
 8008ebe:	4b24      	ldr	r3, [pc, #144]	@ (8008f50 <xTaskIncrementTick+0x160>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	4313      	orrs	r3, r2
 8008ec4:	4a22      	ldr	r2, [pc, #136]	@ (8008f50 <xTaskIncrementTick+0x160>)
 8008ec6:	6013      	str	r3, [r2, #0]
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ecc:	4613      	mov	r3, r2
 8008ece:	009b      	lsls	r3, r3, #2
 8008ed0:	4413      	add	r3, r2
 8008ed2:	009b      	lsls	r3, r3, #2
 8008ed4:	4a1f      	ldr	r2, [pc, #124]	@ (8008f54 <xTaskIncrementTick+0x164>)
 8008ed6:	441a      	add	r2, r3
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	3304      	adds	r3, #4
 8008edc:	4619      	mov	r1, r3
 8008ede:	4610      	mov	r0, r2
 8008ee0:	f7ff fadf 	bl	80084a2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ee8:	4b1b      	ldr	r3, [pc, #108]	@ (8008f58 <xTaskIncrementTick+0x168>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008eee:	429a      	cmp	r2, r3
 8008ef0:	d3b9      	bcc.n	8008e66 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ef6:	e7b6      	b.n	8008e66 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008ef8:	4b17      	ldr	r3, [pc, #92]	@ (8008f58 <xTaskIncrementTick+0x168>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008efe:	4915      	ldr	r1, [pc, #84]	@ (8008f54 <xTaskIncrementTick+0x164>)
 8008f00:	4613      	mov	r3, r2
 8008f02:	009b      	lsls	r3, r3, #2
 8008f04:	4413      	add	r3, r2
 8008f06:	009b      	lsls	r3, r3, #2
 8008f08:	440b      	add	r3, r1
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	2b01      	cmp	r3, #1
 8008f0e:	d901      	bls.n	8008f14 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008f10:	2301      	movs	r3, #1
 8008f12:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008f14:	4b11      	ldr	r3, [pc, #68]	@ (8008f5c <xTaskIncrementTick+0x16c>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d007      	beq.n	8008f2c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	617b      	str	r3, [r7, #20]
 8008f20:	e004      	b.n	8008f2c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008f22:	4b0f      	ldr	r3, [pc, #60]	@ (8008f60 <xTaskIncrementTick+0x170>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	3301      	adds	r3, #1
 8008f28:	4a0d      	ldr	r2, [pc, #52]	@ (8008f60 <xTaskIncrementTick+0x170>)
 8008f2a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008f2c:	697b      	ldr	r3, [r7, #20]
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3718      	adds	r7, #24
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}
 8008f36:	bf00      	nop
 8008f38:	200084e4 	.word	0x200084e4
 8008f3c:	200084c0 	.word	0x200084c0
 8008f40:	20008474 	.word	0x20008474
 8008f44:	20008478 	.word	0x20008478
 8008f48:	200084d4 	.word	0x200084d4
 8008f4c:	200084dc 	.word	0x200084dc
 8008f50:	200084c4 	.word	0x200084c4
 8008f54:	200083c0 	.word	0x200083c0
 8008f58:	200083bc 	.word	0x200083bc
 8008f5c:	200084d0 	.word	0x200084d0
 8008f60:	200084cc 	.word	0x200084cc

08008f64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008f64:	b480      	push	{r7}
 8008f66:	b087      	sub	sp, #28
 8008f68:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008f6a:	4b2a      	ldr	r3, [pc, #168]	@ (8009014 <vTaskSwitchContext+0xb0>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d003      	beq.n	8008f7a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008f72:	4b29      	ldr	r3, [pc, #164]	@ (8009018 <vTaskSwitchContext+0xb4>)
 8008f74:	2201      	movs	r2, #1
 8008f76:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008f78:	e045      	b.n	8009006 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8008f7a:	4b27      	ldr	r3, [pc, #156]	@ (8009018 <vTaskSwitchContext+0xb4>)
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f80:	4b26      	ldr	r3, [pc, #152]	@ (800901c <vTaskSwitchContext+0xb8>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	fab3 f383 	clz	r3, r3
 8008f8c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008f8e:	7afb      	ldrb	r3, [r7, #11]
 8008f90:	f1c3 031f 	rsb	r3, r3, #31
 8008f94:	617b      	str	r3, [r7, #20]
 8008f96:	4922      	ldr	r1, [pc, #136]	@ (8009020 <vTaskSwitchContext+0xbc>)
 8008f98:	697a      	ldr	r2, [r7, #20]
 8008f9a:	4613      	mov	r3, r2
 8008f9c:	009b      	lsls	r3, r3, #2
 8008f9e:	4413      	add	r3, r2
 8008fa0:	009b      	lsls	r3, r3, #2
 8008fa2:	440b      	add	r3, r1
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d10b      	bne.n	8008fc2 <vTaskSwitchContext+0x5e>
	__asm volatile
 8008faa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fae:	f383 8811 	msr	BASEPRI, r3
 8008fb2:	f3bf 8f6f 	isb	sy
 8008fb6:	f3bf 8f4f 	dsb	sy
 8008fba:	607b      	str	r3, [r7, #4]
}
 8008fbc:	bf00      	nop
 8008fbe:	bf00      	nop
 8008fc0:	e7fd      	b.n	8008fbe <vTaskSwitchContext+0x5a>
 8008fc2:	697a      	ldr	r2, [r7, #20]
 8008fc4:	4613      	mov	r3, r2
 8008fc6:	009b      	lsls	r3, r3, #2
 8008fc8:	4413      	add	r3, r2
 8008fca:	009b      	lsls	r3, r3, #2
 8008fcc:	4a14      	ldr	r2, [pc, #80]	@ (8009020 <vTaskSwitchContext+0xbc>)
 8008fce:	4413      	add	r3, r2
 8008fd0:	613b      	str	r3, [r7, #16]
 8008fd2:	693b      	ldr	r3, [r7, #16]
 8008fd4:	685b      	ldr	r3, [r3, #4]
 8008fd6:	685a      	ldr	r2, [r3, #4]
 8008fd8:	693b      	ldr	r3, [r7, #16]
 8008fda:	605a      	str	r2, [r3, #4]
 8008fdc:	693b      	ldr	r3, [r7, #16]
 8008fde:	685a      	ldr	r2, [r3, #4]
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	3308      	adds	r3, #8
 8008fe4:	429a      	cmp	r2, r3
 8008fe6:	d104      	bne.n	8008ff2 <vTaskSwitchContext+0x8e>
 8008fe8:	693b      	ldr	r3, [r7, #16]
 8008fea:	685b      	ldr	r3, [r3, #4]
 8008fec:	685a      	ldr	r2, [r3, #4]
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	605a      	str	r2, [r3, #4]
 8008ff2:	693b      	ldr	r3, [r7, #16]
 8008ff4:	685b      	ldr	r3, [r3, #4]
 8008ff6:	68db      	ldr	r3, [r3, #12]
 8008ff8:	4a0a      	ldr	r2, [pc, #40]	@ (8009024 <vTaskSwitchContext+0xc0>)
 8008ffa:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008ffc:	4b09      	ldr	r3, [pc, #36]	@ (8009024 <vTaskSwitchContext+0xc0>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	334c      	adds	r3, #76	@ 0x4c
 8009002:	4a09      	ldr	r2, [pc, #36]	@ (8009028 <vTaskSwitchContext+0xc4>)
 8009004:	6013      	str	r3, [r2, #0]
}
 8009006:	bf00      	nop
 8009008:	371c      	adds	r7, #28
 800900a:	46bd      	mov	sp, r7
 800900c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009010:	4770      	bx	lr
 8009012:	bf00      	nop
 8009014:	200084e4 	.word	0x200084e4
 8009018:	200084d0 	.word	0x200084d0
 800901c:	200084c4 	.word	0x200084c4
 8009020:	200083c0 	.word	0x200083c0
 8009024:	200083bc 	.word	0x200083bc
 8009028:	200000c8 	.word	0x200000c8

0800902c <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b084      	sub	sp, #16
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d10b      	bne.n	8009052 <vTaskSetTimeOutState+0x26>
	__asm volatile
 800903a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800903e:	f383 8811 	msr	BASEPRI, r3
 8009042:	f3bf 8f6f 	isb	sy
 8009046:	f3bf 8f4f 	dsb	sy
 800904a:	60fb      	str	r3, [r7, #12]
}
 800904c:	bf00      	nop
 800904e:	bf00      	nop
 8009050:	e7fd      	b.n	800904e <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8009052:	f000 fc91 	bl	8009978 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009056:	4b07      	ldr	r3, [pc, #28]	@ (8009074 <vTaskSetTimeOutState+0x48>)
 8009058:	681a      	ldr	r2, [r3, #0]
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800905e:	4b06      	ldr	r3, [pc, #24]	@ (8009078 <vTaskSetTimeOutState+0x4c>)
 8009060:	681a      	ldr	r2, [r3, #0]
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8009066:	f000 fcb9 	bl	80099dc <vPortExitCritical>
}
 800906a:	bf00      	nop
 800906c:	3710      	adds	r7, #16
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}
 8009072:	bf00      	nop
 8009074:	200084d4 	.word	0x200084d4
 8009078:	200084c0 	.word	0x200084c0

0800907c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b082      	sub	sp, #8
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009084:	f000 f852 	bl	800912c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009088:	4b06      	ldr	r3, [pc, #24]	@ (80090a4 <prvIdleTask+0x28>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	2b01      	cmp	r3, #1
 800908e:	d9f9      	bls.n	8009084 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009090:	4b05      	ldr	r3, [pc, #20]	@ (80090a8 <prvIdleTask+0x2c>)
 8009092:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009096:	601a      	str	r2, [r3, #0]
 8009098:	f3bf 8f4f 	dsb	sy
 800909c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80090a0:	e7f0      	b.n	8009084 <prvIdleTask+0x8>
 80090a2:	bf00      	nop
 80090a4:	200083c0 	.word	0x200083c0
 80090a8:	e000ed04 	.word	0xe000ed04

080090ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b082      	sub	sp, #8
 80090b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80090b2:	2300      	movs	r3, #0
 80090b4:	607b      	str	r3, [r7, #4]
 80090b6:	e00c      	b.n	80090d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80090b8:	687a      	ldr	r2, [r7, #4]
 80090ba:	4613      	mov	r3, r2
 80090bc:	009b      	lsls	r3, r3, #2
 80090be:	4413      	add	r3, r2
 80090c0:	009b      	lsls	r3, r3, #2
 80090c2:	4a12      	ldr	r2, [pc, #72]	@ (800910c <prvInitialiseTaskLists+0x60>)
 80090c4:	4413      	add	r3, r2
 80090c6:	4618      	mov	r0, r3
 80090c8:	f7ff f9be 	bl	8008448 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	3301      	adds	r3, #1
 80090d0:	607b      	str	r3, [r7, #4]
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2b06      	cmp	r3, #6
 80090d6:	d9ef      	bls.n	80090b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80090d8:	480d      	ldr	r0, [pc, #52]	@ (8009110 <prvInitialiseTaskLists+0x64>)
 80090da:	f7ff f9b5 	bl	8008448 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80090de:	480d      	ldr	r0, [pc, #52]	@ (8009114 <prvInitialiseTaskLists+0x68>)
 80090e0:	f7ff f9b2 	bl	8008448 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80090e4:	480c      	ldr	r0, [pc, #48]	@ (8009118 <prvInitialiseTaskLists+0x6c>)
 80090e6:	f7ff f9af 	bl	8008448 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80090ea:	480c      	ldr	r0, [pc, #48]	@ (800911c <prvInitialiseTaskLists+0x70>)
 80090ec:	f7ff f9ac 	bl	8008448 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80090f0:	480b      	ldr	r0, [pc, #44]	@ (8009120 <prvInitialiseTaskLists+0x74>)
 80090f2:	f7ff f9a9 	bl	8008448 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80090f6:	4b0b      	ldr	r3, [pc, #44]	@ (8009124 <prvInitialiseTaskLists+0x78>)
 80090f8:	4a05      	ldr	r2, [pc, #20]	@ (8009110 <prvInitialiseTaskLists+0x64>)
 80090fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80090fc:	4b0a      	ldr	r3, [pc, #40]	@ (8009128 <prvInitialiseTaskLists+0x7c>)
 80090fe:	4a05      	ldr	r2, [pc, #20]	@ (8009114 <prvInitialiseTaskLists+0x68>)
 8009100:	601a      	str	r2, [r3, #0]
}
 8009102:	bf00      	nop
 8009104:	3708      	adds	r7, #8
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}
 800910a:	bf00      	nop
 800910c:	200083c0 	.word	0x200083c0
 8009110:	2000844c 	.word	0x2000844c
 8009114:	20008460 	.word	0x20008460
 8009118:	2000847c 	.word	0x2000847c
 800911c:	20008490 	.word	0x20008490
 8009120:	200084a8 	.word	0x200084a8
 8009124:	20008474 	.word	0x20008474
 8009128:	20008478 	.word	0x20008478

0800912c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b082      	sub	sp, #8
 8009130:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009132:	e019      	b.n	8009168 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009134:	f000 fc20 	bl	8009978 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009138:	4b10      	ldr	r3, [pc, #64]	@ (800917c <prvCheckTasksWaitingTermination+0x50>)
 800913a:	68db      	ldr	r3, [r3, #12]
 800913c:	68db      	ldr	r3, [r3, #12]
 800913e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	3304      	adds	r3, #4
 8009144:	4618      	mov	r0, r3
 8009146:	f7ff fa09 	bl	800855c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800914a:	4b0d      	ldr	r3, [pc, #52]	@ (8009180 <prvCheckTasksWaitingTermination+0x54>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	3b01      	subs	r3, #1
 8009150:	4a0b      	ldr	r2, [pc, #44]	@ (8009180 <prvCheckTasksWaitingTermination+0x54>)
 8009152:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009154:	4b0b      	ldr	r3, [pc, #44]	@ (8009184 <prvCheckTasksWaitingTermination+0x58>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	3b01      	subs	r3, #1
 800915a:	4a0a      	ldr	r2, [pc, #40]	@ (8009184 <prvCheckTasksWaitingTermination+0x58>)
 800915c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800915e:	f000 fc3d 	bl	80099dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f000 f810 	bl	8009188 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009168:	4b06      	ldr	r3, [pc, #24]	@ (8009184 <prvCheckTasksWaitingTermination+0x58>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d1e1      	bne.n	8009134 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009170:	bf00      	nop
 8009172:	bf00      	nop
 8009174:	3708      	adds	r7, #8
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}
 800917a:	bf00      	nop
 800917c:	20008490 	.word	0x20008490
 8009180:	200084bc 	.word	0x200084bc
 8009184:	200084a4 	.word	0x200084a4

08009188 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009188:	b580      	push	{r7, lr}
 800918a:	b084      	sub	sp, #16
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	334c      	adds	r3, #76	@ 0x4c
 8009194:	4618      	mov	r0, r3
 8009196:	f00e fd99 	bl	8017ccc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d108      	bne.n	80091b6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091a8:	4618      	mov	r0, r3
 80091aa:	f000 fdd5 	bl	8009d58 <vPortFree>
				vPortFree( pxTCB );
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f000 fdd2 	bl	8009d58 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80091b4:	e019      	b.n	80091ea <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80091bc:	2b01      	cmp	r3, #1
 80091be:	d103      	bne.n	80091c8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f000 fdc9 	bl	8009d58 <vPortFree>
	}
 80091c6:	e010      	b.n	80091ea <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80091ce:	2b02      	cmp	r3, #2
 80091d0:	d00b      	beq.n	80091ea <prvDeleteTCB+0x62>
	__asm volatile
 80091d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091d6:	f383 8811 	msr	BASEPRI, r3
 80091da:	f3bf 8f6f 	isb	sy
 80091de:	f3bf 8f4f 	dsb	sy
 80091e2:	60fb      	str	r3, [r7, #12]
}
 80091e4:	bf00      	nop
 80091e6:	bf00      	nop
 80091e8:	e7fd      	b.n	80091e6 <prvDeleteTCB+0x5e>
	}
 80091ea:	bf00      	nop
 80091ec:	3710      	adds	r7, #16
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd80      	pop	{r7, pc}
	...

080091f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80091f4:	b480      	push	{r7}
 80091f6:	b083      	sub	sp, #12
 80091f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80091fa:	4b0c      	ldr	r3, [pc, #48]	@ (800922c <prvResetNextTaskUnblockTime+0x38>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d104      	bne.n	800920e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009204:	4b0a      	ldr	r3, [pc, #40]	@ (8009230 <prvResetNextTaskUnblockTime+0x3c>)
 8009206:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800920a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800920c:	e008      	b.n	8009220 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800920e:	4b07      	ldr	r3, [pc, #28]	@ (800922c <prvResetNextTaskUnblockTime+0x38>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	68db      	ldr	r3, [r3, #12]
 8009214:	68db      	ldr	r3, [r3, #12]
 8009216:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	685b      	ldr	r3, [r3, #4]
 800921c:	4a04      	ldr	r2, [pc, #16]	@ (8009230 <prvResetNextTaskUnblockTime+0x3c>)
 800921e:	6013      	str	r3, [r2, #0]
}
 8009220:	bf00      	nop
 8009222:	370c      	adds	r7, #12
 8009224:	46bd      	mov	sp, r7
 8009226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922a:	4770      	bx	lr
 800922c:	20008474 	.word	0x20008474
 8009230:	200084dc 	.word	0x200084dc

08009234 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8009234:	b580      	push	{r7, lr}
 8009236:	b086      	sub	sp, #24
 8009238:	af00      	add	r7, sp, #0
 800923a:	60f8      	str	r0, [r7, #12]
 800923c:	60b9      	str	r1, [r7, #8]
 800923e:	607a      	str	r2, [r7, #4]
 8009240:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8009242:	f000 fb99 	bl	8009978 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009246:	4b29      	ldr	r3, [pc, #164]	@ (80092ec <xTaskNotifyWait+0xb8>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 800924e:	b2db      	uxtb	r3, r3
 8009250:	2b02      	cmp	r3, #2
 8009252:	d01c      	beq.n	800928e <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8009254:	4b25      	ldr	r3, [pc, #148]	@ (80092ec <xTaskNotifyWait+0xb8>)
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 800925c:	68fa      	ldr	r2, [r7, #12]
 800925e:	43d2      	mvns	r2, r2
 8009260:	400a      	ands	r2, r1
 8009262:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8009266:	4b21      	ldr	r3, [pc, #132]	@ (80092ec <xTaskNotifyWait+0xb8>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	2201      	movs	r2, #1
 800926c:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d00b      	beq.n	800928e <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009276:	2101      	movs	r1, #1
 8009278:	6838      	ldr	r0, [r7, #0]
 800927a:	f000 f9e3 	bl	8009644 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800927e:	4b1c      	ldr	r3, [pc, #112]	@ (80092f0 <xTaskNotifyWait+0xbc>)
 8009280:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009284:	601a      	str	r2, [r3, #0]
 8009286:	f3bf 8f4f 	dsb	sy
 800928a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800928e:	f000 fba5 	bl	80099dc <vPortExitCritical>

		taskENTER_CRITICAL();
 8009292:	f000 fb71 	bl	8009978 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d005      	beq.n	80092a8 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800929c:	4b13      	ldr	r3, [pc, #76]	@ (80092ec <xTaskNotifyWait+0xb8>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80092a8:	4b10      	ldr	r3, [pc, #64]	@ (80092ec <xTaskNotifyWait+0xb8>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 80092b0:	b2db      	uxtb	r3, r3
 80092b2:	2b02      	cmp	r3, #2
 80092b4:	d002      	beq.n	80092bc <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80092b6:	2300      	movs	r3, #0
 80092b8:	617b      	str	r3, [r7, #20]
 80092ba:	e00a      	b.n	80092d2 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80092bc:	4b0b      	ldr	r3, [pc, #44]	@ (80092ec <xTaskNotifyWait+0xb8>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 80092c4:	68ba      	ldr	r2, [r7, #8]
 80092c6:	43d2      	mvns	r2, r2
 80092c8:	400a      	ands	r2, r1
 80092ca:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
				xReturn = pdTRUE;
 80092ce:	2301      	movs	r3, #1
 80092d0:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80092d2:	4b06      	ldr	r3, [pc, #24]	@ (80092ec <xTaskNotifyWait+0xb8>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	2200      	movs	r2, #0
 80092d8:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
		}
		taskEXIT_CRITICAL();
 80092dc:	f000 fb7e 	bl	80099dc <vPortExitCritical>

		return xReturn;
 80092e0:	697b      	ldr	r3, [r7, #20]
	}
 80092e2:	4618      	mov	r0, r3
 80092e4:	3718      	adds	r7, #24
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}
 80092ea:	bf00      	nop
 80092ec:	200083bc 	.word	0x200083bc
 80092f0:	e000ed04 	.word	0xe000ed04

080092f4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b08a      	sub	sp, #40	@ 0x28
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	60f8      	str	r0, [r7, #12]
 80092fc:	60b9      	str	r1, [r7, #8]
 80092fe:	603b      	str	r3, [r7, #0]
 8009300:	4613      	mov	r3, r2
 8009302:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8009304:	2301      	movs	r3, #1
 8009306:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d10b      	bne.n	8009326 <xTaskGenericNotify+0x32>
	__asm volatile
 800930e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009312:	f383 8811 	msr	BASEPRI, r3
 8009316:	f3bf 8f6f 	isb	sy
 800931a:	f3bf 8f4f 	dsb	sy
 800931e:	61bb      	str	r3, [r7, #24]
}
 8009320:	bf00      	nop
 8009322:	bf00      	nop
 8009324:	e7fd      	b.n	8009322 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800932a:	f000 fb25 	bl	8009978 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d004      	beq.n	800933e <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009334:	6a3b      	ldr	r3, [r7, #32]
 8009336:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800933e:	6a3b      	ldr	r3, [r7, #32]
 8009340:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8009344:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009346:	6a3b      	ldr	r3, [r7, #32]
 8009348:	2202      	movs	r2, #2
 800934a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

			switch( eAction )
 800934e:	79fb      	ldrb	r3, [r7, #7]
 8009350:	2b04      	cmp	r3, #4
 8009352:	d82e      	bhi.n	80093b2 <xTaskGenericNotify+0xbe>
 8009354:	a201      	add	r2, pc, #4	@ (adr r2, 800935c <xTaskGenericNotify+0x68>)
 8009356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800935a:	bf00      	nop
 800935c:	080093d7 	.word	0x080093d7
 8009360:	08009371 	.word	0x08009371
 8009364:	08009383 	.word	0x08009383
 8009368:	08009393 	.word	0x08009393
 800936c:	0800939d 	.word	0x0800939d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8009370:	6a3b      	ldr	r3, [r7, #32]
 8009372:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	431a      	orrs	r2, r3
 800937a:	6a3b      	ldr	r3, [r7, #32]
 800937c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8009380:	e02c      	b.n	80093dc <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8009382:	6a3b      	ldr	r3, [r7, #32]
 8009384:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009388:	1c5a      	adds	r2, r3, #1
 800938a:	6a3b      	ldr	r3, [r7, #32]
 800938c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8009390:	e024      	b.n	80093dc <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8009392:	6a3b      	ldr	r3, [r7, #32]
 8009394:	68ba      	ldr	r2, [r7, #8]
 8009396:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 800939a:	e01f      	b.n	80093dc <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800939c:	7ffb      	ldrb	r3, [r7, #31]
 800939e:	2b02      	cmp	r3, #2
 80093a0:	d004      	beq.n	80093ac <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80093a2:	6a3b      	ldr	r3, [r7, #32]
 80093a4:	68ba      	ldr	r2, [r7, #8]
 80093a6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80093aa:	e017      	b.n	80093dc <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 80093ac:	2300      	movs	r3, #0
 80093ae:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 80093b0:	e014      	b.n	80093dc <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80093b2:	6a3b      	ldr	r3, [r7, #32]
 80093b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80093b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80093bc:	d00d      	beq.n	80093da <xTaskGenericNotify+0xe6>
	__asm volatile
 80093be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093c2:	f383 8811 	msr	BASEPRI, r3
 80093c6:	f3bf 8f6f 	isb	sy
 80093ca:	f3bf 8f4f 	dsb	sy
 80093ce:	617b      	str	r3, [r7, #20]
}
 80093d0:	bf00      	nop
 80093d2:	bf00      	nop
 80093d4:	e7fd      	b.n	80093d2 <xTaskGenericNotify+0xde>
					break;
 80093d6:	bf00      	nop
 80093d8:	e000      	b.n	80093dc <xTaskGenericNotify+0xe8>

					break;
 80093da:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80093dc:	7ffb      	ldrb	r3, [r7, #31]
 80093de:	2b01      	cmp	r3, #1
 80093e0:	d13a      	bne.n	8009458 <xTaskGenericNotify+0x164>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80093e2:	6a3b      	ldr	r3, [r7, #32]
 80093e4:	3304      	adds	r3, #4
 80093e6:	4618      	mov	r0, r3
 80093e8:	f7ff f8b8 	bl	800855c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80093ec:	6a3b      	ldr	r3, [r7, #32]
 80093ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093f0:	2201      	movs	r2, #1
 80093f2:	409a      	lsls	r2, r3
 80093f4:	4b1c      	ldr	r3, [pc, #112]	@ (8009468 <xTaskGenericNotify+0x174>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	4313      	orrs	r3, r2
 80093fa:	4a1b      	ldr	r2, [pc, #108]	@ (8009468 <xTaskGenericNotify+0x174>)
 80093fc:	6013      	str	r3, [r2, #0]
 80093fe:	6a3b      	ldr	r3, [r7, #32]
 8009400:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009402:	4613      	mov	r3, r2
 8009404:	009b      	lsls	r3, r3, #2
 8009406:	4413      	add	r3, r2
 8009408:	009b      	lsls	r3, r3, #2
 800940a:	4a18      	ldr	r2, [pc, #96]	@ (800946c <xTaskGenericNotify+0x178>)
 800940c:	441a      	add	r2, r3
 800940e:	6a3b      	ldr	r3, [r7, #32]
 8009410:	3304      	adds	r3, #4
 8009412:	4619      	mov	r1, r3
 8009414:	4610      	mov	r0, r2
 8009416:	f7ff f844 	bl	80084a2 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800941a:	6a3b      	ldr	r3, [r7, #32]
 800941c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800941e:	2b00      	cmp	r3, #0
 8009420:	d00b      	beq.n	800943a <xTaskGenericNotify+0x146>
	__asm volatile
 8009422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009426:	f383 8811 	msr	BASEPRI, r3
 800942a:	f3bf 8f6f 	isb	sy
 800942e:	f3bf 8f4f 	dsb	sy
 8009432:	613b      	str	r3, [r7, #16]
}
 8009434:	bf00      	nop
 8009436:	bf00      	nop
 8009438:	e7fd      	b.n	8009436 <xTaskGenericNotify+0x142>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800943a:	6a3b      	ldr	r3, [r7, #32]
 800943c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800943e:	4b0c      	ldr	r3, [pc, #48]	@ (8009470 <xTaskGenericNotify+0x17c>)
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009444:	429a      	cmp	r2, r3
 8009446:	d907      	bls.n	8009458 <xTaskGenericNotify+0x164>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8009448:	4b0a      	ldr	r3, [pc, #40]	@ (8009474 <xTaskGenericNotify+0x180>)
 800944a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800944e:	601a      	str	r2, [r3, #0]
 8009450:	f3bf 8f4f 	dsb	sy
 8009454:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009458:	f000 fac0 	bl	80099dc <vPortExitCritical>

		return xReturn;
 800945c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800945e:	4618      	mov	r0, r3
 8009460:	3728      	adds	r7, #40	@ 0x28
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}
 8009466:	bf00      	nop
 8009468:	200084c4 	.word	0x200084c4
 800946c:	200083c0 	.word	0x200083c0
 8009470:	200083bc 	.word	0x200083bc
 8009474:	e000ed04 	.word	0xe000ed04

08009478 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8009478:	b580      	push	{r7, lr}
 800947a:	b08e      	sub	sp, #56	@ 0x38
 800947c:	af00      	add	r7, sp, #0
 800947e:	60f8      	str	r0, [r7, #12]
 8009480:	60b9      	str	r1, [r7, #8]
 8009482:	603b      	str	r3, [r7, #0]
 8009484:	4613      	mov	r3, r2
 8009486:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8009488:	2301      	movs	r3, #1
 800948a:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d10b      	bne.n	80094aa <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 8009492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009496:	f383 8811 	msr	BASEPRI, r3
 800949a:	f3bf 8f6f 	isb	sy
 800949e:	f3bf 8f4f 	dsb	sy
 80094a2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80094a4:	bf00      	nop
 80094a6:	bf00      	nop
 80094a8:	e7fd      	b.n	80094a6 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80094aa:	f000 fb45 	bl	8009b38 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	633b      	str	r3, [r7, #48]	@ 0x30

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80094b2:	f3ef 8211 	mrs	r2, BASEPRI
 80094b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094ba:	f383 8811 	msr	BASEPRI, r3
 80094be:	f3bf 8f6f 	isb	sy
 80094c2:	f3bf 8f4f 	dsb	sy
 80094c6:	623a      	str	r2, [r7, #32]
 80094c8:	61fb      	str	r3, [r7, #28]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80094ca:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80094cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d004      	beq.n	80094de <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80094d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094d6:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80094de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094e0:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 80094e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80094e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094ea:	2202      	movs	r2, #2
 80094ec:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

			switch( eAction )
 80094f0:	79fb      	ldrb	r3, [r7, #7]
 80094f2:	2b04      	cmp	r3, #4
 80094f4:	d82e      	bhi.n	8009554 <xTaskGenericNotifyFromISR+0xdc>
 80094f6:	a201      	add	r2, pc, #4	@ (adr r2, 80094fc <xTaskGenericNotifyFromISR+0x84>)
 80094f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094fc:	08009579 	.word	0x08009579
 8009500:	08009511 	.word	0x08009511
 8009504:	08009523 	.word	0x08009523
 8009508:	08009533 	.word	0x08009533
 800950c:	0800953d 	.word	0x0800953d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8009510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009512:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	431a      	orrs	r2, r3
 800951a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800951c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8009520:	e02d      	b.n	800957e <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8009522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009524:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009528:	1c5a      	adds	r2, r3, #1
 800952a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800952c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8009530:	e025      	b.n	800957e <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8009532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009534:	68ba      	ldr	r2, [r7, #8]
 8009536:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 800953a:	e020      	b.n	800957e <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800953c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009540:	2b02      	cmp	r3, #2
 8009542:	d004      	beq.n	800954e <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8009544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009546:	68ba      	ldr	r2, [r7, #8]
 8009548:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800954c:	e017      	b.n	800957e <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 800954e:	2300      	movs	r3, #0
 8009550:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 8009552:	e014      	b.n	800957e <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8009554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009556:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800955a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800955e:	d00d      	beq.n	800957c <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 8009560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009564:	f383 8811 	msr	BASEPRI, r3
 8009568:	f3bf 8f6f 	isb	sy
 800956c:	f3bf 8f4f 	dsb	sy
 8009570:	61bb      	str	r3, [r7, #24]
}
 8009572:	bf00      	nop
 8009574:	bf00      	nop
 8009576:	e7fd      	b.n	8009574 <xTaskGenericNotifyFromISR+0xfc>
					break;
 8009578:	bf00      	nop
 800957a:	e000      	b.n	800957e <xTaskGenericNotifyFromISR+0x106>
					break;
 800957c:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800957e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009582:	2b01      	cmp	r3, #1
 8009584:	d146      	bne.n	8009614 <xTaskGenericNotifyFromISR+0x19c>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800958a:	2b00      	cmp	r3, #0
 800958c:	d00b      	beq.n	80095a6 <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 800958e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009592:	f383 8811 	msr	BASEPRI, r3
 8009596:	f3bf 8f6f 	isb	sy
 800959a:	f3bf 8f4f 	dsb	sy
 800959e:	617b      	str	r3, [r7, #20]
}
 80095a0:	bf00      	nop
 80095a2:	bf00      	nop
 80095a4:	e7fd      	b.n	80095a2 <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80095a6:	4b21      	ldr	r3, [pc, #132]	@ (800962c <xTaskGenericNotifyFromISR+0x1b4>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d11c      	bne.n	80095e8 <xTaskGenericNotifyFromISR+0x170>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80095ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095b0:	3304      	adds	r3, #4
 80095b2:	4618      	mov	r0, r3
 80095b4:	f7fe ffd2 	bl	800855c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80095b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095bc:	2201      	movs	r2, #1
 80095be:	409a      	lsls	r2, r3
 80095c0:	4b1b      	ldr	r3, [pc, #108]	@ (8009630 <xTaskGenericNotifyFromISR+0x1b8>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	4313      	orrs	r3, r2
 80095c6:	4a1a      	ldr	r2, [pc, #104]	@ (8009630 <xTaskGenericNotifyFromISR+0x1b8>)
 80095c8:	6013      	str	r3, [r2, #0]
 80095ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095ce:	4613      	mov	r3, r2
 80095d0:	009b      	lsls	r3, r3, #2
 80095d2:	4413      	add	r3, r2
 80095d4:	009b      	lsls	r3, r3, #2
 80095d6:	4a17      	ldr	r2, [pc, #92]	@ (8009634 <xTaskGenericNotifyFromISR+0x1bc>)
 80095d8:	441a      	add	r2, r3
 80095da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095dc:	3304      	adds	r3, #4
 80095de:	4619      	mov	r1, r3
 80095e0:	4610      	mov	r0, r2
 80095e2:	f7fe ff5e 	bl	80084a2 <vListInsertEnd>
 80095e6:	e005      	b.n	80095f4 <xTaskGenericNotifyFromISR+0x17c>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80095e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095ea:	3318      	adds	r3, #24
 80095ec:	4619      	mov	r1, r3
 80095ee:	4812      	ldr	r0, [pc, #72]	@ (8009638 <xTaskGenericNotifyFromISR+0x1c0>)
 80095f0:	f7fe ff57 	bl	80084a2 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80095f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095f8:	4b10      	ldr	r3, [pc, #64]	@ (800963c <xTaskGenericNotifyFromISR+0x1c4>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095fe:	429a      	cmp	r2, r3
 8009600:	d908      	bls.n	8009614 <xTaskGenericNotifyFromISR+0x19c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8009602:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009604:	2b00      	cmp	r3, #0
 8009606:	d002      	beq.n	800960e <xTaskGenericNotifyFromISR+0x196>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8009608:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800960a:	2201      	movs	r2, #1
 800960c:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800960e:	4b0c      	ldr	r3, [pc, #48]	@ (8009640 <xTaskGenericNotifyFromISR+0x1c8>)
 8009610:	2201      	movs	r2, #1
 8009612:	601a      	str	r2, [r3, #0]
 8009614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009616:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009618:	693b      	ldr	r3, [r7, #16]
 800961a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800961e:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8009620:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8009622:	4618      	mov	r0, r3
 8009624:	3738      	adds	r7, #56	@ 0x38
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}
 800962a:	bf00      	nop
 800962c:	200084e4 	.word	0x200084e4
 8009630:	200084c4 	.word	0x200084c4
 8009634:	200083c0 	.word	0x200083c0
 8009638:	2000847c 	.word	0x2000847c
 800963c:	200083bc 	.word	0x200083bc
 8009640:	200084d0 	.word	0x200084d0

08009644 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b084      	sub	sp, #16
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
 800964c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800964e:	4b29      	ldr	r3, [pc, #164]	@ (80096f4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009654:	4b28      	ldr	r3, [pc, #160]	@ (80096f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	3304      	adds	r3, #4
 800965a:	4618      	mov	r0, r3
 800965c:	f7fe ff7e 	bl	800855c <uxListRemove>
 8009660:	4603      	mov	r3, r0
 8009662:	2b00      	cmp	r3, #0
 8009664:	d10b      	bne.n	800967e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009666:	4b24      	ldr	r3, [pc, #144]	@ (80096f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800966c:	2201      	movs	r2, #1
 800966e:	fa02 f303 	lsl.w	r3, r2, r3
 8009672:	43da      	mvns	r2, r3
 8009674:	4b21      	ldr	r3, [pc, #132]	@ (80096fc <prvAddCurrentTaskToDelayedList+0xb8>)
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	4013      	ands	r3, r2
 800967a:	4a20      	ldr	r2, [pc, #128]	@ (80096fc <prvAddCurrentTaskToDelayedList+0xb8>)
 800967c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009684:	d10a      	bne.n	800969c <prvAddCurrentTaskToDelayedList+0x58>
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d007      	beq.n	800969c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800968c:	4b1a      	ldr	r3, [pc, #104]	@ (80096f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	3304      	adds	r3, #4
 8009692:	4619      	mov	r1, r3
 8009694:	481a      	ldr	r0, [pc, #104]	@ (8009700 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009696:	f7fe ff04 	bl	80084a2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800969a:	e026      	b.n	80096ea <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800969c:	68fa      	ldr	r2, [r7, #12]
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	4413      	add	r3, r2
 80096a2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80096a4:	4b14      	ldr	r3, [pc, #80]	@ (80096f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	68ba      	ldr	r2, [r7, #8]
 80096aa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80096ac:	68ba      	ldr	r2, [r7, #8]
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	429a      	cmp	r2, r3
 80096b2:	d209      	bcs.n	80096c8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80096b4:	4b13      	ldr	r3, [pc, #76]	@ (8009704 <prvAddCurrentTaskToDelayedList+0xc0>)
 80096b6:	681a      	ldr	r2, [r3, #0]
 80096b8:	4b0f      	ldr	r3, [pc, #60]	@ (80096f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	3304      	adds	r3, #4
 80096be:	4619      	mov	r1, r3
 80096c0:	4610      	mov	r0, r2
 80096c2:	f7fe ff12 	bl	80084ea <vListInsert>
}
 80096c6:	e010      	b.n	80096ea <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80096c8:	4b0f      	ldr	r3, [pc, #60]	@ (8009708 <prvAddCurrentTaskToDelayedList+0xc4>)
 80096ca:	681a      	ldr	r2, [r3, #0]
 80096cc:	4b0a      	ldr	r3, [pc, #40]	@ (80096f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	3304      	adds	r3, #4
 80096d2:	4619      	mov	r1, r3
 80096d4:	4610      	mov	r0, r2
 80096d6:	f7fe ff08 	bl	80084ea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80096da:	4b0c      	ldr	r3, [pc, #48]	@ (800970c <prvAddCurrentTaskToDelayedList+0xc8>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	68ba      	ldr	r2, [r7, #8]
 80096e0:	429a      	cmp	r2, r3
 80096e2:	d202      	bcs.n	80096ea <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80096e4:	4a09      	ldr	r2, [pc, #36]	@ (800970c <prvAddCurrentTaskToDelayedList+0xc8>)
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	6013      	str	r3, [r2, #0]
}
 80096ea:	bf00      	nop
 80096ec:	3710      	adds	r7, #16
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}
 80096f2:	bf00      	nop
 80096f4:	200084c0 	.word	0x200084c0
 80096f8:	200083bc 	.word	0x200083bc
 80096fc:	200084c4 	.word	0x200084c4
 8009700:	200084a8 	.word	0x200084a8
 8009704:	20008478 	.word	0x20008478
 8009708:	20008474 	.word	0x20008474
 800970c:	200084dc 	.word	0x200084dc

08009710 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009710:	b480      	push	{r7}
 8009712:	b085      	sub	sp, #20
 8009714:	af00      	add	r7, sp, #0
 8009716:	60f8      	str	r0, [r7, #12]
 8009718:	60b9      	str	r1, [r7, #8]
 800971a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	3b04      	subs	r3, #4
 8009720:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009728:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	3b04      	subs	r3, #4
 800972e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	f023 0201 	bic.w	r2, r3, #1
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	3b04      	subs	r3, #4
 800973e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009740:	4a0c      	ldr	r2, [pc, #48]	@ (8009774 <pxPortInitialiseStack+0x64>)
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	3b14      	subs	r3, #20
 800974a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800974c:	687a      	ldr	r2, [r7, #4]
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	3b04      	subs	r3, #4
 8009756:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	f06f 0202 	mvn.w	r2, #2
 800975e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	3b20      	subs	r3, #32
 8009764:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009766:	68fb      	ldr	r3, [r7, #12]
}
 8009768:	4618      	mov	r0, r3
 800976a:	3714      	adds	r7, #20
 800976c:	46bd      	mov	sp, r7
 800976e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009772:	4770      	bx	lr
 8009774:	08009779 	.word	0x08009779

08009778 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009778:	b480      	push	{r7}
 800977a:	b085      	sub	sp, #20
 800977c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800977e:	2300      	movs	r3, #0
 8009780:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009782:	4b13      	ldr	r3, [pc, #76]	@ (80097d0 <prvTaskExitError+0x58>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800978a:	d00b      	beq.n	80097a4 <prvTaskExitError+0x2c>
	__asm volatile
 800978c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009790:	f383 8811 	msr	BASEPRI, r3
 8009794:	f3bf 8f6f 	isb	sy
 8009798:	f3bf 8f4f 	dsb	sy
 800979c:	60fb      	str	r3, [r7, #12]
}
 800979e:	bf00      	nop
 80097a0:	bf00      	nop
 80097a2:	e7fd      	b.n	80097a0 <prvTaskExitError+0x28>
	__asm volatile
 80097a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097a8:	f383 8811 	msr	BASEPRI, r3
 80097ac:	f3bf 8f6f 	isb	sy
 80097b0:	f3bf 8f4f 	dsb	sy
 80097b4:	60bb      	str	r3, [r7, #8]
}
 80097b6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80097b8:	bf00      	nop
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d0fc      	beq.n	80097ba <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80097c0:	bf00      	nop
 80097c2:	bf00      	nop
 80097c4:	3714      	adds	r7, #20
 80097c6:	46bd      	mov	sp, r7
 80097c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097cc:	4770      	bx	lr
 80097ce:	bf00      	nop
 80097d0:	20000018 	.word	0x20000018
	...

080097e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80097e0:	4b07      	ldr	r3, [pc, #28]	@ (8009800 <pxCurrentTCBConst2>)
 80097e2:	6819      	ldr	r1, [r3, #0]
 80097e4:	6808      	ldr	r0, [r1, #0]
 80097e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097ea:	f380 8809 	msr	PSP, r0
 80097ee:	f3bf 8f6f 	isb	sy
 80097f2:	f04f 0000 	mov.w	r0, #0
 80097f6:	f380 8811 	msr	BASEPRI, r0
 80097fa:	4770      	bx	lr
 80097fc:	f3af 8000 	nop.w

08009800 <pxCurrentTCBConst2>:
 8009800:	200083bc 	.word	0x200083bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009804:	bf00      	nop
 8009806:	bf00      	nop

08009808 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009808:	4808      	ldr	r0, [pc, #32]	@ (800982c <prvPortStartFirstTask+0x24>)
 800980a:	6800      	ldr	r0, [r0, #0]
 800980c:	6800      	ldr	r0, [r0, #0]
 800980e:	f380 8808 	msr	MSP, r0
 8009812:	f04f 0000 	mov.w	r0, #0
 8009816:	f380 8814 	msr	CONTROL, r0
 800981a:	b662      	cpsie	i
 800981c:	b661      	cpsie	f
 800981e:	f3bf 8f4f 	dsb	sy
 8009822:	f3bf 8f6f 	isb	sy
 8009826:	df00      	svc	0
 8009828:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800982a:	bf00      	nop
 800982c:	e000ed08 	.word	0xe000ed08

08009830 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b086      	sub	sp, #24
 8009834:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009836:	4b47      	ldr	r3, [pc, #284]	@ (8009954 <xPortStartScheduler+0x124>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	4a47      	ldr	r2, [pc, #284]	@ (8009958 <xPortStartScheduler+0x128>)
 800983c:	4293      	cmp	r3, r2
 800983e:	d10b      	bne.n	8009858 <xPortStartScheduler+0x28>
	__asm volatile
 8009840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009844:	f383 8811 	msr	BASEPRI, r3
 8009848:	f3bf 8f6f 	isb	sy
 800984c:	f3bf 8f4f 	dsb	sy
 8009850:	613b      	str	r3, [r7, #16]
}
 8009852:	bf00      	nop
 8009854:	bf00      	nop
 8009856:	e7fd      	b.n	8009854 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009858:	4b3e      	ldr	r3, [pc, #248]	@ (8009954 <xPortStartScheduler+0x124>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	4a3f      	ldr	r2, [pc, #252]	@ (800995c <xPortStartScheduler+0x12c>)
 800985e:	4293      	cmp	r3, r2
 8009860:	d10b      	bne.n	800987a <xPortStartScheduler+0x4a>
	__asm volatile
 8009862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009866:	f383 8811 	msr	BASEPRI, r3
 800986a:	f3bf 8f6f 	isb	sy
 800986e:	f3bf 8f4f 	dsb	sy
 8009872:	60fb      	str	r3, [r7, #12]
}
 8009874:	bf00      	nop
 8009876:	bf00      	nop
 8009878:	e7fd      	b.n	8009876 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800987a:	4b39      	ldr	r3, [pc, #228]	@ (8009960 <xPortStartScheduler+0x130>)
 800987c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800987e:	697b      	ldr	r3, [r7, #20]
 8009880:	781b      	ldrb	r3, [r3, #0]
 8009882:	b2db      	uxtb	r3, r3
 8009884:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009886:	697b      	ldr	r3, [r7, #20]
 8009888:	22ff      	movs	r2, #255	@ 0xff
 800988a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800988c:	697b      	ldr	r3, [r7, #20]
 800988e:	781b      	ldrb	r3, [r3, #0]
 8009890:	b2db      	uxtb	r3, r3
 8009892:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009894:	78fb      	ldrb	r3, [r7, #3]
 8009896:	b2db      	uxtb	r3, r3
 8009898:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800989c:	b2da      	uxtb	r2, r3
 800989e:	4b31      	ldr	r3, [pc, #196]	@ (8009964 <xPortStartScheduler+0x134>)
 80098a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80098a2:	4b31      	ldr	r3, [pc, #196]	@ (8009968 <xPortStartScheduler+0x138>)
 80098a4:	2207      	movs	r2, #7
 80098a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80098a8:	e009      	b.n	80098be <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80098aa:	4b2f      	ldr	r3, [pc, #188]	@ (8009968 <xPortStartScheduler+0x138>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	3b01      	subs	r3, #1
 80098b0:	4a2d      	ldr	r2, [pc, #180]	@ (8009968 <xPortStartScheduler+0x138>)
 80098b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80098b4:	78fb      	ldrb	r3, [r7, #3]
 80098b6:	b2db      	uxtb	r3, r3
 80098b8:	005b      	lsls	r3, r3, #1
 80098ba:	b2db      	uxtb	r3, r3
 80098bc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80098be:	78fb      	ldrb	r3, [r7, #3]
 80098c0:	b2db      	uxtb	r3, r3
 80098c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80098c6:	2b80      	cmp	r3, #128	@ 0x80
 80098c8:	d0ef      	beq.n	80098aa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80098ca:	4b27      	ldr	r3, [pc, #156]	@ (8009968 <xPortStartScheduler+0x138>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f1c3 0307 	rsb	r3, r3, #7
 80098d2:	2b04      	cmp	r3, #4
 80098d4:	d00b      	beq.n	80098ee <xPortStartScheduler+0xbe>
	__asm volatile
 80098d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098da:	f383 8811 	msr	BASEPRI, r3
 80098de:	f3bf 8f6f 	isb	sy
 80098e2:	f3bf 8f4f 	dsb	sy
 80098e6:	60bb      	str	r3, [r7, #8]
}
 80098e8:	bf00      	nop
 80098ea:	bf00      	nop
 80098ec:	e7fd      	b.n	80098ea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80098ee:	4b1e      	ldr	r3, [pc, #120]	@ (8009968 <xPortStartScheduler+0x138>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	021b      	lsls	r3, r3, #8
 80098f4:	4a1c      	ldr	r2, [pc, #112]	@ (8009968 <xPortStartScheduler+0x138>)
 80098f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80098f8:	4b1b      	ldr	r3, [pc, #108]	@ (8009968 <xPortStartScheduler+0x138>)
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009900:	4a19      	ldr	r2, [pc, #100]	@ (8009968 <xPortStartScheduler+0x138>)
 8009902:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	b2da      	uxtb	r2, r3
 8009908:	697b      	ldr	r3, [r7, #20]
 800990a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800990c:	4b17      	ldr	r3, [pc, #92]	@ (800996c <xPortStartScheduler+0x13c>)
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	4a16      	ldr	r2, [pc, #88]	@ (800996c <xPortStartScheduler+0x13c>)
 8009912:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009916:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009918:	4b14      	ldr	r3, [pc, #80]	@ (800996c <xPortStartScheduler+0x13c>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	4a13      	ldr	r2, [pc, #76]	@ (800996c <xPortStartScheduler+0x13c>)
 800991e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009922:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009924:	f000 f8da 	bl	8009adc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009928:	4b11      	ldr	r3, [pc, #68]	@ (8009970 <xPortStartScheduler+0x140>)
 800992a:	2200      	movs	r2, #0
 800992c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800992e:	f000 f8f9 	bl	8009b24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009932:	4b10      	ldr	r3, [pc, #64]	@ (8009974 <xPortStartScheduler+0x144>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	4a0f      	ldr	r2, [pc, #60]	@ (8009974 <xPortStartScheduler+0x144>)
 8009938:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800993c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800993e:	f7ff ff63 	bl	8009808 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009942:	f7ff fb0f 	bl	8008f64 <vTaskSwitchContext>
	prvTaskExitError();
 8009946:	f7ff ff17 	bl	8009778 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800994a:	2300      	movs	r3, #0
}
 800994c:	4618      	mov	r0, r3
 800994e:	3718      	adds	r7, #24
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}
 8009954:	e000ed00 	.word	0xe000ed00
 8009958:	410fc271 	.word	0x410fc271
 800995c:	410fc270 	.word	0x410fc270
 8009960:	e000e400 	.word	0xe000e400
 8009964:	200084e8 	.word	0x200084e8
 8009968:	200084ec 	.word	0x200084ec
 800996c:	e000ed20 	.word	0xe000ed20
 8009970:	20000018 	.word	0x20000018
 8009974:	e000ef34 	.word	0xe000ef34

08009978 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009978:	b480      	push	{r7}
 800997a:	b083      	sub	sp, #12
 800997c:	af00      	add	r7, sp, #0
	__asm volatile
 800997e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009982:	f383 8811 	msr	BASEPRI, r3
 8009986:	f3bf 8f6f 	isb	sy
 800998a:	f3bf 8f4f 	dsb	sy
 800998e:	607b      	str	r3, [r7, #4]
}
 8009990:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009992:	4b10      	ldr	r3, [pc, #64]	@ (80099d4 <vPortEnterCritical+0x5c>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	3301      	adds	r3, #1
 8009998:	4a0e      	ldr	r2, [pc, #56]	@ (80099d4 <vPortEnterCritical+0x5c>)
 800999a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800999c:	4b0d      	ldr	r3, [pc, #52]	@ (80099d4 <vPortEnterCritical+0x5c>)
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	2b01      	cmp	r3, #1
 80099a2:	d110      	bne.n	80099c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80099a4:	4b0c      	ldr	r3, [pc, #48]	@ (80099d8 <vPortEnterCritical+0x60>)
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	b2db      	uxtb	r3, r3
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d00b      	beq.n	80099c6 <vPortEnterCritical+0x4e>
	__asm volatile
 80099ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099b2:	f383 8811 	msr	BASEPRI, r3
 80099b6:	f3bf 8f6f 	isb	sy
 80099ba:	f3bf 8f4f 	dsb	sy
 80099be:	603b      	str	r3, [r7, #0]
}
 80099c0:	bf00      	nop
 80099c2:	bf00      	nop
 80099c4:	e7fd      	b.n	80099c2 <vPortEnterCritical+0x4a>
	}
}
 80099c6:	bf00      	nop
 80099c8:	370c      	adds	r7, #12
 80099ca:	46bd      	mov	sp, r7
 80099cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d0:	4770      	bx	lr
 80099d2:	bf00      	nop
 80099d4:	20000018 	.word	0x20000018
 80099d8:	e000ed04 	.word	0xe000ed04

080099dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80099dc:	b480      	push	{r7}
 80099de:	b083      	sub	sp, #12
 80099e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80099e2:	4b12      	ldr	r3, [pc, #72]	@ (8009a2c <vPortExitCritical+0x50>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d10b      	bne.n	8009a02 <vPortExitCritical+0x26>
	__asm volatile
 80099ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099ee:	f383 8811 	msr	BASEPRI, r3
 80099f2:	f3bf 8f6f 	isb	sy
 80099f6:	f3bf 8f4f 	dsb	sy
 80099fa:	607b      	str	r3, [r7, #4]
}
 80099fc:	bf00      	nop
 80099fe:	bf00      	nop
 8009a00:	e7fd      	b.n	80099fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009a02:	4b0a      	ldr	r3, [pc, #40]	@ (8009a2c <vPortExitCritical+0x50>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	3b01      	subs	r3, #1
 8009a08:	4a08      	ldr	r2, [pc, #32]	@ (8009a2c <vPortExitCritical+0x50>)
 8009a0a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009a0c:	4b07      	ldr	r3, [pc, #28]	@ (8009a2c <vPortExitCritical+0x50>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d105      	bne.n	8009a20 <vPortExitCritical+0x44>
 8009a14:	2300      	movs	r3, #0
 8009a16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	f383 8811 	msr	BASEPRI, r3
}
 8009a1e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009a20:	bf00      	nop
 8009a22:	370c      	adds	r7, #12
 8009a24:	46bd      	mov	sp, r7
 8009a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2a:	4770      	bx	lr
 8009a2c:	20000018 	.word	0x20000018

08009a30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009a30:	f3ef 8009 	mrs	r0, PSP
 8009a34:	f3bf 8f6f 	isb	sy
 8009a38:	4b15      	ldr	r3, [pc, #84]	@ (8009a90 <pxCurrentTCBConst>)
 8009a3a:	681a      	ldr	r2, [r3, #0]
 8009a3c:	f01e 0f10 	tst.w	lr, #16
 8009a40:	bf08      	it	eq
 8009a42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009a46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a4a:	6010      	str	r0, [r2, #0]
 8009a4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009a50:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009a54:	f380 8811 	msr	BASEPRI, r0
 8009a58:	f3bf 8f4f 	dsb	sy
 8009a5c:	f3bf 8f6f 	isb	sy
 8009a60:	f7ff fa80 	bl	8008f64 <vTaskSwitchContext>
 8009a64:	f04f 0000 	mov.w	r0, #0
 8009a68:	f380 8811 	msr	BASEPRI, r0
 8009a6c:	bc09      	pop	{r0, r3}
 8009a6e:	6819      	ldr	r1, [r3, #0]
 8009a70:	6808      	ldr	r0, [r1, #0]
 8009a72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a76:	f01e 0f10 	tst.w	lr, #16
 8009a7a:	bf08      	it	eq
 8009a7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009a80:	f380 8809 	msr	PSP, r0
 8009a84:	f3bf 8f6f 	isb	sy
 8009a88:	4770      	bx	lr
 8009a8a:	bf00      	nop
 8009a8c:	f3af 8000 	nop.w

08009a90 <pxCurrentTCBConst>:
 8009a90:	200083bc 	.word	0x200083bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009a94:	bf00      	nop
 8009a96:	bf00      	nop

08009a98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b082      	sub	sp, #8
 8009a9c:	af00      	add	r7, sp, #0
	__asm volatile
 8009a9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aa2:	f383 8811 	msr	BASEPRI, r3
 8009aa6:	f3bf 8f6f 	isb	sy
 8009aaa:	f3bf 8f4f 	dsb	sy
 8009aae:	607b      	str	r3, [r7, #4]
}
 8009ab0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009ab2:	f7ff f99d 	bl	8008df0 <xTaskIncrementTick>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d003      	beq.n	8009ac4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009abc:	4b06      	ldr	r3, [pc, #24]	@ (8009ad8 <SysTick_Handler+0x40>)
 8009abe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ac2:	601a      	str	r2, [r3, #0]
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	f383 8811 	msr	BASEPRI, r3
}
 8009ace:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009ad0:	bf00      	nop
 8009ad2:	3708      	adds	r7, #8
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	bd80      	pop	{r7, pc}
 8009ad8:	e000ed04 	.word	0xe000ed04

08009adc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009adc:	b480      	push	{r7}
 8009ade:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8009b10 <vPortSetupTimerInterrupt+0x34>)
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009ae6:	4b0b      	ldr	r3, [pc, #44]	@ (8009b14 <vPortSetupTimerInterrupt+0x38>)
 8009ae8:	2200      	movs	r2, #0
 8009aea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009aec:	4b0a      	ldr	r3, [pc, #40]	@ (8009b18 <vPortSetupTimerInterrupt+0x3c>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	4a0a      	ldr	r2, [pc, #40]	@ (8009b1c <vPortSetupTimerInterrupt+0x40>)
 8009af2:	fba2 2303 	umull	r2, r3, r2, r3
 8009af6:	099b      	lsrs	r3, r3, #6
 8009af8:	4a09      	ldr	r2, [pc, #36]	@ (8009b20 <vPortSetupTimerInterrupt+0x44>)
 8009afa:	3b01      	subs	r3, #1
 8009afc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009afe:	4b04      	ldr	r3, [pc, #16]	@ (8009b10 <vPortSetupTimerInterrupt+0x34>)
 8009b00:	2207      	movs	r2, #7
 8009b02:	601a      	str	r2, [r3, #0]
}
 8009b04:	bf00      	nop
 8009b06:	46bd      	mov	sp, r7
 8009b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0c:	4770      	bx	lr
 8009b0e:	bf00      	nop
 8009b10:	e000e010 	.word	0xe000e010
 8009b14:	e000e018 	.word	0xe000e018
 8009b18:	20000004 	.word	0x20000004
 8009b1c:	10624dd3 	.word	0x10624dd3
 8009b20:	e000e014 	.word	0xe000e014

08009b24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009b24:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009b34 <vPortEnableVFP+0x10>
 8009b28:	6801      	ldr	r1, [r0, #0]
 8009b2a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009b2e:	6001      	str	r1, [r0, #0]
 8009b30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009b32:	bf00      	nop
 8009b34:	e000ed88 	.word	0xe000ed88

08009b38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009b38:	b480      	push	{r7}
 8009b3a:	b085      	sub	sp, #20
 8009b3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009b3e:	f3ef 8305 	mrs	r3, IPSR
 8009b42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	2b0f      	cmp	r3, #15
 8009b48:	d915      	bls.n	8009b76 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009b4a:	4a18      	ldr	r2, [pc, #96]	@ (8009bac <vPortValidateInterruptPriority+0x74>)
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	4413      	add	r3, r2
 8009b50:	781b      	ldrb	r3, [r3, #0]
 8009b52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009b54:	4b16      	ldr	r3, [pc, #88]	@ (8009bb0 <vPortValidateInterruptPriority+0x78>)
 8009b56:	781b      	ldrb	r3, [r3, #0]
 8009b58:	7afa      	ldrb	r2, [r7, #11]
 8009b5a:	429a      	cmp	r2, r3
 8009b5c:	d20b      	bcs.n	8009b76 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8009b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b62:	f383 8811 	msr	BASEPRI, r3
 8009b66:	f3bf 8f6f 	isb	sy
 8009b6a:	f3bf 8f4f 	dsb	sy
 8009b6e:	607b      	str	r3, [r7, #4]
}
 8009b70:	bf00      	nop
 8009b72:	bf00      	nop
 8009b74:	e7fd      	b.n	8009b72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009b76:	4b0f      	ldr	r3, [pc, #60]	@ (8009bb4 <vPortValidateInterruptPriority+0x7c>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009b7e:	4b0e      	ldr	r3, [pc, #56]	@ (8009bb8 <vPortValidateInterruptPriority+0x80>)
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	429a      	cmp	r2, r3
 8009b84:	d90b      	bls.n	8009b9e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b8a:	f383 8811 	msr	BASEPRI, r3
 8009b8e:	f3bf 8f6f 	isb	sy
 8009b92:	f3bf 8f4f 	dsb	sy
 8009b96:	603b      	str	r3, [r7, #0]
}
 8009b98:	bf00      	nop
 8009b9a:	bf00      	nop
 8009b9c:	e7fd      	b.n	8009b9a <vPortValidateInterruptPriority+0x62>
	}
 8009b9e:	bf00      	nop
 8009ba0:	3714      	adds	r7, #20
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba8:	4770      	bx	lr
 8009baa:	bf00      	nop
 8009bac:	e000e3f0 	.word	0xe000e3f0
 8009bb0:	200084e8 	.word	0x200084e8
 8009bb4:	e000ed0c 	.word	0xe000ed0c
 8009bb8:	200084ec 	.word	0x200084ec

08009bbc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b08a      	sub	sp, #40	@ 0x28
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009bc8:	f7ff f866 	bl	8008c98 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009bcc:	4b5c      	ldr	r3, [pc, #368]	@ (8009d40 <pvPortMalloc+0x184>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d101      	bne.n	8009bd8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009bd4:	f000 f924 	bl	8009e20 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009bd8:	4b5a      	ldr	r3, [pc, #360]	@ (8009d44 <pvPortMalloc+0x188>)
 8009bda:	681a      	ldr	r2, [r3, #0]
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	4013      	ands	r3, r2
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	f040 8095 	bne.w	8009d10 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d01e      	beq.n	8009c2a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009bec:	2208      	movs	r2, #8
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	4413      	add	r3, r2
 8009bf2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f003 0307 	and.w	r3, r3, #7
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d015      	beq.n	8009c2a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	f023 0307 	bic.w	r3, r3, #7
 8009c04:	3308      	adds	r3, #8
 8009c06:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f003 0307 	and.w	r3, r3, #7
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d00b      	beq.n	8009c2a <pvPortMalloc+0x6e>
	__asm volatile
 8009c12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c16:	f383 8811 	msr	BASEPRI, r3
 8009c1a:	f3bf 8f6f 	isb	sy
 8009c1e:	f3bf 8f4f 	dsb	sy
 8009c22:	617b      	str	r3, [r7, #20]
}
 8009c24:	bf00      	nop
 8009c26:	bf00      	nop
 8009c28:	e7fd      	b.n	8009c26 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d06f      	beq.n	8009d10 <pvPortMalloc+0x154>
 8009c30:	4b45      	ldr	r3, [pc, #276]	@ (8009d48 <pvPortMalloc+0x18c>)
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	687a      	ldr	r2, [r7, #4]
 8009c36:	429a      	cmp	r2, r3
 8009c38:	d86a      	bhi.n	8009d10 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009c3a:	4b44      	ldr	r3, [pc, #272]	@ (8009d4c <pvPortMalloc+0x190>)
 8009c3c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009c3e:	4b43      	ldr	r3, [pc, #268]	@ (8009d4c <pvPortMalloc+0x190>)
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009c44:	e004      	b.n	8009c50 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c48:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c52:	685b      	ldr	r3, [r3, #4]
 8009c54:	687a      	ldr	r2, [r7, #4]
 8009c56:	429a      	cmp	r2, r3
 8009c58:	d903      	bls.n	8009c62 <pvPortMalloc+0xa6>
 8009c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d1f1      	bne.n	8009c46 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009c62:	4b37      	ldr	r3, [pc, #220]	@ (8009d40 <pvPortMalloc+0x184>)
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c68:	429a      	cmp	r2, r3
 8009c6a:	d051      	beq.n	8009d10 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009c6c:	6a3b      	ldr	r3, [r7, #32]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	2208      	movs	r2, #8
 8009c72:	4413      	add	r3, r2
 8009c74:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c78:	681a      	ldr	r2, [r3, #0]
 8009c7a:	6a3b      	ldr	r3, [r7, #32]
 8009c7c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c80:	685a      	ldr	r2, [r3, #4]
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	1ad2      	subs	r2, r2, r3
 8009c86:	2308      	movs	r3, #8
 8009c88:	005b      	lsls	r3, r3, #1
 8009c8a:	429a      	cmp	r2, r3
 8009c8c:	d920      	bls.n	8009cd0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009c8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	4413      	add	r3, r2
 8009c94:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c96:	69bb      	ldr	r3, [r7, #24]
 8009c98:	f003 0307 	and.w	r3, r3, #7
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d00b      	beq.n	8009cb8 <pvPortMalloc+0xfc>
	__asm volatile
 8009ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ca4:	f383 8811 	msr	BASEPRI, r3
 8009ca8:	f3bf 8f6f 	isb	sy
 8009cac:	f3bf 8f4f 	dsb	sy
 8009cb0:	613b      	str	r3, [r7, #16]
}
 8009cb2:	bf00      	nop
 8009cb4:	bf00      	nop
 8009cb6:	e7fd      	b.n	8009cb4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cba:	685a      	ldr	r2, [r3, #4]
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	1ad2      	subs	r2, r2, r3
 8009cc0:	69bb      	ldr	r3, [r7, #24]
 8009cc2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cc6:	687a      	ldr	r2, [r7, #4]
 8009cc8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009cca:	69b8      	ldr	r0, [r7, #24]
 8009ccc:	f000 f90a 	bl	8009ee4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009cd0:	4b1d      	ldr	r3, [pc, #116]	@ (8009d48 <pvPortMalloc+0x18c>)
 8009cd2:	681a      	ldr	r2, [r3, #0]
 8009cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cd6:	685b      	ldr	r3, [r3, #4]
 8009cd8:	1ad3      	subs	r3, r2, r3
 8009cda:	4a1b      	ldr	r2, [pc, #108]	@ (8009d48 <pvPortMalloc+0x18c>)
 8009cdc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009cde:	4b1a      	ldr	r3, [pc, #104]	@ (8009d48 <pvPortMalloc+0x18c>)
 8009ce0:	681a      	ldr	r2, [r3, #0]
 8009ce2:	4b1b      	ldr	r3, [pc, #108]	@ (8009d50 <pvPortMalloc+0x194>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	429a      	cmp	r2, r3
 8009ce8:	d203      	bcs.n	8009cf2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009cea:	4b17      	ldr	r3, [pc, #92]	@ (8009d48 <pvPortMalloc+0x18c>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	4a18      	ldr	r2, [pc, #96]	@ (8009d50 <pvPortMalloc+0x194>)
 8009cf0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cf4:	685a      	ldr	r2, [r3, #4]
 8009cf6:	4b13      	ldr	r3, [pc, #76]	@ (8009d44 <pvPortMalloc+0x188>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	431a      	orrs	r2, r3
 8009cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cfe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d02:	2200      	movs	r2, #0
 8009d04:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009d06:	4b13      	ldr	r3, [pc, #76]	@ (8009d54 <pvPortMalloc+0x198>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	3301      	adds	r3, #1
 8009d0c:	4a11      	ldr	r2, [pc, #68]	@ (8009d54 <pvPortMalloc+0x198>)
 8009d0e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009d10:	f7fe ffd0 	bl	8008cb4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d14:	69fb      	ldr	r3, [r7, #28]
 8009d16:	f003 0307 	and.w	r3, r3, #7
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d00b      	beq.n	8009d36 <pvPortMalloc+0x17a>
	__asm volatile
 8009d1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d22:	f383 8811 	msr	BASEPRI, r3
 8009d26:	f3bf 8f6f 	isb	sy
 8009d2a:	f3bf 8f4f 	dsb	sy
 8009d2e:	60fb      	str	r3, [r7, #12]
}
 8009d30:	bf00      	nop
 8009d32:	bf00      	nop
 8009d34:	e7fd      	b.n	8009d32 <pvPortMalloc+0x176>
	return pvReturn;
 8009d36:	69fb      	ldr	r3, [r7, #28]
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	3728      	adds	r7, #40	@ 0x28
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd80      	pop	{r7, pc}
 8009d40:	2000c0f8 	.word	0x2000c0f8
 8009d44:	2000c10c 	.word	0x2000c10c
 8009d48:	2000c0fc 	.word	0x2000c0fc
 8009d4c:	2000c0f0 	.word	0x2000c0f0
 8009d50:	2000c100 	.word	0x2000c100
 8009d54:	2000c104 	.word	0x2000c104

08009d58 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b086      	sub	sp, #24
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d04f      	beq.n	8009e0a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009d6a:	2308      	movs	r3, #8
 8009d6c:	425b      	negs	r3, r3
 8009d6e:	697a      	ldr	r2, [r7, #20]
 8009d70:	4413      	add	r3, r2
 8009d72:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009d74:	697b      	ldr	r3, [r7, #20]
 8009d76:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009d78:	693b      	ldr	r3, [r7, #16]
 8009d7a:	685a      	ldr	r2, [r3, #4]
 8009d7c:	4b25      	ldr	r3, [pc, #148]	@ (8009e14 <vPortFree+0xbc>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	4013      	ands	r3, r2
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d10b      	bne.n	8009d9e <vPortFree+0x46>
	__asm volatile
 8009d86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d8a:	f383 8811 	msr	BASEPRI, r3
 8009d8e:	f3bf 8f6f 	isb	sy
 8009d92:	f3bf 8f4f 	dsb	sy
 8009d96:	60fb      	str	r3, [r7, #12]
}
 8009d98:	bf00      	nop
 8009d9a:	bf00      	nop
 8009d9c:	e7fd      	b.n	8009d9a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009d9e:	693b      	ldr	r3, [r7, #16]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d00b      	beq.n	8009dbe <vPortFree+0x66>
	__asm volatile
 8009da6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009daa:	f383 8811 	msr	BASEPRI, r3
 8009dae:	f3bf 8f6f 	isb	sy
 8009db2:	f3bf 8f4f 	dsb	sy
 8009db6:	60bb      	str	r3, [r7, #8]
}
 8009db8:	bf00      	nop
 8009dba:	bf00      	nop
 8009dbc:	e7fd      	b.n	8009dba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009dbe:	693b      	ldr	r3, [r7, #16]
 8009dc0:	685a      	ldr	r2, [r3, #4]
 8009dc2:	4b14      	ldr	r3, [pc, #80]	@ (8009e14 <vPortFree+0xbc>)
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	4013      	ands	r3, r2
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d01e      	beq.n	8009e0a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009dcc:	693b      	ldr	r3, [r7, #16]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d11a      	bne.n	8009e0a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009dd4:	693b      	ldr	r3, [r7, #16]
 8009dd6:	685a      	ldr	r2, [r3, #4]
 8009dd8:	4b0e      	ldr	r3, [pc, #56]	@ (8009e14 <vPortFree+0xbc>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	43db      	mvns	r3, r3
 8009dde:	401a      	ands	r2, r3
 8009de0:	693b      	ldr	r3, [r7, #16]
 8009de2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009de4:	f7fe ff58 	bl	8008c98 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009de8:	693b      	ldr	r3, [r7, #16]
 8009dea:	685a      	ldr	r2, [r3, #4]
 8009dec:	4b0a      	ldr	r3, [pc, #40]	@ (8009e18 <vPortFree+0xc0>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	4413      	add	r3, r2
 8009df2:	4a09      	ldr	r2, [pc, #36]	@ (8009e18 <vPortFree+0xc0>)
 8009df4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009df6:	6938      	ldr	r0, [r7, #16]
 8009df8:	f000 f874 	bl	8009ee4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009dfc:	4b07      	ldr	r3, [pc, #28]	@ (8009e1c <vPortFree+0xc4>)
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	3301      	adds	r3, #1
 8009e02:	4a06      	ldr	r2, [pc, #24]	@ (8009e1c <vPortFree+0xc4>)
 8009e04:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009e06:	f7fe ff55 	bl	8008cb4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009e0a:	bf00      	nop
 8009e0c:	3718      	adds	r7, #24
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}
 8009e12:	bf00      	nop
 8009e14:	2000c10c 	.word	0x2000c10c
 8009e18:	2000c0fc 	.word	0x2000c0fc
 8009e1c:	2000c108 	.word	0x2000c108

08009e20 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009e20:	b480      	push	{r7}
 8009e22:	b085      	sub	sp, #20
 8009e24:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009e26:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8009e2a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009e2c:	4b27      	ldr	r3, [pc, #156]	@ (8009ecc <prvHeapInit+0xac>)
 8009e2e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	f003 0307 	and.w	r3, r3, #7
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d00c      	beq.n	8009e54 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	3307      	adds	r3, #7
 8009e3e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	f023 0307 	bic.w	r3, r3, #7
 8009e46:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009e48:	68ba      	ldr	r2, [r7, #8]
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	1ad3      	subs	r3, r2, r3
 8009e4e:	4a1f      	ldr	r2, [pc, #124]	@ (8009ecc <prvHeapInit+0xac>)
 8009e50:	4413      	add	r3, r2
 8009e52:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009e58:	4a1d      	ldr	r2, [pc, #116]	@ (8009ed0 <prvHeapInit+0xb0>)
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009e5e:	4b1c      	ldr	r3, [pc, #112]	@ (8009ed0 <prvHeapInit+0xb0>)
 8009e60:	2200      	movs	r2, #0
 8009e62:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	68ba      	ldr	r2, [r7, #8]
 8009e68:	4413      	add	r3, r2
 8009e6a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009e6c:	2208      	movs	r2, #8
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	1a9b      	subs	r3, r3, r2
 8009e72:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	f023 0307 	bic.w	r3, r3, #7
 8009e7a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	4a15      	ldr	r2, [pc, #84]	@ (8009ed4 <prvHeapInit+0xb4>)
 8009e80:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009e82:	4b14      	ldr	r3, [pc, #80]	@ (8009ed4 <prvHeapInit+0xb4>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	2200      	movs	r2, #0
 8009e88:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009e8a:	4b12      	ldr	r3, [pc, #72]	@ (8009ed4 <prvHeapInit+0xb4>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	2200      	movs	r2, #0
 8009e90:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	68fa      	ldr	r2, [r7, #12]
 8009e9a:	1ad2      	subs	r2, r2, r3
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009ea0:	4b0c      	ldr	r3, [pc, #48]	@ (8009ed4 <prvHeapInit+0xb4>)
 8009ea2:	681a      	ldr	r2, [r3, #0]
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	685b      	ldr	r3, [r3, #4]
 8009eac:	4a0a      	ldr	r2, [pc, #40]	@ (8009ed8 <prvHeapInit+0xb8>)
 8009eae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	685b      	ldr	r3, [r3, #4]
 8009eb4:	4a09      	ldr	r2, [pc, #36]	@ (8009edc <prvHeapInit+0xbc>)
 8009eb6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009eb8:	4b09      	ldr	r3, [pc, #36]	@ (8009ee0 <prvHeapInit+0xc0>)
 8009eba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009ebe:	601a      	str	r2, [r3, #0]
}
 8009ec0:	bf00      	nop
 8009ec2:	3714      	adds	r7, #20
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eca:	4770      	bx	lr
 8009ecc:	200084f0 	.word	0x200084f0
 8009ed0:	2000c0f0 	.word	0x2000c0f0
 8009ed4:	2000c0f8 	.word	0x2000c0f8
 8009ed8:	2000c100 	.word	0x2000c100
 8009edc:	2000c0fc 	.word	0x2000c0fc
 8009ee0:	2000c10c 	.word	0x2000c10c

08009ee4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b085      	sub	sp, #20
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009eec:	4b28      	ldr	r3, [pc, #160]	@ (8009f90 <prvInsertBlockIntoFreeList+0xac>)
 8009eee:	60fb      	str	r3, [r7, #12]
 8009ef0:	e002      	b.n	8009ef8 <prvInsertBlockIntoFreeList+0x14>
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	60fb      	str	r3, [r7, #12]
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	687a      	ldr	r2, [r7, #4]
 8009efe:	429a      	cmp	r2, r3
 8009f00:	d8f7      	bhi.n	8009ef2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	685b      	ldr	r3, [r3, #4]
 8009f0a:	68ba      	ldr	r2, [r7, #8]
 8009f0c:	4413      	add	r3, r2
 8009f0e:	687a      	ldr	r2, [r7, #4]
 8009f10:	429a      	cmp	r2, r3
 8009f12:	d108      	bne.n	8009f26 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	685a      	ldr	r2, [r3, #4]
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	685b      	ldr	r3, [r3, #4]
 8009f1c:	441a      	add	r2, r3
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	685b      	ldr	r3, [r3, #4]
 8009f2e:	68ba      	ldr	r2, [r7, #8]
 8009f30:	441a      	add	r2, r3
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	429a      	cmp	r2, r3
 8009f38:	d118      	bne.n	8009f6c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	681a      	ldr	r2, [r3, #0]
 8009f3e:	4b15      	ldr	r3, [pc, #84]	@ (8009f94 <prvInsertBlockIntoFreeList+0xb0>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	429a      	cmp	r2, r3
 8009f44:	d00d      	beq.n	8009f62 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	685a      	ldr	r2, [r3, #4]
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	685b      	ldr	r3, [r3, #4]
 8009f50:	441a      	add	r2, r3
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	681a      	ldr	r2, [r3, #0]
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	601a      	str	r2, [r3, #0]
 8009f60:	e008      	b.n	8009f74 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009f62:	4b0c      	ldr	r3, [pc, #48]	@ (8009f94 <prvInsertBlockIntoFreeList+0xb0>)
 8009f64:	681a      	ldr	r2, [r3, #0]
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	601a      	str	r2, [r3, #0]
 8009f6a:	e003      	b.n	8009f74 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	681a      	ldr	r2, [r3, #0]
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009f74:	68fa      	ldr	r2, [r7, #12]
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	429a      	cmp	r2, r3
 8009f7a:	d002      	beq.n	8009f82 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	687a      	ldr	r2, [r7, #4]
 8009f80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f82:	bf00      	nop
 8009f84:	3714      	adds	r7, #20
 8009f86:	46bd      	mov	sp, r7
 8009f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8c:	4770      	bx	lr
 8009f8e:	bf00      	nop
 8009f90:	2000c0f0 	.word	0x2000c0f0
 8009f94:	2000c0f8 	.word	0x2000c0f8

08009f98 <rcl_get_zero_initialized_node>:
 8009f98:	4a03      	ldr	r2, [pc, #12]	@ (8009fa8 <rcl_get_zero_initialized_node+0x10>)
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009fa0:	e883 0003 	stmia.w	r3, {r0, r1}
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	4770      	bx	lr
 8009fa8:	08019e34 	.word	0x08019e34

08009fac <rcl_node_init>:
 8009fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fb0:	b0a9      	sub	sp, #164	@ 0xa4
 8009fb2:	4604      	mov	r4, r0
 8009fb4:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 8009fb8:	a823      	add	r0, sp, #140	@ 0x8c
 8009fba:	460e      	mov	r6, r1
 8009fbc:	4615      	mov	r5, r2
 8009fbe:	461f      	mov	r7, r3
 8009fc0:	f006 fa08 	bl	80103d4 <rcl_guard_condition_get_default_options>
 8009fc4:	f1b8 0f00 	cmp.w	r8, #0
 8009fc8:	f000 80e6 	beq.w	800a198 <rcl_node_init+0x1ec>
 8009fcc:	4640      	mov	r0, r8
 8009fce:	f001 fbdf 	bl	800b790 <rcutils_allocator_is_valid>
 8009fd2:	2800      	cmp	r0, #0
 8009fd4:	f000 80e0 	beq.w	800a198 <rcl_node_init+0x1ec>
 8009fd8:	2e00      	cmp	r6, #0
 8009fda:	f000 80dd 	beq.w	800a198 <rcl_node_init+0x1ec>
 8009fde:	2d00      	cmp	r5, #0
 8009fe0:	f000 80da 	beq.w	800a198 <rcl_node_init+0x1ec>
 8009fe4:	2c00      	cmp	r4, #0
 8009fe6:	f000 80d7 	beq.w	800a198 <rcl_node_init+0x1ec>
 8009fea:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8009fee:	f1b9 0f00 	cmp.w	r9, #0
 8009ff2:	f040 80fd 	bne.w	800a1f0 <rcl_node_init+0x244>
 8009ff6:	2f00      	cmp	r7, #0
 8009ff8:	f000 80ce 	beq.w	800a198 <rcl_node_init+0x1ec>
 8009ffc:	4638      	mov	r0, r7
 8009ffe:	f006 f8f3 	bl	80101e8 <rcl_context_is_valid>
 800a002:	4682      	mov	sl, r0
 800a004:	2800      	cmp	r0, #0
 800a006:	f000 80cd 	beq.w	800a1a4 <rcl_node_init+0x1f8>
 800a00a:	464a      	mov	r2, r9
 800a00c:	a922      	add	r1, sp, #136	@ 0x88
 800a00e:	4630      	mov	r0, r6
 800a010:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 800a014:	f001 fe54 	bl	800bcc0 <rmw_validate_node_name>
 800a018:	4681      	mov	r9, r0
 800a01a:	2800      	cmp	r0, #0
 800a01c:	f040 80be 	bne.w	800a19c <rcl_node_init+0x1f0>
 800a020:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800a022:	2800      	cmp	r0, #0
 800a024:	f040 80f0 	bne.w	800a208 <rcl_node_init+0x25c>
 800a028:	4628      	mov	r0, r5
 800a02a:	f7f6 f951 	bl	80002d0 <strlen>
 800a02e:	2800      	cmp	r0, #0
 800a030:	f040 80bb 	bne.w	800a1aa <rcl_node_init+0x1fe>
 800a034:	4d7c      	ldr	r5, [pc, #496]	@ (800a228 <rcl_node_init+0x27c>)
 800a036:	a922      	add	r1, sp, #136	@ 0x88
 800a038:	2200      	movs	r2, #0
 800a03a:	4628      	mov	r0, r5
 800a03c:	f001 fe22 	bl	800bc84 <rmw_validate_namespace>
 800a040:	4681      	mov	r9, r0
 800a042:	2800      	cmp	r0, #0
 800a044:	f040 80aa 	bne.w	800a19c <rcl_node_init+0x1f0>
 800a048:	4682      	mov	sl, r0
 800a04a:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800a04c:	2800      	cmp	r0, #0
 800a04e:	f040 80e0 	bne.w	800a212 <rcl_node_init+0x266>
 800a052:	f8d8 3000 	ldr.w	r3, [r8]
 800a056:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800a05a:	2078      	movs	r0, #120	@ 0x78
 800a05c:	4798      	blx	r3
 800a05e:	4681      	mov	r9, r0
 800a060:	6060      	str	r0, [r4, #4]
 800a062:	2800      	cmp	r0, #0
 800a064:	f000 80ca 	beq.w	800a1fc <rcl_node_init+0x250>
 800a068:	2200      	movs	r2, #0
 800a06a:	2300      	movs	r3, #0
 800a06c:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 800a070:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 800a074:	a808      	add	r0, sp, #32
 800a076:	f000 f939 	bl	800a2ec <rcl_node_get_default_options>
 800a07a:	a908      	add	r1, sp, #32
 800a07c:	4648      	mov	r0, r9
 800a07e:	2268      	movs	r2, #104	@ 0x68
 800a080:	f00d fef5 	bl	8017e6e <memcpy>
 800a084:	6861      	ldr	r1, [r4, #4]
 800a086:	6027      	str	r7, [r4, #0]
 800a088:	4640      	mov	r0, r8
 800a08a:	f000 f93d 	bl	800a308 <rcl_node_options_copy>
 800a08e:	2800      	cmp	r0, #0
 800a090:	d158      	bne.n	800a144 <rcl_node_init+0x198>
 800a092:	4628      	mov	r0, r5
 800a094:	f7f6 f91c 	bl	80002d0 <strlen>
 800a098:	4428      	add	r0, r5
 800a09a:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800a09e:	e9cd 5603 	strd	r5, r6, [sp, #12]
 800a0a2:	2b2f      	cmp	r3, #47	@ 0x2f
 800a0a4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800a0a8:	9300      	str	r3, [sp, #0]
 800a0aa:	bf0c      	ite	eq
 800a0ac:	4b5f      	ldreq	r3, [pc, #380]	@ (800a22c <rcl_node_init+0x280>)
 800a0ae:	4b60      	ldrne	r3, [pc, #384]	@ (800a230 <rcl_node_init+0x284>)
 800a0b0:	9302      	str	r3, [sp, #8]
 800a0b2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a0b6:	9301      	str	r3, [sp, #4]
 800a0b8:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800a0bc:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800a0c0:	f001 fbbe 	bl	800b840 <rcutils_format_string_limit>
 800a0c4:	6823      	ldr	r3, [r4, #0]
 800a0c6:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 800a0ca:	6818      	ldr	r0, [r3, #0]
 800a0cc:	4631      	mov	r1, r6
 800a0ce:	3028      	adds	r0, #40	@ 0x28
 800a0d0:	462a      	mov	r2, r5
 800a0d2:	6866      	ldr	r6, [r4, #4]
 800a0d4:	f001 fee2 	bl	800be9c <rmw_create_node>
 800a0d8:	6863      	ldr	r3, [r4, #4]
 800a0da:	66b0      	str	r0, [r6, #104]	@ 0x68
 800a0dc:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800a0de:	2800      	cmp	r0, #0
 800a0e0:	d032      	beq.n	800a148 <rcl_node_init+0x19c>
 800a0e2:	f001 ff6f 	bl	800bfc4 <rmw_node_get_graph_guard_condition>
 800a0e6:	4681      	mov	r9, r0
 800a0e8:	b360      	cbz	r0, 800a144 <rcl_node_init+0x198>
 800a0ea:	f8d8 3000 	ldr.w	r3, [r8]
 800a0ee:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800a0f2:	6866      	ldr	r6, [r4, #4]
 800a0f4:	2008      	movs	r0, #8
 800a0f6:	4798      	blx	r3
 800a0f8:	6863      	ldr	r3, [r4, #4]
 800a0fa:	66f0      	str	r0, [r6, #108]	@ 0x6c
 800a0fc:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 800a100:	f1bb 0f00 	cmp.w	fp, #0
 800a104:	d020      	beq.n	800a148 <rcl_node_init+0x19c>
 800a106:	a806      	add	r0, sp, #24
 800a108:	f006 f8d4 	bl	80102b4 <rcl_get_zero_initialized_guard_condition>
 800a10c:	a806      	add	r0, sp, #24
 800a10e:	c803      	ldmia	r0, {r0, r1}
 800a110:	6863      	ldr	r3, [r4, #4]
 800a112:	46c4      	mov	ip, r8
 800a114:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 800a118:	e88b 0003 	stmia.w	fp, {r0, r1}
 800a11c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a120:	ae23      	add	r6, sp, #140	@ 0x8c
 800a122:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a124:	f8dc 3000 	ldr.w	r3, [ip]
 800a128:	6033      	str	r3, [r6, #0]
 800a12a:	ab28      	add	r3, sp, #160	@ 0xa0
 800a12c:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800a130:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800a134:	4649      	mov	r1, r9
 800a136:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a138:	463a      	mov	r2, r7
 800a13a:	4670      	mov	r0, lr
 800a13c:	f006 f8c4 	bl	80102c8 <rcl_guard_condition_init_from_rmw>
 800a140:	4681      	mov	r9, r0
 800a142:	b328      	cbz	r0, 800a190 <rcl_node_init+0x1e4>
 800a144:	6863      	ldr	r3, [r4, #4]
 800a146:	b1f3      	cbz	r3, 800a186 <rcl_node_init+0x1da>
 800a148:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800a14a:	b128      	cbz	r0, 800a158 <rcl_node_init+0x1ac>
 800a14c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a150:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800a154:	4798      	blx	r3
 800a156:	6863      	ldr	r3, [r4, #4]
 800a158:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800a15a:	b110      	cbz	r0, 800a162 <rcl_node_init+0x1b6>
 800a15c:	f001 feb6 	bl	800becc <rmw_destroy_node>
 800a160:	6863      	ldr	r3, [r4, #4]
 800a162:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800a164:	b148      	cbz	r0, 800a17a <rcl_node_init+0x1ce>
 800a166:	f006 f90f 	bl	8010388 <rcl_guard_condition_fini>
 800a16a:	6863      	ldr	r3, [r4, #4]
 800a16c:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800a170:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800a172:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a176:	4798      	blx	r3
 800a178:	6863      	ldr	r3, [r4, #4]
 800a17a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800a17e:	4618      	mov	r0, r3
 800a180:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a184:	4798      	blx	r3
 800a186:	2300      	movs	r3, #0
 800a188:	e9c4 3300 	strd	r3, r3, [r4]
 800a18c:	f04f 0901 	mov.w	r9, #1
 800a190:	f1ba 0f00 	cmp.w	sl, #0
 800a194:	d125      	bne.n	800a1e2 <rcl_node_init+0x236>
 800a196:	e001      	b.n	800a19c <rcl_node_init+0x1f0>
 800a198:	f04f 090b 	mov.w	r9, #11
 800a19c:	4648      	mov	r0, r9
 800a19e:	b029      	add	sp, #164	@ 0xa4
 800a1a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1a4:	f04f 0965 	mov.w	r9, #101	@ 0x65
 800a1a8:	e7f8      	b.n	800a19c <rcl_node_init+0x1f0>
 800a1aa:	782b      	ldrb	r3, [r5, #0]
 800a1ac:	2b2f      	cmp	r3, #47	@ 0x2f
 800a1ae:	f43f af42 	beq.w	800a036 <rcl_node_init+0x8a>
 800a1b2:	9503      	str	r5, [sp, #12]
 800a1b4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800a1b8:	9300      	str	r3, [sp, #0]
 800a1ba:	4b1e      	ldr	r3, [pc, #120]	@ (800a234 <rcl_node_init+0x288>)
 800a1bc:	9302      	str	r3, [sp, #8]
 800a1be:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a1c2:	9301      	str	r3, [sp, #4]
 800a1c4:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800a1c8:	f001 fb3a 	bl	800b840 <rcutils_format_string_limit>
 800a1cc:	4605      	mov	r5, r0
 800a1ce:	b340      	cbz	r0, 800a222 <rcl_node_init+0x276>
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	a922      	add	r1, sp, #136	@ 0x88
 800a1d4:	9222      	str	r2, [sp, #136]	@ 0x88
 800a1d6:	f001 fd55 	bl	800bc84 <rmw_validate_namespace>
 800a1da:	4681      	mov	r9, r0
 800a1dc:	2800      	cmp	r0, #0
 800a1de:	f43f af34 	beq.w	800a04a <rcl_node_init+0x9e>
 800a1e2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a1e6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800a1ea:	4628      	mov	r0, r5
 800a1ec:	4798      	blx	r3
 800a1ee:	e7d5      	b.n	800a19c <rcl_node_init+0x1f0>
 800a1f0:	f04f 0964 	mov.w	r9, #100	@ 0x64
 800a1f4:	4648      	mov	r0, r9
 800a1f6:	b029      	add	sp, #164	@ 0xa4
 800a1f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1fc:	f04f 090a 	mov.w	r9, #10
 800a200:	f1ba 0f00 	cmp.w	sl, #0
 800a204:	d1ed      	bne.n	800a1e2 <rcl_node_init+0x236>
 800a206:	e7c9      	b.n	800a19c <rcl_node_init+0x1f0>
 800a208:	f001 fdac 	bl	800bd64 <rmw_node_name_validation_result_string>
 800a20c:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 800a210:	e7c4      	b.n	800a19c <rcl_node_init+0x1f0>
 800a212:	f001 fd49 	bl	800bca8 <rmw_namespace_validation_result_string>
 800a216:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 800a21a:	f1ba 0f00 	cmp.w	sl, #0
 800a21e:	d1e0      	bne.n	800a1e2 <rcl_node_init+0x236>
 800a220:	e7bc      	b.n	800a19c <rcl_node_init+0x1f0>
 800a222:	f04f 090a 	mov.w	r9, #10
 800a226:	e7b9      	b.n	800a19c <rcl_node_init+0x1f0>
 800a228:	08019e1c 	.word	0x08019e1c
 800a22c:	08019e24 	.word	0x08019e24
 800a230:	08019e2c 	.word	0x08019e2c
 800a234:	08019e20 	.word	0x08019e20

0800a238 <rcl_node_fini>:
 800a238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a23a:	b320      	cbz	r0, 800a286 <rcl_node_fini+0x4e>
 800a23c:	6845      	ldr	r5, [r0, #4]
 800a23e:	4604      	mov	r4, r0
 800a240:	b1fd      	cbz	r5, 800a282 <rcl_node_fini+0x4a>
 800a242:	6ea8      	ldr	r0, [r5, #104]	@ 0x68
 800a244:	686f      	ldr	r7, [r5, #4]
 800a246:	692e      	ldr	r6, [r5, #16]
 800a248:	f001 fe40 	bl	800becc <rmw_destroy_node>
 800a24c:	6863      	ldr	r3, [r4, #4]
 800a24e:	4605      	mov	r5, r0
 800a250:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800a252:	f006 f899 	bl	8010388 <rcl_guard_condition_fini>
 800a256:	ea55 0300 	orrs.w	r3, r5, r0
 800a25a:	6863      	ldr	r3, [r4, #4]
 800a25c:	4631      	mov	r1, r6
 800a25e:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800a260:	bf14      	ite	ne
 800a262:	2501      	movne	r5, #1
 800a264:	2500      	moveq	r5, #0
 800a266:	47b8      	blx	r7
 800a268:	6863      	ldr	r3, [r4, #4]
 800a26a:	4631      	mov	r1, r6
 800a26c:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800a26e:	47b8      	blx	r7
 800a270:	6863      	ldr	r3, [r4, #4]
 800a272:	4631      	mov	r1, r6
 800a274:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800a276:	47b8      	blx	r7
 800a278:	6860      	ldr	r0, [r4, #4]
 800a27a:	4631      	mov	r1, r6
 800a27c:	47b8      	blx	r7
 800a27e:	2300      	movs	r3, #0
 800a280:	6063      	str	r3, [r4, #4]
 800a282:	4628      	mov	r0, r5
 800a284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a286:	25c8      	movs	r5, #200	@ 0xc8
 800a288:	4628      	mov	r0, r5
 800a28a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a28c <rcl_node_is_valid_except_context>:
 800a28c:	b128      	cbz	r0, 800a29a <rcl_node_is_valid_except_context+0xe>
 800a28e:	6840      	ldr	r0, [r0, #4]
 800a290:	b118      	cbz	r0, 800a29a <rcl_node_is_valid_except_context+0xe>
 800a292:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800a294:	3800      	subs	r0, #0
 800a296:	bf18      	it	ne
 800a298:	2001      	movne	r0, #1
 800a29a:	4770      	bx	lr

0800a29c <rcl_node_is_valid>:
 800a29c:	b130      	cbz	r0, 800a2ac <rcl_node_is_valid+0x10>
 800a29e:	6843      	ldr	r3, [r0, #4]
 800a2a0:	b123      	cbz	r3, 800a2ac <rcl_node_is_valid+0x10>
 800a2a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a2a4:	b113      	cbz	r3, 800a2ac <rcl_node_is_valid+0x10>
 800a2a6:	6800      	ldr	r0, [r0, #0]
 800a2a8:	f005 bf9e 	b.w	80101e8 <rcl_context_is_valid>
 800a2ac:	2000      	movs	r0, #0
 800a2ae:	4770      	bx	lr

0800a2b0 <rcl_node_get_name>:
 800a2b0:	b120      	cbz	r0, 800a2bc <rcl_node_get_name+0xc>
 800a2b2:	6840      	ldr	r0, [r0, #4]
 800a2b4:	b110      	cbz	r0, 800a2bc <rcl_node_get_name+0xc>
 800a2b6:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800a2b8:	b100      	cbz	r0, 800a2bc <rcl_node_get_name+0xc>
 800a2ba:	6880      	ldr	r0, [r0, #8]
 800a2bc:	4770      	bx	lr
 800a2be:	bf00      	nop

0800a2c0 <rcl_node_get_namespace>:
 800a2c0:	b120      	cbz	r0, 800a2cc <rcl_node_get_namespace+0xc>
 800a2c2:	6840      	ldr	r0, [r0, #4]
 800a2c4:	b110      	cbz	r0, 800a2cc <rcl_node_get_namespace+0xc>
 800a2c6:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800a2c8:	b100      	cbz	r0, 800a2cc <rcl_node_get_namespace+0xc>
 800a2ca:	68c0      	ldr	r0, [r0, #12]
 800a2cc:	4770      	bx	lr
 800a2ce:	bf00      	nop

0800a2d0 <rcl_node_get_options>:
 800a2d0:	b128      	cbz	r0, 800a2de <rcl_node_get_options+0xe>
 800a2d2:	6840      	ldr	r0, [r0, #4]
 800a2d4:	b118      	cbz	r0, 800a2de <rcl_node_get_options+0xe>
 800a2d6:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	bf08      	it	eq
 800a2dc:	2000      	moveq	r0, #0
 800a2de:	4770      	bx	lr

0800a2e0 <rcl_node_get_rmw_handle>:
 800a2e0:	b110      	cbz	r0, 800a2e8 <rcl_node_get_rmw_handle+0x8>
 800a2e2:	6840      	ldr	r0, [r0, #4]
 800a2e4:	b100      	cbz	r0, 800a2e8 <rcl_node_get_rmw_handle+0x8>
 800a2e6:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800a2e8:	4770      	bx	lr
 800a2ea:	bf00      	nop

0800a2ec <rcl_node_get_default_options>:
 800a2ec:	b510      	push	{r4, lr}
 800a2ee:	2268      	movs	r2, #104	@ 0x68
 800a2f0:	4604      	mov	r4, r0
 800a2f2:	2100      	movs	r1, #0
 800a2f4:	f00d fc98 	bl	8017c28 <memset>
 800a2f8:	4620      	mov	r0, r4
 800a2fa:	f001 fa3b 	bl	800b774 <rcutils_get_default_allocator>
 800a2fe:	2301      	movs	r3, #1
 800a300:	7523      	strb	r3, [r4, #20]
 800a302:	4620      	mov	r0, r4
 800a304:	bd10      	pop	{r4, pc}
 800a306:	bf00      	nop

0800a308 <rcl_node_options_copy>:
 800a308:	b1d0      	cbz	r0, 800a340 <rcl_node_options_copy+0x38>
 800a30a:	b570      	push	{r4, r5, r6, lr}
 800a30c:	460c      	mov	r4, r1
 800a30e:	b1a9      	cbz	r1, 800a33c <rcl_node_options_copy+0x34>
 800a310:	4288      	cmp	r0, r1
 800a312:	4684      	mov	ip, r0
 800a314:	d012      	beq.n	800a33c <rcl_node_options_copy+0x34>
 800a316:	4605      	mov	r5, r0
 800a318:	8a86      	ldrh	r6, [r0, #20]
 800a31a:	468e      	mov	lr, r1
 800a31c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a31e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a322:	682b      	ldr	r3, [r5, #0]
 800a324:	f8ce 3000 	str.w	r3, [lr]
 800a328:	f10c 0118 	add.w	r1, ip, #24
 800a32c:	2250      	movs	r2, #80	@ 0x50
 800a32e:	82a6      	strh	r6, [r4, #20]
 800a330:	f104 0018 	add.w	r0, r4, #24
 800a334:	f00d fd9b 	bl	8017e6e <memcpy>
 800a338:	2000      	movs	r0, #0
 800a33a:	bd70      	pop	{r4, r5, r6, pc}
 800a33c:	200b      	movs	r0, #11
 800a33e:	bd70      	pop	{r4, r5, r6, pc}
 800a340:	200b      	movs	r0, #11
 800a342:	4770      	bx	lr

0800a344 <rcl_get_zero_initialized_publisher>:
 800a344:	4b01      	ldr	r3, [pc, #4]	@ (800a34c <rcl_get_zero_initialized_publisher+0x8>)
 800a346:	6818      	ldr	r0, [r3, #0]
 800a348:	4770      	bx	lr
 800a34a:	bf00      	nop
 800a34c:	08019e3c 	.word	0x08019e3c

0800a350 <rcl_publisher_init>:
 800a350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a354:	b088      	sub	sp, #32
 800a356:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800a358:	2d00      	cmp	r5, #0
 800a35a:	d069      	beq.n	800a430 <rcl_publisher_init+0xe0>
 800a35c:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800a360:	4604      	mov	r4, r0
 800a362:	4648      	mov	r0, r9
 800a364:	460e      	mov	r6, r1
 800a366:	4690      	mov	r8, r2
 800a368:	461f      	mov	r7, r3
 800a36a:	f001 fa11 	bl	800b790 <rcutils_allocator_is_valid>
 800a36e:	2800      	cmp	r0, #0
 800a370:	d05e      	beq.n	800a430 <rcl_publisher_init+0xe0>
 800a372:	2c00      	cmp	r4, #0
 800a374:	d05c      	beq.n	800a430 <rcl_publisher_init+0xe0>
 800a376:	f8d4 a000 	ldr.w	sl, [r4]
 800a37a:	f1ba 0f00 	cmp.w	sl, #0
 800a37e:	d004      	beq.n	800a38a <rcl_publisher_init+0x3a>
 800a380:	2764      	movs	r7, #100	@ 0x64
 800a382:	4638      	mov	r0, r7
 800a384:	b008      	add	sp, #32
 800a386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a38a:	4630      	mov	r0, r6
 800a38c:	f7ff ff86 	bl	800a29c <rcl_node_is_valid>
 800a390:	2800      	cmp	r0, #0
 800a392:	d052      	beq.n	800a43a <rcl_publisher_init+0xea>
 800a394:	f1b8 0f00 	cmp.w	r8, #0
 800a398:	d04a      	beq.n	800a430 <rcl_publisher_init+0xe0>
 800a39a:	2f00      	cmp	r7, #0
 800a39c:	d048      	beq.n	800a430 <rcl_publisher_init+0xe0>
 800a39e:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800a3a2:	aa07      	add	r2, sp, #28
 800a3a4:	9205      	str	r2, [sp, #20]
 800a3a6:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800a3aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a3ae:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800a3b2:	f8cd a01c 	str.w	sl, [sp, #28]
 800a3b6:	4639      	mov	r1, r7
 800a3b8:	e899 000c 	ldmia.w	r9, {r2, r3}
 800a3bc:	4630      	mov	r0, r6
 800a3be:	f006 fa4f 	bl	8010860 <rcl_node_resolve_name>
 800a3c2:	4607      	mov	r7, r0
 800a3c4:	2800      	cmp	r0, #0
 800a3c6:	d14f      	bne.n	800a468 <rcl_publisher_init+0x118>
 800a3c8:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800a3ca:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800a3cc:	20c8      	movs	r0, #200	@ 0xc8
 800a3ce:	4798      	blx	r3
 800a3d0:	6020      	str	r0, [r4, #0]
 800a3d2:	2800      	cmp	r0, #0
 800a3d4:	d04e      	beq.n	800a474 <rcl_publisher_init+0x124>
 800a3d6:	4630      	mov	r0, r6
 800a3d8:	f7ff ff82 	bl	800a2e0 <rcl_node_get_rmw_handle>
 800a3dc:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800a3e0:	9300      	str	r3, [sp, #0]
 800a3e2:	9a07      	ldr	r2, [sp, #28]
 800a3e4:	6827      	ldr	r7, [r4, #0]
 800a3e6:	462b      	mov	r3, r5
 800a3e8:	4641      	mov	r1, r8
 800a3ea:	f001 fe55 	bl	800c098 <rmw_create_publisher>
 800a3ee:	6823      	ldr	r3, [r4, #0]
 800a3f0:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800a3f4:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800a3f8:	b370      	cbz	r0, 800a458 <rcl_publisher_init+0x108>
 800a3fa:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800a3fe:	f001 ff29 	bl	800c254 <rmw_publisher_get_actual_qos>
 800a402:	6823      	ldr	r3, [r4, #0]
 800a404:	4607      	mov	r7, r0
 800a406:	b9d0      	cbnz	r0, 800a43e <rcl_publisher_init+0xee>
 800a408:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800a40c:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800a410:	4629      	mov	r1, r5
 800a412:	2270      	movs	r2, #112	@ 0x70
 800a414:	4618      	mov	r0, r3
 800a416:	f00d fd2a 	bl	8017e6e <memcpy>
 800a41a:	6832      	ldr	r2, [r6, #0]
 800a41c:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800a420:	9807      	ldr	r0, [sp, #28]
 800a422:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800a424:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800a426:	4798      	blx	r3
 800a428:	4638      	mov	r0, r7
 800a42a:	b008      	add	sp, #32
 800a42c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a430:	270b      	movs	r7, #11
 800a432:	4638      	mov	r0, r7
 800a434:	b008      	add	sp, #32
 800a436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a43a:	27c8      	movs	r7, #200	@ 0xc8
 800a43c:	e7a1      	b.n	800a382 <rcl_publisher_init+0x32>
 800a43e:	b18b      	cbz	r3, 800a464 <rcl_publisher_init+0x114>
 800a440:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800a444:	b142      	cbz	r2, 800a458 <rcl_publisher_init+0x108>
 800a446:	4630      	mov	r0, r6
 800a448:	f7ff ff4a 	bl	800a2e0 <rcl_node_get_rmw_handle>
 800a44c:	6823      	ldr	r3, [r4, #0]
 800a44e:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800a452:	f001 ff0f 	bl	800c274 <rmw_destroy_publisher>
 800a456:	6823      	ldr	r3, [r4, #0]
 800a458:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800a45a:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800a45c:	4618      	mov	r0, r3
 800a45e:	4790      	blx	r2
 800a460:	2300      	movs	r3, #0
 800a462:	6023      	str	r3, [r4, #0]
 800a464:	2701      	movs	r7, #1
 800a466:	e7db      	b.n	800a420 <rcl_publisher_init+0xd0>
 800a468:	2867      	cmp	r0, #103	@ 0x67
 800a46a:	d0d9      	beq.n	800a420 <rcl_publisher_init+0xd0>
 800a46c:	2869      	cmp	r0, #105	@ 0x69
 800a46e:	d003      	beq.n	800a478 <rcl_publisher_init+0x128>
 800a470:	280a      	cmp	r0, #10
 800a472:	d1f7      	bne.n	800a464 <rcl_publisher_init+0x114>
 800a474:	270a      	movs	r7, #10
 800a476:	e7d3      	b.n	800a420 <rcl_publisher_init+0xd0>
 800a478:	2767      	movs	r7, #103	@ 0x67
 800a47a:	e7d1      	b.n	800a420 <rcl_publisher_init+0xd0>

0800a47c <rcl_publisher_fini>:
 800a47c:	b570      	push	{r4, r5, r6, lr}
 800a47e:	b300      	cbz	r0, 800a4c2 <rcl_publisher_fini+0x46>
 800a480:	4604      	mov	r4, r0
 800a482:	4608      	mov	r0, r1
 800a484:	460d      	mov	r5, r1
 800a486:	f7ff ff01 	bl	800a28c <rcl_node_is_valid_except_context>
 800a48a:	b1f0      	cbz	r0, 800a4ca <rcl_publisher_fini+0x4e>
 800a48c:	6823      	ldr	r3, [r4, #0]
 800a48e:	b1ab      	cbz	r3, 800a4bc <rcl_publisher_fini+0x40>
 800a490:	4628      	mov	r0, r5
 800a492:	6d5e      	ldr	r6, [r3, #84]	@ 0x54
 800a494:	6e1d      	ldr	r5, [r3, #96]	@ 0x60
 800a496:	f7ff ff23 	bl	800a2e0 <rcl_node_get_rmw_handle>
 800a49a:	b1c8      	cbz	r0, 800a4d0 <rcl_publisher_fini+0x54>
 800a49c:	6823      	ldr	r3, [r4, #0]
 800a49e:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800a4a2:	f001 fee7 	bl	800c274 <rmw_destroy_publisher>
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	4629      	mov	r1, r5
 800a4aa:	6820      	ldr	r0, [r4, #0]
 800a4ac:	1e1d      	subs	r5, r3, #0
 800a4ae:	bf18      	it	ne
 800a4b0:	2501      	movne	r5, #1
 800a4b2:	47b0      	blx	r6
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	6023      	str	r3, [r4, #0]
 800a4b8:	4628      	mov	r0, r5
 800a4ba:	bd70      	pop	{r4, r5, r6, pc}
 800a4bc:	461d      	mov	r5, r3
 800a4be:	4628      	mov	r0, r5
 800a4c0:	bd70      	pop	{r4, r5, r6, pc}
 800a4c2:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 800a4c6:	4628      	mov	r0, r5
 800a4c8:	bd70      	pop	{r4, r5, r6, pc}
 800a4ca:	25c8      	movs	r5, #200	@ 0xc8
 800a4cc:	4628      	mov	r0, r5
 800a4ce:	bd70      	pop	{r4, r5, r6, pc}
 800a4d0:	250b      	movs	r5, #11
 800a4d2:	e7f1      	b.n	800a4b8 <rcl_publisher_fini+0x3c>

0800a4d4 <rcl_publisher_get_default_options>:
 800a4d4:	b570      	push	{r4, r5, r6, lr}
 800a4d6:	4d14      	ldr	r5, [pc, #80]	@ (800a528 <rcl_publisher_get_default_options+0x54>)
 800a4d8:	4914      	ldr	r1, [pc, #80]	@ (800a52c <rcl_publisher_get_default_options+0x58>)
 800a4da:	b088      	sub	sp, #32
 800a4dc:	4604      	mov	r4, r0
 800a4de:	2250      	movs	r2, #80	@ 0x50
 800a4e0:	4628      	mov	r0, r5
 800a4e2:	f00d fcc4 	bl	8017e6e <memcpy>
 800a4e6:	a802      	add	r0, sp, #8
 800a4e8:	f001 f944 	bl	800b774 <rcutils_get_default_allocator>
 800a4ec:	f10d 0c08 	add.w	ip, sp, #8
 800a4f0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a4f4:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800a4f8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a4fc:	466e      	mov	r6, sp
 800a4fe:	f8dc 3000 	ldr.w	r3, [ip]
 800a502:	f8ce 3000 	str.w	r3, [lr]
 800a506:	4630      	mov	r0, r6
 800a508:	f001 fb42 	bl	800bb90 <rmw_get_default_publisher_options>
 800a50c:	e896 0003 	ldmia.w	r6, {r0, r1}
 800a510:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800a514:	e883 0003 	stmia.w	r3, {r0, r1}
 800a518:	2270      	movs	r2, #112	@ 0x70
 800a51a:	4629      	mov	r1, r5
 800a51c:	4620      	mov	r0, r4
 800a51e:	f00d fca6 	bl	8017e6e <memcpy>
 800a522:	4620      	mov	r0, r4
 800a524:	b008      	add	sp, #32
 800a526:	bd70      	pop	{r4, r5, r6, pc}
 800a528:	2000c110 	.word	0x2000c110
 800a52c:	08019e40 	.word	0x08019e40

0800a530 <rcl_publish>:
 800a530:	b1f8      	cbz	r0, 800a572 <rcl_publish+0x42>
 800a532:	6803      	ldr	r3, [r0, #0]
 800a534:	b570      	push	{r4, r5, r6, lr}
 800a536:	4604      	mov	r4, r0
 800a538:	b1b3      	cbz	r3, 800a568 <rcl_publish+0x38>
 800a53a:	4616      	mov	r6, r2
 800a53c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800a540:	b192      	cbz	r2, 800a568 <rcl_publish+0x38>
 800a542:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800a546:	460d      	mov	r5, r1
 800a548:	f005 fe4e 	bl	80101e8 <rcl_context_is_valid>
 800a54c:	b160      	cbz	r0, 800a568 <rcl_publish+0x38>
 800a54e:	6823      	ldr	r3, [r4, #0]
 800a550:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800a554:	b140      	cbz	r0, 800a568 <rcl_publish+0x38>
 800a556:	b155      	cbz	r5, 800a56e <rcl_publish+0x3e>
 800a558:	4632      	mov	r2, r6
 800a55a:	4629      	mov	r1, r5
 800a55c:	f001 fd3c 	bl	800bfd8 <rmw_publish>
 800a560:	3800      	subs	r0, #0
 800a562:	bf18      	it	ne
 800a564:	2001      	movne	r0, #1
 800a566:	bd70      	pop	{r4, r5, r6, pc}
 800a568:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800a56c:	bd70      	pop	{r4, r5, r6, pc}
 800a56e:	200b      	movs	r0, #11
 800a570:	bd70      	pop	{r4, r5, r6, pc}
 800a572:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800a576:	4770      	bx	lr

0800a578 <rcl_publisher_is_valid>:
 800a578:	b1a0      	cbz	r0, 800a5a4 <rcl_publisher_is_valid+0x2c>
 800a57a:	6803      	ldr	r3, [r0, #0]
 800a57c:	b510      	push	{r4, lr}
 800a57e:	4604      	mov	r4, r0
 800a580:	b173      	cbz	r3, 800a5a0 <rcl_publisher_is_valid+0x28>
 800a582:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800a586:	b15a      	cbz	r2, 800a5a0 <rcl_publisher_is_valid+0x28>
 800a588:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800a58c:	f005 fe2c 	bl	80101e8 <rcl_context_is_valid>
 800a590:	b130      	cbz	r0, 800a5a0 <rcl_publisher_is_valid+0x28>
 800a592:	6823      	ldr	r3, [r4, #0]
 800a594:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800a598:	3800      	subs	r0, #0
 800a59a:	bf18      	it	ne
 800a59c:	2001      	movne	r0, #1
 800a59e:	bd10      	pop	{r4, pc}
 800a5a0:	2000      	movs	r0, #0
 800a5a2:	bd10      	pop	{r4, pc}
 800a5a4:	2000      	movs	r0, #0
 800a5a6:	4770      	bx	lr

0800a5a8 <rcl_publisher_is_valid_except_context>:
 800a5a8:	b130      	cbz	r0, 800a5b8 <rcl_publisher_is_valid_except_context+0x10>
 800a5aa:	6800      	ldr	r0, [r0, #0]
 800a5ac:	b120      	cbz	r0, 800a5b8 <rcl_publisher_is_valid_except_context+0x10>
 800a5ae:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800a5b2:	3800      	subs	r0, #0
 800a5b4:	bf18      	it	ne
 800a5b6:	2001      	movne	r0, #1
 800a5b8:	4770      	bx	lr
 800a5ba:	bf00      	nop

0800a5bc <rcl_get_zero_initialized_subscription>:
 800a5bc:	4b01      	ldr	r3, [pc, #4]	@ (800a5c4 <rcl_get_zero_initialized_subscription+0x8>)
 800a5be:	6818      	ldr	r0, [r3, #0]
 800a5c0:	4770      	bx	lr
 800a5c2:	bf00      	nop
 800a5c4:	08019e90 	.word	0x08019e90

0800a5c8 <rcl_subscription_init>:
 800a5c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a5cc:	b089      	sub	sp, #36	@ 0x24
 800a5ce:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800a5d0:	b1d6      	cbz	r6, 800a608 <rcl_subscription_init+0x40>
 800a5d2:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 800a5d6:	4604      	mov	r4, r0
 800a5d8:	4648      	mov	r0, r9
 800a5da:	460d      	mov	r5, r1
 800a5dc:	4690      	mov	r8, r2
 800a5de:	461f      	mov	r7, r3
 800a5e0:	f001 f8d6 	bl	800b790 <rcutils_allocator_is_valid>
 800a5e4:	b180      	cbz	r0, 800a608 <rcl_subscription_init+0x40>
 800a5e6:	b17c      	cbz	r4, 800a608 <rcl_subscription_init+0x40>
 800a5e8:	4628      	mov	r0, r5
 800a5ea:	f7ff fe57 	bl	800a29c <rcl_node_is_valid>
 800a5ee:	2800      	cmp	r0, #0
 800a5f0:	d054      	beq.n	800a69c <rcl_subscription_init+0xd4>
 800a5f2:	f1b8 0f00 	cmp.w	r8, #0
 800a5f6:	d007      	beq.n	800a608 <rcl_subscription_init+0x40>
 800a5f8:	b137      	cbz	r7, 800a608 <rcl_subscription_init+0x40>
 800a5fa:	6823      	ldr	r3, [r4, #0]
 800a5fc:	b14b      	cbz	r3, 800a612 <rcl_subscription_init+0x4a>
 800a5fe:	2764      	movs	r7, #100	@ 0x64
 800a600:	4638      	mov	r0, r7
 800a602:	b009      	add	sp, #36	@ 0x24
 800a604:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a608:	270b      	movs	r7, #11
 800a60a:	4638      	mov	r0, r7
 800a60c:	b009      	add	sp, #36	@ 0x24
 800a60e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a612:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800a616:	aa07      	add	r2, sp, #28
 800a618:	9205      	str	r2, [sp, #20]
 800a61a:	9307      	str	r3, [sp, #28]
 800a61c:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 800a620:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a624:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800a628:	4639      	mov	r1, r7
 800a62a:	e899 000c 	ldmia.w	r9, {r2, r3}
 800a62e:	4628      	mov	r0, r5
 800a630:	f006 f916 	bl	8010860 <rcl_node_resolve_name>
 800a634:	4607      	mov	r7, r0
 800a636:	2800      	cmp	r0, #0
 800a638:	d15f      	bne.n	800a6fa <rcl_subscription_init+0x132>
 800a63a:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	@ 0x5c
 800a63e:	21c8      	movs	r1, #200	@ 0xc8
 800a640:	2001      	movs	r0, #1
 800a642:	4798      	blx	r3
 800a644:	6020      	str	r0, [r4, #0]
 800a646:	2800      	cmp	r0, #0
 800a648:	d05d      	beq.n	800a706 <rcl_subscription_init+0x13e>
 800a64a:	4628      	mov	r0, r5
 800a64c:	f7ff fe48 	bl	800a2e0 <rcl_node_get_rmw_handle>
 800a650:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 800a654:	9300      	str	r3, [sp, #0]
 800a656:	9a07      	ldr	r2, [sp, #28]
 800a658:	6827      	ldr	r7, [r4, #0]
 800a65a:	4641      	mov	r1, r8
 800a65c:	4633      	mov	r3, r6
 800a65e:	f001 fe9f 	bl	800c3a0 <rmw_create_subscription>
 800a662:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
 800a666:	6827      	ldr	r7, [r4, #0]
 800a668:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 800a66c:	b348      	cbz	r0, 800a6c2 <rcl_subscription_init+0xfa>
 800a66e:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 800a672:	f001 ff77 	bl	800c564 <rmw_subscription_get_actual_qos>
 800a676:	4607      	mov	r7, r0
 800a678:	b9a8      	cbnz	r0, 800a6a6 <rcl_subscription_init+0xde>
 800a67a:	6820      	ldr	r0, [r4, #0]
 800a67c:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 800a680:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 800a684:	2270      	movs	r2, #112	@ 0x70
 800a686:	4631      	mov	r1, r6
 800a688:	f00d fbf1 	bl	8017e6e <memcpy>
 800a68c:	9807      	ldr	r0, [sp, #28]
 800a68e:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800a690:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800a692:	4798      	blx	r3
 800a694:	4638      	mov	r0, r7
 800a696:	b009      	add	sp, #36	@ 0x24
 800a698:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a69c:	27c8      	movs	r7, #200	@ 0xc8
 800a69e:	4638      	mov	r0, r7
 800a6a0:	b009      	add	sp, #36	@ 0x24
 800a6a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a6a6:	6827      	ldr	r7, [r4, #0]
 800a6a8:	b32f      	cbz	r7, 800a6f6 <rcl_subscription_init+0x12e>
 800a6aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a6ae:	b14b      	cbz	r3, 800a6c4 <rcl_subscription_init+0xfc>
 800a6b0:	4628      	mov	r0, r5
 800a6b2:	f7ff fe15 	bl	800a2e0 <rcl_node_get_rmw_handle>
 800a6b6:	6823      	ldr	r3, [r4, #0]
 800a6b8:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800a6bc:	f001 ff62 	bl	800c584 <rmw_destroy_subscription>
 800a6c0:	6827      	ldr	r7, [r4, #0]
 800a6c2:	b197      	cbz	r7, 800a6ea <rcl_subscription_init+0x122>
 800a6c4:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 800a6c8:	4628      	mov	r0, r5
 800a6ca:	f001 f861 	bl	800b790 <rcutils_allocator_is_valid>
 800a6ce:	b158      	cbz	r0, 800a6e8 <rcl_subscription_init+0x120>
 800a6d0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a6d2:	b148      	cbz	r0, 800a6e8 <rcl_subscription_init+0x120>
 800a6d4:	4629      	mov	r1, r5
 800a6d6:	f001 fa5f 	bl	800bb98 <rmw_subscription_content_filter_options_fini>
 800a6da:	4605      	mov	r5, r0
 800a6dc:	b9b8      	cbnz	r0, 800a70e <rcl_subscription_init+0x146>
 800a6de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a6e0:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800a6e2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a6e4:	4798      	blx	r3
 800a6e6:	66fd      	str	r5, [r7, #108]	@ 0x6c
 800a6e8:	6827      	ldr	r7, [r4, #0]
 800a6ea:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800a6ec:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800a6ee:	4638      	mov	r0, r7
 800a6f0:	4798      	blx	r3
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	6023      	str	r3, [r4, #0]
 800a6f6:	2701      	movs	r7, #1
 800a6f8:	e7c8      	b.n	800a68c <rcl_subscription_init+0xc4>
 800a6fa:	2867      	cmp	r0, #103	@ 0x67
 800a6fc:	d0c6      	beq.n	800a68c <rcl_subscription_init+0xc4>
 800a6fe:	2869      	cmp	r0, #105	@ 0x69
 800a700:	d003      	beq.n	800a70a <rcl_subscription_init+0x142>
 800a702:	280a      	cmp	r0, #10
 800a704:	d1f7      	bne.n	800a6f6 <rcl_subscription_init+0x12e>
 800a706:	270a      	movs	r7, #10
 800a708:	e7c0      	b.n	800a68c <rcl_subscription_init+0xc4>
 800a70a:	2767      	movs	r7, #103	@ 0x67
 800a70c:	e7be      	b.n	800a68c <rcl_subscription_init+0xc4>
 800a70e:	f005 fd4d 	bl	80101ac <rcl_convert_rmw_ret_to_rcl_ret>
 800a712:	6827      	ldr	r7, [r4, #0]
 800a714:	e7e9      	b.n	800a6ea <rcl_subscription_init+0x122>
 800a716:	bf00      	nop

0800a718 <rcl_subscription_fini>:
 800a718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a71c:	2800      	cmp	r0, #0
 800a71e:	d039      	beq.n	800a794 <rcl_subscription_fini+0x7c>
 800a720:	4604      	mov	r4, r0
 800a722:	4608      	mov	r0, r1
 800a724:	460d      	mov	r5, r1
 800a726:	f7ff fdb1 	bl	800a28c <rcl_node_is_valid_except_context>
 800a72a:	2800      	cmp	r0, #0
 800a72c:	d037      	beq.n	800a79e <rcl_subscription_fini+0x86>
 800a72e:	6823      	ldr	r3, [r4, #0]
 800a730:	b363      	cbz	r3, 800a78c <rcl_subscription_fini+0x74>
 800a732:	4628      	mov	r0, r5
 800a734:	6d5f      	ldr	r7, [r3, #84]	@ 0x54
 800a736:	f8d3 8060 	ldr.w	r8, [r3, #96]	@ 0x60
 800a73a:	f7ff fdd1 	bl	800a2e0 <rcl_node_get_rmw_handle>
 800a73e:	b390      	cbz	r0, 800a7a6 <rcl_subscription_fini+0x8e>
 800a740:	6823      	ldr	r3, [r4, #0]
 800a742:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800a746:	f001 ff1d 	bl	800c584 <rmw_destroy_subscription>
 800a74a:	6826      	ldr	r6, [r4, #0]
 800a74c:	1e05      	subs	r5, r0, #0
 800a74e:	bf18      	it	ne
 800a750:	2501      	movne	r5, #1
 800a752:	b37e      	cbz	r6, 800a7b4 <rcl_subscription_fini+0x9c>
 800a754:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 800a758:	4648      	mov	r0, r9
 800a75a:	f001 f819 	bl	800b790 <rcutils_allocator_is_valid>
 800a75e:	b358      	cbz	r0, 800a7b8 <rcl_subscription_fini+0xa0>
 800a760:	6ef0      	ldr	r0, [r6, #108]	@ 0x6c
 800a762:	b150      	cbz	r0, 800a77a <rcl_subscription_fini+0x62>
 800a764:	4649      	mov	r1, r9
 800a766:	f001 fa17 	bl	800bb98 <rmw_subscription_content_filter_options_fini>
 800a76a:	4681      	mov	r9, r0
 800a76c:	b9e8      	cbnz	r0, 800a7aa <rcl_subscription_fini+0x92>
 800a76e:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800a770:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800a772:	6ef0      	ldr	r0, [r6, #108]	@ 0x6c
 800a774:	4798      	blx	r3
 800a776:	f8c6 906c 	str.w	r9, [r6, #108]	@ 0x6c
 800a77a:	6826      	ldr	r6, [r4, #0]
 800a77c:	4630      	mov	r0, r6
 800a77e:	4641      	mov	r1, r8
 800a780:	47b8      	blx	r7
 800a782:	2300      	movs	r3, #0
 800a784:	6023      	str	r3, [r4, #0]
 800a786:	4628      	mov	r0, r5
 800a788:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a78c:	461d      	mov	r5, r3
 800a78e:	4628      	mov	r0, r5
 800a790:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a794:	f44f 75c8 	mov.w	r5, #400	@ 0x190
 800a798:	4628      	mov	r0, r5
 800a79a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a79e:	25c8      	movs	r5, #200	@ 0xc8
 800a7a0:	4628      	mov	r0, r5
 800a7a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7a6:	250b      	movs	r5, #11
 800a7a8:	e7f1      	b.n	800a78e <rcl_subscription_fini+0x76>
 800a7aa:	f005 fcff 	bl	80101ac <rcl_convert_rmw_ret_to_rcl_ret>
 800a7ae:	6826      	ldr	r6, [r4, #0]
 800a7b0:	2800      	cmp	r0, #0
 800a7b2:	d0e3      	beq.n	800a77c <rcl_subscription_fini+0x64>
 800a7b4:	2501      	movs	r5, #1
 800a7b6:	e7e1      	b.n	800a77c <rcl_subscription_fini+0x64>
 800a7b8:	6826      	ldr	r6, [r4, #0]
 800a7ba:	2501      	movs	r5, #1
 800a7bc:	e7de      	b.n	800a77c <rcl_subscription_fini+0x64>
 800a7be:	bf00      	nop

0800a7c0 <rcl_subscription_get_default_options>:
 800a7c0:	b570      	push	{r4, r5, r6, lr}
 800a7c2:	4d14      	ldr	r5, [pc, #80]	@ (800a814 <rcl_subscription_get_default_options+0x54>)
 800a7c4:	4914      	ldr	r1, [pc, #80]	@ (800a818 <rcl_subscription_get_default_options+0x58>)
 800a7c6:	b08a      	sub	sp, #40	@ 0x28
 800a7c8:	4604      	mov	r4, r0
 800a7ca:	2250      	movs	r2, #80	@ 0x50
 800a7cc:	4628      	mov	r0, r5
 800a7ce:	f00d fb4e 	bl	8017e6e <memcpy>
 800a7d2:	a804      	add	r0, sp, #16
 800a7d4:	f000 ffce 	bl	800b774 <rcutils_get_default_allocator>
 800a7d8:	f10d 0c10 	add.w	ip, sp, #16
 800a7dc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a7e0:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800a7e4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a7e8:	466e      	mov	r6, sp
 800a7ea:	f8dc 3000 	ldr.w	r3, [ip]
 800a7ee:	f8ce 3000 	str.w	r3, [lr]
 800a7f2:	4630      	mov	r0, r6
 800a7f4:	f001 f9ea 	bl	800bbcc <rmw_get_default_subscription_options>
 800a7f8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800a7fc:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800a800:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a804:	2270      	movs	r2, #112	@ 0x70
 800a806:	4629      	mov	r1, r5
 800a808:	4620      	mov	r0, r4
 800a80a:	f00d fb30 	bl	8017e6e <memcpy>
 800a80e:	4620      	mov	r0, r4
 800a810:	b00a      	add	sp, #40	@ 0x28
 800a812:	bd70      	pop	{r4, r5, r6, pc}
 800a814:	2000c180 	.word	0x2000c180
 800a818:	08019e98 	.word	0x08019e98

0800a81c <rcl_take>:
 800a81c:	2800      	cmp	r0, #0
 800a81e:	d04a      	beq.n	800a8b6 <rcl_take+0x9a>
 800a820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a824:	4604      	mov	r4, r0
 800a826:	6800      	ldr	r0, [r0, #0]
 800a828:	b0a4      	sub	sp, #144	@ 0x90
 800a82a:	2800      	cmp	r0, #0
 800a82c:	d03b      	beq.n	800a8a6 <rcl_take+0x8a>
 800a82e:	461f      	mov	r7, r3
 800a830:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 800a834:	2b00      	cmp	r3, #0
 800a836:	d036      	beq.n	800a8a6 <rcl_take+0x8a>
 800a838:	460e      	mov	r6, r1
 800a83a:	2900      	cmp	r1, #0
 800a83c:	d039      	beq.n	800a8b2 <rcl_take+0x96>
 800a83e:	4615      	mov	r5, r2
 800a840:	2a00      	cmp	r2, #0
 800a842:	d03c      	beq.n	800a8be <rcl_take+0xa2>
 800a844:	a802      	add	r0, sp, #8
 800a846:	f001 f9c7 	bl	800bbd8 <rmw_get_zero_initialized_message_info>
 800a84a:	f10d 0c08 	add.w	ip, sp, #8
 800a84e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a852:	46ae      	mov	lr, r5
 800a854:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a858:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a85c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a860:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a864:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a868:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 800a86c:	f04f 0800 	mov.w	r8, #0
 800a870:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 800a874:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 800a878:	6822      	ldr	r2, [r4, #0]
 800a87a:	462b      	mov	r3, r5
 800a87c:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 800a880:	9700      	str	r7, [sp, #0]
 800a882:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 800a886:	4631      	mov	r1, r6
 800a888:	f001 fedc 	bl	800c644 <rmw_take_with_info>
 800a88c:	4603      	mov	r3, r0
 800a88e:	b9c0      	cbnz	r0, 800a8c2 <rcl_take+0xa6>
 800a890:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 800a894:	f240 1291 	movw	r2, #401	@ 0x191
 800a898:	2900      	cmp	r1, #0
 800a89a:	bf08      	it	eq
 800a89c:	4613      	moveq	r3, r2
 800a89e:	4618      	mov	r0, r3
 800a8a0:	b024      	add	sp, #144	@ 0x90
 800a8a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8a6:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	b024      	add	sp, #144	@ 0x90
 800a8ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8b2:	230b      	movs	r3, #11
 800a8b4:	e7f3      	b.n	800a89e <rcl_take+0x82>
 800a8b6:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	4770      	bx	lr
 800a8be:	ad14      	add	r5, sp, #80	@ 0x50
 800a8c0:	e7c0      	b.n	800a844 <rcl_take+0x28>
 800a8c2:	f005 fc73 	bl	80101ac <rcl_convert_rmw_ret_to_rcl_ret>
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	e7e9      	b.n	800a89e <rcl_take+0x82>
 800a8ca:	bf00      	nop

0800a8cc <rcl_subscription_get_rmw_handle>:
 800a8cc:	b118      	cbz	r0, 800a8d6 <rcl_subscription_get_rmw_handle+0xa>
 800a8ce:	6800      	ldr	r0, [r0, #0]
 800a8d0:	b108      	cbz	r0, 800a8d6 <rcl_subscription_get_rmw_handle+0xa>
 800a8d2:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 800a8d6:	4770      	bx	lr

0800a8d8 <rcl_subscription_is_valid>:
 800a8d8:	b130      	cbz	r0, 800a8e8 <rcl_subscription_is_valid+0x10>
 800a8da:	6800      	ldr	r0, [r0, #0]
 800a8dc:	b120      	cbz	r0, 800a8e8 <rcl_subscription_is_valid+0x10>
 800a8de:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 800a8e2:	3800      	subs	r0, #0
 800a8e4:	bf18      	it	ne
 800a8e6:	2001      	movne	r0, #1
 800a8e8:	4770      	bx	lr
 800a8ea:	bf00      	nop

0800a8ec <_rclc_check_for_new_data>:
 800a8ec:	2800      	cmp	r0, #0
 800a8ee:	d046      	beq.n	800a97e <_rclc_check_for_new_data+0x92>
 800a8f0:	b510      	push	{r4, lr}
 800a8f2:	7802      	ldrb	r2, [r0, #0]
 800a8f4:	b084      	sub	sp, #16
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	2a0a      	cmp	r2, #10
 800a8fa:	d842      	bhi.n	800a982 <_rclc_check_for_new_data+0x96>
 800a8fc:	e8df f002 	tbb	[pc, r2]
 800a900:	14181212 	.word	0x14181212
 800a904:	06060614 	.word	0x06060614
 800a908:	2e1a      	.short	0x2e1a
 800a90a:	16          	.byte	0x16
 800a90b:	00          	.byte	0x00
 800a90c:	6a0a      	ldr	r2, [r1, #32]
 800a90e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800a910:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a914:	2000      	movs	r0, #0
 800a916:	1a12      	subs	r2, r2, r0
 800a918:	bf18      	it	ne
 800a91a:	2201      	movne	r2, #1
 800a91c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800a920:	b004      	add	sp, #16
 800a922:	bd10      	pop	{r4, pc}
 800a924:	680a      	ldr	r2, [r1, #0]
 800a926:	e7f2      	b.n	800a90e <_rclc_check_for_new_data+0x22>
 800a928:	698a      	ldr	r2, [r1, #24]
 800a92a:	e7f0      	b.n	800a90e <_rclc_check_for_new_data+0x22>
 800a92c:	688a      	ldr	r2, [r1, #8]
 800a92e:	e7ee      	b.n	800a90e <_rclc_check_for_new_data+0x22>
 800a930:	690a      	ldr	r2, [r1, #16]
 800a932:	e7ec      	b.n	800a90e <_rclc_check_for_new_data+0x22>
 800a934:	685c      	ldr	r4, [r3, #4]
 800a936:	4608      	mov	r0, r1
 800a938:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800a93c:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800a940:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800a944:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800a948:	9300      	str	r3, [sp, #0]
 800a94a:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800a94e:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800a952:	f104 0110 	add.w	r1, r4, #16
 800a956:	f007 fb0b 	bl	8011f70 <rcl_action_client_wait_set_get_entities_ready>
 800a95a:	e7e1      	b.n	800a920 <_rclc_check_for_new_data+0x34>
 800a95c:	685c      	ldr	r4, [r3, #4]
 800a95e:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800a962:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800a966:	e9cd 3200 	strd	r3, r2, [sp]
 800a96a:	4608      	mov	r0, r1
 800a96c:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800a970:	f104 0220 	add.w	r2, r4, #32
 800a974:	f104 0110 	add.w	r1, r4, #16
 800a978:	f007 fd12 	bl	80123a0 <rcl_action_server_wait_set_get_entities_ready>
 800a97c:	e7d0      	b.n	800a920 <_rclc_check_for_new_data+0x34>
 800a97e:	200b      	movs	r0, #11
 800a980:	4770      	bx	lr
 800a982:	2001      	movs	r0, #1
 800a984:	e7cc      	b.n	800a920 <_rclc_check_for_new_data+0x34>
 800a986:	bf00      	nop

0800a988 <_rclc_take_new_data>:
 800a988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a98a:	b09b      	sub	sp, #108	@ 0x6c
 800a98c:	2800      	cmp	r0, #0
 800a98e:	f000 8088 	beq.w	800aaa2 <_rclc_take_new_data+0x11a>
 800a992:	7803      	ldrb	r3, [r0, #0]
 800a994:	4604      	mov	r4, r0
 800a996:	2b0a      	cmp	r3, #10
 800a998:	f200 8167 	bhi.w	800ac6a <_rclc_take_new_data+0x2e2>
 800a99c:	e8df f003 	tbb	[pc, r3]
 800a9a0:	44152d2d 	.word	0x44152d2d
 800a9a4:	19191944 	.word	0x19191944
 800a9a8:	065a      	.short	0x065a
 800a9aa:	15          	.byte	0x15
 800a9ab:	00          	.byte	0x00
 800a9ac:	6840      	ldr	r0, [r0, #4]
 800a9ae:	f890 3020 	ldrb.w	r3, [r0, #32]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	f040 80b2 	bne.w	800ab1c <_rclc_take_new_data+0x194>
 800a9b8:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	f040 80e4 	bne.w	800ab8a <_rclc_take_new_data+0x202>
 800a9c2:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d16f      	bne.n	800aaaa <_rclc_take_new_data+0x122>
 800a9ca:	2500      	movs	r5, #0
 800a9cc:	4628      	mov	r0, r5
 800a9ce:	b01b      	add	sp, #108	@ 0x6c
 800a9d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9d2:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800a9d4:	6a0b      	ldr	r3, [r1, #32]
 800a9d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d0f5      	beq.n	800a9ca <_rclc_take_new_data+0x42>
 800a9de:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800a9e2:	f104 0110 	add.w	r1, r4, #16
 800a9e6:	f006 f8e5 	bl	8010bb4 <rcl_take_request>
 800a9ea:	4605      	mov	r5, r0
 800a9ec:	2800      	cmp	r0, #0
 800a9ee:	d0ec      	beq.n	800a9ca <_rclc_take_new_data+0x42>
 800a9f0:	f240 2359 	movw	r3, #601	@ 0x259
 800a9f4:	4298      	cmp	r0, r3
 800a9f6:	d013      	beq.n	800aa20 <_rclc_take_new_data+0x98>
 800a9f8:	e029      	b.n	800aa4e <_rclc_take_new_data+0xc6>
 800a9fa:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800a9fc:	680b      	ldr	r3, [r1, #0]
 800a9fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d0e1      	beq.n	800a9ca <_rclc_take_new_data+0x42>
 800aa06:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	aa0a      	add	r2, sp, #40	@ 0x28
 800aa0e:	f7ff ff05 	bl	800a81c <rcl_take>
 800aa12:	4605      	mov	r5, r0
 800aa14:	2800      	cmp	r0, #0
 800aa16:	d0d9      	beq.n	800a9cc <_rclc_take_new_data+0x44>
 800aa18:	f240 1391 	movw	r3, #401	@ 0x191
 800aa1c:	4298      	cmp	r0, r3
 800aa1e:	d116      	bne.n	800aa4e <_rclc_take_new_data+0xc6>
 800aa20:	2300      	movs	r3, #0
 800aa22:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800aa26:	e7d1      	b.n	800a9cc <_rclc_take_new_data+0x44>
 800aa28:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800aa2a:	698b      	ldr	r3, [r1, #24]
 800aa2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d0ca      	beq.n	800a9ca <_rclc_take_new_data+0x42>
 800aa34:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800aa38:	f104 0110 	add.w	r1, r4, #16
 800aa3c:	f005 fb64 	bl	8010108 <rcl_take_response>
 800aa40:	4605      	mov	r5, r0
 800aa42:	2800      	cmp	r0, #0
 800aa44:	d0c1      	beq.n	800a9ca <_rclc_take_new_data+0x42>
 800aa46:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800aa4a:	4298      	cmp	r0, r3
 800aa4c:	d0be      	beq.n	800a9cc <_rclc_take_new_data+0x44>
 800aa4e:	f000 fedb 	bl	800b808 <rcutils_reset_error>
 800aa52:	e7bb      	b.n	800a9cc <_rclc_take_new_data+0x44>
 800aa54:	6840      	ldr	r0, [r0, #4]
 800aa56:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d17d      	bne.n	800ab5a <_rclc_take_new_data+0x1d2>
 800aa5e:	69c3      	ldr	r3, [r0, #28]
 800aa60:	b11b      	cbz	r3, 800aa6a <_rclc_take_new_data+0xe2>
 800aa62:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d144      	bne.n	800aaf4 <_rclc_take_new_data+0x16c>
 800aa6a:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	f040 80ac 	bne.w	800abcc <_rclc_take_new_data+0x244>
 800aa74:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d0a6      	beq.n	800a9ca <_rclc_take_new_data+0x42>
 800aa7c:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800aa7e:	a90a      	add	r1, sp, #40	@ 0x28
 800aa80:	3010      	adds	r0, #16
 800aa82:	f007 f94d 	bl	8011d20 <rcl_action_take_result_response>
 800aa86:	4605      	mov	r5, r0
 800aa88:	2800      	cmp	r0, #0
 800aa8a:	d1e0      	bne.n	800aa4e <_rclc_take_new_data+0xc6>
 800aa8c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800aa90:	6860      	ldr	r0, [r4, #4]
 800aa92:	f007 fda9 	bl	80125e8 <rclc_action_find_handle_by_result_request_sequence_number>
 800aa96:	2800      	cmp	r0, #0
 800aa98:	d098      	beq.n	800a9cc <_rclc_take_new_data+0x44>
 800aa9a:	2301      	movs	r3, #1
 800aa9c:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800aaa0:	e794      	b.n	800a9cc <_rclc_take_new_data+0x44>
 800aaa2:	250b      	movs	r5, #11
 800aaa4:	4628      	mov	r0, r5
 800aaa6:	b01b      	add	sp, #108	@ 0x6c
 800aaa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aaaa:	ae04      	add	r6, sp, #16
 800aaac:	aa0a      	add	r2, sp, #40	@ 0x28
 800aaae:	3010      	adds	r0, #16
 800aab0:	4631      	mov	r1, r6
 800aab2:	f007 fba9 	bl	8012208 <rcl_action_take_cancel_request>
 800aab6:	4605      	mov	r5, r0
 800aab8:	2800      	cmp	r0, #0
 800aaba:	d1c8      	bne.n	800aa4e <_rclc_take_new_data+0xc6>
 800aabc:	6860      	ldr	r0, [r4, #4]
 800aabe:	a90a      	add	r1, sp, #40	@ 0x28
 800aac0:	f007 fd50 	bl	8012564 <rclc_action_find_goal_handle_by_uuid>
 800aac4:	4607      	mov	r7, r0
 800aac6:	2800      	cmp	r0, #0
 800aac8:	f000 80bb 	beq.w	800ac42 <_rclc_take_new_data+0x2ba>
 800aacc:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800aad0:	2101      	movs	r1, #1
 800aad2:	f007 fcd1 	bl	8012478 <rcl_action_transition_goal_state>
 800aad6:	2803      	cmp	r0, #3
 800aad8:	4684      	mov	ip, r0
 800aada:	f040 80a7 	bne.w	800ac2c <_rclc_take_new_data+0x2a4>
 800aade:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800aae0:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800aae4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aae6:	e896 0003 	ldmia.w	r6, {r0, r1}
 800aaea:	e884 0003 	stmia.w	r4, {r0, r1}
 800aaee:	f887 c008 	strb.w	ip, [r7, #8]
 800aaf2:	e76b      	b.n	800a9cc <_rclc_take_new_data+0x44>
 800aaf4:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800aaf6:	3010      	adds	r0, #16
 800aaf8:	f007 f992 	bl	8011e20 <rcl_action_take_feedback>
 800aafc:	4605      	mov	r5, r0
 800aafe:	2800      	cmp	r0, #0
 800ab00:	d1a5      	bne.n	800aa4e <_rclc_take_new_data+0xc6>
 800ab02:	6860      	ldr	r0, [r4, #4]
 800ab04:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800ab06:	f007 fd2d 	bl	8012564 <rclc_action_find_goal_handle_by_uuid>
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	2800      	cmp	r0, #0
 800ab0e:	f000 80a3 	beq.w	800ac58 <_rclc_take_new_data+0x2d0>
 800ab12:	2201      	movs	r2, #1
 800ab14:	6860      	ldr	r0, [r4, #4]
 800ab16:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800ab1a:	e7a6      	b.n	800aa6a <_rclc_take_new_data+0xe2>
 800ab1c:	f007 fcfc 	bl	8012518 <rclc_action_take_goal_handle>
 800ab20:	4606      	mov	r6, r0
 800ab22:	6860      	ldr	r0, [r4, #4]
 800ab24:	2e00      	cmp	r6, #0
 800ab26:	f43f af47 	beq.w	800a9b8 <_rclc_take_new_data+0x30>
 800ab2a:	6070      	str	r0, [r6, #4]
 800ab2c:	69f2      	ldr	r2, [r6, #28]
 800ab2e:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800ab32:	3010      	adds	r0, #16
 800ab34:	f007 fab0 	bl	8012098 <rcl_action_take_goal_request>
 800ab38:	4605      	mov	r5, r0
 800ab3a:	2800      	cmp	r0, #0
 800ab3c:	f040 808e 	bne.w	800ac5c <_rclc_take_new_data+0x2d4>
 800ab40:	69f7      	ldr	r7, [r6, #28]
 800ab42:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ab44:	7235      	strb	r5, [r6, #8]
 800ab46:	f8c6 0009 	str.w	r0, [r6, #9]
 800ab4a:	f8c6 100d 	str.w	r1, [r6, #13]
 800ab4e:	6860      	ldr	r0, [r4, #4]
 800ab50:	f8c6 2011 	str.w	r2, [r6, #17]
 800ab54:	f8c6 3015 	str.w	r3, [r6, #21]
 800ab58:	e72e      	b.n	800a9b8 <_rclc_take_new_data+0x30>
 800ab5a:	aa04      	add	r2, sp, #16
 800ab5c:	a90a      	add	r1, sp, #40	@ 0x28
 800ab5e:	3010      	adds	r0, #16
 800ab60:	f007 f866 	bl	8011c30 <rcl_action_take_goal_response>
 800ab64:	4605      	mov	r5, r0
 800ab66:	2800      	cmp	r0, #0
 800ab68:	f47f af71 	bne.w	800aa4e <_rclc_take_new_data+0xc6>
 800ab6c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ab70:	6860      	ldr	r0, [r4, #4]
 800ab72:	f007 fd27 	bl	80125c4 <rclc_action_find_handle_by_goal_request_sequence_number>
 800ab76:	b130      	cbz	r0, 800ab86 <_rclc_take_new_data+0x1fe>
 800ab78:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800ab7c:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800ab80:	2201      	movs	r2, #1
 800ab82:	f880 2020 	strb.w	r2, [r0, #32]
 800ab86:	6860      	ldr	r0, [r4, #4]
 800ab88:	e769      	b.n	800aa5e <_rclc_take_new_data+0xd6>
 800ab8a:	aa04      	add	r2, sp, #16
 800ab8c:	3010      	adds	r0, #16
 800ab8e:	a90a      	add	r1, sp, #40	@ 0x28
 800ab90:	f007 fafa 	bl	8012188 <rcl_action_take_result_request>
 800ab94:	4605      	mov	r5, r0
 800ab96:	2800      	cmp	r0, #0
 800ab98:	f47f af59 	bne.w	800aa4e <_rclc_take_new_data+0xc6>
 800ab9c:	6860      	ldr	r0, [r4, #4]
 800ab9e:	a904      	add	r1, sp, #16
 800aba0:	f007 fce0 	bl	8012564 <rclc_action_find_goal_handle_by_uuid>
 800aba4:	4607      	mov	r7, r0
 800aba6:	b160      	cbz	r0, 800abc2 <_rclc_take_new_data+0x23a>
 800aba8:	ad0a      	add	r5, sp, #40	@ 0x28
 800abaa:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800abae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800abb0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800abb2:	e895 0003 	ldmia.w	r5, {r0, r1}
 800abb6:	f04f 0c02 	mov.w	ip, #2
 800abba:	e886 0003 	stmia.w	r6, {r0, r1}
 800abbe:	f887 c008 	strb.w	ip, [r7, #8]
 800abc2:	6860      	ldr	r0, [r4, #4]
 800abc4:	2300      	movs	r3, #0
 800abc6:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800abca:	e6fa      	b.n	800a9c2 <_rclc_take_new_data+0x3a>
 800abcc:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800abd0:	a90a      	add	r1, sp, #40	@ 0x28
 800abd2:	3010      	adds	r0, #16
 800abd4:	f007 f8e4 	bl	8011da0 <rcl_action_take_cancel_response>
 800abd8:	4605      	mov	r5, r0
 800abda:	2800      	cmp	r0, #0
 800abdc:	f47f af37 	bne.w	800aa4e <_rclc_take_new_data+0xc6>
 800abe0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800abe4:	6860      	ldr	r0, [r4, #4]
 800abe6:	f007 fd11 	bl	801260c <rclc_action_find_handle_by_cancel_request_sequence_number>
 800abea:	4606      	mov	r6, r0
 800abec:	6860      	ldr	r0, [r4, #4]
 800abee:	2e00      	cmp	r6, #0
 800abf0:	f43f af40 	beq.w	800aa74 <_rclc_take_new_data+0xec>
 800abf4:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800abf6:	2701      	movs	r7, #1
 800abf8:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	f43f af3a 	beq.w	800aa74 <_rclc_take_new_data+0xec>
 800ac00:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800ac02:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800ac06:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800ac0a:	f007 fcab 	bl	8012564 <rclc_action_find_goal_handle_by_uuid>
 800ac0e:	b138      	cbz	r0, 800ac20 <_rclc_take_new_data+0x298>
 800ac10:	6860      	ldr	r0, [r4, #4]
 800ac12:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800ac14:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800ac18:	3501      	adds	r5, #1
 800ac1a:	42ab      	cmp	r3, r5
 800ac1c:	d8f0      	bhi.n	800ac00 <_rclc_take_new_data+0x278>
 800ac1e:	e729      	b.n	800aa74 <_rclc_take_new_data+0xec>
 800ac20:	6860      	ldr	r0, [r4, #4]
 800ac22:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800ac24:	3501      	adds	r5, #1
 800ac26:	42ab      	cmp	r3, r5
 800ac28:	d8ea      	bhi.n	800ac00 <_rclc_take_new_data+0x278>
 800ac2a:	e723      	b.n	800aa74 <_rclc_take_new_data+0xec>
 800ac2c:	ab06      	add	r3, sp, #24
 800ac2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ac30:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800ac34:	2103      	movs	r1, #3
 800ac36:	e896 000c 	ldmia.w	r6, {r2, r3}
 800ac3a:	6860      	ldr	r0, [r4, #4]
 800ac3c:	f007 fd5c 	bl	80126f8 <rclc_action_server_goal_cancel_reject>
 800ac40:	e6c4      	b.n	800a9cc <_rclc_take_new_data+0x44>
 800ac42:	ab06      	add	r3, sp, #24
 800ac44:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ac46:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800ac4a:	2102      	movs	r1, #2
 800ac4c:	e896 000c 	ldmia.w	r6, {r2, r3}
 800ac50:	6860      	ldr	r0, [r4, #4]
 800ac52:	f007 fd51 	bl	80126f8 <rclc_action_server_goal_cancel_reject>
 800ac56:	e6b9      	b.n	800a9cc <_rclc_take_new_data+0x44>
 800ac58:	6860      	ldr	r0, [r4, #4]
 800ac5a:	e706      	b.n	800aa6a <_rclc_take_new_data+0xe2>
 800ac5c:	6860      	ldr	r0, [r4, #4]
 800ac5e:	4631      	mov	r1, r6
 800ac60:	f007 fc6a 	bl	8012538 <rclc_action_remove_used_goal_handle>
 800ac64:	f000 fdd0 	bl	800b808 <rcutils_reset_error>
 800ac68:	e6b0      	b.n	800a9cc <_rclc_take_new_data+0x44>
 800ac6a:	2501      	movs	r5, #1
 800ac6c:	e6ae      	b.n	800a9cc <_rclc_take_new_data+0x44>
 800ac6e:	bf00      	nop

0800ac70 <_rclc_execute.part.0>:
 800ac70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac72:	7803      	ldrb	r3, [r0, #0]
 800ac74:	b087      	sub	sp, #28
 800ac76:	4604      	mov	r4, r0
 800ac78:	2b0a      	cmp	r3, #10
 800ac7a:	f200 8136 	bhi.w	800aeea <_rclc_execute.part.0+0x27a>
 800ac7e:	e8df f003 	tbb	[pc, r3]
 800ac82:	435e      	.short	0x435e
 800ac84:	06a1664f 	.word	0x06a1664f
 800ac88:	6c1e0606 	.word	0x6c1e0606
 800ac8c:	59          	.byte	0x59
 800ac8d:	00          	.byte	0x00
 800ac8e:	2b06      	cmp	r3, #6
 800ac90:	f000 8122 	beq.w	800aed8 <_rclc_execute.part.0+0x268>
 800ac94:	2b07      	cmp	r3, #7
 800ac96:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800ac98:	f040 8118 	bne.w	800aecc <_rclc_execute.part.0+0x25c>
 800ac9c:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800aca0:	6880      	ldr	r0, [r0, #8]
 800aca2:	4798      	blx	r3
 800aca4:	f104 0110 	add.w	r1, r4, #16
 800aca8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800acaa:	6860      	ldr	r0, [r4, #4]
 800acac:	f005 ffc2 	bl	8010c34 <rcl_send_response>
 800acb0:	2800      	cmp	r0, #0
 800acb2:	d033      	beq.n	800ad1c <_rclc_execute.part.0+0xac>
 800acb4:	9005      	str	r0, [sp, #20]
 800acb6:	f000 fda7 	bl	800b808 <rcutils_reset_error>
 800acba:	9805      	ldr	r0, [sp, #20]
 800acbc:	e02e      	b.n	800ad1c <_rclc_execute.part.0+0xac>
 800acbe:	6840      	ldr	r0, [r0, #4]
 800acc0:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	f000 8086 	beq.w	800add6 <_rclc_execute.part.0+0x166>
 800acca:	2600      	movs	r6, #0
 800accc:	2701      	movs	r7, #1
 800acce:	e004      	b.n	800acda <_rclc_execute.part.0+0x6a>
 800acd0:	f007 fbfc 	bl	80124cc <rclc_action_send_result_request>
 800acd4:	b998      	cbnz	r0, 800acfe <_rclc_execute.part.0+0x8e>
 800acd6:	722f      	strb	r7, [r5, #8]
 800acd8:	6860      	ldr	r0, [r4, #4]
 800acda:	f007 fca9 	bl	8012630 <rclc_action_find_first_handle_with_goal_response>
 800acde:	4605      	mov	r5, r0
 800ace0:	2800      	cmp	r0, #0
 800ace2:	d077      	beq.n	800add4 <_rclc_execute.part.0+0x164>
 800ace4:	6863      	ldr	r3, [r4, #4]
 800ace6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800ace8:	699b      	ldr	r3, [r3, #24]
 800acea:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800acee:	f885 6020 	strb.w	r6, [r5, #32]
 800acf2:	4798      	blx	r3
 800acf4:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800acf8:	4628      	mov	r0, r5
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d1e8      	bne.n	800acd0 <_rclc_execute.part.0+0x60>
 800acfe:	6860      	ldr	r0, [r4, #4]
 800ad00:	4629      	mov	r1, r5
 800ad02:	f007 fc19 	bl	8012538 <rclc_action_remove_used_goal_handle>
 800ad06:	e7e7      	b.n	800acd8 <_rclc_execute.part.0+0x68>
 800ad08:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800ad0c:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 800ad10:	2d00      	cmp	r5, #0
 800ad12:	f000 80c9 	beq.w	800aea8 <_rclc_execute.part.0+0x238>
 800ad16:	6880      	ldr	r0, [r0, #8]
 800ad18:	4798      	blx	r3
 800ad1a:	2000      	movs	r0, #0
 800ad1c:	b007      	add	sp, #28
 800ad1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad20:	6840      	ldr	r0, [r0, #4]
 800ad22:	f006 f845 	bl	8010db0 <rcl_timer_call>
 800ad26:	f240 3321 	movw	r3, #801	@ 0x321
 800ad2a:	4298      	cmp	r0, r3
 800ad2c:	d004      	beq.n	800ad38 <_rclc_execute.part.0+0xc8>
 800ad2e:	2800      	cmp	r0, #0
 800ad30:	d0f4      	beq.n	800ad1c <_rclc_execute.part.0+0xac>
 800ad32:	e7bf      	b.n	800acb4 <_rclc_execute.part.0+0x44>
 800ad34:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800ad36:	4798      	blx	r3
 800ad38:	2000      	movs	r0, #0
 800ad3a:	b007      	add	sp, #28
 800ad3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad3e:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800ad42:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800ad44:	b925      	cbnz	r5, 800ad50 <_rclc_execute.part.0+0xe0>
 800ad46:	4628      	mov	r0, r5
 800ad48:	4798      	blx	r3
 800ad4a:	4628      	mov	r0, r5
 800ad4c:	e7e6      	b.n	800ad1c <_rclc_execute.part.0+0xac>
 800ad4e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800ad50:	68a0      	ldr	r0, [r4, #8]
 800ad52:	4798      	blx	r3
 800ad54:	2000      	movs	r0, #0
 800ad56:	b007      	add	sp, #28
 800ad58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad5a:	6840      	ldr	r0, [r0, #4]
 800ad5c:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800ad60:	bb3b      	cbnz	r3, 800adb2 <_rclc_execute.part.0+0x142>
 800ad62:	f890 3020 	ldrb.w	r3, [r0, #32]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d07b      	beq.n	800ae62 <_rclc_execute.part.0+0x1f2>
 800ad6a:	f640 0634 	movw	r6, #2100	@ 0x834
 800ad6e:	2701      	movs	r7, #1
 800ad70:	e007      	b.n	800ad82 <_rclc_execute.part.0+0x112>
 800ad72:	4628      	mov	r0, r5
 800ad74:	f007 fc74 	bl	8012660 <rclc_action_server_response_goal_request>
 800ad78:	6860      	ldr	r0, [r4, #4]
 800ad7a:	4629      	mov	r1, r5
 800ad7c:	f007 fbdc 	bl	8012538 <rclc_action_remove_used_goal_handle>
 800ad80:	6860      	ldr	r0, [r4, #4]
 800ad82:	2100      	movs	r1, #0
 800ad84:	f007 fc06 	bl	8012594 <rclc_action_find_first_handle_by_status>
 800ad88:	4605      	mov	r5, r0
 800ad8a:	2800      	cmp	r0, #0
 800ad8c:	d066      	beq.n	800ae5c <_rclc_execute.part.0+0x1ec>
 800ad8e:	6863      	ldr	r3, [r4, #4]
 800ad90:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ad92:	699b      	ldr	r3, [r3, #24]
 800ad94:	4798      	blx	r3
 800ad96:	42b0      	cmp	r0, r6
 800ad98:	f04f 0100 	mov.w	r1, #0
 800ad9c:	d1e9      	bne.n	800ad72 <_rclc_execute.part.0+0x102>
 800ad9e:	2101      	movs	r1, #1
 800ada0:	4628      	mov	r0, r5
 800ada2:	f007 fc5d 	bl	8012660 <rclc_action_server_response_goal_request>
 800ada6:	722f      	strb	r7, [r5, #8]
 800ada8:	e7ea      	b.n	800ad80 <_rclc_execute.part.0+0x110>
 800adaa:	6848      	ldr	r0, [r1, #4]
 800adac:	f007 fbc4 	bl	8012538 <rclc_action_remove_used_goal_handle>
 800adb0:	6860      	ldr	r0, [r4, #4]
 800adb2:	f007 fbfb 	bl	80125ac <rclc_action_find_first_terminated_handle>
 800adb6:	4601      	mov	r1, r0
 800adb8:	2800      	cmp	r0, #0
 800adba:	d1f6      	bne.n	800adaa <_rclc_execute.part.0+0x13a>
 800adbc:	6860      	ldr	r0, [r4, #4]
 800adbe:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800adc2:	e7ce      	b.n	800ad62 <_rclc_execute.part.0+0xf2>
 800adc4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800adc6:	6880      	ldr	r0, [r0, #8]
 800adc8:	f104 0110 	add.w	r1, r4, #16
 800adcc:	4798      	blx	r3
 800adce:	2000      	movs	r0, #0
 800add0:	b007      	add	sp, #28
 800add2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800add4:	6860      	ldr	r0, [r4, #4]
 800add6:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800adda:	b18b      	cbz	r3, 800ae00 <_rclc_execute.part.0+0x190>
 800addc:	68c5      	ldr	r5, [r0, #12]
 800adde:	b32d      	cbz	r5, 800ae2c <_rclc_execute.part.0+0x1bc>
 800ade0:	2600      	movs	r6, #0
 800ade2:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800ade6:	b143      	cbz	r3, 800adfa <_rclc_execute.part.0+0x18a>
 800ade8:	69c3      	ldr	r3, [r0, #28]
 800adea:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800adee:	b123      	cbz	r3, 800adfa <_rclc_execute.part.0+0x18a>
 800adf0:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800adf2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800adf4:	4628      	mov	r0, r5
 800adf6:	4798      	blx	r3
 800adf8:	6860      	ldr	r0, [r4, #4]
 800adfa:	682d      	ldr	r5, [r5, #0]
 800adfc:	2d00      	cmp	r5, #0
 800adfe:	d1f0      	bne.n	800ade2 <_rclc_execute.part.0+0x172>
 800ae00:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800ae04:	b193      	cbz	r3, 800ae2c <_rclc_execute.part.0+0x1bc>
 800ae06:	68c5      	ldr	r5, [r0, #12]
 800ae08:	b185      	cbz	r5, 800ae2c <_rclc_execute.part.0+0x1bc>
 800ae0a:	2600      	movs	r6, #0
 800ae0c:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800ae10:	b14b      	cbz	r3, 800ae26 <_rclc_execute.part.0+0x1b6>
 800ae12:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800ae14:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800ae18:	b12b      	cbz	r3, 800ae26 <_rclc_execute.part.0+0x1b6>
 800ae1a:	4628      	mov	r0, r5
 800ae1c:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800ae20:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800ae22:	4798      	blx	r3
 800ae24:	6860      	ldr	r0, [r4, #4]
 800ae26:	682d      	ldr	r5, [r5, #0]
 800ae28:	2d00      	cmp	r5, #0
 800ae2a:	d1ef      	bne.n	800ae0c <_rclc_execute.part.0+0x19c>
 800ae2c:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d081      	beq.n	800ad38 <_rclc_execute.part.0+0xc8>
 800ae34:	2700      	movs	r7, #0
 800ae36:	e00b      	b.n	800ae50 <_rclc_execute.part.0+0x1e0>
 800ae38:	6863      	ldr	r3, [r4, #4]
 800ae3a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800ae3c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800ae3e:	6a1e      	ldr	r6, [r3, #32]
 800ae40:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800ae44:	47b0      	blx	r6
 800ae46:	6860      	ldr	r0, [r4, #4]
 800ae48:	4629      	mov	r1, r5
 800ae4a:	f007 fb75 	bl	8012538 <rclc_action_remove_used_goal_handle>
 800ae4e:	6860      	ldr	r0, [r4, #4]
 800ae50:	f007 fbfa 	bl	8012648 <rclc_action_find_first_handle_with_result_response>
 800ae54:	4605      	mov	r5, r0
 800ae56:	2800      	cmp	r0, #0
 800ae58:	d1ee      	bne.n	800ae38 <_rclc_execute.part.0+0x1c8>
 800ae5a:	e76d      	b.n	800ad38 <_rclc_execute.part.0+0xc8>
 800ae5c:	6860      	ldr	r0, [r4, #4]
 800ae5e:	f880 5020 	strb.w	r5, [r0, #32]
 800ae62:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	f43f af66 	beq.w	800ad38 <_rclc_execute.part.0+0xc8>
 800ae6c:	68c5      	ldr	r5, [r0, #12]
 800ae6e:	b1b5      	cbz	r5, 800ae9e <_rclc_execute.part.0+0x22e>
 800ae70:	2602      	movs	r6, #2
 800ae72:	e001      	b.n	800ae78 <_rclc_execute.part.0+0x208>
 800ae74:	682d      	ldr	r5, [r5, #0]
 800ae76:	b195      	cbz	r5, 800ae9e <_rclc_execute.part.0+0x22e>
 800ae78:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800ae7c:	2b03      	cmp	r3, #3
 800ae7e:	d1f9      	bne.n	800ae74 <_rclc_execute.part.0+0x204>
 800ae80:	69c3      	ldr	r3, [r0, #28]
 800ae82:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ae84:	4628      	mov	r0, r5
 800ae86:	4798      	blx	r3
 800ae88:	4603      	mov	r3, r0
 800ae8a:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800ae8e:	4628      	mov	r0, r5
 800ae90:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800ae94:	b163      	cbz	r3, 800aeb0 <_rclc_execute.part.0+0x240>
 800ae96:	f007 fc03 	bl	80126a0 <rclc_action_server_goal_cancel_accept>
 800ae9a:	6860      	ldr	r0, [r4, #4]
 800ae9c:	e7ea      	b.n	800ae74 <_rclc_execute.part.0+0x204>
 800ae9e:	2300      	movs	r3, #0
 800aea0:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800aea4:	4618      	mov	r0, r3
 800aea6:	e739      	b.n	800ad1c <_rclc_execute.part.0+0xac>
 800aea8:	4628      	mov	r0, r5
 800aeaa:	4798      	blx	r3
 800aeac:	4628      	mov	r0, r5
 800aeae:	e735      	b.n	800ad1c <_rclc_execute.part.0+0xac>
 800aeb0:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800aeb2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800aeb6:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800aeba:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aebe:	6860      	ldr	r0, [r4, #4]
 800aec0:	2101      	movs	r1, #1
 800aec2:	f007 fc19 	bl	80126f8 <rclc_action_server_goal_cancel_reject>
 800aec6:	722e      	strb	r6, [r5, #8]
 800aec8:	6860      	ldr	r0, [r4, #4]
 800aeca:	e7d3      	b.n	800ae74 <_rclc_execute.part.0+0x204>
 800aecc:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800aece:	6880      	ldr	r0, [r0, #8]
 800aed0:	4798      	blx	r3
 800aed2:	f104 0110 	add.w	r1, r4, #16
 800aed6:	e6e7      	b.n	800aca8 <_rclc_execute.part.0+0x38>
 800aed8:	f100 0110 	add.w	r1, r0, #16
 800aedc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800aede:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800aee0:	6880      	ldr	r0, [r0, #8]
 800aee2:	9105      	str	r1, [sp, #20]
 800aee4:	4798      	blx	r3
 800aee6:	9905      	ldr	r1, [sp, #20]
 800aee8:	e6de      	b.n	800aca8 <_rclc_execute.part.0+0x38>
 800aeea:	2001      	movs	r0, #1
 800aeec:	e716      	b.n	800ad1c <_rclc_execute.part.0+0xac>
 800aeee:	bf00      	nop

0800aef0 <rclc_executor_trigger_any>:
 800aef0:	2800      	cmp	r0, #0
 800aef2:	d03f      	beq.n	800af74 <rclc_executor_trigger_any+0x84>
 800aef4:	2900      	cmp	r1, #0
 800aef6:	d03e      	beq.n	800af76 <rclc_executor_trigger_any+0x86>
 800aef8:	4603      	mov	r3, r0
 800aefa:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800aefe:	2200      	movs	r2, #0
 800af00:	2800      	cmp	r0, #0
 800af02:	d037      	beq.n	800af74 <rclc_executor_trigger_any+0x84>
 800af04:	b430      	push	{r4, r5}
 800af06:	f893 c000 	ldrb.w	ip, [r3]
 800af0a:	f1bc 0f08 	cmp.w	ip, #8
 800af0e:	d11e      	bne.n	800af4e <rclc_executor_trigger_any+0x5e>
 800af10:	685c      	ldr	r4, [r3, #4]
 800af12:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800af14:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800af18:	d105      	bne.n	800af26 <rclc_executor_trigger_any+0x36>
 800af1a:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800af1e:	b910      	cbnz	r0, 800af26 <rclc_executor_trigger_any+0x36>
 800af20:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800af24:	b128      	cbz	r0, 800af32 <rclc_executor_trigger_any+0x42>
 800af26:	bc30      	pop	{r4, r5}
 800af28:	4770      	bx	lr
 800af2a:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800af2e:	2800      	cmp	r0, #0
 800af30:	d1f9      	bne.n	800af26 <rclc_executor_trigger_any+0x36>
 800af32:	3201      	adds	r2, #1
 800af34:	4291      	cmp	r1, r2
 800af36:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800af3a:	d018      	beq.n	800af6e <rclc_executor_trigger_any+0x7e>
 800af3c:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800af40:	2800      	cmp	r0, #0
 800af42:	d0f0      	beq.n	800af26 <rclc_executor_trigger_any+0x36>
 800af44:	f893 c000 	ldrb.w	ip, [r3]
 800af48:	f1bc 0f08 	cmp.w	ip, #8
 800af4c:	d0e0      	beq.n	800af10 <rclc_executor_trigger_any+0x20>
 800af4e:	f1bc 0f09 	cmp.w	ip, #9
 800af52:	d1ea      	bne.n	800af2a <rclc_executor_trigger_any+0x3a>
 800af54:	685c      	ldr	r4, [r3, #4]
 800af56:	6a25      	ldr	r5, [r4, #32]
 800af58:	2d00      	cmp	r5, #0
 800af5a:	d1e4      	bne.n	800af26 <rclc_executor_trigger_any+0x36>
 800af5c:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800af60:	2800      	cmp	r0, #0
 800af62:	d1e0      	bne.n	800af26 <rclc_executor_trigger_any+0x36>
 800af64:	3201      	adds	r2, #1
 800af66:	4291      	cmp	r1, r2
 800af68:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800af6c:	d1e6      	bne.n	800af3c <rclc_executor_trigger_any+0x4c>
 800af6e:	2000      	movs	r0, #0
 800af70:	bc30      	pop	{r4, r5}
 800af72:	4770      	bx	lr
 800af74:	4770      	bx	lr
 800af76:	4608      	mov	r0, r1
 800af78:	4770      	bx	lr
 800af7a:	bf00      	nop

0800af7c <rclc_executor_get_zero_initialized_executor>:
 800af7c:	b510      	push	{r4, lr}
 800af7e:	4903      	ldr	r1, [pc, #12]	@ (800af8c <rclc_executor_get_zero_initialized_executor+0x10>)
 800af80:	4604      	mov	r4, r0
 800af82:	2288      	movs	r2, #136	@ 0x88
 800af84:	f00c ff73 	bl	8017e6e <memcpy>
 800af88:	4620      	mov	r0, r4
 800af8a:	bd10      	pop	{r4, pc}
 800af8c:	08019ee8 	.word	0x08019ee8

0800af90 <rclc_executor_init>:
 800af90:	2800      	cmp	r0, #0
 800af92:	d05f      	beq.n	800b054 <rclc_executor_init+0xc4>
 800af94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af98:	460c      	mov	r4, r1
 800af9a:	b0b0      	sub	sp, #192	@ 0xc0
 800af9c:	2900      	cmp	r1, #0
 800af9e:	d051      	beq.n	800b044 <rclc_executor_init+0xb4>
 800afa0:	4605      	mov	r5, r0
 800afa2:	4618      	mov	r0, r3
 800afa4:	4616      	mov	r6, r2
 800afa6:	461f      	mov	r7, r3
 800afa8:	f000 fbf2 	bl	800b790 <rcutils_allocator_is_valid>
 800afac:	2800      	cmp	r0, #0
 800afae:	d049      	beq.n	800b044 <rclc_executor_init+0xb4>
 800afb0:	2e00      	cmp	r6, #0
 800afb2:	d047      	beq.n	800b044 <rclc_executor_init+0xb4>
 800afb4:	492c      	ldr	r1, [pc, #176]	@ (800b068 <rclc_executor_init+0xd8>)
 800afb6:	2288      	movs	r2, #136	@ 0x88
 800afb8:	a80e      	add	r0, sp, #56	@ 0x38
 800afba:	f00c ff58 	bl	8017e6e <memcpy>
 800afbe:	a90e      	add	r1, sp, #56	@ 0x38
 800afc0:	2288      	movs	r2, #136	@ 0x88
 800afc2:	4628      	mov	r0, r5
 800afc4:	f00c ff53 	bl	8017e6e <memcpy>
 800afc8:	602c      	str	r4, [r5, #0]
 800afca:	4668      	mov	r0, sp
 800afcc:	60ae      	str	r6, [r5, #8]
 800afce:	466c      	mov	r4, sp
 800afd0:	f006 f860 	bl	8011094 <rcl_get_zero_initialized_wait_set>
 800afd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800afd6:	f105 0c14 	add.w	ip, r5, #20
 800afda:	f8d7 8000 	ldr.w	r8, [r7]
 800afde:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800afe2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800afe4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800afe8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800afea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800afee:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800b060 <rclc_executor_init+0xd0>
 800aff2:	6823      	ldr	r3, [r4, #0]
 800aff4:	f8cc 3000 	str.w	r3, [ip]
 800aff8:	6939      	ldr	r1, [r7, #16]
 800affa:	612f      	str	r7, [r5, #16]
 800affc:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 800b000:	01b0      	lsls	r0, r6, #6
 800b002:	47c0      	blx	r8
 800b004:	6068      	str	r0, [r5, #4]
 800b006:	b338      	cbz	r0, 800b058 <rclc_executor_init+0xc8>
 800b008:	2400      	movs	r4, #0
 800b00a:	e000      	b.n	800b00e <rclc_executor_init+0x7e>
 800b00c:	6868      	ldr	r0, [r5, #4]
 800b00e:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800b012:	4631      	mov	r1, r6
 800b014:	3401      	adds	r4, #1
 800b016:	f000 fa73 	bl	800b500 <rclc_executor_handle_init>
 800b01a:	42a6      	cmp	r6, r4
 800b01c:	d1f6      	bne.n	800b00c <rclc_executor_init+0x7c>
 800b01e:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800b022:	f000 fa63 	bl	800b4ec <rclc_executor_handle_counters_zero_init>
 800b026:	4a11      	ldr	r2, [pc, #68]	@ (800b06c <rclc_executor_init+0xdc>)
 800b028:	686b      	ldr	r3, [r5, #4]
 800b02a:	2000      	movs	r0, #0
 800b02c:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 800b030:	b163      	cbz	r3, 800b04c <rclc_executor_init+0xbc>
 800b032:	692b      	ldr	r3, [r5, #16]
 800b034:	b153      	cbz	r3, 800b04c <rclc_executor_init+0xbc>
 800b036:	68ab      	ldr	r3, [r5, #8]
 800b038:	b143      	cbz	r3, 800b04c <rclc_executor_init+0xbc>
 800b03a:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 800b03e:	b030      	add	sp, #192	@ 0xc0
 800b040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b044:	200b      	movs	r0, #11
 800b046:	b030      	add	sp, #192	@ 0xc0
 800b048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b04c:	4618      	mov	r0, r3
 800b04e:	b030      	add	sp, #192	@ 0xc0
 800b050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b054:	200b      	movs	r0, #11
 800b056:	4770      	bx	lr
 800b058:	200a      	movs	r0, #10
 800b05a:	e7f4      	b.n	800b046 <rclc_executor_init+0xb6>
 800b05c:	f3af 8000 	nop.w
 800b060:	3b9aca00 	.word	0x3b9aca00
 800b064:	00000000 	.word	0x00000000
 800b068:	08019ee8 	.word	0x08019ee8
 800b06c:	0800aef1 	.word	0x0800aef1

0800b070 <rclc_executor_add_subscription>:
 800b070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b072:	f89d e018 	ldrb.w	lr, [sp, #24]
 800b076:	b338      	cbz	r0, 800b0c8 <rclc_executor_add_subscription+0x58>
 800b078:	b331      	cbz	r1, 800b0c8 <rclc_executor_add_subscription+0x58>
 800b07a:	b32a      	cbz	r2, 800b0c8 <rclc_executor_add_subscription+0x58>
 800b07c:	b323      	cbz	r3, 800b0c8 <rclc_executor_add_subscription+0x58>
 800b07e:	4604      	mov	r4, r0
 800b080:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
 800b084:	42a8      	cmp	r0, r5
 800b086:	d301      	bcc.n	800b08c <rclc_executor_add_subscription+0x1c>
 800b088:	2001      	movs	r0, #1
 800b08a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b08c:	6866      	ldr	r6, [r4, #4]
 800b08e:	0187      	lsls	r7, r0, #6
 800b090:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 800b094:	2500      	movs	r5, #0
 800b096:	55f5      	strb	r5, [r6, r7]
 800b098:	3001      	adds	r0, #1
 800b09a:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 800b09e:	f8cc 502c 	str.w	r5, [ip, #44]	@ 0x2c
 800b0a2:	2301      	movs	r3, #1
 800b0a4:	f104 0514 	add.w	r5, r4, #20
 800b0a8:	e9cc 1201 	strd	r1, r2, [ip, #4]
 800b0ac:	f88c e001 	strb.w	lr, [ip, #1]
 800b0b0:	f8ac 3038 	strh.w	r3, [ip, #56]	@ 0x38
 800b0b4:	60e0      	str	r0, [r4, #12]
 800b0b6:	4628      	mov	r0, r5
 800b0b8:	f006 f800 	bl	80110bc <rcl_wait_set_is_valid>
 800b0bc:	b930      	cbnz	r0, 800b0cc <rclc_executor_add_subscription+0x5c>
 800b0be:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800b0c0:	3301      	adds	r3, #1
 800b0c2:	2000      	movs	r0, #0
 800b0c4:	64a3      	str	r3, [r4, #72]	@ 0x48
 800b0c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0c8:	200b      	movs	r0, #11
 800b0ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0cc:	4628      	mov	r0, r5
 800b0ce:	f005 fffb 	bl	80110c8 <rcl_wait_set_fini>
 800b0d2:	2800      	cmp	r0, #0
 800b0d4:	d0f3      	beq.n	800b0be <rclc_executor_add_subscription+0x4e>
 800b0d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b0d8 <rclc_executor_prepare>:
 800b0d8:	2800      	cmp	r0, #0
 800b0da:	d044      	beq.n	800b166 <rclc_executor_prepare+0x8e>
 800b0dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b0de:	f100 0514 	add.w	r5, r0, #20
 800b0e2:	b09b      	sub	sp, #108	@ 0x6c
 800b0e4:	4604      	mov	r4, r0
 800b0e6:	4628      	mov	r0, r5
 800b0e8:	f005 ffe8 	bl	80110bc <rcl_wait_set_is_valid>
 800b0ec:	b110      	cbz	r0, 800b0f4 <rclc_executor_prepare+0x1c>
 800b0ee:	2000      	movs	r0, #0
 800b0f0:	b01b      	add	sp, #108	@ 0x6c
 800b0f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b0f4:	4628      	mov	r0, r5
 800b0f6:	f005 ffe7 	bl	80110c8 <rcl_wait_set_fini>
 800b0fa:	2800      	cmp	r0, #0
 800b0fc:	d130      	bne.n	800b160 <rclc_executor_prepare+0x88>
 800b0fe:	a80c      	add	r0, sp, #48	@ 0x30
 800b100:	f005 ffc8 	bl	8011094 <rcl_get_zero_initialized_wait_set>
 800b104:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800b108:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b10c:	46ae      	mov	lr, r5
 800b10e:	6927      	ldr	r7, [r4, #16]
 800b110:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800b114:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b118:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800b11c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b120:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800b124:	f8dc 3000 	ldr.w	r3, [ip]
 800b128:	f8ce 3000 	str.w	r3, [lr]
 800b12c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800b12e:	ae04      	add	r6, sp, #16
 800b130:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	6822      	ldr	r2, [r4, #0]
 800b136:	6033      	str	r3, [r6, #0]
 800b138:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b13a:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800b13c:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800b140:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 800b144:	e9cd 2100 	strd	r2, r1, [sp]
 800b148:	4628      	mov	r0, r5
 800b14a:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800b14c:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800b14e:	f006 fab9 	bl	80116c4 <rcl_wait_set_init>
 800b152:	2800      	cmp	r0, #0
 800b154:	d0cc      	beq.n	800b0f0 <rclc_executor_prepare+0x18>
 800b156:	900b      	str	r0, [sp, #44]	@ 0x2c
 800b158:	f000 fb56 	bl	800b808 <rcutils_reset_error>
 800b15c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800b15e:	e7c7      	b.n	800b0f0 <rclc_executor_prepare+0x18>
 800b160:	f000 fb52 	bl	800b808 <rcutils_reset_error>
 800b164:	e7cb      	b.n	800b0fe <rclc_executor_prepare+0x26>
 800b166:	200b      	movs	r0, #11
 800b168:	4770      	bx	lr
 800b16a:	bf00      	nop

0800b16c <rclc_executor_spin_some.part.0>:
 800b16c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b170:	f100 0614 	add.w	r6, r0, #20
 800b174:	b083      	sub	sp, #12
 800b176:	4691      	mov	r9, r2
 800b178:	4698      	mov	r8, r3
 800b17a:	4605      	mov	r5, r0
 800b17c:	f7ff ffac 	bl	800b0d8 <rclc_executor_prepare>
 800b180:	4630      	mov	r0, r6
 800b182:	f006 f86d 	bl	8011260 <rcl_wait_set_clear>
 800b186:	4607      	mov	r7, r0
 800b188:	2800      	cmp	r0, #0
 800b18a:	f040 80ed 	bne.w	800b368 <rclc_executor_spin_some.part.0+0x1fc>
 800b18e:	68ab      	ldr	r3, [r5, #8]
 800b190:	4604      	mov	r4, r0
 800b192:	b303      	cbz	r3, 800b1d6 <rclc_executor_spin_some.part.0+0x6a>
 800b194:	6869      	ldr	r1, [r5, #4]
 800b196:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800b19a:	01a2      	lsls	r2, r4, #6
 800b19c:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800b1a0:	b1cb      	cbz	r3, 800b1d6 <rclc_executor_spin_some.part.0+0x6a>
 800b1a2:	5c8b      	ldrb	r3, [r1, r2]
 800b1a4:	2b0a      	cmp	r3, #10
 800b1a6:	f200 80d8 	bhi.w	800b35a <rclc_executor_spin_some.part.0+0x1ee>
 800b1aa:	e8df f003 	tbb	[pc, r3]
 800b1ae:	9c9c      	.short	0x9c9c
 800b1b0:	068c8ca7 	.word	0x068c8ca7
 800b1b4:	bdc90606 	.word	0xbdc90606
 800b1b8:	b2          	.byte	0xb2
 800b1b9:	00          	.byte	0x00
 800b1ba:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b1be:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b1c2:	4630      	mov	r0, r6
 800b1c4:	f006 fb94 	bl	80118f0 <rcl_wait_set_add_service>
 800b1c8:	2800      	cmp	r0, #0
 800b1ca:	f040 8086 	bne.w	800b2da <rclc_executor_spin_some.part.0+0x16e>
 800b1ce:	68ab      	ldr	r3, [r5, #8]
 800b1d0:	3401      	adds	r4, #1
 800b1d2:	429c      	cmp	r4, r3
 800b1d4:	d3de      	bcc.n	800b194 <rclc_executor_spin_some.part.0+0x28>
 800b1d6:	4643      	mov	r3, r8
 800b1d8:	464a      	mov	r2, r9
 800b1da:	4630      	mov	r0, r6
 800b1dc:	f006 fbb4 	bl	8011948 <rcl_wait>
 800b1e0:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	f000 80c7 	beq.w	800b378 <rclc_executor_spin_some.part.0+0x20c>
 800b1ea:	2b01      	cmp	r3, #1
 800b1ec:	f040 80b5 	bne.w	800b35a <rclc_executor_spin_some.part.0+0x1ee>
 800b1f0:	68ab      	ldr	r3, [r5, #8]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	f000 8159 	beq.w	800b4aa <rclc_executor_spin_some.part.0+0x33e>
 800b1f8:	2400      	movs	r4, #0
 800b1fa:	46a0      	mov	r8, r4
 800b1fc:	f240 1991 	movw	r9, #401	@ 0x191
 800b200:	e00a      	b.n	800b218 <rclc_executor_spin_some.part.0+0xac>
 800b202:	f7ff fb73 	bl	800a8ec <_rclc_check_for_new_data>
 800b206:	4604      	mov	r4, r0
 800b208:	b110      	cbz	r0, 800b210 <rclc_executor_spin_some.part.0+0xa4>
 800b20a:	4548      	cmp	r0, r9
 800b20c:	f040 80b2 	bne.w	800b374 <rclc_executor_spin_some.part.0+0x208>
 800b210:	68ab      	ldr	r3, [r5, #8]
 800b212:	4598      	cmp	r8, r3
 800b214:	f080 8126 	bcs.w	800b464 <rclc_executor_spin_some.part.0+0x2f8>
 800b218:	686a      	ldr	r2, [r5, #4]
 800b21a:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800b21e:	4631      	mov	r1, r6
 800b220:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800b224:	f108 0801 	add.w	r8, r8, #1
 800b228:	f1bc 0f00 	cmp.w	ip, #0
 800b22c:	d1e9      	bne.n	800b202 <rclc_executor_spin_some.part.0+0x96>
 800b22e:	4619      	mov	r1, r3
 800b230:	4610      	mov	r0, r2
 800b232:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800b236:	4798      	blx	r3
 800b238:	2800      	cmp	r0, #0
 800b23a:	f000 809b 	beq.w	800b374 <rclc_executor_spin_some.part.0+0x208>
 800b23e:	68ab      	ldr	r3, [r5, #8]
 800b240:	2b00      	cmp	r3, #0
 800b242:	f000 8097 	beq.w	800b374 <rclc_executor_spin_some.part.0+0x208>
 800b246:	f04f 0800 	mov.w	r8, #0
 800b24a:	f240 1991 	movw	r9, #401	@ 0x191
 800b24e:	e009      	b.n	800b264 <rclc_executor_spin_some.part.0+0xf8>
 800b250:	f7ff fb9a 	bl	800a988 <_rclc_take_new_data>
 800b254:	4604      	mov	r4, r0
 800b256:	b110      	cbz	r0, 800b25e <rclc_executor_spin_some.part.0+0xf2>
 800b258:	4548      	cmp	r0, r9
 800b25a:	f040 808b 	bne.w	800b374 <rclc_executor_spin_some.part.0+0x208>
 800b25e:	68ab      	ldr	r3, [r5, #8]
 800b260:	4598      	cmp	r8, r3
 800b262:	d209      	bcs.n	800b278 <rclc_executor_spin_some.part.0+0x10c>
 800b264:	6868      	ldr	r0, [r5, #4]
 800b266:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800b26a:	4631      	mov	r1, r6
 800b26c:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800b270:	f108 0801 	add.w	r8, r8, #1
 800b274:	2a00      	cmp	r2, #0
 800b276:	d1eb      	bne.n	800b250 <rclc_executor_spin_some.part.0+0xe4>
 800b278:	2600      	movs	r6, #0
 800b27a:	b97b      	cbnz	r3, 800b29c <rclc_executor_spin_some.part.0+0x130>
 800b27c:	e07a      	b.n	800b374 <rclc_executor_spin_some.part.0+0x208>
 800b27e:	f812 200c 	ldrb.w	r2, [r2, ip]
 800b282:	2a08      	cmp	r2, #8
 800b284:	f000 80fd 	beq.w	800b482 <rclc_executor_spin_some.part.0+0x316>
 800b288:	2a09      	cmp	r2, #9
 800b28a:	f000 80ef 	beq.w	800b46c <rclc_executor_spin_some.part.0+0x300>
 800b28e:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800b292:	b98a      	cbnz	r2, 800b2b8 <rclc_executor_spin_some.part.0+0x14c>
 800b294:	3601      	adds	r6, #1
 800b296:	429e      	cmp	r6, r3
 800b298:	d262      	bcs.n	800b360 <rclc_executor_spin_some.part.0+0x1f4>
 800b29a:	2400      	movs	r4, #0
 800b29c:	686a      	ldr	r2, [r5, #4]
 800b29e:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800b2a2:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800b2a6:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800b2aa:	2900      	cmp	r1, #0
 800b2ac:	d062      	beq.n	800b374 <rclc_executor_spin_some.part.0+0x208>
 800b2ae:	7841      	ldrb	r1, [r0, #1]
 800b2b0:	2900      	cmp	r1, #0
 800b2b2:	d0e4      	beq.n	800b27e <rclc_executor_spin_some.part.0+0x112>
 800b2b4:	2901      	cmp	r1, #1
 800b2b6:	d1ed      	bne.n	800b294 <rclc_executor_spin_some.part.0+0x128>
 800b2b8:	f7ff fcda 	bl	800ac70 <_rclc_execute.part.0>
 800b2bc:	2800      	cmp	r0, #0
 800b2be:	f040 80b6 	bne.w	800b42e <rclc_executor_spin_some.part.0+0x2c2>
 800b2c2:	68ab      	ldr	r3, [r5, #8]
 800b2c4:	e7e6      	b.n	800b294 <rclc_executor_spin_some.part.0+0x128>
 800b2c6:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b2ca:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b2ce:	4630      	mov	r0, r6
 800b2d0:	f006 fae2 	bl	8011898 <rcl_wait_set_add_client>
 800b2d4:	2800      	cmp	r0, #0
 800b2d6:	f43f af7a 	beq.w	800b1ce <rclc_executor_spin_some.part.0+0x62>
 800b2da:	9001      	str	r0, [sp, #4]
 800b2dc:	f000 fa94 	bl	800b808 <rcutils_reset_error>
 800b2e0:	9801      	ldr	r0, [sp, #4]
 800b2e2:	4607      	mov	r7, r0
 800b2e4:	e03c      	b.n	800b360 <rclc_executor_spin_some.part.0+0x1f4>
 800b2e6:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b2ea:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b2ee:	4630      	mov	r0, r6
 800b2f0:	f005 ff8a 	bl	8011208 <rcl_wait_set_add_subscription>
 800b2f4:	2800      	cmp	r0, #0
 800b2f6:	f43f af6a 	beq.w	800b1ce <rclc_executor_spin_some.part.0+0x62>
 800b2fa:	e7ee      	b.n	800b2da <rclc_executor_spin_some.part.0+0x16e>
 800b2fc:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b300:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b304:	4630      	mov	r0, r6
 800b306:	f006 fa97 	bl	8011838 <rcl_wait_set_add_timer>
 800b30a:	2800      	cmp	r0, #0
 800b30c:	f43f af5f 	beq.w	800b1ce <rclc_executor_spin_some.part.0+0x62>
 800b310:	e7e3      	b.n	800b2da <rclc_executor_spin_some.part.0+0x16e>
 800b312:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b316:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b31a:	4630      	mov	r0, r6
 800b31c:	f006 fa60 	bl	80117e0 <rcl_wait_set_add_guard_condition>
 800b320:	2800      	cmp	r0, #0
 800b322:	f43f af54 	beq.w	800b1ce <rclc_executor_spin_some.part.0+0x62>
 800b326:	e7d8      	b.n	800b2da <rclc_executor_spin_some.part.0+0x16e>
 800b328:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b32c:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b330:	3110      	adds	r1, #16
 800b332:	4630      	mov	r0, r6
 800b334:	f006 ffe0 	bl	80122f8 <rcl_action_wait_set_add_action_server>
 800b338:	2800      	cmp	r0, #0
 800b33a:	f43f af48 	beq.w	800b1ce <rclc_executor_spin_some.part.0+0x62>
 800b33e:	e7cc      	b.n	800b2da <rclc_executor_spin_some.part.0+0x16e>
 800b340:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b344:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b348:	3110      	adds	r1, #16
 800b34a:	2300      	movs	r3, #0
 800b34c:	4630      	mov	r0, r6
 800b34e:	f006 fdab 	bl	8011ea8 <rcl_action_wait_set_add_action_client>
 800b352:	2800      	cmp	r0, #0
 800b354:	f43f af3b 	beq.w	800b1ce <rclc_executor_spin_some.part.0+0x62>
 800b358:	e7bf      	b.n	800b2da <rclc_executor_spin_some.part.0+0x16e>
 800b35a:	f000 fa55 	bl	800b808 <rcutils_reset_error>
 800b35e:	2701      	movs	r7, #1
 800b360:	4638      	mov	r0, r7
 800b362:	b003      	add	sp, #12
 800b364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b368:	f000 fa4e 	bl	800b808 <rcutils_reset_error>
 800b36c:	4638      	mov	r0, r7
 800b36e:	b003      	add	sp, #12
 800b370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b374:	4627      	mov	r7, r4
 800b376:	e7f3      	b.n	800b360 <rclc_executor_spin_some.part.0+0x1f4>
 800b378:	68ab      	ldr	r3, [r5, #8]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	f000 8092 	beq.w	800b4a4 <rclc_executor_spin_some.part.0+0x338>
 800b380:	2400      	movs	r4, #0
 800b382:	46a0      	mov	r8, r4
 800b384:	f240 1991 	movw	r9, #401	@ 0x191
 800b388:	e008      	b.n	800b39c <rclc_executor_spin_some.part.0+0x230>
 800b38a:	f7ff faaf 	bl	800a8ec <_rclc_check_for_new_data>
 800b38e:	4604      	mov	r4, r0
 800b390:	b108      	cbz	r0, 800b396 <rclc_executor_spin_some.part.0+0x22a>
 800b392:	4548      	cmp	r0, r9
 800b394:	d1ee      	bne.n	800b374 <rclc_executor_spin_some.part.0+0x208>
 800b396:	68ab      	ldr	r3, [r5, #8]
 800b398:	4598      	cmp	r8, r3
 800b39a:	d265      	bcs.n	800b468 <rclc_executor_spin_some.part.0+0x2fc>
 800b39c:	686a      	ldr	r2, [r5, #4]
 800b39e:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800b3a2:	4631      	mov	r1, r6
 800b3a4:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800b3a8:	f108 0801 	add.w	r8, r8, #1
 800b3ac:	f1bc 0f00 	cmp.w	ip, #0
 800b3b0:	d1eb      	bne.n	800b38a <rclc_executor_spin_some.part.0+0x21e>
 800b3b2:	4619      	mov	r1, r3
 800b3b4:	4610      	mov	r0, r2
 800b3b6:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800b3ba:	4798      	blx	r3
 800b3bc:	2800      	cmp	r0, #0
 800b3be:	d0d9      	beq.n	800b374 <rclc_executor_spin_some.part.0+0x208>
 800b3c0:	68ab      	ldr	r3, [r5, #8]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d0d6      	beq.n	800b374 <rclc_executor_spin_some.part.0+0x208>
 800b3c6:	f04f 0800 	mov.w	r8, #0
 800b3ca:	f240 1991 	movw	r9, #401	@ 0x191
 800b3ce:	f240 2a59 	movw	sl, #601	@ 0x259
 800b3d2:	e00e      	b.n	800b3f2 <rclc_executor_spin_some.part.0+0x286>
 800b3d4:	f813 300b 	ldrb.w	r3, [r3, fp]
 800b3d8:	2b08      	cmp	r3, #8
 800b3da:	d033      	beq.n	800b444 <rclc_executor_spin_some.part.0+0x2d8>
 800b3dc:	2b09      	cmp	r3, #9
 800b3de:	d028      	beq.n	800b432 <rclc_executor_spin_some.part.0+0x2c6>
 800b3e0:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800b3e4:	b9fb      	cbnz	r3, 800b426 <rclc_executor_spin_some.part.0+0x2ba>
 800b3e6:	68ab      	ldr	r3, [r5, #8]
 800b3e8:	f108 0801 	add.w	r8, r8, #1
 800b3ec:	4598      	cmp	r8, r3
 800b3ee:	d2b7      	bcs.n	800b360 <rclc_executor_spin_some.part.0+0x1f4>
 800b3f0:	2400      	movs	r4, #0
 800b3f2:	6868      	ldr	r0, [r5, #4]
 800b3f4:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800b3f8:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800b3fc:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800b400:	2b00      	cmp	r3, #0
 800b402:	d0b7      	beq.n	800b374 <rclc_executor_spin_some.part.0+0x208>
 800b404:	4631      	mov	r1, r6
 800b406:	f7ff fabf 	bl	800a988 <_rclc_take_new_data>
 800b40a:	b118      	cbz	r0, 800b414 <rclc_executor_spin_some.part.0+0x2a8>
 800b40c:	4548      	cmp	r0, r9
 800b40e:	d001      	beq.n	800b414 <rclc_executor_spin_some.part.0+0x2a8>
 800b410:	4550      	cmp	r0, sl
 800b412:	d10c      	bne.n	800b42e <rclc_executor_spin_some.part.0+0x2c2>
 800b414:	686b      	ldr	r3, [r5, #4]
 800b416:	eb13 000b 	adds.w	r0, r3, fp
 800b41a:	d021      	beq.n	800b460 <rclc_executor_spin_some.part.0+0x2f4>
 800b41c:	7842      	ldrb	r2, [r0, #1]
 800b41e:	2a00      	cmp	r2, #0
 800b420:	d0d8      	beq.n	800b3d4 <rclc_executor_spin_some.part.0+0x268>
 800b422:	2a01      	cmp	r2, #1
 800b424:	d1df      	bne.n	800b3e6 <rclc_executor_spin_some.part.0+0x27a>
 800b426:	f7ff fc23 	bl	800ac70 <_rclc_execute.part.0>
 800b42a:	2800      	cmp	r0, #0
 800b42c:	d0db      	beq.n	800b3e6 <rclc_executor_spin_some.part.0+0x27a>
 800b42e:	4607      	mov	r7, r0
 800b430:	e796      	b.n	800b360 <rclc_executor_spin_some.part.0+0x1f4>
 800b432:	6843      	ldr	r3, [r0, #4]
 800b434:	6a1a      	ldr	r2, [r3, #32]
 800b436:	2a00      	cmp	r2, #0
 800b438:	d1f5      	bne.n	800b426 <rclc_executor_spin_some.part.0+0x2ba>
 800b43a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d0d1      	beq.n	800b3e6 <rclc_executor_spin_some.part.0+0x27a>
 800b442:	e7f0      	b.n	800b426 <rclc_executor_spin_some.part.0+0x2ba>
 800b444:	6843      	ldr	r3, [r0, #4]
 800b446:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b448:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800b44c:	d1eb      	bne.n	800b426 <rclc_executor_spin_some.part.0+0x2ba>
 800b44e:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800b452:	2a00      	cmp	r2, #0
 800b454:	d1e7      	bne.n	800b426 <rclc_executor_spin_some.part.0+0x2ba>
 800b456:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d0c3      	beq.n	800b3e6 <rclc_executor_spin_some.part.0+0x27a>
 800b45e:	e7e2      	b.n	800b426 <rclc_executor_spin_some.part.0+0x2ba>
 800b460:	270b      	movs	r7, #11
 800b462:	e77d      	b.n	800b360 <rclc_executor_spin_some.part.0+0x1f4>
 800b464:	686a      	ldr	r2, [r5, #4]
 800b466:	e6e2      	b.n	800b22e <rclc_executor_spin_some.part.0+0xc2>
 800b468:	686a      	ldr	r2, [r5, #4]
 800b46a:	e7a2      	b.n	800b3b2 <rclc_executor_spin_some.part.0+0x246>
 800b46c:	6842      	ldr	r2, [r0, #4]
 800b46e:	6a11      	ldr	r1, [r2, #32]
 800b470:	2900      	cmp	r1, #0
 800b472:	f47f af21 	bne.w	800b2b8 <rclc_executor_spin_some.part.0+0x14c>
 800b476:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800b47a:	2a00      	cmp	r2, #0
 800b47c:	f43f af0a 	beq.w	800b294 <rclc_executor_spin_some.part.0+0x128>
 800b480:	e71a      	b.n	800b2b8 <rclc_executor_spin_some.part.0+0x14c>
 800b482:	6842      	ldr	r2, [r0, #4]
 800b484:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800b486:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800b48a:	f47f af15 	bne.w	800b2b8 <rclc_executor_spin_some.part.0+0x14c>
 800b48e:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800b492:	2900      	cmp	r1, #0
 800b494:	f47f af10 	bne.w	800b2b8 <rclc_executor_spin_some.part.0+0x14c>
 800b498:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800b49c:	2a00      	cmp	r2, #0
 800b49e:	f43f aef9 	beq.w	800b294 <rclc_executor_spin_some.part.0+0x128>
 800b4a2:	e709      	b.n	800b2b8 <rclc_executor_spin_some.part.0+0x14c>
 800b4a4:	686a      	ldr	r2, [r5, #4]
 800b4a6:	461c      	mov	r4, r3
 800b4a8:	e783      	b.n	800b3b2 <rclc_executor_spin_some.part.0+0x246>
 800b4aa:	686a      	ldr	r2, [r5, #4]
 800b4ac:	461c      	mov	r4, r3
 800b4ae:	e6be      	b.n	800b22e <rclc_executor_spin_some.part.0+0xc2>

0800b4b0 <rclc_executor_spin>:
 800b4b0:	b1d0      	cbz	r0, 800b4e8 <rclc_executor_spin+0x38>
 800b4b2:	b510      	push	{r4, lr}
 800b4b4:	4604      	mov	r4, r0
 800b4b6:	b082      	sub	sp, #8
 800b4b8:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	@ 0x68
 800b4bc:	6820      	ldr	r0, [r4, #0]
 800b4be:	e9cd 2300 	strd	r2, r3, [sp]
 800b4c2:	f004 fe91 	bl	80101e8 <rcl_context_is_valid>
 800b4c6:	4601      	mov	r1, r0
 800b4c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b4cc:	4620      	mov	r0, r4
 800b4ce:	b131      	cbz	r1, 800b4de <rclc_executor_spin+0x2e>
 800b4d0:	f7ff fe4c 	bl	800b16c <rclc_executor_spin_some.part.0>
 800b4d4:	f030 0302 	bics.w	r3, r0, #2
 800b4d8:	d0ee      	beq.n	800b4b8 <rclc_executor_spin+0x8>
 800b4da:	b002      	add	sp, #8
 800b4dc:	bd10      	pop	{r4, pc}
 800b4de:	f000 f993 	bl	800b808 <rcutils_reset_error>
 800b4e2:	2001      	movs	r0, #1
 800b4e4:	b002      	add	sp, #8
 800b4e6:	bd10      	pop	{r4, pc}
 800b4e8:	200b      	movs	r0, #11
 800b4ea:	4770      	bx	lr

0800b4ec <rclc_executor_handle_counters_zero_init>:
 800b4ec:	b130      	cbz	r0, 800b4fc <rclc_executor_handle_counters_zero_init+0x10>
 800b4ee:	b508      	push	{r3, lr}
 800b4f0:	2220      	movs	r2, #32
 800b4f2:	2100      	movs	r1, #0
 800b4f4:	f00c fb98 	bl	8017c28 <memset>
 800b4f8:	2000      	movs	r0, #0
 800b4fa:	bd08      	pop	{r3, pc}
 800b4fc:	200b      	movs	r0, #11
 800b4fe:	4770      	bx	lr

0800b500 <rclc_executor_handle_init>:
 800b500:	b168      	cbz	r0, 800b51e <rclc_executor_handle_init+0x1e>
 800b502:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 800b528 <rclc_executor_handle_init+0x28>
 800b506:	2300      	movs	r3, #0
 800b508:	220b      	movs	r2, #11
 800b50a:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 800b50e:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800b512:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800b516:	8002      	strh	r2, [r0, #0]
 800b518:	8703      	strh	r3, [r0, #56]	@ 0x38
 800b51a:	4618      	mov	r0, r3
 800b51c:	4770      	bx	lr
 800b51e:	200b      	movs	r0, #11
 800b520:	4770      	bx	lr
 800b522:	bf00      	nop
 800b524:	f3af 8000 	nop.w
	...

0800b530 <rclc_support_init>:
 800b530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b534:	b086      	sub	sp, #24
 800b536:	b3b8      	cbz	r0, 800b5a8 <rclc_support_init+0x78>
 800b538:	461c      	mov	r4, r3
 800b53a:	b3ab      	cbz	r3, 800b5a8 <rclc_support_init+0x78>
 800b53c:	460f      	mov	r7, r1
 800b53e:	4690      	mov	r8, r2
 800b540:	4606      	mov	r6, r0
 800b542:	f005 f86d 	bl	8010620 <rcl_get_zero_initialized_init_options>
 800b546:	f104 030c 	add.w	r3, r4, #12
 800b54a:	9005      	str	r0, [sp, #20]
 800b54c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b550:	e88d 0003 	stmia.w	sp, {r0, r1}
 800b554:	a805      	add	r0, sp, #20
 800b556:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800b55a:	f005 f863 	bl	8010624 <rcl_init_options_init>
 800b55e:	4605      	mov	r5, r0
 800b560:	b9e0      	cbnz	r0, 800b59c <rclc_support_init+0x6c>
 800b562:	ad02      	add	r5, sp, #8
 800b564:	4628      	mov	r0, r5
 800b566:	f004 fe35 	bl	80101d4 <rcl_get_zero_initialized_context>
 800b56a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b56e:	4633      	mov	r3, r6
 800b570:	e886 0003 	stmia.w	r6, {r0, r1}
 800b574:	aa05      	add	r2, sp, #20
 800b576:	4641      	mov	r1, r8
 800b578:	4638      	mov	r0, r7
 800b57a:	f004 ff4d 	bl	8010418 <rcl_init>
 800b57e:	4605      	mov	r5, r0
 800b580:	b9b8      	cbnz	r0, 800b5b2 <rclc_support_init+0x82>
 800b582:	60b4      	str	r4, [r6, #8]
 800b584:	4622      	mov	r2, r4
 800b586:	f106 010c 	add.w	r1, r6, #12
 800b58a:	2003      	movs	r0, #3
 800b58c:	f005 fb8c 	bl	8010ca8 <rcl_clock_init>
 800b590:	4605      	mov	r5, r0
 800b592:	b970      	cbnz	r0, 800b5b2 <rclc_support_init+0x82>
 800b594:	a805      	add	r0, sp, #20
 800b596:	f005 f8ab 	bl	80106f0 <rcl_init_options_fini>
 800b59a:	b108      	cbz	r0, 800b5a0 <rclc_support_init+0x70>
 800b59c:	f000 f934 	bl	800b808 <rcutils_reset_error>
 800b5a0:	4628      	mov	r0, r5
 800b5a2:	b006      	add	sp, #24
 800b5a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5a8:	250b      	movs	r5, #11
 800b5aa:	4628      	mov	r0, r5
 800b5ac:	b006      	add	sp, #24
 800b5ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5b2:	f000 f929 	bl	800b808 <rcutils_reset_error>
 800b5b6:	a805      	add	r0, sp, #20
 800b5b8:	f005 f89a 	bl	80106f0 <rcl_init_options_fini>
 800b5bc:	2800      	cmp	r0, #0
 800b5be:	d0ef      	beq.n	800b5a0 <rclc_support_init+0x70>
 800b5c0:	e7ec      	b.n	800b59c <rclc_support_init+0x6c>
 800b5c2:	bf00      	nop

0800b5c4 <rclc_node_init_default>:
 800b5c4:	b3b8      	cbz	r0, 800b636 <rclc_node_init_default+0x72>
 800b5c6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b5ca:	460d      	mov	r5, r1
 800b5cc:	b0a1      	sub	sp, #132	@ 0x84
 800b5ce:	b329      	cbz	r1, 800b61c <rclc_node_init_default+0x58>
 800b5d0:	4616      	mov	r6, r2
 800b5d2:	b31a      	cbz	r2, 800b61c <rclc_node_init_default+0x58>
 800b5d4:	461f      	mov	r7, r3
 800b5d6:	b30b      	cbz	r3, 800b61c <rclc_node_init_default+0x58>
 800b5d8:	f10d 0810 	add.w	r8, sp, #16
 800b5dc:	4604      	mov	r4, r0
 800b5de:	4640      	mov	r0, r8
 800b5e0:	f7fe fcda 	bl	8009f98 <rcl_get_zero_initialized_node>
 800b5e4:	e898 0003 	ldmia.w	r8, {r0, r1}
 800b5e8:	f10d 0918 	add.w	r9, sp, #24
 800b5ec:	e884 0003 	stmia.w	r4, {r0, r1}
 800b5f0:	4648      	mov	r0, r9
 800b5f2:	f7fe fe7b 	bl	800a2ec <rcl_node_get_default_options>
 800b5f6:	4640      	mov	r0, r8
 800b5f8:	f7fe fcce 	bl	8009f98 <rcl_get_zero_initialized_node>
 800b5fc:	f8cd 9000 	str.w	r9, [sp]
 800b600:	e898 0003 	ldmia.w	r8, {r0, r1}
 800b604:	463b      	mov	r3, r7
 800b606:	e884 0003 	stmia.w	r4, {r0, r1}
 800b60a:	4632      	mov	r2, r6
 800b60c:	4629      	mov	r1, r5
 800b60e:	4620      	mov	r0, r4
 800b610:	f7fe fccc 	bl	8009fac <rcl_node_init>
 800b614:	b930      	cbnz	r0, 800b624 <rclc_node_init_default+0x60>
 800b616:	b021      	add	sp, #132	@ 0x84
 800b618:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b61c:	200b      	movs	r0, #11
 800b61e:	b021      	add	sp, #132	@ 0x84
 800b620:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b624:	9003      	str	r0, [sp, #12]
 800b626:	f000 f8ef 	bl	800b808 <rcutils_reset_error>
 800b62a:	f000 f8ed 	bl	800b808 <rcutils_reset_error>
 800b62e:	9803      	ldr	r0, [sp, #12]
 800b630:	b021      	add	sp, #132	@ 0x84
 800b632:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b636:	200b      	movs	r0, #11
 800b638:	4770      	bx	lr
 800b63a:	bf00      	nop

0800b63c <rclc_publisher_init_best_effort>:
 800b63c:	b368      	cbz	r0, 800b69a <rclc_publisher_init_best_effort+0x5e>
 800b63e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b642:	460d      	mov	r5, r1
 800b644:	b0a0      	sub	sp, #128	@ 0x80
 800b646:	b321      	cbz	r1, 800b692 <rclc_publisher_init_best_effort+0x56>
 800b648:	4616      	mov	r6, r2
 800b64a:	b312      	cbz	r2, 800b692 <rclc_publisher_init_best_effort+0x56>
 800b64c:	461f      	mov	r7, r3
 800b64e:	b303      	cbz	r3, 800b692 <rclc_publisher_init_best_effort+0x56>
 800b650:	4604      	mov	r4, r0
 800b652:	f7fe fe77 	bl	800a344 <rcl_get_zero_initialized_publisher>
 800b656:	f10d 0810 	add.w	r8, sp, #16
 800b65a:	6020      	str	r0, [r4, #0]
 800b65c:	4640      	mov	r0, r8
 800b65e:	f7fe ff39 	bl	800a4d4 <rcl_publisher_get_default_options>
 800b662:	490f      	ldr	r1, [pc, #60]	@ (800b6a0 <rclc_publisher_init_best_effort+0x64>)
 800b664:	2250      	movs	r2, #80	@ 0x50
 800b666:	4640      	mov	r0, r8
 800b668:	f00c fc01 	bl	8017e6e <memcpy>
 800b66c:	f8cd 8000 	str.w	r8, [sp]
 800b670:	463b      	mov	r3, r7
 800b672:	4632      	mov	r2, r6
 800b674:	4629      	mov	r1, r5
 800b676:	4620      	mov	r0, r4
 800b678:	f7fe fe6a 	bl	800a350 <rcl_publisher_init>
 800b67c:	b910      	cbnz	r0, 800b684 <rclc_publisher_init_best_effort+0x48>
 800b67e:	b020      	add	sp, #128	@ 0x80
 800b680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b684:	9003      	str	r0, [sp, #12]
 800b686:	f000 f8bf 	bl	800b808 <rcutils_reset_error>
 800b68a:	9803      	ldr	r0, [sp, #12]
 800b68c:	b020      	add	sp, #128	@ 0x80
 800b68e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b692:	200b      	movs	r0, #11
 800b694:	b020      	add	sp, #128	@ 0x80
 800b696:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b69a:	200b      	movs	r0, #11
 800b69c:	4770      	bx	lr
 800b69e:	bf00      	nop
 800b6a0:	08019f70 	.word	0x08019f70

0800b6a4 <rclc_subscription_init_default>:
 800b6a4:	b368      	cbz	r0, 800b702 <rclc_subscription_init_default+0x5e>
 800b6a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6aa:	460d      	mov	r5, r1
 800b6ac:	b0a0      	sub	sp, #128	@ 0x80
 800b6ae:	b321      	cbz	r1, 800b6fa <rclc_subscription_init_default+0x56>
 800b6b0:	4616      	mov	r6, r2
 800b6b2:	b312      	cbz	r2, 800b6fa <rclc_subscription_init_default+0x56>
 800b6b4:	461f      	mov	r7, r3
 800b6b6:	b303      	cbz	r3, 800b6fa <rclc_subscription_init_default+0x56>
 800b6b8:	4604      	mov	r4, r0
 800b6ba:	f7fe ff7f 	bl	800a5bc <rcl_get_zero_initialized_subscription>
 800b6be:	f10d 0810 	add.w	r8, sp, #16
 800b6c2:	6020      	str	r0, [r4, #0]
 800b6c4:	4640      	mov	r0, r8
 800b6c6:	f7ff f87b 	bl	800a7c0 <rcl_subscription_get_default_options>
 800b6ca:	490f      	ldr	r1, [pc, #60]	@ (800b708 <rclc_subscription_init_default+0x64>)
 800b6cc:	2250      	movs	r2, #80	@ 0x50
 800b6ce:	4640      	mov	r0, r8
 800b6d0:	f00c fbcd 	bl	8017e6e <memcpy>
 800b6d4:	f8cd 8000 	str.w	r8, [sp]
 800b6d8:	463b      	mov	r3, r7
 800b6da:	4632      	mov	r2, r6
 800b6dc:	4629      	mov	r1, r5
 800b6de:	4620      	mov	r0, r4
 800b6e0:	f7fe ff72 	bl	800a5c8 <rcl_subscription_init>
 800b6e4:	b910      	cbnz	r0, 800b6ec <rclc_subscription_init_default+0x48>
 800b6e6:	b020      	add	sp, #128	@ 0x80
 800b6e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6ec:	9003      	str	r0, [sp, #12]
 800b6ee:	f000 f88b 	bl	800b808 <rcutils_reset_error>
 800b6f2:	9803      	ldr	r0, [sp, #12]
 800b6f4:	b020      	add	sp, #128	@ 0x80
 800b6f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6fa:	200b      	movs	r0, #11
 800b6fc:	b020      	add	sp, #128	@ 0x80
 800b6fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b702:	200b      	movs	r0, #11
 800b704:	4770      	bx	lr
 800b706:	bf00      	nop
 800b708:	08019fc0 	.word	0x08019fc0

0800b70c <__default_zero_allocate>:
 800b70c:	f00b b92a 	b.w	8016964 <calloc>

0800b710 <__default_reallocate>:
 800b710:	f00b bac8 	b.w	8016ca4 <realloc>

0800b714 <__default_deallocate>:
 800b714:	f00b b9a4 	b.w	8016a60 <free>

0800b718 <__default_allocate>:
 800b718:	f00b b99a 	b.w	8016a50 <malloc>

0800b71c <rcutils_get_zero_initialized_allocator>:
 800b71c:	b510      	push	{r4, lr}
 800b71e:	4c05      	ldr	r4, [pc, #20]	@ (800b734 <rcutils_get_zero_initialized_allocator+0x18>)
 800b720:	4686      	mov	lr, r0
 800b722:	4684      	mov	ip, r0
 800b724:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b726:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b72a:	6823      	ldr	r3, [r4, #0]
 800b72c:	f8cc 3000 	str.w	r3, [ip]
 800b730:	4670      	mov	r0, lr
 800b732:	bd10      	pop	{r4, pc}
 800b734:	0801a010 	.word	0x0801a010

0800b738 <rcutils_set_default_allocator>:
 800b738:	b1a8      	cbz	r0, 800b766 <rcutils_set_default_allocator+0x2e>
 800b73a:	6802      	ldr	r2, [r0, #0]
 800b73c:	b1a2      	cbz	r2, 800b768 <rcutils_set_default_allocator+0x30>
 800b73e:	6841      	ldr	r1, [r0, #4]
 800b740:	b1a1      	cbz	r1, 800b76c <rcutils_set_default_allocator+0x34>
 800b742:	b410      	push	{r4}
 800b744:	68c4      	ldr	r4, [r0, #12]
 800b746:	b164      	cbz	r4, 800b762 <rcutils_set_default_allocator+0x2a>
 800b748:	6880      	ldr	r0, [r0, #8]
 800b74a:	b138      	cbz	r0, 800b75c <rcutils_set_default_allocator+0x24>
 800b74c:	4b08      	ldr	r3, [pc, #32]	@ (800b770 <rcutils_set_default_allocator+0x38>)
 800b74e:	601a      	str	r2, [r3, #0]
 800b750:	2200      	movs	r2, #0
 800b752:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800b756:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800b75a:	2001      	movs	r0, #1
 800b75c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b760:	4770      	bx	lr
 800b762:	4620      	mov	r0, r4
 800b764:	e7fa      	b.n	800b75c <rcutils_set_default_allocator+0x24>
 800b766:	4770      	bx	lr
 800b768:	4610      	mov	r0, r2
 800b76a:	4770      	bx	lr
 800b76c:	4608      	mov	r0, r1
 800b76e:	4770      	bx	lr
 800b770:	2000001c 	.word	0x2000001c

0800b774 <rcutils_get_default_allocator>:
 800b774:	b510      	push	{r4, lr}
 800b776:	4c05      	ldr	r4, [pc, #20]	@ (800b78c <rcutils_get_default_allocator+0x18>)
 800b778:	4686      	mov	lr, r0
 800b77a:	4684      	mov	ip, r0
 800b77c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b77e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b782:	6823      	ldr	r3, [r4, #0]
 800b784:	f8cc 3000 	str.w	r3, [ip]
 800b788:	4670      	mov	r0, lr
 800b78a:	bd10      	pop	{r4, pc}
 800b78c:	2000001c 	.word	0x2000001c

0800b790 <rcutils_allocator_is_valid>:
 800b790:	b158      	cbz	r0, 800b7aa <rcutils_allocator_is_valid+0x1a>
 800b792:	6803      	ldr	r3, [r0, #0]
 800b794:	b143      	cbz	r3, 800b7a8 <rcutils_allocator_is_valid+0x18>
 800b796:	6843      	ldr	r3, [r0, #4]
 800b798:	b133      	cbz	r3, 800b7a8 <rcutils_allocator_is_valid+0x18>
 800b79a:	68c3      	ldr	r3, [r0, #12]
 800b79c:	b123      	cbz	r3, 800b7a8 <rcutils_allocator_is_valid+0x18>
 800b79e:	6880      	ldr	r0, [r0, #8]
 800b7a0:	3800      	subs	r0, #0
 800b7a2:	bf18      	it	ne
 800b7a4:	2001      	movne	r0, #1
 800b7a6:	4770      	bx	lr
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	4770      	bx	lr

0800b7ac <rcutils_get_env>:
 800b7ac:	b168      	cbz	r0, 800b7ca <rcutils_get_env+0x1e>
 800b7ae:	b510      	push	{r4, lr}
 800b7b0:	460c      	mov	r4, r1
 800b7b2:	b129      	cbz	r1, 800b7c0 <rcutils_get_env+0x14>
 800b7b4:	f00b f904 	bl	80169c0 <getenv>
 800b7b8:	b120      	cbz	r0, 800b7c4 <rcutils_get_env+0x18>
 800b7ba:	6020      	str	r0, [r4, #0]
 800b7bc:	2000      	movs	r0, #0
 800b7be:	bd10      	pop	{r4, pc}
 800b7c0:	4803      	ldr	r0, [pc, #12]	@ (800b7d0 <rcutils_get_env+0x24>)
 800b7c2:	bd10      	pop	{r4, pc}
 800b7c4:	4b03      	ldr	r3, [pc, #12]	@ (800b7d4 <rcutils_get_env+0x28>)
 800b7c6:	6023      	str	r3, [r4, #0]
 800b7c8:	bd10      	pop	{r4, pc}
 800b7ca:	4803      	ldr	r0, [pc, #12]	@ (800b7d8 <rcutils_get_env+0x2c>)
 800b7cc:	4770      	bx	lr
 800b7ce:	bf00      	nop
 800b7d0:	0801a040 	.word	0x0801a040
 800b7d4:	0801a9a8 	.word	0x0801a9a8
 800b7d8:	0801a024 	.word	0x0801a024

0800b7dc <rcutils_get_error_string>:
 800b7dc:	4b06      	ldr	r3, [pc, #24]	@ (800b7f8 <rcutils_get_error_string+0x1c>)
 800b7de:	781b      	ldrb	r3, [r3, #0]
 800b7e0:	b13b      	cbz	r3, 800b7f2 <rcutils_get_error_string+0x16>
 800b7e2:	4b06      	ldr	r3, [pc, #24]	@ (800b7fc <rcutils_get_error_string+0x20>)
 800b7e4:	781a      	ldrb	r2, [r3, #0]
 800b7e6:	b90a      	cbnz	r2, 800b7ec <rcutils_get_error_string+0x10>
 800b7e8:	2201      	movs	r2, #1
 800b7ea:	701a      	strb	r2, [r3, #0]
 800b7ec:	4b04      	ldr	r3, [pc, #16]	@ (800b800 <rcutils_get_error_string+0x24>)
 800b7ee:	7818      	ldrb	r0, [r3, #0]
 800b7f0:	4770      	bx	lr
 800b7f2:	4b04      	ldr	r3, [pc, #16]	@ (800b804 <rcutils_get_error_string+0x28>)
 800b7f4:	7818      	ldrb	r0, [r3, #0]
 800b7f6:	4770      	bx	lr
 800b7f8:	2000c1f0 	.word	0x2000c1f0
 800b7fc:	2000c209 	.word	0x2000c209
 800b800:	2000c208 	.word	0x2000c208
 800b804:	0801a05c 	.word	0x0801a05c

0800b808 <rcutils_reset_error>:
 800b808:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800b828 <rcutils_reset_error+0x20>
 800b80c:	4a08      	ldr	r2, [pc, #32]	@ (800b830 <rcutils_reset_error+0x28>)
 800b80e:	4809      	ldr	r0, [pc, #36]	@ (800b834 <rcutils_reset_error+0x2c>)
 800b810:	4909      	ldr	r1, [pc, #36]	@ (800b838 <rcutils_reset_error+0x30>)
 800b812:	2300      	movs	r3, #0
 800b814:	8013      	strh	r3, [r2, #0]
 800b816:	ed82 7b02 	vstr	d7, [r2, #8]
 800b81a:	4a08      	ldr	r2, [pc, #32]	@ (800b83c <rcutils_reset_error+0x34>)
 800b81c:	7003      	strb	r3, [r0, #0]
 800b81e:	700b      	strb	r3, [r1, #0]
 800b820:	7013      	strb	r3, [r2, #0]
 800b822:	4770      	bx	lr
 800b824:	f3af 8000 	nop.w
	...
 800b830:	2000c1f8 	.word	0x2000c1f8
 800b834:	2000c209 	.word	0x2000c209
 800b838:	2000c208 	.word	0x2000c208
 800b83c:	2000c1f0 	.word	0x2000c1f0

0800b840 <rcutils_format_string_limit>:
 800b840:	b40f      	push	{r0, r1, r2, r3}
 800b842:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b844:	b083      	sub	sp, #12
 800b846:	ac08      	add	r4, sp, #32
 800b848:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 800b84a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b84e:	b34e      	cbz	r6, 800b8a4 <rcutils_format_string_limit+0x64>
 800b850:	a808      	add	r0, sp, #32
 800b852:	f7ff ff9d 	bl	800b790 <rcutils_allocator_is_valid>
 800b856:	b328      	cbz	r0, 800b8a4 <rcutils_format_string_limit+0x64>
 800b858:	2100      	movs	r1, #0
 800b85a:	ab0f      	add	r3, sp, #60	@ 0x3c
 800b85c:	4632      	mov	r2, r6
 800b85e:	4608      	mov	r0, r1
 800b860:	e9cd 3300 	strd	r3, r3, [sp]
 800b864:	f000 f8f4 	bl	800ba50 <rcutils_vsnprintf>
 800b868:	1c43      	adds	r3, r0, #1
 800b86a:	4605      	mov	r5, r0
 800b86c:	d01a      	beq.n	800b8a4 <rcutils_format_string_limit+0x64>
 800b86e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b870:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b872:	1c47      	adds	r7, r0, #1
 800b874:	429f      	cmp	r7, r3
 800b876:	bf84      	itt	hi
 800b878:	461f      	movhi	r7, r3
 800b87a:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 800b87e:	4638      	mov	r0, r7
 800b880:	9b08      	ldr	r3, [sp, #32]
 800b882:	4798      	blx	r3
 800b884:	4604      	mov	r4, r0
 800b886:	b168      	cbz	r0, 800b8a4 <rcutils_format_string_limit+0x64>
 800b888:	9b01      	ldr	r3, [sp, #4]
 800b88a:	4632      	mov	r2, r6
 800b88c:	4639      	mov	r1, r7
 800b88e:	f000 f8df 	bl	800ba50 <rcutils_vsnprintf>
 800b892:	2800      	cmp	r0, #0
 800b894:	db02      	blt.n	800b89c <rcutils_format_string_limit+0x5c>
 800b896:	2300      	movs	r3, #0
 800b898:	5563      	strb	r3, [r4, r5]
 800b89a:	e004      	b.n	800b8a6 <rcutils_format_string_limit+0x66>
 800b89c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b89e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b8a0:	4620      	mov	r0, r4
 800b8a2:	4798      	blx	r3
 800b8a4:	2400      	movs	r4, #0
 800b8a6:	4620      	mov	r0, r4
 800b8a8:	b003      	add	sp, #12
 800b8aa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800b8ae:	b004      	add	sp, #16
 800b8b0:	4770      	bx	lr
 800b8b2:	bf00      	nop

0800b8b4 <rcutils_repl_str>:
 800b8b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8b8:	ed2d 8b02 	vpush	{d8}
 800b8bc:	b087      	sub	sp, #28
 800b8be:	4680      	mov	r8, r0
 800b8c0:	4608      	mov	r0, r1
 800b8c2:	f8cd 8004 	str.w	r8, [sp, #4]
 800b8c6:	ee08 2a10 	vmov	s16, r2
 800b8ca:	468a      	mov	sl, r1
 800b8cc:	4699      	mov	r9, r3
 800b8ce:	f7f4 fcff 	bl	80002d0 <strlen>
 800b8d2:	2600      	movs	r6, #0
 800b8d4:	4647      	mov	r7, r8
 800b8d6:	9002      	str	r0, [sp, #8]
 800b8d8:	46b3      	mov	fp, r6
 800b8da:	2510      	movs	r5, #16
 800b8dc:	46b0      	mov	r8, r6
 800b8de:	e01d      	b.n	800b91c <rcutils_repl_str+0x68>
 800b8e0:	f10b 0b01 	add.w	fp, fp, #1
 800b8e4:	455e      	cmp	r6, fp
 800b8e6:	d211      	bcs.n	800b90c <rcutils_repl_str+0x58>
 800b8e8:	442e      	add	r6, r5
 800b8ea:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800b8ee:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800b8f2:	00b1      	lsls	r1, r6, #2
 800b8f4:	4798      	blx	r3
 800b8f6:	2800      	cmp	r0, #0
 800b8f8:	f000 8088 	beq.w	800ba0c <rcutils_repl_str+0x158>
 800b8fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b900:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 800b904:	4680      	mov	r8, r0
 800b906:	bf28      	it	cs
 800b908:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 800b90c:	9a01      	ldr	r2, [sp, #4]
 800b90e:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 800b912:	1aa2      	subs	r2, r4, r2
 800b914:	f843 2c04 	str.w	r2, [r3, #-4]
 800b918:	9b02      	ldr	r3, [sp, #8]
 800b91a:	18e7      	adds	r7, r4, r3
 800b91c:	4651      	mov	r1, sl
 800b91e:	4638      	mov	r0, r7
 800b920:	f00c f9a9 	bl	8017c76 <strstr>
 800b924:	4604      	mov	r4, r0
 800b926:	4640      	mov	r0, r8
 800b928:	2c00      	cmp	r4, #0
 800b92a:	d1d9      	bne.n	800b8e0 <rcutils_repl_str+0x2c>
 800b92c:	46b8      	mov	r8, r7
 800b92e:	4607      	mov	r7, r0
 800b930:	4640      	mov	r0, r8
 800b932:	f7f4 fccd 	bl	80002d0 <strlen>
 800b936:	9b01      	ldr	r3, [sp, #4]
 800b938:	eba8 0303 	sub.w	r3, r8, r3
 800b93c:	181c      	adds	r4, r3, r0
 800b93e:	9404      	str	r4, [sp, #16]
 800b940:	f1bb 0f00 	cmp.w	fp, #0
 800b944:	d04a      	beq.n	800b9dc <rcutils_repl_str+0x128>
 800b946:	ee18 0a10 	vmov	r0, s16
 800b94a:	f7f4 fcc1 	bl	80002d0 <strlen>
 800b94e:	9b02      	ldr	r3, [sp, #8]
 800b950:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800b954:	1ac3      	subs	r3, r0, r3
 800b956:	fb0b 4303 	mla	r3, fp, r3, r4
 800b95a:	461a      	mov	r2, r3
 800b95c:	9305      	str	r3, [sp, #20]
 800b95e:	4606      	mov	r6, r0
 800b960:	f8d9 3000 	ldr.w	r3, [r9]
 800b964:	1c50      	adds	r0, r2, #1
 800b966:	4798      	blx	r3
 800b968:	9003      	str	r0, [sp, #12]
 800b96a:	2800      	cmp	r0, #0
 800b96c:	d04f      	beq.n	800ba0e <rcutils_repl_str+0x15a>
 800b96e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b972:	683a      	ldr	r2, [r7, #0]
 800b974:	4641      	mov	r1, r8
 800b976:	f00c fa7a 	bl	8017e6e <memcpy>
 800b97a:	683d      	ldr	r5, [r7, #0]
 800b97c:	9b03      	ldr	r3, [sp, #12]
 800b97e:	9701      	str	r7, [sp, #4]
 800b980:	46ba      	mov	sl, r7
 800b982:	441d      	add	r5, r3
 800b984:	9f02      	ldr	r7, [sp, #8]
 800b986:	f8cd 9008 	str.w	r9, [sp, #8]
 800b98a:	2401      	movs	r4, #1
 800b98c:	46d1      	mov	r9, sl
 800b98e:	ee18 aa10 	vmov	sl, s16
 800b992:	e00a      	b.n	800b9aa <rcutils_repl_str+0xf6>
 800b994:	f8d9 5000 	ldr.w	r5, [r9]
 800b998:	1aaa      	subs	r2, r5, r2
 800b99a:	1885      	adds	r5, r0, r2
 800b99c:	f00c fa67 	bl	8017e6e <memcpy>
 800b9a0:	45a3      	cmp	fp, r4
 800b9a2:	f104 0201 	add.w	r2, r4, #1
 800b9a6:	d935      	bls.n	800ba14 <rcutils_repl_str+0x160>
 800b9a8:	4614      	mov	r4, r2
 800b9aa:	4632      	mov	r2, r6
 800b9ac:	4651      	mov	r1, sl
 800b9ae:	4628      	mov	r0, r5
 800b9b0:	f00c fa5d 	bl	8017e6e <memcpy>
 800b9b4:	f859 2b04 	ldr.w	r2, [r9], #4
 800b9b8:	45a3      	cmp	fp, r4
 800b9ba:	443a      	add	r2, r7
 800b9bc:	eb05 0006 	add.w	r0, r5, r6
 800b9c0:	eb08 0102 	add.w	r1, r8, r2
 800b9c4:	d1e6      	bne.n	800b994 <rcutils_repl_str+0xe0>
 800b9c6:	9b04      	ldr	r3, [sp, #16]
 800b9c8:	1a9a      	subs	r2, r3, r2
 800b9ca:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 800b9ce:	f00c fa4e 	bl	8017e6e <memcpy>
 800b9d2:	9a03      	ldr	r2, [sp, #12]
 800b9d4:	9905      	ldr	r1, [sp, #20]
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	5453      	strb	r3, [r2, r1]
 800b9da:	e00b      	b.n	800b9f4 <rcutils_repl_str+0x140>
 800b9dc:	4620      	mov	r0, r4
 800b9de:	f8d9 3000 	ldr.w	r3, [r9]
 800b9e2:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800b9e6:	3001      	adds	r0, #1
 800b9e8:	4798      	blx	r3
 800b9ea:	9003      	str	r0, [sp, #12]
 800b9ec:	b110      	cbz	r0, 800b9f4 <rcutils_repl_str+0x140>
 800b9ee:	9901      	ldr	r1, [sp, #4]
 800b9f0:	f00c fa35 	bl	8017e5e <strcpy>
 800b9f4:	4638      	mov	r0, r7
 800b9f6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800b9fa:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800b9fe:	4798      	blx	r3
 800ba00:	9803      	ldr	r0, [sp, #12]
 800ba02:	b007      	add	sp, #28
 800ba04:	ecbd 8b02 	vpop	{d8}
 800ba08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba0c:	4647      	mov	r7, r8
 800ba0e:	2300      	movs	r3, #0
 800ba10:	9303      	str	r3, [sp, #12]
 800ba12:	e7ef      	b.n	800b9f4 <rcutils_repl_str+0x140>
 800ba14:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 800ba18:	e7db      	b.n	800b9d2 <rcutils_repl_str+0x11e>
 800ba1a:	bf00      	nop

0800ba1c <rcutils_snprintf>:
 800ba1c:	b40c      	push	{r2, r3}
 800ba1e:	b530      	push	{r4, r5, lr}
 800ba20:	b083      	sub	sp, #12
 800ba22:	ab06      	add	r3, sp, #24
 800ba24:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba28:	9301      	str	r3, [sp, #4]
 800ba2a:	b152      	cbz	r2, 800ba42 <rcutils_snprintf+0x26>
 800ba2c:	b138      	cbz	r0, 800ba3e <rcutils_snprintf+0x22>
 800ba2e:	b141      	cbz	r1, 800ba42 <rcutils_snprintf+0x26>
 800ba30:	f00c f82e 	bl	8017a90 <vsniprintf>
 800ba34:	b003      	add	sp, #12
 800ba36:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ba3a:	b002      	add	sp, #8
 800ba3c:	4770      	bx	lr
 800ba3e:	2900      	cmp	r1, #0
 800ba40:	d0f6      	beq.n	800ba30 <rcutils_snprintf+0x14>
 800ba42:	f00c f9df 	bl	8017e04 <__errno>
 800ba46:	2316      	movs	r3, #22
 800ba48:	6003      	str	r3, [r0, #0]
 800ba4a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ba4e:	e7f1      	b.n	800ba34 <rcutils_snprintf+0x18>

0800ba50 <rcutils_vsnprintf>:
 800ba50:	b570      	push	{r4, r5, r6, lr}
 800ba52:	b13a      	cbz	r2, 800ba64 <rcutils_vsnprintf+0x14>
 800ba54:	b120      	cbz	r0, 800ba60 <rcutils_vsnprintf+0x10>
 800ba56:	b129      	cbz	r1, 800ba64 <rcutils_vsnprintf+0x14>
 800ba58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ba5c:	f00c b818 	b.w	8017a90 <vsniprintf>
 800ba60:	2900      	cmp	r1, #0
 800ba62:	d0f9      	beq.n	800ba58 <rcutils_vsnprintf+0x8>
 800ba64:	f00c f9ce 	bl	8017e04 <__errno>
 800ba68:	2316      	movs	r3, #22
 800ba6a:	6003      	str	r3, [r0, #0]
 800ba6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ba70:	bd70      	pop	{r4, r5, r6, pc}
 800ba72:	bf00      	nop

0800ba74 <rcutils_strdup>:
 800ba74:	b084      	sub	sp, #16
 800ba76:	b570      	push	{r4, r5, r6, lr}
 800ba78:	b082      	sub	sp, #8
 800ba7a:	ac07      	add	r4, sp, #28
 800ba7c:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 800ba80:	4605      	mov	r5, r0
 800ba82:	b1b0      	cbz	r0, 800bab2 <rcutils_strdup+0x3e>
 800ba84:	f7f4 fc24 	bl	80002d0 <strlen>
 800ba88:	1c42      	adds	r2, r0, #1
 800ba8a:	9b07      	ldr	r3, [sp, #28]
 800ba8c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ba8e:	9201      	str	r2, [sp, #4]
 800ba90:	4606      	mov	r6, r0
 800ba92:	4610      	mov	r0, r2
 800ba94:	4798      	blx	r3
 800ba96:	4604      	mov	r4, r0
 800ba98:	b128      	cbz	r0, 800baa6 <rcutils_strdup+0x32>
 800ba9a:	9a01      	ldr	r2, [sp, #4]
 800ba9c:	4629      	mov	r1, r5
 800ba9e:	f00c f9e6 	bl	8017e6e <memcpy>
 800baa2:	2300      	movs	r3, #0
 800baa4:	55a3      	strb	r3, [r4, r6]
 800baa6:	4620      	mov	r0, r4
 800baa8:	b002      	add	sp, #8
 800baaa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800baae:	b004      	add	sp, #16
 800bab0:	4770      	bx	lr
 800bab2:	4604      	mov	r4, r0
 800bab4:	e7f7      	b.n	800baa6 <rcutils_strdup+0x32>
 800bab6:	bf00      	nop

0800bab8 <rcutils_strndup>:
 800bab8:	b082      	sub	sp, #8
 800baba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800babc:	ac06      	add	r4, sp, #24
 800babe:	e884 000c 	stmia.w	r4, {r2, r3}
 800bac2:	4605      	mov	r5, r0
 800bac4:	b188      	cbz	r0, 800baea <rcutils_strndup+0x32>
 800bac6:	1c4f      	adds	r7, r1, #1
 800bac8:	460e      	mov	r6, r1
 800baca:	4638      	mov	r0, r7
 800bacc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bace:	4790      	blx	r2
 800bad0:	4604      	mov	r4, r0
 800bad2:	b128      	cbz	r0, 800bae0 <rcutils_strndup+0x28>
 800bad4:	463a      	mov	r2, r7
 800bad6:	4629      	mov	r1, r5
 800bad8:	f00c f9c9 	bl	8017e6e <memcpy>
 800badc:	2300      	movs	r3, #0
 800bade:	55a3      	strb	r3, [r4, r6]
 800bae0:	4620      	mov	r0, r4
 800bae2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bae6:	b002      	add	sp, #8
 800bae8:	4770      	bx	lr
 800baea:	4604      	mov	r4, r0
 800baec:	e7f8      	b.n	800bae0 <rcutils_strndup+0x28>
 800baee:	bf00      	nop

0800baf0 <rcutils_system_time_now>:
 800baf0:	b308      	cbz	r0, 800bb36 <rcutils_system_time_now+0x46>
 800baf2:	b570      	push	{r4, r5, r6, lr}
 800baf4:	b084      	sub	sp, #16
 800baf6:	4604      	mov	r4, r0
 800baf8:	4669      	mov	r1, sp
 800bafa:	2001      	movs	r0, #1
 800bafc:	f7f6 fbdc 	bl	80022b8 <clock_gettime>
 800bb00:	e9dd 3500 	ldrd	r3, r5, [sp]
 800bb04:	2d00      	cmp	r5, #0
 800bb06:	db13      	blt.n	800bb30 <rcutils_system_time_now+0x40>
 800bb08:	9902      	ldr	r1, [sp, #8]
 800bb0a:	2900      	cmp	r1, #0
 800bb0c:	db0d      	blt.n	800bb2a <rcutils_system_time_now+0x3a>
 800bb0e:	4e0b      	ldr	r6, [pc, #44]	@ (800bb3c <rcutils_system_time_now+0x4c>)
 800bb10:	fba3 3206 	umull	r3, r2, r3, r6
 800bb14:	185b      	adds	r3, r3, r1
 800bb16:	fb06 2205 	mla	r2, r6, r5, r2
 800bb1a:	f04f 0000 	mov.w	r0, #0
 800bb1e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800bb22:	e9c4 3200 	strd	r3, r2, [r4]
 800bb26:	b004      	add	sp, #16
 800bb28:	bd70      	pop	{r4, r5, r6, pc}
 800bb2a:	ea53 0205 	orrs.w	r2, r3, r5
 800bb2e:	d1ee      	bne.n	800bb0e <rcutils_system_time_now+0x1e>
 800bb30:	2002      	movs	r0, #2
 800bb32:	b004      	add	sp, #16
 800bb34:	bd70      	pop	{r4, r5, r6, pc}
 800bb36:	200b      	movs	r0, #11
 800bb38:	4770      	bx	lr
 800bb3a:	bf00      	nop
 800bb3c:	3b9aca00 	.word	0x3b9aca00

0800bb40 <rcutils_steady_time_now>:
 800bb40:	b308      	cbz	r0, 800bb86 <rcutils_steady_time_now+0x46>
 800bb42:	b570      	push	{r4, r5, r6, lr}
 800bb44:	b084      	sub	sp, #16
 800bb46:	4604      	mov	r4, r0
 800bb48:	4669      	mov	r1, sp
 800bb4a:	2000      	movs	r0, #0
 800bb4c:	f7f6 fbb4 	bl	80022b8 <clock_gettime>
 800bb50:	e9dd 3500 	ldrd	r3, r5, [sp]
 800bb54:	2d00      	cmp	r5, #0
 800bb56:	db13      	blt.n	800bb80 <rcutils_steady_time_now+0x40>
 800bb58:	9902      	ldr	r1, [sp, #8]
 800bb5a:	2900      	cmp	r1, #0
 800bb5c:	db0d      	blt.n	800bb7a <rcutils_steady_time_now+0x3a>
 800bb5e:	4e0b      	ldr	r6, [pc, #44]	@ (800bb8c <rcutils_steady_time_now+0x4c>)
 800bb60:	fba3 3206 	umull	r3, r2, r3, r6
 800bb64:	185b      	adds	r3, r3, r1
 800bb66:	fb06 2205 	mla	r2, r6, r5, r2
 800bb6a:	f04f 0000 	mov.w	r0, #0
 800bb6e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800bb72:	e9c4 3200 	strd	r3, r2, [r4]
 800bb76:	b004      	add	sp, #16
 800bb78:	bd70      	pop	{r4, r5, r6, pc}
 800bb7a:	ea53 0205 	orrs.w	r2, r3, r5
 800bb7e:	d1ee      	bne.n	800bb5e <rcutils_steady_time_now+0x1e>
 800bb80:	2002      	movs	r0, #2
 800bb82:	b004      	add	sp, #16
 800bb84:	bd70      	pop	{r4, r5, r6, pc}
 800bb86:	200b      	movs	r0, #11
 800bb88:	4770      	bx	lr
 800bb8a:	bf00      	nop
 800bb8c:	3b9aca00 	.word	0x3b9aca00

0800bb90 <rmw_get_default_publisher_options>:
 800bb90:	2200      	movs	r2, #0
 800bb92:	6002      	str	r2, [r0, #0]
 800bb94:	7102      	strb	r2, [r0, #4]
 800bb96:	4770      	bx	lr

0800bb98 <rmw_subscription_content_filter_options_fini>:
 800bb98:	b1b0      	cbz	r0, 800bbc8 <rmw_subscription_content_filter_options_fini+0x30>
 800bb9a:	b538      	push	{r3, r4, r5, lr}
 800bb9c:	4604      	mov	r4, r0
 800bb9e:	4608      	mov	r0, r1
 800bba0:	460d      	mov	r5, r1
 800bba2:	f7ff fdf5 	bl	800b790 <rcutils_allocator_is_valid>
 800bba6:	b168      	cbz	r0, 800bbc4 <rmw_subscription_content_filter_options_fini+0x2c>
 800bba8:	6820      	ldr	r0, [r4, #0]
 800bbaa:	b120      	cbz	r0, 800bbb6 <rmw_subscription_content_filter_options_fini+0x1e>
 800bbac:	686b      	ldr	r3, [r5, #4]
 800bbae:	6929      	ldr	r1, [r5, #16]
 800bbb0:	4798      	blx	r3
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	6023      	str	r3, [r4, #0]
 800bbb6:	1d20      	adds	r0, r4, #4
 800bbb8:	f006 fe72 	bl	80128a0 <rcutils_string_array_fini>
 800bbbc:	3800      	subs	r0, #0
 800bbbe:	bf18      	it	ne
 800bbc0:	2001      	movne	r0, #1
 800bbc2:	bd38      	pop	{r3, r4, r5, pc}
 800bbc4:	200b      	movs	r0, #11
 800bbc6:	bd38      	pop	{r3, r4, r5, pc}
 800bbc8:	200b      	movs	r0, #11
 800bbca:	4770      	bx	lr

0800bbcc <rmw_get_default_subscription_options>:
 800bbcc:	2200      	movs	r2, #0
 800bbce:	e9c0 2200 	strd	r2, r2, [r0]
 800bbd2:	6082      	str	r2, [r0, #8]
 800bbd4:	4770      	bx	lr
 800bbd6:	bf00      	nop

0800bbd8 <rmw_get_zero_initialized_message_info>:
 800bbd8:	b510      	push	{r4, lr}
 800bbda:	2240      	movs	r2, #64	@ 0x40
 800bbdc:	4604      	mov	r4, r0
 800bbde:	2100      	movs	r1, #0
 800bbe0:	f00c f822 	bl	8017c28 <memset>
 800bbe4:	4620      	mov	r0, r4
 800bbe6:	bd10      	pop	{r4, pc}

0800bbe8 <rmw_validate_namespace_with_size>:
 800bbe8:	b340      	cbz	r0, 800bc3c <rmw_validate_namespace_with_size+0x54>
 800bbea:	b570      	push	{r4, r5, r6, lr}
 800bbec:	4614      	mov	r4, r2
 800bbee:	b0c2      	sub	sp, #264	@ 0x108
 800bbf0:	b332      	cbz	r2, 800bc40 <rmw_validate_namespace_with_size+0x58>
 800bbf2:	2901      	cmp	r1, #1
 800bbf4:	460d      	mov	r5, r1
 800bbf6:	461e      	mov	r6, r3
 800bbf8:	d102      	bne.n	800bc00 <rmw_validate_namespace_with_size+0x18>
 800bbfa:	7803      	ldrb	r3, [r0, #0]
 800bbfc:	2b2f      	cmp	r3, #47	@ 0x2f
 800bbfe:	d012      	beq.n	800bc26 <rmw_validate_namespace_with_size+0x3e>
 800bc00:	aa01      	add	r2, sp, #4
 800bc02:	4669      	mov	r1, sp
 800bc04:	f007 f848 	bl	8012c98 <rmw_validate_full_topic_name>
 800bc08:	b978      	cbnz	r0, 800bc2a <rmw_validate_namespace_with_size+0x42>
 800bc0a:	9b00      	ldr	r3, [sp, #0]
 800bc0c:	b14b      	cbz	r3, 800bc22 <rmw_validate_namespace_with_size+0x3a>
 800bc0e:	2b07      	cmp	r3, #7
 800bc10:	d007      	beq.n	800bc22 <rmw_validate_namespace_with_size+0x3a>
 800bc12:	1e5a      	subs	r2, r3, #1
 800bc14:	2a05      	cmp	r2, #5
 800bc16:	d82b      	bhi.n	800bc70 <rmw_validate_namespace_with_size+0x88>
 800bc18:	e8df f002 	tbb	[pc, r2]
 800bc1c:	1e212427 	.word	0x1e212427
 800bc20:	141b      	.short	0x141b
 800bc22:	2df5      	cmp	r5, #245	@ 0xf5
 800bc24:	d803      	bhi.n	800bc2e <rmw_validate_namespace_with_size+0x46>
 800bc26:	2000      	movs	r0, #0
 800bc28:	6020      	str	r0, [r4, #0]
 800bc2a:	b042      	add	sp, #264	@ 0x108
 800bc2c:	bd70      	pop	{r4, r5, r6, pc}
 800bc2e:	2307      	movs	r3, #7
 800bc30:	6023      	str	r3, [r4, #0]
 800bc32:	2e00      	cmp	r6, #0
 800bc34:	d0f9      	beq.n	800bc2a <rmw_validate_namespace_with_size+0x42>
 800bc36:	23f4      	movs	r3, #244	@ 0xf4
 800bc38:	6033      	str	r3, [r6, #0]
 800bc3a:	e7f6      	b.n	800bc2a <rmw_validate_namespace_with_size+0x42>
 800bc3c:	200b      	movs	r0, #11
 800bc3e:	4770      	bx	lr
 800bc40:	200b      	movs	r0, #11
 800bc42:	e7f2      	b.n	800bc2a <rmw_validate_namespace_with_size+0x42>
 800bc44:	2306      	movs	r3, #6
 800bc46:	6023      	str	r3, [r4, #0]
 800bc48:	2e00      	cmp	r6, #0
 800bc4a:	d0ee      	beq.n	800bc2a <rmw_validate_namespace_with_size+0x42>
 800bc4c:	9b01      	ldr	r3, [sp, #4]
 800bc4e:	6033      	str	r3, [r6, #0]
 800bc50:	e7eb      	b.n	800bc2a <rmw_validate_namespace_with_size+0x42>
 800bc52:	2305      	movs	r3, #5
 800bc54:	6023      	str	r3, [r4, #0]
 800bc56:	e7f7      	b.n	800bc48 <rmw_validate_namespace_with_size+0x60>
 800bc58:	2304      	movs	r3, #4
 800bc5a:	6023      	str	r3, [r4, #0]
 800bc5c:	e7f4      	b.n	800bc48 <rmw_validate_namespace_with_size+0x60>
 800bc5e:	2303      	movs	r3, #3
 800bc60:	6023      	str	r3, [r4, #0]
 800bc62:	e7f1      	b.n	800bc48 <rmw_validate_namespace_with_size+0x60>
 800bc64:	2302      	movs	r3, #2
 800bc66:	6023      	str	r3, [r4, #0]
 800bc68:	e7ee      	b.n	800bc48 <rmw_validate_namespace_with_size+0x60>
 800bc6a:	2301      	movs	r3, #1
 800bc6c:	6023      	str	r3, [r4, #0]
 800bc6e:	e7eb      	b.n	800bc48 <rmw_validate_namespace_with_size+0x60>
 800bc70:	4a03      	ldr	r2, [pc, #12]	@ (800bc80 <rmw_validate_namespace_with_size+0x98>)
 800bc72:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800bc76:	a802      	add	r0, sp, #8
 800bc78:	f7ff fed0 	bl	800ba1c <rcutils_snprintf>
 800bc7c:	2001      	movs	r0, #1
 800bc7e:	e7d4      	b.n	800bc2a <rmw_validate_namespace_with_size+0x42>
 800bc80:	0801a060 	.word	0x0801a060

0800bc84 <rmw_validate_namespace>:
 800bc84:	b168      	cbz	r0, 800bca2 <rmw_validate_namespace+0x1e>
 800bc86:	b570      	push	{r4, r5, r6, lr}
 800bc88:	460d      	mov	r5, r1
 800bc8a:	4616      	mov	r6, r2
 800bc8c:	4604      	mov	r4, r0
 800bc8e:	f7f4 fb1f 	bl	80002d0 <strlen>
 800bc92:	4633      	mov	r3, r6
 800bc94:	4601      	mov	r1, r0
 800bc96:	462a      	mov	r2, r5
 800bc98:	4620      	mov	r0, r4
 800bc9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bc9e:	f7ff bfa3 	b.w	800bbe8 <rmw_validate_namespace_with_size>
 800bca2:	200b      	movs	r0, #11
 800bca4:	4770      	bx	lr
 800bca6:	bf00      	nop

0800bca8 <rmw_namespace_validation_result_string>:
 800bca8:	2807      	cmp	r0, #7
 800bcaa:	bf9a      	itte	ls
 800bcac:	4b02      	ldrls	r3, [pc, #8]	@ (800bcb8 <rmw_namespace_validation_result_string+0x10>)
 800bcae:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800bcb2:	4802      	ldrhi	r0, [pc, #8]	@ (800bcbc <rmw_namespace_validation_result_string+0x14>)
 800bcb4:	4770      	bx	lr
 800bcb6:	bf00      	nop
 800bcb8:	0801a258 	.word	0x0801a258
 800bcbc:	0801a0b0 	.word	0x0801a0b0

0800bcc0 <rmw_validate_node_name>:
 800bcc0:	2800      	cmp	r0, #0
 800bcc2:	d03b      	beq.n	800bd3c <rmw_validate_node_name+0x7c>
 800bcc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcc8:	460d      	mov	r5, r1
 800bcca:	2900      	cmp	r1, #0
 800bccc:	d038      	beq.n	800bd40 <rmw_validate_node_name+0x80>
 800bcce:	4616      	mov	r6, r2
 800bcd0:	4604      	mov	r4, r0
 800bcd2:	f7f4 fafd 	bl	80002d0 <strlen>
 800bcd6:	b1e0      	cbz	r0, 800bd12 <rmw_validate_node_name+0x52>
 800bcd8:	1e63      	subs	r3, r4, #1
 800bcda:	eb03 0800 	add.w	r8, r3, r0
 800bcde:	f1c4 0101 	rsb	r1, r4, #1
 800bce2:	18cf      	adds	r7, r1, r3
 800bce4:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 800bce8:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 800bcec:	f02e 0c20 	bic.w	ip, lr, #32
 800bcf0:	2a09      	cmp	r2, #9
 800bcf2:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 800bcf6:	d914      	bls.n	800bd22 <rmw_validate_node_name+0x62>
 800bcf8:	f1bc 0f19 	cmp.w	ip, #25
 800bcfc:	d911      	bls.n	800bd22 <rmw_validate_node_name+0x62>
 800bcfe:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 800bd02:	d00e      	beq.n	800bd22 <rmw_validate_node_name+0x62>
 800bd04:	2302      	movs	r3, #2
 800bd06:	602b      	str	r3, [r5, #0]
 800bd08:	b106      	cbz	r6, 800bd0c <rmw_validate_node_name+0x4c>
 800bd0a:	6037      	str	r7, [r6, #0]
 800bd0c:	2000      	movs	r0, #0
 800bd0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd12:	2301      	movs	r3, #1
 800bd14:	602b      	str	r3, [r5, #0]
 800bd16:	2e00      	cmp	r6, #0
 800bd18:	d0f8      	beq.n	800bd0c <rmw_validate_node_name+0x4c>
 800bd1a:	2000      	movs	r0, #0
 800bd1c:	6030      	str	r0, [r6, #0]
 800bd1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd22:	4543      	cmp	r3, r8
 800bd24:	d1dd      	bne.n	800bce2 <rmw_validate_node_name+0x22>
 800bd26:	7822      	ldrb	r2, [r4, #0]
 800bd28:	4b0d      	ldr	r3, [pc, #52]	@ (800bd60 <rmw_validate_node_name+0xa0>)
 800bd2a:	5cd3      	ldrb	r3, [r2, r3]
 800bd2c:	f013 0304 	ands.w	r3, r3, #4
 800bd30:	d110      	bne.n	800bd54 <rmw_validate_node_name+0x94>
 800bd32:	28ff      	cmp	r0, #255	@ 0xff
 800bd34:	d806      	bhi.n	800bd44 <rmw_validate_node_name+0x84>
 800bd36:	602b      	str	r3, [r5, #0]
 800bd38:	4618      	mov	r0, r3
 800bd3a:	e7e8      	b.n	800bd0e <rmw_validate_node_name+0x4e>
 800bd3c:	200b      	movs	r0, #11
 800bd3e:	4770      	bx	lr
 800bd40:	200b      	movs	r0, #11
 800bd42:	e7e4      	b.n	800bd0e <rmw_validate_node_name+0x4e>
 800bd44:	2204      	movs	r2, #4
 800bd46:	602a      	str	r2, [r5, #0]
 800bd48:	2e00      	cmp	r6, #0
 800bd4a:	d0df      	beq.n	800bd0c <rmw_validate_node_name+0x4c>
 800bd4c:	22fe      	movs	r2, #254	@ 0xfe
 800bd4e:	6032      	str	r2, [r6, #0]
 800bd50:	4618      	mov	r0, r3
 800bd52:	e7dc      	b.n	800bd0e <rmw_validate_node_name+0x4e>
 800bd54:	2303      	movs	r3, #3
 800bd56:	602b      	str	r3, [r5, #0]
 800bd58:	2e00      	cmp	r6, #0
 800bd5a:	d1de      	bne.n	800bd1a <rmw_validate_node_name+0x5a>
 800bd5c:	e7d6      	b.n	800bd0c <rmw_validate_node_name+0x4c>
 800bd5e:	bf00      	nop
 800bd60:	0801aabe 	.word	0x0801aabe

0800bd64 <rmw_node_name_validation_result_string>:
 800bd64:	2804      	cmp	r0, #4
 800bd66:	bf9a      	itte	ls
 800bd68:	4b02      	ldrls	r3, [pc, #8]	@ (800bd74 <rmw_node_name_validation_result_string+0x10>)
 800bd6a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800bd6e:	4802      	ldrhi	r0, [pc, #8]	@ (800bd78 <rmw_node_name_validation_result_string+0x14>)
 800bd70:	4770      	bx	lr
 800bd72:	bf00      	nop
 800bd74:	0801a364 	.word	0x0801a364
 800bd78:	0801a278 	.word	0x0801a278

0800bd7c <rmw_uros_set_custom_transport>:
 800bd7c:	b470      	push	{r4, r5, r6}
 800bd7e:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800bd82:	b162      	cbz	r2, 800bd9e <rmw_uros_set_custom_transport+0x22>
 800bd84:	b15b      	cbz	r3, 800bd9e <rmw_uros_set_custom_transport+0x22>
 800bd86:	b155      	cbz	r5, 800bd9e <rmw_uros_set_custom_transport+0x22>
 800bd88:	b14e      	cbz	r6, 800bd9e <rmw_uros_set_custom_transport+0x22>
 800bd8a:	4c06      	ldr	r4, [pc, #24]	@ (800bda4 <rmw_uros_set_custom_transport+0x28>)
 800bd8c:	7020      	strb	r0, [r4, #0]
 800bd8e:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800bd92:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800bd96:	6166      	str	r6, [r4, #20]
 800bd98:	2000      	movs	r0, #0
 800bd9a:	bc70      	pop	{r4, r5, r6}
 800bd9c:	4770      	bx	lr
 800bd9e:	200b      	movs	r0, #11
 800bda0:	bc70      	pop	{r4, r5, r6}
 800bda2:	4770      	bx	lr
 800bda4:	2000c20c 	.word	0x2000c20c

0800bda8 <create_node>:
 800bda8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bdac:	b083      	sub	sp, #12
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d05f      	beq.n	800be72 <create_node+0xca>
 800bdb2:	4606      	mov	r6, r0
 800bdb4:	4835      	ldr	r0, [pc, #212]	@ (800be8c <create_node+0xe4>)
 800bdb6:	460f      	mov	r7, r1
 800bdb8:	4690      	mov	r8, r2
 800bdba:	461d      	mov	r5, r3
 800bdbc:	f006 ffe2 	bl	8012d84 <get_memory>
 800bdc0:	2800      	cmp	r0, #0
 800bdc2:	d056      	beq.n	800be72 <create_node+0xca>
 800bdc4:	6884      	ldr	r4, [r0, #8]
 800bdc6:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800bdc8:	6123      	str	r3, [r4, #16]
 800bdca:	f007 f843 	bl	8012e54 <rmw_get_implementation_identifier>
 800bdce:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 800bdd2:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800bdd6:	f8c4 9020 	str.w	r9, [r4, #32]
 800bdda:	4630      	mov	r0, r6
 800bddc:	f7f4 fa78 	bl	80002d0 <strlen>
 800bde0:	1c42      	adds	r2, r0, #1
 800bde2:	2a3c      	cmp	r2, #60	@ 0x3c
 800bde4:	f104 0518 	add.w	r5, r4, #24
 800bde8:	d840      	bhi.n	800be6c <create_node+0xc4>
 800bdea:	4648      	mov	r0, r9
 800bdec:	4631      	mov	r1, r6
 800bdee:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 800bdf2:	f00c f83c 	bl	8017e6e <memcpy>
 800bdf6:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 800bdfa:	4638      	mov	r0, r7
 800bdfc:	f7f4 fa68 	bl	80002d0 <strlen>
 800be00:	1c42      	adds	r2, r0, #1
 800be02:	2a3c      	cmp	r2, #60	@ 0x3c
 800be04:	d832      	bhi.n	800be6c <create_node+0xc4>
 800be06:	4639      	mov	r1, r7
 800be08:	4648      	mov	r0, r9
 800be0a:	f00c f830 	bl	8017e6e <memcpy>
 800be0e:	6923      	ldr	r3, [r4, #16]
 800be10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800be14:	2101      	movs	r1, #1
 800be16:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 800be1a:	1842      	adds	r2, r0, r1
 800be1c:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 800be20:	f001 fb84 	bl	800d52c <uxr_object_id>
 800be24:	6160      	str	r0, [r4, #20]
 800be26:	783b      	ldrb	r3, [r7, #0]
 800be28:	2b2f      	cmp	r3, #47	@ 0x2f
 800be2a:	d127      	bne.n	800be7c <create_node+0xd4>
 800be2c:	787b      	ldrb	r3, [r7, #1]
 800be2e:	bb2b      	cbnz	r3, 800be7c <create_node+0xd4>
 800be30:	4a17      	ldr	r2, [pc, #92]	@ (800be90 <create_node+0xe8>)
 800be32:	4818      	ldr	r0, [pc, #96]	@ (800be94 <create_node+0xec>)
 800be34:	4633      	mov	r3, r6
 800be36:	213c      	movs	r1, #60	@ 0x3c
 800be38:	f00b fd68 	bl	801790c <sniprintf>
 800be3c:	6920      	ldr	r0, [r4, #16]
 800be3e:	4915      	ldr	r1, [pc, #84]	@ (800be94 <create_node+0xec>)
 800be40:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800be44:	9100      	str	r1, [sp, #0]
 800be46:	2106      	movs	r1, #6
 800be48:	9101      	str	r1, [sp, #4]
 800be4a:	6811      	ldr	r1, [r2, #0]
 800be4c:	6962      	ldr	r2, [r4, #20]
 800be4e:	fa1f f388 	uxth.w	r3, r8
 800be52:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800be56:	f001 f9b3 	bl	800d1c0 <uxr_buffer_create_participant_bin>
 800be5a:	4602      	mov	r2, r0
 800be5c:	6920      	ldr	r0, [r4, #16]
 800be5e:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800be62:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800be66:	f000 ff19 	bl	800cc9c <run_xrce_session>
 800be6a:	b918      	cbnz	r0, 800be74 <create_node+0xcc>
 800be6c:	4628      	mov	r0, r5
 800be6e:	f000 fda3 	bl	800c9b8 <rmw_uxrce_fini_node_memory>
 800be72:	2500      	movs	r5, #0
 800be74:	4628      	mov	r0, r5
 800be76:	b003      	add	sp, #12
 800be78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800be7c:	4a06      	ldr	r2, [pc, #24]	@ (800be98 <create_node+0xf0>)
 800be7e:	9600      	str	r6, [sp, #0]
 800be80:	463b      	mov	r3, r7
 800be82:	213c      	movs	r1, #60	@ 0x3c
 800be84:	4803      	ldr	r0, [pc, #12]	@ (800be94 <create_node+0xec>)
 800be86:	f00b fd41 	bl	801790c <sniprintf>
 800be8a:	e7d7      	b.n	800be3c <create_node+0x94>
 800be8c:	20010b34 	.word	0x20010b34
 800be90:	0801a3ac 	.word	0x0801a3ac
 800be94:	2000c228 	.word	0x2000c228
 800be98:	08019e2c 	.word	0x08019e2c

0800be9c <rmw_create_node>:
 800be9c:	b199      	cbz	r1, 800bec6 <rmw_create_node+0x2a>
 800be9e:	780b      	ldrb	r3, [r1, #0]
 800bea0:	468c      	mov	ip, r1
 800bea2:	b183      	cbz	r3, 800bec6 <rmw_create_node+0x2a>
 800bea4:	b410      	push	{r4}
 800bea6:	4614      	mov	r4, r2
 800bea8:	b14a      	cbz	r2, 800bebe <rmw_create_node+0x22>
 800beaa:	7813      	ldrb	r3, [r2, #0]
 800beac:	b13b      	cbz	r3, 800bebe <rmw_create_node+0x22>
 800beae:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 800beb0:	4603      	mov	r3, r0
 800beb2:	4621      	mov	r1, r4
 800beb4:	4660      	mov	r0, ip
 800beb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800beba:	f7ff bf75 	b.w	800bda8 <create_node>
 800bebe:	2000      	movs	r0, #0
 800bec0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bec4:	4770      	bx	lr
 800bec6:	2000      	movs	r0, #0
 800bec8:	4770      	bx	lr
 800beca:	bf00      	nop

0800becc <rmw_destroy_node>:
 800becc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bece:	b328      	cbz	r0, 800bf1c <rmw_destroy_node+0x50>
 800bed0:	4607      	mov	r7, r0
 800bed2:	6800      	ldr	r0, [r0, #0]
 800bed4:	b120      	cbz	r0, 800bee0 <rmw_destroy_node+0x14>
 800bed6:	4b36      	ldr	r3, [pc, #216]	@ (800bfb0 <rmw_destroy_node+0xe4>)
 800bed8:	6819      	ldr	r1, [r3, #0]
 800beda:	f7f4 f999 	bl	8000210 <strcmp>
 800bede:	b9e8      	cbnz	r0, 800bf1c <rmw_destroy_node+0x50>
 800bee0:	687d      	ldr	r5, [r7, #4]
 800bee2:	b1dd      	cbz	r5, 800bf1c <rmw_destroy_node+0x50>
 800bee4:	4b33      	ldr	r3, [pc, #204]	@ (800bfb4 <rmw_destroy_node+0xe8>)
 800bee6:	681c      	ldr	r4, [r3, #0]
 800bee8:	2c00      	cmp	r4, #0
 800beea:	d05f      	beq.n	800bfac <rmw_destroy_node+0xe0>
 800beec:	2600      	movs	r6, #0
 800beee:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800bef2:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 800bef6:	429d      	cmp	r5, r3
 800bef8:	d013      	beq.n	800bf22 <rmw_destroy_node+0x56>
 800befa:	2c00      	cmp	r4, #0
 800befc:	d1f7      	bne.n	800beee <rmw_destroy_node+0x22>
 800befe:	4b2e      	ldr	r3, [pc, #184]	@ (800bfb8 <rmw_destroy_node+0xec>)
 800bf00:	681c      	ldr	r4, [r3, #0]
 800bf02:	b1c4      	cbz	r4, 800bf36 <rmw_destroy_node+0x6a>
 800bf04:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800bf08:	6a0b      	ldr	r3, [r1, #32]
 800bf0a:	429d      	cmp	r5, r3
 800bf0c:	d1f9      	bne.n	800bf02 <rmw_destroy_node+0x36>
 800bf0e:	317c      	adds	r1, #124	@ 0x7c
 800bf10:	4638      	mov	r0, r7
 800bf12:	f000 fb37 	bl	800c584 <rmw_destroy_subscription>
 800bf16:	2801      	cmp	r0, #1
 800bf18:	4606      	mov	r6, r0
 800bf1a:	d1f2      	bne.n	800bf02 <rmw_destroy_node+0x36>
 800bf1c:	2601      	movs	r6, #1
 800bf1e:	4630      	mov	r0, r6
 800bf20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf22:	3184      	adds	r1, #132	@ 0x84
 800bf24:	4638      	mov	r0, r7
 800bf26:	f000 f9a5 	bl	800c274 <rmw_destroy_publisher>
 800bf2a:	2801      	cmp	r0, #1
 800bf2c:	4606      	mov	r6, r0
 800bf2e:	d0f5      	beq.n	800bf1c <rmw_destroy_node+0x50>
 800bf30:	2c00      	cmp	r4, #0
 800bf32:	d1dc      	bne.n	800beee <rmw_destroy_node+0x22>
 800bf34:	e7e3      	b.n	800befe <rmw_destroy_node+0x32>
 800bf36:	4b21      	ldr	r3, [pc, #132]	@ (800bfbc <rmw_destroy_node+0xf0>)
 800bf38:	681c      	ldr	r4, [r3, #0]
 800bf3a:	b16c      	cbz	r4, 800bf58 <rmw_destroy_node+0x8c>
 800bf3c:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800bf40:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800bf42:	429d      	cmp	r5, r3
 800bf44:	d1f9      	bne.n	800bf3a <rmw_destroy_node+0x6e>
 800bf46:	317c      	adds	r1, #124	@ 0x7c
 800bf48:	4638      	mov	r0, r7
 800bf4a:	f000 f9e5 	bl	800c318 <rmw_destroy_service>
 800bf4e:	2801      	cmp	r0, #1
 800bf50:	4606      	mov	r6, r0
 800bf52:	d0e3      	beq.n	800bf1c <rmw_destroy_node+0x50>
 800bf54:	2c00      	cmp	r4, #0
 800bf56:	d1f1      	bne.n	800bf3c <rmw_destroy_node+0x70>
 800bf58:	4b19      	ldr	r3, [pc, #100]	@ (800bfc0 <rmw_destroy_node+0xf4>)
 800bf5a:	681c      	ldr	r4, [r3, #0]
 800bf5c:	b16c      	cbz	r4, 800bf7a <rmw_destroy_node+0xae>
 800bf5e:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800bf62:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800bf64:	429d      	cmp	r5, r3
 800bf66:	d1f9      	bne.n	800bf5c <rmw_destroy_node+0x90>
 800bf68:	317c      	adds	r1, #124	@ 0x7c
 800bf6a:	4638      	mov	r0, r7
 800bf6c:	f006 ff2e 	bl	8012dcc <rmw_destroy_client>
 800bf70:	2801      	cmp	r0, #1
 800bf72:	4606      	mov	r6, r0
 800bf74:	d0d2      	beq.n	800bf1c <rmw_destroy_node+0x50>
 800bf76:	2c00      	cmp	r4, #0
 800bf78:	d1f1      	bne.n	800bf5e <rmw_destroy_node+0x92>
 800bf7a:	6928      	ldr	r0, [r5, #16]
 800bf7c:	696a      	ldr	r2, [r5, #20]
 800bf7e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800bf82:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800bf86:	6819      	ldr	r1, [r3, #0]
 800bf88:	f001 f8ce 	bl	800d128 <uxr_buffer_delete_entity>
 800bf8c:	4602      	mov	r2, r0
 800bf8e:	6928      	ldr	r0, [r5, #16]
 800bf90:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800bf94:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800bf98:	f000 fe80 	bl	800cc9c <run_xrce_session>
 800bf9c:	2800      	cmp	r0, #0
 800bf9e:	bf08      	it	eq
 800bfa0:	2602      	moveq	r6, #2
 800bfa2:	4638      	mov	r0, r7
 800bfa4:	f000 fd08 	bl	800c9b8 <rmw_uxrce_fini_node_memory>
 800bfa8:	4630      	mov	r0, r6
 800bfaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bfac:	4626      	mov	r6, r4
 800bfae:	e7a6      	b.n	800befe <rmw_destroy_node+0x32>
 800bfb0:	0801a70c 	.word	0x0801a70c
 800bfb4:	20010b44 	.word	0x20010b44
 800bfb8:	20010b84 	.word	0x20010b84
 800bfbc:	20010b54 	.word	0x20010b54
 800bfc0:	2000c264 	.word	0x2000c264

0800bfc4 <rmw_node_get_graph_guard_condition>:
 800bfc4:	6843      	ldr	r3, [r0, #4]
 800bfc6:	6918      	ldr	r0, [r3, #16]
 800bfc8:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 800bfcc:	4770      	bx	lr
 800bfce:	bf00      	nop

0800bfd0 <flush_session>:
 800bfd0:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800bfd2:	f002 b8e9 	b.w	800e1a8 <uxr_run_session_until_confirm_delivery>
 800bfd6:	bf00      	nop

0800bfd8 <rmw_publish>:
 800bfd8:	2800      	cmp	r0, #0
 800bfda:	d053      	beq.n	800c084 <rmw_publish+0xac>
 800bfdc:	b570      	push	{r4, r5, r6, lr}
 800bfde:	460d      	mov	r5, r1
 800bfe0:	b08e      	sub	sp, #56	@ 0x38
 800bfe2:	2900      	cmp	r1, #0
 800bfe4:	d04b      	beq.n	800c07e <rmw_publish+0xa6>
 800bfe6:	4604      	mov	r4, r0
 800bfe8:	6800      	ldr	r0, [r0, #0]
 800bfea:	f000 fed7 	bl	800cd9c <is_uxrce_rmw_identifier_valid>
 800bfee:	2800      	cmp	r0, #0
 800bff0:	d045      	beq.n	800c07e <rmw_publish+0xa6>
 800bff2:	6866      	ldr	r6, [r4, #4]
 800bff4:	2e00      	cmp	r6, #0
 800bff6:	d042      	beq.n	800c07e <rmw_publish+0xa6>
 800bff8:	69b4      	ldr	r4, [r6, #24]
 800bffa:	4628      	mov	r0, r5
 800bffc:	6923      	ldr	r3, [r4, #16]
 800bffe:	4798      	blx	r3
 800c000:	69f3      	ldr	r3, [r6, #28]
 800c002:	9005      	str	r0, [sp, #20]
 800c004:	b113      	cbz	r3, 800c00c <rmw_publish+0x34>
 800c006:	a805      	add	r0, sp, #20
 800c008:	4798      	blx	r3
 800c00a:	9805      	ldr	r0, [sp, #20]
 800c00c:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800c010:	691b      	ldr	r3, [r3, #16]
 800c012:	9000      	str	r0, [sp, #0]
 800c014:	6972      	ldr	r2, [r6, #20]
 800c016:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800c018:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800c01c:	ab06      	add	r3, sp, #24
 800c01e:	f002 feaf 	bl	800ed80 <uxr_prepare_output_stream>
 800c022:	b1d8      	cbz	r0, 800c05c <rmw_publish+0x84>
 800c024:	68a3      	ldr	r3, [r4, #8]
 800c026:	a906      	add	r1, sp, #24
 800c028:	4628      	mov	r0, r5
 800c02a:	4798      	blx	r3
 800c02c:	6a33      	ldr	r3, [r6, #32]
 800c02e:	4604      	mov	r4, r0
 800c030:	b10b      	cbz	r3, 800c036 <rmw_publish+0x5e>
 800c032:	a806      	add	r0, sp, #24
 800c034:	4798      	blx	r3
 800c036:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800c03a:	2b01      	cmp	r3, #1
 800c03c:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800c040:	d022      	beq.n	800c088 <rmw_publish+0xb0>
 800c042:	6918      	ldr	r0, [r3, #16]
 800c044:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800c046:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c04a:	f002 f8ad 	bl	800e1a8 <uxr_run_session_until_confirm_delivery>
 800c04e:	4020      	ands	r0, r4
 800c050:	b2c4      	uxtb	r4, r0
 800c052:	f084 0001 	eor.w	r0, r4, #1
 800c056:	b2c0      	uxtb	r0, r0
 800c058:	b00e      	add	sp, #56	@ 0x38
 800c05a:	bd70      	pop	{r4, r5, r6, pc}
 800c05c:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800c060:	6918      	ldr	r0, [r3, #16]
 800c062:	9b05      	ldr	r3, [sp, #20]
 800c064:	9300      	str	r3, [sp, #0]
 800c066:	4b0b      	ldr	r3, [pc, #44]	@ (800c094 <rmw_publish+0xbc>)
 800c068:	9301      	str	r3, [sp, #4]
 800c06a:	9602      	str	r6, [sp, #8]
 800c06c:	6972      	ldr	r2, [r6, #20]
 800c06e:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800c070:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c074:	ab06      	add	r3, sp, #24
 800c076:	f002 feb3 	bl	800ede0 <uxr_prepare_output_stream_fragmented>
 800c07a:	2800      	cmp	r0, #0
 800c07c:	d1d2      	bne.n	800c024 <rmw_publish+0x4c>
 800c07e:	2001      	movs	r0, #1
 800c080:	b00e      	add	sp, #56	@ 0x38
 800c082:	bd70      	pop	{r4, r5, r6, pc}
 800c084:	2001      	movs	r0, #1
 800c086:	4770      	bx	lr
 800c088:	6918      	ldr	r0, [r3, #16]
 800c08a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c08e:	f001 fccb 	bl	800da28 <uxr_flash_output_streams>
 800c092:	e7de      	b.n	800c052 <rmw_publish+0x7a>
 800c094:	0800bfd1 	.word	0x0800bfd1

0800c098 <rmw_create_publisher>:
 800c098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c09c:	b087      	sub	sp, #28
 800c09e:	2800      	cmp	r0, #0
 800c0a0:	f000 80cc 	beq.w	800c23c <rmw_create_publisher+0x1a4>
 800c0a4:	460e      	mov	r6, r1
 800c0a6:	2900      	cmp	r1, #0
 800c0a8:	f000 80c8 	beq.w	800c23c <rmw_create_publisher+0x1a4>
 800c0ac:	4604      	mov	r4, r0
 800c0ae:	6800      	ldr	r0, [r0, #0]
 800c0b0:	4615      	mov	r5, r2
 800c0b2:	4698      	mov	r8, r3
 800c0b4:	f000 fe72 	bl	800cd9c <is_uxrce_rmw_identifier_valid>
 800c0b8:	2800      	cmp	r0, #0
 800c0ba:	f000 80bf 	beq.w	800c23c <rmw_create_publisher+0x1a4>
 800c0be:	2d00      	cmp	r5, #0
 800c0c0:	f000 80bc 	beq.w	800c23c <rmw_create_publisher+0x1a4>
 800c0c4:	782b      	ldrb	r3, [r5, #0]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	f000 80b8 	beq.w	800c23c <rmw_create_publisher+0x1a4>
 800c0cc:	f1b8 0f00 	cmp.w	r8, #0
 800c0d0:	f000 80b4 	beq.w	800c23c <rmw_create_publisher+0x1a4>
 800c0d4:	485c      	ldr	r0, [pc, #368]	@ (800c248 <rmw_create_publisher+0x1b0>)
 800c0d6:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800c0da:	f006 fe53 	bl	8012d84 <get_memory>
 800c0de:	2800      	cmp	r0, #0
 800c0e0:	f000 80ac 	beq.w	800c23c <rmw_create_publisher+0x1a4>
 800c0e4:	6884      	ldr	r4, [r0, #8]
 800c0e6:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800c0ea:	f006 feb3 	bl	8012e54 <rmw_get_implementation_identifier>
 800c0ee:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800c0f2:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800c0f6:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800c0fa:	4628      	mov	r0, r5
 800c0fc:	f7f4 f8e8 	bl	80002d0 <strlen>
 800c100:	3001      	adds	r0, #1
 800c102:	283c      	cmp	r0, #60	@ 0x3c
 800c104:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 800c108:	f200 8091 	bhi.w	800c22e <rmw_create_publisher+0x196>
 800c10c:	4a4f      	ldr	r2, [pc, #316]	@ (800c24c <rmw_create_publisher+0x1b4>)
 800c10e:	462b      	mov	r3, r5
 800c110:	213c      	movs	r1, #60	@ 0x3c
 800c112:	4650      	mov	r0, sl
 800c114:	f00b fbfa 	bl	801790c <sniprintf>
 800c118:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c11c:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800c11e:	4641      	mov	r1, r8
 800c120:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800c124:	2250      	movs	r2, #80	@ 0x50
 800c126:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800c12a:	f00b fea0 	bl	8017e6e <memcpy>
 800c12e:	f898 3008 	ldrb.w	r3, [r8, #8]
 800c132:	4947      	ldr	r1, [pc, #284]	@ (800c250 <rmw_create_publisher+0x1b8>)
 800c134:	2b02      	cmp	r3, #2
 800c136:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c13a:	bf0c      	ite	eq
 800c13c:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800c140:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800c144:	67a3      	str	r3, [r4, #120]	@ 0x78
 800c146:	2300      	movs	r3, #0
 800c148:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800c14c:	4630      	mov	r0, r6
 800c14e:	f000 fe33 	bl	800cdb8 <get_message_typesupport_handle>
 800c152:	2800      	cmp	r0, #0
 800c154:	d06b      	beq.n	800c22e <rmw_create_publisher+0x196>
 800c156:	6842      	ldr	r2, [r0, #4]
 800c158:	61a2      	str	r2, [r4, #24]
 800c15a:	2a00      	cmp	r2, #0
 800c15c:	d067      	beq.n	800c22e <rmw_create_publisher+0x196>
 800c15e:	4629      	mov	r1, r5
 800c160:	4643      	mov	r3, r8
 800c162:	4648      	mov	r0, r9
 800c164:	f007 f904 	bl	8013370 <create_topic>
 800c168:	6260      	str	r0, [r4, #36]	@ 0x24
 800c16a:	2800      	cmp	r0, #0
 800c16c:	d063      	beq.n	800c236 <rmw_create_publisher+0x19e>
 800c16e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c172:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c176:	2103      	movs	r1, #3
 800c178:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800c17c:	1c42      	adds	r2, r0, #1
 800c17e:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800c182:	f001 f9d3 	bl	800d52c <uxr_object_id>
 800c186:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800c18a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c18e:	6120      	str	r0, [r4, #16]
 800c190:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800c194:	6910      	ldr	r0, [r2, #16]
 800c196:	2506      	movs	r5, #6
 800c198:	9500      	str	r5, [sp, #0]
 800c19a:	6819      	ldr	r1, [r3, #0]
 800c19c:	6922      	ldr	r2, [r4, #16]
 800c19e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800c1a2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c1a6:	f001 f873 	bl	800d290 <uxr_buffer_create_publisher_bin>
 800c1aa:	4602      	mov	r2, r0
 800c1ac:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800c1b0:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800c1b4:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800c1b8:	f000 fd70 	bl	800cc9c <run_xrce_session>
 800c1bc:	b3b8      	cbz	r0, 800c22e <rmw_create_publisher+0x196>
 800c1be:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c1c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c1c6:	2105      	movs	r1, #5
 800c1c8:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800c1cc:	1c42      	adds	r2, r0, #1
 800c1ce:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800c1d2:	f001 f9ab 	bl	800d52c <uxr_object_id>
 800c1d6:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800c1da:	6160      	str	r0, [r4, #20]
 800c1dc:	691e      	ldr	r6, [r3, #16]
 800c1de:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c1e2:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800c1e6:	f10d 0a10 	add.w	sl, sp, #16
 800c1ea:	4641      	mov	r1, r8
 800c1ec:	4650      	mov	r0, sl
 800c1ee:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 800c1f2:	f000 fd6f 	bl	800ccd4 <convert_qos_profile>
 800c1f6:	9503      	str	r5, [sp, #12]
 800c1f8:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800c1fc:	9001      	str	r0, [sp, #4]
 800c1fe:	f8ad 1008 	strh.w	r1, [sp, #8]
 800c202:	f8db 3010 	ldr.w	r3, [fp, #16]
 800c206:	9300      	str	r3, [sp, #0]
 800c208:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800c20c:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800c210:	f8d8 1000 	ldr.w	r1, [r8]
 800c214:	4630      	mov	r0, r6
 800c216:	f001 f89b 	bl	800d350 <uxr_buffer_create_datawriter_bin>
 800c21a:	4602      	mov	r2, r0
 800c21c:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800c220:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800c224:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800c228:	f000 fd38 	bl	800cc9c <run_xrce_session>
 800c22c:	b938      	cbnz	r0, 800c23e <rmw_create_publisher+0x1a6>
 800c22e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800c230:	b108      	cbz	r0, 800c236 <rmw_create_publisher+0x19e>
 800c232:	f000 fc31 	bl	800ca98 <rmw_uxrce_fini_topic_memory>
 800c236:	4638      	mov	r0, r7
 800c238:	f000 fbd6 	bl	800c9e8 <rmw_uxrce_fini_publisher_memory>
 800c23c:	2700      	movs	r7, #0
 800c23e:	4638      	mov	r0, r7
 800c240:	b007      	add	sp, #28
 800c242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c246:	bf00      	nop
 800c248:	20010b44 	.word	0x20010b44
 800c24c:	0801a3ac 	.word	0x0801a3ac
 800c250:	0801a378 	.word	0x0801a378

0800c254 <rmw_publisher_get_actual_qos>:
 800c254:	b150      	cbz	r0, 800c26c <rmw_publisher_get_actual_qos+0x18>
 800c256:	b508      	push	{r3, lr}
 800c258:	460b      	mov	r3, r1
 800c25a:	b149      	cbz	r1, 800c270 <rmw_publisher_get_actual_qos+0x1c>
 800c25c:	6841      	ldr	r1, [r0, #4]
 800c25e:	2250      	movs	r2, #80	@ 0x50
 800c260:	3128      	adds	r1, #40	@ 0x28
 800c262:	4618      	mov	r0, r3
 800c264:	f00b fe03 	bl	8017e6e <memcpy>
 800c268:	2000      	movs	r0, #0
 800c26a:	bd08      	pop	{r3, pc}
 800c26c:	200b      	movs	r0, #11
 800c26e:	4770      	bx	lr
 800c270:	200b      	movs	r0, #11
 800c272:	bd08      	pop	{r3, pc}

0800c274 <rmw_destroy_publisher>:
 800c274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c276:	b128      	cbz	r0, 800c284 <rmw_destroy_publisher+0x10>
 800c278:	4604      	mov	r4, r0
 800c27a:	6800      	ldr	r0, [r0, #0]
 800c27c:	460d      	mov	r5, r1
 800c27e:	f000 fd8d 	bl	800cd9c <is_uxrce_rmw_identifier_valid>
 800c282:	b910      	cbnz	r0, 800c28a <rmw_destroy_publisher+0x16>
 800c284:	2401      	movs	r4, #1
 800c286:	4620      	mov	r0, r4
 800c288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c28a:	6863      	ldr	r3, [r4, #4]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d0f9      	beq.n	800c284 <rmw_destroy_publisher+0x10>
 800c290:	2d00      	cmp	r5, #0
 800c292:	d0f7      	beq.n	800c284 <rmw_destroy_publisher+0x10>
 800c294:	6828      	ldr	r0, [r5, #0]
 800c296:	f000 fd81 	bl	800cd9c <is_uxrce_rmw_identifier_valid>
 800c29a:	2800      	cmp	r0, #0
 800c29c:	d0f2      	beq.n	800c284 <rmw_destroy_publisher+0x10>
 800c29e:	686c      	ldr	r4, [r5, #4]
 800c2a0:	2c00      	cmp	r4, #0
 800c2a2:	d0ef      	beq.n	800c284 <rmw_destroy_publisher+0x10>
 800c2a4:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800c2a6:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800c2aa:	f007 f8b1 	bl	8013410 <destroy_topic>
 800c2ae:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800c2b2:	6962      	ldr	r2, [r4, #20]
 800c2b4:	6918      	ldr	r0, [r3, #16]
 800c2b6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800c2ba:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c2be:	6819      	ldr	r1, [r3, #0]
 800c2c0:	f000 ff32 	bl	800d128 <uxr_buffer_delete_entity>
 800c2c4:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800c2c8:	6922      	ldr	r2, [r4, #16]
 800c2ca:	691b      	ldr	r3, [r3, #16]
 800c2cc:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800c2d0:	4604      	mov	r4, r0
 800c2d2:	6809      	ldr	r1, [r1, #0]
 800c2d4:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800c2d8:	f000 ff26 	bl	800d128 <uxr_buffer_delete_entity>
 800c2dc:	693e      	ldr	r6, [r7, #16]
 800c2de:	4622      	mov	r2, r4
 800c2e0:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800c2e4:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800c2e8:	4604      	mov	r4, r0
 800c2ea:	4630      	mov	r0, r6
 800c2ec:	f000 fcd6 	bl	800cc9c <run_xrce_session>
 800c2f0:	693e      	ldr	r6, [r7, #16]
 800c2f2:	4622      	mov	r2, r4
 800c2f4:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800c2f8:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800c2fc:	4604      	mov	r4, r0
 800c2fe:	4630      	mov	r0, r6
 800c300:	f000 fccc 	bl	800cc9c <run_xrce_session>
 800c304:	b12c      	cbz	r4, 800c312 <rmw_destroy_publisher+0x9e>
 800c306:	b120      	cbz	r0, 800c312 <rmw_destroy_publisher+0x9e>
 800c308:	2400      	movs	r4, #0
 800c30a:	4628      	mov	r0, r5
 800c30c:	f000 fb6c 	bl	800c9e8 <rmw_uxrce_fini_publisher_memory>
 800c310:	e7b9      	b.n	800c286 <rmw_destroy_publisher+0x12>
 800c312:	2402      	movs	r4, #2
 800c314:	e7f9      	b.n	800c30a <rmw_destroy_publisher+0x96>
 800c316:	bf00      	nop

0800c318 <rmw_destroy_service>:
 800c318:	b570      	push	{r4, r5, r6, lr}
 800c31a:	b128      	cbz	r0, 800c328 <rmw_destroy_service+0x10>
 800c31c:	4604      	mov	r4, r0
 800c31e:	6800      	ldr	r0, [r0, #0]
 800c320:	460d      	mov	r5, r1
 800c322:	f000 fd3b 	bl	800cd9c <is_uxrce_rmw_identifier_valid>
 800c326:	b910      	cbnz	r0, 800c32e <rmw_destroy_service+0x16>
 800c328:	2401      	movs	r4, #1
 800c32a:	4620      	mov	r0, r4
 800c32c:	bd70      	pop	{r4, r5, r6, pc}
 800c32e:	6863      	ldr	r3, [r4, #4]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d0f9      	beq.n	800c328 <rmw_destroy_service+0x10>
 800c334:	2d00      	cmp	r5, #0
 800c336:	d0f7      	beq.n	800c328 <rmw_destroy_service+0x10>
 800c338:	6828      	ldr	r0, [r5, #0]
 800c33a:	f000 fd2f 	bl	800cd9c <is_uxrce_rmw_identifier_valid>
 800c33e:	2800      	cmp	r0, #0
 800c340:	d0f2      	beq.n	800c328 <rmw_destroy_service+0x10>
 800c342:	686e      	ldr	r6, [r5, #4]
 800c344:	2e00      	cmp	r6, #0
 800c346:	d0ef      	beq.n	800c328 <rmw_destroy_service+0x10>
 800c348:	6864      	ldr	r4, [r4, #4]
 800c34a:	6932      	ldr	r2, [r6, #16]
 800c34c:	6920      	ldr	r0, [r4, #16]
 800c34e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800c352:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c356:	6819      	ldr	r1, [r3, #0]
 800c358:	f001 f952 	bl	800d600 <uxr_buffer_cancel_data>
 800c35c:	4602      	mov	r2, r0
 800c35e:	6920      	ldr	r0, [r4, #16]
 800c360:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800c364:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800c368:	f000 fc98 	bl	800cc9c <run_xrce_session>
 800c36c:	6920      	ldr	r0, [r4, #16]
 800c36e:	6932      	ldr	r2, [r6, #16]
 800c370:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800c374:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c378:	6819      	ldr	r1, [r3, #0]
 800c37a:	f000 fed5 	bl	800d128 <uxr_buffer_delete_entity>
 800c37e:	4602      	mov	r2, r0
 800c380:	6920      	ldr	r0, [r4, #16]
 800c382:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800c386:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800c38a:	f000 fc87 	bl	800cc9c <run_xrce_session>
 800c38e:	2800      	cmp	r0, #0
 800c390:	4628      	mov	r0, r5
 800c392:	bf14      	ite	ne
 800c394:	2400      	movne	r4, #0
 800c396:	2402      	moveq	r4, #2
 800c398:	f000 fb52 	bl	800ca40 <rmw_uxrce_fini_service_memory>
 800c39c:	e7c5      	b.n	800c32a <rmw_destroy_service+0x12>
 800c39e:	bf00      	nop

0800c3a0 <rmw_create_subscription>:
 800c3a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3a4:	b08d      	sub	sp, #52	@ 0x34
 800c3a6:	2800      	cmp	r0, #0
 800c3a8:	f000 80d1 	beq.w	800c54e <rmw_create_subscription+0x1ae>
 800c3ac:	460e      	mov	r6, r1
 800c3ae:	2900      	cmp	r1, #0
 800c3b0:	f000 80cd 	beq.w	800c54e <rmw_create_subscription+0x1ae>
 800c3b4:	4604      	mov	r4, r0
 800c3b6:	6800      	ldr	r0, [r0, #0]
 800c3b8:	4615      	mov	r5, r2
 800c3ba:	4698      	mov	r8, r3
 800c3bc:	f000 fcee 	bl	800cd9c <is_uxrce_rmw_identifier_valid>
 800c3c0:	2800      	cmp	r0, #0
 800c3c2:	f000 80c4 	beq.w	800c54e <rmw_create_subscription+0x1ae>
 800c3c6:	2d00      	cmp	r5, #0
 800c3c8:	f000 80c1 	beq.w	800c54e <rmw_create_subscription+0x1ae>
 800c3cc:	782b      	ldrb	r3, [r5, #0]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	f000 80bd 	beq.w	800c54e <rmw_create_subscription+0x1ae>
 800c3d4:	f1b8 0f00 	cmp.w	r8, #0
 800c3d8:	f000 80b9 	beq.w	800c54e <rmw_create_subscription+0x1ae>
 800c3dc:	485e      	ldr	r0, [pc, #376]	@ (800c558 <rmw_create_subscription+0x1b8>)
 800c3de:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800c3e2:	f006 fccf 	bl	8012d84 <get_memory>
 800c3e6:	4604      	mov	r4, r0
 800c3e8:	2800      	cmp	r0, #0
 800c3ea:	f000 80b1 	beq.w	800c550 <rmw_create_subscription+0x1b0>
 800c3ee:	6887      	ldr	r7, [r0, #8]
 800c3f0:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 800c3f4:	f006 fd2e 	bl	8012e54 <rmw_get_implementation_identifier>
 800c3f8:	f107 0a98 	add.w	sl, r7, #152	@ 0x98
 800c3fc:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800c3fe:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 800c402:	4628      	mov	r0, r5
 800c404:	f7f3 ff64 	bl	80002d0 <strlen>
 800c408:	3001      	adds	r0, #1
 800c40a:	283c      	cmp	r0, #60	@ 0x3c
 800c40c:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 800c410:	f200 8096 	bhi.w	800c540 <rmw_create_subscription+0x1a0>
 800c414:	4a51      	ldr	r2, [pc, #324]	@ (800c55c <rmw_create_subscription+0x1bc>)
 800c416:	462b      	mov	r3, r5
 800c418:	213c      	movs	r1, #60	@ 0x3c
 800c41a:	4650      	mov	r0, sl
 800c41c:	f00b fa76 	bl	801790c <sniprintf>
 800c420:	4641      	mov	r1, r8
 800c422:	f8c7 9020 	str.w	r9, [r7, #32]
 800c426:	2250      	movs	r2, #80	@ 0x50
 800c428:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800c42c:	f00b fd1f 	bl	8017e6e <memcpy>
 800c430:	494b      	ldr	r1, [pc, #300]	@ (800c560 <rmw_create_subscription+0x1c0>)
 800c432:	4630      	mov	r0, r6
 800c434:	f000 fcc0 	bl	800cdb8 <get_message_typesupport_handle>
 800c438:	2800      	cmp	r0, #0
 800c43a:	f000 8081 	beq.w	800c540 <rmw_create_subscription+0x1a0>
 800c43e:	6842      	ldr	r2, [r0, #4]
 800c440:	61ba      	str	r2, [r7, #24]
 800c442:	2a00      	cmp	r2, #0
 800c444:	d07c      	beq.n	800c540 <rmw_create_subscription+0x1a0>
 800c446:	4629      	mov	r1, r5
 800c448:	4643      	mov	r3, r8
 800c44a:	4648      	mov	r0, r9
 800c44c:	f006 ff90 	bl	8013370 <create_topic>
 800c450:	61f8      	str	r0, [r7, #28]
 800c452:	2800      	cmp	r0, #0
 800c454:	d078      	beq.n	800c548 <rmw_create_subscription+0x1a8>
 800c456:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c45a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c45e:	2104      	movs	r1, #4
 800c460:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 800c464:	1c42      	adds	r2, r0, #1
 800c466:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 800c46a:	f001 f85f 	bl	800d52c <uxr_object_id>
 800c46e:	6138      	str	r0, [r7, #16]
 800c470:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800c474:	2506      	movs	r5, #6
 800c476:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 800c47a:	9500      	str	r5, [sp, #0]
 800c47c:	6819      	ldr	r1, [r3, #0]
 800c47e:	693a      	ldr	r2, [r7, #16]
 800c480:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800c484:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c488:	f000 ff32 	bl	800d2f0 <uxr_buffer_create_subscriber_bin>
 800c48c:	4602      	mov	r2, r0
 800c48e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800c492:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800c496:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800c49a:	f000 fbff 	bl	800cc9c <run_xrce_session>
 800c49e:	2800      	cmp	r0, #0
 800c4a0:	d04e      	beq.n	800c540 <rmw_create_subscription+0x1a0>
 800c4a2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c4a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c4aa:	4629      	mov	r1, r5
 800c4ac:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 800c4b0:	1c42      	adds	r2, r0, #1
 800c4b2:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 800c4b6:	f001 f839 	bl	800d52c <uxr_object_id>
 800c4ba:	ae08      	add	r6, sp, #32
 800c4bc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c4c0:	69fb      	ldr	r3, [r7, #28]
 800c4c2:	6178      	str	r0, [r7, #20]
 800c4c4:	4641      	mov	r1, r8
 800c4c6:	4630      	mov	r0, r6
 800c4c8:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 800c4cc:	9305      	str	r3, [sp, #20]
 800c4ce:	f000 fc01 	bl	800ccd4 <convert_qos_profile>
 800c4d2:	9503      	str	r5, [sp, #12]
 800c4d4:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c4d8:	9b05      	ldr	r3, [sp, #20]
 800c4da:	9001      	str	r0, [sp, #4]
 800c4dc:	f8ad 1008 	strh.w	r1, [sp, #8]
 800c4e0:	691b      	ldr	r3, [r3, #16]
 800c4e2:	9300      	str	r3, [sp, #0]
 800c4e4:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 800c4e8:	f8db 1000 	ldr.w	r1, [fp]
 800c4ec:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 800c4f0:	f000 ffa4 	bl	800d43c <uxr_buffer_create_datareader_bin>
 800c4f4:	4602      	mov	r2, r0
 800c4f6:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800c4fa:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800c4fe:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800c502:	f000 fbcb 	bl	800cc9c <run_xrce_session>
 800c506:	b1d8      	cbz	r0, 800c540 <rmw_create_subscription+0x1a0>
 800c508:	f898 3008 	ldrb.w	r3, [r8, #8]
 800c50c:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800c510:	2b02      	cmp	r3, #2
 800c512:	bf0c      	ite	eq
 800c514:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 800c518:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 800c51c:	9307      	str	r3, [sp, #28]
 800c51e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800c522:	2200      	movs	r2, #0
 800c524:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 800c528:	ab0a      	add	r3, sp, #40	@ 0x28
 800c52a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800c52e:	9300      	str	r3, [sp, #0]
 800c530:	697a      	ldr	r2, [r7, #20]
 800c532:	9b07      	ldr	r3, [sp, #28]
 800c534:	6809      	ldr	r1, [r1, #0]
 800c536:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c53a:	f001 f827 	bl	800d58c <uxr_buffer_request_data>
 800c53e:	e007      	b.n	800c550 <rmw_create_subscription+0x1b0>
 800c540:	69f8      	ldr	r0, [r7, #28]
 800c542:	b108      	cbz	r0, 800c548 <rmw_create_subscription+0x1a8>
 800c544:	f000 faa8 	bl	800ca98 <rmw_uxrce_fini_topic_memory>
 800c548:	4620      	mov	r0, r4
 800c54a:	f000 fa63 	bl	800ca14 <rmw_uxrce_fini_subscription_memory>
 800c54e:	2400      	movs	r4, #0
 800c550:	4620      	mov	r0, r4
 800c552:	b00d      	add	sp, #52	@ 0x34
 800c554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c558:	20010b84 	.word	0x20010b84
 800c55c:	0801a3ac 	.word	0x0801a3ac
 800c560:	0801a378 	.word	0x0801a378

0800c564 <rmw_subscription_get_actual_qos>:
 800c564:	b150      	cbz	r0, 800c57c <rmw_subscription_get_actual_qos+0x18>
 800c566:	b508      	push	{r3, lr}
 800c568:	460b      	mov	r3, r1
 800c56a:	b149      	cbz	r1, 800c580 <rmw_subscription_get_actual_qos+0x1c>
 800c56c:	6841      	ldr	r1, [r0, #4]
 800c56e:	2250      	movs	r2, #80	@ 0x50
 800c570:	3128      	adds	r1, #40	@ 0x28
 800c572:	4618      	mov	r0, r3
 800c574:	f00b fc7b 	bl	8017e6e <memcpy>
 800c578:	2000      	movs	r0, #0
 800c57a:	bd08      	pop	{r3, pc}
 800c57c:	200b      	movs	r0, #11
 800c57e:	4770      	bx	lr
 800c580:	200b      	movs	r0, #11
 800c582:	bd08      	pop	{r3, pc}

0800c584 <rmw_destroy_subscription>:
 800c584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c586:	b128      	cbz	r0, 800c594 <rmw_destroy_subscription+0x10>
 800c588:	4604      	mov	r4, r0
 800c58a:	6800      	ldr	r0, [r0, #0]
 800c58c:	460d      	mov	r5, r1
 800c58e:	f000 fc05 	bl	800cd9c <is_uxrce_rmw_identifier_valid>
 800c592:	b910      	cbnz	r0, 800c59a <rmw_destroy_subscription+0x16>
 800c594:	2401      	movs	r4, #1
 800c596:	4620      	mov	r0, r4
 800c598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c59a:	6863      	ldr	r3, [r4, #4]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d0f9      	beq.n	800c594 <rmw_destroy_subscription+0x10>
 800c5a0:	2d00      	cmp	r5, #0
 800c5a2:	d0f7      	beq.n	800c594 <rmw_destroy_subscription+0x10>
 800c5a4:	6828      	ldr	r0, [r5, #0]
 800c5a6:	f000 fbf9 	bl	800cd9c <is_uxrce_rmw_identifier_valid>
 800c5aa:	2800      	cmp	r0, #0
 800c5ac:	d0f2      	beq.n	800c594 <rmw_destroy_subscription+0x10>
 800c5ae:	686c      	ldr	r4, [r5, #4]
 800c5b0:	2c00      	cmp	r4, #0
 800c5b2:	d0ef      	beq.n	800c594 <rmw_destroy_subscription+0x10>
 800c5b4:	6a26      	ldr	r6, [r4, #32]
 800c5b6:	6962      	ldr	r2, [r4, #20]
 800c5b8:	6930      	ldr	r0, [r6, #16]
 800c5ba:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800c5be:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c5c2:	6819      	ldr	r1, [r3, #0]
 800c5c4:	f001 f81c 	bl	800d600 <uxr_buffer_cancel_data>
 800c5c8:	4602      	mov	r2, r0
 800c5ca:	6930      	ldr	r0, [r6, #16]
 800c5cc:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800c5d0:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800c5d4:	f000 fb62 	bl	800cc9c <run_xrce_session>
 800c5d8:	69e0      	ldr	r0, [r4, #28]
 800c5da:	f006 ff19 	bl	8013410 <destroy_topic>
 800c5de:	6a23      	ldr	r3, [r4, #32]
 800c5e0:	6962      	ldr	r2, [r4, #20]
 800c5e2:	6918      	ldr	r0, [r3, #16]
 800c5e4:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800c5e8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c5ec:	6819      	ldr	r1, [r3, #0]
 800c5ee:	f000 fd9b 	bl	800d128 <uxr_buffer_delete_entity>
 800c5f2:	6a23      	ldr	r3, [r4, #32]
 800c5f4:	6922      	ldr	r2, [r4, #16]
 800c5f6:	691b      	ldr	r3, [r3, #16]
 800c5f8:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800c5fc:	4604      	mov	r4, r0
 800c5fe:	6809      	ldr	r1, [r1, #0]
 800c600:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800c604:	f000 fd90 	bl	800d128 <uxr_buffer_delete_entity>
 800c608:	6937      	ldr	r7, [r6, #16]
 800c60a:	4622      	mov	r2, r4
 800c60c:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 800c610:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 800c614:	4604      	mov	r4, r0
 800c616:	4638      	mov	r0, r7
 800c618:	f000 fb40 	bl	800cc9c <run_xrce_session>
 800c61c:	6936      	ldr	r6, [r6, #16]
 800c61e:	4622      	mov	r2, r4
 800c620:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800c624:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800c628:	4604      	mov	r4, r0
 800c62a:	4630      	mov	r0, r6
 800c62c:	f000 fb36 	bl	800cc9c <run_xrce_session>
 800c630:	b12c      	cbz	r4, 800c63e <rmw_destroy_subscription+0xba>
 800c632:	b120      	cbz	r0, 800c63e <rmw_destroy_subscription+0xba>
 800c634:	2400      	movs	r4, #0
 800c636:	4628      	mov	r0, r5
 800c638:	f000 f9ec 	bl	800ca14 <rmw_uxrce_fini_subscription_memory>
 800c63c:	e7ab      	b.n	800c596 <rmw_destroy_subscription+0x12>
 800c63e:	2402      	movs	r4, #2
 800c640:	e7f9      	b.n	800c636 <rmw_destroy_subscription+0xb2>
 800c642:	bf00      	nop

0800c644 <rmw_take_with_info>:
 800c644:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c646:	4604      	mov	r4, r0
 800c648:	6800      	ldr	r0, [r0, #0]
 800c64a:	b089      	sub	sp, #36	@ 0x24
 800c64c:	460f      	mov	r7, r1
 800c64e:	4615      	mov	r5, r2
 800c650:	b128      	cbz	r0, 800c65e <rmw_take_with_info+0x1a>
 800c652:	4b24      	ldr	r3, [pc, #144]	@ (800c6e4 <rmw_take_with_info+0xa0>)
 800c654:	6819      	ldr	r1, [r3, #0]
 800c656:	f7f3 fddb 	bl	8000210 <strcmp>
 800c65a:	2800      	cmp	r0, #0
 800c65c:	d13e      	bne.n	800c6dc <rmw_take_with_info+0x98>
 800c65e:	b305      	cbz	r5, 800c6a2 <rmw_take_with_info+0x5e>
 800c660:	6864      	ldr	r4, [r4, #4]
 800c662:	2300      	movs	r3, #0
 800c664:	702b      	strb	r3, [r5, #0]
 800c666:	f000 fa9b 	bl	800cba0 <rmw_uxrce_clean_expired_static_input_buffer>
 800c66a:	4620      	mov	r0, r4
 800c66c:	f000 fa70 	bl	800cb50 <rmw_uxrce_find_static_input_buffer_by_owner>
 800c670:	4606      	mov	r6, r0
 800c672:	b1f0      	cbz	r0, 800c6b2 <rmw_take_with_info+0x6e>
 800c674:	6881      	ldr	r1, [r0, #8]
 800c676:	4668      	mov	r0, sp
 800c678:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 800c67c:	3110      	adds	r1, #16
 800c67e:	f000 fc8b 	bl	800cf98 <ucdr_init_buffer>
 800c682:	69a3      	ldr	r3, [r4, #24]
 800c684:	4639      	mov	r1, r7
 800c686:	68db      	ldr	r3, [r3, #12]
 800c688:	4668      	mov	r0, sp
 800c68a:	4798      	blx	r3
 800c68c:	4631      	mov	r1, r6
 800c68e:	4604      	mov	r4, r0
 800c690:	4815      	ldr	r0, [pc, #84]	@ (800c6e8 <rmw_take_with_info+0xa4>)
 800c692:	f006 fb87 	bl	8012da4 <put_memory>
 800c696:	702c      	strb	r4, [r5, #0]
 800c698:	f084 0001 	eor.w	r0, r4, #1
 800c69c:	b2c0      	uxtb	r0, r0
 800c69e:	b009      	add	sp, #36	@ 0x24
 800c6a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6a2:	6864      	ldr	r4, [r4, #4]
 800c6a4:	f000 fa7c 	bl	800cba0 <rmw_uxrce_clean_expired_static_input_buffer>
 800c6a8:	4620      	mov	r0, r4
 800c6aa:	f000 fa51 	bl	800cb50 <rmw_uxrce_find_static_input_buffer_by_owner>
 800c6ae:	4605      	mov	r5, r0
 800c6b0:	b910      	cbnz	r0, 800c6b8 <rmw_take_with_info+0x74>
 800c6b2:	2001      	movs	r0, #1
 800c6b4:	b009      	add	sp, #36	@ 0x24
 800c6b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6b8:	68a9      	ldr	r1, [r5, #8]
 800c6ba:	4668      	mov	r0, sp
 800c6bc:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 800c6c0:	3110      	adds	r1, #16
 800c6c2:	f000 fc69 	bl	800cf98 <ucdr_init_buffer>
 800c6c6:	69a3      	ldr	r3, [r4, #24]
 800c6c8:	4639      	mov	r1, r7
 800c6ca:	68db      	ldr	r3, [r3, #12]
 800c6cc:	4668      	mov	r0, sp
 800c6ce:	4798      	blx	r3
 800c6d0:	4629      	mov	r1, r5
 800c6d2:	4604      	mov	r4, r0
 800c6d4:	4804      	ldr	r0, [pc, #16]	@ (800c6e8 <rmw_take_with_info+0xa4>)
 800c6d6:	f006 fb65 	bl	8012da4 <put_memory>
 800c6da:	e7dd      	b.n	800c698 <rmw_take_with_info+0x54>
 800c6dc:	200c      	movs	r0, #12
 800c6de:	b009      	add	sp, #36	@ 0x24
 800c6e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6e2:	bf00      	nop
 800c6e4:	0801a70c 	.word	0x0801a70c
 800c6e8:	20010b74 	.word	0x20010b74

0800c6ec <rmw_uxrce_init_service_memory>:
 800c6ec:	b1e2      	cbz	r2, 800c728 <rmw_uxrce_init_service_memory+0x3c>
 800c6ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6f2:	7b05      	ldrb	r5, [r0, #12]
 800c6f4:	4606      	mov	r6, r0
 800c6f6:	b9ad      	cbnz	r5, 800c724 <rmw_uxrce_init_service_memory+0x38>
 800c6f8:	23c8      	movs	r3, #200	@ 0xc8
 800c6fa:	e9c0 5500 	strd	r5, r5, [r0]
 800c6fe:	6083      	str	r3, [r0, #8]
 800c700:	f240 1301 	movw	r3, #257	@ 0x101
 800c704:	4617      	mov	r7, r2
 800c706:	8183      	strh	r3, [r0, #12]
 800c708:	460c      	mov	r4, r1
 800c70a:	46a8      	mov	r8, r5
 800c70c:	4621      	mov	r1, r4
 800c70e:	4630      	mov	r0, r6
 800c710:	3501      	adds	r5, #1
 800c712:	f006 fb47 	bl	8012da4 <put_memory>
 800c716:	42af      	cmp	r7, r5
 800c718:	60a4      	str	r4, [r4, #8]
 800c71a:	f884 800c 	strb.w	r8, [r4, #12]
 800c71e:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800c722:	d1f3      	bne.n	800c70c <rmw_uxrce_init_service_memory+0x20>
 800c724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c728:	4770      	bx	lr
 800c72a:	bf00      	nop

0800c72c <rmw_uxrce_init_client_memory>:
 800c72c:	b1e2      	cbz	r2, 800c768 <rmw_uxrce_init_client_memory+0x3c>
 800c72e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c732:	7b05      	ldrb	r5, [r0, #12]
 800c734:	4606      	mov	r6, r0
 800c736:	b9ad      	cbnz	r5, 800c764 <rmw_uxrce_init_client_memory+0x38>
 800c738:	23c8      	movs	r3, #200	@ 0xc8
 800c73a:	e9c0 5500 	strd	r5, r5, [r0]
 800c73e:	6083      	str	r3, [r0, #8]
 800c740:	f240 1301 	movw	r3, #257	@ 0x101
 800c744:	4617      	mov	r7, r2
 800c746:	8183      	strh	r3, [r0, #12]
 800c748:	460c      	mov	r4, r1
 800c74a:	46a8      	mov	r8, r5
 800c74c:	4621      	mov	r1, r4
 800c74e:	4630      	mov	r0, r6
 800c750:	3501      	adds	r5, #1
 800c752:	f006 fb27 	bl	8012da4 <put_memory>
 800c756:	42af      	cmp	r7, r5
 800c758:	60a4      	str	r4, [r4, #8]
 800c75a:	f884 800c 	strb.w	r8, [r4, #12]
 800c75e:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800c762:	d1f3      	bne.n	800c74c <rmw_uxrce_init_client_memory+0x20>
 800c764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c768:	4770      	bx	lr
 800c76a:	bf00      	nop

0800c76c <rmw_uxrce_init_publisher_memory>:
 800c76c:	b1e2      	cbz	r2, 800c7a8 <rmw_uxrce_init_publisher_memory+0x3c>
 800c76e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c772:	7b05      	ldrb	r5, [r0, #12]
 800c774:	4606      	mov	r6, r0
 800c776:	b9ad      	cbnz	r5, 800c7a4 <rmw_uxrce_init_publisher_memory+0x38>
 800c778:	23d8      	movs	r3, #216	@ 0xd8
 800c77a:	e9c0 5500 	strd	r5, r5, [r0]
 800c77e:	6083      	str	r3, [r0, #8]
 800c780:	f240 1301 	movw	r3, #257	@ 0x101
 800c784:	4617      	mov	r7, r2
 800c786:	8183      	strh	r3, [r0, #12]
 800c788:	460c      	mov	r4, r1
 800c78a:	46a8      	mov	r8, r5
 800c78c:	4621      	mov	r1, r4
 800c78e:	4630      	mov	r0, r6
 800c790:	3501      	adds	r5, #1
 800c792:	f006 fb07 	bl	8012da4 <put_memory>
 800c796:	42af      	cmp	r7, r5
 800c798:	60a4      	str	r4, [r4, #8]
 800c79a:	f884 800c 	strb.w	r8, [r4, #12]
 800c79e:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800c7a2:	d1f3      	bne.n	800c78c <rmw_uxrce_init_publisher_memory+0x20>
 800c7a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7a8:	4770      	bx	lr
 800c7aa:	bf00      	nop

0800c7ac <rmw_uxrce_init_subscription_memory>:
 800c7ac:	b1e2      	cbz	r2, 800c7e8 <rmw_uxrce_init_subscription_memory+0x3c>
 800c7ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7b2:	7b05      	ldrb	r5, [r0, #12]
 800c7b4:	4606      	mov	r6, r0
 800c7b6:	b9ad      	cbnz	r5, 800c7e4 <rmw_uxrce_init_subscription_memory+0x38>
 800c7b8:	23d8      	movs	r3, #216	@ 0xd8
 800c7ba:	e9c0 5500 	strd	r5, r5, [r0]
 800c7be:	6083      	str	r3, [r0, #8]
 800c7c0:	f240 1301 	movw	r3, #257	@ 0x101
 800c7c4:	4617      	mov	r7, r2
 800c7c6:	8183      	strh	r3, [r0, #12]
 800c7c8:	460c      	mov	r4, r1
 800c7ca:	46a8      	mov	r8, r5
 800c7cc:	4621      	mov	r1, r4
 800c7ce:	4630      	mov	r0, r6
 800c7d0:	3501      	adds	r5, #1
 800c7d2:	f006 fae7 	bl	8012da4 <put_memory>
 800c7d6:	42af      	cmp	r7, r5
 800c7d8:	60a4      	str	r4, [r4, #8]
 800c7da:	f884 800c 	strb.w	r8, [r4, #12]
 800c7de:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800c7e2:	d1f3      	bne.n	800c7cc <rmw_uxrce_init_subscription_memory+0x20>
 800c7e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7e8:	4770      	bx	lr
 800c7ea:	bf00      	nop

0800c7ec <rmw_uxrce_init_node_memory>:
 800c7ec:	b1e2      	cbz	r2, 800c828 <rmw_uxrce_init_node_memory+0x3c>
 800c7ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7f2:	7b05      	ldrb	r5, [r0, #12]
 800c7f4:	4606      	mov	r6, r0
 800c7f6:	b9ad      	cbnz	r5, 800c824 <rmw_uxrce_init_node_memory+0x38>
 800c7f8:	23a4      	movs	r3, #164	@ 0xa4
 800c7fa:	e9c0 5500 	strd	r5, r5, [r0]
 800c7fe:	6083      	str	r3, [r0, #8]
 800c800:	f240 1301 	movw	r3, #257	@ 0x101
 800c804:	4617      	mov	r7, r2
 800c806:	8183      	strh	r3, [r0, #12]
 800c808:	460c      	mov	r4, r1
 800c80a:	46a8      	mov	r8, r5
 800c80c:	4621      	mov	r1, r4
 800c80e:	4630      	mov	r0, r6
 800c810:	3501      	adds	r5, #1
 800c812:	f006 fac7 	bl	8012da4 <put_memory>
 800c816:	42af      	cmp	r7, r5
 800c818:	60a4      	str	r4, [r4, #8]
 800c81a:	f884 800c 	strb.w	r8, [r4, #12]
 800c81e:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800c822:	d1f3      	bne.n	800c80c <rmw_uxrce_init_node_memory+0x20>
 800c824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c828:	4770      	bx	lr
 800c82a:	bf00      	nop

0800c82c <rmw_uxrce_init_session_memory>:
 800c82c:	b1ea      	cbz	r2, 800c86a <rmw_uxrce_init_session_memory+0x3e>
 800c82e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c832:	7b05      	ldrb	r5, [r0, #12]
 800c834:	4606      	mov	r6, r0
 800c836:	b9b5      	cbnz	r5, 800c866 <rmw_uxrce_init_session_memory+0x3a>
 800c838:	e9c0 5500 	strd	r5, r5, [r0]
 800c83c:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800c840:	f240 1301 	movw	r3, #257	@ 0x101
 800c844:	4617      	mov	r7, r2
 800c846:	f8c0 8008 	str.w	r8, [r0, #8]
 800c84a:	460c      	mov	r4, r1
 800c84c:	8183      	strh	r3, [r0, #12]
 800c84e:	46a9      	mov	r9, r5
 800c850:	4621      	mov	r1, r4
 800c852:	4630      	mov	r0, r6
 800c854:	3501      	adds	r5, #1
 800c856:	f006 faa5 	bl	8012da4 <put_memory>
 800c85a:	42af      	cmp	r7, r5
 800c85c:	60a4      	str	r4, [r4, #8]
 800c85e:	f884 900c 	strb.w	r9, [r4, #12]
 800c862:	4444      	add	r4, r8
 800c864:	d1f4      	bne.n	800c850 <rmw_uxrce_init_session_memory+0x24>
 800c866:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c86a:	4770      	bx	lr

0800c86c <rmw_uxrce_init_topic_memory>:
 800c86c:	b1e2      	cbz	r2, 800c8a8 <rmw_uxrce_init_topic_memory+0x3c>
 800c86e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c872:	7b05      	ldrb	r5, [r0, #12]
 800c874:	4606      	mov	r6, r0
 800c876:	b9ad      	cbnz	r5, 800c8a4 <rmw_uxrce_init_topic_memory+0x38>
 800c878:	231c      	movs	r3, #28
 800c87a:	e9c0 5500 	strd	r5, r5, [r0]
 800c87e:	6083      	str	r3, [r0, #8]
 800c880:	f240 1301 	movw	r3, #257	@ 0x101
 800c884:	4617      	mov	r7, r2
 800c886:	8183      	strh	r3, [r0, #12]
 800c888:	460c      	mov	r4, r1
 800c88a:	46a8      	mov	r8, r5
 800c88c:	4621      	mov	r1, r4
 800c88e:	4630      	mov	r0, r6
 800c890:	3501      	adds	r5, #1
 800c892:	f006 fa87 	bl	8012da4 <put_memory>
 800c896:	42af      	cmp	r7, r5
 800c898:	60a4      	str	r4, [r4, #8]
 800c89a:	f884 800c 	strb.w	r8, [r4, #12]
 800c89e:	f104 041c 	add.w	r4, r4, #28
 800c8a2:	d1f3      	bne.n	800c88c <rmw_uxrce_init_topic_memory+0x20>
 800c8a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8a8:	4770      	bx	lr
 800c8aa:	bf00      	nop

0800c8ac <rmw_uxrce_init_static_input_buffer_memory>:
 800c8ac:	b1ea      	cbz	r2, 800c8ea <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800c8ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8b2:	7b05      	ldrb	r5, [r0, #12]
 800c8b4:	4606      	mov	r6, r0
 800c8b6:	b9b5      	cbnz	r5, 800c8e6 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800c8b8:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800c8bc:	e9c0 5500 	strd	r5, r5, [r0]
 800c8c0:	6083      	str	r3, [r0, #8]
 800c8c2:	f240 1301 	movw	r3, #257	@ 0x101
 800c8c6:	4617      	mov	r7, r2
 800c8c8:	8183      	strh	r3, [r0, #12]
 800c8ca:	460c      	mov	r4, r1
 800c8cc:	46a8      	mov	r8, r5
 800c8ce:	4621      	mov	r1, r4
 800c8d0:	4630      	mov	r0, r6
 800c8d2:	3501      	adds	r5, #1
 800c8d4:	f006 fa66 	bl	8012da4 <put_memory>
 800c8d8:	42af      	cmp	r7, r5
 800c8da:	60a4      	str	r4, [r4, #8]
 800c8dc:	f884 800c 	strb.w	r8, [r4, #12]
 800c8e0:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800c8e4:	d1f3      	bne.n	800c8ce <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800c8e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8ea:	4770      	bx	lr

0800c8ec <rmw_uxrce_init_init_options_impl_memory>:
 800c8ec:	b1e2      	cbz	r2, 800c928 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800c8ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8f2:	7b05      	ldrb	r5, [r0, #12]
 800c8f4:	4606      	mov	r6, r0
 800c8f6:	b9ad      	cbnz	r5, 800c924 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800c8f8:	232c      	movs	r3, #44	@ 0x2c
 800c8fa:	e9c0 5500 	strd	r5, r5, [r0]
 800c8fe:	6083      	str	r3, [r0, #8]
 800c900:	f240 1301 	movw	r3, #257	@ 0x101
 800c904:	4617      	mov	r7, r2
 800c906:	8183      	strh	r3, [r0, #12]
 800c908:	460c      	mov	r4, r1
 800c90a:	46a8      	mov	r8, r5
 800c90c:	4621      	mov	r1, r4
 800c90e:	4630      	mov	r0, r6
 800c910:	3501      	adds	r5, #1
 800c912:	f006 fa47 	bl	8012da4 <put_memory>
 800c916:	42af      	cmp	r7, r5
 800c918:	60a4      	str	r4, [r4, #8]
 800c91a:	f884 800c 	strb.w	r8, [r4, #12]
 800c91e:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800c922:	d1f3      	bne.n	800c90c <rmw_uxrce_init_init_options_impl_memory+0x20>
 800c924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c928:	4770      	bx	lr
 800c92a:	bf00      	nop

0800c92c <rmw_uxrce_init_wait_set_memory>:
 800c92c:	b1e2      	cbz	r2, 800c968 <rmw_uxrce_init_wait_set_memory+0x3c>
 800c92e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c932:	7b05      	ldrb	r5, [r0, #12]
 800c934:	4606      	mov	r6, r0
 800c936:	b9ad      	cbnz	r5, 800c964 <rmw_uxrce_init_wait_set_memory+0x38>
 800c938:	231c      	movs	r3, #28
 800c93a:	e9c0 5500 	strd	r5, r5, [r0]
 800c93e:	6083      	str	r3, [r0, #8]
 800c940:	f240 1301 	movw	r3, #257	@ 0x101
 800c944:	4617      	mov	r7, r2
 800c946:	8183      	strh	r3, [r0, #12]
 800c948:	460c      	mov	r4, r1
 800c94a:	46a8      	mov	r8, r5
 800c94c:	4621      	mov	r1, r4
 800c94e:	4630      	mov	r0, r6
 800c950:	3501      	adds	r5, #1
 800c952:	f006 fa27 	bl	8012da4 <put_memory>
 800c956:	42af      	cmp	r7, r5
 800c958:	60a4      	str	r4, [r4, #8]
 800c95a:	f884 800c 	strb.w	r8, [r4, #12]
 800c95e:	f104 041c 	add.w	r4, r4, #28
 800c962:	d1f3      	bne.n	800c94c <rmw_uxrce_init_wait_set_memory+0x20>
 800c964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c968:	4770      	bx	lr
 800c96a:	bf00      	nop

0800c96c <rmw_uxrce_init_guard_condition_memory>:
 800c96c:	b1e2      	cbz	r2, 800c9a8 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800c96e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c972:	7b05      	ldrb	r5, [r0, #12]
 800c974:	4606      	mov	r6, r0
 800c976:	b9ad      	cbnz	r5, 800c9a4 <rmw_uxrce_init_guard_condition_memory+0x38>
 800c978:	2320      	movs	r3, #32
 800c97a:	e9c0 5500 	strd	r5, r5, [r0]
 800c97e:	6083      	str	r3, [r0, #8]
 800c980:	f240 1301 	movw	r3, #257	@ 0x101
 800c984:	4617      	mov	r7, r2
 800c986:	8183      	strh	r3, [r0, #12]
 800c988:	460c      	mov	r4, r1
 800c98a:	46a8      	mov	r8, r5
 800c98c:	4621      	mov	r1, r4
 800c98e:	4630      	mov	r0, r6
 800c990:	3501      	adds	r5, #1
 800c992:	f006 fa07 	bl	8012da4 <put_memory>
 800c996:	42af      	cmp	r7, r5
 800c998:	60a4      	str	r4, [r4, #8]
 800c99a:	f884 800c 	strb.w	r8, [r4, #12]
 800c99e:	f104 0420 	add.w	r4, r4, #32
 800c9a2:	d1f3      	bne.n	800c98c <rmw_uxrce_init_guard_condition_memory+0x20>
 800c9a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9a8:	4770      	bx	lr
 800c9aa:	bf00      	nop

0800c9ac <rmw_uxrce_fini_session_memory>:
 800c9ac:	4601      	mov	r1, r0
 800c9ae:	4801      	ldr	r0, [pc, #4]	@ (800c9b4 <rmw_uxrce_fini_session_memory+0x8>)
 800c9b0:	f006 b9f8 	b.w	8012da4 <put_memory>
 800c9b4:	20010b64 	.word	0x20010b64

0800c9b8 <rmw_uxrce_fini_node_memory>:
 800c9b8:	b538      	push	{r3, r4, r5, lr}
 800c9ba:	4604      	mov	r4, r0
 800c9bc:	6800      	ldr	r0, [r0, #0]
 800c9be:	b128      	cbz	r0, 800c9cc <rmw_uxrce_fini_node_memory+0x14>
 800c9c0:	4b07      	ldr	r3, [pc, #28]	@ (800c9e0 <rmw_uxrce_fini_node_memory+0x28>)
 800c9c2:	6819      	ldr	r1, [r3, #0]
 800c9c4:	f7f3 fc24 	bl	8000210 <strcmp>
 800c9c8:	b940      	cbnz	r0, 800c9dc <rmw_uxrce_fini_node_memory+0x24>
 800c9ca:	6020      	str	r0, [r4, #0]
 800c9cc:	6861      	ldr	r1, [r4, #4]
 800c9ce:	b129      	cbz	r1, 800c9dc <rmw_uxrce_fini_node_memory+0x24>
 800c9d0:	2500      	movs	r5, #0
 800c9d2:	4804      	ldr	r0, [pc, #16]	@ (800c9e4 <rmw_uxrce_fini_node_memory+0x2c>)
 800c9d4:	610d      	str	r5, [r1, #16]
 800c9d6:	f006 f9e5 	bl	8012da4 <put_memory>
 800c9da:	6065      	str	r5, [r4, #4]
 800c9dc:	bd38      	pop	{r3, r4, r5, pc}
 800c9de:	bf00      	nop
 800c9e0:	0801a70c 	.word	0x0801a70c
 800c9e4:	20010b34 	.word	0x20010b34

0800c9e8 <rmw_uxrce_fini_publisher_memory>:
 800c9e8:	b510      	push	{r4, lr}
 800c9ea:	4604      	mov	r4, r0
 800c9ec:	6800      	ldr	r0, [r0, #0]
 800c9ee:	b128      	cbz	r0, 800c9fc <rmw_uxrce_fini_publisher_memory+0x14>
 800c9f0:	4b06      	ldr	r3, [pc, #24]	@ (800ca0c <rmw_uxrce_fini_publisher_memory+0x24>)
 800c9f2:	6819      	ldr	r1, [r3, #0]
 800c9f4:	f7f3 fc0c 	bl	8000210 <strcmp>
 800c9f8:	b938      	cbnz	r0, 800ca0a <rmw_uxrce_fini_publisher_memory+0x22>
 800c9fa:	6020      	str	r0, [r4, #0]
 800c9fc:	6861      	ldr	r1, [r4, #4]
 800c9fe:	b121      	cbz	r1, 800ca0a <rmw_uxrce_fini_publisher_memory+0x22>
 800ca00:	4803      	ldr	r0, [pc, #12]	@ (800ca10 <rmw_uxrce_fini_publisher_memory+0x28>)
 800ca02:	f006 f9cf 	bl	8012da4 <put_memory>
 800ca06:	2300      	movs	r3, #0
 800ca08:	6063      	str	r3, [r4, #4]
 800ca0a:	bd10      	pop	{r4, pc}
 800ca0c:	0801a70c 	.word	0x0801a70c
 800ca10:	20010b44 	.word	0x20010b44

0800ca14 <rmw_uxrce_fini_subscription_memory>:
 800ca14:	b510      	push	{r4, lr}
 800ca16:	4604      	mov	r4, r0
 800ca18:	6800      	ldr	r0, [r0, #0]
 800ca1a:	b128      	cbz	r0, 800ca28 <rmw_uxrce_fini_subscription_memory+0x14>
 800ca1c:	4b06      	ldr	r3, [pc, #24]	@ (800ca38 <rmw_uxrce_fini_subscription_memory+0x24>)
 800ca1e:	6819      	ldr	r1, [r3, #0]
 800ca20:	f7f3 fbf6 	bl	8000210 <strcmp>
 800ca24:	b938      	cbnz	r0, 800ca36 <rmw_uxrce_fini_subscription_memory+0x22>
 800ca26:	6020      	str	r0, [r4, #0]
 800ca28:	6861      	ldr	r1, [r4, #4]
 800ca2a:	b121      	cbz	r1, 800ca36 <rmw_uxrce_fini_subscription_memory+0x22>
 800ca2c:	4803      	ldr	r0, [pc, #12]	@ (800ca3c <rmw_uxrce_fini_subscription_memory+0x28>)
 800ca2e:	f006 f9b9 	bl	8012da4 <put_memory>
 800ca32:	2300      	movs	r3, #0
 800ca34:	6063      	str	r3, [r4, #4]
 800ca36:	bd10      	pop	{r4, pc}
 800ca38:	0801a70c 	.word	0x0801a70c
 800ca3c:	20010b84 	.word	0x20010b84

0800ca40 <rmw_uxrce_fini_service_memory>:
 800ca40:	b510      	push	{r4, lr}
 800ca42:	4604      	mov	r4, r0
 800ca44:	6800      	ldr	r0, [r0, #0]
 800ca46:	b128      	cbz	r0, 800ca54 <rmw_uxrce_fini_service_memory+0x14>
 800ca48:	4b06      	ldr	r3, [pc, #24]	@ (800ca64 <rmw_uxrce_fini_service_memory+0x24>)
 800ca4a:	6819      	ldr	r1, [r3, #0]
 800ca4c:	f7f3 fbe0 	bl	8000210 <strcmp>
 800ca50:	b938      	cbnz	r0, 800ca62 <rmw_uxrce_fini_service_memory+0x22>
 800ca52:	6020      	str	r0, [r4, #0]
 800ca54:	6861      	ldr	r1, [r4, #4]
 800ca56:	b121      	cbz	r1, 800ca62 <rmw_uxrce_fini_service_memory+0x22>
 800ca58:	4803      	ldr	r0, [pc, #12]	@ (800ca68 <rmw_uxrce_fini_service_memory+0x28>)
 800ca5a:	f006 f9a3 	bl	8012da4 <put_memory>
 800ca5e:	2300      	movs	r3, #0
 800ca60:	6063      	str	r3, [r4, #4]
 800ca62:	bd10      	pop	{r4, pc}
 800ca64:	0801a70c 	.word	0x0801a70c
 800ca68:	20010b54 	.word	0x20010b54

0800ca6c <rmw_uxrce_fini_client_memory>:
 800ca6c:	b510      	push	{r4, lr}
 800ca6e:	4604      	mov	r4, r0
 800ca70:	6800      	ldr	r0, [r0, #0]
 800ca72:	b128      	cbz	r0, 800ca80 <rmw_uxrce_fini_client_memory+0x14>
 800ca74:	4b06      	ldr	r3, [pc, #24]	@ (800ca90 <rmw_uxrce_fini_client_memory+0x24>)
 800ca76:	6819      	ldr	r1, [r3, #0]
 800ca78:	f7f3 fbca 	bl	8000210 <strcmp>
 800ca7c:	b938      	cbnz	r0, 800ca8e <rmw_uxrce_fini_client_memory+0x22>
 800ca7e:	6020      	str	r0, [r4, #0]
 800ca80:	6861      	ldr	r1, [r4, #4]
 800ca82:	b121      	cbz	r1, 800ca8e <rmw_uxrce_fini_client_memory+0x22>
 800ca84:	4803      	ldr	r0, [pc, #12]	@ (800ca94 <rmw_uxrce_fini_client_memory+0x28>)
 800ca86:	f006 f98d 	bl	8012da4 <put_memory>
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	6063      	str	r3, [r4, #4]
 800ca8e:	bd10      	pop	{r4, pc}
 800ca90:	0801a70c 	.word	0x0801a70c
 800ca94:	2000c264 	.word	0x2000c264

0800ca98 <rmw_uxrce_fini_topic_memory>:
 800ca98:	b510      	push	{r4, lr}
 800ca9a:	4604      	mov	r4, r0
 800ca9c:	4621      	mov	r1, r4
 800ca9e:	4803      	ldr	r0, [pc, #12]	@ (800caac <rmw_uxrce_fini_topic_memory+0x14>)
 800caa0:	f006 f980 	bl	8012da4 <put_memory>
 800caa4:	2300      	movs	r3, #0
 800caa6:	61a3      	str	r3, [r4, #24]
 800caa8:	bd10      	pop	{r4, pc}
 800caaa:	bf00      	nop
 800caac:	20010b94 	.word	0x20010b94

0800cab0 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800cab0:	b082      	sub	sp, #8
 800cab2:	b530      	push	{r4, r5, lr}
 800cab4:	4925      	ldr	r1, [pc, #148]	@ (800cb4c <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800cab6:	680d      	ldr	r5, [r1, #0]
 800cab8:	ac03      	add	r4, sp, #12
 800caba:	e884 000c 	stmia.w	r4, {r2, r3}
 800cabe:	461c      	mov	r4, r3
 800cac0:	2d00      	cmp	r5, #0
 800cac2:	d041      	beq.n	800cb48 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800cac4:	462b      	mov	r3, r5
 800cac6:	2100      	movs	r1, #0
 800cac8:	689a      	ldr	r2, [r3, #8]
 800caca:	685b      	ldr	r3, [r3, #4]
 800cacc:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800cad0:	4290      	cmp	r0, r2
 800cad2:	bf08      	it	eq
 800cad4:	3101      	addeq	r1, #1
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d1f6      	bne.n	800cac8 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800cada:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800cade:	2b02      	cmp	r3, #2
 800cae0:	d029      	beq.n	800cb36 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800cae2:	d907      	bls.n	800caf4 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800cae4:	2b03      	cmp	r3, #3
 800cae6:	d005      	beq.n	800caf4 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800cae8:	2100      	movs	r1, #0
 800caea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800caee:	4608      	mov	r0, r1
 800caf0:	b002      	add	sp, #8
 800caf2:	4770      	bx	lr
 800caf4:	b314      	cbz	r4, 800cb3c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800caf6:	428c      	cmp	r4, r1
 800caf8:	d820      	bhi.n	800cb3c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800cafa:	2d00      	cmp	r5, #0
 800cafc:	d0f4      	beq.n	800cae8 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800cafe:	2100      	movs	r1, #0
 800cb00:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800cb04:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800cb08:	e002      	b.n	800cb10 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800cb0a:	686d      	ldr	r5, [r5, #4]
 800cb0c:	2d00      	cmp	r5, #0
 800cb0e:	d0ec      	beq.n	800caea <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800cb10:	68ab      	ldr	r3, [r5, #8]
 800cb12:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800cb16:	4290      	cmp	r0, r2
 800cb18:	d1f7      	bne.n	800cb0a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800cb1a:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800cb1e:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800cb22:	4562      	cmp	r2, ip
 800cb24:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800cb28:	eb73 0e04 	sbcs.w	lr, r3, r4
 800cb2c:	daed      	bge.n	800cb0a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800cb2e:	4694      	mov	ip, r2
 800cb30:	461c      	mov	r4, r3
 800cb32:	4629      	mov	r1, r5
 800cb34:	e7e9      	b.n	800cb0a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800cb36:	b10c      	cbz	r4, 800cb3c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800cb38:	428c      	cmp	r4, r1
 800cb3a:	d9d5      	bls.n	800cae8 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800cb3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cb40:	4802      	ldr	r0, [pc, #8]	@ (800cb4c <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800cb42:	b002      	add	sp, #8
 800cb44:	f006 b91e 	b.w	8012d84 <get_memory>
 800cb48:	4629      	mov	r1, r5
 800cb4a:	e7c6      	b.n	800cada <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800cb4c:	20010b74 	.word	0x20010b74

0800cb50 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800cb50:	4b11      	ldr	r3, [pc, #68]	@ (800cb98 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	b530      	push	{r4, r5, lr}
 800cb56:	b1e3      	cbz	r3, 800cb92 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800cb58:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 800cb5c:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 800cb60:	2400      	movs	r4, #0
 800cb62:	e001      	b.n	800cb68 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800cb64:	685b      	ldr	r3, [r3, #4]
 800cb66:	b193      	cbz	r3, 800cb8e <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800cb68:	689a      	ldr	r2, [r3, #8]
 800cb6a:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800cb6e:	4288      	cmp	r0, r1
 800cb70:	d1f8      	bne.n	800cb64 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800cb72:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800cb76:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800cb7a:	4571      	cmp	r1, lr
 800cb7c:	eb72 050c 	sbcs.w	r5, r2, ip
 800cb80:	daf0      	bge.n	800cb64 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800cb82:	461c      	mov	r4, r3
 800cb84:	685b      	ldr	r3, [r3, #4]
 800cb86:	468e      	mov	lr, r1
 800cb88:	4694      	mov	ip, r2
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d1ec      	bne.n	800cb68 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800cb8e:	4620      	mov	r0, r4
 800cb90:	bd30      	pop	{r4, r5, pc}
 800cb92:	461c      	mov	r4, r3
 800cb94:	4620      	mov	r0, r4
 800cb96:	bd30      	pop	{r4, r5, pc}
 800cb98:	20010b74 	.word	0x20010b74
 800cb9c:	00000000 	.word	0x00000000

0800cba0 <rmw_uxrce_clean_expired_static_input_buffer>:
 800cba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cba4:	4b3c      	ldr	r3, [pc, #240]	@ (800cc98 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800cba6:	ed2d 8b06 	vpush	{d8-d10}
 800cbaa:	681f      	ldr	r7, [r3, #0]
 800cbac:	b08d      	sub	sp, #52	@ 0x34
 800cbae:	f006 ff51 	bl	8013a54 <rmw_uros_epoch_nanos>
 800cbb2:	2f00      	cmp	r7, #0
 800cbb4:	d05d      	beq.n	800cc72 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800cbb6:	46b8      	mov	r8, r7
 800cbb8:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 800cc80 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800cbbc:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800cbc0:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800cbc4:	2b04      	cmp	r3, #4
 800cbc6:	ed9f ab30 	vldr	d10, [pc, #192]	@ 800cc88 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800cbca:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 800cc90 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800cbce:	4681      	mov	r9, r0
 800cbd0:	468a      	mov	sl, r1
 800cbd2:	ac04      	add	r4, sp, #16
 800cbd4:	d03f      	beq.n	800cc56 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800cbd6:	2b05      	cmp	r3, #5
 800cbd8:	d044      	beq.n	800cc64 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800cbda:	2b03      	cmp	r3, #3
 800cbdc:	d03b      	beq.n	800cc56 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800cbde:	ed8d 8b04 	vstr	d8, [sp, #16]
 800cbe2:	ed8d ab06 	vstr	d10, [sp, #24]
 800cbe6:	ed8d 8b08 	vstr	d8, [sp, #32]
 800cbea:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800cbee:	ab08      	add	r3, sp, #32
 800cbf0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800cbf2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800cbf6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800cbfa:	f005 ffc9 	bl	8012b90 <rmw_time_equal>
 800cbfe:	b118      	cbz	r0, 800cc08 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800cc00:	ed8d 9b04 	vstr	d9, [sp, #16]
 800cc04:	ed8d 8b06 	vstr	d8, [sp, #24]
 800cc08:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800cc0c:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 800cc10:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 800cc14:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800cc18:	f006 f80e 	bl	8012c38 <rmw_time_total_nsec>
 800cc1c:	1830      	adds	r0, r6, r0
 800cc1e:	eb47 0101 	adc.w	r1, r7, r1
 800cc22:	4548      	cmp	r0, r9
 800cc24:	eb71 030a 	sbcs.w	r3, r1, sl
 800cc28:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800cc2c:	db05      	blt.n	800cc3a <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800cc2e:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800cc32:	4591      	cmp	r9, r2
 800cc34:	eb7a 0303 	sbcs.w	r3, sl, r3
 800cc38:	da03      	bge.n	800cc42 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800cc3a:	4817      	ldr	r0, [pc, #92]	@ (800cc98 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800cc3c:	4641      	mov	r1, r8
 800cc3e:	f006 f8b1 	bl	8012da4 <put_memory>
 800cc42:	f1bb 0f00 	cmp.w	fp, #0
 800cc46:	d014      	beq.n	800cc72 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800cc48:	46d8      	mov	r8, fp
 800cc4a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800cc4e:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800cc52:	2b04      	cmp	r3, #4
 800cc54:	d1bf      	bne.n	800cbd6 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800cc56:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800cc5a:	3340      	adds	r3, #64	@ 0x40
 800cc5c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800cc5e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800cc62:	e7c0      	b.n	800cbe6 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800cc64:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800cc68:	3348      	adds	r3, #72	@ 0x48
 800cc6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800cc6c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800cc70:	e7b9      	b.n	800cbe6 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800cc72:	b00d      	add	sp, #52	@ 0x34
 800cc74:	ecbd 8b06 	vpop	{d8-d10}
 800cc78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc7c:	f3af 8000 	nop.w
	...
 800cc88:	00000001 	.word	0x00000001
 800cc8c:	00000000 	.word	0x00000000
 800cc90:	0000001e 	.word	0x0000001e
 800cc94:	00000000 	.word	0x00000000
 800cc98:	20010b74 	.word	0x20010b74

0800cc9c <run_xrce_session>:
 800cc9c:	b510      	push	{r4, lr}
 800cc9e:	788c      	ldrb	r4, [r1, #2]
 800cca0:	b086      	sub	sp, #24
 800cca2:	2c01      	cmp	r4, #1
 800cca4:	f8ad 200e 	strh.w	r2, [sp, #14]
 800cca8:	d00c      	beq.n	800ccc4 <run_xrce_session+0x28>
 800ccaa:	4619      	mov	r1, r3
 800ccac:	2301      	movs	r3, #1
 800ccae:	9300      	str	r3, [sp, #0]
 800ccb0:	f10d 020e 	add.w	r2, sp, #14
 800ccb4:	f10d 0317 	add.w	r3, sp, #23
 800ccb8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ccbc:	f001 fa9a 	bl	800e1f4 <uxr_run_session_until_all_status>
 800ccc0:	b006      	add	sp, #24
 800ccc2:	bd10      	pop	{r4, pc}
 800ccc4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ccc8:	f000 feae 	bl	800da28 <uxr_flash_output_streams>
 800cccc:	4620      	mov	r0, r4
 800ccce:	b006      	add	sp, #24
 800ccd0:	bd10      	pop	{r4, pc}
 800ccd2:	bf00      	nop

0800ccd4 <convert_qos_profile>:
 800ccd4:	7a4a      	ldrb	r2, [r1, #9]
 800ccd6:	f891 c008 	ldrb.w	ip, [r1, #8]
 800ccda:	2a02      	cmp	r2, #2
 800ccdc:	bf18      	it	ne
 800ccde:	2200      	movne	r2, #0
 800cce0:	7002      	strb	r2, [r0, #0]
 800cce2:	780a      	ldrb	r2, [r1, #0]
 800cce4:	8889      	ldrh	r1, [r1, #4]
 800cce6:	8081      	strh	r1, [r0, #4]
 800cce8:	f1ac 0c02 	sub.w	ip, ip, #2
 800ccec:	f1a2 0202 	sub.w	r2, r2, #2
 800ccf0:	fabc fc8c 	clz	ip, ip
 800ccf4:	fab2 f282 	clz	r2, r2
 800ccf8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800ccfc:	0952      	lsrs	r2, r2, #5
 800ccfe:	f880 c001 	strb.w	ip, [r0, #1]
 800cd02:	7082      	strb	r2, [r0, #2]
 800cd04:	4770      	bx	lr
 800cd06:	bf00      	nop

0800cd08 <generate_type_name>:
 800cd08:	b530      	push	{r4, r5, lr}
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	700b      	strb	r3, [r1, #0]
 800cd0e:	6803      	ldr	r3, [r0, #0]
 800cd10:	b087      	sub	sp, #28
 800cd12:	4614      	mov	r4, r2
 800cd14:	b1d3      	cbz	r3, 800cd4c <generate_type_name+0x44>
 800cd16:	4a0f      	ldr	r2, [pc, #60]	@ (800cd54 <generate_type_name+0x4c>)
 800cd18:	4615      	mov	r5, r2
 800cd1a:	9203      	str	r2, [sp, #12]
 800cd1c:	9500      	str	r5, [sp, #0]
 800cd1e:	6842      	ldr	r2, [r0, #4]
 800cd20:	480d      	ldr	r0, [pc, #52]	@ (800cd58 <generate_type_name+0x50>)
 800cd22:	9001      	str	r0, [sp, #4]
 800cd24:	4608      	mov	r0, r1
 800cd26:	490d      	ldr	r1, [pc, #52]	@ (800cd5c <generate_type_name+0x54>)
 800cd28:	9204      	str	r2, [sp, #16]
 800cd2a:	9105      	str	r1, [sp, #20]
 800cd2c:	9102      	str	r1, [sp, #8]
 800cd2e:	4a0c      	ldr	r2, [pc, #48]	@ (800cd60 <generate_type_name+0x58>)
 800cd30:	4621      	mov	r1, r4
 800cd32:	f00a fdeb 	bl	801790c <sniprintf>
 800cd36:	2800      	cmp	r0, #0
 800cd38:	db05      	blt.n	800cd46 <generate_type_name+0x3e>
 800cd3a:	4284      	cmp	r4, r0
 800cd3c:	bfd4      	ite	le
 800cd3e:	2000      	movle	r0, #0
 800cd40:	2001      	movgt	r0, #1
 800cd42:	b007      	add	sp, #28
 800cd44:	bd30      	pop	{r4, r5, pc}
 800cd46:	2000      	movs	r0, #0
 800cd48:	b007      	add	sp, #28
 800cd4a:	bd30      	pop	{r4, r5, pc}
 800cd4c:	4b05      	ldr	r3, [pc, #20]	@ (800cd64 <generate_type_name+0x5c>)
 800cd4e:	4a01      	ldr	r2, [pc, #4]	@ (800cd54 <generate_type_name+0x4c>)
 800cd50:	461d      	mov	r5, r3
 800cd52:	e7e2      	b.n	800cd1a <generate_type_name+0x12>
 800cd54:	0801a39c 	.word	0x0801a39c
 800cd58:	0801a3b4 	.word	0x0801a3b4
 800cd5c:	0801a3b0 	.word	0x0801a3b0
 800cd60:	0801a3a0 	.word	0x0801a3a0
 800cd64:	0801a9a8 	.word	0x0801a9a8

0800cd68 <generate_topic_name>:
 800cd68:	b510      	push	{r4, lr}
 800cd6a:	b082      	sub	sp, #8
 800cd6c:	4614      	mov	r4, r2
 800cd6e:	9000      	str	r0, [sp, #0]
 800cd70:	4b08      	ldr	r3, [pc, #32]	@ (800cd94 <generate_topic_name+0x2c>)
 800cd72:	4a09      	ldr	r2, [pc, #36]	@ (800cd98 <generate_topic_name+0x30>)
 800cd74:	4608      	mov	r0, r1
 800cd76:	4621      	mov	r1, r4
 800cd78:	f00a fdc8 	bl	801790c <sniprintf>
 800cd7c:	2800      	cmp	r0, #0
 800cd7e:	db05      	blt.n	800cd8c <generate_topic_name+0x24>
 800cd80:	4284      	cmp	r4, r0
 800cd82:	bfd4      	ite	le
 800cd84:	2000      	movle	r0, #0
 800cd86:	2001      	movgt	r0, #1
 800cd88:	b002      	add	sp, #8
 800cd8a:	bd10      	pop	{r4, pc}
 800cd8c:	2000      	movs	r0, #0
 800cd8e:	b002      	add	sp, #8
 800cd90:	bd10      	pop	{r4, pc}
 800cd92:	bf00      	nop
 800cd94:	0801a3b8 	.word	0x0801a3b8
 800cd98:	08019e24 	.word	0x08019e24

0800cd9c <is_uxrce_rmw_identifier_valid>:
 800cd9c:	b510      	push	{r4, lr}
 800cd9e:	4604      	mov	r4, r0
 800cda0:	b140      	cbz	r0, 800cdb4 <is_uxrce_rmw_identifier_valid+0x18>
 800cda2:	f006 f857 	bl	8012e54 <rmw_get_implementation_identifier>
 800cda6:	4601      	mov	r1, r0
 800cda8:	4620      	mov	r0, r4
 800cdaa:	f7f3 fa31 	bl	8000210 <strcmp>
 800cdae:	fab0 f080 	clz	r0, r0
 800cdb2:	0940      	lsrs	r0, r0, #5
 800cdb4:	bd10      	pop	{r4, pc}
 800cdb6:	bf00      	nop

0800cdb8 <get_message_typesupport_handle>:
 800cdb8:	6883      	ldr	r3, [r0, #8]
 800cdba:	4718      	bx	r3

0800cdbc <get_message_typesupport_handle_function>:
 800cdbc:	b510      	push	{r4, lr}
 800cdbe:	4604      	mov	r4, r0
 800cdc0:	6800      	ldr	r0, [r0, #0]
 800cdc2:	f7f3 fa25 	bl	8000210 <strcmp>
 800cdc6:	2800      	cmp	r0, #0
 800cdc8:	bf0c      	ite	eq
 800cdca:	4620      	moveq	r0, r4
 800cdcc:	2000      	movne	r0, #0
 800cdce:	bd10      	pop	{r4, pc}

0800cdd0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>:
 800cdd0:	4b04      	ldr	r3, [pc, #16]	@ (800cde4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 800cdd2:	681a      	ldr	r2, [r3, #0]
 800cdd4:	b10a      	cbz	r2, 800cdda <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0xa>
 800cdd6:	4803      	ldr	r0, [pc, #12]	@ (800cde4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 800cdd8:	4770      	bx	lr
 800cdda:	4a03      	ldr	r2, [pc, #12]	@ (800cde8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x18>)
 800cddc:	4801      	ldr	r0, [pc, #4]	@ (800cde4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 800cdde:	6812      	ldr	r2, [r2, #0]
 800cde0:	601a      	str	r2, [r3, #0]
 800cde2:	4770      	bx	lr
 800cde4:	20000038 	.word	0x20000038
 800cde8:	200000b4 	.word	0x200000b4

0800cdec <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>:
 800cdec:	4a02      	ldr	r2, [pc, #8]	@ (800cdf8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0xc>)
 800cdee:	4b03      	ldr	r3, [pc, #12]	@ (800cdfc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x10>)
 800cdf0:	6812      	ldr	r2, [r2, #0]
 800cdf2:	601a      	str	r2, [r3, #0]
 800cdf4:	4770      	bx	lr
 800cdf6:	bf00      	nop
 800cdf8:	200000b4 	.word	0x200000b4
 800cdfc:	20000038 	.word	0x20000038

0800ce00 <std_msgs__msg__String__rosidl_typesupport_introspection_c__String_init_function>:
 800ce00:	f006 be64 	b.w	8013acc <std_msgs__msg__String__init>

0800ce04 <std_msgs__msg__String__rosidl_typesupport_introspection_c__String_fini_function>:
 800ce04:	f006 be74 	b.w	8013af0 <std_msgs__msg__String__fini>

0800ce08 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String>:
 800ce08:	4b04      	ldr	r3, [pc, #16]	@ (800ce1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 800ce0a:	681a      	ldr	r2, [r3, #0]
 800ce0c:	b10a      	cbz	r2, 800ce12 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0xa>
 800ce0e:	4803      	ldr	r0, [pc, #12]	@ (800ce1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 800ce10:	4770      	bx	lr
 800ce12:	4a03      	ldr	r2, [pc, #12]	@ (800ce20 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x18>)
 800ce14:	4801      	ldr	r0, [pc, #4]	@ (800ce1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 800ce16:	6812      	ldr	r2, [r2, #0]
 800ce18:	601a      	str	r2, [r3, #0]
 800ce1a:	4770      	bx	lr
 800ce1c:	20000080 	.word	0x20000080
 800ce20:	200000b8 	.word	0x200000b8

0800ce24 <_String__max_serialized_size>:
 800ce24:	2000      	movs	r0, #0
 800ce26:	4770      	bx	lr

0800ce28 <_String__cdr_serialize>:
 800ce28:	b1c0      	cbz	r0, 800ce5c <_String__cdr_serialize+0x34>
 800ce2a:	b570      	push	{r4, r5, r6, lr}
 800ce2c:	6806      	ldr	r6, [r0, #0]
 800ce2e:	460d      	mov	r5, r1
 800ce30:	4604      	mov	r4, r0
 800ce32:	b156      	cbz	r6, 800ce4a <_String__cdr_serialize+0x22>
 800ce34:	4630      	mov	r0, r6
 800ce36:	f7f3 fa4b 	bl	80002d0 <strlen>
 800ce3a:	4631      	mov	r1, r6
 800ce3c:	6060      	str	r0, [r4, #4]
 800ce3e:	1c42      	adds	r2, r0, #1
 800ce40:	4628      	mov	r0, r5
 800ce42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ce46:	f000 b917 	b.w	800d078 <ucdr_serialize_sequence_char>
 800ce4a:	4630      	mov	r0, r6
 800ce4c:	6060      	str	r0, [r4, #4]
 800ce4e:	4632      	mov	r2, r6
 800ce50:	4631      	mov	r1, r6
 800ce52:	4628      	mov	r0, r5
 800ce54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ce58:	f000 b90e 	b.w	800d078 <ucdr_serialize_sequence_char>
 800ce5c:	4770      	bx	lr
 800ce5e:	bf00      	nop

0800ce60 <get_serialized_size_std_msgs__msg__String>:
 800ce60:	b510      	push	{r4, lr}
 800ce62:	4604      	mov	r4, r0
 800ce64:	b138      	cbz	r0, 800ce76 <get_serialized_size_std_msgs__msg__String+0x16>
 800ce66:	460b      	mov	r3, r1
 800ce68:	4618      	mov	r0, r3
 800ce6a:	2104      	movs	r1, #4
 800ce6c:	f000 f898 	bl	800cfa0 <ucdr_alignment>
 800ce70:	6863      	ldr	r3, [r4, #4]
 800ce72:	3305      	adds	r3, #5
 800ce74:	4418      	add	r0, r3
 800ce76:	bd10      	pop	{r4, pc}

0800ce78 <_String__cdr_deserialize>:
 800ce78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce7a:	460c      	mov	r4, r1
 800ce7c:	b083      	sub	sp, #12
 800ce7e:	b1a1      	cbz	r1, 800ceaa <_String__cdr_deserialize+0x32>
 800ce80:	688f      	ldr	r7, [r1, #8]
 800ce82:	6809      	ldr	r1, [r1, #0]
 800ce84:	ab01      	add	r3, sp, #4
 800ce86:	463a      	mov	r2, r7
 800ce88:	4606      	mov	r6, r0
 800ce8a:	f000 f907 	bl	800d09c <ucdr_deserialize_sequence_char>
 800ce8e:	9b01      	ldr	r3, [sp, #4]
 800ce90:	4605      	mov	r5, r0
 800ce92:	b920      	cbnz	r0, 800ce9e <_String__cdr_deserialize+0x26>
 800ce94:	429f      	cmp	r7, r3
 800ce96:	d30c      	bcc.n	800ceb2 <_String__cdr_deserialize+0x3a>
 800ce98:	4628      	mov	r0, r5
 800ce9a:	b003      	add	sp, #12
 800ce9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce9e:	b103      	cbz	r3, 800cea2 <_String__cdr_deserialize+0x2a>
 800cea0:	3b01      	subs	r3, #1
 800cea2:	4628      	mov	r0, r5
 800cea4:	6063      	str	r3, [r4, #4]
 800cea6:	b003      	add	sp, #12
 800cea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ceaa:	460d      	mov	r5, r1
 800ceac:	4628      	mov	r0, r5
 800ceae:	b003      	add	sp, #12
 800ceb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ceb2:	2101      	movs	r1, #1
 800ceb4:	75b0      	strb	r0, [r6, #22]
 800ceb6:	7571      	strb	r1, [r6, #21]
 800ceb8:	4630      	mov	r0, r6
 800ceba:	6065      	str	r5, [r4, #4]
 800cebc:	f000 f886 	bl	800cfcc <ucdr_align_to>
 800cec0:	4630      	mov	r0, r6
 800cec2:	9901      	ldr	r1, [sp, #4]
 800cec4:	f000 f8b8 	bl	800d038 <ucdr_advance_buffer>
 800cec8:	4628      	mov	r0, r5
 800ceca:	b003      	add	sp, #12
 800cecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cece:	bf00      	nop

0800ced0 <_String__get_serialized_size>:
 800ced0:	b510      	push	{r4, lr}
 800ced2:	4604      	mov	r4, r0
 800ced4:	b130      	cbz	r0, 800cee4 <_String__get_serialized_size+0x14>
 800ced6:	2104      	movs	r1, #4
 800ced8:	2000      	movs	r0, #0
 800ceda:	f000 f861 	bl	800cfa0 <ucdr_alignment>
 800cede:	6863      	ldr	r3, [r4, #4]
 800cee0:	3305      	adds	r3, #5
 800cee2:	4418      	add	r0, r3
 800cee4:	bd10      	pop	{r4, pc}
 800cee6:	bf00      	nop

0800cee8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__String>:
 800cee8:	4800      	ldr	r0, [pc, #0]	@ (800ceec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__String+0x4>)
 800ceea:	4770      	bx	lr
 800ceec:	2000008c 	.word	0x2000008c

0800cef0 <ucdr_check_buffer_available_for>:
 800cef0:	7d83      	ldrb	r3, [r0, #22]
 800cef2:	b93b      	cbnz	r3, 800cf04 <ucdr_check_buffer_available_for+0x14>
 800cef4:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800cef8:	4419      	add	r1, r3
 800cefa:	4288      	cmp	r0, r1
 800cefc:	bf34      	ite	cc
 800cefe:	2000      	movcc	r0, #0
 800cf00:	2001      	movcs	r0, #1
 800cf02:	4770      	bx	lr
 800cf04:	2000      	movs	r0, #0
 800cf06:	4770      	bx	lr

0800cf08 <ucdr_check_final_buffer_behavior>:
 800cf08:	7d83      	ldrb	r3, [r0, #22]
 800cf0a:	b943      	cbnz	r3, 800cf1e <ucdr_check_final_buffer_behavior+0x16>
 800cf0c:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800cf10:	4291      	cmp	r1, r2
 800cf12:	b510      	push	{r4, lr}
 800cf14:	4604      	mov	r4, r0
 800cf16:	d205      	bcs.n	800cf24 <ucdr_check_final_buffer_behavior+0x1c>
 800cf18:	2301      	movs	r3, #1
 800cf1a:	4618      	mov	r0, r3
 800cf1c:	bd10      	pop	{r4, pc}
 800cf1e:	2300      	movs	r3, #0
 800cf20:	4618      	mov	r0, r3
 800cf22:	4770      	bx	lr
 800cf24:	6982      	ldr	r2, [r0, #24]
 800cf26:	b13a      	cbz	r2, 800cf38 <ucdr_check_final_buffer_behavior+0x30>
 800cf28:	69c1      	ldr	r1, [r0, #28]
 800cf2a:	4790      	blx	r2
 800cf2c:	f080 0301 	eor.w	r3, r0, #1
 800cf30:	b2db      	uxtb	r3, r3
 800cf32:	75a0      	strb	r0, [r4, #22]
 800cf34:	4618      	mov	r0, r3
 800cf36:	bd10      	pop	{r4, pc}
 800cf38:	2001      	movs	r0, #1
 800cf3a:	75a0      	strb	r0, [r4, #22]
 800cf3c:	e7fa      	b.n	800cf34 <ucdr_check_final_buffer_behavior+0x2c>
 800cf3e:	bf00      	nop

0800cf40 <ucdr_set_on_full_buffer_callback>:
 800cf40:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800cf44:	4770      	bx	lr
 800cf46:	bf00      	nop

0800cf48 <ucdr_init_buffer_origin_offset_endian>:
 800cf48:	b410      	push	{r4}
 800cf4a:	9c01      	ldr	r4, [sp, #4]
 800cf4c:	6001      	str	r1, [r0, #0]
 800cf4e:	440a      	add	r2, r1
 800cf50:	6042      	str	r2, [r0, #4]
 800cf52:	190a      	adds	r2, r1, r4
 800cf54:	441c      	add	r4, r3
 800cf56:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800cf5a:	6082      	str	r2, [r0, #8]
 800cf5c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800cf60:	7503      	strb	r3, [r0, #20]
 800cf62:	2200      	movs	r2, #0
 800cf64:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800cf68:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf6c:	7542      	strb	r2, [r0, #21]
 800cf6e:	7582      	strb	r2, [r0, #22]
 800cf70:	4770      	bx	lr
 800cf72:	bf00      	nop

0800cf74 <ucdr_init_buffer_origin_offset>:
 800cf74:	b510      	push	{r4, lr}
 800cf76:	b082      	sub	sp, #8
 800cf78:	9c04      	ldr	r4, [sp, #16]
 800cf7a:	9400      	str	r4, [sp, #0]
 800cf7c:	2401      	movs	r4, #1
 800cf7e:	9401      	str	r4, [sp, #4]
 800cf80:	f7ff ffe2 	bl	800cf48 <ucdr_init_buffer_origin_offset_endian>
 800cf84:	b002      	add	sp, #8
 800cf86:	bd10      	pop	{r4, pc}

0800cf88 <ucdr_init_buffer_origin>:
 800cf88:	b510      	push	{r4, lr}
 800cf8a:	b082      	sub	sp, #8
 800cf8c:	2400      	movs	r4, #0
 800cf8e:	9400      	str	r4, [sp, #0]
 800cf90:	f7ff fff0 	bl	800cf74 <ucdr_init_buffer_origin_offset>
 800cf94:	b002      	add	sp, #8
 800cf96:	bd10      	pop	{r4, pc}

0800cf98 <ucdr_init_buffer>:
 800cf98:	2300      	movs	r3, #0
 800cf9a:	f7ff bff5 	b.w	800cf88 <ucdr_init_buffer_origin>
 800cf9e:	bf00      	nop

0800cfa0 <ucdr_alignment>:
 800cfa0:	fbb0 f3f1 	udiv	r3, r0, r1
 800cfa4:	fb03 0011 	mls	r0, r3, r1, r0
 800cfa8:	1a08      	subs	r0, r1, r0
 800cfaa:	3901      	subs	r1, #1
 800cfac:	4008      	ands	r0, r1
 800cfae:	4770      	bx	lr

0800cfb0 <ucdr_buffer_alignment>:
 800cfb0:	7d43      	ldrb	r3, [r0, #21]
 800cfb2:	428b      	cmp	r3, r1
 800cfb4:	d208      	bcs.n	800cfc8 <ucdr_buffer_alignment+0x18>
 800cfb6:	6900      	ldr	r0, [r0, #16]
 800cfb8:	fbb0 f3f1 	udiv	r3, r0, r1
 800cfbc:	fb01 0013 	mls	r0, r1, r3, r0
 800cfc0:	1a08      	subs	r0, r1, r0
 800cfc2:	3901      	subs	r1, #1
 800cfc4:	4008      	ands	r0, r1
 800cfc6:	4770      	bx	lr
 800cfc8:	2000      	movs	r0, #0
 800cfca:	4770      	bx	lr

0800cfcc <ucdr_align_to>:
 800cfcc:	b538      	push	{r3, r4, r5, lr}
 800cfce:	4604      	mov	r4, r0
 800cfd0:	460d      	mov	r5, r1
 800cfd2:	f7ff ffed 	bl	800cfb0 <ucdr_buffer_alignment>
 800cfd6:	68a3      	ldr	r3, [r4, #8]
 800cfd8:	6921      	ldr	r1, [r4, #16]
 800cfda:	7565      	strb	r5, [r4, #21]
 800cfdc:	181a      	adds	r2, r3, r0
 800cfde:	6863      	ldr	r3, [r4, #4]
 800cfe0:	4293      	cmp	r3, r2
 800cfe2:	4408      	add	r0, r1
 800cfe4:	bf28      	it	cs
 800cfe6:	4613      	movcs	r3, r2
 800cfe8:	6120      	str	r0, [r4, #16]
 800cfea:	60a3      	str	r3, [r4, #8]
 800cfec:	bd38      	pop	{r3, r4, r5, pc}
 800cfee:	bf00      	nop

0800cff0 <ucdr_buffer_length>:
 800cff0:	6882      	ldr	r2, [r0, #8]
 800cff2:	6800      	ldr	r0, [r0, #0]
 800cff4:	1a10      	subs	r0, r2, r0
 800cff6:	4770      	bx	lr

0800cff8 <ucdr_buffer_remaining>:
 800cff8:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800cffc:	1a10      	subs	r0, r2, r0
 800cffe:	4770      	bx	lr

0800d000 <ucdr_check_final_buffer_behavior_array>:
 800d000:	b538      	push	{r3, r4, r5, lr}
 800d002:	7d83      	ldrb	r3, [r0, #22]
 800d004:	b963      	cbnz	r3, 800d020 <ucdr_check_final_buffer_behavior_array+0x20>
 800d006:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800d00a:	429a      	cmp	r2, r3
 800d00c:	4604      	mov	r4, r0
 800d00e:	460d      	mov	r5, r1
 800d010:	d308      	bcc.n	800d024 <ucdr_check_final_buffer_behavior_array+0x24>
 800d012:	b139      	cbz	r1, 800d024 <ucdr_check_final_buffer_behavior_array+0x24>
 800d014:	6983      	ldr	r3, [r0, #24]
 800d016:	b163      	cbz	r3, 800d032 <ucdr_check_final_buffer_behavior_array+0x32>
 800d018:	69c1      	ldr	r1, [r0, #28]
 800d01a:	4798      	blx	r3
 800d01c:	75a0      	strb	r0, [r4, #22]
 800d01e:	b108      	cbz	r0, 800d024 <ucdr_check_final_buffer_behavior_array+0x24>
 800d020:	2000      	movs	r0, #0
 800d022:	bd38      	pop	{r3, r4, r5, pc}
 800d024:	4620      	mov	r0, r4
 800d026:	f7ff ffe7 	bl	800cff8 <ucdr_buffer_remaining>
 800d02a:	42a8      	cmp	r0, r5
 800d02c:	bf28      	it	cs
 800d02e:	4628      	movcs	r0, r5
 800d030:	bd38      	pop	{r3, r4, r5, pc}
 800d032:	2301      	movs	r3, #1
 800d034:	7583      	strb	r3, [r0, #22]
 800d036:	e7f3      	b.n	800d020 <ucdr_check_final_buffer_behavior_array+0x20>

0800d038 <ucdr_advance_buffer>:
 800d038:	b538      	push	{r3, r4, r5, lr}
 800d03a:	4604      	mov	r4, r0
 800d03c:	460d      	mov	r5, r1
 800d03e:	f7ff ff57 	bl	800cef0 <ucdr_check_buffer_available_for>
 800d042:	b178      	cbz	r0, 800d064 <ucdr_advance_buffer+0x2c>
 800d044:	6923      	ldr	r3, [r4, #16]
 800d046:	68a2      	ldr	r2, [r4, #8]
 800d048:	442b      	add	r3, r5
 800d04a:	6123      	str	r3, [r4, #16]
 800d04c:	2301      	movs	r3, #1
 800d04e:	442a      	add	r2, r5
 800d050:	7563      	strb	r3, [r4, #21]
 800d052:	60a2      	str	r2, [r4, #8]
 800d054:	bd38      	pop	{r3, r4, r5, pc}
 800d056:	68a2      	ldr	r2, [r4, #8]
 800d058:	6923      	ldr	r3, [r4, #16]
 800d05a:	4402      	add	r2, r0
 800d05c:	4403      	add	r3, r0
 800d05e:	1a2d      	subs	r5, r5, r0
 800d060:	60a2      	str	r2, [r4, #8]
 800d062:	6123      	str	r3, [r4, #16]
 800d064:	4629      	mov	r1, r5
 800d066:	2201      	movs	r2, #1
 800d068:	4620      	mov	r0, r4
 800d06a:	f7ff ffc9 	bl	800d000 <ucdr_check_final_buffer_behavior_array>
 800d06e:	2800      	cmp	r0, #0
 800d070:	d1f1      	bne.n	800d056 <ucdr_advance_buffer+0x1e>
 800d072:	2301      	movs	r3, #1
 800d074:	7563      	strb	r3, [r4, #21]
 800d076:	bd38      	pop	{r3, r4, r5, pc}

0800d078 <ucdr_serialize_sequence_char>:
 800d078:	b570      	push	{r4, r5, r6, lr}
 800d07a:	4615      	mov	r5, r2
 800d07c:	460e      	mov	r6, r1
 800d07e:	7d01      	ldrb	r1, [r0, #20]
 800d080:	4604      	mov	r4, r0
 800d082:	f007 f941 	bl	8014308 <ucdr_serialize_endian_uint32_t>
 800d086:	b90d      	cbnz	r5, 800d08c <ucdr_serialize_sequence_char+0x14>
 800d088:	2001      	movs	r0, #1
 800d08a:	bd70      	pop	{r4, r5, r6, pc}
 800d08c:	7d21      	ldrb	r1, [r4, #20]
 800d08e:	462b      	mov	r3, r5
 800d090:	4632      	mov	r2, r6
 800d092:	4620      	mov	r0, r4
 800d094:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d098:	f006 bd2e 	b.w	8013af8 <ucdr_serialize_endian_array_char>

0800d09c <ucdr_deserialize_sequence_char>:
 800d09c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0a0:	461d      	mov	r5, r3
 800d0a2:	4616      	mov	r6, r2
 800d0a4:	460f      	mov	r7, r1
 800d0a6:	461a      	mov	r2, r3
 800d0a8:	7d01      	ldrb	r1, [r0, #20]
 800d0aa:	4604      	mov	r4, r0
 800d0ac:	f007 fa54 	bl	8014558 <ucdr_deserialize_endian_uint32_t>
 800d0b0:	682b      	ldr	r3, [r5, #0]
 800d0b2:	429e      	cmp	r6, r3
 800d0b4:	bf3c      	itt	cc
 800d0b6:	2201      	movcc	r2, #1
 800d0b8:	75a2      	strbcc	r2, [r4, #22]
 800d0ba:	b913      	cbnz	r3, 800d0c2 <ucdr_deserialize_sequence_char+0x26>
 800d0bc:	2001      	movs	r0, #1
 800d0be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0c2:	7d21      	ldrb	r1, [r4, #20]
 800d0c4:	463a      	mov	r2, r7
 800d0c6:	4620      	mov	r0, r4
 800d0c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d0cc:	f006 bd46 	b.w	8013b5c <ucdr_deserialize_endian_array_char>

0800d0d0 <ucdr_serialize_sequence_uint8_t>:
 800d0d0:	b570      	push	{r4, r5, r6, lr}
 800d0d2:	4615      	mov	r5, r2
 800d0d4:	460e      	mov	r6, r1
 800d0d6:	7d01      	ldrb	r1, [r0, #20]
 800d0d8:	4604      	mov	r4, r0
 800d0da:	f007 f915 	bl	8014308 <ucdr_serialize_endian_uint32_t>
 800d0de:	b90d      	cbnz	r5, 800d0e4 <ucdr_serialize_sequence_uint8_t+0x14>
 800d0e0:	2001      	movs	r0, #1
 800d0e2:	bd70      	pop	{r4, r5, r6, pc}
 800d0e4:	7d21      	ldrb	r1, [r4, #20]
 800d0e6:	462b      	mov	r3, r5
 800d0e8:	4632      	mov	r2, r6
 800d0ea:	4620      	mov	r0, r4
 800d0ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d0f0:	f006 bd98 	b.w	8013c24 <ucdr_serialize_endian_array_uint8_t>

0800d0f4 <ucdr_deserialize_sequence_uint8_t>:
 800d0f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0f8:	461d      	mov	r5, r3
 800d0fa:	4616      	mov	r6, r2
 800d0fc:	460f      	mov	r7, r1
 800d0fe:	461a      	mov	r2, r3
 800d100:	7d01      	ldrb	r1, [r0, #20]
 800d102:	4604      	mov	r4, r0
 800d104:	f007 fa28 	bl	8014558 <ucdr_deserialize_endian_uint32_t>
 800d108:	682b      	ldr	r3, [r5, #0]
 800d10a:	429e      	cmp	r6, r3
 800d10c:	bf3c      	itt	cc
 800d10e:	2201      	movcc	r2, #1
 800d110:	75a2      	strbcc	r2, [r4, #22]
 800d112:	b913      	cbnz	r3, 800d11a <ucdr_deserialize_sequence_uint8_t+0x26>
 800d114:	2001      	movs	r0, #1
 800d116:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d11a:	7d21      	ldrb	r1, [r4, #20]
 800d11c:	463a      	mov	r2, r7
 800d11e:	4620      	mov	r0, r4
 800d120:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d124:	f006 bde2 	b.w	8013cec <ucdr_deserialize_endian_array_uint8_t>

0800d128 <uxr_buffer_delete_entity>:
 800d128:	b510      	push	{r4, lr}
 800d12a:	2300      	movs	r3, #0
 800d12c:	b08e      	sub	sp, #56	@ 0x38
 800d12e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800d132:	2303      	movs	r3, #3
 800d134:	9300      	str	r3, [sp, #0]
 800d136:	2204      	movs	r2, #4
 800d138:	ab06      	add	r3, sp, #24
 800d13a:	4604      	mov	r4, r0
 800d13c:	9103      	str	r1, [sp, #12]
 800d13e:	f001 fa81 	bl	800e644 <uxr_prepare_stream_to_write_submessage>
 800d142:	b918      	cbnz	r0, 800d14c <uxr_buffer_delete_entity+0x24>
 800d144:	4604      	mov	r4, r0
 800d146:	4620      	mov	r0, r4
 800d148:	b00e      	add	sp, #56	@ 0x38
 800d14a:	bd10      	pop	{r4, pc}
 800d14c:	9902      	ldr	r1, [sp, #8]
 800d14e:	aa05      	add	r2, sp, #20
 800d150:	4620      	mov	r0, r4
 800d152:	f001 fbad 	bl	800e8b0 <uxr_init_base_object_request>
 800d156:	a905      	add	r1, sp, #20
 800d158:	4604      	mov	r4, r0
 800d15a:	a806      	add	r0, sp, #24
 800d15c:	f002 fdfe 	bl	800fd5c <uxr_serialize_DELETE_Payload>
 800d160:	4620      	mov	r0, r4
 800d162:	b00e      	add	sp, #56	@ 0x38
 800d164:	bd10      	pop	{r4, pc}
 800d166:	bf00      	nop

0800d168 <uxr_common_create_entity>:
 800d168:	b510      	push	{r4, lr}
 800d16a:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800d16e:	b08c      	sub	sp, #48	@ 0x30
 800d170:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800d174:	f1bc 0f01 	cmp.w	ip, #1
 800d178:	bf0c      	ite	eq
 800d17a:	f003 0201 	andeq.w	r2, r3, #1
 800d17e:	2200      	movne	r2, #0
 800d180:	330e      	adds	r3, #14
 800d182:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800d186:	9101      	str	r1, [sp, #4]
 800d188:	441a      	add	r2, r3
 800d18a:	2301      	movs	r3, #1
 800d18c:	9300      	str	r3, [sp, #0]
 800d18e:	9903      	ldr	r1, [sp, #12]
 800d190:	ab04      	add	r3, sp, #16
 800d192:	b292      	uxth	r2, r2
 800d194:	4604      	mov	r4, r0
 800d196:	f001 fa55 	bl	800e644 <uxr_prepare_stream_to_write_submessage>
 800d19a:	b918      	cbnz	r0, 800d1a4 <uxr_common_create_entity+0x3c>
 800d19c:	4604      	mov	r4, r0
 800d19e:	4620      	mov	r0, r4
 800d1a0:	b00c      	add	sp, #48	@ 0x30
 800d1a2:	bd10      	pop	{r4, pc}
 800d1a4:	9902      	ldr	r1, [sp, #8]
 800d1a6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d1a8:	4620      	mov	r0, r4
 800d1aa:	f001 fb81 	bl	800e8b0 <uxr_init_base_object_request>
 800d1ae:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d1b0:	4604      	mov	r4, r0
 800d1b2:	a804      	add	r0, sp, #16
 800d1b4:	f002 fd2e 	bl	800fc14 <uxr_serialize_CREATE_Payload>
 800d1b8:	4620      	mov	r0, r4
 800d1ba:	b00c      	add	sp, #48	@ 0x30
 800d1bc:	bd10      	pop	{r4, pc}
 800d1be:	bf00      	nop

0800d1c0 <uxr_buffer_create_participant_bin>:
 800d1c0:	b570      	push	{r4, r5, r6, lr}
 800d1c2:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800d1c6:	ac11      	add	r4, sp, #68	@ 0x44
 800d1c8:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 800d1cc:	2303      	movs	r3, #3
 800d1ce:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800d1d2:	7223      	strb	r3, [r4, #8]
 800d1d4:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 800d1d6:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 800d1da:	2201      	movs	r2, #1
 800d1dc:	2100      	movs	r1, #0
 800d1de:	4605      	mov	r5, r0
 800d1e0:	7122      	strb	r2, [r4, #4]
 800d1e2:	f88d 1014 	strb.w	r1, [sp, #20]
 800d1e6:	b1cb      	cbz	r3, 800d21c <uxr_buffer_create_participant_bin+0x5c>
 800d1e8:	f88d 201c 	strb.w	r2, [sp, #28]
 800d1ec:	9308      	str	r3, [sp, #32]
 800d1ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d1f2:	a915      	add	r1, sp, #84	@ 0x54
 800d1f4:	a809      	add	r0, sp, #36	@ 0x24
 800d1f6:	f7ff fecf 	bl	800cf98 <ucdr_init_buffer>
 800d1fa:	a905      	add	r1, sp, #20
 800d1fc:	a809      	add	r0, sp, #36	@ 0x24
 800d1fe:	f002 f8eb 	bl	800f3d8 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800d202:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d204:	9600      	str	r6, [sp, #0]
 800d206:	9401      	str	r4, [sp, #4]
 800d208:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800d20c:	60e3      	str	r3, [r4, #12]
 800d20e:	4628      	mov	r0, r5
 800d210:	b29b      	uxth	r3, r3
 800d212:	f7ff ffa9 	bl	800d168 <uxr_common_create_entity>
 800d216:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 800d21a:	bd70      	pop	{r4, r5, r6, pc}
 800d21c:	f88d 301c 	strb.w	r3, [sp, #28]
 800d220:	e7e5      	b.n	800d1ee <uxr_buffer_create_participant_bin+0x2e>
 800d222:	bf00      	nop

0800d224 <uxr_buffer_create_topic_bin>:
 800d224:	b570      	push	{r4, r5, r6, lr}
 800d226:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 800d22a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800d22e:	9105      	str	r1, [sp, #20]
 800d230:	4605      	mov	r5, r0
 800d232:	a997      	add	r1, sp, #604	@ 0x25c
 800d234:	4618      	mov	r0, r3
 800d236:	2302      	movs	r3, #2
 800d238:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 800d23c:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 800d240:	f000 f996 	bl	800d570 <uxr_object_id_to_raw>
 800d244:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 800d246:	9306      	str	r3, [sp, #24]
 800d248:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 800d24a:	930a      	str	r3, [sp, #40]	@ 0x28
 800d24c:	2303      	movs	r3, #3
 800d24e:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800d252:	2301      	movs	r3, #1
 800d254:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d258:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800d25c:	a917      	add	r1, sp, #92	@ 0x5c
 800d25e:	2300      	movs	r3, #0
 800d260:	a80b      	add	r0, sp, #44	@ 0x2c
 800d262:	f88d 301c 	strb.w	r3, [sp, #28]
 800d266:	f7ff fe97 	bl	800cf98 <ucdr_init_buffer>
 800d26a:	a906      	add	r1, sp, #24
 800d26c:	a80b      	add	r0, sp, #44	@ 0x2c
 800d26e:	f002 f8d5 	bl	800f41c <uxr_serialize_OBJK_Topic_Binary>
 800d272:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d274:	9316      	str	r3, [sp, #88]	@ 0x58
 800d276:	ac13      	add	r4, sp, #76	@ 0x4c
 800d278:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800d27c:	9600      	str	r6, [sp, #0]
 800d27e:	9401      	str	r4, [sp, #4]
 800d280:	b29b      	uxth	r3, r3
 800d282:	4628      	mov	r0, r5
 800d284:	f7ff ff70 	bl	800d168 <uxr_common_create_entity>
 800d288:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 800d28c:	bd70      	pop	{r4, r5, r6, pc}
 800d28e:	bf00      	nop

0800d290 <uxr_buffer_create_publisher_bin>:
 800d290:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d292:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 800d296:	4605      	mov	r5, r0
 800d298:	9105      	str	r1, [sp, #20]
 800d29a:	4618      	mov	r0, r3
 800d29c:	2603      	movs	r6, #3
 800d29e:	a992      	add	r1, sp, #584	@ 0x248
 800d2a0:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800d2a4:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 800d2a8:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 800d2ac:	f000 f960 	bl	800d570 <uxr_object_id_to_raw>
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d2b6:	a912      	add	r1, sp, #72	@ 0x48
 800d2b8:	a806      	add	r0, sp, #24
 800d2ba:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800d2be:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800d2c2:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 800d2c6:	f7ff fe67 	bl	800cf98 <ucdr_init_buffer>
 800d2ca:	a993      	add	r1, sp, #588	@ 0x24c
 800d2cc:	a806      	add	r0, sp, #24
 800d2ce:	f002 f959 	bl	800f584 <uxr_serialize_OBJK_Publisher_Binary>
 800d2d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d2d4:	9311      	str	r3, [sp, #68]	@ 0x44
 800d2d6:	ac0e      	add	r4, sp, #56	@ 0x38
 800d2d8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800d2dc:	9700      	str	r7, [sp, #0]
 800d2de:	9401      	str	r4, [sp, #4]
 800d2e0:	b29b      	uxth	r3, r3
 800d2e2:	4628      	mov	r0, r5
 800d2e4:	f7ff ff40 	bl	800d168 <uxr_common_create_entity>
 800d2e8:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 800d2ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2ee:	bf00      	nop

0800d2f0 <uxr_buffer_create_subscriber_bin>:
 800d2f0:	b570      	push	{r4, r5, r6, lr}
 800d2f2:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 800d2f6:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800d2fa:	9105      	str	r1, [sp, #20]
 800d2fc:	4605      	mov	r5, r0
 800d2fe:	a992      	add	r1, sp, #584	@ 0x248
 800d300:	4618      	mov	r0, r3
 800d302:	2304      	movs	r3, #4
 800d304:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 800d308:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 800d30c:	f000 f930 	bl	800d570 <uxr_object_id_to_raw>
 800d310:	2300      	movs	r3, #0
 800d312:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d316:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800d31a:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800d31e:	a912      	add	r1, sp, #72	@ 0x48
 800d320:	2303      	movs	r3, #3
 800d322:	a806      	add	r0, sp, #24
 800d324:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 800d328:	f7ff fe36 	bl	800cf98 <ucdr_init_buffer>
 800d32c:	a993      	add	r1, sp, #588	@ 0x24c
 800d32e:	a806      	add	r0, sp, #24
 800d330:	f002 f9d8 	bl	800f6e4 <uxr_serialize_OBJK_Subscriber_Binary>
 800d334:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d336:	9311      	str	r3, [sp, #68]	@ 0x44
 800d338:	ac0e      	add	r4, sp, #56	@ 0x38
 800d33a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800d33e:	9600      	str	r6, [sp, #0]
 800d340:	9401      	str	r4, [sp, #4]
 800d342:	b29b      	uxth	r3, r3
 800d344:	4628      	mov	r0, r5
 800d346:	f7ff ff0f 	bl	800d168 <uxr_common_create_entity>
 800d34a:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 800d34e:	bd70      	pop	{r4, r5, r6, pc}

0800d350 <uxr_buffer_create_datawriter_bin>:
 800d350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d354:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800d358:	ac1d      	add	r4, sp, #116	@ 0x74
 800d35a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800d35e:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 800d362:	9105      	str	r1, [sp, #20]
 800d364:	4606      	mov	r6, r0
 800d366:	a9a1      	add	r1, sp, #644	@ 0x284
 800d368:	4618      	mov	r0, r3
 800d36a:	2305      	movs	r3, #5
 800d36c:	7123      	strb	r3, [r4, #4]
 800d36e:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 800d372:	2703      	movs	r7, #3
 800d374:	f000 f8fc 	bl	800d570 <uxr_object_id_to_raw>
 800d378:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 800d37a:	7227      	strb	r7, [r4, #8]
 800d37c:	a90e      	add	r1, sp, #56	@ 0x38
 800d37e:	f000 f8f7 	bl	800d570 <uxr_object_id_to_raw>
 800d382:	2300      	movs	r3, #0
 800d384:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800d388:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 800d38c:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800d390:	3d00      	subs	r5, #0
 800d392:	bf18      	it	ne
 800d394:	2501      	movne	r5, #1
 800d396:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800d39a:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800d39e:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800d3a2:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800d3a6:	2301      	movs	r3, #1
 800d3a8:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800d3ac:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800d3b0:	bb8a      	cbnz	r2, 800d416 <uxr_buffer_create_datawriter_bin+0xc6>
 800d3b2:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800d3b6:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800d3ba:	f04f 0c13 	mov.w	ip, #19
 800d3be:	250b      	movs	r5, #11
 800d3c0:	2221      	movs	r2, #33	@ 0x21
 800d3c2:	2111      	movs	r1, #17
 800d3c4:	2009      	movs	r0, #9
 800d3c6:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 800d3ca:	b923      	cbnz	r3, 800d3d6 <uxr_buffer_create_datawriter_bin+0x86>
 800d3cc:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800d3d0:	4672      	mov	r2, lr
 800d3d2:	4661      	mov	r1, ip
 800d3d4:	4628      	mov	r0, r5
 800d3d6:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 800d3da:	2b01      	cmp	r3, #1
 800d3dc:	d025      	beq.n	800d42a <uxr_buffer_create_datawriter_bin+0xda>
 800d3de:	2b03      	cmp	r3, #3
 800d3e0:	d029      	beq.n	800d436 <uxr_buffer_create_datawriter_bin+0xe6>
 800d3e2:	b32b      	cbz	r3, 800d430 <uxr_buffer_create_datawriter_bin+0xe0>
 800d3e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d3e8:	a921      	add	r1, sp, #132	@ 0x84
 800d3ea:	a806      	add	r0, sp, #24
 800d3ec:	f7ff fdd4 	bl	800cf98 <ucdr_init_buffer>
 800d3f0:	a90e      	add	r1, sp, #56	@ 0x38
 800d3f2:	a806      	add	r0, sp, #24
 800d3f4:	f002 fa28 	bl	800f848 <uxr_serialize_OBJK_DataWriter_Binary>
 800d3f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d3fa:	f8cd 8000 	str.w	r8, [sp]
 800d3fe:	9401      	str	r4, [sp, #4]
 800d400:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800d404:	60e3      	str	r3, [r4, #12]
 800d406:	4630      	mov	r0, r6
 800d408:	b29b      	uxth	r3, r3
 800d40a:	f7ff fead 	bl	800d168 <uxr_common_create_entity>
 800d40e:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800d412:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d416:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800d41a:	f04f 0c12 	mov.w	ip, #18
 800d41e:	250a      	movs	r5, #10
 800d420:	2220      	movs	r2, #32
 800d422:	2110      	movs	r1, #16
 800d424:	2008      	movs	r0, #8
 800d426:	2702      	movs	r7, #2
 800d428:	e7cd      	b.n	800d3c6 <uxr_buffer_create_datawriter_bin+0x76>
 800d42a:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800d42e:	e7d9      	b.n	800d3e4 <uxr_buffer_create_datawriter_bin+0x94>
 800d430:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800d434:	e7d6      	b.n	800d3e4 <uxr_buffer_create_datawriter_bin+0x94>
 800d436:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800d43a:	e7d3      	b.n	800d3e4 <uxr_buffer_create_datawriter_bin+0x94>

0800d43c <uxr_buffer_create_datareader_bin>:
 800d43c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d440:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800d444:	ac1f      	add	r4, sp, #124	@ 0x7c
 800d446:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800d44a:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 800d44e:	9105      	str	r1, [sp, #20]
 800d450:	4606      	mov	r6, r0
 800d452:	a9a3      	add	r1, sp, #652	@ 0x28c
 800d454:	4618      	mov	r0, r3
 800d456:	2306      	movs	r3, #6
 800d458:	7123      	strb	r3, [r4, #4]
 800d45a:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 800d45e:	2703      	movs	r7, #3
 800d460:	f000 f886 	bl	800d570 <uxr_object_id_to_raw>
 800d464:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 800d466:	7227      	strb	r7, [r4, #8]
 800d468:	a90e      	add	r1, sp, #56	@ 0x38
 800d46a:	f000 f881 	bl	800d570 <uxr_object_id_to_raw>
 800d46e:	2300      	movs	r3, #0
 800d470:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800d474:	f89d 22ad 	ldrb.w	r2, [sp, #685]	@ 0x2ad
 800d478:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 800d47c:	3d00      	subs	r5, #0
 800d47e:	bf18      	it	ne
 800d480:	2501      	movne	r5, #1
 800d482:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800d486:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800d48a:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800d48e:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800d492:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800d496:	2301      	movs	r3, #1
 800d498:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800d49c:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800d4a0:	bb8a      	cbnz	r2, 800d506 <uxr_buffer_create_datareader_bin+0xca>
 800d4a2:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800d4a6:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800d4aa:	f04f 0c13 	mov.w	ip, #19
 800d4ae:	250b      	movs	r5, #11
 800d4b0:	2221      	movs	r2, #33	@ 0x21
 800d4b2:	2111      	movs	r1, #17
 800d4b4:	2009      	movs	r0, #9
 800d4b6:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 800d4ba:	b923      	cbnz	r3, 800d4c6 <uxr_buffer_create_datareader_bin+0x8a>
 800d4bc:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800d4c0:	4672      	mov	r2, lr
 800d4c2:	4661      	mov	r1, ip
 800d4c4:	4628      	mov	r0, r5
 800d4c6:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 800d4ca:	2b01      	cmp	r3, #1
 800d4cc:	d025      	beq.n	800d51a <uxr_buffer_create_datareader_bin+0xde>
 800d4ce:	2b03      	cmp	r3, #3
 800d4d0:	d029      	beq.n	800d526 <uxr_buffer_create_datareader_bin+0xea>
 800d4d2:	b32b      	cbz	r3, 800d520 <uxr_buffer_create_datareader_bin+0xe4>
 800d4d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d4d8:	a923      	add	r1, sp, #140	@ 0x8c
 800d4da:	a806      	add	r0, sp, #24
 800d4dc:	f7ff fd5c 	bl	800cf98 <ucdr_init_buffer>
 800d4e0:	a90e      	add	r1, sp, #56	@ 0x38
 800d4e2:	a806      	add	r0, sp, #24
 800d4e4:	f002 f974 	bl	800f7d0 <uxr_serialize_OBJK_DataReader_Binary>
 800d4e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d4ea:	f8cd 8000 	str.w	r8, [sp]
 800d4ee:	9401      	str	r4, [sp, #4]
 800d4f0:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800d4f4:	60e3      	str	r3, [r4, #12]
 800d4f6:	4630      	mov	r0, r6
 800d4f8:	b29b      	uxth	r3, r3
 800d4fa:	f7ff fe35 	bl	800d168 <uxr_common_create_entity>
 800d4fe:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800d502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d506:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800d50a:	f04f 0c12 	mov.w	ip, #18
 800d50e:	250a      	movs	r5, #10
 800d510:	2220      	movs	r2, #32
 800d512:	2110      	movs	r1, #16
 800d514:	2008      	movs	r0, #8
 800d516:	2702      	movs	r7, #2
 800d518:	e7cd      	b.n	800d4b6 <uxr_buffer_create_datareader_bin+0x7a>
 800d51a:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800d51e:	e7d9      	b.n	800d4d4 <uxr_buffer_create_datareader_bin+0x98>
 800d520:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800d524:	e7d6      	b.n	800d4d4 <uxr_buffer_create_datareader_bin+0x98>
 800d526:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800d52a:	e7d3      	b.n	800d4d4 <uxr_buffer_create_datareader_bin+0x98>

0800d52c <uxr_object_id>:
 800d52c:	b082      	sub	sp, #8
 800d52e:	2300      	movs	r3, #0
 800d530:	f88d 1006 	strb.w	r1, [sp, #6]
 800d534:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d538:	f360 030f 	bfi	r3, r0, #0, #16
 800d53c:	f362 431f 	bfi	r3, r2, #16, #16
 800d540:	4618      	mov	r0, r3
 800d542:	b002      	add	sp, #8
 800d544:	4770      	bx	lr
 800d546:	bf00      	nop

0800d548 <uxr_object_id_from_raw>:
 800d548:	7843      	ldrb	r3, [r0, #1]
 800d54a:	7801      	ldrb	r1, [r0, #0]
 800d54c:	b082      	sub	sp, #8
 800d54e:	f003 020f 	and.w	r2, r3, #15
 800d552:	f88d 2006 	strb.w	r2, [sp, #6]
 800d556:	091b      	lsrs	r3, r3, #4
 800d558:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d55c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800d560:	2000      	movs	r0, #0
 800d562:	f363 000f 	bfi	r0, r3, #0, #16
 800d566:	f362 401f 	bfi	r0, r2, #16, #16
 800d56a:	b002      	add	sp, #8
 800d56c:	4770      	bx	lr
 800d56e:	bf00      	nop

0800d570 <uxr_object_id_to_raw>:
 800d570:	4602      	mov	r2, r0
 800d572:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800d576:	b082      	sub	sp, #8
 800d578:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800d57c:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800d580:	f881 c000 	strb.w	ip, [r1]
 800d584:	7048      	strb	r0, [r1, #1]
 800d586:	b002      	add	sp, #8
 800d588:	4770      	bx	lr
 800d58a:	bf00      	nop

0800d58c <uxr_buffer_request_data>:
 800d58c:	b530      	push	{r4, r5, lr}
 800d58e:	b095      	sub	sp, #84	@ 0x54
 800d590:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800d594:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 800d596:	9303      	str	r3, [sp, #12]
 800d598:	2200      	movs	r2, #0
 800d59a:	2d00      	cmp	r5, #0
 800d59c:	bf14      	ite	ne
 800d59e:	2101      	movne	r1, #1
 800d5a0:	4611      	moveq	r1, r2
 800d5a2:	4604      	mov	r4, r0
 800d5a4:	f88d 301c 	strb.w	r3, [sp, #28]
 800d5a8:	f88d 201d 	strb.w	r2, [sp, #29]
 800d5ac:	f88d 201e 	strb.w	r2, [sp, #30]
 800d5b0:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 800d5b4:	d021      	beq.n	800d5fa <uxr_buffer_request_data+0x6e>
 800d5b6:	682a      	ldr	r2, [r5, #0]
 800d5b8:	686b      	ldr	r3, [r5, #4]
 800d5ba:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 800d5be:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 800d5c2:	2210      	movs	r2, #16
 800d5c4:	2308      	movs	r3, #8
 800d5c6:	2100      	movs	r1, #0
 800d5c8:	e9cd 3100 	strd	r3, r1, [sp]
 800d5cc:	4620      	mov	r0, r4
 800d5ce:	9905      	ldr	r1, [sp, #20]
 800d5d0:	ab0c      	add	r3, sp, #48	@ 0x30
 800d5d2:	f001 f837 	bl	800e644 <uxr_prepare_stream_to_write_submessage>
 800d5d6:	b918      	cbnz	r0, 800d5e0 <uxr_buffer_request_data+0x54>
 800d5d8:	4604      	mov	r4, r0
 800d5da:	4620      	mov	r0, r4
 800d5dc:	b015      	add	sp, #84	@ 0x54
 800d5de:	bd30      	pop	{r4, r5, pc}
 800d5e0:	9904      	ldr	r1, [sp, #16]
 800d5e2:	aa06      	add	r2, sp, #24
 800d5e4:	4620      	mov	r0, r4
 800d5e6:	f001 f963 	bl	800e8b0 <uxr_init_base_object_request>
 800d5ea:	a906      	add	r1, sp, #24
 800d5ec:	4604      	mov	r4, r0
 800d5ee:	a80c      	add	r0, sp, #48	@ 0x30
 800d5f0:	f002 fc5e 	bl	800feb0 <uxr_serialize_READ_DATA_Payload>
 800d5f4:	4620      	mov	r0, r4
 800d5f6:	b015      	add	sp, #84	@ 0x54
 800d5f8:	bd30      	pop	{r4, r5, pc}
 800d5fa:	2208      	movs	r2, #8
 800d5fc:	e7e2      	b.n	800d5c4 <uxr_buffer_request_data+0x38>
 800d5fe:	bf00      	nop

0800d600 <uxr_buffer_cancel_data>:
 800d600:	b510      	push	{r4, lr}
 800d602:	b094      	sub	sp, #80	@ 0x50
 800d604:	2300      	movs	r3, #0
 800d606:	9202      	str	r2, [sp, #8]
 800d608:	9205      	str	r2, [sp, #20]
 800d60a:	9301      	str	r3, [sp, #4]
 800d60c:	2201      	movs	r2, #1
 800d60e:	f8ad 301c 	strh.w	r3, [sp, #28]
 800d612:	f88d 301e 	strb.w	r3, [sp, #30]
 800d616:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 800d61a:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 800d61e:	2308      	movs	r3, #8
 800d620:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 800d624:	9300      	str	r3, [sp, #0]
 800d626:	2210      	movs	r2, #16
 800d628:	ab0c      	add	r3, sp, #48	@ 0x30
 800d62a:	4604      	mov	r4, r0
 800d62c:	9103      	str	r1, [sp, #12]
 800d62e:	f001 f809 	bl	800e644 <uxr_prepare_stream_to_write_submessage>
 800d632:	b918      	cbnz	r0, 800d63c <uxr_buffer_cancel_data+0x3c>
 800d634:	4604      	mov	r4, r0
 800d636:	4620      	mov	r0, r4
 800d638:	b014      	add	sp, #80	@ 0x50
 800d63a:	bd10      	pop	{r4, pc}
 800d63c:	9905      	ldr	r1, [sp, #20]
 800d63e:	aa06      	add	r2, sp, #24
 800d640:	4620      	mov	r0, r4
 800d642:	f001 f935 	bl	800e8b0 <uxr_init_base_object_request>
 800d646:	a906      	add	r1, sp, #24
 800d648:	4604      	mov	r4, r0
 800d64a:	a80c      	add	r0, sp, #48	@ 0x30
 800d64c:	f002 fc30 	bl	800feb0 <uxr_serialize_READ_DATA_Payload>
 800d650:	4620      	mov	r0, r4
 800d652:	b014      	add	sp, #80	@ 0x50
 800d654:	bd10      	pop	{r4, pc}
 800d656:	bf00      	nop

0800d658 <read_submessage_format>:
 800d658:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d65c:	b095      	sub	sp, #84	@ 0x54
 800d65e:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 800d662:	b113      	cbz	r3, 800d66a <read_submessage_format+0x12>
 800d664:	b015      	add	sp, #84	@ 0x54
 800d666:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d66a:	460c      	mov	r4, r1
 800d66c:	4615      	mov	r5, r2
 800d66e:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800d672:	4607      	mov	r7, r0
 800d674:	981c      	ldr	r0, [sp, #112]	@ 0x70
 800d676:	9004      	str	r0, [sp, #16]
 800d678:	981d      	ldr	r0, [sp, #116]	@ 0x74
 800d67a:	9005      	str	r0, [sp, #20]
 800d67c:	1a52      	subs	r2, r2, r1
 800d67e:	a80c      	add	r0, sp, #48	@ 0x30
 800d680:	4699      	mov	r9, r3
 800d682:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 800d686:	f7ff fc87 	bl	800cf98 <ucdr_init_buffer>
 800d68a:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800d68e:	a80c      	add	r0, sp, #48	@ 0x30
 800d690:	f7ff fc56 	bl	800cf40 <ucdr_set_on_full_buffer_callback>
 800d694:	69e2      	ldr	r2, [r4, #28]
 800d696:	b19a      	cbz	r2, 800d6c0 <read_submessage_format+0x68>
 800d698:	f1b8 0f07 	cmp.w	r8, #7
 800d69c:	f882 9014 	strb.w	r9, [r2, #20]
 800d6a0:	d040      	beq.n	800d724 <read_submessage_format+0xcc>
 800d6a2:	f1b8 0f08 	cmp.w	r8, #8
 800d6a6:	d02e      	beq.n	800d706 <read_submessage_format+0xae>
 800d6a8:	f1b8 0f06 	cmp.w	r8, #6
 800d6ac:	d011      	beq.n	800d6d2 <read_submessage_format+0x7a>
 800d6ae:	2301      	movs	r3, #1
 800d6b0:	7513      	strb	r3, [r2, #20]
 800d6b2:	4629      	mov	r1, r5
 800d6b4:	4620      	mov	r0, r4
 800d6b6:	f7ff fcbf 	bl	800d038 <ucdr_advance_buffer>
 800d6ba:	b015      	add	sp, #84	@ 0x54
 800d6bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d6c0:	f1b8 0f07 	cmp.w	r8, #7
 800d6c4:	d02e      	beq.n	800d724 <read_submessage_format+0xcc>
 800d6c6:	f1b8 0f08 	cmp.w	r8, #8
 800d6ca:	d01c      	beq.n	800d706 <read_submessage_format+0xae>
 800d6cc:	f1b8 0f06 	cmp.w	r8, #6
 800d6d0:	d1ef      	bne.n	800d6b2 <read_submessage_format+0x5a>
 800d6d2:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 800d6d6:	f1b8 0f00 	cmp.w	r8, #0
 800d6da:	d011      	beq.n	800d700 <read_submessage_format+0xa8>
 800d6dc:	ab0c      	add	r3, sp, #48	@ 0x30
 800d6de:	e9cd 3500 	strd	r3, r5, [sp]
 800d6e2:	2306      	movs	r3, #6
 800d6e4:	f88d 3016 	strb.w	r3, [sp, #22]
 800d6e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d6ec:	9302      	str	r3, [sp, #8]
 800d6ee:	4632      	mov	r2, r6
 800d6f0:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 800d6f4:	4638      	mov	r0, r7
 800d6f6:	47c0      	blx	r8
 800d6f8:	2301      	movs	r3, #1
 800d6fa:	69e2      	ldr	r2, [r4, #28]
 800d6fc:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800d700:	2a00      	cmp	r2, #0
 800d702:	d1d4      	bne.n	800d6ae <read_submessage_format+0x56>
 800d704:	e7d5      	b.n	800d6b2 <read_submessage_format+0x5a>
 800d706:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d0f8      	beq.n	800d700 <read_submessage_format+0xa8>
 800d70e:	a906      	add	r1, sp, #24
 800d710:	a80c      	add	r0, sp, #48	@ 0x30
 800d712:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800d716:	f002 fc91 	bl	801003c <uxr_deserialize_SampleIdentity>
 800d71a:	b9a0      	cbnz	r0, 800d746 <read_submessage_format+0xee>
 800d71c:	69e2      	ldr	r2, [r4, #28]
 800d71e:	2a00      	cmp	r2, #0
 800d720:	d1c5      	bne.n	800d6ae <read_submessage_format+0x56>
 800d722:	e7c6      	b.n	800d6b2 <read_submessage_format+0x5a>
 800d724:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d728:	b13b      	cbz	r3, 800d73a <read_submessage_format+0xe2>
 800d72a:	a906      	add	r1, sp, #24
 800d72c:	a80c      	add	r0, sp, #48	@ 0x30
 800d72e:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800d732:	f002 f957 	bl	800f9e4 <uxr_deserialize_BaseObjectRequest>
 800d736:	bb60      	cbnz	r0, 800d792 <read_submessage_format+0x13a>
 800d738:	69e2      	ldr	r2, [r4, #28]
 800d73a:	68a3      	ldr	r3, [r4, #8]
 800d73c:	442b      	add	r3, r5
 800d73e:	60a3      	str	r3, [r4, #8]
 800d740:	2a00      	cmp	r2, #0
 800d742:	d1b4      	bne.n	800d6ae <read_submessage_format+0x56>
 800d744:	e7b5      	b.n	800d6b2 <read_submessage_format+0x5a>
 800d746:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800d74a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d74c:	1a52      	subs	r2, r2, r1
 800d74e:	eba8 0803 	sub.w	r8, r8, r3
 800d752:	a80c      	add	r0, sp, #48	@ 0x30
 800d754:	f7ff fc20 	bl	800cf98 <ucdr_init_buffer>
 800d758:	44a8      	add	r8, r5
 800d75a:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800d75e:	a80c      	add	r0, sp, #48	@ 0x30
 800d760:	f7ff fbee 	bl	800cf40 <ucdr_set_on_full_buffer_callback>
 800d764:	fa1f f888 	uxth.w	r8, r8
 800d768:	ab0c      	add	r3, sp, #48	@ 0x30
 800d76a:	9300      	str	r3, [sp, #0]
 800d76c:	f8cd 8004 	str.w	r8, [sp, #4]
 800d770:	2108      	movs	r1, #8
 800d772:	f88d 1016 	strb.w	r1, [sp, #22]
 800d776:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 800d77a:	9102      	str	r1, [sp, #8]
 800d77c:	ab06      	add	r3, sp, #24
 800d77e:	4632      	mov	r2, r6
 800d780:	9905      	ldr	r1, [sp, #20]
 800d782:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 800d786:	4638      	mov	r0, r7
 800d788:	47b0      	blx	r6
 800d78a:	2301      	movs	r3, #1
 800d78c:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800d790:	e7c4      	b.n	800d71c <read_submessage_format+0xc4>
 800d792:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800d796:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d798:	1a52      	subs	r2, r2, r1
 800d79a:	a80c      	add	r0, sp, #48	@ 0x30
 800d79c:	eba8 0803 	sub.w	r8, r8, r3
 800d7a0:	f7ff fbfa 	bl	800cf98 <ucdr_init_buffer>
 800d7a4:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800d7a8:	a80c      	add	r0, sp, #48	@ 0x30
 800d7aa:	f7ff fbc9 	bl	800cf40 <ucdr_set_on_full_buffer_callback>
 800d7ae:	ab0c      	add	r3, sp, #48	@ 0x30
 800d7b0:	9300      	str	r3, [sp, #0]
 800d7b2:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800d7b6:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800d7ba:	44a8      	add	r8, r5
 800d7bc:	fa1f f888 	uxth.w	r8, r8
 800d7c0:	f8cd 8004 	str.w	r8, [sp, #4]
 800d7c4:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800d7c8:	2107      	movs	r1, #7
 800d7ca:	f88d 1016 	strb.w	r1, [sp, #22]
 800d7ce:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 800d7d2:	9102      	str	r1, [sp, #8]
 800d7d4:	4632      	mov	r2, r6
 800d7d6:	b29b      	uxth	r3, r3
 800d7d8:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 800d7dc:	9905      	ldr	r1, [sp, #20]
 800d7de:	4638      	mov	r0, r7
 800d7e0:	47b0      	blx	r6
 800d7e2:	2301      	movs	r3, #1
 800d7e4:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800d7e8:	e7a6      	b.n	800d738 <read_submessage_format+0xe0>
 800d7ea:	bf00      	nop

0800d7ec <on_get_fragmentation_info>:
 800d7ec:	b500      	push	{lr}
 800d7ee:	b08b      	sub	sp, #44	@ 0x2c
 800d7f0:	4601      	mov	r1, r0
 800d7f2:	2204      	movs	r2, #4
 800d7f4:	a802      	add	r0, sp, #8
 800d7f6:	f7ff fbcf 	bl	800cf98 <ucdr_init_buffer>
 800d7fa:	f10d 0305 	add.w	r3, sp, #5
 800d7fe:	f10d 0206 	add.w	r2, sp, #6
 800d802:	a901      	add	r1, sp, #4
 800d804:	a802      	add	r0, sp, #8
 800d806:	f001 f9d5 	bl	800ebb4 <uxr_read_submessage_header>
 800d80a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d80e:	2b0d      	cmp	r3, #13
 800d810:	d003      	beq.n	800d81a <on_get_fragmentation_info+0x2e>
 800d812:	2000      	movs	r0, #0
 800d814:	b00b      	add	sp, #44	@ 0x2c
 800d816:	f85d fb04 	ldr.w	pc, [sp], #4
 800d81a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d81e:	f013 0f02 	tst.w	r3, #2
 800d822:	bf14      	ite	ne
 800d824:	2002      	movne	r0, #2
 800d826:	2001      	moveq	r0, #1
 800d828:	b00b      	add	sp, #44	@ 0x2c
 800d82a:	f85d fb04 	ldr.w	pc, [sp], #4
 800d82e:	bf00      	nop

0800d830 <read_submessage_get_info>:
 800d830:	b570      	push	{r4, r5, r6, lr}
 800d832:	2500      	movs	r5, #0
 800d834:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 800d838:	4604      	mov	r4, r0
 800d83a:	f44f 7224 	mov.w	r2, #656	@ 0x290
 800d83e:	460e      	mov	r6, r1
 800d840:	a810      	add	r0, sp, #64	@ 0x40
 800d842:	4629      	mov	r1, r5
 800d844:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800d848:	f00a f9ee 	bl	8017c28 <memset>
 800d84c:	a903      	add	r1, sp, #12
 800d84e:	4630      	mov	r0, r6
 800d850:	f002 fa70 	bl	800fd34 <uxr_deserialize_GET_INFO_Payload>
 800d854:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800d858:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800d85c:	4620      	mov	r0, r4
 800d85e:	f001 f81f 	bl	800e8a0 <uxr_session_header_offset>
 800d862:	462b      	mov	r3, r5
 800d864:	9000      	str	r0, [sp, #0]
 800d866:	220c      	movs	r2, #12
 800d868:	a905      	add	r1, sp, #20
 800d86a:	a808      	add	r0, sp, #32
 800d86c:	f7ff fb82 	bl	800cf74 <ucdr_init_buffer_origin_offset>
 800d870:	a910      	add	r1, sp, #64	@ 0x40
 800d872:	a808      	add	r0, sp, #32
 800d874:	f002 fad0 	bl	800fe18 <uxr_serialize_INFO_Payload>
 800d878:	9b08      	ldr	r3, [sp, #32]
 800d87a:	462a      	mov	r2, r5
 800d87c:	4629      	mov	r1, r5
 800d87e:	4620      	mov	r0, r4
 800d880:	f000 ffb8 	bl	800e7f4 <uxr_stamp_session_header>
 800d884:	a808      	add	r0, sp, #32
 800d886:	f7ff fbb3 	bl	800cff0 <ucdr_buffer_length>
 800d88a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d88c:	4602      	mov	r2, r0
 800d88e:	a905      	add	r1, sp, #20
 800d890:	e9d3 0400 	ldrd	r0, r4, [r3]
 800d894:	47a0      	blx	r4
 800d896:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 800d89a:	bd70      	pop	{r4, r5, r6, pc}

0800d89c <write_submessage_acknack.isra.0>:
 800d89c:	b570      	push	{r4, r5, r6, lr}
 800d89e:	b092      	sub	sp, #72	@ 0x48
 800d8a0:	4605      	mov	r5, r0
 800d8a2:	460e      	mov	r6, r1
 800d8a4:	4614      	mov	r4, r2
 800d8a6:	f000 fffb 	bl	800e8a0 <uxr_session_header_offset>
 800d8aa:	a905      	add	r1, sp, #20
 800d8ac:	9000      	str	r0, [sp, #0]
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	a80a      	add	r0, sp, #40	@ 0x28
 800d8b2:	2211      	movs	r2, #17
 800d8b4:	f7ff fb5e 	bl	800cf74 <ucdr_init_buffer_origin_offset>
 800d8b8:	2218      	movs	r2, #24
 800d8ba:	fb02 5404 	mla	r4, r2, r4, r5
 800d8be:	2300      	movs	r3, #0
 800d8c0:	2205      	movs	r2, #5
 800d8c2:	3450      	adds	r4, #80	@ 0x50
 800d8c4:	210a      	movs	r1, #10
 800d8c6:	a80a      	add	r0, sp, #40	@ 0x28
 800d8c8:	f001 f95a 	bl	800eb80 <uxr_buffer_submessage_header>
 800d8cc:	a903      	add	r1, sp, #12
 800d8ce:	4620      	mov	r0, r4
 800d8d0:	f007 fc40 	bl	8015154 <uxr_compute_acknack>
 800d8d4:	ba40      	rev16	r0, r0
 800d8d6:	f8ad 000e 	strh.w	r0, [sp, #14]
 800d8da:	a903      	add	r1, sp, #12
 800d8dc:	a80a      	add	r0, sp, #40	@ 0x28
 800d8de:	f88d 6010 	strb.w	r6, [sp, #16]
 800d8e2:	f002 fb09 	bl	800fef8 <uxr_serialize_ACKNACK_Payload>
 800d8e6:	2200      	movs	r2, #0
 800d8e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d8ea:	4611      	mov	r1, r2
 800d8ec:	4628      	mov	r0, r5
 800d8ee:	f000 ff81 	bl	800e7f4 <uxr_stamp_session_header>
 800d8f2:	a80a      	add	r0, sp, #40	@ 0x28
 800d8f4:	f7ff fb7c 	bl	800cff0 <ucdr_buffer_length>
 800d8f8:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800d8fa:	4602      	mov	r2, r0
 800d8fc:	a905      	add	r1, sp, #20
 800d8fe:	e9d3 0400 	ldrd	r0, r4, [r3]
 800d902:	47a0      	blx	r4
 800d904:	b012      	add	sp, #72	@ 0x48
 800d906:	bd70      	pop	{r4, r5, r6, pc}

0800d908 <uxr_init_session>:
 800d908:	b510      	push	{r4, lr}
 800d90a:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800d940 <uxr_init_session+0x38>
 800d90e:	2300      	movs	r3, #0
 800d910:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 800d914:	4604      	mov	r4, r0
 800d916:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 800d91a:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 800d91e:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 800d922:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 800d926:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 800d92a:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 800d92e:	2181      	movs	r1, #129	@ 0x81
 800d930:	f000 fecc 	bl	800e6cc <uxr_init_session_info>
 800d934:	f104 0008 	add.w	r0, r4, #8
 800d938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d93c:	f001 b83c 	b.w	800e9b8 <uxr_init_stream_storage>
	...

0800d948 <uxr_set_status_callback>:
 800d948:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 800d94c:	4770      	bx	lr
 800d94e:	bf00      	nop

0800d950 <uxr_set_topic_callback>:
 800d950:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 800d954:	4770      	bx	lr
 800d956:	bf00      	nop

0800d958 <uxr_set_request_callback>:
 800d958:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 800d95c:	4770      	bx	lr
 800d95e:	bf00      	nop

0800d960 <uxr_set_reply_callback>:
 800d960:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 800d964:	4770      	bx	lr
 800d966:	bf00      	nop

0800d968 <uxr_create_output_best_effort_stream>:
 800d968:	b510      	push	{r4, lr}
 800d96a:	b084      	sub	sp, #16
 800d96c:	e9cd 2100 	strd	r2, r1, [sp]
 800d970:	4604      	mov	r4, r0
 800d972:	f000 ff95 	bl	800e8a0 <uxr_session_header_offset>
 800d976:	e9dd 2100 	ldrd	r2, r1, [sp]
 800d97a:	4603      	mov	r3, r0
 800d97c:	f104 0008 	add.w	r0, r4, #8
 800d980:	b004      	add	sp, #16
 800d982:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d986:	f001 b861 	b.w	800ea4c <uxr_add_output_best_effort_buffer>
 800d98a:	bf00      	nop

0800d98c <uxr_create_output_reliable_stream>:
 800d98c:	b510      	push	{r4, lr}
 800d98e:	b088      	sub	sp, #32
 800d990:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800d994:	4604      	mov	r4, r0
 800d996:	9303      	str	r3, [sp, #12]
 800d998:	f000 ff82 	bl	800e8a0 <uxr_session_header_offset>
 800d99c:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800d9a0:	9000      	str	r0, [sp, #0]
 800d9a2:	9905      	ldr	r1, [sp, #20]
 800d9a4:	f104 0008 	add.w	r0, r4, #8
 800d9a8:	f001 f864 	bl	800ea74 <uxr_add_output_reliable_buffer>
 800d9ac:	2200      	movs	r2, #0
 800d9ae:	b2c3      	uxtb	r3, r0
 800d9b0:	f363 0207 	bfi	r2, r3, #0, #8
 800d9b4:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800d9b8:	f363 220f 	bfi	r2, r3, #8, #8
 800d9bc:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800d9c0:	f363 4217 	bfi	r2, r3, #16, #8
 800d9c4:	0e03      	lsrs	r3, r0, #24
 800d9c6:	f363 621f 	bfi	r2, r3, #24, #8
 800d9ca:	4610      	mov	r0, r2
 800d9cc:	b008      	add	sp, #32
 800d9ce:	bd10      	pop	{r4, pc}

0800d9d0 <uxr_create_input_best_effort_stream>:
 800d9d0:	b082      	sub	sp, #8
 800d9d2:	3008      	adds	r0, #8
 800d9d4:	b002      	add	sp, #8
 800d9d6:	f001 b867 	b.w	800eaa8 <uxr_add_input_best_effort_buffer>
 800d9da:	bf00      	nop

0800d9dc <uxr_create_input_reliable_stream>:
 800d9dc:	b510      	push	{r4, lr}
 800d9de:	b084      	sub	sp, #16
 800d9e0:	4c0b      	ldr	r4, [pc, #44]	@ (800da10 <uxr_create_input_reliable_stream+0x34>)
 800d9e2:	9400      	str	r4, [sp, #0]
 800d9e4:	3008      	adds	r0, #8
 800d9e6:	f001 f875 	bl	800ead4 <uxr_add_input_reliable_buffer>
 800d9ea:	2200      	movs	r2, #0
 800d9ec:	b2c3      	uxtb	r3, r0
 800d9ee:	f363 0207 	bfi	r2, r3, #0, #8
 800d9f2:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800d9f6:	f363 220f 	bfi	r2, r3, #8, #8
 800d9fa:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800d9fe:	f363 4217 	bfi	r2, r3, #16, #8
 800da02:	0e03      	lsrs	r3, r0, #24
 800da04:	f363 621f 	bfi	r2, r3, #24, #8
 800da08:	4610      	mov	r0, r2
 800da0a:	b004      	add	sp, #16
 800da0c:	bd10      	pop	{r4, pc}
 800da0e:	bf00      	nop
 800da10:	0800d7ed 	.word	0x0800d7ed

0800da14 <uxr_epoch_nanos>:
 800da14:	b510      	push	{r4, lr}
 800da16:	4604      	mov	r4, r0
 800da18:	f001 f912 	bl	800ec40 <uxr_nanos>
 800da1c:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 800da20:	1ac0      	subs	r0, r0, r3
 800da22:	eb61 0102 	sbc.w	r1, r1, r2
 800da26:	bd10      	pop	{r4, pc}

0800da28 <uxr_flash_output_streams>:
 800da28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da2c:	7e03      	ldrb	r3, [r0, #24]
 800da2e:	b084      	sub	sp, #16
 800da30:	4604      	mov	r4, r0
 800da32:	2b00      	cmp	r3, #0
 800da34:	d035      	beq.n	800daa2 <uxr_flash_output_streams+0x7a>
 800da36:	f04f 0900 	mov.w	r9, #0
 800da3a:	4648      	mov	r0, r9
 800da3c:	f10d 0802 	add.w	r8, sp, #2
 800da40:	af03      	add	r7, sp, #12
 800da42:	ae02      	add	r6, sp, #8
 800da44:	e006      	b.n	800da54 <uxr_flash_output_streams+0x2c>
 800da46:	7e23      	ldrb	r3, [r4, #24]
 800da48:	f109 0901 	add.w	r9, r9, #1
 800da4c:	fa5f f089 	uxtb.w	r0, r9
 800da50:	4283      	cmp	r3, r0
 800da52:	d926      	bls.n	800daa2 <uxr_flash_output_streams+0x7a>
 800da54:	2201      	movs	r2, #1
 800da56:	4611      	mov	r1, r2
 800da58:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800da5c:	f000 ff58 	bl	800e910 <uxr_stream_id>
 800da60:	3508      	adds	r5, #8
 800da62:	4684      	mov	ip, r0
 800da64:	4643      	mov	r3, r8
 800da66:	463a      	mov	r2, r7
 800da68:	4631      	mov	r1, r6
 800da6a:	4628      	mov	r0, r5
 800da6c:	f8cd c004 	str.w	ip, [sp, #4]
 800da70:	f007 fbf6 	bl	8015260 <uxr_prepare_best_effort_buffer_to_send>
 800da74:	2800      	cmp	r0, #0
 800da76:	d0e6      	beq.n	800da46 <uxr_flash_output_streams+0x1e>
 800da78:	9b02      	ldr	r3, [sp, #8]
 800da7a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800da7e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800da82:	4620      	mov	r0, r4
 800da84:	f000 feb6 	bl	800e7f4 <uxr_stamp_session_header>
 800da88:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800da8a:	9a03      	ldr	r2, [sp, #12]
 800da8c:	685d      	ldr	r5, [r3, #4]
 800da8e:	6818      	ldr	r0, [r3, #0]
 800da90:	9902      	ldr	r1, [sp, #8]
 800da92:	47a8      	blx	r5
 800da94:	f109 0901 	add.w	r9, r9, #1
 800da98:	7e23      	ldrb	r3, [r4, #24]
 800da9a:	fa5f f089 	uxtb.w	r0, r9
 800da9e:	4283      	cmp	r3, r0
 800daa0:	d8d8      	bhi.n	800da54 <uxr_flash_output_streams+0x2c>
 800daa2:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800daa6:	b38b      	cbz	r3, 800db0c <uxr_flash_output_streams+0xe4>
 800daa8:	f04f 0900 	mov.w	r9, #0
 800daac:	f10d 0802 	add.w	r8, sp, #2
 800dab0:	af03      	add	r7, sp, #12
 800dab2:	ae02      	add	r6, sp, #8
 800dab4:	4648      	mov	r0, r9
 800dab6:	2201      	movs	r2, #1
 800dab8:	2102      	movs	r1, #2
 800daba:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800dabe:	f000 ff27 	bl	800e910 <uxr_stream_id>
 800dac2:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800dac6:	3520      	adds	r5, #32
 800dac8:	9001      	str	r0, [sp, #4]
 800daca:	e00d      	b.n	800dae8 <uxr_flash_output_streams+0xc0>
 800dacc:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800dad0:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800dad4:	9b02      	ldr	r3, [sp, #8]
 800dad6:	f000 fe8d 	bl	800e7f4 <uxr_stamp_session_header>
 800dada:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800dadc:	9a03      	ldr	r2, [sp, #12]
 800dade:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800dae2:	9902      	ldr	r1, [sp, #8]
 800dae4:	6818      	ldr	r0, [r3, #0]
 800dae6:	47d0      	blx	sl
 800dae8:	4643      	mov	r3, r8
 800daea:	463a      	mov	r2, r7
 800daec:	4631      	mov	r1, r6
 800daee:	4628      	mov	r0, r5
 800daf0:	f007 fdd4 	bl	801569c <uxr_prepare_next_reliable_buffer_to_send>
 800daf4:	4603      	mov	r3, r0
 800daf6:	4620      	mov	r0, r4
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d1e7      	bne.n	800dacc <uxr_flash_output_streams+0xa4>
 800dafc:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800db00:	f109 0901 	add.w	r9, r9, #1
 800db04:	fa5f f089 	uxtb.w	r0, r9
 800db08:	4283      	cmp	r3, r0
 800db0a:	d8d4      	bhi.n	800dab6 <uxr_flash_output_streams+0x8e>
 800db0c:	b004      	add	sp, #16
 800db0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db12:	bf00      	nop

0800db14 <read_submessage_info>:
 800db14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db18:	460d      	mov	r5, r1
 800db1a:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800db1e:	4669      	mov	r1, sp
 800db20:	4607      	mov	r7, r0
 800db22:	4628      	mov	r0, r5
 800db24:	f002 f814 	bl	800fb50 <uxr_deserialize_BaseObjectReply>
 800db28:	a902      	add	r1, sp, #8
 800db2a:	4604      	mov	r4, r0
 800db2c:	4628      	mov	r0, r5
 800db2e:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800db32:	f006 f923 	bl	8013d7c <ucdr_deserialize_bool>
 800db36:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800db3a:	4004      	ands	r4, r0
 800db3c:	b2e4      	uxtb	r4, r4
 800db3e:	b95b      	cbnz	r3, 800db58 <read_submessage_info+0x44>
 800db40:	a987      	add	r1, sp, #540	@ 0x21c
 800db42:	4628      	mov	r0, r5
 800db44:	f006 f91a 	bl	8013d7c <ucdr_deserialize_bool>
 800db48:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 800db4c:	4606      	mov	r6, r0
 800db4e:	b94b      	cbnz	r3, 800db64 <read_submessage_info+0x50>
 800db50:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800db54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db58:	a903      	add	r1, sp, #12
 800db5a:	4628      	mov	r0, r5
 800db5c:	f001 fea0 	bl	800f8a0 <uxr_deserialize_ObjectVariant>
 800db60:	4004      	ands	r4, r0
 800db62:	e7ed      	b.n	800db40 <read_submessage_info+0x2c>
 800db64:	a988      	add	r1, sp, #544	@ 0x220
 800db66:	4628      	mov	r0, r5
 800db68:	f006 f936 	bl	8013dd8 <ucdr_deserialize_uint8_t>
 800db6c:	4234      	tst	r4, r6
 800db6e:	d0ef      	beq.n	800db50 <read_submessage_info+0x3c>
 800db70:	2800      	cmp	r0, #0
 800db72:	d0ed      	beq.n	800db50 <read_submessage_info+0x3c>
 800db74:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 800db78:	2b0d      	cmp	r3, #13
 800db7a:	d1e9      	bne.n	800db50 <read_submessage_info+0x3c>
 800db7c:	a98a      	add	r1, sp, #552	@ 0x228
 800db7e:	4628      	mov	r0, r5
 800db80:	f006 fed0 	bl	8014924 <ucdr_deserialize_int16_t>
 800db84:	b140      	cbz	r0, 800db98 <read_submessage_info+0x84>
 800db86:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	dd07      	ble.n	800db9e <read_submessage_info+0x8a>
 800db8e:	f1b8 0f00 	cmp.w	r8, #0
 800db92:	bf14      	ite	ne
 800db94:	2001      	movne	r0, #1
 800db96:	2002      	moveq	r0, #2
 800db98:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 800db9c:	e7d8      	b.n	800db50 <read_submessage_info+0x3c>
 800db9e:	2000      	movs	r0, #0
 800dba0:	e7fa      	b.n	800db98 <read_submessage_info+0x84>
 800dba2:	bf00      	nop

0800dba4 <read_submessage_list>:
 800dba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dba8:	b097      	sub	sp, #92	@ 0x5c
 800dbaa:	4ec1      	ldr	r6, [pc, #772]	@ (800deb0 <read_submessage_list+0x30c>)
 800dbac:	9209      	str	r2, [sp, #36]	@ 0x24
 800dbae:	4604      	mov	r4, r0
 800dbb0:	460d      	mov	r5, r1
 800dbb2:	f04f 0801 	mov.w	r8, #1
 800dbb6:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 800dbba:	aa0c      	add	r2, sp, #48	@ 0x30
 800dbbc:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 800dbc0:	4628      	mov	r0, r5
 800dbc2:	f000 fff7 	bl	800ebb4 <uxr_read_submessage_header>
 800dbc6:	2800      	cmp	r0, #0
 800dbc8:	f000 813e 	beq.w	800de48 <read_submessage_list+0x2a4>
 800dbcc:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 800dbd0:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 800dbd4:	3b02      	subs	r3, #2
 800dbd6:	2b0d      	cmp	r3, #13
 800dbd8:	d8ed      	bhi.n	800dbb6 <read_submessage_list+0x12>
 800dbda:	a101      	add	r1, pc, #4	@ (adr r1, 800dbe0 <read_submessage_list+0x3c>)
 800dbdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dbe0:	0800de3f 	.word	0x0800de3f
 800dbe4:	0800dbb7 	.word	0x0800dbb7
 800dbe8:	0800de2f 	.word	0x0800de2f
 800dbec:	0800ddcd 	.word	0x0800ddcd
 800dbf0:	0800ddc3 	.word	0x0800ddc3
 800dbf4:	0800dbb7 	.word	0x0800dbb7
 800dbf8:	0800dbb7 	.word	0x0800dbb7
 800dbfc:	0800dd23 	.word	0x0800dd23
 800dc00:	0800dcb3 	.word	0x0800dcb3
 800dc04:	0800dc73 	.word	0x0800dc73
 800dc08:	0800dbb7 	.word	0x0800dbb7
 800dc0c:	0800dbb7 	.word	0x0800dbb7
 800dc10:	0800dbb7 	.word	0x0800dbb7
 800dc14:	0800dc19 	.word	0x0800dc19
 800dc18:	a910      	add	r1, sp, #64	@ 0x40
 800dc1a:	4628      	mov	r0, r5
 800dc1c:	f002 f9bc 	bl	800ff98 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800dc20:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 800dc24:	f1b9 0f00 	cmp.w	r9, #0
 800dc28:	f000 8116 	beq.w	800de58 <read_submessage_list+0x2b4>
 800dc2c:	f001 f808 	bl	800ec40 <uxr_nanos>
 800dc30:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800dc32:	4602      	mov	r2, r0
 800dc34:	460b      	mov	r3, r1
 800dc36:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800dc38:	2100      	movs	r1, #0
 800dc3a:	468c      	mov	ip, r1
 800dc3c:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800dc40:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 800dc44:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800dc46:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 800dc48:	468c      	mov	ip, r1
 800dc4a:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800dc4e:	46e2      	mov	sl, ip
 800dc50:	46bc      	mov	ip, r7
 800dc52:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 800dc56:	fbc0 7106 	smlal	r7, r1, r0, r6
 800dc5a:	e9cd ca02 	strd	ip, sl, [sp, #8]
 800dc5e:	e9cd 7100 	strd	r7, r1, [sp]
 800dc62:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800dc66:	9106      	str	r1, [sp, #24]
 800dc68:	4620      	mov	r0, r4
 800dc6a:	47c8      	blx	r9
 800dc6c:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 800dc70:	e7a1      	b.n	800dbb6 <read_submessage_list+0x12>
 800dc72:	a910      	add	r1, sp, #64	@ 0x40
 800dc74:	4628      	mov	r0, r5
 800dc76:	f002 f97d 	bl	800ff74 <uxr_deserialize_HEARTBEAT_Payload>
 800dc7a:	2100      	movs	r1, #0
 800dc7c:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800dc80:	f000 fe70 	bl	800e964 <uxr_stream_id_from_raw>
 800dc84:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800dc88:	900f      	str	r0, [sp, #60]	@ 0x3c
 800dc8a:	4639      	mov	r1, r7
 800dc8c:	f104 0008 	add.w	r0, r4, #8
 800dc90:	f000 ff56 	bl	800eb40 <uxr_get_input_reliable_stream>
 800dc94:	2800      	cmp	r0, #0
 800dc96:	d08e      	beq.n	800dbb6 <read_submessage_list+0x12>
 800dc98:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 800dc9c:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 800dca0:	f007 fa4c 	bl	801513c <uxr_process_heartbeat>
 800dca4:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 800dca8:	463a      	mov	r2, r7
 800dcaa:	4620      	mov	r0, r4
 800dcac:	f7ff fdf6 	bl	800d89c <write_submessage_acknack.isra.0>
 800dcb0:	e781      	b.n	800dbb6 <read_submessage_list+0x12>
 800dcb2:	a910      	add	r1, sp, #64	@ 0x40
 800dcb4:	4628      	mov	r0, r5
 800dcb6:	f002 f935 	bl	800ff24 <uxr_deserialize_ACKNACK_Payload>
 800dcba:	2100      	movs	r1, #0
 800dcbc:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800dcc0:	f000 fe50 	bl	800e964 <uxr_stream_id_from_raw>
 800dcc4:	900d      	str	r0, [sp, #52]	@ 0x34
 800dcc6:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800dcca:	f104 0008 	add.w	r0, r4, #8
 800dcce:	f000 ff23 	bl	800eb18 <uxr_get_output_reliable_stream>
 800dcd2:	4607      	mov	r7, r0
 800dcd4:	2800      	cmp	r0, #0
 800dcd6:	f43f af6e 	beq.w	800dbb6 <read_submessage_list+0x12>
 800dcda:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 800dcde:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 800dce2:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800dce6:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800dcea:	b289      	uxth	r1, r1
 800dcec:	f007 fd80 	bl	80157f0 <uxr_process_acknack>
 800dcf0:	4638      	mov	r0, r7
 800dcf2:	f007 fd3d 	bl	8015770 <uxr_begin_output_nack_buffer_it>
 800dcf6:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800dcfa:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 800dcfe:	e006      	b.n	800dd0e <read_submessage_list+0x16a>
 800dd00:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800dd02:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800dd04:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800dd08:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800dd0a:	6818      	ldr	r0, [r3, #0]
 800dd0c:	47c8      	blx	r9
 800dd0e:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 800dd12:	aa0f      	add	r2, sp, #60	@ 0x3c
 800dd14:	4651      	mov	r1, sl
 800dd16:	4638      	mov	r0, r7
 800dd18:	f007 fd2c 	bl	8015774 <uxr_next_reliable_nack_buffer_to_send>
 800dd1c:	2800      	cmp	r0, #0
 800dd1e:	d1ef      	bne.n	800dd00 <read_submessage_list+0x15c>
 800dd20:	e749      	b.n	800dbb6 <read_submessage_list+0x12>
 800dd22:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 800dd26:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 800dd2a:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800dd2e:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 800dd32:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 800dd36:	4651      	mov	r1, sl
 800dd38:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800dd3c:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 800dd40:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 800dd44:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 800dd48:	4628      	mov	r0, r5
 800dd4a:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 800dd4e:	f001 fe49 	bl	800f9e4 <uxr_deserialize_BaseObjectRequest>
 800dd52:	4650      	mov	r0, sl
 800dd54:	a90f      	add	r1, sp, #60	@ 0x3c
 800dd56:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 800dd5a:	f000 fdc7 	bl	800e8ec <uxr_parse_base_object_request>
 800dd5e:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 800dd62:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800dd64:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 800dd68:	9110      	str	r1, [sp, #64]	@ 0x40
 800dd6a:	3f04      	subs	r7, #4
 800dd6c:	f009 090e 	and.w	r9, r9, #14
 800dd70:	b2bf      	uxth	r7, r7
 800dd72:	f1bb 0f00 	cmp.w	fp, #0
 800dd76:	d006      	beq.n	800dd86 <read_submessage_list+0x1e2>
 800dd78:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800dd7c:	9300      	str	r3, [sp, #0]
 800dd7e:	4652      	mov	r2, sl
 800dd80:	2300      	movs	r3, #0
 800dd82:	4620      	mov	r0, r4
 800dd84:	47d8      	blx	fp
 800dd86:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800dd88:	b16a      	cbz	r2, 800dda6 <read_submessage_list+0x202>
 800dd8a:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800dd8c:	2100      	movs	r1, #0
 800dd8e:	3802      	subs	r0, #2
 800dd90:	e002      	b.n	800dd98 <read_submessage_list+0x1f4>
 800dd92:	3101      	adds	r1, #1
 800dd94:	4291      	cmp	r1, r2
 800dd96:	d006      	beq.n	800dda6 <read_submessage_list+0x202>
 800dd98:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800dd9c:	4553      	cmp	r3, sl
 800dd9e:	d1f8      	bne.n	800dd92 <read_submessage_list+0x1ee>
 800dda0:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800dda2:	2200      	movs	r2, #0
 800dda4:	545a      	strb	r2, [r3, r1]
 800dda6:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 800ddaa:	9102      	str	r1, [sp, #8]
 800ddac:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ddae:	9101      	str	r1, [sp, #4]
 800ddb0:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800ddb2:	9100      	str	r1, [sp, #0]
 800ddb4:	464b      	mov	r3, r9
 800ddb6:	463a      	mov	r2, r7
 800ddb8:	4629      	mov	r1, r5
 800ddba:	4620      	mov	r0, r4
 800ddbc:	f7ff fc4c 	bl	800d658 <read_submessage_format>
 800ddc0:	e6f9      	b.n	800dbb6 <read_submessage_list+0x12>
 800ddc2:	4629      	mov	r1, r5
 800ddc4:	4620      	mov	r0, r4
 800ddc6:	f7ff fea5 	bl	800db14 <read_submessage_info>
 800ddca:	e6f4      	b.n	800dbb6 <read_submessage_list+0x12>
 800ddcc:	2a00      	cmp	r2, #0
 800ddce:	d03e      	beq.n	800de4e <read_submessage_list+0x2aa>
 800ddd0:	a910      	add	r1, sp, #64	@ 0x40
 800ddd2:	4628      	mov	r0, r5
 800ddd4:	f002 f802 	bl	800fddc <uxr_deserialize_STATUS_Payload>
 800ddd8:	a90e      	add	r1, sp, #56	@ 0x38
 800ddda:	aa0d      	add	r2, sp, #52	@ 0x34
 800dddc:	a810      	add	r0, sp, #64	@ 0x40
 800ddde:	f000 fd85 	bl	800e8ec <uxr_parse_base_object_request>
 800dde2:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 800dde6:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800dde8:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 800ddec:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 800ddf0:	910f      	str	r1, [sp, #60]	@ 0x3c
 800ddf2:	f1ba 0f00 	cmp.w	sl, #0
 800ddf6:	d006      	beq.n	800de06 <read_submessage_list+0x262>
 800ddf8:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800ddfc:	9300      	str	r3, [sp, #0]
 800ddfe:	463a      	mov	r2, r7
 800de00:	464b      	mov	r3, r9
 800de02:	4620      	mov	r0, r4
 800de04:	47d0      	blx	sl
 800de06:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800de08:	2a00      	cmp	r2, #0
 800de0a:	f43f aed4 	beq.w	800dbb6 <read_submessage_list+0x12>
 800de0e:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800de10:	2100      	movs	r1, #0
 800de12:	3802      	subs	r0, #2
 800de14:	e003      	b.n	800de1e <read_submessage_list+0x27a>
 800de16:	3101      	adds	r1, #1
 800de18:	4291      	cmp	r1, r2
 800de1a:	f43f aecc 	beq.w	800dbb6 <read_submessage_list+0x12>
 800de1e:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800de22:	42bb      	cmp	r3, r7
 800de24:	d1f7      	bne.n	800de16 <read_submessage_list+0x272>
 800de26:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800de28:	f803 9001 	strb.w	r9, [r3, r1]
 800de2c:	e6c3      	b.n	800dbb6 <read_submessage_list+0x12>
 800de2e:	2a00      	cmp	r2, #0
 800de30:	f47f aec1 	bne.w	800dbb6 <read_submessage_list+0x12>
 800de34:	4629      	mov	r1, r5
 800de36:	4620      	mov	r0, r4
 800de38:	f000 fc9e 	bl	800e778 <uxr_read_create_session_status>
 800de3c:	e6bb      	b.n	800dbb6 <read_submessage_list+0x12>
 800de3e:	4629      	mov	r1, r5
 800de40:	4620      	mov	r0, r4
 800de42:	f7ff fcf5 	bl	800d830 <read_submessage_get_info>
 800de46:	e6b6      	b.n	800dbb6 <read_submessage_list+0x12>
 800de48:	b017      	add	sp, #92	@ 0x5c
 800de4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de4e:	4629      	mov	r1, r5
 800de50:	4620      	mov	r0, r4
 800de52:	f000 fc9d 	bl	800e790 <uxr_read_delete_session_status>
 800de56:	e6ae      	b.n	800dbb6 <read_submessage_list+0x12>
 800de58:	f000 fef2 	bl	800ec40 <uxr_nanos>
 800de5c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800de5e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800de60:	464f      	mov	r7, r9
 800de62:	fbc3 2706 	smlal	r2, r7, r3, r6
 800de66:	1812      	adds	r2, r2, r0
 800de68:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800de6a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800de6c:	eb47 0101 	adc.w	r1, r7, r1
 800de70:	464f      	mov	r7, r9
 800de72:	fbc3 0706 	smlal	r0, r7, r3, r6
 800de76:	463b      	mov	r3, r7
 800de78:	4684      	mov	ip, r0
 800de7a:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 800de7e:	fbc7 0906 	smlal	r0, r9, r7, r6
 800de82:	eb1c 0c00 	adds.w	ip, ip, r0
 800de86:	464f      	mov	r7, r9
 800de88:	eb43 0307 	adc.w	r3, r3, r7
 800de8c:	ebb2 0c0c 	subs.w	ip, r2, ip
 800de90:	eb61 0303 	sbc.w	r3, r1, r3
 800de94:	0fda      	lsrs	r2, r3, #31
 800de96:	eb12 020c 	adds.w	r2, r2, ip
 800de9a:	f143 0300 	adc.w	r3, r3, #0
 800de9e:	0852      	lsrs	r2, r2, #1
 800dea0:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800dea4:	105b      	asrs	r3, r3, #1
 800dea6:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 800deaa:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 800deae:	e6dd      	b.n	800dc6c <read_submessage_list+0xc8>
 800deb0:	3b9aca00 	.word	0x3b9aca00

0800deb4 <listen_message_reliably>:
 800deb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800deb8:	1e0b      	subs	r3, r1, #0
 800deba:	b09d      	sub	sp, #116	@ 0x74
 800debc:	bfb8      	it	lt
 800debe:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 800dec2:	4680      	mov	r8, r0
 800dec4:	9305      	str	r3, [sp, #20]
 800dec6:	f000 fea1 	bl	800ec0c <uxr_millis>
 800deca:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 800dece:	4681      	mov	r9, r0
 800ded0:	2a00      	cmp	r2, #0
 800ded2:	f000 80a1 	beq.w	800e018 <listen_message_reliably+0x164>
 800ded6:	2600      	movs	r6, #0
 800ded8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800dedc:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800dee0:	9303      	str	r3, [sp, #12]
 800dee2:	4630      	mov	r0, r6
 800dee4:	460f      	mov	r7, r1
 800dee6:	e00f      	b.n	800df08 <listen_message_reliably+0x54>
 800dee8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800deec:	9903      	ldr	r1, [sp, #12]
 800deee:	455a      	cmp	r2, fp
 800def0:	f106 0601 	add.w	r6, r6, #1
 800def4:	eb73 0101 	sbcs.w	r1, r3, r1
 800def8:	b2f0      	uxtb	r0, r6
 800defa:	da01      	bge.n	800df00 <listen_message_reliably+0x4c>
 800defc:	4693      	mov	fp, r2
 800defe:	9303      	str	r3, [sp, #12]
 800df00:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800df04:	4283      	cmp	r3, r0
 800df06:	d960      	bls.n	800dfca <listen_message_reliably+0x116>
 800df08:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800df0c:	2102      	movs	r1, #2
 800df0e:	2201      	movs	r2, #1
 800df10:	f000 fcfe 	bl	800e910 <uxr_stream_id>
 800df14:	00e4      	lsls	r4, r4, #3
 800df16:	f104 0520 	add.w	r5, r4, #32
 800df1a:	4445      	add	r5, r8
 800df1c:	4601      	mov	r1, r0
 800df1e:	463b      	mov	r3, r7
 800df20:	464a      	mov	r2, r9
 800df22:	4628      	mov	r0, r5
 800df24:	9109      	str	r1, [sp, #36]	@ 0x24
 800df26:	f007 fbf9 	bl	801571c <uxr_update_output_stream_heartbeat_timestamp>
 800df2a:	eb08 0304 	add.w	r3, r8, r4
 800df2e:	2800      	cmp	r0, #0
 800df30:	d0da      	beq.n	800dee8 <listen_message_reliably+0x34>
 800df32:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800df36:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 800df3a:	9304      	str	r3, [sp, #16]
 800df3c:	4640      	mov	r0, r8
 800df3e:	f000 fcaf 	bl	800e8a0 <uxr_session_header_offset>
 800df42:	3501      	adds	r5, #1
 800df44:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 800df48:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800df4c:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 800df50:	2300      	movs	r3, #0
 800df52:	2211      	movs	r2, #17
 800df54:	9000      	str	r0, [sp, #0]
 800df56:	a90c      	add	r1, sp, #48	@ 0x30
 800df58:	4650      	mov	r0, sl
 800df5a:	f7ff f80b 	bl	800cf74 <ucdr_init_buffer_origin_offset>
 800df5e:	2300      	movs	r3, #0
 800df60:	2205      	movs	r2, #5
 800df62:	210b      	movs	r1, #11
 800df64:	4650      	mov	r0, sl
 800df66:	f000 fe0b 	bl	800eb80 <uxr_buffer_submessage_header>
 800df6a:	8968      	ldrh	r0, [r5, #10]
 800df6c:	2101      	movs	r1, #1
 800df6e:	f007 fc97 	bl	80158a0 <uxr_seq_num_add>
 800df72:	892b      	ldrh	r3, [r5, #8]
 800df74:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800df78:	4602      	mov	r2, r0
 800df7a:	9b04      	ldr	r3, [sp, #16]
 800df7c:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800df80:	a90a      	add	r1, sp, #40	@ 0x28
 800df82:	4650      	mov	r0, sl
 800df84:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 800df88:	f001 ffe0 	bl	800ff4c <uxr_serialize_HEARTBEAT_Payload>
 800df8c:	2200      	movs	r2, #0
 800df8e:	4611      	mov	r1, r2
 800df90:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800df92:	4640      	mov	r0, r8
 800df94:	f000 fc2e 	bl	800e7f4 <uxr_stamp_session_header>
 800df98:	4650      	mov	r0, sl
 800df9a:	f7ff f829 	bl	800cff0 <ucdr_buffer_length>
 800df9e:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800dfa2:	4602      	mov	r2, r0
 800dfa4:	a90c      	add	r1, sp, #48	@ 0x30
 800dfa6:	e9d3 0500 	ldrd	r0, r5, [r3]
 800dfaa:	4444      	add	r4, r8
 800dfac:	47a8      	blx	r5
 800dfae:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 800dfb2:	9903      	ldr	r1, [sp, #12]
 800dfb4:	455a      	cmp	r2, fp
 800dfb6:	f106 0601 	add.w	r6, r6, #1
 800dfba:	eb73 0101 	sbcs.w	r1, r3, r1
 800dfbe:	b2f0      	uxtb	r0, r6
 800dfc0:	db9c      	blt.n	800defc <listen_message_reliably+0x48>
 800dfc2:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800dfc6:	4283      	cmp	r3, r0
 800dfc8:	d89e      	bhi.n	800df08 <listen_message_reliably+0x54>
 800dfca:	9a03      	ldr	r2, [sp, #12]
 800dfcc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800dfd0:	429a      	cmp	r2, r3
 800dfd2:	bf08      	it	eq
 800dfd4:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 800dfd8:	d01e      	beq.n	800e018 <listen_message_reliably+0x164>
 800dfda:	ebab 0309 	sub.w	r3, fp, r9
 800dfde:	9905      	ldr	r1, [sp, #20]
 800dfe0:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	bf08      	it	eq
 800dfe8:	2301      	moveq	r3, #1
 800dfea:	4299      	cmp	r1, r3
 800dfec:	bfa8      	it	ge
 800dfee:	4619      	movge	r1, r3
 800dff0:	6894      	ldr	r4, [r2, #8]
 800dff2:	6810      	ldr	r0, [r2, #0]
 800dff4:	4689      	mov	r9, r1
 800dff6:	460b      	mov	r3, r1
 800dff8:	aa08      	add	r2, sp, #32
 800dffa:	a907      	add	r1, sp, #28
 800dffc:	47a0      	blx	r4
 800dffe:	b968      	cbnz	r0, 800e01c <listen_message_reliably+0x168>
 800e000:	9b05      	ldr	r3, [sp, #20]
 800e002:	eba3 0309 	sub.w	r3, r3, r9
 800e006:	2b00      	cmp	r3, #0
 800e008:	9305      	str	r3, [sp, #20]
 800e00a:	f73f af5c 	bgt.w	800dec6 <listen_message_reliably+0x12>
 800e00e:	4604      	mov	r4, r0
 800e010:	4620      	mov	r0, r4
 800e012:	b01d      	add	sp, #116	@ 0x74
 800e014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e018:	9b05      	ldr	r3, [sp, #20]
 800e01a:	e7e0      	b.n	800dfde <listen_message_reliably+0x12a>
 800e01c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800e020:	4604      	mov	r4, r0
 800e022:	a80c      	add	r0, sp, #48	@ 0x30
 800e024:	f7fe ffb8 	bl	800cf98 <ucdr_init_buffer>
 800e028:	2500      	movs	r5, #0
 800e02a:	f10d 031a 	add.w	r3, sp, #26
 800e02e:	aa06      	add	r2, sp, #24
 800e030:	a90c      	add	r1, sp, #48	@ 0x30
 800e032:	4640      	mov	r0, r8
 800e034:	f88d 5018 	strb.w	r5, [sp, #24]
 800e038:	f000 fbf0 	bl	800e81c <uxr_read_session_header>
 800e03c:	b918      	cbnz	r0, 800e046 <listen_message_reliably+0x192>
 800e03e:	4620      	mov	r0, r4
 800e040:	b01d      	add	sp, #116	@ 0x74
 800e042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e046:	4629      	mov	r1, r5
 800e048:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800e04c:	f000 fc8a 	bl	800e964 <uxr_stream_id_from_raw>
 800e050:	f3c0 4507 	ubfx	r5, r0, #16, #8
 800e054:	2d01      	cmp	r5, #1
 800e056:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800e05a:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 800e05e:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800e062:	d04b      	beq.n	800e0fc <listen_message_reliably+0x248>
 800e064:	2d02      	cmp	r5, #2
 800e066:	d00f      	beq.n	800e088 <listen_message_reliably+0x1d4>
 800e068:	2d00      	cmp	r5, #0
 800e06a:	d1e8      	bne.n	800e03e <listen_message_reliably+0x18a>
 800e06c:	4629      	mov	r1, r5
 800e06e:	4628      	mov	r0, r5
 800e070:	f000 fc78 	bl	800e964 <uxr_stream_id_from_raw>
 800e074:	a90c      	add	r1, sp, #48	@ 0x30
 800e076:	4602      	mov	r2, r0
 800e078:	4640      	mov	r0, r8
 800e07a:	920a      	str	r2, [sp, #40]	@ 0x28
 800e07c:	f7ff fd92 	bl	800dba4 <read_submessage_list>
 800e080:	4620      	mov	r0, r4
 800e082:	b01d      	add	sp, #116	@ 0x74
 800e084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e088:	4631      	mov	r1, r6
 800e08a:	f108 0008 	add.w	r0, r8, #8
 800e08e:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 800e092:	f000 fd55 	bl	800eb40 <uxr_get_input_reliable_stream>
 800e096:	4607      	mov	r7, r0
 800e098:	b338      	cbz	r0, 800e0ea <listen_message_reliably+0x236>
 800e09a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e09c:	9203      	str	r2, [sp, #12]
 800e09e:	a80c      	add	r0, sp, #48	@ 0x30
 800e0a0:	f7fe ffaa 	bl	800cff8 <ucdr_buffer_remaining>
 800e0a4:	4603      	mov	r3, r0
 800e0a6:	f10d 0019 	add.w	r0, sp, #25
 800e0aa:	9000      	str	r0, [sp, #0]
 800e0ac:	9a03      	ldr	r2, [sp, #12]
 800e0ae:	4651      	mov	r1, sl
 800e0b0:	4638      	mov	r0, r7
 800e0b2:	f006 ff49 	bl	8014f48 <uxr_receive_reliable_message>
 800e0b6:	b1c0      	cbz	r0, 800e0ea <listen_message_reliably+0x236>
 800e0b8:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800e0bc:	b393      	cbz	r3, 800e124 <listen_message_reliably+0x270>
 800e0be:	ad14      	add	r5, sp, #80	@ 0x50
 800e0c0:	f04f 0a02 	mov.w	sl, #2
 800e0c4:	e00a      	b.n	800e0dc <listen_message_reliably+0x228>
 800e0c6:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 800e0ca:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 800e0ce:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 800e0d2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e0d4:	4629      	mov	r1, r5
 800e0d6:	4640      	mov	r0, r8
 800e0d8:	f7ff fd64 	bl	800dba4 <read_submessage_list>
 800e0dc:	2204      	movs	r2, #4
 800e0de:	4629      	mov	r1, r5
 800e0e0:	4638      	mov	r0, r7
 800e0e2:	f006 ffb1 	bl	8015048 <uxr_next_input_reliable_buffer_available>
 800e0e6:	2800      	cmp	r0, #0
 800e0e8:	d1ed      	bne.n	800e0c6 <listen_message_reliably+0x212>
 800e0ea:	4640      	mov	r0, r8
 800e0ec:	4632      	mov	r2, r6
 800e0ee:	4649      	mov	r1, r9
 800e0f0:	f7ff fbd4 	bl	800d89c <write_submessage_acknack.isra.0>
 800e0f4:	4620      	mov	r0, r4
 800e0f6:	b01d      	add	sp, #116	@ 0x74
 800e0f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0fc:	4631      	mov	r1, r6
 800e0fe:	f108 0008 	add.w	r0, r8, #8
 800e102:	f000 fd13 	bl	800eb2c <uxr_get_input_best_effort_stream>
 800e106:	2800      	cmp	r0, #0
 800e108:	d099      	beq.n	800e03e <listen_message_reliably+0x18a>
 800e10a:	4651      	mov	r1, sl
 800e10c:	f006 fe88 	bl	8014e20 <uxr_receive_best_effort_message>
 800e110:	2800      	cmp	r0, #0
 800e112:	d094      	beq.n	800e03e <listen_message_reliably+0x18a>
 800e114:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800e118:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e11a:	a90c      	add	r1, sp, #48	@ 0x30
 800e11c:	4640      	mov	r0, r8
 800e11e:	f7ff fd41 	bl	800dba4 <read_submessage_list>
 800e122:	e78c      	b.n	800e03e <listen_message_reliably+0x18a>
 800e124:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800e128:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e12a:	a90c      	add	r1, sp, #48	@ 0x30
 800e12c:	4640      	mov	r0, r8
 800e12e:	f7ff fd39 	bl	800dba4 <read_submessage_list>
 800e132:	e7c4      	b.n	800e0be <listen_message_reliably+0x20a>

0800e134 <uxr_run_session_timeout>:
 800e134:	b570      	push	{r4, r5, r6, lr}
 800e136:	4604      	mov	r4, r0
 800e138:	460d      	mov	r5, r1
 800e13a:	f000 fd67 	bl	800ec0c <uxr_millis>
 800e13e:	4606      	mov	r6, r0
 800e140:	4620      	mov	r0, r4
 800e142:	f7ff fc71 	bl	800da28 <uxr_flash_output_streams>
 800e146:	4629      	mov	r1, r5
 800e148:	4620      	mov	r0, r4
 800e14a:	f7ff feb3 	bl	800deb4 <listen_message_reliably>
 800e14e:	f000 fd5d 	bl	800ec0c <uxr_millis>
 800e152:	1b83      	subs	r3, r0, r6
 800e154:	1ae9      	subs	r1, r5, r3
 800e156:	2900      	cmp	r1, #0
 800e158:	dcf6      	bgt.n	800e148 <uxr_run_session_timeout+0x14>
 800e15a:	f104 0008 	add.w	r0, r4, #8
 800e15e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e162:	f000 bcf7 	b.w	800eb54 <uxr_output_streams_confirmed>
 800e166:	bf00      	nop

0800e168 <uxr_run_session_until_data>:
 800e168:	b570      	push	{r4, r5, r6, lr}
 800e16a:	4604      	mov	r4, r0
 800e16c:	460d      	mov	r5, r1
 800e16e:	f000 fd4d 	bl	800ec0c <uxr_millis>
 800e172:	4606      	mov	r6, r0
 800e174:	4620      	mov	r0, r4
 800e176:	f7ff fc57 	bl	800da28 <uxr_flash_output_streams>
 800e17a:	2300      	movs	r3, #0
 800e17c:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 800e180:	4629      	mov	r1, r5
 800e182:	e005      	b.n	800e190 <uxr_run_session_until_data+0x28>
 800e184:	f000 fd42 	bl	800ec0c <uxr_millis>
 800e188:	1b83      	subs	r3, r0, r6
 800e18a:	1ae9      	subs	r1, r5, r3
 800e18c:	2900      	cmp	r1, #0
 800e18e:	dd07      	ble.n	800e1a0 <uxr_run_session_until_data+0x38>
 800e190:	4620      	mov	r0, r4
 800e192:	f7ff fe8f 	bl	800deb4 <listen_message_reliably>
 800e196:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800e19a:	2800      	cmp	r0, #0
 800e19c:	d0f2      	beq.n	800e184 <uxr_run_session_until_data+0x1c>
 800e19e:	bd70      	pop	{r4, r5, r6, pc}
 800e1a0:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800e1a4:	bd70      	pop	{r4, r5, r6, pc}
 800e1a6:	bf00      	nop

0800e1a8 <uxr_run_session_until_confirm_delivery>:
 800e1a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1ac:	4606      	mov	r6, r0
 800e1ae:	460d      	mov	r5, r1
 800e1b0:	f000 fd2c 	bl	800ec0c <uxr_millis>
 800e1b4:	4607      	mov	r7, r0
 800e1b6:	4630      	mov	r0, r6
 800e1b8:	f7ff fc36 	bl	800da28 <uxr_flash_output_streams>
 800e1bc:	2d00      	cmp	r5, #0
 800e1be:	f106 0808 	add.w	r8, r6, #8
 800e1c2:	bfa8      	it	ge
 800e1c4:	462c      	movge	r4, r5
 800e1c6:	da07      	bge.n	800e1d8 <uxr_run_session_until_confirm_delivery+0x30>
 800e1c8:	e00e      	b.n	800e1e8 <uxr_run_session_until_confirm_delivery+0x40>
 800e1ca:	f7ff fe73 	bl	800deb4 <listen_message_reliably>
 800e1ce:	f000 fd1d 	bl	800ec0c <uxr_millis>
 800e1d2:	1bc3      	subs	r3, r0, r7
 800e1d4:	1aec      	subs	r4, r5, r3
 800e1d6:	d407      	bmi.n	800e1e8 <uxr_run_session_until_confirm_delivery+0x40>
 800e1d8:	4640      	mov	r0, r8
 800e1da:	f000 fcbb 	bl	800eb54 <uxr_output_streams_confirmed>
 800e1de:	4603      	mov	r3, r0
 800e1e0:	4621      	mov	r1, r4
 800e1e2:	4630      	mov	r0, r6
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d0f0      	beq.n	800e1ca <uxr_run_session_until_confirm_delivery+0x22>
 800e1e8:	4640      	mov	r0, r8
 800e1ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e1ee:	f000 bcb1 	b.w	800eb54 <uxr_output_streams_confirmed>
 800e1f2:	bf00      	nop

0800e1f4 <uxr_run_session_until_all_status>:
 800e1f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e1f8:	9c08      	ldr	r4, [sp, #32]
 800e1fa:	4606      	mov	r6, r0
 800e1fc:	460f      	mov	r7, r1
 800e1fe:	4691      	mov	r9, r2
 800e200:	461d      	mov	r5, r3
 800e202:	f7ff fc11 	bl	800da28 <uxr_flash_output_streams>
 800e206:	b124      	cbz	r4, 800e212 <uxr_run_session_until_all_status+0x1e>
 800e208:	4622      	mov	r2, r4
 800e20a:	21ff      	movs	r1, #255	@ 0xff
 800e20c:	4628      	mov	r0, r5
 800e20e:	f009 fd0b 	bl	8017c28 <memset>
 800e212:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 800e216:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800e218:	f000 fcf8 	bl	800ec0c <uxr_millis>
 800e21c:	3d01      	subs	r5, #1
 800e21e:	f1a9 0902 	sub.w	r9, r9, #2
 800e222:	4680      	mov	r8, r0
 800e224:	4639      	mov	r1, r7
 800e226:	4630      	mov	r0, r6
 800e228:	f7ff fe44 	bl	800deb4 <listen_message_reliably>
 800e22c:	f000 fcee 	bl	800ec0c <uxr_millis>
 800e230:	eba0 0008 	sub.w	r0, r0, r8
 800e234:	1a39      	subs	r1, r7, r0
 800e236:	b344      	cbz	r4, 800e28a <uxr_run_session_until_all_status+0x96>
 800e238:	4628      	mov	r0, r5
 800e23a:	46ac      	mov	ip, r5
 800e23c:	2301      	movs	r3, #1
 800e23e:	e002      	b.n	800e246 <uxr_run_session_until_all_status+0x52>
 800e240:	42a3      	cmp	r3, r4
 800e242:	d20d      	bcs.n	800e260 <uxr_run_session_until_all_status+0x6c>
 800e244:	3301      	adds	r3, #1
 800e246:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 800e24a:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 800e24e:	d1f7      	bne.n	800e240 <uxr_run_session_until_all_status+0x4c>
 800e250:	42a3      	cmp	r3, r4
 800e252:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 800e256:	d213      	bcs.n	800e280 <uxr_run_session_until_all_status+0x8c>
 800e258:	2a00      	cmp	r2, #0
 800e25a:	d0f3      	beq.n	800e244 <uxr_run_session_until_all_status+0x50>
 800e25c:	2900      	cmp	r1, #0
 800e25e:	dce2      	bgt.n	800e226 <uxr_run_session_until_all_status+0x32>
 800e260:	2300      	movs	r3, #0
 800e262:	67f3      	str	r3, [r6, #124]	@ 0x7c
 800e264:	442c      	add	r4, r5
 800e266:	e001      	b.n	800e26c <uxr_run_session_until_all_status+0x78>
 800e268:	2b01      	cmp	r3, #1
 800e26a:	d812      	bhi.n	800e292 <uxr_run_session_until_all_status+0x9e>
 800e26c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800e270:	4284      	cmp	r4, r0
 800e272:	d1f9      	bne.n	800e268 <uxr_run_session_until_all_status+0x74>
 800e274:	2b01      	cmp	r3, #1
 800e276:	bf8c      	ite	hi
 800e278:	2000      	movhi	r0, #0
 800e27a:	2001      	movls	r0, #1
 800e27c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e280:	2900      	cmp	r1, #0
 800e282:	dded      	ble.n	800e260 <uxr_run_session_until_all_status+0x6c>
 800e284:	2a00      	cmp	r2, #0
 800e286:	d1ce      	bne.n	800e226 <uxr_run_session_until_all_status+0x32>
 800e288:	e7ea      	b.n	800e260 <uxr_run_session_until_all_status+0x6c>
 800e28a:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800e28c:	2001      	movs	r0, #1
 800e28e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e292:	2000      	movs	r0, #0
 800e294:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800e298 <wait_session_status>:
 800e298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e29c:	4604      	mov	r4, r0
 800e29e:	b09d      	sub	sp, #116	@ 0x74
 800e2a0:	20ff      	movs	r0, #255	@ 0xff
 800e2a2:	7160      	strb	r0, [r4, #5]
 800e2a4:	9303      	str	r3, [sp, #12]
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	f000 80b6 	beq.w	800e418 <wait_session_status+0x180>
 800e2ac:	468a      	mov	sl, r1
 800e2ae:	4691      	mov	r9, r2
 800e2b0:	f04f 0b00 	mov.w	fp, #0
 800e2b4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e2b6:	464a      	mov	r2, r9
 800e2b8:	e9d3 0500 	ldrd	r0, r5, [r3]
 800e2bc:	4651      	mov	r1, sl
 800e2be:	47a8      	blx	r5
 800e2c0:	f000 fca4 	bl	800ec0c <uxr_millis>
 800e2c4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800e2c8:	4605      	mov	r5, r0
 800e2ca:	e009      	b.n	800e2e0 <wait_session_status+0x48>
 800e2cc:	f000 fc9e 	bl	800ec0c <uxr_millis>
 800e2d0:	1b40      	subs	r0, r0, r5
 800e2d2:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	dd40      	ble.n	800e35c <wait_session_status+0xc4>
 800e2da:	7960      	ldrb	r0, [r4, #5]
 800e2dc:	28ff      	cmp	r0, #255	@ 0xff
 800e2de:	d145      	bne.n	800e36c <wait_session_status+0xd4>
 800e2e0:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800e2e2:	a908      	add	r1, sp, #32
 800e2e4:	6896      	ldr	r6, [r2, #8]
 800e2e6:	6810      	ldr	r0, [r2, #0]
 800e2e8:	aa09      	add	r2, sp, #36	@ 0x24
 800e2ea:	47b0      	blx	r6
 800e2ec:	2800      	cmp	r0, #0
 800e2ee:	d0ed      	beq.n	800e2cc <wait_session_status+0x34>
 800e2f0:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800e2f4:	a80c      	add	r0, sp, #48	@ 0x30
 800e2f6:	f7fe fe4f 	bl	800cf98 <ucdr_init_buffer>
 800e2fa:	2600      	movs	r6, #0
 800e2fc:	f10d 031e 	add.w	r3, sp, #30
 800e300:	aa07      	add	r2, sp, #28
 800e302:	a90c      	add	r1, sp, #48	@ 0x30
 800e304:	4620      	mov	r0, r4
 800e306:	f88d 601c 	strb.w	r6, [sp, #28]
 800e30a:	f000 fa87 	bl	800e81c <uxr_read_session_header>
 800e30e:	2800      	cmp	r0, #0
 800e310:	d0dc      	beq.n	800e2cc <wait_session_status+0x34>
 800e312:	4631      	mov	r1, r6
 800e314:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800e318:	f000 fb24 	bl	800e964 <uxr_stream_id_from_raw>
 800e31c:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800e320:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800e324:	9302      	str	r3, [sp, #8]
 800e326:	2f01      	cmp	r7, #1
 800e328:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 800e32c:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800e330:	d05c      	beq.n	800e3ec <wait_session_status+0x154>
 800e332:	2f02      	cmp	r7, #2
 800e334:	d020      	beq.n	800e378 <wait_session_status+0xe0>
 800e336:	2f00      	cmp	r7, #0
 800e338:	d1c8      	bne.n	800e2cc <wait_session_status+0x34>
 800e33a:	4639      	mov	r1, r7
 800e33c:	4638      	mov	r0, r7
 800e33e:	f000 fb11 	bl	800e964 <uxr_stream_id_from_raw>
 800e342:	a90c      	add	r1, sp, #48	@ 0x30
 800e344:	4602      	mov	r2, r0
 800e346:	900b      	str	r0, [sp, #44]	@ 0x2c
 800e348:	4620      	mov	r0, r4
 800e34a:	f7ff fc2b 	bl	800dba4 <read_submessage_list>
 800e34e:	f000 fc5d 	bl	800ec0c <uxr_millis>
 800e352:	1b40      	subs	r0, r0, r5
 800e354:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800e358:	2b00      	cmp	r3, #0
 800e35a:	dcbe      	bgt.n	800e2da <wait_session_status+0x42>
 800e35c:	9b03      	ldr	r3, [sp, #12]
 800e35e:	7960      	ldrb	r0, [r4, #5]
 800e360:	f10b 0b01 	add.w	fp, fp, #1
 800e364:	455b      	cmp	r3, fp
 800e366:	d001      	beq.n	800e36c <wait_session_status+0xd4>
 800e368:	28ff      	cmp	r0, #255	@ 0xff
 800e36a:	d0a3      	beq.n	800e2b4 <wait_session_status+0x1c>
 800e36c:	38ff      	subs	r0, #255	@ 0xff
 800e36e:	bf18      	it	ne
 800e370:	2001      	movne	r0, #1
 800e372:	b01d      	add	sp, #116	@ 0x74
 800e374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e378:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 800e37c:	9304      	str	r3, [sp, #16]
 800e37e:	4631      	mov	r1, r6
 800e380:	f104 0008 	add.w	r0, r4, #8
 800e384:	f000 fbdc 	bl	800eb40 <uxr_get_input_reliable_stream>
 800e388:	4680      	mov	r8, r0
 800e38a:	b348      	cbz	r0, 800e3e0 <wait_session_status+0x148>
 800e38c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e38e:	9205      	str	r2, [sp, #20]
 800e390:	a80c      	add	r0, sp, #48	@ 0x30
 800e392:	f7fe fe31 	bl	800cff8 <ucdr_buffer_remaining>
 800e396:	4603      	mov	r3, r0
 800e398:	f10d 001d 	add.w	r0, sp, #29
 800e39c:	9000      	str	r0, [sp, #0]
 800e39e:	9a05      	ldr	r2, [sp, #20]
 800e3a0:	9902      	ldr	r1, [sp, #8]
 800e3a2:	4640      	mov	r0, r8
 800e3a4:	f006 fdd0 	bl	8014f48 <uxr_receive_reliable_message>
 800e3a8:	b1d0      	cbz	r0, 800e3e0 <wait_session_status+0x148>
 800e3aa:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d03a      	beq.n	800e428 <wait_session_status+0x190>
 800e3b2:	9f04      	ldr	r7, [sp, #16]
 800e3b4:	e00a      	b.n	800e3cc <wait_session_status+0x134>
 800e3b6:	f04f 0302 	mov.w	r3, #2
 800e3ba:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 800e3be:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 800e3c2:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 800e3c6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e3c8:	f7ff fbec 	bl	800dba4 <read_submessage_list>
 800e3cc:	a914      	add	r1, sp, #80	@ 0x50
 800e3ce:	2204      	movs	r2, #4
 800e3d0:	4640      	mov	r0, r8
 800e3d2:	f006 fe39 	bl	8015048 <uxr_next_input_reliable_buffer_available>
 800e3d6:	4603      	mov	r3, r0
 800e3d8:	a914      	add	r1, sp, #80	@ 0x50
 800e3da:	4620      	mov	r0, r4
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d1ea      	bne.n	800e3b6 <wait_session_status+0x11e>
 800e3e0:	9904      	ldr	r1, [sp, #16]
 800e3e2:	4632      	mov	r2, r6
 800e3e4:	4620      	mov	r0, r4
 800e3e6:	f7ff fa59 	bl	800d89c <write_submessage_acknack.isra.0>
 800e3ea:	e76f      	b.n	800e2cc <wait_session_status+0x34>
 800e3ec:	4631      	mov	r1, r6
 800e3ee:	f104 0008 	add.w	r0, r4, #8
 800e3f2:	f000 fb9b 	bl	800eb2c <uxr_get_input_best_effort_stream>
 800e3f6:	2800      	cmp	r0, #0
 800e3f8:	f43f af68 	beq.w	800e2cc <wait_session_status+0x34>
 800e3fc:	9902      	ldr	r1, [sp, #8]
 800e3fe:	f006 fd0f 	bl	8014e20 <uxr_receive_best_effort_message>
 800e402:	2800      	cmp	r0, #0
 800e404:	f43f af62 	beq.w	800e2cc <wait_session_status+0x34>
 800e408:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800e40c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e40e:	a90c      	add	r1, sp, #48	@ 0x30
 800e410:	4620      	mov	r0, r4
 800e412:	f7ff fbc7 	bl	800dba4 <read_submessage_list>
 800e416:	e759      	b.n	800e2cc <wait_session_status+0x34>
 800e418:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e41a:	e9d3 0400 	ldrd	r0, r4, [r3]
 800e41e:	47a0      	blx	r4
 800e420:	2001      	movs	r0, #1
 800e422:	b01d      	add	sp, #116	@ 0x74
 800e424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e428:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800e42c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e42e:	a90c      	add	r1, sp, #48	@ 0x30
 800e430:	4620      	mov	r0, r4
 800e432:	f7ff fbb7 	bl	800dba4 <read_submessage_list>
 800e436:	e7bc      	b.n	800e3b2 <wait_session_status+0x11a>

0800e438 <uxr_delete_session_retries>:
 800e438:	b530      	push	{r4, r5, lr}
 800e43a:	b08f      	sub	sp, #60	@ 0x3c
 800e43c:	4604      	mov	r4, r0
 800e43e:	460d      	mov	r5, r1
 800e440:	f000 fa2e 	bl	800e8a0 <uxr_session_header_offset>
 800e444:	2300      	movs	r3, #0
 800e446:	2210      	movs	r2, #16
 800e448:	9000      	str	r0, [sp, #0]
 800e44a:	a902      	add	r1, sp, #8
 800e44c:	a806      	add	r0, sp, #24
 800e44e:	f7fe fd91 	bl	800cf74 <ucdr_init_buffer_origin_offset>
 800e452:	a906      	add	r1, sp, #24
 800e454:	4620      	mov	r0, r4
 800e456:	f000 f973 	bl	800e740 <uxr_buffer_delete_session>
 800e45a:	2200      	movs	r2, #0
 800e45c:	4611      	mov	r1, r2
 800e45e:	9b06      	ldr	r3, [sp, #24]
 800e460:	4620      	mov	r0, r4
 800e462:	f000 f9c7 	bl	800e7f4 <uxr_stamp_session_header>
 800e466:	a806      	add	r0, sp, #24
 800e468:	f7fe fdc2 	bl	800cff0 <ucdr_buffer_length>
 800e46c:	462b      	mov	r3, r5
 800e46e:	4602      	mov	r2, r0
 800e470:	a902      	add	r1, sp, #8
 800e472:	4620      	mov	r0, r4
 800e474:	f7ff ff10 	bl	800e298 <wait_session_status>
 800e478:	b118      	cbz	r0, 800e482 <uxr_delete_session_retries+0x4a>
 800e47a:	7960      	ldrb	r0, [r4, #5]
 800e47c:	fab0 f080 	clz	r0, r0
 800e480:	0940      	lsrs	r0, r0, #5
 800e482:	b00f      	add	sp, #60	@ 0x3c
 800e484:	bd30      	pop	{r4, r5, pc}
 800e486:	bf00      	nop

0800e488 <uxr_create_session>:
 800e488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e48c:	f100 0b08 	add.w	fp, r0, #8
 800e490:	b0ab      	sub	sp, #172	@ 0xac
 800e492:	4604      	mov	r4, r0
 800e494:	4658      	mov	r0, fp
 800e496:	f000 fa99 	bl	800e9cc <uxr_reset_stream_storage>
 800e49a:	4620      	mov	r0, r4
 800e49c:	f000 fa00 	bl	800e8a0 <uxr_session_header_offset>
 800e4a0:	2300      	movs	r3, #0
 800e4a2:	9000      	str	r0, [sp, #0]
 800e4a4:	221c      	movs	r2, #28
 800e4a6:	a90b      	add	r1, sp, #44	@ 0x2c
 800e4a8:	a812      	add	r0, sp, #72	@ 0x48
 800e4aa:	f7fe fd63 	bl	800cf74 <ucdr_init_buffer_origin_offset>
 800e4ae:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e4b0:	8a1a      	ldrh	r2, [r3, #16]
 800e4b2:	3a04      	subs	r2, #4
 800e4b4:	b292      	uxth	r2, r2
 800e4b6:	a912      	add	r1, sp, #72	@ 0x48
 800e4b8:	4620      	mov	r0, r4
 800e4ba:	f000 f917 	bl	800e6ec <uxr_buffer_create_session>
 800e4be:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e4c0:	4620      	mov	r0, r4
 800e4c2:	f000 f983 	bl	800e7cc <uxr_stamp_create_session_header>
 800e4c6:	a812      	add	r0, sp, #72	@ 0x48
 800e4c8:	f7fe fd92 	bl	800cff0 <ucdr_buffer_length>
 800e4cc:	23ff      	movs	r3, #255	@ 0xff
 800e4ce:	7163      	strb	r3, [r4, #5]
 800e4d0:	230a      	movs	r3, #10
 800e4d2:	46da      	mov	sl, fp
 800e4d4:	9303      	str	r3, [sp, #12]
 800e4d6:	4683      	mov	fp, r0
 800e4d8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e4da:	465a      	mov	r2, fp
 800e4dc:	e9d3 0500 	ldrd	r0, r5, [r3]
 800e4e0:	a90b      	add	r1, sp, #44	@ 0x2c
 800e4e2:	47a8      	blx	r5
 800e4e4:	f000 fb92 	bl	800ec0c <uxr_millis>
 800e4e8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800e4ec:	4605      	mov	r5, r0
 800e4ee:	e009      	b.n	800e504 <uxr_create_session+0x7c>
 800e4f0:	f000 fb8c 	bl	800ec0c <uxr_millis>
 800e4f4:	1b40      	subs	r0, r0, r5
 800e4f6:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	7962      	ldrb	r2, [r4, #5]
 800e4fe:	dd38      	ble.n	800e572 <uxr_create_session+0xea>
 800e500:	2aff      	cmp	r2, #255	@ 0xff
 800e502:	d13c      	bne.n	800e57e <uxr_create_session+0xf6>
 800e504:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800e506:	a907      	add	r1, sp, #28
 800e508:	6896      	ldr	r6, [r2, #8]
 800e50a:	6810      	ldr	r0, [r2, #0]
 800e50c:	aa08      	add	r2, sp, #32
 800e50e:	47b0      	blx	r6
 800e510:	2800      	cmp	r0, #0
 800e512:	d0ed      	beq.n	800e4f0 <uxr_create_session+0x68>
 800e514:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800e518:	a81a      	add	r0, sp, #104	@ 0x68
 800e51a:	f7fe fd3d 	bl	800cf98 <ucdr_init_buffer>
 800e51e:	2600      	movs	r6, #0
 800e520:	f10d 031a 	add.w	r3, sp, #26
 800e524:	aa06      	add	r2, sp, #24
 800e526:	a91a      	add	r1, sp, #104	@ 0x68
 800e528:	4620      	mov	r0, r4
 800e52a:	f88d 6018 	strb.w	r6, [sp, #24]
 800e52e:	f000 f975 	bl	800e81c <uxr_read_session_header>
 800e532:	2800      	cmp	r0, #0
 800e534:	d0dc      	beq.n	800e4f0 <uxr_create_session+0x68>
 800e536:	4631      	mov	r1, r6
 800e538:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800e53c:	f000 fa12 	bl	800e964 <uxr_stream_id_from_raw>
 800e540:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800e544:	2e01      	cmp	r6, #1
 800e546:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800e54a:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 800e54e:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800e552:	d053      	beq.n	800e5fc <uxr_create_session+0x174>
 800e554:	2e02      	cmp	r6, #2
 800e556:	d018      	beq.n	800e58a <uxr_create_session+0x102>
 800e558:	2e00      	cmp	r6, #0
 800e55a:	d1c9      	bne.n	800e4f0 <uxr_create_session+0x68>
 800e55c:	4631      	mov	r1, r6
 800e55e:	4630      	mov	r0, r6
 800e560:	f000 fa00 	bl	800e964 <uxr_stream_id_from_raw>
 800e564:	a91a      	add	r1, sp, #104	@ 0x68
 800e566:	4602      	mov	r2, r0
 800e568:	900a      	str	r0, [sp, #40]	@ 0x28
 800e56a:	4620      	mov	r0, r4
 800e56c:	f7ff fb1a 	bl	800dba4 <read_submessage_list>
 800e570:	e7be      	b.n	800e4f0 <uxr_create_session+0x68>
 800e572:	9b03      	ldr	r3, [sp, #12]
 800e574:	3b01      	subs	r3, #1
 800e576:	9303      	str	r3, [sp, #12]
 800e578:	d001      	beq.n	800e57e <uxr_create_session+0xf6>
 800e57a:	2aff      	cmp	r2, #255	@ 0xff
 800e57c:	d0ac      	beq.n	800e4d8 <uxr_create_session+0x50>
 800e57e:	2a00      	cmp	r2, #0
 800e580:	d051      	beq.n	800e626 <uxr_create_session+0x19e>
 800e582:	2000      	movs	r0, #0
 800e584:	b02b      	add	sp, #172	@ 0xac
 800e586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e58a:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800e58e:	9304      	str	r3, [sp, #16]
 800e590:	4639      	mov	r1, r7
 800e592:	4650      	mov	r0, sl
 800e594:	f000 fad4 	bl	800eb40 <uxr_get_input_reliable_stream>
 800e598:	4680      	mov	r8, r0
 800e59a:	b348      	cbz	r0, 800e5f0 <uxr_create_session+0x168>
 800e59c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800e59e:	9205      	str	r2, [sp, #20]
 800e5a0:	a81a      	add	r0, sp, #104	@ 0x68
 800e5a2:	f7fe fd29 	bl	800cff8 <ucdr_buffer_remaining>
 800e5a6:	4603      	mov	r3, r0
 800e5a8:	f10d 0019 	add.w	r0, sp, #25
 800e5ac:	9000      	str	r0, [sp, #0]
 800e5ae:	9a05      	ldr	r2, [sp, #20]
 800e5b0:	4649      	mov	r1, r9
 800e5b2:	4640      	mov	r0, r8
 800e5b4:	f006 fcc8 	bl	8014f48 <uxr_receive_reliable_message>
 800e5b8:	b1d0      	cbz	r0, 800e5f0 <uxr_create_session+0x168>
 800e5ba:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d038      	beq.n	800e634 <uxr_create_session+0x1ac>
 800e5c2:	9e04      	ldr	r6, [sp, #16]
 800e5c4:	e00a      	b.n	800e5dc <uxr_create_session+0x154>
 800e5c6:	f04f 0302 	mov.w	r3, #2
 800e5ca:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 800e5ce:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 800e5d2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e5d6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e5d8:	f7ff fae4 	bl	800dba4 <read_submessage_list>
 800e5dc:	a922      	add	r1, sp, #136	@ 0x88
 800e5de:	2204      	movs	r2, #4
 800e5e0:	4640      	mov	r0, r8
 800e5e2:	f006 fd31 	bl	8015048 <uxr_next_input_reliable_buffer_available>
 800e5e6:	4603      	mov	r3, r0
 800e5e8:	a922      	add	r1, sp, #136	@ 0x88
 800e5ea:	4620      	mov	r0, r4
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d1ea      	bne.n	800e5c6 <uxr_create_session+0x13e>
 800e5f0:	9904      	ldr	r1, [sp, #16]
 800e5f2:	463a      	mov	r2, r7
 800e5f4:	4620      	mov	r0, r4
 800e5f6:	f7ff f951 	bl	800d89c <write_submessage_acknack.isra.0>
 800e5fa:	e779      	b.n	800e4f0 <uxr_create_session+0x68>
 800e5fc:	4639      	mov	r1, r7
 800e5fe:	4650      	mov	r0, sl
 800e600:	f000 fa94 	bl	800eb2c <uxr_get_input_best_effort_stream>
 800e604:	2800      	cmp	r0, #0
 800e606:	f43f af73 	beq.w	800e4f0 <uxr_create_session+0x68>
 800e60a:	4649      	mov	r1, r9
 800e60c:	f006 fc08 	bl	8014e20 <uxr_receive_best_effort_message>
 800e610:	2800      	cmp	r0, #0
 800e612:	f43f af6d 	beq.w	800e4f0 <uxr_create_session+0x68>
 800e616:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800e61a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e61c:	a91a      	add	r1, sp, #104	@ 0x68
 800e61e:	4620      	mov	r0, r4
 800e620:	f7ff fac0 	bl	800dba4 <read_submessage_list>
 800e624:	e764      	b.n	800e4f0 <uxr_create_session+0x68>
 800e626:	4650      	mov	r0, sl
 800e628:	f000 f9d0 	bl	800e9cc <uxr_reset_stream_storage>
 800e62c:	2001      	movs	r0, #1
 800e62e:	b02b      	add	sp, #172	@ 0xac
 800e630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e634:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800e638:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e63a:	a91a      	add	r1, sp, #104	@ 0x68
 800e63c:	4620      	mov	r0, r4
 800e63e:	f7ff fab1 	bl	800dba4 <read_submessage_list>
 800e642:	e7be      	b.n	800e5c2 <uxr_create_session+0x13a>

0800e644 <uxr_prepare_stream_to_write_submessage>:
 800e644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e648:	b082      	sub	sp, #8
 800e64a:	4682      	mov	sl, r0
 800e64c:	4610      	mov	r0, r2
 800e64e:	4615      	mov	r5, r2
 800e650:	461e      	mov	r6, r3
 800e652:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 800e656:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 800e65a:	9101      	str	r1, [sp, #4]
 800e65c:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800e660:	f000 face 	bl	800ec00 <uxr_submessage_padding>
 800e664:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e668:	f105 0904 	add.w	r9, r5, #4
 800e66c:	2b01      	cmp	r3, #1
 800e66e:	4481      	add	r9, r0
 800e670:	d01d      	beq.n	800e6ae <uxr_prepare_stream_to_write_submessage+0x6a>
 800e672:	2b02      	cmp	r3, #2
 800e674:	d116      	bne.n	800e6a4 <uxr_prepare_stream_to_write_submessage+0x60>
 800e676:	4621      	mov	r1, r4
 800e678:	f10a 0008 	add.w	r0, sl, #8
 800e67c:	f000 fa4c 	bl	800eb18 <uxr_get_output_reliable_stream>
 800e680:	4604      	mov	r4, r0
 800e682:	b158      	cbz	r0, 800e69c <uxr_prepare_stream_to_write_submessage+0x58>
 800e684:	4649      	mov	r1, r9
 800e686:	4632      	mov	r2, r6
 800e688:	f006 fe9a 	bl	80153c0 <uxr_prepare_reliable_buffer_to_write>
 800e68c:	4604      	mov	r4, r0
 800e68e:	b12c      	cbz	r4, 800e69c <uxr_prepare_stream_to_write_submessage+0x58>
 800e690:	4643      	mov	r3, r8
 800e692:	b2aa      	uxth	r2, r5
 800e694:	4639      	mov	r1, r7
 800e696:	4630      	mov	r0, r6
 800e698:	f000 fa72 	bl	800eb80 <uxr_buffer_submessage_header>
 800e69c:	4620      	mov	r0, r4
 800e69e:	b002      	add	sp, #8
 800e6a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6a4:	2400      	movs	r4, #0
 800e6a6:	4620      	mov	r0, r4
 800e6a8:	b002      	add	sp, #8
 800e6aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6ae:	4621      	mov	r1, r4
 800e6b0:	f10a 0008 	add.w	r0, sl, #8
 800e6b4:	f000 fa28 	bl	800eb08 <uxr_get_output_best_effort_stream>
 800e6b8:	4604      	mov	r4, r0
 800e6ba:	2800      	cmp	r0, #0
 800e6bc:	d0ee      	beq.n	800e69c <uxr_prepare_stream_to_write_submessage+0x58>
 800e6be:	4649      	mov	r1, r9
 800e6c0:	4632      	mov	r2, r6
 800e6c2:	f006 fdad 	bl	8015220 <uxr_prepare_best_effort_buffer_to_write>
 800e6c6:	4604      	mov	r4, r0
 800e6c8:	e7e1      	b.n	800e68e <uxr_prepare_stream_to_write_submessage+0x4a>
 800e6ca:	bf00      	nop

0800e6cc <uxr_init_session_info>:
 800e6cc:	0e13      	lsrs	r3, r2, #24
 800e6ce:	7043      	strb	r3, [r0, #1]
 800e6d0:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800e6d4:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800e6d8:	7001      	strb	r1, [r0, #0]
 800e6da:	70c3      	strb	r3, [r0, #3]
 800e6dc:	2109      	movs	r1, #9
 800e6de:	23ff      	movs	r3, #255	@ 0xff
 800e6e0:	f880 c002 	strb.w	ip, [r0, #2]
 800e6e4:	7102      	strb	r2, [r0, #4]
 800e6e6:	80c1      	strh	r1, [r0, #6]
 800e6e8:	7143      	strb	r3, [r0, #5]
 800e6ea:	4770      	bx	lr

0800e6ec <uxr_buffer_create_session>:
 800e6ec:	b530      	push	{r4, r5, lr}
 800e6ee:	b089      	sub	sp, #36	@ 0x24
 800e6f0:	2300      	movs	r3, #0
 800e6f2:	4d12      	ldr	r5, [pc, #72]	@ (800e73c <uxr_buffer_create_session+0x50>)
 800e6f4:	9307      	str	r3, [sp, #28]
 800e6f6:	f8ad 201c 	strh.w	r2, [sp, #28]
 800e6fa:	2201      	movs	r2, #1
 800e6fc:	9301      	str	r3, [sp, #4]
 800e6fe:	80c2      	strh	r2, [r0, #6]
 800e700:	f88d 2004 	strb.w	r2, [sp, #4]
 800e704:	682a      	ldr	r2, [r5, #0]
 800e706:	9200      	str	r2, [sp, #0]
 800e708:	88aa      	ldrh	r2, [r5, #4]
 800e70a:	f8ad 2006 	strh.w	r2, [sp, #6]
 800e70e:	f8d0 2001 	ldr.w	r2, [r0, #1]
 800e712:	9202      	str	r2, [sp, #8]
 800e714:	460c      	mov	r4, r1
 800e716:	7802      	ldrb	r2, [r0, #0]
 800e718:	9303      	str	r3, [sp, #12]
 800e71a:	4619      	mov	r1, r3
 800e71c:	f88d 200c 	strb.w	r2, [sp, #12]
 800e720:	4620      	mov	r0, r4
 800e722:	2210      	movs	r2, #16
 800e724:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800e728:	9306      	str	r3, [sp, #24]
 800e72a:	f000 fa29 	bl	800eb80 <uxr_buffer_submessage_header>
 800e72e:	4669      	mov	r1, sp
 800e730:	4620      	mov	r0, r4
 800e732:	f001 fa6d 	bl	800fc10 <uxr_serialize_CREATE_CLIENT_Payload>
 800e736:	b009      	add	sp, #36	@ 0x24
 800e738:	bd30      	pop	{r4, r5, pc}
 800e73a:	bf00      	nop
 800e73c:	08019ddc 	.word	0x08019ddc

0800e740 <uxr_buffer_delete_session>:
 800e740:	b510      	push	{r4, lr}
 800e742:	4b0c      	ldr	r3, [pc, #48]	@ (800e774 <uxr_buffer_delete_session+0x34>)
 800e744:	b082      	sub	sp, #8
 800e746:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 800e74a:	f8ad c006 	strh.w	ip, [sp, #6]
 800e74e:	460c      	mov	r4, r1
 800e750:	2202      	movs	r2, #2
 800e752:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e756:	80c2      	strh	r2, [r0, #6]
 800e758:	f8ad 3004 	strh.w	r3, [sp, #4]
 800e75c:	2204      	movs	r2, #4
 800e75e:	2300      	movs	r3, #0
 800e760:	2103      	movs	r1, #3
 800e762:	4620      	mov	r0, r4
 800e764:	f000 fa0c 	bl	800eb80 <uxr_buffer_submessage_header>
 800e768:	a901      	add	r1, sp, #4
 800e76a:	4620      	mov	r0, r4
 800e76c:	f001 faf6 	bl	800fd5c <uxr_serialize_DELETE_Payload>
 800e770:	b002      	add	sp, #8
 800e772:	bd10      	pop	{r4, pc}
 800e774:	08019ddc 	.word	0x08019ddc

0800e778 <uxr_read_create_session_status>:
 800e778:	b510      	push	{r4, lr}
 800e77a:	b088      	sub	sp, #32
 800e77c:	4604      	mov	r4, r0
 800e77e:	4608      	mov	r0, r1
 800e780:	a901      	add	r1, sp, #4
 800e782:	f001 fafb 	bl	800fd7c <uxr_deserialize_STATUS_AGENT_Payload>
 800e786:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e78a:	7163      	strb	r3, [r4, #5]
 800e78c:	b008      	add	sp, #32
 800e78e:	bd10      	pop	{r4, pc}

0800e790 <uxr_read_delete_session_status>:
 800e790:	b510      	push	{r4, lr}
 800e792:	4604      	mov	r4, r0
 800e794:	b084      	sub	sp, #16
 800e796:	4608      	mov	r0, r1
 800e798:	a902      	add	r1, sp, #8
 800e79a:	f001 fb1f 	bl	800fddc <uxr_deserialize_STATUS_Payload>
 800e79e:	88e3      	ldrh	r3, [r4, #6]
 800e7a0:	2b02      	cmp	r3, #2
 800e7a2:	d001      	beq.n	800e7a8 <uxr_read_delete_session_status+0x18>
 800e7a4:	b004      	add	sp, #16
 800e7a6:	bd10      	pop	{r4, pc}
 800e7a8:	f10d 000a 	add.w	r0, sp, #10
 800e7ac:	f7fe fecc 	bl	800d548 <uxr_object_id_from_raw>
 800e7b0:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800e7b4:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800e7b8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800e7bc:	b29b      	uxth	r3, r3
 800e7be:	2b02      	cmp	r3, #2
 800e7c0:	bf04      	itt	eq
 800e7c2:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 800e7c6:	7163      	strbeq	r3, [r4, #5]
 800e7c8:	b004      	add	sp, #16
 800e7ca:	bd10      	pop	{r4, pc}

0800e7cc <uxr_stamp_create_session_header>:
 800e7cc:	b510      	push	{r4, lr}
 800e7ce:	2208      	movs	r2, #8
 800e7d0:	b08a      	sub	sp, #40	@ 0x28
 800e7d2:	4604      	mov	r4, r0
 800e7d4:	eb0d 0002 	add.w	r0, sp, r2
 800e7d8:	f7fe fbde 	bl	800cf98 <ucdr_init_buffer>
 800e7dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e7e0:	9400      	str	r4, [sp, #0]
 800e7e2:	2300      	movs	r3, #0
 800e7e4:	461a      	mov	r2, r3
 800e7e6:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 800e7ea:	a802      	add	r0, sp, #8
 800e7ec:	f000 fbc2 	bl	800ef74 <uxr_serialize_message_header>
 800e7f0:	b00a      	add	sp, #40	@ 0x28
 800e7f2:	bd10      	pop	{r4, pc}

0800e7f4 <uxr_stamp_session_header>:
 800e7f4:	b530      	push	{r4, r5, lr}
 800e7f6:	b08d      	sub	sp, #52	@ 0x34
 800e7f8:	4604      	mov	r4, r0
 800e7fa:	460d      	mov	r5, r1
 800e7fc:	9203      	str	r2, [sp, #12]
 800e7fe:	4619      	mov	r1, r3
 800e800:	a804      	add	r0, sp, #16
 800e802:	2208      	movs	r2, #8
 800e804:	f7fe fbc8 	bl	800cf98 <ucdr_init_buffer>
 800e808:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e80c:	9b03      	ldr	r3, [sp, #12]
 800e80e:	9400      	str	r4, [sp, #0]
 800e810:	462a      	mov	r2, r5
 800e812:	a804      	add	r0, sp, #16
 800e814:	f000 fbae 	bl	800ef74 <uxr_serialize_message_header>
 800e818:	b00d      	add	sp, #52	@ 0x34
 800e81a:	bd30      	pop	{r4, r5, pc}

0800e81c <uxr_read_session_header>:
 800e81c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e820:	4607      	mov	r7, r0
 800e822:	b084      	sub	sp, #16
 800e824:	4608      	mov	r0, r1
 800e826:	460c      	mov	r4, r1
 800e828:	4615      	mov	r5, r2
 800e82a:	461e      	mov	r6, r3
 800e82c:	f7fe fbe4 	bl	800cff8 <ucdr_buffer_remaining>
 800e830:	2808      	cmp	r0, #8
 800e832:	d803      	bhi.n	800e83c <uxr_read_session_header+0x20>
 800e834:	2000      	movs	r0, #0
 800e836:	b004      	add	sp, #16
 800e838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e83c:	f10d 080c 	add.w	r8, sp, #12
 800e840:	4633      	mov	r3, r6
 800e842:	462a      	mov	r2, r5
 800e844:	f8cd 8000 	str.w	r8, [sp]
 800e848:	4620      	mov	r0, r4
 800e84a:	f10d 010b 	add.w	r1, sp, #11
 800e84e:	f000 fbaf 	bl	800efb0 <uxr_deserialize_message_header>
 800e852:	783a      	ldrb	r2, [r7, #0]
 800e854:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800e858:	4293      	cmp	r3, r2
 800e85a:	d1eb      	bne.n	800e834 <uxr_read_session_header+0x18>
 800e85c:	061b      	lsls	r3, r3, #24
 800e85e:	d41c      	bmi.n	800e89a <uxr_read_session_header+0x7e>
 800e860:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800e864:	787b      	ldrb	r3, [r7, #1]
 800e866:	429a      	cmp	r2, r3
 800e868:	d003      	beq.n	800e872 <uxr_read_session_header+0x56>
 800e86a:	2001      	movs	r0, #1
 800e86c:	f080 0001 	eor.w	r0, r0, #1
 800e870:	e7e1      	b.n	800e836 <uxr_read_session_header+0x1a>
 800e872:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800e876:	78bb      	ldrb	r3, [r7, #2]
 800e878:	429a      	cmp	r2, r3
 800e87a:	f107 0102 	add.w	r1, r7, #2
 800e87e:	d1f4      	bne.n	800e86a <uxr_read_session_header+0x4e>
 800e880:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800e884:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e888:	429a      	cmp	r2, r3
 800e88a:	d1ee      	bne.n	800e86a <uxr_read_session_header+0x4e>
 800e88c:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800e890:	784b      	ldrb	r3, [r1, #1]
 800e892:	429a      	cmp	r2, r3
 800e894:	d1e9      	bne.n	800e86a <uxr_read_session_header+0x4e>
 800e896:	2000      	movs	r0, #0
 800e898:	e7e8      	b.n	800e86c <uxr_read_session_header+0x50>
 800e89a:	2001      	movs	r0, #1
 800e89c:	e7cb      	b.n	800e836 <uxr_read_session_header+0x1a>
 800e89e:	bf00      	nop

0800e8a0 <uxr_session_header_offset>:
 800e8a0:	f990 3000 	ldrsb.w	r3, [r0]
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	bfac      	ite	ge
 800e8a8:	2008      	movge	r0, #8
 800e8aa:	2004      	movlt	r0, #4
 800e8ac:	4770      	bx	lr
 800e8ae:	bf00      	nop

0800e8b0 <uxr_init_base_object_request>:
 800e8b0:	b510      	push	{r4, lr}
 800e8b2:	88c3      	ldrh	r3, [r0, #6]
 800e8b4:	b082      	sub	sp, #8
 800e8b6:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 800e8ba:	9101      	str	r1, [sp, #4]
 800e8bc:	f1a3 010a 	sub.w	r1, r3, #10
 800e8c0:	b289      	uxth	r1, r1
 800e8c2:	42a1      	cmp	r1, r4
 800e8c4:	d80e      	bhi.n	800e8e4 <uxr_init_base_object_request+0x34>
 800e8c6:	3301      	adds	r3, #1
 800e8c8:	b29c      	uxth	r4, r3
 800e8ca:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800e8ce:	b2db      	uxtb	r3, r3
 800e8d0:	80c4      	strh	r4, [r0, #6]
 800e8d2:	9801      	ldr	r0, [sp, #4]
 800e8d4:	7011      	strb	r1, [r2, #0]
 800e8d6:	7053      	strb	r3, [r2, #1]
 800e8d8:	1c91      	adds	r1, r2, #2
 800e8da:	f7fe fe49 	bl	800d570 <uxr_object_id_to_raw>
 800e8de:	4620      	mov	r0, r4
 800e8e0:	b002      	add	sp, #8
 800e8e2:	bd10      	pop	{r4, pc}
 800e8e4:	230a      	movs	r3, #10
 800e8e6:	2100      	movs	r1, #0
 800e8e8:	461c      	mov	r4, r3
 800e8ea:	e7f1      	b.n	800e8d0 <uxr_init_base_object_request+0x20>

0800e8ec <uxr_parse_base_object_request>:
 800e8ec:	b570      	push	{r4, r5, r6, lr}
 800e8ee:	4604      	mov	r4, r0
 800e8f0:	3002      	adds	r0, #2
 800e8f2:	460d      	mov	r5, r1
 800e8f4:	4616      	mov	r6, r2
 800e8f6:	f7fe fe27 	bl	800d548 <uxr_object_id_from_raw>
 800e8fa:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800e8fe:	8028      	strh	r0, [r5, #0]
 800e900:	806b      	strh	r3, [r5, #2]
 800e902:	7822      	ldrb	r2, [r4, #0]
 800e904:	7863      	ldrb	r3, [r4, #1]
 800e906:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800e90a:	8033      	strh	r3, [r6, #0]
 800e90c:	bd70      	pop	{r4, r5, r6, pc}
 800e90e:	bf00      	nop

0800e910 <uxr_stream_id>:
 800e910:	2901      	cmp	r1, #1
 800e912:	b082      	sub	sp, #8
 800e914:	d01d      	beq.n	800e952 <uxr_stream_id+0x42>
 800e916:	2902      	cmp	r1, #2
 800e918:	f04f 0c00 	mov.w	ip, #0
 800e91c:	d01e      	beq.n	800e95c <uxr_stream_id+0x4c>
 800e91e:	2300      	movs	r3, #0
 800e920:	f36c 0307 	bfi	r3, ip, #0, #8
 800e924:	f360 230f 	bfi	r3, r0, #8, #8
 800e928:	f361 4317 	bfi	r3, r1, #16, #8
 800e92c:	f362 631f 	bfi	r3, r2, #24, #8
 800e930:	b2da      	uxtb	r2, r3
 800e932:	2000      	movs	r0, #0
 800e934:	f362 0007 	bfi	r0, r2, #0, #8
 800e938:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800e93c:	f362 200f 	bfi	r0, r2, #8, #8
 800e940:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800e944:	f362 4017 	bfi	r0, r2, #16, #8
 800e948:	0e1b      	lsrs	r3, r3, #24
 800e94a:	f363 601f 	bfi	r0, r3, #24, #8
 800e94e:	b002      	add	sp, #8
 800e950:	4770      	bx	lr
 800e952:	f100 0c01 	add.w	ip, r0, #1
 800e956:	fa5f fc8c 	uxtb.w	ip, ip
 800e95a:	e7e0      	b.n	800e91e <uxr_stream_id+0xe>
 800e95c:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 800e960:	e7dd      	b.n	800e91e <uxr_stream_id+0xe>
 800e962:	bf00      	nop

0800e964 <uxr_stream_id_from_raw>:
 800e964:	b082      	sub	sp, #8
 800e966:	b130      	cbz	r0, 800e976 <uxr_stream_id_from_raw+0x12>
 800e968:	0603      	lsls	r3, r0, #24
 800e96a:	d420      	bmi.n	800e9ae <uxr_stream_id_from_raw+0x4a>
 800e96c:	1e42      	subs	r2, r0, #1
 800e96e:	b2d2      	uxtb	r2, r2
 800e970:	f04f 0c01 	mov.w	ip, #1
 800e974:	e001      	b.n	800e97a <uxr_stream_id_from_raw+0x16>
 800e976:	4684      	mov	ip, r0
 800e978:	4602      	mov	r2, r0
 800e97a:	2300      	movs	r3, #0
 800e97c:	f360 0307 	bfi	r3, r0, #0, #8
 800e980:	f362 230f 	bfi	r3, r2, #8, #8
 800e984:	f36c 4317 	bfi	r3, ip, #16, #8
 800e988:	f361 631f 	bfi	r3, r1, #24, #8
 800e98c:	b2da      	uxtb	r2, r3
 800e98e:	2000      	movs	r0, #0
 800e990:	f362 0007 	bfi	r0, r2, #0, #8
 800e994:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800e998:	f362 200f 	bfi	r0, r2, #8, #8
 800e99c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800e9a0:	f362 4017 	bfi	r0, r2, #16, #8
 800e9a4:	0e1b      	lsrs	r3, r3, #24
 800e9a6:	f363 601f 	bfi	r0, r3, #24, #8
 800e9aa:	b002      	add	sp, #8
 800e9ac:	4770      	bx	lr
 800e9ae:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 800e9b2:	f04f 0c02 	mov.w	ip, #2
 800e9b6:	e7e0      	b.n	800e97a <uxr_stream_id_from_raw+0x16>

0800e9b8 <uxr_init_stream_storage>:
 800e9b8:	2300      	movs	r3, #0
 800e9ba:	7403      	strb	r3, [r0, #16]
 800e9bc:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 800e9c0:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 800e9c4:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 800e9c8:	4770      	bx	lr
 800e9ca:	bf00      	nop

0800e9cc <uxr_reset_stream_storage>:
 800e9cc:	b570      	push	{r4, r5, r6, lr}
 800e9ce:	7c03      	ldrb	r3, [r0, #16]
 800e9d0:	4604      	mov	r4, r0
 800e9d2:	b153      	cbz	r3, 800e9ea <uxr_reset_stream_storage+0x1e>
 800e9d4:	4606      	mov	r6, r0
 800e9d6:	2500      	movs	r5, #0
 800e9d8:	4630      	mov	r0, r6
 800e9da:	f006 fc1b 	bl	8015214 <uxr_reset_output_best_effort_stream>
 800e9de:	7c23      	ldrb	r3, [r4, #16]
 800e9e0:	3501      	adds	r5, #1
 800e9e2:	42ab      	cmp	r3, r5
 800e9e4:	f106 0610 	add.w	r6, r6, #16
 800e9e8:	d8f6      	bhi.n	800e9d8 <uxr_reset_stream_storage+0xc>
 800e9ea:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800e9ee:	b163      	cbz	r3, 800ea0a <uxr_reset_stream_storage+0x3e>
 800e9f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e9f4:	2500      	movs	r5, #0
 800e9f6:	4630      	mov	r0, r6
 800e9f8:	f006 fa0e 	bl	8014e18 <uxr_reset_input_best_effort_stream>
 800e9fc:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800ea00:	3501      	adds	r5, #1
 800ea02:	42ab      	cmp	r3, r5
 800ea04:	f106 0602 	add.w	r6, r6, #2
 800ea08:	d8f5      	bhi.n	800e9f6 <uxr_reset_stream_storage+0x2a>
 800ea0a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800ea0e:	b163      	cbz	r3, 800ea2a <uxr_reset_stream_storage+0x5e>
 800ea10:	f104 0618 	add.w	r6, r4, #24
 800ea14:	2500      	movs	r5, #0
 800ea16:	4630      	mov	r0, r6
 800ea18:	f006 fca8 	bl	801536c <uxr_reset_output_reliable_stream>
 800ea1c:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800ea20:	3501      	adds	r5, #1
 800ea22:	42ab      	cmp	r3, r5
 800ea24:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 800ea28:	d8f5      	bhi.n	800ea16 <uxr_reset_stream_storage+0x4a>
 800ea2a:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800ea2e:	b163      	cbz	r3, 800ea4a <uxr_reset_stream_storage+0x7e>
 800ea30:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 800ea34:	2500      	movs	r5, #0
 800ea36:	4630      	mov	r0, r6
 800ea38:	f006 fa62 	bl	8014f00 <uxr_reset_input_reliable_stream>
 800ea3c:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800ea40:	3501      	adds	r5, #1
 800ea42:	42ab      	cmp	r3, r5
 800ea44:	f106 0618 	add.w	r6, r6, #24
 800ea48:	d8f5      	bhi.n	800ea36 <uxr_reset_stream_storage+0x6a>
 800ea4a:	bd70      	pop	{r4, r5, r6, pc}

0800ea4c <uxr_add_output_best_effort_buffer>:
 800ea4c:	b510      	push	{r4, lr}
 800ea4e:	7c04      	ldrb	r4, [r0, #16]
 800ea50:	f104 0c01 	add.w	ip, r4, #1
 800ea54:	b082      	sub	sp, #8
 800ea56:	f880 c010 	strb.w	ip, [r0, #16]
 800ea5a:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800ea5e:	f006 fbcf 	bl	8015200 <uxr_init_output_best_effort_stream>
 800ea62:	2201      	movs	r2, #1
 800ea64:	4611      	mov	r1, r2
 800ea66:	4620      	mov	r0, r4
 800ea68:	b002      	add	sp, #8
 800ea6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea6e:	f7ff bf4f 	b.w	800e910 <uxr_stream_id>
 800ea72:	bf00      	nop

0800ea74 <uxr_add_output_reliable_buffer>:
 800ea74:	b510      	push	{r4, lr}
 800ea76:	b084      	sub	sp, #16
 800ea78:	4684      	mov	ip, r0
 800ea7a:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800ea7e:	9000      	str	r0, [sp, #0]
 800ea80:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 800ea84:	2028      	movs	r0, #40	@ 0x28
 800ea86:	fb00 c004 	mla	r0, r0, r4, ip
 800ea8a:	f104 0e01 	add.w	lr, r4, #1
 800ea8e:	3018      	adds	r0, #24
 800ea90:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 800ea94:	f006 fc32 	bl	80152fc <uxr_init_output_reliable_stream>
 800ea98:	2201      	movs	r2, #1
 800ea9a:	2102      	movs	r1, #2
 800ea9c:	4620      	mov	r0, r4
 800ea9e:	b004      	add	sp, #16
 800eaa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eaa4:	f7ff bf34 	b.w	800e910 <uxr_stream_id>

0800eaa8 <uxr_add_input_best_effort_buffer>:
 800eaa8:	b510      	push	{r4, lr}
 800eaaa:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 800eaae:	4603      	mov	r3, r0
 800eab0:	1c62      	adds	r2, r4, #1
 800eab2:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 800eab6:	b082      	sub	sp, #8
 800eab8:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800eabc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800eac0:	f006 f9a6 	bl	8014e10 <uxr_init_input_best_effort_stream>
 800eac4:	2200      	movs	r2, #0
 800eac6:	2101      	movs	r1, #1
 800eac8:	4620      	mov	r0, r4
 800eaca:	b002      	add	sp, #8
 800eacc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ead0:	f7ff bf1e 	b.w	800e910 <uxr_stream_id>

0800ead4 <uxr_add_input_reliable_buffer>:
 800ead4:	b510      	push	{r4, lr}
 800ead6:	b084      	sub	sp, #16
 800ead8:	4684      	mov	ip, r0
 800eada:	9806      	ldr	r0, [sp, #24]
 800eadc:	9000      	str	r0, [sp, #0]
 800eade:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 800eae2:	2018      	movs	r0, #24
 800eae4:	fb00 c004 	mla	r0, r0, r4, ip
 800eae8:	f104 0e01 	add.w	lr, r4, #1
 800eaec:	3048      	adds	r0, #72	@ 0x48
 800eaee:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 800eaf2:	f006 f9d9 	bl	8014ea8 <uxr_init_input_reliable_stream>
 800eaf6:	2200      	movs	r2, #0
 800eaf8:	2102      	movs	r1, #2
 800eafa:	4620      	mov	r0, r4
 800eafc:	b004      	add	sp, #16
 800eafe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eb02:	f7ff bf05 	b.w	800e910 <uxr_stream_id>
 800eb06:	bf00      	nop

0800eb08 <uxr_get_output_best_effort_stream>:
 800eb08:	7c03      	ldrb	r3, [r0, #16]
 800eb0a:	428b      	cmp	r3, r1
 800eb0c:	bf8c      	ite	hi
 800eb0e:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800eb12:	2000      	movls	r0, #0
 800eb14:	4770      	bx	lr
 800eb16:	bf00      	nop

0800eb18 <uxr_get_output_reliable_stream>:
 800eb18:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800eb1c:	428b      	cmp	r3, r1
 800eb1e:	bf83      	ittte	hi
 800eb20:	2328      	movhi	r3, #40	@ 0x28
 800eb22:	fb03 0001 	mlahi	r0, r3, r1, r0
 800eb26:	3018      	addhi	r0, #24
 800eb28:	2000      	movls	r0, #0
 800eb2a:	4770      	bx	lr

0800eb2c <uxr_get_input_best_effort_stream>:
 800eb2c:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800eb30:	428b      	cmp	r3, r1
 800eb32:	bf86      	itte	hi
 800eb34:	3121      	addhi	r1, #33	@ 0x21
 800eb36:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 800eb3a:	2000      	movls	r0, #0
 800eb3c:	4770      	bx	lr
 800eb3e:	bf00      	nop

0800eb40 <uxr_get_input_reliable_stream>:
 800eb40:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 800eb44:	428b      	cmp	r3, r1
 800eb46:	bf83      	ittte	hi
 800eb48:	2318      	movhi	r3, #24
 800eb4a:	fb03 0001 	mlahi	r0, r3, r1, r0
 800eb4e:	3048      	addhi	r0, #72	@ 0x48
 800eb50:	2000      	movls	r0, #0
 800eb52:	4770      	bx	lr

0800eb54 <uxr_output_streams_confirmed>:
 800eb54:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800eb58:	b183      	cbz	r3, 800eb7c <uxr_output_streams_confirmed+0x28>
 800eb5a:	b570      	push	{r4, r5, r6, lr}
 800eb5c:	4606      	mov	r6, r0
 800eb5e:	f100 0518 	add.w	r5, r0, #24
 800eb62:	2400      	movs	r4, #0
 800eb64:	e001      	b.n	800eb6a <uxr_output_streams_confirmed+0x16>
 800eb66:	3528      	adds	r5, #40	@ 0x28
 800eb68:	b138      	cbz	r0, 800eb7a <uxr_output_streams_confirmed+0x26>
 800eb6a:	4628      	mov	r0, r5
 800eb6c:	f006 fe6e 	bl	801584c <uxr_is_output_up_to_date>
 800eb70:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 800eb74:	3401      	adds	r4, #1
 800eb76:	42a3      	cmp	r3, r4
 800eb78:	d8f5      	bhi.n	800eb66 <uxr_output_streams_confirmed+0x12>
 800eb7a:	bd70      	pop	{r4, r5, r6, pc}
 800eb7c:	2001      	movs	r0, #1
 800eb7e:	4770      	bx	lr

0800eb80 <uxr_buffer_submessage_header>:
 800eb80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb82:	4604      	mov	r4, r0
 800eb84:	460e      	mov	r6, r1
 800eb86:	2104      	movs	r1, #4
 800eb88:	4615      	mov	r5, r2
 800eb8a:	461f      	mov	r7, r3
 800eb8c:	f7fe fa1e 	bl	800cfcc <ucdr_align_to>
 800eb90:	2301      	movs	r3, #1
 800eb92:	ea47 0203 	orr.w	r2, r7, r3
 800eb96:	4631      	mov	r1, r6
 800eb98:	7523      	strb	r3, [r4, #20]
 800eb9a:	4620      	mov	r0, r4
 800eb9c:	462b      	mov	r3, r5
 800eb9e:	f000 fa27 	bl	800eff0 <uxr_serialize_submessage_header>
 800eba2:	4620      	mov	r0, r4
 800eba4:	f7fe fa28 	bl	800cff8 <ucdr_buffer_remaining>
 800eba8:	42a8      	cmp	r0, r5
 800ebaa:	bf34      	ite	cc
 800ebac:	2000      	movcc	r0, #0
 800ebae:	2001      	movcs	r0, #1
 800ebb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ebb2:	bf00      	nop

0800ebb4 <uxr_read_submessage_header>:
 800ebb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebb8:	4604      	mov	r4, r0
 800ebba:	460d      	mov	r5, r1
 800ebbc:	2104      	movs	r1, #4
 800ebbe:	4616      	mov	r6, r2
 800ebc0:	4698      	mov	r8, r3
 800ebc2:	f7fe fa03 	bl	800cfcc <ucdr_align_to>
 800ebc6:	4620      	mov	r0, r4
 800ebc8:	f7fe fa16 	bl	800cff8 <ucdr_buffer_remaining>
 800ebcc:	2803      	cmp	r0, #3
 800ebce:	bf8c      	ite	hi
 800ebd0:	2701      	movhi	r7, #1
 800ebd2:	2700      	movls	r7, #0
 800ebd4:	d802      	bhi.n	800ebdc <uxr_read_submessage_header+0x28>
 800ebd6:	4638      	mov	r0, r7
 800ebd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebdc:	4633      	mov	r3, r6
 800ebde:	4642      	mov	r2, r8
 800ebe0:	4620      	mov	r0, r4
 800ebe2:	4629      	mov	r1, r5
 800ebe4:	f000 fa18 	bl	800f018 <uxr_deserialize_submessage_header>
 800ebe8:	f898 3000 	ldrb.w	r3, [r8]
 800ebec:	f003 0201 	and.w	r2, r3, #1
 800ebf0:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800ebf4:	f888 3000 	strb.w	r3, [r8]
 800ebf8:	7522      	strb	r2, [r4, #20]
 800ebfa:	4638      	mov	r0, r7
 800ebfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ec00 <uxr_submessage_padding>:
 800ec00:	f010 0003 	ands.w	r0, r0, #3
 800ec04:	bf18      	it	ne
 800ec06:	f1c0 0004 	rsbne	r0, r0, #4
 800ec0a:	4770      	bx	lr

0800ec0c <uxr_millis>:
 800ec0c:	b510      	push	{r4, lr}
 800ec0e:	b084      	sub	sp, #16
 800ec10:	4669      	mov	r1, sp
 800ec12:	2001      	movs	r0, #1
 800ec14:	f7f3 fb50 	bl	80022b8 <clock_gettime>
 800ec18:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 800ec1c:	4906      	ldr	r1, [pc, #24]	@ (800ec38 <uxr_millis+0x2c>)
 800ec1e:	fba0 0301 	umull	r0, r3, r0, r1
 800ec22:	1900      	adds	r0, r0, r4
 800ec24:	fb01 3102 	mla	r1, r1, r2, r3
 800ec28:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800ec2c:	4a03      	ldr	r2, [pc, #12]	@ (800ec3c <uxr_millis+0x30>)
 800ec2e:	2300      	movs	r3, #0
 800ec30:	f7f1 ffea 	bl	8000c08 <__aeabi_ldivmod>
 800ec34:	b004      	add	sp, #16
 800ec36:	bd10      	pop	{r4, pc}
 800ec38:	3b9aca00 	.word	0x3b9aca00
 800ec3c:	000f4240 	.word	0x000f4240

0800ec40 <uxr_nanos>:
 800ec40:	b510      	push	{r4, lr}
 800ec42:	b084      	sub	sp, #16
 800ec44:	4669      	mov	r1, sp
 800ec46:	2001      	movs	r0, #1
 800ec48:	f7f3 fb36 	bl	80022b8 <clock_gettime>
 800ec4c:	4a06      	ldr	r2, [pc, #24]	@ (800ec68 <uxr_nanos+0x28>)
 800ec4e:	9800      	ldr	r0, [sp, #0]
 800ec50:	9902      	ldr	r1, [sp, #8]
 800ec52:	9c01      	ldr	r4, [sp, #4]
 800ec54:	fba0 0302 	umull	r0, r3, r0, r2
 800ec58:	1840      	adds	r0, r0, r1
 800ec5a:	fb02 3304 	mla	r3, r2, r4, r3
 800ec5e:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 800ec62:	b004      	add	sp, #16
 800ec64:	bd10      	pop	{r4, pc}
 800ec66:	bf00      	nop
 800ec68:	3b9aca00 	.word	0x3b9aca00

0800ec6c <on_full_output_buffer_fragmented>:
 800ec6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec70:	460c      	mov	r4, r1
 800ec72:	b08a      	sub	sp, #40	@ 0x28
 800ec74:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 800ec78:	4606      	mov	r6, r0
 800ec7a:	f104 0008 	add.w	r0, r4, #8
 800ec7e:	f7ff ff4b 	bl	800eb18 <uxr_get_output_reliable_stream>
 800ec82:	4605      	mov	r5, r0
 800ec84:	f006 fdec 	bl	8015860 <get_available_free_slots>
 800ec88:	b968      	cbnz	r0, 800eca6 <on_full_output_buffer_fragmented+0x3a>
 800ec8a:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 800ec8e:	4620      	mov	r0, r4
 800ec90:	4798      	blx	r3
 800ec92:	b918      	cbnz	r0, 800ec9c <on_full_output_buffer_fragmented+0x30>
 800ec94:	2001      	movs	r0, #1
 800ec96:	b00a      	add	sp, #40	@ 0x28
 800ec98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec9c:	4628      	mov	r0, r5
 800ec9e:	f006 fddf 	bl	8015860 <get_available_free_slots>
 800eca2:	2800      	cmp	r0, #0
 800eca4:	d0f6      	beq.n	800ec94 <on_full_output_buffer_fragmented+0x28>
 800eca6:	8929      	ldrh	r1, [r5, #8]
 800eca8:	89eb      	ldrh	r3, [r5, #14]
 800ecaa:	7b28      	ldrb	r0, [r5, #12]
 800ecac:	686a      	ldr	r2, [r5, #4]
 800ecae:	fbb2 f8f1 	udiv	r8, r2, r1
 800ecb2:	fbb3 f2f1 	udiv	r2, r3, r1
 800ecb6:	fb01 3112 	mls	r1, r1, r2, r3
 800ecba:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 800ecbe:	b289      	uxth	r1, r1
 800ecc0:	fb08 f101 	mul.w	r1, r8, r1
 800ecc4:	30fc      	adds	r0, #252	@ 0xfc
 800ecc6:	f1a8 0804 	sub.w	r8, r8, #4
 800ecca:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 800ecce:	4440      	add	r0, r8
 800ecd0:	b287      	uxth	r7, r0
 800ecd2:	1bdb      	subs	r3, r3, r7
 800ecd4:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 800ecd8:	682b      	ldr	r3, [r5, #0]
 800ecda:	3104      	adds	r1, #4
 800ecdc:	4419      	add	r1, r3
 800ecde:	4642      	mov	r2, r8
 800ece0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ece4:	9300      	str	r3, [sp, #0]
 800ece6:	a802      	add	r0, sp, #8
 800ece8:	2300      	movs	r3, #0
 800ecea:	f7fe f943 	bl	800cf74 <ucdr_init_buffer_origin_offset>
 800ecee:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 800ecf2:	f102 0308 	add.w	r3, r2, #8
 800ecf6:	4543      	cmp	r3, r8
 800ecf8:	d928      	bls.n	800ed4c <on_full_output_buffer_fragmented+0xe0>
 800ecfa:	463a      	mov	r2, r7
 800ecfc:	2300      	movs	r3, #0
 800ecfe:	210d      	movs	r1, #13
 800ed00:	a802      	add	r0, sp, #8
 800ed02:	f7ff ff3d 	bl	800eb80 <uxr_buffer_submessage_header>
 800ed06:	8929      	ldrh	r1, [r5, #8]
 800ed08:	89eb      	ldrh	r3, [r5, #14]
 800ed0a:	fbb3 f2f1 	udiv	r2, r3, r1
 800ed0e:	fb01 3312 	mls	r3, r1, r2, r3
 800ed12:	b29b      	uxth	r3, r3
 800ed14:	686a      	ldr	r2, [r5, #4]
 800ed16:	fbb2 f2f1 	udiv	r2, r2, r1
 800ed1a:	fb02 f303 	mul.w	r3, r2, r3
 800ed1e:	682a      	ldr	r2, [r5, #0]
 800ed20:	f842 8003 	str.w	r8, [r2, r3]
 800ed24:	89e8      	ldrh	r0, [r5, #14]
 800ed26:	2101      	movs	r1, #1
 800ed28:	f006 fdba 	bl	80158a0 <uxr_seq_num_add>
 800ed2c:	9904      	ldr	r1, [sp, #16]
 800ed2e:	9a03      	ldr	r2, [sp, #12]
 800ed30:	81e8      	strh	r0, [r5, #14]
 800ed32:	1a52      	subs	r2, r2, r1
 800ed34:	4630      	mov	r0, r6
 800ed36:	f7fe f92f 	bl	800cf98 <ucdr_init_buffer>
 800ed3a:	4630      	mov	r0, r6
 800ed3c:	490f      	ldr	r1, [pc, #60]	@ (800ed7c <on_full_output_buffer_fragmented+0x110>)
 800ed3e:	4622      	mov	r2, r4
 800ed40:	f7fe f8fe 	bl	800cf40 <ucdr_set_on_full_buffer_callback>
 800ed44:	2000      	movs	r0, #0
 800ed46:	b00a      	add	sp, #40	@ 0x28
 800ed48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed4c:	b292      	uxth	r2, r2
 800ed4e:	2302      	movs	r3, #2
 800ed50:	210d      	movs	r1, #13
 800ed52:	a802      	add	r0, sp, #8
 800ed54:	f7ff ff14 	bl	800eb80 <uxr_buffer_submessage_header>
 800ed58:	8928      	ldrh	r0, [r5, #8]
 800ed5a:	89eb      	ldrh	r3, [r5, #14]
 800ed5c:	fbb3 f1f0 	udiv	r1, r3, r0
 800ed60:	fb00 3311 	mls	r3, r0, r1, r3
 800ed64:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 800ed68:	6869      	ldr	r1, [r5, #4]
 800ed6a:	fbb1 f1f0 	udiv	r1, r1, r0
 800ed6e:	b29b      	uxth	r3, r3
 800ed70:	fb01 f303 	mul.w	r3, r1, r3
 800ed74:	6829      	ldr	r1, [r5, #0]
 800ed76:	3208      	adds	r2, #8
 800ed78:	50ca      	str	r2, [r1, r3]
 800ed7a:	e7d3      	b.n	800ed24 <on_full_output_buffer_fragmented+0xb8>
 800ed7c:	0800ec6d 	.word	0x0800ec6d

0800ed80 <uxr_prepare_output_stream>:
 800ed80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed82:	b087      	sub	sp, #28
 800ed84:	2707      	movs	r7, #7
 800ed86:	9202      	str	r2, [sp, #8]
 800ed88:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ed8a:	9103      	str	r1, [sp, #12]
 800ed8c:	2500      	movs	r5, #0
 800ed8e:	3204      	adds	r2, #4
 800ed90:	e9cd 7500 	strd	r7, r5, [sp]
 800ed94:	461c      	mov	r4, r3
 800ed96:	4606      	mov	r6, r0
 800ed98:	f7ff fc54 	bl	800e644 <uxr_prepare_stream_to_write_submessage>
 800ed9c:	f080 0201 	eor.w	r2, r0, #1
 800eda0:	b2d2      	uxtb	r2, r2
 800eda2:	75a2      	strb	r2, [r4, #22]
 800eda4:	b112      	cbz	r2, 800edac <uxr_prepare_output_stream+0x2c>
 800eda6:	4628      	mov	r0, r5
 800eda8:	b007      	add	sp, #28
 800edaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800edac:	aa05      	add	r2, sp, #20
 800edae:	9902      	ldr	r1, [sp, #8]
 800edb0:	4630      	mov	r0, r6
 800edb2:	f7ff fd7d 	bl	800e8b0 <uxr_init_base_object_request>
 800edb6:	a905      	add	r1, sp, #20
 800edb8:	4605      	mov	r5, r0
 800edba:	4620      	mov	r0, r4
 800edbc:	f001 f88c 	bl	800fed8 <uxr_serialize_WRITE_DATA_Payload_Data>
 800edc0:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 800edc4:	69a6      	ldr	r6, [r4, #24]
 800edc6:	69e7      	ldr	r7, [r4, #28]
 800edc8:	1a52      	subs	r2, r2, r1
 800edca:	4620      	mov	r0, r4
 800edcc:	f7fe f8e4 	bl	800cf98 <ucdr_init_buffer>
 800edd0:	4620      	mov	r0, r4
 800edd2:	463a      	mov	r2, r7
 800edd4:	4631      	mov	r1, r6
 800edd6:	f7fe f8b3 	bl	800cf40 <ucdr_set_on_full_buffer_callback>
 800edda:	4628      	mov	r0, r5
 800eddc:	b007      	add	sp, #28
 800edde:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ede0 <uxr_prepare_output_stream_fragmented>:
 800ede0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ede4:	b091      	sub	sp, #68	@ 0x44
 800ede6:	4605      	mov	r5, r0
 800ede8:	9105      	str	r1, [sp, #20]
 800edea:	3008      	adds	r0, #8
 800edec:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800edf0:	461e      	mov	r6, r3
 800edf2:	9204      	str	r2, [sp, #16]
 800edf4:	f7ff fe90 	bl	800eb18 <uxr_get_output_reliable_stream>
 800edf8:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800edfc:	2b01      	cmp	r3, #1
 800edfe:	f000 8091 	beq.w	800ef24 <uxr_prepare_output_stream_fragmented+0x144>
 800ee02:	4604      	mov	r4, r0
 800ee04:	2800      	cmp	r0, #0
 800ee06:	f000 808d 	beq.w	800ef24 <uxr_prepare_output_stream_fragmented+0x144>
 800ee0a:	f006 fd29 	bl	8015860 <get_available_free_slots>
 800ee0e:	2800      	cmp	r0, #0
 800ee10:	f000 8083 	beq.w	800ef1a <uxr_prepare_output_stream_fragmented+0x13a>
 800ee14:	8922      	ldrh	r2, [r4, #8]
 800ee16:	89e7      	ldrh	r7, [r4, #14]
 800ee18:	fbb7 f9f2 	udiv	r9, r7, r2
 800ee1c:	fb02 7919 	mls	r9, r2, r9, r7
 800ee20:	fa1f f989 	uxth.w	r9, r9
 800ee24:	6863      	ldr	r3, [r4, #4]
 800ee26:	fbb3 f2f2 	udiv	r2, r3, r2
 800ee2a:	6823      	ldr	r3, [r4, #0]
 800ee2c:	9203      	str	r2, [sp, #12]
 800ee2e:	fb02 f909 	mul.w	r9, r2, r9
 800ee32:	f109 0904 	add.w	r9, r9, #4
 800ee36:	4499      	add	r9, r3
 800ee38:	7b23      	ldrb	r3, [r4, #12]
 800ee3a:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800ee3e:	4543      	cmp	r3, r8
 800ee40:	f1a2 0b04 	sub.w	fp, r2, #4
 800ee44:	d37a      	bcc.n	800ef3c <uxr_prepare_output_stream_fragmented+0x15c>
 800ee46:	f1ab 0a04 	sub.w	sl, fp, #4
 800ee4a:	ebaa 0a03 	sub.w	sl, sl, r3
 800ee4e:	465a      	mov	r2, fp
 800ee50:	2300      	movs	r3, #0
 800ee52:	4649      	mov	r1, r9
 800ee54:	a808      	add	r0, sp, #32
 800ee56:	f8cd 8000 	str.w	r8, [sp]
 800ee5a:	f7fe f88b 	bl	800cf74 <ucdr_init_buffer_origin_offset>
 800ee5e:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800ee60:	fa1f fa8a 	uxth.w	sl, sl
 800ee64:	4652      	mov	r2, sl
 800ee66:	f103 0a08 	add.w	sl, r3, #8
 800ee6a:	45da      	cmp	sl, fp
 800ee6c:	bf34      	ite	cc
 800ee6e:	2302      	movcc	r3, #2
 800ee70:	2300      	movcs	r3, #0
 800ee72:	210d      	movs	r1, #13
 800ee74:	a808      	add	r0, sp, #32
 800ee76:	f7ff fe83 	bl	800eb80 <uxr_buffer_submessage_header>
 800ee7a:	8921      	ldrh	r1, [r4, #8]
 800ee7c:	fbb7 f2f1 	udiv	r2, r7, r1
 800ee80:	fb01 7212 	mls	r2, r1, r2, r7
 800ee84:	b292      	uxth	r2, r2
 800ee86:	6863      	ldr	r3, [r4, #4]
 800ee88:	fbb3 f3f1 	udiv	r3, r3, r1
 800ee8c:	fb02 f303 	mul.w	r3, r2, r3
 800ee90:	6822      	ldr	r2, [r4, #0]
 800ee92:	4638      	mov	r0, r7
 800ee94:	f842 b003 	str.w	fp, [r2, r3]
 800ee98:	2101      	movs	r1, #1
 800ee9a:	f006 fd01 	bl	80158a0 <uxr_seq_num_add>
 800ee9e:	9b03      	ldr	r3, [sp, #12]
 800eea0:	f108 0104 	add.w	r1, r8, #4
 800eea4:	f1a3 0208 	sub.w	r2, r3, #8
 800eea8:	eba2 0208 	sub.w	r2, r2, r8
 800eeac:	4449      	add	r1, r9
 800eeae:	4607      	mov	r7, r0
 800eeb0:	4630      	mov	r0, r6
 800eeb2:	f7fe f871 	bl	800cf98 <ucdr_init_buffer>
 800eeb6:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800eeb8:	81e7      	strh	r7, [r4, #14]
 800eeba:	1d1a      	adds	r2, r3, #4
 800eebc:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800eec0:	bf28      	it	cs
 800eec2:	2200      	movcs	r2, #0
 800eec4:	2300      	movs	r3, #0
 800eec6:	b292      	uxth	r2, r2
 800eec8:	2107      	movs	r1, #7
 800eeca:	4630      	mov	r0, r6
 800eecc:	f7ff fe58 	bl	800eb80 <uxr_buffer_submessage_header>
 800eed0:	9904      	ldr	r1, [sp, #16]
 800eed2:	aa07      	add	r2, sp, #28
 800eed4:	4628      	mov	r0, r5
 800eed6:	f7ff fceb 	bl	800e8b0 <uxr_init_base_object_request>
 800eeda:	4604      	mov	r4, r0
 800eedc:	b318      	cbz	r0, 800ef26 <uxr_prepare_output_stream_fragmented+0x146>
 800eede:	a907      	add	r1, sp, #28
 800eee0:	4630      	mov	r0, r6
 800eee2:	f000 fff9 	bl	800fed8 <uxr_serialize_WRITE_DATA_Payload_Data>
 800eee6:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 800eeea:	4630      	mov	r0, r6
 800eeec:	1a52      	subs	r2, r2, r1
 800eeee:	f7fe f853 	bl	800cf98 <ucdr_init_buffer>
 800eef2:	9b05      	ldr	r3, [sp, #20]
 800eef4:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 800eef8:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800eefa:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 800eefe:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800ef00:	491b      	ldr	r1, [pc, #108]	@ (800ef70 <uxr_prepare_output_stream_fragmented+0x190>)
 800ef02:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 800ef06:	4630      	mov	r0, r6
 800ef08:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 800ef0c:	462a      	mov	r2, r5
 800ef0e:	f7fe f817 	bl	800cf40 <ucdr_set_on_full_buffer_callback>
 800ef12:	4620      	mov	r0, r4
 800ef14:	b011      	add	sp, #68	@ 0x44
 800ef16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef1a:	991c      	ldr	r1, [sp, #112]	@ 0x70
 800ef1c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800ef1e:	4628      	mov	r0, r5
 800ef20:	4798      	blx	r3
 800ef22:	b920      	cbnz	r0, 800ef2e <uxr_prepare_output_stream_fragmented+0x14e>
 800ef24:	2400      	movs	r4, #0
 800ef26:	4620      	mov	r0, r4
 800ef28:	b011      	add	sp, #68	@ 0x44
 800ef2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef2e:	4620      	mov	r0, r4
 800ef30:	f006 fc96 	bl	8015860 <get_available_free_slots>
 800ef34:	2800      	cmp	r0, #0
 800ef36:	f47f af6d 	bne.w	800ee14 <uxr_prepare_output_stream_fragmented+0x34>
 800ef3a:	e7f3      	b.n	800ef24 <uxr_prepare_output_stream_fragmented+0x144>
 800ef3c:	4638      	mov	r0, r7
 800ef3e:	2101      	movs	r1, #1
 800ef40:	f006 fcae 	bl	80158a0 <uxr_seq_num_add>
 800ef44:	8921      	ldrh	r1, [r4, #8]
 800ef46:	fbb0 f2f1 	udiv	r2, r0, r1
 800ef4a:	fb01 0912 	mls	r9, r1, r2, r0
 800ef4e:	fa1f f289 	uxth.w	r2, r9
 800ef52:	6863      	ldr	r3, [r4, #4]
 800ef54:	fbb3 f9f1 	udiv	r9, r3, r1
 800ef58:	6823      	ldr	r3, [r4, #0]
 800ef5a:	fb02 f909 	mul.w	r9, r2, r9
 800ef5e:	f109 0904 	add.w	r9, r9, #4
 800ef62:	4499      	add	r9, r3
 800ef64:	4607      	mov	r7, r0
 800ef66:	7b23      	ldrb	r3, [r4, #12]
 800ef68:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800ef6c:	e76b      	b.n	800ee46 <uxr_prepare_output_stream_fragmented+0x66>
 800ef6e:	bf00      	nop
 800ef70:	0800ec6d 	.word	0x0800ec6d

0800ef74 <uxr_serialize_message_header>:
 800ef74:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef76:	b083      	sub	sp, #12
 800ef78:	4616      	mov	r6, r2
 800ef7a:	4604      	mov	r4, r0
 800ef7c:	9301      	str	r3, [sp, #4]
 800ef7e:	460d      	mov	r5, r1
 800ef80:	9f08      	ldr	r7, [sp, #32]
 800ef82:	f004 ff13 	bl	8013dac <ucdr_serialize_uint8_t>
 800ef86:	4631      	mov	r1, r6
 800ef88:	4620      	mov	r0, r4
 800ef8a:	f004 ff0f 	bl	8013dac <ucdr_serialize_uint8_t>
 800ef8e:	9a01      	ldr	r2, [sp, #4]
 800ef90:	2101      	movs	r1, #1
 800ef92:	4620      	mov	r0, r4
 800ef94:	f004 ffb6 	bl	8013f04 <ucdr_serialize_endian_uint16_t>
 800ef98:	062b      	lsls	r3, r5, #24
 800ef9a:	d501      	bpl.n	800efa0 <uxr_serialize_message_header+0x2c>
 800ef9c:	b003      	add	sp, #12
 800ef9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800efa0:	2204      	movs	r2, #4
 800efa2:	4639      	mov	r1, r7
 800efa4:	4620      	mov	r0, r4
 800efa6:	b003      	add	sp, #12
 800efa8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800efac:	f004 be08 	b.w	8013bc0 <ucdr_serialize_array_uint8_t>

0800efb0 <uxr_deserialize_message_header>:
 800efb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800efb2:	b083      	sub	sp, #12
 800efb4:	4616      	mov	r6, r2
 800efb6:	4604      	mov	r4, r0
 800efb8:	9301      	str	r3, [sp, #4]
 800efba:	460d      	mov	r5, r1
 800efbc:	9f08      	ldr	r7, [sp, #32]
 800efbe:	f004 ff0b 	bl	8013dd8 <ucdr_deserialize_uint8_t>
 800efc2:	4631      	mov	r1, r6
 800efc4:	4620      	mov	r0, r4
 800efc6:	f004 ff07 	bl	8013dd8 <ucdr_deserialize_uint8_t>
 800efca:	9a01      	ldr	r2, [sp, #4]
 800efcc:	2101      	movs	r1, #1
 800efce:	4620      	mov	r0, r4
 800efd0:	f005 f88c 	bl	80140ec <ucdr_deserialize_endian_uint16_t>
 800efd4:	f995 3000 	ldrsb.w	r3, [r5]
 800efd8:	2b00      	cmp	r3, #0
 800efda:	da01      	bge.n	800efe0 <uxr_deserialize_message_header+0x30>
 800efdc:	b003      	add	sp, #12
 800efde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800efe0:	2204      	movs	r2, #4
 800efe2:	4639      	mov	r1, r7
 800efe4:	4620      	mov	r0, r4
 800efe6:	b003      	add	sp, #12
 800efe8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800efec:	f004 be4c 	b.w	8013c88 <ucdr_deserialize_array_uint8_t>

0800eff0 <uxr_serialize_submessage_header>:
 800eff0:	b530      	push	{r4, r5, lr}
 800eff2:	b083      	sub	sp, #12
 800eff4:	4615      	mov	r5, r2
 800eff6:	4604      	mov	r4, r0
 800eff8:	9301      	str	r3, [sp, #4]
 800effa:	f004 fed7 	bl	8013dac <ucdr_serialize_uint8_t>
 800effe:	4629      	mov	r1, r5
 800f000:	4620      	mov	r0, r4
 800f002:	f004 fed3 	bl	8013dac <ucdr_serialize_uint8_t>
 800f006:	9a01      	ldr	r2, [sp, #4]
 800f008:	2101      	movs	r1, #1
 800f00a:	4620      	mov	r0, r4
 800f00c:	b003      	add	sp, #12
 800f00e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f012:	f004 bf77 	b.w	8013f04 <ucdr_serialize_endian_uint16_t>
 800f016:	bf00      	nop

0800f018 <uxr_deserialize_submessage_header>:
 800f018:	b530      	push	{r4, r5, lr}
 800f01a:	b083      	sub	sp, #12
 800f01c:	4615      	mov	r5, r2
 800f01e:	4604      	mov	r4, r0
 800f020:	9301      	str	r3, [sp, #4]
 800f022:	f004 fed9 	bl	8013dd8 <ucdr_deserialize_uint8_t>
 800f026:	4629      	mov	r1, r5
 800f028:	4620      	mov	r0, r4
 800f02a:	f004 fed5 	bl	8013dd8 <ucdr_deserialize_uint8_t>
 800f02e:	9a01      	ldr	r2, [sp, #4]
 800f030:	2101      	movs	r1, #1
 800f032:	4620      	mov	r0, r4
 800f034:	b003      	add	sp, #12
 800f036:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f03a:	f005 b857 	b.w	80140ec <ucdr_deserialize_endian_uint16_t>
 800f03e:	bf00      	nop

0800f040 <uxr_serialize_CLIENT_Representation>:
 800f040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f044:	2204      	movs	r2, #4
 800f046:	460e      	mov	r6, r1
 800f048:	4605      	mov	r5, r0
 800f04a:	f004 fdb9 	bl	8013bc0 <ucdr_serialize_array_uint8_t>
 800f04e:	2202      	movs	r2, #2
 800f050:	4607      	mov	r7, r0
 800f052:	1d31      	adds	r1, r6, #4
 800f054:	4628      	mov	r0, r5
 800f056:	f004 fdb3 	bl	8013bc0 <ucdr_serialize_array_uint8_t>
 800f05a:	4038      	ands	r0, r7
 800f05c:	2202      	movs	r2, #2
 800f05e:	1db1      	adds	r1, r6, #6
 800f060:	b2c7      	uxtb	r7, r0
 800f062:	4628      	mov	r0, r5
 800f064:	f004 fdac 	bl	8013bc0 <ucdr_serialize_array_uint8_t>
 800f068:	2204      	movs	r2, #4
 800f06a:	4007      	ands	r7, r0
 800f06c:	f106 0108 	add.w	r1, r6, #8
 800f070:	4628      	mov	r0, r5
 800f072:	f004 fda5 	bl	8013bc0 <ucdr_serialize_array_uint8_t>
 800f076:	7b31      	ldrb	r1, [r6, #12]
 800f078:	4007      	ands	r7, r0
 800f07a:	4628      	mov	r0, r5
 800f07c:	f004 fe96 	bl	8013dac <ucdr_serialize_uint8_t>
 800f080:	7b71      	ldrb	r1, [r6, #13]
 800f082:	4007      	ands	r7, r0
 800f084:	4628      	mov	r0, r5
 800f086:	f004 fe63 	bl	8013d50 <ucdr_serialize_bool>
 800f08a:	7b73      	ldrb	r3, [r6, #13]
 800f08c:	ea07 0800 	and.w	r8, r7, r0
 800f090:	b93b      	cbnz	r3, 800f0a2 <uxr_serialize_CLIENT_Representation+0x62>
 800f092:	8bb1      	ldrh	r1, [r6, #28]
 800f094:	4628      	mov	r0, r5
 800f096:	f004 feb5 	bl	8013e04 <ucdr_serialize_uint16_t>
 800f09a:	ea08 0000 	and.w	r0, r8, r0
 800f09e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f0a2:	6931      	ldr	r1, [r6, #16]
 800f0a4:	4628      	mov	r0, r5
 800f0a6:	f005 f897 	bl	80141d8 <ucdr_serialize_uint32_t>
 800f0aa:	6933      	ldr	r3, [r6, #16]
 800f0ac:	b1e3      	cbz	r3, 800f0e8 <uxr_serialize_CLIENT_Representation+0xa8>
 800f0ae:	b1c0      	cbz	r0, 800f0e2 <uxr_serialize_CLIENT_Representation+0xa2>
 800f0b0:	4637      	mov	r7, r6
 800f0b2:	f04f 0900 	mov.w	r9, #0
 800f0b6:	e001      	b.n	800f0bc <uxr_serialize_CLIENT_Representation+0x7c>
 800f0b8:	3708      	adds	r7, #8
 800f0ba:	b194      	cbz	r4, 800f0e2 <uxr_serialize_CLIENT_Representation+0xa2>
 800f0bc:	6979      	ldr	r1, [r7, #20]
 800f0be:	4628      	mov	r0, r5
 800f0c0:	f005 fdcc 	bl	8014c5c <ucdr_serialize_string>
 800f0c4:	69b9      	ldr	r1, [r7, #24]
 800f0c6:	4604      	mov	r4, r0
 800f0c8:	4628      	mov	r0, r5
 800f0ca:	f005 fdc7 	bl	8014c5c <ucdr_serialize_string>
 800f0ce:	6933      	ldr	r3, [r6, #16]
 800f0d0:	f109 0901 	add.w	r9, r9, #1
 800f0d4:	4004      	ands	r4, r0
 800f0d6:	4599      	cmp	r9, r3
 800f0d8:	b2e4      	uxtb	r4, r4
 800f0da:	d3ed      	bcc.n	800f0b8 <uxr_serialize_CLIENT_Representation+0x78>
 800f0dc:	ea08 0804 	and.w	r8, r8, r4
 800f0e0:	e7d7      	b.n	800f092 <uxr_serialize_CLIENT_Representation+0x52>
 800f0e2:	f04f 0800 	mov.w	r8, #0
 800f0e6:	e7d4      	b.n	800f092 <uxr_serialize_CLIENT_Representation+0x52>
 800f0e8:	ea08 0800 	and.w	r8, r8, r0
 800f0ec:	e7d1      	b.n	800f092 <uxr_serialize_CLIENT_Representation+0x52>
 800f0ee:	bf00      	nop

0800f0f0 <uxr_deserialize_CLIENT_Representation>:
 800f0f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f0f4:	2204      	movs	r2, #4
 800f0f6:	460c      	mov	r4, r1
 800f0f8:	4605      	mov	r5, r0
 800f0fa:	f004 fdc5 	bl	8013c88 <ucdr_deserialize_array_uint8_t>
 800f0fe:	2202      	movs	r2, #2
 800f100:	4607      	mov	r7, r0
 800f102:	1d21      	adds	r1, r4, #4
 800f104:	4628      	mov	r0, r5
 800f106:	f004 fdbf 	bl	8013c88 <ucdr_deserialize_array_uint8_t>
 800f10a:	4038      	ands	r0, r7
 800f10c:	2202      	movs	r2, #2
 800f10e:	1da1      	adds	r1, r4, #6
 800f110:	b2c6      	uxtb	r6, r0
 800f112:	4628      	mov	r0, r5
 800f114:	f004 fdb8 	bl	8013c88 <ucdr_deserialize_array_uint8_t>
 800f118:	2204      	movs	r2, #4
 800f11a:	4006      	ands	r6, r0
 800f11c:	f104 0108 	add.w	r1, r4, #8
 800f120:	4628      	mov	r0, r5
 800f122:	f004 fdb1 	bl	8013c88 <ucdr_deserialize_array_uint8_t>
 800f126:	f104 010c 	add.w	r1, r4, #12
 800f12a:	4006      	ands	r6, r0
 800f12c:	4628      	mov	r0, r5
 800f12e:	f004 fe53 	bl	8013dd8 <ucdr_deserialize_uint8_t>
 800f132:	f104 010d 	add.w	r1, r4, #13
 800f136:	ea06 0700 	and.w	r7, r6, r0
 800f13a:	4628      	mov	r0, r5
 800f13c:	f004 fe1e 	bl	8013d7c <ucdr_deserialize_bool>
 800f140:	7b63      	ldrb	r3, [r4, #13]
 800f142:	4007      	ands	r7, r0
 800f144:	b93b      	cbnz	r3, 800f156 <uxr_deserialize_CLIENT_Representation+0x66>
 800f146:	f104 011c 	add.w	r1, r4, #28
 800f14a:	4628      	mov	r0, r5
 800f14c:	f004 ff5a 	bl	8014004 <ucdr_deserialize_uint16_t>
 800f150:	4038      	ands	r0, r7
 800f152:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f156:	f104 0110 	add.w	r1, r4, #16
 800f15a:	4628      	mov	r0, r5
 800f15c:	f005 f96c 	bl	8014438 <ucdr_deserialize_uint32_t>
 800f160:	6923      	ldr	r3, [r4, #16]
 800f162:	2b01      	cmp	r3, #1
 800f164:	d903      	bls.n	800f16e <uxr_deserialize_CLIENT_Representation+0x7e>
 800f166:	2301      	movs	r3, #1
 800f168:	75ab      	strb	r3, [r5, #22]
 800f16a:	2700      	movs	r7, #0
 800f16c:	e7eb      	b.n	800f146 <uxr_deserialize_CLIENT_Representation+0x56>
 800f16e:	b30b      	cbz	r3, 800f1b4 <uxr_deserialize_CLIENT_Representation+0xc4>
 800f170:	2800      	cmp	r0, #0
 800f172:	d0fa      	beq.n	800f16a <uxr_deserialize_CLIENT_Representation+0x7a>
 800f174:	46a0      	mov	r8, r4
 800f176:	f04f 0900 	mov.w	r9, #0
 800f17a:	e001      	b.n	800f180 <uxr_deserialize_CLIENT_Representation+0x90>
 800f17c:	2e00      	cmp	r6, #0
 800f17e:	d0f4      	beq.n	800f16a <uxr_deserialize_CLIENT_Representation+0x7a>
 800f180:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800f184:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f188:	4628      	mov	r0, r5
 800f18a:	f005 fd77 	bl	8014c7c <ucdr_deserialize_string>
 800f18e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f192:	4606      	mov	r6, r0
 800f194:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800f198:	4628      	mov	r0, r5
 800f19a:	f005 fd6f 	bl	8014c7c <ucdr_deserialize_string>
 800f19e:	6923      	ldr	r3, [r4, #16]
 800f1a0:	f109 0901 	add.w	r9, r9, #1
 800f1a4:	4006      	ands	r6, r0
 800f1a6:	4599      	cmp	r9, r3
 800f1a8:	f108 0808 	add.w	r8, r8, #8
 800f1ac:	b2f6      	uxtb	r6, r6
 800f1ae:	d3e5      	bcc.n	800f17c <uxr_deserialize_CLIENT_Representation+0x8c>
 800f1b0:	4037      	ands	r7, r6
 800f1b2:	e7c8      	b.n	800f146 <uxr_deserialize_CLIENT_Representation+0x56>
 800f1b4:	4007      	ands	r7, r0
 800f1b6:	e7c6      	b.n	800f146 <uxr_deserialize_CLIENT_Representation+0x56>

0800f1b8 <uxr_serialize_AGENT_Representation>:
 800f1b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f1bc:	2204      	movs	r2, #4
 800f1be:	460f      	mov	r7, r1
 800f1c0:	4605      	mov	r5, r0
 800f1c2:	f004 fcfd 	bl	8013bc0 <ucdr_serialize_array_uint8_t>
 800f1c6:	2202      	movs	r2, #2
 800f1c8:	4604      	mov	r4, r0
 800f1ca:	1d39      	adds	r1, r7, #4
 800f1cc:	4628      	mov	r0, r5
 800f1ce:	f004 fcf7 	bl	8013bc0 <ucdr_serialize_array_uint8_t>
 800f1d2:	4020      	ands	r0, r4
 800f1d4:	2202      	movs	r2, #2
 800f1d6:	1db9      	adds	r1, r7, #6
 800f1d8:	b2c4      	uxtb	r4, r0
 800f1da:	4628      	mov	r0, r5
 800f1dc:	f004 fcf0 	bl	8013bc0 <ucdr_serialize_array_uint8_t>
 800f1e0:	7a39      	ldrb	r1, [r7, #8]
 800f1e2:	4004      	ands	r4, r0
 800f1e4:	4628      	mov	r0, r5
 800f1e6:	f004 fdb3 	bl	8013d50 <ucdr_serialize_bool>
 800f1ea:	7a3b      	ldrb	r3, [r7, #8]
 800f1ec:	ea00 0804 	and.w	r8, r0, r4
 800f1f0:	b913      	cbnz	r3, 800f1f8 <uxr_serialize_AGENT_Representation+0x40>
 800f1f2:	4640      	mov	r0, r8
 800f1f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f1f8:	68f9      	ldr	r1, [r7, #12]
 800f1fa:	4628      	mov	r0, r5
 800f1fc:	f004 ffec 	bl	80141d8 <ucdr_serialize_uint32_t>
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	b303      	cbz	r3, 800f246 <uxr_serialize_AGENT_Representation+0x8e>
 800f204:	b1d0      	cbz	r0, 800f23c <uxr_serialize_AGENT_Representation+0x84>
 800f206:	463e      	mov	r6, r7
 800f208:	f04f 0900 	mov.w	r9, #0
 800f20c:	e001      	b.n	800f212 <uxr_serialize_AGENT_Representation+0x5a>
 800f20e:	3608      	adds	r6, #8
 800f210:	b1a4      	cbz	r4, 800f23c <uxr_serialize_AGENT_Representation+0x84>
 800f212:	6931      	ldr	r1, [r6, #16]
 800f214:	4628      	mov	r0, r5
 800f216:	f005 fd21 	bl	8014c5c <ucdr_serialize_string>
 800f21a:	6971      	ldr	r1, [r6, #20]
 800f21c:	4604      	mov	r4, r0
 800f21e:	4628      	mov	r0, r5
 800f220:	f005 fd1c 	bl	8014c5c <ucdr_serialize_string>
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	f109 0901 	add.w	r9, r9, #1
 800f22a:	4004      	ands	r4, r0
 800f22c:	4599      	cmp	r9, r3
 800f22e:	b2e4      	uxtb	r4, r4
 800f230:	d3ed      	bcc.n	800f20e <uxr_serialize_AGENT_Representation+0x56>
 800f232:	ea08 0804 	and.w	r8, r8, r4
 800f236:	4640      	mov	r0, r8
 800f238:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f23c:	f04f 0800 	mov.w	r8, #0
 800f240:	4640      	mov	r0, r8
 800f242:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f246:	ea08 0800 	and.w	r8, r8, r0
 800f24a:	e7d2      	b.n	800f1f2 <uxr_serialize_AGENT_Representation+0x3a>

0800f24c <uxr_serialize_DATAWRITER_Representation>:
 800f24c:	b570      	push	{r4, r5, r6, lr}
 800f24e:	460d      	mov	r5, r1
 800f250:	7809      	ldrb	r1, [r1, #0]
 800f252:	4606      	mov	r6, r0
 800f254:	f004 fdaa 	bl	8013dac <ucdr_serialize_uint8_t>
 800f258:	4604      	mov	r4, r0
 800f25a:	b130      	cbz	r0, 800f26a <uxr_serialize_DATAWRITER_Representation+0x1e>
 800f25c:	782b      	ldrb	r3, [r5, #0]
 800f25e:	2b02      	cmp	r3, #2
 800f260:	d00c      	beq.n	800f27c <uxr_serialize_DATAWRITER_Representation+0x30>
 800f262:	2b03      	cmp	r3, #3
 800f264:	d010      	beq.n	800f288 <uxr_serialize_DATAWRITER_Representation+0x3c>
 800f266:	2b01      	cmp	r3, #1
 800f268:	d008      	beq.n	800f27c <uxr_serialize_DATAWRITER_Representation+0x30>
 800f26a:	2202      	movs	r2, #2
 800f26c:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 800f270:	4630      	mov	r0, r6
 800f272:	f004 fca5 	bl	8013bc0 <ucdr_serialize_array_uint8_t>
 800f276:	4020      	ands	r0, r4
 800f278:	b2c0      	uxtb	r0, r0
 800f27a:	bd70      	pop	{r4, r5, r6, pc}
 800f27c:	6869      	ldr	r1, [r5, #4]
 800f27e:	4630      	mov	r0, r6
 800f280:	f005 fcec 	bl	8014c5c <ucdr_serialize_string>
 800f284:	4604      	mov	r4, r0
 800f286:	e7f0      	b.n	800f26a <uxr_serialize_DATAWRITER_Representation+0x1e>
 800f288:	4629      	mov	r1, r5
 800f28a:	4630      	mov	r0, r6
 800f28c:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800f290:	3104      	adds	r1, #4
 800f292:	f7fd ff1d 	bl	800d0d0 <ucdr_serialize_sequence_uint8_t>
 800f296:	4604      	mov	r4, r0
 800f298:	e7e7      	b.n	800f26a <uxr_serialize_DATAWRITER_Representation+0x1e>
 800f29a:	bf00      	nop

0800f29c <uxr_serialize_ObjectVariant.part.0>:
 800f29c:	b570      	push	{r4, r5, r6, lr}
 800f29e:	780b      	ldrb	r3, [r1, #0]
 800f2a0:	3b01      	subs	r3, #1
 800f2a2:	460c      	mov	r4, r1
 800f2a4:	4605      	mov	r5, r0
 800f2a6:	2b0d      	cmp	r3, #13
 800f2a8:	d854      	bhi.n	800f354 <uxr_serialize_ObjectVariant.part.0+0xb8>
 800f2aa:	e8df f003 	tbb	[pc, r3]
 800f2ae:	0730      	.short	0x0730
 800f2b0:	07071b1b 	.word	0x07071b1b
 800f2b4:	0c530707 	.word	0x0c530707
 800f2b8:	494e0c0c 	.word	0x494e0c0c
 800f2bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f2c0:	3104      	adds	r1, #4
 800f2c2:	f7ff bfc3 	b.w	800f24c <uxr_serialize_DATAWRITER_Representation>
 800f2c6:	7909      	ldrb	r1, [r1, #4]
 800f2c8:	f004 fd70 	bl	8013dac <ucdr_serialize_uint8_t>
 800f2cc:	b1e8      	cbz	r0, 800f30a <uxr_serialize_ObjectVariant.part.0+0x6e>
 800f2ce:	7923      	ldrb	r3, [r4, #4]
 800f2d0:	2b01      	cmp	r3, #1
 800f2d2:	d001      	beq.n	800f2d8 <uxr_serialize_ObjectVariant.part.0+0x3c>
 800f2d4:	2b02      	cmp	r3, #2
 800f2d6:	d13d      	bne.n	800f354 <uxr_serialize_ObjectVariant.part.0+0xb8>
 800f2d8:	68a1      	ldr	r1, [r4, #8]
 800f2da:	4628      	mov	r0, r5
 800f2dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f2e0:	f005 bcbc 	b.w	8014c5c <ucdr_serialize_string>
 800f2e4:	7909      	ldrb	r1, [r1, #4]
 800f2e6:	f004 fd61 	bl	8013dac <ucdr_serialize_uint8_t>
 800f2ea:	4606      	mov	r6, r0
 800f2ec:	b120      	cbz	r0, 800f2f8 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800f2ee:	7923      	ldrb	r3, [r4, #4]
 800f2f0:	2b02      	cmp	r3, #2
 800f2f2:	d039      	beq.n	800f368 <uxr_serialize_ObjectVariant.part.0+0xcc>
 800f2f4:	2b03      	cmp	r3, #3
 800f2f6:	d02f      	beq.n	800f358 <uxr_serialize_ObjectVariant.part.0+0xbc>
 800f2f8:	2202      	movs	r2, #2
 800f2fa:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 800f2fe:	4628      	mov	r0, r5
 800f300:	f004 fc5e 	bl	8013bc0 <ucdr_serialize_array_uint8_t>
 800f304:	4030      	ands	r0, r6
 800f306:	b2c0      	uxtb	r0, r0
 800f308:	bd70      	pop	{r4, r5, r6, pc}
 800f30a:	2000      	movs	r0, #0
 800f30c:	bd70      	pop	{r4, r5, r6, pc}
 800f30e:	7909      	ldrb	r1, [r1, #4]
 800f310:	f004 fd4c 	bl	8013dac <ucdr_serialize_uint8_t>
 800f314:	4606      	mov	r6, r0
 800f316:	b158      	cbz	r0, 800f330 <uxr_serialize_ObjectVariant.part.0+0x94>
 800f318:	7923      	ldrb	r3, [r4, #4]
 800f31a:	2b02      	cmp	r3, #2
 800f31c:	d003      	beq.n	800f326 <uxr_serialize_ObjectVariant.part.0+0x8a>
 800f31e:	2b03      	cmp	r3, #3
 800f320:	d028      	beq.n	800f374 <uxr_serialize_ObjectVariant.part.0+0xd8>
 800f322:	2b01      	cmp	r3, #1
 800f324:	d104      	bne.n	800f330 <uxr_serialize_ObjectVariant.part.0+0x94>
 800f326:	68a1      	ldr	r1, [r4, #8]
 800f328:	4628      	mov	r0, r5
 800f32a:	f005 fc97 	bl	8014c5c <ucdr_serialize_string>
 800f32e:	4606      	mov	r6, r0
 800f330:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 800f334:	4628      	mov	r0, r5
 800f336:	f005 fa75 	bl	8014824 <ucdr_serialize_int16_t>
 800f33a:	4030      	ands	r0, r6
 800f33c:	b2c0      	uxtb	r0, r0
 800f33e:	bd70      	pop	{r4, r5, r6, pc}
 800f340:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f344:	3104      	adds	r1, #4
 800f346:	f7ff be7b 	b.w	800f040 <uxr_serialize_CLIENT_Representation>
 800f34a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f34e:	3104      	adds	r1, #4
 800f350:	f7ff bf32 	b.w	800f1b8 <uxr_serialize_AGENT_Representation>
 800f354:	2001      	movs	r0, #1
 800f356:	bd70      	pop	{r4, r5, r6, pc}
 800f358:	68a2      	ldr	r2, [r4, #8]
 800f35a:	f104 010c 	add.w	r1, r4, #12
 800f35e:	4628      	mov	r0, r5
 800f360:	f7fd feb6 	bl	800d0d0 <ucdr_serialize_sequence_uint8_t>
 800f364:	4606      	mov	r6, r0
 800f366:	e7c7      	b.n	800f2f8 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800f368:	68a1      	ldr	r1, [r4, #8]
 800f36a:	4628      	mov	r0, r5
 800f36c:	f005 fc76 	bl	8014c5c <ucdr_serialize_string>
 800f370:	4606      	mov	r6, r0
 800f372:	e7c1      	b.n	800f2f8 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800f374:	68a2      	ldr	r2, [r4, #8]
 800f376:	f104 010c 	add.w	r1, r4, #12
 800f37a:	4628      	mov	r0, r5
 800f37c:	f7fd fea8 	bl	800d0d0 <ucdr_serialize_sequence_uint8_t>
 800f380:	4606      	mov	r6, r0
 800f382:	e7d5      	b.n	800f330 <uxr_serialize_ObjectVariant.part.0+0x94>

0800f384 <uxr_deserialize_DATAWRITER_Representation>:
 800f384:	b570      	push	{r4, r5, r6, lr}
 800f386:	4606      	mov	r6, r0
 800f388:	460d      	mov	r5, r1
 800f38a:	f004 fd25 	bl	8013dd8 <ucdr_deserialize_uint8_t>
 800f38e:	4604      	mov	r4, r0
 800f390:	b130      	cbz	r0, 800f3a0 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800f392:	782b      	ldrb	r3, [r5, #0]
 800f394:	2b02      	cmp	r3, #2
 800f396:	d00c      	beq.n	800f3b2 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800f398:	2b03      	cmp	r3, #3
 800f39a:	d012      	beq.n	800f3c2 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 800f39c:	2b01      	cmp	r3, #1
 800f39e:	d008      	beq.n	800f3b2 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800f3a0:	2202      	movs	r2, #2
 800f3a2:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 800f3a6:	4630      	mov	r0, r6
 800f3a8:	f004 fc6e 	bl	8013c88 <ucdr_deserialize_array_uint8_t>
 800f3ac:	4020      	ands	r0, r4
 800f3ae:	b2c0      	uxtb	r0, r0
 800f3b0:	bd70      	pop	{r4, r5, r6, pc}
 800f3b2:	6869      	ldr	r1, [r5, #4]
 800f3b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f3b8:	4630      	mov	r0, r6
 800f3ba:	f005 fc5f 	bl	8014c7c <ucdr_deserialize_string>
 800f3be:	4604      	mov	r4, r0
 800f3c0:	e7ee      	b.n	800f3a0 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800f3c2:	1d2b      	adds	r3, r5, #4
 800f3c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f3c8:	f105 0108 	add.w	r1, r5, #8
 800f3cc:	4630      	mov	r0, r6
 800f3ce:	f7fd fe91 	bl	800d0f4 <ucdr_deserialize_sequence_uint8_t>
 800f3d2:	4604      	mov	r4, r0
 800f3d4:	e7e4      	b.n	800f3a0 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800f3d6:	bf00      	nop

0800f3d8 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 800f3d8:	b570      	push	{r4, r5, r6, lr}
 800f3da:	460d      	mov	r5, r1
 800f3dc:	7809      	ldrb	r1, [r1, #0]
 800f3de:	4606      	mov	r6, r0
 800f3e0:	f004 fcb6 	bl	8013d50 <ucdr_serialize_bool>
 800f3e4:	782b      	ldrb	r3, [r5, #0]
 800f3e6:	4604      	mov	r4, r0
 800f3e8:	b94b      	cbnz	r3, 800f3fe <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 800f3ea:	7a29      	ldrb	r1, [r5, #8]
 800f3ec:	4630      	mov	r0, r6
 800f3ee:	f004 fcaf 	bl	8013d50 <ucdr_serialize_bool>
 800f3f2:	7a2b      	ldrb	r3, [r5, #8]
 800f3f4:	4004      	ands	r4, r0
 800f3f6:	b2e4      	uxtb	r4, r4
 800f3f8:	b943      	cbnz	r3, 800f40c <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 800f3fa:	4620      	mov	r0, r4
 800f3fc:	bd70      	pop	{r4, r5, r6, pc}
 800f3fe:	6869      	ldr	r1, [r5, #4]
 800f400:	4630      	mov	r0, r6
 800f402:	f005 fc2b 	bl	8014c5c <ucdr_serialize_string>
 800f406:	4004      	ands	r4, r0
 800f408:	b2e4      	uxtb	r4, r4
 800f40a:	e7ee      	b.n	800f3ea <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 800f40c:	68e9      	ldr	r1, [r5, #12]
 800f40e:	4630      	mov	r0, r6
 800f410:	f005 fc24 	bl	8014c5c <ucdr_serialize_string>
 800f414:	4004      	ands	r4, r0
 800f416:	4620      	mov	r0, r4
 800f418:	bd70      	pop	{r4, r5, r6, pc}
 800f41a:	bf00      	nop

0800f41c <uxr_serialize_OBJK_Topic_Binary>:
 800f41c:	b570      	push	{r4, r5, r6, lr}
 800f41e:	460d      	mov	r5, r1
 800f420:	6809      	ldr	r1, [r1, #0]
 800f422:	4606      	mov	r6, r0
 800f424:	f005 fc1a 	bl	8014c5c <ucdr_serialize_string>
 800f428:	7929      	ldrb	r1, [r5, #4]
 800f42a:	4604      	mov	r4, r0
 800f42c:	4630      	mov	r0, r6
 800f42e:	f004 fc8f 	bl	8013d50 <ucdr_serialize_bool>
 800f432:	792b      	ldrb	r3, [r5, #4]
 800f434:	4004      	ands	r4, r0
 800f436:	b2e4      	uxtb	r4, r4
 800f438:	b943      	cbnz	r3, 800f44c <uxr_serialize_OBJK_Topic_Binary+0x30>
 800f43a:	7b29      	ldrb	r1, [r5, #12]
 800f43c:	4630      	mov	r0, r6
 800f43e:	f004 fc87 	bl	8013d50 <ucdr_serialize_bool>
 800f442:	7b2b      	ldrb	r3, [r5, #12]
 800f444:	4004      	ands	r4, r0
 800f446:	b93b      	cbnz	r3, 800f458 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 800f448:	4620      	mov	r0, r4
 800f44a:	bd70      	pop	{r4, r5, r6, pc}
 800f44c:	68a9      	ldr	r1, [r5, #8]
 800f44e:	4630      	mov	r0, r6
 800f450:	f005 fc04 	bl	8014c5c <ucdr_serialize_string>
 800f454:	4004      	ands	r4, r0
 800f456:	e7f0      	b.n	800f43a <uxr_serialize_OBJK_Topic_Binary+0x1e>
 800f458:	6929      	ldr	r1, [r5, #16]
 800f45a:	4630      	mov	r0, r6
 800f45c:	f005 fbfe 	bl	8014c5c <ucdr_serialize_string>
 800f460:	4004      	ands	r4, r0
 800f462:	b2e4      	uxtb	r4, r4
 800f464:	4620      	mov	r0, r4
 800f466:	bd70      	pop	{r4, r5, r6, pc}

0800f468 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 800f468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f46c:	460c      	mov	r4, r1
 800f46e:	7809      	ldrb	r1, [r1, #0]
 800f470:	4606      	mov	r6, r0
 800f472:	f004 fc6d 	bl	8013d50 <ucdr_serialize_bool>
 800f476:	7823      	ldrb	r3, [r4, #0]
 800f478:	4605      	mov	r5, r0
 800f47a:	b96b      	cbnz	r3, 800f498 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 800f47c:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 800f480:	4630      	mov	r0, r6
 800f482:	f004 fc65 	bl	8013d50 <ucdr_serialize_bool>
 800f486:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800f48a:	4005      	ands	r5, r0
 800f48c:	b2ed      	uxtb	r5, r5
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d169      	bne.n	800f566 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 800f492:	4628      	mov	r0, r5
 800f494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f498:	6861      	ldr	r1, [r4, #4]
 800f49a:	4630      	mov	r0, r6
 800f49c:	f004 fe9c 	bl	80141d8 <ucdr_serialize_uint32_t>
 800f4a0:	6863      	ldr	r3, [r4, #4]
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d06b      	beq.n	800f57e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 800f4a6:	2800      	cmp	r0, #0
 800f4a8:	d067      	beq.n	800f57a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f4aa:	68a1      	ldr	r1, [r4, #8]
 800f4ac:	4630      	mov	r0, r6
 800f4ae:	f005 fbd5 	bl	8014c5c <ucdr_serialize_string>
 800f4b2:	6863      	ldr	r3, [r4, #4]
 800f4b4:	2b01      	cmp	r3, #1
 800f4b6:	d953      	bls.n	800f560 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f4b8:	2800      	cmp	r0, #0
 800f4ba:	d05e      	beq.n	800f57a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f4bc:	68e1      	ldr	r1, [r4, #12]
 800f4be:	4630      	mov	r0, r6
 800f4c0:	f005 fbcc 	bl	8014c5c <ucdr_serialize_string>
 800f4c4:	6863      	ldr	r3, [r4, #4]
 800f4c6:	2b02      	cmp	r3, #2
 800f4c8:	d94a      	bls.n	800f560 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f4ca:	2800      	cmp	r0, #0
 800f4cc:	d055      	beq.n	800f57a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f4ce:	6921      	ldr	r1, [r4, #16]
 800f4d0:	4630      	mov	r0, r6
 800f4d2:	f005 fbc3 	bl	8014c5c <ucdr_serialize_string>
 800f4d6:	6863      	ldr	r3, [r4, #4]
 800f4d8:	2b03      	cmp	r3, #3
 800f4da:	d941      	bls.n	800f560 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f4dc:	2800      	cmp	r0, #0
 800f4de:	d04c      	beq.n	800f57a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f4e0:	6961      	ldr	r1, [r4, #20]
 800f4e2:	4630      	mov	r0, r6
 800f4e4:	f005 fbba 	bl	8014c5c <ucdr_serialize_string>
 800f4e8:	6863      	ldr	r3, [r4, #4]
 800f4ea:	2b04      	cmp	r3, #4
 800f4ec:	d938      	bls.n	800f560 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f4ee:	2800      	cmp	r0, #0
 800f4f0:	d043      	beq.n	800f57a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f4f2:	69a1      	ldr	r1, [r4, #24]
 800f4f4:	4630      	mov	r0, r6
 800f4f6:	f005 fbb1 	bl	8014c5c <ucdr_serialize_string>
 800f4fa:	6863      	ldr	r3, [r4, #4]
 800f4fc:	2b05      	cmp	r3, #5
 800f4fe:	d92f      	bls.n	800f560 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f500:	2800      	cmp	r0, #0
 800f502:	d03a      	beq.n	800f57a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f504:	69e1      	ldr	r1, [r4, #28]
 800f506:	4630      	mov	r0, r6
 800f508:	f005 fba8 	bl	8014c5c <ucdr_serialize_string>
 800f50c:	6863      	ldr	r3, [r4, #4]
 800f50e:	2b06      	cmp	r3, #6
 800f510:	d926      	bls.n	800f560 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f512:	b390      	cbz	r0, 800f57a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f514:	6a21      	ldr	r1, [r4, #32]
 800f516:	4630      	mov	r0, r6
 800f518:	f005 fba0 	bl	8014c5c <ucdr_serialize_string>
 800f51c:	6863      	ldr	r3, [r4, #4]
 800f51e:	2b07      	cmp	r3, #7
 800f520:	d91e      	bls.n	800f560 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f522:	b350      	cbz	r0, 800f57a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f524:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800f526:	4630      	mov	r0, r6
 800f528:	f005 fb98 	bl	8014c5c <ucdr_serialize_string>
 800f52c:	6863      	ldr	r3, [r4, #4]
 800f52e:	2b08      	cmp	r3, #8
 800f530:	d916      	bls.n	800f560 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f532:	b310      	cbz	r0, 800f57a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f534:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800f536:	4630      	mov	r0, r6
 800f538:	f005 fb90 	bl	8014c5c <ucdr_serialize_string>
 800f53c:	6863      	ldr	r3, [r4, #4]
 800f53e:	2b09      	cmp	r3, #9
 800f540:	d90e      	bls.n	800f560 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f542:	b1d0      	cbz	r0, 800f57a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f544:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 800f548:	2709      	movs	r7, #9
 800f54a:	e000      	b.n	800f54e <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 800f54c:	b1a8      	cbz	r0, 800f57a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f54e:	f858 1b04 	ldr.w	r1, [r8], #4
 800f552:	4630      	mov	r0, r6
 800f554:	f005 fb82 	bl	8014c5c <ucdr_serialize_string>
 800f558:	6862      	ldr	r2, [r4, #4]
 800f55a:	3701      	adds	r7, #1
 800f55c:	4297      	cmp	r7, r2
 800f55e:	d3f5      	bcc.n	800f54c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 800f560:	4005      	ands	r5, r0
 800f562:	b2ed      	uxtb	r5, r5
 800f564:	e78a      	b.n	800f47c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800f566:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800f568:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800f56c:	4630      	mov	r0, r6
 800f56e:	f7fd fdaf 	bl	800d0d0 <ucdr_serialize_sequence_uint8_t>
 800f572:	4005      	ands	r5, r0
 800f574:	4628      	mov	r0, r5
 800f576:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f57a:	2500      	movs	r5, #0
 800f57c:	e77e      	b.n	800f47c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800f57e:	4028      	ands	r0, r5
 800f580:	b2c5      	uxtb	r5, r0
 800f582:	e77b      	b.n	800f47c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

0800f584 <uxr_serialize_OBJK_Publisher_Binary>:
 800f584:	b570      	push	{r4, r5, r6, lr}
 800f586:	460d      	mov	r5, r1
 800f588:	7809      	ldrb	r1, [r1, #0]
 800f58a:	4606      	mov	r6, r0
 800f58c:	f004 fbe0 	bl	8013d50 <ucdr_serialize_bool>
 800f590:	782b      	ldrb	r3, [r5, #0]
 800f592:	4604      	mov	r4, r0
 800f594:	b94b      	cbnz	r3, 800f5aa <uxr_serialize_OBJK_Publisher_Binary+0x26>
 800f596:	7a29      	ldrb	r1, [r5, #8]
 800f598:	4630      	mov	r0, r6
 800f59a:	f004 fbd9 	bl	8013d50 <ucdr_serialize_bool>
 800f59e:	7a2b      	ldrb	r3, [r5, #8]
 800f5a0:	4004      	ands	r4, r0
 800f5a2:	b2e4      	uxtb	r4, r4
 800f5a4:	b943      	cbnz	r3, 800f5b8 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 800f5a6:	4620      	mov	r0, r4
 800f5a8:	bd70      	pop	{r4, r5, r6, pc}
 800f5aa:	6869      	ldr	r1, [r5, #4]
 800f5ac:	4630      	mov	r0, r6
 800f5ae:	f005 fb55 	bl	8014c5c <ucdr_serialize_string>
 800f5b2:	4004      	ands	r4, r0
 800f5b4:	b2e4      	uxtb	r4, r4
 800f5b6:	e7ee      	b.n	800f596 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 800f5b8:	f105 010c 	add.w	r1, r5, #12
 800f5bc:	4630      	mov	r0, r6
 800f5be:	f7ff ff53 	bl	800f468 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 800f5c2:	4004      	ands	r4, r0
 800f5c4:	4620      	mov	r0, r4
 800f5c6:	bd70      	pop	{r4, r5, r6, pc}

0800f5c8 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 800f5c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5cc:	460c      	mov	r4, r1
 800f5ce:	7809      	ldrb	r1, [r1, #0]
 800f5d0:	4606      	mov	r6, r0
 800f5d2:	f004 fbbd 	bl	8013d50 <ucdr_serialize_bool>
 800f5d6:	7823      	ldrb	r3, [r4, #0]
 800f5d8:	4605      	mov	r5, r0
 800f5da:	b96b      	cbnz	r3, 800f5f8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 800f5dc:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 800f5e0:	4630      	mov	r0, r6
 800f5e2:	f004 fbb5 	bl	8013d50 <ucdr_serialize_bool>
 800f5e6:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800f5ea:	4005      	ands	r5, r0
 800f5ec:	b2ed      	uxtb	r5, r5
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d169      	bne.n	800f6c6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 800f5f2:	4628      	mov	r0, r5
 800f5f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5f8:	6861      	ldr	r1, [r4, #4]
 800f5fa:	4630      	mov	r0, r6
 800f5fc:	f004 fdec 	bl	80141d8 <ucdr_serialize_uint32_t>
 800f600:	6863      	ldr	r3, [r4, #4]
 800f602:	2b00      	cmp	r3, #0
 800f604:	d06b      	beq.n	800f6de <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 800f606:	2800      	cmp	r0, #0
 800f608:	d067      	beq.n	800f6da <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f60a:	68a1      	ldr	r1, [r4, #8]
 800f60c:	4630      	mov	r0, r6
 800f60e:	f005 fb25 	bl	8014c5c <ucdr_serialize_string>
 800f612:	6863      	ldr	r3, [r4, #4]
 800f614:	2b01      	cmp	r3, #1
 800f616:	d953      	bls.n	800f6c0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f618:	2800      	cmp	r0, #0
 800f61a:	d05e      	beq.n	800f6da <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f61c:	68e1      	ldr	r1, [r4, #12]
 800f61e:	4630      	mov	r0, r6
 800f620:	f005 fb1c 	bl	8014c5c <ucdr_serialize_string>
 800f624:	6863      	ldr	r3, [r4, #4]
 800f626:	2b02      	cmp	r3, #2
 800f628:	d94a      	bls.n	800f6c0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f62a:	2800      	cmp	r0, #0
 800f62c:	d055      	beq.n	800f6da <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f62e:	6921      	ldr	r1, [r4, #16]
 800f630:	4630      	mov	r0, r6
 800f632:	f005 fb13 	bl	8014c5c <ucdr_serialize_string>
 800f636:	6863      	ldr	r3, [r4, #4]
 800f638:	2b03      	cmp	r3, #3
 800f63a:	d941      	bls.n	800f6c0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f63c:	2800      	cmp	r0, #0
 800f63e:	d04c      	beq.n	800f6da <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f640:	6961      	ldr	r1, [r4, #20]
 800f642:	4630      	mov	r0, r6
 800f644:	f005 fb0a 	bl	8014c5c <ucdr_serialize_string>
 800f648:	6863      	ldr	r3, [r4, #4]
 800f64a:	2b04      	cmp	r3, #4
 800f64c:	d938      	bls.n	800f6c0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f64e:	2800      	cmp	r0, #0
 800f650:	d043      	beq.n	800f6da <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f652:	69a1      	ldr	r1, [r4, #24]
 800f654:	4630      	mov	r0, r6
 800f656:	f005 fb01 	bl	8014c5c <ucdr_serialize_string>
 800f65a:	6863      	ldr	r3, [r4, #4]
 800f65c:	2b05      	cmp	r3, #5
 800f65e:	d92f      	bls.n	800f6c0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f660:	2800      	cmp	r0, #0
 800f662:	d03a      	beq.n	800f6da <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f664:	69e1      	ldr	r1, [r4, #28]
 800f666:	4630      	mov	r0, r6
 800f668:	f005 faf8 	bl	8014c5c <ucdr_serialize_string>
 800f66c:	6863      	ldr	r3, [r4, #4]
 800f66e:	2b06      	cmp	r3, #6
 800f670:	d926      	bls.n	800f6c0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f672:	b390      	cbz	r0, 800f6da <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f674:	6a21      	ldr	r1, [r4, #32]
 800f676:	4630      	mov	r0, r6
 800f678:	f005 faf0 	bl	8014c5c <ucdr_serialize_string>
 800f67c:	6863      	ldr	r3, [r4, #4]
 800f67e:	2b07      	cmp	r3, #7
 800f680:	d91e      	bls.n	800f6c0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f682:	b350      	cbz	r0, 800f6da <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f684:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800f686:	4630      	mov	r0, r6
 800f688:	f005 fae8 	bl	8014c5c <ucdr_serialize_string>
 800f68c:	6863      	ldr	r3, [r4, #4]
 800f68e:	2b08      	cmp	r3, #8
 800f690:	d916      	bls.n	800f6c0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f692:	b310      	cbz	r0, 800f6da <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f694:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800f696:	4630      	mov	r0, r6
 800f698:	f005 fae0 	bl	8014c5c <ucdr_serialize_string>
 800f69c:	6863      	ldr	r3, [r4, #4]
 800f69e:	2b09      	cmp	r3, #9
 800f6a0:	d90e      	bls.n	800f6c0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f6a2:	b1d0      	cbz	r0, 800f6da <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f6a4:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 800f6a8:	2709      	movs	r7, #9
 800f6aa:	e000      	b.n	800f6ae <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 800f6ac:	b1a8      	cbz	r0, 800f6da <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f6ae:	f858 1b04 	ldr.w	r1, [r8], #4
 800f6b2:	4630      	mov	r0, r6
 800f6b4:	f005 fad2 	bl	8014c5c <ucdr_serialize_string>
 800f6b8:	6862      	ldr	r2, [r4, #4]
 800f6ba:	3701      	adds	r7, #1
 800f6bc:	4297      	cmp	r7, r2
 800f6be:	d3f5      	bcc.n	800f6ac <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 800f6c0:	4005      	ands	r5, r0
 800f6c2:	b2ed      	uxtb	r5, r5
 800f6c4:	e78a      	b.n	800f5dc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 800f6c6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800f6c8:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800f6cc:	4630      	mov	r0, r6
 800f6ce:	f7fd fcff 	bl	800d0d0 <ucdr_serialize_sequence_uint8_t>
 800f6d2:	4005      	ands	r5, r0
 800f6d4:	4628      	mov	r0, r5
 800f6d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6da:	2500      	movs	r5, #0
 800f6dc:	e77e      	b.n	800f5dc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 800f6de:	4028      	ands	r0, r5
 800f6e0:	b2c5      	uxtb	r5, r0
 800f6e2:	e77b      	b.n	800f5dc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

0800f6e4 <uxr_serialize_OBJK_Subscriber_Binary>:
 800f6e4:	b570      	push	{r4, r5, r6, lr}
 800f6e6:	460d      	mov	r5, r1
 800f6e8:	7809      	ldrb	r1, [r1, #0]
 800f6ea:	4606      	mov	r6, r0
 800f6ec:	f004 fb30 	bl	8013d50 <ucdr_serialize_bool>
 800f6f0:	782b      	ldrb	r3, [r5, #0]
 800f6f2:	4604      	mov	r4, r0
 800f6f4:	b94b      	cbnz	r3, 800f70a <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 800f6f6:	7a29      	ldrb	r1, [r5, #8]
 800f6f8:	4630      	mov	r0, r6
 800f6fa:	f004 fb29 	bl	8013d50 <ucdr_serialize_bool>
 800f6fe:	7a2b      	ldrb	r3, [r5, #8]
 800f700:	4004      	ands	r4, r0
 800f702:	b2e4      	uxtb	r4, r4
 800f704:	b943      	cbnz	r3, 800f718 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 800f706:	4620      	mov	r0, r4
 800f708:	bd70      	pop	{r4, r5, r6, pc}
 800f70a:	6869      	ldr	r1, [r5, #4]
 800f70c:	4630      	mov	r0, r6
 800f70e:	f005 faa5 	bl	8014c5c <ucdr_serialize_string>
 800f712:	4004      	ands	r4, r0
 800f714:	b2e4      	uxtb	r4, r4
 800f716:	e7ee      	b.n	800f6f6 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 800f718:	f105 010c 	add.w	r1, r5, #12
 800f71c:	4630      	mov	r0, r6
 800f71e:	f7ff ff53 	bl	800f5c8 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 800f722:	4004      	ands	r4, r0
 800f724:	4620      	mov	r0, r4
 800f726:	bd70      	pop	{r4, r5, r6, pc}

0800f728 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 800f728:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 800f72c:	4688      	mov	r8, r1
 800f72e:	8809      	ldrh	r1, [r1, #0]
 800f730:	4681      	mov	r9, r0
 800f732:	f004 fb67 	bl	8013e04 <ucdr_serialize_uint16_t>
 800f736:	f898 1002 	ldrb.w	r1, [r8, #2]
 800f73a:	4606      	mov	r6, r0
 800f73c:	4648      	mov	r0, r9
 800f73e:	f004 fb07 	bl	8013d50 <ucdr_serialize_bool>
 800f742:	f898 3002 	ldrb.w	r3, [r8, #2]
 800f746:	4006      	ands	r6, r0
 800f748:	b2f5      	uxtb	r5, r6
 800f74a:	b9eb      	cbnz	r3, 800f788 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 800f74c:	f898 1006 	ldrb.w	r1, [r8, #6]
 800f750:	4648      	mov	r0, r9
 800f752:	f004 fafd 	bl	8013d50 <ucdr_serialize_bool>
 800f756:	f898 3006 	ldrb.w	r3, [r8, #6]
 800f75a:	4005      	ands	r5, r0
 800f75c:	bb7b      	cbnz	r3, 800f7be <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 800f75e:	f898 100c 	ldrb.w	r1, [r8, #12]
 800f762:	4648      	mov	r0, r9
 800f764:	f004 faf4 	bl	8013d50 <ucdr_serialize_bool>
 800f768:	f898 300c 	ldrb.w	r3, [r8, #12]
 800f76c:	4005      	ands	r5, r0
 800f76e:	b9f3      	cbnz	r3, 800f7ae <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 800f770:	f898 1014 	ldrb.w	r1, [r8, #20]
 800f774:	4648      	mov	r0, r9
 800f776:	f004 faeb 	bl	8013d50 <ucdr_serialize_bool>
 800f77a:	f898 3014 	ldrb.w	r3, [r8, #20]
 800f77e:	4005      	ands	r5, r0
 800f780:	b94b      	cbnz	r3, 800f796 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 800f782:	4628      	mov	r0, r5
 800f784:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800f788:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 800f78c:	4648      	mov	r0, r9
 800f78e:	f004 fb39 	bl	8013e04 <ucdr_serialize_uint16_t>
 800f792:	4005      	ands	r5, r0
 800f794:	e7da      	b.n	800f74c <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 800f796:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800f79a:	f108 011c 	add.w	r1, r8, #28
 800f79e:	4648      	mov	r0, r9
 800f7a0:	f7fd fc96 	bl	800d0d0 <ucdr_serialize_sequence_uint8_t>
 800f7a4:	4028      	ands	r0, r5
 800f7a6:	b2c5      	uxtb	r5, r0
 800f7a8:	4628      	mov	r0, r5
 800f7aa:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800f7ae:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800f7b2:	4648      	mov	r0, r9
 800f7b4:	f004 fd10 	bl	80141d8 <ucdr_serialize_uint32_t>
 800f7b8:	4028      	ands	r0, r5
 800f7ba:	b2c5      	uxtb	r5, r0
 800f7bc:	e7d8      	b.n	800f770 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 800f7be:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800f7c2:	4648      	mov	r0, r9
 800f7c4:	f004 fd08 	bl	80141d8 <ucdr_serialize_uint32_t>
 800f7c8:	4028      	ands	r0, r5
 800f7ca:	b2c5      	uxtb	r5, r0
 800f7cc:	e7c7      	b.n	800f75e <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 800f7ce:	bf00      	nop

0800f7d0 <uxr_serialize_OBJK_DataReader_Binary>:
 800f7d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7d2:	2202      	movs	r2, #2
 800f7d4:	460c      	mov	r4, r1
 800f7d6:	4606      	mov	r6, r0
 800f7d8:	f004 f9f2 	bl	8013bc0 <ucdr_serialize_array_uint8_t>
 800f7dc:	78a1      	ldrb	r1, [r4, #2]
 800f7de:	4605      	mov	r5, r0
 800f7e0:	4630      	mov	r0, r6
 800f7e2:	f004 fab5 	bl	8013d50 <ucdr_serialize_bool>
 800f7e6:	78a3      	ldrb	r3, [r4, #2]
 800f7e8:	4005      	ands	r5, r0
 800f7ea:	b2ed      	uxtb	r5, r5
 800f7ec:	b90b      	cbnz	r3, 800f7f2 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 800f7ee:	4628      	mov	r0, r5
 800f7f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f7f2:	f104 0108 	add.w	r1, r4, #8
 800f7f6:	4630      	mov	r0, r6
 800f7f8:	f7ff ff96 	bl	800f728 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800f7fc:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800f800:	4607      	mov	r7, r0
 800f802:	4630      	mov	r0, r6
 800f804:	f004 faa4 	bl	8013d50 <ucdr_serialize_bool>
 800f808:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800f80c:	4038      	ands	r0, r7
 800f80e:	b2c7      	uxtb	r7, r0
 800f810:	b95b      	cbnz	r3, 800f82a <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 800f812:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 800f816:	4630      	mov	r0, r6
 800f818:	f004 fa9a 	bl	8013d50 <ucdr_serialize_bool>
 800f81c:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800f820:	4007      	ands	r7, r0
 800f822:	b94b      	cbnz	r3, 800f838 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 800f824:	403d      	ands	r5, r7
 800f826:	4628      	mov	r0, r5
 800f828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f82a:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 800f82e:	4630      	mov	r0, r6
 800f830:	f004 ff28 	bl	8014684 <ucdr_serialize_uint64_t>
 800f834:	4007      	ands	r7, r0
 800f836:	e7ec      	b.n	800f812 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 800f838:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 800f83a:	4630      	mov	r0, r6
 800f83c:	f005 fa0e 	bl	8014c5c <ucdr_serialize_string>
 800f840:	4007      	ands	r7, r0
 800f842:	b2ff      	uxtb	r7, r7
 800f844:	e7ee      	b.n	800f824 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 800f846:	bf00      	nop

0800f848 <uxr_serialize_OBJK_DataWriter_Binary>:
 800f848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f84a:	2202      	movs	r2, #2
 800f84c:	460d      	mov	r5, r1
 800f84e:	4606      	mov	r6, r0
 800f850:	f004 f9b6 	bl	8013bc0 <ucdr_serialize_array_uint8_t>
 800f854:	78a9      	ldrb	r1, [r5, #2]
 800f856:	4604      	mov	r4, r0
 800f858:	4630      	mov	r0, r6
 800f85a:	f004 fa79 	bl	8013d50 <ucdr_serialize_bool>
 800f85e:	78ab      	ldrb	r3, [r5, #2]
 800f860:	4004      	ands	r4, r0
 800f862:	b2e4      	uxtb	r4, r4
 800f864:	b90b      	cbnz	r3, 800f86a <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 800f866:	4620      	mov	r0, r4
 800f868:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f86a:	f105 0108 	add.w	r1, r5, #8
 800f86e:	4630      	mov	r0, r6
 800f870:	f7ff ff5a 	bl	800f728 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800f874:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 800f878:	4607      	mov	r7, r0
 800f87a:	4630      	mov	r0, r6
 800f87c:	f004 fa68 	bl	8013d50 <ucdr_serialize_bool>
 800f880:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 800f884:	4038      	ands	r0, r7
 800f886:	b2c7      	uxtb	r7, r0
 800f888:	b913      	cbnz	r3, 800f890 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 800f88a:	403c      	ands	r4, r7
 800f88c:	4620      	mov	r0, r4
 800f88e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f890:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 800f894:	4630      	mov	r0, r6
 800f896:	f004 fef5 	bl	8014684 <ucdr_serialize_uint64_t>
 800f89a:	4007      	ands	r7, r0
 800f89c:	e7f5      	b.n	800f88a <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 800f89e:	bf00      	nop

0800f8a0 <uxr_deserialize_ObjectVariant>:
 800f8a0:	b570      	push	{r4, r5, r6, lr}
 800f8a2:	4605      	mov	r5, r0
 800f8a4:	460e      	mov	r6, r1
 800f8a6:	f004 fa97 	bl	8013dd8 <ucdr_deserialize_uint8_t>
 800f8aa:	b168      	cbz	r0, 800f8c8 <uxr_deserialize_ObjectVariant+0x28>
 800f8ac:	7833      	ldrb	r3, [r6, #0]
 800f8ae:	3b01      	subs	r3, #1
 800f8b0:	4604      	mov	r4, r0
 800f8b2:	2b0d      	cmp	r3, #13
 800f8b4:	d809      	bhi.n	800f8ca <uxr_deserialize_ObjectVariant+0x2a>
 800f8b6:	e8df f003 	tbb	[pc, r3]
 800f8ba:	0a41      	.short	0x0a41
 800f8bc:	0a0a2323 	.word	0x0a0a2323
 800f8c0:	10080a0a 	.word	0x10080a0a
 800f8c4:	565c1010 	.word	0x565c1010
 800f8c8:	2400      	movs	r4, #0
 800f8ca:	4620      	mov	r0, r4
 800f8cc:	bd70      	pop	{r4, r5, r6, pc}
 800f8ce:	1d31      	adds	r1, r6, #4
 800f8d0:	4628      	mov	r0, r5
 800f8d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f8d6:	f7ff bd55 	b.w	800f384 <uxr_deserialize_DATAWRITER_Representation>
 800f8da:	1d31      	adds	r1, r6, #4
 800f8dc:	4628      	mov	r0, r5
 800f8de:	f004 fa7b 	bl	8013dd8 <ucdr_deserialize_uint8_t>
 800f8e2:	2800      	cmp	r0, #0
 800f8e4:	d0f0      	beq.n	800f8c8 <uxr_deserialize_ObjectVariant+0x28>
 800f8e6:	7933      	ldrb	r3, [r6, #4]
 800f8e8:	2b01      	cmp	r3, #1
 800f8ea:	d001      	beq.n	800f8f0 <uxr_deserialize_ObjectVariant+0x50>
 800f8ec:	2b02      	cmp	r3, #2
 800f8ee:	d1ec      	bne.n	800f8ca <uxr_deserialize_ObjectVariant+0x2a>
 800f8f0:	68b1      	ldr	r1, [r6, #8]
 800f8f2:	4628      	mov	r0, r5
 800f8f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f8f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f8fc:	f005 b9be 	b.w	8014c7c <ucdr_deserialize_string>
 800f900:	1d31      	adds	r1, r6, #4
 800f902:	4628      	mov	r0, r5
 800f904:	f004 fa68 	bl	8013dd8 <ucdr_deserialize_uint8_t>
 800f908:	4604      	mov	r4, r0
 800f90a:	b170      	cbz	r0, 800f92a <uxr_deserialize_ObjectVariant+0x8a>
 800f90c:	7933      	ldrb	r3, [r6, #4]
 800f90e:	2b02      	cmp	r3, #2
 800f910:	d04c      	beq.n	800f9ac <uxr_deserialize_ObjectVariant+0x10c>
 800f912:	2b03      	cmp	r3, #3
 800f914:	d109      	bne.n	800f92a <uxr_deserialize_ObjectVariant+0x8a>
 800f916:	f106 0308 	add.w	r3, r6, #8
 800f91a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f91e:	f106 010c 	add.w	r1, r6, #12
 800f922:	4628      	mov	r0, r5
 800f924:	f7fd fbe6 	bl	800d0f4 <ucdr_deserialize_sequence_uint8_t>
 800f928:	4604      	mov	r4, r0
 800f92a:	2202      	movs	r2, #2
 800f92c:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800f930:	4628      	mov	r0, r5
 800f932:	f004 f9a9 	bl	8013c88 <ucdr_deserialize_array_uint8_t>
 800f936:	4020      	ands	r0, r4
 800f938:	b2c4      	uxtb	r4, r0
 800f93a:	e7c6      	b.n	800f8ca <uxr_deserialize_ObjectVariant+0x2a>
 800f93c:	1d31      	adds	r1, r6, #4
 800f93e:	4628      	mov	r0, r5
 800f940:	f004 fa4a 	bl	8013dd8 <ucdr_deserialize_uint8_t>
 800f944:	4604      	mov	r4, r0
 800f946:	b130      	cbz	r0, 800f956 <uxr_deserialize_ObjectVariant+0xb6>
 800f948:	7933      	ldrb	r3, [r6, #4]
 800f94a:	2b02      	cmp	r3, #2
 800f94c:	d036      	beq.n	800f9bc <uxr_deserialize_ObjectVariant+0x11c>
 800f94e:	2b03      	cmp	r3, #3
 800f950:	d03c      	beq.n	800f9cc <uxr_deserialize_ObjectVariant+0x12c>
 800f952:	2b01      	cmp	r3, #1
 800f954:	d032      	beq.n	800f9bc <uxr_deserialize_ObjectVariant+0x11c>
 800f956:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800f95a:	4628      	mov	r0, r5
 800f95c:	f004 ffe2 	bl	8014924 <ucdr_deserialize_int16_t>
 800f960:	4020      	ands	r0, r4
 800f962:	b2c4      	uxtb	r4, r0
 800f964:	e7b1      	b.n	800f8ca <uxr_deserialize_ObjectVariant+0x2a>
 800f966:	1d31      	adds	r1, r6, #4
 800f968:	4628      	mov	r0, r5
 800f96a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f96e:	f7ff bbbf 	b.w	800f0f0 <uxr_deserialize_CLIENT_Representation>
 800f972:	2204      	movs	r2, #4
 800f974:	18b1      	adds	r1, r6, r2
 800f976:	4628      	mov	r0, r5
 800f978:	f004 f986 	bl	8013c88 <ucdr_deserialize_array_uint8_t>
 800f97c:	2202      	movs	r2, #2
 800f97e:	f106 0108 	add.w	r1, r6, #8
 800f982:	4604      	mov	r4, r0
 800f984:	4628      	mov	r0, r5
 800f986:	f004 f97f 	bl	8013c88 <ucdr_deserialize_array_uint8_t>
 800f98a:	2202      	movs	r2, #2
 800f98c:	4004      	ands	r4, r0
 800f98e:	f106 010a 	add.w	r1, r6, #10
 800f992:	4628      	mov	r0, r5
 800f994:	f004 f978 	bl	8013c88 <ucdr_deserialize_array_uint8_t>
 800f998:	b2e4      	uxtb	r4, r4
 800f99a:	4603      	mov	r3, r0
 800f99c:	f106 010c 	add.w	r1, r6, #12
 800f9a0:	4628      	mov	r0, r5
 800f9a2:	401c      	ands	r4, r3
 800f9a4:	f004 f9ea 	bl	8013d7c <ucdr_deserialize_bool>
 800f9a8:	4004      	ands	r4, r0
 800f9aa:	e78e      	b.n	800f8ca <uxr_deserialize_ObjectVariant+0x2a>
 800f9ac:	68b1      	ldr	r1, [r6, #8]
 800f9ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f9b2:	4628      	mov	r0, r5
 800f9b4:	f005 f962 	bl	8014c7c <ucdr_deserialize_string>
 800f9b8:	4604      	mov	r4, r0
 800f9ba:	e7b6      	b.n	800f92a <uxr_deserialize_ObjectVariant+0x8a>
 800f9bc:	68b1      	ldr	r1, [r6, #8]
 800f9be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f9c2:	4628      	mov	r0, r5
 800f9c4:	f005 f95a 	bl	8014c7c <ucdr_deserialize_string>
 800f9c8:	4604      	mov	r4, r0
 800f9ca:	e7c4      	b.n	800f956 <uxr_deserialize_ObjectVariant+0xb6>
 800f9cc:	f106 0308 	add.w	r3, r6, #8
 800f9d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f9d4:	f106 010c 	add.w	r1, r6, #12
 800f9d8:	4628      	mov	r0, r5
 800f9da:	f7fd fb8b 	bl	800d0f4 <ucdr_deserialize_sequence_uint8_t>
 800f9de:	4604      	mov	r4, r0
 800f9e0:	e7b9      	b.n	800f956 <uxr_deserialize_ObjectVariant+0xb6>
 800f9e2:	bf00      	nop

0800f9e4 <uxr_deserialize_BaseObjectRequest>:
 800f9e4:	b570      	push	{r4, r5, r6, lr}
 800f9e6:	2202      	movs	r2, #2
 800f9e8:	4605      	mov	r5, r0
 800f9ea:	460e      	mov	r6, r1
 800f9ec:	f004 f94c 	bl	8013c88 <ucdr_deserialize_array_uint8_t>
 800f9f0:	2202      	movs	r2, #2
 800f9f2:	4604      	mov	r4, r0
 800f9f4:	18b1      	adds	r1, r6, r2
 800f9f6:	4628      	mov	r0, r5
 800f9f8:	f004 f946 	bl	8013c88 <ucdr_deserialize_array_uint8_t>
 800f9fc:	4020      	ands	r0, r4
 800f9fe:	b2c0      	uxtb	r0, r0
 800fa00:	bd70      	pop	{r4, r5, r6, pc}
 800fa02:	bf00      	nop

0800fa04 <uxr_serialize_ActivityInfoVariant>:
 800fa04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa08:	460d      	mov	r5, r1
 800fa0a:	7809      	ldrb	r1, [r1, #0]
 800fa0c:	4607      	mov	r7, r0
 800fa0e:	f004 f9cd 	bl	8013dac <ucdr_serialize_uint8_t>
 800fa12:	4681      	mov	r9, r0
 800fa14:	b138      	cbz	r0, 800fa26 <uxr_serialize_ActivityInfoVariant+0x22>
 800fa16:	782b      	ldrb	r3, [r5, #0]
 800fa18:	2b06      	cmp	r3, #6
 800fa1a:	f000 8082 	beq.w	800fb22 <uxr_serialize_ActivityInfoVariant+0x11e>
 800fa1e:	2b0d      	cmp	r3, #13
 800fa20:	d016      	beq.n	800fa50 <uxr_serialize_ActivityInfoVariant+0x4c>
 800fa22:	2b05      	cmp	r3, #5
 800fa24:	d002      	beq.n	800fa2c <uxr_serialize_ActivityInfoVariant+0x28>
 800fa26:	4648      	mov	r0, r9
 800fa28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa2c:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800fa30:	4638      	mov	r0, r7
 800fa32:	f004 fef7 	bl	8014824 <ucdr_serialize_int16_t>
 800fa36:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 800fa3a:	4681      	mov	r9, r0
 800fa3c:	4638      	mov	r0, r7
 800fa3e:	f004 fe21 	bl	8014684 <ucdr_serialize_uint64_t>
 800fa42:	ea09 0000 	and.w	r0, r9, r0
 800fa46:	fa5f f980 	uxtb.w	r9, r0
 800fa4a:	4648      	mov	r0, r9
 800fa4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa50:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800fa54:	4638      	mov	r0, r7
 800fa56:	f004 fee5 	bl	8014824 <ucdr_serialize_int16_t>
 800fa5a:	68e9      	ldr	r1, [r5, #12]
 800fa5c:	4681      	mov	r9, r0
 800fa5e:	4638      	mov	r0, r7
 800fa60:	f004 fbba 	bl	80141d8 <ucdr_serialize_uint32_t>
 800fa64:	68eb      	ldr	r3, [r5, #12]
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d0eb      	beq.n	800fa42 <uxr_serialize_ActivityInfoVariant+0x3e>
 800fa6a:	b320      	cbz	r0, 800fab6 <uxr_serialize_ActivityInfoVariant+0xb2>
 800fa6c:	f105 080c 	add.w	r8, r5, #12
 800fa70:	2600      	movs	r6, #0
 800fa72:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 800fa76:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 800fa7a:	f89a 1010 	ldrb.w	r1, [sl, #16]
 800fa7e:	4638      	mov	r0, r7
 800fa80:	f004 f994 	bl	8013dac <ucdr_serialize_uint8_t>
 800fa84:	2800      	cmp	r0, #0
 800fa86:	d053      	beq.n	800fb30 <uxr_serialize_ActivityInfoVariant+0x12c>
 800fa88:	f89a 3010 	ldrb.w	r3, [sl, #16]
 800fa8c:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 800fa90:	0074      	lsls	r4, r6, #1
 800fa92:	00c9      	lsls	r1, r1, #3
 800fa94:	2b03      	cmp	r3, #3
 800fa96:	d854      	bhi.n	800fb42 <uxr_serialize_ActivityInfoVariant+0x13e>
 800fa98:	e8df f003 	tbb	[pc, r3]
 800fa9c:	02102132 	.word	0x02102132
 800faa0:	4441      	add	r1, r8
 800faa2:	4638      	mov	r0, r7
 800faa4:	6889      	ldr	r1, [r1, #8]
 800faa6:	f005 f8d9 	bl	8014c5c <ucdr_serialize_string>
 800faaa:	68ea      	ldr	r2, [r5, #12]
 800faac:	3601      	adds	r6, #1
 800faae:	4296      	cmp	r6, r2
 800fab0:	d242      	bcs.n	800fb38 <uxr_serialize_ActivityInfoVariant+0x134>
 800fab2:	2800      	cmp	r0, #0
 800fab4:	d1dd      	bne.n	800fa72 <uxr_serialize_ActivityInfoVariant+0x6e>
 800fab6:	f04f 0900 	mov.w	r9, #0
 800faba:	e7b4      	b.n	800fa26 <uxr_serialize_ActivityInfoVariant+0x22>
 800fabc:	3108      	adds	r1, #8
 800fabe:	4441      	add	r1, r8
 800fac0:	2210      	movs	r2, #16
 800fac2:	4638      	mov	r0, r7
 800fac4:	f004 f87c 	bl	8013bc0 <ucdr_serialize_array_uint8_t>
 800fac8:	4434      	add	r4, r6
 800faca:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800face:	4604      	mov	r4, r0
 800fad0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800fad2:	4638      	mov	r0, r7
 800fad4:	f004 fb80 	bl	80141d8 <ucdr_serialize_uint32_t>
 800fad8:	4020      	ands	r0, r4
 800fada:	b2c0      	uxtb	r0, r0
 800fadc:	e7e5      	b.n	800faaa <uxr_serialize_ActivityInfoVariant+0xa6>
 800fade:	3108      	adds	r1, #8
 800fae0:	4441      	add	r1, r8
 800fae2:	2204      	movs	r2, #4
 800fae4:	4638      	mov	r0, r7
 800fae6:	f004 f86b 	bl	8013bc0 <ucdr_serialize_array_uint8_t>
 800faea:	4434      	add	r4, r6
 800faec:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800faf0:	4604      	mov	r4, r0
 800faf2:	8b19      	ldrh	r1, [r3, #24]
 800faf4:	4638      	mov	r0, r7
 800faf6:	f004 f985 	bl	8013e04 <ucdr_serialize_uint16_t>
 800fafa:	4020      	ands	r0, r4
 800fafc:	b2c0      	uxtb	r0, r0
 800fafe:	e7d4      	b.n	800faaa <uxr_serialize_ActivityInfoVariant+0xa6>
 800fb00:	3108      	adds	r1, #8
 800fb02:	4441      	add	r1, r8
 800fb04:	2202      	movs	r2, #2
 800fb06:	4638      	mov	r0, r7
 800fb08:	f004 f85a 	bl	8013bc0 <ucdr_serialize_array_uint8_t>
 800fb0c:	4434      	add	r4, r6
 800fb0e:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800fb12:	4604      	mov	r4, r0
 800fb14:	7d99      	ldrb	r1, [r3, #22]
 800fb16:	4638      	mov	r0, r7
 800fb18:	f004 f948 	bl	8013dac <ucdr_serialize_uint8_t>
 800fb1c:	4020      	ands	r0, r4
 800fb1e:	b2c0      	uxtb	r0, r0
 800fb20:	e7c3      	b.n	800faaa <uxr_serialize_ActivityInfoVariant+0xa6>
 800fb22:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800fb26:	4638      	mov	r0, r7
 800fb28:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb2c:	f004 be7a 	b.w	8014824 <ucdr_serialize_int16_t>
 800fb30:	68ea      	ldr	r2, [r5, #12]
 800fb32:	3601      	adds	r6, #1
 800fb34:	42b2      	cmp	r2, r6
 800fb36:	d8be      	bhi.n	800fab6 <uxr_serialize_ActivityInfoVariant+0xb2>
 800fb38:	ea09 0900 	and.w	r9, r9, r0
 800fb3c:	fa5f f989 	uxtb.w	r9, r9
 800fb40:	e771      	b.n	800fa26 <uxr_serialize_ActivityInfoVariant+0x22>
 800fb42:	68eb      	ldr	r3, [r5, #12]
 800fb44:	3601      	adds	r6, #1
 800fb46:	429e      	cmp	r6, r3
 800fb48:	f10a 0a18 	add.w	sl, sl, #24
 800fb4c:	d395      	bcc.n	800fa7a <uxr_serialize_ActivityInfoVariant+0x76>
 800fb4e:	e76a      	b.n	800fa26 <uxr_serialize_ActivityInfoVariant+0x22>

0800fb50 <uxr_deserialize_BaseObjectReply>:
 800fb50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb54:	2202      	movs	r2, #2
 800fb56:	4606      	mov	r6, r0
 800fb58:	460f      	mov	r7, r1
 800fb5a:	f004 f895 	bl	8013c88 <ucdr_deserialize_array_uint8_t>
 800fb5e:	2202      	movs	r2, #2
 800fb60:	18b9      	adds	r1, r7, r2
 800fb62:	4605      	mov	r5, r0
 800fb64:	4630      	mov	r0, r6
 800fb66:	f004 f88f 	bl	8013c88 <ucdr_deserialize_array_uint8_t>
 800fb6a:	1d39      	adds	r1, r7, #4
 800fb6c:	4680      	mov	r8, r0
 800fb6e:	4630      	mov	r0, r6
 800fb70:	f004 f932 	bl	8013dd8 <ucdr_deserialize_uint8_t>
 800fb74:	1d79      	adds	r1, r7, #5
 800fb76:	4604      	mov	r4, r0
 800fb78:	4630      	mov	r0, r6
 800fb7a:	f004 f92d 	bl	8013dd8 <ucdr_deserialize_uint8_t>
 800fb7e:	ea05 0508 	and.w	r5, r5, r8
 800fb82:	402c      	ands	r4, r5
 800fb84:	4020      	ands	r0, r4
 800fb86:	b2c0      	uxtb	r0, r0
 800fb88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800fb8c <uxr_serialize_ReadSpecification>:
 800fb8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb90:	460e      	mov	r6, r1
 800fb92:	7809      	ldrb	r1, [r1, #0]
 800fb94:	4607      	mov	r7, r0
 800fb96:	f004 f909 	bl	8013dac <ucdr_serialize_uint8_t>
 800fb9a:	7871      	ldrb	r1, [r6, #1]
 800fb9c:	4604      	mov	r4, r0
 800fb9e:	4638      	mov	r0, r7
 800fba0:	f004 f904 	bl	8013dac <ucdr_serialize_uint8_t>
 800fba4:	78b1      	ldrb	r1, [r6, #2]
 800fba6:	4004      	ands	r4, r0
 800fba8:	4638      	mov	r0, r7
 800fbaa:	f004 f8d1 	bl	8013d50 <ucdr_serialize_bool>
 800fbae:	78b3      	ldrb	r3, [r6, #2]
 800fbb0:	b2e4      	uxtb	r4, r4
 800fbb2:	4004      	ands	r4, r0
 800fbb4:	b94b      	cbnz	r3, 800fbca <uxr_serialize_ReadSpecification+0x3e>
 800fbb6:	7a31      	ldrb	r1, [r6, #8]
 800fbb8:	4638      	mov	r0, r7
 800fbba:	f004 f8c9 	bl	8013d50 <ucdr_serialize_bool>
 800fbbe:	7a33      	ldrb	r3, [r6, #8]
 800fbc0:	4004      	ands	r4, r0
 800fbc2:	b943      	cbnz	r3, 800fbd6 <uxr_serialize_ReadSpecification+0x4a>
 800fbc4:	4620      	mov	r0, r4
 800fbc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbca:	6871      	ldr	r1, [r6, #4]
 800fbcc:	4638      	mov	r0, r7
 800fbce:	f005 f845 	bl	8014c5c <ucdr_serialize_string>
 800fbd2:	4004      	ands	r4, r0
 800fbd4:	e7ef      	b.n	800fbb6 <uxr_serialize_ReadSpecification+0x2a>
 800fbd6:	8971      	ldrh	r1, [r6, #10]
 800fbd8:	4638      	mov	r0, r7
 800fbda:	f004 f913 	bl	8013e04 <ucdr_serialize_uint16_t>
 800fbde:	89b1      	ldrh	r1, [r6, #12]
 800fbe0:	4605      	mov	r5, r0
 800fbe2:	4638      	mov	r0, r7
 800fbe4:	f004 f90e 	bl	8013e04 <ucdr_serialize_uint16_t>
 800fbe8:	89f1      	ldrh	r1, [r6, #14]
 800fbea:	4005      	ands	r5, r0
 800fbec:	4638      	mov	r0, r7
 800fbee:	f004 f909 	bl	8013e04 <ucdr_serialize_uint16_t>
 800fbf2:	8a31      	ldrh	r1, [r6, #16]
 800fbf4:	4680      	mov	r8, r0
 800fbf6:	4638      	mov	r0, r7
 800fbf8:	f004 f904 	bl	8013e04 <ucdr_serialize_uint16_t>
 800fbfc:	b2ed      	uxtb	r5, r5
 800fbfe:	4025      	ands	r5, r4
 800fc00:	ea08 0505 	and.w	r5, r8, r5
 800fc04:	ea00 0405 	and.w	r4, r0, r5
 800fc08:	4620      	mov	r0, r4
 800fc0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc0e:	bf00      	nop

0800fc10 <uxr_serialize_CREATE_CLIENT_Payload>:
 800fc10:	f7ff ba16 	b.w	800f040 <uxr_serialize_CLIENT_Representation>

0800fc14 <uxr_serialize_CREATE_Payload>:
 800fc14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc16:	2202      	movs	r2, #2
 800fc18:	4607      	mov	r7, r0
 800fc1a:	460e      	mov	r6, r1
 800fc1c:	f003 ffd0 	bl	8013bc0 <ucdr_serialize_array_uint8_t>
 800fc20:	2202      	movs	r2, #2
 800fc22:	18b1      	adds	r1, r6, r2
 800fc24:	4605      	mov	r5, r0
 800fc26:	4638      	mov	r0, r7
 800fc28:	f003 ffca 	bl	8013bc0 <ucdr_serialize_array_uint8_t>
 800fc2c:	7931      	ldrb	r1, [r6, #4]
 800fc2e:	4604      	mov	r4, r0
 800fc30:	4638      	mov	r0, r7
 800fc32:	f004 f8bb 	bl	8013dac <ucdr_serialize_uint8_t>
 800fc36:	b170      	cbz	r0, 800fc56 <uxr_serialize_CREATE_Payload+0x42>
 800fc38:	7933      	ldrb	r3, [r6, #4]
 800fc3a:	402c      	ands	r4, r5
 800fc3c:	3b01      	subs	r3, #1
 800fc3e:	b2e4      	uxtb	r4, r4
 800fc40:	2b0d      	cmp	r3, #13
 800fc42:	d809      	bhi.n	800fc58 <uxr_serialize_CREATE_Payload+0x44>
 800fc44:	e8df f003 	tbb	[pc, r3]
 800fc48:	23230a4c 	.word	0x23230a4c
 800fc4c:	0a0a0a0a 	.word	0x0a0a0a0a
 800fc50:	12121208 	.word	0x12121208
 800fc54:	3e45      	.short	0x3e45
 800fc56:	2400      	movs	r4, #0
 800fc58:	4620      	mov	r0, r4
 800fc5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc5c:	f106 0108 	add.w	r1, r6, #8
 800fc60:	4638      	mov	r0, r7
 800fc62:	f7ff faf3 	bl	800f24c <uxr_serialize_DATAWRITER_Representation>
 800fc66:	4004      	ands	r4, r0
 800fc68:	4620      	mov	r0, r4
 800fc6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc6c:	7a31      	ldrb	r1, [r6, #8]
 800fc6e:	4638      	mov	r0, r7
 800fc70:	f004 f89c 	bl	8013dac <ucdr_serialize_uint8_t>
 800fc74:	2800      	cmp	r0, #0
 800fc76:	d0ee      	beq.n	800fc56 <uxr_serialize_CREATE_Payload+0x42>
 800fc78:	7a33      	ldrb	r3, [r6, #8]
 800fc7a:	2b01      	cmp	r3, #1
 800fc7c:	d001      	beq.n	800fc82 <uxr_serialize_CREATE_Payload+0x6e>
 800fc7e:	2b02      	cmp	r3, #2
 800fc80:	d1ea      	bne.n	800fc58 <uxr_serialize_CREATE_Payload+0x44>
 800fc82:	68f1      	ldr	r1, [r6, #12]
 800fc84:	4638      	mov	r0, r7
 800fc86:	f004 ffe9 	bl	8014c5c <ucdr_serialize_string>
 800fc8a:	4004      	ands	r4, r0
 800fc8c:	e7e4      	b.n	800fc58 <uxr_serialize_CREATE_Payload+0x44>
 800fc8e:	7a31      	ldrb	r1, [r6, #8]
 800fc90:	4638      	mov	r0, r7
 800fc92:	f004 f88b 	bl	8013dac <ucdr_serialize_uint8_t>
 800fc96:	4605      	mov	r5, r0
 800fc98:	b158      	cbz	r0, 800fcb2 <uxr_serialize_CREATE_Payload+0x9e>
 800fc9a:	7a33      	ldrb	r3, [r6, #8]
 800fc9c:	2b02      	cmp	r3, #2
 800fc9e:	d034      	beq.n	800fd0a <uxr_serialize_CREATE_Payload+0xf6>
 800fca0:	2b03      	cmp	r3, #3
 800fca2:	d106      	bne.n	800fcb2 <uxr_serialize_CREATE_Payload+0x9e>
 800fca4:	68f2      	ldr	r2, [r6, #12]
 800fca6:	f106 0110 	add.w	r1, r6, #16
 800fcaa:	4638      	mov	r0, r7
 800fcac:	f7fd fa10 	bl	800d0d0 <ucdr_serialize_sequence_uint8_t>
 800fcb0:	4605      	mov	r5, r0
 800fcb2:	2202      	movs	r2, #2
 800fcb4:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 800fcb8:	4638      	mov	r0, r7
 800fcba:	f003 ff81 	bl	8013bc0 <ucdr_serialize_array_uint8_t>
 800fcbe:	4028      	ands	r0, r5
 800fcc0:	4004      	ands	r4, r0
 800fcc2:	e7c9      	b.n	800fc58 <uxr_serialize_CREATE_Payload+0x44>
 800fcc4:	f106 0108 	add.w	r1, r6, #8
 800fcc8:	4638      	mov	r0, r7
 800fcca:	f7ff f9b9 	bl	800f040 <uxr_serialize_CLIENT_Representation>
 800fcce:	4004      	ands	r4, r0
 800fcd0:	e7c2      	b.n	800fc58 <uxr_serialize_CREATE_Payload+0x44>
 800fcd2:	f106 0108 	add.w	r1, r6, #8
 800fcd6:	4638      	mov	r0, r7
 800fcd8:	f7ff fa6e 	bl	800f1b8 <uxr_serialize_AGENT_Representation>
 800fcdc:	4004      	ands	r4, r0
 800fcde:	e7bb      	b.n	800fc58 <uxr_serialize_CREATE_Payload+0x44>
 800fce0:	7a31      	ldrb	r1, [r6, #8]
 800fce2:	4638      	mov	r0, r7
 800fce4:	f004 f862 	bl	8013dac <ucdr_serialize_uint8_t>
 800fce8:	4605      	mov	r5, r0
 800fcea:	b130      	cbz	r0, 800fcfa <uxr_serialize_CREATE_Payload+0xe6>
 800fcec:	7a33      	ldrb	r3, [r6, #8]
 800fcee:	2b02      	cmp	r3, #2
 800fcf0:	d011      	beq.n	800fd16 <uxr_serialize_CREATE_Payload+0x102>
 800fcf2:	2b03      	cmp	r3, #3
 800fcf4:	d015      	beq.n	800fd22 <uxr_serialize_CREATE_Payload+0x10e>
 800fcf6:	2b01      	cmp	r3, #1
 800fcf8:	d00d      	beq.n	800fd16 <uxr_serialize_CREATE_Payload+0x102>
 800fcfa:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 800fcfe:	4638      	mov	r0, r7
 800fd00:	f004 fd90 	bl	8014824 <ucdr_serialize_int16_t>
 800fd04:	4028      	ands	r0, r5
 800fd06:	4004      	ands	r4, r0
 800fd08:	e7a6      	b.n	800fc58 <uxr_serialize_CREATE_Payload+0x44>
 800fd0a:	68f1      	ldr	r1, [r6, #12]
 800fd0c:	4638      	mov	r0, r7
 800fd0e:	f004 ffa5 	bl	8014c5c <ucdr_serialize_string>
 800fd12:	4605      	mov	r5, r0
 800fd14:	e7cd      	b.n	800fcb2 <uxr_serialize_CREATE_Payload+0x9e>
 800fd16:	68f1      	ldr	r1, [r6, #12]
 800fd18:	4638      	mov	r0, r7
 800fd1a:	f004 ff9f 	bl	8014c5c <ucdr_serialize_string>
 800fd1e:	4605      	mov	r5, r0
 800fd20:	e7eb      	b.n	800fcfa <uxr_serialize_CREATE_Payload+0xe6>
 800fd22:	68f2      	ldr	r2, [r6, #12]
 800fd24:	f106 0110 	add.w	r1, r6, #16
 800fd28:	4638      	mov	r0, r7
 800fd2a:	f7fd f9d1 	bl	800d0d0 <ucdr_serialize_sequence_uint8_t>
 800fd2e:	4605      	mov	r5, r0
 800fd30:	e7e3      	b.n	800fcfa <uxr_serialize_CREATE_Payload+0xe6>
 800fd32:	bf00      	nop

0800fd34 <uxr_deserialize_GET_INFO_Payload>:
 800fd34:	b570      	push	{r4, r5, r6, lr}
 800fd36:	2202      	movs	r2, #2
 800fd38:	4605      	mov	r5, r0
 800fd3a:	460e      	mov	r6, r1
 800fd3c:	f003 ffa4 	bl	8013c88 <ucdr_deserialize_array_uint8_t>
 800fd40:	2202      	movs	r2, #2
 800fd42:	18b1      	adds	r1, r6, r2
 800fd44:	4604      	mov	r4, r0
 800fd46:	4628      	mov	r0, r5
 800fd48:	f003 ff9e 	bl	8013c88 <ucdr_deserialize_array_uint8_t>
 800fd4c:	1d31      	adds	r1, r6, #4
 800fd4e:	4004      	ands	r4, r0
 800fd50:	4628      	mov	r0, r5
 800fd52:	f004 fb71 	bl	8014438 <ucdr_deserialize_uint32_t>
 800fd56:	b2e4      	uxtb	r4, r4
 800fd58:	4020      	ands	r0, r4
 800fd5a:	bd70      	pop	{r4, r5, r6, pc}

0800fd5c <uxr_serialize_DELETE_Payload>:
 800fd5c:	b570      	push	{r4, r5, r6, lr}
 800fd5e:	2202      	movs	r2, #2
 800fd60:	4605      	mov	r5, r0
 800fd62:	460e      	mov	r6, r1
 800fd64:	f003 ff2c 	bl	8013bc0 <ucdr_serialize_array_uint8_t>
 800fd68:	2202      	movs	r2, #2
 800fd6a:	4604      	mov	r4, r0
 800fd6c:	18b1      	adds	r1, r6, r2
 800fd6e:	4628      	mov	r0, r5
 800fd70:	f003 ff26 	bl	8013bc0 <ucdr_serialize_array_uint8_t>
 800fd74:	4020      	ands	r0, r4
 800fd76:	b2c0      	uxtb	r0, r0
 800fd78:	bd70      	pop	{r4, r5, r6, pc}
 800fd7a:	bf00      	nop

0800fd7c <uxr_deserialize_STATUS_AGENT_Payload>:
 800fd7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd80:	4605      	mov	r5, r0
 800fd82:	460e      	mov	r6, r1
 800fd84:	f004 f828 	bl	8013dd8 <ucdr_deserialize_uint8_t>
 800fd88:	1c71      	adds	r1, r6, #1
 800fd8a:	4604      	mov	r4, r0
 800fd8c:	4628      	mov	r0, r5
 800fd8e:	f004 f823 	bl	8013dd8 <ucdr_deserialize_uint8_t>
 800fd92:	2204      	movs	r2, #4
 800fd94:	18b1      	adds	r1, r6, r2
 800fd96:	4680      	mov	r8, r0
 800fd98:	4628      	mov	r0, r5
 800fd9a:	f003 ff75 	bl	8013c88 <ucdr_deserialize_array_uint8_t>
 800fd9e:	f106 0108 	add.w	r1, r6, #8
 800fda2:	4607      	mov	r7, r0
 800fda4:	2202      	movs	r2, #2
 800fda6:	4628      	mov	r0, r5
 800fda8:	f003 ff6e 	bl	8013c88 <ucdr_deserialize_array_uint8_t>
 800fdac:	ea04 0308 	and.w	r3, r4, r8
 800fdb0:	b2db      	uxtb	r3, r3
 800fdb2:	ea03 0407 	and.w	r4, r3, r7
 800fdb6:	2202      	movs	r2, #2
 800fdb8:	4607      	mov	r7, r0
 800fdba:	f106 010a 	add.w	r1, r6, #10
 800fdbe:	4628      	mov	r0, r5
 800fdc0:	f003 ff62 	bl	8013c88 <ucdr_deserialize_array_uint8_t>
 800fdc4:	f106 010c 	add.w	r1, r6, #12
 800fdc8:	4603      	mov	r3, r0
 800fdca:	4628      	mov	r0, r5
 800fdcc:	461d      	mov	r5, r3
 800fdce:	f003 ffd5 	bl	8013d7c <ucdr_deserialize_bool>
 800fdd2:	403c      	ands	r4, r7
 800fdd4:	4025      	ands	r5, r4
 800fdd6:	4028      	ands	r0, r5
 800fdd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800fddc <uxr_deserialize_STATUS_Payload>:
 800fddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fde0:	2202      	movs	r2, #2
 800fde2:	4606      	mov	r6, r0
 800fde4:	460f      	mov	r7, r1
 800fde6:	f003 ff4f 	bl	8013c88 <ucdr_deserialize_array_uint8_t>
 800fdea:	2202      	movs	r2, #2
 800fdec:	18b9      	adds	r1, r7, r2
 800fdee:	4605      	mov	r5, r0
 800fdf0:	4630      	mov	r0, r6
 800fdf2:	f003 ff49 	bl	8013c88 <ucdr_deserialize_array_uint8_t>
 800fdf6:	1d39      	adds	r1, r7, #4
 800fdf8:	4680      	mov	r8, r0
 800fdfa:	4630      	mov	r0, r6
 800fdfc:	f003 ffec 	bl	8013dd8 <ucdr_deserialize_uint8_t>
 800fe00:	1d79      	adds	r1, r7, #5
 800fe02:	4604      	mov	r4, r0
 800fe04:	4630      	mov	r0, r6
 800fe06:	f003 ffe7 	bl	8013dd8 <ucdr_deserialize_uint8_t>
 800fe0a:	ea05 0508 	and.w	r5, r5, r8
 800fe0e:	402c      	ands	r4, r5
 800fe10:	4020      	ands	r0, r4
 800fe12:	b2c0      	uxtb	r0, r0
 800fe14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800fe18 <uxr_serialize_INFO_Payload>:
 800fe18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe1c:	2202      	movs	r2, #2
 800fe1e:	460c      	mov	r4, r1
 800fe20:	4605      	mov	r5, r0
 800fe22:	f003 fecd 	bl	8013bc0 <ucdr_serialize_array_uint8_t>
 800fe26:	2202      	movs	r2, #2
 800fe28:	18a1      	adds	r1, r4, r2
 800fe2a:	4680      	mov	r8, r0
 800fe2c:	4628      	mov	r0, r5
 800fe2e:	f003 fec7 	bl	8013bc0 <ucdr_serialize_array_uint8_t>
 800fe32:	7921      	ldrb	r1, [r4, #4]
 800fe34:	4607      	mov	r7, r0
 800fe36:	4628      	mov	r0, r5
 800fe38:	f003 ffb8 	bl	8013dac <ucdr_serialize_uint8_t>
 800fe3c:	7961      	ldrb	r1, [r4, #5]
 800fe3e:	4606      	mov	r6, r0
 800fe40:	4628      	mov	r0, r5
 800fe42:	f003 ffb3 	bl	8013dac <ucdr_serialize_uint8_t>
 800fe46:	ea08 0807 	and.w	r8, r8, r7
 800fe4a:	ea06 0608 	and.w	r6, r6, r8
 800fe4e:	4006      	ands	r6, r0
 800fe50:	7a21      	ldrb	r1, [r4, #8]
 800fe52:	4628      	mov	r0, r5
 800fe54:	f003 ff7c 	bl	8013d50 <ucdr_serialize_bool>
 800fe58:	7a23      	ldrb	r3, [r4, #8]
 800fe5a:	b2f7      	uxtb	r7, r6
 800fe5c:	4606      	mov	r6, r0
 800fe5e:	b96b      	cbnz	r3, 800fe7c <uxr_serialize_INFO_Payload+0x64>
 800fe60:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 800fe64:	4628      	mov	r0, r5
 800fe66:	f003 ff73 	bl	8013d50 <ucdr_serialize_bool>
 800fe6a:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 800fe6e:	4030      	ands	r0, r6
 800fe70:	b2c6      	uxtb	r6, r0
 800fe72:	b983      	cbnz	r3, 800fe96 <uxr_serialize_INFO_Payload+0x7e>
 800fe74:	ea06 0007 	and.w	r0, r6, r7
 800fe78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe7c:	7b21      	ldrb	r1, [r4, #12]
 800fe7e:	4628      	mov	r0, r5
 800fe80:	f003 ff94 	bl	8013dac <ucdr_serialize_uint8_t>
 800fe84:	b188      	cbz	r0, 800feaa <uxr_serialize_INFO_Payload+0x92>
 800fe86:	f104 010c 	add.w	r1, r4, #12
 800fe8a:	4628      	mov	r0, r5
 800fe8c:	f7ff fa06 	bl	800f29c <uxr_serialize_ObjectVariant.part.0>
 800fe90:	4030      	ands	r0, r6
 800fe92:	b2c6      	uxtb	r6, r0
 800fe94:	e7e4      	b.n	800fe60 <uxr_serialize_INFO_Payload+0x48>
 800fe96:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 800fe9a:	4628      	mov	r0, r5
 800fe9c:	f7ff fdb2 	bl	800fa04 <uxr_serialize_ActivityInfoVariant>
 800fea0:	4006      	ands	r6, r0
 800fea2:	ea06 0007 	and.w	r0, r6, r7
 800fea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800feaa:	4606      	mov	r6, r0
 800feac:	e7d8      	b.n	800fe60 <uxr_serialize_INFO_Payload+0x48>
 800feae:	bf00      	nop

0800feb0 <uxr_serialize_READ_DATA_Payload>:
 800feb0:	b570      	push	{r4, r5, r6, lr}
 800feb2:	2202      	movs	r2, #2
 800feb4:	4605      	mov	r5, r0
 800feb6:	460e      	mov	r6, r1
 800feb8:	f003 fe82 	bl	8013bc0 <ucdr_serialize_array_uint8_t>
 800febc:	2202      	movs	r2, #2
 800febe:	18b1      	adds	r1, r6, r2
 800fec0:	4604      	mov	r4, r0
 800fec2:	4628      	mov	r0, r5
 800fec4:	f003 fe7c 	bl	8013bc0 <ucdr_serialize_array_uint8_t>
 800fec8:	1d31      	adds	r1, r6, #4
 800feca:	4004      	ands	r4, r0
 800fecc:	4628      	mov	r0, r5
 800fece:	f7ff fe5d 	bl	800fb8c <uxr_serialize_ReadSpecification>
 800fed2:	b2e4      	uxtb	r4, r4
 800fed4:	4020      	ands	r0, r4
 800fed6:	bd70      	pop	{r4, r5, r6, pc}

0800fed8 <uxr_serialize_WRITE_DATA_Payload_Data>:
 800fed8:	b570      	push	{r4, r5, r6, lr}
 800feda:	2202      	movs	r2, #2
 800fedc:	4605      	mov	r5, r0
 800fede:	460e      	mov	r6, r1
 800fee0:	f003 fe6e 	bl	8013bc0 <ucdr_serialize_array_uint8_t>
 800fee4:	2202      	movs	r2, #2
 800fee6:	4604      	mov	r4, r0
 800fee8:	18b1      	adds	r1, r6, r2
 800feea:	4628      	mov	r0, r5
 800feec:	f003 fe68 	bl	8013bc0 <ucdr_serialize_array_uint8_t>
 800fef0:	4020      	ands	r0, r4
 800fef2:	b2c0      	uxtb	r0, r0
 800fef4:	bd70      	pop	{r4, r5, r6, pc}
 800fef6:	bf00      	nop

0800fef8 <uxr_serialize_ACKNACK_Payload>:
 800fef8:	b570      	push	{r4, r5, r6, lr}
 800fefa:	460c      	mov	r4, r1
 800fefc:	460e      	mov	r6, r1
 800fefe:	f834 1b02 	ldrh.w	r1, [r4], #2
 800ff02:	4605      	mov	r5, r0
 800ff04:	f003 ff7e 	bl	8013e04 <ucdr_serialize_uint16_t>
 800ff08:	2202      	movs	r2, #2
 800ff0a:	4621      	mov	r1, r4
 800ff0c:	4604      	mov	r4, r0
 800ff0e:	4628      	mov	r0, r5
 800ff10:	f003 fe56 	bl	8013bc0 <ucdr_serialize_array_uint8_t>
 800ff14:	7931      	ldrb	r1, [r6, #4]
 800ff16:	4004      	ands	r4, r0
 800ff18:	4628      	mov	r0, r5
 800ff1a:	f003 ff47 	bl	8013dac <ucdr_serialize_uint8_t>
 800ff1e:	b2e4      	uxtb	r4, r4
 800ff20:	4020      	ands	r0, r4
 800ff22:	bd70      	pop	{r4, r5, r6, pc}

0800ff24 <uxr_deserialize_ACKNACK_Payload>:
 800ff24:	b570      	push	{r4, r5, r6, lr}
 800ff26:	4605      	mov	r5, r0
 800ff28:	460e      	mov	r6, r1
 800ff2a:	f004 f86b 	bl	8014004 <ucdr_deserialize_uint16_t>
 800ff2e:	2202      	movs	r2, #2
 800ff30:	18b1      	adds	r1, r6, r2
 800ff32:	4604      	mov	r4, r0
 800ff34:	4628      	mov	r0, r5
 800ff36:	f003 fea7 	bl	8013c88 <ucdr_deserialize_array_uint8_t>
 800ff3a:	1d31      	adds	r1, r6, #4
 800ff3c:	4004      	ands	r4, r0
 800ff3e:	4628      	mov	r0, r5
 800ff40:	f003 ff4a 	bl	8013dd8 <ucdr_deserialize_uint8_t>
 800ff44:	b2e4      	uxtb	r4, r4
 800ff46:	4020      	ands	r0, r4
 800ff48:	bd70      	pop	{r4, r5, r6, pc}
 800ff4a:	bf00      	nop

0800ff4c <uxr_serialize_HEARTBEAT_Payload>:
 800ff4c:	b570      	push	{r4, r5, r6, lr}
 800ff4e:	460d      	mov	r5, r1
 800ff50:	8809      	ldrh	r1, [r1, #0]
 800ff52:	4606      	mov	r6, r0
 800ff54:	f003 ff56 	bl	8013e04 <ucdr_serialize_uint16_t>
 800ff58:	8869      	ldrh	r1, [r5, #2]
 800ff5a:	4604      	mov	r4, r0
 800ff5c:	4630      	mov	r0, r6
 800ff5e:	f003 ff51 	bl	8013e04 <ucdr_serialize_uint16_t>
 800ff62:	7929      	ldrb	r1, [r5, #4]
 800ff64:	4004      	ands	r4, r0
 800ff66:	4630      	mov	r0, r6
 800ff68:	f003 ff20 	bl	8013dac <ucdr_serialize_uint8_t>
 800ff6c:	b2e4      	uxtb	r4, r4
 800ff6e:	4020      	ands	r0, r4
 800ff70:	bd70      	pop	{r4, r5, r6, pc}
 800ff72:	bf00      	nop

0800ff74 <uxr_deserialize_HEARTBEAT_Payload>:
 800ff74:	b570      	push	{r4, r5, r6, lr}
 800ff76:	4605      	mov	r5, r0
 800ff78:	460e      	mov	r6, r1
 800ff7a:	f004 f843 	bl	8014004 <ucdr_deserialize_uint16_t>
 800ff7e:	1cb1      	adds	r1, r6, #2
 800ff80:	4604      	mov	r4, r0
 800ff82:	4628      	mov	r0, r5
 800ff84:	f004 f83e 	bl	8014004 <ucdr_deserialize_uint16_t>
 800ff88:	1d31      	adds	r1, r6, #4
 800ff8a:	4004      	ands	r4, r0
 800ff8c:	4628      	mov	r0, r5
 800ff8e:	f003 ff23 	bl	8013dd8 <ucdr_deserialize_uint8_t>
 800ff92:	b2e4      	uxtb	r4, r4
 800ff94:	4020      	ands	r0, r4
 800ff96:	bd70      	pop	{r4, r5, r6, pc}

0800ff98 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 800ff98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff9c:	4605      	mov	r5, r0
 800ff9e:	460e      	mov	r6, r1
 800ffa0:	f004 fdcc 	bl	8014b3c <ucdr_deserialize_int32_t>
 800ffa4:	1d31      	adds	r1, r6, #4
 800ffa6:	4607      	mov	r7, r0
 800ffa8:	4628      	mov	r0, r5
 800ffaa:	f004 fa45 	bl	8014438 <ucdr_deserialize_uint32_t>
 800ffae:	f106 0108 	add.w	r1, r6, #8
 800ffb2:	4680      	mov	r8, r0
 800ffb4:	4628      	mov	r0, r5
 800ffb6:	f004 fdc1 	bl	8014b3c <ucdr_deserialize_int32_t>
 800ffba:	f106 010c 	add.w	r1, r6, #12
 800ffbe:	4604      	mov	r4, r0
 800ffc0:	4628      	mov	r0, r5
 800ffc2:	f004 fa39 	bl	8014438 <ucdr_deserialize_uint32_t>
 800ffc6:	ea07 0708 	and.w	r7, r7, r8
 800ffca:	403c      	ands	r4, r7
 800ffcc:	f106 0110 	add.w	r1, r6, #16
 800ffd0:	4004      	ands	r4, r0
 800ffd2:	4628      	mov	r0, r5
 800ffd4:	f004 fdb2 	bl	8014b3c <ucdr_deserialize_int32_t>
 800ffd8:	f106 0114 	add.w	r1, r6, #20
 800ffdc:	4607      	mov	r7, r0
 800ffde:	4628      	mov	r0, r5
 800ffe0:	f004 fa2a 	bl	8014438 <ucdr_deserialize_uint32_t>
 800ffe4:	b2e4      	uxtb	r4, r4
 800ffe6:	403c      	ands	r4, r7
 800ffe8:	4020      	ands	r0, r4
 800ffea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ffee:	bf00      	nop

0800fff0 <uxr_serialize_SampleIdentity>:
 800fff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fff4:	220c      	movs	r2, #12
 800fff6:	4604      	mov	r4, r0
 800fff8:	460d      	mov	r5, r1
 800fffa:	f003 fde1 	bl	8013bc0 <ucdr_serialize_array_uint8_t>
 800fffe:	2203      	movs	r2, #3
 8010000:	f105 010c 	add.w	r1, r5, #12
 8010004:	4607      	mov	r7, r0
 8010006:	4620      	mov	r0, r4
 8010008:	f003 fdda 	bl	8013bc0 <ucdr_serialize_array_uint8_t>
 801000c:	7be9      	ldrb	r1, [r5, #15]
 801000e:	4680      	mov	r8, r0
 8010010:	4620      	mov	r0, r4
 8010012:	f003 fecb 	bl	8013dac <ucdr_serialize_uint8_t>
 8010016:	6929      	ldr	r1, [r5, #16]
 8010018:	4606      	mov	r6, r0
 801001a:	4620      	mov	r0, r4
 801001c:	f004 fcf6 	bl	8014a0c <ucdr_serialize_int32_t>
 8010020:	6969      	ldr	r1, [r5, #20]
 8010022:	4603      	mov	r3, r0
 8010024:	4620      	mov	r0, r4
 8010026:	ea07 0708 	and.w	r7, r7, r8
 801002a:	461c      	mov	r4, r3
 801002c:	f004 f8d4 	bl	80141d8 <ucdr_serialize_uint32_t>
 8010030:	403e      	ands	r6, r7
 8010032:	4034      	ands	r4, r6
 8010034:	4020      	ands	r0, r4
 8010036:	b2c0      	uxtb	r0, r0
 8010038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801003c <uxr_deserialize_SampleIdentity>:
 801003c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010040:	220c      	movs	r2, #12
 8010042:	4604      	mov	r4, r0
 8010044:	460d      	mov	r5, r1
 8010046:	f003 fe1f 	bl	8013c88 <ucdr_deserialize_array_uint8_t>
 801004a:	2203      	movs	r2, #3
 801004c:	f105 010c 	add.w	r1, r5, #12
 8010050:	4607      	mov	r7, r0
 8010052:	4620      	mov	r0, r4
 8010054:	f003 fe18 	bl	8013c88 <ucdr_deserialize_array_uint8_t>
 8010058:	f105 010f 	add.w	r1, r5, #15
 801005c:	4680      	mov	r8, r0
 801005e:	4620      	mov	r0, r4
 8010060:	f003 feba 	bl	8013dd8 <ucdr_deserialize_uint8_t>
 8010064:	f105 0110 	add.w	r1, r5, #16
 8010068:	4606      	mov	r6, r0
 801006a:	4620      	mov	r0, r4
 801006c:	f004 fd66 	bl	8014b3c <ucdr_deserialize_int32_t>
 8010070:	f105 0114 	add.w	r1, r5, #20
 8010074:	4603      	mov	r3, r0
 8010076:	4620      	mov	r0, r4
 8010078:	ea07 0708 	and.w	r7, r7, r8
 801007c:	461c      	mov	r4, r3
 801007e:	f004 f9db 	bl	8014438 <ucdr_deserialize_uint32_t>
 8010082:	403e      	ands	r6, r7
 8010084:	4034      	ands	r4, r6
 8010086:	4020      	ands	r0, r4
 8010088:	b2c0      	uxtb	r0, r0
 801008a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801008e:	bf00      	nop

08010090 <rcl_client_get_rmw_handle>:
 8010090:	b118      	cbz	r0, 801009a <rcl_client_get_rmw_handle+0xa>
 8010092:	6800      	ldr	r0, [r0, #0]
 8010094:	b108      	cbz	r0, 801009a <rcl_client_get_rmw_handle+0xa>
 8010096:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801009a:	4770      	bx	lr

0801009c <rcl_send_request>:
 801009c:	b570      	push	{r4, r5, r6, lr}
 801009e:	b082      	sub	sp, #8
 80100a0:	b1e8      	cbz	r0, 80100de <rcl_send_request+0x42>
 80100a2:	4604      	mov	r4, r0
 80100a4:	6800      	ldr	r0, [r0, #0]
 80100a6:	b1d0      	cbz	r0, 80100de <rcl_send_request+0x42>
 80100a8:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 80100ac:	b1bb      	cbz	r3, 80100de <rcl_send_request+0x42>
 80100ae:	460e      	mov	r6, r1
 80100b0:	b1d1      	cbz	r1, 80100e8 <rcl_send_request+0x4c>
 80100b2:	4615      	mov	r5, r2
 80100b4:	b1c2      	cbz	r2, 80100e8 <rcl_send_request+0x4c>
 80100b6:	2105      	movs	r1, #5
 80100b8:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 80100bc:	f002 fb3c 	bl	8012738 <__atomic_load_8>
 80100c0:	6823      	ldr	r3, [r4, #0]
 80100c2:	e9c5 0100 	strd	r0, r1, [r5]
 80100c6:	462a      	mov	r2, r5
 80100c8:	4631      	mov	r1, r6
 80100ca:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80100ce:	f003 f9c1 	bl	8013454 <rmw_send_request>
 80100d2:	4606      	mov	r6, r0
 80100d4:	b160      	cbz	r0, 80100f0 <rcl_send_request+0x54>
 80100d6:	2601      	movs	r6, #1
 80100d8:	4630      	mov	r0, r6
 80100da:	b002      	add	sp, #8
 80100dc:	bd70      	pop	{r4, r5, r6, pc}
 80100de:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 80100e2:	4630      	mov	r0, r6
 80100e4:	b002      	add	sp, #8
 80100e6:	bd70      	pop	{r4, r5, r6, pc}
 80100e8:	260b      	movs	r6, #11
 80100ea:	4630      	mov	r0, r6
 80100ec:	b002      	add	sp, #8
 80100ee:	bd70      	pop	{r4, r5, r6, pc}
 80100f0:	6820      	ldr	r0, [r4, #0]
 80100f2:	2105      	movs	r1, #5
 80100f4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80100f8:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 80100fc:	9100      	str	r1, [sp, #0]
 80100fe:	f002 fb87 	bl	8012810 <__atomic_exchange_8>
 8010102:	4630      	mov	r0, r6
 8010104:	b002      	add	sp, #8
 8010106:	bd70      	pop	{r4, r5, r6, pc}

08010108 <rcl_take_response>:
 8010108:	b570      	push	{r4, r5, r6, lr}
 801010a:	468e      	mov	lr, r1
 801010c:	460c      	mov	r4, r1
 801010e:	4616      	mov	r6, r2
 8010110:	4605      	mov	r5, r0
 8010112:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010116:	b08c      	sub	sp, #48	@ 0x30
 8010118:	f10d 0c18 	add.w	ip, sp, #24
 801011c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010120:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8010124:	e88c 0003 	stmia.w	ip, {r0, r1}
 8010128:	b35d      	cbz	r5, 8010182 <rcl_take_response+0x7a>
 801012a:	682b      	ldr	r3, [r5, #0]
 801012c:	b34b      	cbz	r3, 8010182 <rcl_take_response+0x7a>
 801012e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8010132:	b330      	cbz	r0, 8010182 <rcl_take_response+0x7a>
 8010134:	b346      	cbz	r6, 8010188 <rcl_take_response+0x80>
 8010136:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8010190 <rcl_take_response+0x88>
 801013a:	2300      	movs	r3, #0
 801013c:	f88d 3007 	strb.w	r3, [sp, #7]
 8010140:	4632      	mov	r2, r6
 8010142:	f10d 0307 	add.w	r3, sp, #7
 8010146:	a902      	add	r1, sp, #8
 8010148:	ed8d 7b02 	vstr	d7, [sp, #8]
 801014c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8010150:	f003 fa88 	bl	8013664 <rmw_take_response>
 8010154:	4605      	mov	r5, r0
 8010156:	b9c8      	cbnz	r0, 801018c <rcl_take_response+0x84>
 8010158:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801015c:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8010160:	2a00      	cmp	r2, #0
 8010162:	bf08      	it	eq
 8010164:	461d      	moveq	r5, r3
 8010166:	f10d 0e18 	add.w	lr, sp, #24
 801016a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801016e:	46a4      	mov	ip, r4
 8010170:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010174:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8010178:	e88c 0003 	stmia.w	ip, {r0, r1}
 801017c:	4628      	mov	r0, r5
 801017e:	b00c      	add	sp, #48	@ 0x30
 8010180:	bd70      	pop	{r4, r5, r6, pc}
 8010182:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 8010186:	e7ee      	b.n	8010166 <rcl_take_response+0x5e>
 8010188:	250b      	movs	r5, #11
 801018a:	e7ec      	b.n	8010166 <rcl_take_response+0x5e>
 801018c:	2501      	movs	r5, #1
 801018e:	e7ea      	b.n	8010166 <rcl_take_response+0x5e>
	...

08010198 <rcl_client_is_valid>:
 8010198:	b130      	cbz	r0, 80101a8 <rcl_client_is_valid+0x10>
 801019a:	6800      	ldr	r0, [r0, #0]
 801019c:	b120      	cbz	r0, 80101a8 <rcl_client_is_valid+0x10>
 801019e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80101a2:	3800      	subs	r0, #0
 80101a4:	bf18      	it	ne
 80101a6:	2001      	movne	r0, #1
 80101a8:	4770      	bx	lr
 80101aa:	bf00      	nop

080101ac <rcl_convert_rmw_ret_to_rcl_ret>:
 80101ac:	280b      	cmp	r0, #11
 80101ae:	dc0d      	bgt.n	80101cc <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 80101b0:	2800      	cmp	r0, #0
 80101b2:	db09      	blt.n	80101c8 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 80101b4:	280b      	cmp	r0, #11
 80101b6:	d807      	bhi.n	80101c8 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 80101b8:	e8df f000 	tbb	[pc, r0]
 80101bc:	07060607 	.word	0x07060607
 80101c0:	06060606 	.word	0x06060606
 80101c4:	07070606 	.word	0x07070606
 80101c8:	2001      	movs	r0, #1
 80101ca:	4770      	bx	lr
 80101cc:	28cb      	cmp	r0, #203	@ 0xcb
 80101ce:	bf18      	it	ne
 80101d0:	2001      	movne	r0, #1
 80101d2:	4770      	bx	lr

080101d4 <rcl_get_zero_initialized_context>:
 80101d4:	4a03      	ldr	r2, [pc, #12]	@ (80101e4 <rcl_get_zero_initialized_context+0x10>)
 80101d6:	4603      	mov	r3, r0
 80101d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80101dc:	e883 0003 	stmia.w	r3, {r0, r1}
 80101e0:	4618      	mov	r0, r3
 80101e2:	4770      	bx	lr
 80101e4:	0801a50c 	.word	0x0801a50c

080101e8 <rcl_context_is_valid>:
 80101e8:	b118      	cbz	r0, 80101f2 <rcl_context_is_valid+0xa>
 80101ea:	6840      	ldr	r0, [r0, #4]
 80101ec:	3800      	subs	r0, #0
 80101ee:	bf18      	it	ne
 80101f0:	2001      	movne	r0, #1
 80101f2:	4770      	bx	lr

080101f4 <__cleanup_context>:
 80101f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80101f8:	4606      	mov	r6, r0
 80101fa:	6800      	ldr	r0, [r0, #0]
 80101fc:	2300      	movs	r3, #0
 80101fe:	6073      	str	r3, [r6, #4]
 8010200:	2800      	cmp	r0, #0
 8010202:	d049      	beq.n	8010298 <__cleanup_context+0xa4>
 8010204:	6947      	ldr	r7, [r0, #20]
 8010206:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801020a:	f8d0 9010 	ldr.w	r9, [r0, #16]
 801020e:	b137      	cbz	r7, 801021e <__cleanup_context+0x2a>
 8010210:	3014      	adds	r0, #20
 8010212:	f000 fa6d 	bl	80106f0 <rcl_init_options_fini>
 8010216:	4607      	mov	r7, r0
 8010218:	2800      	cmp	r0, #0
 801021a:	d144      	bne.n	80102a6 <__cleanup_context+0xb2>
 801021c:	6830      	ldr	r0, [r6, #0]
 801021e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8010220:	b143      	cbz	r3, 8010234 <__cleanup_context+0x40>
 8010222:	3028      	adds	r0, #40	@ 0x28
 8010224:	f003 f872 	bl	801330c <rmw_context_fini>
 8010228:	b118      	cbz	r0, 8010232 <__cleanup_context+0x3e>
 801022a:	2f00      	cmp	r7, #0
 801022c:	d03e      	beq.n	80102ac <__cleanup_context+0xb8>
 801022e:	f7fb faeb 	bl	800b808 <rcutils_reset_error>
 8010232:	6830      	ldr	r0, [r6, #0]
 8010234:	6a03      	ldr	r3, [r0, #32]
 8010236:	b1db      	cbz	r3, 8010270 <__cleanup_context+0x7c>
 8010238:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 801023c:	2a01      	cmp	r2, #1
 801023e:	f17c 0100 	sbcs.w	r1, ip, #0
 8010242:	db11      	blt.n	8010268 <__cleanup_context+0x74>
 8010244:	2400      	movs	r4, #0
 8010246:	4625      	mov	r5, r4
 8010248:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801024c:	4649      	mov	r1, r9
 801024e:	b1b8      	cbz	r0, 8010280 <__cleanup_context+0x8c>
 8010250:	47c0      	blx	r8
 8010252:	6833      	ldr	r3, [r6, #0]
 8010254:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8010258:	3401      	adds	r4, #1
 801025a:	f145 0500 	adc.w	r5, r5, #0
 801025e:	4294      	cmp	r4, r2
 8010260:	eb75 010c 	sbcs.w	r1, r5, ip
 8010264:	6a1b      	ldr	r3, [r3, #32]
 8010266:	dbef      	blt.n	8010248 <__cleanup_context+0x54>
 8010268:	4618      	mov	r0, r3
 801026a:	4649      	mov	r1, r9
 801026c:	47c0      	blx	r8
 801026e:	6830      	ldr	r0, [r6, #0]
 8010270:	4649      	mov	r1, r9
 8010272:	47c0      	blx	r8
 8010274:	2300      	movs	r3, #0
 8010276:	e9c6 3300 	strd	r3, r3, [r6]
 801027a:	4638      	mov	r0, r7
 801027c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010280:	3401      	adds	r4, #1
 8010282:	f145 0500 	adc.w	r5, r5, #0
 8010286:	4294      	cmp	r4, r2
 8010288:	eb75 010c 	sbcs.w	r1, r5, ip
 801028c:	dbdc      	blt.n	8010248 <__cleanup_context+0x54>
 801028e:	4618      	mov	r0, r3
 8010290:	4649      	mov	r1, r9
 8010292:	47c0      	blx	r8
 8010294:	6830      	ldr	r0, [r6, #0]
 8010296:	e7eb      	b.n	8010270 <__cleanup_context+0x7c>
 8010298:	4607      	mov	r7, r0
 801029a:	2300      	movs	r3, #0
 801029c:	e9c6 3300 	strd	r3, r3, [r6]
 80102a0:	4638      	mov	r0, r7
 80102a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80102a6:	f7fb faaf 	bl	800b808 <rcutils_reset_error>
 80102aa:	e7b7      	b.n	801021c <__cleanup_context+0x28>
 80102ac:	f7ff ff7e 	bl	80101ac <rcl_convert_rmw_ret_to_rcl_ret>
 80102b0:	4607      	mov	r7, r0
 80102b2:	e7bc      	b.n	801022e <__cleanup_context+0x3a>

080102b4 <rcl_get_zero_initialized_guard_condition>:
 80102b4:	4a03      	ldr	r2, [pc, #12]	@ (80102c4 <rcl_get_zero_initialized_guard_condition+0x10>)
 80102b6:	4603      	mov	r3, r0
 80102b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80102bc:	e883 0003 	stmia.w	r3, {r0, r1}
 80102c0:	4618      	mov	r0, r3
 80102c2:	4770      	bx	lr
 80102c4:	0801a514 	.word	0x0801a514

080102c8 <rcl_guard_condition_init_from_rmw>:
 80102c8:	b082      	sub	sp, #8
 80102ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102ce:	b086      	sub	sp, #24
 80102d0:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 80102d4:	4604      	mov	r4, r0
 80102d6:	f84c 3f04 	str.w	r3, [ip, #4]!
 80102da:	460e      	mov	r6, r1
 80102dc:	4617      	mov	r7, r2
 80102de:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80102e2:	f10d 0e04 	add.w	lr, sp, #4
 80102e6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80102ea:	f8dc 3000 	ldr.w	r3, [ip]
 80102ee:	f8ce 3000 	str.w	r3, [lr]
 80102f2:	a801      	add	r0, sp, #4
 80102f4:	f7fb fa4c 	bl	800b790 <rcutils_allocator_is_valid>
 80102f8:	b350      	cbz	r0, 8010350 <rcl_guard_condition_init_from_rmw+0x88>
 80102fa:	b34c      	cbz	r4, 8010350 <rcl_guard_condition_init_from_rmw+0x88>
 80102fc:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8010300:	f1b8 0f00 	cmp.w	r8, #0
 8010304:	d11e      	bne.n	8010344 <rcl_guard_condition_init_from_rmw+0x7c>
 8010306:	b31f      	cbz	r7, 8010350 <rcl_guard_condition_init_from_rmw+0x88>
 8010308:	4638      	mov	r0, r7
 801030a:	f7ff ff6d 	bl	80101e8 <rcl_context_is_valid>
 801030e:	b328      	cbz	r0, 801035c <rcl_guard_condition_init_from_rmw+0x94>
 8010310:	9b01      	ldr	r3, [sp, #4]
 8010312:	9905      	ldr	r1, [sp, #20]
 8010314:	201c      	movs	r0, #28
 8010316:	4798      	blx	r3
 8010318:	4605      	mov	r5, r0
 801031a:	6060      	str	r0, [r4, #4]
 801031c:	b358      	cbz	r0, 8010376 <rcl_guard_condition_init_from_rmw+0xae>
 801031e:	b1fe      	cbz	r6, 8010360 <rcl_guard_condition_init_from_rmw+0x98>
 8010320:	6006      	str	r6, [r0, #0]
 8010322:	f880 8004 	strb.w	r8, [r0, #4]
 8010326:	ac01      	add	r4, sp, #4
 8010328:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801032a:	f105 0c08 	add.w	ip, r5, #8
 801032e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010332:	6823      	ldr	r3, [r4, #0]
 8010334:	f8cc 3000 	str.w	r3, [ip]
 8010338:	2000      	movs	r0, #0
 801033a:	b006      	add	sp, #24
 801033c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010340:	b002      	add	sp, #8
 8010342:	4770      	bx	lr
 8010344:	2064      	movs	r0, #100	@ 0x64
 8010346:	b006      	add	sp, #24
 8010348:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801034c:	b002      	add	sp, #8
 801034e:	4770      	bx	lr
 8010350:	200b      	movs	r0, #11
 8010352:	b006      	add	sp, #24
 8010354:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010358:	b002      	add	sp, #8
 801035a:	4770      	bx	lr
 801035c:	2065      	movs	r0, #101	@ 0x65
 801035e:	e7f2      	b.n	8010346 <rcl_guard_condition_init_from_rmw+0x7e>
 8010360:	6838      	ldr	r0, [r7, #0]
 8010362:	3028      	adds	r0, #40	@ 0x28
 8010364:	f002 fd7c 	bl	8012e60 <rmw_create_guard_condition>
 8010368:	6028      	str	r0, [r5, #0]
 801036a:	6865      	ldr	r5, [r4, #4]
 801036c:	682e      	ldr	r6, [r5, #0]
 801036e:	b126      	cbz	r6, 801037a <rcl_guard_condition_init_from_rmw+0xb2>
 8010370:	2301      	movs	r3, #1
 8010372:	712b      	strb	r3, [r5, #4]
 8010374:	e7d7      	b.n	8010326 <rcl_guard_condition_init_from_rmw+0x5e>
 8010376:	200a      	movs	r0, #10
 8010378:	e7e5      	b.n	8010346 <rcl_guard_condition_init_from_rmw+0x7e>
 801037a:	4628      	mov	r0, r5
 801037c:	9b02      	ldr	r3, [sp, #8]
 801037e:	9905      	ldr	r1, [sp, #20]
 8010380:	4798      	blx	r3
 8010382:	6066      	str	r6, [r4, #4]
 8010384:	2001      	movs	r0, #1
 8010386:	e7de      	b.n	8010346 <rcl_guard_condition_init_from_rmw+0x7e>

08010388 <rcl_guard_condition_fini>:
 8010388:	b570      	push	{r4, r5, r6, lr}
 801038a:	b082      	sub	sp, #8
 801038c:	b1f0      	cbz	r0, 80103cc <rcl_guard_condition_fini+0x44>
 801038e:	6843      	ldr	r3, [r0, #4]
 8010390:	4604      	mov	r4, r0
 8010392:	b163      	cbz	r3, 80103ae <rcl_guard_condition_fini+0x26>
 8010394:	6818      	ldr	r0, [r3, #0]
 8010396:	68de      	ldr	r6, [r3, #12]
 8010398:	6999      	ldr	r1, [r3, #24]
 801039a:	b160      	cbz	r0, 80103b6 <rcl_guard_condition_fini+0x2e>
 801039c:	791d      	ldrb	r5, [r3, #4]
 801039e:	b965      	cbnz	r5, 80103ba <rcl_guard_condition_fini+0x32>
 80103a0:	4618      	mov	r0, r3
 80103a2:	47b0      	blx	r6
 80103a4:	2300      	movs	r3, #0
 80103a6:	4628      	mov	r0, r5
 80103a8:	6063      	str	r3, [r4, #4]
 80103aa:	b002      	add	sp, #8
 80103ac:	bd70      	pop	{r4, r5, r6, pc}
 80103ae:	461d      	mov	r5, r3
 80103b0:	4628      	mov	r0, r5
 80103b2:	b002      	add	sp, #8
 80103b4:	bd70      	pop	{r4, r5, r6, pc}
 80103b6:	4605      	mov	r5, r0
 80103b8:	e7f2      	b.n	80103a0 <rcl_guard_condition_fini+0x18>
 80103ba:	9101      	str	r1, [sp, #4]
 80103bc:	f002 fd64 	bl	8012e88 <rmw_destroy_guard_condition>
 80103c0:	1e05      	subs	r5, r0, #0
 80103c2:	6863      	ldr	r3, [r4, #4]
 80103c4:	9901      	ldr	r1, [sp, #4]
 80103c6:	bf18      	it	ne
 80103c8:	2501      	movne	r5, #1
 80103ca:	e7e9      	b.n	80103a0 <rcl_guard_condition_fini+0x18>
 80103cc:	250b      	movs	r5, #11
 80103ce:	4628      	mov	r0, r5
 80103d0:	b002      	add	sp, #8
 80103d2:	bd70      	pop	{r4, r5, r6, pc}

080103d4 <rcl_guard_condition_get_default_options>:
 80103d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80103d6:	b087      	sub	sp, #28
 80103d8:	4606      	mov	r6, r0
 80103da:	4668      	mov	r0, sp
 80103dc:	f7fb f9ca 	bl	800b774 <rcutils_get_default_allocator>
 80103e0:	4b09      	ldr	r3, [pc, #36]	@ (8010408 <rcl_guard_condition_get_default_options+0x34>)
 80103e2:	46ee      	mov	lr, sp
 80103e4:	469c      	mov	ip, r3
 80103e6:	461d      	mov	r5, r3
 80103e8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80103ec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80103f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80103f2:	4634      	mov	r4, r6
 80103f4:	f8de 7000 	ldr.w	r7, [lr]
 80103f8:	f8cc 7000 	str.w	r7, [ip]
 80103fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80103fe:	4630      	mov	r0, r6
 8010400:	6027      	str	r7, [r4, #0]
 8010402:	b007      	add	sp, #28
 8010404:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010406:	bf00      	nop
 8010408:	20010bb4 	.word	0x20010bb4

0801040c <rcl_guard_condition_get_rmw_handle>:
 801040c:	b110      	cbz	r0, 8010414 <rcl_guard_condition_get_rmw_handle+0x8>
 801040e:	6840      	ldr	r0, [r0, #4]
 8010410:	b100      	cbz	r0, 8010414 <rcl_guard_condition_get_rmw_handle+0x8>
 8010412:	6800      	ldr	r0, [r0, #0]
 8010414:	4770      	bx	lr
 8010416:	bf00      	nop

08010418 <rcl_init>:
 8010418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801041c:	1e05      	subs	r5, r0, #0
 801041e:	b09e      	sub	sp, #120	@ 0x78
 8010420:	460e      	mov	r6, r1
 8010422:	4690      	mov	r8, r2
 8010424:	461f      	mov	r7, r3
 8010426:	f340 809c 	ble.w	8010562 <rcl_init+0x14a>
 801042a:	2900      	cmp	r1, #0
 801042c:	f000 809c 	beq.w	8010568 <rcl_init+0x150>
 8010430:	f1a1 0e04 	sub.w	lr, r1, #4
 8010434:	f04f 0c00 	mov.w	ip, #0
 8010438:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 801043c:	f10c 0c01 	add.w	ip, ip, #1
 8010440:	2c00      	cmp	r4, #0
 8010442:	f000 8091 	beq.w	8010568 <rcl_init+0x150>
 8010446:	4565      	cmp	r5, ip
 8010448:	d1f6      	bne.n	8010438 <rcl_init+0x20>
 801044a:	f1b8 0f00 	cmp.w	r8, #0
 801044e:	f000 808b 	beq.w	8010568 <rcl_init+0x150>
 8010452:	f8d8 4000 	ldr.w	r4, [r8]
 8010456:	2c00      	cmp	r4, #0
 8010458:	f000 8086 	beq.w	8010568 <rcl_init+0x150>
 801045c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801045e:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 8010462:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010466:	6823      	ldr	r3, [r4, #0]
 8010468:	f8cc 3000 	str.w	r3, [ip]
 801046c:	a819      	add	r0, sp, #100	@ 0x64
 801046e:	f7fb f98f 	bl	800b790 <rcutils_allocator_is_valid>
 8010472:	2800      	cmp	r0, #0
 8010474:	d078      	beq.n	8010568 <rcl_init+0x150>
 8010476:	2f00      	cmp	r7, #0
 8010478:	d076      	beq.n	8010568 <rcl_init+0x150>
 801047a:	683b      	ldr	r3, [r7, #0]
 801047c:	2b00      	cmp	r3, #0
 801047e:	d178      	bne.n	8010572 <rcl_init+0x15a>
 8010480:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8010484:	2178      	movs	r1, #120	@ 0x78
 8010486:	2001      	movs	r0, #1
 8010488:	4798      	blx	r3
 801048a:	4604      	mov	r4, r0
 801048c:	6038      	str	r0, [r7, #0]
 801048e:	2800      	cmp	r0, #0
 8010490:	f000 80b6 	beq.w	8010600 <rcl_init+0x1e8>
 8010494:	a802      	add	r0, sp, #8
 8010496:	f002 fb57 	bl	8012b48 <rmw_get_zero_initialized_context>
 801049a:	a902      	add	r1, sp, #8
 801049c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80104a0:	2250      	movs	r2, #80	@ 0x50
 80104a2:	ac19      	add	r4, sp, #100	@ 0x64
 80104a4:	f007 fce3 	bl	8017e6e <memcpy>
 80104a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80104aa:	f8d7 e000 	ldr.w	lr, [r7]
 80104ae:	46f4      	mov	ip, lr
 80104b0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80104b4:	6823      	ldr	r3, [r4, #0]
 80104b6:	f8cc 3000 	str.w	r3, [ip]
 80104ba:	f10e 0114 	add.w	r1, lr, #20
 80104be:	4640      	mov	r0, r8
 80104c0:	f000 f940 	bl	8010744 <rcl_init_options_copy>
 80104c4:	4604      	mov	r4, r0
 80104c6:	2800      	cmp	r0, #0
 80104c8:	d144      	bne.n	8010554 <rcl_init+0x13c>
 80104ca:	f8d7 9000 	ldr.w	r9, [r7]
 80104ce:	ea4f 78e5 	mov.w	r8, r5, asr #31
 80104d2:	f8c9 0020 	str.w	r0, [r9, #32]
 80104d6:	f8c9 5018 	str.w	r5, [r9, #24]
 80104da:	f8c9 801c 	str.w	r8, [r9, #28]
 80104de:	2d00      	cmp	r5, #0
 80104e0:	d04e      	beq.n	8010580 <rcl_init+0x168>
 80104e2:	2e00      	cmp	r6, #0
 80104e4:	d04c      	beq.n	8010580 <rcl_init+0x168>
 80104e6:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 80104ea:	2104      	movs	r1, #4
 80104ec:	4628      	mov	r0, r5
 80104ee:	4798      	blx	r3
 80104f0:	f8c9 0020 	str.w	r0, [r9, #32]
 80104f4:	f8d7 9000 	ldr.w	r9, [r7]
 80104f8:	f8d9 3020 	ldr.w	r3, [r9, #32]
 80104fc:	46ca      	mov	sl, r9
 80104fe:	b343      	cbz	r3, 8010552 <rcl_init+0x13a>
 8010500:	2d01      	cmp	r5, #1
 8010502:	f178 0300 	sbcs.w	r3, r8, #0
 8010506:	db3b      	blt.n	8010580 <rcl_init+0x168>
 8010508:	2400      	movs	r4, #0
 801050a:	3e04      	subs	r6, #4
 801050c:	46a1      	mov	r9, r4
 801050e:	e00b      	b.n	8010528 <rcl_init+0x110>
 8010510:	6831      	ldr	r1, [r6, #0]
 8010512:	f007 fcac 	bl	8017e6e <memcpy>
 8010516:	3401      	adds	r4, #1
 8010518:	f149 0900 	adc.w	r9, r9, #0
 801051c:	45c8      	cmp	r8, r9
 801051e:	bf08      	it	eq
 8010520:	42a5      	cmpeq	r5, r4
 8010522:	d02b      	beq.n	801057c <rcl_init+0x164>
 8010524:	f8d7 a000 	ldr.w	sl, [r7]
 8010528:	f856 0f04 	ldr.w	r0, [r6, #4]!
 801052c:	f7ef fed0 	bl	80002d0 <strlen>
 8010530:	1c42      	adds	r2, r0, #1
 8010532:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010534:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8010536:	f8da a020 	ldr.w	sl, [sl, #32]
 801053a:	9201      	str	r2, [sp, #4]
 801053c:	4610      	mov	r0, r2
 801053e:	4798      	blx	r3
 8010540:	683b      	ldr	r3, [r7, #0]
 8010542:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 8010546:	6a1b      	ldr	r3, [r3, #32]
 8010548:	9a01      	ldr	r2, [sp, #4]
 801054a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801054e:	2800      	cmp	r0, #0
 8010550:	d1de      	bne.n	8010510 <rcl_init+0xf8>
 8010552:	240a      	movs	r4, #10
 8010554:	4638      	mov	r0, r7
 8010556:	f7ff fe4d 	bl	80101f4 <__cleanup_context>
 801055a:	4620      	mov	r0, r4
 801055c:	b01e      	add	sp, #120	@ 0x78
 801055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010562:	2900      	cmp	r1, #0
 8010564:	f43f af71 	beq.w	801044a <rcl_init+0x32>
 8010568:	240b      	movs	r4, #11
 801056a:	4620      	mov	r0, r4
 801056c:	b01e      	add	sp, #120	@ 0x78
 801056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010572:	2464      	movs	r4, #100	@ 0x64
 8010574:	4620      	mov	r0, r4
 8010576:	b01e      	add	sp, #120	@ 0x78
 8010578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801057c:	f8d7 9000 	ldr.w	r9, [r7]
 8010580:	4926      	ldr	r1, [pc, #152]	@ (801061c <rcl_init+0x204>)
 8010582:	680b      	ldr	r3, [r1, #0]
 8010584:	3301      	adds	r3, #1
 8010586:	d036      	beq.n	80105f6 <rcl_init+0x1de>
 8010588:	600b      	str	r3, [r1, #0]
 801058a:	461a      	mov	r2, r3
 801058c:	2400      	movs	r4, #0
 801058e:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8010592:	607b      	str	r3, [r7, #4]
 8010594:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8010596:	3301      	adds	r3, #1
 8010598:	e9c0 2406 	strd	r2, r4, [r0, #24]
 801059c:	d034      	beq.n	8010608 <rcl_init+0x1f0>
 801059e:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 80105a2:	b93b      	cbnz	r3, 80105b4 <rcl_init+0x19c>
 80105a4:	3030      	adds	r0, #48	@ 0x30
 80105a6:	f000 f939 	bl	801081c <rcl_get_localhost_only>
 80105aa:	4604      	mov	r4, r0
 80105ac:	2800      	cmp	r0, #0
 80105ae:	d1d1      	bne.n	8010554 <rcl_init+0x13c>
 80105b0:	683b      	ldr	r3, [r7, #0]
 80105b2:	6958      	ldr	r0, [r3, #20]
 80105b4:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 80105b6:	aa18      	add	r2, sp, #96	@ 0x60
 80105b8:	a917      	add	r1, sp, #92	@ 0x5c
 80105ba:	f000 fd59 	bl	8011070 <rcl_validate_enclave_name>
 80105be:	4604      	mov	r4, r0
 80105c0:	2800      	cmp	r0, #0
 80105c2:	d1c7      	bne.n	8010554 <rcl_init+0x13c>
 80105c4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80105c6:	b9eb      	cbnz	r3, 8010604 <rcl_init+0x1ec>
 80105c8:	6839      	ldr	r1, [r7, #0]
 80105ca:	694b      	ldr	r3, [r1, #20]
 80105cc:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80105ce:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 80105d2:	f000 fa99 	bl	8010b08 <rcl_get_security_options_from_environment>
 80105d6:	4604      	mov	r4, r0
 80105d8:	2800      	cmp	r0, #0
 80105da:	d1bb      	bne.n	8010554 <rcl_init+0x13c>
 80105dc:	6839      	ldr	r1, [r7, #0]
 80105de:	6948      	ldr	r0, [r1, #20]
 80105e0:	3128      	adds	r1, #40	@ 0x28
 80105e2:	3018      	adds	r0, #24
 80105e4:	f002 fd5c 	bl	80130a0 <rmw_init>
 80105e8:	4604      	mov	r4, r0
 80105ea:	2800      	cmp	r0, #0
 80105ec:	d0bd      	beq.n	801056a <rcl_init+0x152>
 80105ee:	f7ff fddd 	bl	80101ac <rcl_convert_rmw_ret_to_rcl_ret>
 80105f2:	4604      	mov	r4, r0
 80105f4:	e7ae      	b.n	8010554 <rcl_init+0x13c>
 80105f6:	2201      	movs	r2, #1
 80105f8:	461c      	mov	r4, r3
 80105fa:	600a      	str	r2, [r1, #0]
 80105fc:	4613      	mov	r3, r2
 80105fe:	e7c6      	b.n	801058e <rcl_init+0x176>
 8010600:	240a      	movs	r4, #10
 8010602:	e7b2      	b.n	801056a <rcl_init+0x152>
 8010604:	2401      	movs	r4, #1
 8010606:	e7a5      	b.n	8010554 <rcl_init+0x13c>
 8010608:	3024      	adds	r0, #36	@ 0x24
 801060a:	f005 fdfb 	bl	8016204 <rcl_get_default_domain_id>
 801060e:	4604      	mov	r4, r0
 8010610:	2800      	cmp	r0, #0
 8010612:	d19f      	bne.n	8010554 <rcl_init+0x13c>
 8010614:	683b      	ldr	r3, [r7, #0]
 8010616:	6958      	ldr	r0, [r3, #20]
 8010618:	e7c1      	b.n	801059e <rcl_init+0x186>
 801061a:	bf00      	nop
 801061c:	20010bc8 	.word	0x20010bc8

08010620 <rcl_get_zero_initialized_init_options>:
 8010620:	2000      	movs	r0, #0
 8010622:	4770      	bx	lr

08010624 <rcl_init_options_init>:
 8010624:	b084      	sub	sp, #16
 8010626:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010628:	b097      	sub	sp, #92	@ 0x5c
 801062a:	ae1d      	add	r6, sp, #116	@ 0x74
 801062c:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 8010630:	2800      	cmp	r0, #0
 8010632:	d058      	beq.n	80106e6 <rcl_init_options_init+0xc2>
 8010634:	6803      	ldr	r3, [r0, #0]
 8010636:	4605      	mov	r5, r0
 8010638:	b133      	cbz	r3, 8010648 <rcl_init_options_init+0x24>
 801063a:	2464      	movs	r4, #100	@ 0x64
 801063c:	4620      	mov	r0, r4
 801063e:	b017      	add	sp, #92	@ 0x5c
 8010640:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010644:	b004      	add	sp, #16
 8010646:	4770      	bx	lr
 8010648:	4630      	mov	r0, r6
 801064a:	f7fb f8a1 	bl	800b790 <rcutils_allocator_is_valid>
 801064e:	2800      	cmp	r0, #0
 8010650:	d049      	beq.n	80106e6 <rcl_init_options_init+0xc2>
 8010652:	46b4      	mov	ip, r6
 8010654:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010658:	ac11      	add	r4, sp, #68	@ 0x44
 801065a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801065c:	f8dc 3000 	ldr.w	r3, [ip]
 8010660:	6023      	str	r3, [r4, #0]
 8010662:	9921      	ldr	r1, [sp, #132]	@ 0x84
 8010664:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010666:	2050      	movs	r0, #80	@ 0x50
 8010668:	4798      	blx	r3
 801066a:	4604      	mov	r4, r0
 801066c:	6028      	str	r0, [r5, #0]
 801066e:	2800      	cmp	r0, #0
 8010670:	d03b      	beq.n	80106ea <rcl_init_options_init+0xc6>
 8010672:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8010676:	4686      	mov	lr, r0
 8010678:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801067c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010680:	f8dc 3000 	ldr.w	r3, [ip]
 8010684:	f8ce 3000 	str.w	r3, [lr]
 8010688:	a802      	add	r0, sp, #8
 801068a:	f002 fa6d 	bl	8012b68 <rmw_get_zero_initialized_init_options>
 801068e:	f10d 0e08 	add.w	lr, sp, #8
 8010692:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010696:	f104 0c18 	add.w	ip, r4, #24
 801069a:	682f      	ldr	r7, [r5, #0]
 801069c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80106a0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80106a4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80106a8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80106ac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80106b0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80106b4:	ac20      	add	r4, sp, #128	@ 0x80
 80106b6:	e88c 0003 	stmia.w	ip, {r0, r1}
 80106ba:	e894 0003 	ldmia.w	r4, {r0, r1}
 80106be:	e88d 0003 	stmia.w	sp, {r0, r1}
 80106c2:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80106c6:	f107 0018 	add.w	r0, r7, #24
 80106ca:	f002 fbf1 	bl	8012eb0 <rmw_init_options_init>
 80106ce:	4604      	mov	r4, r0
 80106d0:	2800      	cmp	r0, #0
 80106d2:	d0b3      	beq.n	801063c <rcl_init_options_init+0x18>
 80106d4:	9921      	ldr	r1, [sp, #132]	@ 0x84
 80106d6:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80106d8:	6828      	ldr	r0, [r5, #0]
 80106da:	4798      	blx	r3
 80106dc:	4620      	mov	r0, r4
 80106de:	f7ff fd65 	bl	80101ac <rcl_convert_rmw_ret_to_rcl_ret>
 80106e2:	4604      	mov	r4, r0
 80106e4:	e7aa      	b.n	801063c <rcl_init_options_init+0x18>
 80106e6:	240b      	movs	r4, #11
 80106e8:	e7a8      	b.n	801063c <rcl_init_options_init+0x18>
 80106ea:	240a      	movs	r4, #10
 80106ec:	e7a6      	b.n	801063c <rcl_init_options_init+0x18>
 80106ee:	bf00      	nop

080106f0 <rcl_init_options_fini>:
 80106f0:	b530      	push	{r4, r5, lr}
 80106f2:	b087      	sub	sp, #28
 80106f4:	b1f0      	cbz	r0, 8010734 <rcl_init_options_fini+0x44>
 80106f6:	6803      	ldr	r3, [r0, #0]
 80106f8:	4604      	mov	r4, r0
 80106fa:	b1db      	cbz	r3, 8010734 <rcl_init_options_fini+0x44>
 80106fc:	469c      	mov	ip, r3
 80106fe:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010702:	f10d 0e04 	add.w	lr, sp, #4
 8010706:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801070a:	f8dc 3000 	ldr.w	r3, [ip]
 801070e:	f8ce 3000 	str.w	r3, [lr]
 8010712:	a801      	add	r0, sp, #4
 8010714:	f7fb f83c 	bl	800b790 <rcutils_allocator_is_valid>
 8010718:	b160      	cbz	r0, 8010734 <rcl_init_options_fini+0x44>
 801071a:	6820      	ldr	r0, [r4, #0]
 801071c:	3018      	adds	r0, #24
 801071e:	f002 fc77 	bl	8013010 <rmw_init_options_fini>
 8010722:	4605      	mov	r5, r0
 8010724:	b950      	cbnz	r0, 801073c <rcl_init_options_fini+0x4c>
 8010726:	6820      	ldr	r0, [r4, #0]
 8010728:	9b02      	ldr	r3, [sp, #8]
 801072a:	9905      	ldr	r1, [sp, #20]
 801072c:	4798      	blx	r3
 801072e:	4628      	mov	r0, r5
 8010730:	b007      	add	sp, #28
 8010732:	bd30      	pop	{r4, r5, pc}
 8010734:	250b      	movs	r5, #11
 8010736:	4628      	mov	r0, r5
 8010738:	b007      	add	sp, #28
 801073a:	bd30      	pop	{r4, r5, pc}
 801073c:	f7ff fd36 	bl	80101ac <rcl_convert_rmw_ret_to_rcl_ret>
 8010740:	4605      	mov	r5, r0
 8010742:	e7f8      	b.n	8010736 <rcl_init_options_fini+0x46>

08010744 <rcl_init_options_copy>:
 8010744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010748:	b094      	sub	sp, #80	@ 0x50
 801074a:	2800      	cmp	r0, #0
 801074c:	d058      	beq.n	8010800 <rcl_init_options_copy+0xbc>
 801074e:	4604      	mov	r4, r0
 8010750:	6800      	ldr	r0, [r0, #0]
 8010752:	2800      	cmp	r0, #0
 8010754:	d054      	beq.n	8010800 <rcl_init_options_copy+0xbc>
 8010756:	460e      	mov	r6, r1
 8010758:	f7fb f81a 	bl	800b790 <rcutils_allocator_is_valid>
 801075c:	2800      	cmp	r0, #0
 801075e:	d04f      	beq.n	8010800 <rcl_init_options_copy+0xbc>
 8010760:	2e00      	cmp	r6, #0
 8010762:	d04d      	beq.n	8010800 <rcl_init_options_copy+0xbc>
 8010764:	6833      	ldr	r3, [r6, #0]
 8010766:	b123      	cbz	r3, 8010772 <rcl_init_options_copy+0x2e>
 8010768:	2464      	movs	r4, #100	@ 0x64
 801076a:	4620      	mov	r0, r4
 801076c:	b014      	add	sp, #80	@ 0x50
 801076e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010772:	6827      	ldr	r7, [r4, #0]
 8010774:	46bc      	mov	ip, r7
 8010776:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801077a:	ad0f      	add	r5, sp, #60	@ 0x3c
 801077c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801077e:	f8dc 3000 	ldr.w	r3, [ip]
 8010782:	f8d7 8000 	ldr.w	r8, [r7]
 8010786:	602b      	str	r3, [r5, #0]
 8010788:	4619      	mov	r1, r3
 801078a:	2050      	movs	r0, #80	@ 0x50
 801078c:	47c0      	blx	r8
 801078e:	4605      	mov	r5, r0
 8010790:	6030      	str	r0, [r6, #0]
 8010792:	b3d0      	cbz	r0, 801080a <rcl_init_options_copy+0xc6>
 8010794:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 8010798:	4686      	mov	lr, r0
 801079a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801079e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80107a2:	f8dc 3000 	ldr.w	r3, [ip]
 80107a6:	f8ce 3000 	str.w	r3, [lr]
 80107aa:	4668      	mov	r0, sp
 80107ac:	f002 f9dc 	bl	8012b68 <rmw_get_zero_initialized_init_options>
 80107b0:	46ee      	mov	lr, sp
 80107b2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80107b6:	f105 0c18 	add.w	ip, r5, #24
 80107ba:	6824      	ldr	r4, [r4, #0]
 80107bc:	6835      	ldr	r5, [r6, #0]
 80107be:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80107c2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80107c6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80107ca:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80107ce:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80107d2:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80107d6:	e88c 0003 	stmia.w	ip, {r0, r1}
 80107da:	f104 0018 	add.w	r0, r4, #24
 80107de:	f105 0118 	add.w	r1, r5, #24
 80107e2:	f002 fbcd 	bl	8012f80 <rmw_init_options_copy>
 80107e6:	4604      	mov	r4, r0
 80107e8:	2800      	cmp	r0, #0
 80107ea:	d0be      	beq.n	801076a <rcl_init_options_copy+0x26>
 80107ec:	f7fa fff6 	bl	800b7dc <rcutils_get_error_string>
 80107f0:	f7fb f80a 	bl	800b808 <rcutils_reset_error>
 80107f4:	4630      	mov	r0, r6
 80107f6:	f7ff ff7b 	bl	80106f0 <rcl_init_options_fini>
 80107fa:	b140      	cbz	r0, 801080e <rcl_init_options_copy+0xca>
 80107fc:	4604      	mov	r4, r0
 80107fe:	e7b4      	b.n	801076a <rcl_init_options_copy+0x26>
 8010800:	240b      	movs	r4, #11
 8010802:	4620      	mov	r0, r4
 8010804:	b014      	add	sp, #80	@ 0x50
 8010806:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801080a:	240a      	movs	r4, #10
 801080c:	e7ad      	b.n	801076a <rcl_init_options_copy+0x26>
 801080e:	4620      	mov	r0, r4
 8010810:	b014      	add	sp, #80	@ 0x50
 8010812:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010816:	f7ff bcc9 	b.w	80101ac <rcl_convert_rmw_ret_to_rcl_ret>
 801081a:	bf00      	nop

0801081c <rcl_get_localhost_only>:
 801081c:	b510      	push	{r4, lr}
 801081e:	b082      	sub	sp, #8
 8010820:	2300      	movs	r3, #0
 8010822:	9301      	str	r3, [sp, #4]
 8010824:	b1b8      	cbz	r0, 8010856 <rcl_get_localhost_only+0x3a>
 8010826:	4604      	mov	r4, r0
 8010828:	a901      	add	r1, sp, #4
 801082a:	480c      	ldr	r0, [pc, #48]	@ (801085c <rcl_get_localhost_only+0x40>)
 801082c:	f7fa ffbe 	bl	800b7ac <rcutils_get_env>
 8010830:	b110      	cbz	r0, 8010838 <rcl_get_localhost_only+0x1c>
 8010832:	2001      	movs	r0, #1
 8010834:	b002      	add	sp, #8
 8010836:	bd10      	pop	{r4, pc}
 8010838:	9b01      	ldr	r3, [sp, #4]
 801083a:	b113      	cbz	r3, 8010842 <rcl_get_localhost_only+0x26>
 801083c:	781a      	ldrb	r2, [r3, #0]
 801083e:	2a31      	cmp	r2, #49	@ 0x31
 8010840:	d004      	beq.n	801084c <rcl_get_localhost_only+0x30>
 8010842:	2302      	movs	r3, #2
 8010844:	2000      	movs	r0, #0
 8010846:	7023      	strb	r3, [r4, #0]
 8010848:	b002      	add	sp, #8
 801084a:	bd10      	pop	{r4, pc}
 801084c:	785b      	ldrb	r3, [r3, #1]
 801084e:	2b00      	cmp	r3, #0
 8010850:	d1f7      	bne.n	8010842 <rcl_get_localhost_only+0x26>
 8010852:	2301      	movs	r3, #1
 8010854:	e7f6      	b.n	8010844 <rcl_get_localhost_only+0x28>
 8010856:	200b      	movs	r0, #11
 8010858:	b002      	add	sp, #8
 801085a:	bd10      	pop	{r4, pc}
 801085c:	0801a51c 	.word	0x0801a51c

08010860 <rcl_node_resolve_name>:
 8010860:	b082      	sub	sp, #8
 8010862:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010866:	b091      	sub	sp, #68	@ 0x44
 8010868:	ac1a      	add	r4, sp, #104	@ 0x68
 801086a:	e884 000c 	stmia.w	r4, {r2, r3}
 801086e:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 8010872:	2800      	cmp	r0, #0
 8010874:	d03b      	beq.n	80108ee <rcl_node_resolve_name+0x8e>
 8010876:	460c      	mov	r4, r1
 8010878:	4605      	mov	r5, r0
 801087a:	f7f9 fd29 	bl	800a2d0 <rcl_node_get_options>
 801087e:	2800      	cmp	r0, #0
 8010880:	d037      	beq.n	80108f2 <rcl_node_resolve_name+0x92>
 8010882:	4628      	mov	r0, r5
 8010884:	f7f9 fd14 	bl	800a2b0 <rcl_node_get_name>
 8010888:	4606      	mov	r6, r0
 801088a:	4628      	mov	r0, r5
 801088c:	f7f9 fd18 	bl	800a2c0 <rcl_node_get_namespace>
 8010890:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8010894:	4681      	mov	r9, r0
 8010896:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801089a:	ad0b      	add	r5, sp, #44	@ 0x2c
 801089c:	46ac      	mov	ip, r5
 801089e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80108a2:	f8de 3000 	ldr.w	r3, [lr]
 80108a6:	f8cc 3000 	str.w	r3, [ip]
 80108aa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80108ac:	b1fb      	cbz	r3, 80108ee <rcl_node_resolve_name+0x8e>
 80108ae:	468a      	mov	sl, r1
 80108b0:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 80108b4:	f002 f81c 	bl	80128f0 <rcutils_get_zero_initialized_string_map>
 80108b8:	ab10      	add	r3, sp, #64	@ 0x40
 80108ba:	9008      	str	r0, [sp, #32]
 80108bc:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80108c0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80108c4:	2100      	movs	r1, #0
 80108c6:	e895 000c 	ldmia.w	r5, {r2, r3}
 80108ca:	a808      	add	r0, sp, #32
 80108cc:	f002 f888 	bl	80129e0 <rcutils_string_map_init>
 80108d0:	4607      	mov	r7, r0
 80108d2:	b180      	cbz	r0, 80108f6 <rcl_node_resolve_name+0x96>
 80108d4:	f7fa ff82 	bl	800b7dc <rcutils_get_error_string>
 80108d8:	f7fa ff96 	bl	800b808 <rcutils_reset_error>
 80108dc:	2f0a      	cmp	r7, #10
 80108de:	bf18      	it	ne
 80108e0:	2701      	movne	r7, #1
 80108e2:	4638      	mov	r0, r7
 80108e4:	b011      	add	sp, #68	@ 0x44
 80108e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108ea:	b002      	add	sp, #8
 80108ec:	4770      	bx	lr
 80108ee:	270b      	movs	r7, #11
 80108f0:	e7f7      	b.n	80108e2 <rcl_node_resolve_name+0x82>
 80108f2:	2701      	movs	r7, #1
 80108f4:	e7f5      	b.n	80108e2 <rcl_node_resolve_name+0x82>
 80108f6:	9009      	str	r0, [sp, #36]	@ 0x24
 80108f8:	9007      	str	r0, [sp, #28]
 80108fa:	a808      	add	r0, sp, #32
 80108fc:	f005 fe14 	bl	8016528 <rcl_get_default_topic_name_substitutions>
 8010900:	4607      	mov	r7, r0
 8010902:	b1a8      	cbz	r0, 8010930 <rcl_node_resolve_name+0xd0>
 8010904:	280a      	cmp	r0, #10
 8010906:	9c07      	ldr	r4, [sp, #28]
 8010908:	d000      	beq.n	801090c <rcl_node_resolve_name+0xac>
 801090a:	2701      	movs	r7, #1
 801090c:	a808      	add	r0, sp, #32
 801090e:	f002 f8a7 	bl	8012a60 <rcutils_string_map_fini>
 8010912:	2800      	cmp	r0, #0
 8010914:	d13d      	bne.n	8010992 <rcl_node_resolve_name+0x132>
 8010916:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010918:	4659      	mov	r1, fp
 801091a:	47d0      	blx	sl
 801091c:	4659      	mov	r1, fp
 801091e:	4620      	mov	r0, r4
 8010920:	47d0      	blx	sl
 8010922:	f1b8 0f00 	cmp.w	r8, #0
 8010926:	d0dc      	beq.n	80108e2 <rcl_node_resolve_name+0x82>
 8010928:	2f67      	cmp	r7, #103	@ 0x67
 801092a:	bf08      	it	eq
 801092c:	2768      	moveq	r7, #104	@ 0x68
 801092e:	e7d8      	b.n	80108e2 <rcl_node_resolve_name+0x82>
 8010930:	ab09      	add	r3, sp, #36	@ 0x24
 8010932:	9305      	str	r3, [sp, #20]
 8010934:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010936:	46ec      	mov	ip, sp
 8010938:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801093c:	682b      	ldr	r3, [r5, #0]
 801093e:	f8cc 3000 	str.w	r3, [ip]
 8010942:	464a      	mov	r2, r9
 8010944:	4631      	mov	r1, r6
 8010946:	4620      	mov	r0, r4
 8010948:	ab08      	add	r3, sp, #32
 801094a:	f005 fc8f 	bl	801626c <rcl_expand_topic_name>
 801094e:	4607      	mov	r7, r0
 8010950:	b9b8      	cbnz	r0, 8010982 <rcl_node_resolve_name+0x122>
 8010952:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8010954:	9009      	str	r0, [sp, #36]	@ 0x24
 8010956:	4602      	mov	r2, r0
 8010958:	a90a      	add	r1, sp, #40	@ 0x28
 801095a:	4620      	mov	r0, r4
 801095c:	f002 f99c 	bl	8012c98 <rmw_validate_full_topic_name>
 8010960:	b988      	cbnz	r0, 8010986 <rcl_node_resolve_name+0x126>
 8010962:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8010964:	b9d5      	cbnz	r5, 801099c <rcl_node_resolve_name+0x13c>
 8010966:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010968:	a808      	add	r0, sp, #32
 801096a:	601c      	str	r4, [r3, #0]
 801096c:	f002 f878 	bl	8012a60 <rcutils_string_map_fini>
 8010970:	4607      	mov	r7, r0
 8010972:	b1a8      	cbz	r0, 80109a0 <rcl_node_resolve_name+0x140>
 8010974:	f7fa ff32 	bl	800b7dc <rcutils_get_error_string>
 8010978:	462c      	mov	r4, r5
 801097a:	f7fa ff45 	bl	800b808 <rcutils_reset_error>
 801097e:	2701      	movs	r7, #1
 8010980:	e7c9      	b.n	8010916 <rcl_node_resolve_name+0xb6>
 8010982:	9c07      	ldr	r4, [sp, #28]
 8010984:	e7c2      	b.n	801090c <rcl_node_resolve_name+0xac>
 8010986:	f7fa ff29 	bl	800b7dc <rcutils_get_error_string>
 801098a:	2701      	movs	r7, #1
 801098c:	f7fa ff3c 	bl	800b808 <rcutils_reset_error>
 8010990:	e7bc      	b.n	801090c <rcl_node_resolve_name+0xac>
 8010992:	f7fa ff23 	bl	800b7dc <rcutils_get_error_string>
 8010996:	f7fa ff37 	bl	800b808 <rcutils_reset_error>
 801099a:	e7bc      	b.n	8010916 <rcl_node_resolve_name+0xb6>
 801099c:	2767      	movs	r7, #103	@ 0x67
 801099e:	e7b5      	b.n	801090c <rcl_node_resolve_name+0xac>
 80109a0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80109a2:	4659      	mov	r1, fp
 80109a4:	47d0      	blx	sl
 80109a6:	4659      	mov	r1, fp
 80109a8:	4638      	mov	r0, r7
 80109aa:	47d0      	blx	sl
 80109ac:	e799      	b.n	80108e2 <rcl_node_resolve_name+0x82>
 80109ae:	bf00      	nop

080109b0 <exact_match_lookup>:
 80109b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80109b2:	f102 0708 	add.w	r7, r2, #8
 80109b6:	460b      	mov	r3, r1
 80109b8:	4614      	mov	r4, r2
 80109ba:	4606      	mov	r6, r0
 80109bc:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80109c0:	b085      	sub	sp, #20
 80109c2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80109c6:	4618      	mov	r0, r3
 80109c8:	4919      	ldr	r1, [pc, #100]	@ (8010a30 <exact_match_lookup+0x80>)
 80109ca:	e894 000c 	ldmia.w	r4, {r2, r3}
 80109ce:	f001 ff59 	bl	8012884 <rcutils_join_path>
 80109d2:	7833      	ldrb	r3, [r6, #0]
 80109d4:	2b2f      	cmp	r3, #47	@ 0x2f
 80109d6:	4605      	mov	r5, r0
 80109d8:	d023      	beq.n	8010a22 <exact_match_lookup+0x72>
 80109da:	f104 030c 	add.w	r3, r4, #12
 80109de:	e893 0003 	ldmia.w	r3, {r0, r1}
 80109e2:	e88d 0003 	stmia.w	sp, {r0, r1}
 80109e6:	1c70      	adds	r0, r6, #1
 80109e8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80109ec:	f001 ff50 	bl	8012890 <rcutils_to_native_path>
 80109f0:	4606      	mov	r6, r0
 80109f2:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80109f6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80109fa:	4631      	mov	r1, r6
 80109fc:	e894 000c 	ldmia.w	r4, {r2, r3}
 8010a00:	4628      	mov	r0, r5
 8010a02:	f001 ff3f 	bl	8012884 <rcutils_join_path>
 8010a06:	6862      	ldr	r2, [r4, #4]
 8010a08:	6921      	ldr	r1, [r4, #16]
 8010a0a:	4603      	mov	r3, r0
 8010a0c:	4630      	mov	r0, r6
 8010a0e:	461e      	mov	r6, r3
 8010a10:	4790      	blx	r2
 8010a12:	4628      	mov	r0, r5
 8010a14:	6863      	ldr	r3, [r4, #4]
 8010a16:	6921      	ldr	r1, [r4, #16]
 8010a18:	4798      	blx	r3
 8010a1a:	4635      	mov	r5, r6
 8010a1c:	4628      	mov	r0, r5
 8010a1e:	b005      	add	sp, #20
 8010a20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010a22:	7873      	ldrb	r3, [r6, #1]
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d1d8      	bne.n	80109da <exact_match_lookup+0x2a>
 8010a28:	4628      	mov	r0, r5
 8010a2a:	b005      	add	sp, #20
 8010a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010a2e:	bf00      	nop
 8010a30:	0801a56c 	.word	0x0801a56c

08010a34 <rcl_get_secure_root>:
 8010a34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010a38:	b085      	sub	sp, #20
 8010a3a:	b168      	cbz	r0, 8010a58 <rcl_get_secure_root+0x24>
 8010a3c:	4607      	mov	r7, r0
 8010a3e:	4608      	mov	r0, r1
 8010a40:	460c      	mov	r4, r1
 8010a42:	f7fa fea5 	bl	800b790 <rcutils_allocator_is_valid>
 8010a46:	b138      	cbz	r0, 8010a58 <rcl_get_secure_root+0x24>
 8010a48:	2300      	movs	r3, #0
 8010a4a:	482d      	ldr	r0, [pc, #180]	@ (8010b00 <rcl_get_secure_root+0xcc>)
 8010a4c:	9303      	str	r3, [sp, #12]
 8010a4e:	a903      	add	r1, sp, #12
 8010a50:	f7fa feac 	bl	800b7ac <rcutils_get_env>
 8010a54:	4605      	mov	r5, r0
 8010a56:	b120      	cbz	r0, 8010a62 <rcl_get_secure_root+0x2e>
 8010a58:	2500      	movs	r5, #0
 8010a5a:	4628      	mov	r0, r5
 8010a5c:	b005      	add	sp, #20
 8010a5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010a62:	9b03      	ldr	r3, [sp, #12]
 8010a64:	781a      	ldrb	r2, [r3, #0]
 8010a66:	2a00      	cmp	r2, #0
 8010a68:	d0f6      	beq.n	8010a58 <rcl_get_secure_root+0x24>
 8010a6a:	f104 090c 	add.w	r9, r4, #12
 8010a6e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8010a72:	e88d 0003 	stmia.w	sp, {r0, r1}
 8010a76:	4618      	mov	r0, r3
 8010a78:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8010a7c:	f7fa fffa 	bl	800ba74 <rcutils_strdup>
 8010a80:	4680      	mov	r8, r0
 8010a82:	2800      	cmp	r0, #0
 8010a84:	d0e8      	beq.n	8010a58 <rcl_get_secure_root+0x24>
 8010a86:	481f      	ldr	r0, [pc, #124]	@ (8010b04 <rcl_get_secure_root+0xd0>)
 8010a88:	9503      	str	r5, [sp, #12]
 8010a8a:	a903      	add	r1, sp, #12
 8010a8c:	f7fa fe8e 	bl	800b7ac <rcutils_get_env>
 8010a90:	b160      	cbz	r0, 8010aac <rcl_get_secure_root+0x78>
 8010a92:	2600      	movs	r6, #0
 8010a94:	6863      	ldr	r3, [r4, #4]
 8010a96:	6921      	ldr	r1, [r4, #16]
 8010a98:	4630      	mov	r0, r6
 8010a9a:	4798      	blx	r3
 8010a9c:	4640      	mov	r0, r8
 8010a9e:	6863      	ldr	r3, [r4, #4]
 8010aa0:	6921      	ldr	r1, [r4, #16]
 8010aa2:	4798      	blx	r3
 8010aa4:	4628      	mov	r0, r5
 8010aa6:	b005      	add	sp, #20
 8010aa8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010aac:	9b03      	ldr	r3, [sp, #12]
 8010aae:	781e      	ldrb	r6, [r3, #0]
 8010ab0:	b1f6      	cbz	r6, 8010af0 <rcl_get_secure_root+0xbc>
 8010ab2:	e899 0003 	ldmia.w	r9, {r0, r1}
 8010ab6:	e88d 0003 	stmia.w	sp, {r0, r1}
 8010aba:	4618      	mov	r0, r3
 8010abc:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8010ac0:	f7fa ffd8 	bl	800ba74 <rcutils_strdup>
 8010ac4:	4606      	mov	r6, r0
 8010ac6:	2800      	cmp	r0, #0
 8010ac8:	d0e3      	beq.n	8010a92 <rcl_get_secure_root+0x5e>
 8010aca:	4622      	mov	r2, r4
 8010acc:	4641      	mov	r1, r8
 8010ace:	f7ff ff6f 	bl	80109b0 <exact_match_lookup>
 8010ad2:	4605      	mov	r5, r0
 8010ad4:	2d00      	cmp	r5, #0
 8010ad6:	d0dd      	beq.n	8010a94 <rcl_get_secure_root+0x60>
 8010ad8:	4628      	mov	r0, r5
 8010ada:	f001 fed1 	bl	8012880 <rcutils_is_directory>
 8010ade:	4603      	mov	r3, r0
 8010ae0:	2800      	cmp	r0, #0
 8010ae2:	d1d7      	bne.n	8010a94 <rcl_get_secure_root+0x60>
 8010ae4:	4628      	mov	r0, r5
 8010ae6:	6921      	ldr	r1, [r4, #16]
 8010ae8:	461d      	mov	r5, r3
 8010aea:	6863      	ldr	r3, [r4, #4]
 8010aec:	4798      	blx	r3
 8010aee:	e7d1      	b.n	8010a94 <rcl_get_secure_root+0x60>
 8010af0:	4622      	mov	r2, r4
 8010af2:	4638      	mov	r0, r7
 8010af4:	4641      	mov	r1, r8
 8010af6:	f7ff ff5b 	bl	80109b0 <exact_match_lookup>
 8010afa:	4605      	mov	r5, r0
 8010afc:	e7ea      	b.n	8010ad4 <rcl_get_secure_root+0xa0>
 8010afe:	bf00      	nop
 8010b00:	0801a578 	.word	0x0801a578
 8010b04:	0801a590 	.word	0x0801a590

08010b08 <rcl_get_security_options_from_environment>:
 8010b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b0c:	b082      	sub	sp, #8
 8010b0e:	2300      	movs	r3, #0
 8010b10:	4606      	mov	r6, r0
 8010b12:	460f      	mov	r7, r1
 8010b14:	4820      	ldr	r0, [pc, #128]	@ (8010b98 <rcl_get_security_options_from_environment+0x90>)
 8010b16:	9301      	str	r3, [sp, #4]
 8010b18:	a901      	add	r1, sp, #4
 8010b1a:	4690      	mov	r8, r2
 8010b1c:	f7fa fe46 	bl	800b7ac <rcutils_get_env>
 8010b20:	b120      	cbz	r0, 8010b2c <rcl_get_security_options_from_environment+0x24>
 8010b22:	2501      	movs	r5, #1
 8010b24:	4628      	mov	r0, r5
 8010b26:	b002      	add	sp, #8
 8010b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b2c:	491b      	ldr	r1, [pc, #108]	@ (8010b9c <rcl_get_security_options_from_environment+0x94>)
 8010b2e:	4604      	mov	r4, r0
 8010b30:	9801      	ldr	r0, [sp, #4]
 8010b32:	f7ef fb6d 	bl	8000210 <strcmp>
 8010b36:	4605      	mov	r5, r0
 8010b38:	b9e8      	cbnz	r0, 8010b76 <rcl_get_security_options_from_environment+0x6e>
 8010b3a:	9001      	str	r0, [sp, #4]
 8010b3c:	f1b8 0f00 	cmp.w	r8, #0
 8010b40:	d020      	beq.n	8010b84 <rcl_get_security_options_from_environment+0x7c>
 8010b42:	4817      	ldr	r0, [pc, #92]	@ (8010ba0 <rcl_get_security_options_from_environment+0x98>)
 8010b44:	a901      	add	r1, sp, #4
 8010b46:	f7fa fe31 	bl	800b7ac <rcutils_get_env>
 8010b4a:	2800      	cmp	r0, #0
 8010b4c:	d1e9      	bne.n	8010b22 <rcl_get_security_options_from_environment+0x1a>
 8010b4e:	4915      	ldr	r1, [pc, #84]	@ (8010ba4 <rcl_get_security_options_from_environment+0x9c>)
 8010b50:	9801      	ldr	r0, [sp, #4]
 8010b52:	f7ef fb5d 	bl	8000210 <strcmp>
 8010b56:	fab0 f080 	clz	r0, r0
 8010b5a:	0940      	lsrs	r0, r0, #5
 8010b5c:	f888 0000 	strb.w	r0, [r8]
 8010b60:	4639      	mov	r1, r7
 8010b62:	4630      	mov	r0, r6
 8010b64:	f7ff ff66 	bl	8010a34 <rcl_get_secure_root>
 8010b68:	b170      	cbz	r0, 8010b88 <rcl_get_security_options_from_environment+0x80>
 8010b6a:	f8c8 0004 	str.w	r0, [r8, #4]
 8010b6e:	4628      	mov	r0, r5
 8010b70:	b002      	add	sp, #8
 8010b72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b76:	4625      	mov	r5, r4
 8010b78:	4628      	mov	r0, r5
 8010b7a:	f888 4000 	strb.w	r4, [r8]
 8010b7e:	b002      	add	sp, #8
 8010b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b84:	250b      	movs	r5, #11
 8010b86:	e7cd      	b.n	8010b24 <rcl_get_security_options_from_environment+0x1c>
 8010b88:	f898 5000 	ldrb.w	r5, [r8]
 8010b8c:	f1a5 0501 	sub.w	r5, r5, #1
 8010b90:	fab5 f585 	clz	r5, r5
 8010b94:	096d      	lsrs	r5, r5, #5
 8010b96:	e7c5      	b.n	8010b24 <rcl_get_security_options_from_environment+0x1c>
 8010b98:	0801a530 	.word	0x0801a530
 8010b9c:	0801a544 	.word	0x0801a544
 8010ba0:	0801a54c 	.word	0x0801a54c
 8010ba4:	0801a564 	.word	0x0801a564

08010ba8 <rcl_service_get_rmw_handle>:
 8010ba8:	b118      	cbz	r0, 8010bb2 <rcl_service_get_rmw_handle+0xa>
 8010baa:	6800      	ldr	r0, [r0, #0]
 8010bac:	b108      	cbz	r0, 8010bb2 <rcl_service_get_rmw_handle+0xa>
 8010bae:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8010bb2:	4770      	bx	lr

08010bb4 <rcl_take_request>:
 8010bb4:	b570      	push	{r4, r5, r6, lr}
 8010bb6:	468e      	mov	lr, r1
 8010bb8:	460c      	mov	r4, r1
 8010bba:	4616      	mov	r6, r2
 8010bbc:	4605      	mov	r5, r0
 8010bbe:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010bc2:	b08c      	sub	sp, #48	@ 0x30
 8010bc4:	f10d 0c18 	add.w	ip, sp, #24
 8010bc8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010bcc:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8010bd0:	e88c 0003 	stmia.w	ip, {r0, r1}
 8010bd4:	b30d      	cbz	r5, 8010c1a <rcl_take_request+0x66>
 8010bd6:	682b      	ldr	r3, [r5, #0]
 8010bd8:	b1fb      	cbz	r3, 8010c1a <rcl_take_request+0x66>
 8010bda:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8010bde:	b1e0      	cbz	r0, 8010c1a <rcl_take_request+0x66>
 8010be0:	b336      	cbz	r6, 8010c30 <rcl_take_request+0x7c>
 8010be2:	2300      	movs	r3, #0
 8010be4:	f88d 3007 	strb.w	r3, [sp, #7]
 8010be8:	4632      	mov	r2, r6
 8010bea:	f10d 0307 	add.w	r3, sp, #7
 8010bee:	a902      	add	r1, sp, #8
 8010bf0:	f002 fc7e 	bl	80134f0 <rmw_take_request>
 8010bf4:	4605      	mov	r5, r0
 8010bf6:	b198      	cbz	r0, 8010c20 <rcl_take_request+0x6c>
 8010bf8:	280a      	cmp	r0, #10
 8010bfa:	bf18      	it	ne
 8010bfc:	2501      	movne	r5, #1
 8010bfe:	f10d 0e18 	add.w	lr, sp, #24
 8010c02:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010c06:	46a4      	mov	ip, r4
 8010c08:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010c0c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8010c10:	e88c 0003 	stmia.w	ip, {r0, r1}
 8010c14:	4628      	mov	r0, r5
 8010c16:	b00c      	add	sp, #48	@ 0x30
 8010c18:	bd70      	pop	{r4, r5, r6, pc}
 8010c1a:	f44f 7516 	mov.w	r5, #600	@ 0x258
 8010c1e:	e7ee      	b.n	8010bfe <rcl_take_request+0x4a>
 8010c20:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8010c24:	f240 2359 	movw	r3, #601	@ 0x259
 8010c28:	2a00      	cmp	r2, #0
 8010c2a:	bf08      	it	eq
 8010c2c:	461d      	moveq	r5, r3
 8010c2e:	e7e6      	b.n	8010bfe <rcl_take_request+0x4a>
 8010c30:	250b      	movs	r5, #11
 8010c32:	e7e4      	b.n	8010bfe <rcl_take_request+0x4a>

08010c34 <rcl_send_response>:
 8010c34:	b170      	cbz	r0, 8010c54 <rcl_send_response+0x20>
 8010c36:	6800      	ldr	r0, [r0, #0]
 8010c38:	b160      	cbz	r0, 8010c54 <rcl_send_response+0x20>
 8010c3a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8010c3e:	b148      	cbz	r0, 8010c54 <rcl_send_response+0x20>
 8010c40:	b159      	cbz	r1, 8010c5a <rcl_send_response+0x26>
 8010c42:	b510      	push	{r4, lr}
 8010c44:	b15a      	cbz	r2, 8010c5e <rcl_send_response+0x2a>
 8010c46:	f002 fcb1 	bl	80135ac <rmw_send_response>
 8010c4a:	b110      	cbz	r0, 8010c52 <rcl_send_response+0x1e>
 8010c4c:	2802      	cmp	r0, #2
 8010c4e:	bf18      	it	ne
 8010c50:	2001      	movne	r0, #1
 8010c52:	bd10      	pop	{r4, pc}
 8010c54:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8010c58:	4770      	bx	lr
 8010c5a:	200b      	movs	r0, #11
 8010c5c:	4770      	bx	lr
 8010c5e:	200b      	movs	r0, #11
 8010c60:	bd10      	pop	{r4, pc}
 8010c62:	bf00      	nop

08010c64 <rcl_service_is_valid>:
 8010c64:	b130      	cbz	r0, 8010c74 <rcl_service_is_valid+0x10>
 8010c66:	6800      	ldr	r0, [r0, #0]
 8010c68:	b120      	cbz	r0, 8010c74 <rcl_service_is_valid+0x10>
 8010c6a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8010c6e:	3800      	subs	r0, #0
 8010c70:	bf18      	it	ne
 8010c72:	2001      	movne	r0, #1
 8010c74:	4770      	bx	lr
 8010c76:	bf00      	nop

08010c78 <rcl_get_system_time>:
 8010c78:	4608      	mov	r0, r1
 8010c7a:	f7fa bf39 	b.w	800baf0 <rcutils_system_time_now>
 8010c7e:	bf00      	nop

08010c80 <rcl_get_steady_time>:
 8010c80:	4608      	mov	r0, r1
 8010c82:	f7fa bf5d 	b.w	800bb40 <rcutils_steady_time_now>
 8010c86:	bf00      	nop

08010c88 <rcl_get_ros_time>:
 8010c88:	7a03      	ldrb	r3, [r0, #8]
 8010c8a:	b510      	push	{r4, lr}
 8010c8c:	460c      	mov	r4, r1
 8010c8e:	b133      	cbz	r3, 8010c9e <rcl_get_ros_time+0x16>
 8010c90:	2105      	movs	r1, #5
 8010c92:	f001 fd51 	bl	8012738 <__atomic_load_8>
 8010c96:	e9c4 0100 	strd	r0, r1, [r4]
 8010c9a:	2000      	movs	r0, #0
 8010c9c:	bd10      	pop	{r4, pc}
 8010c9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010ca2:	4608      	mov	r0, r1
 8010ca4:	f7fa bf24 	b.w	800baf0 <rcutils_system_time_now>

08010ca8 <rcl_clock_init>:
 8010ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010caa:	4605      	mov	r5, r0
 8010cac:	4610      	mov	r0, r2
 8010cae:	4614      	mov	r4, r2
 8010cb0:	460e      	mov	r6, r1
 8010cb2:	f7fa fd6d 	bl	800b790 <rcutils_allocator_is_valid>
 8010cb6:	b128      	cbz	r0, 8010cc4 <rcl_clock_init+0x1c>
 8010cb8:	2d03      	cmp	r5, #3
 8010cba:	d803      	bhi.n	8010cc4 <rcl_clock_init+0x1c>
 8010cbc:	e8df f005 	tbb	[pc, r5]
 8010cc0:	06532e1d 	.word	0x06532e1d
 8010cc4:	f04f 0c0b 	mov.w	ip, #11
 8010cc8:	4660      	mov	r0, ip
 8010cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ccc:	2e00      	cmp	r6, #0
 8010cce:	d0f9      	beq.n	8010cc4 <rcl_clock_init+0x1c>
 8010cd0:	2c00      	cmp	r4, #0
 8010cd2:	d0f7      	beq.n	8010cc4 <rcl_clock_init+0x1c>
 8010cd4:	2300      	movs	r3, #0
 8010cd6:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8010cda:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 8010d90 <rcl_clock_init+0xe8>
 8010cde:	6133      	str	r3, [r6, #16]
 8010ce0:	f106 0514 	add.w	r5, r6, #20
 8010ce4:	469c      	mov	ip, r3
 8010ce6:	2703      	movs	r7, #3
 8010ce8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010cea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010cec:	6823      	ldr	r3, [r4, #0]
 8010cee:	602b      	str	r3, [r5, #0]
 8010cf0:	7037      	strb	r7, [r6, #0]
 8010cf2:	f8c6 e00c 	str.w	lr, [r6, #12]
 8010cf6:	4660      	mov	r0, ip
 8010cf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010cfa:	2e00      	cmp	r6, #0
 8010cfc:	d0e2      	beq.n	8010cc4 <rcl_clock_init+0x1c>
 8010cfe:	2300      	movs	r3, #0
 8010d00:	7033      	strb	r3, [r6, #0]
 8010d02:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8010d06:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8010d0a:	469c      	mov	ip, r3
 8010d0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010d0e:	f106 0514 	add.w	r5, r6, #20
 8010d12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010d14:	6823      	ldr	r3, [r4, #0]
 8010d16:	602b      	str	r3, [r5, #0]
 8010d18:	4660      	mov	r0, ip
 8010d1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010d1c:	2e00      	cmp	r6, #0
 8010d1e:	d0d1      	beq.n	8010cc4 <rcl_clock_init+0x1c>
 8010d20:	2c00      	cmp	r4, #0
 8010d22:	d0cf      	beq.n	8010cc4 <rcl_clock_init+0x1c>
 8010d24:	2700      	movs	r7, #0
 8010d26:	7037      	strb	r7, [r6, #0]
 8010d28:	46a4      	mov	ip, r4
 8010d2a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010d2e:	f106 0514 	add.w	r5, r6, #20
 8010d32:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8010d36:	e9c6 7703 	strd	r7, r7, [r6, #12]
 8010d3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010d3c:	f8dc 3000 	ldr.w	r3, [ip]
 8010d40:	602b      	str	r3, [r5, #0]
 8010d42:	6921      	ldr	r1, [r4, #16]
 8010d44:	6823      	ldr	r3, [r4, #0]
 8010d46:	2010      	movs	r0, #16
 8010d48:	4798      	blx	r3
 8010d4a:	6130      	str	r0, [r6, #16]
 8010d4c:	b1d0      	cbz	r0, 8010d84 <rcl_clock_init+0xdc>
 8010d4e:	2200      	movs	r2, #0
 8010d50:	2300      	movs	r3, #0
 8010d52:	e9c0 2300 	strd	r2, r3, [r0]
 8010d56:	2301      	movs	r3, #1
 8010d58:	7207      	strb	r7, [r0, #8]
 8010d5a:	4a0c      	ldr	r2, [pc, #48]	@ (8010d8c <rcl_clock_init+0xe4>)
 8010d5c:	7033      	strb	r3, [r6, #0]
 8010d5e:	46bc      	mov	ip, r7
 8010d60:	60f2      	str	r2, [r6, #12]
 8010d62:	4660      	mov	r0, ip
 8010d64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010d66:	2e00      	cmp	r6, #0
 8010d68:	d0ac      	beq.n	8010cc4 <rcl_clock_init+0x1c>
 8010d6a:	2c00      	cmp	r4, #0
 8010d6c:	d0aa      	beq.n	8010cc4 <rcl_clock_init+0x1c>
 8010d6e:	2300      	movs	r3, #0
 8010d70:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8010d74:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 8010d94 <rcl_clock_init+0xec>
 8010d78:	6133      	str	r3, [r6, #16]
 8010d7a:	f106 0514 	add.w	r5, r6, #20
 8010d7e:	469c      	mov	ip, r3
 8010d80:	2702      	movs	r7, #2
 8010d82:	e7b1      	b.n	8010ce8 <rcl_clock_init+0x40>
 8010d84:	f04f 0c0a 	mov.w	ip, #10
 8010d88:	e79e      	b.n	8010cc8 <rcl_clock_init+0x20>
 8010d8a:	bf00      	nop
 8010d8c:	08010c89 	.word	0x08010c89
 8010d90:	08010c81 	.word	0x08010c81
 8010d94:	08010c79 	.word	0x08010c79

08010d98 <rcl_clock_get_now>:
 8010d98:	b140      	cbz	r0, 8010dac <rcl_clock_get_now+0x14>
 8010d9a:	b139      	cbz	r1, 8010dac <rcl_clock_get_now+0x14>
 8010d9c:	7803      	ldrb	r3, [r0, #0]
 8010d9e:	b11b      	cbz	r3, 8010da8 <rcl_clock_get_now+0x10>
 8010da0:	68c3      	ldr	r3, [r0, #12]
 8010da2:	b10b      	cbz	r3, 8010da8 <rcl_clock_get_now+0x10>
 8010da4:	6900      	ldr	r0, [r0, #16]
 8010da6:	4718      	bx	r3
 8010da8:	2001      	movs	r0, #1
 8010daa:	4770      	bx	lr
 8010dac:	200b      	movs	r0, #11
 8010dae:	4770      	bx	lr

08010db0 <rcl_timer_call>:
 8010db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010db4:	b087      	sub	sp, #28
 8010db6:	2800      	cmp	r0, #0
 8010db8:	d06d      	beq.n	8010e96 <rcl_timer_call+0xe6>
 8010dba:	6803      	ldr	r3, [r0, #0]
 8010dbc:	4604      	mov	r4, r0
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d063      	beq.n	8010e8a <rcl_timer_call+0xda>
 8010dc2:	f3bf 8f5b 	dmb	ish
 8010dc6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8010dca:	f3bf 8f5b 	dmb	ish
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d150      	bne.n	8010e74 <rcl_timer_call+0xc4>
 8010dd2:	6803      	ldr	r3, [r0, #0]
 8010dd4:	a904      	add	r1, sp, #16
 8010dd6:	6818      	ldr	r0, [r3, #0]
 8010dd8:	f7ff ffde 	bl	8010d98 <rcl_clock_get_now>
 8010ddc:	4605      	mov	r5, r0
 8010dde:	2800      	cmp	r0, #0
 8010de0:	d14a      	bne.n	8010e78 <rcl_timer_call+0xc8>
 8010de2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	db4a      	blt.n	8010e80 <rcl_timer_call+0xd0>
 8010dea:	6820      	ldr	r0, [r4, #0]
 8010dec:	f04f 0a05 	mov.w	sl, #5
 8010df0:	f8cd a000 	str.w	sl, [sp]
 8010df4:	3020      	adds	r0, #32
 8010df6:	f001 fd0b 	bl	8012810 <__atomic_exchange_8>
 8010dfa:	6823      	ldr	r3, [r4, #0]
 8010dfc:	f3bf 8f5b 	dmb	ish
 8010e00:	4680      	mov	r8, r0
 8010e02:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8010e06:	f3bf 8f5b 	dmb	ish
 8010e0a:	6820      	ldr	r0, [r4, #0]
 8010e0c:	4689      	mov	r9, r1
 8010e0e:	3028      	adds	r0, #40	@ 0x28
 8010e10:	4651      	mov	r1, sl
 8010e12:	f001 fc91 	bl	8012738 <__atomic_load_8>
 8010e16:	4606      	mov	r6, r0
 8010e18:	6820      	ldr	r0, [r4, #0]
 8010e1a:	460f      	mov	r7, r1
 8010e1c:	3018      	adds	r0, #24
 8010e1e:	4651      	mov	r1, sl
 8010e20:	f001 fc8a 	bl	8012738 <__atomic_load_8>
 8010e24:	1836      	adds	r6, r6, r0
 8010e26:	4602      	mov	r2, r0
 8010e28:	4682      	mov	sl, r0
 8010e2a:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 8010e2e:	eb47 0701 	adc.w	r7, r7, r1
 8010e32:	4286      	cmp	r6, r0
 8010e34:	460b      	mov	r3, r1
 8010e36:	eb77 010c 	sbcs.w	r1, r7, ip
 8010e3a:	da04      	bge.n	8010e46 <rcl_timer_call+0x96>
 8010e3c:	ea53 0102 	orrs.w	r1, r3, r2
 8010e40:	d12e      	bne.n	8010ea0 <rcl_timer_call+0xf0>
 8010e42:	4606      	mov	r6, r0
 8010e44:	4667      	mov	r7, ip
 8010e46:	6820      	ldr	r0, [r4, #0]
 8010e48:	2105      	movs	r1, #5
 8010e4a:	4632      	mov	r2, r6
 8010e4c:	463b      	mov	r3, r7
 8010e4e:	3028      	adds	r0, #40	@ 0x28
 8010e50:	9100      	str	r1, [sp, #0]
 8010e52:	f001 fca7 	bl	80127a4 <__atomic_store_8>
 8010e56:	f1bb 0f00 	cmp.w	fp, #0
 8010e5a:	d00d      	beq.n	8010e78 <rcl_timer_call+0xc8>
 8010e5c:	9a04      	ldr	r2, [sp, #16]
 8010e5e:	9b05      	ldr	r3, [sp, #20]
 8010e60:	ebb2 0208 	subs.w	r2, r2, r8
 8010e64:	4620      	mov	r0, r4
 8010e66:	eb63 0309 	sbc.w	r3, r3, r9
 8010e6a:	47d8      	blx	fp
 8010e6c:	4628      	mov	r0, r5
 8010e6e:	b007      	add	sp, #28
 8010e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e74:	f240 3521 	movw	r5, #801	@ 0x321
 8010e78:	4628      	mov	r0, r5
 8010e7a:	b007      	add	sp, #28
 8010e7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e80:	2501      	movs	r5, #1
 8010e82:	4628      	mov	r0, r5
 8010e84:	b007      	add	sp, #28
 8010e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e8a:	f44f 7548 	mov.w	r5, #800	@ 0x320
 8010e8e:	4628      	mov	r0, r5
 8010e90:	b007      	add	sp, #28
 8010e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e96:	250b      	movs	r5, #11
 8010e98:	4628      	mov	r0, r5
 8010e9a:	b007      	add	sp, #28
 8010e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ea0:	1b80      	subs	r0, r0, r6
 8010ea2:	eb6c 0107 	sbc.w	r1, ip, r7
 8010ea6:	3801      	subs	r0, #1
 8010ea8:	f161 0100 	sbc.w	r1, r1, #0
 8010eac:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8010eb0:	f7ef feaa 	bl	8000c08 <__aeabi_ldivmod>
 8010eb4:	9b02      	ldr	r3, [sp, #8]
 8010eb6:	3001      	adds	r0, #1
 8010eb8:	f141 0100 	adc.w	r1, r1, #0
 8010ebc:	fb00 f303 	mul.w	r3, r0, r3
 8010ec0:	fb01 330a 	mla	r3, r1, sl, r3
 8010ec4:	fba0 0a0a 	umull	r0, sl, r0, sl
 8010ec8:	1986      	adds	r6, r0, r6
 8010eca:	4453      	add	r3, sl
 8010ecc:	eb43 0707 	adc.w	r7, r3, r7
 8010ed0:	e7b9      	b.n	8010e46 <rcl_timer_call+0x96>
 8010ed2:	bf00      	nop

08010ed4 <rcl_timer_is_ready>:
 8010ed4:	b570      	push	{r4, r5, r6, lr}
 8010ed6:	b082      	sub	sp, #8
 8010ed8:	b378      	cbz	r0, 8010f3a <rcl_timer_is_ready+0x66>
 8010eda:	6803      	ldr	r3, [r0, #0]
 8010edc:	4604      	mov	r4, r0
 8010ede:	b383      	cbz	r3, 8010f42 <rcl_timer_is_ready+0x6e>
 8010ee0:	460d      	mov	r5, r1
 8010ee2:	b351      	cbz	r1, 8010f3a <rcl_timer_is_ready+0x66>
 8010ee4:	f3bf 8f5b 	dmb	ish
 8010ee8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8010eec:	f3bf 8f5b 	dmb	ish
 8010ef0:	b953      	cbnz	r3, 8010f08 <rcl_timer_is_ready+0x34>
 8010ef2:	6803      	ldr	r3, [r0, #0]
 8010ef4:	4669      	mov	r1, sp
 8010ef6:	6818      	ldr	r0, [r3, #0]
 8010ef8:	f7ff ff4e 	bl	8010d98 <rcl_clock_get_now>
 8010efc:	4606      	mov	r6, r0
 8010efe:	b140      	cbz	r0, 8010f12 <rcl_timer_is_ready+0x3e>
 8010f00:	f240 3321 	movw	r3, #801	@ 0x321
 8010f04:	4298      	cmp	r0, r3
 8010f06:	d101      	bne.n	8010f0c <rcl_timer_is_ready+0x38>
 8010f08:	2600      	movs	r6, #0
 8010f0a:	702e      	strb	r6, [r5, #0]
 8010f0c:	4630      	mov	r0, r6
 8010f0e:	b002      	add	sp, #8
 8010f10:	bd70      	pop	{r4, r5, r6, pc}
 8010f12:	6820      	ldr	r0, [r4, #0]
 8010f14:	2105      	movs	r1, #5
 8010f16:	3028      	adds	r0, #40	@ 0x28
 8010f18:	f001 fc0e 	bl	8012738 <__atomic_load_8>
 8010f1c:	9b00      	ldr	r3, [sp, #0]
 8010f1e:	1ac0      	subs	r0, r0, r3
 8010f20:	9b01      	ldr	r3, [sp, #4]
 8010f22:	eb61 0103 	sbc.w	r1, r1, r3
 8010f26:	2801      	cmp	r0, #1
 8010f28:	f171 0300 	sbcs.w	r3, r1, #0
 8010f2c:	bfb4      	ite	lt
 8010f2e:	2301      	movlt	r3, #1
 8010f30:	2300      	movge	r3, #0
 8010f32:	4630      	mov	r0, r6
 8010f34:	702b      	strb	r3, [r5, #0]
 8010f36:	b002      	add	sp, #8
 8010f38:	bd70      	pop	{r4, r5, r6, pc}
 8010f3a:	260b      	movs	r6, #11
 8010f3c:	4630      	mov	r0, r6
 8010f3e:	b002      	add	sp, #8
 8010f40:	bd70      	pop	{r4, r5, r6, pc}
 8010f42:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8010f46:	e7e1      	b.n	8010f0c <rcl_timer_is_ready+0x38>

08010f48 <rcl_timer_get_time_until_next_call>:
 8010f48:	b570      	push	{r4, r5, r6, lr}
 8010f4a:	b082      	sub	sp, #8
 8010f4c:	b330      	cbz	r0, 8010f9c <rcl_timer_get_time_until_next_call+0x54>
 8010f4e:	6803      	ldr	r3, [r0, #0]
 8010f50:	4604      	mov	r4, r0
 8010f52:	b33b      	cbz	r3, 8010fa4 <rcl_timer_get_time_until_next_call+0x5c>
 8010f54:	460d      	mov	r5, r1
 8010f56:	b309      	cbz	r1, 8010f9c <rcl_timer_get_time_until_next_call+0x54>
 8010f58:	f3bf 8f5b 	dmb	ish
 8010f5c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8010f60:	f3bf 8f5b 	dmb	ish
 8010f64:	b9ab      	cbnz	r3, 8010f92 <rcl_timer_get_time_until_next_call+0x4a>
 8010f66:	6803      	ldr	r3, [r0, #0]
 8010f68:	4669      	mov	r1, sp
 8010f6a:	6818      	ldr	r0, [r3, #0]
 8010f6c:	f7ff ff14 	bl	8010d98 <rcl_clock_get_now>
 8010f70:	4606      	mov	r6, r0
 8010f72:	b958      	cbnz	r0, 8010f8c <rcl_timer_get_time_until_next_call+0x44>
 8010f74:	6820      	ldr	r0, [r4, #0]
 8010f76:	2105      	movs	r1, #5
 8010f78:	3028      	adds	r0, #40	@ 0x28
 8010f7a:	f001 fbdd 	bl	8012738 <__atomic_load_8>
 8010f7e:	9b00      	ldr	r3, [sp, #0]
 8010f80:	1ac0      	subs	r0, r0, r3
 8010f82:	9b01      	ldr	r3, [sp, #4]
 8010f84:	6028      	str	r0, [r5, #0]
 8010f86:	eb61 0103 	sbc.w	r1, r1, r3
 8010f8a:	6069      	str	r1, [r5, #4]
 8010f8c:	4630      	mov	r0, r6
 8010f8e:	b002      	add	sp, #8
 8010f90:	bd70      	pop	{r4, r5, r6, pc}
 8010f92:	f240 3621 	movw	r6, #801	@ 0x321
 8010f96:	4630      	mov	r0, r6
 8010f98:	b002      	add	sp, #8
 8010f9a:	bd70      	pop	{r4, r5, r6, pc}
 8010f9c:	260b      	movs	r6, #11
 8010f9e:	4630      	mov	r0, r6
 8010fa0:	b002      	add	sp, #8
 8010fa2:	bd70      	pop	{r4, r5, r6, pc}
 8010fa4:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8010fa8:	e7f0      	b.n	8010f8c <rcl_timer_get_time_until_next_call+0x44>
 8010faa:	bf00      	nop

08010fac <rcl_timer_get_guard_condition>:
 8010fac:	b130      	cbz	r0, 8010fbc <rcl_timer_get_guard_condition+0x10>
 8010fae:	6800      	ldr	r0, [r0, #0]
 8010fb0:	b120      	cbz	r0, 8010fbc <rcl_timer_get_guard_condition+0x10>
 8010fb2:	68c3      	ldr	r3, [r0, #12]
 8010fb4:	b10b      	cbz	r3, 8010fba <rcl_timer_get_guard_condition+0xe>
 8010fb6:	3008      	adds	r0, #8
 8010fb8:	4770      	bx	lr
 8010fba:	4618      	mov	r0, r3
 8010fbc:	4770      	bx	lr
 8010fbe:	bf00      	nop

08010fc0 <rcl_validate_enclave_name_with_size>:
 8010fc0:	b378      	cbz	r0, 8011022 <rcl_validate_enclave_name_with_size+0x62>
 8010fc2:	b570      	push	{r4, r5, r6, lr}
 8010fc4:	4615      	mov	r5, r2
 8010fc6:	b0c2      	sub	sp, #264	@ 0x108
 8010fc8:	b302      	cbz	r2, 801100c <rcl_validate_enclave_name_with_size+0x4c>
 8010fca:	461e      	mov	r6, r3
 8010fcc:	466a      	mov	r2, sp
 8010fce:	ab01      	add	r3, sp, #4
 8010fd0:	460c      	mov	r4, r1
 8010fd2:	f7fa fe09 	bl	800bbe8 <rmw_validate_namespace_with_size>
 8010fd6:	4684      	mov	ip, r0
 8010fd8:	b9e8      	cbnz	r0, 8011016 <rcl_validate_enclave_name_with_size+0x56>
 8010fda:	9b00      	ldr	r3, [sp, #0]
 8010fdc:	b923      	cbnz	r3, 8010fe8 <rcl_validate_enclave_name_with_size+0x28>
 8010fde:	2300      	movs	r3, #0
 8010fe0:	602b      	str	r3, [r5, #0]
 8010fe2:	4660      	mov	r0, ip
 8010fe4:	b042      	add	sp, #264	@ 0x108
 8010fe6:	bd70      	pop	{r4, r5, r6, pc}
 8010fe8:	2b07      	cmp	r3, #7
 8010fea:	d007      	beq.n	8010ffc <rcl_validate_enclave_name_with_size+0x3c>
 8010fec:	1e5a      	subs	r2, r3, #1
 8010fee:	2a05      	cmp	r2, #5
 8010ff0:	d833      	bhi.n	801105a <rcl_validate_enclave_name_with_size+0x9a>
 8010ff2:	e8df f002 	tbb	[pc, r2]
 8010ff6:	2c2f      	.short	0x2c2f
 8010ff8:	1a232629 	.word	0x1a232629
 8010ffc:	2cff      	cmp	r4, #255	@ 0xff
 8010ffe:	d9ee      	bls.n	8010fde <rcl_validate_enclave_name_with_size+0x1e>
 8011000:	602b      	str	r3, [r5, #0]
 8011002:	2e00      	cmp	r6, #0
 8011004:	d0ed      	beq.n	8010fe2 <rcl_validate_enclave_name_with_size+0x22>
 8011006:	23fe      	movs	r3, #254	@ 0xfe
 8011008:	6033      	str	r3, [r6, #0]
 801100a:	e7ea      	b.n	8010fe2 <rcl_validate_enclave_name_with_size+0x22>
 801100c:	f04f 0c0b 	mov.w	ip, #11
 8011010:	4660      	mov	r0, ip
 8011012:	b042      	add	sp, #264	@ 0x108
 8011014:	bd70      	pop	{r4, r5, r6, pc}
 8011016:	f7ff f8c9 	bl	80101ac <rcl_convert_rmw_ret_to_rcl_ret>
 801101a:	4684      	mov	ip, r0
 801101c:	4660      	mov	r0, ip
 801101e:	b042      	add	sp, #264	@ 0x108
 8011020:	bd70      	pop	{r4, r5, r6, pc}
 8011022:	f04f 0c0b 	mov.w	ip, #11
 8011026:	4660      	mov	r0, ip
 8011028:	4770      	bx	lr
 801102a:	2306      	movs	r3, #6
 801102c:	602b      	str	r3, [r5, #0]
 801102e:	2e00      	cmp	r6, #0
 8011030:	d0d7      	beq.n	8010fe2 <rcl_validate_enclave_name_with_size+0x22>
 8011032:	9b01      	ldr	r3, [sp, #4]
 8011034:	6033      	str	r3, [r6, #0]
 8011036:	4660      	mov	r0, ip
 8011038:	b042      	add	sp, #264	@ 0x108
 801103a:	bd70      	pop	{r4, r5, r6, pc}
 801103c:	2305      	movs	r3, #5
 801103e:	602b      	str	r3, [r5, #0]
 8011040:	e7f5      	b.n	801102e <rcl_validate_enclave_name_with_size+0x6e>
 8011042:	2304      	movs	r3, #4
 8011044:	602b      	str	r3, [r5, #0]
 8011046:	e7f2      	b.n	801102e <rcl_validate_enclave_name_with_size+0x6e>
 8011048:	2303      	movs	r3, #3
 801104a:	602b      	str	r3, [r5, #0]
 801104c:	e7ef      	b.n	801102e <rcl_validate_enclave_name_with_size+0x6e>
 801104e:	2302      	movs	r3, #2
 8011050:	602b      	str	r3, [r5, #0]
 8011052:	e7ec      	b.n	801102e <rcl_validate_enclave_name_with_size+0x6e>
 8011054:	2301      	movs	r3, #1
 8011056:	602b      	str	r3, [r5, #0]
 8011058:	e7e9      	b.n	801102e <rcl_validate_enclave_name_with_size+0x6e>
 801105a:	4a04      	ldr	r2, [pc, #16]	@ (801106c <rcl_validate_enclave_name_with_size+0xac>)
 801105c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011060:	a802      	add	r0, sp, #8
 8011062:	f7fa fcdb 	bl	800ba1c <rcutils_snprintf>
 8011066:	f04f 0c01 	mov.w	ip, #1
 801106a:	e7ba      	b.n	8010fe2 <rcl_validate_enclave_name_with_size+0x22>
 801106c:	0801a5b0 	.word	0x0801a5b0

08011070 <rcl_validate_enclave_name>:
 8011070:	b168      	cbz	r0, 801108e <rcl_validate_enclave_name+0x1e>
 8011072:	b570      	push	{r4, r5, r6, lr}
 8011074:	460d      	mov	r5, r1
 8011076:	4616      	mov	r6, r2
 8011078:	4604      	mov	r4, r0
 801107a:	f7ef f929 	bl	80002d0 <strlen>
 801107e:	4633      	mov	r3, r6
 8011080:	4601      	mov	r1, r0
 8011082:	462a      	mov	r2, r5
 8011084:	4620      	mov	r0, r4
 8011086:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801108a:	f7ff bf99 	b.w	8010fc0 <rcl_validate_enclave_name_with_size>
 801108e:	200b      	movs	r0, #11
 8011090:	4770      	bx	lr
 8011092:	bf00      	nop

08011094 <rcl_get_zero_initialized_wait_set>:
 8011094:	b510      	push	{r4, lr}
 8011096:	4c08      	ldr	r4, [pc, #32]	@ (80110b8 <rcl_get_zero_initialized_wait_set+0x24>)
 8011098:	4686      	mov	lr, r0
 801109a:	4684      	mov	ip, r0
 801109c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801109e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80110a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80110a4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80110a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80110aa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80110ae:	6823      	ldr	r3, [r4, #0]
 80110b0:	f8cc 3000 	str.w	r3, [ip]
 80110b4:	4670      	mov	r0, lr
 80110b6:	bd10      	pop	{r4, pc}
 80110b8:	0801a610 	.word	0x0801a610

080110bc <rcl_wait_set_is_valid>:
 80110bc:	b118      	cbz	r0, 80110c6 <rcl_wait_set_is_valid+0xa>
 80110be:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 80110c0:	3800      	subs	r0, #0
 80110c2:	bf18      	it	ne
 80110c4:	2001      	movne	r0, #1
 80110c6:	4770      	bx	lr

080110c8 <rcl_wait_set_fini>:
 80110c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110cc:	b082      	sub	sp, #8
 80110ce:	2800      	cmp	r0, #0
 80110d0:	f000 8095 	beq.w	80111fe <rcl_wait_set_fini+0x136>
 80110d4:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 80110d6:	4604      	mov	r4, r0
 80110d8:	2e00      	cmp	r6, #0
 80110da:	f000 808c 	beq.w	80111f6 <rcl_wait_set_fini+0x12e>
 80110de:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 80110e0:	f002 fca4 	bl	8013a2c <rmw_destroy_wait_set>
 80110e4:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80110e6:	1e06      	subs	r6, r0, #0
 80110e8:	bf18      	it	ne
 80110ea:	f44f 7661 	movne.w	r6, #900	@ 0x384
 80110ee:	2d00      	cmp	r5, #0
 80110f0:	f000 8081 	beq.w	80111f6 <rcl_wait_set_fini+0x12e>
 80110f4:	6820      	ldr	r0, [r4, #0]
 80110f6:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 80110fa:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80110fc:	2700      	movs	r7, #0
 80110fe:	6067      	str	r7, [r4, #4]
 8011100:	602f      	str	r7, [r5, #0]
 8011102:	b120      	cbz	r0, 801110e <rcl_wait_set_fini+0x46>
 8011104:	9101      	str	r1, [sp, #4]
 8011106:	47c0      	blx	r8
 8011108:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801110a:	9901      	ldr	r1, [sp, #4]
 801110c:	6027      	str	r7, [r4, #0]
 801110e:	68a8      	ldr	r0, [r5, #8]
 8011110:	b120      	cbz	r0, 801111c <rcl_wait_set_fini+0x54>
 8011112:	47c0      	blx	r8
 8011114:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011116:	2300      	movs	r3, #0
 8011118:	e9c5 3301 	strd	r3, r3, [r5, #4]
 801111c:	68a0      	ldr	r0, [r4, #8]
 801111e:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8011120:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8011122:	f04f 0800 	mov.w	r8, #0
 8011126:	f8c4 800c 	str.w	r8, [r4, #12]
 801112a:	f8c5 800c 	str.w	r8, [r5, #12]
 801112e:	b128      	cbz	r0, 801113c <rcl_wait_set_fini+0x74>
 8011130:	47b8      	blx	r7
 8011132:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011134:	f8c4 8008 	str.w	r8, [r4, #8]
 8011138:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801113a:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801113c:	6968      	ldr	r0, [r5, #20]
 801113e:	f04f 0800 	mov.w	r8, #0
 8011142:	f8c5 8010 	str.w	r8, [r5, #16]
 8011146:	b128      	cbz	r0, 8011154 <rcl_wait_set_fini+0x8c>
 8011148:	47b8      	blx	r7
 801114a:	f8c5 8014 	str.w	r8, [r5, #20]
 801114e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011150:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8011152:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8011154:	6920      	ldr	r0, [r4, #16]
 8011156:	f04f 0800 	mov.w	r8, #0
 801115a:	f8c4 8014 	str.w	r8, [r4, #20]
 801115e:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 8011162:	b128      	cbz	r0, 8011170 <rcl_wait_set_fini+0xa8>
 8011164:	47b8      	blx	r7
 8011166:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011168:	f8c4 8010 	str.w	r8, [r4, #16]
 801116c:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801116e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8011170:	69a0      	ldr	r0, [r4, #24]
 8011172:	f04f 0800 	mov.w	r8, #0
 8011176:	f8c4 801c 	str.w	r8, [r4, #28]
 801117a:	f8c5 8018 	str.w	r8, [r5, #24]
 801117e:	b128      	cbz	r0, 801118c <rcl_wait_set_fini+0xc4>
 8011180:	9101      	str	r1, [sp, #4]
 8011182:	47b8      	blx	r7
 8011184:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011186:	9901      	ldr	r1, [sp, #4]
 8011188:	f8c4 8018 	str.w	r8, [r4, #24]
 801118c:	6a28      	ldr	r0, [r5, #32]
 801118e:	b120      	cbz	r0, 801119a <rcl_wait_set_fini+0xd2>
 8011190:	47b8      	blx	r7
 8011192:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011194:	2300      	movs	r3, #0
 8011196:	e9c5 3307 	strd	r3, r3, [r5, #28]
 801119a:	6a20      	ldr	r0, [r4, #32]
 801119c:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 80111a0:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80111a2:	2700      	movs	r7, #0
 80111a4:	6267      	str	r7, [r4, #36]	@ 0x24
 80111a6:	626f      	str	r7, [r5, #36]	@ 0x24
 80111a8:	b120      	cbz	r0, 80111b4 <rcl_wait_set_fini+0xec>
 80111aa:	9101      	str	r1, [sp, #4]
 80111ac:	47c0      	blx	r8
 80111ae:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80111b0:	9901      	ldr	r1, [sp, #4]
 80111b2:	6227      	str	r7, [r4, #32]
 80111b4:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 80111b6:	b120      	cbz	r0, 80111c2 <rcl_wait_set_fini+0xfa>
 80111b8:	47c0      	blx	r8
 80111ba:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80111bc:	2300      	movs	r3, #0
 80111be:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 80111c2:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80111c4:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 80111c8:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80111ca:	2700      	movs	r7, #0
 80111cc:	62e7      	str	r7, [r4, #44]	@ 0x2c
 80111ce:	632f      	str	r7, [r5, #48]	@ 0x30
 80111d0:	b120      	cbz	r0, 80111dc <rcl_wait_set_fini+0x114>
 80111d2:	9101      	str	r1, [sp, #4]
 80111d4:	47c0      	blx	r8
 80111d6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80111d8:	9901      	ldr	r1, [sp, #4]
 80111da:	62a7      	str	r7, [r4, #40]	@ 0x28
 80111dc:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 80111de:	b120      	cbz	r0, 80111ea <rcl_wait_set_fini+0x122>
 80111e0:	47c0      	blx	r8
 80111e2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80111e4:	2300      	movs	r3, #0
 80111e6:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 80111ea:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 80111ec:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80111ee:	4628      	mov	r0, r5
 80111f0:	4798      	blx	r3
 80111f2:	2300      	movs	r3, #0
 80111f4:	6323      	str	r3, [r4, #48]	@ 0x30
 80111f6:	4630      	mov	r0, r6
 80111f8:	b002      	add	sp, #8
 80111fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80111fe:	260b      	movs	r6, #11
 8011200:	4630      	mov	r0, r6
 8011202:	b002      	add	sp, #8
 8011204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011208 <rcl_wait_set_add_subscription>:
 8011208:	b318      	cbz	r0, 8011252 <rcl_wait_set_add_subscription+0x4a>
 801120a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801120c:	b570      	push	{r4, r5, r6, lr}
 801120e:	4604      	mov	r4, r0
 8011210:	b30b      	cbz	r3, 8011256 <rcl_wait_set_add_subscription+0x4e>
 8011212:	b319      	cbz	r1, 801125c <rcl_wait_set_add_subscription+0x54>
 8011214:	681d      	ldr	r5, [r3, #0]
 8011216:	6840      	ldr	r0, [r0, #4]
 8011218:	4285      	cmp	r5, r0
 801121a:	d217      	bcs.n	801124c <rcl_wait_set_add_subscription+0x44>
 801121c:	6820      	ldr	r0, [r4, #0]
 801121e:	1c6e      	adds	r6, r5, #1
 8011220:	601e      	str	r6, [r3, #0]
 8011222:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8011226:	b102      	cbz	r2, 801122a <rcl_wait_set_add_subscription+0x22>
 8011228:	6015      	str	r5, [r2, #0]
 801122a:	4608      	mov	r0, r1
 801122c:	f7f9 fb4e 	bl	800a8cc <rcl_subscription_get_rmw_handle>
 8011230:	b150      	cbz	r0, 8011248 <rcl_wait_set_add_subscription+0x40>
 8011232:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011234:	6842      	ldr	r2, [r0, #4]
 8011236:	689b      	ldr	r3, [r3, #8]
 8011238:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801123c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801123e:	6853      	ldr	r3, [r2, #4]
 8011240:	3301      	adds	r3, #1
 8011242:	2000      	movs	r0, #0
 8011244:	6053      	str	r3, [r2, #4]
 8011246:	bd70      	pop	{r4, r5, r6, pc}
 8011248:	2001      	movs	r0, #1
 801124a:	bd70      	pop	{r4, r5, r6, pc}
 801124c:	f240 3086 	movw	r0, #902	@ 0x386
 8011250:	bd70      	pop	{r4, r5, r6, pc}
 8011252:	200b      	movs	r0, #11
 8011254:	4770      	bx	lr
 8011256:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801125a:	bd70      	pop	{r4, r5, r6, pc}
 801125c:	200b      	movs	r0, #11
 801125e:	bd70      	pop	{r4, r5, r6, pc}

08011260 <rcl_wait_set_clear>:
 8011260:	2800      	cmp	r0, #0
 8011262:	d073      	beq.n	801134c <rcl_wait_set_clear+0xec>
 8011264:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8011266:	b510      	push	{r4, lr}
 8011268:	4604      	mov	r4, r0
 801126a:	2b00      	cmp	r3, #0
 801126c:	d070      	beq.n	8011350 <rcl_wait_set_clear+0xf0>
 801126e:	6800      	ldr	r0, [r0, #0]
 8011270:	b138      	cbz	r0, 8011282 <rcl_wait_set_clear+0x22>
 8011272:	6862      	ldr	r2, [r4, #4]
 8011274:	2100      	movs	r1, #0
 8011276:	0092      	lsls	r2, r2, #2
 8011278:	f006 fcd6 	bl	8017c28 <memset>
 801127c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801127e:	2200      	movs	r2, #0
 8011280:	601a      	str	r2, [r3, #0]
 8011282:	68a0      	ldr	r0, [r4, #8]
 8011284:	b138      	cbz	r0, 8011296 <rcl_wait_set_clear+0x36>
 8011286:	68e2      	ldr	r2, [r4, #12]
 8011288:	2100      	movs	r1, #0
 801128a:	0092      	lsls	r2, r2, #2
 801128c:	f006 fccc 	bl	8017c28 <memset>
 8011290:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011292:	2200      	movs	r2, #0
 8011294:	60da      	str	r2, [r3, #12]
 8011296:	69a0      	ldr	r0, [r4, #24]
 8011298:	b138      	cbz	r0, 80112aa <rcl_wait_set_clear+0x4a>
 801129a:	69e2      	ldr	r2, [r4, #28]
 801129c:	2100      	movs	r1, #0
 801129e:	0092      	lsls	r2, r2, #2
 80112a0:	f006 fcc2 	bl	8017c28 <memset>
 80112a4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80112a6:	2200      	movs	r2, #0
 80112a8:	619a      	str	r2, [r3, #24]
 80112aa:	6a20      	ldr	r0, [r4, #32]
 80112ac:	b138      	cbz	r0, 80112be <rcl_wait_set_clear+0x5e>
 80112ae:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80112b0:	2100      	movs	r1, #0
 80112b2:	0092      	lsls	r2, r2, #2
 80112b4:	f006 fcb8 	bl	8017c28 <memset>
 80112b8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80112ba:	2200      	movs	r2, #0
 80112bc:	625a      	str	r2, [r3, #36]	@ 0x24
 80112be:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80112c0:	b138      	cbz	r0, 80112d2 <rcl_wait_set_clear+0x72>
 80112c2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80112c4:	2100      	movs	r1, #0
 80112c6:	0092      	lsls	r2, r2, #2
 80112c8:	f006 fcae 	bl	8017c28 <memset>
 80112cc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80112ce:	2200      	movs	r2, #0
 80112d0:	631a      	str	r2, [r3, #48]	@ 0x30
 80112d2:	6920      	ldr	r0, [r4, #16]
 80112d4:	b138      	cbz	r0, 80112e6 <rcl_wait_set_clear+0x86>
 80112d6:	6962      	ldr	r2, [r4, #20]
 80112d8:	2100      	movs	r1, #0
 80112da:	0092      	lsls	r2, r2, #2
 80112dc:	f006 fca4 	bl	8017c28 <memset>
 80112e0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80112e2:	2200      	movs	r2, #0
 80112e4:	641a      	str	r2, [r3, #64]	@ 0x40
 80112e6:	6898      	ldr	r0, [r3, #8]
 80112e8:	b138      	cbz	r0, 80112fa <rcl_wait_set_clear+0x9a>
 80112ea:	685a      	ldr	r2, [r3, #4]
 80112ec:	2100      	movs	r1, #0
 80112ee:	0092      	lsls	r2, r2, #2
 80112f0:	f006 fc9a 	bl	8017c28 <memset>
 80112f4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80112f6:	2200      	movs	r2, #0
 80112f8:	605a      	str	r2, [r3, #4]
 80112fa:	6958      	ldr	r0, [r3, #20]
 80112fc:	b138      	cbz	r0, 801130e <rcl_wait_set_clear+0xae>
 80112fe:	691a      	ldr	r2, [r3, #16]
 8011300:	2100      	movs	r1, #0
 8011302:	0092      	lsls	r2, r2, #2
 8011304:	f006 fc90 	bl	8017c28 <memset>
 8011308:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801130a:	2200      	movs	r2, #0
 801130c:	611a      	str	r2, [r3, #16]
 801130e:	6a18      	ldr	r0, [r3, #32]
 8011310:	b138      	cbz	r0, 8011322 <rcl_wait_set_clear+0xc2>
 8011312:	69da      	ldr	r2, [r3, #28]
 8011314:	2100      	movs	r1, #0
 8011316:	0092      	lsls	r2, r2, #2
 8011318:	f006 fc86 	bl	8017c28 <memset>
 801131c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801131e:	2200      	movs	r2, #0
 8011320:	61da      	str	r2, [r3, #28]
 8011322:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8011324:	b138      	cbz	r0, 8011336 <rcl_wait_set_clear+0xd6>
 8011326:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011328:	2100      	movs	r1, #0
 801132a:	0092      	lsls	r2, r2, #2
 801132c:	f006 fc7c 	bl	8017c28 <memset>
 8011330:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011332:	2200      	movs	r2, #0
 8011334:	629a      	str	r2, [r3, #40]	@ 0x28
 8011336:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8011338:	b138      	cbz	r0, 801134a <rcl_wait_set_clear+0xea>
 801133a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801133c:	2100      	movs	r1, #0
 801133e:	0092      	lsls	r2, r2, #2
 8011340:	f006 fc72 	bl	8017c28 <memset>
 8011344:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011346:	2000      	movs	r0, #0
 8011348:	6358      	str	r0, [r3, #52]	@ 0x34
 801134a:	bd10      	pop	{r4, pc}
 801134c:	200b      	movs	r0, #11
 801134e:	4770      	bx	lr
 8011350:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011354:	bd10      	pop	{r4, pc}
 8011356:	bf00      	nop

08011358 <rcl_wait_set_resize>:
 8011358:	2800      	cmp	r0, #0
 801135a:	f000 8185 	beq.w	8011668 <rcl_wait_set_resize+0x310>
 801135e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011362:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8011364:	b083      	sub	sp, #12
 8011366:	4605      	mov	r5, r0
 8011368:	2c00      	cmp	r4, #0
 801136a:	f000 817f 	beq.w	801166c <rcl_wait_set_resize+0x314>
 801136e:	f04f 0900 	mov.w	r9, #0
 8011372:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 8011376:	461f      	mov	r7, r3
 8011378:	4688      	mov	r8, r1
 801137a:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 801137e:	4616      	mov	r6, r2
 8011380:	f8c0 9004 	str.w	r9, [r0, #4]
 8011384:	f8c4 9000 	str.w	r9, [r4]
 8011388:	2900      	cmp	r1, #0
 801138a:	f000 80bd 	beq.w	8011508 <rcl_wait_set_resize+0x1b0>
 801138e:	008c      	lsls	r4, r1, #2
 8011390:	6800      	ldr	r0, [r0, #0]
 8011392:	9301      	str	r3, [sp, #4]
 8011394:	4652      	mov	r2, sl
 8011396:	4621      	mov	r1, r4
 8011398:	4798      	blx	r3
 801139a:	9b01      	ldr	r3, [sp, #4]
 801139c:	6028      	str	r0, [r5, #0]
 801139e:	2800      	cmp	r0, #0
 80113a0:	f000 80cb 	beq.w	801153a <rcl_wait_set_resize+0x1e2>
 80113a4:	4622      	mov	r2, r4
 80113a6:	4649      	mov	r1, r9
 80113a8:	9301      	str	r3, [sp, #4]
 80113aa:	f006 fc3d 	bl	8017c28 <memset>
 80113ae:	f8c5 8004 	str.w	r8, [r5, #4]
 80113b2:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 80113b6:	9b01      	ldr	r3, [sp, #4]
 80113b8:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80113bc:	f8c8 9004 	str.w	r9, [r8, #4]
 80113c0:	4652      	mov	r2, sl
 80113c2:	4621      	mov	r1, r4
 80113c4:	4798      	blx	r3
 80113c6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80113c8:	f8c8 0008 	str.w	r0, [r8, #8]
 80113cc:	689b      	ldr	r3, [r3, #8]
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	f000 80ac 	beq.w	801152c <rcl_wait_set_resize+0x1d4>
 80113d4:	4622      	mov	r2, r4
 80113d6:	4649      	mov	r1, r9
 80113d8:	4618      	mov	r0, r3
 80113da:	f006 fc25 	bl	8017c28 <memset>
 80113de:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80113e0:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80113e4:	f04f 0800 	mov.w	r8, #0
 80113e8:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 80113ec:	f8c5 800c 	str.w	r8, [r5, #12]
 80113f0:	f8c4 800c 	str.w	r8, [r4, #12]
 80113f4:	2e00      	cmp	r6, #0
 80113f6:	f040 80a4 	bne.w	8011542 <rcl_wait_set_resize+0x1ea>
 80113fa:	68a8      	ldr	r0, [r5, #8]
 80113fc:	b128      	cbz	r0, 801140a <rcl_wait_set_resize+0xb2>
 80113fe:	4649      	mov	r1, r9
 8011400:	4790      	blx	r2
 8011402:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011404:	60ae      	str	r6, [r5, #8]
 8011406:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801140a:	f04f 0800 	mov.w	r8, #0
 801140e:	19f6      	adds	r6, r6, r7
 8011410:	f8c4 8010 	str.w	r8, [r4, #16]
 8011414:	f040 80ac 	bne.w	8011570 <rcl_wait_set_resize+0x218>
 8011418:	6960      	ldr	r0, [r4, #20]
 801141a:	b130      	cbz	r0, 801142a <rcl_wait_set_resize+0xd2>
 801141c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 801141e:	4649      	mov	r1, r9
 8011420:	4798      	blx	r3
 8011422:	6166      	str	r6, [r4, #20]
 8011424:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011426:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801142a:	2600      	movs	r6, #0
 801142c:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8011430:	616e      	str	r6, [r5, #20]
 8011432:	6426      	str	r6, [r4, #64]	@ 0x40
 8011434:	2f00      	cmp	r7, #0
 8011436:	f040 80ad 	bne.w	8011594 <rcl_wait_set_resize+0x23c>
 801143a:	6928      	ldr	r0, [r5, #16]
 801143c:	b138      	cbz	r0, 801144e <rcl_wait_set_resize+0xf6>
 801143e:	4649      	mov	r1, r9
 8011440:	47d0      	blx	sl
 8011442:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011444:	612f      	str	r7, [r5, #16]
 8011446:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 801144a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801144e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011450:	2600      	movs	r6, #0
 8011452:	61ee      	str	r6, [r5, #28]
 8011454:	61a6      	str	r6, [r4, #24]
 8011456:	2b00      	cmp	r3, #0
 8011458:	f040 80af 	bne.w	80115ba <rcl_wait_set_resize+0x262>
 801145c:	69a8      	ldr	r0, [r5, #24]
 801145e:	b120      	cbz	r0, 801146a <rcl_wait_set_resize+0x112>
 8011460:	4649      	mov	r1, r9
 8011462:	47d0      	blx	sl
 8011464:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011466:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011468:	61ab      	str	r3, [r5, #24]
 801146a:	6a20      	ldr	r0, [r4, #32]
 801146c:	b128      	cbz	r0, 801147a <rcl_wait_set_resize+0x122>
 801146e:	4649      	mov	r1, r9
 8011470:	47d0      	blx	sl
 8011472:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011474:	2300      	movs	r3, #0
 8011476:	e9c4 3307 	strd	r3, r3, [r4, #28]
 801147a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801147c:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 801147e:	2600      	movs	r6, #0
 8011480:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8011484:	626e      	str	r6, [r5, #36]	@ 0x24
 8011486:	6266      	str	r6, [r4, #36]	@ 0x24
 8011488:	2b00      	cmp	r3, #0
 801148a:	f000 80b6 	beq.w	80115fa <rcl_wait_set_resize+0x2a2>
 801148e:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8011492:	6a28      	ldr	r0, [r5, #32]
 8011494:	463a      	mov	r2, r7
 8011496:	4651      	mov	r1, sl
 8011498:	47c8      	blx	r9
 801149a:	6228      	str	r0, [r5, #32]
 801149c:	2800      	cmp	r0, #0
 801149e:	d04c      	beq.n	801153a <rcl_wait_set_resize+0x1e2>
 80114a0:	4652      	mov	r2, sl
 80114a2:	4631      	mov	r1, r6
 80114a4:	f006 fbc0 	bl	8017c28 <memset>
 80114a8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80114aa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80114ac:	626b      	str	r3, [r5, #36]	@ 0x24
 80114ae:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80114b0:	62a6      	str	r6, [r4, #40]	@ 0x28
 80114b2:	463a      	mov	r2, r7
 80114b4:	4651      	mov	r1, sl
 80114b6:	47c8      	blx	r9
 80114b8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80114ba:	62e0      	str	r0, [r4, #44]	@ 0x2c
 80114bc:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 80114be:	2c00      	cmp	r4, #0
 80114c0:	f000 80f0 	beq.w	80116a4 <rcl_wait_set_resize+0x34c>
 80114c4:	4620      	mov	r0, r4
 80114c6:	4652      	mov	r2, sl
 80114c8:	4631      	mov	r1, r6
 80114ca:	f006 fbad 	bl	8017c28 <memset>
 80114ce:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80114d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80114d2:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 80114d4:	2600      	movs	r6, #0
 80114d6:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 80114da:	62ee      	str	r6, [r5, #44]	@ 0x2c
 80114dc:	6326      	str	r6, [r4, #48]	@ 0x30
 80114de:	2b00      	cmp	r3, #0
 80114e0:	f040 809d 	bne.w	801161e <rcl_wait_set_resize+0x2c6>
 80114e4:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 80114e6:	b120      	cbz	r0, 80114f2 <rcl_wait_set_resize+0x19a>
 80114e8:	4639      	mov	r1, r7
 80114ea:	47c0      	blx	r8
 80114ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80114ee:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80114f0:	62ab      	str	r3, [r5, #40]	@ 0x28
 80114f2:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80114f4:	b310      	cbz	r0, 801153c <rcl_wait_set_resize+0x1e4>
 80114f6:	4639      	mov	r1, r7
 80114f8:	47c0      	blx	r8
 80114fa:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80114fc:	2000      	movs	r0, #0
 80114fe:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 8011502:	b003      	add	sp, #12
 8011504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011508:	6800      	ldr	r0, [r0, #0]
 801150a:	b120      	cbz	r0, 8011516 <rcl_wait_set_resize+0x1be>
 801150c:	4651      	mov	r1, sl
 801150e:	47d8      	blx	fp
 8011510:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011512:	f8c5 8000 	str.w	r8, [r5]
 8011516:	68a0      	ldr	r0, [r4, #8]
 8011518:	2800      	cmp	r0, #0
 801151a:	f43f af61 	beq.w	80113e0 <rcl_wait_set_resize+0x88>
 801151e:	4651      	mov	r1, sl
 8011520:	47d8      	blx	fp
 8011522:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011524:	2300      	movs	r3, #0
 8011526:	e9c4 3301 	strd	r3, r3, [r4, #4]
 801152a:	e759      	b.n	80113e0 <rcl_wait_set_resize+0x88>
 801152c:	6828      	ldr	r0, [r5, #0]
 801152e:	9301      	str	r3, [sp, #4]
 8011530:	4651      	mov	r1, sl
 8011532:	47d8      	blx	fp
 8011534:	9b01      	ldr	r3, [sp, #4]
 8011536:	e9c5 3300 	strd	r3, r3, [r5]
 801153a:	200a      	movs	r0, #10
 801153c:	b003      	add	sp, #12
 801153e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011542:	00b4      	lsls	r4, r6, #2
 8011544:	68a8      	ldr	r0, [r5, #8]
 8011546:	464a      	mov	r2, r9
 8011548:	4621      	mov	r1, r4
 801154a:	4798      	blx	r3
 801154c:	60a8      	str	r0, [r5, #8]
 801154e:	2800      	cmp	r0, #0
 8011550:	d0f3      	beq.n	801153a <rcl_wait_set_resize+0x1e2>
 8011552:	4622      	mov	r2, r4
 8011554:	4641      	mov	r1, r8
 8011556:	f006 fb67 	bl	8017c28 <memset>
 801155a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801155c:	60ee      	str	r6, [r5, #12]
 801155e:	f04f 0800 	mov.w	r8, #0
 8011562:	19f6      	adds	r6, r6, r7
 8011564:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8011568:	f8c4 8010 	str.w	r8, [r4, #16]
 801156c:	f43f af54 	beq.w	8011418 <rcl_wait_set_resize+0xc0>
 8011570:	00b6      	lsls	r6, r6, #2
 8011572:	464a      	mov	r2, r9
 8011574:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8011576:	6960      	ldr	r0, [r4, #20]
 8011578:	4631      	mov	r1, r6
 801157a:	4798      	blx	r3
 801157c:	4681      	mov	r9, r0
 801157e:	6160      	str	r0, [r4, #20]
 8011580:	2800      	cmp	r0, #0
 8011582:	d076      	beq.n	8011672 <rcl_wait_set_resize+0x31a>
 8011584:	4632      	mov	r2, r6
 8011586:	4641      	mov	r1, r8
 8011588:	f006 fb4e 	bl	8017c28 <memset>
 801158c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801158e:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8011592:	e74a      	b.n	801142a <rcl_wait_set_resize+0xd2>
 8011594:	00bc      	lsls	r4, r7, #2
 8011596:	6928      	ldr	r0, [r5, #16]
 8011598:	464a      	mov	r2, r9
 801159a:	4621      	mov	r1, r4
 801159c:	47c0      	blx	r8
 801159e:	6128      	str	r0, [r5, #16]
 80115a0:	2800      	cmp	r0, #0
 80115a2:	d0ca      	beq.n	801153a <rcl_wait_set_resize+0x1e2>
 80115a4:	4622      	mov	r2, r4
 80115a6:	4631      	mov	r1, r6
 80115a8:	f006 fb3e 	bl	8017c28 <memset>
 80115ac:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80115ae:	616f      	str	r7, [r5, #20]
 80115b0:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 80115b4:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80115b8:	e749      	b.n	801144e <rcl_wait_set_resize+0xf6>
 80115ba:	009c      	lsls	r4, r3, #2
 80115bc:	69a8      	ldr	r0, [r5, #24]
 80115be:	464a      	mov	r2, r9
 80115c0:	4621      	mov	r1, r4
 80115c2:	47c0      	blx	r8
 80115c4:	61a8      	str	r0, [r5, #24]
 80115c6:	2800      	cmp	r0, #0
 80115c8:	d0b7      	beq.n	801153a <rcl_wait_set_resize+0x1e2>
 80115ca:	4622      	mov	r2, r4
 80115cc:	4631      	mov	r1, r6
 80115ce:	f006 fb2b 	bl	8017c28 <memset>
 80115d2:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 80115d4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80115d6:	61eb      	str	r3, [r5, #28]
 80115d8:	6a38      	ldr	r0, [r7, #32]
 80115da:	61fe      	str	r6, [r7, #28]
 80115dc:	464a      	mov	r2, r9
 80115de:	4621      	mov	r1, r4
 80115e0:	47c0      	blx	r8
 80115e2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80115e4:	6238      	str	r0, [r7, #32]
 80115e6:	6a1f      	ldr	r7, [r3, #32]
 80115e8:	2f00      	cmp	r7, #0
 80115ea:	d054      	beq.n	8011696 <rcl_wait_set_resize+0x33e>
 80115ec:	4622      	mov	r2, r4
 80115ee:	4631      	mov	r1, r6
 80115f0:	4638      	mov	r0, r7
 80115f2:	f006 fb19 	bl	8017c28 <memset>
 80115f6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80115f8:	e73f      	b.n	801147a <rcl_wait_set_resize+0x122>
 80115fa:	6a28      	ldr	r0, [r5, #32]
 80115fc:	b120      	cbz	r0, 8011608 <rcl_wait_set_resize+0x2b0>
 80115fe:	4639      	mov	r1, r7
 8011600:	47c0      	blx	r8
 8011602:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011604:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011606:	622b      	str	r3, [r5, #32]
 8011608:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801160a:	2800      	cmp	r0, #0
 801160c:	f43f af60 	beq.w	80114d0 <rcl_wait_set_resize+0x178>
 8011610:	4639      	mov	r1, r7
 8011612:	47c0      	blx	r8
 8011614:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011616:	2300      	movs	r3, #0
 8011618:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 801161c:	e758      	b.n	80114d0 <rcl_wait_set_resize+0x178>
 801161e:	009c      	lsls	r4, r3, #2
 8011620:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8011622:	463a      	mov	r2, r7
 8011624:	4621      	mov	r1, r4
 8011626:	47c8      	blx	r9
 8011628:	62a8      	str	r0, [r5, #40]	@ 0x28
 801162a:	2800      	cmp	r0, #0
 801162c:	d085      	beq.n	801153a <rcl_wait_set_resize+0x1e2>
 801162e:	4622      	mov	r2, r4
 8011630:	4631      	mov	r1, r6
 8011632:	f006 faf9 	bl	8017c28 <memset>
 8011636:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 801163a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801163c:	62eb      	str	r3, [r5, #44]	@ 0x2c
 801163e:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8011642:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 8011646:	463a      	mov	r2, r7
 8011648:	4621      	mov	r1, r4
 801164a:	47c8      	blx	r9
 801164c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801164e:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 8011652:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011654:	b36b      	cbz	r3, 80116b2 <rcl_wait_set_resize+0x35a>
 8011656:	4622      	mov	r2, r4
 8011658:	4631      	mov	r1, r6
 801165a:	4618      	mov	r0, r3
 801165c:	f006 fae4 	bl	8017c28 <memset>
 8011660:	4630      	mov	r0, r6
 8011662:	b003      	add	sp, #12
 8011664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011668:	200b      	movs	r0, #11
 801166a:	4770      	bx	lr
 801166c:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011670:	e764      	b.n	801153c <rcl_wait_set_resize+0x1e4>
 8011672:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8011674:	68a8      	ldr	r0, [r5, #8]
 8011676:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8011678:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801167a:	4798      	blx	r3
 801167c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801167e:	6928      	ldr	r0, [r5, #16]
 8011680:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011682:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8011684:	f8c5 900c 	str.w	r9, [r5, #12]
 8011688:	f8c5 9008 	str.w	r9, [r5, #8]
 801168c:	4790      	blx	r2
 801168e:	e9c5 9904 	strd	r9, r9, [r5, #16]
 8011692:	200a      	movs	r0, #10
 8011694:	e752      	b.n	801153c <rcl_wait_set_resize+0x1e4>
 8011696:	69a8      	ldr	r0, [r5, #24]
 8011698:	4649      	mov	r1, r9
 801169a:	47d0      	blx	sl
 801169c:	e9c5 7706 	strd	r7, r7, [r5, #24]
 80116a0:	200a      	movs	r0, #10
 80116a2:	e74b      	b.n	801153c <rcl_wait_set_resize+0x1e4>
 80116a4:	6a28      	ldr	r0, [r5, #32]
 80116a6:	4639      	mov	r1, r7
 80116a8:	47c0      	blx	r8
 80116aa:	e9c5 4408 	strd	r4, r4, [r5, #32]
 80116ae:	200a      	movs	r0, #10
 80116b0:	e744      	b.n	801153c <rcl_wait_set_resize+0x1e4>
 80116b2:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 80116b4:	9301      	str	r3, [sp, #4]
 80116b6:	4639      	mov	r1, r7
 80116b8:	47c0      	blx	r8
 80116ba:	9b01      	ldr	r3, [sp, #4]
 80116bc:	200a      	movs	r0, #10
 80116be:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 80116c2:	e73b      	b.n	801153c <rcl_wait_set_resize+0x1e4>

080116c4 <rcl_wait_set_init>:
 80116c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80116c8:	b084      	sub	sp, #16
 80116ca:	4604      	mov	r4, r0
 80116cc:	a810      	add	r0, sp, #64	@ 0x40
 80116ce:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 80116d2:	460f      	mov	r7, r1
 80116d4:	4690      	mov	r8, r2
 80116d6:	4699      	mov	r9, r3
 80116d8:	f7fa f85a 	bl	800b790 <rcutils_allocator_is_valid>
 80116dc:	2800      	cmp	r0, #0
 80116de:	d06b      	beq.n	80117b8 <rcl_wait_set_init+0xf4>
 80116e0:	2c00      	cmp	r4, #0
 80116e2:	d069      	beq.n	80117b8 <rcl_wait_set_init+0xf4>
 80116e4:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80116e6:	b125      	cbz	r5, 80116f2 <rcl_wait_set_init+0x2e>
 80116e8:	2564      	movs	r5, #100	@ 0x64
 80116ea:	4628      	mov	r0, r5
 80116ec:	b004      	add	sp, #16
 80116ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80116f2:	f1ba 0f00 	cmp.w	sl, #0
 80116f6:	d05f      	beq.n	80117b8 <rcl_wait_set_init+0xf4>
 80116f8:	4650      	mov	r0, sl
 80116fa:	f7fe fd75 	bl	80101e8 <rcl_context_is_valid>
 80116fe:	2800      	cmp	r0, #0
 8011700:	d067      	beq.n	80117d2 <rcl_wait_set_init+0x10e>
 8011702:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011704:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8011706:	205c      	movs	r0, #92	@ 0x5c
 8011708:	4798      	blx	r3
 801170a:	6320      	str	r0, [r4, #48]	@ 0x30
 801170c:	2800      	cmp	r0, #0
 801170e:	d062      	beq.n	80117d6 <rcl_wait_set_init+0x112>
 8011710:	4629      	mov	r1, r5
 8011712:	225c      	movs	r2, #92	@ 0x5c
 8011714:	f006 fa88 	bl	8017c28 <memset>
 8011718:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 801171c:	eb03 0e02 	add.w	lr, r3, r2
 8011720:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011722:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8011724:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8011728:	449e      	add	lr, r3
 801172a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801172e:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8011732:	e9c6 5504 	strd	r5, r5, [r6, #16]
 8011736:	e9c6 5507 	strd	r5, r5, [r6, #28]
 801173a:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 801173e:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 8011742:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 8011746:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 801174a:	f8da a000 	ldr.w	sl, [sl]
 801174e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011750:	44c6      	add	lr, r8
 8011752:	f8dc 3000 	ldr.w	r3, [ip]
 8011756:	602b      	str	r3, [r5, #0]
 8011758:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 801175c:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 8011760:	f002 f95a 	bl	8013a18 <rmw_create_wait_set>
 8011764:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011766:	63f0      	str	r0, [r6, #60]	@ 0x3c
 8011768:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801176a:	b350      	cbz	r0, 80117c2 <rcl_wait_set_init+0xfe>
 801176c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801176e:	9302      	str	r3, [sp, #8]
 8011770:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011772:	9301      	str	r3, [sp, #4]
 8011774:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011776:	9300      	str	r3, [sp, #0]
 8011778:	4642      	mov	r2, r8
 801177a:	464b      	mov	r3, r9
 801177c:	4639      	mov	r1, r7
 801177e:	4620      	mov	r0, r4
 8011780:	f7ff fdea 	bl	8011358 <rcl_wait_set_resize>
 8011784:	4605      	mov	r5, r0
 8011786:	2800      	cmp	r0, #0
 8011788:	d0af      	beq.n	80116ea <rcl_wait_set_init+0x26>
 801178a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801178c:	bb2b      	cbnz	r3, 80117da <rcl_wait_set_init+0x116>
 801178e:	2600      	movs	r6, #0
 8011790:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8011794:	9600      	str	r6, [sp, #0]
 8011796:	4633      	mov	r3, r6
 8011798:	4632      	mov	r2, r6
 801179a:	4631      	mov	r1, r6
 801179c:	4620      	mov	r0, r4
 801179e:	f7ff fddb 	bl	8011358 <rcl_wait_set_resize>
 80117a2:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80117a4:	2800      	cmp	r0, #0
 80117a6:	d0a0      	beq.n	80116ea <rcl_wait_set_init+0x26>
 80117a8:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 80117aa:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 80117ac:	4798      	blx	r3
 80117ae:	4628      	mov	r0, r5
 80117b0:	6326      	str	r6, [r4, #48]	@ 0x30
 80117b2:	b004      	add	sp, #16
 80117b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80117b8:	250b      	movs	r5, #11
 80117ba:	4628      	mov	r0, r5
 80117bc:	b004      	add	sp, #16
 80117be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80117c2:	2501      	movs	r5, #1
 80117c4:	f002 f932 	bl	8013a2c <rmw_destroy_wait_set>
 80117c8:	2800      	cmp	r0, #0
 80117ca:	bf18      	it	ne
 80117cc:	f44f 7561 	movne.w	r5, #900	@ 0x384
 80117d0:	e7dd      	b.n	801178e <rcl_wait_set_init+0xca>
 80117d2:	2565      	movs	r5, #101	@ 0x65
 80117d4:	e789      	b.n	80116ea <rcl_wait_set_init+0x26>
 80117d6:	250a      	movs	r5, #10
 80117d8:	e787      	b.n	80116ea <rcl_wait_set_init+0x26>
 80117da:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80117dc:	e7f2      	b.n	80117c4 <rcl_wait_set_init+0x100>
 80117de:	bf00      	nop

080117e0 <rcl_wait_set_add_guard_condition>:
 80117e0:	b318      	cbz	r0, 801182a <rcl_wait_set_add_guard_condition+0x4a>
 80117e2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80117e4:	b570      	push	{r4, r5, r6, lr}
 80117e6:	4604      	mov	r4, r0
 80117e8:	b30b      	cbz	r3, 801182e <rcl_wait_set_add_guard_condition+0x4e>
 80117ea:	b319      	cbz	r1, 8011834 <rcl_wait_set_add_guard_condition+0x54>
 80117ec:	68dd      	ldr	r5, [r3, #12]
 80117ee:	68c0      	ldr	r0, [r0, #12]
 80117f0:	4285      	cmp	r5, r0
 80117f2:	d217      	bcs.n	8011824 <rcl_wait_set_add_guard_condition+0x44>
 80117f4:	68a0      	ldr	r0, [r4, #8]
 80117f6:	1c6e      	adds	r6, r5, #1
 80117f8:	60de      	str	r6, [r3, #12]
 80117fa:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80117fe:	b102      	cbz	r2, 8011802 <rcl_wait_set_add_guard_condition+0x22>
 8011800:	6015      	str	r5, [r2, #0]
 8011802:	4608      	mov	r0, r1
 8011804:	f7fe fe02 	bl	801040c <rcl_guard_condition_get_rmw_handle>
 8011808:	b150      	cbz	r0, 8011820 <rcl_wait_set_add_guard_condition+0x40>
 801180a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801180c:	6842      	ldr	r2, [r0, #4]
 801180e:	695b      	ldr	r3, [r3, #20]
 8011810:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011814:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8011816:	6913      	ldr	r3, [r2, #16]
 8011818:	3301      	adds	r3, #1
 801181a:	2000      	movs	r0, #0
 801181c:	6113      	str	r3, [r2, #16]
 801181e:	bd70      	pop	{r4, r5, r6, pc}
 8011820:	2001      	movs	r0, #1
 8011822:	bd70      	pop	{r4, r5, r6, pc}
 8011824:	f240 3086 	movw	r0, #902	@ 0x386
 8011828:	bd70      	pop	{r4, r5, r6, pc}
 801182a:	200b      	movs	r0, #11
 801182c:	4770      	bx	lr
 801182e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011832:	bd70      	pop	{r4, r5, r6, pc}
 8011834:	200b      	movs	r0, #11
 8011836:	bd70      	pop	{r4, r5, r6, pc}

08011838 <rcl_wait_set_add_timer>:
 8011838:	b328      	cbz	r0, 8011886 <rcl_wait_set_add_timer+0x4e>
 801183a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801183c:	b570      	push	{r4, r5, r6, lr}
 801183e:	4604      	mov	r4, r0
 8011840:	b31b      	cbz	r3, 801188a <rcl_wait_set_add_timer+0x52>
 8011842:	b329      	cbz	r1, 8011890 <rcl_wait_set_add_timer+0x58>
 8011844:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8011846:	6965      	ldr	r5, [r4, #20]
 8011848:	42a8      	cmp	r0, r5
 801184a:	d219      	bcs.n	8011880 <rcl_wait_set_add_timer+0x48>
 801184c:	6925      	ldr	r5, [r4, #16]
 801184e:	1c46      	adds	r6, r0, #1
 8011850:	641e      	str	r6, [r3, #64]	@ 0x40
 8011852:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8011856:	b102      	cbz	r2, 801185a <rcl_wait_set_add_timer+0x22>
 8011858:	6010      	str	r0, [r2, #0]
 801185a:	4608      	mov	r0, r1
 801185c:	f7ff fba6 	bl	8010fac <rcl_timer_get_guard_condition>
 8011860:	b168      	cbz	r0, 801187e <rcl_wait_set_add_timer+0x46>
 8011862:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8011864:	68e3      	ldr	r3, [r4, #12]
 8011866:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8011868:	3b01      	subs	r3, #1
 801186a:	441d      	add	r5, r3
 801186c:	f7fe fdce 	bl	801040c <rcl_guard_condition_get_rmw_handle>
 8011870:	b180      	cbz	r0, 8011894 <rcl_wait_set_add_timer+0x5c>
 8011872:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011874:	6842      	ldr	r2, [r0, #4]
 8011876:	695b      	ldr	r3, [r3, #20]
 8011878:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801187c:	2000      	movs	r0, #0
 801187e:	bd70      	pop	{r4, r5, r6, pc}
 8011880:	f240 3086 	movw	r0, #902	@ 0x386
 8011884:	bd70      	pop	{r4, r5, r6, pc}
 8011886:	200b      	movs	r0, #11
 8011888:	4770      	bx	lr
 801188a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801188e:	bd70      	pop	{r4, r5, r6, pc}
 8011890:	200b      	movs	r0, #11
 8011892:	bd70      	pop	{r4, r5, r6, pc}
 8011894:	2001      	movs	r0, #1
 8011896:	bd70      	pop	{r4, r5, r6, pc}

08011898 <rcl_wait_set_add_client>:
 8011898:	b318      	cbz	r0, 80118e2 <rcl_wait_set_add_client+0x4a>
 801189a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801189c:	b570      	push	{r4, r5, r6, lr}
 801189e:	4604      	mov	r4, r0
 80118a0:	b30b      	cbz	r3, 80118e6 <rcl_wait_set_add_client+0x4e>
 80118a2:	b319      	cbz	r1, 80118ec <rcl_wait_set_add_client+0x54>
 80118a4:	699d      	ldr	r5, [r3, #24]
 80118a6:	69c0      	ldr	r0, [r0, #28]
 80118a8:	4285      	cmp	r5, r0
 80118aa:	d217      	bcs.n	80118dc <rcl_wait_set_add_client+0x44>
 80118ac:	69a0      	ldr	r0, [r4, #24]
 80118ae:	1c6e      	adds	r6, r5, #1
 80118b0:	619e      	str	r6, [r3, #24]
 80118b2:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80118b6:	b102      	cbz	r2, 80118ba <rcl_wait_set_add_client+0x22>
 80118b8:	6015      	str	r5, [r2, #0]
 80118ba:	4608      	mov	r0, r1
 80118bc:	f7fe fbe8 	bl	8010090 <rcl_client_get_rmw_handle>
 80118c0:	b150      	cbz	r0, 80118d8 <rcl_wait_set_add_client+0x40>
 80118c2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80118c4:	6842      	ldr	r2, [r0, #4]
 80118c6:	6a1b      	ldr	r3, [r3, #32]
 80118c8:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80118cc:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80118ce:	69d3      	ldr	r3, [r2, #28]
 80118d0:	3301      	adds	r3, #1
 80118d2:	2000      	movs	r0, #0
 80118d4:	61d3      	str	r3, [r2, #28]
 80118d6:	bd70      	pop	{r4, r5, r6, pc}
 80118d8:	2001      	movs	r0, #1
 80118da:	bd70      	pop	{r4, r5, r6, pc}
 80118dc:	f240 3086 	movw	r0, #902	@ 0x386
 80118e0:	bd70      	pop	{r4, r5, r6, pc}
 80118e2:	200b      	movs	r0, #11
 80118e4:	4770      	bx	lr
 80118e6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80118ea:	bd70      	pop	{r4, r5, r6, pc}
 80118ec:	200b      	movs	r0, #11
 80118ee:	bd70      	pop	{r4, r5, r6, pc}

080118f0 <rcl_wait_set_add_service>:
 80118f0:	b318      	cbz	r0, 801193a <rcl_wait_set_add_service+0x4a>
 80118f2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80118f4:	b570      	push	{r4, r5, r6, lr}
 80118f6:	4604      	mov	r4, r0
 80118f8:	b30b      	cbz	r3, 801193e <rcl_wait_set_add_service+0x4e>
 80118fa:	b319      	cbz	r1, 8011944 <rcl_wait_set_add_service+0x54>
 80118fc:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 80118fe:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8011900:	4285      	cmp	r5, r0
 8011902:	d217      	bcs.n	8011934 <rcl_wait_set_add_service+0x44>
 8011904:	6a20      	ldr	r0, [r4, #32]
 8011906:	1c6e      	adds	r6, r5, #1
 8011908:	625e      	str	r6, [r3, #36]	@ 0x24
 801190a:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801190e:	b102      	cbz	r2, 8011912 <rcl_wait_set_add_service+0x22>
 8011910:	6015      	str	r5, [r2, #0]
 8011912:	4608      	mov	r0, r1
 8011914:	f7ff f948 	bl	8010ba8 <rcl_service_get_rmw_handle>
 8011918:	b150      	cbz	r0, 8011930 <rcl_wait_set_add_service+0x40>
 801191a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801191c:	6842      	ldr	r2, [r0, #4]
 801191e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011920:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011924:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8011926:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8011928:	3301      	adds	r3, #1
 801192a:	2000      	movs	r0, #0
 801192c:	6293      	str	r3, [r2, #40]	@ 0x28
 801192e:	bd70      	pop	{r4, r5, r6, pc}
 8011930:	2001      	movs	r0, #1
 8011932:	bd70      	pop	{r4, r5, r6, pc}
 8011934:	f240 3086 	movw	r0, #902	@ 0x386
 8011938:	bd70      	pop	{r4, r5, r6, pc}
 801193a:	200b      	movs	r0, #11
 801193c:	4770      	bx	lr
 801193e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011942:	bd70      	pop	{r4, r5, r6, pc}
 8011944:	200b      	movs	r0, #11
 8011946:	bd70      	pop	{r4, r5, r6, pc}

08011948 <rcl_wait>:
 8011948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801194c:	ed2d 8b02 	vpush	{d8}
 8011950:	b08d      	sub	sp, #52	@ 0x34
 8011952:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011956:	2800      	cmp	r0, #0
 8011958:	f000 8143 	beq.w	8011be2 <rcl_wait+0x29a>
 801195c:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 801195e:	4605      	mov	r5, r0
 8011960:	2e00      	cmp	r6, #0
 8011962:	f000 8112 	beq.w	8011b8a <rcl_wait+0x242>
 8011966:	6843      	ldr	r3, [r0, #4]
 8011968:	b983      	cbnz	r3, 801198c <rcl_wait+0x44>
 801196a:	68eb      	ldr	r3, [r5, #12]
 801196c:	b973      	cbnz	r3, 801198c <rcl_wait+0x44>
 801196e:	696b      	ldr	r3, [r5, #20]
 8011970:	b963      	cbnz	r3, 801198c <rcl_wait+0x44>
 8011972:	69eb      	ldr	r3, [r5, #28]
 8011974:	b953      	cbnz	r3, 801198c <rcl_wait+0x44>
 8011976:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8011978:	b943      	cbnz	r3, 801198c <rcl_wait+0x44>
 801197a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 801197c:	b933      	cbnz	r3, 801198c <rcl_wait+0x44>
 801197e:	f240 3085 	movw	r0, #901	@ 0x385
 8011982:	b00d      	add	sp, #52	@ 0x34
 8011984:	ecbd 8b02 	vpop	{d8}
 8011988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801198c:	9b04      	ldr	r3, [sp, #16]
 801198e:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8011990:	2b01      	cmp	r3, #1
 8011992:	9b05      	ldr	r3, [sp, #20]
 8011994:	f173 0300 	sbcs.w	r3, r3, #0
 8011998:	f2c0 80f0 	blt.w	8011b7c <rcl_wait+0x234>
 801199c:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 80119a0:	4643      	mov	r3, r8
 80119a2:	2a00      	cmp	r2, #0
 80119a4:	f000 8133 	beq.w	8011c0e <rcl_wait+0x2c6>
 80119a8:	2400      	movs	r4, #0
 80119aa:	4613      	mov	r3, r2
 80119ac:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 8011c20 <rcl_wait+0x2d8>
 80119b0:	46a2      	mov	sl, r4
 80119b2:	46a3      	mov	fp, r4
 80119b4:	f240 3921 	movw	r9, #801	@ 0x321
 80119b8:	4632      	mov	r2, r6
 80119ba:	e014      	b.n	80119e6 <rcl_wait+0x9e>
 80119bc:	2800      	cmp	r0, #0
 80119be:	d1e0      	bne.n	8011982 <rcl_wait+0x3a>
 80119c0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80119c4:	4542      	cmp	r2, r8
 80119c6:	eb73 0107 	sbcs.w	r1, r3, r7
 80119ca:	da03      	bge.n	80119d4 <rcl_wait+0x8c>
 80119cc:	4690      	mov	r8, r2
 80119ce:	461f      	mov	r7, r3
 80119d0:	f04f 0b01 	mov.w	fp, #1
 80119d4:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 80119d6:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80119d8:	3401      	adds	r4, #1
 80119da:	f14a 0a00 	adc.w	sl, sl, #0
 80119de:	429c      	cmp	r4, r3
 80119e0:	f17a 0100 	sbcs.w	r1, sl, #0
 80119e4:	d228      	bcs.n	8011a38 <rcl_wait+0xf0>
 80119e6:	6928      	ldr	r0, [r5, #16]
 80119e8:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80119ec:	a908      	add	r1, sp, #32
 80119ee:	00a6      	lsls	r6, r4, #2
 80119f0:	2800      	cmp	r0, #0
 80119f2:	d0f1      	beq.n	80119d8 <rcl_wait+0x90>
 80119f4:	68eb      	ldr	r3, [r5, #12]
 80119f6:	f8d2 c014 	ldr.w	ip, [r2, #20]
 80119fa:	4423      	add	r3, r4
 80119fc:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8011a00:	f1be 0f00 	cmp.w	lr, #0
 8011a04:	d006      	beq.n	8011a14 <rcl_wait+0xcc>
 8011a06:	6913      	ldr	r3, [r2, #16]
 8011a08:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8011a0c:	3301      	adds	r3, #1
 8011a0e:	6113      	str	r3, [r2, #16]
 8011a10:	692b      	ldr	r3, [r5, #16]
 8011a12:	5998      	ldr	r0, [r3, r6]
 8011a14:	ed8d 8b08 	vstr	d8, [sp, #32]
 8011a18:	f7ff fa96 	bl	8010f48 <rcl_timer_get_time_until_next_call>
 8011a1c:	4548      	cmp	r0, r9
 8011a1e:	d1cd      	bne.n	80119bc <rcl_wait+0x74>
 8011a20:	692b      	ldr	r3, [r5, #16]
 8011a22:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8011a24:	2100      	movs	r1, #0
 8011a26:	5199      	str	r1, [r3, r6]
 8011a28:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8011a2a:	3401      	adds	r4, #1
 8011a2c:	f14a 0a00 	adc.w	sl, sl, #0
 8011a30:	429c      	cmp	r4, r3
 8011a32:	f17a 0100 	sbcs.w	r1, sl, #0
 8011a36:	d3d6      	bcc.n	80119e6 <rcl_wait+0x9e>
 8011a38:	4616      	mov	r6, r2
 8011a3a:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8011a3e:	4313      	orrs	r3, r2
 8011a40:	46d9      	mov	r9, fp
 8011a42:	f040 80a9 	bne.w	8011b98 <rcl_wait+0x250>
 8011a46:	2300      	movs	r3, #0
 8011a48:	2200      	movs	r2, #0
 8011a4a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011a4e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8011a52:	ab08      	add	r3, sp, #32
 8011a54:	9302      	str	r3, [sp, #8]
 8011a56:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 8011a58:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 8011a5c:	e9cd 3200 	strd	r3, r2, [sp]
 8011a60:	f106 0110 	add.w	r1, r6, #16
 8011a64:	f106 031c 	add.w	r3, r6, #28
 8011a68:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 8011a6c:	1d30      	adds	r0, r6, #4
 8011a6e:	f001 fe5b 	bl	8013728 <rmw_wait>
 8011a72:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8011a74:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011a76:	4680      	mov	r8, r0
 8011a78:	b1ca      	cbz	r2, 8011aae <rcl_wait+0x166>
 8011a7a:	2400      	movs	r4, #0
 8011a7c:	4627      	mov	r7, r4
 8011a7e:	692a      	ldr	r2, [r5, #16]
 8011a80:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8011a84:	f10d 011f 	add.w	r1, sp, #31
 8011a88:	00a6      	lsls	r6, r4, #2
 8011a8a:	b160      	cbz	r0, 8011aa6 <rcl_wait+0x15e>
 8011a8c:	f88d 701f 	strb.w	r7, [sp, #31]
 8011a90:	f7ff fa20 	bl	8010ed4 <rcl_timer_is_ready>
 8011a94:	2800      	cmp	r0, #0
 8011a96:	f47f af74 	bne.w	8011982 <rcl_wait+0x3a>
 8011a9a:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8011a9e:	b90b      	cbnz	r3, 8011aa4 <rcl_wait+0x15c>
 8011aa0:	692a      	ldr	r2, [r5, #16]
 8011aa2:	5193      	str	r3, [r2, r6]
 8011aa4:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8011aa6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011aa8:	3401      	adds	r4, #1
 8011aaa:	42a2      	cmp	r2, r4
 8011aac:	d8e7      	bhi.n	8011a7e <rcl_wait+0x136>
 8011aae:	f038 0002 	bics.w	r0, r8, #2
 8011ab2:	f040 8090 	bne.w	8011bd6 <rcl_wait+0x28e>
 8011ab6:	686e      	ldr	r6, [r5, #4]
 8011ab8:	4602      	mov	r2, r0
 8011aba:	b91e      	cbnz	r6, 8011ac4 <rcl_wait+0x17c>
 8011abc:	e00d      	b.n	8011ada <rcl_wait+0x192>
 8011abe:	3201      	adds	r2, #1
 8011ac0:	42b2      	cmp	r2, r6
 8011ac2:	d00a      	beq.n	8011ada <rcl_wait+0x192>
 8011ac4:	6899      	ldr	r1, [r3, #8]
 8011ac6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8011aca:	2900      	cmp	r1, #0
 8011acc:	d1f7      	bne.n	8011abe <rcl_wait+0x176>
 8011ace:	682c      	ldr	r4, [r5, #0]
 8011ad0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8011ad4:	3201      	adds	r2, #1
 8011ad6:	42b2      	cmp	r2, r6
 8011ad8:	d1f4      	bne.n	8011ac4 <rcl_wait+0x17c>
 8011ada:	68ee      	ldr	r6, [r5, #12]
 8011adc:	2200      	movs	r2, #0
 8011ade:	b91e      	cbnz	r6, 8011ae8 <rcl_wait+0x1a0>
 8011ae0:	e00d      	b.n	8011afe <rcl_wait+0x1b6>
 8011ae2:	3201      	adds	r2, #1
 8011ae4:	42b2      	cmp	r2, r6
 8011ae6:	d00a      	beq.n	8011afe <rcl_wait+0x1b6>
 8011ae8:	6959      	ldr	r1, [r3, #20]
 8011aea:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8011aee:	2900      	cmp	r1, #0
 8011af0:	d1f7      	bne.n	8011ae2 <rcl_wait+0x19a>
 8011af2:	68ac      	ldr	r4, [r5, #8]
 8011af4:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8011af8:	3201      	adds	r2, #1
 8011afa:	42b2      	cmp	r2, r6
 8011afc:	d1f4      	bne.n	8011ae8 <rcl_wait+0x1a0>
 8011afe:	69ee      	ldr	r6, [r5, #28]
 8011b00:	2200      	movs	r2, #0
 8011b02:	b91e      	cbnz	r6, 8011b0c <rcl_wait+0x1c4>
 8011b04:	e00d      	b.n	8011b22 <rcl_wait+0x1da>
 8011b06:	3201      	adds	r2, #1
 8011b08:	42b2      	cmp	r2, r6
 8011b0a:	d00a      	beq.n	8011b22 <rcl_wait+0x1da>
 8011b0c:	6a19      	ldr	r1, [r3, #32]
 8011b0e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8011b12:	2900      	cmp	r1, #0
 8011b14:	d1f7      	bne.n	8011b06 <rcl_wait+0x1be>
 8011b16:	69ac      	ldr	r4, [r5, #24]
 8011b18:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8011b1c:	3201      	adds	r2, #1
 8011b1e:	42b2      	cmp	r2, r6
 8011b20:	d1f4      	bne.n	8011b0c <rcl_wait+0x1c4>
 8011b22:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 8011b24:	2200      	movs	r2, #0
 8011b26:	b91e      	cbnz	r6, 8011b30 <rcl_wait+0x1e8>
 8011b28:	e00d      	b.n	8011b46 <rcl_wait+0x1fe>
 8011b2a:	3201      	adds	r2, #1
 8011b2c:	4296      	cmp	r6, r2
 8011b2e:	d00a      	beq.n	8011b46 <rcl_wait+0x1fe>
 8011b30:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8011b32:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8011b36:	2900      	cmp	r1, #0
 8011b38:	d1f7      	bne.n	8011b2a <rcl_wait+0x1e2>
 8011b3a:	6a2c      	ldr	r4, [r5, #32]
 8011b3c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8011b40:	3201      	adds	r2, #1
 8011b42:	4296      	cmp	r6, r2
 8011b44:	d1f4      	bne.n	8011b30 <rcl_wait+0x1e8>
 8011b46:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 8011b48:	2200      	movs	r2, #0
 8011b4a:	b91e      	cbnz	r6, 8011b54 <rcl_wait+0x20c>
 8011b4c:	e00d      	b.n	8011b6a <rcl_wait+0x222>
 8011b4e:	3201      	adds	r2, #1
 8011b50:	42b2      	cmp	r2, r6
 8011b52:	d00a      	beq.n	8011b6a <rcl_wait+0x222>
 8011b54:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8011b56:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8011b5a:	2900      	cmp	r1, #0
 8011b5c:	d1f7      	bne.n	8011b4e <rcl_wait+0x206>
 8011b5e:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 8011b60:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8011b64:	3201      	adds	r2, #1
 8011b66:	42b2      	cmp	r2, r6
 8011b68:	d1f4      	bne.n	8011b54 <rcl_wait+0x20c>
 8011b6a:	f1b8 0f02 	cmp.w	r8, #2
 8011b6e:	f47f af08 	bne.w	8011982 <rcl_wait+0x3a>
 8011b72:	464b      	mov	r3, r9
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	bf08      	it	eq
 8011b78:	2002      	moveq	r0, #2
 8011b7a:	e702      	b.n	8011982 <rcl_wait+0x3a>
 8011b7c:	2a00      	cmp	r2, #0
 8011b7e:	d03a      	beq.n	8011bf6 <rcl_wait+0x2ae>
 8011b80:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8011b84:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8011b88:	e70e      	b.n	80119a8 <rcl_wait+0x60>
 8011b8a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011b8e:	b00d      	add	sp, #52	@ 0x34
 8011b90:	ecbd 8b02 	vpop	{d8}
 8011b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b98:	9b04      	ldr	r3, [sp, #16]
 8011b9a:	2b01      	cmp	r3, #1
 8011b9c:	9b05      	ldr	r3, [sp, #20]
 8011b9e:	f173 0300 	sbcs.w	r3, r3, #0
 8011ba2:	db24      	blt.n	8011bee <rcl_wait+0x2a6>
 8011ba4:	2f00      	cmp	r7, #0
 8011ba6:	bfbc      	itt	lt
 8011ba8:	f04f 0800 	movlt.w	r8, #0
 8011bac:	4647      	movlt	r7, r8
 8011bae:	a31e      	add	r3, pc, #120	@ (adr r3, 8011c28 <rcl_wait+0x2e0>)
 8011bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bb4:	4640      	mov	r0, r8
 8011bb6:	4639      	mov	r1, r7
 8011bb8:	f7ef f826 	bl	8000c08 <__aeabi_ldivmod>
 8011bbc:	a31a      	add	r3, pc, #104	@ (adr r3, 8011c28 <rcl_wait+0x2e0>)
 8011bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bc2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011bc6:	4640      	mov	r0, r8
 8011bc8:	4639      	mov	r1, r7
 8011bca:	f7ef f81d 	bl	8000c08 <__aeabi_ldivmod>
 8011bce:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8011bd2:	ab08      	add	r3, sp, #32
 8011bd4:	e73e      	b.n	8011a54 <rcl_wait+0x10c>
 8011bd6:	2001      	movs	r0, #1
 8011bd8:	b00d      	add	sp, #52	@ 0x34
 8011bda:	ecbd 8b02 	vpop	{d8}
 8011bde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011be2:	200b      	movs	r0, #11
 8011be4:	b00d      	add	sp, #52	@ 0x34
 8011be6:	ecbd 8b02 	vpop	{d8}
 8011bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bee:	465b      	mov	r3, fp
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d1d7      	bne.n	8011ba4 <rcl_wait+0x25c>
 8011bf4:	e72e      	b.n	8011a54 <rcl_wait+0x10c>
 8011bf6:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8011bfa:	430b      	orrs	r3, r1
 8011bfc:	bf08      	it	eq
 8011bfe:	4691      	moveq	r9, r2
 8011c00:	f43f af21 	beq.w	8011a46 <rcl_wait+0xfe>
 8011c04:	9b04      	ldr	r3, [sp, #16]
 8011c06:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8011c0a:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8011c0e:	2b01      	cmp	r3, #1
 8011c10:	9b05      	ldr	r3, [sp, #20]
 8011c12:	f173 0300 	sbcs.w	r3, r3, #0
 8011c16:	f04f 0300 	mov.w	r3, #0
 8011c1a:	4699      	mov	r9, r3
 8011c1c:	dac2      	bge.n	8011ba4 <rcl_wait+0x25c>
 8011c1e:	e719      	b.n	8011a54 <rcl_wait+0x10c>
 8011c20:	ffffffff 	.word	0xffffffff
 8011c24:	7fffffff 	.word	0x7fffffff
 8011c28:	3b9aca00 	.word	0x3b9aca00
 8011c2c:	00000000 	.word	0x00000000

08011c30 <rcl_action_take_goal_response>:
 8011c30:	2800      	cmp	r0, #0
 8011c32:	d039      	beq.n	8011ca8 <rcl_action_take_goal_response+0x78>
 8011c34:	b570      	push	{r4, r5, r6, lr}
 8011c36:	4604      	mov	r4, r0
 8011c38:	6800      	ldr	r0, [r0, #0]
 8011c3a:	b380      	cbz	r0, 8011c9e <rcl_action_take_goal_response+0x6e>
 8011c3c:	460d      	mov	r5, r1
 8011c3e:	4616      	mov	r6, r2
 8011c40:	f7fe faaa 	bl	8010198 <rcl_client_is_valid>
 8011c44:	b330      	cbz	r0, 8011c94 <rcl_action_take_goal_response+0x64>
 8011c46:	6820      	ldr	r0, [r4, #0]
 8011c48:	3004      	adds	r0, #4
 8011c4a:	f7fe faa5 	bl	8010198 <rcl_client_is_valid>
 8011c4e:	b308      	cbz	r0, 8011c94 <rcl_action_take_goal_response+0x64>
 8011c50:	6820      	ldr	r0, [r4, #0]
 8011c52:	3008      	adds	r0, #8
 8011c54:	f7fe faa0 	bl	8010198 <rcl_client_is_valid>
 8011c58:	b1e0      	cbz	r0, 8011c94 <rcl_action_take_goal_response+0x64>
 8011c5a:	6820      	ldr	r0, [r4, #0]
 8011c5c:	300c      	adds	r0, #12
 8011c5e:	f7f8 fe3b 	bl	800a8d8 <rcl_subscription_is_valid>
 8011c62:	b1b8      	cbz	r0, 8011c94 <rcl_action_take_goal_response+0x64>
 8011c64:	6820      	ldr	r0, [r4, #0]
 8011c66:	3010      	adds	r0, #16
 8011c68:	f7f8 fe36 	bl	800a8d8 <rcl_subscription_is_valid>
 8011c6c:	b190      	cbz	r0, 8011c94 <rcl_action_take_goal_response+0x64>
 8011c6e:	b1cd      	cbz	r5, 8011ca4 <rcl_action_take_goal_response+0x74>
 8011c70:	b1c6      	cbz	r6, 8011ca4 <rcl_action_take_goal_response+0x74>
 8011c72:	6820      	ldr	r0, [r4, #0]
 8011c74:	4632      	mov	r2, r6
 8011c76:	4629      	mov	r1, r5
 8011c78:	f7fe fa46 	bl	8010108 <rcl_take_response>
 8011c7c:	b148      	cbz	r0, 8011c92 <rcl_action_take_goal_response+0x62>
 8011c7e:	280a      	cmp	r0, #10
 8011c80:	d007      	beq.n	8011c92 <rcl_action_take_goal_response+0x62>
 8011c82:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8011c86:	f640 0337 	movw	r3, #2103	@ 0x837
 8011c8a:	4290      	cmp	r0, r2
 8011c8c:	bf0c      	ite	eq
 8011c8e:	4618      	moveq	r0, r3
 8011c90:	2001      	movne	r0, #1
 8011c92:	bd70      	pop	{r4, r5, r6, pc}
 8011c94:	f7f9 fdb8 	bl	800b808 <rcutils_reset_error>
 8011c98:	f640 0036 	movw	r0, #2102	@ 0x836
 8011c9c:	bd70      	pop	{r4, r5, r6, pc}
 8011c9e:	f640 0036 	movw	r0, #2102	@ 0x836
 8011ca2:	bd70      	pop	{r4, r5, r6, pc}
 8011ca4:	200b      	movs	r0, #11
 8011ca6:	bd70      	pop	{r4, r5, r6, pc}
 8011ca8:	f640 0036 	movw	r0, #2102	@ 0x836
 8011cac:	4770      	bx	lr
 8011cae:	bf00      	nop

08011cb0 <rcl_action_send_result_request>:
 8011cb0:	b390      	cbz	r0, 8011d18 <rcl_action_send_result_request+0x68>
 8011cb2:	b570      	push	{r4, r5, r6, lr}
 8011cb4:	4604      	mov	r4, r0
 8011cb6:	6800      	ldr	r0, [r0, #0]
 8011cb8:	b348      	cbz	r0, 8011d0e <rcl_action_send_result_request+0x5e>
 8011cba:	460d      	mov	r5, r1
 8011cbc:	4616      	mov	r6, r2
 8011cbe:	f7fe fa6b 	bl	8010198 <rcl_client_is_valid>
 8011cc2:	b1f8      	cbz	r0, 8011d04 <rcl_action_send_result_request+0x54>
 8011cc4:	6820      	ldr	r0, [r4, #0]
 8011cc6:	3004      	adds	r0, #4
 8011cc8:	f7fe fa66 	bl	8010198 <rcl_client_is_valid>
 8011ccc:	b1d0      	cbz	r0, 8011d04 <rcl_action_send_result_request+0x54>
 8011cce:	6820      	ldr	r0, [r4, #0]
 8011cd0:	3008      	adds	r0, #8
 8011cd2:	f7fe fa61 	bl	8010198 <rcl_client_is_valid>
 8011cd6:	b1a8      	cbz	r0, 8011d04 <rcl_action_send_result_request+0x54>
 8011cd8:	6820      	ldr	r0, [r4, #0]
 8011cda:	300c      	adds	r0, #12
 8011cdc:	f7f8 fdfc 	bl	800a8d8 <rcl_subscription_is_valid>
 8011ce0:	b180      	cbz	r0, 8011d04 <rcl_action_send_result_request+0x54>
 8011ce2:	6820      	ldr	r0, [r4, #0]
 8011ce4:	3010      	adds	r0, #16
 8011ce6:	f7f8 fdf7 	bl	800a8d8 <rcl_subscription_is_valid>
 8011cea:	b158      	cbz	r0, 8011d04 <rcl_action_send_result_request+0x54>
 8011cec:	b195      	cbz	r5, 8011d14 <rcl_action_send_result_request+0x64>
 8011cee:	b18e      	cbz	r6, 8011d14 <rcl_action_send_result_request+0x64>
 8011cf0:	6820      	ldr	r0, [r4, #0]
 8011cf2:	4632      	mov	r2, r6
 8011cf4:	4629      	mov	r1, r5
 8011cf6:	3008      	adds	r0, #8
 8011cf8:	f7fe f9d0 	bl	801009c <rcl_send_request>
 8011cfc:	3800      	subs	r0, #0
 8011cfe:	bf18      	it	ne
 8011d00:	2001      	movne	r0, #1
 8011d02:	bd70      	pop	{r4, r5, r6, pc}
 8011d04:	f7f9 fd80 	bl	800b808 <rcutils_reset_error>
 8011d08:	f640 0036 	movw	r0, #2102	@ 0x836
 8011d0c:	bd70      	pop	{r4, r5, r6, pc}
 8011d0e:	f640 0036 	movw	r0, #2102	@ 0x836
 8011d12:	bd70      	pop	{r4, r5, r6, pc}
 8011d14:	200b      	movs	r0, #11
 8011d16:	bd70      	pop	{r4, r5, r6, pc}
 8011d18:	f640 0036 	movw	r0, #2102	@ 0x836
 8011d1c:	4770      	bx	lr
 8011d1e:	bf00      	nop

08011d20 <rcl_action_take_result_response>:
 8011d20:	2800      	cmp	r0, #0
 8011d22:	d03a      	beq.n	8011d9a <rcl_action_take_result_response+0x7a>
 8011d24:	b570      	push	{r4, r5, r6, lr}
 8011d26:	4604      	mov	r4, r0
 8011d28:	6800      	ldr	r0, [r0, #0]
 8011d2a:	b388      	cbz	r0, 8011d90 <rcl_action_take_result_response+0x70>
 8011d2c:	460d      	mov	r5, r1
 8011d2e:	4616      	mov	r6, r2
 8011d30:	f7fe fa32 	bl	8010198 <rcl_client_is_valid>
 8011d34:	b338      	cbz	r0, 8011d86 <rcl_action_take_result_response+0x66>
 8011d36:	6820      	ldr	r0, [r4, #0]
 8011d38:	3004      	adds	r0, #4
 8011d3a:	f7fe fa2d 	bl	8010198 <rcl_client_is_valid>
 8011d3e:	b310      	cbz	r0, 8011d86 <rcl_action_take_result_response+0x66>
 8011d40:	6820      	ldr	r0, [r4, #0]
 8011d42:	3008      	adds	r0, #8
 8011d44:	f7fe fa28 	bl	8010198 <rcl_client_is_valid>
 8011d48:	b1e8      	cbz	r0, 8011d86 <rcl_action_take_result_response+0x66>
 8011d4a:	6820      	ldr	r0, [r4, #0]
 8011d4c:	300c      	adds	r0, #12
 8011d4e:	f7f8 fdc3 	bl	800a8d8 <rcl_subscription_is_valid>
 8011d52:	b1c0      	cbz	r0, 8011d86 <rcl_action_take_result_response+0x66>
 8011d54:	6820      	ldr	r0, [r4, #0]
 8011d56:	3010      	adds	r0, #16
 8011d58:	f7f8 fdbe 	bl	800a8d8 <rcl_subscription_is_valid>
 8011d5c:	b198      	cbz	r0, 8011d86 <rcl_action_take_result_response+0x66>
 8011d5e:	b1d5      	cbz	r5, 8011d96 <rcl_action_take_result_response+0x76>
 8011d60:	b1ce      	cbz	r6, 8011d96 <rcl_action_take_result_response+0x76>
 8011d62:	6820      	ldr	r0, [r4, #0]
 8011d64:	4632      	mov	r2, r6
 8011d66:	4629      	mov	r1, r5
 8011d68:	3008      	adds	r0, #8
 8011d6a:	f7fe f9cd 	bl	8010108 <rcl_take_response>
 8011d6e:	b148      	cbz	r0, 8011d84 <rcl_action_take_result_response+0x64>
 8011d70:	280a      	cmp	r0, #10
 8011d72:	d007      	beq.n	8011d84 <rcl_action_take_result_response+0x64>
 8011d74:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8011d78:	f640 0337 	movw	r3, #2103	@ 0x837
 8011d7c:	4290      	cmp	r0, r2
 8011d7e:	bf0c      	ite	eq
 8011d80:	4618      	moveq	r0, r3
 8011d82:	2001      	movne	r0, #1
 8011d84:	bd70      	pop	{r4, r5, r6, pc}
 8011d86:	f7f9 fd3f 	bl	800b808 <rcutils_reset_error>
 8011d8a:	f640 0036 	movw	r0, #2102	@ 0x836
 8011d8e:	bd70      	pop	{r4, r5, r6, pc}
 8011d90:	f640 0036 	movw	r0, #2102	@ 0x836
 8011d94:	bd70      	pop	{r4, r5, r6, pc}
 8011d96:	200b      	movs	r0, #11
 8011d98:	bd70      	pop	{r4, r5, r6, pc}
 8011d9a:	f640 0036 	movw	r0, #2102	@ 0x836
 8011d9e:	4770      	bx	lr

08011da0 <rcl_action_take_cancel_response>:
 8011da0:	2800      	cmp	r0, #0
 8011da2:	d03a      	beq.n	8011e1a <rcl_action_take_cancel_response+0x7a>
 8011da4:	b570      	push	{r4, r5, r6, lr}
 8011da6:	4604      	mov	r4, r0
 8011da8:	6800      	ldr	r0, [r0, #0]
 8011daa:	b388      	cbz	r0, 8011e10 <rcl_action_take_cancel_response+0x70>
 8011dac:	460d      	mov	r5, r1
 8011dae:	4616      	mov	r6, r2
 8011db0:	f7fe f9f2 	bl	8010198 <rcl_client_is_valid>
 8011db4:	b338      	cbz	r0, 8011e06 <rcl_action_take_cancel_response+0x66>
 8011db6:	6820      	ldr	r0, [r4, #0]
 8011db8:	3004      	adds	r0, #4
 8011dba:	f7fe f9ed 	bl	8010198 <rcl_client_is_valid>
 8011dbe:	b310      	cbz	r0, 8011e06 <rcl_action_take_cancel_response+0x66>
 8011dc0:	6820      	ldr	r0, [r4, #0]
 8011dc2:	3008      	adds	r0, #8
 8011dc4:	f7fe f9e8 	bl	8010198 <rcl_client_is_valid>
 8011dc8:	b1e8      	cbz	r0, 8011e06 <rcl_action_take_cancel_response+0x66>
 8011dca:	6820      	ldr	r0, [r4, #0]
 8011dcc:	300c      	adds	r0, #12
 8011dce:	f7f8 fd83 	bl	800a8d8 <rcl_subscription_is_valid>
 8011dd2:	b1c0      	cbz	r0, 8011e06 <rcl_action_take_cancel_response+0x66>
 8011dd4:	6820      	ldr	r0, [r4, #0]
 8011dd6:	3010      	adds	r0, #16
 8011dd8:	f7f8 fd7e 	bl	800a8d8 <rcl_subscription_is_valid>
 8011ddc:	b198      	cbz	r0, 8011e06 <rcl_action_take_cancel_response+0x66>
 8011dde:	b1d5      	cbz	r5, 8011e16 <rcl_action_take_cancel_response+0x76>
 8011de0:	b1ce      	cbz	r6, 8011e16 <rcl_action_take_cancel_response+0x76>
 8011de2:	6820      	ldr	r0, [r4, #0]
 8011de4:	4632      	mov	r2, r6
 8011de6:	4629      	mov	r1, r5
 8011de8:	3004      	adds	r0, #4
 8011dea:	f7fe f98d 	bl	8010108 <rcl_take_response>
 8011dee:	b148      	cbz	r0, 8011e04 <rcl_action_take_cancel_response+0x64>
 8011df0:	280a      	cmp	r0, #10
 8011df2:	d007      	beq.n	8011e04 <rcl_action_take_cancel_response+0x64>
 8011df4:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8011df8:	f640 0337 	movw	r3, #2103	@ 0x837
 8011dfc:	4290      	cmp	r0, r2
 8011dfe:	bf0c      	ite	eq
 8011e00:	4618      	moveq	r0, r3
 8011e02:	2001      	movne	r0, #1
 8011e04:	bd70      	pop	{r4, r5, r6, pc}
 8011e06:	f7f9 fcff 	bl	800b808 <rcutils_reset_error>
 8011e0a:	f640 0036 	movw	r0, #2102	@ 0x836
 8011e0e:	bd70      	pop	{r4, r5, r6, pc}
 8011e10:	f640 0036 	movw	r0, #2102	@ 0x836
 8011e14:	bd70      	pop	{r4, r5, r6, pc}
 8011e16:	200b      	movs	r0, #11
 8011e18:	bd70      	pop	{r4, r5, r6, pc}
 8011e1a:	f640 0036 	movw	r0, #2102	@ 0x836
 8011e1e:	4770      	bx	lr

08011e20 <rcl_action_take_feedback>:
 8011e20:	2800      	cmp	r0, #0
 8011e22:	d038      	beq.n	8011e96 <rcl_action_take_feedback+0x76>
 8011e24:	b530      	push	{r4, r5, lr}
 8011e26:	4604      	mov	r4, r0
 8011e28:	6800      	ldr	r0, [r0, #0]
 8011e2a:	b091      	sub	sp, #68	@ 0x44
 8011e2c:	b378      	cbz	r0, 8011e8e <rcl_action_take_feedback+0x6e>
 8011e2e:	460d      	mov	r5, r1
 8011e30:	f7fe f9b2 	bl	8010198 <rcl_client_is_valid>
 8011e34:	b328      	cbz	r0, 8011e82 <rcl_action_take_feedback+0x62>
 8011e36:	6820      	ldr	r0, [r4, #0]
 8011e38:	3004      	adds	r0, #4
 8011e3a:	f7fe f9ad 	bl	8010198 <rcl_client_is_valid>
 8011e3e:	b300      	cbz	r0, 8011e82 <rcl_action_take_feedback+0x62>
 8011e40:	6820      	ldr	r0, [r4, #0]
 8011e42:	3008      	adds	r0, #8
 8011e44:	f7fe f9a8 	bl	8010198 <rcl_client_is_valid>
 8011e48:	b1d8      	cbz	r0, 8011e82 <rcl_action_take_feedback+0x62>
 8011e4a:	6820      	ldr	r0, [r4, #0]
 8011e4c:	300c      	adds	r0, #12
 8011e4e:	f7f8 fd43 	bl	800a8d8 <rcl_subscription_is_valid>
 8011e52:	b1b0      	cbz	r0, 8011e82 <rcl_action_take_feedback+0x62>
 8011e54:	6820      	ldr	r0, [r4, #0]
 8011e56:	3010      	adds	r0, #16
 8011e58:	f7f8 fd3e 	bl	800a8d8 <rcl_subscription_is_valid>
 8011e5c:	b188      	cbz	r0, 8011e82 <rcl_action_take_feedback+0x62>
 8011e5e:	b1ed      	cbz	r5, 8011e9c <rcl_action_take_feedback+0x7c>
 8011e60:	6820      	ldr	r0, [r4, #0]
 8011e62:	2300      	movs	r3, #0
 8011e64:	466a      	mov	r2, sp
 8011e66:	4629      	mov	r1, r5
 8011e68:	300c      	adds	r0, #12
 8011e6a:	f7f8 fcd7 	bl	800a81c <rcl_take>
 8011e6e:	b160      	cbz	r0, 8011e8a <rcl_action_take_feedback+0x6a>
 8011e70:	f240 1391 	movw	r3, #401	@ 0x191
 8011e74:	4298      	cmp	r0, r3
 8011e76:	d014      	beq.n	8011ea2 <rcl_action_take_feedback+0x82>
 8011e78:	280a      	cmp	r0, #10
 8011e7a:	bf18      	it	ne
 8011e7c:	2001      	movne	r0, #1
 8011e7e:	b011      	add	sp, #68	@ 0x44
 8011e80:	bd30      	pop	{r4, r5, pc}
 8011e82:	f7f9 fcc1 	bl	800b808 <rcutils_reset_error>
 8011e86:	f640 0036 	movw	r0, #2102	@ 0x836
 8011e8a:	b011      	add	sp, #68	@ 0x44
 8011e8c:	bd30      	pop	{r4, r5, pc}
 8011e8e:	f640 0036 	movw	r0, #2102	@ 0x836
 8011e92:	b011      	add	sp, #68	@ 0x44
 8011e94:	bd30      	pop	{r4, r5, pc}
 8011e96:	f640 0036 	movw	r0, #2102	@ 0x836
 8011e9a:	4770      	bx	lr
 8011e9c:	200b      	movs	r0, #11
 8011e9e:	b011      	add	sp, #68	@ 0x44
 8011ea0:	bd30      	pop	{r4, r5, pc}
 8011ea2:	f640 0037 	movw	r0, #2103	@ 0x837
 8011ea6:	e7f0      	b.n	8011e8a <rcl_action_take_feedback+0x6a>

08011ea8 <rcl_action_wait_set_add_action_client>:
 8011ea8:	2800      	cmp	r0, #0
 8011eaa:	d048      	beq.n	8011f3e <rcl_action_wait_set_add_action_client+0x96>
 8011eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011eae:	460c      	mov	r4, r1
 8011eb0:	2900      	cmp	r1, #0
 8011eb2:	d03c      	beq.n	8011f2e <rcl_action_wait_set_add_action_client+0x86>
 8011eb4:	4605      	mov	r5, r0
 8011eb6:	6808      	ldr	r0, [r1, #0]
 8011eb8:	2800      	cmp	r0, #0
 8011eba:	d038      	beq.n	8011f2e <rcl_action_wait_set_add_action_client+0x86>
 8011ebc:	4617      	mov	r7, r2
 8011ebe:	461e      	mov	r6, r3
 8011ec0:	f7fe f96a 	bl	8010198 <rcl_client_is_valid>
 8011ec4:	b3b0      	cbz	r0, 8011f34 <rcl_action_wait_set_add_action_client+0x8c>
 8011ec6:	6820      	ldr	r0, [r4, #0]
 8011ec8:	3004      	adds	r0, #4
 8011eca:	f7fe f965 	bl	8010198 <rcl_client_is_valid>
 8011ece:	b388      	cbz	r0, 8011f34 <rcl_action_wait_set_add_action_client+0x8c>
 8011ed0:	6820      	ldr	r0, [r4, #0]
 8011ed2:	3008      	adds	r0, #8
 8011ed4:	f7fe f960 	bl	8010198 <rcl_client_is_valid>
 8011ed8:	b360      	cbz	r0, 8011f34 <rcl_action_wait_set_add_action_client+0x8c>
 8011eda:	6820      	ldr	r0, [r4, #0]
 8011edc:	300c      	adds	r0, #12
 8011ede:	f7f8 fcfb 	bl	800a8d8 <rcl_subscription_is_valid>
 8011ee2:	b338      	cbz	r0, 8011f34 <rcl_action_wait_set_add_action_client+0x8c>
 8011ee4:	6820      	ldr	r0, [r4, #0]
 8011ee6:	3010      	adds	r0, #16
 8011ee8:	f7f8 fcf6 	bl	800a8d8 <rcl_subscription_is_valid>
 8011eec:	b310      	cbz	r0, 8011f34 <rcl_action_wait_set_add_action_client+0x8c>
 8011eee:	6821      	ldr	r1, [r4, #0]
 8011ef0:	4628      	mov	r0, r5
 8011ef2:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 8011ef6:	f7ff fccf 	bl	8011898 <rcl_wait_set_add_client>
 8011efa:	b9b8      	cbnz	r0, 8011f2c <rcl_action_wait_set_add_action_client+0x84>
 8011efc:	6821      	ldr	r1, [r4, #0]
 8011efe:	4628      	mov	r0, r5
 8011f00:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 8011f04:	3104      	adds	r1, #4
 8011f06:	f7ff fcc7 	bl	8011898 <rcl_wait_set_add_client>
 8011f0a:	b978      	cbnz	r0, 8011f2c <rcl_action_wait_set_add_action_client+0x84>
 8011f0c:	6821      	ldr	r1, [r4, #0]
 8011f0e:	4628      	mov	r0, r5
 8011f10:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 8011f14:	3108      	adds	r1, #8
 8011f16:	f7ff fcbf 	bl	8011898 <rcl_wait_set_add_client>
 8011f1a:	b938      	cbnz	r0, 8011f2c <rcl_action_wait_set_add_action_client+0x84>
 8011f1c:	6821      	ldr	r1, [r4, #0]
 8011f1e:	4628      	mov	r0, r5
 8011f20:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 8011f24:	310c      	adds	r1, #12
 8011f26:	f7ff f96f 	bl	8011208 <rcl_wait_set_add_subscription>
 8011f2a:	b158      	cbz	r0, 8011f44 <rcl_action_wait_set_add_action_client+0x9c>
 8011f2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011f2e:	f640 0036 	movw	r0, #2102	@ 0x836
 8011f32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011f34:	f7f9 fc68 	bl	800b808 <rcutils_reset_error>
 8011f38:	f640 0036 	movw	r0, #2102	@ 0x836
 8011f3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011f3e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011f42:	4770      	bx	lr
 8011f44:	6821      	ldr	r1, [r4, #0]
 8011f46:	4628      	mov	r0, r5
 8011f48:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 8011f4c:	3110      	adds	r1, #16
 8011f4e:	f7ff f95b 	bl	8011208 <rcl_wait_set_add_subscription>
 8011f52:	2800      	cmp	r0, #0
 8011f54:	d1ea      	bne.n	8011f2c <rcl_action_wait_set_add_action_client+0x84>
 8011f56:	b11f      	cbz	r7, 8011f60 <rcl_action_wait_set_add_action_client+0xb8>
 8011f58:	6823      	ldr	r3, [r4, #0]
 8011f5a:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8011f5e:	603b      	str	r3, [r7, #0]
 8011f60:	2e00      	cmp	r6, #0
 8011f62:	d0e3      	beq.n	8011f2c <rcl_action_wait_set_add_action_client+0x84>
 8011f64:	6823      	ldr	r3, [r4, #0]
 8011f66:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 8011f6a:	6033      	str	r3, [r6, #0]
 8011f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011f6e:	bf00      	nop

08011f70 <rcl_action_client_wait_set_get_entities_ready>:
 8011f70:	2800      	cmp	r0, #0
 8011f72:	f000 808d 	beq.w	8012090 <rcl_action_client_wait_set_get_entities_ready+0x120>
 8011f76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f7a:	460c      	mov	r4, r1
 8011f7c:	2900      	cmp	r1, #0
 8011f7e:	d077      	beq.n	8012070 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8011f80:	4605      	mov	r5, r0
 8011f82:	6808      	ldr	r0, [r1, #0]
 8011f84:	2800      	cmp	r0, #0
 8011f86:	d073      	beq.n	8012070 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8011f88:	4616      	mov	r6, r2
 8011f8a:	461f      	mov	r7, r3
 8011f8c:	f7fe f904 	bl	8010198 <rcl_client_is_valid>
 8011f90:	2800      	cmp	r0, #0
 8011f92:	d071      	beq.n	8012078 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8011f94:	6820      	ldr	r0, [r4, #0]
 8011f96:	3004      	adds	r0, #4
 8011f98:	f7fe f8fe 	bl	8010198 <rcl_client_is_valid>
 8011f9c:	2800      	cmp	r0, #0
 8011f9e:	d06b      	beq.n	8012078 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8011fa0:	6820      	ldr	r0, [r4, #0]
 8011fa2:	3008      	adds	r0, #8
 8011fa4:	f7fe f8f8 	bl	8010198 <rcl_client_is_valid>
 8011fa8:	2800      	cmp	r0, #0
 8011faa:	d065      	beq.n	8012078 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8011fac:	6820      	ldr	r0, [r4, #0]
 8011fae:	300c      	adds	r0, #12
 8011fb0:	f7f8 fc92 	bl	800a8d8 <rcl_subscription_is_valid>
 8011fb4:	2800      	cmp	r0, #0
 8011fb6:	d05f      	beq.n	8012078 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8011fb8:	6820      	ldr	r0, [r4, #0]
 8011fba:	3010      	adds	r0, #16
 8011fbc:	f7f8 fc8c 	bl	800a8d8 <rcl_subscription_is_valid>
 8011fc0:	2800      	cmp	r0, #0
 8011fc2:	d059      	beq.n	8012078 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8011fc4:	2e00      	cmp	r6, #0
 8011fc6:	d060      	beq.n	801208a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8011fc8:	2f00      	cmp	r7, #0
 8011fca:	d05e      	beq.n	801208a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8011fcc:	9b06      	ldr	r3, [sp, #24]
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	d05b      	beq.n	801208a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8011fd2:	9b07      	ldr	r3, [sp, #28]
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d058      	beq.n	801208a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8011fd8:	9b08      	ldr	r3, [sp, #32]
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d055      	beq.n	801208a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8011fde:	6823      	ldr	r3, [r4, #0]
 8011fe0:	686a      	ldr	r2, [r5, #4]
 8011fe2:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 8011fe6:	428a      	cmp	r2, r1
 8011fe8:	d94c      	bls.n	8012084 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8011fea:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 8011fee:	4282      	cmp	r2, r0
 8011ff0:	d948      	bls.n	8012084 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8011ff2:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 8011ff6:	69ea      	ldr	r2, [r5, #28]
 8011ff8:	42a2      	cmp	r2, r4
 8011ffa:	d943      	bls.n	8012084 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8011ffc:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 8012000:	4562      	cmp	r2, ip
 8012002:	d93f      	bls.n	8012084 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8012004:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 8012008:	4572      	cmp	r2, lr
 801200a:	d93b      	bls.n	8012084 <rcl_action_client_wait_set_get_entities_ready+0x114>
 801200c:	69aa      	ldr	r2, [r5, #24]
 801200e:	682d      	ldr	r5, [r5, #0]
 8012010:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 8012014:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8012018:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 801201c:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 8012020:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 8012024:	f103 0c0c 	add.w	ip, r3, #12
 8012028:	eba5 050c 	sub.w	r5, r5, ip
 801202c:	fab5 f585 	clz	r5, r5
 8012030:	096d      	lsrs	r5, r5, #5
 8012032:	7035      	strb	r5, [r6, #0]
 8012034:	f103 0510 	add.w	r5, r3, #16
 8012038:	1b64      	subs	r4, r4, r5
 801203a:	fab4 f484 	clz	r4, r4
 801203e:	0964      	lsrs	r4, r4, #5
 8012040:	703c      	strb	r4, [r7, #0]
 8012042:	eba3 0008 	sub.w	r0, r3, r8
 8012046:	1d1c      	adds	r4, r3, #4
 8012048:	3308      	adds	r3, #8
 801204a:	1ad3      	subs	r3, r2, r3
 801204c:	fab0 f080 	clz	r0, r0
 8012050:	9a06      	ldr	r2, [sp, #24]
 8012052:	0940      	lsrs	r0, r0, #5
 8012054:	1b09      	subs	r1, r1, r4
 8012056:	7010      	strb	r0, [r2, #0]
 8012058:	fab1 f181 	clz	r1, r1
 801205c:	9a07      	ldr	r2, [sp, #28]
 801205e:	0949      	lsrs	r1, r1, #5
 8012060:	7011      	strb	r1, [r2, #0]
 8012062:	fab3 f383 	clz	r3, r3
 8012066:	9a08      	ldr	r2, [sp, #32]
 8012068:	095b      	lsrs	r3, r3, #5
 801206a:	2000      	movs	r0, #0
 801206c:	7013      	strb	r3, [r2, #0]
 801206e:	e001      	b.n	8012074 <rcl_action_client_wait_set_get_entities_ready+0x104>
 8012070:	f640 0036 	movw	r0, #2102	@ 0x836
 8012074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012078:	f7f9 fbc6 	bl	800b808 <rcutils_reset_error>
 801207c:	f640 0036 	movw	r0, #2102	@ 0x836
 8012080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012084:	2001      	movs	r0, #1
 8012086:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801208a:	200b      	movs	r0, #11
 801208c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012090:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012094:	4770      	bx	lr
 8012096:	bf00      	nop

08012098 <rcl_action_take_goal_request>:
 8012098:	2800      	cmp	r0, #0
 801209a:	d039      	beq.n	8012110 <rcl_action_take_goal_request+0x78>
 801209c:	b570      	push	{r4, r5, r6, lr}
 801209e:	4604      	mov	r4, r0
 80120a0:	6800      	ldr	r0, [r0, #0]
 80120a2:	b380      	cbz	r0, 8012106 <rcl_action_take_goal_request+0x6e>
 80120a4:	460d      	mov	r5, r1
 80120a6:	4616      	mov	r6, r2
 80120a8:	f7fe fddc 	bl	8010c64 <rcl_service_is_valid>
 80120ac:	b330      	cbz	r0, 80120fc <rcl_action_take_goal_request+0x64>
 80120ae:	6820      	ldr	r0, [r4, #0]
 80120b0:	3004      	adds	r0, #4
 80120b2:	f7fe fdd7 	bl	8010c64 <rcl_service_is_valid>
 80120b6:	b308      	cbz	r0, 80120fc <rcl_action_take_goal_request+0x64>
 80120b8:	6820      	ldr	r0, [r4, #0]
 80120ba:	3008      	adds	r0, #8
 80120bc:	f7fe fdd2 	bl	8010c64 <rcl_service_is_valid>
 80120c0:	b1e0      	cbz	r0, 80120fc <rcl_action_take_goal_request+0x64>
 80120c2:	6820      	ldr	r0, [r4, #0]
 80120c4:	300c      	adds	r0, #12
 80120c6:	f7f8 fa57 	bl	800a578 <rcl_publisher_is_valid>
 80120ca:	b1b8      	cbz	r0, 80120fc <rcl_action_take_goal_request+0x64>
 80120cc:	6820      	ldr	r0, [r4, #0]
 80120ce:	3010      	adds	r0, #16
 80120d0:	f7f8 fa52 	bl	800a578 <rcl_publisher_is_valid>
 80120d4:	b190      	cbz	r0, 80120fc <rcl_action_take_goal_request+0x64>
 80120d6:	b1cd      	cbz	r5, 801210c <rcl_action_take_goal_request+0x74>
 80120d8:	b1c6      	cbz	r6, 801210c <rcl_action_take_goal_request+0x74>
 80120da:	6820      	ldr	r0, [r4, #0]
 80120dc:	4632      	mov	r2, r6
 80120de:	4629      	mov	r1, r5
 80120e0:	f7fe fd68 	bl	8010bb4 <rcl_take_request>
 80120e4:	b148      	cbz	r0, 80120fa <rcl_action_take_goal_request+0x62>
 80120e6:	280a      	cmp	r0, #10
 80120e8:	d007      	beq.n	80120fa <rcl_action_take_goal_request+0x62>
 80120ea:	f240 2259 	movw	r2, #601	@ 0x259
 80120ee:	f640 0399 	movw	r3, #2201	@ 0x899
 80120f2:	4290      	cmp	r0, r2
 80120f4:	bf0c      	ite	eq
 80120f6:	4618      	moveq	r0, r3
 80120f8:	2001      	movne	r0, #1
 80120fa:	bd70      	pop	{r4, r5, r6, pc}
 80120fc:	f7f9 fb84 	bl	800b808 <rcutils_reset_error>
 8012100:	f640 0098 	movw	r0, #2200	@ 0x898
 8012104:	bd70      	pop	{r4, r5, r6, pc}
 8012106:	f640 0098 	movw	r0, #2200	@ 0x898
 801210a:	bd70      	pop	{r4, r5, r6, pc}
 801210c:	200b      	movs	r0, #11
 801210e:	bd70      	pop	{r4, r5, r6, pc}
 8012110:	f640 0098 	movw	r0, #2200	@ 0x898
 8012114:	4770      	bx	lr
 8012116:	bf00      	nop

08012118 <rcl_action_send_goal_response>:
 8012118:	b390      	cbz	r0, 8012180 <rcl_action_send_goal_response+0x68>
 801211a:	b570      	push	{r4, r5, r6, lr}
 801211c:	4604      	mov	r4, r0
 801211e:	6800      	ldr	r0, [r0, #0]
 8012120:	b348      	cbz	r0, 8012176 <rcl_action_send_goal_response+0x5e>
 8012122:	460d      	mov	r5, r1
 8012124:	4616      	mov	r6, r2
 8012126:	f7fe fd9d 	bl	8010c64 <rcl_service_is_valid>
 801212a:	b1f8      	cbz	r0, 801216c <rcl_action_send_goal_response+0x54>
 801212c:	6820      	ldr	r0, [r4, #0]
 801212e:	3004      	adds	r0, #4
 8012130:	f7fe fd98 	bl	8010c64 <rcl_service_is_valid>
 8012134:	b1d0      	cbz	r0, 801216c <rcl_action_send_goal_response+0x54>
 8012136:	6820      	ldr	r0, [r4, #0]
 8012138:	3008      	adds	r0, #8
 801213a:	f7fe fd93 	bl	8010c64 <rcl_service_is_valid>
 801213e:	b1a8      	cbz	r0, 801216c <rcl_action_send_goal_response+0x54>
 8012140:	6820      	ldr	r0, [r4, #0]
 8012142:	300c      	adds	r0, #12
 8012144:	f7f8 fa18 	bl	800a578 <rcl_publisher_is_valid>
 8012148:	b180      	cbz	r0, 801216c <rcl_action_send_goal_response+0x54>
 801214a:	6820      	ldr	r0, [r4, #0]
 801214c:	3010      	adds	r0, #16
 801214e:	f7f8 fa13 	bl	800a578 <rcl_publisher_is_valid>
 8012152:	b158      	cbz	r0, 801216c <rcl_action_send_goal_response+0x54>
 8012154:	b195      	cbz	r5, 801217c <rcl_action_send_goal_response+0x64>
 8012156:	b18e      	cbz	r6, 801217c <rcl_action_send_goal_response+0x64>
 8012158:	6820      	ldr	r0, [r4, #0]
 801215a:	4632      	mov	r2, r6
 801215c:	4629      	mov	r1, r5
 801215e:	f7fe fd69 	bl	8010c34 <rcl_send_response>
 8012162:	b110      	cbz	r0, 801216a <rcl_action_send_goal_response+0x52>
 8012164:	2802      	cmp	r0, #2
 8012166:	bf18      	it	ne
 8012168:	2001      	movne	r0, #1
 801216a:	bd70      	pop	{r4, r5, r6, pc}
 801216c:	f7f9 fb4c 	bl	800b808 <rcutils_reset_error>
 8012170:	f640 0098 	movw	r0, #2200	@ 0x898
 8012174:	bd70      	pop	{r4, r5, r6, pc}
 8012176:	f640 0098 	movw	r0, #2200	@ 0x898
 801217a:	bd70      	pop	{r4, r5, r6, pc}
 801217c:	200b      	movs	r0, #11
 801217e:	bd70      	pop	{r4, r5, r6, pc}
 8012180:	f640 0098 	movw	r0, #2200	@ 0x898
 8012184:	4770      	bx	lr
 8012186:	bf00      	nop

08012188 <rcl_action_take_result_request>:
 8012188:	2800      	cmp	r0, #0
 801218a:	d03a      	beq.n	8012202 <rcl_action_take_result_request+0x7a>
 801218c:	b570      	push	{r4, r5, r6, lr}
 801218e:	4604      	mov	r4, r0
 8012190:	6800      	ldr	r0, [r0, #0]
 8012192:	b388      	cbz	r0, 80121f8 <rcl_action_take_result_request+0x70>
 8012194:	460d      	mov	r5, r1
 8012196:	4616      	mov	r6, r2
 8012198:	f7fe fd64 	bl	8010c64 <rcl_service_is_valid>
 801219c:	b338      	cbz	r0, 80121ee <rcl_action_take_result_request+0x66>
 801219e:	6820      	ldr	r0, [r4, #0]
 80121a0:	3004      	adds	r0, #4
 80121a2:	f7fe fd5f 	bl	8010c64 <rcl_service_is_valid>
 80121a6:	b310      	cbz	r0, 80121ee <rcl_action_take_result_request+0x66>
 80121a8:	6820      	ldr	r0, [r4, #0]
 80121aa:	3008      	adds	r0, #8
 80121ac:	f7fe fd5a 	bl	8010c64 <rcl_service_is_valid>
 80121b0:	b1e8      	cbz	r0, 80121ee <rcl_action_take_result_request+0x66>
 80121b2:	6820      	ldr	r0, [r4, #0]
 80121b4:	300c      	adds	r0, #12
 80121b6:	f7f8 f9df 	bl	800a578 <rcl_publisher_is_valid>
 80121ba:	b1c0      	cbz	r0, 80121ee <rcl_action_take_result_request+0x66>
 80121bc:	6820      	ldr	r0, [r4, #0]
 80121be:	3010      	adds	r0, #16
 80121c0:	f7f8 f9da 	bl	800a578 <rcl_publisher_is_valid>
 80121c4:	b198      	cbz	r0, 80121ee <rcl_action_take_result_request+0x66>
 80121c6:	b1d5      	cbz	r5, 80121fe <rcl_action_take_result_request+0x76>
 80121c8:	b1ce      	cbz	r6, 80121fe <rcl_action_take_result_request+0x76>
 80121ca:	6820      	ldr	r0, [r4, #0]
 80121cc:	4632      	mov	r2, r6
 80121ce:	4629      	mov	r1, r5
 80121d0:	3008      	adds	r0, #8
 80121d2:	f7fe fcef 	bl	8010bb4 <rcl_take_request>
 80121d6:	b148      	cbz	r0, 80121ec <rcl_action_take_result_request+0x64>
 80121d8:	280a      	cmp	r0, #10
 80121da:	d007      	beq.n	80121ec <rcl_action_take_result_request+0x64>
 80121dc:	f240 2259 	movw	r2, #601	@ 0x259
 80121e0:	f640 0399 	movw	r3, #2201	@ 0x899
 80121e4:	4290      	cmp	r0, r2
 80121e6:	bf0c      	ite	eq
 80121e8:	4618      	moveq	r0, r3
 80121ea:	2001      	movne	r0, #1
 80121ec:	bd70      	pop	{r4, r5, r6, pc}
 80121ee:	f7f9 fb0b 	bl	800b808 <rcutils_reset_error>
 80121f2:	f640 0098 	movw	r0, #2200	@ 0x898
 80121f6:	bd70      	pop	{r4, r5, r6, pc}
 80121f8:	f640 0098 	movw	r0, #2200	@ 0x898
 80121fc:	bd70      	pop	{r4, r5, r6, pc}
 80121fe:	200b      	movs	r0, #11
 8012200:	bd70      	pop	{r4, r5, r6, pc}
 8012202:	f640 0098 	movw	r0, #2200	@ 0x898
 8012206:	4770      	bx	lr

08012208 <rcl_action_take_cancel_request>:
 8012208:	2800      	cmp	r0, #0
 801220a:	d03a      	beq.n	8012282 <rcl_action_take_cancel_request+0x7a>
 801220c:	b570      	push	{r4, r5, r6, lr}
 801220e:	4604      	mov	r4, r0
 8012210:	6800      	ldr	r0, [r0, #0]
 8012212:	b388      	cbz	r0, 8012278 <rcl_action_take_cancel_request+0x70>
 8012214:	460d      	mov	r5, r1
 8012216:	4616      	mov	r6, r2
 8012218:	f7fe fd24 	bl	8010c64 <rcl_service_is_valid>
 801221c:	b338      	cbz	r0, 801226e <rcl_action_take_cancel_request+0x66>
 801221e:	6820      	ldr	r0, [r4, #0]
 8012220:	3004      	adds	r0, #4
 8012222:	f7fe fd1f 	bl	8010c64 <rcl_service_is_valid>
 8012226:	b310      	cbz	r0, 801226e <rcl_action_take_cancel_request+0x66>
 8012228:	6820      	ldr	r0, [r4, #0]
 801222a:	3008      	adds	r0, #8
 801222c:	f7fe fd1a 	bl	8010c64 <rcl_service_is_valid>
 8012230:	b1e8      	cbz	r0, 801226e <rcl_action_take_cancel_request+0x66>
 8012232:	6820      	ldr	r0, [r4, #0]
 8012234:	300c      	adds	r0, #12
 8012236:	f7f8 f99f 	bl	800a578 <rcl_publisher_is_valid>
 801223a:	b1c0      	cbz	r0, 801226e <rcl_action_take_cancel_request+0x66>
 801223c:	6820      	ldr	r0, [r4, #0]
 801223e:	3010      	adds	r0, #16
 8012240:	f7f8 f99a 	bl	800a578 <rcl_publisher_is_valid>
 8012244:	b198      	cbz	r0, 801226e <rcl_action_take_cancel_request+0x66>
 8012246:	b1d5      	cbz	r5, 801227e <rcl_action_take_cancel_request+0x76>
 8012248:	b1ce      	cbz	r6, 801227e <rcl_action_take_cancel_request+0x76>
 801224a:	6820      	ldr	r0, [r4, #0]
 801224c:	4632      	mov	r2, r6
 801224e:	4629      	mov	r1, r5
 8012250:	3004      	adds	r0, #4
 8012252:	f7fe fcaf 	bl	8010bb4 <rcl_take_request>
 8012256:	b148      	cbz	r0, 801226c <rcl_action_take_cancel_request+0x64>
 8012258:	280a      	cmp	r0, #10
 801225a:	d007      	beq.n	801226c <rcl_action_take_cancel_request+0x64>
 801225c:	f240 2259 	movw	r2, #601	@ 0x259
 8012260:	f640 0399 	movw	r3, #2201	@ 0x899
 8012264:	4290      	cmp	r0, r2
 8012266:	bf0c      	ite	eq
 8012268:	4618      	moveq	r0, r3
 801226a:	2001      	movne	r0, #1
 801226c:	bd70      	pop	{r4, r5, r6, pc}
 801226e:	f7f9 facb 	bl	800b808 <rcutils_reset_error>
 8012272:	f640 0098 	movw	r0, #2200	@ 0x898
 8012276:	bd70      	pop	{r4, r5, r6, pc}
 8012278:	f640 0098 	movw	r0, #2200	@ 0x898
 801227c:	bd70      	pop	{r4, r5, r6, pc}
 801227e:	200b      	movs	r0, #11
 8012280:	bd70      	pop	{r4, r5, r6, pc}
 8012282:	f640 0098 	movw	r0, #2200	@ 0x898
 8012286:	4770      	bx	lr

08012288 <rcl_action_send_cancel_response>:
 8012288:	b398      	cbz	r0, 80122f2 <rcl_action_send_cancel_response+0x6a>
 801228a:	b570      	push	{r4, r5, r6, lr}
 801228c:	4604      	mov	r4, r0
 801228e:	6800      	ldr	r0, [r0, #0]
 8012290:	b350      	cbz	r0, 80122e8 <rcl_action_send_cancel_response+0x60>
 8012292:	460d      	mov	r5, r1
 8012294:	4616      	mov	r6, r2
 8012296:	f7fe fce5 	bl	8010c64 <rcl_service_is_valid>
 801229a:	b300      	cbz	r0, 80122de <rcl_action_send_cancel_response+0x56>
 801229c:	6820      	ldr	r0, [r4, #0]
 801229e:	3004      	adds	r0, #4
 80122a0:	f7fe fce0 	bl	8010c64 <rcl_service_is_valid>
 80122a4:	b1d8      	cbz	r0, 80122de <rcl_action_send_cancel_response+0x56>
 80122a6:	6820      	ldr	r0, [r4, #0]
 80122a8:	3008      	adds	r0, #8
 80122aa:	f7fe fcdb 	bl	8010c64 <rcl_service_is_valid>
 80122ae:	b1b0      	cbz	r0, 80122de <rcl_action_send_cancel_response+0x56>
 80122b0:	6820      	ldr	r0, [r4, #0]
 80122b2:	300c      	adds	r0, #12
 80122b4:	f7f8 f960 	bl	800a578 <rcl_publisher_is_valid>
 80122b8:	b188      	cbz	r0, 80122de <rcl_action_send_cancel_response+0x56>
 80122ba:	6820      	ldr	r0, [r4, #0]
 80122bc:	3010      	adds	r0, #16
 80122be:	f7f8 f95b 	bl	800a578 <rcl_publisher_is_valid>
 80122c2:	b160      	cbz	r0, 80122de <rcl_action_send_cancel_response+0x56>
 80122c4:	b19d      	cbz	r5, 80122ee <rcl_action_send_cancel_response+0x66>
 80122c6:	b196      	cbz	r6, 80122ee <rcl_action_send_cancel_response+0x66>
 80122c8:	6820      	ldr	r0, [r4, #0]
 80122ca:	4632      	mov	r2, r6
 80122cc:	4629      	mov	r1, r5
 80122ce:	3004      	adds	r0, #4
 80122d0:	f7fe fcb0 	bl	8010c34 <rcl_send_response>
 80122d4:	b110      	cbz	r0, 80122dc <rcl_action_send_cancel_response+0x54>
 80122d6:	2802      	cmp	r0, #2
 80122d8:	bf18      	it	ne
 80122da:	2001      	movne	r0, #1
 80122dc:	bd70      	pop	{r4, r5, r6, pc}
 80122de:	f7f9 fa93 	bl	800b808 <rcutils_reset_error>
 80122e2:	f640 0098 	movw	r0, #2200	@ 0x898
 80122e6:	bd70      	pop	{r4, r5, r6, pc}
 80122e8:	f640 0098 	movw	r0, #2200	@ 0x898
 80122ec:	bd70      	pop	{r4, r5, r6, pc}
 80122ee:	200b      	movs	r0, #11
 80122f0:	bd70      	pop	{r4, r5, r6, pc}
 80122f2:	f640 0098 	movw	r0, #2200	@ 0x898
 80122f6:	4770      	bx	lr

080122f8 <rcl_action_wait_set_add_action_server>:
 80122f8:	2800      	cmp	r0, #0
 80122fa:	d04d      	beq.n	8012398 <rcl_action_wait_set_add_action_server+0xa0>
 80122fc:	b570      	push	{r4, r5, r6, lr}
 80122fe:	460c      	mov	r4, r1
 8012300:	b159      	cbz	r1, 801231a <rcl_action_wait_set_add_action_server+0x22>
 8012302:	4605      	mov	r5, r0
 8012304:	6808      	ldr	r0, [r1, #0]
 8012306:	b140      	cbz	r0, 801231a <rcl_action_wait_set_add_action_server+0x22>
 8012308:	4616      	mov	r6, r2
 801230a:	f7fe fcab 	bl	8010c64 <rcl_service_is_valid>
 801230e:	b120      	cbz	r0, 801231a <rcl_action_wait_set_add_action_server+0x22>
 8012310:	6820      	ldr	r0, [r4, #0]
 8012312:	3004      	adds	r0, #4
 8012314:	f7fe fca6 	bl	8010c64 <rcl_service_is_valid>
 8012318:	b910      	cbnz	r0, 8012320 <rcl_action_wait_set_add_action_server+0x28>
 801231a:	f640 0098 	movw	r0, #2200	@ 0x898
 801231e:	bd70      	pop	{r4, r5, r6, pc}
 8012320:	6820      	ldr	r0, [r4, #0]
 8012322:	3008      	adds	r0, #8
 8012324:	f7fe fc9e 	bl	8010c64 <rcl_service_is_valid>
 8012328:	2800      	cmp	r0, #0
 801232a:	d0f6      	beq.n	801231a <rcl_action_wait_set_add_action_server+0x22>
 801232c:	6820      	ldr	r0, [r4, #0]
 801232e:	300c      	adds	r0, #12
 8012330:	f7f8 f93a 	bl	800a5a8 <rcl_publisher_is_valid_except_context>
 8012334:	2800      	cmp	r0, #0
 8012336:	d0f0      	beq.n	801231a <rcl_action_wait_set_add_action_server+0x22>
 8012338:	6820      	ldr	r0, [r4, #0]
 801233a:	3010      	adds	r0, #16
 801233c:	f7f8 f934 	bl	800a5a8 <rcl_publisher_is_valid_except_context>
 8012340:	2800      	cmp	r0, #0
 8012342:	d0ea      	beq.n	801231a <rcl_action_wait_set_add_action_server+0x22>
 8012344:	6821      	ldr	r1, [r4, #0]
 8012346:	4628      	mov	r0, r5
 8012348:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 801234c:	f7ff fad0 	bl	80118f0 <rcl_wait_set_add_service>
 8012350:	2800      	cmp	r0, #0
 8012352:	d1e4      	bne.n	801231e <rcl_action_wait_set_add_action_server+0x26>
 8012354:	6821      	ldr	r1, [r4, #0]
 8012356:	4628      	mov	r0, r5
 8012358:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 801235c:	3104      	adds	r1, #4
 801235e:	f7ff fac7 	bl	80118f0 <rcl_wait_set_add_service>
 8012362:	2800      	cmp	r0, #0
 8012364:	d1db      	bne.n	801231e <rcl_action_wait_set_add_action_server+0x26>
 8012366:	6821      	ldr	r1, [r4, #0]
 8012368:	4628      	mov	r0, r5
 801236a:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 801236e:	3108      	adds	r1, #8
 8012370:	f7ff fabe 	bl	80118f0 <rcl_wait_set_add_service>
 8012374:	2800      	cmp	r0, #0
 8012376:	d1d2      	bne.n	801231e <rcl_action_wait_set_add_action_server+0x26>
 8012378:	6821      	ldr	r1, [r4, #0]
 801237a:	4628      	mov	r0, r5
 801237c:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 8012380:	3114      	adds	r1, #20
 8012382:	f7ff fa59 	bl	8011838 <rcl_wait_set_add_timer>
 8012386:	2800      	cmp	r0, #0
 8012388:	d1c9      	bne.n	801231e <rcl_action_wait_set_add_action_server+0x26>
 801238a:	2e00      	cmp	r6, #0
 801238c:	d0c7      	beq.n	801231e <rcl_action_wait_set_add_action_server+0x26>
 801238e:	6823      	ldr	r3, [r4, #0]
 8012390:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 8012394:	6033      	str	r3, [r6, #0]
 8012396:	bd70      	pop	{r4, r5, r6, pc}
 8012398:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801239c:	4770      	bx	lr
 801239e:	bf00      	nop

080123a0 <rcl_action_server_wait_set_get_entities_ready>:
 80123a0:	2800      	cmp	r0, #0
 80123a2:	d05a      	beq.n	801245a <rcl_action_server_wait_set_get_entities_ready+0xba>
 80123a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123a6:	460c      	mov	r4, r1
 80123a8:	b161      	cbz	r1, 80123c4 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80123aa:	4605      	mov	r5, r0
 80123ac:	6808      	ldr	r0, [r1, #0]
 80123ae:	b148      	cbz	r0, 80123c4 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80123b0:	4616      	mov	r6, r2
 80123b2:	461f      	mov	r7, r3
 80123b4:	f7fe fc56 	bl	8010c64 <rcl_service_is_valid>
 80123b8:	b120      	cbz	r0, 80123c4 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80123ba:	6820      	ldr	r0, [r4, #0]
 80123bc:	3004      	adds	r0, #4
 80123be:	f7fe fc51 	bl	8010c64 <rcl_service_is_valid>
 80123c2:	b910      	cbnz	r0, 80123ca <rcl_action_server_wait_set_get_entities_ready+0x2a>
 80123c4:	f640 0098 	movw	r0, #2200	@ 0x898
 80123c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80123ca:	6820      	ldr	r0, [r4, #0]
 80123cc:	3008      	adds	r0, #8
 80123ce:	f7fe fc49 	bl	8010c64 <rcl_service_is_valid>
 80123d2:	2800      	cmp	r0, #0
 80123d4:	d0f6      	beq.n	80123c4 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80123d6:	6820      	ldr	r0, [r4, #0]
 80123d8:	300c      	adds	r0, #12
 80123da:	f7f8 f8e5 	bl	800a5a8 <rcl_publisher_is_valid_except_context>
 80123de:	2800      	cmp	r0, #0
 80123e0:	d0f0      	beq.n	80123c4 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80123e2:	6820      	ldr	r0, [r4, #0]
 80123e4:	3010      	adds	r0, #16
 80123e6:	f7f8 f8df 	bl	800a5a8 <rcl_publisher_is_valid_except_context>
 80123ea:	2800      	cmp	r0, #0
 80123ec:	d0ea      	beq.n	80123c4 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80123ee:	b3be      	cbz	r6, 8012460 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80123f0:	b3b7      	cbz	r7, 8012460 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80123f2:	9b06      	ldr	r3, [sp, #24]
 80123f4:	b3a3      	cbz	r3, 8012460 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80123f6:	9b07      	ldr	r3, [sp, #28]
 80123f8:	b393      	cbz	r3, 8012460 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80123fa:	6821      	ldr	r1, [r4, #0]
 80123fc:	692a      	ldr	r2, [r5, #16]
 80123fe:	6a2c      	ldr	r4, [r5, #32]
 8012400:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 8012404:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 8012408:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 801240c:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 8012410:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 8012414:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8012418:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801241c:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8012420:	1a64      	subs	r4, r4, r1
 8012422:	fab4 f484 	clz	r4, r4
 8012426:	0964      	lsrs	r4, r4, #5
 8012428:	7034      	strb	r4, [r6, #0]
 801242a:	1d0c      	adds	r4, r1, #4
 801242c:	1b1b      	subs	r3, r3, r4
 801242e:	fab3 f383 	clz	r3, r3
 8012432:	095b      	lsrs	r3, r3, #5
 8012434:	f101 0408 	add.w	r4, r1, #8
 8012438:	703b      	strb	r3, [r7, #0]
 801243a:	f101 0314 	add.w	r3, r1, #20
 801243e:	1b01      	subs	r1, r0, r4
 8012440:	1ad3      	subs	r3, r2, r3
 8012442:	fab1 f181 	clz	r1, r1
 8012446:	9a06      	ldr	r2, [sp, #24]
 8012448:	0949      	lsrs	r1, r1, #5
 801244a:	7011      	strb	r1, [r2, #0]
 801244c:	fab3 f383 	clz	r3, r3
 8012450:	9a07      	ldr	r2, [sp, #28]
 8012452:	095b      	lsrs	r3, r3, #5
 8012454:	2000      	movs	r0, #0
 8012456:	7013      	strb	r3, [r2, #0]
 8012458:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801245a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801245e:	4770      	bx	lr
 8012460:	200b      	movs	r0, #11
 8012462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012464 <_execute_event_handler>:
 8012464:	2002      	movs	r0, #2
 8012466:	4770      	bx	lr

08012468 <_cancel_goal_event_handler>:
 8012468:	2003      	movs	r0, #3
 801246a:	4770      	bx	lr

0801246c <_succeed_event_handler>:
 801246c:	2004      	movs	r0, #4
 801246e:	4770      	bx	lr

08012470 <_abort_event_handler>:
 8012470:	2006      	movs	r0, #6
 8012472:	4770      	bx	lr

08012474 <_canceled_event_handler>:
 8012474:	2005      	movs	r0, #5
 8012476:	4770      	bx	lr

08012478 <rcl_action_transition_goal_state>:
 8012478:	b2c2      	uxtb	r2, r0
 801247a:	2a06      	cmp	r2, #6
 801247c:	d80c      	bhi.n	8012498 <rcl_action_transition_goal_state+0x20>
 801247e:	2904      	cmp	r1, #4
 8012480:	d80a      	bhi.n	8012498 <rcl_action_transition_goal_state+0x20>
 8012482:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8012486:	b410      	push	{r4}
 8012488:	1853      	adds	r3, r2, r1
 801248a:	4c06      	ldr	r4, [pc, #24]	@ (80124a4 <rcl_action_transition_goal_state+0x2c>)
 801248c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8012490:	b123      	cbz	r3, 801249c <rcl_action_transition_goal_state+0x24>
 8012492:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012496:	4718      	bx	r3
 8012498:	2000      	movs	r0, #0
 801249a:	4770      	bx	lr
 801249c:	2000      	movs	r0, #0
 801249e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80124a2:	4770      	bx	lr
 80124a4:	0801a644 	.word	0x0801a644

080124a8 <rcl_action_get_zero_initialized_cancel_response>:
 80124a8:	b510      	push	{r4, lr}
 80124aa:	4c07      	ldr	r4, [pc, #28]	@ (80124c8 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 80124ac:	4686      	mov	lr, r0
 80124ae:	4684      	mov	ip, r0
 80124b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80124b2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80124b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80124b8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80124bc:	6823      	ldr	r3, [r4, #0]
 80124be:	f8cc 3000 	str.w	r3, [ip]
 80124c2:	4670      	mov	r0, lr
 80124c4:	bd10      	pop	{r4, pc}
 80124c6:	bf00      	nop
 80124c8:	0801a6d0 	.word	0x0801a6d0

080124cc <rclc_action_send_result_request>:
 80124cc:	b1d0      	cbz	r0, 8012504 <rclc_action_send_result_request+0x38>
 80124ce:	b500      	push	{lr}
 80124d0:	4684      	mov	ip, r0
 80124d2:	b087      	sub	sp, #28
 80124d4:	f8d0 0009 	ldr.w	r0, [r0, #9]
 80124d8:	f8dc 100d 	ldr.w	r1, [ip, #13]
 80124dc:	f8dc 2011 	ldr.w	r2, [ip, #17]
 80124e0:	f8dc 3015 	ldr.w	r3, [ip, #21]
 80124e4:	f10d 0e08 	add.w	lr, sp, #8
 80124e8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80124ec:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80124f0:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 80124f4:	a902      	add	r1, sp, #8
 80124f6:	3010      	adds	r0, #16
 80124f8:	f7ff fbda 	bl	8011cb0 <rcl_action_send_result_request>
 80124fc:	b920      	cbnz	r0, 8012508 <rclc_action_send_result_request+0x3c>
 80124fe:	b007      	add	sp, #28
 8012500:	f85d fb04 	ldr.w	pc, [sp], #4
 8012504:	200b      	movs	r0, #11
 8012506:	4770      	bx	lr
 8012508:	9001      	str	r0, [sp, #4]
 801250a:	f7f9 f97d 	bl	800b808 <rcutils_reset_error>
 801250e:	9801      	ldr	r0, [sp, #4]
 8012510:	b007      	add	sp, #28
 8012512:	f85d fb04 	ldr.w	pc, [sp], #4
 8012516:	bf00      	nop

08012518 <rclc_action_take_goal_handle>:
 8012518:	b160      	cbz	r0, 8012534 <rclc_action_take_goal_handle+0x1c>
 801251a:	6883      	ldr	r3, [r0, #8]
 801251c:	b143      	cbz	r3, 8012530 <rclc_action_take_goal_handle+0x18>
 801251e:	6819      	ldr	r1, [r3, #0]
 8012520:	6081      	str	r1, [r0, #8]
 8012522:	2200      	movs	r2, #0
 8012524:	721a      	strb	r2, [r3, #8]
 8012526:	68c1      	ldr	r1, [r0, #12]
 8012528:	6019      	str	r1, [r3, #0]
 801252a:	621a      	str	r2, [r3, #32]
 801252c:	849a      	strh	r2, [r3, #36]	@ 0x24
 801252e:	60c3      	str	r3, [r0, #12]
 8012530:	4618      	mov	r0, r3
 8012532:	4770      	bx	lr
 8012534:	4603      	mov	r3, r0
 8012536:	e7fb      	b.n	8012530 <rclc_action_take_goal_handle+0x18>

08012538 <rclc_action_remove_used_goal_handle>:
 8012538:	b180      	cbz	r0, 801255c <rclc_action_remove_used_goal_handle+0x24>
 801253a:	b179      	cbz	r1, 801255c <rclc_action_remove_used_goal_handle+0x24>
 801253c:	68c3      	ldr	r3, [r0, #12]
 801253e:	4299      	cmp	r1, r3
 8012540:	d00d      	beq.n	801255e <rclc_action_remove_used_goal_handle+0x26>
 8012542:	b12b      	cbz	r3, 8012550 <rclc_action_remove_used_goal_handle+0x18>
 8012544:	681a      	ldr	r2, [r3, #0]
 8012546:	4291      	cmp	r1, r2
 8012548:	d003      	beq.n	8012552 <rclc_action_remove_used_goal_handle+0x1a>
 801254a:	4613      	mov	r3, r2
 801254c:	2b00      	cmp	r3, #0
 801254e:	d1f9      	bne.n	8012544 <rclc_action_remove_used_goal_handle+0xc>
 8012550:	4770      	bx	lr
 8012552:	680a      	ldr	r2, [r1, #0]
 8012554:	601a      	str	r2, [r3, #0]
 8012556:	6883      	ldr	r3, [r0, #8]
 8012558:	600b      	str	r3, [r1, #0]
 801255a:	6081      	str	r1, [r0, #8]
 801255c:	4770      	bx	lr
 801255e:	680b      	ldr	r3, [r1, #0]
 8012560:	60c3      	str	r3, [r0, #12]
 8012562:	e7f8      	b.n	8012556 <rclc_action_remove_used_goal_handle+0x1e>

08012564 <rclc_action_find_goal_handle_by_uuid>:
 8012564:	b538      	push	{r3, r4, r5, lr}
 8012566:	b180      	cbz	r0, 801258a <rclc_action_find_goal_handle_by_uuid+0x26>
 8012568:	460d      	mov	r5, r1
 801256a:	b181      	cbz	r1, 801258e <rclc_action_find_goal_handle_by_uuid+0x2a>
 801256c:	68c4      	ldr	r4, [r0, #12]
 801256e:	b914      	cbnz	r4, 8012576 <rclc_action_find_goal_handle_by_uuid+0x12>
 8012570:	e009      	b.n	8012586 <rclc_action_find_goal_handle_by_uuid+0x22>
 8012572:	6824      	ldr	r4, [r4, #0]
 8012574:	b13c      	cbz	r4, 8012586 <rclc_action_find_goal_handle_by_uuid+0x22>
 8012576:	f104 0009 	add.w	r0, r4, #9
 801257a:	2210      	movs	r2, #16
 801257c:	4629      	mov	r1, r5
 801257e:	f005 fb29 	bl	8017bd4 <memcmp>
 8012582:	2800      	cmp	r0, #0
 8012584:	d1f5      	bne.n	8012572 <rclc_action_find_goal_handle_by_uuid+0xe>
 8012586:	4620      	mov	r0, r4
 8012588:	bd38      	pop	{r3, r4, r5, pc}
 801258a:	4604      	mov	r4, r0
 801258c:	e7fb      	b.n	8012586 <rclc_action_find_goal_handle_by_uuid+0x22>
 801258e:	460c      	mov	r4, r1
 8012590:	e7f9      	b.n	8012586 <rclc_action_find_goal_handle_by_uuid+0x22>
 8012592:	bf00      	nop

08012594 <rclc_action_find_first_handle_by_status>:
 8012594:	b140      	cbz	r0, 80125a8 <rclc_action_find_first_handle_by_status+0x14>
 8012596:	68c0      	ldr	r0, [r0, #12]
 8012598:	b910      	cbnz	r0, 80125a0 <rclc_action_find_first_handle_by_status+0xc>
 801259a:	e005      	b.n	80125a8 <rclc_action_find_first_handle_by_status+0x14>
 801259c:	6800      	ldr	r0, [r0, #0]
 801259e:	b118      	cbz	r0, 80125a8 <rclc_action_find_first_handle_by_status+0x14>
 80125a0:	f990 3008 	ldrsb.w	r3, [r0, #8]
 80125a4:	428b      	cmp	r3, r1
 80125a6:	d1f9      	bne.n	801259c <rclc_action_find_first_handle_by_status+0x8>
 80125a8:	4770      	bx	lr
 80125aa:	bf00      	nop

080125ac <rclc_action_find_first_terminated_handle>:
 80125ac:	b140      	cbz	r0, 80125c0 <rclc_action_find_first_terminated_handle+0x14>
 80125ae:	68c0      	ldr	r0, [r0, #12]
 80125b0:	b910      	cbnz	r0, 80125b8 <rclc_action_find_first_terminated_handle+0xc>
 80125b2:	e005      	b.n	80125c0 <rclc_action_find_first_terminated_handle+0x14>
 80125b4:	6800      	ldr	r0, [r0, #0]
 80125b6:	b118      	cbz	r0, 80125c0 <rclc_action_find_first_terminated_handle+0x14>
 80125b8:	f990 3008 	ldrsb.w	r3, [r0, #8]
 80125bc:	2b03      	cmp	r3, #3
 80125be:	ddf9      	ble.n	80125b4 <rclc_action_find_first_terminated_handle+0x8>
 80125c0:	4770      	bx	lr
 80125c2:	bf00      	nop

080125c4 <rclc_action_find_handle_by_goal_request_sequence_number>:
 80125c4:	b170      	cbz	r0, 80125e4 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 80125c6:	68c0      	ldr	r0, [r0, #12]
 80125c8:	b160      	cbz	r0, 80125e4 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 80125ca:	b410      	push	{r4}
 80125cc:	e001      	b.n	80125d2 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 80125ce:	6800      	ldr	r0, [r0, #0]
 80125d0:	b128      	cbz	r0, 80125de <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 80125d2:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 80125d6:	4299      	cmp	r1, r3
 80125d8:	bf08      	it	eq
 80125da:	4294      	cmpeq	r4, r2
 80125dc:	d1f7      	bne.n	80125ce <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 80125de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80125e2:	4770      	bx	lr
 80125e4:	4770      	bx	lr
 80125e6:	bf00      	nop

080125e8 <rclc_action_find_handle_by_result_request_sequence_number>:
 80125e8:	b170      	cbz	r0, 8012608 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 80125ea:	68c0      	ldr	r0, [r0, #12]
 80125ec:	b160      	cbz	r0, 8012608 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 80125ee:	b410      	push	{r4}
 80125f0:	e001      	b.n	80125f6 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 80125f2:	6800      	ldr	r0, [r0, #0]
 80125f4:	b128      	cbz	r0, 8012602 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 80125f6:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 80125fa:	4299      	cmp	r1, r3
 80125fc:	bf08      	it	eq
 80125fe:	4294      	cmpeq	r4, r2
 8012600:	d1f7      	bne.n	80125f2 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 8012602:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012606:	4770      	bx	lr
 8012608:	4770      	bx	lr
 801260a:	bf00      	nop

0801260c <rclc_action_find_handle_by_cancel_request_sequence_number>:
 801260c:	b170      	cbz	r0, 801262c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801260e:	68c0      	ldr	r0, [r0, #12]
 8012610:	b160      	cbz	r0, 801262c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8012612:	b410      	push	{r4}
 8012614:	e001      	b.n	801261a <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8012616:	6800      	ldr	r0, [r0, #0]
 8012618:	b128      	cbz	r0, 8012626 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 801261a:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 801261e:	4299      	cmp	r1, r3
 8012620:	bf08      	it	eq
 8012622:	4294      	cmpeq	r4, r2
 8012624:	d1f7      	bne.n	8012616 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8012626:	f85d 4b04 	ldr.w	r4, [sp], #4
 801262a:	4770      	bx	lr
 801262c:	4770      	bx	lr
 801262e:	bf00      	nop

08012630 <rclc_action_find_first_handle_with_goal_response>:
 8012630:	b140      	cbz	r0, 8012644 <rclc_action_find_first_handle_with_goal_response+0x14>
 8012632:	68c0      	ldr	r0, [r0, #12]
 8012634:	b910      	cbnz	r0, 801263c <rclc_action_find_first_handle_with_goal_response+0xc>
 8012636:	e005      	b.n	8012644 <rclc_action_find_first_handle_with_goal_response+0x14>
 8012638:	6800      	ldr	r0, [r0, #0]
 801263a:	b118      	cbz	r0, 8012644 <rclc_action_find_first_handle_with_goal_response+0x14>
 801263c:	f890 3020 	ldrb.w	r3, [r0, #32]
 8012640:	2b00      	cmp	r3, #0
 8012642:	d0f9      	beq.n	8012638 <rclc_action_find_first_handle_with_goal_response+0x8>
 8012644:	4770      	bx	lr
 8012646:	bf00      	nop

08012648 <rclc_action_find_first_handle_with_result_response>:
 8012648:	b140      	cbz	r0, 801265c <rclc_action_find_first_handle_with_result_response+0x14>
 801264a:	68c0      	ldr	r0, [r0, #12]
 801264c:	b910      	cbnz	r0, 8012654 <rclc_action_find_first_handle_with_result_response+0xc>
 801264e:	e005      	b.n	801265c <rclc_action_find_first_handle_with_result_response+0x14>
 8012650:	6800      	ldr	r0, [r0, #0]
 8012652:	b118      	cbz	r0, 801265c <rclc_action_find_first_handle_with_result_response+0x14>
 8012654:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8012658:	2b00      	cmp	r3, #0
 801265a:	d0f9      	beq.n	8012650 <rclc_action_find_first_handle_with_result_response+0x8>
 801265c:	4770      	bx	lr
 801265e:	bf00      	nop

08012660 <rclc_action_server_response_goal_request>:
 8012660:	b198      	cbz	r0, 801268a <rclc_action_server_response_goal_request+0x2a>
 8012662:	b510      	push	{r4, lr}
 8012664:	6844      	ldr	r4, [r0, #4]
 8012666:	b086      	sub	sp, #24
 8012668:	2200      	movs	r2, #0
 801266a:	e9cd 2203 	strd	r2, r2, [sp, #12]
 801266e:	460b      	mov	r3, r1
 8012670:	9205      	str	r2, [sp, #20]
 8012672:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 8012676:	aa03      	add	r2, sp, #12
 8012678:	f104 0010 	add.w	r0, r4, #16
 801267c:	f88d 300c 	strb.w	r3, [sp, #12]
 8012680:	f7ff fd4a 	bl	8012118 <rcl_action_send_goal_response>
 8012684:	b918      	cbnz	r0, 801268e <rclc_action_server_response_goal_request+0x2e>
 8012686:	b006      	add	sp, #24
 8012688:	bd10      	pop	{r4, pc}
 801268a:	200b      	movs	r0, #11
 801268c:	4770      	bx	lr
 801268e:	9001      	str	r0, [sp, #4]
 8012690:	f7f9 f8ba 	bl	800b808 <rcutils_reset_error>
 8012694:	9801      	ldr	r0, [sp, #4]
 8012696:	b006      	add	sp, #24
 8012698:	bd10      	pop	{r4, pc}
 801269a:	bf00      	nop
 801269c:	0000      	movs	r0, r0
	...

080126a0 <rclc_action_server_goal_cancel_accept>:
 80126a0:	b310      	cbz	r0, 80126e8 <rclc_action_server_goal_cancel_accept+0x48>
 80126a2:	b510      	push	{r4, lr}
 80126a4:	b090      	sub	sp, #64	@ 0x40
 80126a6:	4604      	mov	r4, r0
 80126a8:	a806      	add	r0, sp, #24
 80126aa:	f7ff fefd 	bl	80124a8 <rcl_action_get_zero_initialized_cancel_response>
 80126ae:	2300      	movs	r3, #0
 80126b0:	f8d4 0009 	ldr.w	r0, [r4, #9]
 80126b4:	f8d4 100d 	ldr.w	r1, [r4, #13]
 80126b8:	f8d4 2011 	ldr.w	r2, [r4, #17]
 80126bc:	f88d 3018 	strb.w	r3, [sp, #24]
 80126c0:	f8d4 3015 	ldr.w	r3, [r4, #21]
 80126c4:	f8cd d01c 	str.w	sp, [sp, #28]
 80126c8:	46ec      	mov	ip, sp
 80126ca:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80126ce:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 80126f0 <rclc_action_server_goal_cancel_accept+0x50>
 80126d2:	6860      	ldr	r0, [r4, #4]
 80126d4:	aa06      	add	r2, sp, #24
 80126d6:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 80126da:	3010      	adds	r0, #16
 80126dc:	ed8d 7b08 	vstr	d7, [sp, #32]
 80126e0:	f7ff fdd2 	bl	8012288 <rcl_action_send_cancel_response>
 80126e4:	b010      	add	sp, #64	@ 0x40
 80126e6:	bd10      	pop	{r4, pc}
 80126e8:	200b      	movs	r0, #11
 80126ea:	4770      	bx	lr
 80126ec:	f3af 8000 	nop.w
 80126f0:	00000001 	.word	0x00000001
 80126f4:	00000001 	.word	0x00000001

080126f8 <rclc_action_server_goal_cancel_reject>:
 80126f8:	b082      	sub	sp, #8
 80126fa:	b530      	push	{r4, r5, lr}
 80126fc:	b08b      	sub	sp, #44	@ 0x2c
 80126fe:	ac0e      	add	r4, sp, #56	@ 0x38
 8012700:	e884 000c 	stmia.w	r4, {r2, r3}
 8012704:	b188      	cbz	r0, 801272a <rclc_action_server_goal_cancel_reject+0x32>
 8012706:	4604      	mov	r4, r0
 8012708:	a801      	add	r0, sp, #4
 801270a:	460d      	mov	r5, r1
 801270c:	f7ff fecc 	bl	80124a8 <rcl_action_get_zero_initialized_cancel_response>
 8012710:	aa01      	add	r2, sp, #4
 8012712:	a90e      	add	r1, sp, #56	@ 0x38
 8012714:	f104 0010 	add.w	r0, r4, #16
 8012718:	f88d 5004 	strb.w	r5, [sp, #4]
 801271c:	f7ff fdb4 	bl	8012288 <rcl_action_send_cancel_response>
 8012720:	b00b      	add	sp, #44	@ 0x2c
 8012722:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012726:	b002      	add	sp, #8
 8012728:	4770      	bx	lr
 801272a:	200b      	movs	r0, #11
 801272c:	b00b      	add	sp, #44	@ 0x2c
 801272e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012732:	b002      	add	sp, #8
 8012734:	4770      	bx	lr
 8012736:	bf00      	nop

08012738 <__atomic_load_8>:
 8012738:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 801273c:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8012740:	4a15      	ldr	r2, [pc, #84]	@ (8012798 <__atomic_load_8+0x60>)
 8012742:	4b16      	ldr	r3, [pc, #88]	@ (801279c <__atomic_load_8+0x64>)
 8012744:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8012748:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 801274c:	fb02 f101 	mul.w	r1, r2, r1
 8012750:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8012754:	fba3 2301 	umull	r2, r3, r3, r1
 8012758:	091b      	lsrs	r3, r3, #4
 801275a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801275e:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8012762:	b4d0      	push	{r4, r6, r7}
 8012764:	4c0e      	ldr	r4, [pc, #56]	@ (80127a0 <__atomic_load_8+0x68>)
 8012766:	1ac9      	subs	r1, r1, r3
 8012768:	1862      	adds	r2, r4, r1
 801276a:	f04f 0c01 	mov.w	ip, #1
 801276e:	e8d2 3f4f 	ldrexb	r3, [r2]
 8012772:	e8c2 cf46 	strexb	r6, ip, [r2]
 8012776:	2e00      	cmp	r6, #0
 8012778:	d1f9      	bne.n	801276e <__atomic_load_8+0x36>
 801277a:	f3bf 8f5b 	dmb	ish
 801277e:	b2db      	uxtb	r3, r3
 8012780:	2b00      	cmp	r3, #0
 8012782:	d1f4      	bne.n	801276e <__atomic_load_8+0x36>
 8012784:	e9d0 6700 	ldrd	r6, r7, [r0]
 8012788:	f3bf 8f5b 	dmb	ish
 801278c:	5463      	strb	r3, [r4, r1]
 801278e:	4630      	mov	r0, r6
 8012790:	4639      	mov	r1, r7
 8012792:	bcd0      	pop	{r4, r6, r7}
 8012794:	4770      	bx	lr
 8012796:	bf00      	nop
 8012798:	27d4eb2d 	.word	0x27d4eb2d
 801279c:	b21642c9 	.word	0xb21642c9
 80127a0:	20010bcc 	.word	0x20010bcc

080127a4 <__atomic_store_8>:
 80127a4:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 80127a8:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 80127ac:	b570      	push	{r4, r5, r6, lr}
 80127ae:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80127b2:	4c14      	ldr	r4, [pc, #80]	@ (8012804 <__atomic_store_8+0x60>)
 80127b4:	4d14      	ldr	r5, [pc, #80]	@ (8012808 <__atomic_store_8+0x64>)
 80127b6:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 80127ba:	fb04 f101 	mul.w	r1, r4, r1
 80127be:	4c13      	ldr	r4, [pc, #76]	@ (801280c <__atomic_store_8+0x68>)
 80127c0:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 80127c4:	fba4 4e01 	umull	r4, lr, r4, r1
 80127c8:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 80127cc:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 80127d0:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 80127d4:	eba1 0e0e 	sub.w	lr, r1, lr
 80127d8:	eb05 0c0e 	add.w	ip, r5, lr
 80127dc:	f04f 0401 	mov.w	r4, #1
 80127e0:	e8dc 1f4f 	ldrexb	r1, [ip]
 80127e4:	e8cc 4f46 	strexb	r6, r4, [ip]
 80127e8:	2e00      	cmp	r6, #0
 80127ea:	d1f9      	bne.n	80127e0 <__atomic_store_8+0x3c>
 80127ec:	f3bf 8f5b 	dmb	ish
 80127f0:	b2c9      	uxtb	r1, r1
 80127f2:	2900      	cmp	r1, #0
 80127f4:	d1f4      	bne.n	80127e0 <__atomic_store_8+0x3c>
 80127f6:	e9c0 2300 	strd	r2, r3, [r0]
 80127fa:	f3bf 8f5b 	dmb	ish
 80127fe:	f805 100e 	strb.w	r1, [r5, lr]
 8012802:	bd70      	pop	{r4, r5, r6, pc}
 8012804:	27d4eb2d 	.word	0x27d4eb2d
 8012808:	20010bcc 	.word	0x20010bcc
 801280c:	b21642c9 	.word	0xb21642c9

08012810 <__atomic_exchange_8>:
 8012810:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 8012814:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 8012818:	4916      	ldr	r1, [pc, #88]	@ (8012874 <__atomic_exchange_8+0x64>)
 801281a:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 801281e:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 8012822:	fb01 fc0c 	mul.w	ip, r1, ip
 8012826:	4914      	ldr	r1, [pc, #80]	@ (8012878 <__atomic_exchange_8+0x68>)
 8012828:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 801282c:	b570      	push	{r4, r5, r6, lr}
 801282e:	4605      	mov	r5, r0
 8012830:	fba1 010c 	umull	r0, r1, r1, ip
 8012834:	0909      	lsrs	r1, r1, #4
 8012836:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 801283a:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 801283e:	4e0f      	ldr	r6, [pc, #60]	@ (801287c <__atomic_exchange_8+0x6c>)
 8012840:	ebac 0c01 	sub.w	ip, ip, r1
 8012844:	eb06 010c 	add.w	r1, r6, ip
 8012848:	f04f 0e01 	mov.w	lr, #1
 801284c:	e8d1 4f4f 	ldrexb	r4, [r1]
 8012850:	e8c1 ef40 	strexb	r0, lr, [r1]
 8012854:	2800      	cmp	r0, #0
 8012856:	d1f9      	bne.n	801284c <__atomic_exchange_8+0x3c>
 8012858:	f3bf 8f5b 	dmb	ish
 801285c:	b2e4      	uxtb	r4, r4
 801285e:	2c00      	cmp	r4, #0
 8012860:	d1f4      	bne.n	801284c <__atomic_exchange_8+0x3c>
 8012862:	e9d5 0100 	ldrd	r0, r1, [r5]
 8012866:	e9c5 2300 	strd	r2, r3, [r5]
 801286a:	f3bf 8f5b 	dmb	ish
 801286e:	f806 400c 	strb.w	r4, [r6, ip]
 8012872:	bd70      	pop	{r4, r5, r6, pc}
 8012874:	27d4eb2d 	.word	0x27d4eb2d
 8012878:	b21642c9 	.word	0xb21642c9
 801287c:	20010bcc 	.word	0x20010bcc

08012880 <rcutils_is_directory>:
 8012880:	2000      	movs	r0, #0
 8012882:	4770      	bx	lr

08012884 <rcutils_join_path>:
 8012884:	b082      	sub	sp, #8
 8012886:	e88d 000c 	stmia.w	sp, {r2, r3}
 801288a:	2000      	movs	r0, #0
 801288c:	b002      	add	sp, #8
 801288e:	4770      	bx	lr

08012890 <rcutils_to_native_path>:
 8012890:	b084      	sub	sp, #16
 8012892:	a801      	add	r0, sp, #4
 8012894:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8012898:	b004      	add	sp, #16
 801289a:	2000      	movs	r0, #0
 801289c:	4770      	bx	lr
 801289e:	bf00      	nop

080128a0 <rcutils_string_array_fini>:
 80128a0:	b320      	cbz	r0, 80128ec <rcutils_string_array_fini+0x4c>
 80128a2:	b570      	push	{r4, r5, r6, lr}
 80128a4:	4604      	mov	r4, r0
 80128a6:	6840      	ldr	r0, [r0, #4]
 80128a8:	b1d8      	cbz	r0, 80128e2 <rcutils_string_array_fini+0x42>
 80128aa:	f104 0008 	add.w	r0, r4, #8
 80128ae:	f7f8 ff6f 	bl	800b790 <rcutils_allocator_is_valid>
 80128b2:	b1b8      	cbz	r0, 80128e4 <rcutils_string_array_fini+0x44>
 80128b4:	6823      	ldr	r3, [r4, #0]
 80128b6:	b1bb      	cbz	r3, 80128e8 <rcutils_string_array_fini+0x48>
 80128b8:	2500      	movs	r5, #0
 80128ba:	6860      	ldr	r0, [r4, #4]
 80128bc:	462e      	mov	r6, r5
 80128be:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 80128c2:	68e3      	ldr	r3, [r4, #12]
 80128c4:	69a1      	ldr	r1, [r4, #24]
 80128c6:	4798      	blx	r3
 80128c8:	e9d4 3000 	ldrd	r3, r0, [r4]
 80128cc:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 80128d0:	3501      	adds	r5, #1
 80128d2:	429d      	cmp	r5, r3
 80128d4:	d3f3      	bcc.n	80128be <rcutils_string_array_fini+0x1e>
 80128d6:	68e3      	ldr	r3, [r4, #12]
 80128d8:	69a1      	ldr	r1, [r4, #24]
 80128da:	4798      	blx	r3
 80128dc:	2000      	movs	r0, #0
 80128de:	e9c4 0000 	strd	r0, r0, [r4]
 80128e2:	bd70      	pop	{r4, r5, r6, pc}
 80128e4:	200b      	movs	r0, #11
 80128e6:	bd70      	pop	{r4, r5, r6, pc}
 80128e8:	6860      	ldr	r0, [r4, #4]
 80128ea:	e7f4      	b.n	80128d6 <rcutils_string_array_fini+0x36>
 80128ec:	200b      	movs	r0, #11
 80128ee:	4770      	bx	lr

080128f0 <rcutils_get_zero_initialized_string_map>:
 80128f0:	4b01      	ldr	r3, [pc, #4]	@ (80128f8 <rcutils_get_zero_initialized_string_map+0x8>)
 80128f2:	2000      	movs	r0, #0
 80128f4:	6018      	str	r0, [r3, #0]
 80128f6:	4770      	bx	lr
 80128f8:	20010be4 	.word	0x20010be4

080128fc <rcutils_string_map_reserve>:
 80128fc:	2800      	cmp	r0, #0
 80128fe:	d05f      	beq.n	80129c0 <rcutils_string_map_reserve+0xc4>
 8012900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012904:	460c      	mov	r4, r1
 8012906:	6801      	ldr	r1, [r0, #0]
 8012908:	b082      	sub	sp, #8
 801290a:	4605      	mov	r5, r0
 801290c:	b129      	cbz	r1, 801291a <rcutils_string_map_reserve+0x1e>
 801290e:	68cb      	ldr	r3, [r1, #12]
 8012910:	42a3      	cmp	r3, r4
 8012912:	d906      	bls.n	8012922 <rcutils_string_map_reserve+0x26>
 8012914:	461c      	mov	r4, r3
 8012916:	2900      	cmp	r1, #0
 8012918:	d1f9      	bne.n	801290e <rcutils_string_map_reserve+0x12>
 801291a:	201f      	movs	r0, #31
 801291c:	b002      	add	sp, #8
 801291e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012922:	688b      	ldr	r3, [r1, #8]
 8012924:	42a3      	cmp	r3, r4
 8012926:	d047      	beq.n	80129b8 <rcutils_string_map_reserve+0xbc>
 8012928:	6a0e      	ldr	r6, [r1, #32]
 801292a:	2c00      	cmp	r4, #0
 801292c:	d034      	beq.n	8012998 <rcutils_string_map_reserve+0x9c>
 801292e:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8012932:	d243      	bcs.n	80129bc <rcutils_string_map_reserve+0xc0>
 8012934:	00a7      	lsls	r7, r4, #2
 8012936:	f8d1 8018 	ldr.w	r8, [r1, #24]
 801293a:	6808      	ldr	r0, [r1, #0]
 801293c:	4632      	mov	r2, r6
 801293e:	4639      	mov	r1, r7
 8012940:	47c0      	blx	r8
 8012942:	2800      	cmp	r0, #0
 8012944:	d03a      	beq.n	80129bc <rcutils_string_map_reserve+0xc0>
 8012946:	682b      	ldr	r3, [r5, #0]
 8012948:	4632      	mov	r2, r6
 801294a:	6018      	str	r0, [r3, #0]
 801294c:	4639      	mov	r1, r7
 801294e:	6858      	ldr	r0, [r3, #4]
 8012950:	47c0      	blx	r8
 8012952:	2800      	cmp	r0, #0
 8012954:	d032      	beq.n	80129bc <rcutils_string_map_reserve+0xc0>
 8012956:	682d      	ldr	r5, [r5, #0]
 8012958:	68ab      	ldr	r3, [r5, #8]
 801295a:	6068      	str	r0, [r5, #4]
 801295c:	42a3      	cmp	r3, r4
 801295e:	d226      	bcs.n	80129ae <rcutils_string_map_reserve+0xb2>
 8012960:	682a      	ldr	r2, [r5, #0]
 8012962:	eb00 0c07 	add.w	ip, r0, r7
 8012966:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 801296a:	45e6      	cmp	lr, ip
 801296c:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8012970:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8012974:	d203      	bcs.n	801297e <rcutils_string_map_reserve+0x82>
 8012976:	eb02 0c07 	add.w	ip, r2, r7
 801297a:	4566      	cmp	r6, ip
 801297c:	d322      	bcc.n	80129c4 <rcutils_string_map_reserve+0xc8>
 801297e:	1ae3      	subs	r3, r4, r3
 8012980:	009a      	lsls	r2, r3, #2
 8012982:	4670      	mov	r0, lr
 8012984:	2100      	movs	r1, #0
 8012986:	9201      	str	r2, [sp, #4]
 8012988:	f005 f94e 	bl	8017c28 <memset>
 801298c:	9a01      	ldr	r2, [sp, #4]
 801298e:	2100      	movs	r1, #0
 8012990:	4630      	mov	r0, r6
 8012992:	f005 f949 	bl	8017c28 <memset>
 8012996:	e00a      	b.n	80129ae <rcutils_string_map_reserve+0xb2>
 8012998:	694f      	ldr	r7, [r1, #20]
 801299a:	6808      	ldr	r0, [r1, #0]
 801299c:	4631      	mov	r1, r6
 801299e:	47b8      	blx	r7
 80129a0:	682b      	ldr	r3, [r5, #0]
 80129a2:	4631      	mov	r1, r6
 80129a4:	6858      	ldr	r0, [r3, #4]
 80129a6:	601c      	str	r4, [r3, #0]
 80129a8:	47b8      	blx	r7
 80129aa:	682d      	ldr	r5, [r5, #0]
 80129ac:	606c      	str	r4, [r5, #4]
 80129ae:	2000      	movs	r0, #0
 80129b0:	60ac      	str	r4, [r5, #8]
 80129b2:	b002      	add	sp, #8
 80129b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80129b8:	2000      	movs	r0, #0
 80129ba:	e7af      	b.n	801291c <rcutils_string_map_reserve+0x20>
 80129bc:	200a      	movs	r0, #10
 80129be:	e7ad      	b.n	801291c <rcutils_string_map_reserve+0x20>
 80129c0:	200b      	movs	r0, #11
 80129c2:	4770      	bx	lr
 80129c4:	1f0b      	subs	r3, r1, #4
 80129c6:	4418      	add	r0, r3
 80129c8:	4413      	add	r3, r2
 80129ca:	3a04      	subs	r2, #4
 80129cc:	4417      	add	r7, r2
 80129ce:	2200      	movs	r2, #0
 80129d0:	f843 2f04 	str.w	r2, [r3, #4]!
 80129d4:	42bb      	cmp	r3, r7
 80129d6:	f840 2f04 	str.w	r2, [r0, #4]!
 80129da:	d1f9      	bne.n	80129d0 <rcutils_string_map_reserve+0xd4>
 80129dc:	e7e7      	b.n	80129ae <rcutils_string_map_reserve+0xb2>
 80129de:	bf00      	nop

080129e0 <rcutils_string_map_init>:
 80129e0:	b082      	sub	sp, #8
 80129e2:	b570      	push	{r4, r5, r6, lr}
 80129e4:	ac04      	add	r4, sp, #16
 80129e6:	e884 000c 	stmia.w	r4, {r2, r3}
 80129ea:	b380      	cbz	r0, 8012a4e <rcutils_string_map_init+0x6e>
 80129ec:	6806      	ldr	r6, [r0, #0]
 80129ee:	4604      	mov	r4, r0
 80129f0:	b12e      	cbz	r6, 80129fe <rcutils_string_map_init+0x1e>
 80129f2:	251e      	movs	r5, #30
 80129f4:	4628      	mov	r0, r5
 80129f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80129fa:	b002      	add	sp, #8
 80129fc:	4770      	bx	lr
 80129fe:	a804      	add	r0, sp, #16
 8012a00:	460d      	mov	r5, r1
 8012a02:	f7f8 fec5 	bl	800b790 <rcutils_allocator_is_valid>
 8012a06:	b310      	cbz	r0, 8012a4e <rcutils_string_map_init+0x6e>
 8012a08:	9b04      	ldr	r3, [sp, #16]
 8012a0a:	9908      	ldr	r1, [sp, #32]
 8012a0c:	2024      	movs	r0, #36	@ 0x24
 8012a0e:	4798      	blx	r3
 8012a10:	6020      	str	r0, [r4, #0]
 8012a12:	b310      	cbz	r0, 8012a5a <rcutils_string_map_init+0x7a>
 8012a14:	f10d 0e10 	add.w	lr, sp, #16
 8012a18:	e9c0 6600 	strd	r6, r6, [r0]
 8012a1c:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8012a20:	f100 0c10 	add.w	ip, r0, #16
 8012a24:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012a28:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012a2c:	f8de 3000 	ldr.w	r3, [lr]
 8012a30:	f8cc 3000 	str.w	r3, [ip]
 8012a34:	4629      	mov	r1, r5
 8012a36:	4620      	mov	r0, r4
 8012a38:	f7ff ff60 	bl	80128fc <rcutils_string_map_reserve>
 8012a3c:	4605      	mov	r5, r0
 8012a3e:	2800      	cmp	r0, #0
 8012a40:	d0d8      	beq.n	80129f4 <rcutils_string_map_init+0x14>
 8012a42:	9b05      	ldr	r3, [sp, #20]
 8012a44:	9908      	ldr	r1, [sp, #32]
 8012a46:	6820      	ldr	r0, [r4, #0]
 8012a48:	4798      	blx	r3
 8012a4a:	6026      	str	r6, [r4, #0]
 8012a4c:	e7d2      	b.n	80129f4 <rcutils_string_map_init+0x14>
 8012a4e:	250b      	movs	r5, #11
 8012a50:	4628      	mov	r0, r5
 8012a52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012a56:	b002      	add	sp, #8
 8012a58:	4770      	bx	lr
 8012a5a:	250a      	movs	r5, #10
 8012a5c:	e7ca      	b.n	80129f4 <rcutils_string_map_init+0x14>
 8012a5e:	bf00      	nop

08012a60 <rcutils_string_map_fini>:
 8012a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a64:	b082      	sub	sp, #8
 8012a66:	2800      	cmp	r0, #0
 8012a68:	d03a      	beq.n	8012ae0 <rcutils_string_map_fini+0x80>
 8012a6a:	6804      	ldr	r4, [r0, #0]
 8012a6c:	4606      	mov	r6, r0
 8012a6e:	2c00      	cmp	r4, #0
 8012a70:	d032      	beq.n	8012ad8 <rcutils_string_map_fini+0x78>
 8012a72:	68a3      	ldr	r3, [r4, #8]
 8012a74:	b32b      	cbz	r3, 8012ac2 <rcutils_string_map_fini+0x62>
 8012a76:	2500      	movs	r5, #0
 8012a78:	6822      	ldr	r2, [r4, #0]
 8012a7a:	462f      	mov	r7, r5
 8012a7c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8012a80:	b1e0      	cbz	r0, 8012abc <rcutils_string_map_fini+0x5c>
 8012a82:	6a21      	ldr	r1, [r4, #32]
 8012a84:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8012a88:	9101      	str	r1, [sp, #4]
 8012a8a:	47c0      	blx	r8
 8012a8c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8012a90:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8012a94:	9901      	ldr	r1, [sp, #4]
 8012a96:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012a9a:	47c0      	blx	r8
 8012a9c:	68e3      	ldr	r3, [r4, #12]
 8012a9e:	6862      	ldr	r2, [r4, #4]
 8012aa0:	3b01      	subs	r3, #1
 8012aa2:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8012aa6:	60e3      	str	r3, [r4, #12]
 8012aa8:	6834      	ldr	r4, [r6, #0]
 8012aaa:	68a3      	ldr	r3, [r4, #8]
 8012aac:	3501      	adds	r5, #1
 8012aae:	429d      	cmp	r5, r3
 8012ab0:	d207      	bcs.n	8012ac2 <rcutils_string_map_fini+0x62>
 8012ab2:	6822      	ldr	r2, [r4, #0]
 8012ab4:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8012ab8:	2800      	cmp	r0, #0
 8012aba:	d1e2      	bne.n	8012a82 <rcutils_string_map_fini+0x22>
 8012abc:	3501      	adds	r5, #1
 8012abe:	429d      	cmp	r5, r3
 8012ac0:	d3dc      	bcc.n	8012a7c <rcutils_string_map_fini+0x1c>
 8012ac2:	2100      	movs	r1, #0
 8012ac4:	4630      	mov	r0, r6
 8012ac6:	f7ff ff19 	bl	80128fc <rcutils_string_map_reserve>
 8012aca:	4604      	mov	r4, r0
 8012acc:	b920      	cbnz	r0, 8012ad8 <rcutils_string_map_fini+0x78>
 8012ace:	6830      	ldr	r0, [r6, #0]
 8012ad0:	6943      	ldr	r3, [r0, #20]
 8012ad2:	6a01      	ldr	r1, [r0, #32]
 8012ad4:	4798      	blx	r3
 8012ad6:	6034      	str	r4, [r6, #0]
 8012ad8:	4620      	mov	r0, r4
 8012ada:	b002      	add	sp, #8
 8012adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ae0:	240b      	movs	r4, #11
 8012ae2:	4620      	mov	r0, r4
 8012ae4:	b002      	add	sp, #8
 8012ae6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012aea:	bf00      	nop

08012aec <rcutils_string_map_getn>:
 8012aec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012af0:	b300      	cbz	r0, 8012b34 <rcutils_string_map_getn+0x48>
 8012af2:	6807      	ldr	r7, [r0, #0]
 8012af4:	b1ff      	cbz	r7, 8012b36 <rcutils_string_map_getn+0x4a>
 8012af6:	4688      	mov	r8, r1
 8012af8:	b1e1      	cbz	r1, 8012b34 <rcutils_string_map_getn+0x48>
 8012afa:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8012afe:	683e      	ldr	r6, [r7, #0]
 8012b00:	f1ba 0f00 	cmp.w	sl, #0
 8012b04:	d016      	beq.n	8012b34 <rcutils_string_map_getn+0x48>
 8012b06:	4691      	mov	r9, r2
 8012b08:	3e04      	subs	r6, #4
 8012b0a:	2400      	movs	r4, #0
 8012b0c:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8012b10:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8012b14:	4628      	mov	r0, r5
 8012b16:	3401      	adds	r4, #1
 8012b18:	b155      	cbz	r5, 8012b30 <rcutils_string_map_getn+0x44>
 8012b1a:	f7ed fbd9 	bl	80002d0 <strlen>
 8012b1e:	4548      	cmp	r0, r9
 8012b20:	4602      	mov	r2, r0
 8012b22:	4629      	mov	r1, r5
 8012b24:	bf38      	it	cc
 8012b26:	464a      	movcc	r2, r9
 8012b28:	4640      	mov	r0, r8
 8012b2a:	f005 f892 	bl	8017c52 <strncmp>
 8012b2e:	b128      	cbz	r0, 8012b3c <rcutils_string_map_getn+0x50>
 8012b30:	45a2      	cmp	sl, r4
 8012b32:	d1eb      	bne.n	8012b0c <rcutils_string_map_getn+0x20>
 8012b34:	2700      	movs	r7, #0
 8012b36:	4638      	mov	r0, r7
 8012b38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	f853 700b 	ldr.w	r7, [r3, fp]
 8012b42:	4638      	mov	r0, r7
 8012b44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012b48 <rmw_get_zero_initialized_context>:
 8012b48:	b510      	push	{r4, lr}
 8012b4a:	4604      	mov	r4, r0
 8012b4c:	3010      	adds	r0, #16
 8012b4e:	f000 f80b 	bl	8012b68 <rmw_get_zero_initialized_init_options>
 8012b52:	2300      	movs	r3, #0
 8012b54:	2000      	movs	r0, #0
 8012b56:	2100      	movs	r1, #0
 8012b58:	e9c4 0100 	strd	r0, r1, [r4]
 8012b5c:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 8012b60:	60a3      	str	r3, [r4, #8]
 8012b62:	4620      	mov	r0, r4
 8012b64:	bd10      	pop	{r4, pc}
 8012b66:	bf00      	nop

08012b68 <rmw_get_zero_initialized_init_options>:
 8012b68:	b510      	push	{r4, lr}
 8012b6a:	2238      	movs	r2, #56	@ 0x38
 8012b6c:	4604      	mov	r4, r0
 8012b6e:	2100      	movs	r1, #0
 8012b70:	f005 f85a 	bl	8017c28 <memset>
 8012b74:	f104 0010 	add.w	r0, r4, #16
 8012b78:	f000 f806 	bl	8012b88 <rmw_get_default_security_options>
 8012b7c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012b80:	60e3      	str	r3, [r4, #12]
 8012b82:	4620      	mov	r0, r4
 8012b84:	bd10      	pop	{r4, pc}
 8012b86:	bf00      	nop

08012b88 <rmw_get_default_security_options>:
 8012b88:	2200      	movs	r2, #0
 8012b8a:	7002      	strb	r2, [r0, #0]
 8012b8c:	6042      	str	r2, [r0, #4]
 8012b8e:	4770      	bx	lr

08012b90 <rmw_time_equal>:
 8012b90:	b4f0      	push	{r4, r5, r6, r7}
 8012b92:	b084      	sub	sp, #16
 8012b94:	ac04      	add	r4, sp, #16
 8012b96:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8012b9a:	4603      	mov	r3, r0
 8012b9c:	4924      	ldr	r1, [pc, #144]	@ (8012c30 <rmw_time_equal+0xa0>)
 8012b9e:	9e03      	ldr	r6, [sp, #12]
 8012ba0:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8012ba4:	2202      	movs	r2, #2
 8012ba6:	4299      	cmp	r1, r3
 8012ba8:	41aa      	sbcs	r2, r5
 8012baa:	d330      	bcc.n	8012c0e <rmw_time_equal+0x7e>
 8012bac:	4c21      	ldr	r4, [pc, #132]	@ (8012c34 <rmw_time_equal+0xa4>)
 8012bae:	fba3 3204 	umull	r3, r2, r3, r4
 8012bb2:	fb04 2205 	mla	r2, r4, r5, r2
 8012bb6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012bba:	43dd      	mvns	r5, r3
 8012bbc:	1a8c      	subs	r4, r1, r2
 8012bbe:	4285      	cmp	r5, r0
 8012bc0:	41b4      	sbcs	r4, r6
 8012bc2:	d332      	bcc.n	8012c2a <rmw_time_equal+0x9a>
 8012bc4:	eb10 0c03 	adds.w	ip, r0, r3
 8012bc8:	eb42 0106 	adc.w	r1, r2, r6
 8012bcc:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8012bd0:	4817      	ldr	r0, [pc, #92]	@ (8012c30 <rmw_time_equal+0xa0>)
 8012bd2:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8012bd4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8012bd6:	2202      	movs	r2, #2
 8012bd8:	4298      	cmp	r0, r3
 8012bda:	41b2      	sbcs	r2, r6
 8012bdc:	d31c      	bcc.n	8012c18 <rmw_time_equal+0x88>
 8012bde:	4c15      	ldr	r4, [pc, #84]	@ (8012c34 <rmw_time_equal+0xa4>)
 8012be0:	fba3 3204 	umull	r3, r2, r3, r4
 8012be4:	fb04 2206 	mla	r2, r4, r6, r2
 8012be8:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8012bec:	43de      	mvns	r6, r3
 8012bee:	1a84      	subs	r4, r0, r2
 8012bf0:	42ae      	cmp	r6, r5
 8012bf2:	41bc      	sbcs	r4, r7
 8012bf4:	d315      	bcc.n	8012c22 <rmw_time_equal+0x92>
 8012bf6:	195b      	adds	r3, r3, r5
 8012bf8:	eb42 0207 	adc.w	r2, r2, r7
 8012bfc:	428a      	cmp	r2, r1
 8012bfe:	bf08      	it	eq
 8012c00:	4563      	cmpeq	r3, ip
 8012c02:	bf0c      	ite	eq
 8012c04:	2001      	moveq	r0, #1
 8012c06:	2000      	movne	r0, #0
 8012c08:	b004      	add	sp, #16
 8012c0a:	bcf0      	pop	{r4, r5, r6, r7}
 8012c0c:	4770      	bx	lr
 8012c0e:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8012c12:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012c16:	e7d9      	b.n	8012bcc <rmw_time_equal+0x3c>
 8012c18:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012c1c:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8012c20:	e7ec      	b.n	8012bfc <rmw_time_equal+0x6c>
 8012c22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012c26:	4602      	mov	r2, r0
 8012c28:	e7e8      	b.n	8012bfc <rmw_time_equal+0x6c>
 8012c2a:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8012c2e:	e7cd      	b.n	8012bcc <rmw_time_equal+0x3c>
 8012c30:	25c17d04 	.word	0x25c17d04
 8012c34:	3b9aca00 	.word	0x3b9aca00

08012c38 <rmw_time_total_nsec>:
 8012c38:	b470      	push	{r4, r5, r6}
 8012c3a:	b085      	sub	sp, #20
 8012c3c:	ac04      	add	r4, sp, #16
 8012c3e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8012c42:	4603      	mov	r3, r0
 8012c44:	4912      	ldr	r1, [pc, #72]	@ (8012c90 <rmw_time_total_nsec+0x58>)
 8012c46:	9e03      	ldr	r6, [sp, #12]
 8012c48:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8012c4c:	2202      	movs	r2, #2
 8012c4e:	4299      	cmp	r1, r3
 8012c50:	41aa      	sbcs	r2, r5
 8012c52:	d311      	bcc.n	8012c78 <rmw_time_total_nsec+0x40>
 8012c54:	4c0f      	ldr	r4, [pc, #60]	@ (8012c94 <rmw_time_total_nsec+0x5c>)
 8012c56:	fba3 3204 	umull	r3, r2, r3, r4
 8012c5a:	fb04 2205 	mla	r2, r4, r5, r2
 8012c5e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012c62:	43dd      	mvns	r5, r3
 8012c64:	1a8c      	subs	r4, r1, r2
 8012c66:	4285      	cmp	r5, r0
 8012c68:	41b4      	sbcs	r4, r6
 8012c6a:	d30c      	bcc.n	8012c86 <rmw_time_total_nsec+0x4e>
 8012c6c:	1818      	adds	r0, r3, r0
 8012c6e:	eb42 0106 	adc.w	r1, r2, r6
 8012c72:	b005      	add	sp, #20
 8012c74:	bc70      	pop	{r4, r5, r6}
 8012c76:	4770      	bx	lr
 8012c78:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012c7c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012c80:	b005      	add	sp, #20
 8012c82:	bc70      	pop	{r4, r5, r6}
 8012c84:	4770      	bx	lr
 8012c86:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012c8a:	b005      	add	sp, #20
 8012c8c:	bc70      	pop	{r4, r5, r6}
 8012c8e:	4770      	bx	lr
 8012c90:	25c17d04 	.word	0x25c17d04
 8012c94:	3b9aca00 	.word	0x3b9aca00

08012c98 <rmw_validate_full_topic_name>:
 8012c98:	2800      	cmp	r0, #0
 8012c9a:	d057      	beq.n	8012d4c <rmw_validate_full_topic_name+0xb4>
 8012c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ca0:	460d      	mov	r5, r1
 8012ca2:	2900      	cmp	r1, #0
 8012ca4:	d054      	beq.n	8012d50 <rmw_validate_full_topic_name+0xb8>
 8012ca6:	4616      	mov	r6, r2
 8012ca8:	4604      	mov	r4, r0
 8012caa:	f7ed fb11 	bl	80002d0 <strlen>
 8012cae:	b148      	cbz	r0, 8012cc4 <rmw_validate_full_topic_name+0x2c>
 8012cb0:	7823      	ldrb	r3, [r4, #0]
 8012cb2:	2b2f      	cmp	r3, #47	@ 0x2f
 8012cb4:	d00d      	beq.n	8012cd2 <rmw_validate_full_topic_name+0x3a>
 8012cb6:	2302      	movs	r3, #2
 8012cb8:	602b      	str	r3, [r5, #0]
 8012cba:	b13e      	cbz	r6, 8012ccc <rmw_validate_full_topic_name+0x34>
 8012cbc:	2000      	movs	r0, #0
 8012cbe:	6030      	str	r0, [r6, #0]
 8012cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012cc4:	2301      	movs	r3, #1
 8012cc6:	602b      	str	r3, [r5, #0]
 8012cc8:	2e00      	cmp	r6, #0
 8012cca:	d1f7      	bne.n	8012cbc <rmw_validate_full_topic_name+0x24>
 8012ccc:	2000      	movs	r0, #0
 8012cce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012cd2:	1e43      	subs	r3, r0, #1
 8012cd4:	5ce2      	ldrb	r2, [r4, r3]
 8012cd6:	2a2f      	cmp	r2, #47	@ 0x2f
 8012cd8:	d03c      	beq.n	8012d54 <rmw_validate_full_topic_name+0xbc>
 8012cda:	1e63      	subs	r3, r4, #1
 8012cdc:	eb03 0800 	add.w	r8, r3, r0
 8012ce0:	f1c4 0e01 	rsb	lr, r4, #1
 8012ce4:	eb0e 0703 	add.w	r7, lr, r3
 8012ce8:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8012cec:	f021 0220 	bic.w	r2, r1, #32
 8012cf0:	3a41      	subs	r2, #65	@ 0x41
 8012cf2:	2a19      	cmp	r2, #25
 8012cf4:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 8012cf8:	d90b      	bls.n	8012d12 <rmw_validate_full_topic_name+0x7a>
 8012cfa:	295f      	cmp	r1, #95	@ 0x5f
 8012cfc:	d009      	beq.n	8012d12 <rmw_validate_full_topic_name+0x7a>
 8012cfe:	f1bc 0f0a 	cmp.w	ip, #10
 8012d02:	d906      	bls.n	8012d12 <rmw_validate_full_topic_name+0x7a>
 8012d04:	2304      	movs	r3, #4
 8012d06:	602b      	str	r3, [r5, #0]
 8012d08:	2e00      	cmp	r6, #0
 8012d0a:	d0df      	beq.n	8012ccc <rmw_validate_full_topic_name+0x34>
 8012d0c:	6037      	str	r7, [r6, #0]
 8012d0e:	2000      	movs	r0, #0
 8012d10:	e7d6      	b.n	8012cc0 <rmw_validate_full_topic_name+0x28>
 8012d12:	4543      	cmp	r3, r8
 8012d14:	d1e6      	bne.n	8012ce4 <rmw_validate_full_topic_name+0x4c>
 8012d16:	4f1a      	ldr	r7, [pc, #104]	@ (8012d80 <rmw_validate_full_topic_name+0xe8>)
 8012d18:	2301      	movs	r3, #1
 8012d1a:	e004      	b.n	8012d26 <rmw_validate_full_topic_name+0x8e>
 8012d1c:	4298      	cmp	r0, r3
 8012d1e:	f104 0401 	add.w	r4, r4, #1
 8012d22:	d91c      	bls.n	8012d5e <rmw_validate_full_topic_name+0xc6>
 8012d24:	4613      	mov	r3, r2
 8012d26:	4298      	cmp	r0, r3
 8012d28:	f103 0201 	add.w	r2, r3, #1
 8012d2c:	d0f6      	beq.n	8012d1c <rmw_validate_full_topic_name+0x84>
 8012d2e:	7821      	ldrb	r1, [r4, #0]
 8012d30:	292f      	cmp	r1, #47	@ 0x2f
 8012d32:	d1f3      	bne.n	8012d1c <rmw_validate_full_topic_name+0x84>
 8012d34:	7861      	ldrb	r1, [r4, #1]
 8012d36:	292f      	cmp	r1, #47	@ 0x2f
 8012d38:	d01c      	beq.n	8012d74 <rmw_validate_full_topic_name+0xdc>
 8012d3a:	5dc9      	ldrb	r1, [r1, r7]
 8012d3c:	0749      	lsls	r1, r1, #29
 8012d3e:	d5ed      	bpl.n	8012d1c <rmw_validate_full_topic_name+0x84>
 8012d40:	2206      	movs	r2, #6
 8012d42:	602a      	str	r2, [r5, #0]
 8012d44:	2e00      	cmp	r6, #0
 8012d46:	d0c1      	beq.n	8012ccc <rmw_validate_full_topic_name+0x34>
 8012d48:	6033      	str	r3, [r6, #0]
 8012d4a:	e7bf      	b.n	8012ccc <rmw_validate_full_topic_name+0x34>
 8012d4c:	200b      	movs	r0, #11
 8012d4e:	4770      	bx	lr
 8012d50:	200b      	movs	r0, #11
 8012d52:	e7b5      	b.n	8012cc0 <rmw_validate_full_topic_name+0x28>
 8012d54:	2203      	movs	r2, #3
 8012d56:	602a      	str	r2, [r5, #0]
 8012d58:	2e00      	cmp	r6, #0
 8012d5a:	d1f5      	bne.n	8012d48 <rmw_validate_full_topic_name+0xb0>
 8012d5c:	e7b6      	b.n	8012ccc <rmw_validate_full_topic_name+0x34>
 8012d5e:	28f7      	cmp	r0, #247	@ 0xf7
 8012d60:	d802      	bhi.n	8012d68 <rmw_validate_full_topic_name+0xd0>
 8012d62:	2000      	movs	r0, #0
 8012d64:	6028      	str	r0, [r5, #0]
 8012d66:	e7ab      	b.n	8012cc0 <rmw_validate_full_topic_name+0x28>
 8012d68:	2307      	movs	r3, #7
 8012d6a:	602b      	str	r3, [r5, #0]
 8012d6c:	2e00      	cmp	r6, #0
 8012d6e:	d0ad      	beq.n	8012ccc <rmw_validate_full_topic_name+0x34>
 8012d70:	23f6      	movs	r3, #246	@ 0xf6
 8012d72:	e7e9      	b.n	8012d48 <rmw_validate_full_topic_name+0xb0>
 8012d74:	2205      	movs	r2, #5
 8012d76:	602a      	str	r2, [r5, #0]
 8012d78:	2e00      	cmp	r6, #0
 8012d7a:	d1e5      	bne.n	8012d48 <rmw_validate_full_topic_name+0xb0>
 8012d7c:	e7a6      	b.n	8012ccc <rmw_validate_full_topic_name+0x34>
 8012d7e:	bf00      	nop
 8012d80:	0801aabe 	.word	0x0801aabe

08012d84 <get_memory>:
 8012d84:	4603      	mov	r3, r0
 8012d86:	6840      	ldr	r0, [r0, #4]
 8012d88:	b158      	cbz	r0, 8012da2 <get_memory+0x1e>
 8012d8a:	6842      	ldr	r2, [r0, #4]
 8012d8c:	605a      	str	r2, [r3, #4]
 8012d8e:	b10a      	cbz	r2, 8012d94 <get_memory+0x10>
 8012d90:	2100      	movs	r1, #0
 8012d92:	6011      	str	r1, [r2, #0]
 8012d94:	681a      	ldr	r2, [r3, #0]
 8012d96:	6042      	str	r2, [r0, #4]
 8012d98:	b102      	cbz	r2, 8012d9c <get_memory+0x18>
 8012d9a:	6010      	str	r0, [r2, #0]
 8012d9c:	2200      	movs	r2, #0
 8012d9e:	6002      	str	r2, [r0, #0]
 8012da0:	6018      	str	r0, [r3, #0]
 8012da2:	4770      	bx	lr

08012da4 <put_memory>:
 8012da4:	680b      	ldr	r3, [r1, #0]
 8012da6:	b10b      	cbz	r3, 8012dac <put_memory+0x8>
 8012da8:	684a      	ldr	r2, [r1, #4]
 8012daa:	605a      	str	r2, [r3, #4]
 8012dac:	684a      	ldr	r2, [r1, #4]
 8012dae:	b102      	cbz	r2, 8012db2 <put_memory+0xe>
 8012db0:	6013      	str	r3, [r2, #0]
 8012db2:	6803      	ldr	r3, [r0, #0]
 8012db4:	428b      	cmp	r3, r1
 8012db6:	6843      	ldr	r3, [r0, #4]
 8012db8:	bf08      	it	eq
 8012dba:	6002      	streq	r2, [r0, #0]
 8012dbc:	604b      	str	r3, [r1, #4]
 8012dbe:	b103      	cbz	r3, 8012dc2 <put_memory+0x1e>
 8012dc0:	6019      	str	r1, [r3, #0]
 8012dc2:	2300      	movs	r3, #0
 8012dc4:	600b      	str	r3, [r1, #0]
 8012dc6:	6041      	str	r1, [r0, #4]
 8012dc8:	4770      	bx	lr
 8012dca:	bf00      	nop

08012dcc <rmw_destroy_client>:
 8012dcc:	b570      	push	{r4, r5, r6, lr}
 8012dce:	b128      	cbz	r0, 8012ddc <rmw_destroy_client+0x10>
 8012dd0:	4604      	mov	r4, r0
 8012dd2:	6800      	ldr	r0, [r0, #0]
 8012dd4:	460d      	mov	r5, r1
 8012dd6:	f7f9 ffe1 	bl	800cd9c <is_uxrce_rmw_identifier_valid>
 8012dda:	b910      	cbnz	r0, 8012de2 <rmw_destroy_client+0x16>
 8012ddc:	2401      	movs	r4, #1
 8012dde:	4620      	mov	r0, r4
 8012de0:	bd70      	pop	{r4, r5, r6, pc}
 8012de2:	6863      	ldr	r3, [r4, #4]
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	d0f9      	beq.n	8012ddc <rmw_destroy_client+0x10>
 8012de8:	2d00      	cmp	r5, #0
 8012dea:	d0f7      	beq.n	8012ddc <rmw_destroy_client+0x10>
 8012dec:	6828      	ldr	r0, [r5, #0]
 8012dee:	f7f9 ffd5 	bl	800cd9c <is_uxrce_rmw_identifier_valid>
 8012df2:	2800      	cmp	r0, #0
 8012df4:	d0f2      	beq.n	8012ddc <rmw_destroy_client+0x10>
 8012df6:	686e      	ldr	r6, [r5, #4]
 8012df8:	2e00      	cmp	r6, #0
 8012dfa:	d0ef      	beq.n	8012ddc <rmw_destroy_client+0x10>
 8012dfc:	6864      	ldr	r4, [r4, #4]
 8012dfe:	6932      	ldr	r2, [r6, #16]
 8012e00:	6920      	ldr	r0, [r4, #16]
 8012e02:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8012e06:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012e0a:	6819      	ldr	r1, [r3, #0]
 8012e0c:	f7fa fbf8 	bl	800d600 <uxr_buffer_cancel_data>
 8012e10:	4602      	mov	r2, r0
 8012e12:	6920      	ldr	r0, [r4, #16]
 8012e14:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8012e18:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8012e1c:	f7f9 ff3e 	bl	800cc9c <run_xrce_session>
 8012e20:	6920      	ldr	r0, [r4, #16]
 8012e22:	6932      	ldr	r2, [r6, #16]
 8012e24:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8012e28:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012e2c:	6819      	ldr	r1, [r3, #0]
 8012e2e:	f7fa f97b 	bl	800d128 <uxr_buffer_delete_entity>
 8012e32:	4602      	mov	r2, r0
 8012e34:	6920      	ldr	r0, [r4, #16]
 8012e36:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8012e3a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8012e3e:	f7f9 ff2d 	bl	800cc9c <run_xrce_session>
 8012e42:	2800      	cmp	r0, #0
 8012e44:	4628      	mov	r0, r5
 8012e46:	bf14      	ite	ne
 8012e48:	2400      	movne	r4, #0
 8012e4a:	2402      	moveq	r4, #2
 8012e4c:	f7f9 fe0e 	bl	800ca6c <rmw_uxrce_fini_client_memory>
 8012e50:	e7c5      	b.n	8012dde <rmw_destroy_client+0x12>
 8012e52:	bf00      	nop

08012e54 <rmw_get_implementation_identifier>:
 8012e54:	4b01      	ldr	r3, [pc, #4]	@ (8012e5c <rmw_get_implementation_identifier+0x8>)
 8012e56:	6818      	ldr	r0, [r3, #0]
 8012e58:	4770      	bx	lr
 8012e5a:	bf00      	nop
 8012e5c:	0801a70c 	.word	0x0801a70c

08012e60 <rmw_create_guard_condition>:
 8012e60:	b538      	push	{r3, r4, r5, lr}
 8012e62:	4605      	mov	r5, r0
 8012e64:	4807      	ldr	r0, [pc, #28]	@ (8012e84 <rmw_create_guard_condition+0x24>)
 8012e66:	f7ff ff8d 	bl	8012d84 <get_memory>
 8012e6a:	b148      	cbz	r0, 8012e80 <rmw_create_guard_condition+0x20>
 8012e6c:	6884      	ldr	r4, [r0, #8]
 8012e6e:	2300      	movs	r3, #0
 8012e70:	7423      	strb	r3, [r4, #16]
 8012e72:	61e5      	str	r5, [r4, #28]
 8012e74:	f7ff ffee 	bl	8012e54 <rmw_get_implementation_identifier>
 8012e78:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8012e7c:	f104 0014 	add.w	r0, r4, #20
 8012e80:	bd38      	pop	{r3, r4, r5, pc}
 8012e82:	bf00      	nop
 8012e84:	20010b14 	.word	0x20010b14

08012e88 <rmw_destroy_guard_condition>:
 8012e88:	b508      	push	{r3, lr}
 8012e8a:	4b08      	ldr	r3, [pc, #32]	@ (8012eac <rmw_destroy_guard_condition+0x24>)
 8012e8c:	6819      	ldr	r1, [r3, #0]
 8012e8e:	b911      	cbnz	r1, 8012e96 <rmw_destroy_guard_condition+0xe>
 8012e90:	e00a      	b.n	8012ea8 <rmw_destroy_guard_condition+0x20>
 8012e92:	6849      	ldr	r1, [r1, #4]
 8012e94:	b141      	cbz	r1, 8012ea8 <rmw_destroy_guard_condition+0x20>
 8012e96:	688b      	ldr	r3, [r1, #8]
 8012e98:	3314      	adds	r3, #20
 8012e9a:	4298      	cmp	r0, r3
 8012e9c:	d1f9      	bne.n	8012e92 <rmw_destroy_guard_condition+0xa>
 8012e9e:	4803      	ldr	r0, [pc, #12]	@ (8012eac <rmw_destroy_guard_condition+0x24>)
 8012ea0:	f7ff ff80 	bl	8012da4 <put_memory>
 8012ea4:	2000      	movs	r0, #0
 8012ea6:	bd08      	pop	{r3, pc}
 8012ea8:	2001      	movs	r0, #1
 8012eaa:	bd08      	pop	{r3, pc}
 8012eac:	20010b14 	.word	0x20010b14

08012eb0 <rmw_init_options_init>:
 8012eb0:	b084      	sub	sp, #16
 8012eb2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012eb4:	b083      	sub	sp, #12
 8012eb6:	ad09      	add	r5, sp, #36	@ 0x24
 8012eb8:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8012ebc:	b130      	cbz	r0, 8012ecc <rmw_init_options_init+0x1c>
 8012ebe:	4604      	mov	r4, r0
 8012ec0:	4628      	mov	r0, r5
 8012ec2:	f7f8 fc65 	bl	800b790 <rcutils_allocator_is_valid>
 8012ec6:	b108      	cbz	r0, 8012ecc <rmw_init_options_init+0x1c>
 8012ec8:	68a6      	ldr	r6, [r4, #8]
 8012eca:	b12e      	cbz	r6, 8012ed8 <rmw_init_options_init+0x28>
 8012ecc:	200b      	movs	r0, #11
 8012ece:	b003      	add	sp, #12
 8012ed0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012ed4:	b004      	add	sp, #16
 8012ed6:	4770      	bx	lr
 8012ed8:	2200      	movs	r2, #0
 8012eda:	2300      	movs	r3, #0
 8012edc:	e9c4 2300 	strd	r2, r3, [r4]
 8012ee0:	4b22      	ldr	r3, [pc, #136]	@ (8012f6c <rmw_init_options_init+0xbc>)
 8012ee2:	f8df e098 	ldr.w	lr, [pc, #152]	@ 8012f7c <rmw_init_options_init+0xcc>
 8012ee6:	681b      	ldr	r3, [r3, #0]
 8012ee8:	60a3      	str	r3, [r4, #8]
 8012eea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012eec:	f104 0c20 	add.w	ip, r4, #32
 8012ef0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012ef4:	466f      	mov	r7, sp
 8012ef6:	682b      	ldr	r3, [r5, #0]
 8012ef8:	f8cc 3000 	str.w	r3, [ip]
 8012efc:	4638      	mov	r0, r7
 8012efe:	f8c4 e01c 	str.w	lr, [r4, #28]
 8012f02:	60e6      	str	r6, [r4, #12]
 8012f04:	f7ff fe40 	bl	8012b88 <rmw_get_default_security_options>
 8012f08:	e897 0003 	ldmia.w	r7, {r0, r1}
 8012f0c:	f104 0310 	add.w	r3, r4, #16
 8012f10:	e883 0003 	stmia.w	r3, {r0, r1}
 8012f14:	2203      	movs	r2, #3
 8012f16:	4816      	ldr	r0, [pc, #88]	@ (8012f70 <rmw_init_options_init+0xc0>)
 8012f18:	4916      	ldr	r1, [pc, #88]	@ (8012f74 <rmw_init_options_init+0xc4>)
 8012f1a:	7626      	strb	r6, [r4, #24]
 8012f1c:	f7f9 fce6 	bl	800c8ec <rmw_uxrce_init_init_options_impl_memory>
 8012f20:	4813      	ldr	r0, [pc, #76]	@ (8012f70 <rmw_init_options_init+0xc0>)
 8012f22:	f7ff ff2f 	bl	8012d84 <get_memory>
 8012f26:	b1f0      	cbz	r0, 8012f66 <rmw_init_options_init+0xb6>
 8012f28:	4a13      	ldr	r2, [pc, #76]	@ (8012f78 <rmw_init_options_init+0xc8>)
 8012f2a:	6883      	ldr	r3, [r0, #8]
 8012f2c:	6851      	ldr	r1, [r2, #4]
 8012f2e:	7810      	ldrb	r0, [r2, #0]
 8012f30:	6363      	str	r3, [r4, #52]	@ 0x34
 8012f32:	7418      	strb	r0, [r3, #16]
 8012f34:	6159      	str	r1, [r3, #20]
 8012f36:	68d1      	ldr	r1, [r2, #12]
 8012f38:	61d9      	str	r1, [r3, #28]
 8012f3a:	6911      	ldr	r1, [r2, #16]
 8012f3c:	6219      	str	r1, [r3, #32]
 8012f3e:	6951      	ldr	r1, [r2, #20]
 8012f40:	6892      	ldr	r2, [r2, #8]
 8012f42:	619a      	str	r2, [r3, #24]
 8012f44:	6259      	str	r1, [r3, #36]	@ 0x24
 8012f46:	f7fb fe7b 	bl	800ec40 <uxr_nanos>
 8012f4a:	f003 fe3f 	bl	8016bcc <srand>
 8012f4e:	f003 fe6b 	bl	8016c28 <rand>
 8012f52:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012f54:	6298      	str	r0, [r3, #40]	@ 0x28
 8012f56:	2800      	cmp	r0, #0
 8012f58:	d0f9      	beq.n	8012f4e <rmw_init_options_init+0x9e>
 8012f5a:	2000      	movs	r0, #0
 8012f5c:	b003      	add	sp, #12
 8012f5e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012f62:	b004      	add	sp, #16
 8012f64:	4770      	bx	lr
 8012f66:	2001      	movs	r0, #1
 8012f68:	e7b1      	b.n	8012ece <rmw_init_options_init+0x1e>
 8012f6a:	bf00      	nop
 8012f6c:	0801a70c 	.word	0x0801a70c
 8012f70:	20010b24 	.word	0x20010b24
 8012f74:	2000c3c0 	.word	0x2000c3c0
 8012f78:	2000c20c 	.word	0x2000c20c
 8012f7c:	08019e1c 	.word	0x08019e1c

08012f80 <rmw_init_options_copy>:
 8012f80:	b570      	push	{r4, r5, r6, lr}
 8012f82:	b158      	cbz	r0, 8012f9c <rmw_init_options_copy+0x1c>
 8012f84:	460d      	mov	r5, r1
 8012f86:	b149      	cbz	r1, 8012f9c <rmw_init_options_copy+0x1c>
 8012f88:	4604      	mov	r4, r0
 8012f8a:	6880      	ldr	r0, [r0, #8]
 8012f8c:	b120      	cbz	r0, 8012f98 <rmw_init_options_copy+0x18>
 8012f8e:	4b1e      	ldr	r3, [pc, #120]	@ (8013008 <rmw_init_options_copy+0x88>)
 8012f90:	6819      	ldr	r1, [r3, #0]
 8012f92:	f7ed f93d 	bl	8000210 <strcmp>
 8012f96:	bb90      	cbnz	r0, 8012ffe <rmw_init_options_copy+0x7e>
 8012f98:	68ab      	ldr	r3, [r5, #8]
 8012f9a:	b113      	cbz	r3, 8012fa2 <rmw_init_options_copy+0x22>
 8012f9c:	250b      	movs	r5, #11
 8012f9e:	4628      	mov	r0, r5
 8012fa0:	bd70      	pop	{r4, r5, r6, pc}
 8012fa2:	4623      	mov	r3, r4
 8012fa4:	462a      	mov	r2, r5
 8012fa6:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 8012faa:	f8d3 c000 	ldr.w	ip, [r3]
 8012fae:	6858      	ldr	r0, [r3, #4]
 8012fb0:	6899      	ldr	r1, [r3, #8]
 8012fb2:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8012fb6:	f8c2 e00c 	str.w	lr, [r2, #12]
 8012fba:	3310      	adds	r3, #16
 8012fbc:	42b3      	cmp	r3, r6
 8012fbe:	f8c2 c000 	str.w	ip, [r2]
 8012fc2:	6050      	str	r0, [r2, #4]
 8012fc4:	6091      	str	r1, [r2, #8]
 8012fc6:	f102 0210 	add.w	r2, r2, #16
 8012fca:	d1ee      	bne.n	8012faa <rmw_init_options_copy+0x2a>
 8012fcc:	6819      	ldr	r1, [r3, #0]
 8012fce:	685b      	ldr	r3, [r3, #4]
 8012fd0:	480e      	ldr	r0, [pc, #56]	@ (801300c <rmw_init_options_copy+0x8c>)
 8012fd2:	6053      	str	r3, [r2, #4]
 8012fd4:	6011      	str	r1, [r2, #0]
 8012fd6:	f7ff fed5 	bl	8012d84 <get_memory>
 8012fda:	b198      	cbz	r0, 8013004 <rmw_init_options_copy+0x84>
 8012fdc:	6883      	ldr	r3, [r0, #8]
 8012fde:	636b      	str	r3, [r5, #52]	@ 0x34
 8012fe0:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8012fe2:	f102 0c10 	add.w	ip, r2, #16
 8012fe6:	f103 0410 	add.w	r4, r3, #16
 8012fea:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012fee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012ff0:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8012ff4:	2500      	movs	r5, #0
 8012ff6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8012ffa:	4628      	mov	r0, r5
 8012ffc:	bd70      	pop	{r4, r5, r6, pc}
 8012ffe:	250c      	movs	r5, #12
 8013000:	4628      	mov	r0, r5
 8013002:	bd70      	pop	{r4, r5, r6, pc}
 8013004:	2501      	movs	r5, #1
 8013006:	e7ca      	b.n	8012f9e <rmw_init_options_copy+0x1e>
 8013008:	0801a70c 	.word	0x0801a70c
 801300c:	20010b24 	.word	0x20010b24

08013010 <rmw_init_options_fini>:
 8013010:	2800      	cmp	r0, #0
 8013012:	d03d      	beq.n	8013090 <rmw_init_options_fini+0x80>
 8013014:	b510      	push	{r4, lr}
 8013016:	4604      	mov	r4, r0
 8013018:	b08e      	sub	sp, #56	@ 0x38
 801301a:	3020      	adds	r0, #32
 801301c:	f7f8 fbb8 	bl	800b790 <rcutils_allocator_is_valid>
 8013020:	b360      	cbz	r0, 801307c <rmw_init_options_fini+0x6c>
 8013022:	68a0      	ldr	r0, [r4, #8]
 8013024:	b120      	cbz	r0, 8013030 <rmw_init_options_fini+0x20>
 8013026:	4b1c      	ldr	r3, [pc, #112]	@ (8013098 <rmw_init_options_fini+0x88>)
 8013028:	6819      	ldr	r1, [r3, #0]
 801302a:	f7ed f8f1 	bl	8000210 <strcmp>
 801302e:	bb68      	cbnz	r0, 801308c <rmw_init_options_fini+0x7c>
 8013030:	4b1a      	ldr	r3, [pc, #104]	@ (801309c <rmw_init_options_fini+0x8c>)
 8013032:	6819      	ldr	r1, [r3, #0]
 8013034:	b331      	cbz	r1, 8013084 <rmw_init_options_fini+0x74>
 8013036:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8013038:	e001      	b.n	801303e <rmw_init_options_fini+0x2e>
 801303a:	6849      	ldr	r1, [r1, #4]
 801303c:	b311      	cbz	r1, 8013084 <rmw_init_options_fini+0x74>
 801303e:	688b      	ldr	r3, [r1, #8]
 8013040:	429a      	cmp	r2, r3
 8013042:	d1fa      	bne.n	801303a <rmw_init_options_fini+0x2a>
 8013044:	4815      	ldr	r0, [pc, #84]	@ (801309c <rmw_init_options_fini+0x8c>)
 8013046:	f7ff fead 	bl	8012da4 <put_memory>
 801304a:	4668      	mov	r0, sp
 801304c:	f7ff fd8c 	bl	8012b68 <rmw_get_zero_initialized_init_options>
 8013050:	46ee      	mov	lr, sp
 8013052:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013056:	46a4      	mov	ip, r4
 8013058:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801305c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013060:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013064:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013068:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801306c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8013070:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013074:	2300      	movs	r3, #0
 8013076:	4618      	mov	r0, r3
 8013078:	b00e      	add	sp, #56	@ 0x38
 801307a:	bd10      	pop	{r4, pc}
 801307c:	230b      	movs	r3, #11
 801307e:	4618      	mov	r0, r3
 8013080:	b00e      	add	sp, #56	@ 0x38
 8013082:	bd10      	pop	{r4, pc}
 8013084:	2301      	movs	r3, #1
 8013086:	4618      	mov	r0, r3
 8013088:	b00e      	add	sp, #56	@ 0x38
 801308a:	bd10      	pop	{r4, pc}
 801308c:	230c      	movs	r3, #12
 801308e:	e7f2      	b.n	8013076 <rmw_init_options_fini+0x66>
 8013090:	230b      	movs	r3, #11
 8013092:	4618      	mov	r0, r3
 8013094:	4770      	bx	lr
 8013096:	bf00      	nop
 8013098:	0801a70c 	.word	0x0801a70c
 801309c:	20010b24 	.word	0x20010b24

080130a0 <rmw_init>:
 80130a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80130a4:	b083      	sub	sp, #12
 80130a6:	2800      	cmp	r0, #0
 80130a8:	f000 80d3 	beq.w	8013252 <rmw_init+0x1b2>
 80130ac:	460e      	mov	r6, r1
 80130ae:	2900      	cmp	r1, #0
 80130b0:	f000 80cf 	beq.w	8013252 <rmw_init+0x1b2>
 80130b4:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80130b6:	4605      	mov	r5, r0
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	f000 80ca 	beq.w	8013252 <rmw_init+0x1b2>
 80130be:	4b78      	ldr	r3, [pc, #480]	@ (80132a0 <rmw_init+0x200>)
 80130c0:	6880      	ldr	r0, [r0, #8]
 80130c2:	681f      	ldr	r7, [r3, #0]
 80130c4:	b128      	cbz	r0, 80130d2 <rmw_init+0x32>
 80130c6:	4639      	mov	r1, r7
 80130c8:	f7ed f8a2 	bl	8000210 <strcmp>
 80130cc:	2800      	cmp	r0, #0
 80130ce:	f040 80ca 	bne.w	8013266 <rmw_init+0x1c6>
 80130d2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80130d6:	4c73      	ldr	r4, [pc, #460]	@ (80132a4 <rmw_init+0x204>)
 80130d8:	4973      	ldr	r1, [pc, #460]	@ (80132a8 <rmw_init+0x208>)
 80130da:	4874      	ldr	r0, [pc, #464]	@ (80132ac <rmw_init+0x20c>)
 80130dc:	60b7      	str	r7, [r6, #8]
 80130de:	e9c6 2300 	strd	r2, r3, [r6]
 80130e2:	68eb      	ldr	r3, [r5, #12]
 80130e4:	64b3      	str	r3, [r6, #72]	@ 0x48
 80130e6:	2201      	movs	r2, #1
 80130e8:	f7f9 fba0 	bl	800c82c <rmw_uxrce_init_session_memory>
 80130ec:	4620      	mov	r0, r4
 80130ee:	4970      	ldr	r1, [pc, #448]	@ (80132b0 <rmw_init+0x210>)
 80130f0:	2204      	movs	r2, #4
 80130f2:	f7f9 fbdb 	bl	800c8ac <rmw_uxrce_init_static_input_buffer_memory>
 80130f6:	f04f 0800 	mov.w	r8, #0
 80130fa:	486c      	ldr	r0, [pc, #432]	@ (80132ac <rmw_init+0x20c>)
 80130fc:	f884 800d 	strb.w	r8, [r4, #13]
 8013100:	f7ff fe40 	bl	8012d84 <get_memory>
 8013104:	2800      	cmp	r0, #0
 8013106:	f000 80a9 	beq.w	801325c <rmw_init+0x1bc>
 801310a:	6884      	ldr	r4, [r0, #8]
 801310c:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 801310e:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8013110:	f890 c010 	ldrb.w	ip, [r0, #16]
 8013114:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8013118:	9101      	str	r1, [sp, #4]
 801311a:	6a00      	ldr	r0, [r0, #32]
 801311c:	9000      	str	r0, [sp, #0]
 801311e:	f104 0910 	add.w	r9, r4, #16
 8013122:	4661      	mov	r1, ip
 8013124:	4648      	mov	r0, r9
 8013126:	f001 fe2d 	bl	8014d84 <uxr_set_custom_transport_callbacks>
 801312a:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 801312e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8013132:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 8013136:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 801313a:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 801313e:	495d      	ldr	r1, [pc, #372]	@ (80132b4 <rmw_init+0x214>)
 8013140:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 8013144:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 8013148:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 801314c:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 8013150:	4859      	ldr	r0, [pc, #356]	@ (80132b8 <rmw_init+0x218>)
 8013152:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 8013156:	2201      	movs	r2, #1
 8013158:	64f4      	str	r4, [r6, #76]	@ 0x4c
 801315a:	f7f9 fb47 	bl	800c7ec <rmw_uxrce_init_node_memory>
 801315e:	4957      	ldr	r1, [pc, #348]	@ (80132bc <rmw_init+0x21c>)
 8013160:	4857      	ldr	r0, [pc, #348]	@ (80132c0 <rmw_init+0x220>)
 8013162:	2205      	movs	r2, #5
 8013164:	f7f9 fb22 	bl	800c7ac <rmw_uxrce_init_subscription_memory>
 8013168:	4956      	ldr	r1, [pc, #344]	@ (80132c4 <rmw_init+0x224>)
 801316a:	4857      	ldr	r0, [pc, #348]	@ (80132c8 <rmw_init+0x228>)
 801316c:	220a      	movs	r2, #10
 801316e:	f7f9 fafd 	bl	800c76c <rmw_uxrce_init_publisher_memory>
 8013172:	4956      	ldr	r1, [pc, #344]	@ (80132cc <rmw_init+0x22c>)
 8013174:	4856      	ldr	r0, [pc, #344]	@ (80132d0 <rmw_init+0x230>)
 8013176:	2201      	movs	r2, #1
 8013178:	f7f9 fab8 	bl	800c6ec <rmw_uxrce_init_service_memory>
 801317c:	4955      	ldr	r1, [pc, #340]	@ (80132d4 <rmw_init+0x234>)
 801317e:	4856      	ldr	r0, [pc, #344]	@ (80132d8 <rmw_init+0x238>)
 8013180:	2201      	movs	r2, #1
 8013182:	f7f9 fad3 	bl	800c72c <rmw_uxrce_init_client_memory>
 8013186:	4955      	ldr	r1, [pc, #340]	@ (80132dc <rmw_init+0x23c>)
 8013188:	4855      	ldr	r0, [pc, #340]	@ (80132e0 <rmw_init+0x240>)
 801318a:	220f      	movs	r2, #15
 801318c:	f7f9 fb6e 	bl	800c86c <rmw_uxrce_init_topic_memory>
 8013190:	4954      	ldr	r1, [pc, #336]	@ (80132e4 <rmw_init+0x244>)
 8013192:	4855      	ldr	r0, [pc, #340]	@ (80132e8 <rmw_init+0x248>)
 8013194:	2203      	movs	r2, #3
 8013196:	f7f9 fba9 	bl	800c8ec <rmw_uxrce_init_init_options_impl_memory>
 801319a:	4954      	ldr	r1, [pc, #336]	@ (80132ec <rmw_init+0x24c>)
 801319c:	4854      	ldr	r0, [pc, #336]	@ (80132f0 <rmw_init+0x250>)
 801319e:	2204      	movs	r2, #4
 80131a0:	f7f9 fbc4 	bl	800c92c <rmw_uxrce_init_wait_set_memory>
 80131a4:	4953      	ldr	r1, [pc, #332]	@ (80132f4 <rmw_init+0x254>)
 80131a6:	4854      	ldr	r0, [pc, #336]	@ (80132f8 <rmw_init+0x258>)
 80131a8:	2204      	movs	r2, #4
 80131aa:	f7f9 fbdf 	bl	800c96c <rmw_uxrce_init_guard_condition_memory>
 80131ae:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 80131b0:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 80131b2:	4642      	mov	r2, r8
 80131b4:	f000 faa0 	bl	80136f8 <rmw_uxrce_transport_init>
 80131b8:	4607      	mov	r7, r0
 80131ba:	2800      	cmp	r0, #0
 80131bc:	d158      	bne.n	8013270 <rmw_init+0x1d0>
 80131be:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80131c0:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 80131c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80131c6:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 80131ca:	4628      	mov	r0, r5
 80131cc:	f7fa fb9c 	bl	800d908 <uxr_init_session>
 80131d0:	494a      	ldr	r1, [pc, #296]	@ (80132fc <rmw_init+0x25c>)
 80131d2:	4622      	mov	r2, r4
 80131d4:	4628      	mov	r0, r5
 80131d6:	f7fa fbbb 	bl	800d950 <uxr_set_topic_callback>
 80131da:	4949      	ldr	r1, [pc, #292]	@ (8013300 <rmw_init+0x260>)
 80131dc:	463a      	mov	r2, r7
 80131de:	4628      	mov	r0, r5
 80131e0:	f7fa fbb2 	bl	800d948 <uxr_set_status_callback>
 80131e4:	4947      	ldr	r1, [pc, #284]	@ (8013304 <rmw_init+0x264>)
 80131e6:	463a      	mov	r2, r7
 80131e8:	4628      	mov	r0, r5
 80131ea:	f7fa fbb5 	bl	800d958 <uxr_set_request_callback>
 80131ee:	4946      	ldr	r1, [pc, #280]	@ (8013308 <rmw_init+0x268>)
 80131f0:	463a      	mov	r2, r7
 80131f2:	4628      	mov	r0, r5
 80131f4:	f7fa fbb4 	bl	800d960 <uxr_set_reply_callback>
 80131f8:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 80131fc:	2304      	movs	r3, #4
 80131fe:	0092      	lsls	r2, r2, #2
 8013200:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 8013204:	4628      	mov	r0, r5
 8013206:	f7fa fbe9 	bl	800d9dc <uxr_create_input_reliable_stream>
 801320a:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 801320e:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 8013212:	0092      	lsls	r2, r2, #2
 8013214:	2304      	movs	r3, #4
 8013216:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 801321a:	4628      	mov	r0, r5
 801321c:	f7fa fbb6 	bl	800d98c <uxr_create_output_reliable_stream>
 8013220:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 8013224:	4628      	mov	r0, r5
 8013226:	f7fa fbd3 	bl	800d9d0 <uxr_create_input_best_effort_stream>
 801322a:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 801322e:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 8013232:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8013236:	3114      	adds	r1, #20
 8013238:	4628      	mov	r0, r5
 801323a:	f7fa fb95 	bl	800d968 <uxr_create_output_best_effort_stream>
 801323e:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 8013242:	4628      	mov	r0, r5
 8013244:	f7fb f920 	bl	800e488 <uxr_create_session>
 8013248:	b1f8      	cbz	r0, 801328a <rmw_init+0x1ea>
 801324a:	4638      	mov	r0, r7
 801324c:	b003      	add	sp, #12
 801324e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013252:	270b      	movs	r7, #11
 8013254:	4638      	mov	r0, r7
 8013256:	b003      	add	sp, #12
 8013258:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801325c:	2701      	movs	r7, #1
 801325e:	4638      	mov	r0, r7
 8013260:	b003      	add	sp, #12
 8013262:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013266:	270c      	movs	r7, #12
 8013268:	4638      	mov	r0, r7
 801326a:	b003      	add	sp, #12
 801326c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013270:	4648      	mov	r0, r9
 8013272:	f001 fdc9 	bl	8014e08 <uxr_close_custom_transport>
 8013276:	480d      	ldr	r0, [pc, #52]	@ (80132ac <rmw_init+0x20c>)
 8013278:	4621      	mov	r1, r4
 801327a:	f7ff fd93 	bl	8012da4 <put_memory>
 801327e:	4638      	mov	r0, r7
 8013280:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 8013284:	b003      	add	sp, #12
 8013286:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801328a:	4648      	mov	r0, r9
 801328c:	f001 fdbc 	bl	8014e08 <uxr_close_custom_transport>
 8013290:	4806      	ldr	r0, [pc, #24]	@ (80132ac <rmw_init+0x20c>)
 8013292:	4621      	mov	r1, r4
 8013294:	f7ff fd86 	bl	8012da4 <put_memory>
 8013298:	64f7      	str	r7, [r6, #76]	@ 0x4c
 801329a:	2701      	movs	r7, #1
 801329c:	e7d5      	b.n	801324a <rmw_init+0x1aa>
 801329e:	bf00      	nop
 80132a0:	0801a70c 	.word	0x0801a70c
 80132a4:	20010b74 	.word	0x20010b74
 80132a8:	2000ce20 	.word	0x2000ce20
 80132ac:	20010b64 	.word	0x20010b64
 80132b0:	2000e3c8 	.word	0x2000e3c8
 80132b4:	2000c444 	.word	0x2000c444
 80132b8:	20010b34 	.word	0x20010b34
 80132bc:	200104c8 	.word	0x200104c8
 80132c0:	20010b84 	.word	0x20010b84
 80132c4:	2000c4e8 	.word	0x2000c4e8
 80132c8:	20010b44 	.word	0x20010b44
 80132cc:	2000cd58 	.word	0x2000cd58
 80132d0:	20010b54 	.word	0x20010b54
 80132d4:	2000c278 	.word	0x2000c278
 80132d8:	2000c264 	.word	0x2000c264
 80132dc:	20010900 	.word	0x20010900
 80132e0:	20010b94 	.word	0x20010b94
 80132e4:	2000c3c0 	.word	0x2000c3c0
 80132e8:	20010b24 	.word	0x20010b24
 80132ec:	20010aa4 	.word	0x20010aa4
 80132f0:	20010ba4 	.word	0x20010ba4
 80132f4:	2000c340 	.word	0x2000c340
 80132f8:	20010b14 	.word	0x20010b14
 80132fc:	080166e1 	.word	0x080166e1
 8013300:	080166d9 	.word	0x080166d9
 8013304:	08016779 	.word	0x08016779
 8013308:	08016815 	.word	0x08016815

0801330c <rmw_context_fini>:
 801330c:	4b17      	ldr	r3, [pc, #92]	@ (801336c <rmw_context_fini+0x60>)
 801330e:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8013310:	b570      	push	{r4, r5, r6, lr}
 8013312:	681c      	ldr	r4, [r3, #0]
 8013314:	4605      	mov	r5, r0
 8013316:	b334      	cbz	r4, 8013366 <rmw_context_fini+0x5a>
 8013318:	2600      	movs	r6, #0
 801331a:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 801331e:	6902      	ldr	r2, [r0, #16]
 8013320:	428a      	cmp	r2, r1
 8013322:	d018      	beq.n	8013356 <rmw_context_fini+0x4a>
 8013324:	2c00      	cmp	r4, #0
 8013326:	d1f8      	bne.n	801331a <rmw_context_fini+0xe>
 8013328:	b189      	cbz	r1, 801334e <rmw_context_fini+0x42>
 801332a:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 801332e:	789b      	ldrb	r3, [r3, #2]
 8013330:	2b01      	cmp	r3, #1
 8013332:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 8013336:	bf14      	ite	ne
 8013338:	210a      	movne	r1, #10
 801333a:	2100      	moveq	r1, #0
 801333c:	f7fb f87c 	bl	800e438 <uxr_delete_session_retries>
 8013340:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8013342:	f7f9 fb33 	bl	800c9ac <rmw_uxrce_fini_session_memory>
 8013346:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8013348:	3010      	adds	r0, #16
 801334a:	f001 fd5d 	bl	8014e08 <uxr_close_custom_transport>
 801334e:	2300      	movs	r3, #0
 8013350:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8013352:	4630      	mov	r0, r6
 8013354:	bd70      	pop	{r4, r5, r6, pc}
 8013356:	3018      	adds	r0, #24
 8013358:	f7f8 fdb8 	bl	800becc <rmw_destroy_node>
 801335c:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801335e:	4606      	mov	r6, r0
 8013360:	2c00      	cmp	r4, #0
 8013362:	d1da      	bne.n	801331a <rmw_context_fini+0xe>
 8013364:	e7e0      	b.n	8013328 <rmw_context_fini+0x1c>
 8013366:	4626      	mov	r6, r4
 8013368:	e7de      	b.n	8013328 <rmw_context_fini+0x1c>
 801336a:	bf00      	nop
 801336c:	20010b34 	.word	0x20010b34

08013370 <create_topic>:
 8013370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013374:	4605      	mov	r5, r0
 8013376:	b084      	sub	sp, #16
 8013378:	4822      	ldr	r0, [pc, #136]	@ (8013404 <create_topic+0x94>)
 801337a:	460f      	mov	r7, r1
 801337c:	4616      	mov	r6, r2
 801337e:	f7ff fd01 	bl	8012d84 <get_memory>
 8013382:	4604      	mov	r4, r0
 8013384:	2800      	cmp	r0, #0
 8013386:	d039      	beq.n	80133fc <create_topic+0x8c>
 8013388:	692b      	ldr	r3, [r5, #16]
 801338a:	6884      	ldr	r4, [r0, #8]
 801338c:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 801340c <create_topic+0x9c>
 8013390:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8013394:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8013398:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 801339c:	1c42      	adds	r2, r0, #1
 801339e:	2102      	movs	r1, #2
 80133a0:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 80133a4:	f7fa f8c2 	bl	800d52c <uxr_object_id>
 80133a8:	223c      	movs	r2, #60	@ 0x3c
 80133aa:	6120      	str	r0, [r4, #16]
 80133ac:	4641      	mov	r1, r8
 80133ae:	4638      	mov	r0, r7
 80133b0:	f7f9 fcda 	bl	800cd68 <generate_topic_name>
 80133b4:	b1f0      	cbz	r0, 80133f4 <create_topic+0x84>
 80133b6:	4f14      	ldr	r7, [pc, #80]	@ (8013408 <create_topic+0x98>)
 80133b8:	4630      	mov	r0, r6
 80133ba:	2264      	movs	r2, #100	@ 0x64
 80133bc:	4639      	mov	r1, r7
 80133be:	f7f9 fca3 	bl	800cd08 <generate_type_name>
 80133c2:	b1b8      	cbz	r0, 80133f4 <create_topic+0x84>
 80133c4:	6928      	ldr	r0, [r5, #16]
 80133c6:	2306      	movs	r3, #6
 80133c8:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 80133cc:	f8cd 8000 	str.w	r8, [sp]
 80133d0:	e9cd 7301 	strd	r7, r3, [sp, #4]
 80133d4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80133d8:	6811      	ldr	r1, [r2, #0]
 80133da:	696b      	ldr	r3, [r5, #20]
 80133dc:	6922      	ldr	r2, [r4, #16]
 80133de:	f7f9 ff21 	bl	800d224 <uxr_buffer_create_topic_bin>
 80133e2:	4602      	mov	r2, r0
 80133e4:	6928      	ldr	r0, [r5, #16]
 80133e6:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80133ea:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80133ee:	f7f9 fc55 	bl	800cc9c <run_xrce_session>
 80133f2:	b918      	cbnz	r0, 80133fc <create_topic+0x8c>
 80133f4:	4620      	mov	r0, r4
 80133f6:	f7f9 fb4f 	bl	800ca98 <rmw_uxrce_fini_topic_memory>
 80133fa:	2400      	movs	r4, #0
 80133fc:	4620      	mov	r0, r4
 80133fe:	b004      	add	sp, #16
 8013400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013404:	20010b94 	.word	0x20010b94
 8013408:	20010c24 	.word	0x20010c24
 801340c:	20010be8 	.word	0x20010be8

08013410 <destroy_topic>:
 8013410:	b538      	push	{r3, r4, r5, lr}
 8013412:	6985      	ldr	r5, [r0, #24]
 8013414:	b1d5      	cbz	r5, 801344c <destroy_topic+0x3c>
 8013416:	4604      	mov	r4, r0
 8013418:	6928      	ldr	r0, [r5, #16]
 801341a:	6922      	ldr	r2, [r4, #16]
 801341c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8013420:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013424:	6819      	ldr	r1, [r3, #0]
 8013426:	f7f9 fe7f 	bl	800d128 <uxr_buffer_delete_entity>
 801342a:	4602      	mov	r2, r0
 801342c:	6928      	ldr	r0, [r5, #16]
 801342e:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8013432:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8013436:	f7f9 fc31 	bl	800cc9c <run_xrce_session>
 801343a:	2800      	cmp	r0, #0
 801343c:	4620      	mov	r0, r4
 801343e:	bf14      	ite	ne
 8013440:	2400      	movne	r4, #0
 8013442:	2402      	moveq	r4, #2
 8013444:	f7f9 fb28 	bl	800ca98 <rmw_uxrce_fini_topic_memory>
 8013448:	4620      	mov	r0, r4
 801344a:	bd38      	pop	{r3, r4, r5, pc}
 801344c:	2401      	movs	r4, #1
 801344e:	4620      	mov	r0, r4
 8013450:	bd38      	pop	{r3, r4, r5, pc}
 8013452:	bf00      	nop

08013454 <rmw_send_request>:
 8013454:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013458:	4604      	mov	r4, r0
 801345a:	6800      	ldr	r0, [r0, #0]
 801345c:	b08b      	sub	sp, #44	@ 0x2c
 801345e:	460e      	mov	r6, r1
 8013460:	4615      	mov	r5, r2
 8013462:	b128      	cbz	r0, 8013470 <rmw_send_request+0x1c>
 8013464:	4b21      	ldr	r3, [pc, #132]	@ (80134ec <rmw_send_request+0x98>)
 8013466:	6819      	ldr	r1, [r3, #0]
 8013468:	f7ec fed2 	bl	8000210 <strcmp>
 801346c:	2800      	cmp	r0, #0
 801346e:	d139      	bne.n	80134e4 <rmw_send_request+0x90>
 8013470:	6864      	ldr	r4, [r4, #4]
 8013472:	6963      	ldr	r3, [r4, #20]
 8013474:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 8013478:	689b      	ldr	r3, [r3, #8]
 801347a:	4798      	blx	r3
 801347c:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8013480:	4630      	mov	r0, r6
 8013482:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013486:	4798      	blx	r3
 8013488:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801348c:	9000      	str	r0, [sp, #0]
 801348e:	6922      	ldr	r2, [r4, #16]
 8013490:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8013492:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8013496:	ab02      	add	r3, sp, #8
 8013498:	f7fb fc72 	bl	800ed80 <uxr_prepare_output_stream>
 801349c:	2700      	movs	r7, #0
 801349e:	6028      	str	r0, [r5, #0]
 80134a0:	606f      	str	r7, [r5, #4]
 80134a2:	b198      	cbz	r0, 80134cc <rmw_send_request+0x78>
 80134a4:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80134a8:	a902      	add	r1, sp, #8
 80134aa:	4630      	mov	r0, r6
 80134ac:	4798      	blx	r3
 80134ae:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 80134b2:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80134b6:	2b01      	cmp	r3, #1
 80134b8:	d00c      	beq.n	80134d4 <rmw_send_request+0x80>
 80134ba:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 80134bc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80134c0:	f7fa fe72 	bl	800e1a8 <uxr_run_session_until_confirm_delivery>
 80134c4:	4638      	mov	r0, r7
 80134c6:	b00b      	add	sp, #44	@ 0x2c
 80134c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80134cc:	2001      	movs	r0, #1
 80134ce:	b00b      	add	sp, #44	@ 0x2c
 80134d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80134d4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80134d8:	f7fa faa6 	bl	800da28 <uxr_flash_output_streams>
 80134dc:	4638      	mov	r0, r7
 80134de:	b00b      	add	sp, #44	@ 0x2c
 80134e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80134e4:	200c      	movs	r0, #12
 80134e6:	b00b      	add	sp, #44	@ 0x2c
 80134e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80134ec:	0801a70c 	.word	0x0801a70c

080134f0 <rmw_take_request>:
 80134f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80134f4:	4605      	mov	r5, r0
 80134f6:	6800      	ldr	r0, [r0, #0]
 80134f8:	b089      	sub	sp, #36	@ 0x24
 80134fa:	460c      	mov	r4, r1
 80134fc:	4690      	mov	r8, r2
 80134fe:	461e      	mov	r6, r3
 8013500:	b128      	cbz	r0, 801350e <rmw_take_request+0x1e>
 8013502:	4b28      	ldr	r3, [pc, #160]	@ (80135a4 <rmw_take_request+0xb4>)
 8013504:	6819      	ldr	r1, [r3, #0]
 8013506:	f7ec fe83 	bl	8000210 <strcmp>
 801350a:	2800      	cmp	r0, #0
 801350c:	d146      	bne.n	801359c <rmw_take_request+0xac>
 801350e:	b10e      	cbz	r6, 8013514 <rmw_take_request+0x24>
 8013510:	2300      	movs	r3, #0
 8013512:	7033      	strb	r3, [r6, #0]
 8013514:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8013518:	f7f9 fb42 	bl	800cba0 <rmw_uxrce_clean_expired_static_input_buffer>
 801351c:	4648      	mov	r0, r9
 801351e:	f7f9 fb17 	bl	800cb50 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013522:	4607      	mov	r7, r0
 8013524:	b3b0      	cbz	r0, 8013594 <rmw_take_request+0xa4>
 8013526:	6885      	ldr	r5, [r0, #8]
 8013528:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 801352c:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 8013530:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8013534:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 8013538:	7423      	strb	r3, [r4, #16]
 801353a:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 801353e:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 8013542:	74e2      	strb	r2, [r4, #19]
 8013544:	f8a4 3011 	strh.w	r3, [r4, #17]
 8013548:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 801354c:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 8013550:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 8013554:	61e1      	str	r1, [r4, #28]
 8013556:	6162      	str	r2, [r4, #20]
 8013558:	61a3      	str	r3, [r4, #24]
 801355a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801355e:	689b      	ldr	r3, [r3, #8]
 8013560:	4798      	blx	r3
 8013562:	6844      	ldr	r4, [r0, #4]
 8013564:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 8013568:	f105 0110 	add.w	r1, r5, #16
 801356c:	4668      	mov	r0, sp
 801356e:	f7f9 fd13 	bl	800cf98 <ucdr_init_buffer>
 8013572:	68e3      	ldr	r3, [r4, #12]
 8013574:	4641      	mov	r1, r8
 8013576:	4668      	mov	r0, sp
 8013578:	4798      	blx	r3
 801357a:	4639      	mov	r1, r7
 801357c:	4604      	mov	r4, r0
 801357e:	480a      	ldr	r0, [pc, #40]	@ (80135a8 <rmw_take_request+0xb8>)
 8013580:	f7ff fc10 	bl	8012da4 <put_memory>
 8013584:	b106      	cbz	r6, 8013588 <rmw_take_request+0x98>
 8013586:	7034      	strb	r4, [r6, #0]
 8013588:	f084 0001 	eor.w	r0, r4, #1
 801358c:	b2c0      	uxtb	r0, r0
 801358e:	b009      	add	sp, #36	@ 0x24
 8013590:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013594:	2001      	movs	r0, #1
 8013596:	b009      	add	sp, #36	@ 0x24
 8013598:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801359c:	200c      	movs	r0, #12
 801359e:	b009      	add	sp, #36	@ 0x24
 80135a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80135a4:	0801a70c 	.word	0x0801a70c
 80135a8:	20010b74 	.word	0x20010b74

080135ac <rmw_send_response>:
 80135ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80135ae:	4605      	mov	r5, r0
 80135b0:	6800      	ldr	r0, [r0, #0]
 80135b2:	b091      	sub	sp, #68	@ 0x44
 80135b4:	460c      	mov	r4, r1
 80135b6:	4616      	mov	r6, r2
 80135b8:	b128      	cbz	r0, 80135c6 <rmw_send_response+0x1a>
 80135ba:	4b29      	ldr	r3, [pc, #164]	@ (8013660 <rmw_send_response+0xb4>)
 80135bc:	6819      	ldr	r1, [r3, #0]
 80135be:	f7ec fe27 	bl	8000210 <strcmp>
 80135c2:	2800      	cmp	r0, #0
 80135c4:	d141      	bne.n	801364a <rmw_send_response+0x9e>
 80135c6:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 80135ca:	9306      	str	r3, [sp, #24]
 80135cc:	4623      	mov	r3, r4
 80135ce:	9207      	str	r2, [sp, #28]
 80135d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80135d4:	686d      	ldr	r5, [r5, #4]
 80135d6:	789b      	ldrb	r3, [r3, #2]
 80135d8:	68a1      	ldr	r1, [r4, #8]
 80135da:	f88d 2017 	strb.w	r2, [sp, #23]
 80135de:	f88d 3016 	strb.w	r3, [sp, #22]
 80135e2:	68e2      	ldr	r2, [r4, #12]
 80135e4:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 80135e8:	6860      	ldr	r0, [r4, #4]
 80135ea:	f8ad 3014 	strh.w	r3, [sp, #20]
 80135ee:	ab02      	add	r3, sp, #8
 80135f0:	c307      	stmia	r3!, {r0, r1, r2}
 80135f2:	696b      	ldr	r3, [r5, #20]
 80135f4:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 80135f6:	68db      	ldr	r3, [r3, #12]
 80135f8:	4798      	blx	r3
 80135fa:	6844      	ldr	r4, [r0, #4]
 80135fc:	4630      	mov	r0, r6
 80135fe:	6923      	ldr	r3, [r4, #16]
 8013600:	4798      	blx	r3
 8013602:	f100 0318 	add.w	r3, r0, #24
 8013606:	6938      	ldr	r0, [r7, #16]
 8013608:	9300      	str	r3, [sp, #0]
 801360a:	692a      	ldr	r2, [r5, #16]
 801360c:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 801360e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013612:	ab08      	add	r3, sp, #32
 8013614:	f7fb fbb4 	bl	800ed80 <uxr_prepare_output_stream>
 8013618:	b910      	cbnz	r0, 8013620 <rmw_send_response+0x74>
 801361a:	2001      	movs	r0, #1
 801361c:	b011      	add	sp, #68	@ 0x44
 801361e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013620:	a902      	add	r1, sp, #8
 8013622:	a808      	add	r0, sp, #32
 8013624:	f7fc fce4 	bl	800fff0 <uxr_serialize_SampleIdentity>
 8013628:	68a3      	ldr	r3, [r4, #8]
 801362a:	a908      	add	r1, sp, #32
 801362c:	4630      	mov	r0, r6
 801362e:	4798      	blx	r3
 8013630:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8013634:	6938      	ldr	r0, [r7, #16]
 8013636:	2b01      	cmp	r3, #1
 8013638:	d00a      	beq.n	8013650 <rmw_send_response+0xa4>
 801363a:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 801363c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013640:	f7fa fdb2 	bl	800e1a8 <uxr_run_session_until_confirm_delivery>
 8013644:	2000      	movs	r0, #0
 8013646:	b011      	add	sp, #68	@ 0x44
 8013648:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801364a:	200c      	movs	r0, #12
 801364c:	b011      	add	sp, #68	@ 0x44
 801364e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013650:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013654:	f7fa f9e8 	bl	800da28 <uxr_flash_output_streams>
 8013658:	2000      	movs	r0, #0
 801365a:	b011      	add	sp, #68	@ 0x44
 801365c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801365e:	bf00      	nop
 8013660:	0801a70c 	.word	0x0801a70c

08013664 <rmw_take_response>:
 8013664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013668:	4604      	mov	r4, r0
 801366a:	6800      	ldr	r0, [r0, #0]
 801366c:	b088      	sub	sp, #32
 801366e:	4688      	mov	r8, r1
 8013670:	4617      	mov	r7, r2
 8013672:	461d      	mov	r5, r3
 8013674:	b120      	cbz	r0, 8013680 <rmw_take_response+0x1c>
 8013676:	4b1e      	ldr	r3, [pc, #120]	@ (80136f0 <rmw_take_response+0x8c>)
 8013678:	6819      	ldr	r1, [r3, #0]
 801367a:	f7ec fdc9 	bl	8000210 <strcmp>
 801367e:	bb78      	cbnz	r0, 80136e0 <rmw_take_response+0x7c>
 8013680:	b10d      	cbz	r5, 8013686 <rmw_take_response+0x22>
 8013682:	2300      	movs	r3, #0
 8013684:	702b      	strb	r3, [r5, #0]
 8013686:	6864      	ldr	r4, [r4, #4]
 8013688:	f7f9 fa8a 	bl	800cba0 <rmw_uxrce_clean_expired_static_input_buffer>
 801368c:	4620      	mov	r0, r4
 801368e:	f7f9 fa5f 	bl	800cb50 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013692:	4606      	mov	r6, r0
 8013694:	b340      	cbz	r0, 80136e8 <rmw_take_response+0x84>
 8013696:	6963      	ldr	r3, [r4, #20]
 8013698:	6884      	ldr	r4, [r0, #8]
 801369a:	68db      	ldr	r3, [r3, #12]
 801369c:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 80136a0:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 80136a4:	e9c8 0108 	strd	r0, r1, [r8, #32]
 80136a8:	4798      	blx	r3
 80136aa:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80136ae:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 80136b2:	f104 0110 	add.w	r1, r4, #16
 80136b6:	4668      	mov	r0, sp
 80136b8:	f7f9 fc6e 	bl	800cf98 <ucdr_init_buffer>
 80136bc:	4639      	mov	r1, r7
 80136be:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80136c2:	4668      	mov	r0, sp
 80136c4:	4798      	blx	r3
 80136c6:	4631      	mov	r1, r6
 80136c8:	4604      	mov	r4, r0
 80136ca:	480a      	ldr	r0, [pc, #40]	@ (80136f4 <rmw_take_response+0x90>)
 80136cc:	f7ff fb6a 	bl	8012da4 <put_memory>
 80136d0:	b105      	cbz	r5, 80136d4 <rmw_take_response+0x70>
 80136d2:	702c      	strb	r4, [r5, #0]
 80136d4:	f084 0001 	eor.w	r0, r4, #1
 80136d8:	b2c0      	uxtb	r0, r0
 80136da:	b008      	add	sp, #32
 80136dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136e0:	200c      	movs	r0, #12
 80136e2:	b008      	add	sp, #32
 80136e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136e8:	2001      	movs	r0, #1
 80136ea:	b008      	add	sp, #32
 80136ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136f0:	0801a70c 	.word	0x0801a70c
 80136f4:	20010b74 	.word	0x20010b74

080136f8 <rmw_uxrce_transport_init>:
 80136f8:	b508      	push	{r3, lr}
 80136fa:	b108      	cbz	r0, 8013700 <rmw_uxrce_transport_init+0x8>
 80136fc:	f100 0210 	add.w	r2, r0, #16
 8013700:	b139      	cbz	r1, 8013712 <rmw_uxrce_transport_init+0x1a>
 8013702:	6949      	ldr	r1, [r1, #20]
 8013704:	4610      	mov	r0, r2
 8013706:	f001 fb4b 	bl	8014da0 <uxr_init_custom_transport>
 801370a:	f080 0001 	eor.w	r0, r0, #1
 801370e:	b2c0      	uxtb	r0, r0
 8013710:	bd08      	pop	{r3, pc}
 8013712:	4b04      	ldr	r3, [pc, #16]	@ (8013724 <rmw_uxrce_transport_init+0x2c>)
 8013714:	4610      	mov	r0, r2
 8013716:	6859      	ldr	r1, [r3, #4]
 8013718:	f001 fb42 	bl	8014da0 <uxr_init_custom_transport>
 801371c:	f080 0001 	eor.w	r0, r0, #1
 8013720:	b2c0      	uxtb	r0, r0
 8013722:	bd08      	pop	{r3, pc}
 8013724:	2000c20c 	.word	0x2000c20c

08013728 <rmw_wait>:
 8013728:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801372c:	b089      	sub	sp, #36	@ 0x24
 801372e:	4605      	mov	r5, r0
 8013730:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8013732:	460e      	mov	r6, r1
 8013734:	4698      	mov	r8, r3
 8013736:	4691      	mov	r9, r2
 8013738:	2a00      	cmp	r2, #0
 801373a:	f000 810a 	beq.w	8013952 <rmw_wait+0x22a>
 801373e:	b16c      	cbz	r4, 801375c <rmw_wait+0x34>
 8013740:	4bae      	ldr	r3, [pc, #696]	@ (80139fc <rmw_wait+0x2d4>)
 8013742:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013744:	af04      	add	r7, sp, #16
 8013746:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 801374a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801374e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8013752:	f7ff fa1d 	bl	8012b90 <rmw_time_equal>
 8013756:	2800      	cmp	r0, #0
 8013758:	f000 8127 	beq.w	80139aa <rmw_wait+0x282>
 801375c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8013760:	f7f9 fa1e 	bl	800cba0 <rmw_uxrce_clean_expired_static_input_buffer>
 8013764:	4ba6      	ldr	r3, [pc, #664]	@ (8013a00 <rmw_wait+0x2d8>)
 8013766:	681c      	ldr	r4, [r3, #0]
 8013768:	b14c      	cbz	r4, 801377e <rmw_wait+0x56>
 801376a:	4623      	mov	r3, r4
 801376c:	2100      	movs	r1, #0
 801376e:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8013772:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8013776:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 801377a:	2b00      	cmp	r3, #0
 801377c:	d1f7      	bne.n	801376e <rmw_wait+0x46>
 801377e:	f1b9 0f00 	cmp.w	r9, #0
 8013782:	d011      	beq.n	80137a8 <rmw_wait+0x80>
 8013784:	f8d9 1000 	ldr.w	r1, [r9]
 8013788:	b171      	cbz	r1, 80137a8 <rmw_wait+0x80>
 801378a:	f8d9 c004 	ldr.w	ip, [r9, #4]
 801378e:	2300      	movs	r3, #0
 8013790:	2001      	movs	r0, #1
 8013792:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8013796:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8013798:	6912      	ldr	r2, [r2, #16]
 801379a:	3301      	adds	r3, #1
 801379c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80137a0:	4299      	cmp	r1, r3
 80137a2:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 80137a6:	d1f4      	bne.n	8013792 <rmw_wait+0x6a>
 80137a8:	f1b8 0f00 	cmp.w	r8, #0
 80137ac:	d011      	beq.n	80137d2 <rmw_wait+0xaa>
 80137ae:	f8d8 1000 	ldr.w	r1, [r8]
 80137b2:	b171      	cbz	r1, 80137d2 <rmw_wait+0xaa>
 80137b4:	f8d8 c004 	ldr.w	ip, [r8, #4]
 80137b8:	2300      	movs	r3, #0
 80137ba:	2001      	movs	r0, #1
 80137bc:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80137c0:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 80137c2:	6912      	ldr	r2, [r2, #16]
 80137c4:	3301      	adds	r3, #1
 80137c6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80137ca:	4299      	cmp	r1, r3
 80137cc:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 80137d0:	d1f4      	bne.n	80137bc <rmw_wait+0x94>
 80137d2:	b185      	cbz	r5, 80137f6 <rmw_wait+0xce>
 80137d4:	6829      	ldr	r1, [r5, #0]
 80137d6:	b171      	cbz	r1, 80137f6 <rmw_wait+0xce>
 80137d8:	f8d5 c004 	ldr.w	ip, [r5, #4]
 80137dc:	2300      	movs	r3, #0
 80137de:	2001      	movs	r0, #1
 80137e0:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80137e4:	6a12      	ldr	r2, [r2, #32]
 80137e6:	6912      	ldr	r2, [r2, #16]
 80137e8:	3301      	adds	r3, #1
 80137ea:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80137ee:	4299      	cmp	r1, r3
 80137f0:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 80137f4:	d1f4      	bne.n	80137e0 <rmw_wait+0xb8>
 80137f6:	b34c      	cbz	r4, 801384c <rmw_wait+0x124>
 80137f8:	4622      	mov	r2, r4
 80137fa:	2300      	movs	r3, #0
 80137fc:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8013800:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8013804:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 8013808:	440b      	add	r3, r1
 801380a:	b2db      	uxtb	r3, r3
 801380c:	2a00      	cmp	r2, #0
 801380e:	d1f5      	bne.n	80137fc <rmw_wait+0xd4>
 8013810:	2b00      	cmp	r3, #0
 8013812:	f000 8084 	beq.w	801391e <rmw_wait+0x1f6>
 8013816:	1c7a      	adds	r2, r7, #1
 8013818:	d00d      	beq.n	8013836 <rmw_wait+0x10e>
 801381a:	ee07 7a90 	vmov	s15, r7
 801381e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8013822:	ee07 3a90 	vmov	s15, r3
 8013826:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801382a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801382e:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8013832:	ee17 7a90 	vmov	r7, s15
 8013836:	68a0      	ldr	r0, [r4, #8]
 8013838:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 801383c:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 8013840:	2b00      	cmp	r3, #0
 8013842:	f040 8090 	bne.w	8013966 <rmw_wait+0x23e>
 8013846:	6864      	ldr	r4, [r4, #4]
 8013848:	2c00      	cmp	r4, #0
 801384a:	d1f4      	bne.n	8013836 <rmw_wait+0x10e>
 801384c:	f1b9 0f00 	cmp.w	r9, #0
 8013850:	f000 80bc 	beq.w	80139cc <rmw_wait+0x2a4>
 8013854:	f8d9 7000 	ldr.w	r7, [r9]
 8013858:	2f00      	cmp	r7, #0
 801385a:	f000 808e 	beq.w	801397a <rmw_wait+0x252>
 801385e:	2400      	movs	r4, #0
 8013860:	4627      	mov	r7, r4
 8013862:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8013866:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801386a:	f7f9 f971 	bl	800cb50 <rmw_uxrce_find_static_input_buffer_by_owner>
 801386e:	2800      	cmp	r0, #0
 8013870:	d05f      	beq.n	8013932 <rmw_wait+0x20a>
 8013872:	f8d9 3000 	ldr.w	r3, [r9]
 8013876:	3401      	adds	r4, #1
 8013878:	42a3      	cmp	r3, r4
 801387a:	f04f 0701 	mov.w	r7, #1
 801387e:	d8f0      	bhi.n	8013862 <rmw_wait+0x13a>
 8013880:	f1b8 0f00 	cmp.w	r8, #0
 8013884:	d012      	beq.n	80138ac <rmw_wait+0x184>
 8013886:	f8d8 3000 	ldr.w	r3, [r8]
 801388a:	b17b      	cbz	r3, 80138ac <rmw_wait+0x184>
 801388c:	2400      	movs	r4, #0
 801388e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013892:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013896:	f7f9 f95b 	bl	800cb50 <rmw_uxrce_find_static_input_buffer_by_owner>
 801389a:	2800      	cmp	r0, #0
 801389c:	d051      	beq.n	8013942 <rmw_wait+0x21a>
 801389e:	f8d8 3000 	ldr.w	r3, [r8]
 80138a2:	3401      	adds	r4, #1
 80138a4:	42a3      	cmp	r3, r4
 80138a6:	f04f 0701 	mov.w	r7, #1
 80138aa:	d8f0      	bhi.n	801388e <rmw_wait+0x166>
 80138ac:	b1dd      	cbz	r5, 80138e6 <rmw_wait+0x1be>
 80138ae:	682b      	ldr	r3, [r5, #0]
 80138b0:	b1cb      	cbz	r3, 80138e6 <rmw_wait+0x1be>
 80138b2:	2400      	movs	r4, #0
 80138b4:	686b      	ldr	r3, [r5, #4]
 80138b6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80138ba:	f7f9 f949 	bl	800cb50 <rmw_uxrce_find_static_input_buffer_by_owner>
 80138be:	b158      	cbz	r0, 80138d8 <rmw_wait+0x1b0>
 80138c0:	682b      	ldr	r3, [r5, #0]
 80138c2:	3401      	adds	r4, #1
 80138c4:	42a3      	cmp	r3, r4
 80138c6:	d969      	bls.n	801399c <rmw_wait+0x274>
 80138c8:	686b      	ldr	r3, [r5, #4]
 80138ca:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80138ce:	2701      	movs	r7, #1
 80138d0:	f7f9 f93e 	bl	800cb50 <rmw_uxrce_find_static_input_buffer_by_owner>
 80138d4:	2800      	cmp	r0, #0
 80138d6:	d1f3      	bne.n	80138c0 <rmw_wait+0x198>
 80138d8:	e9d5 3200 	ldrd	r3, r2, [r5]
 80138dc:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80138e0:	3401      	adds	r4, #1
 80138e2:	42a3      	cmp	r3, r4
 80138e4:	d8e6      	bhi.n	80138b4 <rmw_wait+0x18c>
 80138e6:	b1a6      	cbz	r6, 8013912 <rmw_wait+0x1ea>
 80138e8:	6834      	ldr	r4, [r6, #0]
 80138ea:	b194      	cbz	r4, 8013912 <rmw_wait+0x1ea>
 80138ec:	2300      	movs	r3, #0
 80138ee:	461d      	mov	r5, r3
 80138f0:	e004      	b.n	80138fc <rmw_wait+0x1d4>
 80138f2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 80138f6:	3301      	adds	r3, #1
 80138f8:	42a3      	cmp	r3, r4
 80138fa:	d00a      	beq.n	8013912 <rmw_wait+0x1ea>
 80138fc:	6870      	ldr	r0, [r6, #4]
 80138fe:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8013902:	7c0a      	ldrb	r2, [r1, #16]
 8013904:	2a00      	cmp	r2, #0
 8013906:	d0f4      	beq.n	80138f2 <rmw_wait+0x1ca>
 8013908:	3301      	adds	r3, #1
 801390a:	42a3      	cmp	r3, r4
 801390c:	740d      	strb	r5, [r1, #16]
 801390e:	4617      	mov	r7, r2
 8013910:	d1f4      	bne.n	80138fc <rmw_wait+0x1d4>
 8013912:	2f00      	cmp	r7, #0
 8013914:	d03e      	beq.n	8013994 <rmw_wait+0x26c>
 8013916:	2000      	movs	r0, #0
 8013918:	b009      	add	sp, #36	@ 0x24
 801391a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801391e:	68a0      	ldr	r0, [r4, #8]
 8013920:	2100      	movs	r1, #0
 8013922:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013926:	f7fa fc05 	bl	800e134 <uxr_run_session_timeout>
 801392a:	6864      	ldr	r4, [r4, #4]
 801392c:	2c00      	cmp	r4, #0
 801392e:	d1f6      	bne.n	801391e <rmw_wait+0x1f6>
 8013930:	e78c      	b.n	801384c <rmw_wait+0x124>
 8013932:	e9d9 3200 	ldrd	r3, r2, [r9]
 8013936:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801393a:	3401      	adds	r4, #1
 801393c:	42a3      	cmp	r3, r4
 801393e:	d890      	bhi.n	8013862 <rmw_wait+0x13a>
 8013940:	e79e      	b.n	8013880 <rmw_wait+0x158>
 8013942:	e9d8 3200 	ldrd	r3, r2, [r8]
 8013946:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801394a:	3401      	adds	r4, #1
 801394c:	429c      	cmp	r4, r3
 801394e:	d39e      	bcc.n	801388e <rmw_wait+0x166>
 8013950:	e7ac      	b.n	80138ac <rmw_wait+0x184>
 8013952:	2b00      	cmp	r3, #0
 8013954:	f47f aef3 	bne.w	801373e <rmw_wait+0x16>
 8013958:	2800      	cmp	r0, #0
 801395a:	f47f aef0 	bne.w	801373e <rmw_wait+0x16>
 801395e:	2900      	cmp	r1, #0
 8013960:	f47f aeed 	bne.w	801373e <rmw_wait+0x16>
 8013964:	e7d7      	b.n	8013916 <rmw_wait+0x1ee>
 8013966:	4639      	mov	r1, r7
 8013968:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801396c:	f7fa fbfc 	bl	800e168 <uxr_run_session_until_data>
 8013970:	6864      	ldr	r4, [r4, #4]
 8013972:	2c00      	cmp	r4, #0
 8013974:	f47f af5f 	bne.w	8013836 <rmw_wait+0x10e>
 8013978:	e768      	b.n	801384c <rmw_wait+0x124>
 801397a:	f1b8 0f00 	cmp.w	r8, #0
 801397e:	d032      	beq.n	80139e6 <rmw_wait+0x2be>
 8013980:	f8d8 3000 	ldr.w	r3, [r8]
 8013984:	2b00      	cmp	r3, #0
 8013986:	d181      	bne.n	801388c <rmw_wait+0x164>
 8013988:	461f      	mov	r7, r3
 801398a:	2d00      	cmp	r5, #0
 801398c:	d18f      	bne.n	80138ae <rmw_wait+0x186>
 801398e:	462f      	mov	r7, r5
 8013990:	2e00      	cmp	r6, #0
 8013992:	d1a9      	bne.n	80138e8 <rmw_wait+0x1c0>
 8013994:	2002      	movs	r0, #2
 8013996:	b009      	add	sp, #36	@ 0x24
 8013998:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801399c:	2e00      	cmp	r6, #0
 801399e:	d0ba      	beq.n	8013916 <rmw_wait+0x1ee>
 80139a0:	6834      	ldr	r4, [r6, #0]
 80139a2:	2701      	movs	r7, #1
 80139a4:	2c00      	cmp	r4, #0
 80139a6:	d1a1      	bne.n	80138ec <rmw_wait+0x1c4>
 80139a8:	e7b5      	b.n	8013916 <rmw_wait+0x1ee>
 80139aa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80139ae:	f7ff f943 	bl	8012c38 <rmw_time_total_nsec>
 80139b2:	2300      	movs	r3, #0
 80139b4:	4a13      	ldr	r2, [pc, #76]	@ (8013a04 <rmw_wait+0x2dc>)
 80139b6:	f7ed f977 	bl	8000ca8 <__aeabi_uldivmod>
 80139ba:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 80139be:	f171 0300 	sbcs.w	r3, r1, #0
 80139c2:	4607      	mov	r7, r0
 80139c4:	bfa8      	it	ge
 80139c6:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 80139ca:	e6c9      	b.n	8013760 <rmw_wait+0x38>
 80139cc:	f1b8 0f00 	cmp.w	r8, #0
 80139d0:	d009      	beq.n	80139e6 <rmw_wait+0x2be>
 80139d2:	f8d8 3000 	ldr.w	r3, [r8]
 80139d6:	464f      	mov	r7, r9
 80139d8:	2b00      	cmp	r3, #0
 80139da:	f47f af57 	bne.w	801388c <rmw_wait+0x164>
 80139de:	2d00      	cmp	r5, #0
 80139e0:	f47f af65 	bne.w	80138ae <rmw_wait+0x186>
 80139e4:	e7d3      	b.n	801398e <rmw_wait+0x266>
 80139e6:	b17d      	cbz	r5, 8013a08 <rmw_wait+0x2e0>
 80139e8:	682b      	ldr	r3, [r5, #0]
 80139ea:	4647      	mov	r7, r8
 80139ec:	2b00      	cmp	r3, #0
 80139ee:	f47f af60 	bne.w	80138b2 <rmw_wait+0x18a>
 80139f2:	2e00      	cmp	r6, #0
 80139f4:	f47f af78 	bne.w	80138e8 <rmw_wait+0x1c0>
 80139f8:	e7cc      	b.n	8013994 <rmw_wait+0x26c>
 80139fa:	bf00      	nop
 80139fc:	08019de8 	.word	0x08019de8
 8013a00:	20010b64 	.word	0x20010b64
 8013a04:	000f4240 	.word	0x000f4240
 8013a08:	2e00      	cmp	r6, #0
 8013a0a:	d0c3      	beq.n	8013994 <rmw_wait+0x26c>
 8013a0c:	6834      	ldr	r4, [r6, #0]
 8013a0e:	462f      	mov	r7, r5
 8013a10:	2c00      	cmp	r4, #0
 8013a12:	f47f af6b 	bne.w	80138ec <rmw_wait+0x1c4>
 8013a16:	e7bd      	b.n	8013994 <rmw_wait+0x26c>

08013a18 <rmw_create_wait_set>:
 8013a18:	b508      	push	{r3, lr}
 8013a1a:	4803      	ldr	r0, [pc, #12]	@ (8013a28 <rmw_create_wait_set+0x10>)
 8013a1c:	f7ff f9b2 	bl	8012d84 <get_memory>
 8013a20:	b108      	cbz	r0, 8013a26 <rmw_create_wait_set+0xe>
 8013a22:	6880      	ldr	r0, [r0, #8]
 8013a24:	3010      	adds	r0, #16
 8013a26:	bd08      	pop	{r3, pc}
 8013a28:	20010ba4 	.word	0x20010ba4

08013a2c <rmw_destroy_wait_set>:
 8013a2c:	b508      	push	{r3, lr}
 8013a2e:	4b08      	ldr	r3, [pc, #32]	@ (8013a50 <rmw_destroy_wait_set+0x24>)
 8013a30:	6819      	ldr	r1, [r3, #0]
 8013a32:	b911      	cbnz	r1, 8013a3a <rmw_destroy_wait_set+0xe>
 8013a34:	e00a      	b.n	8013a4c <rmw_destroy_wait_set+0x20>
 8013a36:	6849      	ldr	r1, [r1, #4]
 8013a38:	b141      	cbz	r1, 8013a4c <rmw_destroy_wait_set+0x20>
 8013a3a:	688b      	ldr	r3, [r1, #8]
 8013a3c:	3310      	adds	r3, #16
 8013a3e:	4298      	cmp	r0, r3
 8013a40:	d1f9      	bne.n	8013a36 <rmw_destroy_wait_set+0xa>
 8013a42:	4803      	ldr	r0, [pc, #12]	@ (8013a50 <rmw_destroy_wait_set+0x24>)
 8013a44:	f7ff f9ae 	bl	8012da4 <put_memory>
 8013a48:	2000      	movs	r0, #0
 8013a4a:	bd08      	pop	{r3, pc}
 8013a4c:	2001      	movs	r0, #1
 8013a4e:	bd08      	pop	{r3, pc}
 8013a50:	20010ba4 	.word	0x20010ba4

08013a54 <rmw_uros_epoch_nanos>:
 8013a54:	4b05      	ldr	r3, [pc, #20]	@ (8013a6c <rmw_uros_epoch_nanos+0x18>)
 8013a56:	681b      	ldr	r3, [r3, #0]
 8013a58:	b123      	cbz	r3, 8013a64 <rmw_uros_epoch_nanos+0x10>
 8013a5a:	6898      	ldr	r0, [r3, #8]
 8013a5c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013a60:	f7f9 bfd8 	b.w	800da14 <uxr_epoch_nanos>
 8013a64:	2000      	movs	r0, #0
 8013a66:	2100      	movs	r1, #0
 8013a68:	4770      	bx	lr
 8013a6a:	bf00      	nop
 8013a6c:	20010b64 	.word	0x20010b64

08013a70 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8013a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a74:	6805      	ldr	r5, [r0, #0]
 8013a76:	4604      	mov	r4, r0
 8013a78:	4628      	mov	r0, r5
 8013a7a:	460e      	mov	r6, r1
 8013a7c:	f7ec fbc8 	bl	8000210 <strcmp>
 8013a80:	b1c8      	cbz	r0, 8013ab6 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 8013a82:	4b11      	ldr	r3, [pc, #68]	@ (8013ac8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 8013a84:	681b      	ldr	r3, [r3, #0]
 8013a86:	429d      	cmp	r5, r3
 8013a88:	d112      	bne.n	8013ab0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8013a8a:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8013a8e:	f8d8 4000 	ldr.w	r4, [r8]
 8013a92:	b16c      	cbz	r4, 8013ab0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8013a94:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8013a98:	2700      	movs	r7, #0
 8013a9a:	3d04      	subs	r5, #4
 8013a9c:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8013aa0:	4631      	mov	r1, r6
 8013aa2:	f7ec fbb5 	bl	8000210 <strcmp>
 8013aa6:	00bb      	lsls	r3, r7, #2
 8013aa8:	b140      	cbz	r0, 8013abc <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 8013aaa:	3701      	adds	r7, #1
 8013aac:	42bc      	cmp	r4, r7
 8013aae:	d1f5      	bne.n	8013a9c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8013ab0:	2000      	movs	r0, #0
 8013ab2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ab6:	4620      	mov	r0, r4
 8013ab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013abc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8013ac0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013ac4:	58d3      	ldr	r3, [r2, r3]
 8013ac6:	4718      	bx	r3
 8013ac8:	200000b4 	.word	0x200000b4

08013acc <std_msgs__msg__String__init>:
 8013acc:	b538      	push	{r3, r4, r5, lr}
 8013ace:	4604      	mov	r4, r0
 8013ad0:	b128      	cbz	r0, 8013ade <std_msgs__msg__String__init+0x12>
 8013ad2:	f002 fee9 	bl	80168a8 <rosidl_runtime_c__String__init>
 8013ad6:	4605      	mov	r5, r0
 8013ad8:	b120      	cbz	r0, 8013ae4 <std_msgs__msg__String__init+0x18>
 8013ada:	4628      	mov	r0, r5
 8013adc:	bd38      	pop	{r3, r4, r5, pc}
 8013ade:	4605      	mov	r5, r0
 8013ae0:	4628      	mov	r0, r5
 8013ae2:	bd38      	pop	{r3, r4, r5, pc}
 8013ae4:	4620      	mov	r0, r4
 8013ae6:	f002 fef5 	bl	80168d4 <rosidl_runtime_c__String__fini>
 8013aea:	4628      	mov	r0, r5
 8013aec:	bd38      	pop	{r3, r4, r5, pc}
 8013aee:	bf00      	nop

08013af0 <std_msgs__msg__String__fini>:
 8013af0:	b108      	cbz	r0, 8013af6 <std_msgs__msg__String__fini+0x6>
 8013af2:	f002 beef 	b.w	80168d4 <rosidl_runtime_c__String__fini>
 8013af6:	4770      	bx	lr

08013af8 <ucdr_serialize_endian_array_char>:
 8013af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013afc:	4619      	mov	r1, r3
 8013afe:	461f      	mov	r7, r3
 8013b00:	4605      	mov	r5, r0
 8013b02:	4690      	mov	r8, r2
 8013b04:	f7f9 f9f4 	bl	800cef0 <ucdr_check_buffer_available_for>
 8013b08:	b9e0      	cbnz	r0, 8013b44 <ucdr_serialize_endian_array_char+0x4c>
 8013b0a:	463e      	mov	r6, r7
 8013b0c:	e009      	b.n	8013b22 <ucdr_serialize_endian_array_char+0x2a>
 8013b0e:	68a8      	ldr	r0, [r5, #8]
 8013b10:	f004 f9ad 	bl	8017e6e <memcpy>
 8013b14:	68ab      	ldr	r3, [r5, #8]
 8013b16:	6928      	ldr	r0, [r5, #16]
 8013b18:	4423      	add	r3, r4
 8013b1a:	4420      	add	r0, r4
 8013b1c:	1b36      	subs	r6, r6, r4
 8013b1e:	60ab      	str	r3, [r5, #8]
 8013b20:	6128      	str	r0, [r5, #16]
 8013b22:	4631      	mov	r1, r6
 8013b24:	2201      	movs	r2, #1
 8013b26:	4628      	mov	r0, r5
 8013b28:	f7f9 fa6a 	bl	800d000 <ucdr_check_final_buffer_behavior_array>
 8013b2c:	1bb9      	subs	r1, r7, r6
 8013b2e:	4441      	add	r1, r8
 8013b30:	4604      	mov	r4, r0
 8013b32:	4602      	mov	r2, r0
 8013b34:	2800      	cmp	r0, #0
 8013b36:	d1ea      	bne.n	8013b0e <ucdr_serialize_endian_array_char+0x16>
 8013b38:	2301      	movs	r3, #1
 8013b3a:	7da8      	ldrb	r0, [r5, #22]
 8013b3c:	756b      	strb	r3, [r5, #21]
 8013b3e:	4058      	eors	r0, r3
 8013b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b44:	463a      	mov	r2, r7
 8013b46:	68a8      	ldr	r0, [r5, #8]
 8013b48:	4641      	mov	r1, r8
 8013b4a:	f004 f990 	bl	8017e6e <memcpy>
 8013b4e:	68aa      	ldr	r2, [r5, #8]
 8013b50:	692b      	ldr	r3, [r5, #16]
 8013b52:	443a      	add	r2, r7
 8013b54:	443b      	add	r3, r7
 8013b56:	60aa      	str	r2, [r5, #8]
 8013b58:	612b      	str	r3, [r5, #16]
 8013b5a:	e7ed      	b.n	8013b38 <ucdr_serialize_endian_array_char+0x40>

08013b5c <ucdr_deserialize_endian_array_char>:
 8013b5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b60:	4619      	mov	r1, r3
 8013b62:	461f      	mov	r7, r3
 8013b64:	4605      	mov	r5, r0
 8013b66:	4690      	mov	r8, r2
 8013b68:	f7f9 f9c2 	bl	800cef0 <ucdr_check_buffer_available_for>
 8013b6c:	b9e0      	cbnz	r0, 8013ba8 <ucdr_deserialize_endian_array_char+0x4c>
 8013b6e:	463e      	mov	r6, r7
 8013b70:	e009      	b.n	8013b86 <ucdr_deserialize_endian_array_char+0x2a>
 8013b72:	68a9      	ldr	r1, [r5, #8]
 8013b74:	f004 f97b 	bl	8017e6e <memcpy>
 8013b78:	68ab      	ldr	r3, [r5, #8]
 8013b7a:	6928      	ldr	r0, [r5, #16]
 8013b7c:	4423      	add	r3, r4
 8013b7e:	4420      	add	r0, r4
 8013b80:	1b36      	subs	r6, r6, r4
 8013b82:	60ab      	str	r3, [r5, #8]
 8013b84:	6128      	str	r0, [r5, #16]
 8013b86:	2201      	movs	r2, #1
 8013b88:	4631      	mov	r1, r6
 8013b8a:	4628      	mov	r0, r5
 8013b8c:	f7f9 fa38 	bl	800d000 <ucdr_check_final_buffer_behavior_array>
 8013b90:	4604      	mov	r4, r0
 8013b92:	1bb8      	subs	r0, r7, r6
 8013b94:	4440      	add	r0, r8
 8013b96:	4622      	mov	r2, r4
 8013b98:	2c00      	cmp	r4, #0
 8013b9a:	d1ea      	bne.n	8013b72 <ucdr_deserialize_endian_array_char+0x16>
 8013b9c:	2301      	movs	r3, #1
 8013b9e:	7da8      	ldrb	r0, [r5, #22]
 8013ba0:	756b      	strb	r3, [r5, #21]
 8013ba2:	4058      	eors	r0, r3
 8013ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ba8:	463a      	mov	r2, r7
 8013baa:	68a9      	ldr	r1, [r5, #8]
 8013bac:	4640      	mov	r0, r8
 8013bae:	f004 f95e 	bl	8017e6e <memcpy>
 8013bb2:	68aa      	ldr	r2, [r5, #8]
 8013bb4:	692b      	ldr	r3, [r5, #16]
 8013bb6:	443a      	add	r2, r7
 8013bb8:	443b      	add	r3, r7
 8013bba:	60aa      	str	r2, [r5, #8]
 8013bbc:	612b      	str	r3, [r5, #16]
 8013bbe:	e7ed      	b.n	8013b9c <ucdr_deserialize_endian_array_char+0x40>

08013bc0 <ucdr_serialize_array_uint8_t>:
 8013bc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013bc4:	4688      	mov	r8, r1
 8013bc6:	4611      	mov	r1, r2
 8013bc8:	4617      	mov	r7, r2
 8013bca:	4605      	mov	r5, r0
 8013bcc:	f7f9 f990 	bl	800cef0 <ucdr_check_buffer_available_for>
 8013bd0:	b9e0      	cbnz	r0, 8013c0c <ucdr_serialize_array_uint8_t+0x4c>
 8013bd2:	463e      	mov	r6, r7
 8013bd4:	e009      	b.n	8013bea <ucdr_serialize_array_uint8_t+0x2a>
 8013bd6:	68a8      	ldr	r0, [r5, #8]
 8013bd8:	f004 f949 	bl	8017e6e <memcpy>
 8013bdc:	68aa      	ldr	r2, [r5, #8]
 8013bde:	692b      	ldr	r3, [r5, #16]
 8013be0:	4422      	add	r2, r4
 8013be2:	4423      	add	r3, r4
 8013be4:	1b36      	subs	r6, r6, r4
 8013be6:	60aa      	str	r2, [r5, #8]
 8013be8:	612b      	str	r3, [r5, #16]
 8013bea:	4631      	mov	r1, r6
 8013bec:	2201      	movs	r2, #1
 8013bee:	4628      	mov	r0, r5
 8013bf0:	f7f9 fa06 	bl	800d000 <ucdr_check_final_buffer_behavior_array>
 8013bf4:	1bb9      	subs	r1, r7, r6
 8013bf6:	4441      	add	r1, r8
 8013bf8:	4604      	mov	r4, r0
 8013bfa:	4602      	mov	r2, r0
 8013bfc:	2800      	cmp	r0, #0
 8013bfe:	d1ea      	bne.n	8013bd6 <ucdr_serialize_array_uint8_t+0x16>
 8013c00:	2301      	movs	r3, #1
 8013c02:	7da8      	ldrb	r0, [r5, #22]
 8013c04:	756b      	strb	r3, [r5, #21]
 8013c06:	4058      	eors	r0, r3
 8013c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c0c:	463a      	mov	r2, r7
 8013c0e:	68a8      	ldr	r0, [r5, #8]
 8013c10:	4641      	mov	r1, r8
 8013c12:	f004 f92c 	bl	8017e6e <memcpy>
 8013c16:	68aa      	ldr	r2, [r5, #8]
 8013c18:	692b      	ldr	r3, [r5, #16]
 8013c1a:	443a      	add	r2, r7
 8013c1c:	443b      	add	r3, r7
 8013c1e:	60aa      	str	r2, [r5, #8]
 8013c20:	612b      	str	r3, [r5, #16]
 8013c22:	e7ed      	b.n	8013c00 <ucdr_serialize_array_uint8_t+0x40>

08013c24 <ucdr_serialize_endian_array_uint8_t>:
 8013c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c28:	4619      	mov	r1, r3
 8013c2a:	461f      	mov	r7, r3
 8013c2c:	4605      	mov	r5, r0
 8013c2e:	4690      	mov	r8, r2
 8013c30:	f7f9 f95e 	bl	800cef0 <ucdr_check_buffer_available_for>
 8013c34:	b9e0      	cbnz	r0, 8013c70 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8013c36:	463e      	mov	r6, r7
 8013c38:	e009      	b.n	8013c4e <ucdr_serialize_endian_array_uint8_t+0x2a>
 8013c3a:	68a8      	ldr	r0, [r5, #8]
 8013c3c:	f004 f917 	bl	8017e6e <memcpy>
 8013c40:	68ab      	ldr	r3, [r5, #8]
 8013c42:	6928      	ldr	r0, [r5, #16]
 8013c44:	4423      	add	r3, r4
 8013c46:	4420      	add	r0, r4
 8013c48:	1b36      	subs	r6, r6, r4
 8013c4a:	60ab      	str	r3, [r5, #8]
 8013c4c:	6128      	str	r0, [r5, #16]
 8013c4e:	4631      	mov	r1, r6
 8013c50:	2201      	movs	r2, #1
 8013c52:	4628      	mov	r0, r5
 8013c54:	f7f9 f9d4 	bl	800d000 <ucdr_check_final_buffer_behavior_array>
 8013c58:	1bb9      	subs	r1, r7, r6
 8013c5a:	4441      	add	r1, r8
 8013c5c:	4604      	mov	r4, r0
 8013c5e:	4602      	mov	r2, r0
 8013c60:	2800      	cmp	r0, #0
 8013c62:	d1ea      	bne.n	8013c3a <ucdr_serialize_endian_array_uint8_t+0x16>
 8013c64:	2301      	movs	r3, #1
 8013c66:	7da8      	ldrb	r0, [r5, #22]
 8013c68:	756b      	strb	r3, [r5, #21]
 8013c6a:	4058      	eors	r0, r3
 8013c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c70:	463a      	mov	r2, r7
 8013c72:	68a8      	ldr	r0, [r5, #8]
 8013c74:	4641      	mov	r1, r8
 8013c76:	f004 f8fa 	bl	8017e6e <memcpy>
 8013c7a:	68aa      	ldr	r2, [r5, #8]
 8013c7c:	692b      	ldr	r3, [r5, #16]
 8013c7e:	443a      	add	r2, r7
 8013c80:	443b      	add	r3, r7
 8013c82:	60aa      	str	r2, [r5, #8]
 8013c84:	612b      	str	r3, [r5, #16]
 8013c86:	e7ed      	b.n	8013c64 <ucdr_serialize_endian_array_uint8_t+0x40>

08013c88 <ucdr_deserialize_array_uint8_t>:
 8013c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c8c:	4688      	mov	r8, r1
 8013c8e:	4611      	mov	r1, r2
 8013c90:	4617      	mov	r7, r2
 8013c92:	4605      	mov	r5, r0
 8013c94:	f7f9 f92c 	bl	800cef0 <ucdr_check_buffer_available_for>
 8013c98:	b9e0      	cbnz	r0, 8013cd4 <ucdr_deserialize_array_uint8_t+0x4c>
 8013c9a:	463e      	mov	r6, r7
 8013c9c:	e009      	b.n	8013cb2 <ucdr_deserialize_array_uint8_t+0x2a>
 8013c9e:	68a9      	ldr	r1, [r5, #8]
 8013ca0:	f004 f8e5 	bl	8017e6e <memcpy>
 8013ca4:	68aa      	ldr	r2, [r5, #8]
 8013ca6:	692b      	ldr	r3, [r5, #16]
 8013ca8:	4422      	add	r2, r4
 8013caa:	4423      	add	r3, r4
 8013cac:	1b36      	subs	r6, r6, r4
 8013cae:	60aa      	str	r2, [r5, #8]
 8013cb0:	612b      	str	r3, [r5, #16]
 8013cb2:	2201      	movs	r2, #1
 8013cb4:	4631      	mov	r1, r6
 8013cb6:	4628      	mov	r0, r5
 8013cb8:	f7f9 f9a2 	bl	800d000 <ucdr_check_final_buffer_behavior_array>
 8013cbc:	4604      	mov	r4, r0
 8013cbe:	1bb8      	subs	r0, r7, r6
 8013cc0:	4440      	add	r0, r8
 8013cc2:	4622      	mov	r2, r4
 8013cc4:	2c00      	cmp	r4, #0
 8013cc6:	d1ea      	bne.n	8013c9e <ucdr_deserialize_array_uint8_t+0x16>
 8013cc8:	2301      	movs	r3, #1
 8013cca:	7da8      	ldrb	r0, [r5, #22]
 8013ccc:	756b      	strb	r3, [r5, #21]
 8013cce:	4058      	eors	r0, r3
 8013cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013cd4:	463a      	mov	r2, r7
 8013cd6:	68a9      	ldr	r1, [r5, #8]
 8013cd8:	4640      	mov	r0, r8
 8013cda:	f004 f8c8 	bl	8017e6e <memcpy>
 8013cde:	68aa      	ldr	r2, [r5, #8]
 8013ce0:	692b      	ldr	r3, [r5, #16]
 8013ce2:	443a      	add	r2, r7
 8013ce4:	443b      	add	r3, r7
 8013ce6:	60aa      	str	r2, [r5, #8]
 8013ce8:	612b      	str	r3, [r5, #16]
 8013cea:	e7ed      	b.n	8013cc8 <ucdr_deserialize_array_uint8_t+0x40>

08013cec <ucdr_deserialize_endian_array_uint8_t>:
 8013cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013cf0:	4619      	mov	r1, r3
 8013cf2:	461f      	mov	r7, r3
 8013cf4:	4605      	mov	r5, r0
 8013cf6:	4690      	mov	r8, r2
 8013cf8:	f7f9 f8fa 	bl	800cef0 <ucdr_check_buffer_available_for>
 8013cfc:	b9e0      	cbnz	r0, 8013d38 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8013cfe:	463e      	mov	r6, r7
 8013d00:	e009      	b.n	8013d16 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8013d02:	68a9      	ldr	r1, [r5, #8]
 8013d04:	f004 f8b3 	bl	8017e6e <memcpy>
 8013d08:	68ab      	ldr	r3, [r5, #8]
 8013d0a:	6928      	ldr	r0, [r5, #16]
 8013d0c:	4423      	add	r3, r4
 8013d0e:	4420      	add	r0, r4
 8013d10:	1b36      	subs	r6, r6, r4
 8013d12:	60ab      	str	r3, [r5, #8]
 8013d14:	6128      	str	r0, [r5, #16]
 8013d16:	2201      	movs	r2, #1
 8013d18:	4631      	mov	r1, r6
 8013d1a:	4628      	mov	r0, r5
 8013d1c:	f7f9 f970 	bl	800d000 <ucdr_check_final_buffer_behavior_array>
 8013d20:	4604      	mov	r4, r0
 8013d22:	1bb8      	subs	r0, r7, r6
 8013d24:	4440      	add	r0, r8
 8013d26:	4622      	mov	r2, r4
 8013d28:	2c00      	cmp	r4, #0
 8013d2a:	d1ea      	bne.n	8013d02 <ucdr_deserialize_endian_array_uint8_t+0x16>
 8013d2c:	2301      	movs	r3, #1
 8013d2e:	7da8      	ldrb	r0, [r5, #22]
 8013d30:	756b      	strb	r3, [r5, #21]
 8013d32:	4058      	eors	r0, r3
 8013d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d38:	463a      	mov	r2, r7
 8013d3a:	68a9      	ldr	r1, [r5, #8]
 8013d3c:	4640      	mov	r0, r8
 8013d3e:	f004 f896 	bl	8017e6e <memcpy>
 8013d42:	68aa      	ldr	r2, [r5, #8]
 8013d44:	692b      	ldr	r3, [r5, #16]
 8013d46:	443a      	add	r2, r7
 8013d48:	443b      	add	r3, r7
 8013d4a:	60aa      	str	r2, [r5, #8]
 8013d4c:	612b      	str	r3, [r5, #16]
 8013d4e:	e7ed      	b.n	8013d2c <ucdr_deserialize_endian_array_uint8_t+0x40>

08013d50 <ucdr_serialize_bool>:
 8013d50:	b538      	push	{r3, r4, r5, lr}
 8013d52:	460d      	mov	r5, r1
 8013d54:	2101      	movs	r1, #1
 8013d56:	4604      	mov	r4, r0
 8013d58:	f7f9 f8d6 	bl	800cf08 <ucdr_check_final_buffer_behavior>
 8013d5c:	b148      	cbz	r0, 8013d72 <ucdr_serialize_bool+0x22>
 8013d5e:	68a3      	ldr	r3, [r4, #8]
 8013d60:	701d      	strb	r5, [r3, #0]
 8013d62:	68a2      	ldr	r2, [r4, #8]
 8013d64:	6923      	ldr	r3, [r4, #16]
 8013d66:	2101      	movs	r1, #1
 8013d68:	440a      	add	r2, r1
 8013d6a:	440b      	add	r3, r1
 8013d6c:	60a2      	str	r2, [r4, #8]
 8013d6e:	6123      	str	r3, [r4, #16]
 8013d70:	7561      	strb	r1, [r4, #21]
 8013d72:	7da0      	ldrb	r0, [r4, #22]
 8013d74:	f080 0001 	eor.w	r0, r0, #1
 8013d78:	bd38      	pop	{r3, r4, r5, pc}
 8013d7a:	bf00      	nop

08013d7c <ucdr_deserialize_bool>:
 8013d7c:	b538      	push	{r3, r4, r5, lr}
 8013d7e:	460d      	mov	r5, r1
 8013d80:	2101      	movs	r1, #1
 8013d82:	4604      	mov	r4, r0
 8013d84:	f7f9 f8c0 	bl	800cf08 <ucdr_check_final_buffer_behavior>
 8013d88:	b160      	cbz	r0, 8013da4 <ucdr_deserialize_bool+0x28>
 8013d8a:	68a2      	ldr	r2, [r4, #8]
 8013d8c:	6923      	ldr	r3, [r4, #16]
 8013d8e:	f812 1b01 	ldrb.w	r1, [r2], #1
 8013d92:	3900      	subs	r1, #0
 8013d94:	bf18      	it	ne
 8013d96:	2101      	movne	r1, #1
 8013d98:	7029      	strb	r1, [r5, #0]
 8013d9a:	3301      	adds	r3, #1
 8013d9c:	2101      	movs	r1, #1
 8013d9e:	60a2      	str	r2, [r4, #8]
 8013da0:	6123      	str	r3, [r4, #16]
 8013da2:	7561      	strb	r1, [r4, #21]
 8013da4:	7da0      	ldrb	r0, [r4, #22]
 8013da6:	f080 0001 	eor.w	r0, r0, #1
 8013daa:	bd38      	pop	{r3, r4, r5, pc}

08013dac <ucdr_serialize_uint8_t>:
 8013dac:	b538      	push	{r3, r4, r5, lr}
 8013dae:	460d      	mov	r5, r1
 8013db0:	2101      	movs	r1, #1
 8013db2:	4604      	mov	r4, r0
 8013db4:	f7f9 f8a8 	bl	800cf08 <ucdr_check_final_buffer_behavior>
 8013db8:	b148      	cbz	r0, 8013dce <ucdr_serialize_uint8_t+0x22>
 8013dba:	68a3      	ldr	r3, [r4, #8]
 8013dbc:	701d      	strb	r5, [r3, #0]
 8013dbe:	68a2      	ldr	r2, [r4, #8]
 8013dc0:	6923      	ldr	r3, [r4, #16]
 8013dc2:	2101      	movs	r1, #1
 8013dc4:	440a      	add	r2, r1
 8013dc6:	440b      	add	r3, r1
 8013dc8:	60a2      	str	r2, [r4, #8]
 8013dca:	6123      	str	r3, [r4, #16]
 8013dcc:	7561      	strb	r1, [r4, #21]
 8013dce:	7da0      	ldrb	r0, [r4, #22]
 8013dd0:	f080 0001 	eor.w	r0, r0, #1
 8013dd4:	bd38      	pop	{r3, r4, r5, pc}
 8013dd6:	bf00      	nop

08013dd8 <ucdr_deserialize_uint8_t>:
 8013dd8:	b538      	push	{r3, r4, r5, lr}
 8013dda:	460d      	mov	r5, r1
 8013ddc:	2101      	movs	r1, #1
 8013dde:	4604      	mov	r4, r0
 8013de0:	f7f9 f892 	bl	800cf08 <ucdr_check_final_buffer_behavior>
 8013de4:	b150      	cbz	r0, 8013dfc <ucdr_deserialize_uint8_t+0x24>
 8013de6:	68a3      	ldr	r3, [r4, #8]
 8013de8:	781b      	ldrb	r3, [r3, #0]
 8013dea:	702b      	strb	r3, [r5, #0]
 8013dec:	68a2      	ldr	r2, [r4, #8]
 8013dee:	6923      	ldr	r3, [r4, #16]
 8013df0:	2101      	movs	r1, #1
 8013df2:	440a      	add	r2, r1
 8013df4:	440b      	add	r3, r1
 8013df6:	60a2      	str	r2, [r4, #8]
 8013df8:	6123      	str	r3, [r4, #16]
 8013dfa:	7561      	strb	r1, [r4, #21]
 8013dfc:	7da0      	ldrb	r0, [r4, #22]
 8013dfe:	f080 0001 	eor.w	r0, r0, #1
 8013e02:	bd38      	pop	{r3, r4, r5, pc}

08013e04 <ucdr_serialize_uint16_t>:
 8013e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e08:	b082      	sub	sp, #8
 8013e0a:	460b      	mov	r3, r1
 8013e0c:	2102      	movs	r1, #2
 8013e0e:	4604      	mov	r4, r0
 8013e10:	f8ad 3006 	strh.w	r3, [sp, #6]
 8013e14:	f7f9 f8cc 	bl	800cfb0 <ucdr_buffer_alignment>
 8013e18:	4601      	mov	r1, r0
 8013e1a:	4620      	mov	r0, r4
 8013e1c:	7d67      	ldrb	r7, [r4, #21]
 8013e1e:	f7f9 f90b 	bl	800d038 <ucdr_advance_buffer>
 8013e22:	2102      	movs	r1, #2
 8013e24:	4620      	mov	r0, r4
 8013e26:	f7f9 f863 	bl	800cef0 <ucdr_check_buffer_available_for>
 8013e2a:	bb78      	cbnz	r0, 8013e8c <ucdr_serialize_uint16_t+0x88>
 8013e2c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8013e30:	42ab      	cmp	r3, r5
 8013e32:	d926      	bls.n	8013e82 <ucdr_serialize_uint16_t+0x7e>
 8013e34:	1b5e      	subs	r6, r3, r5
 8013e36:	60a3      	str	r3, [r4, #8]
 8013e38:	6923      	ldr	r3, [r4, #16]
 8013e3a:	f1c6 0802 	rsb	r8, r6, #2
 8013e3e:	4433      	add	r3, r6
 8013e40:	6123      	str	r3, [r4, #16]
 8013e42:	4641      	mov	r1, r8
 8013e44:	4620      	mov	r0, r4
 8013e46:	f7f9 f85f 	bl	800cf08 <ucdr_check_final_buffer_behavior>
 8013e4a:	2800      	cmp	r0, #0
 8013e4c:	d03b      	beq.n	8013ec6 <ucdr_serialize_uint16_t+0xc2>
 8013e4e:	7d23      	ldrb	r3, [r4, #20]
 8013e50:	2b01      	cmp	r3, #1
 8013e52:	d04a      	beq.n	8013eea <ucdr_serialize_uint16_t+0xe6>
 8013e54:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013e58:	702b      	strb	r3, [r5, #0]
 8013e5a:	2e00      	cmp	r6, #0
 8013e5c:	d040      	beq.n	8013ee0 <ucdr_serialize_uint16_t+0xdc>
 8013e5e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013e62:	706b      	strb	r3, [r5, #1]
 8013e64:	6923      	ldr	r3, [r4, #16]
 8013e66:	68a2      	ldr	r2, [r4, #8]
 8013e68:	7da0      	ldrb	r0, [r4, #22]
 8013e6a:	3302      	adds	r3, #2
 8013e6c:	1b9e      	subs	r6, r3, r6
 8013e6e:	4442      	add	r2, r8
 8013e70:	2302      	movs	r3, #2
 8013e72:	f080 0001 	eor.w	r0, r0, #1
 8013e76:	60a2      	str	r2, [r4, #8]
 8013e78:	6126      	str	r6, [r4, #16]
 8013e7a:	7563      	strb	r3, [r4, #21]
 8013e7c:	b002      	add	sp, #8
 8013e7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e82:	2102      	movs	r1, #2
 8013e84:	4620      	mov	r0, r4
 8013e86:	f7f9 f83f 	bl	800cf08 <ucdr_check_final_buffer_behavior>
 8013e8a:	b190      	cbz	r0, 8013eb2 <ucdr_serialize_uint16_t+0xae>
 8013e8c:	7d23      	ldrb	r3, [r4, #20]
 8013e8e:	2b01      	cmp	r3, #1
 8013e90:	68a3      	ldr	r3, [r4, #8]
 8013e92:	d014      	beq.n	8013ebe <ucdr_serialize_uint16_t+0xba>
 8013e94:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8013e98:	701a      	strb	r2, [r3, #0]
 8013e9a:	68a3      	ldr	r3, [r4, #8]
 8013e9c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013ea0:	705a      	strb	r2, [r3, #1]
 8013ea2:	68a2      	ldr	r2, [r4, #8]
 8013ea4:	6923      	ldr	r3, [r4, #16]
 8013ea6:	3202      	adds	r2, #2
 8013ea8:	3302      	adds	r3, #2
 8013eaa:	2102      	movs	r1, #2
 8013eac:	60a2      	str	r2, [r4, #8]
 8013eae:	6123      	str	r3, [r4, #16]
 8013eb0:	7561      	strb	r1, [r4, #21]
 8013eb2:	7da0      	ldrb	r0, [r4, #22]
 8013eb4:	f080 0001 	eor.w	r0, r0, #1
 8013eb8:	b002      	add	sp, #8
 8013eba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ebe:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8013ec2:	801a      	strh	r2, [r3, #0]
 8013ec4:	e7ed      	b.n	8013ea2 <ucdr_serialize_uint16_t+0x9e>
 8013ec6:	68a2      	ldr	r2, [r4, #8]
 8013ec8:	6923      	ldr	r3, [r4, #16]
 8013eca:	7da0      	ldrb	r0, [r4, #22]
 8013ecc:	7567      	strb	r7, [r4, #21]
 8013ece:	1b92      	subs	r2, r2, r6
 8013ed0:	1b9b      	subs	r3, r3, r6
 8013ed2:	f080 0001 	eor.w	r0, r0, #1
 8013ed6:	60a2      	str	r2, [r4, #8]
 8013ed8:	6123      	str	r3, [r4, #16]
 8013eda:	b002      	add	sp, #8
 8013edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ee0:	68a3      	ldr	r3, [r4, #8]
 8013ee2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013ee6:	701a      	strb	r2, [r3, #0]
 8013ee8:	e7bc      	b.n	8013e64 <ucdr_serialize_uint16_t+0x60>
 8013eea:	4628      	mov	r0, r5
 8013eec:	f10d 0506 	add.w	r5, sp, #6
 8013ef0:	4629      	mov	r1, r5
 8013ef2:	4632      	mov	r2, r6
 8013ef4:	f003 ffbb 	bl	8017e6e <memcpy>
 8013ef8:	68a0      	ldr	r0, [r4, #8]
 8013efa:	4642      	mov	r2, r8
 8013efc:	19a9      	adds	r1, r5, r6
 8013efe:	f003 ffb6 	bl	8017e6e <memcpy>
 8013f02:	e7af      	b.n	8013e64 <ucdr_serialize_uint16_t+0x60>

08013f04 <ucdr_serialize_endian_uint16_t>:
 8013f04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013f08:	b083      	sub	sp, #12
 8013f0a:	460d      	mov	r5, r1
 8013f0c:	2102      	movs	r1, #2
 8013f0e:	4604      	mov	r4, r0
 8013f10:	f8ad 2006 	strh.w	r2, [sp, #6]
 8013f14:	f7f9 f84c 	bl	800cfb0 <ucdr_buffer_alignment>
 8013f18:	4601      	mov	r1, r0
 8013f1a:	4620      	mov	r0, r4
 8013f1c:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013f20:	f7f9 f88a 	bl	800d038 <ucdr_advance_buffer>
 8013f24:	2102      	movs	r1, #2
 8013f26:	4620      	mov	r0, r4
 8013f28:	f7f8 ffe2 	bl	800cef0 <ucdr_check_buffer_available_for>
 8013f2c:	bb70      	cbnz	r0, 8013f8c <ucdr_serialize_endian_uint16_t+0x88>
 8013f2e:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8013f32:	42be      	cmp	r6, r7
 8013f34:	d925      	bls.n	8013f82 <ucdr_serialize_endian_uint16_t+0x7e>
 8013f36:	6923      	ldr	r3, [r4, #16]
 8013f38:	60a6      	str	r6, [r4, #8]
 8013f3a:	1bf6      	subs	r6, r6, r7
 8013f3c:	4433      	add	r3, r6
 8013f3e:	f1c6 0902 	rsb	r9, r6, #2
 8013f42:	6123      	str	r3, [r4, #16]
 8013f44:	4649      	mov	r1, r9
 8013f46:	4620      	mov	r0, r4
 8013f48:	f7f8 ffde 	bl	800cf08 <ucdr_check_final_buffer_behavior>
 8013f4c:	2800      	cmp	r0, #0
 8013f4e:	d039      	beq.n	8013fc4 <ucdr_serialize_endian_uint16_t+0xc0>
 8013f50:	2d01      	cmp	r5, #1
 8013f52:	d04a      	beq.n	8013fea <ucdr_serialize_endian_uint16_t+0xe6>
 8013f54:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013f58:	703b      	strb	r3, [r7, #0]
 8013f5a:	2e00      	cmp	r6, #0
 8013f5c:	d040      	beq.n	8013fe0 <ucdr_serialize_endian_uint16_t+0xdc>
 8013f5e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013f62:	707b      	strb	r3, [r7, #1]
 8013f64:	6923      	ldr	r3, [r4, #16]
 8013f66:	68a2      	ldr	r2, [r4, #8]
 8013f68:	7da0      	ldrb	r0, [r4, #22]
 8013f6a:	3302      	adds	r3, #2
 8013f6c:	444a      	add	r2, r9
 8013f6e:	1b9b      	subs	r3, r3, r6
 8013f70:	2102      	movs	r1, #2
 8013f72:	f080 0001 	eor.w	r0, r0, #1
 8013f76:	60a2      	str	r2, [r4, #8]
 8013f78:	6123      	str	r3, [r4, #16]
 8013f7a:	7561      	strb	r1, [r4, #21]
 8013f7c:	b003      	add	sp, #12
 8013f7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013f82:	2102      	movs	r1, #2
 8013f84:	4620      	mov	r0, r4
 8013f86:	f7f8 ffbf 	bl	800cf08 <ucdr_check_final_buffer_behavior>
 8013f8a:	b188      	cbz	r0, 8013fb0 <ucdr_serialize_endian_uint16_t+0xac>
 8013f8c:	2d01      	cmp	r5, #1
 8013f8e:	68a3      	ldr	r3, [r4, #8]
 8013f90:	d014      	beq.n	8013fbc <ucdr_serialize_endian_uint16_t+0xb8>
 8013f92:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8013f96:	701a      	strb	r2, [r3, #0]
 8013f98:	68a3      	ldr	r3, [r4, #8]
 8013f9a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013f9e:	705a      	strb	r2, [r3, #1]
 8013fa0:	68a2      	ldr	r2, [r4, #8]
 8013fa2:	6923      	ldr	r3, [r4, #16]
 8013fa4:	3202      	adds	r2, #2
 8013fa6:	3302      	adds	r3, #2
 8013fa8:	2102      	movs	r1, #2
 8013faa:	60a2      	str	r2, [r4, #8]
 8013fac:	6123      	str	r3, [r4, #16]
 8013fae:	7561      	strb	r1, [r4, #21]
 8013fb0:	7da0      	ldrb	r0, [r4, #22]
 8013fb2:	f080 0001 	eor.w	r0, r0, #1
 8013fb6:	b003      	add	sp, #12
 8013fb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013fbc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8013fc0:	801a      	strh	r2, [r3, #0]
 8013fc2:	e7ed      	b.n	8013fa0 <ucdr_serialize_endian_uint16_t+0x9c>
 8013fc4:	68a2      	ldr	r2, [r4, #8]
 8013fc6:	6923      	ldr	r3, [r4, #16]
 8013fc8:	7da0      	ldrb	r0, [r4, #22]
 8013fca:	f884 8015 	strb.w	r8, [r4, #21]
 8013fce:	1b92      	subs	r2, r2, r6
 8013fd0:	1b9b      	subs	r3, r3, r6
 8013fd2:	f080 0001 	eor.w	r0, r0, #1
 8013fd6:	60a2      	str	r2, [r4, #8]
 8013fd8:	6123      	str	r3, [r4, #16]
 8013fda:	b003      	add	sp, #12
 8013fdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013fe0:	68a3      	ldr	r3, [r4, #8]
 8013fe2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013fe6:	701a      	strb	r2, [r3, #0]
 8013fe8:	e7bc      	b.n	8013f64 <ucdr_serialize_endian_uint16_t+0x60>
 8013fea:	f10d 0506 	add.w	r5, sp, #6
 8013fee:	4629      	mov	r1, r5
 8013ff0:	4632      	mov	r2, r6
 8013ff2:	4638      	mov	r0, r7
 8013ff4:	f003 ff3b 	bl	8017e6e <memcpy>
 8013ff8:	68a0      	ldr	r0, [r4, #8]
 8013ffa:	464a      	mov	r2, r9
 8013ffc:	19a9      	adds	r1, r5, r6
 8013ffe:	f003 ff36 	bl	8017e6e <memcpy>
 8014002:	e7af      	b.n	8013f64 <ucdr_serialize_endian_uint16_t+0x60>

08014004 <ucdr_deserialize_uint16_t>:
 8014004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014008:	460d      	mov	r5, r1
 801400a:	2102      	movs	r1, #2
 801400c:	4604      	mov	r4, r0
 801400e:	f7f8 ffcf 	bl	800cfb0 <ucdr_buffer_alignment>
 8014012:	4601      	mov	r1, r0
 8014014:	4620      	mov	r0, r4
 8014016:	f894 8015 	ldrb.w	r8, [r4, #21]
 801401a:	f7f9 f80d 	bl	800d038 <ucdr_advance_buffer>
 801401e:	2102      	movs	r1, #2
 8014020:	4620      	mov	r0, r4
 8014022:	f7f8 ff65 	bl	800cef0 <ucdr_check_buffer_available_for>
 8014026:	bb60      	cbnz	r0, 8014082 <ucdr_deserialize_uint16_t+0x7e>
 8014028:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 801402c:	42be      	cmp	r6, r7
 801402e:	d923      	bls.n	8014078 <ucdr_deserialize_uint16_t+0x74>
 8014030:	6923      	ldr	r3, [r4, #16]
 8014032:	60a6      	str	r6, [r4, #8]
 8014034:	1bf6      	subs	r6, r6, r7
 8014036:	4433      	add	r3, r6
 8014038:	f1c6 0902 	rsb	r9, r6, #2
 801403c:	6123      	str	r3, [r4, #16]
 801403e:	4649      	mov	r1, r9
 8014040:	4620      	mov	r0, r4
 8014042:	f7f8 ff61 	bl	800cf08 <ucdr_check_final_buffer_behavior>
 8014046:	2800      	cmp	r0, #0
 8014048:	d034      	beq.n	80140b4 <ucdr_deserialize_uint16_t+0xb0>
 801404a:	7d23      	ldrb	r3, [r4, #20]
 801404c:	2b01      	cmp	r3, #1
 801404e:	d042      	beq.n	80140d6 <ucdr_deserialize_uint16_t+0xd2>
 8014050:	787b      	ldrb	r3, [r7, #1]
 8014052:	702b      	strb	r3, [r5, #0]
 8014054:	2e00      	cmp	r6, #0
 8014056:	d03a      	beq.n	80140ce <ucdr_deserialize_uint16_t+0xca>
 8014058:	783b      	ldrb	r3, [r7, #0]
 801405a:	706b      	strb	r3, [r5, #1]
 801405c:	6923      	ldr	r3, [r4, #16]
 801405e:	68a2      	ldr	r2, [r4, #8]
 8014060:	7da0      	ldrb	r0, [r4, #22]
 8014062:	2102      	movs	r1, #2
 8014064:	3302      	adds	r3, #2
 8014066:	444a      	add	r2, r9
 8014068:	1b9b      	subs	r3, r3, r6
 801406a:	7561      	strb	r1, [r4, #21]
 801406c:	60a2      	str	r2, [r4, #8]
 801406e:	6123      	str	r3, [r4, #16]
 8014070:	f080 0001 	eor.w	r0, r0, #1
 8014074:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014078:	2102      	movs	r1, #2
 801407a:	4620      	mov	r0, r4
 801407c:	f7f8 ff44 	bl	800cf08 <ucdr_check_final_buffer_behavior>
 8014080:	b180      	cbz	r0, 80140a4 <ucdr_deserialize_uint16_t+0xa0>
 8014082:	7d23      	ldrb	r3, [r4, #20]
 8014084:	2b01      	cmp	r3, #1
 8014086:	68a3      	ldr	r3, [r4, #8]
 8014088:	d011      	beq.n	80140ae <ucdr_deserialize_uint16_t+0xaa>
 801408a:	785b      	ldrb	r3, [r3, #1]
 801408c:	702b      	strb	r3, [r5, #0]
 801408e:	68a3      	ldr	r3, [r4, #8]
 8014090:	781b      	ldrb	r3, [r3, #0]
 8014092:	706b      	strb	r3, [r5, #1]
 8014094:	68a2      	ldr	r2, [r4, #8]
 8014096:	6923      	ldr	r3, [r4, #16]
 8014098:	3202      	adds	r2, #2
 801409a:	3302      	adds	r3, #2
 801409c:	2102      	movs	r1, #2
 801409e:	60a2      	str	r2, [r4, #8]
 80140a0:	6123      	str	r3, [r4, #16]
 80140a2:	7561      	strb	r1, [r4, #21]
 80140a4:	7da0      	ldrb	r0, [r4, #22]
 80140a6:	f080 0001 	eor.w	r0, r0, #1
 80140aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80140ae:	881b      	ldrh	r3, [r3, #0]
 80140b0:	802b      	strh	r3, [r5, #0]
 80140b2:	e7ef      	b.n	8014094 <ucdr_deserialize_uint16_t+0x90>
 80140b4:	68a2      	ldr	r2, [r4, #8]
 80140b6:	6923      	ldr	r3, [r4, #16]
 80140b8:	7da0      	ldrb	r0, [r4, #22]
 80140ba:	f884 8015 	strb.w	r8, [r4, #21]
 80140be:	1b92      	subs	r2, r2, r6
 80140c0:	1b9b      	subs	r3, r3, r6
 80140c2:	60a2      	str	r2, [r4, #8]
 80140c4:	6123      	str	r3, [r4, #16]
 80140c6:	f080 0001 	eor.w	r0, r0, #1
 80140ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80140ce:	68a3      	ldr	r3, [r4, #8]
 80140d0:	781b      	ldrb	r3, [r3, #0]
 80140d2:	706b      	strb	r3, [r5, #1]
 80140d4:	e7c2      	b.n	801405c <ucdr_deserialize_uint16_t+0x58>
 80140d6:	4639      	mov	r1, r7
 80140d8:	4632      	mov	r2, r6
 80140da:	4628      	mov	r0, r5
 80140dc:	f003 fec7 	bl	8017e6e <memcpy>
 80140e0:	68a1      	ldr	r1, [r4, #8]
 80140e2:	464a      	mov	r2, r9
 80140e4:	19a8      	adds	r0, r5, r6
 80140e6:	f003 fec2 	bl	8017e6e <memcpy>
 80140ea:	e7b7      	b.n	801405c <ucdr_deserialize_uint16_t+0x58>

080140ec <ucdr_deserialize_endian_uint16_t>:
 80140ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80140f0:	460e      	mov	r6, r1
 80140f2:	2102      	movs	r1, #2
 80140f4:	4604      	mov	r4, r0
 80140f6:	4615      	mov	r5, r2
 80140f8:	f7f8 ff5a 	bl	800cfb0 <ucdr_buffer_alignment>
 80140fc:	4601      	mov	r1, r0
 80140fe:	4620      	mov	r0, r4
 8014100:	f894 9015 	ldrb.w	r9, [r4, #21]
 8014104:	f7f8 ff98 	bl	800d038 <ucdr_advance_buffer>
 8014108:	2102      	movs	r1, #2
 801410a:	4620      	mov	r0, r4
 801410c:	f7f8 fef0 	bl	800cef0 <ucdr_check_buffer_available_for>
 8014110:	bb70      	cbnz	r0, 8014170 <ucdr_deserialize_endian_uint16_t+0x84>
 8014112:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 8014116:	4547      	cmp	r7, r8
 8014118:	d925      	bls.n	8014166 <ucdr_deserialize_endian_uint16_t+0x7a>
 801411a:	6923      	ldr	r3, [r4, #16]
 801411c:	60a7      	str	r7, [r4, #8]
 801411e:	eba7 0708 	sub.w	r7, r7, r8
 8014122:	443b      	add	r3, r7
 8014124:	f1c7 0a02 	rsb	sl, r7, #2
 8014128:	6123      	str	r3, [r4, #16]
 801412a:	4651      	mov	r1, sl
 801412c:	4620      	mov	r0, r4
 801412e:	f7f8 feeb 	bl	800cf08 <ucdr_check_final_buffer_behavior>
 8014132:	2800      	cmp	r0, #0
 8014134:	d034      	beq.n	80141a0 <ucdr_deserialize_endian_uint16_t+0xb4>
 8014136:	2e01      	cmp	r6, #1
 8014138:	d043      	beq.n	80141c2 <ucdr_deserialize_endian_uint16_t+0xd6>
 801413a:	f898 3001 	ldrb.w	r3, [r8, #1]
 801413e:	702b      	strb	r3, [r5, #0]
 8014140:	2f00      	cmp	r7, #0
 8014142:	d03a      	beq.n	80141ba <ucdr_deserialize_endian_uint16_t+0xce>
 8014144:	f898 3000 	ldrb.w	r3, [r8]
 8014148:	706b      	strb	r3, [r5, #1]
 801414a:	6923      	ldr	r3, [r4, #16]
 801414c:	68a2      	ldr	r2, [r4, #8]
 801414e:	7da0      	ldrb	r0, [r4, #22]
 8014150:	2102      	movs	r1, #2
 8014152:	3302      	adds	r3, #2
 8014154:	4452      	add	r2, sl
 8014156:	1bdb      	subs	r3, r3, r7
 8014158:	7561      	strb	r1, [r4, #21]
 801415a:	60a2      	str	r2, [r4, #8]
 801415c:	6123      	str	r3, [r4, #16]
 801415e:	f080 0001 	eor.w	r0, r0, #1
 8014162:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014166:	2102      	movs	r1, #2
 8014168:	4620      	mov	r0, r4
 801416a:	f7f8 fecd 	bl	800cf08 <ucdr_check_final_buffer_behavior>
 801416e:	b178      	cbz	r0, 8014190 <ucdr_deserialize_endian_uint16_t+0xa4>
 8014170:	2e01      	cmp	r6, #1
 8014172:	68a3      	ldr	r3, [r4, #8]
 8014174:	d011      	beq.n	801419a <ucdr_deserialize_endian_uint16_t+0xae>
 8014176:	785b      	ldrb	r3, [r3, #1]
 8014178:	702b      	strb	r3, [r5, #0]
 801417a:	68a3      	ldr	r3, [r4, #8]
 801417c:	781b      	ldrb	r3, [r3, #0]
 801417e:	706b      	strb	r3, [r5, #1]
 8014180:	68a2      	ldr	r2, [r4, #8]
 8014182:	6923      	ldr	r3, [r4, #16]
 8014184:	3202      	adds	r2, #2
 8014186:	3302      	adds	r3, #2
 8014188:	2102      	movs	r1, #2
 801418a:	60a2      	str	r2, [r4, #8]
 801418c:	6123      	str	r3, [r4, #16]
 801418e:	7561      	strb	r1, [r4, #21]
 8014190:	7da0      	ldrb	r0, [r4, #22]
 8014192:	f080 0001 	eor.w	r0, r0, #1
 8014196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801419a:	881b      	ldrh	r3, [r3, #0]
 801419c:	802b      	strh	r3, [r5, #0]
 801419e:	e7ef      	b.n	8014180 <ucdr_deserialize_endian_uint16_t+0x94>
 80141a0:	68a2      	ldr	r2, [r4, #8]
 80141a2:	6923      	ldr	r3, [r4, #16]
 80141a4:	7da0      	ldrb	r0, [r4, #22]
 80141a6:	f884 9015 	strb.w	r9, [r4, #21]
 80141aa:	1bd2      	subs	r2, r2, r7
 80141ac:	1bdb      	subs	r3, r3, r7
 80141ae:	60a2      	str	r2, [r4, #8]
 80141b0:	6123      	str	r3, [r4, #16]
 80141b2:	f080 0001 	eor.w	r0, r0, #1
 80141b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80141ba:	68a3      	ldr	r3, [r4, #8]
 80141bc:	781b      	ldrb	r3, [r3, #0]
 80141be:	706b      	strb	r3, [r5, #1]
 80141c0:	e7c3      	b.n	801414a <ucdr_deserialize_endian_uint16_t+0x5e>
 80141c2:	4641      	mov	r1, r8
 80141c4:	463a      	mov	r2, r7
 80141c6:	4628      	mov	r0, r5
 80141c8:	f003 fe51 	bl	8017e6e <memcpy>
 80141cc:	68a1      	ldr	r1, [r4, #8]
 80141ce:	4652      	mov	r2, sl
 80141d0:	19e8      	adds	r0, r5, r7
 80141d2:	f003 fe4c 	bl	8017e6e <memcpy>
 80141d6:	e7b8      	b.n	801414a <ucdr_deserialize_endian_uint16_t+0x5e>

080141d8 <ucdr_serialize_uint32_t>:
 80141d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80141dc:	b082      	sub	sp, #8
 80141de:	4604      	mov	r4, r0
 80141e0:	9101      	str	r1, [sp, #4]
 80141e2:	2104      	movs	r1, #4
 80141e4:	f7f8 fee4 	bl	800cfb0 <ucdr_buffer_alignment>
 80141e8:	4601      	mov	r1, r0
 80141ea:	4620      	mov	r0, r4
 80141ec:	7d67      	ldrb	r7, [r4, #21]
 80141ee:	f7f8 ff23 	bl	800d038 <ucdr_advance_buffer>
 80141f2:	2104      	movs	r1, #4
 80141f4:	4620      	mov	r0, r4
 80141f6:	f7f8 fe7b 	bl	800cef0 <ucdr_check_buffer_available_for>
 80141fa:	2800      	cmp	r0, #0
 80141fc:	d139      	bne.n	8014272 <ucdr_serialize_uint32_t+0x9a>
 80141fe:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8014202:	42ab      	cmp	r3, r5
 8014204:	d930      	bls.n	8014268 <ucdr_serialize_uint32_t+0x90>
 8014206:	1b5e      	subs	r6, r3, r5
 8014208:	60a3      	str	r3, [r4, #8]
 801420a:	6923      	ldr	r3, [r4, #16]
 801420c:	f1c6 0804 	rsb	r8, r6, #4
 8014210:	4433      	add	r3, r6
 8014212:	6123      	str	r3, [r4, #16]
 8014214:	4641      	mov	r1, r8
 8014216:	4620      	mov	r0, r4
 8014218:	f7f8 fe76 	bl	800cf08 <ucdr_check_final_buffer_behavior>
 801421c:	2800      	cmp	r0, #0
 801421e:	d04c      	beq.n	80142ba <ucdr_serialize_uint32_t+0xe2>
 8014220:	7d23      	ldrb	r3, [r4, #20]
 8014222:	2b01      	cmp	r3, #1
 8014224:	d063      	beq.n	80142ee <ucdr_serialize_uint32_t+0x116>
 8014226:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801422a:	702b      	strb	r3, [r5, #0]
 801422c:	2e00      	cmp	r6, #0
 801422e:	d051      	beq.n	80142d4 <ucdr_serialize_uint32_t+0xfc>
 8014230:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8014234:	706b      	strb	r3, [r5, #1]
 8014236:	2e01      	cmp	r6, #1
 8014238:	d050      	beq.n	80142dc <ucdr_serialize_uint32_t+0x104>
 801423a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801423e:	70ab      	strb	r3, [r5, #2]
 8014240:	2e02      	cmp	r6, #2
 8014242:	d04f      	beq.n	80142e4 <ucdr_serialize_uint32_t+0x10c>
 8014244:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8014248:	70eb      	strb	r3, [r5, #3]
 801424a:	6923      	ldr	r3, [r4, #16]
 801424c:	68a2      	ldr	r2, [r4, #8]
 801424e:	7da0      	ldrb	r0, [r4, #22]
 8014250:	3304      	adds	r3, #4
 8014252:	1b9e      	subs	r6, r3, r6
 8014254:	4442      	add	r2, r8
 8014256:	2304      	movs	r3, #4
 8014258:	f080 0001 	eor.w	r0, r0, #1
 801425c:	60a2      	str	r2, [r4, #8]
 801425e:	6126      	str	r6, [r4, #16]
 8014260:	7563      	strb	r3, [r4, #21]
 8014262:	b002      	add	sp, #8
 8014264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014268:	2104      	movs	r1, #4
 801426a:	4620      	mov	r0, r4
 801426c:	f7f8 fe4c 	bl	800cf08 <ucdr_check_final_buffer_behavior>
 8014270:	b1d0      	cbz	r0, 80142a8 <ucdr_serialize_uint32_t+0xd0>
 8014272:	7d23      	ldrb	r3, [r4, #20]
 8014274:	2b01      	cmp	r3, #1
 8014276:	68a3      	ldr	r3, [r4, #8]
 8014278:	d01c      	beq.n	80142b4 <ucdr_serialize_uint32_t+0xdc>
 801427a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801427e:	701a      	strb	r2, [r3, #0]
 8014280:	68a3      	ldr	r3, [r4, #8]
 8014282:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8014286:	705a      	strb	r2, [r3, #1]
 8014288:	68a3      	ldr	r3, [r4, #8]
 801428a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801428e:	709a      	strb	r2, [r3, #2]
 8014290:	68a3      	ldr	r3, [r4, #8]
 8014292:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8014296:	70da      	strb	r2, [r3, #3]
 8014298:	68a2      	ldr	r2, [r4, #8]
 801429a:	6923      	ldr	r3, [r4, #16]
 801429c:	3204      	adds	r2, #4
 801429e:	3304      	adds	r3, #4
 80142a0:	2104      	movs	r1, #4
 80142a2:	60a2      	str	r2, [r4, #8]
 80142a4:	6123      	str	r3, [r4, #16]
 80142a6:	7561      	strb	r1, [r4, #21]
 80142a8:	7da0      	ldrb	r0, [r4, #22]
 80142aa:	f080 0001 	eor.w	r0, r0, #1
 80142ae:	b002      	add	sp, #8
 80142b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80142b4:	9a01      	ldr	r2, [sp, #4]
 80142b6:	601a      	str	r2, [r3, #0]
 80142b8:	e7ee      	b.n	8014298 <ucdr_serialize_uint32_t+0xc0>
 80142ba:	68a2      	ldr	r2, [r4, #8]
 80142bc:	6923      	ldr	r3, [r4, #16]
 80142be:	7da0      	ldrb	r0, [r4, #22]
 80142c0:	7567      	strb	r7, [r4, #21]
 80142c2:	1b92      	subs	r2, r2, r6
 80142c4:	1b9b      	subs	r3, r3, r6
 80142c6:	f080 0001 	eor.w	r0, r0, #1
 80142ca:	60a2      	str	r2, [r4, #8]
 80142cc:	6123      	str	r3, [r4, #16]
 80142ce:	b002      	add	sp, #8
 80142d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80142d4:	68a3      	ldr	r3, [r4, #8]
 80142d6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80142da:	701a      	strb	r2, [r3, #0]
 80142dc:	68a3      	ldr	r3, [r4, #8]
 80142de:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80142e2:	701a      	strb	r2, [r3, #0]
 80142e4:	68a3      	ldr	r3, [r4, #8]
 80142e6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80142ea:	701a      	strb	r2, [r3, #0]
 80142ec:	e7ad      	b.n	801424a <ucdr_serialize_uint32_t+0x72>
 80142ee:	4628      	mov	r0, r5
 80142f0:	ad01      	add	r5, sp, #4
 80142f2:	4629      	mov	r1, r5
 80142f4:	4632      	mov	r2, r6
 80142f6:	f003 fdba 	bl	8017e6e <memcpy>
 80142fa:	68a0      	ldr	r0, [r4, #8]
 80142fc:	4642      	mov	r2, r8
 80142fe:	19a9      	adds	r1, r5, r6
 8014300:	f003 fdb5 	bl	8017e6e <memcpy>
 8014304:	e7a1      	b.n	801424a <ucdr_serialize_uint32_t+0x72>
 8014306:	bf00      	nop

08014308 <ucdr_serialize_endian_uint32_t>:
 8014308:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801430c:	b083      	sub	sp, #12
 801430e:	460d      	mov	r5, r1
 8014310:	2104      	movs	r1, #4
 8014312:	4604      	mov	r4, r0
 8014314:	9201      	str	r2, [sp, #4]
 8014316:	f7f8 fe4b 	bl	800cfb0 <ucdr_buffer_alignment>
 801431a:	4601      	mov	r1, r0
 801431c:	4620      	mov	r0, r4
 801431e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8014322:	f7f8 fe89 	bl	800d038 <ucdr_advance_buffer>
 8014326:	2104      	movs	r1, #4
 8014328:	4620      	mov	r0, r4
 801432a:	f7f8 fde1 	bl	800cef0 <ucdr_check_buffer_available_for>
 801432e:	2800      	cmp	r0, #0
 8014330:	d138      	bne.n	80143a4 <ucdr_serialize_endian_uint32_t+0x9c>
 8014332:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8014336:	42b7      	cmp	r7, r6
 8014338:	d92f      	bls.n	801439a <ucdr_serialize_endian_uint32_t+0x92>
 801433a:	6923      	ldr	r3, [r4, #16]
 801433c:	60a7      	str	r7, [r4, #8]
 801433e:	1bbf      	subs	r7, r7, r6
 8014340:	443b      	add	r3, r7
 8014342:	f1c7 0904 	rsb	r9, r7, #4
 8014346:	6123      	str	r3, [r4, #16]
 8014348:	4649      	mov	r1, r9
 801434a:	4620      	mov	r0, r4
 801434c:	f7f8 fddc 	bl	800cf08 <ucdr_check_final_buffer_behavior>
 8014350:	2800      	cmp	r0, #0
 8014352:	d04a      	beq.n	80143ea <ucdr_serialize_endian_uint32_t+0xe2>
 8014354:	2d01      	cmp	r5, #1
 8014356:	d063      	beq.n	8014420 <ucdr_serialize_endian_uint32_t+0x118>
 8014358:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801435c:	7033      	strb	r3, [r6, #0]
 801435e:	2f00      	cmp	r7, #0
 8014360:	d051      	beq.n	8014406 <ucdr_serialize_endian_uint32_t+0xfe>
 8014362:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8014366:	7073      	strb	r3, [r6, #1]
 8014368:	2f01      	cmp	r7, #1
 801436a:	d050      	beq.n	801440e <ucdr_serialize_endian_uint32_t+0x106>
 801436c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8014370:	70b3      	strb	r3, [r6, #2]
 8014372:	2f02      	cmp	r7, #2
 8014374:	d04f      	beq.n	8014416 <ucdr_serialize_endian_uint32_t+0x10e>
 8014376:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801437a:	70f3      	strb	r3, [r6, #3]
 801437c:	6923      	ldr	r3, [r4, #16]
 801437e:	68a2      	ldr	r2, [r4, #8]
 8014380:	7da0      	ldrb	r0, [r4, #22]
 8014382:	3304      	adds	r3, #4
 8014384:	444a      	add	r2, r9
 8014386:	1bdb      	subs	r3, r3, r7
 8014388:	2104      	movs	r1, #4
 801438a:	f080 0001 	eor.w	r0, r0, #1
 801438e:	60a2      	str	r2, [r4, #8]
 8014390:	6123      	str	r3, [r4, #16]
 8014392:	7561      	strb	r1, [r4, #21]
 8014394:	b003      	add	sp, #12
 8014396:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801439a:	2104      	movs	r1, #4
 801439c:	4620      	mov	r0, r4
 801439e:	f7f8 fdb3 	bl	800cf08 <ucdr_check_final_buffer_behavior>
 80143a2:	b1c8      	cbz	r0, 80143d8 <ucdr_serialize_endian_uint32_t+0xd0>
 80143a4:	2d01      	cmp	r5, #1
 80143a6:	68a3      	ldr	r3, [r4, #8]
 80143a8:	d01c      	beq.n	80143e4 <ucdr_serialize_endian_uint32_t+0xdc>
 80143aa:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80143ae:	701a      	strb	r2, [r3, #0]
 80143b0:	68a3      	ldr	r3, [r4, #8]
 80143b2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80143b6:	705a      	strb	r2, [r3, #1]
 80143b8:	68a3      	ldr	r3, [r4, #8]
 80143ba:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80143be:	709a      	strb	r2, [r3, #2]
 80143c0:	68a3      	ldr	r3, [r4, #8]
 80143c2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80143c6:	70da      	strb	r2, [r3, #3]
 80143c8:	68a2      	ldr	r2, [r4, #8]
 80143ca:	6923      	ldr	r3, [r4, #16]
 80143cc:	3204      	adds	r2, #4
 80143ce:	3304      	adds	r3, #4
 80143d0:	2104      	movs	r1, #4
 80143d2:	60a2      	str	r2, [r4, #8]
 80143d4:	6123      	str	r3, [r4, #16]
 80143d6:	7561      	strb	r1, [r4, #21]
 80143d8:	7da0      	ldrb	r0, [r4, #22]
 80143da:	f080 0001 	eor.w	r0, r0, #1
 80143de:	b003      	add	sp, #12
 80143e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80143e4:	9a01      	ldr	r2, [sp, #4]
 80143e6:	601a      	str	r2, [r3, #0]
 80143e8:	e7ee      	b.n	80143c8 <ucdr_serialize_endian_uint32_t+0xc0>
 80143ea:	68a2      	ldr	r2, [r4, #8]
 80143ec:	6923      	ldr	r3, [r4, #16]
 80143ee:	7da0      	ldrb	r0, [r4, #22]
 80143f0:	f884 8015 	strb.w	r8, [r4, #21]
 80143f4:	1bd2      	subs	r2, r2, r7
 80143f6:	1bdb      	subs	r3, r3, r7
 80143f8:	f080 0001 	eor.w	r0, r0, #1
 80143fc:	60a2      	str	r2, [r4, #8]
 80143fe:	6123      	str	r3, [r4, #16]
 8014400:	b003      	add	sp, #12
 8014402:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014406:	68a3      	ldr	r3, [r4, #8]
 8014408:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801440c:	701a      	strb	r2, [r3, #0]
 801440e:	68a3      	ldr	r3, [r4, #8]
 8014410:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8014414:	701a      	strb	r2, [r3, #0]
 8014416:	68a3      	ldr	r3, [r4, #8]
 8014418:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801441c:	701a      	strb	r2, [r3, #0]
 801441e:	e7ad      	b.n	801437c <ucdr_serialize_endian_uint32_t+0x74>
 8014420:	ad01      	add	r5, sp, #4
 8014422:	4629      	mov	r1, r5
 8014424:	463a      	mov	r2, r7
 8014426:	4630      	mov	r0, r6
 8014428:	f003 fd21 	bl	8017e6e <memcpy>
 801442c:	68a0      	ldr	r0, [r4, #8]
 801442e:	464a      	mov	r2, r9
 8014430:	19e9      	adds	r1, r5, r7
 8014432:	f003 fd1c 	bl	8017e6e <memcpy>
 8014436:	e7a1      	b.n	801437c <ucdr_serialize_endian_uint32_t+0x74>

08014438 <ucdr_deserialize_uint32_t>:
 8014438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801443c:	460d      	mov	r5, r1
 801443e:	2104      	movs	r1, #4
 8014440:	4604      	mov	r4, r0
 8014442:	f7f8 fdb5 	bl	800cfb0 <ucdr_buffer_alignment>
 8014446:	4601      	mov	r1, r0
 8014448:	4620      	mov	r0, r4
 801444a:	f894 8015 	ldrb.w	r8, [r4, #21]
 801444e:	f7f8 fdf3 	bl	800d038 <ucdr_advance_buffer>
 8014452:	2104      	movs	r1, #4
 8014454:	4620      	mov	r0, r4
 8014456:	f7f8 fd4b 	bl	800cef0 <ucdr_check_buffer_available_for>
 801445a:	2800      	cmp	r0, #0
 801445c:	d138      	bne.n	80144d0 <ucdr_deserialize_uint32_t+0x98>
 801445e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8014462:	42b7      	cmp	r7, r6
 8014464:	d92f      	bls.n	80144c6 <ucdr_deserialize_uint32_t+0x8e>
 8014466:	6923      	ldr	r3, [r4, #16]
 8014468:	60a7      	str	r7, [r4, #8]
 801446a:	1bbf      	subs	r7, r7, r6
 801446c:	443b      	add	r3, r7
 801446e:	f1c7 0904 	rsb	r9, r7, #4
 8014472:	6123      	str	r3, [r4, #16]
 8014474:	4649      	mov	r1, r9
 8014476:	4620      	mov	r0, r4
 8014478:	f7f8 fd46 	bl	800cf08 <ucdr_check_final_buffer_behavior>
 801447c:	2800      	cmp	r0, #0
 801447e:	d046      	beq.n	801450e <ucdr_deserialize_uint32_t+0xd6>
 8014480:	7d23      	ldrb	r3, [r4, #20]
 8014482:	2b01      	cmp	r3, #1
 8014484:	d05c      	beq.n	8014540 <ucdr_deserialize_uint32_t+0x108>
 8014486:	78f3      	ldrb	r3, [r6, #3]
 8014488:	702b      	strb	r3, [r5, #0]
 801448a:	2f00      	cmp	r7, #0
 801448c:	d04c      	beq.n	8014528 <ucdr_deserialize_uint32_t+0xf0>
 801448e:	78b3      	ldrb	r3, [r6, #2]
 8014490:	706b      	strb	r3, [r5, #1]
 8014492:	2f01      	cmp	r7, #1
 8014494:	f105 0302 	add.w	r3, r5, #2
 8014498:	d04a      	beq.n	8014530 <ucdr_deserialize_uint32_t+0xf8>
 801449a:	7873      	ldrb	r3, [r6, #1]
 801449c:	70ab      	strb	r3, [r5, #2]
 801449e:	2f02      	cmp	r7, #2
 80144a0:	f105 0303 	add.w	r3, r5, #3
 80144a4:	d048      	beq.n	8014538 <ucdr_deserialize_uint32_t+0x100>
 80144a6:	7833      	ldrb	r3, [r6, #0]
 80144a8:	70eb      	strb	r3, [r5, #3]
 80144aa:	6923      	ldr	r3, [r4, #16]
 80144ac:	68a2      	ldr	r2, [r4, #8]
 80144ae:	7da0      	ldrb	r0, [r4, #22]
 80144b0:	2104      	movs	r1, #4
 80144b2:	3304      	adds	r3, #4
 80144b4:	444a      	add	r2, r9
 80144b6:	1bdb      	subs	r3, r3, r7
 80144b8:	7561      	strb	r1, [r4, #21]
 80144ba:	60a2      	str	r2, [r4, #8]
 80144bc:	6123      	str	r3, [r4, #16]
 80144be:	f080 0001 	eor.w	r0, r0, #1
 80144c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80144c6:	2104      	movs	r1, #4
 80144c8:	4620      	mov	r0, r4
 80144ca:	f7f8 fd1d 	bl	800cf08 <ucdr_check_final_buffer_behavior>
 80144ce:	b1b0      	cbz	r0, 80144fe <ucdr_deserialize_uint32_t+0xc6>
 80144d0:	7d23      	ldrb	r3, [r4, #20]
 80144d2:	2b01      	cmp	r3, #1
 80144d4:	68a3      	ldr	r3, [r4, #8]
 80144d6:	d017      	beq.n	8014508 <ucdr_deserialize_uint32_t+0xd0>
 80144d8:	78db      	ldrb	r3, [r3, #3]
 80144da:	702b      	strb	r3, [r5, #0]
 80144dc:	68a3      	ldr	r3, [r4, #8]
 80144de:	789b      	ldrb	r3, [r3, #2]
 80144e0:	706b      	strb	r3, [r5, #1]
 80144e2:	68a3      	ldr	r3, [r4, #8]
 80144e4:	785b      	ldrb	r3, [r3, #1]
 80144e6:	70ab      	strb	r3, [r5, #2]
 80144e8:	68a3      	ldr	r3, [r4, #8]
 80144ea:	781b      	ldrb	r3, [r3, #0]
 80144ec:	70eb      	strb	r3, [r5, #3]
 80144ee:	68a2      	ldr	r2, [r4, #8]
 80144f0:	6923      	ldr	r3, [r4, #16]
 80144f2:	3204      	adds	r2, #4
 80144f4:	3304      	adds	r3, #4
 80144f6:	2104      	movs	r1, #4
 80144f8:	60a2      	str	r2, [r4, #8]
 80144fa:	6123      	str	r3, [r4, #16]
 80144fc:	7561      	strb	r1, [r4, #21]
 80144fe:	7da0      	ldrb	r0, [r4, #22]
 8014500:	f080 0001 	eor.w	r0, r0, #1
 8014504:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014508:	681b      	ldr	r3, [r3, #0]
 801450a:	602b      	str	r3, [r5, #0]
 801450c:	e7ef      	b.n	80144ee <ucdr_deserialize_uint32_t+0xb6>
 801450e:	68a2      	ldr	r2, [r4, #8]
 8014510:	6923      	ldr	r3, [r4, #16]
 8014512:	7da0      	ldrb	r0, [r4, #22]
 8014514:	f884 8015 	strb.w	r8, [r4, #21]
 8014518:	1bd2      	subs	r2, r2, r7
 801451a:	1bdb      	subs	r3, r3, r7
 801451c:	60a2      	str	r2, [r4, #8]
 801451e:	6123      	str	r3, [r4, #16]
 8014520:	f080 0001 	eor.w	r0, r0, #1
 8014524:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014528:	68a3      	ldr	r3, [r4, #8]
 801452a:	789b      	ldrb	r3, [r3, #2]
 801452c:	706b      	strb	r3, [r5, #1]
 801452e:	1cab      	adds	r3, r5, #2
 8014530:	68a2      	ldr	r2, [r4, #8]
 8014532:	7852      	ldrb	r2, [r2, #1]
 8014534:	f803 2b01 	strb.w	r2, [r3], #1
 8014538:	68a2      	ldr	r2, [r4, #8]
 801453a:	7812      	ldrb	r2, [r2, #0]
 801453c:	701a      	strb	r2, [r3, #0]
 801453e:	e7b4      	b.n	80144aa <ucdr_deserialize_uint32_t+0x72>
 8014540:	4631      	mov	r1, r6
 8014542:	463a      	mov	r2, r7
 8014544:	4628      	mov	r0, r5
 8014546:	f003 fc92 	bl	8017e6e <memcpy>
 801454a:	68a1      	ldr	r1, [r4, #8]
 801454c:	464a      	mov	r2, r9
 801454e:	19e8      	adds	r0, r5, r7
 8014550:	f003 fc8d 	bl	8017e6e <memcpy>
 8014554:	e7a9      	b.n	80144aa <ucdr_deserialize_uint32_t+0x72>
 8014556:	bf00      	nop

08014558 <ucdr_deserialize_endian_uint32_t>:
 8014558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801455c:	460e      	mov	r6, r1
 801455e:	2104      	movs	r1, #4
 8014560:	4604      	mov	r4, r0
 8014562:	4615      	mov	r5, r2
 8014564:	f7f8 fd24 	bl	800cfb0 <ucdr_buffer_alignment>
 8014568:	4601      	mov	r1, r0
 801456a:	4620      	mov	r0, r4
 801456c:	f894 9015 	ldrb.w	r9, [r4, #21]
 8014570:	f7f8 fd62 	bl	800d038 <ucdr_advance_buffer>
 8014574:	2104      	movs	r1, #4
 8014576:	4620      	mov	r0, r4
 8014578:	f7f8 fcba 	bl	800cef0 <ucdr_check_buffer_available_for>
 801457c:	2800      	cmp	r0, #0
 801457e:	d13c      	bne.n	80145fa <ucdr_deserialize_endian_uint32_t+0xa2>
 8014580:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 8014584:	42bb      	cmp	r3, r7
 8014586:	d933      	bls.n	80145f0 <ucdr_deserialize_endian_uint32_t+0x98>
 8014588:	eba3 0807 	sub.w	r8, r3, r7
 801458c:	60a3      	str	r3, [r4, #8]
 801458e:	6923      	ldr	r3, [r4, #16]
 8014590:	f1c8 0a04 	rsb	sl, r8, #4
 8014594:	4443      	add	r3, r8
 8014596:	6123      	str	r3, [r4, #16]
 8014598:	4651      	mov	r1, sl
 801459a:	4620      	mov	r0, r4
 801459c:	f7f8 fcb4 	bl	800cf08 <ucdr_check_final_buffer_behavior>
 80145a0:	2800      	cmp	r0, #0
 80145a2:	d048      	beq.n	8014636 <ucdr_deserialize_endian_uint32_t+0xde>
 80145a4:	2e01      	cmp	r6, #1
 80145a6:	d061      	beq.n	801466c <ucdr_deserialize_endian_uint32_t+0x114>
 80145a8:	78fb      	ldrb	r3, [r7, #3]
 80145aa:	702b      	strb	r3, [r5, #0]
 80145ac:	f1b8 0f00 	cmp.w	r8, #0
 80145b0:	d050      	beq.n	8014654 <ucdr_deserialize_endian_uint32_t+0xfc>
 80145b2:	78bb      	ldrb	r3, [r7, #2]
 80145b4:	706b      	strb	r3, [r5, #1]
 80145b6:	f1b8 0f01 	cmp.w	r8, #1
 80145ba:	f105 0302 	add.w	r3, r5, #2
 80145be:	d04d      	beq.n	801465c <ucdr_deserialize_endian_uint32_t+0x104>
 80145c0:	787b      	ldrb	r3, [r7, #1]
 80145c2:	70ab      	strb	r3, [r5, #2]
 80145c4:	f1b8 0f02 	cmp.w	r8, #2
 80145c8:	f105 0303 	add.w	r3, r5, #3
 80145cc:	d04a      	beq.n	8014664 <ucdr_deserialize_endian_uint32_t+0x10c>
 80145ce:	783b      	ldrb	r3, [r7, #0]
 80145d0:	70eb      	strb	r3, [r5, #3]
 80145d2:	6923      	ldr	r3, [r4, #16]
 80145d4:	68a2      	ldr	r2, [r4, #8]
 80145d6:	7da0      	ldrb	r0, [r4, #22]
 80145d8:	2104      	movs	r1, #4
 80145da:	3304      	adds	r3, #4
 80145dc:	4452      	add	r2, sl
 80145de:	eba3 0308 	sub.w	r3, r3, r8
 80145e2:	7561      	strb	r1, [r4, #21]
 80145e4:	60a2      	str	r2, [r4, #8]
 80145e6:	6123      	str	r3, [r4, #16]
 80145e8:	f080 0001 	eor.w	r0, r0, #1
 80145ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80145f0:	2104      	movs	r1, #4
 80145f2:	4620      	mov	r0, r4
 80145f4:	f7f8 fc88 	bl	800cf08 <ucdr_check_final_buffer_behavior>
 80145f8:	b1a8      	cbz	r0, 8014626 <ucdr_deserialize_endian_uint32_t+0xce>
 80145fa:	2e01      	cmp	r6, #1
 80145fc:	68a3      	ldr	r3, [r4, #8]
 80145fe:	d017      	beq.n	8014630 <ucdr_deserialize_endian_uint32_t+0xd8>
 8014600:	78db      	ldrb	r3, [r3, #3]
 8014602:	702b      	strb	r3, [r5, #0]
 8014604:	68a3      	ldr	r3, [r4, #8]
 8014606:	789b      	ldrb	r3, [r3, #2]
 8014608:	706b      	strb	r3, [r5, #1]
 801460a:	68a3      	ldr	r3, [r4, #8]
 801460c:	785b      	ldrb	r3, [r3, #1]
 801460e:	70ab      	strb	r3, [r5, #2]
 8014610:	68a3      	ldr	r3, [r4, #8]
 8014612:	781b      	ldrb	r3, [r3, #0]
 8014614:	70eb      	strb	r3, [r5, #3]
 8014616:	68a2      	ldr	r2, [r4, #8]
 8014618:	6923      	ldr	r3, [r4, #16]
 801461a:	3204      	adds	r2, #4
 801461c:	3304      	adds	r3, #4
 801461e:	2104      	movs	r1, #4
 8014620:	60a2      	str	r2, [r4, #8]
 8014622:	6123      	str	r3, [r4, #16]
 8014624:	7561      	strb	r1, [r4, #21]
 8014626:	7da0      	ldrb	r0, [r4, #22]
 8014628:	f080 0001 	eor.w	r0, r0, #1
 801462c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014630:	681b      	ldr	r3, [r3, #0]
 8014632:	602b      	str	r3, [r5, #0]
 8014634:	e7ef      	b.n	8014616 <ucdr_deserialize_endian_uint32_t+0xbe>
 8014636:	68a2      	ldr	r2, [r4, #8]
 8014638:	6923      	ldr	r3, [r4, #16]
 801463a:	7da0      	ldrb	r0, [r4, #22]
 801463c:	f884 9015 	strb.w	r9, [r4, #21]
 8014640:	eba2 0208 	sub.w	r2, r2, r8
 8014644:	eba3 0308 	sub.w	r3, r3, r8
 8014648:	60a2      	str	r2, [r4, #8]
 801464a:	6123      	str	r3, [r4, #16]
 801464c:	f080 0001 	eor.w	r0, r0, #1
 8014650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014654:	68a3      	ldr	r3, [r4, #8]
 8014656:	789b      	ldrb	r3, [r3, #2]
 8014658:	706b      	strb	r3, [r5, #1]
 801465a:	1cab      	adds	r3, r5, #2
 801465c:	68a2      	ldr	r2, [r4, #8]
 801465e:	7852      	ldrb	r2, [r2, #1]
 8014660:	f803 2b01 	strb.w	r2, [r3], #1
 8014664:	68a2      	ldr	r2, [r4, #8]
 8014666:	7812      	ldrb	r2, [r2, #0]
 8014668:	701a      	strb	r2, [r3, #0]
 801466a:	e7b2      	b.n	80145d2 <ucdr_deserialize_endian_uint32_t+0x7a>
 801466c:	4639      	mov	r1, r7
 801466e:	4642      	mov	r2, r8
 8014670:	4628      	mov	r0, r5
 8014672:	f003 fbfc 	bl	8017e6e <memcpy>
 8014676:	68a1      	ldr	r1, [r4, #8]
 8014678:	4652      	mov	r2, sl
 801467a:	eb05 0008 	add.w	r0, r5, r8
 801467e:	f003 fbf6 	bl	8017e6e <memcpy>
 8014682:	e7a6      	b.n	80145d2 <ucdr_deserialize_endian_uint32_t+0x7a>

08014684 <ucdr_serialize_uint64_t>:
 8014684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014688:	2108      	movs	r1, #8
 801468a:	b082      	sub	sp, #8
 801468c:	4604      	mov	r4, r0
 801468e:	e9cd 2300 	strd	r2, r3, [sp]
 8014692:	f7f8 fc8d 	bl	800cfb0 <ucdr_buffer_alignment>
 8014696:	4601      	mov	r1, r0
 8014698:	4620      	mov	r0, r4
 801469a:	7d67      	ldrb	r7, [r4, #21]
 801469c:	f7f8 fccc 	bl	800d038 <ucdr_advance_buffer>
 80146a0:	2108      	movs	r1, #8
 80146a2:	4620      	mov	r0, r4
 80146a4:	f7f8 fc24 	bl	800cef0 <ucdr_check_buffer_available_for>
 80146a8:	2800      	cmp	r0, #0
 80146aa:	d14e      	bne.n	801474a <ucdr_serialize_uint64_t+0xc6>
 80146ac:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80146b0:	42ab      	cmp	r3, r5
 80146b2:	d945      	bls.n	8014740 <ucdr_serialize_uint64_t+0xbc>
 80146b4:	1b5e      	subs	r6, r3, r5
 80146b6:	60a3      	str	r3, [r4, #8]
 80146b8:	6923      	ldr	r3, [r4, #16]
 80146ba:	f1c6 0808 	rsb	r8, r6, #8
 80146be:	4433      	add	r3, r6
 80146c0:	6123      	str	r3, [r4, #16]
 80146c2:	4641      	mov	r1, r8
 80146c4:	4620      	mov	r0, r4
 80146c6:	f7f8 fc1f 	bl	800cf08 <ucdr_check_final_buffer_behavior>
 80146ca:	2800      	cmp	r0, #0
 80146cc:	d074      	beq.n	80147b8 <ucdr_serialize_uint64_t+0x134>
 80146ce:	7d23      	ldrb	r3, [r4, #20]
 80146d0:	2b01      	cmp	r3, #1
 80146d2:	f000 809b 	beq.w	801480c <ucdr_serialize_uint64_t+0x188>
 80146d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80146da:	702b      	strb	r3, [r5, #0]
 80146dc:	2e00      	cmp	r6, #0
 80146de:	d078      	beq.n	80147d2 <ucdr_serialize_uint64_t+0x14e>
 80146e0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80146e4:	706b      	strb	r3, [r5, #1]
 80146e6:	2e01      	cmp	r6, #1
 80146e8:	d077      	beq.n	80147da <ucdr_serialize_uint64_t+0x156>
 80146ea:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80146ee:	70ab      	strb	r3, [r5, #2]
 80146f0:	2e02      	cmp	r6, #2
 80146f2:	d076      	beq.n	80147e2 <ucdr_serialize_uint64_t+0x15e>
 80146f4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80146f8:	70eb      	strb	r3, [r5, #3]
 80146fa:	2e03      	cmp	r6, #3
 80146fc:	d075      	beq.n	80147ea <ucdr_serialize_uint64_t+0x166>
 80146fe:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8014702:	712b      	strb	r3, [r5, #4]
 8014704:	2e04      	cmp	r6, #4
 8014706:	d074      	beq.n	80147f2 <ucdr_serialize_uint64_t+0x16e>
 8014708:	f89d 3002 	ldrb.w	r3, [sp, #2]
 801470c:	716b      	strb	r3, [r5, #5]
 801470e:	2e05      	cmp	r6, #5
 8014710:	d073      	beq.n	80147fa <ucdr_serialize_uint64_t+0x176>
 8014712:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8014716:	71ab      	strb	r3, [r5, #6]
 8014718:	2e06      	cmp	r6, #6
 801471a:	d072      	beq.n	8014802 <ucdr_serialize_uint64_t+0x17e>
 801471c:	f89d 3000 	ldrb.w	r3, [sp]
 8014720:	71eb      	strb	r3, [r5, #7]
 8014722:	6923      	ldr	r3, [r4, #16]
 8014724:	68a2      	ldr	r2, [r4, #8]
 8014726:	7da0      	ldrb	r0, [r4, #22]
 8014728:	3308      	adds	r3, #8
 801472a:	1b9e      	subs	r6, r3, r6
 801472c:	4442      	add	r2, r8
 801472e:	2308      	movs	r3, #8
 8014730:	f080 0001 	eor.w	r0, r0, #1
 8014734:	60a2      	str	r2, [r4, #8]
 8014736:	6126      	str	r6, [r4, #16]
 8014738:	7563      	strb	r3, [r4, #21]
 801473a:	b002      	add	sp, #8
 801473c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014740:	2108      	movs	r1, #8
 8014742:	4620      	mov	r0, r4
 8014744:	f7f8 fbe0 	bl	800cf08 <ucdr_check_final_buffer_behavior>
 8014748:	b350      	cbz	r0, 80147a0 <ucdr_serialize_uint64_t+0x11c>
 801474a:	7d23      	ldrb	r3, [r4, #20]
 801474c:	2b01      	cmp	r3, #1
 801474e:	d02d      	beq.n	80147ac <ucdr_serialize_uint64_t+0x128>
 8014750:	68a3      	ldr	r3, [r4, #8]
 8014752:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8014756:	701a      	strb	r2, [r3, #0]
 8014758:	68a3      	ldr	r3, [r4, #8]
 801475a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801475e:	705a      	strb	r2, [r3, #1]
 8014760:	68a3      	ldr	r3, [r4, #8]
 8014762:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8014766:	709a      	strb	r2, [r3, #2]
 8014768:	68a3      	ldr	r3, [r4, #8]
 801476a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801476e:	70da      	strb	r2, [r3, #3]
 8014770:	68a3      	ldr	r3, [r4, #8]
 8014772:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8014776:	711a      	strb	r2, [r3, #4]
 8014778:	68a3      	ldr	r3, [r4, #8]
 801477a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 801477e:	715a      	strb	r2, [r3, #5]
 8014780:	68a3      	ldr	r3, [r4, #8]
 8014782:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8014786:	719a      	strb	r2, [r3, #6]
 8014788:	68a3      	ldr	r3, [r4, #8]
 801478a:	f89d 2000 	ldrb.w	r2, [sp]
 801478e:	71da      	strb	r2, [r3, #7]
 8014790:	68a2      	ldr	r2, [r4, #8]
 8014792:	6923      	ldr	r3, [r4, #16]
 8014794:	3208      	adds	r2, #8
 8014796:	3308      	adds	r3, #8
 8014798:	2108      	movs	r1, #8
 801479a:	60a2      	str	r2, [r4, #8]
 801479c:	6123      	str	r3, [r4, #16]
 801479e:	7561      	strb	r1, [r4, #21]
 80147a0:	7da0      	ldrb	r0, [r4, #22]
 80147a2:	f080 0001 	eor.w	r0, r0, #1
 80147a6:	b002      	add	sp, #8
 80147a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80147ac:	466b      	mov	r3, sp
 80147ae:	cb03      	ldmia	r3!, {r0, r1}
 80147b0:	68a3      	ldr	r3, [r4, #8]
 80147b2:	6018      	str	r0, [r3, #0]
 80147b4:	6059      	str	r1, [r3, #4]
 80147b6:	e7eb      	b.n	8014790 <ucdr_serialize_uint64_t+0x10c>
 80147b8:	68a2      	ldr	r2, [r4, #8]
 80147ba:	6923      	ldr	r3, [r4, #16]
 80147bc:	7da0      	ldrb	r0, [r4, #22]
 80147be:	7567      	strb	r7, [r4, #21]
 80147c0:	1b92      	subs	r2, r2, r6
 80147c2:	1b9b      	subs	r3, r3, r6
 80147c4:	f080 0001 	eor.w	r0, r0, #1
 80147c8:	60a2      	str	r2, [r4, #8]
 80147ca:	6123      	str	r3, [r4, #16]
 80147cc:	b002      	add	sp, #8
 80147ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80147d2:	68a3      	ldr	r3, [r4, #8]
 80147d4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80147d8:	701a      	strb	r2, [r3, #0]
 80147da:	68a3      	ldr	r3, [r4, #8]
 80147dc:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80147e0:	701a      	strb	r2, [r3, #0]
 80147e2:	68a3      	ldr	r3, [r4, #8]
 80147e4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80147e8:	701a      	strb	r2, [r3, #0]
 80147ea:	68a3      	ldr	r3, [r4, #8]
 80147ec:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80147f0:	701a      	strb	r2, [r3, #0]
 80147f2:	68a3      	ldr	r3, [r4, #8]
 80147f4:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80147f8:	701a      	strb	r2, [r3, #0]
 80147fa:	68a3      	ldr	r3, [r4, #8]
 80147fc:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8014800:	701a      	strb	r2, [r3, #0]
 8014802:	68a3      	ldr	r3, [r4, #8]
 8014804:	f89d 2000 	ldrb.w	r2, [sp]
 8014808:	701a      	strb	r2, [r3, #0]
 801480a:	e78a      	b.n	8014722 <ucdr_serialize_uint64_t+0x9e>
 801480c:	4628      	mov	r0, r5
 801480e:	466d      	mov	r5, sp
 8014810:	4629      	mov	r1, r5
 8014812:	4632      	mov	r2, r6
 8014814:	f003 fb2b 	bl	8017e6e <memcpy>
 8014818:	68a0      	ldr	r0, [r4, #8]
 801481a:	4642      	mov	r2, r8
 801481c:	19a9      	adds	r1, r5, r6
 801481e:	f003 fb26 	bl	8017e6e <memcpy>
 8014822:	e77e      	b.n	8014722 <ucdr_serialize_uint64_t+0x9e>

08014824 <ucdr_serialize_int16_t>:
 8014824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014828:	b082      	sub	sp, #8
 801482a:	460b      	mov	r3, r1
 801482c:	2102      	movs	r1, #2
 801482e:	4604      	mov	r4, r0
 8014830:	f8ad 3006 	strh.w	r3, [sp, #6]
 8014834:	f7f8 fbbc 	bl	800cfb0 <ucdr_buffer_alignment>
 8014838:	4601      	mov	r1, r0
 801483a:	4620      	mov	r0, r4
 801483c:	7d67      	ldrb	r7, [r4, #21]
 801483e:	f7f8 fbfb 	bl	800d038 <ucdr_advance_buffer>
 8014842:	2102      	movs	r1, #2
 8014844:	4620      	mov	r0, r4
 8014846:	f7f8 fb53 	bl	800cef0 <ucdr_check_buffer_available_for>
 801484a:	bb78      	cbnz	r0, 80148ac <ucdr_serialize_int16_t+0x88>
 801484c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8014850:	42ab      	cmp	r3, r5
 8014852:	d926      	bls.n	80148a2 <ucdr_serialize_int16_t+0x7e>
 8014854:	1b5e      	subs	r6, r3, r5
 8014856:	60a3      	str	r3, [r4, #8]
 8014858:	6923      	ldr	r3, [r4, #16]
 801485a:	f1c6 0802 	rsb	r8, r6, #2
 801485e:	4433      	add	r3, r6
 8014860:	6123      	str	r3, [r4, #16]
 8014862:	4641      	mov	r1, r8
 8014864:	4620      	mov	r0, r4
 8014866:	f7f8 fb4f 	bl	800cf08 <ucdr_check_final_buffer_behavior>
 801486a:	2800      	cmp	r0, #0
 801486c:	d03b      	beq.n	80148e6 <ucdr_serialize_int16_t+0xc2>
 801486e:	7d23      	ldrb	r3, [r4, #20]
 8014870:	2b01      	cmp	r3, #1
 8014872:	d04a      	beq.n	801490a <ucdr_serialize_int16_t+0xe6>
 8014874:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8014878:	702b      	strb	r3, [r5, #0]
 801487a:	2e00      	cmp	r6, #0
 801487c:	d040      	beq.n	8014900 <ucdr_serialize_int16_t+0xdc>
 801487e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8014882:	706b      	strb	r3, [r5, #1]
 8014884:	6923      	ldr	r3, [r4, #16]
 8014886:	68a2      	ldr	r2, [r4, #8]
 8014888:	7da0      	ldrb	r0, [r4, #22]
 801488a:	3302      	adds	r3, #2
 801488c:	1b9e      	subs	r6, r3, r6
 801488e:	4442      	add	r2, r8
 8014890:	2302      	movs	r3, #2
 8014892:	f080 0001 	eor.w	r0, r0, #1
 8014896:	60a2      	str	r2, [r4, #8]
 8014898:	6126      	str	r6, [r4, #16]
 801489a:	7563      	strb	r3, [r4, #21]
 801489c:	b002      	add	sp, #8
 801489e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80148a2:	2102      	movs	r1, #2
 80148a4:	4620      	mov	r0, r4
 80148a6:	f7f8 fb2f 	bl	800cf08 <ucdr_check_final_buffer_behavior>
 80148aa:	b190      	cbz	r0, 80148d2 <ucdr_serialize_int16_t+0xae>
 80148ac:	7d23      	ldrb	r3, [r4, #20]
 80148ae:	2b01      	cmp	r3, #1
 80148b0:	68a3      	ldr	r3, [r4, #8]
 80148b2:	d014      	beq.n	80148de <ucdr_serialize_int16_t+0xba>
 80148b4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80148b8:	701a      	strb	r2, [r3, #0]
 80148ba:	68a3      	ldr	r3, [r4, #8]
 80148bc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80148c0:	705a      	strb	r2, [r3, #1]
 80148c2:	68a2      	ldr	r2, [r4, #8]
 80148c4:	6923      	ldr	r3, [r4, #16]
 80148c6:	3202      	adds	r2, #2
 80148c8:	3302      	adds	r3, #2
 80148ca:	2102      	movs	r1, #2
 80148cc:	60a2      	str	r2, [r4, #8]
 80148ce:	6123      	str	r3, [r4, #16]
 80148d0:	7561      	strb	r1, [r4, #21]
 80148d2:	7da0      	ldrb	r0, [r4, #22]
 80148d4:	f080 0001 	eor.w	r0, r0, #1
 80148d8:	b002      	add	sp, #8
 80148da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80148de:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80148e2:	801a      	strh	r2, [r3, #0]
 80148e4:	e7ed      	b.n	80148c2 <ucdr_serialize_int16_t+0x9e>
 80148e6:	68a2      	ldr	r2, [r4, #8]
 80148e8:	6923      	ldr	r3, [r4, #16]
 80148ea:	7da0      	ldrb	r0, [r4, #22]
 80148ec:	7567      	strb	r7, [r4, #21]
 80148ee:	1b92      	subs	r2, r2, r6
 80148f0:	1b9b      	subs	r3, r3, r6
 80148f2:	f080 0001 	eor.w	r0, r0, #1
 80148f6:	60a2      	str	r2, [r4, #8]
 80148f8:	6123      	str	r3, [r4, #16]
 80148fa:	b002      	add	sp, #8
 80148fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014900:	68a3      	ldr	r3, [r4, #8]
 8014902:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8014906:	701a      	strb	r2, [r3, #0]
 8014908:	e7bc      	b.n	8014884 <ucdr_serialize_int16_t+0x60>
 801490a:	4628      	mov	r0, r5
 801490c:	f10d 0506 	add.w	r5, sp, #6
 8014910:	4629      	mov	r1, r5
 8014912:	4632      	mov	r2, r6
 8014914:	f003 faab 	bl	8017e6e <memcpy>
 8014918:	68a0      	ldr	r0, [r4, #8]
 801491a:	4642      	mov	r2, r8
 801491c:	19a9      	adds	r1, r5, r6
 801491e:	f003 faa6 	bl	8017e6e <memcpy>
 8014922:	e7af      	b.n	8014884 <ucdr_serialize_int16_t+0x60>

08014924 <ucdr_deserialize_int16_t>:
 8014924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014928:	460d      	mov	r5, r1
 801492a:	2102      	movs	r1, #2
 801492c:	4604      	mov	r4, r0
 801492e:	f7f8 fb3f 	bl	800cfb0 <ucdr_buffer_alignment>
 8014932:	4601      	mov	r1, r0
 8014934:	4620      	mov	r0, r4
 8014936:	f894 8015 	ldrb.w	r8, [r4, #21]
 801493a:	f7f8 fb7d 	bl	800d038 <ucdr_advance_buffer>
 801493e:	2102      	movs	r1, #2
 8014940:	4620      	mov	r0, r4
 8014942:	f7f8 fad5 	bl	800cef0 <ucdr_check_buffer_available_for>
 8014946:	bb60      	cbnz	r0, 80149a2 <ucdr_deserialize_int16_t+0x7e>
 8014948:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 801494c:	42be      	cmp	r6, r7
 801494e:	d923      	bls.n	8014998 <ucdr_deserialize_int16_t+0x74>
 8014950:	6923      	ldr	r3, [r4, #16]
 8014952:	60a6      	str	r6, [r4, #8]
 8014954:	1bf6      	subs	r6, r6, r7
 8014956:	4433      	add	r3, r6
 8014958:	f1c6 0902 	rsb	r9, r6, #2
 801495c:	6123      	str	r3, [r4, #16]
 801495e:	4649      	mov	r1, r9
 8014960:	4620      	mov	r0, r4
 8014962:	f7f8 fad1 	bl	800cf08 <ucdr_check_final_buffer_behavior>
 8014966:	2800      	cmp	r0, #0
 8014968:	d034      	beq.n	80149d4 <ucdr_deserialize_int16_t+0xb0>
 801496a:	7d23      	ldrb	r3, [r4, #20]
 801496c:	2b01      	cmp	r3, #1
 801496e:	d042      	beq.n	80149f6 <ucdr_deserialize_int16_t+0xd2>
 8014970:	787b      	ldrb	r3, [r7, #1]
 8014972:	702b      	strb	r3, [r5, #0]
 8014974:	2e00      	cmp	r6, #0
 8014976:	d03a      	beq.n	80149ee <ucdr_deserialize_int16_t+0xca>
 8014978:	783b      	ldrb	r3, [r7, #0]
 801497a:	706b      	strb	r3, [r5, #1]
 801497c:	6923      	ldr	r3, [r4, #16]
 801497e:	68a2      	ldr	r2, [r4, #8]
 8014980:	7da0      	ldrb	r0, [r4, #22]
 8014982:	2102      	movs	r1, #2
 8014984:	3302      	adds	r3, #2
 8014986:	444a      	add	r2, r9
 8014988:	1b9b      	subs	r3, r3, r6
 801498a:	7561      	strb	r1, [r4, #21]
 801498c:	60a2      	str	r2, [r4, #8]
 801498e:	6123      	str	r3, [r4, #16]
 8014990:	f080 0001 	eor.w	r0, r0, #1
 8014994:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014998:	2102      	movs	r1, #2
 801499a:	4620      	mov	r0, r4
 801499c:	f7f8 fab4 	bl	800cf08 <ucdr_check_final_buffer_behavior>
 80149a0:	b180      	cbz	r0, 80149c4 <ucdr_deserialize_int16_t+0xa0>
 80149a2:	7d23      	ldrb	r3, [r4, #20]
 80149a4:	2b01      	cmp	r3, #1
 80149a6:	68a3      	ldr	r3, [r4, #8]
 80149a8:	d011      	beq.n	80149ce <ucdr_deserialize_int16_t+0xaa>
 80149aa:	785b      	ldrb	r3, [r3, #1]
 80149ac:	702b      	strb	r3, [r5, #0]
 80149ae:	68a3      	ldr	r3, [r4, #8]
 80149b0:	781b      	ldrb	r3, [r3, #0]
 80149b2:	706b      	strb	r3, [r5, #1]
 80149b4:	68a2      	ldr	r2, [r4, #8]
 80149b6:	6923      	ldr	r3, [r4, #16]
 80149b8:	3202      	adds	r2, #2
 80149ba:	3302      	adds	r3, #2
 80149bc:	2102      	movs	r1, #2
 80149be:	60a2      	str	r2, [r4, #8]
 80149c0:	6123      	str	r3, [r4, #16]
 80149c2:	7561      	strb	r1, [r4, #21]
 80149c4:	7da0      	ldrb	r0, [r4, #22]
 80149c6:	f080 0001 	eor.w	r0, r0, #1
 80149ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80149ce:	881b      	ldrh	r3, [r3, #0]
 80149d0:	802b      	strh	r3, [r5, #0]
 80149d2:	e7ef      	b.n	80149b4 <ucdr_deserialize_int16_t+0x90>
 80149d4:	68a2      	ldr	r2, [r4, #8]
 80149d6:	6923      	ldr	r3, [r4, #16]
 80149d8:	7da0      	ldrb	r0, [r4, #22]
 80149da:	f884 8015 	strb.w	r8, [r4, #21]
 80149de:	1b92      	subs	r2, r2, r6
 80149e0:	1b9b      	subs	r3, r3, r6
 80149e2:	60a2      	str	r2, [r4, #8]
 80149e4:	6123      	str	r3, [r4, #16]
 80149e6:	f080 0001 	eor.w	r0, r0, #1
 80149ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80149ee:	68a3      	ldr	r3, [r4, #8]
 80149f0:	781b      	ldrb	r3, [r3, #0]
 80149f2:	706b      	strb	r3, [r5, #1]
 80149f4:	e7c2      	b.n	801497c <ucdr_deserialize_int16_t+0x58>
 80149f6:	4639      	mov	r1, r7
 80149f8:	4632      	mov	r2, r6
 80149fa:	4628      	mov	r0, r5
 80149fc:	f003 fa37 	bl	8017e6e <memcpy>
 8014a00:	68a1      	ldr	r1, [r4, #8]
 8014a02:	464a      	mov	r2, r9
 8014a04:	19a8      	adds	r0, r5, r6
 8014a06:	f003 fa32 	bl	8017e6e <memcpy>
 8014a0a:	e7b7      	b.n	801497c <ucdr_deserialize_int16_t+0x58>

08014a0c <ucdr_serialize_int32_t>:
 8014a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a10:	b082      	sub	sp, #8
 8014a12:	4604      	mov	r4, r0
 8014a14:	9101      	str	r1, [sp, #4]
 8014a16:	2104      	movs	r1, #4
 8014a18:	f7f8 faca 	bl	800cfb0 <ucdr_buffer_alignment>
 8014a1c:	4601      	mov	r1, r0
 8014a1e:	4620      	mov	r0, r4
 8014a20:	7d67      	ldrb	r7, [r4, #21]
 8014a22:	f7f8 fb09 	bl	800d038 <ucdr_advance_buffer>
 8014a26:	2104      	movs	r1, #4
 8014a28:	4620      	mov	r0, r4
 8014a2a:	f7f8 fa61 	bl	800cef0 <ucdr_check_buffer_available_for>
 8014a2e:	2800      	cmp	r0, #0
 8014a30:	d139      	bne.n	8014aa6 <ucdr_serialize_int32_t+0x9a>
 8014a32:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8014a36:	42ab      	cmp	r3, r5
 8014a38:	d930      	bls.n	8014a9c <ucdr_serialize_int32_t+0x90>
 8014a3a:	1b5e      	subs	r6, r3, r5
 8014a3c:	60a3      	str	r3, [r4, #8]
 8014a3e:	6923      	ldr	r3, [r4, #16]
 8014a40:	f1c6 0804 	rsb	r8, r6, #4
 8014a44:	4433      	add	r3, r6
 8014a46:	6123      	str	r3, [r4, #16]
 8014a48:	4641      	mov	r1, r8
 8014a4a:	4620      	mov	r0, r4
 8014a4c:	f7f8 fa5c 	bl	800cf08 <ucdr_check_final_buffer_behavior>
 8014a50:	2800      	cmp	r0, #0
 8014a52:	d04c      	beq.n	8014aee <ucdr_serialize_int32_t+0xe2>
 8014a54:	7d23      	ldrb	r3, [r4, #20]
 8014a56:	2b01      	cmp	r3, #1
 8014a58:	d063      	beq.n	8014b22 <ucdr_serialize_int32_t+0x116>
 8014a5a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8014a5e:	702b      	strb	r3, [r5, #0]
 8014a60:	2e00      	cmp	r6, #0
 8014a62:	d051      	beq.n	8014b08 <ucdr_serialize_int32_t+0xfc>
 8014a64:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8014a68:	706b      	strb	r3, [r5, #1]
 8014a6a:	2e01      	cmp	r6, #1
 8014a6c:	d050      	beq.n	8014b10 <ucdr_serialize_int32_t+0x104>
 8014a6e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8014a72:	70ab      	strb	r3, [r5, #2]
 8014a74:	2e02      	cmp	r6, #2
 8014a76:	d04f      	beq.n	8014b18 <ucdr_serialize_int32_t+0x10c>
 8014a78:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8014a7c:	70eb      	strb	r3, [r5, #3]
 8014a7e:	6923      	ldr	r3, [r4, #16]
 8014a80:	68a2      	ldr	r2, [r4, #8]
 8014a82:	7da0      	ldrb	r0, [r4, #22]
 8014a84:	3304      	adds	r3, #4
 8014a86:	1b9e      	subs	r6, r3, r6
 8014a88:	4442      	add	r2, r8
 8014a8a:	2304      	movs	r3, #4
 8014a8c:	f080 0001 	eor.w	r0, r0, #1
 8014a90:	60a2      	str	r2, [r4, #8]
 8014a92:	6126      	str	r6, [r4, #16]
 8014a94:	7563      	strb	r3, [r4, #21]
 8014a96:	b002      	add	sp, #8
 8014a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a9c:	2104      	movs	r1, #4
 8014a9e:	4620      	mov	r0, r4
 8014aa0:	f7f8 fa32 	bl	800cf08 <ucdr_check_final_buffer_behavior>
 8014aa4:	b1d0      	cbz	r0, 8014adc <ucdr_serialize_int32_t+0xd0>
 8014aa6:	7d23      	ldrb	r3, [r4, #20]
 8014aa8:	2b01      	cmp	r3, #1
 8014aaa:	68a3      	ldr	r3, [r4, #8]
 8014aac:	d01c      	beq.n	8014ae8 <ucdr_serialize_int32_t+0xdc>
 8014aae:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8014ab2:	701a      	strb	r2, [r3, #0]
 8014ab4:	68a3      	ldr	r3, [r4, #8]
 8014ab6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8014aba:	705a      	strb	r2, [r3, #1]
 8014abc:	68a3      	ldr	r3, [r4, #8]
 8014abe:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8014ac2:	709a      	strb	r2, [r3, #2]
 8014ac4:	68a3      	ldr	r3, [r4, #8]
 8014ac6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8014aca:	70da      	strb	r2, [r3, #3]
 8014acc:	68a2      	ldr	r2, [r4, #8]
 8014ace:	6923      	ldr	r3, [r4, #16]
 8014ad0:	3204      	adds	r2, #4
 8014ad2:	3304      	adds	r3, #4
 8014ad4:	2104      	movs	r1, #4
 8014ad6:	60a2      	str	r2, [r4, #8]
 8014ad8:	6123      	str	r3, [r4, #16]
 8014ada:	7561      	strb	r1, [r4, #21]
 8014adc:	7da0      	ldrb	r0, [r4, #22]
 8014ade:	f080 0001 	eor.w	r0, r0, #1
 8014ae2:	b002      	add	sp, #8
 8014ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ae8:	9a01      	ldr	r2, [sp, #4]
 8014aea:	601a      	str	r2, [r3, #0]
 8014aec:	e7ee      	b.n	8014acc <ucdr_serialize_int32_t+0xc0>
 8014aee:	68a2      	ldr	r2, [r4, #8]
 8014af0:	6923      	ldr	r3, [r4, #16]
 8014af2:	7da0      	ldrb	r0, [r4, #22]
 8014af4:	7567      	strb	r7, [r4, #21]
 8014af6:	1b92      	subs	r2, r2, r6
 8014af8:	1b9b      	subs	r3, r3, r6
 8014afa:	f080 0001 	eor.w	r0, r0, #1
 8014afe:	60a2      	str	r2, [r4, #8]
 8014b00:	6123      	str	r3, [r4, #16]
 8014b02:	b002      	add	sp, #8
 8014b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b08:	68a3      	ldr	r3, [r4, #8]
 8014b0a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8014b0e:	701a      	strb	r2, [r3, #0]
 8014b10:	68a3      	ldr	r3, [r4, #8]
 8014b12:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8014b16:	701a      	strb	r2, [r3, #0]
 8014b18:	68a3      	ldr	r3, [r4, #8]
 8014b1a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8014b1e:	701a      	strb	r2, [r3, #0]
 8014b20:	e7ad      	b.n	8014a7e <ucdr_serialize_int32_t+0x72>
 8014b22:	4628      	mov	r0, r5
 8014b24:	ad01      	add	r5, sp, #4
 8014b26:	4629      	mov	r1, r5
 8014b28:	4632      	mov	r2, r6
 8014b2a:	f003 f9a0 	bl	8017e6e <memcpy>
 8014b2e:	68a0      	ldr	r0, [r4, #8]
 8014b30:	4642      	mov	r2, r8
 8014b32:	19a9      	adds	r1, r5, r6
 8014b34:	f003 f99b 	bl	8017e6e <memcpy>
 8014b38:	e7a1      	b.n	8014a7e <ucdr_serialize_int32_t+0x72>
 8014b3a:	bf00      	nop

08014b3c <ucdr_deserialize_int32_t>:
 8014b3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014b40:	460d      	mov	r5, r1
 8014b42:	2104      	movs	r1, #4
 8014b44:	4604      	mov	r4, r0
 8014b46:	f7f8 fa33 	bl	800cfb0 <ucdr_buffer_alignment>
 8014b4a:	4601      	mov	r1, r0
 8014b4c:	4620      	mov	r0, r4
 8014b4e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8014b52:	f7f8 fa71 	bl	800d038 <ucdr_advance_buffer>
 8014b56:	2104      	movs	r1, #4
 8014b58:	4620      	mov	r0, r4
 8014b5a:	f7f8 f9c9 	bl	800cef0 <ucdr_check_buffer_available_for>
 8014b5e:	2800      	cmp	r0, #0
 8014b60:	d138      	bne.n	8014bd4 <ucdr_deserialize_int32_t+0x98>
 8014b62:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8014b66:	42b7      	cmp	r7, r6
 8014b68:	d92f      	bls.n	8014bca <ucdr_deserialize_int32_t+0x8e>
 8014b6a:	6923      	ldr	r3, [r4, #16]
 8014b6c:	60a7      	str	r7, [r4, #8]
 8014b6e:	1bbf      	subs	r7, r7, r6
 8014b70:	443b      	add	r3, r7
 8014b72:	f1c7 0904 	rsb	r9, r7, #4
 8014b76:	6123      	str	r3, [r4, #16]
 8014b78:	4649      	mov	r1, r9
 8014b7a:	4620      	mov	r0, r4
 8014b7c:	f7f8 f9c4 	bl	800cf08 <ucdr_check_final_buffer_behavior>
 8014b80:	2800      	cmp	r0, #0
 8014b82:	d046      	beq.n	8014c12 <ucdr_deserialize_int32_t+0xd6>
 8014b84:	7d23      	ldrb	r3, [r4, #20]
 8014b86:	2b01      	cmp	r3, #1
 8014b88:	d05c      	beq.n	8014c44 <ucdr_deserialize_int32_t+0x108>
 8014b8a:	78f3      	ldrb	r3, [r6, #3]
 8014b8c:	702b      	strb	r3, [r5, #0]
 8014b8e:	2f00      	cmp	r7, #0
 8014b90:	d04c      	beq.n	8014c2c <ucdr_deserialize_int32_t+0xf0>
 8014b92:	78b3      	ldrb	r3, [r6, #2]
 8014b94:	706b      	strb	r3, [r5, #1]
 8014b96:	2f01      	cmp	r7, #1
 8014b98:	f105 0302 	add.w	r3, r5, #2
 8014b9c:	d04a      	beq.n	8014c34 <ucdr_deserialize_int32_t+0xf8>
 8014b9e:	7873      	ldrb	r3, [r6, #1]
 8014ba0:	70ab      	strb	r3, [r5, #2]
 8014ba2:	2f02      	cmp	r7, #2
 8014ba4:	f105 0303 	add.w	r3, r5, #3
 8014ba8:	d048      	beq.n	8014c3c <ucdr_deserialize_int32_t+0x100>
 8014baa:	7833      	ldrb	r3, [r6, #0]
 8014bac:	70eb      	strb	r3, [r5, #3]
 8014bae:	6923      	ldr	r3, [r4, #16]
 8014bb0:	68a2      	ldr	r2, [r4, #8]
 8014bb2:	7da0      	ldrb	r0, [r4, #22]
 8014bb4:	2104      	movs	r1, #4
 8014bb6:	3304      	adds	r3, #4
 8014bb8:	444a      	add	r2, r9
 8014bba:	1bdb      	subs	r3, r3, r7
 8014bbc:	7561      	strb	r1, [r4, #21]
 8014bbe:	60a2      	str	r2, [r4, #8]
 8014bc0:	6123      	str	r3, [r4, #16]
 8014bc2:	f080 0001 	eor.w	r0, r0, #1
 8014bc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014bca:	2104      	movs	r1, #4
 8014bcc:	4620      	mov	r0, r4
 8014bce:	f7f8 f99b 	bl	800cf08 <ucdr_check_final_buffer_behavior>
 8014bd2:	b1b0      	cbz	r0, 8014c02 <ucdr_deserialize_int32_t+0xc6>
 8014bd4:	7d23      	ldrb	r3, [r4, #20]
 8014bd6:	2b01      	cmp	r3, #1
 8014bd8:	68a3      	ldr	r3, [r4, #8]
 8014bda:	d017      	beq.n	8014c0c <ucdr_deserialize_int32_t+0xd0>
 8014bdc:	78db      	ldrb	r3, [r3, #3]
 8014bde:	702b      	strb	r3, [r5, #0]
 8014be0:	68a3      	ldr	r3, [r4, #8]
 8014be2:	789b      	ldrb	r3, [r3, #2]
 8014be4:	706b      	strb	r3, [r5, #1]
 8014be6:	68a3      	ldr	r3, [r4, #8]
 8014be8:	785b      	ldrb	r3, [r3, #1]
 8014bea:	70ab      	strb	r3, [r5, #2]
 8014bec:	68a3      	ldr	r3, [r4, #8]
 8014bee:	781b      	ldrb	r3, [r3, #0]
 8014bf0:	70eb      	strb	r3, [r5, #3]
 8014bf2:	68a2      	ldr	r2, [r4, #8]
 8014bf4:	6923      	ldr	r3, [r4, #16]
 8014bf6:	3204      	adds	r2, #4
 8014bf8:	3304      	adds	r3, #4
 8014bfa:	2104      	movs	r1, #4
 8014bfc:	60a2      	str	r2, [r4, #8]
 8014bfe:	6123      	str	r3, [r4, #16]
 8014c00:	7561      	strb	r1, [r4, #21]
 8014c02:	7da0      	ldrb	r0, [r4, #22]
 8014c04:	f080 0001 	eor.w	r0, r0, #1
 8014c08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014c0c:	681b      	ldr	r3, [r3, #0]
 8014c0e:	602b      	str	r3, [r5, #0]
 8014c10:	e7ef      	b.n	8014bf2 <ucdr_deserialize_int32_t+0xb6>
 8014c12:	68a2      	ldr	r2, [r4, #8]
 8014c14:	6923      	ldr	r3, [r4, #16]
 8014c16:	7da0      	ldrb	r0, [r4, #22]
 8014c18:	f884 8015 	strb.w	r8, [r4, #21]
 8014c1c:	1bd2      	subs	r2, r2, r7
 8014c1e:	1bdb      	subs	r3, r3, r7
 8014c20:	60a2      	str	r2, [r4, #8]
 8014c22:	6123      	str	r3, [r4, #16]
 8014c24:	f080 0001 	eor.w	r0, r0, #1
 8014c28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014c2c:	68a3      	ldr	r3, [r4, #8]
 8014c2e:	789b      	ldrb	r3, [r3, #2]
 8014c30:	706b      	strb	r3, [r5, #1]
 8014c32:	1cab      	adds	r3, r5, #2
 8014c34:	68a2      	ldr	r2, [r4, #8]
 8014c36:	7852      	ldrb	r2, [r2, #1]
 8014c38:	f803 2b01 	strb.w	r2, [r3], #1
 8014c3c:	68a2      	ldr	r2, [r4, #8]
 8014c3e:	7812      	ldrb	r2, [r2, #0]
 8014c40:	701a      	strb	r2, [r3, #0]
 8014c42:	e7b4      	b.n	8014bae <ucdr_deserialize_int32_t+0x72>
 8014c44:	4631      	mov	r1, r6
 8014c46:	463a      	mov	r2, r7
 8014c48:	4628      	mov	r0, r5
 8014c4a:	f003 f910 	bl	8017e6e <memcpy>
 8014c4e:	68a1      	ldr	r1, [r4, #8]
 8014c50:	464a      	mov	r2, r9
 8014c52:	19e8      	adds	r0, r5, r7
 8014c54:	f003 f90b 	bl	8017e6e <memcpy>
 8014c58:	e7a9      	b.n	8014bae <ucdr_deserialize_int32_t+0x72>
 8014c5a:	bf00      	nop

08014c5c <ucdr_serialize_string>:
 8014c5c:	b510      	push	{r4, lr}
 8014c5e:	b082      	sub	sp, #8
 8014c60:	4604      	mov	r4, r0
 8014c62:	4608      	mov	r0, r1
 8014c64:	9101      	str	r1, [sp, #4]
 8014c66:	f7eb fb33 	bl	80002d0 <strlen>
 8014c6a:	9901      	ldr	r1, [sp, #4]
 8014c6c:	1c42      	adds	r2, r0, #1
 8014c6e:	4620      	mov	r0, r4
 8014c70:	b002      	add	sp, #8
 8014c72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014c76:	f7f8 b9ff 	b.w	800d078 <ucdr_serialize_sequence_char>
 8014c7a:	bf00      	nop

08014c7c <ucdr_deserialize_string>:
 8014c7c:	b500      	push	{lr}
 8014c7e:	b083      	sub	sp, #12
 8014c80:	ab01      	add	r3, sp, #4
 8014c82:	f7f8 fa0b 	bl	800d09c <ucdr_deserialize_sequence_char>
 8014c86:	b003      	add	sp, #12
 8014c88:	f85d fb04 	ldr.w	pc, [sp], #4

08014c8c <get_custom_error>:
 8014c8c:	4b01      	ldr	r3, [pc, #4]	@ (8014c94 <get_custom_error+0x8>)
 8014c8e:	7818      	ldrb	r0, [r3, #0]
 8014c90:	4770      	bx	lr
 8014c92:	bf00      	nop
 8014c94:	20010c88 	.word	0x20010c88

08014c98 <recv_custom_msg>:
 8014c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c9c:	4693      	mov	fp, r2
 8014c9e:	b089      	sub	sp, #36	@ 0x24
 8014ca0:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 8014ca4:	9305      	str	r3, [sp, #20]
 8014ca6:	468a      	mov	sl, r1
 8014ca8:	2100      	movs	r1, #0
 8014caa:	4604      	mov	r4, r0
 8014cac:	f88d 101e 	strb.w	r1, [sp, #30]
 8014cb0:	b322      	cbz	r2, 8014cfc <recv_custom_msg+0x64>
 8014cb2:	f200 2902 	addw	r9, r0, #514	@ 0x202
 8014cb6:	f10d 081f 	add.w	r8, sp, #31
 8014cba:	af05      	add	r7, sp, #20
 8014cbc:	f10d 061e 	add.w	r6, sp, #30
 8014cc0:	f44f 7500 	mov.w	r5, #512	@ 0x200
 8014cc4:	e002      	b.n	8014ccc <recv_custom_msg+0x34>
 8014cc6:	9b05      	ldr	r3, [sp, #20]
 8014cc8:	2b00      	cmp	r3, #0
 8014cca:	dd0f      	ble.n	8014cec <recv_custom_msg+0x54>
 8014ccc:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 8014cd0:	4623      	mov	r3, r4
 8014cd2:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8014cd6:	e9cd 5600 	strd	r5, r6, [sp]
 8014cda:	4622      	mov	r2, r4
 8014cdc:	4648      	mov	r0, r9
 8014cde:	f000 fffd 	bl	8015cdc <uxr_read_framed_msg>
 8014ce2:	2800      	cmp	r0, #0
 8014ce4:	d0ef      	beq.n	8014cc6 <recv_custom_msg+0x2e>
 8014ce6:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8014cea:	b1b3      	cbz	r3, 8014d1a <recv_custom_msg+0x82>
 8014cec:	4b0f      	ldr	r3, [pc, #60]	@ (8014d2c <recv_custom_msg+0x94>)
 8014cee:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8014cf2:	701a      	strb	r2, [r3, #0]
 8014cf4:	2000      	movs	r0, #0
 8014cf6:	b009      	add	sp, #36	@ 0x24
 8014cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014cfc:	f10d 021f 	add.w	r2, sp, #31
 8014d00:	9200      	str	r2, [sp, #0]
 8014d02:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 8014d06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014d0a:	4601      	mov	r1, r0
 8014d0c:	47a8      	blx	r5
 8014d0e:	2800      	cmp	r0, #0
 8014d10:	d0ec      	beq.n	8014cec <recv_custom_msg+0x54>
 8014d12:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8014d16:	2b00      	cmp	r3, #0
 8014d18:	d1e8      	bne.n	8014cec <recv_custom_msg+0x54>
 8014d1a:	f8cb 0000 	str.w	r0, [fp]
 8014d1e:	2001      	movs	r0, #1
 8014d20:	f8ca 4000 	str.w	r4, [sl]
 8014d24:	b009      	add	sp, #36	@ 0x24
 8014d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d2a:	bf00      	nop
 8014d2c:	20010c88 	.word	0x20010c88

08014d30 <send_custom_msg>:
 8014d30:	b530      	push	{r4, r5, lr}
 8014d32:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 8014d36:	b087      	sub	sp, #28
 8014d38:	4615      	mov	r5, r2
 8014d3a:	b974      	cbnz	r4, 8014d5a <send_custom_msg+0x2a>
 8014d3c:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 8014d40:	f10d 0317 	add.w	r3, sp, #23
 8014d44:	47a0      	blx	r4
 8014d46:	b108      	cbz	r0, 8014d4c <send_custom_msg+0x1c>
 8014d48:	42a8      	cmp	r0, r5
 8014d4a:	d015      	beq.n	8014d78 <send_custom_msg+0x48>
 8014d4c:	4b0c      	ldr	r3, [pc, #48]	@ (8014d80 <send_custom_msg+0x50>)
 8014d4e:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8014d52:	701a      	strb	r2, [r3, #0]
 8014d54:	2000      	movs	r0, #0
 8014d56:	b007      	add	sp, #28
 8014d58:	bd30      	pop	{r4, r5, pc}
 8014d5a:	460b      	mov	r3, r1
 8014d5c:	2200      	movs	r2, #0
 8014d5e:	f10d 0117 	add.w	r1, sp, #23
 8014d62:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8014d66:	4602      	mov	r2, r0
 8014d68:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 8014d6c:	9500      	str	r5, [sp, #0]
 8014d6e:	f200 2002 	addw	r0, r0, #514	@ 0x202
 8014d72:	f000 fdbb 	bl	80158ec <uxr_write_framed_msg>
 8014d76:	e7e6      	b.n	8014d46 <send_custom_msg+0x16>
 8014d78:	2001      	movs	r0, #1
 8014d7a:	b007      	add	sp, #28
 8014d7c:	bd30      	pop	{r4, r5, pc}
 8014d7e:	bf00      	nop
 8014d80:	20010c88 	.word	0x20010c88

08014d84 <uxr_set_custom_transport_callbacks>:
 8014d84:	b410      	push	{r4}
 8014d86:	9c01      	ldr	r4, [sp, #4]
 8014d88:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 8014d8c:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 8014d90:	9b02      	ldr	r3, [sp, #8]
 8014d92:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 8014d96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014d9a:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 8014d9e:	4770      	bx	lr

08014da0 <uxr_init_custom_transport>:
 8014da0:	b538      	push	{r3, r4, r5, lr}
 8014da2:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 8014da6:	b303      	cbz	r3, 8014dea <uxr_init_custom_transport+0x4a>
 8014da8:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 8014dac:	4604      	mov	r4, r0
 8014dae:	b1e2      	cbz	r2, 8014dea <uxr_init_custom_transport+0x4a>
 8014db0:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 8014db4:	b1ca      	cbz	r2, 8014dea <uxr_init_custom_transport+0x4a>
 8014db6:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 8014dba:	b1b2      	cbz	r2, 8014dea <uxr_init_custom_transport+0x4a>
 8014dbc:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 8014dc0:	4798      	blx	r3
 8014dc2:	4605      	mov	r5, r0
 8014dc4:	b188      	cbz	r0, 8014dea <uxr_init_custom_transport+0x4a>
 8014dc6:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 8014dca:	b98b      	cbnz	r3, 8014df0 <uxr_init_custom_transport+0x50>
 8014dcc:	490b      	ldr	r1, [pc, #44]	@ (8014dfc <uxr_init_custom_transport+0x5c>)
 8014dce:	4b0c      	ldr	r3, [pc, #48]	@ (8014e00 <uxr_init_custom_transport+0x60>)
 8014dd0:	4a0c      	ldr	r2, [pc, #48]	@ (8014e04 <uxr_init_custom_transport+0x64>)
 8014dd2:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 8014dd6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8014dda:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 8014dde:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 8014de2:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 8014de6:	4628      	mov	r0, r5
 8014de8:	bd38      	pop	{r3, r4, r5, pc}
 8014dea:	2500      	movs	r5, #0
 8014dec:	4628      	mov	r0, r5
 8014dee:	bd38      	pop	{r3, r4, r5, pc}
 8014df0:	2100      	movs	r1, #0
 8014df2:	f204 2002 	addw	r0, r4, #514	@ 0x202
 8014df6:	f000 fd73 	bl	80158e0 <uxr_init_framing_io>
 8014dfa:	e7e7      	b.n	8014dcc <uxr_init_custom_transport+0x2c>
 8014dfc:	08014d31 	.word	0x08014d31
 8014e00:	08014c99 	.word	0x08014c99
 8014e04:	08014c8d 	.word	0x08014c8d

08014e08 <uxr_close_custom_transport>:
 8014e08:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 8014e0c:	4718      	bx	r3
 8014e0e:	bf00      	nop

08014e10 <uxr_init_input_best_effort_stream>:
 8014e10:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014e14:	8003      	strh	r3, [r0, #0]
 8014e16:	4770      	bx	lr

08014e18 <uxr_reset_input_best_effort_stream>:
 8014e18:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014e1c:	8003      	strh	r3, [r0, #0]
 8014e1e:	4770      	bx	lr

08014e20 <uxr_receive_best_effort_message>:
 8014e20:	b538      	push	{r3, r4, r5, lr}
 8014e22:	4604      	mov	r4, r0
 8014e24:	8800      	ldrh	r0, [r0, #0]
 8014e26:	460d      	mov	r5, r1
 8014e28:	f000 fd42 	bl	80158b0 <uxr_seq_num_cmp>
 8014e2c:	4603      	mov	r3, r0
 8014e2e:	2b00      	cmp	r3, #0
 8014e30:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8014e34:	bfb8      	it	lt
 8014e36:	8025      	strhlt	r5, [r4, #0]
 8014e38:	bd38      	pop	{r3, r4, r5, pc}
 8014e3a:	bf00      	nop

08014e3c <on_full_input_buffer>:
 8014e3c:	b570      	push	{r4, r5, r6, lr}
 8014e3e:	4605      	mov	r5, r0
 8014e40:	460c      	mov	r4, r1
 8014e42:	682b      	ldr	r3, [r5, #0]
 8014e44:	6809      	ldr	r1, [r1, #0]
 8014e46:	8920      	ldrh	r0, [r4, #8]
 8014e48:	6862      	ldr	r2, [r4, #4]
 8014e4a:	fbb2 f2f0 	udiv	r2, r2, r0
 8014e4e:	eba3 0c01 	sub.w	ip, r3, r1
 8014e52:	fbbc fcf2 	udiv	ip, ip, r2
 8014e56:	f10c 0c01 	add.w	ip, ip, #1
 8014e5a:	fa1f f38c 	uxth.w	r3, ip
 8014e5e:	fbb3 f6f0 	udiv	r6, r3, r0
 8014e62:	fb00 3316 	mls	r3, r0, r6, r3
 8014e66:	b29b      	uxth	r3, r3
 8014e68:	fb02 f303 	mul.w	r3, r2, r3
 8014e6c:	1d18      	adds	r0, r3, #4
 8014e6e:	4408      	add	r0, r1
 8014e70:	7d26      	ldrb	r6, [r4, #20]
 8014e72:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8014e76:	b116      	cbz	r6, 8014e7e <on_full_input_buffer+0x42>
 8014e78:	2600      	movs	r6, #0
 8014e7a:	f840 6c04 	str.w	r6, [r0, #-4]
 8014e7e:	2a03      	cmp	r2, #3
 8014e80:	d801      	bhi.n	8014e86 <on_full_input_buffer+0x4a>
 8014e82:	2001      	movs	r0, #1
 8014e84:	bd70      	pop	{r4, r5, r6, pc}
 8014e86:	3308      	adds	r3, #8
 8014e88:	4419      	add	r1, r3
 8014e8a:	4628      	mov	r0, r5
 8014e8c:	692b      	ldr	r3, [r5, #16]
 8014e8e:	3a04      	subs	r2, #4
 8014e90:	f7f8 f87a 	bl	800cf88 <ucdr_init_buffer_origin>
 8014e94:	4628      	mov	r0, r5
 8014e96:	4903      	ldr	r1, [pc, #12]	@ (8014ea4 <on_full_input_buffer+0x68>)
 8014e98:	4622      	mov	r2, r4
 8014e9a:	f7f8 f851 	bl	800cf40 <ucdr_set_on_full_buffer_callback>
 8014e9e:	2000      	movs	r0, #0
 8014ea0:	bd70      	pop	{r4, r5, r6, pc}
 8014ea2:	bf00      	nop
 8014ea4:	08014e3d 	.word	0x08014e3d

08014ea8 <uxr_init_input_reliable_stream>:
 8014ea8:	b500      	push	{lr}
 8014eaa:	e9c0 1200 	strd	r1, r2, [r0]
 8014eae:	f04f 0e00 	mov.w	lr, #0
 8014eb2:	9a01      	ldr	r2, [sp, #4]
 8014eb4:	8103      	strh	r3, [r0, #8]
 8014eb6:	6102      	str	r2, [r0, #16]
 8014eb8:	f880 e014 	strb.w	lr, [r0, #20]
 8014ebc:	b1d3      	cbz	r3, 8014ef4 <uxr_init_input_reliable_stream+0x4c>
 8014ebe:	f8c1 e000 	str.w	lr, [r1]
 8014ec2:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8014ec6:	f1bc 0f01 	cmp.w	ip, #1
 8014eca:	d913      	bls.n	8014ef4 <uxr_init_input_reliable_stream+0x4c>
 8014ecc:	2301      	movs	r3, #1
 8014ece:	fbb3 f1fc 	udiv	r1, r3, ip
 8014ed2:	fb0c 3111 	mls	r1, ip, r1, r3
 8014ed6:	b289      	uxth	r1, r1
 8014ed8:	6842      	ldr	r2, [r0, #4]
 8014eda:	fbb2 f2fc 	udiv	r2, r2, ip
 8014ede:	fb01 f202 	mul.w	r2, r1, r2
 8014ee2:	6801      	ldr	r1, [r0, #0]
 8014ee4:	f841 e002 	str.w	lr, [r1, r2]
 8014ee8:	3301      	adds	r3, #1
 8014eea:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8014eee:	b29b      	uxth	r3, r3
 8014ef0:	459c      	cmp	ip, r3
 8014ef2:	d8ec      	bhi.n	8014ece <uxr_init_input_reliable_stream+0x26>
 8014ef4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014ef8:	60c3      	str	r3, [r0, #12]
 8014efa:	f85d fb04 	ldr.w	pc, [sp], #4
 8014efe:	bf00      	nop

08014f00 <uxr_reset_input_reliable_stream>:
 8014f00:	8901      	ldrh	r1, [r0, #8]
 8014f02:	b1e9      	cbz	r1, 8014f40 <uxr_reset_input_reliable_stream+0x40>
 8014f04:	f04f 0c00 	mov.w	ip, #0
 8014f08:	b500      	push	{lr}
 8014f0a:	4663      	mov	r3, ip
 8014f0c:	46e6      	mov	lr, ip
 8014f0e:	fbb3 f2f1 	udiv	r2, r3, r1
 8014f12:	fb01 3312 	mls	r3, r1, r2, r3
 8014f16:	b29b      	uxth	r3, r3
 8014f18:	6842      	ldr	r2, [r0, #4]
 8014f1a:	fbb2 f2f1 	udiv	r2, r2, r1
 8014f1e:	fb02 f303 	mul.w	r3, r2, r3
 8014f22:	6802      	ldr	r2, [r0, #0]
 8014f24:	f842 e003 	str.w	lr, [r2, r3]
 8014f28:	f10c 0c01 	add.w	ip, ip, #1
 8014f2c:	8901      	ldrh	r1, [r0, #8]
 8014f2e:	fa1f f38c 	uxth.w	r3, ip
 8014f32:	4299      	cmp	r1, r3
 8014f34:	d8eb      	bhi.n	8014f0e <uxr_reset_input_reliable_stream+0xe>
 8014f36:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014f3a:	60c3      	str	r3, [r0, #12]
 8014f3c:	f85d fb04 	ldr.w	pc, [sp], #4
 8014f40:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014f44:	60c3      	str	r3, [r0, #12]
 8014f46:	4770      	bx	lr

08014f48 <uxr_receive_reliable_message>:
 8014f48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014f4c:	4604      	mov	r4, r0
 8014f4e:	460d      	mov	r5, r1
 8014f50:	8901      	ldrh	r1, [r0, #8]
 8014f52:	8980      	ldrh	r0, [r0, #12]
 8014f54:	4690      	mov	r8, r2
 8014f56:	461f      	mov	r7, r3
 8014f58:	f000 fca2 	bl	80158a0 <uxr_seq_num_add>
 8014f5c:	4629      	mov	r1, r5
 8014f5e:	4606      	mov	r6, r0
 8014f60:	89a0      	ldrh	r0, [r4, #12]
 8014f62:	f000 fca5 	bl	80158b0 <uxr_seq_num_cmp>
 8014f66:	2800      	cmp	r0, #0
 8014f68:	db0a      	blt.n	8014f80 <uxr_receive_reliable_message+0x38>
 8014f6a:	2600      	movs	r6, #0
 8014f6c:	89e0      	ldrh	r0, [r4, #14]
 8014f6e:	4629      	mov	r1, r5
 8014f70:	f000 fc9e 	bl	80158b0 <uxr_seq_num_cmp>
 8014f74:	2800      	cmp	r0, #0
 8014f76:	da00      	bge.n	8014f7a <uxr_receive_reliable_message+0x32>
 8014f78:	81e5      	strh	r5, [r4, #14]
 8014f7a:	4630      	mov	r0, r6
 8014f7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014f80:	4630      	mov	r0, r6
 8014f82:	4629      	mov	r1, r5
 8014f84:	f000 fc94 	bl	80158b0 <uxr_seq_num_cmp>
 8014f88:	2800      	cmp	r0, #0
 8014f8a:	dbee      	blt.n	8014f6a <uxr_receive_reliable_message+0x22>
 8014f8c:	6923      	ldr	r3, [r4, #16]
 8014f8e:	4640      	mov	r0, r8
 8014f90:	4798      	blx	r3
 8014f92:	2101      	movs	r1, #1
 8014f94:	4681      	mov	r9, r0
 8014f96:	89a0      	ldrh	r0, [r4, #12]
 8014f98:	f000 fc82 	bl	80158a0 <uxr_seq_num_add>
 8014f9c:	f1b9 0f00 	cmp.w	r9, #0
 8014fa0:	d101      	bne.n	8014fa6 <uxr_receive_reliable_message+0x5e>
 8014fa2:	4285      	cmp	r5, r0
 8014fa4:	d047      	beq.n	8015036 <uxr_receive_reliable_message+0xee>
 8014fa6:	8922      	ldrh	r2, [r4, #8]
 8014fa8:	fbb5 f0f2 	udiv	r0, r5, r2
 8014fac:	fb02 5010 	mls	r0, r2, r0, r5
 8014fb0:	b280      	uxth	r0, r0
 8014fb2:	6863      	ldr	r3, [r4, #4]
 8014fb4:	fbb3 f3f2 	udiv	r3, r3, r2
 8014fb8:	fb00 f303 	mul.w	r3, r0, r3
 8014fbc:	6820      	ldr	r0, [r4, #0]
 8014fbe:	3304      	adds	r3, #4
 8014fc0:	4418      	add	r0, r3
 8014fc2:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8014fc6:	2b00      	cmp	r3, #0
 8014fc8:	d1cf      	bne.n	8014f6a <uxr_receive_reliable_message+0x22>
 8014fca:	4641      	mov	r1, r8
 8014fcc:	463a      	mov	r2, r7
 8014fce:	f002 ff4e 	bl	8017e6e <memcpy>
 8014fd2:	8921      	ldrh	r1, [r4, #8]
 8014fd4:	fbb5 f2f1 	udiv	r2, r5, r1
 8014fd8:	fb01 5212 	mls	r2, r1, r2, r5
 8014fdc:	b292      	uxth	r2, r2
 8014fde:	6863      	ldr	r3, [r4, #4]
 8014fe0:	fbb3 f3f1 	udiv	r3, r3, r1
 8014fe4:	fb02 f303 	mul.w	r3, r2, r3
 8014fe8:	6822      	ldr	r2, [r4, #0]
 8014fea:	50d7      	str	r7, [r2, r3]
 8014fec:	9a08      	ldr	r2, [sp, #32]
 8014fee:	2301      	movs	r3, #1
 8014ff0:	7013      	strb	r3, [r2, #0]
 8014ff2:	f1b9 0f00 	cmp.w	r9, #0
 8014ff6:	d0b8      	beq.n	8014f6a <uxr_receive_reliable_message+0x22>
 8014ff8:	89a6      	ldrh	r6, [r4, #12]
 8014ffa:	4630      	mov	r0, r6
 8014ffc:	2101      	movs	r1, #1
 8014ffe:	f000 fc4f 	bl	80158a0 <uxr_seq_num_add>
 8015002:	8922      	ldrh	r2, [r4, #8]
 8015004:	6863      	ldr	r3, [r4, #4]
 8015006:	fbb3 f3f2 	udiv	r3, r3, r2
 801500a:	4606      	mov	r6, r0
 801500c:	fbb0 f0f2 	udiv	r0, r0, r2
 8015010:	fb02 6010 	mls	r0, r2, r0, r6
 8015014:	b280      	uxth	r0, r0
 8015016:	fb00 f303 	mul.w	r3, r0, r3
 801501a:	6820      	ldr	r0, [r4, #0]
 801501c:	3304      	adds	r3, #4
 801501e:	4418      	add	r0, r3
 8015020:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8015024:	2b00      	cmp	r3, #0
 8015026:	d0a0      	beq.n	8014f6a <uxr_receive_reliable_message+0x22>
 8015028:	6923      	ldr	r3, [r4, #16]
 801502a:	4798      	blx	r3
 801502c:	2802      	cmp	r0, #2
 801502e:	d008      	beq.n	8015042 <uxr_receive_reliable_message+0xfa>
 8015030:	2801      	cmp	r0, #1
 8015032:	d0e2      	beq.n	8014ffa <uxr_receive_reliable_message+0xb2>
 8015034:	e799      	b.n	8014f6a <uxr_receive_reliable_message+0x22>
 8015036:	9b08      	ldr	r3, [sp, #32]
 8015038:	81a5      	strh	r5, [r4, #12]
 801503a:	2601      	movs	r6, #1
 801503c:	f883 9000 	strb.w	r9, [r3]
 8015040:	e794      	b.n	8014f6c <uxr_receive_reliable_message+0x24>
 8015042:	2601      	movs	r6, #1
 8015044:	e792      	b.n	8014f6c <uxr_receive_reliable_message+0x24>
 8015046:	bf00      	nop

08015048 <uxr_next_input_reliable_buffer_available>:
 8015048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801504c:	4604      	mov	r4, r0
 801504e:	460f      	mov	r7, r1
 8015050:	8980      	ldrh	r0, [r0, #12]
 8015052:	2101      	movs	r1, #1
 8015054:	4690      	mov	r8, r2
 8015056:	f000 fc23 	bl	80158a0 <uxr_seq_num_add>
 801505a:	8922      	ldrh	r2, [r4, #8]
 801505c:	fbb0 f6f2 	udiv	r6, r0, r2
 8015060:	fb02 0616 	mls	r6, r2, r6, r0
 8015064:	b2b6      	uxth	r6, r6
 8015066:	6863      	ldr	r3, [r4, #4]
 8015068:	fbb3 f3f2 	udiv	r3, r3, r2
 801506c:	fb06 f303 	mul.w	r3, r6, r3
 8015070:	6826      	ldr	r6, [r4, #0]
 8015072:	3304      	adds	r3, #4
 8015074:	441e      	add	r6, r3
 8015076:	f856 9c04 	ldr.w	r9, [r6, #-4]
 801507a:	f1b9 0f00 	cmp.w	r9, #0
 801507e:	d023      	beq.n	80150c8 <uxr_next_input_reliable_buffer_available+0x80>
 8015080:	6923      	ldr	r3, [r4, #16]
 8015082:	4605      	mov	r5, r0
 8015084:	4630      	mov	r0, r6
 8015086:	4798      	blx	r3
 8015088:	4682      	mov	sl, r0
 801508a:	b300      	cbz	r0, 80150ce <uxr_next_input_reliable_buffer_available+0x86>
 801508c:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8015090:	2101      	movs	r1, #1
 8015092:	4650      	mov	r0, sl
 8015094:	f000 fc04 	bl	80158a0 <uxr_seq_num_add>
 8015098:	8921      	ldrh	r1, [r4, #8]
 801509a:	fbb0 f2f1 	udiv	r2, r0, r1
 801509e:	4682      	mov	sl, r0
 80150a0:	fb01 0212 	mls	r2, r1, r2, r0
 80150a4:	e9d4 0300 	ldrd	r0, r3, [r4]
 80150a8:	b292      	uxth	r2, r2
 80150aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80150ae:	fb02 f303 	mul.w	r3, r2, r3
 80150b2:	3304      	adds	r3, #4
 80150b4:	4418      	add	r0, r3
 80150b6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80150ba:	b12b      	cbz	r3, 80150c8 <uxr_next_input_reliable_buffer_available+0x80>
 80150bc:	6923      	ldr	r3, [r4, #16]
 80150be:	4798      	blx	r3
 80150c0:	2802      	cmp	r0, #2
 80150c2:	d01b      	beq.n	80150fc <uxr_next_input_reliable_buffer_available+0xb4>
 80150c4:	2801      	cmp	r0, #1
 80150c6:	d0e3      	beq.n	8015090 <uxr_next_input_reliable_buffer_available+0x48>
 80150c8:	2000      	movs	r0, #0
 80150ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80150ce:	464a      	mov	r2, r9
 80150d0:	4631      	mov	r1, r6
 80150d2:	4638      	mov	r0, r7
 80150d4:	f7f7 ff60 	bl	800cf98 <ucdr_init_buffer>
 80150d8:	8921      	ldrh	r1, [r4, #8]
 80150da:	fbb5 f2f1 	udiv	r2, r5, r1
 80150de:	fb01 5212 	mls	r2, r1, r2, r5
 80150e2:	b292      	uxth	r2, r2
 80150e4:	6863      	ldr	r3, [r4, #4]
 80150e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80150ea:	fb02 f303 	mul.w	r3, r2, r3
 80150ee:	6822      	ldr	r2, [r4, #0]
 80150f0:	f842 a003 	str.w	sl, [r2, r3]
 80150f4:	2001      	movs	r0, #1
 80150f6:	81a5      	strh	r5, [r4, #12]
 80150f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80150fc:	8920      	ldrh	r0, [r4, #8]
 80150fe:	fbb5 f3f0 	udiv	r3, r5, r0
 8015102:	fb00 5513 	mls	r5, r0, r3, r5
 8015106:	b2ad      	uxth	r5, r5
 8015108:	6863      	ldr	r3, [r4, #4]
 801510a:	fbb3 f3f0 	udiv	r3, r3, r0
 801510e:	fb03 f505 	mul.w	r5, r3, r5
 8015112:	6823      	ldr	r3, [r4, #0]
 8015114:	2000      	movs	r0, #0
 8015116:	5158      	str	r0, [r3, r5]
 8015118:	eb06 0108 	add.w	r1, r6, r8
 801511c:	eba9 0208 	sub.w	r2, r9, r8
 8015120:	4638      	mov	r0, r7
 8015122:	f7f7 ff39 	bl	800cf98 <ucdr_init_buffer>
 8015126:	4638      	mov	r0, r7
 8015128:	4903      	ldr	r1, [pc, #12]	@ (8015138 <uxr_next_input_reliable_buffer_available+0xf0>)
 801512a:	4622      	mov	r2, r4
 801512c:	f7f7 ff08 	bl	800cf40 <ucdr_set_on_full_buffer_callback>
 8015130:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8015134:	2001      	movs	r0, #1
 8015136:	e7c8      	b.n	80150ca <uxr_next_input_reliable_buffer_available+0x82>
 8015138:	08014e3d 	.word	0x08014e3d

0801513c <uxr_process_heartbeat>:
 801513c:	b538      	push	{r3, r4, r5, lr}
 801513e:	4611      	mov	r1, r2
 8015140:	4604      	mov	r4, r0
 8015142:	89c0      	ldrh	r0, [r0, #14]
 8015144:	4615      	mov	r5, r2
 8015146:	f000 fbb3 	bl	80158b0 <uxr_seq_num_cmp>
 801514a:	2800      	cmp	r0, #0
 801514c:	bfb8      	it	lt
 801514e:	81e5      	strhlt	r5, [r4, #14]
 8015150:	bd38      	pop	{r3, r4, r5, pc}
 8015152:	bf00      	nop

08015154 <uxr_compute_acknack>:
 8015154:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015158:	8903      	ldrh	r3, [r0, #8]
 801515a:	8985      	ldrh	r5, [r0, #12]
 801515c:	4604      	mov	r4, r0
 801515e:	460e      	mov	r6, r1
 8015160:	b1d3      	cbz	r3, 8015198 <uxr_compute_acknack+0x44>
 8015162:	4628      	mov	r0, r5
 8015164:	2701      	movs	r7, #1
 8015166:	e003      	b.n	8015170 <uxr_compute_acknack+0x1c>
 8015168:	4567      	cmp	r7, ip
 801516a:	d215      	bcs.n	8015198 <uxr_compute_acknack+0x44>
 801516c:	89a0      	ldrh	r0, [r4, #12]
 801516e:	3701      	adds	r7, #1
 8015170:	b2b9      	uxth	r1, r7
 8015172:	f000 fb95 	bl	80158a0 <uxr_seq_num_add>
 8015176:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801517a:	fbb0 f3fc 	udiv	r3, r0, ip
 801517e:	fb0c 0313 	mls	r3, ip, r3, r0
 8015182:	b29a      	uxth	r2, r3
 8015184:	e9d4 1300 	ldrd	r1, r3, [r4]
 8015188:	fbb3 f3fc 	udiv	r3, r3, ip
 801518c:	fb02 f303 	mul.w	r3, r2, r3
 8015190:	58cb      	ldr	r3, [r1, r3]
 8015192:	2b00      	cmp	r3, #0
 8015194:	d1e8      	bne.n	8015168 <uxr_compute_acknack+0x14>
 8015196:	4605      	mov	r5, r0
 8015198:	8035      	strh	r5, [r6, #0]
 801519a:	2101      	movs	r1, #1
 801519c:	4628      	mov	r0, r5
 801519e:	89e7      	ldrh	r7, [r4, #14]
 80151a0:	f000 fb82 	bl	80158a8 <uxr_seq_num_sub>
 80151a4:	4601      	mov	r1, r0
 80151a6:	4638      	mov	r0, r7
 80151a8:	f000 fb7e 	bl	80158a8 <uxr_seq_num_sub>
 80151ac:	4605      	mov	r5, r0
 80151ae:	b318      	cbz	r0, 80151f8 <uxr_compute_acknack+0xa4>
 80151b0:	f04f 0900 	mov.w	r9, #0
 80151b4:	464f      	mov	r7, r9
 80151b6:	f04f 0801 	mov.w	r8, #1
 80151ba:	fa1f f189 	uxth.w	r1, r9
 80151be:	8830      	ldrh	r0, [r6, #0]
 80151c0:	f000 fb6e 	bl	80158a0 <uxr_seq_num_add>
 80151c4:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80151c8:	fbb0 f3fc 	udiv	r3, r0, ip
 80151cc:	e9d4 1200 	ldrd	r1, r2, [r4]
 80151d0:	fb03 001c 	mls	r0, r3, ip, r0
 80151d4:	b283      	uxth	r3, r0
 80151d6:	fbb2 f2fc 	udiv	r2, r2, ip
 80151da:	fb02 f303 	mul.w	r3, r2, r3
 80151de:	fa08 f209 	lsl.w	r2, r8, r9
 80151e2:	58cb      	ldr	r3, [r1, r3]
 80151e4:	f109 0901 	add.w	r9, r9, #1
 80151e8:	b90b      	cbnz	r3, 80151ee <uxr_compute_acknack+0x9a>
 80151ea:	4317      	orrs	r7, r2
 80151ec:	b2bf      	uxth	r7, r7
 80151ee:	454d      	cmp	r5, r9
 80151f0:	d1e3      	bne.n	80151ba <uxr_compute_acknack+0x66>
 80151f2:	4638      	mov	r0, r7
 80151f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80151f8:	4607      	mov	r7, r0
 80151fa:	4638      	mov	r0, r7
 80151fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08015200 <uxr_init_output_best_effort_stream>:
 8015200:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8015204:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8015208:	6001      	str	r1, [r0, #0]
 801520a:	7303      	strb	r3, [r0, #12]
 801520c:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8015210:	4770      	bx	lr
 8015212:	bf00      	nop

08015214 <uxr_reset_output_best_effort_stream>:
 8015214:	7b02      	ldrb	r2, [r0, #12]
 8015216:	6042      	str	r2, [r0, #4]
 8015218:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801521c:	81c3      	strh	r3, [r0, #14]
 801521e:	4770      	bx	lr

08015220 <uxr_prepare_best_effort_buffer_to_write>:
 8015220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015222:	4604      	mov	r4, r0
 8015224:	b083      	sub	sp, #12
 8015226:	6840      	ldr	r0, [r0, #4]
 8015228:	460d      	mov	r5, r1
 801522a:	4616      	mov	r6, r2
 801522c:	f7f9 fce8 	bl	800ec00 <uxr_submessage_padding>
 8015230:	6863      	ldr	r3, [r4, #4]
 8015232:	4418      	add	r0, r3
 8015234:	68a3      	ldr	r3, [r4, #8]
 8015236:	1942      	adds	r2, r0, r5
 8015238:	4293      	cmp	r3, r2
 801523a:	bf2c      	ite	cs
 801523c:	2701      	movcs	r7, #1
 801523e:	2700      	movcc	r7, #0
 8015240:	d202      	bcs.n	8015248 <uxr_prepare_best_effort_buffer_to_write+0x28>
 8015242:	4638      	mov	r0, r7
 8015244:	b003      	add	sp, #12
 8015246:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015248:	9000      	str	r0, [sp, #0]
 801524a:	6821      	ldr	r1, [r4, #0]
 801524c:	4630      	mov	r0, r6
 801524e:	2300      	movs	r3, #0
 8015250:	f7f7 fe90 	bl	800cf74 <ucdr_init_buffer_origin_offset>
 8015254:	6861      	ldr	r1, [r4, #4]
 8015256:	4638      	mov	r0, r7
 8015258:	4429      	add	r1, r5
 801525a:	6061      	str	r1, [r4, #4]
 801525c:	b003      	add	sp, #12
 801525e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015260 <uxr_prepare_best_effort_buffer_to_send>:
 8015260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015264:	4604      	mov	r4, r0
 8015266:	461d      	mov	r5, r3
 8015268:	6840      	ldr	r0, [r0, #4]
 801526a:	7b23      	ldrb	r3, [r4, #12]
 801526c:	4298      	cmp	r0, r3
 801526e:	bf8c      	ite	hi
 8015270:	2601      	movhi	r6, #1
 8015272:	2600      	movls	r6, #0
 8015274:	d802      	bhi.n	801527c <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8015276:	4630      	mov	r0, r6
 8015278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801527c:	4688      	mov	r8, r1
 801527e:	89e0      	ldrh	r0, [r4, #14]
 8015280:	2101      	movs	r1, #1
 8015282:	4617      	mov	r7, r2
 8015284:	f000 fb0c 	bl	80158a0 <uxr_seq_num_add>
 8015288:	6823      	ldr	r3, [r4, #0]
 801528a:	81e0      	strh	r0, [r4, #14]
 801528c:	8028      	strh	r0, [r5, #0]
 801528e:	f8c8 3000 	str.w	r3, [r8]
 8015292:	6863      	ldr	r3, [r4, #4]
 8015294:	603b      	str	r3, [r7, #0]
 8015296:	7b23      	ldrb	r3, [r4, #12]
 8015298:	6063      	str	r3, [r4, #4]
 801529a:	4630      	mov	r0, r6
 801529c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080152a0 <on_full_output_buffer>:
 80152a0:	b538      	push	{r3, r4, r5, lr}
 80152a2:	6802      	ldr	r2, [r0, #0]
 80152a4:	460c      	mov	r4, r1
 80152a6:	6809      	ldr	r1, [r1, #0]
 80152a8:	8923      	ldrh	r3, [r4, #8]
 80152aa:	eba2 0c01 	sub.w	ip, r2, r1
 80152ae:	6862      	ldr	r2, [r4, #4]
 80152b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80152b4:	fbbc fcf2 	udiv	ip, ip, r2
 80152b8:	f10c 0c01 	add.w	ip, ip, #1
 80152bc:	fa1f fc8c 	uxth.w	ip, ip
 80152c0:	fbbc fef3 	udiv	lr, ip, r3
 80152c4:	fb03 c31e 	mls	r3, r3, lr, ip
 80152c8:	b29b      	uxth	r3, r3
 80152ca:	fb02 f303 	mul.w	r3, r2, r3
 80152ce:	f894 c00c 	ldrb.w	ip, [r4, #12]
 80152d2:	58ca      	ldr	r2, [r1, r3]
 80152d4:	4463      	add	r3, ip
 80152d6:	eba2 020c 	sub.w	r2, r2, ip
 80152da:	3308      	adds	r3, #8
 80152dc:	4605      	mov	r5, r0
 80152de:	4419      	add	r1, r3
 80152e0:	3a04      	subs	r2, #4
 80152e2:	6903      	ldr	r3, [r0, #16]
 80152e4:	f7f7 fe50 	bl	800cf88 <ucdr_init_buffer_origin>
 80152e8:	4628      	mov	r0, r5
 80152ea:	4903      	ldr	r1, [pc, #12]	@ (80152f8 <on_full_output_buffer+0x58>)
 80152ec:	4622      	mov	r2, r4
 80152ee:	f7f7 fe27 	bl	800cf40 <ucdr_set_on_full_buffer_callback>
 80152f2:	2000      	movs	r0, #0
 80152f4:	bd38      	pop	{r3, r4, r5, pc}
 80152f6:	bf00      	nop
 80152f8:	080152a1 	.word	0x080152a1

080152fc <uxr_init_output_reliable_stream>:
 80152fc:	b410      	push	{r4}
 80152fe:	f89d c004 	ldrb.w	ip, [sp, #4]
 8015302:	8103      	strh	r3, [r0, #8]
 8015304:	e9c0 1200 	strd	r1, r2, [r0]
 8015308:	f880 c00c 	strb.w	ip, [r0, #12]
 801530c:	b1d3      	cbz	r3, 8015344 <uxr_init_output_reliable_stream+0x48>
 801530e:	f8c1 c000 	str.w	ip, [r1]
 8015312:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8015316:	f1bc 0f01 	cmp.w	ip, #1
 801531a:	d913      	bls.n	8015344 <uxr_init_output_reliable_stream+0x48>
 801531c:	2301      	movs	r3, #1
 801531e:	fbb3 f1fc 	udiv	r1, r3, ip
 8015322:	fb0c 3111 	mls	r1, ip, r1, r3
 8015326:	b289      	uxth	r1, r1
 8015328:	6842      	ldr	r2, [r0, #4]
 801532a:	6804      	ldr	r4, [r0, #0]
 801532c:	fbb2 f2fc 	udiv	r2, r2, ip
 8015330:	fb01 f202 	mul.w	r2, r1, r2
 8015334:	7b01      	ldrb	r1, [r0, #12]
 8015336:	50a1      	str	r1, [r4, r2]
 8015338:	3301      	adds	r3, #1
 801533a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801533e:	b29b      	uxth	r3, r3
 8015340:	459c      	cmp	ip, r3
 8015342:	d8ec      	bhi.n	801531e <uxr_init_output_reliable_stream+0x22>
 8015344:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8015348:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801534c:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8015350:	4905      	ldr	r1, [pc, #20]	@ (8015368 <uxr_init_output_reliable_stream+0x6c>)
 8015352:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015356:	f8c0 100e 	str.w	r1, [r0, #14]
 801535a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801535e:	2300      	movs	r3, #0
 8015360:	8242      	strh	r2, [r0, #18]
 8015362:	8403      	strh	r3, [r0, #32]
 8015364:	4770      	bx	lr
 8015366:	bf00      	nop
 8015368:	ffff0000 	.word	0xffff0000

0801536c <uxr_reset_output_reliable_stream>:
 801536c:	8901      	ldrh	r1, [r0, #8]
 801536e:	b1b1      	cbz	r1, 801539e <uxr_reset_output_reliable_stream+0x32>
 8015370:	f04f 0c00 	mov.w	ip, #0
 8015374:	4663      	mov	r3, ip
 8015376:	fbb3 f2f1 	udiv	r2, r3, r1
 801537a:	fb01 3312 	mls	r3, r1, r2, r3
 801537e:	b29b      	uxth	r3, r3
 8015380:	6842      	ldr	r2, [r0, #4]
 8015382:	fbb2 f2f1 	udiv	r2, r2, r1
 8015386:	6801      	ldr	r1, [r0, #0]
 8015388:	fb02 f303 	mul.w	r3, r2, r3
 801538c:	7b02      	ldrb	r2, [r0, #12]
 801538e:	50ca      	str	r2, [r1, r3]
 8015390:	f10c 0c01 	add.w	ip, ip, #1
 8015394:	8901      	ldrh	r1, [r0, #8]
 8015396:	fa1f f38c 	uxth.w	r3, ip
 801539a:	4299      	cmp	r1, r3
 801539c:	d8eb      	bhi.n	8015376 <uxr_reset_output_reliable_stream+0xa>
 801539e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80153a2:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80153a6:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80153aa:	4904      	ldr	r1, [pc, #16]	@ (80153bc <uxr_reset_output_reliable_stream+0x50>)
 80153ac:	f8c0 100e 	str.w	r1, [r0, #14]
 80153b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80153b4:	2300      	movs	r3, #0
 80153b6:	8242      	strh	r2, [r0, #18]
 80153b8:	8403      	strh	r3, [r0, #32]
 80153ba:	4770      	bx	lr
 80153bc:	ffff0000 	.word	0xffff0000

080153c0 <uxr_prepare_reliable_buffer_to_write>:
 80153c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153c4:	4604      	mov	r4, r0
 80153c6:	b091      	sub	sp, #68	@ 0x44
 80153c8:	8900      	ldrh	r0, [r0, #8]
 80153ca:	89e6      	ldrh	r6, [r4, #14]
 80153cc:	6823      	ldr	r3, [r4, #0]
 80153ce:	9204      	str	r2, [sp, #16]
 80153d0:	fbb6 f2f0 	udiv	r2, r6, r0
 80153d4:	fb00 6212 	mls	r2, r0, r2, r6
 80153d8:	b292      	uxth	r2, r2
 80153da:	6865      	ldr	r5, [r4, #4]
 80153dc:	fbb5 f5f0 	udiv	r5, r5, r0
 80153e0:	fb05 3202 	mla	r2, r5, r2, r3
 80153e4:	3204      	adds	r2, #4
 80153e6:	f852 8c04 	ldr.w	r8, [r2, #-4]
 80153ea:	f894 900c 	ldrb.w	r9, [r4, #12]
 80153ee:	9203      	str	r2, [sp, #12]
 80153f0:	468b      	mov	fp, r1
 80153f2:	1f2f      	subs	r7, r5, #4
 80153f4:	2800      	cmp	r0, #0
 80153f6:	f000 814c 	beq.w	8015692 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 80153fa:	f04f 0c00 	mov.w	ip, #0
 80153fe:	46e2      	mov	sl, ip
 8015400:	4661      	mov	r1, ip
 8015402:	fbb1 f2f0 	udiv	r2, r1, r0
 8015406:	fb00 1212 	mls	r2, r0, r2, r1
 801540a:	b292      	uxth	r2, r2
 801540c:	fb05 f202 	mul.w	r2, r5, r2
 8015410:	f10c 0c01 	add.w	ip, ip, #1
 8015414:	589a      	ldr	r2, [r3, r2]
 8015416:	454a      	cmp	r2, r9
 8015418:	bf08      	it	eq
 801541a:	f10a 0a01 	addeq.w	sl, sl, #1
 801541e:	fa1f f18c 	uxth.w	r1, ip
 8015422:	bf08      	it	eq
 8015424:	fa1f fa8a 	uxtheq.w	sl, sl
 8015428:	4281      	cmp	r1, r0
 801542a:	d3ea      	bcc.n	8015402 <uxr_prepare_reliable_buffer_to_write+0x42>
 801542c:	4640      	mov	r0, r8
 801542e:	2104      	movs	r1, #4
 8015430:	f8cd a014 	str.w	sl, [sp, #20]
 8015434:	f7f7 fdb4 	bl	800cfa0 <ucdr_alignment>
 8015438:	4480      	add	r8, r0
 801543a:	eb08 020b 	add.w	r2, r8, fp
 801543e:	42ba      	cmp	r2, r7
 8015440:	f240 80cd 	bls.w	80155de <uxr_prepare_reliable_buffer_to_write+0x21e>
 8015444:	7b22      	ldrb	r2, [r4, #12]
 8015446:	445a      	add	r2, fp
 8015448:	42ba      	cmp	r2, r7
 801544a:	f240 80b5 	bls.w	80155b8 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 801544e:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 8015452:	33fc      	adds	r3, #252	@ 0xfc
 8015454:	b2ba      	uxth	r2, r7
 8015456:	4413      	add	r3, r2
 8015458:	b29b      	uxth	r3, r3
 801545a:	fb0a f903 	mul.w	r9, sl, r3
 801545e:	45d9      	cmp	r9, fp
 8015460:	9305      	str	r3, [sp, #20]
 8015462:	9306      	str	r3, [sp, #24]
 8015464:	f0c0 80b7 	bcc.w	80155d6 <uxr_prepare_reliable_buffer_to_write+0x216>
 8015468:	f108 0304 	add.w	r3, r8, #4
 801546c:	42bb      	cmp	r3, r7
 801546e:	f080 80db 	bcs.w	8015628 <uxr_prepare_reliable_buffer_to_write+0x268>
 8015472:	f1a2 0904 	sub.w	r9, r2, #4
 8015476:	eba9 0908 	sub.w	r9, r9, r8
 801547a:	9b05      	ldr	r3, [sp, #20]
 801547c:	fa1f f989 	uxth.w	r9, r9
 8015480:	ebab 0b09 	sub.w	fp, fp, r9
 8015484:	fbbb f2f3 	udiv	r2, fp, r3
 8015488:	fb03 b312 	mls	r3, r3, r2, fp
 801548c:	2b00      	cmp	r3, #0
 801548e:	f000 80c8 	beq.w	8015622 <uxr_prepare_reliable_buffer_to_write+0x262>
 8015492:	3201      	adds	r2, #1
 8015494:	b292      	uxth	r2, r2
 8015496:	9306      	str	r3, [sp, #24]
 8015498:	4552      	cmp	r2, sl
 801549a:	f200 809c 	bhi.w	80155d6 <uxr_prepare_reliable_buffer_to_write+0x216>
 801549e:	f10d 0b20 	add.w	fp, sp, #32
 80154a2:	2a00      	cmp	r2, #0
 80154a4:	d042      	beq.n	801552c <uxr_prepare_reliable_buffer_to_write+0x16c>
 80154a6:	f8cd 801c 	str.w	r8, [sp, #28]
 80154aa:	f04f 0a00 	mov.w	sl, #0
 80154ae:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80154b2:	9505      	str	r5, [sp, #20]
 80154b4:	f10d 0b20 	add.w	fp, sp, #32
 80154b8:	4615      	mov	r5, r2
 80154ba:	e000      	b.n	80154be <uxr_prepare_reliable_buffer_to_write+0xfe>
 80154bc:	46c1      	mov	r9, r8
 80154be:	8920      	ldrh	r0, [r4, #8]
 80154c0:	fbb6 f2f0 	udiv	r2, r6, r0
 80154c4:	fb00 6112 	mls	r1, r0, r2, r6
 80154c8:	b28a      	uxth	r2, r1
 80154ca:	6863      	ldr	r3, [r4, #4]
 80154cc:	fbb3 f1f0 	udiv	r1, r3, r0
 80154d0:	6823      	ldr	r3, [r4, #0]
 80154d2:	fb02 f101 	mul.w	r1, r2, r1
 80154d6:	3104      	adds	r1, #4
 80154d8:	4419      	add	r1, r3
 80154da:	4658      	mov	r0, fp
 80154dc:	f851 2c04 	ldr.w	r2, [r1, #-4]
 80154e0:	9200      	str	r2, [sp, #0]
 80154e2:	2300      	movs	r3, #0
 80154e4:	463a      	mov	r2, r7
 80154e6:	f7f7 fd45 	bl	800cf74 <ucdr_init_buffer_origin_offset>
 80154ea:	464a      	mov	r2, r9
 80154ec:	2300      	movs	r3, #0
 80154ee:	210d      	movs	r1, #13
 80154f0:	4658      	mov	r0, fp
 80154f2:	f7f9 fb45 	bl	800eb80 <uxr_buffer_submessage_header>
 80154f6:	8921      	ldrh	r1, [r4, #8]
 80154f8:	fbb6 f2f1 	udiv	r2, r6, r1
 80154fc:	fb01 6212 	mls	r2, r1, r2, r6
 8015500:	b292      	uxth	r2, r2
 8015502:	6863      	ldr	r3, [r4, #4]
 8015504:	fbb3 f3f1 	udiv	r3, r3, r1
 8015508:	fb02 f303 	mul.w	r3, r2, r3
 801550c:	6822      	ldr	r2, [r4, #0]
 801550e:	4630      	mov	r0, r6
 8015510:	50d7      	str	r7, [r2, r3]
 8015512:	2101      	movs	r1, #1
 8015514:	f000 f9c4 	bl	80158a0 <uxr_seq_num_add>
 8015518:	f10a 0a01 	add.w	sl, sl, #1
 801551c:	fa1f f38a 	uxth.w	r3, sl
 8015520:	429d      	cmp	r5, r3
 8015522:	4606      	mov	r6, r0
 8015524:	d8ca      	bhi.n	80154bc <uxr_prepare_reliable_buffer_to_write+0xfc>
 8015526:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801552a:	9d05      	ldr	r5, [sp, #20]
 801552c:	8920      	ldrh	r0, [r4, #8]
 801552e:	fbb6 f3f0 	udiv	r3, r6, r0
 8015532:	fb00 6313 	mls	r3, r0, r3, r6
 8015536:	b299      	uxth	r1, r3
 8015538:	6863      	ldr	r3, [r4, #4]
 801553a:	fbb3 f3f0 	udiv	r3, r3, r0
 801553e:	fb01 f303 	mul.w	r3, r1, r3
 8015542:	6821      	ldr	r1, [r4, #0]
 8015544:	3304      	adds	r3, #4
 8015546:	4419      	add	r1, r3
 8015548:	463a      	mov	r2, r7
 801554a:	f851 0c04 	ldr.w	r0, [r1, #-4]
 801554e:	9000      	str	r0, [sp, #0]
 8015550:	2300      	movs	r3, #0
 8015552:	4658      	mov	r0, fp
 8015554:	f7f7 fd0e 	bl	800cf74 <ucdr_init_buffer_origin_offset>
 8015558:	f8dd 9018 	ldr.w	r9, [sp, #24]
 801555c:	4658      	mov	r0, fp
 801555e:	fa1f f289 	uxth.w	r2, r9
 8015562:	2302      	movs	r3, #2
 8015564:	210d      	movs	r1, #13
 8015566:	f7f9 fb0b 	bl	800eb80 <uxr_buffer_submessage_header>
 801556a:	9b03      	ldr	r3, [sp, #12]
 801556c:	8927      	ldrh	r7, [r4, #8]
 801556e:	7b20      	ldrb	r0, [r4, #12]
 8015570:	f108 0104 	add.w	r1, r8, #4
 8015574:	440b      	add	r3, r1
 8015576:	4619      	mov	r1, r3
 8015578:	fbb6 f3f7 	udiv	r3, r6, r7
 801557c:	fb07 6313 	mls	r3, r7, r3, r6
 8015580:	f1a5 0208 	sub.w	r2, r5, #8
 8015584:	b29d      	uxth	r5, r3
 8015586:	3004      	adds	r0, #4
 8015588:	6863      	ldr	r3, [r4, #4]
 801558a:	fbb3 f3f7 	udiv	r3, r3, r7
 801558e:	fb05 f303 	mul.w	r3, r5, r3
 8015592:	6825      	ldr	r5, [r4, #0]
 8015594:	4448      	add	r0, r9
 8015596:	50e8      	str	r0, [r5, r3]
 8015598:	9d04      	ldr	r5, [sp, #16]
 801559a:	eba2 0208 	sub.w	r2, r2, r8
 801559e:	4628      	mov	r0, r5
 80155a0:	f7f7 fcfa 	bl	800cf98 <ucdr_init_buffer>
 80155a4:	4628      	mov	r0, r5
 80155a6:	493c      	ldr	r1, [pc, #240]	@ (8015698 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 80155a8:	4622      	mov	r2, r4
 80155aa:	f7f7 fcc9 	bl	800cf40 <ucdr_set_on_full_buffer_callback>
 80155ae:	2001      	movs	r0, #1
 80155b0:	81e6      	strh	r6, [r4, #14]
 80155b2:	b011      	add	sp, #68	@ 0x44
 80155b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80155b8:	2101      	movs	r1, #1
 80155ba:	89e0      	ldrh	r0, [r4, #14]
 80155bc:	f000 f970 	bl	80158a0 <uxr_seq_num_add>
 80155c0:	8921      	ldrh	r1, [r4, #8]
 80155c2:	4605      	mov	r5, r0
 80155c4:	8a60      	ldrh	r0, [r4, #18]
 80155c6:	f000 f96b 	bl	80158a0 <uxr_seq_num_add>
 80155ca:	4601      	mov	r1, r0
 80155cc:	4628      	mov	r0, r5
 80155ce:	f000 f96f 	bl	80158b0 <uxr_seq_num_cmp>
 80155d2:	2800      	cmp	r0, #0
 80155d4:	dd42      	ble.n	801565c <uxr_prepare_reliable_buffer_to_write+0x29c>
 80155d6:	2000      	movs	r0, #0
 80155d8:	b011      	add	sp, #68	@ 0x44
 80155da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80155de:	8921      	ldrh	r1, [r4, #8]
 80155e0:	8a60      	ldrh	r0, [r4, #18]
 80155e2:	9205      	str	r2, [sp, #20]
 80155e4:	f000 f95c 	bl	80158a0 <uxr_seq_num_add>
 80155e8:	4601      	mov	r1, r0
 80155ea:	4630      	mov	r0, r6
 80155ec:	f000 f960 	bl	80158b0 <uxr_seq_num_cmp>
 80155f0:	2800      	cmp	r0, #0
 80155f2:	9a05      	ldr	r2, [sp, #20]
 80155f4:	dcef      	bgt.n	80155d6 <uxr_prepare_reliable_buffer_to_write+0x216>
 80155f6:	8927      	ldrh	r7, [r4, #8]
 80155f8:	fbb6 f3f7 	udiv	r3, r6, r7
 80155fc:	fb07 6313 	mls	r3, r7, r3, r6
 8015600:	b29d      	uxth	r5, r3
 8015602:	6863      	ldr	r3, [r4, #4]
 8015604:	6824      	ldr	r4, [r4, #0]
 8015606:	fbb3 f3f7 	udiv	r3, r3, r7
 801560a:	fb05 f303 	mul.w	r3, r5, r3
 801560e:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8015612:	50e2      	str	r2, [r4, r3]
 8015614:	2300      	movs	r3, #0
 8015616:	f8cd 8000 	str.w	r8, [sp]
 801561a:	f7f7 fcab 	bl	800cf74 <ucdr_init_buffer_origin_offset>
 801561e:	2001      	movs	r0, #1
 8015620:	e7da      	b.n	80155d8 <uxr_prepare_reliable_buffer_to_write+0x218>
 8015622:	b293      	uxth	r3, r2
 8015624:	461a      	mov	r2, r3
 8015626:	e737      	b.n	8015498 <uxr_prepare_reliable_buffer_to_write+0xd8>
 8015628:	4630      	mov	r0, r6
 801562a:	2101      	movs	r1, #1
 801562c:	9207      	str	r2, [sp, #28]
 801562e:	f000 f937 	bl	80158a0 <uxr_seq_num_add>
 8015632:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8015636:	fbb0 f1fc 	udiv	r1, r0, ip
 801563a:	fb0c 0111 	mls	r1, ip, r1, r0
 801563e:	4606      	mov	r6, r0
 8015640:	b288      	uxth	r0, r1
 8015642:	6863      	ldr	r3, [r4, #4]
 8015644:	fbb3 f1fc 	udiv	r1, r3, ip
 8015648:	6823      	ldr	r3, [r4, #0]
 801564a:	9a07      	ldr	r2, [sp, #28]
 801564c:	fb00 f101 	mul.w	r1, r0, r1
 8015650:	3104      	adds	r1, #4
 8015652:	440b      	add	r3, r1
 8015654:	9303      	str	r3, [sp, #12]
 8015656:	f853 8c04 	ldr.w	r8, [r3, #-4]
 801565a:	e70a      	b.n	8015472 <uxr_prepare_reliable_buffer_to_write+0xb2>
 801565c:	8921      	ldrh	r1, [r4, #8]
 801565e:	fbb5 f3f1 	udiv	r3, r5, r1
 8015662:	fb01 5313 	mls	r3, r1, r3, r5
 8015666:	b29a      	uxth	r2, r3
 8015668:	6863      	ldr	r3, [r4, #4]
 801566a:	fbb3 f3f1 	udiv	r3, r3, r1
 801566e:	6821      	ldr	r1, [r4, #0]
 8015670:	9804      	ldr	r0, [sp, #16]
 8015672:	fb02 f303 	mul.w	r3, r2, r3
 8015676:	3304      	adds	r3, #4
 8015678:	7b22      	ldrb	r2, [r4, #12]
 801567a:	4419      	add	r1, r3
 801567c:	445a      	add	r2, fp
 801567e:	f841 2c04 	str.w	r2, [r1, #-4]
 8015682:	7b23      	ldrb	r3, [r4, #12]
 8015684:	9300      	str	r3, [sp, #0]
 8015686:	2300      	movs	r3, #0
 8015688:	f7f7 fc74 	bl	800cf74 <ucdr_init_buffer_origin_offset>
 801568c:	81e5      	strh	r5, [r4, #14]
 801568e:	2001      	movs	r0, #1
 8015690:	e7a2      	b.n	80155d8 <uxr_prepare_reliable_buffer_to_write+0x218>
 8015692:	4682      	mov	sl, r0
 8015694:	e6ca      	b.n	801542c <uxr_prepare_reliable_buffer_to_write+0x6c>
 8015696:	bf00      	nop
 8015698:	080152a1 	.word	0x080152a1

0801569c <uxr_prepare_next_reliable_buffer_to_send>:
 801569c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801569e:	4604      	mov	r4, r0
 80156a0:	460f      	mov	r7, r1
 80156a2:	8a00      	ldrh	r0, [r0, #16]
 80156a4:	2101      	movs	r1, #1
 80156a6:	4616      	mov	r6, r2
 80156a8:	461d      	mov	r5, r3
 80156aa:	f000 f8f9 	bl	80158a0 <uxr_seq_num_add>
 80156ae:	8028      	strh	r0, [r5, #0]
 80156b0:	8922      	ldrh	r2, [r4, #8]
 80156b2:	fbb0 f3f2 	udiv	r3, r0, r2
 80156b6:	fb02 0c13 	mls	ip, r2, r3, r0
 80156ba:	fa1f fc8c 	uxth.w	ip, ip
 80156be:	6863      	ldr	r3, [r4, #4]
 80156c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80156c4:	fb0c fc03 	mul.w	ip, ip, r3
 80156c8:	6823      	ldr	r3, [r4, #0]
 80156ca:	89e1      	ldrh	r1, [r4, #14]
 80156cc:	f10c 0c04 	add.w	ip, ip, #4
 80156d0:	4463      	add	r3, ip
 80156d2:	603b      	str	r3, [r7, #0]
 80156d4:	6823      	ldr	r3, [r4, #0]
 80156d6:	449c      	add	ip, r3
 80156d8:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 80156dc:	6033      	str	r3, [r6, #0]
 80156de:	f000 f8e7 	bl	80158b0 <uxr_seq_num_cmp>
 80156e2:	2800      	cmp	r0, #0
 80156e4:	dd01      	ble.n	80156ea <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 80156e6:	2000      	movs	r0, #0
 80156e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80156ea:	7b23      	ldrb	r3, [r4, #12]
 80156ec:	6832      	ldr	r2, [r6, #0]
 80156ee:	429a      	cmp	r2, r3
 80156f0:	d9f9      	bls.n	80156e6 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80156f2:	8a61      	ldrh	r1, [r4, #18]
 80156f4:	8a20      	ldrh	r0, [r4, #16]
 80156f6:	f000 f8d7 	bl	80158a8 <uxr_seq_num_sub>
 80156fa:	8923      	ldrh	r3, [r4, #8]
 80156fc:	4283      	cmp	r3, r0
 80156fe:	d0f2      	beq.n	80156e6 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8015700:	8828      	ldrh	r0, [r5, #0]
 8015702:	89e3      	ldrh	r3, [r4, #14]
 8015704:	8220      	strh	r0, [r4, #16]
 8015706:	4298      	cmp	r0, r3
 8015708:	d001      	beq.n	801570e <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801570a:	2001      	movs	r0, #1
 801570c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801570e:	2101      	movs	r1, #1
 8015710:	f000 f8c6 	bl	80158a0 <uxr_seq_num_add>
 8015714:	81e0      	strh	r0, [r4, #14]
 8015716:	2001      	movs	r0, #1
 8015718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801571a:	bf00      	nop

0801571c <uxr_update_output_stream_heartbeat_timestamp>:
 801571c:	b570      	push	{r4, r5, r6, lr}
 801571e:	8a01      	ldrh	r1, [r0, #16]
 8015720:	4604      	mov	r4, r0
 8015722:	8a40      	ldrh	r0, [r0, #18]
 8015724:	4615      	mov	r5, r2
 8015726:	461e      	mov	r6, r3
 8015728:	f000 f8c2 	bl	80158b0 <uxr_seq_num_cmp>
 801572c:	2800      	cmp	r0, #0
 801572e:	db07      	blt.n	8015740 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8015730:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8015734:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8015738:	e9c4 2306 	strd	r2, r3, [r4, #24]
 801573c:	2000      	movs	r0, #0
 801573e:	bd70      	pop	{r4, r5, r6, pc}
 8015740:	f894 0020 	ldrb.w	r0, [r4, #32]
 8015744:	b940      	cbnz	r0, 8015758 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 8015746:	2301      	movs	r3, #1
 8015748:	f884 3020 	strb.w	r3, [r4, #32]
 801574c:	3564      	adds	r5, #100	@ 0x64
 801574e:	f146 0600 	adc.w	r6, r6, #0
 8015752:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8015756:	bd70      	pop	{r4, r5, r6, pc}
 8015758:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 801575c:	4295      	cmp	r5, r2
 801575e:	eb76 0303 	sbcs.w	r3, r6, r3
 8015762:	bfa5      	ittet	ge
 8015764:	3001      	addge	r0, #1
 8015766:	f884 0020 	strbge.w	r0, [r4, #32]
 801576a:	2000      	movlt	r0, #0
 801576c:	2001      	movge	r0, #1
 801576e:	e7ed      	b.n	801574c <uxr_update_output_stream_heartbeat_timestamp+0x30>

08015770 <uxr_begin_output_nack_buffer_it>:
 8015770:	8a40      	ldrh	r0, [r0, #18]
 8015772:	4770      	bx	lr

08015774 <uxr_next_reliable_nack_buffer_to_send>:
 8015774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015778:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 801577c:	b082      	sub	sp, #8
 801577e:	f1b8 0f00 	cmp.w	r8, #0
 8015782:	d011      	beq.n	80157a8 <uxr_next_reliable_nack_buffer_to_send+0x34>
 8015784:	4604      	mov	r4, r0
 8015786:	8818      	ldrh	r0, [r3, #0]
 8015788:	460e      	mov	r6, r1
 801578a:	4617      	mov	r7, r2
 801578c:	461d      	mov	r5, r3
 801578e:	2101      	movs	r1, #1
 8015790:	f000 f886 	bl	80158a0 <uxr_seq_num_add>
 8015794:	8028      	strh	r0, [r5, #0]
 8015796:	8a21      	ldrh	r1, [r4, #16]
 8015798:	f000 f88a 	bl	80158b0 <uxr_seq_num_cmp>
 801579c:	2800      	cmp	r0, #0
 801579e:	dd07      	ble.n	80157b0 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 80157a0:	f04f 0800 	mov.w	r8, #0
 80157a4:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 80157a8:	4640      	mov	r0, r8
 80157aa:	b002      	add	sp, #8
 80157ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80157b0:	8921      	ldrh	r1, [r4, #8]
 80157b2:	8828      	ldrh	r0, [r5, #0]
 80157b4:	6823      	ldr	r3, [r4, #0]
 80157b6:	fbb0 f2f1 	udiv	r2, r0, r1
 80157ba:	fb01 0c12 	mls	ip, r1, r2, r0
 80157be:	fa1f f28c 	uxth.w	r2, ip
 80157c2:	9301      	str	r3, [sp, #4]
 80157c4:	6863      	ldr	r3, [r4, #4]
 80157c6:	fbb3 fcf1 	udiv	ip, r3, r1
 80157ca:	9b01      	ldr	r3, [sp, #4]
 80157cc:	fb02 fc0c 	mul.w	ip, r2, ip
 80157d0:	f10c 0c04 	add.w	ip, ip, #4
 80157d4:	4463      	add	r3, ip
 80157d6:	6033      	str	r3, [r6, #0]
 80157d8:	6823      	ldr	r3, [r4, #0]
 80157da:	4463      	add	r3, ip
 80157dc:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80157e0:	603b      	str	r3, [r7, #0]
 80157e2:	7b22      	ldrb	r2, [r4, #12]
 80157e4:	429a      	cmp	r2, r3
 80157e6:	d0d2      	beq.n	801578e <uxr_next_reliable_nack_buffer_to_send+0x1a>
 80157e8:	4640      	mov	r0, r8
 80157ea:	b002      	add	sp, #8
 80157ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080157f0 <uxr_process_acknack>:
 80157f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80157f2:	4604      	mov	r4, r0
 80157f4:	460e      	mov	r6, r1
 80157f6:	4610      	mov	r0, r2
 80157f8:	2101      	movs	r1, #1
 80157fa:	f000 f855 	bl	80158a8 <uxr_seq_num_sub>
 80157fe:	8a61      	ldrh	r1, [r4, #18]
 8015800:	f000 f852 	bl	80158a8 <uxr_seq_num_sub>
 8015804:	b1c0      	cbz	r0, 8015838 <uxr_process_acknack+0x48>
 8015806:	4605      	mov	r5, r0
 8015808:	2700      	movs	r7, #0
 801580a:	2101      	movs	r1, #1
 801580c:	8a60      	ldrh	r0, [r4, #18]
 801580e:	f000 f847 	bl	80158a0 <uxr_seq_num_add>
 8015812:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8015816:	fbb0 f1fc 	udiv	r1, r0, ip
 801581a:	e9d4 2300 	ldrd	r2, r3, [r4]
 801581e:	fb0c 0111 	mls	r1, ip, r1, r0
 8015822:	b289      	uxth	r1, r1
 8015824:	3701      	adds	r7, #1
 8015826:	fbb3 f3fc 	udiv	r3, r3, ip
 801582a:	fb01 f303 	mul.w	r3, r1, r3
 801582e:	42bd      	cmp	r5, r7
 8015830:	7b21      	ldrb	r1, [r4, #12]
 8015832:	8260      	strh	r0, [r4, #18]
 8015834:	50d1      	str	r1, [r2, r3]
 8015836:	d1e8      	bne.n	801580a <uxr_process_acknack+0x1a>
 8015838:	3e00      	subs	r6, #0
 801583a:	f04f 0300 	mov.w	r3, #0
 801583e:	bf18      	it	ne
 8015840:	2601      	movne	r6, #1
 8015842:	f884 3020 	strb.w	r3, [r4, #32]
 8015846:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 801584a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801584c <uxr_is_output_up_to_date>:
 801584c:	8a01      	ldrh	r1, [r0, #16]
 801584e:	8a40      	ldrh	r0, [r0, #18]
 8015850:	b508      	push	{r3, lr}
 8015852:	f000 f82d 	bl	80158b0 <uxr_seq_num_cmp>
 8015856:	fab0 f080 	clz	r0, r0
 801585a:	0940      	lsrs	r0, r0, #5
 801585c:	bd08      	pop	{r3, pc}
 801585e:	bf00      	nop

08015860 <get_available_free_slots>:
 8015860:	8902      	ldrh	r2, [r0, #8]
 8015862:	b1da      	cbz	r2, 801589c <get_available_free_slots+0x3c>
 8015864:	b530      	push	{r4, r5, lr}
 8015866:	2100      	movs	r1, #0
 8015868:	6843      	ldr	r3, [r0, #4]
 801586a:	6805      	ldr	r5, [r0, #0]
 801586c:	7b04      	ldrb	r4, [r0, #12]
 801586e:	fbb3 fef2 	udiv	lr, r3, r2
 8015872:	4608      	mov	r0, r1
 8015874:	460b      	mov	r3, r1
 8015876:	fbb3 fcf2 	udiv	ip, r3, r2
 801587a:	fb02 331c 	mls	r3, r2, ip, r3
 801587e:	b29b      	uxth	r3, r3
 8015880:	fb0e f303 	mul.w	r3, lr, r3
 8015884:	3101      	adds	r1, #1
 8015886:	f855 c003 	ldr.w	ip, [r5, r3]
 801588a:	4564      	cmp	r4, ip
 801588c:	bf08      	it	eq
 801588e:	3001      	addeq	r0, #1
 8015890:	b28b      	uxth	r3, r1
 8015892:	bf08      	it	eq
 8015894:	b280      	uxtheq	r0, r0
 8015896:	4293      	cmp	r3, r2
 8015898:	d3ed      	bcc.n	8015876 <get_available_free_slots+0x16>
 801589a:	bd30      	pop	{r4, r5, pc}
 801589c:	4610      	mov	r0, r2
 801589e:	4770      	bx	lr

080158a0 <uxr_seq_num_add>:
 80158a0:	4408      	add	r0, r1
 80158a2:	b280      	uxth	r0, r0
 80158a4:	4770      	bx	lr
 80158a6:	bf00      	nop

080158a8 <uxr_seq_num_sub>:
 80158a8:	1a40      	subs	r0, r0, r1
 80158aa:	b280      	uxth	r0, r0
 80158ac:	4770      	bx	lr
 80158ae:	bf00      	nop

080158b0 <uxr_seq_num_cmp>:
 80158b0:	4288      	cmp	r0, r1
 80158b2:	d011      	beq.n	80158d8 <uxr_seq_num_cmp+0x28>
 80158b4:	d309      	bcc.n	80158ca <uxr_seq_num_cmp+0x1a>
 80158b6:	4288      	cmp	r0, r1
 80158b8:	d910      	bls.n	80158dc <uxr_seq_num_cmp+0x2c>
 80158ba:	1a40      	subs	r0, r0, r1
 80158bc:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80158c0:	bfd4      	ite	le
 80158c2:	2001      	movle	r0, #1
 80158c4:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 80158c8:	4770      	bx	lr
 80158ca:	1a0b      	subs	r3, r1, r0
 80158cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80158d0:	daf1      	bge.n	80158b6 <uxr_seq_num_cmp+0x6>
 80158d2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80158d6:	4770      	bx	lr
 80158d8:	2000      	movs	r0, #0
 80158da:	4770      	bx	lr
 80158dc:	2001      	movs	r0, #1
 80158de:	4770      	bx	lr

080158e0 <uxr_init_framing_io>:
 80158e0:	2300      	movs	r3, #0
 80158e2:	7041      	strb	r1, [r0, #1]
 80158e4:	7003      	strb	r3, [r0, #0]
 80158e6:	8583      	strh	r3, [r0, #44]	@ 0x2c
 80158e8:	4770      	bx	lr
 80158ea:	bf00      	nop

080158ec <uxr_write_framed_msg>:
 80158ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158f0:	4617      	mov	r7, r2
 80158f2:	7842      	ldrb	r2, [r0, #1]
 80158f4:	b083      	sub	sp, #12
 80158f6:	460e      	mov	r6, r1
 80158f8:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 80158fc:	469a      	mov	sl, r3
 80158fe:	2901      	cmp	r1, #1
 8015900:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 8015904:	4604      	mov	r4, r0
 8015906:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 801590a:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 801590e:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 8015912:	f240 8137 	bls.w	8015b84 <uxr_write_framed_msg+0x298>
 8015916:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 801591a:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 801591e:	2901      	cmp	r1, #1
 8015920:	f04f 0202 	mov.w	r2, #2
 8015924:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015928:	f240 808f 	bls.w	8015a4a <uxr_write_framed_msg+0x15e>
 801592c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801592e:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 8015932:	b2dd      	uxtb	r5, r3
 8015934:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8015938:	2203      	movs	r2, #3
 801593a:	2901      	cmp	r1, #1
 801593c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015940:	f240 809a 	bls.w	8015a78 <uxr_write_framed_msg+0x18c>
 8015944:	18a1      	adds	r1, r4, r2
 8015946:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015948:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 801594c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8015950:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8015954:	3201      	adds	r2, #1
 8015956:	2801      	cmp	r0, #1
 8015958:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801595c:	f240 80a0 	bls.w	8015aa0 <uxr_write_framed_msg+0x1b4>
 8015960:	18a0      	adds	r0, r4, r2
 8015962:	3201      	adds	r2, #1
 8015964:	b2d2      	uxtb	r2, r2
 8015966:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 801596a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801596e:	2b00      	cmp	r3, #0
 8015970:	f000 80a9 	beq.w	8015ac6 <uxr_write_framed_msg+0x1da>
 8015974:	f04f 0900 	mov.w	r9, #0
 8015978:	46c8      	mov	r8, r9
 801597a:	f81a 3008 	ldrb.w	r3, [sl, r8]
 801597e:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8015982:	2901      	cmp	r1, #1
 8015984:	f240 80c3 	bls.w	8015b0e <uxr_write_framed_msg+0x222>
 8015988:	2a29      	cmp	r2, #41	@ 0x29
 801598a:	f200 809f 	bhi.w	8015acc <uxr_write_framed_msg+0x1e0>
 801598e:	18a1      	adds	r1, r4, r2
 8015990:	3201      	adds	r2, #1
 8015992:	b2d2      	uxtb	r2, r2
 8015994:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 8015998:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801599c:	ea89 0303 	eor.w	r3, r9, r3
 80159a0:	498c      	ldr	r1, [pc, #560]	@ (8015bd4 <uxr_write_framed_msg+0x2e8>)
 80159a2:	b2db      	uxtb	r3, r3
 80159a4:	f108 0801 	add.w	r8, r8, #1
 80159a8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80159ac:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 80159b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80159b2:	4543      	cmp	r3, r8
 80159b4:	d8e1      	bhi.n	801597a <uxr_write_framed_msg+0x8e>
 80159b6:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80159ba:	fa5f f889 	uxtb.w	r8, r9
 80159be:	9301      	str	r3, [sp, #4]
 80159c0:	f04f 0900 	mov.w	r9, #0
 80159c4:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 80159c8:	fa5f f18a 	uxtb.w	r1, sl
 80159cc:	2901      	cmp	r1, #1
 80159ce:	d921      	bls.n	8015a14 <uxr_write_framed_msg+0x128>
 80159d0:	2a29      	cmp	r2, #41	@ 0x29
 80159d2:	f240 80af 	bls.w	8015b34 <uxr_write_framed_msg+0x248>
 80159d6:	2500      	movs	r5, #0
 80159d8:	e000      	b.n	80159dc <uxr_write_framed_msg+0xf0>
 80159da:	b160      	cbz	r0, 80159f6 <uxr_write_framed_msg+0x10a>
 80159dc:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80159e0:	1b52      	subs	r2, r2, r5
 80159e2:	465b      	mov	r3, fp
 80159e4:	4421      	add	r1, r4
 80159e6:	4638      	mov	r0, r7
 80159e8:	47b0      	blx	r6
 80159ea:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80159ee:	4405      	add	r5, r0
 80159f0:	4295      	cmp	r5, r2
 80159f2:	d3f2      	bcc.n	80159da <uxr_write_framed_msg+0xee>
 80159f4:	d003      	beq.n	80159fe <uxr_write_framed_msg+0x112>
 80159f6:	2000      	movs	r0, #0
 80159f8:	b003      	add	sp, #12
 80159fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159fe:	fa5f f18a 	uxtb.w	r1, sl
 8015a02:	f04f 0300 	mov.w	r3, #0
 8015a06:	2901      	cmp	r1, #1
 8015a08:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8015a0c:	f04f 0200 	mov.w	r2, #0
 8015a10:	f200 8090 	bhi.w	8015b34 <uxr_write_framed_msg+0x248>
 8015a14:	1c51      	adds	r1, r2, #1
 8015a16:	b2c9      	uxtb	r1, r1
 8015a18:	2929      	cmp	r1, #41	@ 0x29
 8015a1a:	d8dc      	bhi.n	80159d6 <uxr_write_framed_msg+0xea>
 8015a1c:	18a5      	adds	r5, r4, r2
 8015a1e:	4421      	add	r1, r4
 8015a20:	3202      	adds	r2, #2
 8015a22:	f088 0820 	eor.w	r8, r8, #32
 8015a26:	4648      	mov	r0, r9
 8015a28:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 8015a2c:	b2d2      	uxtb	r2, r2
 8015a2e:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 8015a32:	f04f 0901 	mov.w	r9, #1
 8015a36:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8015a3a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015a3e:	2800      	cmp	r0, #0
 8015a40:	f040 8085 	bne.w	8015b4e <uxr_write_framed_msg+0x262>
 8015a44:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8015a48:	e7bc      	b.n	80159c4 <uxr_write_framed_msg+0xd8>
 8015a4a:	4611      	mov	r1, r2
 8015a4c:	f04f 0c03 	mov.w	ip, #3
 8015a50:	2204      	movs	r2, #4
 8015a52:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015a54:	4421      	add	r1, r4
 8015a56:	b2dd      	uxtb	r5, r3
 8015a58:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 8015a5c:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 8015a60:	44a4      	add	ip, r4
 8015a62:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8015a66:	f080 0020 	eor.w	r0, r0, #32
 8015a6a:	2901      	cmp	r1, #1
 8015a6c:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 8015a70:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015a74:	f63f af66 	bhi.w	8015944 <uxr_write_framed_msg+0x58>
 8015a78:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015a7a:	18a0      	adds	r0, r4, r2
 8015a7c:	f085 0520 	eor.w	r5, r5, #32
 8015a80:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8015a84:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8015a88:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 8015a8c:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 8015a90:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8015a94:	3202      	adds	r2, #2
 8015a96:	2801      	cmp	r0, #1
 8015a98:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015a9c:	f63f af60 	bhi.w	8015960 <uxr_write_framed_msg+0x74>
 8015aa0:	1c50      	adds	r0, r2, #1
 8015aa2:	18a5      	adds	r5, r4, r2
 8015aa4:	fa54 f080 	uxtab	r0, r4, r0
 8015aa8:	3202      	adds	r2, #2
 8015aaa:	f081 0120 	eor.w	r1, r1, #32
 8015aae:	b2d2      	uxtb	r2, r2
 8015ab0:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8015ab4:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 8015ab8:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8015abc:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015ac0:	2b00      	cmp	r3, #0
 8015ac2:	f47f af57 	bne.w	8015974 <uxr_write_framed_msg+0x88>
 8015ac6:	9301      	str	r3, [sp, #4]
 8015ac8:	4698      	mov	r8, r3
 8015aca:	e779      	b.n	80159c0 <uxr_write_framed_msg+0xd4>
 8015acc:	2500      	movs	r5, #0
 8015ace:	e001      	b.n	8015ad4 <uxr_write_framed_msg+0x1e8>
 8015ad0:	2800      	cmp	r0, #0
 8015ad2:	d090      	beq.n	80159f6 <uxr_write_framed_msg+0x10a>
 8015ad4:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8015ad8:	1b52      	subs	r2, r2, r5
 8015ada:	465b      	mov	r3, fp
 8015adc:	4421      	add	r1, r4
 8015ade:	4638      	mov	r0, r7
 8015ae0:	47b0      	blx	r6
 8015ae2:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8015ae6:	4405      	add	r5, r0
 8015ae8:	4295      	cmp	r5, r2
 8015aea:	d3f1      	bcc.n	8015ad0 <uxr_write_framed_msg+0x1e4>
 8015aec:	d183      	bne.n	80159f6 <uxr_write_framed_msg+0x10a>
 8015aee:	f04f 0300 	mov.w	r3, #0
 8015af2:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8015af6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015af8:	4543      	cmp	r3, r8
 8015afa:	d964      	bls.n	8015bc6 <uxr_write_framed_msg+0x2da>
 8015afc:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8015b00:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8015b04:	2901      	cmp	r1, #1
 8015b06:	f04f 0200 	mov.w	r2, #0
 8015b0a:	f63f af3d 	bhi.w	8015988 <uxr_write_framed_msg+0x9c>
 8015b0e:	1c51      	adds	r1, r2, #1
 8015b10:	b2c9      	uxtb	r1, r1
 8015b12:	2929      	cmp	r1, #41	@ 0x29
 8015b14:	d8da      	bhi.n	8015acc <uxr_write_framed_msg+0x1e0>
 8015b16:	18a0      	adds	r0, r4, r2
 8015b18:	4421      	add	r1, r4
 8015b1a:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 8015b1e:	3202      	adds	r2, #2
 8015b20:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 8015b24:	b2d2      	uxtb	r2, r2
 8015b26:	f083 0020 	eor.w	r0, r3, #32
 8015b2a:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 8015b2e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015b32:	e733      	b.n	801599c <uxr_write_framed_msg+0xb0>
 8015b34:	18a1      	adds	r1, r4, r2
 8015b36:	3201      	adds	r2, #1
 8015b38:	4648      	mov	r0, r9
 8015b3a:	b2d2      	uxtb	r2, r2
 8015b3c:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8015b40:	f04f 0901 	mov.w	r9, #1
 8015b44:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015b48:	2800      	cmp	r0, #0
 8015b4a:	f43f af7b 	beq.w	8015a44 <uxr_write_framed_msg+0x158>
 8015b4e:	2500      	movs	r5, #0
 8015b50:	e002      	b.n	8015b58 <uxr_write_framed_msg+0x26c>
 8015b52:	2800      	cmp	r0, #0
 8015b54:	f43f af4f 	beq.w	80159f6 <uxr_write_framed_msg+0x10a>
 8015b58:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8015b5c:	1b52      	subs	r2, r2, r5
 8015b5e:	465b      	mov	r3, fp
 8015b60:	4421      	add	r1, r4
 8015b62:	4638      	mov	r0, r7
 8015b64:	47b0      	blx	r6
 8015b66:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8015b6a:	4405      	add	r5, r0
 8015b6c:	4295      	cmp	r5, r2
 8015b6e:	d3f0      	bcc.n	8015b52 <uxr_write_framed_msg+0x266>
 8015b70:	f47f af41 	bne.w	80159f6 <uxr_write_framed_msg+0x10a>
 8015b74:	2300      	movs	r3, #0
 8015b76:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8015b7a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015b7c:	b298      	uxth	r0, r3
 8015b7e:	b003      	add	sp, #12
 8015b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b84:	217d      	movs	r1, #125	@ 0x7d
 8015b86:	f082 0220 	eor.w	r2, r2, #32
 8015b8a:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 8015b8e:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8015b92:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 8015b96:	2901      	cmp	r1, #1
 8015b98:	f04f 0203 	mov.w	r2, #3
 8015b9c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015ba0:	d804      	bhi.n	8015bac <uxr_write_framed_msg+0x2c0>
 8015ba2:	4611      	mov	r1, r2
 8015ba4:	f04f 0c04 	mov.w	ip, #4
 8015ba8:	2205      	movs	r2, #5
 8015baa:	e752      	b.n	8015a52 <uxr_write_framed_msg+0x166>
 8015bac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015bae:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 8015bb2:	b2dd      	uxtb	r5, r3
 8015bb4:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8015bb8:	2204      	movs	r2, #4
 8015bba:	2901      	cmp	r1, #1
 8015bbc:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015bc0:	f63f aec0 	bhi.w	8015944 <uxr_write_framed_msg+0x58>
 8015bc4:	e758      	b.n	8015a78 <uxr_write_framed_msg+0x18c>
 8015bc6:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8015bca:	fa5f f889 	uxtb.w	r8, r9
 8015bce:	9301      	str	r3, [sp, #4]
 8015bd0:	2200      	movs	r2, #0
 8015bd2:	e6f5      	b.n	80159c0 <uxr_write_framed_msg+0xd4>
 8015bd4:	0801a728 	.word	0x0801a728

08015bd8 <uxr_framing_read_transport>:
 8015bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015bdc:	4604      	mov	r4, r0
 8015bde:	b083      	sub	sp, #12
 8015be0:	461f      	mov	r7, r3
 8015be2:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 8015be6:	4689      	mov	r9, r1
 8015be8:	4692      	mov	sl, r2
 8015bea:	f7f9 f80f 	bl	800ec0c <uxr_millis>
 8015bee:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8015bf2:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 8015bf6:	42b3      	cmp	r3, r6
 8015bf8:	4680      	mov	r8, r0
 8015bfa:	d061      	beq.n	8015cc0 <uxr_framing_read_transport+0xe8>
 8015bfc:	d81c      	bhi.n	8015c38 <uxr_framing_read_transport+0x60>
 8015bfe:	1e75      	subs	r5, r6, #1
 8015c00:	1aed      	subs	r5, r5, r3
 8015c02:	b2ed      	uxtb	r5, r5
 8015c04:	2600      	movs	r6, #0
 8015c06:	455d      	cmp	r5, fp
 8015c08:	d81f      	bhi.n	8015c4a <uxr_framing_read_transport+0x72>
 8015c0a:	19ab      	adds	r3, r5, r6
 8015c0c:	455b      	cmp	r3, fp
 8015c0e:	bf84      	itt	hi
 8015c10:	ebab 0605 	subhi.w	r6, fp, r5
 8015c14:	b2f6      	uxtbhi	r6, r6
 8015c16:	b9ed      	cbnz	r5, 8015c54 <uxr_framing_read_transport+0x7c>
 8015c18:	f04f 0b00 	mov.w	fp, #0
 8015c1c:	f7f8 fff6 	bl	800ec0c <uxr_millis>
 8015c20:	683b      	ldr	r3, [r7, #0]
 8015c22:	eba0 0808 	sub.w	r8, r0, r8
 8015c26:	eba3 0308 	sub.w	r3, r3, r8
 8015c2a:	4658      	mov	r0, fp
 8015c2c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015c30:	603b      	str	r3, [r7, #0]
 8015c32:	b003      	add	sp, #12
 8015c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c38:	2e00      	cmp	r6, #0
 8015c3a:	d049      	beq.n	8015cd0 <uxr_framing_read_transport+0xf8>
 8015c3c:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 8015c40:	b2ed      	uxtb	r5, r5
 8015c42:	3e01      	subs	r6, #1
 8015c44:	455d      	cmp	r5, fp
 8015c46:	b2f6      	uxtb	r6, r6
 8015c48:	d9df      	bls.n	8015c0a <uxr_framing_read_transport+0x32>
 8015c4a:	fa5f f58b 	uxtb.w	r5, fp
 8015c4e:	2600      	movs	r6, #0
 8015c50:	2d00      	cmp	r5, #0
 8015c52:	d0e1      	beq.n	8015c18 <uxr_framing_read_transport+0x40>
 8015c54:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8015c58:	3102      	adds	r1, #2
 8015c5a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015c5c:	9300      	str	r3, [sp, #0]
 8015c5e:	683b      	ldr	r3, [r7, #0]
 8015c60:	4421      	add	r1, r4
 8015c62:	462a      	mov	r2, r5
 8015c64:	4650      	mov	r0, sl
 8015c66:	47c8      	blx	r9
 8015c68:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8015c6c:	4a1a      	ldr	r2, [pc, #104]	@ (8015cd8 <uxr_framing_read_transport+0x100>)
 8015c6e:	4403      	add	r3, r0
 8015c70:	0859      	lsrs	r1, r3, #1
 8015c72:	fba2 2101 	umull	r2, r1, r2, r1
 8015c76:	0889      	lsrs	r1, r1, #2
 8015c78:	222a      	movs	r2, #42	@ 0x2a
 8015c7a:	fb02 3111 	mls	r1, r2, r1, r3
 8015c7e:	4683      	mov	fp, r0
 8015c80:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 8015c84:	2800      	cmp	r0, #0
 8015c86:	d0c7      	beq.n	8015c18 <uxr_framing_read_transport+0x40>
 8015c88:	42a8      	cmp	r0, r5
 8015c8a:	d1c7      	bne.n	8015c1c <uxr_framing_read_transport+0x44>
 8015c8c:	2e00      	cmp	r6, #0
 8015c8e:	d0c5      	beq.n	8015c1c <uxr_framing_read_transport+0x44>
 8015c90:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015c92:	9300      	str	r3, [sp, #0]
 8015c94:	3102      	adds	r1, #2
 8015c96:	4632      	mov	r2, r6
 8015c98:	4421      	add	r1, r4
 8015c9a:	2300      	movs	r3, #0
 8015c9c:	4650      	mov	r0, sl
 8015c9e:	47c8      	blx	r9
 8015ca0:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8015ca4:	4a0c      	ldr	r2, [pc, #48]	@ (8015cd8 <uxr_framing_read_transport+0x100>)
 8015ca6:	180b      	adds	r3, r1, r0
 8015ca8:	0859      	lsrs	r1, r3, #1
 8015caa:	fba2 1201 	umull	r1, r2, r2, r1
 8015cae:	0892      	lsrs	r2, r2, #2
 8015cb0:	212a      	movs	r1, #42	@ 0x2a
 8015cb2:	fb01 3312 	mls	r3, r1, r2, r3
 8015cb6:	eb00 0b05 	add.w	fp, r0, r5
 8015cba:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8015cbe:	e7ad      	b.n	8015c1c <uxr_framing_read_transport+0x44>
 8015cc0:	2600      	movs	r6, #0
 8015cc2:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 8015cc6:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 8015cc8:	d9bf      	bls.n	8015c4a <uxr_framing_read_transport+0x72>
 8015cca:	2102      	movs	r1, #2
 8015ccc:	2529      	movs	r5, #41	@ 0x29
 8015cce:	e7c4      	b.n	8015c5a <uxr_framing_read_transport+0x82>
 8015cd0:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 8015cd4:	b2ed      	uxtb	r5, r5
 8015cd6:	e796      	b.n	8015c06 <uxr_framing_read_transport+0x2e>
 8015cd8:	30c30c31 	.word	0x30c30c31

08015cdc <uxr_read_framed_msg>:
 8015cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ce0:	461e      	mov	r6, r3
 8015ce2:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8015ce6:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8015cea:	429d      	cmp	r5, r3
 8015cec:	b083      	sub	sp, #12
 8015cee:	4604      	mov	r4, r0
 8015cf0:	4688      	mov	r8, r1
 8015cf2:	4691      	mov	r9, r2
 8015cf4:	f000 8188 	beq.w	8016008 <uxr_read_framed_msg+0x32c>
 8015cf8:	7823      	ldrb	r3, [r4, #0]
 8015cfa:	4dc1      	ldr	r5, [pc, #772]	@ (8016000 <uxr_read_framed_msg+0x324>)
 8015cfc:	4fc1      	ldr	r7, [pc, #772]	@ (8016004 <uxr_read_framed_msg+0x328>)
 8015cfe:	2b07      	cmp	r3, #7
 8015d00:	d8fd      	bhi.n	8015cfe <uxr_read_framed_msg+0x22>
 8015d02:	e8df f013 	tbh	[pc, r3, lsl #1]
 8015d06:	0115      	.short	0x0115
 8015d08:	00d600f6 	.word	0x00d600f6
 8015d0c:	009000b9 	.word	0x009000b9
 8015d10:	0030004d 	.word	0x0030004d
 8015d14:	0008      	.short	0x0008
 8015d16:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8015d1a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8015d1e:	4299      	cmp	r1, r3
 8015d20:	f000 814a 	beq.w	8015fb8 <uxr_read_framed_msg+0x2dc>
 8015d24:	18e2      	adds	r2, r4, r3
 8015d26:	7892      	ldrb	r2, [r2, #2]
 8015d28:	2a7d      	cmp	r2, #125	@ 0x7d
 8015d2a:	f000 8199 	beq.w	8016060 <uxr_read_framed_msg+0x384>
 8015d2e:	3301      	adds	r3, #1
 8015d30:	0858      	lsrs	r0, r3, #1
 8015d32:	fba5 1000 	umull	r1, r0, r5, r0
 8015d36:	0880      	lsrs	r0, r0, #2
 8015d38:	212a      	movs	r1, #42	@ 0x2a
 8015d3a:	fb01 3310 	mls	r3, r1, r0, r3
 8015d3e:	2a7e      	cmp	r2, #126	@ 0x7e
 8015d40:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8015d44:	f000 8252 	beq.w	80161ec <uxr_read_framed_msg+0x510>
 8015d48:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8015d4a:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 8015d4c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8015d50:	b29b      	uxth	r3, r3
 8015d52:	2200      	movs	r2, #0
 8015d54:	4299      	cmp	r1, r3
 8015d56:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8015d58:	7022      	strb	r2, [r4, #0]
 8015d5a:	f000 8179 	beq.w	8016050 <uxr_read_framed_msg+0x374>
 8015d5e:	2000      	movs	r0, #0
 8015d60:	b003      	add	sp, #12
 8015d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d66:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8015d6a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8015d6e:	4299      	cmp	r1, r3
 8015d70:	f000 8131 	beq.w	8015fd6 <uxr_read_framed_msg+0x2fa>
 8015d74:	18e2      	adds	r2, r4, r3
 8015d76:	7890      	ldrb	r0, [r2, #2]
 8015d78:	287d      	cmp	r0, #125	@ 0x7d
 8015d7a:	f000 8190 	beq.w	801609e <uxr_read_framed_msg+0x3c2>
 8015d7e:	3301      	adds	r3, #1
 8015d80:	085a      	lsrs	r2, r3, #1
 8015d82:	fba5 1202 	umull	r1, r2, r5, r2
 8015d86:	0892      	lsrs	r2, r2, #2
 8015d88:	212a      	movs	r1, #42	@ 0x2a
 8015d8a:	fb01 3312 	mls	r3, r1, r2, r3
 8015d8e:	287e      	cmp	r0, #126	@ 0x7e
 8015d90:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8015d94:	f000 821a 	beq.w	80161cc <uxr_read_framed_msg+0x4f0>
 8015d98:	2307      	movs	r3, #7
 8015d9a:	86a0      	strh	r0, [r4, #52]	@ 0x34
 8015d9c:	7023      	strb	r3, [r4, #0]
 8015d9e:	e7ae      	b.n	8015cfe <uxr_read_framed_msg+0x22>
 8015da0:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8015da2:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8015da6:	459e      	cmp	lr, r3
 8015da8:	d938      	bls.n	8015e1c <uxr_read_framed_msg+0x140>
 8015daa:	ee07 8a90 	vmov	s15, r8
 8015dae:	212a      	movs	r1, #42	@ 0x2a
 8015db0:	e020      	b.n	8015df4 <uxr_read_framed_msg+0x118>
 8015db2:	f89b c002 	ldrb.w	ip, [fp, #2]
 8015db6:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 8015dba:	f000 80d4 	beq.w	8015f66 <uxr_read_framed_msg+0x28a>
 8015dbe:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8015dc2:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8015dc6:	f000 8219 	beq.w	80161fc <uxr_read_framed_msg+0x520>
 8015dca:	f806 c003 	strb.w	ip, [r6, r3]
 8015dce:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 8015dd2:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8015dd4:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8015dd8:	ea8a 000c 	eor.w	r0, sl, ip
 8015ddc:	b2c0      	uxtb	r0, r0
 8015dde:	3301      	adds	r3, #1
 8015de0:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 8015de4:	b29b      	uxth	r3, r3
 8015de6:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 8015dea:	4573      	cmp	r3, lr
 8015dec:	8663      	strh	r3, [r4, #50]	@ 0x32
 8015dee:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8015df0:	f080 8120 	bcs.w	8016034 <uxr_read_framed_msg+0x358>
 8015df4:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 8015df8:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8015dfc:	f100 0c01 	add.w	ip, r0, #1
 8015e00:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8015e04:	fba5 8202 	umull	r8, r2, r5, r2
 8015e08:	0892      	lsrs	r2, r2, #2
 8015e0a:	4582      	cmp	sl, r0
 8015e0c:	eb04 0b00 	add.w	fp, r4, r0
 8015e10:	fb01 c212 	mls	r2, r1, r2, ip
 8015e14:	d1cd      	bne.n	8015db2 <uxr_read_framed_msg+0xd6>
 8015e16:	ee17 8a90 	vmov	r8, s15
 8015e1a:	459e      	cmp	lr, r3
 8015e1c:	f040 8111 	bne.w	8016042 <uxr_read_framed_msg+0x366>
 8015e20:	2306      	movs	r3, #6
 8015e22:	7023      	strb	r3, [r4, #0]
 8015e24:	e76b      	b.n	8015cfe <uxr_read_framed_msg+0x22>
 8015e26:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8015e2a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8015e2e:	4298      	cmp	r0, r3
 8015e30:	f000 80c2 	beq.w	8015fb8 <uxr_read_framed_msg+0x2dc>
 8015e34:	18e2      	adds	r2, r4, r3
 8015e36:	7891      	ldrb	r1, [r2, #2]
 8015e38:	297d      	cmp	r1, #125	@ 0x7d
 8015e3a:	f000 814c 	beq.w	80160d6 <uxr_read_framed_msg+0x3fa>
 8015e3e:	3301      	adds	r3, #1
 8015e40:	085a      	lsrs	r2, r3, #1
 8015e42:	fba5 0202 	umull	r0, r2, r5, r2
 8015e46:	0892      	lsrs	r2, r2, #2
 8015e48:	202a      	movs	r0, #42	@ 0x2a
 8015e4a:	fb00 3312 	mls	r3, r0, r2, r3
 8015e4e:	297e      	cmp	r1, #126	@ 0x7e
 8015e50:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8015e54:	f000 81ca 	beq.w	80161ec <uxr_read_framed_msg+0x510>
 8015e58:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8015e5a:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8015e5e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8015e60:	b29b      	uxth	r3, r3
 8015e62:	2000      	movs	r0, #0
 8015e64:	428b      	cmp	r3, r1
 8015e66:	8623      	strh	r3, [r4, #48]	@ 0x30
 8015e68:	8660      	strh	r0, [r4, #50]	@ 0x32
 8015e6a:	86e0      	strh	r0, [r4, #54]	@ 0x36
 8015e6c:	f240 80df 	bls.w	801602e <uxr_read_framed_msg+0x352>
 8015e70:	7020      	strb	r0, [r4, #0]
 8015e72:	b003      	add	sp, #12
 8015e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e78:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8015e7c:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8015e80:	4299      	cmp	r1, r3
 8015e82:	f000 80a8 	beq.w	8015fd6 <uxr_read_framed_msg+0x2fa>
 8015e86:	18e2      	adds	r2, r4, r3
 8015e88:	7890      	ldrb	r0, [r2, #2]
 8015e8a:	287d      	cmp	r0, #125	@ 0x7d
 8015e8c:	f000 8164 	beq.w	8016158 <uxr_read_framed_msg+0x47c>
 8015e90:	3301      	adds	r3, #1
 8015e92:	085a      	lsrs	r2, r3, #1
 8015e94:	fba5 1202 	umull	r1, r2, r5, r2
 8015e98:	0892      	lsrs	r2, r2, #2
 8015e9a:	212a      	movs	r1, #42	@ 0x2a
 8015e9c:	fb01 3312 	mls	r3, r1, r2, r3
 8015ea0:	287e      	cmp	r0, #126	@ 0x7e
 8015ea2:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8015ea6:	f000 8191 	beq.w	80161cc <uxr_read_framed_msg+0x4f0>
 8015eaa:	2304      	movs	r3, #4
 8015eac:	8620      	strh	r0, [r4, #48]	@ 0x30
 8015eae:	7023      	strb	r3, [r4, #0]
 8015eb0:	e725      	b.n	8015cfe <uxr_read_framed_msg+0x22>
 8015eb2:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8015eb6:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8015eba:	4290      	cmp	r0, r2
 8015ebc:	f000 80b3 	beq.w	8016026 <uxr_read_framed_msg+0x34a>
 8015ec0:	18a3      	adds	r3, r4, r2
 8015ec2:	7899      	ldrb	r1, [r3, #2]
 8015ec4:	297d      	cmp	r1, #125	@ 0x7d
 8015ec6:	f000 8164 	beq.w	8016192 <uxr_read_framed_msg+0x4b6>
 8015eca:	3201      	adds	r2, #1
 8015ecc:	0850      	lsrs	r0, r2, #1
 8015ece:	fba5 3000 	umull	r3, r0, r5, r0
 8015ed2:	0880      	lsrs	r0, r0, #2
 8015ed4:	232a      	movs	r3, #42	@ 0x2a
 8015ed6:	fb03 2210 	mls	r2, r3, r0, r2
 8015eda:	297e      	cmp	r1, #126	@ 0x7e
 8015edc:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8015ee0:	f000 8188 	beq.w	80161f4 <uxr_read_framed_msg+0x518>
 8015ee4:	7863      	ldrb	r3, [r4, #1]
 8015ee6:	428b      	cmp	r3, r1
 8015ee8:	bf0c      	ite	eq
 8015eea:	2303      	moveq	r3, #3
 8015eec:	2300      	movne	r3, #0
 8015eee:	7023      	strb	r3, [r4, #0]
 8015ef0:	e705      	b.n	8015cfe <uxr_read_framed_msg+0x22>
 8015ef2:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8015ef6:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8015efa:	2200      	movs	r2, #0
 8015efc:	4299      	cmp	r1, r3
 8015efe:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 8015f02:	d06c      	beq.n	8015fde <uxr_read_framed_msg+0x302>
 8015f04:	18e2      	adds	r2, r4, r3
 8015f06:	7890      	ldrb	r0, [r2, #2]
 8015f08:	287d      	cmp	r0, #125	@ 0x7d
 8015f0a:	f000 8101 	beq.w	8016110 <uxr_read_framed_msg+0x434>
 8015f0e:	3301      	adds	r3, #1
 8015f10:	085a      	lsrs	r2, r3, #1
 8015f12:	fba5 1202 	umull	r1, r2, r5, r2
 8015f16:	0892      	lsrs	r2, r2, #2
 8015f18:	212a      	movs	r1, #42	@ 0x2a
 8015f1a:	fb01 3312 	mls	r3, r1, r2, r3
 8015f1e:	287e      	cmp	r0, #126	@ 0x7e
 8015f20:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8015f24:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8015f28:	d059      	beq.n	8015fde <uxr_read_framed_msg+0x302>
 8015f2a:	2302      	movs	r3, #2
 8015f2c:	7023      	strb	r3, [r4, #0]
 8015f2e:	e6e6      	b.n	8015cfe <uxr_read_framed_msg+0x22>
 8015f30:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8015f34:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8015f38:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 8015f3c:	1c51      	adds	r1, r2, #1
 8015f3e:	084b      	lsrs	r3, r1, #1
 8015f40:	fba5 c303 	umull	ip, r3, r5, r3
 8015f44:	089b      	lsrs	r3, r3, #2
 8015f46:	fb0e 1313 	mls	r3, lr, r3, r1
 8015f4a:	4592      	cmp	sl, r2
 8015f4c:	eb04 0002 	add.w	r0, r4, r2
 8015f50:	b2da      	uxtb	r2, r3
 8015f52:	f43f af04 	beq.w	8015d5e <uxr_read_framed_msg+0x82>
 8015f56:	7883      	ldrb	r3, [r0, #2]
 8015f58:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8015f5c:	2b7e      	cmp	r3, #126	@ 0x7e
 8015f5e:	d1ed      	bne.n	8015f3c <uxr_read_framed_msg+0x260>
 8015f60:	2301      	movs	r3, #1
 8015f62:	7023      	strb	r3, [r4, #0]
 8015f64:	e6cb      	b.n	8015cfe <uxr_read_framed_msg+0x22>
 8015f66:	f100 0c01 	add.w	ip, r0, #1
 8015f6a:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8015f6e:	fba5 8202 	umull	r8, r2, r5, r2
 8015f72:	0892      	lsrs	r2, r2, #2
 8015f74:	fb01 c212 	mls	r2, r1, r2, ip
 8015f78:	eb04 0c02 	add.w	ip, r4, r2
 8015f7c:	b2d2      	uxtb	r2, r2
 8015f7e:	4592      	cmp	sl, r2
 8015f80:	f100 0002 	add.w	r0, r0, #2
 8015f84:	f43f af47 	beq.w	8015e16 <uxr_read_framed_msg+0x13a>
 8015f88:	0842      	lsrs	r2, r0, #1
 8015f8a:	f89c a002 	ldrb.w	sl, [ip, #2]
 8015f8e:	fba5 8202 	umull	r8, r2, r5, r2
 8015f92:	0892      	lsrs	r2, r2, #2
 8015f94:	fb01 0012 	mls	r0, r1, r2, r0
 8015f98:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 8015f9c:	f08a 0c20 	eor.w	ip, sl, #32
 8015fa0:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 8015fa4:	f47f af11 	bne.w	8015dca <uxr_read_framed_msg+0xee>
 8015fa8:	459e      	cmp	lr, r3
 8015faa:	ee17 8a90 	vmov	r8, s15
 8015fae:	f43f af37 	beq.w	8015e20 <uxr_read_framed_msg+0x144>
 8015fb2:	2301      	movs	r3, #1
 8015fb4:	7023      	strb	r3, [r4, #0]
 8015fb6:	e6a2      	b.n	8015cfe <uxr_read_framed_msg+0x22>
 8015fb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015fba:	9300      	str	r3, [sp, #0]
 8015fbc:	2301      	movs	r3, #1
 8015fbe:	9301      	str	r3, [sp, #4]
 8015fc0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015fc2:	464a      	mov	r2, r9
 8015fc4:	4641      	mov	r1, r8
 8015fc6:	4620      	mov	r0, r4
 8015fc8:	f7ff fe06 	bl	8015bd8 <uxr_framing_read_transport>
 8015fcc:	2800      	cmp	r0, #0
 8015fce:	f43f aec6 	beq.w	8015d5e <uxr_read_framed_msg+0x82>
 8015fd2:	7823      	ldrb	r3, [r4, #0]
 8015fd4:	e693      	b.n	8015cfe <uxr_read_framed_msg+0x22>
 8015fd6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015fd8:	9300      	str	r3, [sp, #0]
 8015fda:	2302      	movs	r3, #2
 8015fdc:	e7ef      	b.n	8015fbe <uxr_read_framed_msg+0x2e2>
 8015fde:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015fe0:	9300      	str	r3, [sp, #0]
 8015fe2:	2304      	movs	r3, #4
 8015fe4:	9301      	str	r3, [sp, #4]
 8015fe6:	464a      	mov	r2, r9
 8015fe8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015fea:	4641      	mov	r1, r8
 8015fec:	4620      	mov	r0, r4
 8015fee:	f7ff fdf3 	bl	8015bd8 <uxr_framing_read_transport>
 8015ff2:	2800      	cmp	r0, #0
 8015ff4:	d1ed      	bne.n	8015fd2 <uxr_read_framed_msg+0x2f6>
 8015ff6:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8015ffa:	2b7e      	cmp	r3, #126	@ 0x7e
 8015ffc:	d0e9      	beq.n	8015fd2 <uxr_read_framed_msg+0x2f6>
 8015ffe:	e6ae      	b.n	8015d5e <uxr_read_framed_msg+0x82>
 8016000:	30c30c31 	.word	0x30c30c31
 8016004:	0801a728 	.word	0x0801a728
 8016008:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801600a:	9300      	str	r3, [sp, #0]
 801600c:	2305      	movs	r3, #5
 801600e:	9301      	str	r3, [sp, #4]
 8016010:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016012:	f7ff fde1 	bl	8015bd8 <uxr_framing_read_transport>
 8016016:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801601a:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801601e:	429a      	cmp	r2, r3
 8016020:	f43f ae9d 	beq.w	8015d5e <uxr_read_framed_msg+0x82>
 8016024:	e668      	b.n	8015cf8 <uxr_read_framed_msg+0x1c>
 8016026:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016028:	9300      	str	r3, [sp, #0]
 801602a:	2303      	movs	r3, #3
 801602c:	e7c7      	b.n	8015fbe <uxr_read_framed_msg+0x2e2>
 801602e:	2305      	movs	r3, #5
 8016030:	7023      	strb	r3, [r4, #0]
 8016032:	e664      	b.n	8015cfe <uxr_read_framed_msg+0x22>
 8016034:	ee17 8a90 	vmov	r8, s15
 8016038:	f43f aef2 	beq.w	8015e20 <uxr_read_framed_msg+0x144>
 801603c:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8016040:	d08e      	beq.n	8015f60 <uxr_read_framed_msg+0x284>
 8016042:	ebae 0303 	sub.w	r3, lr, r3
 8016046:	3302      	adds	r3, #2
 8016048:	9301      	str	r3, [sp, #4]
 801604a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801604c:	9300      	str	r3, [sp, #0]
 801604e:	e7b7      	b.n	8015fc0 <uxr_read_framed_msg+0x2e4>
 8016050:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8016052:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8016056:	7013      	strb	r3, [r2, #0]
 8016058:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 801605a:	b003      	add	sp, #12
 801605c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016060:	f103 0c01 	add.w	ip, r3, #1
 8016064:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8016068:	fba5 0202 	umull	r0, r2, r5, r2
 801606c:	0892      	lsrs	r2, r2, #2
 801606e:	202a      	movs	r0, #42	@ 0x2a
 8016070:	fb00 c212 	mls	r2, r0, r2, ip
 8016074:	fa5f fc82 	uxtb.w	ip, r2
 8016078:	4561      	cmp	r1, ip
 801607a:	d09d      	beq.n	8015fb8 <uxr_read_framed_msg+0x2dc>
 801607c:	3302      	adds	r3, #2
 801607e:	4422      	add	r2, r4
 8016080:	0859      	lsrs	r1, r3, #1
 8016082:	7892      	ldrb	r2, [r2, #2]
 8016084:	fba5 c101 	umull	ip, r1, r5, r1
 8016088:	0889      	lsrs	r1, r1, #2
 801608a:	fb00 3311 	mls	r3, r0, r1, r3
 801608e:	2a7e      	cmp	r2, #126	@ 0x7e
 8016090:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8016094:	f000 80aa 	beq.w	80161ec <uxr_read_framed_msg+0x510>
 8016098:	f082 0220 	eor.w	r2, r2, #32
 801609c:	e654      	b.n	8015d48 <uxr_read_framed_msg+0x6c>
 801609e:	1c58      	adds	r0, r3, #1
 80160a0:	0842      	lsrs	r2, r0, #1
 80160a2:	fba5 c202 	umull	ip, r2, r5, r2
 80160a6:	0892      	lsrs	r2, r2, #2
 80160a8:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80160ac:	fb0c 0212 	mls	r2, ip, r2, r0
 80160b0:	b2d0      	uxtb	r0, r2
 80160b2:	4281      	cmp	r1, r0
 80160b4:	d08f      	beq.n	8015fd6 <uxr_read_framed_msg+0x2fa>
 80160b6:	4422      	add	r2, r4
 80160b8:	3302      	adds	r3, #2
 80160ba:	7890      	ldrb	r0, [r2, #2]
 80160bc:	085a      	lsrs	r2, r3, #1
 80160be:	fba5 1202 	umull	r1, r2, r5, r2
 80160c2:	0892      	lsrs	r2, r2, #2
 80160c4:	fb0c 3312 	mls	r3, ip, r2, r3
 80160c8:	287e      	cmp	r0, #126	@ 0x7e
 80160ca:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80160ce:	d07d      	beq.n	80161cc <uxr_read_framed_msg+0x4f0>
 80160d0:	f080 0020 	eor.w	r0, r0, #32
 80160d4:	e660      	b.n	8015d98 <uxr_read_framed_msg+0xbc>
 80160d6:	1c59      	adds	r1, r3, #1
 80160d8:	084a      	lsrs	r2, r1, #1
 80160da:	fba5 c202 	umull	ip, r2, r5, r2
 80160de:	0892      	lsrs	r2, r2, #2
 80160e0:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80160e4:	fb0c 1212 	mls	r2, ip, r2, r1
 80160e8:	b2d1      	uxtb	r1, r2
 80160ea:	4288      	cmp	r0, r1
 80160ec:	f43f af64 	beq.w	8015fb8 <uxr_read_framed_msg+0x2dc>
 80160f0:	4422      	add	r2, r4
 80160f2:	3302      	adds	r3, #2
 80160f4:	7891      	ldrb	r1, [r2, #2]
 80160f6:	085a      	lsrs	r2, r3, #1
 80160f8:	fba5 0202 	umull	r0, r2, r5, r2
 80160fc:	0892      	lsrs	r2, r2, #2
 80160fe:	fb0c 3312 	mls	r3, ip, r2, r3
 8016102:	297e      	cmp	r1, #126	@ 0x7e
 8016104:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8016108:	d070      	beq.n	80161ec <uxr_read_framed_msg+0x510>
 801610a:	f081 0120 	eor.w	r1, r1, #32
 801610e:	e6a3      	b.n	8015e58 <uxr_read_framed_msg+0x17c>
 8016110:	f103 0c01 	add.w	ip, r3, #1
 8016114:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8016118:	fba5 0202 	umull	r0, r2, r5, r2
 801611c:	0892      	lsrs	r2, r2, #2
 801611e:	202a      	movs	r0, #42	@ 0x2a
 8016120:	fb00 c212 	mls	r2, r0, r2, ip
 8016124:	fa5f fc82 	uxtb.w	ip, r2
 8016128:	4561      	cmp	r1, ip
 801612a:	f43f af58 	beq.w	8015fde <uxr_read_framed_msg+0x302>
 801612e:	4422      	add	r2, r4
 8016130:	3302      	adds	r3, #2
 8016132:	7891      	ldrb	r1, [r2, #2]
 8016134:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8016138:	085a      	lsrs	r2, r3, #1
 801613a:	fba5 c202 	umull	ip, r2, r5, r2
 801613e:	0892      	lsrs	r2, r2, #2
 8016140:	fb00 3312 	mls	r3, r0, r2, r3
 8016144:	297e      	cmp	r1, #126	@ 0x7e
 8016146:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801614a:	f43f af48 	beq.w	8015fde <uxr_read_framed_msg+0x302>
 801614e:	f081 0120 	eor.w	r1, r1, #32
 8016152:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8016156:	e6e8      	b.n	8015f2a <uxr_read_framed_msg+0x24e>
 8016158:	1c58      	adds	r0, r3, #1
 801615a:	0842      	lsrs	r2, r0, #1
 801615c:	fba5 c202 	umull	ip, r2, r5, r2
 8016160:	0892      	lsrs	r2, r2, #2
 8016162:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8016166:	fb0c 0212 	mls	r2, ip, r2, r0
 801616a:	b2d0      	uxtb	r0, r2
 801616c:	4281      	cmp	r1, r0
 801616e:	f43f af32 	beq.w	8015fd6 <uxr_read_framed_msg+0x2fa>
 8016172:	4422      	add	r2, r4
 8016174:	3302      	adds	r3, #2
 8016176:	7890      	ldrb	r0, [r2, #2]
 8016178:	085a      	lsrs	r2, r3, #1
 801617a:	fba5 1202 	umull	r1, r2, r5, r2
 801617e:	0892      	lsrs	r2, r2, #2
 8016180:	fb0c 3312 	mls	r3, ip, r2, r3
 8016184:	287e      	cmp	r0, #126	@ 0x7e
 8016186:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801618a:	d01f      	beq.n	80161cc <uxr_read_framed_msg+0x4f0>
 801618c:	f080 0020 	eor.w	r0, r0, #32
 8016190:	e68b      	b.n	8015eaa <uxr_read_framed_msg+0x1ce>
 8016192:	1c51      	adds	r1, r2, #1
 8016194:	084b      	lsrs	r3, r1, #1
 8016196:	fba5 c303 	umull	ip, r3, r5, r3
 801619a:	089b      	lsrs	r3, r3, #2
 801619c:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80161a0:	fb0c 1313 	mls	r3, ip, r3, r1
 80161a4:	b2d9      	uxtb	r1, r3
 80161a6:	4288      	cmp	r0, r1
 80161a8:	f43f af3d 	beq.w	8016026 <uxr_read_framed_msg+0x34a>
 80161ac:	3202      	adds	r2, #2
 80161ae:	4423      	add	r3, r4
 80161b0:	0850      	lsrs	r0, r2, #1
 80161b2:	789b      	ldrb	r3, [r3, #2]
 80161b4:	fba5 1000 	umull	r1, r0, r5, r0
 80161b8:	0880      	lsrs	r0, r0, #2
 80161ba:	fb0c 2210 	mls	r2, ip, r0, r2
 80161be:	2b7e      	cmp	r3, #126	@ 0x7e
 80161c0:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80161c4:	d016      	beq.n	80161f4 <uxr_read_framed_msg+0x518>
 80161c6:	f083 0120 	eor.w	r1, r3, #32
 80161ca:	e68b      	b.n	8015ee4 <uxr_read_framed_msg+0x208>
 80161cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80161ce:	9300      	str	r3, [sp, #0]
 80161d0:	2302      	movs	r3, #2
 80161d2:	9301      	str	r3, [sp, #4]
 80161d4:	464a      	mov	r2, r9
 80161d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80161d8:	4641      	mov	r1, r8
 80161da:	4620      	mov	r0, r4
 80161dc:	f7ff fcfc 	bl	8015bd8 <uxr_framing_read_transport>
 80161e0:	2800      	cmp	r0, #0
 80161e2:	f47f aef6 	bne.w	8015fd2 <uxr_read_framed_msg+0x2f6>
 80161e6:	2301      	movs	r3, #1
 80161e8:	7023      	strb	r3, [r4, #0]
 80161ea:	e588      	b.n	8015cfe <uxr_read_framed_msg+0x22>
 80161ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80161ee:	9300      	str	r3, [sp, #0]
 80161f0:	2301      	movs	r3, #1
 80161f2:	e7ee      	b.n	80161d2 <uxr_read_framed_msg+0x4f6>
 80161f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80161f6:	9300      	str	r3, [sp, #0]
 80161f8:	2303      	movs	r3, #3
 80161fa:	e7ea      	b.n	80161d2 <uxr_read_framed_msg+0x4f6>
 80161fc:	ee17 8a90 	vmov	r8, s15
 8016200:	e6ae      	b.n	8015f60 <uxr_read_framed_msg+0x284>
 8016202:	bf00      	nop

08016204 <rcl_get_default_domain_id>:
 8016204:	b530      	push	{r4, r5, lr}
 8016206:	b083      	sub	sp, #12
 8016208:	2300      	movs	r3, #0
 801620a:	9300      	str	r3, [sp, #0]
 801620c:	b1d0      	cbz	r0, 8016244 <rcl_get_default_domain_id+0x40>
 801620e:	4604      	mov	r4, r0
 8016210:	4669      	mov	r1, sp
 8016212:	4815      	ldr	r0, [pc, #84]	@ (8016268 <rcl_get_default_domain_id+0x64>)
 8016214:	f7f5 faca 	bl	800b7ac <rcutils_get_env>
 8016218:	4602      	mov	r2, r0
 801621a:	b110      	cbz	r0, 8016222 <rcl_get_default_domain_id+0x1e>
 801621c:	2001      	movs	r0, #1
 801621e:	b003      	add	sp, #12
 8016220:	bd30      	pop	{r4, r5, pc}
 8016222:	9b00      	ldr	r3, [sp, #0]
 8016224:	b18b      	cbz	r3, 801624a <rcl_get_default_domain_id+0x46>
 8016226:	7818      	ldrb	r0, [r3, #0]
 8016228:	2800      	cmp	r0, #0
 801622a:	d0f8      	beq.n	801621e <rcl_get_default_domain_id+0x1a>
 801622c:	a901      	add	r1, sp, #4
 801622e:	4618      	mov	r0, r3
 8016230:	9201      	str	r2, [sp, #4]
 8016232:	f000 fddb 	bl	8016dec <strtoul>
 8016236:	4605      	mov	r5, r0
 8016238:	b150      	cbz	r0, 8016250 <rcl_get_default_domain_id+0x4c>
 801623a:	1c43      	adds	r3, r0, #1
 801623c:	d00d      	beq.n	801625a <rcl_get_default_domain_id+0x56>
 801623e:	6025      	str	r5, [r4, #0]
 8016240:	2000      	movs	r0, #0
 8016242:	e7ec      	b.n	801621e <rcl_get_default_domain_id+0x1a>
 8016244:	200b      	movs	r0, #11
 8016246:	b003      	add	sp, #12
 8016248:	bd30      	pop	{r4, r5, pc}
 801624a:	4618      	mov	r0, r3
 801624c:	b003      	add	sp, #12
 801624e:	bd30      	pop	{r4, r5, pc}
 8016250:	9b01      	ldr	r3, [sp, #4]
 8016252:	781b      	ldrb	r3, [r3, #0]
 8016254:	2b00      	cmp	r3, #0
 8016256:	d0f2      	beq.n	801623e <rcl_get_default_domain_id+0x3a>
 8016258:	e7e0      	b.n	801621c <rcl_get_default_domain_id+0x18>
 801625a:	f001 fdd3 	bl	8017e04 <__errno>
 801625e:	6803      	ldr	r3, [r0, #0]
 8016260:	2b22      	cmp	r3, #34	@ 0x22
 8016262:	d1ec      	bne.n	801623e <rcl_get_default_domain_id+0x3a>
 8016264:	e7da      	b.n	801621c <rcl_get_default_domain_id+0x18>
 8016266:	bf00      	nop
 8016268:	0801a928 	.word	0x0801a928

0801626c <rcl_expand_topic_name>:
 801626c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016270:	b08b      	sub	sp, #44	@ 0x2c
 8016272:	9306      	str	r3, [sp, #24]
 8016274:	2800      	cmp	r0, #0
 8016276:	f000 80ad 	beq.w	80163d4 <rcl_expand_topic_name+0x168>
 801627a:	460e      	mov	r6, r1
 801627c:	2900      	cmp	r1, #0
 801627e:	f000 80a9 	beq.w	80163d4 <rcl_expand_topic_name+0x168>
 8016282:	4617      	mov	r7, r2
 8016284:	2a00      	cmp	r2, #0
 8016286:	f000 80a5 	beq.w	80163d4 <rcl_expand_topic_name+0x168>
 801628a:	2b00      	cmp	r3, #0
 801628c:	f000 80a2 	beq.w	80163d4 <rcl_expand_topic_name+0x168>
 8016290:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016292:	2b00      	cmp	r3, #0
 8016294:	f000 809e 	beq.w	80163d4 <rcl_expand_topic_name+0x168>
 8016298:	2200      	movs	r2, #0
 801629a:	a909      	add	r1, sp, #36	@ 0x24
 801629c:	4680      	mov	r8, r0
 801629e:	f000 f949 	bl	8016534 <rcl_validate_topic_name>
 80162a2:	4604      	mov	r4, r0
 80162a4:	2800      	cmp	r0, #0
 80162a6:	f040 8096 	bne.w	80163d6 <rcl_expand_topic_name+0x16a>
 80162aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80162ac:	2b00      	cmp	r3, #0
 80162ae:	f040 809a 	bne.w	80163e6 <rcl_expand_topic_name+0x17a>
 80162b2:	4602      	mov	r2, r0
 80162b4:	a909      	add	r1, sp, #36	@ 0x24
 80162b6:	4630      	mov	r0, r6
 80162b8:	f7f5 fd02 	bl	800bcc0 <rmw_validate_node_name>
 80162bc:	2800      	cmp	r0, #0
 80162be:	f040 808e 	bne.w	80163de <rcl_expand_topic_name+0x172>
 80162c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80162c4:	2a00      	cmp	r2, #0
 80162c6:	f040 8093 	bne.w	80163f0 <rcl_expand_topic_name+0x184>
 80162ca:	a909      	add	r1, sp, #36	@ 0x24
 80162cc:	4638      	mov	r0, r7
 80162ce:	f7f5 fcd9 	bl	800bc84 <rmw_validate_namespace>
 80162d2:	2800      	cmp	r0, #0
 80162d4:	f040 8083 	bne.w	80163de <rcl_expand_topic_name+0x172>
 80162d8:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80162da:	2c00      	cmp	r4, #0
 80162dc:	f040 80ed 	bne.w	80164ba <rcl_expand_topic_name+0x24e>
 80162e0:	217b      	movs	r1, #123	@ 0x7b
 80162e2:	4640      	mov	r0, r8
 80162e4:	f001 fca8 	bl	8017c38 <strchr>
 80162e8:	f898 3000 	ldrb.w	r3, [r8]
 80162ec:	2b2f      	cmp	r3, #47	@ 0x2f
 80162ee:	4605      	mov	r5, r0
 80162f0:	f000 809e 	beq.w	8016430 <rcl_expand_topic_name+0x1c4>
 80162f4:	2b7e      	cmp	r3, #126	@ 0x7e
 80162f6:	f040 80a2 	bne.w	801643e <rcl_expand_topic_name+0x1d2>
 80162fa:	4638      	mov	r0, r7
 80162fc:	f7e9 ffe8 	bl	80002d0 <strlen>
 8016300:	4a82      	ldr	r2, [pc, #520]	@ (801650c <rcl_expand_topic_name+0x2a0>)
 8016302:	4b83      	ldr	r3, [pc, #524]	@ (8016510 <rcl_expand_topic_name+0x2a4>)
 8016304:	2801      	cmp	r0, #1
 8016306:	bf18      	it	ne
 8016308:	4613      	movne	r3, r2
 801630a:	9302      	str	r3, [sp, #8]
 801630c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801630e:	9300      	str	r3, [sp, #0]
 8016310:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8016314:	f108 0301 	add.w	r3, r8, #1
 8016318:	9305      	str	r3, [sp, #20]
 801631a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801631e:	9301      	str	r3, [sp, #4]
 8016320:	ab14      	add	r3, sp, #80	@ 0x50
 8016322:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016324:	f7f5 fa8c 	bl	800b840 <rcutils_format_string_limit>
 8016328:	4682      	mov	sl, r0
 801632a:	2800      	cmp	r0, #0
 801632c:	f000 80c7 	beq.w	80164be <rcl_expand_topic_name+0x252>
 8016330:	2d00      	cmp	r5, #0
 8016332:	f000 80a2 	beq.w	801647a <rcl_expand_topic_name+0x20e>
 8016336:	217b      	movs	r1, #123	@ 0x7b
 8016338:	f001 fc7e 	bl	8017c38 <strchr>
 801633c:	46d1      	mov	r9, sl
 801633e:	4605      	mov	r5, r0
 8016340:	9407      	str	r4, [sp, #28]
 8016342:	46d3      	mov	fp, sl
 8016344:	464c      	mov	r4, r9
 8016346:	2d00      	cmp	r5, #0
 8016348:	f000 80be 	beq.w	80164c8 <rcl_expand_topic_name+0x25c>
 801634c:	217d      	movs	r1, #125	@ 0x7d
 801634e:	4620      	mov	r0, r4
 8016350:	f001 fc72 	bl	8017c38 <strchr>
 8016354:	eba0 0905 	sub.w	r9, r0, r5
 8016358:	f109 0a01 	add.w	sl, r9, #1
 801635c:	486d      	ldr	r0, [pc, #436]	@ (8016514 <rcl_expand_topic_name+0x2a8>)
 801635e:	4652      	mov	r2, sl
 8016360:	4629      	mov	r1, r5
 8016362:	f001 fc76 	bl	8017c52 <strncmp>
 8016366:	2800      	cmp	r0, #0
 8016368:	d067      	beq.n	801643a <rcl_expand_topic_name+0x1ce>
 801636a:	486b      	ldr	r0, [pc, #428]	@ (8016518 <rcl_expand_topic_name+0x2ac>)
 801636c:	4652      	mov	r2, sl
 801636e:	4629      	mov	r1, r5
 8016370:	f001 fc6f 	bl	8017c52 <strncmp>
 8016374:	b130      	cbz	r0, 8016384 <rcl_expand_topic_name+0x118>
 8016376:	4869      	ldr	r0, [pc, #420]	@ (801651c <rcl_expand_topic_name+0x2b0>)
 8016378:	4652      	mov	r2, sl
 801637a:	4629      	mov	r1, r5
 801637c:	f001 fc69 	bl	8017c52 <strncmp>
 8016380:	2800      	cmp	r0, #0
 8016382:	d137      	bne.n	80163f4 <rcl_expand_topic_name+0x188>
 8016384:	46b9      	mov	r9, r7
 8016386:	ab16      	add	r3, sp, #88	@ 0x58
 8016388:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801638c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016390:	ab14      	add	r3, sp, #80	@ 0x50
 8016392:	4628      	mov	r0, r5
 8016394:	cb0c      	ldmia	r3, {r2, r3}
 8016396:	4651      	mov	r1, sl
 8016398:	f7f5 fb8e 	bl	800bab8 <rcutils_strndup>
 801639c:	4605      	mov	r5, r0
 801639e:	2800      	cmp	r0, #0
 80163a0:	f000 809c 	beq.w	80164dc <rcl_expand_topic_name+0x270>
 80163a4:	464a      	mov	r2, r9
 80163a6:	4620      	mov	r0, r4
 80163a8:	ab14      	add	r3, sp, #80	@ 0x50
 80163aa:	4629      	mov	r1, r5
 80163ac:	f7f5 fa82 	bl	800b8b4 <rcutils_repl_str>
 80163b0:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80163b2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80163b4:	4604      	mov	r4, r0
 80163b6:	4628      	mov	r0, r5
 80163b8:	4798      	blx	r3
 80163ba:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80163bc:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80163be:	4658      	mov	r0, fp
 80163c0:	4798      	blx	r3
 80163c2:	2c00      	cmp	r4, #0
 80163c4:	d07b      	beq.n	80164be <rcl_expand_topic_name+0x252>
 80163c6:	217b      	movs	r1, #123	@ 0x7b
 80163c8:	4620      	mov	r0, r4
 80163ca:	f001 fc35 	bl	8017c38 <strchr>
 80163ce:	46a3      	mov	fp, r4
 80163d0:	4605      	mov	r5, r0
 80163d2:	e7b8      	b.n	8016346 <rcl_expand_topic_name+0xda>
 80163d4:	240b      	movs	r4, #11
 80163d6:	4620      	mov	r0, r4
 80163d8:	b00b      	add	sp, #44	@ 0x2c
 80163da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80163de:	f7f9 fee5 	bl	80101ac <rcl_convert_rmw_ret_to_rcl_ret>
 80163e2:	4604      	mov	r4, r0
 80163e4:	e7f7      	b.n	80163d6 <rcl_expand_topic_name+0x16a>
 80163e6:	2467      	movs	r4, #103	@ 0x67
 80163e8:	4620      	mov	r0, r4
 80163ea:	b00b      	add	sp, #44	@ 0x2c
 80163ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80163f0:	24c9      	movs	r4, #201	@ 0xc9
 80163f2:	e7f0      	b.n	80163d6 <rcl_expand_topic_name+0x16a>
 80163f4:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 80163f8:	9806      	ldr	r0, [sp, #24]
 80163fa:	1c69      	adds	r1, r5, #1
 80163fc:	f7fc fb76 	bl	8012aec <rcutils_string_map_getn>
 8016400:	4681      	mov	r9, r0
 8016402:	2800      	cmp	r0, #0
 8016404:	d1bf      	bne.n	8016386 <rcl_expand_topic_name+0x11a>
 8016406:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016408:	aa16      	add	r2, sp, #88	@ 0x58
 801640a:	6018      	str	r0, [r3, #0]
 801640c:	ca07      	ldmia	r2, {r0, r1, r2}
 801640e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016412:	ab14      	add	r3, sp, #80	@ 0x50
 8016414:	cb0c      	ldmia	r3, {r2, r3}
 8016416:	4651      	mov	r1, sl
 8016418:	4628      	mov	r0, r5
 801641a:	f7f5 fb4d 	bl	800bab8 <rcutils_strndup>
 801641e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016420:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016422:	4798      	blx	r3
 8016424:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016426:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016428:	4658      	mov	r0, fp
 801642a:	2469      	movs	r4, #105	@ 0x69
 801642c:	4798      	blx	r3
 801642e:	e7d2      	b.n	80163d6 <rcl_expand_topic_name+0x16a>
 8016430:	2800      	cmp	r0, #0
 8016432:	d05b      	beq.n	80164ec <rcl_expand_topic_name+0x280>
 8016434:	46c1      	mov	r9, r8
 8016436:	46a2      	mov	sl, r4
 8016438:	e782      	b.n	8016340 <rcl_expand_topic_name+0xd4>
 801643a:	46b1      	mov	r9, r6
 801643c:	e7a3      	b.n	8016386 <rcl_expand_topic_name+0x11a>
 801643e:	2800      	cmp	r0, #0
 8016440:	d1f8      	bne.n	8016434 <rcl_expand_topic_name+0x1c8>
 8016442:	4638      	mov	r0, r7
 8016444:	f7e9 ff44 	bl	80002d0 <strlen>
 8016448:	4a35      	ldr	r2, [pc, #212]	@ (8016520 <rcl_expand_topic_name+0x2b4>)
 801644a:	4b36      	ldr	r3, [pc, #216]	@ (8016524 <rcl_expand_topic_name+0x2b8>)
 801644c:	f8cd 8010 	str.w	r8, [sp, #16]
 8016450:	2801      	cmp	r0, #1
 8016452:	bf18      	it	ne
 8016454:	4613      	movne	r3, r2
 8016456:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801645a:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801645e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8016460:	9703      	str	r7, [sp, #12]
 8016462:	9200      	str	r2, [sp, #0]
 8016464:	ab14      	add	r3, sp, #80	@ 0x50
 8016466:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016468:	f7f5 f9ea 	bl	800b840 <rcutils_format_string_limit>
 801646c:	4682      	mov	sl, r0
 801646e:	4653      	mov	r3, sl
 8016470:	b32b      	cbz	r3, 80164be <rcl_expand_topic_name+0x252>
 8016472:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016474:	f8c3 a000 	str.w	sl, [r3]
 8016478:	e7ad      	b.n	80163d6 <rcl_expand_topic_name+0x16a>
 801647a:	f89a 3000 	ldrb.w	r3, [sl]
 801647e:	2b2f      	cmp	r3, #47	@ 0x2f
 8016480:	d0f7      	beq.n	8016472 <rcl_expand_topic_name+0x206>
 8016482:	4638      	mov	r0, r7
 8016484:	f7e9 ff24 	bl	80002d0 <strlen>
 8016488:	4a25      	ldr	r2, [pc, #148]	@ (8016520 <rcl_expand_topic_name+0x2b4>)
 801648a:	4b26      	ldr	r3, [pc, #152]	@ (8016524 <rcl_expand_topic_name+0x2b8>)
 801648c:	f8cd a010 	str.w	sl, [sp, #16]
 8016490:	2801      	cmp	r0, #1
 8016492:	bf18      	it	ne
 8016494:	4613      	movne	r3, r2
 8016496:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801649a:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801649e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80164a0:	9703      	str	r7, [sp, #12]
 80164a2:	9200      	str	r2, [sp, #0]
 80164a4:	ab14      	add	r3, sp, #80	@ 0x50
 80164a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80164a8:	f7f5 f9ca 	bl	800b840 <rcutils_format_string_limit>
 80164ac:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80164ae:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80164b0:	4605      	mov	r5, r0
 80164b2:	4650      	mov	r0, sl
 80164b4:	4798      	blx	r3
 80164b6:	46aa      	mov	sl, r5
 80164b8:	e7d9      	b.n	801646e <rcl_expand_topic_name+0x202>
 80164ba:	24ca      	movs	r4, #202	@ 0xca
 80164bc:	e78b      	b.n	80163d6 <rcl_expand_topic_name+0x16a>
 80164be:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80164c0:	2300      	movs	r3, #0
 80164c2:	6013      	str	r3, [r2, #0]
 80164c4:	240a      	movs	r4, #10
 80164c6:	e786      	b.n	80163d6 <rcl_expand_topic_name+0x16a>
 80164c8:	465b      	mov	r3, fp
 80164ca:	9c07      	ldr	r4, [sp, #28]
 80164cc:	46da      	mov	sl, fp
 80164ce:	2b00      	cmp	r3, #0
 80164d0:	d1d3      	bne.n	801647a <rcl_expand_topic_name+0x20e>
 80164d2:	f898 3000 	ldrb.w	r3, [r8]
 80164d6:	2b2f      	cmp	r3, #47	@ 0x2f
 80164d8:	d0cb      	beq.n	8016472 <rcl_expand_topic_name+0x206>
 80164da:	e7b2      	b.n	8016442 <rcl_expand_topic_name+0x1d6>
 80164dc:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 80164e0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80164e2:	6015      	str	r5, [r2, #0]
 80164e4:	4658      	mov	r0, fp
 80164e6:	4798      	blx	r3
 80164e8:	240a      	movs	r4, #10
 80164ea:	e774      	b.n	80163d6 <rcl_expand_topic_name+0x16a>
 80164ec:	ab17      	add	r3, sp, #92	@ 0x5c
 80164ee:	e893 0003 	ldmia.w	r3, {r0, r1}
 80164f2:	e88d 0003 	stmia.w	sp, {r0, r1}
 80164f6:	ab14      	add	r3, sp, #80	@ 0x50
 80164f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80164fa:	4640      	mov	r0, r8
 80164fc:	f7f5 faba 	bl	800ba74 <rcutils_strdup>
 8016500:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016502:	2800      	cmp	r0, #0
 8016504:	6018      	str	r0, [r3, #0]
 8016506:	bf08      	it	eq
 8016508:	240a      	moveq	r4, #10
 801650a:	e764      	b.n	80163d6 <rcl_expand_topic_name+0x16a>
 801650c:	0801a938 	.word	0x0801a938
 8016510:	0801a3a8 	.word	0x0801a3a8
 8016514:	0801a940 	.word	0x0801a940
 8016518:	0801a948 	.word	0x0801a948
 801651c:	0801a950 	.word	0x0801a950
 8016520:	08019e2c 	.word	0x08019e2c
 8016524:	08019e24 	.word	0x08019e24

08016528 <rcl_get_default_topic_name_substitutions>:
 8016528:	2800      	cmp	r0, #0
 801652a:	bf0c      	ite	eq
 801652c:	200b      	moveq	r0, #11
 801652e:	2000      	movne	r0, #0
 8016530:	4770      	bx	lr
 8016532:	bf00      	nop

08016534 <rcl_validate_topic_name>:
 8016534:	2800      	cmp	r0, #0
 8016536:	d07a      	beq.n	801662e <rcl_validate_topic_name+0xfa>
 8016538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801653c:	460e      	mov	r6, r1
 801653e:	2900      	cmp	r1, #0
 8016540:	d07c      	beq.n	801663c <rcl_validate_topic_name+0x108>
 8016542:	4617      	mov	r7, r2
 8016544:	4605      	mov	r5, r0
 8016546:	f7e9 fec3 	bl	80002d0 <strlen>
 801654a:	b1b0      	cbz	r0, 801657a <rcl_validate_topic_name+0x46>
 801654c:	f895 9000 	ldrb.w	r9, [r5]
 8016550:	f8df c180 	ldr.w	ip, [pc, #384]	@ 80166d4 <rcl_validate_topic_name+0x1a0>
 8016554:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8016558:	f013 0304 	ands.w	r3, r3, #4
 801655c:	d169      	bne.n	8016632 <rcl_validate_topic_name+0xfe>
 801655e:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 8016562:	f815 2008 	ldrb.w	r2, [r5, r8]
 8016566:	2a2f      	cmp	r2, #47	@ 0x2f
 8016568:	d10e      	bne.n	8016588 <rcl_validate_topic_name+0x54>
 801656a:	2202      	movs	r2, #2
 801656c:	6032      	str	r2, [r6, #0]
 801656e:	b36f      	cbz	r7, 80165cc <rcl_validate_topic_name+0x98>
 8016570:	f8c7 8000 	str.w	r8, [r7]
 8016574:	4618      	mov	r0, r3
 8016576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801657a:	2301      	movs	r3, #1
 801657c:	6033      	str	r3, [r6, #0]
 801657e:	b32f      	cbz	r7, 80165cc <rcl_validate_topic_name+0x98>
 8016580:	2000      	movs	r0, #0
 8016582:	6038      	str	r0, [r7, #0]
 8016584:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016588:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 801658c:	461c      	mov	r4, r3
 801658e:	4619      	mov	r1, r3
 8016590:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8016594:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8016598:	f1be 0f09 	cmp.w	lr, #9
 801659c:	d919      	bls.n	80165d2 <rcl_validate_topic_name+0x9e>
 801659e:	f022 0e20 	bic.w	lr, r2, #32
 80165a2:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 80165a6:	f1be 0f19 	cmp.w	lr, #25
 80165aa:	d912      	bls.n	80165d2 <rcl_validate_topic_name+0x9e>
 80165ac:	2a5f      	cmp	r2, #95	@ 0x5f
 80165ae:	d019      	beq.n	80165e4 <rcl_validate_topic_name+0xb0>
 80165b0:	2a2f      	cmp	r2, #47	@ 0x2f
 80165b2:	d051      	beq.n	8016658 <rcl_validate_topic_name+0x124>
 80165b4:	2a7e      	cmp	r2, #126	@ 0x7e
 80165b6:	d048      	beq.n	801664a <rcl_validate_topic_name+0x116>
 80165b8:	2a7b      	cmp	r2, #123	@ 0x7b
 80165ba:	d054      	beq.n	8016666 <rcl_validate_topic_name+0x132>
 80165bc:	2a7d      	cmp	r2, #125	@ 0x7d
 80165be:	d161      	bne.n	8016684 <rcl_validate_topic_name+0x150>
 80165c0:	2c00      	cmp	r4, #0
 80165c2:	d155      	bne.n	8016670 <rcl_validate_topic_name+0x13c>
 80165c4:	2305      	movs	r3, #5
 80165c6:	6033      	str	r3, [r6, #0]
 80165c8:	b107      	cbz	r7, 80165cc <rcl_validate_topic_name+0x98>
 80165ca:	6039      	str	r1, [r7, #0]
 80165cc:	2000      	movs	r0, #0
 80165ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80165d2:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80165d6:	0752      	lsls	r2, r2, #29
 80165d8:	d504      	bpl.n	80165e4 <rcl_validate_topic_name+0xb0>
 80165da:	b11c      	cbz	r4, 80165e4 <rcl_validate_topic_name+0xb0>
 80165dc:	b111      	cbz	r1, 80165e4 <rcl_validate_topic_name+0xb0>
 80165de:	1e4a      	subs	r2, r1, #1
 80165e0:	429a      	cmp	r2, r3
 80165e2:	d02d      	beq.n	8016640 <rcl_validate_topic_name+0x10c>
 80165e4:	3101      	adds	r1, #1
 80165e6:	4288      	cmp	r0, r1
 80165e8:	d1d2      	bne.n	8016590 <rcl_validate_topic_name+0x5c>
 80165ea:	2c00      	cmp	r4, #0
 80165ec:	d145      	bne.n	801667a <rcl_validate_topic_name+0x146>
 80165ee:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 80165f2:	d04f      	beq.n	8016694 <rcl_validate_topic_name+0x160>
 80165f4:	4620      	mov	r0, r4
 80165f6:	2301      	movs	r3, #1
 80165f8:	e006      	b.n	8016608 <rcl_validate_topic_name+0xd4>
 80165fa:	428b      	cmp	r3, r1
 80165fc:	f105 0501 	add.w	r5, r5, #1
 8016600:	f103 0201 	add.w	r2, r3, #1
 8016604:	d236      	bcs.n	8016674 <rcl_validate_topic_name+0x140>
 8016606:	4613      	mov	r3, r2
 8016608:	4580      	cmp	r8, r0
 801660a:	f100 0001 	add.w	r0, r0, #1
 801660e:	d0f4      	beq.n	80165fa <rcl_validate_topic_name+0xc6>
 8016610:	782a      	ldrb	r2, [r5, #0]
 8016612:	2a2f      	cmp	r2, #47	@ 0x2f
 8016614:	d1f1      	bne.n	80165fa <rcl_validate_topic_name+0xc6>
 8016616:	786a      	ldrb	r2, [r5, #1]
 8016618:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801661c:	0754      	lsls	r4, r2, #29
 801661e:	d5ec      	bpl.n	80165fa <rcl_validate_topic_name+0xc6>
 8016620:	2204      	movs	r2, #4
 8016622:	6032      	str	r2, [r6, #0]
 8016624:	2f00      	cmp	r7, #0
 8016626:	d0d1      	beq.n	80165cc <rcl_validate_topic_name+0x98>
 8016628:	603b      	str	r3, [r7, #0]
 801662a:	2000      	movs	r0, #0
 801662c:	e7aa      	b.n	8016584 <rcl_validate_topic_name+0x50>
 801662e:	200b      	movs	r0, #11
 8016630:	4770      	bx	lr
 8016632:	2304      	movs	r3, #4
 8016634:	6033      	str	r3, [r6, #0]
 8016636:	2f00      	cmp	r7, #0
 8016638:	d1a2      	bne.n	8016580 <rcl_validate_topic_name+0x4c>
 801663a:	e7c7      	b.n	80165cc <rcl_validate_topic_name+0x98>
 801663c:	200b      	movs	r0, #11
 801663e:	e7a1      	b.n	8016584 <rcl_validate_topic_name+0x50>
 8016640:	2309      	movs	r3, #9
 8016642:	6033      	str	r3, [r6, #0]
 8016644:	2f00      	cmp	r7, #0
 8016646:	d1c0      	bne.n	80165ca <rcl_validate_topic_name+0x96>
 8016648:	e7c0      	b.n	80165cc <rcl_validate_topic_name+0x98>
 801664a:	2900      	cmp	r1, #0
 801664c:	d0ca      	beq.n	80165e4 <rcl_validate_topic_name+0xb0>
 801664e:	2306      	movs	r3, #6
 8016650:	6033      	str	r3, [r6, #0]
 8016652:	2f00      	cmp	r7, #0
 8016654:	d1b9      	bne.n	80165ca <rcl_validate_topic_name+0x96>
 8016656:	e7b9      	b.n	80165cc <rcl_validate_topic_name+0x98>
 8016658:	2c00      	cmp	r4, #0
 801665a:	d0c3      	beq.n	80165e4 <rcl_validate_topic_name+0xb0>
 801665c:	2308      	movs	r3, #8
 801665e:	6033      	str	r3, [r6, #0]
 8016660:	2f00      	cmp	r7, #0
 8016662:	d1b2      	bne.n	80165ca <rcl_validate_topic_name+0x96>
 8016664:	e7b2      	b.n	80165cc <rcl_validate_topic_name+0x98>
 8016666:	2c00      	cmp	r4, #0
 8016668:	d1f8      	bne.n	801665c <rcl_validate_topic_name+0x128>
 801666a:	460b      	mov	r3, r1
 801666c:	2401      	movs	r4, #1
 801666e:	e7b9      	b.n	80165e4 <rcl_validate_topic_name+0xb0>
 8016670:	2400      	movs	r4, #0
 8016672:	e7b7      	b.n	80165e4 <rcl_validate_topic_name+0xb0>
 8016674:	2000      	movs	r0, #0
 8016676:	6030      	str	r0, [r6, #0]
 8016678:	e784      	b.n	8016584 <rcl_validate_topic_name+0x50>
 801667a:	2205      	movs	r2, #5
 801667c:	6032      	str	r2, [r6, #0]
 801667e:	2f00      	cmp	r7, #0
 8016680:	d1d2      	bne.n	8016628 <rcl_validate_topic_name+0xf4>
 8016682:	e7a3      	b.n	80165cc <rcl_validate_topic_name+0x98>
 8016684:	2c00      	cmp	r4, #0
 8016686:	bf14      	ite	ne
 8016688:	2308      	movne	r3, #8
 801668a:	2303      	moveq	r3, #3
 801668c:	6033      	str	r3, [r6, #0]
 801668e:	2f00      	cmp	r7, #0
 8016690:	d19b      	bne.n	80165ca <rcl_validate_topic_name+0x96>
 8016692:	e79b      	b.n	80165cc <rcl_validate_topic_name+0x98>
 8016694:	2301      	movs	r3, #1
 8016696:	e00a      	b.n	80166ae <rcl_validate_topic_name+0x17a>
 8016698:	2c01      	cmp	r4, #1
 801669a:	d013      	beq.n	80166c4 <rcl_validate_topic_name+0x190>
 801669c:	4299      	cmp	r1, r3
 801669e:	f104 0401 	add.w	r4, r4, #1
 80166a2:	f105 0501 	add.w	r5, r5, #1
 80166a6:	f103 0201 	add.w	r2, r3, #1
 80166aa:	d9e3      	bls.n	8016674 <rcl_validate_topic_name+0x140>
 80166ac:	4613      	mov	r3, r2
 80166ae:	45a0      	cmp	r8, r4
 80166b0:	d0f4      	beq.n	801669c <rcl_validate_topic_name+0x168>
 80166b2:	782a      	ldrb	r2, [r5, #0]
 80166b4:	2a2f      	cmp	r2, #47	@ 0x2f
 80166b6:	d1ef      	bne.n	8016698 <rcl_validate_topic_name+0x164>
 80166b8:	786a      	ldrb	r2, [r5, #1]
 80166ba:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80166be:	0752      	lsls	r2, r2, #29
 80166c0:	d5ec      	bpl.n	801669c <rcl_validate_topic_name+0x168>
 80166c2:	e7ad      	b.n	8016620 <rcl_validate_topic_name+0xec>
 80166c4:	2307      	movs	r3, #7
 80166c6:	6033      	str	r3, [r6, #0]
 80166c8:	2f00      	cmp	r7, #0
 80166ca:	f43f af7f 	beq.w	80165cc <rcl_validate_topic_name+0x98>
 80166ce:	603c      	str	r4, [r7, #0]
 80166d0:	2000      	movs	r0, #0
 80166d2:	e757      	b.n	8016584 <rcl_validate_topic_name+0x50>
 80166d4:	0801aabe 	.word	0x0801aabe

080166d8 <on_status>:
 80166d8:	b082      	sub	sp, #8
 80166da:	b002      	add	sp, #8
 80166dc:	4770      	bx	lr
 80166de:	bf00      	nop

080166e0 <on_topic>:
 80166e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80166e4:	4a22      	ldr	r2, [pc, #136]	@ (8016770 <on_topic+0x90>)
 80166e6:	b094      	sub	sp, #80	@ 0x50
 80166e8:	6812      	ldr	r2, [r2, #0]
 80166ea:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 80166ec:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 80166f0:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 80166f4:	b3c2      	cbz	r2, 8016768 <on_topic+0x88>
 80166f6:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 80166fa:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 80166fe:	e001      	b.n	8016704 <on_topic+0x24>
 8016700:	6852      	ldr	r2, [r2, #4]
 8016702:	b38a      	cbz	r2, 8016768 <on_topic+0x88>
 8016704:	6894      	ldr	r4, [r2, #8]
 8016706:	8aa3      	ldrh	r3, [r4, #20]
 8016708:	428b      	cmp	r3, r1
 801670a:	d1f9      	bne.n	8016700 <on_topic+0x20>
 801670c:	7da3      	ldrb	r3, [r4, #22]
 801670e:	4283      	cmp	r3, r0
 8016710:	d1f6      	bne.n	8016700 <on_topic+0x20>
 8016712:	2248      	movs	r2, #72	@ 0x48
 8016714:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8016718:	4668      	mov	r0, sp
 801671a:	f001 fba8 	bl	8017e6e <memcpy>
 801671e:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8016722:	cb0c      	ldmia	r3, {r2, r3}
 8016724:	4620      	mov	r0, r4
 8016726:	f7f6 f9c3 	bl	800cab0 <rmw_uxrce_get_static_input_buffer_for_entity>
 801672a:	4607      	mov	r7, r0
 801672c:	b1e0      	cbz	r0, 8016768 <on_topic+0x88>
 801672e:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8016732:	4632      	mov	r2, r6
 8016734:	4628      	mov	r0, r5
 8016736:	f108 0110 	add.w	r1, r8, #16
 801673a:	f7fd faa5 	bl	8013c88 <ucdr_deserialize_array_uint8_t>
 801673e:	b930      	cbnz	r0, 801674e <on_topic+0x6e>
 8016740:	480c      	ldr	r0, [pc, #48]	@ (8016774 <on_topic+0x94>)
 8016742:	4639      	mov	r1, r7
 8016744:	b014      	add	sp, #80	@ 0x50
 8016746:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801674a:	f7fc bb2b 	b.w	8012da4 <put_memory>
 801674e:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 8016752:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 8016756:	f7fd f97d 	bl	8013a54 <rmw_uros_epoch_nanos>
 801675a:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 801675e:	2305      	movs	r3, #5
 8016760:	e942 0102 	strd	r0, r1, [r2, #-8]
 8016764:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8016768:	b014      	add	sp, #80	@ 0x50
 801676a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801676e:	bf00      	nop
 8016770:	20010b84 	.word	0x20010b84
 8016774:	20010b74 	.word	0x20010b74

08016778 <on_request>:
 8016778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801677c:	4823      	ldr	r0, [pc, #140]	@ (801680c <on_request+0x94>)
 801677e:	b094      	sub	sp, #80	@ 0x50
 8016780:	6800      	ldr	r0, [r0, #0]
 8016782:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8016784:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8016788:	9113      	str	r1, [sp, #76]	@ 0x4c
 801678a:	2800      	cmp	r0, #0
 801678c:	d03b      	beq.n	8016806 <on_request+0x8e>
 801678e:	461d      	mov	r5, r3
 8016790:	e001      	b.n	8016796 <on_request+0x1e>
 8016792:	6840      	ldr	r0, [r0, #4]
 8016794:	b3b8      	cbz	r0, 8016806 <on_request+0x8e>
 8016796:	6884      	ldr	r4, [r0, #8]
 8016798:	8b21      	ldrh	r1, [r4, #24]
 801679a:	4291      	cmp	r1, r2
 801679c:	d1f9      	bne.n	8016792 <on_request+0x1a>
 801679e:	2248      	movs	r2, #72	@ 0x48
 80167a0:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 80167a4:	4668      	mov	r0, sp
 80167a6:	f001 fb62 	bl	8017e6e <memcpy>
 80167aa:	f104 0320 	add.w	r3, r4, #32
 80167ae:	cb0c      	ldmia	r3, {r2, r3}
 80167b0:	4620      	mov	r0, r4
 80167b2:	f7f6 f97d 	bl	800cab0 <rmw_uxrce_get_static_input_buffer_for_entity>
 80167b6:	4680      	mov	r8, r0
 80167b8:	b328      	cbz	r0, 8016806 <on_request+0x8e>
 80167ba:	4638      	mov	r0, r7
 80167bc:	f8d8 7008 	ldr.w	r7, [r8, #8]
 80167c0:	4632      	mov	r2, r6
 80167c2:	f107 0110 	add.w	r1, r7, #16
 80167c6:	f7fd fa5f 	bl	8013c88 <ucdr_deserialize_array_uint8_t>
 80167ca:	b930      	cbnz	r0, 80167da <on_request+0x62>
 80167cc:	4810      	ldr	r0, [pc, #64]	@ (8016810 <on_request+0x98>)
 80167ce:	4641      	mov	r1, r8
 80167d0:	b014      	add	sp, #80	@ 0x50
 80167d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80167d6:	f7fc bae5 	b.w	8012da4 <put_memory>
 80167da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80167dc:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 80167e0:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 80167e4:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 80167e8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80167ec:	e895 0003 	ldmia.w	r5, {r0, r1}
 80167f0:	e88c 0003 	stmia.w	ip, {r0, r1}
 80167f4:	f7fd f92e 	bl	8013a54 <rmw_uros_epoch_nanos>
 80167f8:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 80167fc:	2303      	movs	r3, #3
 80167fe:	e942 0102 	strd	r0, r1, [r2, #-8]
 8016802:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8016806:	b014      	add	sp, #80	@ 0x50
 8016808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801680c:	20010b54 	.word	0x20010b54
 8016810:	20010b74 	.word	0x20010b74

08016814 <on_reply>:
 8016814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016818:	4821      	ldr	r0, [pc, #132]	@ (80168a0 <on_reply+0x8c>)
 801681a:	b094      	sub	sp, #80	@ 0x50
 801681c:	6800      	ldr	r0, [r0, #0]
 801681e:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8016820:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8016824:	9113      	str	r1, [sp, #76]	@ 0x4c
 8016826:	b3b8      	cbz	r0, 8016898 <on_reply+0x84>
 8016828:	461d      	mov	r5, r3
 801682a:	e001      	b.n	8016830 <on_reply+0x1c>
 801682c:	6840      	ldr	r0, [r0, #4]
 801682e:	b398      	cbz	r0, 8016898 <on_reply+0x84>
 8016830:	6884      	ldr	r4, [r0, #8]
 8016832:	8b21      	ldrh	r1, [r4, #24]
 8016834:	4291      	cmp	r1, r2
 8016836:	d1f9      	bne.n	801682c <on_reply+0x18>
 8016838:	2248      	movs	r2, #72	@ 0x48
 801683a:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801683e:	4668      	mov	r0, sp
 8016840:	f001 fb15 	bl	8017e6e <memcpy>
 8016844:	f104 0320 	add.w	r3, r4, #32
 8016848:	cb0c      	ldmia	r3, {r2, r3}
 801684a:	4620      	mov	r0, r4
 801684c:	f7f6 f930 	bl	800cab0 <rmw_uxrce_get_static_input_buffer_for_entity>
 8016850:	4680      	mov	r8, r0
 8016852:	b308      	cbz	r0, 8016898 <on_reply+0x84>
 8016854:	4638      	mov	r0, r7
 8016856:	f8d8 7008 	ldr.w	r7, [r8, #8]
 801685a:	4632      	mov	r2, r6
 801685c:	f107 0110 	add.w	r1, r7, #16
 8016860:	f7fd fa12 	bl	8013c88 <ucdr_deserialize_array_uint8_t>
 8016864:	b930      	cbnz	r0, 8016874 <on_reply+0x60>
 8016866:	480f      	ldr	r0, [pc, #60]	@ (80168a4 <on_reply+0x90>)
 8016868:	4641      	mov	r1, r8
 801686a:	b014      	add	sp, #80	@ 0x50
 801686c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016870:	f7fc ba98 	b.w	8012da4 <put_memory>
 8016874:	2200      	movs	r2, #0
 8016876:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 801687a:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 801687e:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8016882:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 8016886:	f7fd f8e5 	bl	8013a54 <rmw_uros_epoch_nanos>
 801688a:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 801688e:	2304      	movs	r3, #4
 8016890:	e942 0102 	strd	r0, r1, [r2, #-8]
 8016894:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8016898:	b014      	add	sp, #80	@ 0x50
 801689a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801689e:	bf00      	nop
 80168a0:	2000c264 	.word	0x2000c264
 80168a4:	20010b74 	.word	0x20010b74

080168a8 <rosidl_runtime_c__String__init>:
 80168a8:	b510      	push	{r4, lr}
 80168aa:	4604      	mov	r4, r0
 80168ac:	b086      	sub	sp, #24
 80168ae:	b170      	cbz	r0, 80168ce <rosidl_runtime_c__String__init+0x26>
 80168b0:	a801      	add	r0, sp, #4
 80168b2:	f7f4 ff5f 	bl	800b774 <rcutils_get_default_allocator>
 80168b6:	9b01      	ldr	r3, [sp, #4]
 80168b8:	9905      	ldr	r1, [sp, #20]
 80168ba:	2001      	movs	r0, #1
 80168bc:	4798      	blx	r3
 80168be:	6020      	str	r0, [r4, #0]
 80168c0:	b128      	cbz	r0, 80168ce <rosidl_runtime_c__String__init+0x26>
 80168c2:	2100      	movs	r1, #0
 80168c4:	2201      	movs	r2, #1
 80168c6:	7001      	strb	r1, [r0, #0]
 80168c8:	e9c4 1201 	strd	r1, r2, [r4, #4]
 80168cc:	4610      	mov	r0, r2
 80168ce:	b006      	add	sp, #24
 80168d0:	bd10      	pop	{r4, pc}
 80168d2:	bf00      	nop

080168d4 <rosidl_runtime_c__String__fini>:
 80168d4:	b320      	cbz	r0, 8016920 <rosidl_runtime_c__String__fini+0x4c>
 80168d6:	b510      	push	{r4, lr}
 80168d8:	6803      	ldr	r3, [r0, #0]
 80168da:	b086      	sub	sp, #24
 80168dc:	4604      	mov	r4, r0
 80168de:	b173      	cbz	r3, 80168fe <rosidl_runtime_c__String__fini+0x2a>
 80168e0:	6883      	ldr	r3, [r0, #8]
 80168e2:	b1f3      	cbz	r3, 8016922 <rosidl_runtime_c__String__fini+0x4e>
 80168e4:	a801      	add	r0, sp, #4
 80168e6:	f7f4 ff45 	bl	800b774 <rcutils_get_default_allocator>
 80168ea:	9b02      	ldr	r3, [sp, #8]
 80168ec:	9905      	ldr	r1, [sp, #20]
 80168ee:	6820      	ldr	r0, [r4, #0]
 80168f0:	4798      	blx	r3
 80168f2:	2300      	movs	r3, #0
 80168f4:	e9c4 3300 	strd	r3, r3, [r4]
 80168f8:	60a3      	str	r3, [r4, #8]
 80168fa:	b006      	add	sp, #24
 80168fc:	bd10      	pop	{r4, pc}
 80168fe:	6843      	ldr	r3, [r0, #4]
 8016900:	b9db      	cbnz	r3, 801693a <rosidl_runtime_c__String__fini+0x66>
 8016902:	6883      	ldr	r3, [r0, #8]
 8016904:	2b00      	cmp	r3, #0
 8016906:	d0f8      	beq.n	80168fa <rosidl_runtime_c__String__fini+0x26>
 8016908:	4b12      	ldr	r3, [pc, #72]	@ (8016954 <rosidl_runtime_c__String__fini+0x80>)
 801690a:	4813      	ldr	r0, [pc, #76]	@ (8016958 <rosidl_runtime_c__String__fini+0x84>)
 801690c:	681b      	ldr	r3, [r3, #0]
 801690e:	2251      	movs	r2, #81	@ 0x51
 8016910:	68db      	ldr	r3, [r3, #12]
 8016912:	2101      	movs	r1, #1
 8016914:	f000 ffda 	bl	80178cc <fwrite>
 8016918:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801691c:	f000 f83e 	bl	801699c <exit>
 8016920:	4770      	bx	lr
 8016922:	4b0c      	ldr	r3, [pc, #48]	@ (8016954 <rosidl_runtime_c__String__fini+0x80>)
 8016924:	480d      	ldr	r0, [pc, #52]	@ (801695c <rosidl_runtime_c__String__fini+0x88>)
 8016926:	681b      	ldr	r3, [r3, #0]
 8016928:	224c      	movs	r2, #76	@ 0x4c
 801692a:	68db      	ldr	r3, [r3, #12]
 801692c:	2101      	movs	r1, #1
 801692e:	f000 ffcd 	bl	80178cc <fwrite>
 8016932:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016936:	f000 f831 	bl	801699c <exit>
 801693a:	4b06      	ldr	r3, [pc, #24]	@ (8016954 <rosidl_runtime_c__String__fini+0x80>)
 801693c:	4808      	ldr	r0, [pc, #32]	@ (8016960 <rosidl_runtime_c__String__fini+0x8c>)
 801693e:	681b      	ldr	r3, [r3, #0]
 8016940:	224e      	movs	r2, #78	@ 0x4e
 8016942:	68db      	ldr	r3, [r3, #12]
 8016944:	2101      	movs	r1, #1
 8016946:	f000 ffc1 	bl	80178cc <fwrite>
 801694a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801694e:	f000 f825 	bl	801699c <exit>
 8016952:	bf00      	nop
 8016954:	200000c8 	.word	0x200000c8
 8016958:	0801a9fc 	.word	0x0801a9fc
 801695c:	0801a95c 	.word	0x0801a95c
 8016960:	0801a9ac 	.word	0x0801a9ac

08016964 <calloc>:
 8016964:	4b02      	ldr	r3, [pc, #8]	@ (8016970 <calloc+0xc>)
 8016966:	460a      	mov	r2, r1
 8016968:	4601      	mov	r1, r0
 801696a:	6818      	ldr	r0, [r3, #0]
 801696c:	f000 b802 	b.w	8016974 <_calloc_r>
 8016970:	200000c8 	.word	0x200000c8

08016974 <_calloc_r>:
 8016974:	b570      	push	{r4, r5, r6, lr}
 8016976:	fba1 5402 	umull	r5, r4, r1, r2
 801697a:	b93c      	cbnz	r4, 801698c <_calloc_r+0x18>
 801697c:	4629      	mov	r1, r5
 801697e:	f000 f899 	bl	8016ab4 <_malloc_r>
 8016982:	4606      	mov	r6, r0
 8016984:	b928      	cbnz	r0, 8016992 <_calloc_r+0x1e>
 8016986:	2600      	movs	r6, #0
 8016988:	4630      	mov	r0, r6
 801698a:	bd70      	pop	{r4, r5, r6, pc}
 801698c:	220c      	movs	r2, #12
 801698e:	6002      	str	r2, [r0, #0]
 8016990:	e7f9      	b.n	8016986 <_calloc_r+0x12>
 8016992:	462a      	mov	r2, r5
 8016994:	4621      	mov	r1, r4
 8016996:	f001 f947 	bl	8017c28 <memset>
 801699a:	e7f5      	b.n	8016988 <_calloc_r+0x14>

0801699c <exit>:
 801699c:	b508      	push	{r3, lr}
 801699e:	4b06      	ldr	r3, [pc, #24]	@ (80169b8 <exit+0x1c>)
 80169a0:	4604      	mov	r4, r0
 80169a2:	b113      	cbz	r3, 80169aa <exit+0xe>
 80169a4:	2100      	movs	r1, #0
 80169a6:	f3af 8000 	nop.w
 80169aa:	4b04      	ldr	r3, [pc, #16]	@ (80169bc <exit+0x20>)
 80169ac:	681b      	ldr	r3, [r3, #0]
 80169ae:	b103      	cbz	r3, 80169b2 <exit+0x16>
 80169b0:	4798      	blx	r3
 80169b2:	4620      	mov	r0, r4
 80169b4:	f7ec f984 	bl	8002cc0 <_exit>
 80169b8:	00000000 	.word	0x00000000
 80169bc:	20010dcc 	.word	0x20010dcc

080169c0 <getenv>:
 80169c0:	b507      	push	{r0, r1, r2, lr}
 80169c2:	4b04      	ldr	r3, [pc, #16]	@ (80169d4 <getenv+0x14>)
 80169c4:	4601      	mov	r1, r0
 80169c6:	aa01      	add	r2, sp, #4
 80169c8:	6818      	ldr	r0, [r3, #0]
 80169ca:	f000 f805 	bl	80169d8 <_findenv_r>
 80169ce:	b003      	add	sp, #12
 80169d0:	f85d fb04 	ldr.w	pc, [sp], #4
 80169d4:	200000c8 	.word	0x200000c8

080169d8 <_findenv_r>:
 80169d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169dc:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8016a4c <_findenv_r+0x74>
 80169e0:	4606      	mov	r6, r0
 80169e2:	4689      	mov	r9, r1
 80169e4:	4617      	mov	r7, r2
 80169e6:	f002 f8bb 	bl	8018b60 <__env_lock>
 80169ea:	f8da 4000 	ldr.w	r4, [sl]
 80169ee:	b134      	cbz	r4, 80169fe <_findenv_r+0x26>
 80169f0:	464b      	mov	r3, r9
 80169f2:	4698      	mov	r8, r3
 80169f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80169f8:	b13a      	cbz	r2, 8016a0a <_findenv_r+0x32>
 80169fa:	2a3d      	cmp	r2, #61	@ 0x3d
 80169fc:	d1f9      	bne.n	80169f2 <_findenv_r+0x1a>
 80169fe:	4630      	mov	r0, r6
 8016a00:	f002 f8b4 	bl	8018b6c <__env_unlock>
 8016a04:	2000      	movs	r0, #0
 8016a06:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a0a:	eba8 0809 	sub.w	r8, r8, r9
 8016a0e:	46a3      	mov	fp, r4
 8016a10:	f854 0b04 	ldr.w	r0, [r4], #4
 8016a14:	2800      	cmp	r0, #0
 8016a16:	d0f2      	beq.n	80169fe <_findenv_r+0x26>
 8016a18:	4642      	mov	r2, r8
 8016a1a:	4649      	mov	r1, r9
 8016a1c:	f001 f919 	bl	8017c52 <strncmp>
 8016a20:	2800      	cmp	r0, #0
 8016a22:	d1f4      	bne.n	8016a0e <_findenv_r+0x36>
 8016a24:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8016a28:	eb03 0508 	add.w	r5, r3, r8
 8016a2c:	f813 3008 	ldrb.w	r3, [r3, r8]
 8016a30:	2b3d      	cmp	r3, #61	@ 0x3d
 8016a32:	d1ec      	bne.n	8016a0e <_findenv_r+0x36>
 8016a34:	f8da 3000 	ldr.w	r3, [sl]
 8016a38:	ebab 0303 	sub.w	r3, fp, r3
 8016a3c:	109b      	asrs	r3, r3, #2
 8016a3e:	4630      	mov	r0, r6
 8016a40:	603b      	str	r3, [r7, #0]
 8016a42:	f002 f893 	bl	8018b6c <__env_unlock>
 8016a46:	1c68      	adds	r0, r5, #1
 8016a48:	e7dd      	b.n	8016a06 <_findenv_r+0x2e>
 8016a4a:	bf00      	nop
 8016a4c:	20000000 	.word	0x20000000

08016a50 <malloc>:
 8016a50:	4b02      	ldr	r3, [pc, #8]	@ (8016a5c <malloc+0xc>)
 8016a52:	4601      	mov	r1, r0
 8016a54:	6818      	ldr	r0, [r3, #0]
 8016a56:	f000 b82d 	b.w	8016ab4 <_malloc_r>
 8016a5a:	bf00      	nop
 8016a5c:	200000c8 	.word	0x200000c8

08016a60 <free>:
 8016a60:	4b02      	ldr	r3, [pc, #8]	@ (8016a6c <free+0xc>)
 8016a62:	4601      	mov	r1, r0
 8016a64:	6818      	ldr	r0, [r3, #0]
 8016a66:	f002 b887 	b.w	8018b78 <_free_r>
 8016a6a:	bf00      	nop
 8016a6c:	200000c8 	.word	0x200000c8

08016a70 <sbrk_aligned>:
 8016a70:	b570      	push	{r4, r5, r6, lr}
 8016a72:	4e0f      	ldr	r6, [pc, #60]	@ (8016ab0 <sbrk_aligned+0x40>)
 8016a74:	460c      	mov	r4, r1
 8016a76:	6831      	ldr	r1, [r6, #0]
 8016a78:	4605      	mov	r5, r0
 8016a7a:	b911      	cbnz	r1, 8016a82 <sbrk_aligned+0x12>
 8016a7c:	f001 f9a0 	bl	8017dc0 <_sbrk_r>
 8016a80:	6030      	str	r0, [r6, #0]
 8016a82:	4621      	mov	r1, r4
 8016a84:	4628      	mov	r0, r5
 8016a86:	f001 f99b 	bl	8017dc0 <_sbrk_r>
 8016a8a:	1c43      	adds	r3, r0, #1
 8016a8c:	d103      	bne.n	8016a96 <sbrk_aligned+0x26>
 8016a8e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8016a92:	4620      	mov	r0, r4
 8016a94:	bd70      	pop	{r4, r5, r6, pc}
 8016a96:	1cc4      	adds	r4, r0, #3
 8016a98:	f024 0403 	bic.w	r4, r4, #3
 8016a9c:	42a0      	cmp	r0, r4
 8016a9e:	d0f8      	beq.n	8016a92 <sbrk_aligned+0x22>
 8016aa0:	1a21      	subs	r1, r4, r0
 8016aa2:	4628      	mov	r0, r5
 8016aa4:	f001 f98c 	bl	8017dc0 <_sbrk_r>
 8016aa8:	3001      	adds	r0, #1
 8016aaa:	d1f2      	bne.n	8016a92 <sbrk_aligned+0x22>
 8016aac:	e7ef      	b.n	8016a8e <sbrk_aligned+0x1e>
 8016aae:	bf00      	nop
 8016ab0:	20010c8c 	.word	0x20010c8c

08016ab4 <_malloc_r>:
 8016ab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016ab8:	1ccd      	adds	r5, r1, #3
 8016aba:	f025 0503 	bic.w	r5, r5, #3
 8016abe:	3508      	adds	r5, #8
 8016ac0:	2d0c      	cmp	r5, #12
 8016ac2:	bf38      	it	cc
 8016ac4:	250c      	movcc	r5, #12
 8016ac6:	2d00      	cmp	r5, #0
 8016ac8:	4606      	mov	r6, r0
 8016aca:	db01      	blt.n	8016ad0 <_malloc_r+0x1c>
 8016acc:	42a9      	cmp	r1, r5
 8016ace:	d904      	bls.n	8016ada <_malloc_r+0x26>
 8016ad0:	230c      	movs	r3, #12
 8016ad2:	6033      	str	r3, [r6, #0]
 8016ad4:	2000      	movs	r0, #0
 8016ad6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016ada:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8016bb0 <_malloc_r+0xfc>
 8016ade:	f000 f869 	bl	8016bb4 <__malloc_lock>
 8016ae2:	f8d8 3000 	ldr.w	r3, [r8]
 8016ae6:	461c      	mov	r4, r3
 8016ae8:	bb44      	cbnz	r4, 8016b3c <_malloc_r+0x88>
 8016aea:	4629      	mov	r1, r5
 8016aec:	4630      	mov	r0, r6
 8016aee:	f7ff ffbf 	bl	8016a70 <sbrk_aligned>
 8016af2:	1c43      	adds	r3, r0, #1
 8016af4:	4604      	mov	r4, r0
 8016af6:	d158      	bne.n	8016baa <_malloc_r+0xf6>
 8016af8:	f8d8 4000 	ldr.w	r4, [r8]
 8016afc:	4627      	mov	r7, r4
 8016afe:	2f00      	cmp	r7, #0
 8016b00:	d143      	bne.n	8016b8a <_malloc_r+0xd6>
 8016b02:	2c00      	cmp	r4, #0
 8016b04:	d04b      	beq.n	8016b9e <_malloc_r+0xea>
 8016b06:	6823      	ldr	r3, [r4, #0]
 8016b08:	4639      	mov	r1, r7
 8016b0a:	4630      	mov	r0, r6
 8016b0c:	eb04 0903 	add.w	r9, r4, r3
 8016b10:	f001 f956 	bl	8017dc0 <_sbrk_r>
 8016b14:	4581      	cmp	r9, r0
 8016b16:	d142      	bne.n	8016b9e <_malloc_r+0xea>
 8016b18:	6821      	ldr	r1, [r4, #0]
 8016b1a:	1a6d      	subs	r5, r5, r1
 8016b1c:	4629      	mov	r1, r5
 8016b1e:	4630      	mov	r0, r6
 8016b20:	f7ff ffa6 	bl	8016a70 <sbrk_aligned>
 8016b24:	3001      	adds	r0, #1
 8016b26:	d03a      	beq.n	8016b9e <_malloc_r+0xea>
 8016b28:	6823      	ldr	r3, [r4, #0]
 8016b2a:	442b      	add	r3, r5
 8016b2c:	6023      	str	r3, [r4, #0]
 8016b2e:	f8d8 3000 	ldr.w	r3, [r8]
 8016b32:	685a      	ldr	r2, [r3, #4]
 8016b34:	bb62      	cbnz	r2, 8016b90 <_malloc_r+0xdc>
 8016b36:	f8c8 7000 	str.w	r7, [r8]
 8016b3a:	e00f      	b.n	8016b5c <_malloc_r+0xa8>
 8016b3c:	6822      	ldr	r2, [r4, #0]
 8016b3e:	1b52      	subs	r2, r2, r5
 8016b40:	d420      	bmi.n	8016b84 <_malloc_r+0xd0>
 8016b42:	2a0b      	cmp	r2, #11
 8016b44:	d917      	bls.n	8016b76 <_malloc_r+0xc2>
 8016b46:	1961      	adds	r1, r4, r5
 8016b48:	42a3      	cmp	r3, r4
 8016b4a:	6025      	str	r5, [r4, #0]
 8016b4c:	bf18      	it	ne
 8016b4e:	6059      	strne	r1, [r3, #4]
 8016b50:	6863      	ldr	r3, [r4, #4]
 8016b52:	bf08      	it	eq
 8016b54:	f8c8 1000 	streq.w	r1, [r8]
 8016b58:	5162      	str	r2, [r4, r5]
 8016b5a:	604b      	str	r3, [r1, #4]
 8016b5c:	4630      	mov	r0, r6
 8016b5e:	f000 f82f 	bl	8016bc0 <__malloc_unlock>
 8016b62:	f104 000b 	add.w	r0, r4, #11
 8016b66:	1d23      	adds	r3, r4, #4
 8016b68:	f020 0007 	bic.w	r0, r0, #7
 8016b6c:	1ac2      	subs	r2, r0, r3
 8016b6e:	bf1c      	itt	ne
 8016b70:	1a1b      	subne	r3, r3, r0
 8016b72:	50a3      	strne	r3, [r4, r2]
 8016b74:	e7af      	b.n	8016ad6 <_malloc_r+0x22>
 8016b76:	6862      	ldr	r2, [r4, #4]
 8016b78:	42a3      	cmp	r3, r4
 8016b7a:	bf0c      	ite	eq
 8016b7c:	f8c8 2000 	streq.w	r2, [r8]
 8016b80:	605a      	strne	r2, [r3, #4]
 8016b82:	e7eb      	b.n	8016b5c <_malloc_r+0xa8>
 8016b84:	4623      	mov	r3, r4
 8016b86:	6864      	ldr	r4, [r4, #4]
 8016b88:	e7ae      	b.n	8016ae8 <_malloc_r+0x34>
 8016b8a:	463c      	mov	r4, r7
 8016b8c:	687f      	ldr	r7, [r7, #4]
 8016b8e:	e7b6      	b.n	8016afe <_malloc_r+0x4a>
 8016b90:	461a      	mov	r2, r3
 8016b92:	685b      	ldr	r3, [r3, #4]
 8016b94:	42a3      	cmp	r3, r4
 8016b96:	d1fb      	bne.n	8016b90 <_malloc_r+0xdc>
 8016b98:	2300      	movs	r3, #0
 8016b9a:	6053      	str	r3, [r2, #4]
 8016b9c:	e7de      	b.n	8016b5c <_malloc_r+0xa8>
 8016b9e:	230c      	movs	r3, #12
 8016ba0:	6033      	str	r3, [r6, #0]
 8016ba2:	4630      	mov	r0, r6
 8016ba4:	f000 f80c 	bl	8016bc0 <__malloc_unlock>
 8016ba8:	e794      	b.n	8016ad4 <_malloc_r+0x20>
 8016baa:	6005      	str	r5, [r0, #0]
 8016bac:	e7d6      	b.n	8016b5c <_malloc_r+0xa8>
 8016bae:	bf00      	nop
 8016bb0:	20010c90 	.word	0x20010c90

08016bb4 <__malloc_lock>:
 8016bb4:	4801      	ldr	r0, [pc, #4]	@ (8016bbc <__malloc_lock+0x8>)
 8016bb6:	f001 b950 	b.w	8017e5a <__retarget_lock_acquire_recursive>
 8016bba:	bf00      	nop
 8016bbc:	20010dd5 	.word	0x20010dd5

08016bc0 <__malloc_unlock>:
 8016bc0:	4801      	ldr	r0, [pc, #4]	@ (8016bc8 <__malloc_unlock+0x8>)
 8016bc2:	f001 b94b 	b.w	8017e5c <__retarget_lock_release_recursive>
 8016bc6:	bf00      	nop
 8016bc8:	20010dd5 	.word	0x20010dd5

08016bcc <srand>:
 8016bcc:	b538      	push	{r3, r4, r5, lr}
 8016bce:	4b10      	ldr	r3, [pc, #64]	@ (8016c10 <srand+0x44>)
 8016bd0:	681d      	ldr	r5, [r3, #0]
 8016bd2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016bd4:	4604      	mov	r4, r0
 8016bd6:	b9b3      	cbnz	r3, 8016c06 <srand+0x3a>
 8016bd8:	2018      	movs	r0, #24
 8016bda:	f7ff ff39 	bl	8016a50 <malloc>
 8016bde:	4602      	mov	r2, r0
 8016be0:	6328      	str	r0, [r5, #48]	@ 0x30
 8016be2:	b920      	cbnz	r0, 8016bee <srand+0x22>
 8016be4:	4b0b      	ldr	r3, [pc, #44]	@ (8016c14 <srand+0x48>)
 8016be6:	480c      	ldr	r0, [pc, #48]	@ (8016c18 <srand+0x4c>)
 8016be8:	2146      	movs	r1, #70	@ 0x46
 8016bea:	f001 f94f 	bl	8017e8c <__assert_func>
 8016bee:	490b      	ldr	r1, [pc, #44]	@ (8016c1c <srand+0x50>)
 8016bf0:	4b0b      	ldr	r3, [pc, #44]	@ (8016c20 <srand+0x54>)
 8016bf2:	e9c0 1300 	strd	r1, r3, [r0]
 8016bf6:	4b0b      	ldr	r3, [pc, #44]	@ (8016c24 <srand+0x58>)
 8016bf8:	6083      	str	r3, [r0, #8]
 8016bfa:	230b      	movs	r3, #11
 8016bfc:	8183      	strh	r3, [r0, #12]
 8016bfe:	2100      	movs	r1, #0
 8016c00:	2001      	movs	r0, #1
 8016c02:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8016c06:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016c08:	2200      	movs	r2, #0
 8016c0a:	611c      	str	r4, [r3, #16]
 8016c0c:	615a      	str	r2, [r3, #20]
 8016c0e:	bd38      	pop	{r3, r4, r5, pc}
 8016c10:	200000c8 	.word	0x200000c8
 8016c14:	0801aa4e 	.word	0x0801aa4e
 8016c18:	0801aa65 	.word	0x0801aa65
 8016c1c:	abcd330e 	.word	0xabcd330e
 8016c20:	e66d1234 	.word	0xe66d1234
 8016c24:	0005deec 	.word	0x0005deec

08016c28 <rand>:
 8016c28:	4b16      	ldr	r3, [pc, #88]	@ (8016c84 <rand+0x5c>)
 8016c2a:	b510      	push	{r4, lr}
 8016c2c:	681c      	ldr	r4, [r3, #0]
 8016c2e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016c30:	b9b3      	cbnz	r3, 8016c60 <rand+0x38>
 8016c32:	2018      	movs	r0, #24
 8016c34:	f7ff ff0c 	bl	8016a50 <malloc>
 8016c38:	4602      	mov	r2, r0
 8016c3a:	6320      	str	r0, [r4, #48]	@ 0x30
 8016c3c:	b920      	cbnz	r0, 8016c48 <rand+0x20>
 8016c3e:	4b12      	ldr	r3, [pc, #72]	@ (8016c88 <rand+0x60>)
 8016c40:	4812      	ldr	r0, [pc, #72]	@ (8016c8c <rand+0x64>)
 8016c42:	2152      	movs	r1, #82	@ 0x52
 8016c44:	f001 f922 	bl	8017e8c <__assert_func>
 8016c48:	4911      	ldr	r1, [pc, #68]	@ (8016c90 <rand+0x68>)
 8016c4a:	4b12      	ldr	r3, [pc, #72]	@ (8016c94 <rand+0x6c>)
 8016c4c:	e9c0 1300 	strd	r1, r3, [r0]
 8016c50:	4b11      	ldr	r3, [pc, #68]	@ (8016c98 <rand+0x70>)
 8016c52:	6083      	str	r3, [r0, #8]
 8016c54:	230b      	movs	r3, #11
 8016c56:	8183      	strh	r3, [r0, #12]
 8016c58:	2100      	movs	r1, #0
 8016c5a:	2001      	movs	r0, #1
 8016c5c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8016c60:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8016c62:	480e      	ldr	r0, [pc, #56]	@ (8016c9c <rand+0x74>)
 8016c64:	690b      	ldr	r3, [r1, #16]
 8016c66:	694c      	ldr	r4, [r1, #20]
 8016c68:	4a0d      	ldr	r2, [pc, #52]	@ (8016ca0 <rand+0x78>)
 8016c6a:	4358      	muls	r0, r3
 8016c6c:	fb02 0004 	mla	r0, r2, r4, r0
 8016c70:	fba3 3202 	umull	r3, r2, r3, r2
 8016c74:	3301      	adds	r3, #1
 8016c76:	eb40 0002 	adc.w	r0, r0, r2
 8016c7a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8016c7e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8016c82:	bd10      	pop	{r4, pc}
 8016c84:	200000c8 	.word	0x200000c8
 8016c88:	0801aa4e 	.word	0x0801aa4e
 8016c8c:	0801aa65 	.word	0x0801aa65
 8016c90:	abcd330e 	.word	0xabcd330e
 8016c94:	e66d1234 	.word	0xe66d1234
 8016c98:	0005deec 	.word	0x0005deec
 8016c9c:	5851f42d 	.word	0x5851f42d
 8016ca0:	4c957f2d 	.word	0x4c957f2d

08016ca4 <realloc>:
 8016ca4:	4b02      	ldr	r3, [pc, #8]	@ (8016cb0 <realloc+0xc>)
 8016ca6:	460a      	mov	r2, r1
 8016ca8:	4601      	mov	r1, r0
 8016caa:	6818      	ldr	r0, [r3, #0]
 8016cac:	f000 b802 	b.w	8016cb4 <_realloc_r>
 8016cb0:	200000c8 	.word	0x200000c8

08016cb4 <_realloc_r>:
 8016cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016cb8:	4680      	mov	r8, r0
 8016cba:	4615      	mov	r5, r2
 8016cbc:	460c      	mov	r4, r1
 8016cbe:	b921      	cbnz	r1, 8016cca <_realloc_r+0x16>
 8016cc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016cc4:	4611      	mov	r1, r2
 8016cc6:	f7ff bef5 	b.w	8016ab4 <_malloc_r>
 8016cca:	b92a      	cbnz	r2, 8016cd8 <_realloc_r+0x24>
 8016ccc:	f001 ff54 	bl	8018b78 <_free_r>
 8016cd0:	2400      	movs	r4, #0
 8016cd2:	4620      	mov	r0, r4
 8016cd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016cd8:	f002 fb1a 	bl	8019310 <_malloc_usable_size_r>
 8016cdc:	4285      	cmp	r5, r0
 8016cde:	4606      	mov	r6, r0
 8016ce0:	d802      	bhi.n	8016ce8 <_realloc_r+0x34>
 8016ce2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8016ce6:	d8f4      	bhi.n	8016cd2 <_realloc_r+0x1e>
 8016ce8:	4629      	mov	r1, r5
 8016cea:	4640      	mov	r0, r8
 8016cec:	f7ff fee2 	bl	8016ab4 <_malloc_r>
 8016cf0:	4607      	mov	r7, r0
 8016cf2:	2800      	cmp	r0, #0
 8016cf4:	d0ec      	beq.n	8016cd0 <_realloc_r+0x1c>
 8016cf6:	42b5      	cmp	r5, r6
 8016cf8:	462a      	mov	r2, r5
 8016cfa:	4621      	mov	r1, r4
 8016cfc:	bf28      	it	cs
 8016cfe:	4632      	movcs	r2, r6
 8016d00:	f001 f8b5 	bl	8017e6e <memcpy>
 8016d04:	4621      	mov	r1, r4
 8016d06:	4640      	mov	r0, r8
 8016d08:	f001 ff36 	bl	8018b78 <_free_r>
 8016d0c:	463c      	mov	r4, r7
 8016d0e:	e7e0      	b.n	8016cd2 <_realloc_r+0x1e>

08016d10 <_strtoul_l.constprop.0>:
 8016d10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016d14:	4e34      	ldr	r6, [pc, #208]	@ (8016de8 <_strtoul_l.constprop.0+0xd8>)
 8016d16:	4686      	mov	lr, r0
 8016d18:	460d      	mov	r5, r1
 8016d1a:	4628      	mov	r0, r5
 8016d1c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016d20:	5d37      	ldrb	r7, [r6, r4]
 8016d22:	f017 0708 	ands.w	r7, r7, #8
 8016d26:	d1f8      	bne.n	8016d1a <_strtoul_l.constprop.0+0xa>
 8016d28:	2c2d      	cmp	r4, #45	@ 0x2d
 8016d2a:	d12f      	bne.n	8016d8c <_strtoul_l.constprop.0+0x7c>
 8016d2c:	782c      	ldrb	r4, [r5, #0]
 8016d2e:	2701      	movs	r7, #1
 8016d30:	1c85      	adds	r5, r0, #2
 8016d32:	f033 0010 	bics.w	r0, r3, #16
 8016d36:	d109      	bne.n	8016d4c <_strtoul_l.constprop.0+0x3c>
 8016d38:	2c30      	cmp	r4, #48	@ 0x30
 8016d3a:	d12c      	bne.n	8016d96 <_strtoul_l.constprop.0+0x86>
 8016d3c:	7828      	ldrb	r0, [r5, #0]
 8016d3e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8016d42:	2858      	cmp	r0, #88	@ 0x58
 8016d44:	d127      	bne.n	8016d96 <_strtoul_l.constprop.0+0x86>
 8016d46:	786c      	ldrb	r4, [r5, #1]
 8016d48:	2310      	movs	r3, #16
 8016d4a:	3502      	adds	r5, #2
 8016d4c:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8016d50:	2600      	movs	r6, #0
 8016d52:	fbb8 f8f3 	udiv	r8, r8, r3
 8016d56:	fb03 f908 	mul.w	r9, r3, r8
 8016d5a:	ea6f 0909 	mvn.w	r9, r9
 8016d5e:	4630      	mov	r0, r6
 8016d60:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8016d64:	f1bc 0f09 	cmp.w	ip, #9
 8016d68:	d81c      	bhi.n	8016da4 <_strtoul_l.constprop.0+0x94>
 8016d6a:	4664      	mov	r4, ip
 8016d6c:	42a3      	cmp	r3, r4
 8016d6e:	dd2a      	ble.n	8016dc6 <_strtoul_l.constprop.0+0xb6>
 8016d70:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8016d74:	d007      	beq.n	8016d86 <_strtoul_l.constprop.0+0x76>
 8016d76:	4580      	cmp	r8, r0
 8016d78:	d322      	bcc.n	8016dc0 <_strtoul_l.constprop.0+0xb0>
 8016d7a:	d101      	bne.n	8016d80 <_strtoul_l.constprop.0+0x70>
 8016d7c:	45a1      	cmp	r9, r4
 8016d7e:	db1f      	blt.n	8016dc0 <_strtoul_l.constprop.0+0xb0>
 8016d80:	fb00 4003 	mla	r0, r0, r3, r4
 8016d84:	2601      	movs	r6, #1
 8016d86:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016d8a:	e7e9      	b.n	8016d60 <_strtoul_l.constprop.0+0x50>
 8016d8c:	2c2b      	cmp	r4, #43	@ 0x2b
 8016d8e:	bf04      	itt	eq
 8016d90:	782c      	ldrbeq	r4, [r5, #0]
 8016d92:	1c85      	addeq	r5, r0, #2
 8016d94:	e7cd      	b.n	8016d32 <_strtoul_l.constprop.0+0x22>
 8016d96:	2b00      	cmp	r3, #0
 8016d98:	d1d8      	bne.n	8016d4c <_strtoul_l.constprop.0+0x3c>
 8016d9a:	2c30      	cmp	r4, #48	@ 0x30
 8016d9c:	bf0c      	ite	eq
 8016d9e:	2308      	moveq	r3, #8
 8016da0:	230a      	movne	r3, #10
 8016da2:	e7d3      	b.n	8016d4c <_strtoul_l.constprop.0+0x3c>
 8016da4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8016da8:	f1bc 0f19 	cmp.w	ip, #25
 8016dac:	d801      	bhi.n	8016db2 <_strtoul_l.constprop.0+0xa2>
 8016dae:	3c37      	subs	r4, #55	@ 0x37
 8016db0:	e7dc      	b.n	8016d6c <_strtoul_l.constprop.0+0x5c>
 8016db2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8016db6:	f1bc 0f19 	cmp.w	ip, #25
 8016dba:	d804      	bhi.n	8016dc6 <_strtoul_l.constprop.0+0xb6>
 8016dbc:	3c57      	subs	r4, #87	@ 0x57
 8016dbe:	e7d5      	b.n	8016d6c <_strtoul_l.constprop.0+0x5c>
 8016dc0:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8016dc4:	e7df      	b.n	8016d86 <_strtoul_l.constprop.0+0x76>
 8016dc6:	1c73      	adds	r3, r6, #1
 8016dc8:	d106      	bne.n	8016dd8 <_strtoul_l.constprop.0+0xc8>
 8016dca:	2322      	movs	r3, #34	@ 0x22
 8016dcc:	f8ce 3000 	str.w	r3, [lr]
 8016dd0:	4630      	mov	r0, r6
 8016dd2:	b932      	cbnz	r2, 8016de2 <_strtoul_l.constprop.0+0xd2>
 8016dd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016dd8:	b107      	cbz	r7, 8016ddc <_strtoul_l.constprop.0+0xcc>
 8016dda:	4240      	negs	r0, r0
 8016ddc:	2a00      	cmp	r2, #0
 8016dde:	d0f9      	beq.n	8016dd4 <_strtoul_l.constprop.0+0xc4>
 8016de0:	b106      	cbz	r6, 8016de4 <_strtoul_l.constprop.0+0xd4>
 8016de2:	1e69      	subs	r1, r5, #1
 8016de4:	6011      	str	r1, [r2, #0]
 8016de6:	e7f5      	b.n	8016dd4 <_strtoul_l.constprop.0+0xc4>
 8016de8:	0801aabe 	.word	0x0801aabe

08016dec <strtoul>:
 8016dec:	4613      	mov	r3, r2
 8016dee:	460a      	mov	r2, r1
 8016df0:	4601      	mov	r1, r0
 8016df2:	4802      	ldr	r0, [pc, #8]	@ (8016dfc <strtoul+0x10>)
 8016df4:	6800      	ldr	r0, [r0, #0]
 8016df6:	f7ff bf8b 	b.w	8016d10 <_strtoul_l.constprop.0>
 8016dfa:	bf00      	nop
 8016dfc:	200000c8 	.word	0x200000c8

08016e00 <__cvt>:
 8016e00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016e04:	ec57 6b10 	vmov	r6, r7, d0
 8016e08:	2f00      	cmp	r7, #0
 8016e0a:	460c      	mov	r4, r1
 8016e0c:	4619      	mov	r1, r3
 8016e0e:	463b      	mov	r3, r7
 8016e10:	bfbb      	ittet	lt
 8016e12:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8016e16:	461f      	movlt	r7, r3
 8016e18:	2300      	movge	r3, #0
 8016e1a:	232d      	movlt	r3, #45	@ 0x2d
 8016e1c:	700b      	strb	r3, [r1, #0]
 8016e1e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016e20:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8016e24:	4691      	mov	r9, r2
 8016e26:	f023 0820 	bic.w	r8, r3, #32
 8016e2a:	bfbc      	itt	lt
 8016e2c:	4632      	movlt	r2, r6
 8016e2e:	4616      	movlt	r6, r2
 8016e30:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8016e34:	d005      	beq.n	8016e42 <__cvt+0x42>
 8016e36:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8016e3a:	d100      	bne.n	8016e3e <__cvt+0x3e>
 8016e3c:	3401      	adds	r4, #1
 8016e3e:	2102      	movs	r1, #2
 8016e40:	e000      	b.n	8016e44 <__cvt+0x44>
 8016e42:	2103      	movs	r1, #3
 8016e44:	ab03      	add	r3, sp, #12
 8016e46:	9301      	str	r3, [sp, #4]
 8016e48:	ab02      	add	r3, sp, #8
 8016e4a:	9300      	str	r3, [sp, #0]
 8016e4c:	ec47 6b10 	vmov	d0, r6, r7
 8016e50:	4653      	mov	r3, sl
 8016e52:	4622      	mov	r2, r4
 8016e54:	f001 f8c0 	bl	8017fd8 <_dtoa_r>
 8016e58:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8016e5c:	4605      	mov	r5, r0
 8016e5e:	d119      	bne.n	8016e94 <__cvt+0x94>
 8016e60:	f019 0f01 	tst.w	r9, #1
 8016e64:	d00e      	beq.n	8016e84 <__cvt+0x84>
 8016e66:	eb00 0904 	add.w	r9, r0, r4
 8016e6a:	2200      	movs	r2, #0
 8016e6c:	2300      	movs	r3, #0
 8016e6e:	4630      	mov	r0, r6
 8016e70:	4639      	mov	r1, r7
 8016e72:	f7e9 fe59 	bl	8000b28 <__aeabi_dcmpeq>
 8016e76:	b108      	cbz	r0, 8016e7c <__cvt+0x7c>
 8016e78:	f8cd 900c 	str.w	r9, [sp, #12]
 8016e7c:	2230      	movs	r2, #48	@ 0x30
 8016e7e:	9b03      	ldr	r3, [sp, #12]
 8016e80:	454b      	cmp	r3, r9
 8016e82:	d31e      	bcc.n	8016ec2 <__cvt+0xc2>
 8016e84:	9b03      	ldr	r3, [sp, #12]
 8016e86:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016e88:	1b5b      	subs	r3, r3, r5
 8016e8a:	4628      	mov	r0, r5
 8016e8c:	6013      	str	r3, [r2, #0]
 8016e8e:	b004      	add	sp, #16
 8016e90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016e94:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8016e98:	eb00 0904 	add.w	r9, r0, r4
 8016e9c:	d1e5      	bne.n	8016e6a <__cvt+0x6a>
 8016e9e:	7803      	ldrb	r3, [r0, #0]
 8016ea0:	2b30      	cmp	r3, #48	@ 0x30
 8016ea2:	d10a      	bne.n	8016eba <__cvt+0xba>
 8016ea4:	2200      	movs	r2, #0
 8016ea6:	2300      	movs	r3, #0
 8016ea8:	4630      	mov	r0, r6
 8016eaa:	4639      	mov	r1, r7
 8016eac:	f7e9 fe3c 	bl	8000b28 <__aeabi_dcmpeq>
 8016eb0:	b918      	cbnz	r0, 8016eba <__cvt+0xba>
 8016eb2:	f1c4 0401 	rsb	r4, r4, #1
 8016eb6:	f8ca 4000 	str.w	r4, [sl]
 8016eba:	f8da 3000 	ldr.w	r3, [sl]
 8016ebe:	4499      	add	r9, r3
 8016ec0:	e7d3      	b.n	8016e6a <__cvt+0x6a>
 8016ec2:	1c59      	adds	r1, r3, #1
 8016ec4:	9103      	str	r1, [sp, #12]
 8016ec6:	701a      	strb	r2, [r3, #0]
 8016ec8:	e7d9      	b.n	8016e7e <__cvt+0x7e>

08016eca <__exponent>:
 8016eca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016ecc:	2900      	cmp	r1, #0
 8016ece:	bfba      	itte	lt
 8016ed0:	4249      	neglt	r1, r1
 8016ed2:	232d      	movlt	r3, #45	@ 0x2d
 8016ed4:	232b      	movge	r3, #43	@ 0x2b
 8016ed6:	2909      	cmp	r1, #9
 8016ed8:	7002      	strb	r2, [r0, #0]
 8016eda:	7043      	strb	r3, [r0, #1]
 8016edc:	dd29      	ble.n	8016f32 <__exponent+0x68>
 8016ede:	f10d 0307 	add.w	r3, sp, #7
 8016ee2:	461d      	mov	r5, r3
 8016ee4:	270a      	movs	r7, #10
 8016ee6:	461a      	mov	r2, r3
 8016ee8:	fbb1 f6f7 	udiv	r6, r1, r7
 8016eec:	fb07 1416 	mls	r4, r7, r6, r1
 8016ef0:	3430      	adds	r4, #48	@ 0x30
 8016ef2:	f802 4c01 	strb.w	r4, [r2, #-1]
 8016ef6:	460c      	mov	r4, r1
 8016ef8:	2c63      	cmp	r4, #99	@ 0x63
 8016efa:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8016efe:	4631      	mov	r1, r6
 8016f00:	dcf1      	bgt.n	8016ee6 <__exponent+0x1c>
 8016f02:	3130      	adds	r1, #48	@ 0x30
 8016f04:	1e94      	subs	r4, r2, #2
 8016f06:	f803 1c01 	strb.w	r1, [r3, #-1]
 8016f0a:	1c41      	adds	r1, r0, #1
 8016f0c:	4623      	mov	r3, r4
 8016f0e:	42ab      	cmp	r3, r5
 8016f10:	d30a      	bcc.n	8016f28 <__exponent+0x5e>
 8016f12:	f10d 0309 	add.w	r3, sp, #9
 8016f16:	1a9b      	subs	r3, r3, r2
 8016f18:	42ac      	cmp	r4, r5
 8016f1a:	bf88      	it	hi
 8016f1c:	2300      	movhi	r3, #0
 8016f1e:	3302      	adds	r3, #2
 8016f20:	4403      	add	r3, r0
 8016f22:	1a18      	subs	r0, r3, r0
 8016f24:	b003      	add	sp, #12
 8016f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016f28:	f813 6b01 	ldrb.w	r6, [r3], #1
 8016f2c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8016f30:	e7ed      	b.n	8016f0e <__exponent+0x44>
 8016f32:	2330      	movs	r3, #48	@ 0x30
 8016f34:	3130      	adds	r1, #48	@ 0x30
 8016f36:	7083      	strb	r3, [r0, #2]
 8016f38:	70c1      	strb	r1, [r0, #3]
 8016f3a:	1d03      	adds	r3, r0, #4
 8016f3c:	e7f1      	b.n	8016f22 <__exponent+0x58>
	...

08016f40 <_printf_float>:
 8016f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f44:	b08d      	sub	sp, #52	@ 0x34
 8016f46:	460c      	mov	r4, r1
 8016f48:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8016f4c:	4616      	mov	r6, r2
 8016f4e:	461f      	mov	r7, r3
 8016f50:	4605      	mov	r5, r0
 8016f52:	f000 fea7 	bl	8017ca4 <_localeconv_r>
 8016f56:	6803      	ldr	r3, [r0, #0]
 8016f58:	9304      	str	r3, [sp, #16]
 8016f5a:	4618      	mov	r0, r3
 8016f5c:	f7e9 f9b8 	bl	80002d0 <strlen>
 8016f60:	2300      	movs	r3, #0
 8016f62:	930a      	str	r3, [sp, #40]	@ 0x28
 8016f64:	f8d8 3000 	ldr.w	r3, [r8]
 8016f68:	9005      	str	r0, [sp, #20]
 8016f6a:	3307      	adds	r3, #7
 8016f6c:	f023 0307 	bic.w	r3, r3, #7
 8016f70:	f103 0208 	add.w	r2, r3, #8
 8016f74:	f894 a018 	ldrb.w	sl, [r4, #24]
 8016f78:	f8d4 b000 	ldr.w	fp, [r4]
 8016f7c:	f8c8 2000 	str.w	r2, [r8]
 8016f80:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016f84:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8016f88:	9307      	str	r3, [sp, #28]
 8016f8a:	f8cd 8018 	str.w	r8, [sp, #24]
 8016f8e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8016f92:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016f96:	4b9c      	ldr	r3, [pc, #624]	@ (8017208 <_printf_float+0x2c8>)
 8016f98:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8016f9c:	f7e9 fdf6 	bl	8000b8c <__aeabi_dcmpun>
 8016fa0:	bb70      	cbnz	r0, 8017000 <_printf_float+0xc0>
 8016fa2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016fa6:	4b98      	ldr	r3, [pc, #608]	@ (8017208 <_printf_float+0x2c8>)
 8016fa8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8016fac:	f7e9 fdd0 	bl	8000b50 <__aeabi_dcmple>
 8016fb0:	bb30      	cbnz	r0, 8017000 <_printf_float+0xc0>
 8016fb2:	2200      	movs	r2, #0
 8016fb4:	2300      	movs	r3, #0
 8016fb6:	4640      	mov	r0, r8
 8016fb8:	4649      	mov	r1, r9
 8016fba:	f7e9 fdbf 	bl	8000b3c <__aeabi_dcmplt>
 8016fbe:	b110      	cbz	r0, 8016fc6 <_printf_float+0x86>
 8016fc0:	232d      	movs	r3, #45	@ 0x2d
 8016fc2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016fc6:	4a91      	ldr	r2, [pc, #580]	@ (801720c <_printf_float+0x2cc>)
 8016fc8:	4b91      	ldr	r3, [pc, #580]	@ (8017210 <_printf_float+0x2d0>)
 8016fca:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8016fce:	bf94      	ite	ls
 8016fd0:	4690      	movls	r8, r2
 8016fd2:	4698      	movhi	r8, r3
 8016fd4:	2303      	movs	r3, #3
 8016fd6:	6123      	str	r3, [r4, #16]
 8016fd8:	f02b 0304 	bic.w	r3, fp, #4
 8016fdc:	6023      	str	r3, [r4, #0]
 8016fde:	f04f 0900 	mov.w	r9, #0
 8016fe2:	9700      	str	r7, [sp, #0]
 8016fe4:	4633      	mov	r3, r6
 8016fe6:	aa0b      	add	r2, sp, #44	@ 0x2c
 8016fe8:	4621      	mov	r1, r4
 8016fea:	4628      	mov	r0, r5
 8016fec:	f000 f9d2 	bl	8017394 <_printf_common>
 8016ff0:	3001      	adds	r0, #1
 8016ff2:	f040 808d 	bne.w	8017110 <_printf_float+0x1d0>
 8016ff6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016ffa:	b00d      	add	sp, #52	@ 0x34
 8016ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017000:	4642      	mov	r2, r8
 8017002:	464b      	mov	r3, r9
 8017004:	4640      	mov	r0, r8
 8017006:	4649      	mov	r1, r9
 8017008:	f7e9 fdc0 	bl	8000b8c <__aeabi_dcmpun>
 801700c:	b140      	cbz	r0, 8017020 <_printf_float+0xe0>
 801700e:	464b      	mov	r3, r9
 8017010:	2b00      	cmp	r3, #0
 8017012:	bfbc      	itt	lt
 8017014:	232d      	movlt	r3, #45	@ 0x2d
 8017016:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801701a:	4a7e      	ldr	r2, [pc, #504]	@ (8017214 <_printf_float+0x2d4>)
 801701c:	4b7e      	ldr	r3, [pc, #504]	@ (8017218 <_printf_float+0x2d8>)
 801701e:	e7d4      	b.n	8016fca <_printf_float+0x8a>
 8017020:	6863      	ldr	r3, [r4, #4]
 8017022:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8017026:	9206      	str	r2, [sp, #24]
 8017028:	1c5a      	adds	r2, r3, #1
 801702a:	d13b      	bne.n	80170a4 <_printf_float+0x164>
 801702c:	2306      	movs	r3, #6
 801702e:	6063      	str	r3, [r4, #4]
 8017030:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8017034:	2300      	movs	r3, #0
 8017036:	6022      	str	r2, [r4, #0]
 8017038:	9303      	str	r3, [sp, #12]
 801703a:	ab0a      	add	r3, sp, #40	@ 0x28
 801703c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8017040:	ab09      	add	r3, sp, #36	@ 0x24
 8017042:	9300      	str	r3, [sp, #0]
 8017044:	6861      	ldr	r1, [r4, #4]
 8017046:	ec49 8b10 	vmov	d0, r8, r9
 801704a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801704e:	4628      	mov	r0, r5
 8017050:	f7ff fed6 	bl	8016e00 <__cvt>
 8017054:	9b06      	ldr	r3, [sp, #24]
 8017056:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8017058:	2b47      	cmp	r3, #71	@ 0x47
 801705a:	4680      	mov	r8, r0
 801705c:	d129      	bne.n	80170b2 <_printf_float+0x172>
 801705e:	1cc8      	adds	r0, r1, #3
 8017060:	db02      	blt.n	8017068 <_printf_float+0x128>
 8017062:	6863      	ldr	r3, [r4, #4]
 8017064:	4299      	cmp	r1, r3
 8017066:	dd41      	ble.n	80170ec <_printf_float+0x1ac>
 8017068:	f1aa 0a02 	sub.w	sl, sl, #2
 801706c:	fa5f fa8a 	uxtb.w	sl, sl
 8017070:	3901      	subs	r1, #1
 8017072:	4652      	mov	r2, sl
 8017074:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8017078:	9109      	str	r1, [sp, #36]	@ 0x24
 801707a:	f7ff ff26 	bl	8016eca <__exponent>
 801707e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8017080:	1813      	adds	r3, r2, r0
 8017082:	2a01      	cmp	r2, #1
 8017084:	4681      	mov	r9, r0
 8017086:	6123      	str	r3, [r4, #16]
 8017088:	dc02      	bgt.n	8017090 <_printf_float+0x150>
 801708a:	6822      	ldr	r2, [r4, #0]
 801708c:	07d2      	lsls	r2, r2, #31
 801708e:	d501      	bpl.n	8017094 <_printf_float+0x154>
 8017090:	3301      	adds	r3, #1
 8017092:	6123      	str	r3, [r4, #16]
 8017094:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8017098:	2b00      	cmp	r3, #0
 801709a:	d0a2      	beq.n	8016fe2 <_printf_float+0xa2>
 801709c:	232d      	movs	r3, #45	@ 0x2d
 801709e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80170a2:	e79e      	b.n	8016fe2 <_printf_float+0xa2>
 80170a4:	9a06      	ldr	r2, [sp, #24]
 80170a6:	2a47      	cmp	r2, #71	@ 0x47
 80170a8:	d1c2      	bne.n	8017030 <_printf_float+0xf0>
 80170aa:	2b00      	cmp	r3, #0
 80170ac:	d1c0      	bne.n	8017030 <_printf_float+0xf0>
 80170ae:	2301      	movs	r3, #1
 80170b0:	e7bd      	b.n	801702e <_printf_float+0xee>
 80170b2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80170b6:	d9db      	bls.n	8017070 <_printf_float+0x130>
 80170b8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80170bc:	d118      	bne.n	80170f0 <_printf_float+0x1b0>
 80170be:	2900      	cmp	r1, #0
 80170c0:	6863      	ldr	r3, [r4, #4]
 80170c2:	dd0b      	ble.n	80170dc <_printf_float+0x19c>
 80170c4:	6121      	str	r1, [r4, #16]
 80170c6:	b913      	cbnz	r3, 80170ce <_printf_float+0x18e>
 80170c8:	6822      	ldr	r2, [r4, #0]
 80170ca:	07d0      	lsls	r0, r2, #31
 80170cc:	d502      	bpl.n	80170d4 <_printf_float+0x194>
 80170ce:	3301      	adds	r3, #1
 80170d0:	440b      	add	r3, r1
 80170d2:	6123      	str	r3, [r4, #16]
 80170d4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80170d6:	f04f 0900 	mov.w	r9, #0
 80170da:	e7db      	b.n	8017094 <_printf_float+0x154>
 80170dc:	b913      	cbnz	r3, 80170e4 <_printf_float+0x1a4>
 80170de:	6822      	ldr	r2, [r4, #0]
 80170e0:	07d2      	lsls	r2, r2, #31
 80170e2:	d501      	bpl.n	80170e8 <_printf_float+0x1a8>
 80170e4:	3302      	adds	r3, #2
 80170e6:	e7f4      	b.n	80170d2 <_printf_float+0x192>
 80170e8:	2301      	movs	r3, #1
 80170ea:	e7f2      	b.n	80170d2 <_printf_float+0x192>
 80170ec:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80170f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80170f2:	4299      	cmp	r1, r3
 80170f4:	db05      	blt.n	8017102 <_printf_float+0x1c2>
 80170f6:	6823      	ldr	r3, [r4, #0]
 80170f8:	6121      	str	r1, [r4, #16]
 80170fa:	07d8      	lsls	r0, r3, #31
 80170fc:	d5ea      	bpl.n	80170d4 <_printf_float+0x194>
 80170fe:	1c4b      	adds	r3, r1, #1
 8017100:	e7e7      	b.n	80170d2 <_printf_float+0x192>
 8017102:	2900      	cmp	r1, #0
 8017104:	bfd4      	ite	le
 8017106:	f1c1 0202 	rsble	r2, r1, #2
 801710a:	2201      	movgt	r2, #1
 801710c:	4413      	add	r3, r2
 801710e:	e7e0      	b.n	80170d2 <_printf_float+0x192>
 8017110:	6823      	ldr	r3, [r4, #0]
 8017112:	055a      	lsls	r2, r3, #21
 8017114:	d407      	bmi.n	8017126 <_printf_float+0x1e6>
 8017116:	6923      	ldr	r3, [r4, #16]
 8017118:	4642      	mov	r2, r8
 801711a:	4631      	mov	r1, r6
 801711c:	4628      	mov	r0, r5
 801711e:	47b8      	blx	r7
 8017120:	3001      	adds	r0, #1
 8017122:	d12b      	bne.n	801717c <_printf_float+0x23c>
 8017124:	e767      	b.n	8016ff6 <_printf_float+0xb6>
 8017126:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801712a:	f240 80dd 	bls.w	80172e8 <_printf_float+0x3a8>
 801712e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8017132:	2200      	movs	r2, #0
 8017134:	2300      	movs	r3, #0
 8017136:	f7e9 fcf7 	bl	8000b28 <__aeabi_dcmpeq>
 801713a:	2800      	cmp	r0, #0
 801713c:	d033      	beq.n	80171a6 <_printf_float+0x266>
 801713e:	4a37      	ldr	r2, [pc, #220]	@ (801721c <_printf_float+0x2dc>)
 8017140:	2301      	movs	r3, #1
 8017142:	4631      	mov	r1, r6
 8017144:	4628      	mov	r0, r5
 8017146:	47b8      	blx	r7
 8017148:	3001      	adds	r0, #1
 801714a:	f43f af54 	beq.w	8016ff6 <_printf_float+0xb6>
 801714e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8017152:	4543      	cmp	r3, r8
 8017154:	db02      	blt.n	801715c <_printf_float+0x21c>
 8017156:	6823      	ldr	r3, [r4, #0]
 8017158:	07d8      	lsls	r0, r3, #31
 801715a:	d50f      	bpl.n	801717c <_printf_float+0x23c>
 801715c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017160:	4631      	mov	r1, r6
 8017162:	4628      	mov	r0, r5
 8017164:	47b8      	blx	r7
 8017166:	3001      	adds	r0, #1
 8017168:	f43f af45 	beq.w	8016ff6 <_printf_float+0xb6>
 801716c:	f04f 0900 	mov.w	r9, #0
 8017170:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8017174:	f104 0a1a 	add.w	sl, r4, #26
 8017178:	45c8      	cmp	r8, r9
 801717a:	dc09      	bgt.n	8017190 <_printf_float+0x250>
 801717c:	6823      	ldr	r3, [r4, #0]
 801717e:	079b      	lsls	r3, r3, #30
 8017180:	f100 8103 	bmi.w	801738a <_printf_float+0x44a>
 8017184:	68e0      	ldr	r0, [r4, #12]
 8017186:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017188:	4298      	cmp	r0, r3
 801718a:	bfb8      	it	lt
 801718c:	4618      	movlt	r0, r3
 801718e:	e734      	b.n	8016ffa <_printf_float+0xba>
 8017190:	2301      	movs	r3, #1
 8017192:	4652      	mov	r2, sl
 8017194:	4631      	mov	r1, r6
 8017196:	4628      	mov	r0, r5
 8017198:	47b8      	blx	r7
 801719a:	3001      	adds	r0, #1
 801719c:	f43f af2b 	beq.w	8016ff6 <_printf_float+0xb6>
 80171a0:	f109 0901 	add.w	r9, r9, #1
 80171a4:	e7e8      	b.n	8017178 <_printf_float+0x238>
 80171a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80171a8:	2b00      	cmp	r3, #0
 80171aa:	dc39      	bgt.n	8017220 <_printf_float+0x2e0>
 80171ac:	4a1b      	ldr	r2, [pc, #108]	@ (801721c <_printf_float+0x2dc>)
 80171ae:	2301      	movs	r3, #1
 80171b0:	4631      	mov	r1, r6
 80171b2:	4628      	mov	r0, r5
 80171b4:	47b8      	blx	r7
 80171b6:	3001      	adds	r0, #1
 80171b8:	f43f af1d 	beq.w	8016ff6 <_printf_float+0xb6>
 80171bc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80171c0:	ea59 0303 	orrs.w	r3, r9, r3
 80171c4:	d102      	bne.n	80171cc <_printf_float+0x28c>
 80171c6:	6823      	ldr	r3, [r4, #0]
 80171c8:	07d9      	lsls	r1, r3, #31
 80171ca:	d5d7      	bpl.n	801717c <_printf_float+0x23c>
 80171cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80171d0:	4631      	mov	r1, r6
 80171d2:	4628      	mov	r0, r5
 80171d4:	47b8      	blx	r7
 80171d6:	3001      	adds	r0, #1
 80171d8:	f43f af0d 	beq.w	8016ff6 <_printf_float+0xb6>
 80171dc:	f04f 0a00 	mov.w	sl, #0
 80171e0:	f104 0b1a 	add.w	fp, r4, #26
 80171e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80171e6:	425b      	negs	r3, r3
 80171e8:	4553      	cmp	r3, sl
 80171ea:	dc01      	bgt.n	80171f0 <_printf_float+0x2b0>
 80171ec:	464b      	mov	r3, r9
 80171ee:	e793      	b.n	8017118 <_printf_float+0x1d8>
 80171f0:	2301      	movs	r3, #1
 80171f2:	465a      	mov	r2, fp
 80171f4:	4631      	mov	r1, r6
 80171f6:	4628      	mov	r0, r5
 80171f8:	47b8      	blx	r7
 80171fa:	3001      	adds	r0, #1
 80171fc:	f43f aefb 	beq.w	8016ff6 <_printf_float+0xb6>
 8017200:	f10a 0a01 	add.w	sl, sl, #1
 8017204:	e7ee      	b.n	80171e4 <_printf_float+0x2a4>
 8017206:	bf00      	nop
 8017208:	7fefffff 	.word	0x7fefffff
 801720c:	0801abbe 	.word	0x0801abbe
 8017210:	0801abc2 	.word	0x0801abc2
 8017214:	0801abc6 	.word	0x0801abc6
 8017218:	0801abca 	.word	0x0801abca
 801721c:	0801abce 	.word	0x0801abce
 8017220:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8017222:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8017226:	4553      	cmp	r3, sl
 8017228:	bfa8      	it	ge
 801722a:	4653      	movge	r3, sl
 801722c:	2b00      	cmp	r3, #0
 801722e:	4699      	mov	r9, r3
 8017230:	dc36      	bgt.n	80172a0 <_printf_float+0x360>
 8017232:	f04f 0b00 	mov.w	fp, #0
 8017236:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801723a:	f104 021a 	add.w	r2, r4, #26
 801723e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8017240:	9306      	str	r3, [sp, #24]
 8017242:	eba3 0309 	sub.w	r3, r3, r9
 8017246:	455b      	cmp	r3, fp
 8017248:	dc31      	bgt.n	80172ae <_printf_float+0x36e>
 801724a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801724c:	459a      	cmp	sl, r3
 801724e:	dc3a      	bgt.n	80172c6 <_printf_float+0x386>
 8017250:	6823      	ldr	r3, [r4, #0]
 8017252:	07da      	lsls	r2, r3, #31
 8017254:	d437      	bmi.n	80172c6 <_printf_float+0x386>
 8017256:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017258:	ebaa 0903 	sub.w	r9, sl, r3
 801725c:	9b06      	ldr	r3, [sp, #24]
 801725e:	ebaa 0303 	sub.w	r3, sl, r3
 8017262:	4599      	cmp	r9, r3
 8017264:	bfa8      	it	ge
 8017266:	4699      	movge	r9, r3
 8017268:	f1b9 0f00 	cmp.w	r9, #0
 801726c:	dc33      	bgt.n	80172d6 <_printf_float+0x396>
 801726e:	f04f 0800 	mov.w	r8, #0
 8017272:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017276:	f104 0b1a 	add.w	fp, r4, #26
 801727a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801727c:	ebaa 0303 	sub.w	r3, sl, r3
 8017280:	eba3 0309 	sub.w	r3, r3, r9
 8017284:	4543      	cmp	r3, r8
 8017286:	f77f af79 	ble.w	801717c <_printf_float+0x23c>
 801728a:	2301      	movs	r3, #1
 801728c:	465a      	mov	r2, fp
 801728e:	4631      	mov	r1, r6
 8017290:	4628      	mov	r0, r5
 8017292:	47b8      	blx	r7
 8017294:	3001      	adds	r0, #1
 8017296:	f43f aeae 	beq.w	8016ff6 <_printf_float+0xb6>
 801729a:	f108 0801 	add.w	r8, r8, #1
 801729e:	e7ec      	b.n	801727a <_printf_float+0x33a>
 80172a0:	4642      	mov	r2, r8
 80172a2:	4631      	mov	r1, r6
 80172a4:	4628      	mov	r0, r5
 80172a6:	47b8      	blx	r7
 80172a8:	3001      	adds	r0, #1
 80172aa:	d1c2      	bne.n	8017232 <_printf_float+0x2f2>
 80172ac:	e6a3      	b.n	8016ff6 <_printf_float+0xb6>
 80172ae:	2301      	movs	r3, #1
 80172b0:	4631      	mov	r1, r6
 80172b2:	4628      	mov	r0, r5
 80172b4:	9206      	str	r2, [sp, #24]
 80172b6:	47b8      	blx	r7
 80172b8:	3001      	adds	r0, #1
 80172ba:	f43f ae9c 	beq.w	8016ff6 <_printf_float+0xb6>
 80172be:	9a06      	ldr	r2, [sp, #24]
 80172c0:	f10b 0b01 	add.w	fp, fp, #1
 80172c4:	e7bb      	b.n	801723e <_printf_float+0x2fe>
 80172c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80172ca:	4631      	mov	r1, r6
 80172cc:	4628      	mov	r0, r5
 80172ce:	47b8      	blx	r7
 80172d0:	3001      	adds	r0, #1
 80172d2:	d1c0      	bne.n	8017256 <_printf_float+0x316>
 80172d4:	e68f      	b.n	8016ff6 <_printf_float+0xb6>
 80172d6:	9a06      	ldr	r2, [sp, #24]
 80172d8:	464b      	mov	r3, r9
 80172da:	4442      	add	r2, r8
 80172dc:	4631      	mov	r1, r6
 80172de:	4628      	mov	r0, r5
 80172e0:	47b8      	blx	r7
 80172e2:	3001      	adds	r0, #1
 80172e4:	d1c3      	bne.n	801726e <_printf_float+0x32e>
 80172e6:	e686      	b.n	8016ff6 <_printf_float+0xb6>
 80172e8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80172ec:	f1ba 0f01 	cmp.w	sl, #1
 80172f0:	dc01      	bgt.n	80172f6 <_printf_float+0x3b6>
 80172f2:	07db      	lsls	r3, r3, #31
 80172f4:	d536      	bpl.n	8017364 <_printf_float+0x424>
 80172f6:	2301      	movs	r3, #1
 80172f8:	4642      	mov	r2, r8
 80172fa:	4631      	mov	r1, r6
 80172fc:	4628      	mov	r0, r5
 80172fe:	47b8      	blx	r7
 8017300:	3001      	adds	r0, #1
 8017302:	f43f ae78 	beq.w	8016ff6 <_printf_float+0xb6>
 8017306:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801730a:	4631      	mov	r1, r6
 801730c:	4628      	mov	r0, r5
 801730e:	47b8      	blx	r7
 8017310:	3001      	adds	r0, #1
 8017312:	f43f ae70 	beq.w	8016ff6 <_printf_float+0xb6>
 8017316:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801731a:	2200      	movs	r2, #0
 801731c:	2300      	movs	r3, #0
 801731e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8017322:	f7e9 fc01 	bl	8000b28 <__aeabi_dcmpeq>
 8017326:	b9c0      	cbnz	r0, 801735a <_printf_float+0x41a>
 8017328:	4653      	mov	r3, sl
 801732a:	f108 0201 	add.w	r2, r8, #1
 801732e:	4631      	mov	r1, r6
 8017330:	4628      	mov	r0, r5
 8017332:	47b8      	blx	r7
 8017334:	3001      	adds	r0, #1
 8017336:	d10c      	bne.n	8017352 <_printf_float+0x412>
 8017338:	e65d      	b.n	8016ff6 <_printf_float+0xb6>
 801733a:	2301      	movs	r3, #1
 801733c:	465a      	mov	r2, fp
 801733e:	4631      	mov	r1, r6
 8017340:	4628      	mov	r0, r5
 8017342:	47b8      	blx	r7
 8017344:	3001      	adds	r0, #1
 8017346:	f43f ae56 	beq.w	8016ff6 <_printf_float+0xb6>
 801734a:	f108 0801 	add.w	r8, r8, #1
 801734e:	45d0      	cmp	r8, sl
 8017350:	dbf3      	blt.n	801733a <_printf_float+0x3fa>
 8017352:	464b      	mov	r3, r9
 8017354:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8017358:	e6df      	b.n	801711a <_printf_float+0x1da>
 801735a:	f04f 0800 	mov.w	r8, #0
 801735e:	f104 0b1a 	add.w	fp, r4, #26
 8017362:	e7f4      	b.n	801734e <_printf_float+0x40e>
 8017364:	2301      	movs	r3, #1
 8017366:	4642      	mov	r2, r8
 8017368:	e7e1      	b.n	801732e <_printf_float+0x3ee>
 801736a:	2301      	movs	r3, #1
 801736c:	464a      	mov	r2, r9
 801736e:	4631      	mov	r1, r6
 8017370:	4628      	mov	r0, r5
 8017372:	47b8      	blx	r7
 8017374:	3001      	adds	r0, #1
 8017376:	f43f ae3e 	beq.w	8016ff6 <_printf_float+0xb6>
 801737a:	f108 0801 	add.w	r8, r8, #1
 801737e:	68e3      	ldr	r3, [r4, #12]
 8017380:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8017382:	1a5b      	subs	r3, r3, r1
 8017384:	4543      	cmp	r3, r8
 8017386:	dcf0      	bgt.n	801736a <_printf_float+0x42a>
 8017388:	e6fc      	b.n	8017184 <_printf_float+0x244>
 801738a:	f04f 0800 	mov.w	r8, #0
 801738e:	f104 0919 	add.w	r9, r4, #25
 8017392:	e7f4      	b.n	801737e <_printf_float+0x43e>

08017394 <_printf_common>:
 8017394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017398:	4616      	mov	r6, r2
 801739a:	4698      	mov	r8, r3
 801739c:	688a      	ldr	r2, [r1, #8]
 801739e:	690b      	ldr	r3, [r1, #16]
 80173a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80173a4:	4293      	cmp	r3, r2
 80173a6:	bfb8      	it	lt
 80173a8:	4613      	movlt	r3, r2
 80173aa:	6033      	str	r3, [r6, #0]
 80173ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80173b0:	4607      	mov	r7, r0
 80173b2:	460c      	mov	r4, r1
 80173b4:	b10a      	cbz	r2, 80173ba <_printf_common+0x26>
 80173b6:	3301      	adds	r3, #1
 80173b8:	6033      	str	r3, [r6, #0]
 80173ba:	6823      	ldr	r3, [r4, #0]
 80173bc:	0699      	lsls	r1, r3, #26
 80173be:	bf42      	ittt	mi
 80173c0:	6833      	ldrmi	r3, [r6, #0]
 80173c2:	3302      	addmi	r3, #2
 80173c4:	6033      	strmi	r3, [r6, #0]
 80173c6:	6825      	ldr	r5, [r4, #0]
 80173c8:	f015 0506 	ands.w	r5, r5, #6
 80173cc:	d106      	bne.n	80173dc <_printf_common+0x48>
 80173ce:	f104 0a19 	add.w	sl, r4, #25
 80173d2:	68e3      	ldr	r3, [r4, #12]
 80173d4:	6832      	ldr	r2, [r6, #0]
 80173d6:	1a9b      	subs	r3, r3, r2
 80173d8:	42ab      	cmp	r3, r5
 80173da:	dc26      	bgt.n	801742a <_printf_common+0x96>
 80173dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80173e0:	6822      	ldr	r2, [r4, #0]
 80173e2:	3b00      	subs	r3, #0
 80173e4:	bf18      	it	ne
 80173e6:	2301      	movne	r3, #1
 80173e8:	0692      	lsls	r2, r2, #26
 80173ea:	d42b      	bmi.n	8017444 <_printf_common+0xb0>
 80173ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80173f0:	4641      	mov	r1, r8
 80173f2:	4638      	mov	r0, r7
 80173f4:	47c8      	blx	r9
 80173f6:	3001      	adds	r0, #1
 80173f8:	d01e      	beq.n	8017438 <_printf_common+0xa4>
 80173fa:	6823      	ldr	r3, [r4, #0]
 80173fc:	6922      	ldr	r2, [r4, #16]
 80173fe:	f003 0306 	and.w	r3, r3, #6
 8017402:	2b04      	cmp	r3, #4
 8017404:	bf02      	ittt	eq
 8017406:	68e5      	ldreq	r5, [r4, #12]
 8017408:	6833      	ldreq	r3, [r6, #0]
 801740a:	1aed      	subeq	r5, r5, r3
 801740c:	68a3      	ldr	r3, [r4, #8]
 801740e:	bf0c      	ite	eq
 8017410:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017414:	2500      	movne	r5, #0
 8017416:	4293      	cmp	r3, r2
 8017418:	bfc4      	itt	gt
 801741a:	1a9b      	subgt	r3, r3, r2
 801741c:	18ed      	addgt	r5, r5, r3
 801741e:	2600      	movs	r6, #0
 8017420:	341a      	adds	r4, #26
 8017422:	42b5      	cmp	r5, r6
 8017424:	d11a      	bne.n	801745c <_printf_common+0xc8>
 8017426:	2000      	movs	r0, #0
 8017428:	e008      	b.n	801743c <_printf_common+0xa8>
 801742a:	2301      	movs	r3, #1
 801742c:	4652      	mov	r2, sl
 801742e:	4641      	mov	r1, r8
 8017430:	4638      	mov	r0, r7
 8017432:	47c8      	blx	r9
 8017434:	3001      	adds	r0, #1
 8017436:	d103      	bne.n	8017440 <_printf_common+0xac>
 8017438:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801743c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017440:	3501      	adds	r5, #1
 8017442:	e7c6      	b.n	80173d2 <_printf_common+0x3e>
 8017444:	18e1      	adds	r1, r4, r3
 8017446:	1c5a      	adds	r2, r3, #1
 8017448:	2030      	movs	r0, #48	@ 0x30
 801744a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801744e:	4422      	add	r2, r4
 8017450:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8017454:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8017458:	3302      	adds	r3, #2
 801745a:	e7c7      	b.n	80173ec <_printf_common+0x58>
 801745c:	2301      	movs	r3, #1
 801745e:	4622      	mov	r2, r4
 8017460:	4641      	mov	r1, r8
 8017462:	4638      	mov	r0, r7
 8017464:	47c8      	blx	r9
 8017466:	3001      	adds	r0, #1
 8017468:	d0e6      	beq.n	8017438 <_printf_common+0xa4>
 801746a:	3601      	adds	r6, #1
 801746c:	e7d9      	b.n	8017422 <_printf_common+0x8e>
	...

08017470 <_printf_i>:
 8017470:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017474:	7e0f      	ldrb	r7, [r1, #24]
 8017476:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8017478:	2f78      	cmp	r7, #120	@ 0x78
 801747a:	4691      	mov	r9, r2
 801747c:	4680      	mov	r8, r0
 801747e:	460c      	mov	r4, r1
 8017480:	469a      	mov	sl, r3
 8017482:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8017486:	d807      	bhi.n	8017498 <_printf_i+0x28>
 8017488:	2f62      	cmp	r7, #98	@ 0x62
 801748a:	d80a      	bhi.n	80174a2 <_printf_i+0x32>
 801748c:	2f00      	cmp	r7, #0
 801748e:	f000 80d2 	beq.w	8017636 <_printf_i+0x1c6>
 8017492:	2f58      	cmp	r7, #88	@ 0x58
 8017494:	f000 80b9 	beq.w	801760a <_printf_i+0x19a>
 8017498:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801749c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80174a0:	e03a      	b.n	8017518 <_printf_i+0xa8>
 80174a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80174a6:	2b15      	cmp	r3, #21
 80174a8:	d8f6      	bhi.n	8017498 <_printf_i+0x28>
 80174aa:	a101      	add	r1, pc, #4	@ (adr r1, 80174b0 <_printf_i+0x40>)
 80174ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80174b0:	08017509 	.word	0x08017509
 80174b4:	0801751d 	.word	0x0801751d
 80174b8:	08017499 	.word	0x08017499
 80174bc:	08017499 	.word	0x08017499
 80174c0:	08017499 	.word	0x08017499
 80174c4:	08017499 	.word	0x08017499
 80174c8:	0801751d 	.word	0x0801751d
 80174cc:	08017499 	.word	0x08017499
 80174d0:	08017499 	.word	0x08017499
 80174d4:	08017499 	.word	0x08017499
 80174d8:	08017499 	.word	0x08017499
 80174dc:	0801761d 	.word	0x0801761d
 80174e0:	08017547 	.word	0x08017547
 80174e4:	080175d7 	.word	0x080175d7
 80174e8:	08017499 	.word	0x08017499
 80174ec:	08017499 	.word	0x08017499
 80174f0:	0801763f 	.word	0x0801763f
 80174f4:	08017499 	.word	0x08017499
 80174f8:	08017547 	.word	0x08017547
 80174fc:	08017499 	.word	0x08017499
 8017500:	08017499 	.word	0x08017499
 8017504:	080175df 	.word	0x080175df
 8017508:	6833      	ldr	r3, [r6, #0]
 801750a:	1d1a      	adds	r2, r3, #4
 801750c:	681b      	ldr	r3, [r3, #0]
 801750e:	6032      	str	r2, [r6, #0]
 8017510:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017514:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8017518:	2301      	movs	r3, #1
 801751a:	e09d      	b.n	8017658 <_printf_i+0x1e8>
 801751c:	6833      	ldr	r3, [r6, #0]
 801751e:	6820      	ldr	r0, [r4, #0]
 8017520:	1d19      	adds	r1, r3, #4
 8017522:	6031      	str	r1, [r6, #0]
 8017524:	0606      	lsls	r6, r0, #24
 8017526:	d501      	bpl.n	801752c <_printf_i+0xbc>
 8017528:	681d      	ldr	r5, [r3, #0]
 801752a:	e003      	b.n	8017534 <_printf_i+0xc4>
 801752c:	0645      	lsls	r5, r0, #25
 801752e:	d5fb      	bpl.n	8017528 <_printf_i+0xb8>
 8017530:	f9b3 5000 	ldrsh.w	r5, [r3]
 8017534:	2d00      	cmp	r5, #0
 8017536:	da03      	bge.n	8017540 <_printf_i+0xd0>
 8017538:	232d      	movs	r3, #45	@ 0x2d
 801753a:	426d      	negs	r5, r5
 801753c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017540:	4859      	ldr	r0, [pc, #356]	@ (80176a8 <_printf_i+0x238>)
 8017542:	230a      	movs	r3, #10
 8017544:	e011      	b.n	801756a <_printf_i+0xfa>
 8017546:	6821      	ldr	r1, [r4, #0]
 8017548:	6833      	ldr	r3, [r6, #0]
 801754a:	0608      	lsls	r0, r1, #24
 801754c:	f853 5b04 	ldr.w	r5, [r3], #4
 8017550:	d402      	bmi.n	8017558 <_printf_i+0xe8>
 8017552:	0649      	lsls	r1, r1, #25
 8017554:	bf48      	it	mi
 8017556:	b2ad      	uxthmi	r5, r5
 8017558:	2f6f      	cmp	r7, #111	@ 0x6f
 801755a:	4853      	ldr	r0, [pc, #332]	@ (80176a8 <_printf_i+0x238>)
 801755c:	6033      	str	r3, [r6, #0]
 801755e:	bf14      	ite	ne
 8017560:	230a      	movne	r3, #10
 8017562:	2308      	moveq	r3, #8
 8017564:	2100      	movs	r1, #0
 8017566:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801756a:	6866      	ldr	r6, [r4, #4]
 801756c:	60a6      	str	r6, [r4, #8]
 801756e:	2e00      	cmp	r6, #0
 8017570:	bfa2      	ittt	ge
 8017572:	6821      	ldrge	r1, [r4, #0]
 8017574:	f021 0104 	bicge.w	r1, r1, #4
 8017578:	6021      	strge	r1, [r4, #0]
 801757a:	b90d      	cbnz	r5, 8017580 <_printf_i+0x110>
 801757c:	2e00      	cmp	r6, #0
 801757e:	d04b      	beq.n	8017618 <_printf_i+0x1a8>
 8017580:	4616      	mov	r6, r2
 8017582:	fbb5 f1f3 	udiv	r1, r5, r3
 8017586:	fb03 5711 	mls	r7, r3, r1, r5
 801758a:	5dc7      	ldrb	r7, [r0, r7]
 801758c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017590:	462f      	mov	r7, r5
 8017592:	42bb      	cmp	r3, r7
 8017594:	460d      	mov	r5, r1
 8017596:	d9f4      	bls.n	8017582 <_printf_i+0x112>
 8017598:	2b08      	cmp	r3, #8
 801759a:	d10b      	bne.n	80175b4 <_printf_i+0x144>
 801759c:	6823      	ldr	r3, [r4, #0]
 801759e:	07df      	lsls	r7, r3, #31
 80175a0:	d508      	bpl.n	80175b4 <_printf_i+0x144>
 80175a2:	6923      	ldr	r3, [r4, #16]
 80175a4:	6861      	ldr	r1, [r4, #4]
 80175a6:	4299      	cmp	r1, r3
 80175a8:	bfde      	ittt	le
 80175aa:	2330      	movle	r3, #48	@ 0x30
 80175ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 80175b0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80175b4:	1b92      	subs	r2, r2, r6
 80175b6:	6122      	str	r2, [r4, #16]
 80175b8:	f8cd a000 	str.w	sl, [sp]
 80175bc:	464b      	mov	r3, r9
 80175be:	aa03      	add	r2, sp, #12
 80175c0:	4621      	mov	r1, r4
 80175c2:	4640      	mov	r0, r8
 80175c4:	f7ff fee6 	bl	8017394 <_printf_common>
 80175c8:	3001      	adds	r0, #1
 80175ca:	d14a      	bne.n	8017662 <_printf_i+0x1f2>
 80175cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80175d0:	b004      	add	sp, #16
 80175d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80175d6:	6823      	ldr	r3, [r4, #0]
 80175d8:	f043 0320 	orr.w	r3, r3, #32
 80175dc:	6023      	str	r3, [r4, #0]
 80175de:	4833      	ldr	r0, [pc, #204]	@ (80176ac <_printf_i+0x23c>)
 80175e0:	2778      	movs	r7, #120	@ 0x78
 80175e2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80175e6:	6823      	ldr	r3, [r4, #0]
 80175e8:	6831      	ldr	r1, [r6, #0]
 80175ea:	061f      	lsls	r7, r3, #24
 80175ec:	f851 5b04 	ldr.w	r5, [r1], #4
 80175f0:	d402      	bmi.n	80175f8 <_printf_i+0x188>
 80175f2:	065f      	lsls	r7, r3, #25
 80175f4:	bf48      	it	mi
 80175f6:	b2ad      	uxthmi	r5, r5
 80175f8:	6031      	str	r1, [r6, #0]
 80175fa:	07d9      	lsls	r1, r3, #31
 80175fc:	bf44      	itt	mi
 80175fe:	f043 0320 	orrmi.w	r3, r3, #32
 8017602:	6023      	strmi	r3, [r4, #0]
 8017604:	b11d      	cbz	r5, 801760e <_printf_i+0x19e>
 8017606:	2310      	movs	r3, #16
 8017608:	e7ac      	b.n	8017564 <_printf_i+0xf4>
 801760a:	4827      	ldr	r0, [pc, #156]	@ (80176a8 <_printf_i+0x238>)
 801760c:	e7e9      	b.n	80175e2 <_printf_i+0x172>
 801760e:	6823      	ldr	r3, [r4, #0]
 8017610:	f023 0320 	bic.w	r3, r3, #32
 8017614:	6023      	str	r3, [r4, #0]
 8017616:	e7f6      	b.n	8017606 <_printf_i+0x196>
 8017618:	4616      	mov	r6, r2
 801761a:	e7bd      	b.n	8017598 <_printf_i+0x128>
 801761c:	6833      	ldr	r3, [r6, #0]
 801761e:	6825      	ldr	r5, [r4, #0]
 8017620:	6961      	ldr	r1, [r4, #20]
 8017622:	1d18      	adds	r0, r3, #4
 8017624:	6030      	str	r0, [r6, #0]
 8017626:	062e      	lsls	r6, r5, #24
 8017628:	681b      	ldr	r3, [r3, #0]
 801762a:	d501      	bpl.n	8017630 <_printf_i+0x1c0>
 801762c:	6019      	str	r1, [r3, #0]
 801762e:	e002      	b.n	8017636 <_printf_i+0x1c6>
 8017630:	0668      	lsls	r0, r5, #25
 8017632:	d5fb      	bpl.n	801762c <_printf_i+0x1bc>
 8017634:	8019      	strh	r1, [r3, #0]
 8017636:	2300      	movs	r3, #0
 8017638:	6123      	str	r3, [r4, #16]
 801763a:	4616      	mov	r6, r2
 801763c:	e7bc      	b.n	80175b8 <_printf_i+0x148>
 801763e:	6833      	ldr	r3, [r6, #0]
 8017640:	1d1a      	adds	r2, r3, #4
 8017642:	6032      	str	r2, [r6, #0]
 8017644:	681e      	ldr	r6, [r3, #0]
 8017646:	6862      	ldr	r2, [r4, #4]
 8017648:	2100      	movs	r1, #0
 801764a:	4630      	mov	r0, r6
 801764c:	f7e8 fdf0 	bl	8000230 <memchr>
 8017650:	b108      	cbz	r0, 8017656 <_printf_i+0x1e6>
 8017652:	1b80      	subs	r0, r0, r6
 8017654:	6060      	str	r0, [r4, #4]
 8017656:	6863      	ldr	r3, [r4, #4]
 8017658:	6123      	str	r3, [r4, #16]
 801765a:	2300      	movs	r3, #0
 801765c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017660:	e7aa      	b.n	80175b8 <_printf_i+0x148>
 8017662:	6923      	ldr	r3, [r4, #16]
 8017664:	4632      	mov	r2, r6
 8017666:	4649      	mov	r1, r9
 8017668:	4640      	mov	r0, r8
 801766a:	47d0      	blx	sl
 801766c:	3001      	adds	r0, #1
 801766e:	d0ad      	beq.n	80175cc <_printf_i+0x15c>
 8017670:	6823      	ldr	r3, [r4, #0]
 8017672:	079b      	lsls	r3, r3, #30
 8017674:	d413      	bmi.n	801769e <_printf_i+0x22e>
 8017676:	68e0      	ldr	r0, [r4, #12]
 8017678:	9b03      	ldr	r3, [sp, #12]
 801767a:	4298      	cmp	r0, r3
 801767c:	bfb8      	it	lt
 801767e:	4618      	movlt	r0, r3
 8017680:	e7a6      	b.n	80175d0 <_printf_i+0x160>
 8017682:	2301      	movs	r3, #1
 8017684:	4632      	mov	r2, r6
 8017686:	4649      	mov	r1, r9
 8017688:	4640      	mov	r0, r8
 801768a:	47d0      	blx	sl
 801768c:	3001      	adds	r0, #1
 801768e:	d09d      	beq.n	80175cc <_printf_i+0x15c>
 8017690:	3501      	adds	r5, #1
 8017692:	68e3      	ldr	r3, [r4, #12]
 8017694:	9903      	ldr	r1, [sp, #12]
 8017696:	1a5b      	subs	r3, r3, r1
 8017698:	42ab      	cmp	r3, r5
 801769a:	dcf2      	bgt.n	8017682 <_printf_i+0x212>
 801769c:	e7eb      	b.n	8017676 <_printf_i+0x206>
 801769e:	2500      	movs	r5, #0
 80176a0:	f104 0619 	add.w	r6, r4, #25
 80176a4:	e7f5      	b.n	8017692 <_printf_i+0x222>
 80176a6:	bf00      	nop
 80176a8:	0801abd0 	.word	0x0801abd0
 80176ac:	0801abe1 	.word	0x0801abe1

080176b0 <std>:
 80176b0:	2300      	movs	r3, #0
 80176b2:	b510      	push	{r4, lr}
 80176b4:	4604      	mov	r4, r0
 80176b6:	e9c0 3300 	strd	r3, r3, [r0]
 80176ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80176be:	6083      	str	r3, [r0, #8]
 80176c0:	8181      	strh	r1, [r0, #12]
 80176c2:	6643      	str	r3, [r0, #100]	@ 0x64
 80176c4:	81c2      	strh	r2, [r0, #14]
 80176c6:	6183      	str	r3, [r0, #24]
 80176c8:	4619      	mov	r1, r3
 80176ca:	2208      	movs	r2, #8
 80176cc:	305c      	adds	r0, #92	@ 0x5c
 80176ce:	f000 faab 	bl	8017c28 <memset>
 80176d2:	4b0d      	ldr	r3, [pc, #52]	@ (8017708 <std+0x58>)
 80176d4:	6263      	str	r3, [r4, #36]	@ 0x24
 80176d6:	4b0d      	ldr	r3, [pc, #52]	@ (801770c <std+0x5c>)
 80176d8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80176da:	4b0d      	ldr	r3, [pc, #52]	@ (8017710 <std+0x60>)
 80176dc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80176de:	4b0d      	ldr	r3, [pc, #52]	@ (8017714 <std+0x64>)
 80176e0:	6323      	str	r3, [r4, #48]	@ 0x30
 80176e2:	4b0d      	ldr	r3, [pc, #52]	@ (8017718 <std+0x68>)
 80176e4:	6224      	str	r4, [r4, #32]
 80176e6:	429c      	cmp	r4, r3
 80176e8:	d006      	beq.n	80176f8 <std+0x48>
 80176ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80176ee:	4294      	cmp	r4, r2
 80176f0:	d002      	beq.n	80176f8 <std+0x48>
 80176f2:	33d0      	adds	r3, #208	@ 0xd0
 80176f4:	429c      	cmp	r4, r3
 80176f6:	d105      	bne.n	8017704 <std+0x54>
 80176f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80176fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017700:	f000 bbaa 	b.w	8017e58 <__retarget_lock_init_recursive>
 8017704:	bd10      	pop	{r4, pc}
 8017706:	bf00      	nop
 8017708:	080179b5 	.word	0x080179b5
 801770c:	080179d7 	.word	0x080179d7
 8017710:	08017a0f 	.word	0x08017a0f
 8017714:	08017a33 	.word	0x08017a33
 8017718:	20010c94 	.word	0x20010c94

0801771c <stdio_exit_handler>:
 801771c:	4a02      	ldr	r2, [pc, #8]	@ (8017728 <stdio_exit_handler+0xc>)
 801771e:	4903      	ldr	r1, [pc, #12]	@ (801772c <stdio_exit_handler+0x10>)
 8017720:	4803      	ldr	r0, [pc, #12]	@ (8017730 <stdio_exit_handler+0x14>)
 8017722:	f000 b869 	b.w	80177f8 <_fwalk_sglue>
 8017726:	bf00      	nop
 8017728:	200000bc 	.word	0x200000bc
 801772c:	0801995d 	.word	0x0801995d
 8017730:	200000cc 	.word	0x200000cc

08017734 <cleanup_stdio>:
 8017734:	6841      	ldr	r1, [r0, #4]
 8017736:	4b0c      	ldr	r3, [pc, #48]	@ (8017768 <cleanup_stdio+0x34>)
 8017738:	4299      	cmp	r1, r3
 801773a:	b510      	push	{r4, lr}
 801773c:	4604      	mov	r4, r0
 801773e:	d001      	beq.n	8017744 <cleanup_stdio+0x10>
 8017740:	f002 f90c 	bl	801995c <_fflush_r>
 8017744:	68a1      	ldr	r1, [r4, #8]
 8017746:	4b09      	ldr	r3, [pc, #36]	@ (801776c <cleanup_stdio+0x38>)
 8017748:	4299      	cmp	r1, r3
 801774a:	d002      	beq.n	8017752 <cleanup_stdio+0x1e>
 801774c:	4620      	mov	r0, r4
 801774e:	f002 f905 	bl	801995c <_fflush_r>
 8017752:	68e1      	ldr	r1, [r4, #12]
 8017754:	4b06      	ldr	r3, [pc, #24]	@ (8017770 <cleanup_stdio+0x3c>)
 8017756:	4299      	cmp	r1, r3
 8017758:	d004      	beq.n	8017764 <cleanup_stdio+0x30>
 801775a:	4620      	mov	r0, r4
 801775c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017760:	f002 b8fc 	b.w	801995c <_fflush_r>
 8017764:	bd10      	pop	{r4, pc}
 8017766:	bf00      	nop
 8017768:	20010c94 	.word	0x20010c94
 801776c:	20010cfc 	.word	0x20010cfc
 8017770:	20010d64 	.word	0x20010d64

08017774 <global_stdio_init.part.0>:
 8017774:	b510      	push	{r4, lr}
 8017776:	4b0b      	ldr	r3, [pc, #44]	@ (80177a4 <global_stdio_init.part.0+0x30>)
 8017778:	4c0b      	ldr	r4, [pc, #44]	@ (80177a8 <global_stdio_init.part.0+0x34>)
 801777a:	4a0c      	ldr	r2, [pc, #48]	@ (80177ac <global_stdio_init.part.0+0x38>)
 801777c:	601a      	str	r2, [r3, #0]
 801777e:	4620      	mov	r0, r4
 8017780:	2200      	movs	r2, #0
 8017782:	2104      	movs	r1, #4
 8017784:	f7ff ff94 	bl	80176b0 <std>
 8017788:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801778c:	2201      	movs	r2, #1
 801778e:	2109      	movs	r1, #9
 8017790:	f7ff ff8e 	bl	80176b0 <std>
 8017794:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8017798:	2202      	movs	r2, #2
 801779a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801779e:	2112      	movs	r1, #18
 80177a0:	f7ff bf86 	b.w	80176b0 <std>
 80177a4:	20010dcc 	.word	0x20010dcc
 80177a8:	20010c94 	.word	0x20010c94
 80177ac:	0801771d 	.word	0x0801771d

080177b0 <__sfp_lock_acquire>:
 80177b0:	4801      	ldr	r0, [pc, #4]	@ (80177b8 <__sfp_lock_acquire+0x8>)
 80177b2:	f000 bb52 	b.w	8017e5a <__retarget_lock_acquire_recursive>
 80177b6:	bf00      	nop
 80177b8:	20010dd6 	.word	0x20010dd6

080177bc <__sfp_lock_release>:
 80177bc:	4801      	ldr	r0, [pc, #4]	@ (80177c4 <__sfp_lock_release+0x8>)
 80177be:	f000 bb4d 	b.w	8017e5c <__retarget_lock_release_recursive>
 80177c2:	bf00      	nop
 80177c4:	20010dd6 	.word	0x20010dd6

080177c8 <__sinit>:
 80177c8:	b510      	push	{r4, lr}
 80177ca:	4604      	mov	r4, r0
 80177cc:	f7ff fff0 	bl	80177b0 <__sfp_lock_acquire>
 80177d0:	6a23      	ldr	r3, [r4, #32]
 80177d2:	b11b      	cbz	r3, 80177dc <__sinit+0x14>
 80177d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80177d8:	f7ff bff0 	b.w	80177bc <__sfp_lock_release>
 80177dc:	4b04      	ldr	r3, [pc, #16]	@ (80177f0 <__sinit+0x28>)
 80177de:	6223      	str	r3, [r4, #32]
 80177e0:	4b04      	ldr	r3, [pc, #16]	@ (80177f4 <__sinit+0x2c>)
 80177e2:	681b      	ldr	r3, [r3, #0]
 80177e4:	2b00      	cmp	r3, #0
 80177e6:	d1f5      	bne.n	80177d4 <__sinit+0xc>
 80177e8:	f7ff ffc4 	bl	8017774 <global_stdio_init.part.0>
 80177ec:	e7f2      	b.n	80177d4 <__sinit+0xc>
 80177ee:	bf00      	nop
 80177f0:	08017735 	.word	0x08017735
 80177f4:	20010dcc 	.word	0x20010dcc

080177f8 <_fwalk_sglue>:
 80177f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80177fc:	4607      	mov	r7, r0
 80177fe:	4688      	mov	r8, r1
 8017800:	4614      	mov	r4, r2
 8017802:	2600      	movs	r6, #0
 8017804:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017808:	f1b9 0901 	subs.w	r9, r9, #1
 801780c:	d505      	bpl.n	801781a <_fwalk_sglue+0x22>
 801780e:	6824      	ldr	r4, [r4, #0]
 8017810:	2c00      	cmp	r4, #0
 8017812:	d1f7      	bne.n	8017804 <_fwalk_sglue+0xc>
 8017814:	4630      	mov	r0, r6
 8017816:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801781a:	89ab      	ldrh	r3, [r5, #12]
 801781c:	2b01      	cmp	r3, #1
 801781e:	d907      	bls.n	8017830 <_fwalk_sglue+0x38>
 8017820:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017824:	3301      	adds	r3, #1
 8017826:	d003      	beq.n	8017830 <_fwalk_sglue+0x38>
 8017828:	4629      	mov	r1, r5
 801782a:	4638      	mov	r0, r7
 801782c:	47c0      	blx	r8
 801782e:	4306      	orrs	r6, r0
 8017830:	3568      	adds	r5, #104	@ 0x68
 8017832:	e7e9      	b.n	8017808 <_fwalk_sglue+0x10>

08017834 <_fwrite_r>:
 8017834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017838:	9c08      	ldr	r4, [sp, #32]
 801783a:	468a      	mov	sl, r1
 801783c:	4690      	mov	r8, r2
 801783e:	fb02 f903 	mul.w	r9, r2, r3
 8017842:	4606      	mov	r6, r0
 8017844:	b118      	cbz	r0, 801784e <_fwrite_r+0x1a>
 8017846:	6a03      	ldr	r3, [r0, #32]
 8017848:	b90b      	cbnz	r3, 801784e <_fwrite_r+0x1a>
 801784a:	f7ff ffbd 	bl	80177c8 <__sinit>
 801784e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017850:	07dd      	lsls	r5, r3, #31
 8017852:	d405      	bmi.n	8017860 <_fwrite_r+0x2c>
 8017854:	89a3      	ldrh	r3, [r4, #12]
 8017856:	0598      	lsls	r0, r3, #22
 8017858:	d402      	bmi.n	8017860 <_fwrite_r+0x2c>
 801785a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801785c:	f000 fafd 	bl	8017e5a <__retarget_lock_acquire_recursive>
 8017860:	89a3      	ldrh	r3, [r4, #12]
 8017862:	0719      	lsls	r1, r3, #28
 8017864:	d516      	bpl.n	8017894 <_fwrite_r+0x60>
 8017866:	6923      	ldr	r3, [r4, #16]
 8017868:	b1a3      	cbz	r3, 8017894 <_fwrite_r+0x60>
 801786a:	2500      	movs	r5, #0
 801786c:	454d      	cmp	r5, r9
 801786e:	d01f      	beq.n	80178b0 <_fwrite_r+0x7c>
 8017870:	68a7      	ldr	r7, [r4, #8]
 8017872:	f81a 1005 	ldrb.w	r1, [sl, r5]
 8017876:	3f01      	subs	r7, #1
 8017878:	2f00      	cmp	r7, #0
 801787a:	60a7      	str	r7, [r4, #8]
 801787c:	da04      	bge.n	8017888 <_fwrite_r+0x54>
 801787e:	69a3      	ldr	r3, [r4, #24]
 8017880:	429f      	cmp	r7, r3
 8017882:	db0f      	blt.n	80178a4 <_fwrite_r+0x70>
 8017884:	290a      	cmp	r1, #10
 8017886:	d00d      	beq.n	80178a4 <_fwrite_r+0x70>
 8017888:	6823      	ldr	r3, [r4, #0]
 801788a:	1c5a      	adds	r2, r3, #1
 801788c:	6022      	str	r2, [r4, #0]
 801788e:	7019      	strb	r1, [r3, #0]
 8017890:	3501      	adds	r5, #1
 8017892:	e7eb      	b.n	801786c <_fwrite_r+0x38>
 8017894:	4621      	mov	r1, r4
 8017896:	4630      	mov	r0, r6
 8017898:	f000 f946 	bl	8017b28 <__swsetup_r>
 801789c:	2800      	cmp	r0, #0
 801789e:	d0e4      	beq.n	801786a <_fwrite_r+0x36>
 80178a0:	2500      	movs	r5, #0
 80178a2:	e005      	b.n	80178b0 <_fwrite_r+0x7c>
 80178a4:	4622      	mov	r2, r4
 80178a6:	4630      	mov	r0, r6
 80178a8:	f000 f900 	bl	8017aac <__swbuf_r>
 80178ac:	3001      	adds	r0, #1
 80178ae:	d1ef      	bne.n	8017890 <_fwrite_r+0x5c>
 80178b0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80178b2:	07da      	lsls	r2, r3, #31
 80178b4:	d405      	bmi.n	80178c2 <_fwrite_r+0x8e>
 80178b6:	89a3      	ldrh	r3, [r4, #12]
 80178b8:	059b      	lsls	r3, r3, #22
 80178ba:	d402      	bmi.n	80178c2 <_fwrite_r+0x8e>
 80178bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80178be:	f000 facd 	bl	8017e5c <__retarget_lock_release_recursive>
 80178c2:	fbb5 f0f8 	udiv	r0, r5, r8
 80178c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080178cc <fwrite>:
 80178cc:	b507      	push	{r0, r1, r2, lr}
 80178ce:	9300      	str	r3, [sp, #0]
 80178d0:	4613      	mov	r3, r2
 80178d2:	460a      	mov	r2, r1
 80178d4:	4601      	mov	r1, r0
 80178d6:	4803      	ldr	r0, [pc, #12]	@ (80178e4 <fwrite+0x18>)
 80178d8:	6800      	ldr	r0, [r0, #0]
 80178da:	f7ff ffab 	bl	8017834 <_fwrite_r>
 80178de:	b003      	add	sp, #12
 80178e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80178e4:	200000c8 	.word	0x200000c8

080178e8 <iprintf>:
 80178e8:	b40f      	push	{r0, r1, r2, r3}
 80178ea:	b507      	push	{r0, r1, r2, lr}
 80178ec:	4906      	ldr	r1, [pc, #24]	@ (8017908 <iprintf+0x20>)
 80178ee:	ab04      	add	r3, sp, #16
 80178f0:	6808      	ldr	r0, [r1, #0]
 80178f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80178f6:	6881      	ldr	r1, [r0, #8]
 80178f8:	9301      	str	r3, [sp, #4]
 80178fa:	f001 fe93 	bl	8019624 <_vfiprintf_r>
 80178fe:	b003      	add	sp, #12
 8017900:	f85d eb04 	ldr.w	lr, [sp], #4
 8017904:	b004      	add	sp, #16
 8017906:	4770      	bx	lr
 8017908:	200000c8 	.word	0x200000c8

0801790c <sniprintf>:
 801790c:	b40c      	push	{r2, r3}
 801790e:	b530      	push	{r4, r5, lr}
 8017910:	4b17      	ldr	r3, [pc, #92]	@ (8017970 <sniprintf+0x64>)
 8017912:	1e0c      	subs	r4, r1, #0
 8017914:	681d      	ldr	r5, [r3, #0]
 8017916:	b09d      	sub	sp, #116	@ 0x74
 8017918:	da08      	bge.n	801792c <sniprintf+0x20>
 801791a:	238b      	movs	r3, #139	@ 0x8b
 801791c:	602b      	str	r3, [r5, #0]
 801791e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017922:	b01d      	add	sp, #116	@ 0x74
 8017924:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017928:	b002      	add	sp, #8
 801792a:	4770      	bx	lr
 801792c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8017930:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017934:	bf14      	ite	ne
 8017936:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801793a:	4623      	moveq	r3, r4
 801793c:	9304      	str	r3, [sp, #16]
 801793e:	9307      	str	r3, [sp, #28]
 8017940:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017944:	9002      	str	r0, [sp, #8]
 8017946:	9006      	str	r0, [sp, #24]
 8017948:	f8ad 3016 	strh.w	r3, [sp, #22]
 801794c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801794e:	ab21      	add	r3, sp, #132	@ 0x84
 8017950:	a902      	add	r1, sp, #8
 8017952:	4628      	mov	r0, r5
 8017954:	9301      	str	r3, [sp, #4]
 8017956:	f001 fd3f 	bl	80193d8 <_svfiprintf_r>
 801795a:	1c43      	adds	r3, r0, #1
 801795c:	bfbc      	itt	lt
 801795e:	238b      	movlt	r3, #139	@ 0x8b
 8017960:	602b      	strlt	r3, [r5, #0]
 8017962:	2c00      	cmp	r4, #0
 8017964:	d0dd      	beq.n	8017922 <sniprintf+0x16>
 8017966:	9b02      	ldr	r3, [sp, #8]
 8017968:	2200      	movs	r2, #0
 801796a:	701a      	strb	r2, [r3, #0]
 801796c:	e7d9      	b.n	8017922 <sniprintf+0x16>
 801796e:	bf00      	nop
 8017970:	200000c8 	.word	0x200000c8

08017974 <siprintf>:
 8017974:	b40e      	push	{r1, r2, r3}
 8017976:	b500      	push	{lr}
 8017978:	b09c      	sub	sp, #112	@ 0x70
 801797a:	ab1d      	add	r3, sp, #116	@ 0x74
 801797c:	9002      	str	r0, [sp, #8]
 801797e:	9006      	str	r0, [sp, #24]
 8017980:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8017984:	4809      	ldr	r0, [pc, #36]	@ (80179ac <siprintf+0x38>)
 8017986:	9107      	str	r1, [sp, #28]
 8017988:	9104      	str	r1, [sp, #16]
 801798a:	4909      	ldr	r1, [pc, #36]	@ (80179b0 <siprintf+0x3c>)
 801798c:	f853 2b04 	ldr.w	r2, [r3], #4
 8017990:	9105      	str	r1, [sp, #20]
 8017992:	6800      	ldr	r0, [r0, #0]
 8017994:	9301      	str	r3, [sp, #4]
 8017996:	a902      	add	r1, sp, #8
 8017998:	f001 fd1e 	bl	80193d8 <_svfiprintf_r>
 801799c:	9b02      	ldr	r3, [sp, #8]
 801799e:	2200      	movs	r2, #0
 80179a0:	701a      	strb	r2, [r3, #0]
 80179a2:	b01c      	add	sp, #112	@ 0x70
 80179a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80179a8:	b003      	add	sp, #12
 80179aa:	4770      	bx	lr
 80179ac:	200000c8 	.word	0x200000c8
 80179b0:	ffff0208 	.word	0xffff0208

080179b4 <__sread>:
 80179b4:	b510      	push	{r4, lr}
 80179b6:	460c      	mov	r4, r1
 80179b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80179bc:	f000 f9ee 	bl	8017d9c <_read_r>
 80179c0:	2800      	cmp	r0, #0
 80179c2:	bfab      	itete	ge
 80179c4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80179c6:	89a3      	ldrhlt	r3, [r4, #12]
 80179c8:	181b      	addge	r3, r3, r0
 80179ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80179ce:	bfac      	ite	ge
 80179d0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80179d2:	81a3      	strhlt	r3, [r4, #12]
 80179d4:	bd10      	pop	{r4, pc}

080179d6 <__swrite>:
 80179d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80179da:	461f      	mov	r7, r3
 80179dc:	898b      	ldrh	r3, [r1, #12]
 80179de:	05db      	lsls	r3, r3, #23
 80179e0:	4605      	mov	r5, r0
 80179e2:	460c      	mov	r4, r1
 80179e4:	4616      	mov	r6, r2
 80179e6:	d505      	bpl.n	80179f4 <__swrite+0x1e>
 80179e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80179ec:	2302      	movs	r3, #2
 80179ee:	2200      	movs	r2, #0
 80179f0:	f000 f9c2 	bl	8017d78 <_lseek_r>
 80179f4:	89a3      	ldrh	r3, [r4, #12]
 80179f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80179fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80179fe:	81a3      	strh	r3, [r4, #12]
 8017a00:	4632      	mov	r2, r6
 8017a02:	463b      	mov	r3, r7
 8017a04:	4628      	mov	r0, r5
 8017a06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017a0a:	f000 b9e9 	b.w	8017de0 <_write_r>

08017a0e <__sseek>:
 8017a0e:	b510      	push	{r4, lr}
 8017a10:	460c      	mov	r4, r1
 8017a12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017a16:	f000 f9af 	bl	8017d78 <_lseek_r>
 8017a1a:	1c43      	adds	r3, r0, #1
 8017a1c:	89a3      	ldrh	r3, [r4, #12]
 8017a1e:	bf15      	itete	ne
 8017a20:	6560      	strne	r0, [r4, #84]	@ 0x54
 8017a22:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8017a26:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8017a2a:	81a3      	strheq	r3, [r4, #12]
 8017a2c:	bf18      	it	ne
 8017a2e:	81a3      	strhne	r3, [r4, #12]
 8017a30:	bd10      	pop	{r4, pc}

08017a32 <__sclose>:
 8017a32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017a36:	f000 b939 	b.w	8017cac <_close_r>

08017a3a <_vsniprintf_r>:
 8017a3a:	b530      	push	{r4, r5, lr}
 8017a3c:	4614      	mov	r4, r2
 8017a3e:	2c00      	cmp	r4, #0
 8017a40:	b09b      	sub	sp, #108	@ 0x6c
 8017a42:	4605      	mov	r5, r0
 8017a44:	461a      	mov	r2, r3
 8017a46:	da05      	bge.n	8017a54 <_vsniprintf_r+0x1a>
 8017a48:	238b      	movs	r3, #139	@ 0x8b
 8017a4a:	6003      	str	r3, [r0, #0]
 8017a4c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017a50:	b01b      	add	sp, #108	@ 0x6c
 8017a52:	bd30      	pop	{r4, r5, pc}
 8017a54:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8017a58:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017a5c:	bf14      	ite	ne
 8017a5e:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8017a62:	4623      	moveq	r3, r4
 8017a64:	9302      	str	r3, [sp, #8]
 8017a66:	9305      	str	r3, [sp, #20]
 8017a68:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017a6c:	9100      	str	r1, [sp, #0]
 8017a6e:	9104      	str	r1, [sp, #16]
 8017a70:	f8ad 300e 	strh.w	r3, [sp, #14]
 8017a74:	4669      	mov	r1, sp
 8017a76:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8017a78:	f001 fcae 	bl	80193d8 <_svfiprintf_r>
 8017a7c:	1c43      	adds	r3, r0, #1
 8017a7e:	bfbc      	itt	lt
 8017a80:	238b      	movlt	r3, #139	@ 0x8b
 8017a82:	602b      	strlt	r3, [r5, #0]
 8017a84:	2c00      	cmp	r4, #0
 8017a86:	d0e3      	beq.n	8017a50 <_vsniprintf_r+0x16>
 8017a88:	9b00      	ldr	r3, [sp, #0]
 8017a8a:	2200      	movs	r2, #0
 8017a8c:	701a      	strb	r2, [r3, #0]
 8017a8e:	e7df      	b.n	8017a50 <_vsniprintf_r+0x16>

08017a90 <vsniprintf>:
 8017a90:	b507      	push	{r0, r1, r2, lr}
 8017a92:	9300      	str	r3, [sp, #0]
 8017a94:	4613      	mov	r3, r2
 8017a96:	460a      	mov	r2, r1
 8017a98:	4601      	mov	r1, r0
 8017a9a:	4803      	ldr	r0, [pc, #12]	@ (8017aa8 <vsniprintf+0x18>)
 8017a9c:	6800      	ldr	r0, [r0, #0]
 8017a9e:	f7ff ffcc 	bl	8017a3a <_vsniprintf_r>
 8017aa2:	b003      	add	sp, #12
 8017aa4:	f85d fb04 	ldr.w	pc, [sp], #4
 8017aa8:	200000c8 	.word	0x200000c8

08017aac <__swbuf_r>:
 8017aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017aae:	460e      	mov	r6, r1
 8017ab0:	4614      	mov	r4, r2
 8017ab2:	4605      	mov	r5, r0
 8017ab4:	b118      	cbz	r0, 8017abe <__swbuf_r+0x12>
 8017ab6:	6a03      	ldr	r3, [r0, #32]
 8017ab8:	b90b      	cbnz	r3, 8017abe <__swbuf_r+0x12>
 8017aba:	f7ff fe85 	bl	80177c8 <__sinit>
 8017abe:	69a3      	ldr	r3, [r4, #24]
 8017ac0:	60a3      	str	r3, [r4, #8]
 8017ac2:	89a3      	ldrh	r3, [r4, #12]
 8017ac4:	071a      	lsls	r2, r3, #28
 8017ac6:	d501      	bpl.n	8017acc <__swbuf_r+0x20>
 8017ac8:	6923      	ldr	r3, [r4, #16]
 8017aca:	b943      	cbnz	r3, 8017ade <__swbuf_r+0x32>
 8017acc:	4621      	mov	r1, r4
 8017ace:	4628      	mov	r0, r5
 8017ad0:	f000 f82a 	bl	8017b28 <__swsetup_r>
 8017ad4:	b118      	cbz	r0, 8017ade <__swbuf_r+0x32>
 8017ad6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8017ada:	4638      	mov	r0, r7
 8017adc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017ade:	6823      	ldr	r3, [r4, #0]
 8017ae0:	6922      	ldr	r2, [r4, #16]
 8017ae2:	1a98      	subs	r0, r3, r2
 8017ae4:	6963      	ldr	r3, [r4, #20]
 8017ae6:	b2f6      	uxtb	r6, r6
 8017ae8:	4283      	cmp	r3, r0
 8017aea:	4637      	mov	r7, r6
 8017aec:	dc05      	bgt.n	8017afa <__swbuf_r+0x4e>
 8017aee:	4621      	mov	r1, r4
 8017af0:	4628      	mov	r0, r5
 8017af2:	f001 ff33 	bl	801995c <_fflush_r>
 8017af6:	2800      	cmp	r0, #0
 8017af8:	d1ed      	bne.n	8017ad6 <__swbuf_r+0x2a>
 8017afa:	68a3      	ldr	r3, [r4, #8]
 8017afc:	3b01      	subs	r3, #1
 8017afe:	60a3      	str	r3, [r4, #8]
 8017b00:	6823      	ldr	r3, [r4, #0]
 8017b02:	1c5a      	adds	r2, r3, #1
 8017b04:	6022      	str	r2, [r4, #0]
 8017b06:	701e      	strb	r6, [r3, #0]
 8017b08:	6962      	ldr	r2, [r4, #20]
 8017b0a:	1c43      	adds	r3, r0, #1
 8017b0c:	429a      	cmp	r2, r3
 8017b0e:	d004      	beq.n	8017b1a <__swbuf_r+0x6e>
 8017b10:	89a3      	ldrh	r3, [r4, #12]
 8017b12:	07db      	lsls	r3, r3, #31
 8017b14:	d5e1      	bpl.n	8017ada <__swbuf_r+0x2e>
 8017b16:	2e0a      	cmp	r6, #10
 8017b18:	d1df      	bne.n	8017ada <__swbuf_r+0x2e>
 8017b1a:	4621      	mov	r1, r4
 8017b1c:	4628      	mov	r0, r5
 8017b1e:	f001 ff1d 	bl	801995c <_fflush_r>
 8017b22:	2800      	cmp	r0, #0
 8017b24:	d0d9      	beq.n	8017ada <__swbuf_r+0x2e>
 8017b26:	e7d6      	b.n	8017ad6 <__swbuf_r+0x2a>

08017b28 <__swsetup_r>:
 8017b28:	b538      	push	{r3, r4, r5, lr}
 8017b2a:	4b29      	ldr	r3, [pc, #164]	@ (8017bd0 <__swsetup_r+0xa8>)
 8017b2c:	4605      	mov	r5, r0
 8017b2e:	6818      	ldr	r0, [r3, #0]
 8017b30:	460c      	mov	r4, r1
 8017b32:	b118      	cbz	r0, 8017b3c <__swsetup_r+0x14>
 8017b34:	6a03      	ldr	r3, [r0, #32]
 8017b36:	b90b      	cbnz	r3, 8017b3c <__swsetup_r+0x14>
 8017b38:	f7ff fe46 	bl	80177c8 <__sinit>
 8017b3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017b40:	0719      	lsls	r1, r3, #28
 8017b42:	d422      	bmi.n	8017b8a <__swsetup_r+0x62>
 8017b44:	06da      	lsls	r2, r3, #27
 8017b46:	d407      	bmi.n	8017b58 <__swsetup_r+0x30>
 8017b48:	2209      	movs	r2, #9
 8017b4a:	602a      	str	r2, [r5, #0]
 8017b4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017b50:	81a3      	strh	r3, [r4, #12]
 8017b52:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017b56:	e033      	b.n	8017bc0 <__swsetup_r+0x98>
 8017b58:	0758      	lsls	r0, r3, #29
 8017b5a:	d512      	bpl.n	8017b82 <__swsetup_r+0x5a>
 8017b5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017b5e:	b141      	cbz	r1, 8017b72 <__swsetup_r+0x4a>
 8017b60:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017b64:	4299      	cmp	r1, r3
 8017b66:	d002      	beq.n	8017b6e <__swsetup_r+0x46>
 8017b68:	4628      	mov	r0, r5
 8017b6a:	f001 f805 	bl	8018b78 <_free_r>
 8017b6e:	2300      	movs	r3, #0
 8017b70:	6363      	str	r3, [r4, #52]	@ 0x34
 8017b72:	89a3      	ldrh	r3, [r4, #12]
 8017b74:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8017b78:	81a3      	strh	r3, [r4, #12]
 8017b7a:	2300      	movs	r3, #0
 8017b7c:	6063      	str	r3, [r4, #4]
 8017b7e:	6923      	ldr	r3, [r4, #16]
 8017b80:	6023      	str	r3, [r4, #0]
 8017b82:	89a3      	ldrh	r3, [r4, #12]
 8017b84:	f043 0308 	orr.w	r3, r3, #8
 8017b88:	81a3      	strh	r3, [r4, #12]
 8017b8a:	6923      	ldr	r3, [r4, #16]
 8017b8c:	b94b      	cbnz	r3, 8017ba2 <__swsetup_r+0x7a>
 8017b8e:	89a3      	ldrh	r3, [r4, #12]
 8017b90:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8017b94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017b98:	d003      	beq.n	8017ba2 <__swsetup_r+0x7a>
 8017b9a:	4621      	mov	r1, r4
 8017b9c:	4628      	mov	r0, r5
 8017b9e:	f001 ff3d 	bl	8019a1c <__smakebuf_r>
 8017ba2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017ba6:	f013 0201 	ands.w	r2, r3, #1
 8017baa:	d00a      	beq.n	8017bc2 <__swsetup_r+0x9a>
 8017bac:	2200      	movs	r2, #0
 8017bae:	60a2      	str	r2, [r4, #8]
 8017bb0:	6962      	ldr	r2, [r4, #20]
 8017bb2:	4252      	negs	r2, r2
 8017bb4:	61a2      	str	r2, [r4, #24]
 8017bb6:	6922      	ldr	r2, [r4, #16]
 8017bb8:	b942      	cbnz	r2, 8017bcc <__swsetup_r+0xa4>
 8017bba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8017bbe:	d1c5      	bne.n	8017b4c <__swsetup_r+0x24>
 8017bc0:	bd38      	pop	{r3, r4, r5, pc}
 8017bc2:	0799      	lsls	r1, r3, #30
 8017bc4:	bf58      	it	pl
 8017bc6:	6962      	ldrpl	r2, [r4, #20]
 8017bc8:	60a2      	str	r2, [r4, #8]
 8017bca:	e7f4      	b.n	8017bb6 <__swsetup_r+0x8e>
 8017bcc:	2000      	movs	r0, #0
 8017bce:	e7f7      	b.n	8017bc0 <__swsetup_r+0x98>
 8017bd0:	200000c8 	.word	0x200000c8

08017bd4 <memcmp>:
 8017bd4:	b510      	push	{r4, lr}
 8017bd6:	3901      	subs	r1, #1
 8017bd8:	4402      	add	r2, r0
 8017bda:	4290      	cmp	r0, r2
 8017bdc:	d101      	bne.n	8017be2 <memcmp+0xe>
 8017bde:	2000      	movs	r0, #0
 8017be0:	e005      	b.n	8017bee <memcmp+0x1a>
 8017be2:	7803      	ldrb	r3, [r0, #0]
 8017be4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8017be8:	42a3      	cmp	r3, r4
 8017bea:	d001      	beq.n	8017bf0 <memcmp+0x1c>
 8017bec:	1b18      	subs	r0, r3, r4
 8017bee:	bd10      	pop	{r4, pc}
 8017bf0:	3001      	adds	r0, #1
 8017bf2:	e7f2      	b.n	8017bda <memcmp+0x6>

08017bf4 <memmove>:
 8017bf4:	4288      	cmp	r0, r1
 8017bf6:	b510      	push	{r4, lr}
 8017bf8:	eb01 0402 	add.w	r4, r1, r2
 8017bfc:	d902      	bls.n	8017c04 <memmove+0x10>
 8017bfe:	4284      	cmp	r4, r0
 8017c00:	4623      	mov	r3, r4
 8017c02:	d807      	bhi.n	8017c14 <memmove+0x20>
 8017c04:	1e43      	subs	r3, r0, #1
 8017c06:	42a1      	cmp	r1, r4
 8017c08:	d008      	beq.n	8017c1c <memmove+0x28>
 8017c0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017c0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017c12:	e7f8      	b.n	8017c06 <memmove+0x12>
 8017c14:	4402      	add	r2, r0
 8017c16:	4601      	mov	r1, r0
 8017c18:	428a      	cmp	r2, r1
 8017c1a:	d100      	bne.n	8017c1e <memmove+0x2a>
 8017c1c:	bd10      	pop	{r4, pc}
 8017c1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017c22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017c26:	e7f7      	b.n	8017c18 <memmove+0x24>

08017c28 <memset>:
 8017c28:	4402      	add	r2, r0
 8017c2a:	4603      	mov	r3, r0
 8017c2c:	4293      	cmp	r3, r2
 8017c2e:	d100      	bne.n	8017c32 <memset+0xa>
 8017c30:	4770      	bx	lr
 8017c32:	f803 1b01 	strb.w	r1, [r3], #1
 8017c36:	e7f9      	b.n	8017c2c <memset+0x4>

08017c38 <strchr>:
 8017c38:	b2c9      	uxtb	r1, r1
 8017c3a:	4603      	mov	r3, r0
 8017c3c:	4618      	mov	r0, r3
 8017c3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017c42:	b112      	cbz	r2, 8017c4a <strchr+0x12>
 8017c44:	428a      	cmp	r2, r1
 8017c46:	d1f9      	bne.n	8017c3c <strchr+0x4>
 8017c48:	4770      	bx	lr
 8017c4a:	2900      	cmp	r1, #0
 8017c4c:	bf18      	it	ne
 8017c4e:	2000      	movne	r0, #0
 8017c50:	4770      	bx	lr

08017c52 <strncmp>:
 8017c52:	b510      	push	{r4, lr}
 8017c54:	b16a      	cbz	r2, 8017c72 <strncmp+0x20>
 8017c56:	3901      	subs	r1, #1
 8017c58:	1884      	adds	r4, r0, r2
 8017c5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017c5e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8017c62:	429a      	cmp	r2, r3
 8017c64:	d103      	bne.n	8017c6e <strncmp+0x1c>
 8017c66:	42a0      	cmp	r0, r4
 8017c68:	d001      	beq.n	8017c6e <strncmp+0x1c>
 8017c6a:	2a00      	cmp	r2, #0
 8017c6c:	d1f5      	bne.n	8017c5a <strncmp+0x8>
 8017c6e:	1ad0      	subs	r0, r2, r3
 8017c70:	bd10      	pop	{r4, pc}
 8017c72:	4610      	mov	r0, r2
 8017c74:	e7fc      	b.n	8017c70 <strncmp+0x1e>

08017c76 <strstr>:
 8017c76:	780a      	ldrb	r2, [r1, #0]
 8017c78:	b570      	push	{r4, r5, r6, lr}
 8017c7a:	b96a      	cbnz	r2, 8017c98 <strstr+0x22>
 8017c7c:	bd70      	pop	{r4, r5, r6, pc}
 8017c7e:	429a      	cmp	r2, r3
 8017c80:	d109      	bne.n	8017c96 <strstr+0x20>
 8017c82:	460c      	mov	r4, r1
 8017c84:	4605      	mov	r5, r0
 8017c86:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8017c8a:	2b00      	cmp	r3, #0
 8017c8c:	d0f6      	beq.n	8017c7c <strstr+0x6>
 8017c8e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8017c92:	429e      	cmp	r6, r3
 8017c94:	d0f7      	beq.n	8017c86 <strstr+0x10>
 8017c96:	3001      	adds	r0, #1
 8017c98:	7803      	ldrb	r3, [r0, #0]
 8017c9a:	2b00      	cmp	r3, #0
 8017c9c:	d1ef      	bne.n	8017c7e <strstr+0x8>
 8017c9e:	4618      	mov	r0, r3
 8017ca0:	e7ec      	b.n	8017c7c <strstr+0x6>
	...

08017ca4 <_localeconv_r>:
 8017ca4:	4800      	ldr	r0, [pc, #0]	@ (8017ca8 <_localeconv_r+0x4>)
 8017ca6:	4770      	bx	lr
 8017ca8:	20000208 	.word	0x20000208

08017cac <_close_r>:
 8017cac:	b538      	push	{r3, r4, r5, lr}
 8017cae:	4d06      	ldr	r5, [pc, #24]	@ (8017cc8 <_close_r+0x1c>)
 8017cb0:	2300      	movs	r3, #0
 8017cb2:	4604      	mov	r4, r0
 8017cb4:	4608      	mov	r0, r1
 8017cb6:	602b      	str	r3, [r5, #0]
 8017cb8:	f7eb f846 	bl	8002d48 <_close>
 8017cbc:	1c43      	adds	r3, r0, #1
 8017cbe:	d102      	bne.n	8017cc6 <_close_r+0x1a>
 8017cc0:	682b      	ldr	r3, [r5, #0]
 8017cc2:	b103      	cbz	r3, 8017cc6 <_close_r+0x1a>
 8017cc4:	6023      	str	r3, [r4, #0]
 8017cc6:	bd38      	pop	{r3, r4, r5, pc}
 8017cc8:	20010dd0 	.word	0x20010dd0

08017ccc <_reclaim_reent>:
 8017ccc:	4b29      	ldr	r3, [pc, #164]	@ (8017d74 <_reclaim_reent+0xa8>)
 8017cce:	681b      	ldr	r3, [r3, #0]
 8017cd0:	4283      	cmp	r3, r0
 8017cd2:	b570      	push	{r4, r5, r6, lr}
 8017cd4:	4604      	mov	r4, r0
 8017cd6:	d04b      	beq.n	8017d70 <_reclaim_reent+0xa4>
 8017cd8:	69c3      	ldr	r3, [r0, #28]
 8017cda:	b1ab      	cbz	r3, 8017d08 <_reclaim_reent+0x3c>
 8017cdc:	68db      	ldr	r3, [r3, #12]
 8017cde:	b16b      	cbz	r3, 8017cfc <_reclaim_reent+0x30>
 8017ce0:	2500      	movs	r5, #0
 8017ce2:	69e3      	ldr	r3, [r4, #28]
 8017ce4:	68db      	ldr	r3, [r3, #12]
 8017ce6:	5959      	ldr	r1, [r3, r5]
 8017ce8:	2900      	cmp	r1, #0
 8017cea:	d13b      	bne.n	8017d64 <_reclaim_reent+0x98>
 8017cec:	3504      	adds	r5, #4
 8017cee:	2d80      	cmp	r5, #128	@ 0x80
 8017cf0:	d1f7      	bne.n	8017ce2 <_reclaim_reent+0x16>
 8017cf2:	69e3      	ldr	r3, [r4, #28]
 8017cf4:	4620      	mov	r0, r4
 8017cf6:	68d9      	ldr	r1, [r3, #12]
 8017cf8:	f000 ff3e 	bl	8018b78 <_free_r>
 8017cfc:	69e3      	ldr	r3, [r4, #28]
 8017cfe:	6819      	ldr	r1, [r3, #0]
 8017d00:	b111      	cbz	r1, 8017d08 <_reclaim_reent+0x3c>
 8017d02:	4620      	mov	r0, r4
 8017d04:	f000 ff38 	bl	8018b78 <_free_r>
 8017d08:	6961      	ldr	r1, [r4, #20]
 8017d0a:	b111      	cbz	r1, 8017d12 <_reclaim_reent+0x46>
 8017d0c:	4620      	mov	r0, r4
 8017d0e:	f000 ff33 	bl	8018b78 <_free_r>
 8017d12:	69e1      	ldr	r1, [r4, #28]
 8017d14:	b111      	cbz	r1, 8017d1c <_reclaim_reent+0x50>
 8017d16:	4620      	mov	r0, r4
 8017d18:	f000 ff2e 	bl	8018b78 <_free_r>
 8017d1c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8017d1e:	b111      	cbz	r1, 8017d26 <_reclaim_reent+0x5a>
 8017d20:	4620      	mov	r0, r4
 8017d22:	f000 ff29 	bl	8018b78 <_free_r>
 8017d26:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017d28:	b111      	cbz	r1, 8017d30 <_reclaim_reent+0x64>
 8017d2a:	4620      	mov	r0, r4
 8017d2c:	f000 ff24 	bl	8018b78 <_free_r>
 8017d30:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8017d32:	b111      	cbz	r1, 8017d3a <_reclaim_reent+0x6e>
 8017d34:	4620      	mov	r0, r4
 8017d36:	f000 ff1f 	bl	8018b78 <_free_r>
 8017d3a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8017d3c:	b111      	cbz	r1, 8017d44 <_reclaim_reent+0x78>
 8017d3e:	4620      	mov	r0, r4
 8017d40:	f000 ff1a 	bl	8018b78 <_free_r>
 8017d44:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8017d46:	b111      	cbz	r1, 8017d4e <_reclaim_reent+0x82>
 8017d48:	4620      	mov	r0, r4
 8017d4a:	f000 ff15 	bl	8018b78 <_free_r>
 8017d4e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8017d50:	b111      	cbz	r1, 8017d58 <_reclaim_reent+0x8c>
 8017d52:	4620      	mov	r0, r4
 8017d54:	f000 ff10 	bl	8018b78 <_free_r>
 8017d58:	6a23      	ldr	r3, [r4, #32]
 8017d5a:	b14b      	cbz	r3, 8017d70 <_reclaim_reent+0xa4>
 8017d5c:	4620      	mov	r0, r4
 8017d5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017d62:	4718      	bx	r3
 8017d64:	680e      	ldr	r6, [r1, #0]
 8017d66:	4620      	mov	r0, r4
 8017d68:	f000 ff06 	bl	8018b78 <_free_r>
 8017d6c:	4631      	mov	r1, r6
 8017d6e:	e7bb      	b.n	8017ce8 <_reclaim_reent+0x1c>
 8017d70:	bd70      	pop	{r4, r5, r6, pc}
 8017d72:	bf00      	nop
 8017d74:	200000c8 	.word	0x200000c8

08017d78 <_lseek_r>:
 8017d78:	b538      	push	{r3, r4, r5, lr}
 8017d7a:	4d07      	ldr	r5, [pc, #28]	@ (8017d98 <_lseek_r+0x20>)
 8017d7c:	4604      	mov	r4, r0
 8017d7e:	4608      	mov	r0, r1
 8017d80:	4611      	mov	r1, r2
 8017d82:	2200      	movs	r2, #0
 8017d84:	602a      	str	r2, [r5, #0]
 8017d86:	461a      	mov	r2, r3
 8017d88:	f7eb f805 	bl	8002d96 <_lseek>
 8017d8c:	1c43      	adds	r3, r0, #1
 8017d8e:	d102      	bne.n	8017d96 <_lseek_r+0x1e>
 8017d90:	682b      	ldr	r3, [r5, #0]
 8017d92:	b103      	cbz	r3, 8017d96 <_lseek_r+0x1e>
 8017d94:	6023      	str	r3, [r4, #0]
 8017d96:	bd38      	pop	{r3, r4, r5, pc}
 8017d98:	20010dd0 	.word	0x20010dd0

08017d9c <_read_r>:
 8017d9c:	b538      	push	{r3, r4, r5, lr}
 8017d9e:	4d07      	ldr	r5, [pc, #28]	@ (8017dbc <_read_r+0x20>)
 8017da0:	4604      	mov	r4, r0
 8017da2:	4608      	mov	r0, r1
 8017da4:	4611      	mov	r1, r2
 8017da6:	2200      	movs	r2, #0
 8017da8:	602a      	str	r2, [r5, #0]
 8017daa:	461a      	mov	r2, r3
 8017dac:	f7ea ff93 	bl	8002cd6 <_read>
 8017db0:	1c43      	adds	r3, r0, #1
 8017db2:	d102      	bne.n	8017dba <_read_r+0x1e>
 8017db4:	682b      	ldr	r3, [r5, #0]
 8017db6:	b103      	cbz	r3, 8017dba <_read_r+0x1e>
 8017db8:	6023      	str	r3, [r4, #0]
 8017dba:	bd38      	pop	{r3, r4, r5, pc}
 8017dbc:	20010dd0 	.word	0x20010dd0

08017dc0 <_sbrk_r>:
 8017dc0:	b538      	push	{r3, r4, r5, lr}
 8017dc2:	4d06      	ldr	r5, [pc, #24]	@ (8017ddc <_sbrk_r+0x1c>)
 8017dc4:	2300      	movs	r3, #0
 8017dc6:	4604      	mov	r4, r0
 8017dc8:	4608      	mov	r0, r1
 8017dca:	602b      	str	r3, [r5, #0]
 8017dcc:	f7ea fff0 	bl	8002db0 <_sbrk>
 8017dd0:	1c43      	adds	r3, r0, #1
 8017dd2:	d102      	bne.n	8017dda <_sbrk_r+0x1a>
 8017dd4:	682b      	ldr	r3, [r5, #0]
 8017dd6:	b103      	cbz	r3, 8017dda <_sbrk_r+0x1a>
 8017dd8:	6023      	str	r3, [r4, #0]
 8017dda:	bd38      	pop	{r3, r4, r5, pc}
 8017ddc:	20010dd0 	.word	0x20010dd0

08017de0 <_write_r>:
 8017de0:	b538      	push	{r3, r4, r5, lr}
 8017de2:	4d07      	ldr	r5, [pc, #28]	@ (8017e00 <_write_r+0x20>)
 8017de4:	4604      	mov	r4, r0
 8017de6:	4608      	mov	r0, r1
 8017de8:	4611      	mov	r1, r2
 8017dea:	2200      	movs	r2, #0
 8017dec:	602a      	str	r2, [r5, #0]
 8017dee:	461a      	mov	r2, r3
 8017df0:	f7ea ff8e 	bl	8002d10 <_write>
 8017df4:	1c43      	adds	r3, r0, #1
 8017df6:	d102      	bne.n	8017dfe <_write_r+0x1e>
 8017df8:	682b      	ldr	r3, [r5, #0]
 8017dfa:	b103      	cbz	r3, 8017dfe <_write_r+0x1e>
 8017dfc:	6023      	str	r3, [r4, #0]
 8017dfe:	bd38      	pop	{r3, r4, r5, pc}
 8017e00:	20010dd0 	.word	0x20010dd0

08017e04 <__errno>:
 8017e04:	4b01      	ldr	r3, [pc, #4]	@ (8017e0c <__errno+0x8>)
 8017e06:	6818      	ldr	r0, [r3, #0]
 8017e08:	4770      	bx	lr
 8017e0a:	bf00      	nop
 8017e0c:	200000c8 	.word	0x200000c8

08017e10 <__libc_init_array>:
 8017e10:	b570      	push	{r4, r5, r6, lr}
 8017e12:	4d0d      	ldr	r5, [pc, #52]	@ (8017e48 <__libc_init_array+0x38>)
 8017e14:	4c0d      	ldr	r4, [pc, #52]	@ (8017e4c <__libc_init_array+0x3c>)
 8017e16:	1b64      	subs	r4, r4, r5
 8017e18:	10a4      	asrs	r4, r4, #2
 8017e1a:	2600      	movs	r6, #0
 8017e1c:	42a6      	cmp	r6, r4
 8017e1e:	d109      	bne.n	8017e34 <__libc_init_array+0x24>
 8017e20:	4d0b      	ldr	r5, [pc, #44]	@ (8017e50 <__libc_init_array+0x40>)
 8017e22:	4c0c      	ldr	r4, [pc, #48]	@ (8017e54 <__libc_init_array+0x44>)
 8017e24:	f001 fec2 	bl	8019bac <_init>
 8017e28:	1b64      	subs	r4, r4, r5
 8017e2a:	10a4      	asrs	r4, r4, #2
 8017e2c:	2600      	movs	r6, #0
 8017e2e:	42a6      	cmp	r6, r4
 8017e30:	d105      	bne.n	8017e3e <__libc_init_array+0x2e>
 8017e32:	bd70      	pop	{r4, r5, r6, pc}
 8017e34:	f855 3b04 	ldr.w	r3, [r5], #4
 8017e38:	4798      	blx	r3
 8017e3a:	3601      	adds	r6, #1
 8017e3c:	e7ee      	b.n	8017e1c <__libc_init_array+0xc>
 8017e3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8017e42:	4798      	blx	r3
 8017e44:	3601      	adds	r6, #1
 8017e46:	e7f2      	b.n	8017e2e <__libc_init_array+0x1e>
 8017e48:	0801ae24 	.word	0x0801ae24
 8017e4c:	0801ae24 	.word	0x0801ae24
 8017e50:	0801ae24 	.word	0x0801ae24
 8017e54:	0801ae2c 	.word	0x0801ae2c

08017e58 <__retarget_lock_init_recursive>:
 8017e58:	4770      	bx	lr

08017e5a <__retarget_lock_acquire_recursive>:
 8017e5a:	4770      	bx	lr

08017e5c <__retarget_lock_release_recursive>:
 8017e5c:	4770      	bx	lr

08017e5e <strcpy>:
 8017e5e:	4603      	mov	r3, r0
 8017e60:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017e64:	f803 2b01 	strb.w	r2, [r3], #1
 8017e68:	2a00      	cmp	r2, #0
 8017e6a:	d1f9      	bne.n	8017e60 <strcpy+0x2>
 8017e6c:	4770      	bx	lr

08017e6e <memcpy>:
 8017e6e:	440a      	add	r2, r1
 8017e70:	4291      	cmp	r1, r2
 8017e72:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8017e76:	d100      	bne.n	8017e7a <memcpy+0xc>
 8017e78:	4770      	bx	lr
 8017e7a:	b510      	push	{r4, lr}
 8017e7c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017e80:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017e84:	4291      	cmp	r1, r2
 8017e86:	d1f9      	bne.n	8017e7c <memcpy+0xe>
 8017e88:	bd10      	pop	{r4, pc}
	...

08017e8c <__assert_func>:
 8017e8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017e8e:	4614      	mov	r4, r2
 8017e90:	461a      	mov	r2, r3
 8017e92:	4b09      	ldr	r3, [pc, #36]	@ (8017eb8 <__assert_func+0x2c>)
 8017e94:	681b      	ldr	r3, [r3, #0]
 8017e96:	4605      	mov	r5, r0
 8017e98:	68d8      	ldr	r0, [r3, #12]
 8017e9a:	b954      	cbnz	r4, 8017eb2 <__assert_func+0x26>
 8017e9c:	4b07      	ldr	r3, [pc, #28]	@ (8017ebc <__assert_func+0x30>)
 8017e9e:	461c      	mov	r4, r3
 8017ea0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017ea4:	9100      	str	r1, [sp, #0]
 8017ea6:	462b      	mov	r3, r5
 8017ea8:	4905      	ldr	r1, [pc, #20]	@ (8017ec0 <__assert_func+0x34>)
 8017eaa:	f001 fd7f 	bl	80199ac <fiprintf>
 8017eae:	f001 fe13 	bl	8019ad8 <abort>
 8017eb2:	4b04      	ldr	r3, [pc, #16]	@ (8017ec4 <__assert_func+0x38>)
 8017eb4:	e7f4      	b.n	8017ea0 <__assert_func+0x14>
 8017eb6:	bf00      	nop
 8017eb8:	200000c8 	.word	0x200000c8
 8017ebc:	0801ac2d 	.word	0x0801ac2d
 8017ec0:	0801abff 	.word	0x0801abff
 8017ec4:	0801abf2 	.word	0x0801abf2

08017ec8 <quorem>:
 8017ec8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ecc:	6903      	ldr	r3, [r0, #16]
 8017ece:	690c      	ldr	r4, [r1, #16]
 8017ed0:	42a3      	cmp	r3, r4
 8017ed2:	4607      	mov	r7, r0
 8017ed4:	db7e      	blt.n	8017fd4 <quorem+0x10c>
 8017ed6:	3c01      	subs	r4, #1
 8017ed8:	f101 0814 	add.w	r8, r1, #20
 8017edc:	00a3      	lsls	r3, r4, #2
 8017ede:	f100 0514 	add.w	r5, r0, #20
 8017ee2:	9300      	str	r3, [sp, #0]
 8017ee4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017ee8:	9301      	str	r3, [sp, #4]
 8017eea:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8017eee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017ef2:	3301      	adds	r3, #1
 8017ef4:	429a      	cmp	r2, r3
 8017ef6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8017efa:	fbb2 f6f3 	udiv	r6, r2, r3
 8017efe:	d32e      	bcc.n	8017f5e <quorem+0x96>
 8017f00:	f04f 0a00 	mov.w	sl, #0
 8017f04:	46c4      	mov	ip, r8
 8017f06:	46ae      	mov	lr, r5
 8017f08:	46d3      	mov	fp, sl
 8017f0a:	f85c 3b04 	ldr.w	r3, [ip], #4
 8017f0e:	b298      	uxth	r0, r3
 8017f10:	fb06 a000 	mla	r0, r6, r0, sl
 8017f14:	0c02      	lsrs	r2, r0, #16
 8017f16:	0c1b      	lsrs	r3, r3, #16
 8017f18:	fb06 2303 	mla	r3, r6, r3, r2
 8017f1c:	f8de 2000 	ldr.w	r2, [lr]
 8017f20:	b280      	uxth	r0, r0
 8017f22:	b292      	uxth	r2, r2
 8017f24:	1a12      	subs	r2, r2, r0
 8017f26:	445a      	add	r2, fp
 8017f28:	f8de 0000 	ldr.w	r0, [lr]
 8017f2c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017f30:	b29b      	uxth	r3, r3
 8017f32:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8017f36:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8017f3a:	b292      	uxth	r2, r2
 8017f3c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8017f40:	45e1      	cmp	r9, ip
 8017f42:	f84e 2b04 	str.w	r2, [lr], #4
 8017f46:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8017f4a:	d2de      	bcs.n	8017f0a <quorem+0x42>
 8017f4c:	9b00      	ldr	r3, [sp, #0]
 8017f4e:	58eb      	ldr	r3, [r5, r3]
 8017f50:	b92b      	cbnz	r3, 8017f5e <quorem+0x96>
 8017f52:	9b01      	ldr	r3, [sp, #4]
 8017f54:	3b04      	subs	r3, #4
 8017f56:	429d      	cmp	r5, r3
 8017f58:	461a      	mov	r2, r3
 8017f5a:	d32f      	bcc.n	8017fbc <quorem+0xf4>
 8017f5c:	613c      	str	r4, [r7, #16]
 8017f5e:	4638      	mov	r0, r7
 8017f60:	f001 f8ce 	bl	8019100 <__mcmp>
 8017f64:	2800      	cmp	r0, #0
 8017f66:	db25      	blt.n	8017fb4 <quorem+0xec>
 8017f68:	4629      	mov	r1, r5
 8017f6a:	2000      	movs	r0, #0
 8017f6c:	f858 2b04 	ldr.w	r2, [r8], #4
 8017f70:	f8d1 c000 	ldr.w	ip, [r1]
 8017f74:	fa1f fe82 	uxth.w	lr, r2
 8017f78:	fa1f f38c 	uxth.w	r3, ip
 8017f7c:	eba3 030e 	sub.w	r3, r3, lr
 8017f80:	4403      	add	r3, r0
 8017f82:	0c12      	lsrs	r2, r2, #16
 8017f84:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8017f88:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8017f8c:	b29b      	uxth	r3, r3
 8017f8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017f92:	45c1      	cmp	r9, r8
 8017f94:	f841 3b04 	str.w	r3, [r1], #4
 8017f98:	ea4f 4022 	mov.w	r0, r2, asr #16
 8017f9c:	d2e6      	bcs.n	8017f6c <quorem+0xa4>
 8017f9e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017fa2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017fa6:	b922      	cbnz	r2, 8017fb2 <quorem+0xea>
 8017fa8:	3b04      	subs	r3, #4
 8017faa:	429d      	cmp	r5, r3
 8017fac:	461a      	mov	r2, r3
 8017fae:	d30b      	bcc.n	8017fc8 <quorem+0x100>
 8017fb0:	613c      	str	r4, [r7, #16]
 8017fb2:	3601      	adds	r6, #1
 8017fb4:	4630      	mov	r0, r6
 8017fb6:	b003      	add	sp, #12
 8017fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017fbc:	6812      	ldr	r2, [r2, #0]
 8017fbe:	3b04      	subs	r3, #4
 8017fc0:	2a00      	cmp	r2, #0
 8017fc2:	d1cb      	bne.n	8017f5c <quorem+0x94>
 8017fc4:	3c01      	subs	r4, #1
 8017fc6:	e7c6      	b.n	8017f56 <quorem+0x8e>
 8017fc8:	6812      	ldr	r2, [r2, #0]
 8017fca:	3b04      	subs	r3, #4
 8017fcc:	2a00      	cmp	r2, #0
 8017fce:	d1ef      	bne.n	8017fb0 <quorem+0xe8>
 8017fd0:	3c01      	subs	r4, #1
 8017fd2:	e7ea      	b.n	8017faa <quorem+0xe2>
 8017fd4:	2000      	movs	r0, #0
 8017fd6:	e7ee      	b.n	8017fb6 <quorem+0xee>

08017fd8 <_dtoa_r>:
 8017fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017fdc:	69c7      	ldr	r7, [r0, #28]
 8017fde:	b099      	sub	sp, #100	@ 0x64
 8017fe0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8017fe4:	ec55 4b10 	vmov	r4, r5, d0
 8017fe8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8017fea:	9109      	str	r1, [sp, #36]	@ 0x24
 8017fec:	4683      	mov	fp, r0
 8017fee:	920e      	str	r2, [sp, #56]	@ 0x38
 8017ff0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8017ff2:	b97f      	cbnz	r7, 8018014 <_dtoa_r+0x3c>
 8017ff4:	2010      	movs	r0, #16
 8017ff6:	f7fe fd2b 	bl	8016a50 <malloc>
 8017ffa:	4602      	mov	r2, r0
 8017ffc:	f8cb 001c 	str.w	r0, [fp, #28]
 8018000:	b920      	cbnz	r0, 801800c <_dtoa_r+0x34>
 8018002:	4ba7      	ldr	r3, [pc, #668]	@ (80182a0 <_dtoa_r+0x2c8>)
 8018004:	21ef      	movs	r1, #239	@ 0xef
 8018006:	48a7      	ldr	r0, [pc, #668]	@ (80182a4 <_dtoa_r+0x2cc>)
 8018008:	f7ff ff40 	bl	8017e8c <__assert_func>
 801800c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8018010:	6007      	str	r7, [r0, #0]
 8018012:	60c7      	str	r7, [r0, #12]
 8018014:	f8db 301c 	ldr.w	r3, [fp, #28]
 8018018:	6819      	ldr	r1, [r3, #0]
 801801a:	b159      	cbz	r1, 8018034 <_dtoa_r+0x5c>
 801801c:	685a      	ldr	r2, [r3, #4]
 801801e:	604a      	str	r2, [r1, #4]
 8018020:	2301      	movs	r3, #1
 8018022:	4093      	lsls	r3, r2
 8018024:	608b      	str	r3, [r1, #8]
 8018026:	4658      	mov	r0, fp
 8018028:	f000 fe30 	bl	8018c8c <_Bfree>
 801802c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8018030:	2200      	movs	r2, #0
 8018032:	601a      	str	r2, [r3, #0]
 8018034:	1e2b      	subs	r3, r5, #0
 8018036:	bfb9      	ittee	lt
 8018038:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801803c:	9303      	strlt	r3, [sp, #12]
 801803e:	2300      	movge	r3, #0
 8018040:	6033      	strge	r3, [r6, #0]
 8018042:	9f03      	ldr	r7, [sp, #12]
 8018044:	4b98      	ldr	r3, [pc, #608]	@ (80182a8 <_dtoa_r+0x2d0>)
 8018046:	bfbc      	itt	lt
 8018048:	2201      	movlt	r2, #1
 801804a:	6032      	strlt	r2, [r6, #0]
 801804c:	43bb      	bics	r3, r7
 801804e:	d112      	bne.n	8018076 <_dtoa_r+0x9e>
 8018050:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8018052:	f242 730f 	movw	r3, #9999	@ 0x270f
 8018056:	6013      	str	r3, [r2, #0]
 8018058:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801805c:	4323      	orrs	r3, r4
 801805e:	f000 854d 	beq.w	8018afc <_dtoa_r+0xb24>
 8018062:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8018064:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80182bc <_dtoa_r+0x2e4>
 8018068:	2b00      	cmp	r3, #0
 801806a:	f000 854f 	beq.w	8018b0c <_dtoa_r+0xb34>
 801806e:	f10a 0303 	add.w	r3, sl, #3
 8018072:	f000 bd49 	b.w	8018b08 <_dtoa_r+0xb30>
 8018076:	ed9d 7b02 	vldr	d7, [sp, #8]
 801807a:	2200      	movs	r2, #0
 801807c:	ec51 0b17 	vmov	r0, r1, d7
 8018080:	2300      	movs	r3, #0
 8018082:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8018086:	f7e8 fd4f 	bl	8000b28 <__aeabi_dcmpeq>
 801808a:	4680      	mov	r8, r0
 801808c:	b158      	cbz	r0, 80180a6 <_dtoa_r+0xce>
 801808e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8018090:	2301      	movs	r3, #1
 8018092:	6013      	str	r3, [r2, #0]
 8018094:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8018096:	b113      	cbz	r3, 801809e <_dtoa_r+0xc6>
 8018098:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801809a:	4b84      	ldr	r3, [pc, #528]	@ (80182ac <_dtoa_r+0x2d4>)
 801809c:	6013      	str	r3, [r2, #0]
 801809e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80182c0 <_dtoa_r+0x2e8>
 80180a2:	f000 bd33 	b.w	8018b0c <_dtoa_r+0xb34>
 80180a6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80180aa:	aa16      	add	r2, sp, #88	@ 0x58
 80180ac:	a917      	add	r1, sp, #92	@ 0x5c
 80180ae:	4658      	mov	r0, fp
 80180b0:	f001 f8d6 	bl	8019260 <__d2b>
 80180b4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80180b8:	4681      	mov	r9, r0
 80180ba:	2e00      	cmp	r6, #0
 80180bc:	d077      	beq.n	80181ae <_dtoa_r+0x1d6>
 80180be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80180c0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80180c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80180c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80180cc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80180d0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80180d4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80180d8:	4619      	mov	r1, r3
 80180da:	2200      	movs	r2, #0
 80180dc:	4b74      	ldr	r3, [pc, #464]	@ (80182b0 <_dtoa_r+0x2d8>)
 80180de:	f7e8 f903 	bl	80002e8 <__aeabi_dsub>
 80180e2:	a369      	add	r3, pc, #420	@ (adr r3, 8018288 <_dtoa_r+0x2b0>)
 80180e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180e8:	f7e8 fab6 	bl	8000658 <__aeabi_dmul>
 80180ec:	a368      	add	r3, pc, #416	@ (adr r3, 8018290 <_dtoa_r+0x2b8>)
 80180ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180f2:	f7e8 f8fb 	bl	80002ec <__adddf3>
 80180f6:	4604      	mov	r4, r0
 80180f8:	4630      	mov	r0, r6
 80180fa:	460d      	mov	r5, r1
 80180fc:	f7e8 fa42 	bl	8000584 <__aeabi_i2d>
 8018100:	a365      	add	r3, pc, #404	@ (adr r3, 8018298 <_dtoa_r+0x2c0>)
 8018102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018106:	f7e8 faa7 	bl	8000658 <__aeabi_dmul>
 801810a:	4602      	mov	r2, r0
 801810c:	460b      	mov	r3, r1
 801810e:	4620      	mov	r0, r4
 8018110:	4629      	mov	r1, r5
 8018112:	f7e8 f8eb 	bl	80002ec <__adddf3>
 8018116:	4604      	mov	r4, r0
 8018118:	460d      	mov	r5, r1
 801811a:	f7e8 fd4d 	bl	8000bb8 <__aeabi_d2iz>
 801811e:	2200      	movs	r2, #0
 8018120:	4607      	mov	r7, r0
 8018122:	2300      	movs	r3, #0
 8018124:	4620      	mov	r0, r4
 8018126:	4629      	mov	r1, r5
 8018128:	f7e8 fd08 	bl	8000b3c <__aeabi_dcmplt>
 801812c:	b140      	cbz	r0, 8018140 <_dtoa_r+0x168>
 801812e:	4638      	mov	r0, r7
 8018130:	f7e8 fa28 	bl	8000584 <__aeabi_i2d>
 8018134:	4622      	mov	r2, r4
 8018136:	462b      	mov	r3, r5
 8018138:	f7e8 fcf6 	bl	8000b28 <__aeabi_dcmpeq>
 801813c:	b900      	cbnz	r0, 8018140 <_dtoa_r+0x168>
 801813e:	3f01      	subs	r7, #1
 8018140:	2f16      	cmp	r7, #22
 8018142:	d851      	bhi.n	80181e8 <_dtoa_r+0x210>
 8018144:	4b5b      	ldr	r3, [pc, #364]	@ (80182b4 <_dtoa_r+0x2dc>)
 8018146:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801814a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801814e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8018152:	f7e8 fcf3 	bl	8000b3c <__aeabi_dcmplt>
 8018156:	2800      	cmp	r0, #0
 8018158:	d048      	beq.n	80181ec <_dtoa_r+0x214>
 801815a:	3f01      	subs	r7, #1
 801815c:	2300      	movs	r3, #0
 801815e:	9312      	str	r3, [sp, #72]	@ 0x48
 8018160:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8018162:	1b9b      	subs	r3, r3, r6
 8018164:	1e5a      	subs	r2, r3, #1
 8018166:	bf44      	itt	mi
 8018168:	f1c3 0801 	rsbmi	r8, r3, #1
 801816c:	2300      	movmi	r3, #0
 801816e:	9208      	str	r2, [sp, #32]
 8018170:	bf54      	ite	pl
 8018172:	f04f 0800 	movpl.w	r8, #0
 8018176:	9308      	strmi	r3, [sp, #32]
 8018178:	2f00      	cmp	r7, #0
 801817a:	db39      	blt.n	80181f0 <_dtoa_r+0x218>
 801817c:	9b08      	ldr	r3, [sp, #32]
 801817e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8018180:	443b      	add	r3, r7
 8018182:	9308      	str	r3, [sp, #32]
 8018184:	2300      	movs	r3, #0
 8018186:	930a      	str	r3, [sp, #40]	@ 0x28
 8018188:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801818a:	2b09      	cmp	r3, #9
 801818c:	d864      	bhi.n	8018258 <_dtoa_r+0x280>
 801818e:	2b05      	cmp	r3, #5
 8018190:	bfc4      	itt	gt
 8018192:	3b04      	subgt	r3, #4
 8018194:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8018196:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018198:	f1a3 0302 	sub.w	r3, r3, #2
 801819c:	bfcc      	ite	gt
 801819e:	2400      	movgt	r4, #0
 80181a0:	2401      	movle	r4, #1
 80181a2:	2b03      	cmp	r3, #3
 80181a4:	d863      	bhi.n	801826e <_dtoa_r+0x296>
 80181a6:	e8df f003 	tbb	[pc, r3]
 80181aa:	372a      	.short	0x372a
 80181ac:	5535      	.short	0x5535
 80181ae:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80181b2:	441e      	add	r6, r3
 80181b4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80181b8:	2b20      	cmp	r3, #32
 80181ba:	bfc1      	itttt	gt
 80181bc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80181c0:	409f      	lslgt	r7, r3
 80181c2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80181c6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80181ca:	bfd6      	itet	le
 80181cc:	f1c3 0320 	rsble	r3, r3, #32
 80181d0:	ea47 0003 	orrgt.w	r0, r7, r3
 80181d4:	fa04 f003 	lslle.w	r0, r4, r3
 80181d8:	f7e8 f9c4 	bl	8000564 <__aeabi_ui2d>
 80181dc:	2201      	movs	r2, #1
 80181de:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80181e2:	3e01      	subs	r6, #1
 80181e4:	9214      	str	r2, [sp, #80]	@ 0x50
 80181e6:	e777      	b.n	80180d8 <_dtoa_r+0x100>
 80181e8:	2301      	movs	r3, #1
 80181ea:	e7b8      	b.n	801815e <_dtoa_r+0x186>
 80181ec:	9012      	str	r0, [sp, #72]	@ 0x48
 80181ee:	e7b7      	b.n	8018160 <_dtoa_r+0x188>
 80181f0:	427b      	negs	r3, r7
 80181f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80181f4:	2300      	movs	r3, #0
 80181f6:	eba8 0807 	sub.w	r8, r8, r7
 80181fa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80181fc:	e7c4      	b.n	8018188 <_dtoa_r+0x1b0>
 80181fe:	2300      	movs	r3, #0
 8018200:	930b      	str	r3, [sp, #44]	@ 0x2c
 8018202:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018204:	2b00      	cmp	r3, #0
 8018206:	dc35      	bgt.n	8018274 <_dtoa_r+0x29c>
 8018208:	2301      	movs	r3, #1
 801820a:	9300      	str	r3, [sp, #0]
 801820c:	9307      	str	r3, [sp, #28]
 801820e:	461a      	mov	r2, r3
 8018210:	920e      	str	r2, [sp, #56]	@ 0x38
 8018212:	e00b      	b.n	801822c <_dtoa_r+0x254>
 8018214:	2301      	movs	r3, #1
 8018216:	e7f3      	b.n	8018200 <_dtoa_r+0x228>
 8018218:	2300      	movs	r3, #0
 801821a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801821c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801821e:	18fb      	adds	r3, r7, r3
 8018220:	9300      	str	r3, [sp, #0]
 8018222:	3301      	adds	r3, #1
 8018224:	2b01      	cmp	r3, #1
 8018226:	9307      	str	r3, [sp, #28]
 8018228:	bfb8      	it	lt
 801822a:	2301      	movlt	r3, #1
 801822c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8018230:	2100      	movs	r1, #0
 8018232:	2204      	movs	r2, #4
 8018234:	f102 0514 	add.w	r5, r2, #20
 8018238:	429d      	cmp	r5, r3
 801823a:	d91f      	bls.n	801827c <_dtoa_r+0x2a4>
 801823c:	6041      	str	r1, [r0, #4]
 801823e:	4658      	mov	r0, fp
 8018240:	f000 fce4 	bl	8018c0c <_Balloc>
 8018244:	4682      	mov	sl, r0
 8018246:	2800      	cmp	r0, #0
 8018248:	d13c      	bne.n	80182c4 <_dtoa_r+0x2ec>
 801824a:	4b1b      	ldr	r3, [pc, #108]	@ (80182b8 <_dtoa_r+0x2e0>)
 801824c:	4602      	mov	r2, r0
 801824e:	f240 11af 	movw	r1, #431	@ 0x1af
 8018252:	e6d8      	b.n	8018006 <_dtoa_r+0x2e>
 8018254:	2301      	movs	r3, #1
 8018256:	e7e0      	b.n	801821a <_dtoa_r+0x242>
 8018258:	2401      	movs	r4, #1
 801825a:	2300      	movs	r3, #0
 801825c:	9309      	str	r3, [sp, #36]	@ 0x24
 801825e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8018260:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018264:	9300      	str	r3, [sp, #0]
 8018266:	9307      	str	r3, [sp, #28]
 8018268:	2200      	movs	r2, #0
 801826a:	2312      	movs	r3, #18
 801826c:	e7d0      	b.n	8018210 <_dtoa_r+0x238>
 801826e:	2301      	movs	r3, #1
 8018270:	930b      	str	r3, [sp, #44]	@ 0x2c
 8018272:	e7f5      	b.n	8018260 <_dtoa_r+0x288>
 8018274:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018276:	9300      	str	r3, [sp, #0]
 8018278:	9307      	str	r3, [sp, #28]
 801827a:	e7d7      	b.n	801822c <_dtoa_r+0x254>
 801827c:	3101      	adds	r1, #1
 801827e:	0052      	lsls	r2, r2, #1
 8018280:	e7d8      	b.n	8018234 <_dtoa_r+0x25c>
 8018282:	bf00      	nop
 8018284:	f3af 8000 	nop.w
 8018288:	636f4361 	.word	0x636f4361
 801828c:	3fd287a7 	.word	0x3fd287a7
 8018290:	8b60c8b3 	.word	0x8b60c8b3
 8018294:	3fc68a28 	.word	0x3fc68a28
 8018298:	509f79fb 	.word	0x509f79fb
 801829c:	3fd34413 	.word	0x3fd34413
 80182a0:	0801aa4e 	.word	0x0801aa4e
 80182a4:	0801ac3b 	.word	0x0801ac3b
 80182a8:	7ff00000 	.word	0x7ff00000
 80182ac:	0801abcf 	.word	0x0801abcf
 80182b0:	3ff80000 	.word	0x3ff80000
 80182b4:	0801ad38 	.word	0x0801ad38
 80182b8:	0801ac93 	.word	0x0801ac93
 80182bc:	0801ac37 	.word	0x0801ac37
 80182c0:	0801abce 	.word	0x0801abce
 80182c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80182c8:	6018      	str	r0, [r3, #0]
 80182ca:	9b07      	ldr	r3, [sp, #28]
 80182cc:	2b0e      	cmp	r3, #14
 80182ce:	f200 80a4 	bhi.w	801841a <_dtoa_r+0x442>
 80182d2:	2c00      	cmp	r4, #0
 80182d4:	f000 80a1 	beq.w	801841a <_dtoa_r+0x442>
 80182d8:	2f00      	cmp	r7, #0
 80182da:	dd33      	ble.n	8018344 <_dtoa_r+0x36c>
 80182dc:	4bad      	ldr	r3, [pc, #692]	@ (8018594 <_dtoa_r+0x5bc>)
 80182de:	f007 020f 	and.w	r2, r7, #15
 80182e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80182e6:	ed93 7b00 	vldr	d7, [r3]
 80182ea:	05f8      	lsls	r0, r7, #23
 80182ec:	ed8d 7b04 	vstr	d7, [sp, #16]
 80182f0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80182f4:	d516      	bpl.n	8018324 <_dtoa_r+0x34c>
 80182f6:	4ba8      	ldr	r3, [pc, #672]	@ (8018598 <_dtoa_r+0x5c0>)
 80182f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80182fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8018300:	f7e8 fad4 	bl	80008ac <__aeabi_ddiv>
 8018304:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018308:	f004 040f 	and.w	r4, r4, #15
 801830c:	2603      	movs	r6, #3
 801830e:	4da2      	ldr	r5, [pc, #648]	@ (8018598 <_dtoa_r+0x5c0>)
 8018310:	b954      	cbnz	r4, 8018328 <_dtoa_r+0x350>
 8018312:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018316:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801831a:	f7e8 fac7 	bl	80008ac <__aeabi_ddiv>
 801831e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018322:	e028      	b.n	8018376 <_dtoa_r+0x39e>
 8018324:	2602      	movs	r6, #2
 8018326:	e7f2      	b.n	801830e <_dtoa_r+0x336>
 8018328:	07e1      	lsls	r1, r4, #31
 801832a:	d508      	bpl.n	801833e <_dtoa_r+0x366>
 801832c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018330:	e9d5 2300 	ldrd	r2, r3, [r5]
 8018334:	f7e8 f990 	bl	8000658 <__aeabi_dmul>
 8018338:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801833c:	3601      	adds	r6, #1
 801833e:	1064      	asrs	r4, r4, #1
 8018340:	3508      	adds	r5, #8
 8018342:	e7e5      	b.n	8018310 <_dtoa_r+0x338>
 8018344:	f000 80d2 	beq.w	80184ec <_dtoa_r+0x514>
 8018348:	427c      	negs	r4, r7
 801834a:	4b92      	ldr	r3, [pc, #584]	@ (8018594 <_dtoa_r+0x5bc>)
 801834c:	4d92      	ldr	r5, [pc, #584]	@ (8018598 <_dtoa_r+0x5c0>)
 801834e:	f004 020f 	and.w	r2, r4, #15
 8018352:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018356:	e9d3 2300 	ldrd	r2, r3, [r3]
 801835a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801835e:	f7e8 f97b 	bl	8000658 <__aeabi_dmul>
 8018362:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018366:	1124      	asrs	r4, r4, #4
 8018368:	2300      	movs	r3, #0
 801836a:	2602      	movs	r6, #2
 801836c:	2c00      	cmp	r4, #0
 801836e:	f040 80b2 	bne.w	80184d6 <_dtoa_r+0x4fe>
 8018372:	2b00      	cmp	r3, #0
 8018374:	d1d3      	bne.n	801831e <_dtoa_r+0x346>
 8018376:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8018378:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801837c:	2b00      	cmp	r3, #0
 801837e:	f000 80b7 	beq.w	80184f0 <_dtoa_r+0x518>
 8018382:	4b86      	ldr	r3, [pc, #536]	@ (801859c <_dtoa_r+0x5c4>)
 8018384:	2200      	movs	r2, #0
 8018386:	4620      	mov	r0, r4
 8018388:	4629      	mov	r1, r5
 801838a:	f7e8 fbd7 	bl	8000b3c <__aeabi_dcmplt>
 801838e:	2800      	cmp	r0, #0
 8018390:	f000 80ae 	beq.w	80184f0 <_dtoa_r+0x518>
 8018394:	9b07      	ldr	r3, [sp, #28]
 8018396:	2b00      	cmp	r3, #0
 8018398:	f000 80aa 	beq.w	80184f0 <_dtoa_r+0x518>
 801839c:	9b00      	ldr	r3, [sp, #0]
 801839e:	2b00      	cmp	r3, #0
 80183a0:	dd37      	ble.n	8018412 <_dtoa_r+0x43a>
 80183a2:	1e7b      	subs	r3, r7, #1
 80183a4:	9304      	str	r3, [sp, #16]
 80183a6:	4620      	mov	r0, r4
 80183a8:	4b7d      	ldr	r3, [pc, #500]	@ (80185a0 <_dtoa_r+0x5c8>)
 80183aa:	2200      	movs	r2, #0
 80183ac:	4629      	mov	r1, r5
 80183ae:	f7e8 f953 	bl	8000658 <__aeabi_dmul>
 80183b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80183b6:	9c00      	ldr	r4, [sp, #0]
 80183b8:	3601      	adds	r6, #1
 80183ba:	4630      	mov	r0, r6
 80183bc:	f7e8 f8e2 	bl	8000584 <__aeabi_i2d>
 80183c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80183c4:	f7e8 f948 	bl	8000658 <__aeabi_dmul>
 80183c8:	4b76      	ldr	r3, [pc, #472]	@ (80185a4 <_dtoa_r+0x5cc>)
 80183ca:	2200      	movs	r2, #0
 80183cc:	f7e7 ff8e 	bl	80002ec <__adddf3>
 80183d0:	4605      	mov	r5, r0
 80183d2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80183d6:	2c00      	cmp	r4, #0
 80183d8:	f040 808d 	bne.w	80184f6 <_dtoa_r+0x51e>
 80183dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80183e0:	4b71      	ldr	r3, [pc, #452]	@ (80185a8 <_dtoa_r+0x5d0>)
 80183e2:	2200      	movs	r2, #0
 80183e4:	f7e7 ff80 	bl	80002e8 <__aeabi_dsub>
 80183e8:	4602      	mov	r2, r0
 80183ea:	460b      	mov	r3, r1
 80183ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80183f0:	462a      	mov	r2, r5
 80183f2:	4633      	mov	r3, r6
 80183f4:	f7e8 fbc0 	bl	8000b78 <__aeabi_dcmpgt>
 80183f8:	2800      	cmp	r0, #0
 80183fa:	f040 828b 	bne.w	8018914 <_dtoa_r+0x93c>
 80183fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018402:	462a      	mov	r2, r5
 8018404:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8018408:	f7e8 fb98 	bl	8000b3c <__aeabi_dcmplt>
 801840c:	2800      	cmp	r0, #0
 801840e:	f040 8128 	bne.w	8018662 <_dtoa_r+0x68a>
 8018412:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8018416:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801841a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801841c:	2b00      	cmp	r3, #0
 801841e:	f2c0 815a 	blt.w	80186d6 <_dtoa_r+0x6fe>
 8018422:	2f0e      	cmp	r7, #14
 8018424:	f300 8157 	bgt.w	80186d6 <_dtoa_r+0x6fe>
 8018428:	4b5a      	ldr	r3, [pc, #360]	@ (8018594 <_dtoa_r+0x5bc>)
 801842a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801842e:	ed93 7b00 	vldr	d7, [r3]
 8018432:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018434:	2b00      	cmp	r3, #0
 8018436:	ed8d 7b00 	vstr	d7, [sp]
 801843a:	da03      	bge.n	8018444 <_dtoa_r+0x46c>
 801843c:	9b07      	ldr	r3, [sp, #28]
 801843e:	2b00      	cmp	r3, #0
 8018440:	f340 8101 	ble.w	8018646 <_dtoa_r+0x66e>
 8018444:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8018448:	4656      	mov	r6, sl
 801844a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801844e:	4620      	mov	r0, r4
 8018450:	4629      	mov	r1, r5
 8018452:	f7e8 fa2b 	bl	80008ac <__aeabi_ddiv>
 8018456:	f7e8 fbaf 	bl	8000bb8 <__aeabi_d2iz>
 801845a:	4680      	mov	r8, r0
 801845c:	f7e8 f892 	bl	8000584 <__aeabi_i2d>
 8018460:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018464:	f7e8 f8f8 	bl	8000658 <__aeabi_dmul>
 8018468:	4602      	mov	r2, r0
 801846a:	460b      	mov	r3, r1
 801846c:	4620      	mov	r0, r4
 801846e:	4629      	mov	r1, r5
 8018470:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8018474:	f7e7 ff38 	bl	80002e8 <__aeabi_dsub>
 8018478:	f806 4b01 	strb.w	r4, [r6], #1
 801847c:	9d07      	ldr	r5, [sp, #28]
 801847e:	eba6 040a 	sub.w	r4, r6, sl
 8018482:	42a5      	cmp	r5, r4
 8018484:	4602      	mov	r2, r0
 8018486:	460b      	mov	r3, r1
 8018488:	f040 8117 	bne.w	80186ba <_dtoa_r+0x6e2>
 801848c:	f7e7 ff2e 	bl	80002ec <__adddf3>
 8018490:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018494:	4604      	mov	r4, r0
 8018496:	460d      	mov	r5, r1
 8018498:	f7e8 fb6e 	bl	8000b78 <__aeabi_dcmpgt>
 801849c:	2800      	cmp	r0, #0
 801849e:	f040 80f9 	bne.w	8018694 <_dtoa_r+0x6bc>
 80184a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80184a6:	4620      	mov	r0, r4
 80184a8:	4629      	mov	r1, r5
 80184aa:	f7e8 fb3d 	bl	8000b28 <__aeabi_dcmpeq>
 80184ae:	b118      	cbz	r0, 80184b8 <_dtoa_r+0x4e0>
 80184b0:	f018 0f01 	tst.w	r8, #1
 80184b4:	f040 80ee 	bne.w	8018694 <_dtoa_r+0x6bc>
 80184b8:	4649      	mov	r1, r9
 80184ba:	4658      	mov	r0, fp
 80184bc:	f000 fbe6 	bl	8018c8c <_Bfree>
 80184c0:	2300      	movs	r3, #0
 80184c2:	7033      	strb	r3, [r6, #0]
 80184c4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80184c6:	3701      	adds	r7, #1
 80184c8:	601f      	str	r7, [r3, #0]
 80184ca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80184cc:	2b00      	cmp	r3, #0
 80184ce:	f000 831d 	beq.w	8018b0c <_dtoa_r+0xb34>
 80184d2:	601e      	str	r6, [r3, #0]
 80184d4:	e31a      	b.n	8018b0c <_dtoa_r+0xb34>
 80184d6:	07e2      	lsls	r2, r4, #31
 80184d8:	d505      	bpl.n	80184e6 <_dtoa_r+0x50e>
 80184da:	e9d5 2300 	ldrd	r2, r3, [r5]
 80184de:	f7e8 f8bb 	bl	8000658 <__aeabi_dmul>
 80184e2:	3601      	adds	r6, #1
 80184e4:	2301      	movs	r3, #1
 80184e6:	1064      	asrs	r4, r4, #1
 80184e8:	3508      	adds	r5, #8
 80184ea:	e73f      	b.n	801836c <_dtoa_r+0x394>
 80184ec:	2602      	movs	r6, #2
 80184ee:	e742      	b.n	8018376 <_dtoa_r+0x39e>
 80184f0:	9c07      	ldr	r4, [sp, #28]
 80184f2:	9704      	str	r7, [sp, #16]
 80184f4:	e761      	b.n	80183ba <_dtoa_r+0x3e2>
 80184f6:	4b27      	ldr	r3, [pc, #156]	@ (8018594 <_dtoa_r+0x5bc>)
 80184f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80184fa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80184fe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8018502:	4454      	add	r4, sl
 8018504:	2900      	cmp	r1, #0
 8018506:	d053      	beq.n	80185b0 <_dtoa_r+0x5d8>
 8018508:	4928      	ldr	r1, [pc, #160]	@ (80185ac <_dtoa_r+0x5d4>)
 801850a:	2000      	movs	r0, #0
 801850c:	f7e8 f9ce 	bl	80008ac <__aeabi_ddiv>
 8018510:	4633      	mov	r3, r6
 8018512:	462a      	mov	r2, r5
 8018514:	f7e7 fee8 	bl	80002e8 <__aeabi_dsub>
 8018518:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801851c:	4656      	mov	r6, sl
 801851e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018522:	f7e8 fb49 	bl	8000bb8 <__aeabi_d2iz>
 8018526:	4605      	mov	r5, r0
 8018528:	f7e8 f82c 	bl	8000584 <__aeabi_i2d>
 801852c:	4602      	mov	r2, r0
 801852e:	460b      	mov	r3, r1
 8018530:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018534:	f7e7 fed8 	bl	80002e8 <__aeabi_dsub>
 8018538:	3530      	adds	r5, #48	@ 0x30
 801853a:	4602      	mov	r2, r0
 801853c:	460b      	mov	r3, r1
 801853e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8018542:	f806 5b01 	strb.w	r5, [r6], #1
 8018546:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801854a:	f7e8 faf7 	bl	8000b3c <__aeabi_dcmplt>
 801854e:	2800      	cmp	r0, #0
 8018550:	d171      	bne.n	8018636 <_dtoa_r+0x65e>
 8018552:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018556:	4911      	ldr	r1, [pc, #68]	@ (801859c <_dtoa_r+0x5c4>)
 8018558:	2000      	movs	r0, #0
 801855a:	f7e7 fec5 	bl	80002e8 <__aeabi_dsub>
 801855e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8018562:	f7e8 faeb 	bl	8000b3c <__aeabi_dcmplt>
 8018566:	2800      	cmp	r0, #0
 8018568:	f040 8095 	bne.w	8018696 <_dtoa_r+0x6be>
 801856c:	42a6      	cmp	r6, r4
 801856e:	f43f af50 	beq.w	8018412 <_dtoa_r+0x43a>
 8018572:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8018576:	4b0a      	ldr	r3, [pc, #40]	@ (80185a0 <_dtoa_r+0x5c8>)
 8018578:	2200      	movs	r2, #0
 801857a:	f7e8 f86d 	bl	8000658 <__aeabi_dmul>
 801857e:	4b08      	ldr	r3, [pc, #32]	@ (80185a0 <_dtoa_r+0x5c8>)
 8018580:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8018584:	2200      	movs	r2, #0
 8018586:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801858a:	f7e8 f865 	bl	8000658 <__aeabi_dmul>
 801858e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018592:	e7c4      	b.n	801851e <_dtoa_r+0x546>
 8018594:	0801ad38 	.word	0x0801ad38
 8018598:	0801ad10 	.word	0x0801ad10
 801859c:	3ff00000 	.word	0x3ff00000
 80185a0:	40240000 	.word	0x40240000
 80185a4:	401c0000 	.word	0x401c0000
 80185a8:	40140000 	.word	0x40140000
 80185ac:	3fe00000 	.word	0x3fe00000
 80185b0:	4631      	mov	r1, r6
 80185b2:	4628      	mov	r0, r5
 80185b4:	f7e8 f850 	bl	8000658 <__aeabi_dmul>
 80185b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80185bc:	9415      	str	r4, [sp, #84]	@ 0x54
 80185be:	4656      	mov	r6, sl
 80185c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80185c4:	f7e8 faf8 	bl	8000bb8 <__aeabi_d2iz>
 80185c8:	4605      	mov	r5, r0
 80185ca:	f7e7 ffdb 	bl	8000584 <__aeabi_i2d>
 80185ce:	4602      	mov	r2, r0
 80185d0:	460b      	mov	r3, r1
 80185d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80185d6:	f7e7 fe87 	bl	80002e8 <__aeabi_dsub>
 80185da:	3530      	adds	r5, #48	@ 0x30
 80185dc:	f806 5b01 	strb.w	r5, [r6], #1
 80185e0:	4602      	mov	r2, r0
 80185e2:	460b      	mov	r3, r1
 80185e4:	42a6      	cmp	r6, r4
 80185e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80185ea:	f04f 0200 	mov.w	r2, #0
 80185ee:	d124      	bne.n	801863a <_dtoa_r+0x662>
 80185f0:	4bac      	ldr	r3, [pc, #688]	@ (80188a4 <_dtoa_r+0x8cc>)
 80185f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80185f6:	f7e7 fe79 	bl	80002ec <__adddf3>
 80185fa:	4602      	mov	r2, r0
 80185fc:	460b      	mov	r3, r1
 80185fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018602:	f7e8 fab9 	bl	8000b78 <__aeabi_dcmpgt>
 8018606:	2800      	cmp	r0, #0
 8018608:	d145      	bne.n	8018696 <_dtoa_r+0x6be>
 801860a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801860e:	49a5      	ldr	r1, [pc, #660]	@ (80188a4 <_dtoa_r+0x8cc>)
 8018610:	2000      	movs	r0, #0
 8018612:	f7e7 fe69 	bl	80002e8 <__aeabi_dsub>
 8018616:	4602      	mov	r2, r0
 8018618:	460b      	mov	r3, r1
 801861a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801861e:	f7e8 fa8d 	bl	8000b3c <__aeabi_dcmplt>
 8018622:	2800      	cmp	r0, #0
 8018624:	f43f aef5 	beq.w	8018412 <_dtoa_r+0x43a>
 8018628:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801862a:	1e73      	subs	r3, r6, #1
 801862c:	9315      	str	r3, [sp, #84]	@ 0x54
 801862e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8018632:	2b30      	cmp	r3, #48	@ 0x30
 8018634:	d0f8      	beq.n	8018628 <_dtoa_r+0x650>
 8018636:	9f04      	ldr	r7, [sp, #16]
 8018638:	e73e      	b.n	80184b8 <_dtoa_r+0x4e0>
 801863a:	4b9b      	ldr	r3, [pc, #620]	@ (80188a8 <_dtoa_r+0x8d0>)
 801863c:	f7e8 f80c 	bl	8000658 <__aeabi_dmul>
 8018640:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018644:	e7bc      	b.n	80185c0 <_dtoa_r+0x5e8>
 8018646:	d10c      	bne.n	8018662 <_dtoa_r+0x68a>
 8018648:	4b98      	ldr	r3, [pc, #608]	@ (80188ac <_dtoa_r+0x8d4>)
 801864a:	2200      	movs	r2, #0
 801864c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018650:	f7e8 f802 	bl	8000658 <__aeabi_dmul>
 8018654:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018658:	f7e8 fa84 	bl	8000b64 <__aeabi_dcmpge>
 801865c:	2800      	cmp	r0, #0
 801865e:	f000 8157 	beq.w	8018910 <_dtoa_r+0x938>
 8018662:	2400      	movs	r4, #0
 8018664:	4625      	mov	r5, r4
 8018666:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018668:	43db      	mvns	r3, r3
 801866a:	9304      	str	r3, [sp, #16]
 801866c:	4656      	mov	r6, sl
 801866e:	2700      	movs	r7, #0
 8018670:	4621      	mov	r1, r4
 8018672:	4658      	mov	r0, fp
 8018674:	f000 fb0a 	bl	8018c8c <_Bfree>
 8018678:	2d00      	cmp	r5, #0
 801867a:	d0dc      	beq.n	8018636 <_dtoa_r+0x65e>
 801867c:	b12f      	cbz	r7, 801868a <_dtoa_r+0x6b2>
 801867e:	42af      	cmp	r7, r5
 8018680:	d003      	beq.n	801868a <_dtoa_r+0x6b2>
 8018682:	4639      	mov	r1, r7
 8018684:	4658      	mov	r0, fp
 8018686:	f000 fb01 	bl	8018c8c <_Bfree>
 801868a:	4629      	mov	r1, r5
 801868c:	4658      	mov	r0, fp
 801868e:	f000 fafd 	bl	8018c8c <_Bfree>
 8018692:	e7d0      	b.n	8018636 <_dtoa_r+0x65e>
 8018694:	9704      	str	r7, [sp, #16]
 8018696:	4633      	mov	r3, r6
 8018698:	461e      	mov	r6, r3
 801869a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801869e:	2a39      	cmp	r2, #57	@ 0x39
 80186a0:	d107      	bne.n	80186b2 <_dtoa_r+0x6da>
 80186a2:	459a      	cmp	sl, r3
 80186a4:	d1f8      	bne.n	8018698 <_dtoa_r+0x6c0>
 80186a6:	9a04      	ldr	r2, [sp, #16]
 80186a8:	3201      	adds	r2, #1
 80186aa:	9204      	str	r2, [sp, #16]
 80186ac:	2230      	movs	r2, #48	@ 0x30
 80186ae:	f88a 2000 	strb.w	r2, [sl]
 80186b2:	781a      	ldrb	r2, [r3, #0]
 80186b4:	3201      	adds	r2, #1
 80186b6:	701a      	strb	r2, [r3, #0]
 80186b8:	e7bd      	b.n	8018636 <_dtoa_r+0x65e>
 80186ba:	4b7b      	ldr	r3, [pc, #492]	@ (80188a8 <_dtoa_r+0x8d0>)
 80186bc:	2200      	movs	r2, #0
 80186be:	f7e7 ffcb 	bl	8000658 <__aeabi_dmul>
 80186c2:	2200      	movs	r2, #0
 80186c4:	2300      	movs	r3, #0
 80186c6:	4604      	mov	r4, r0
 80186c8:	460d      	mov	r5, r1
 80186ca:	f7e8 fa2d 	bl	8000b28 <__aeabi_dcmpeq>
 80186ce:	2800      	cmp	r0, #0
 80186d0:	f43f aebb 	beq.w	801844a <_dtoa_r+0x472>
 80186d4:	e6f0      	b.n	80184b8 <_dtoa_r+0x4e0>
 80186d6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80186d8:	2a00      	cmp	r2, #0
 80186da:	f000 80db 	beq.w	8018894 <_dtoa_r+0x8bc>
 80186de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80186e0:	2a01      	cmp	r2, #1
 80186e2:	f300 80bf 	bgt.w	8018864 <_dtoa_r+0x88c>
 80186e6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80186e8:	2a00      	cmp	r2, #0
 80186ea:	f000 80b7 	beq.w	801885c <_dtoa_r+0x884>
 80186ee:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80186f2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80186f4:	4646      	mov	r6, r8
 80186f6:	9a08      	ldr	r2, [sp, #32]
 80186f8:	2101      	movs	r1, #1
 80186fa:	441a      	add	r2, r3
 80186fc:	4658      	mov	r0, fp
 80186fe:	4498      	add	r8, r3
 8018700:	9208      	str	r2, [sp, #32]
 8018702:	f000 fb77 	bl	8018df4 <__i2b>
 8018706:	4605      	mov	r5, r0
 8018708:	b15e      	cbz	r6, 8018722 <_dtoa_r+0x74a>
 801870a:	9b08      	ldr	r3, [sp, #32]
 801870c:	2b00      	cmp	r3, #0
 801870e:	dd08      	ble.n	8018722 <_dtoa_r+0x74a>
 8018710:	42b3      	cmp	r3, r6
 8018712:	9a08      	ldr	r2, [sp, #32]
 8018714:	bfa8      	it	ge
 8018716:	4633      	movge	r3, r6
 8018718:	eba8 0803 	sub.w	r8, r8, r3
 801871c:	1af6      	subs	r6, r6, r3
 801871e:	1ad3      	subs	r3, r2, r3
 8018720:	9308      	str	r3, [sp, #32]
 8018722:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018724:	b1f3      	cbz	r3, 8018764 <_dtoa_r+0x78c>
 8018726:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018728:	2b00      	cmp	r3, #0
 801872a:	f000 80b7 	beq.w	801889c <_dtoa_r+0x8c4>
 801872e:	b18c      	cbz	r4, 8018754 <_dtoa_r+0x77c>
 8018730:	4629      	mov	r1, r5
 8018732:	4622      	mov	r2, r4
 8018734:	4658      	mov	r0, fp
 8018736:	f000 fc1d 	bl	8018f74 <__pow5mult>
 801873a:	464a      	mov	r2, r9
 801873c:	4601      	mov	r1, r0
 801873e:	4605      	mov	r5, r0
 8018740:	4658      	mov	r0, fp
 8018742:	f000 fb6d 	bl	8018e20 <__multiply>
 8018746:	4649      	mov	r1, r9
 8018748:	9004      	str	r0, [sp, #16]
 801874a:	4658      	mov	r0, fp
 801874c:	f000 fa9e 	bl	8018c8c <_Bfree>
 8018750:	9b04      	ldr	r3, [sp, #16]
 8018752:	4699      	mov	r9, r3
 8018754:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018756:	1b1a      	subs	r2, r3, r4
 8018758:	d004      	beq.n	8018764 <_dtoa_r+0x78c>
 801875a:	4649      	mov	r1, r9
 801875c:	4658      	mov	r0, fp
 801875e:	f000 fc09 	bl	8018f74 <__pow5mult>
 8018762:	4681      	mov	r9, r0
 8018764:	2101      	movs	r1, #1
 8018766:	4658      	mov	r0, fp
 8018768:	f000 fb44 	bl	8018df4 <__i2b>
 801876c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801876e:	4604      	mov	r4, r0
 8018770:	2b00      	cmp	r3, #0
 8018772:	f000 81cf 	beq.w	8018b14 <_dtoa_r+0xb3c>
 8018776:	461a      	mov	r2, r3
 8018778:	4601      	mov	r1, r0
 801877a:	4658      	mov	r0, fp
 801877c:	f000 fbfa 	bl	8018f74 <__pow5mult>
 8018780:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018782:	2b01      	cmp	r3, #1
 8018784:	4604      	mov	r4, r0
 8018786:	f300 8095 	bgt.w	80188b4 <_dtoa_r+0x8dc>
 801878a:	9b02      	ldr	r3, [sp, #8]
 801878c:	2b00      	cmp	r3, #0
 801878e:	f040 8087 	bne.w	80188a0 <_dtoa_r+0x8c8>
 8018792:	9b03      	ldr	r3, [sp, #12]
 8018794:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018798:	2b00      	cmp	r3, #0
 801879a:	f040 8089 	bne.w	80188b0 <_dtoa_r+0x8d8>
 801879e:	9b03      	ldr	r3, [sp, #12]
 80187a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80187a4:	0d1b      	lsrs	r3, r3, #20
 80187a6:	051b      	lsls	r3, r3, #20
 80187a8:	b12b      	cbz	r3, 80187b6 <_dtoa_r+0x7de>
 80187aa:	9b08      	ldr	r3, [sp, #32]
 80187ac:	3301      	adds	r3, #1
 80187ae:	9308      	str	r3, [sp, #32]
 80187b0:	f108 0801 	add.w	r8, r8, #1
 80187b4:	2301      	movs	r3, #1
 80187b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80187b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80187ba:	2b00      	cmp	r3, #0
 80187bc:	f000 81b0 	beq.w	8018b20 <_dtoa_r+0xb48>
 80187c0:	6923      	ldr	r3, [r4, #16]
 80187c2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80187c6:	6918      	ldr	r0, [r3, #16]
 80187c8:	f000 fac8 	bl	8018d5c <__hi0bits>
 80187cc:	f1c0 0020 	rsb	r0, r0, #32
 80187d0:	9b08      	ldr	r3, [sp, #32]
 80187d2:	4418      	add	r0, r3
 80187d4:	f010 001f 	ands.w	r0, r0, #31
 80187d8:	d077      	beq.n	80188ca <_dtoa_r+0x8f2>
 80187da:	f1c0 0320 	rsb	r3, r0, #32
 80187de:	2b04      	cmp	r3, #4
 80187e0:	dd6b      	ble.n	80188ba <_dtoa_r+0x8e2>
 80187e2:	9b08      	ldr	r3, [sp, #32]
 80187e4:	f1c0 001c 	rsb	r0, r0, #28
 80187e8:	4403      	add	r3, r0
 80187ea:	4480      	add	r8, r0
 80187ec:	4406      	add	r6, r0
 80187ee:	9308      	str	r3, [sp, #32]
 80187f0:	f1b8 0f00 	cmp.w	r8, #0
 80187f4:	dd05      	ble.n	8018802 <_dtoa_r+0x82a>
 80187f6:	4649      	mov	r1, r9
 80187f8:	4642      	mov	r2, r8
 80187fa:	4658      	mov	r0, fp
 80187fc:	f000 fc14 	bl	8019028 <__lshift>
 8018800:	4681      	mov	r9, r0
 8018802:	9b08      	ldr	r3, [sp, #32]
 8018804:	2b00      	cmp	r3, #0
 8018806:	dd05      	ble.n	8018814 <_dtoa_r+0x83c>
 8018808:	4621      	mov	r1, r4
 801880a:	461a      	mov	r2, r3
 801880c:	4658      	mov	r0, fp
 801880e:	f000 fc0b 	bl	8019028 <__lshift>
 8018812:	4604      	mov	r4, r0
 8018814:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8018816:	2b00      	cmp	r3, #0
 8018818:	d059      	beq.n	80188ce <_dtoa_r+0x8f6>
 801881a:	4621      	mov	r1, r4
 801881c:	4648      	mov	r0, r9
 801881e:	f000 fc6f 	bl	8019100 <__mcmp>
 8018822:	2800      	cmp	r0, #0
 8018824:	da53      	bge.n	80188ce <_dtoa_r+0x8f6>
 8018826:	1e7b      	subs	r3, r7, #1
 8018828:	9304      	str	r3, [sp, #16]
 801882a:	4649      	mov	r1, r9
 801882c:	2300      	movs	r3, #0
 801882e:	220a      	movs	r2, #10
 8018830:	4658      	mov	r0, fp
 8018832:	f000 fa4d 	bl	8018cd0 <__multadd>
 8018836:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018838:	4681      	mov	r9, r0
 801883a:	2b00      	cmp	r3, #0
 801883c:	f000 8172 	beq.w	8018b24 <_dtoa_r+0xb4c>
 8018840:	2300      	movs	r3, #0
 8018842:	4629      	mov	r1, r5
 8018844:	220a      	movs	r2, #10
 8018846:	4658      	mov	r0, fp
 8018848:	f000 fa42 	bl	8018cd0 <__multadd>
 801884c:	9b00      	ldr	r3, [sp, #0]
 801884e:	2b00      	cmp	r3, #0
 8018850:	4605      	mov	r5, r0
 8018852:	dc67      	bgt.n	8018924 <_dtoa_r+0x94c>
 8018854:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018856:	2b02      	cmp	r3, #2
 8018858:	dc41      	bgt.n	80188de <_dtoa_r+0x906>
 801885a:	e063      	b.n	8018924 <_dtoa_r+0x94c>
 801885c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801885e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8018862:	e746      	b.n	80186f2 <_dtoa_r+0x71a>
 8018864:	9b07      	ldr	r3, [sp, #28]
 8018866:	1e5c      	subs	r4, r3, #1
 8018868:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801886a:	42a3      	cmp	r3, r4
 801886c:	bfbf      	itttt	lt
 801886e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8018870:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8018872:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8018874:	1ae3      	sublt	r3, r4, r3
 8018876:	bfb4      	ite	lt
 8018878:	18d2      	addlt	r2, r2, r3
 801887a:	1b1c      	subge	r4, r3, r4
 801887c:	9b07      	ldr	r3, [sp, #28]
 801887e:	bfbc      	itt	lt
 8018880:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8018882:	2400      	movlt	r4, #0
 8018884:	2b00      	cmp	r3, #0
 8018886:	bfb5      	itete	lt
 8018888:	eba8 0603 	sublt.w	r6, r8, r3
 801888c:	9b07      	ldrge	r3, [sp, #28]
 801888e:	2300      	movlt	r3, #0
 8018890:	4646      	movge	r6, r8
 8018892:	e730      	b.n	80186f6 <_dtoa_r+0x71e>
 8018894:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8018896:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8018898:	4646      	mov	r6, r8
 801889a:	e735      	b.n	8018708 <_dtoa_r+0x730>
 801889c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801889e:	e75c      	b.n	801875a <_dtoa_r+0x782>
 80188a0:	2300      	movs	r3, #0
 80188a2:	e788      	b.n	80187b6 <_dtoa_r+0x7de>
 80188a4:	3fe00000 	.word	0x3fe00000
 80188a8:	40240000 	.word	0x40240000
 80188ac:	40140000 	.word	0x40140000
 80188b0:	9b02      	ldr	r3, [sp, #8]
 80188b2:	e780      	b.n	80187b6 <_dtoa_r+0x7de>
 80188b4:	2300      	movs	r3, #0
 80188b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80188b8:	e782      	b.n	80187c0 <_dtoa_r+0x7e8>
 80188ba:	d099      	beq.n	80187f0 <_dtoa_r+0x818>
 80188bc:	9a08      	ldr	r2, [sp, #32]
 80188be:	331c      	adds	r3, #28
 80188c0:	441a      	add	r2, r3
 80188c2:	4498      	add	r8, r3
 80188c4:	441e      	add	r6, r3
 80188c6:	9208      	str	r2, [sp, #32]
 80188c8:	e792      	b.n	80187f0 <_dtoa_r+0x818>
 80188ca:	4603      	mov	r3, r0
 80188cc:	e7f6      	b.n	80188bc <_dtoa_r+0x8e4>
 80188ce:	9b07      	ldr	r3, [sp, #28]
 80188d0:	9704      	str	r7, [sp, #16]
 80188d2:	2b00      	cmp	r3, #0
 80188d4:	dc20      	bgt.n	8018918 <_dtoa_r+0x940>
 80188d6:	9300      	str	r3, [sp, #0]
 80188d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80188da:	2b02      	cmp	r3, #2
 80188dc:	dd1e      	ble.n	801891c <_dtoa_r+0x944>
 80188de:	9b00      	ldr	r3, [sp, #0]
 80188e0:	2b00      	cmp	r3, #0
 80188e2:	f47f aec0 	bne.w	8018666 <_dtoa_r+0x68e>
 80188e6:	4621      	mov	r1, r4
 80188e8:	2205      	movs	r2, #5
 80188ea:	4658      	mov	r0, fp
 80188ec:	f000 f9f0 	bl	8018cd0 <__multadd>
 80188f0:	4601      	mov	r1, r0
 80188f2:	4604      	mov	r4, r0
 80188f4:	4648      	mov	r0, r9
 80188f6:	f000 fc03 	bl	8019100 <__mcmp>
 80188fa:	2800      	cmp	r0, #0
 80188fc:	f77f aeb3 	ble.w	8018666 <_dtoa_r+0x68e>
 8018900:	4656      	mov	r6, sl
 8018902:	2331      	movs	r3, #49	@ 0x31
 8018904:	f806 3b01 	strb.w	r3, [r6], #1
 8018908:	9b04      	ldr	r3, [sp, #16]
 801890a:	3301      	adds	r3, #1
 801890c:	9304      	str	r3, [sp, #16]
 801890e:	e6ae      	b.n	801866e <_dtoa_r+0x696>
 8018910:	9c07      	ldr	r4, [sp, #28]
 8018912:	9704      	str	r7, [sp, #16]
 8018914:	4625      	mov	r5, r4
 8018916:	e7f3      	b.n	8018900 <_dtoa_r+0x928>
 8018918:	9b07      	ldr	r3, [sp, #28]
 801891a:	9300      	str	r3, [sp, #0]
 801891c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801891e:	2b00      	cmp	r3, #0
 8018920:	f000 8104 	beq.w	8018b2c <_dtoa_r+0xb54>
 8018924:	2e00      	cmp	r6, #0
 8018926:	dd05      	ble.n	8018934 <_dtoa_r+0x95c>
 8018928:	4629      	mov	r1, r5
 801892a:	4632      	mov	r2, r6
 801892c:	4658      	mov	r0, fp
 801892e:	f000 fb7b 	bl	8019028 <__lshift>
 8018932:	4605      	mov	r5, r0
 8018934:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018936:	2b00      	cmp	r3, #0
 8018938:	d05a      	beq.n	80189f0 <_dtoa_r+0xa18>
 801893a:	6869      	ldr	r1, [r5, #4]
 801893c:	4658      	mov	r0, fp
 801893e:	f000 f965 	bl	8018c0c <_Balloc>
 8018942:	4606      	mov	r6, r0
 8018944:	b928      	cbnz	r0, 8018952 <_dtoa_r+0x97a>
 8018946:	4b84      	ldr	r3, [pc, #528]	@ (8018b58 <_dtoa_r+0xb80>)
 8018948:	4602      	mov	r2, r0
 801894a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801894e:	f7ff bb5a 	b.w	8018006 <_dtoa_r+0x2e>
 8018952:	692a      	ldr	r2, [r5, #16]
 8018954:	3202      	adds	r2, #2
 8018956:	0092      	lsls	r2, r2, #2
 8018958:	f105 010c 	add.w	r1, r5, #12
 801895c:	300c      	adds	r0, #12
 801895e:	f7ff fa86 	bl	8017e6e <memcpy>
 8018962:	2201      	movs	r2, #1
 8018964:	4631      	mov	r1, r6
 8018966:	4658      	mov	r0, fp
 8018968:	f000 fb5e 	bl	8019028 <__lshift>
 801896c:	f10a 0301 	add.w	r3, sl, #1
 8018970:	9307      	str	r3, [sp, #28]
 8018972:	9b00      	ldr	r3, [sp, #0]
 8018974:	4453      	add	r3, sl
 8018976:	930b      	str	r3, [sp, #44]	@ 0x2c
 8018978:	9b02      	ldr	r3, [sp, #8]
 801897a:	f003 0301 	and.w	r3, r3, #1
 801897e:	462f      	mov	r7, r5
 8018980:	930a      	str	r3, [sp, #40]	@ 0x28
 8018982:	4605      	mov	r5, r0
 8018984:	9b07      	ldr	r3, [sp, #28]
 8018986:	4621      	mov	r1, r4
 8018988:	3b01      	subs	r3, #1
 801898a:	4648      	mov	r0, r9
 801898c:	9300      	str	r3, [sp, #0]
 801898e:	f7ff fa9b 	bl	8017ec8 <quorem>
 8018992:	4639      	mov	r1, r7
 8018994:	9002      	str	r0, [sp, #8]
 8018996:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801899a:	4648      	mov	r0, r9
 801899c:	f000 fbb0 	bl	8019100 <__mcmp>
 80189a0:	462a      	mov	r2, r5
 80189a2:	9008      	str	r0, [sp, #32]
 80189a4:	4621      	mov	r1, r4
 80189a6:	4658      	mov	r0, fp
 80189a8:	f000 fbc6 	bl	8019138 <__mdiff>
 80189ac:	68c2      	ldr	r2, [r0, #12]
 80189ae:	4606      	mov	r6, r0
 80189b0:	bb02      	cbnz	r2, 80189f4 <_dtoa_r+0xa1c>
 80189b2:	4601      	mov	r1, r0
 80189b4:	4648      	mov	r0, r9
 80189b6:	f000 fba3 	bl	8019100 <__mcmp>
 80189ba:	4602      	mov	r2, r0
 80189bc:	4631      	mov	r1, r6
 80189be:	4658      	mov	r0, fp
 80189c0:	920e      	str	r2, [sp, #56]	@ 0x38
 80189c2:	f000 f963 	bl	8018c8c <_Bfree>
 80189c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80189c8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80189ca:	9e07      	ldr	r6, [sp, #28]
 80189cc:	ea43 0102 	orr.w	r1, r3, r2
 80189d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80189d2:	4319      	orrs	r1, r3
 80189d4:	d110      	bne.n	80189f8 <_dtoa_r+0xa20>
 80189d6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80189da:	d029      	beq.n	8018a30 <_dtoa_r+0xa58>
 80189dc:	9b08      	ldr	r3, [sp, #32]
 80189de:	2b00      	cmp	r3, #0
 80189e0:	dd02      	ble.n	80189e8 <_dtoa_r+0xa10>
 80189e2:	9b02      	ldr	r3, [sp, #8]
 80189e4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80189e8:	9b00      	ldr	r3, [sp, #0]
 80189ea:	f883 8000 	strb.w	r8, [r3]
 80189ee:	e63f      	b.n	8018670 <_dtoa_r+0x698>
 80189f0:	4628      	mov	r0, r5
 80189f2:	e7bb      	b.n	801896c <_dtoa_r+0x994>
 80189f4:	2201      	movs	r2, #1
 80189f6:	e7e1      	b.n	80189bc <_dtoa_r+0x9e4>
 80189f8:	9b08      	ldr	r3, [sp, #32]
 80189fa:	2b00      	cmp	r3, #0
 80189fc:	db04      	blt.n	8018a08 <_dtoa_r+0xa30>
 80189fe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8018a00:	430b      	orrs	r3, r1
 8018a02:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8018a04:	430b      	orrs	r3, r1
 8018a06:	d120      	bne.n	8018a4a <_dtoa_r+0xa72>
 8018a08:	2a00      	cmp	r2, #0
 8018a0a:	dded      	ble.n	80189e8 <_dtoa_r+0xa10>
 8018a0c:	4649      	mov	r1, r9
 8018a0e:	2201      	movs	r2, #1
 8018a10:	4658      	mov	r0, fp
 8018a12:	f000 fb09 	bl	8019028 <__lshift>
 8018a16:	4621      	mov	r1, r4
 8018a18:	4681      	mov	r9, r0
 8018a1a:	f000 fb71 	bl	8019100 <__mcmp>
 8018a1e:	2800      	cmp	r0, #0
 8018a20:	dc03      	bgt.n	8018a2a <_dtoa_r+0xa52>
 8018a22:	d1e1      	bne.n	80189e8 <_dtoa_r+0xa10>
 8018a24:	f018 0f01 	tst.w	r8, #1
 8018a28:	d0de      	beq.n	80189e8 <_dtoa_r+0xa10>
 8018a2a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8018a2e:	d1d8      	bne.n	80189e2 <_dtoa_r+0xa0a>
 8018a30:	9a00      	ldr	r2, [sp, #0]
 8018a32:	2339      	movs	r3, #57	@ 0x39
 8018a34:	7013      	strb	r3, [r2, #0]
 8018a36:	4633      	mov	r3, r6
 8018a38:	461e      	mov	r6, r3
 8018a3a:	3b01      	subs	r3, #1
 8018a3c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8018a40:	2a39      	cmp	r2, #57	@ 0x39
 8018a42:	d052      	beq.n	8018aea <_dtoa_r+0xb12>
 8018a44:	3201      	adds	r2, #1
 8018a46:	701a      	strb	r2, [r3, #0]
 8018a48:	e612      	b.n	8018670 <_dtoa_r+0x698>
 8018a4a:	2a00      	cmp	r2, #0
 8018a4c:	dd07      	ble.n	8018a5e <_dtoa_r+0xa86>
 8018a4e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8018a52:	d0ed      	beq.n	8018a30 <_dtoa_r+0xa58>
 8018a54:	9a00      	ldr	r2, [sp, #0]
 8018a56:	f108 0301 	add.w	r3, r8, #1
 8018a5a:	7013      	strb	r3, [r2, #0]
 8018a5c:	e608      	b.n	8018670 <_dtoa_r+0x698>
 8018a5e:	9b07      	ldr	r3, [sp, #28]
 8018a60:	9a07      	ldr	r2, [sp, #28]
 8018a62:	f803 8c01 	strb.w	r8, [r3, #-1]
 8018a66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018a68:	4293      	cmp	r3, r2
 8018a6a:	d028      	beq.n	8018abe <_dtoa_r+0xae6>
 8018a6c:	4649      	mov	r1, r9
 8018a6e:	2300      	movs	r3, #0
 8018a70:	220a      	movs	r2, #10
 8018a72:	4658      	mov	r0, fp
 8018a74:	f000 f92c 	bl	8018cd0 <__multadd>
 8018a78:	42af      	cmp	r7, r5
 8018a7a:	4681      	mov	r9, r0
 8018a7c:	f04f 0300 	mov.w	r3, #0
 8018a80:	f04f 020a 	mov.w	r2, #10
 8018a84:	4639      	mov	r1, r7
 8018a86:	4658      	mov	r0, fp
 8018a88:	d107      	bne.n	8018a9a <_dtoa_r+0xac2>
 8018a8a:	f000 f921 	bl	8018cd0 <__multadd>
 8018a8e:	4607      	mov	r7, r0
 8018a90:	4605      	mov	r5, r0
 8018a92:	9b07      	ldr	r3, [sp, #28]
 8018a94:	3301      	adds	r3, #1
 8018a96:	9307      	str	r3, [sp, #28]
 8018a98:	e774      	b.n	8018984 <_dtoa_r+0x9ac>
 8018a9a:	f000 f919 	bl	8018cd0 <__multadd>
 8018a9e:	4629      	mov	r1, r5
 8018aa0:	4607      	mov	r7, r0
 8018aa2:	2300      	movs	r3, #0
 8018aa4:	220a      	movs	r2, #10
 8018aa6:	4658      	mov	r0, fp
 8018aa8:	f000 f912 	bl	8018cd0 <__multadd>
 8018aac:	4605      	mov	r5, r0
 8018aae:	e7f0      	b.n	8018a92 <_dtoa_r+0xaba>
 8018ab0:	9b00      	ldr	r3, [sp, #0]
 8018ab2:	2b00      	cmp	r3, #0
 8018ab4:	bfcc      	ite	gt
 8018ab6:	461e      	movgt	r6, r3
 8018ab8:	2601      	movle	r6, #1
 8018aba:	4456      	add	r6, sl
 8018abc:	2700      	movs	r7, #0
 8018abe:	4649      	mov	r1, r9
 8018ac0:	2201      	movs	r2, #1
 8018ac2:	4658      	mov	r0, fp
 8018ac4:	f000 fab0 	bl	8019028 <__lshift>
 8018ac8:	4621      	mov	r1, r4
 8018aca:	4681      	mov	r9, r0
 8018acc:	f000 fb18 	bl	8019100 <__mcmp>
 8018ad0:	2800      	cmp	r0, #0
 8018ad2:	dcb0      	bgt.n	8018a36 <_dtoa_r+0xa5e>
 8018ad4:	d102      	bne.n	8018adc <_dtoa_r+0xb04>
 8018ad6:	f018 0f01 	tst.w	r8, #1
 8018ada:	d1ac      	bne.n	8018a36 <_dtoa_r+0xa5e>
 8018adc:	4633      	mov	r3, r6
 8018ade:	461e      	mov	r6, r3
 8018ae0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018ae4:	2a30      	cmp	r2, #48	@ 0x30
 8018ae6:	d0fa      	beq.n	8018ade <_dtoa_r+0xb06>
 8018ae8:	e5c2      	b.n	8018670 <_dtoa_r+0x698>
 8018aea:	459a      	cmp	sl, r3
 8018aec:	d1a4      	bne.n	8018a38 <_dtoa_r+0xa60>
 8018aee:	9b04      	ldr	r3, [sp, #16]
 8018af0:	3301      	adds	r3, #1
 8018af2:	9304      	str	r3, [sp, #16]
 8018af4:	2331      	movs	r3, #49	@ 0x31
 8018af6:	f88a 3000 	strb.w	r3, [sl]
 8018afa:	e5b9      	b.n	8018670 <_dtoa_r+0x698>
 8018afc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8018afe:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8018b5c <_dtoa_r+0xb84>
 8018b02:	b11b      	cbz	r3, 8018b0c <_dtoa_r+0xb34>
 8018b04:	f10a 0308 	add.w	r3, sl, #8
 8018b08:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8018b0a:	6013      	str	r3, [r2, #0]
 8018b0c:	4650      	mov	r0, sl
 8018b0e:	b019      	add	sp, #100	@ 0x64
 8018b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018b16:	2b01      	cmp	r3, #1
 8018b18:	f77f ae37 	ble.w	801878a <_dtoa_r+0x7b2>
 8018b1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018b1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8018b20:	2001      	movs	r0, #1
 8018b22:	e655      	b.n	80187d0 <_dtoa_r+0x7f8>
 8018b24:	9b00      	ldr	r3, [sp, #0]
 8018b26:	2b00      	cmp	r3, #0
 8018b28:	f77f aed6 	ble.w	80188d8 <_dtoa_r+0x900>
 8018b2c:	4656      	mov	r6, sl
 8018b2e:	4621      	mov	r1, r4
 8018b30:	4648      	mov	r0, r9
 8018b32:	f7ff f9c9 	bl	8017ec8 <quorem>
 8018b36:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8018b3a:	f806 8b01 	strb.w	r8, [r6], #1
 8018b3e:	9b00      	ldr	r3, [sp, #0]
 8018b40:	eba6 020a 	sub.w	r2, r6, sl
 8018b44:	4293      	cmp	r3, r2
 8018b46:	ddb3      	ble.n	8018ab0 <_dtoa_r+0xad8>
 8018b48:	4649      	mov	r1, r9
 8018b4a:	2300      	movs	r3, #0
 8018b4c:	220a      	movs	r2, #10
 8018b4e:	4658      	mov	r0, fp
 8018b50:	f000 f8be 	bl	8018cd0 <__multadd>
 8018b54:	4681      	mov	r9, r0
 8018b56:	e7ea      	b.n	8018b2e <_dtoa_r+0xb56>
 8018b58:	0801ac93 	.word	0x0801ac93
 8018b5c:	0801ac2e 	.word	0x0801ac2e

08018b60 <__env_lock>:
 8018b60:	4801      	ldr	r0, [pc, #4]	@ (8018b68 <__env_lock+0x8>)
 8018b62:	f7ff b97a 	b.w	8017e5a <__retarget_lock_acquire_recursive>
 8018b66:	bf00      	nop
 8018b68:	20010dd4 	.word	0x20010dd4

08018b6c <__env_unlock>:
 8018b6c:	4801      	ldr	r0, [pc, #4]	@ (8018b74 <__env_unlock+0x8>)
 8018b6e:	f7ff b975 	b.w	8017e5c <__retarget_lock_release_recursive>
 8018b72:	bf00      	nop
 8018b74:	20010dd4 	.word	0x20010dd4

08018b78 <_free_r>:
 8018b78:	b538      	push	{r3, r4, r5, lr}
 8018b7a:	4605      	mov	r5, r0
 8018b7c:	2900      	cmp	r1, #0
 8018b7e:	d041      	beq.n	8018c04 <_free_r+0x8c>
 8018b80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018b84:	1f0c      	subs	r4, r1, #4
 8018b86:	2b00      	cmp	r3, #0
 8018b88:	bfb8      	it	lt
 8018b8a:	18e4      	addlt	r4, r4, r3
 8018b8c:	f7fe f812 	bl	8016bb4 <__malloc_lock>
 8018b90:	4a1d      	ldr	r2, [pc, #116]	@ (8018c08 <_free_r+0x90>)
 8018b92:	6813      	ldr	r3, [r2, #0]
 8018b94:	b933      	cbnz	r3, 8018ba4 <_free_r+0x2c>
 8018b96:	6063      	str	r3, [r4, #4]
 8018b98:	6014      	str	r4, [r2, #0]
 8018b9a:	4628      	mov	r0, r5
 8018b9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018ba0:	f7fe b80e 	b.w	8016bc0 <__malloc_unlock>
 8018ba4:	42a3      	cmp	r3, r4
 8018ba6:	d908      	bls.n	8018bba <_free_r+0x42>
 8018ba8:	6820      	ldr	r0, [r4, #0]
 8018baa:	1821      	adds	r1, r4, r0
 8018bac:	428b      	cmp	r3, r1
 8018bae:	bf01      	itttt	eq
 8018bb0:	6819      	ldreq	r1, [r3, #0]
 8018bb2:	685b      	ldreq	r3, [r3, #4]
 8018bb4:	1809      	addeq	r1, r1, r0
 8018bb6:	6021      	streq	r1, [r4, #0]
 8018bb8:	e7ed      	b.n	8018b96 <_free_r+0x1e>
 8018bba:	461a      	mov	r2, r3
 8018bbc:	685b      	ldr	r3, [r3, #4]
 8018bbe:	b10b      	cbz	r3, 8018bc4 <_free_r+0x4c>
 8018bc0:	42a3      	cmp	r3, r4
 8018bc2:	d9fa      	bls.n	8018bba <_free_r+0x42>
 8018bc4:	6811      	ldr	r1, [r2, #0]
 8018bc6:	1850      	adds	r0, r2, r1
 8018bc8:	42a0      	cmp	r0, r4
 8018bca:	d10b      	bne.n	8018be4 <_free_r+0x6c>
 8018bcc:	6820      	ldr	r0, [r4, #0]
 8018bce:	4401      	add	r1, r0
 8018bd0:	1850      	adds	r0, r2, r1
 8018bd2:	4283      	cmp	r3, r0
 8018bd4:	6011      	str	r1, [r2, #0]
 8018bd6:	d1e0      	bne.n	8018b9a <_free_r+0x22>
 8018bd8:	6818      	ldr	r0, [r3, #0]
 8018bda:	685b      	ldr	r3, [r3, #4]
 8018bdc:	6053      	str	r3, [r2, #4]
 8018bde:	4408      	add	r0, r1
 8018be0:	6010      	str	r0, [r2, #0]
 8018be2:	e7da      	b.n	8018b9a <_free_r+0x22>
 8018be4:	d902      	bls.n	8018bec <_free_r+0x74>
 8018be6:	230c      	movs	r3, #12
 8018be8:	602b      	str	r3, [r5, #0]
 8018bea:	e7d6      	b.n	8018b9a <_free_r+0x22>
 8018bec:	6820      	ldr	r0, [r4, #0]
 8018bee:	1821      	adds	r1, r4, r0
 8018bf0:	428b      	cmp	r3, r1
 8018bf2:	bf04      	itt	eq
 8018bf4:	6819      	ldreq	r1, [r3, #0]
 8018bf6:	685b      	ldreq	r3, [r3, #4]
 8018bf8:	6063      	str	r3, [r4, #4]
 8018bfa:	bf04      	itt	eq
 8018bfc:	1809      	addeq	r1, r1, r0
 8018bfe:	6021      	streq	r1, [r4, #0]
 8018c00:	6054      	str	r4, [r2, #4]
 8018c02:	e7ca      	b.n	8018b9a <_free_r+0x22>
 8018c04:	bd38      	pop	{r3, r4, r5, pc}
 8018c06:	bf00      	nop
 8018c08:	20010c90 	.word	0x20010c90

08018c0c <_Balloc>:
 8018c0c:	b570      	push	{r4, r5, r6, lr}
 8018c0e:	69c6      	ldr	r6, [r0, #28]
 8018c10:	4604      	mov	r4, r0
 8018c12:	460d      	mov	r5, r1
 8018c14:	b976      	cbnz	r6, 8018c34 <_Balloc+0x28>
 8018c16:	2010      	movs	r0, #16
 8018c18:	f7fd ff1a 	bl	8016a50 <malloc>
 8018c1c:	4602      	mov	r2, r0
 8018c1e:	61e0      	str	r0, [r4, #28]
 8018c20:	b920      	cbnz	r0, 8018c2c <_Balloc+0x20>
 8018c22:	4b18      	ldr	r3, [pc, #96]	@ (8018c84 <_Balloc+0x78>)
 8018c24:	4818      	ldr	r0, [pc, #96]	@ (8018c88 <_Balloc+0x7c>)
 8018c26:	216b      	movs	r1, #107	@ 0x6b
 8018c28:	f7ff f930 	bl	8017e8c <__assert_func>
 8018c2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018c30:	6006      	str	r6, [r0, #0]
 8018c32:	60c6      	str	r6, [r0, #12]
 8018c34:	69e6      	ldr	r6, [r4, #28]
 8018c36:	68f3      	ldr	r3, [r6, #12]
 8018c38:	b183      	cbz	r3, 8018c5c <_Balloc+0x50>
 8018c3a:	69e3      	ldr	r3, [r4, #28]
 8018c3c:	68db      	ldr	r3, [r3, #12]
 8018c3e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8018c42:	b9b8      	cbnz	r0, 8018c74 <_Balloc+0x68>
 8018c44:	2101      	movs	r1, #1
 8018c46:	fa01 f605 	lsl.w	r6, r1, r5
 8018c4a:	1d72      	adds	r2, r6, #5
 8018c4c:	0092      	lsls	r2, r2, #2
 8018c4e:	4620      	mov	r0, r4
 8018c50:	f7fd fe90 	bl	8016974 <_calloc_r>
 8018c54:	b160      	cbz	r0, 8018c70 <_Balloc+0x64>
 8018c56:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8018c5a:	e00e      	b.n	8018c7a <_Balloc+0x6e>
 8018c5c:	2221      	movs	r2, #33	@ 0x21
 8018c5e:	2104      	movs	r1, #4
 8018c60:	4620      	mov	r0, r4
 8018c62:	f7fd fe87 	bl	8016974 <_calloc_r>
 8018c66:	69e3      	ldr	r3, [r4, #28]
 8018c68:	60f0      	str	r0, [r6, #12]
 8018c6a:	68db      	ldr	r3, [r3, #12]
 8018c6c:	2b00      	cmp	r3, #0
 8018c6e:	d1e4      	bne.n	8018c3a <_Balloc+0x2e>
 8018c70:	2000      	movs	r0, #0
 8018c72:	bd70      	pop	{r4, r5, r6, pc}
 8018c74:	6802      	ldr	r2, [r0, #0]
 8018c76:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018c7a:	2300      	movs	r3, #0
 8018c7c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018c80:	e7f7      	b.n	8018c72 <_Balloc+0x66>
 8018c82:	bf00      	nop
 8018c84:	0801aa4e 	.word	0x0801aa4e
 8018c88:	0801aca4 	.word	0x0801aca4

08018c8c <_Bfree>:
 8018c8c:	b570      	push	{r4, r5, r6, lr}
 8018c8e:	69c6      	ldr	r6, [r0, #28]
 8018c90:	4605      	mov	r5, r0
 8018c92:	460c      	mov	r4, r1
 8018c94:	b976      	cbnz	r6, 8018cb4 <_Bfree+0x28>
 8018c96:	2010      	movs	r0, #16
 8018c98:	f7fd feda 	bl	8016a50 <malloc>
 8018c9c:	4602      	mov	r2, r0
 8018c9e:	61e8      	str	r0, [r5, #28]
 8018ca0:	b920      	cbnz	r0, 8018cac <_Bfree+0x20>
 8018ca2:	4b09      	ldr	r3, [pc, #36]	@ (8018cc8 <_Bfree+0x3c>)
 8018ca4:	4809      	ldr	r0, [pc, #36]	@ (8018ccc <_Bfree+0x40>)
 8018ca6:	218f      	movs	r1, #143	@ 0x8f
 8018ca8:	f7ff f8f0 	bl	8017e8c <__assert_func>
 8018cac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018cb0:	6006      	str	r6, [r0, #0]
 8018cb2:	60c6      	str	r6, [r0, #12]
 8018cb4:	b13c      	cbz	r4, 8018cc6 <_Bfree+0x3a>
 8018cb6:	69eb      	ldr	r3, [r5, #28]
 8018cb8:	6862      	ldr	r2, [r4, #4]
 8018cba:	68db      	ldr	r3, [r3, #12]
 8018cbc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018cc0:	6021      	str	r1, [r4, #0]
 8018cc2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8018cc6:	bd70      	pop	{r4, r5, r6, pc}
 8018cc8:	0801aa4e 	.word	0x0801aa4e
 8018ccc:	0801aca4 	.word	0x0801aca4

08018cd0 <__multadd>:
 8018cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018cd4:	690d      	ldr	r5, [r1, #16]
 8018cd6:	4607      	mov	r7, r0
 8018cd8:	460c      	mov	r4, r1
 8018cda:	461e      	mov	r6, r3
 8018cdc:	f101 0c14 	add.w	ip, r1, #20
 8018ce0:	2000      	movs	r0, #0
 8018ce2:	f8dc 3000 	ldr.w	r3, [ip]
 8018ce6:	b299      	uxth	r1, r3
 8018ce8:	fb02 6101 	mla	r1, r2, r1, r6
 8018cec:	0c1e      	lsrs	r6, r3, #16
 8018cee:	0c0b      	lsrs	r3, r1, #16
 8018cf0:	fb02 3306 	mla	r3, r2, r6, r3
 8018cf4:	b289      	uxth	r1, r1
 8018cf6:	3001      	adds	r0, #1
 8018cf8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8018cfc:	4285      	cmp	r5, r0
 8018cfe:	f84c 1b04 	str.w	r1, [ip], #4
 8018d02:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8018d06:	dcec      	bgt.n	8018ce2 <__multadd+0x12>
 8018d08:	b30e      	cbz	r6, 8018d4e <__multadd+0x7e>
 8018d0a:	68a3      	ldr	r3, [r4, #8]
 8018d0c:	42ab      	cmp	r3, r5
 8018d0e:	dc19      	bgt.n	8018d44 <__multadd+0x74>
 8018d10:	6861      	ldr	r1, [r4, #4]
 8018d12:	4638      	mov	r0, r7
 8018d14:	3101      	adds	r1, #1
 8018d16:	f7ff ff79 	bl	8018c0c <_Balloc>
 8018d1a:	4680      	mov	r8, r0
 8018d1c:	b928      	cbnz	r0, 8018d2a <__multadd+0x5a>
 8018d1e:	4602      	mov	r2, r0
 8018d20:	4b0c      	ldr	r3, [pc, #48]	@ (8018d54 <__multadd+0x84>)
 8018d22:	480d      	ldr	r0, [pc, #52]	@ (8018d58 <__multadd+0x88>)
 8018d24:	21ba      	movs	r1, #186	@ 0xba
 8018d26:	f7ff f8b1 	bl	8017e8c <__assert_func>
 8018d2a:	6922      	ldr	r2, [r4, #16]
 8018d2c:	3202      	adds	r2, #2
 8018d2e:	f104 010c 	add.w	r1, r4, #12
 8018d32:	0092      	lsls	r2, r2, #2
 8018d34:	300c      	adds	r0, #12
 8018d36:	f7ff f89a 	bl	8017e6e <memcpy>
 8018d3a:	4621      	mov	r1, r4
 8018d3c:	4638      	mov	r0, r7
 8018d3e:	f7ff ffa5 	bl	8018c8c <_Bfree>
 8018d42:	4644      	mov	r4, r8
 8018d44:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8018d48:	3501      	adds	r5, #1
 8018d4a:	615e      	str	r6, [r3, #20]
 8018d4c:	6125      	str	r5, [r4, #16]
 8018d4e:	4620      	mov	r0, r4
 8018d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018d54:	0801ac93 	.word	0x0801ac93
 8018d58:	0801aca4 	.word	0x0801aca4

08018d5c <__hi0bits>:
 8018d5c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8018d60:	4603      	mov	r3, r0
 8018d62:	bf36      	itet	cc
 8018d64:	0403      	lslcc	r3, r0, #16
 8018d66:	2000      	movcs	r0, #0
 8018d68:	2010      	movcc	r0, #16
 8018d6a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8018d6e:	bf3c      	itt	cc
 8018d70:	021b      	lslcc	r3, r3, #8
 8018d72:	3008      	addcc	r0, #8
 8018d74:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8018d78:	bf3c      	itt	cc
 8018d7a:	011b      	lslcc	r3, r3, #4
 8018d7c:	3004      	addcc	r0, #4
 8018d7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8018d82:	bf3c      	itt	cc
 8018d84:	009b      	lslcc	r3, r3, #2
 8018d86:	3002      	addcc	r0, #2
 8018d88:	2b00      	cmp	r3, #0
 8018d8a:	db05      	blt.n	8018d98 <__hi0bits+0x3c>
 8018d8c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8018d90:	f100 0001 	add.w	r0, r0, #1
 8018d94:	bf08      	it	eq
 8018d96:	2020      	moveq	r0, #32
 8018d98:	4770      	bx	lr

08018d9a <__lo0bits>:
 8018d9a:	6803      	ldr	r3, [r0, #0]
 8018d9c:	4602      	mov	r2, r0
 8018d9e:	f013 0007 	ands.w	r0, r3, #7
 8018da2:	d00b      	beq.n	8018dbc <__lo0bits+0x22>
 8018da4:	07d9      	lsls	r1, r3, #31
 8018da6:	d421      	bmi.n	8018dec <__lo0bits+0x52>
 8018da8:	0798      	lsls	r0, r3, #30
 8018daa:	bf49      	itett	mi
 8018dac:	085b      	lsrmi	r3, r3, #1
 8018dae:	089b      	lsrpl	r3, r3, #2
 8018db0:	2001      	movmi	r0, #1
 8018db2:	6013      	strmi	r3, [r2, #0]
 8018db4:	bf5c      	itt	pl
 8018db6:	6013      	strpl	r3, [r2, #0]
 8018db8:	2002      	movpl	r0, #2
 8018dba:	4770      	bx	lr
 8018dbc:	b299      	uxth	r1, r3
 8018dbe:	b909      	cbnz	r1, 8018dc4 <__lo0bits+0x2a>
 8018dc0:	0c1b      	lsrs	r3, r3, #16
 8018dc2:	2010      	movs	r0, #16
 8018dc4:	b2d9      	uxtb	r1, r3
 8018dc6:	b909      	cbnz	r1, 8018dcc <__lo0bits+0x32>
 8018dc8:	3008      	adds	r0, #8
 8018dca:	0a1b      	lsrs	r3, r3, #8
 8018dcc:	0719      	lsls	r1, r3, #28
 8018dce:	bf04      	itt	eq
 8018dd0:	091b      	lsreq	r3, r3, #4
 8018dd2:	3004      	addeq	r0, #4
 8018dd4:	0799      	lsls	r1, r3, #30
 8018dd6:	bf04      	itt	eq
 8018dd8:	089b      	lsreq	r3, r3, #2
 8018dda:	3002      	addeq	r0, #2
 8018ddc:	07d9      	lsls	r1, r3, #31
 8018dde:	d403      	bmi.n	8018de8 <__lo0bits+0x4e>
 8018de0:	085b      	lsrs	r3, r3, #1
 8018de2:	f100 0001 	add.w	r0, r0, #1
 8018de6:	d003      	beq.n	8018df0 <__lo0bits+0x56>
 8018de8:	6013      	str	r3, [r2, #0]
 8018dea:	4770      	bx	lr
 8018dec:	2000      	movs	r0, #0
 8018dee:	4770      	bx	lr
 8018df0:	2020      	movs	r0, #32
 8018df2:	4770      	bx	lr

08018df4 <__i2b>:
 8018df4:	b510      	push	{r4, lr}
 8018df6:	460c      	mov	r4, r1
 8018df8:	2101      	movs	r1, #1
 8018dfa:	f7ff ff07 	bl	8018c0c <_Balloc>
 8018dfe:	4602      	mov	r2, r0
 8018e00:	b928      	cbnz	r0, 8018e0e <__i2b+0x1a>
 8018e02:	4b05      	ldr	r3, [pc, #20]	@ (8018e18 <__i2b+0x24>)
 8018e04:	4805      	ldr	r0, [pc, #20]	@ (8018e1c <__i2b+0x28>)
 8018e06:	f240 1145 	movw	r1, #325	@ 0x145
 8018e0a:	f7ff f83f 	bl	8017e8c <__assert_func>
 8018e0e:	2301      	movs	r3, #1
 8018e10:	6144      	str	r4, [r0, #20]
 8018e12:	6103      	str	r3, [r0, #16]
 8018e14:	bd10      	pop	{r4, pc}
 8018e16:	bf00      	nop
 8018e18:	0801ac93 	.word	0x0801ac93
 8018e1c:	0801aca4 	.word	0x0801aca4

08018e20 <__multiply>:
 8018e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e24:	4614      	mov	r4, r2
 8018e26:	690a      	ldr	r2, [r1, #16]
 8018e28:	6923      	ldr	r3, [r4, #16]
 8018e2a:	429a      	cmp	r2, r3
 8018e2c:	bfa8      	it	ge
 8018e2e:	4623      	movge	r3, r4
 8018e30:	460f      	mov	r7, r1
 8018e32:	bfa4      	itt	ge
 8018e34:	460c      	movge	r4, r1
 8018e36:	461f      	movge	r7, r3
 8018e38:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8018e3c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8018e40:	68a3      	ldr	r3, [r4, #8]
 8018e42:	6861      	ldr	r1, [r4, #4]
 8018e44:	eb0a 0609 	add.w	r6, sl, r9
 8018e48:	42b3      	cmp	r3, r6
 8018e4a:	b085      	sub	sp, #20
 8018e4c:	bfb8      	it	lt
 8018e4e:	3101      	addlt	r1, #1
 8018e50:	f7ff fedc 	bl	8018c0c <_Balloc>
 8018e54:	b930      	cbnz	r0, 8018e64 <__multiply+0x44>
 8018e56:	4602      	mov	r2, r0
 8018e58:	4b44      	ldr	r3, [pc, #272]	@ (8018f6c <__multiply+0x14c>)
 8018e5a:	4845      	ldr	r0, [pc, #276]	@ (8018f70 <__multiply+0x150>)
 8018e5c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8018e60:	f7ff f814 	bl	8017e8c <__assert_func>
 8018e64:	f100 0514 	add.w	r5, r0, #20
 8018e68:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8018e6c:	462b      	mov	r3, r5
 8018e6e:	2200      	movs	r2, #0
 8018e70:	4543      	cmp	r3, r8
 8018e72:	d321      	bcc.n	8018eb8 <__multiply+0x98>
 8018e74:	f107 0114 	add.w	r1, r7, #20
 8018e78:	f104 0214 	add.w	r2, r4, #20
 8018e7c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8018e80:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8018e84:	9302      	str	r3, [sp, #8]
 8018e86:	1b13      	subs	r3, r2, r4
 8018e88:	3b15      	subs	r3, #21
 8018e8a:	f023 0303 	bic.w	r3, r3, #3
 8018e8e:	3304      	adds	r3, #4
 8018e90:	f104 0715 	add.w	r7, r4, #21
 8018e94:	42ba      	cmp	r2, r7
 8018e96:	bf38      	it	cc
 8018e98:	2304      	movcc	r3, #4
 8018e9a:	9301      	str	r3, [sp, #4]
 8018e9c:	9b02      	ldr	r3, [sp, #8]
 8018e9e:	9103      	str	r1, [sp, #12]
 8018ea0:	428b      	cmp	r3, r1
 8018ea2:	d80c      	bhi.n	8018ebe <__multiply+0x9e>
 8018ea4:	2e00      	cmp	r6, #0
 8018ea6:	dd03      	ble.n	8018eb0 <__multiply+0x90>
 8018ea8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8018eac:	2b00      	cmp	r3, #0
 8018eae:	d05b      	beq.n	8018f68 <__multiply+0x148>
 8018eb0:	6106      	str	r6, [r0, #16]
 8018eb2:	b005      	add	sp, #20
 8018eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018eb8:	f843 2b04 	str.w	r2, [r3], #4
 8018ebc:	e7d8      	b.n	8018e70 <__multiply+0x50>
 8018ebe:	f8b1 a000 	ldrh.w	sl, [r1]
 8018ec2:	f1ba 0f00 	cmp.w	sl, #0
 8018ec6:	d024      	beq.n	8018f12 <__multiply+0xf2>
 8018ec8:	f104 0e14 	add.w	lr, r4, #20
 8018ecc:	46a9      	mov	r9, r5
 8018ece:	f04f 0c00 	mov.w	ip, #0
 8018ed2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8018ed6:	f8d9 3000 	ldr.w	r3, [r9]
 8018eda:	fa1f fb87 	uxth.w	fp, r7
 8018ede:	b29b      	uxth	r3, r3
 8018ee0:	fb0a 330b 	mla	r3, sl, fp, r3
 8018ee4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8018ee8:	f8d9 7000 	ldr.w	r7, [r9]
 8018eec:	4463      	add	r3, ip
 8018eee:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8018ef2:	fb0a c70b 	mla	r7, sl, fp, ip
 8018ef6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8018efa:	b29b      	uxth	r3, r3
 8018efc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8018f00:	4572      	cmp	r2, lr
 8018f02:	f849 3b04 	str.w	r3, [r9], #4
 8018f06:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8018f0a:	d8e2      	bhi.n	8018ed2 <__multiply+0xb2>
 8018f0c:	9b01      	ldr	r3, [sp, #4]
 8018f0e:	f845 c003 	str.w	ip, [r5, r3]
 8018f12:	9b03      	ldr	r3, [sp, #12]
 8018f14:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8018f18:	3104      	adds	r1, #4
 8018f1a:	f1b9 0f00 	cmp.w	r9, #0
 8018f1e:	d021      	beq.n	8018f64 <__multiply+0x144>
 8018f20:	682b      	ldr	r3, [r5, #0]
 8018f22:	f104 0c14 	add.w	ip, r4, #20
 8018f26:	46ae      	mov	lr, r5
 8018f28:	f04f 0a00 	mov.w	sl, #0
 8018f2c:	f8bc b000 	ldrh.w	fp, [ip]
 8018f30:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8018f34:	fb09 770b 	mla	r7, r9, fp, r7
 8018f38:	4457      	add	r7, sl
 8018f3a:	b29b      	uxth	r3, r3
 8018f3c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8018f40:	f84e 3b04 	str.w	r3, [lr], #4
 8018f44:	f85c 3b04 	ldr.w	r3, [ip], #4
 8018f48:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8018f4c:	f8be 3000 	ldrh.w	r3, [lr]
 8018f50:	fb09 330a 	mla	r3, r9, sl, r3
 8018f54:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8018f58:	4562      	cmp	r2, ip
 8018f5a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8018f5e:	d8e5      	bhi.n	8018f2c <__multiply+0x10c>
 8018f60:	9f01      	ldr	r7, [sp, #4]
 8018f62:	51eb      	str	r3, [r5, r7]
 8018f64:	3504      	adds	r5, #4
 8018f66:	e799      	b.n	8018e9c <__multiply+0x7c>
 8018f68:	3e01      	subs	r6, #1
 8018f6a:	e79b      	b.n	8018ea4 <__multiply+0x84>
 8018f6c:	0801ac93 	.word	0x0801ac93
 8018f70:	0801aca4 	.word	0x0801aca4

08018f74 <__pow5mult>:
 8018f74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018f78:	4615      	mov	r5, r2
 8018f7a:	f012 0203 	ands.w	r2, r2, #3
 8018f7e:	4607      	mov	r7, r0
 8018f80:	460e      	mov	r6, r1
 8018f82:	d007      	beq.n	8018f94 <__pow5mult+0x20>
 8018f84:	4c25      	ldr	r4, [pc, #148]	@ (801901c <__pow5mult+0xa8>)
 8018f86:	3a01      	subs	r2, #1
 8018f88:	2300      	movs	r3, #0
 8018f8a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018f8e:	f7ff fe9f 	bl	8018cd0 <__multadd>
 8018f92:	4606      	mov	r6, r0
 8018f94:	10ad      	asrs	r5, r5, #2
 8018f96:	d03d      	beq.n	8019014 <__pow5mult+0xa0>
 8018f98:	69fc      	ldr	r4, [r7, #28]
 8018f9a:	b97c      	cbnz	r4, 8018fbc <__pow5mult+0x48>
 8018f9c:	2010      	movs	r0, #16
 8018f9e:	f7fd fd57 	bl	8016a50 <malloc>
 8018fa2:	4602      	mov	r2, r0
 8018fa4:	61f8      	str	r0, [r7, #28]
 8018fa6:	b928      	cbnz	r0, 8018fb4 <__pow5mult+0x40>
 8018fa8:	4b1d      	ldr	r3, [pc, #116]	@ (8019020 <__pow5mult+0xac>)
 8018faa:	481e      	ldr	r0, [pc, #120]	@ (8019024 <__pow5mult+0xb0>)
 8018fac:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8018fb0:	f7fe ff6c 	bl	8017e8c <__assert_func>
 8018fb4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018fb8:	6004      	str	r4, [r0, #0]
 8018fba:	60c4      	str	r4, [r0, #12]
 8018fbc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8018fc0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018fc4:	b94c      	cbnz	r4, 8018fda <__pow5mult+0x66>
 8018fc6:	f240 2171 	movw	r1, #625	@ 0x271
 8018fca:	4638      	mov	r0, r7
 8018fcc:	f7ff ff12 	bl	8018df4 <__i2b>
 8018fd0:	2300      	movs	r3, #0
 8018fd2:	f8c8 0008 	str.w	r0, [r8, #8]
 8018fd6:	4604      	mov	r4, r0
 8018fd8:	6003      	str	r3, [r0, #0]
 8018fda:	f04f 0900 	mov.w	r9, #0
 8018fde:	07eb      	lsls	r3, r5, #31
 8018fe0:	d50a      	bpl.n	8018ff8 <__pow5mult+0x84>
 8018fe2:	4631      	mov	r1, r6
 8018fe4:	4622      	mov	r2, r4
 8018fe6:	4638      	mov	r0, r7
 8018fe8:	f7ff ff1a 	bl	8018e20 <__multiply>
 8018fec:	4631      	mov	r1, r6
 8018fee:	4680      	mov	r8, r0
 8018ff0:	4638      	mov	r0, r7
 8018ff2:	f7ff fe4b 	bl	8018c8c <_Bfree>
 8018ff6:	4646      	mov	r6, r8
 8018ff8:	106d      	asrs	r5, r5, #1
 8018ffa:	d00b      	beq.n	8019014 <__pow5mult+0xa0>
 8018ffc:	6820      	ldr	r0, [r4, #0]
 8018ffe:	b938      	cbnz	r0, 8019010 <__pow5mult+0x9c>
 8019000:	4622      	mov	r2, r4
 8019002:	4621      	mov	r1, r4
 8019004:	4638      	mov	r0, r7
 8019006:	f7ff ff0b 	bl	8018e20 <__multiply>
 801900a:	6020      	str	r0, [r4, #0]
 801900c:	f8c0 9000 	str.w	r9, [r0]
 8019010:	4604      	mov	r4, r0
 8019012:	e7e4      	b.n	8018fde <__pow5mult+0x6a>
 8019014:	4630      	mov	r0, r6
 8019016:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801901a:	bf00      	nop
 801901c:	0801ad00 	.word	0x0801ad00
 8019020:	0801aa4e 	.word	0x0801aa4e
 8019024:	0801aca4 	.word	0x0801aca4

08019028 <__lshift>:
 8019028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801902c:	460c      	mov	r4, r1
 801902e:	6849      	ldr	r1, [r1, #4]
 8019030:	6923      	ldr	r3, [r4, #16]
 8019032:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8019036:	68a3      	ldr	r3, [r4, #8]
 8019038:	4607      	mov	r7, r0
 801903a:	4691      	mov	r9, r2
 801903c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8019040:	f108 0601 	add.w	r6, r8, #1
 8019044:	42b3      	cmp	r3, r6
 8019046:	db0b      	blt.n	8019060 <__lshift+0x38>
 8019048:	4638      	mov	r0, r7
 801904a:	f7ff fddf 	bl	8018c0c <_Balloc>
 801904e:	4605      	mov	r5, r0
 8019050:	b948      	cbnz	r0, 8019066 <__lshift+0x3e>
 8019052:	4602      	mov	r2, r0
 8019054:	4b28      	ldr	r3, [pc, #160]	@ (80190f8 <__lshift+0xd0>)
 8019056:	4829      	ldr	r0, [pc, #164]	@ (80190fc <__lshift+0xd4>)
 8019058:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801905c:	f7fe ff16 	bl	8017e8c <__assert_func>
 8019060:	3101      	adds	r1, #1
 8019062:	005b      	lsls	r3, r3, #1
 8019064:	e7ee      	b.n	8019044 <__lshift+0x1c>
 8019066:	2300      	movs	r3, #0
 8019068:	f100 0114 	add.w	r1, r0, #20
 801906c:	f100 0210 	add.w	r2, r0, #16
 8019070:	4618      	mov	r0, r3
 8019072:	4553      	cmp	r3, sl
 8019074:	db33      	blt.n	80190de <__lshift+0xb6>
 8019076:	6920      	ldr	r0, [r4, #16]
 8019078:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801907c:	f104 0314 	add.w	r3, r4, #20
 8019080:	f019 091f 	ands.w	r9, r9, #31
 8019084:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8019088:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801908c:	d02b      	beq.n	80190e6 <__lshift+0xbe>
 801908e:	f1c9 0e20 	rsb	lr, r9, #32
 8019092:	468a      	mov	sl, r1
 8019094:	2200      	movs	r2, #0
 8019096:	6818      	ldr	r0, [r3, #0]
 8019098:	fa00 f009 	lsl.w	r0, r0, r9
 801909c:	4310      	orrs	r0, r2
 801909e:	f84a 0b04 	str.w	r0, [sl], #4
 80190a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80190a6:	459c      	cmp	ip, r3
 80190a8:	fa22 f20e 	lsr.w	r2, r2, lr
 80190ac:	d8f3      	bhi.n	8019096 <__lshift+0x6e>
 80190ae:	ebac 0304 	sub.w	r3, ip, r4
 80190b2:	3b15      	subs	r3, #21
 80190b4:	f023 0303 	bic.w	r3, r3, #3
 80190b8:	3304      	adds	r3, #4
 80190ba:	f104 0015 	add.w	r0, r4, #21
 80190be:	4584      	cmp	ip, r0
 80190c0:	bf38      	it	cc
 80190c2:	2304      	movcc	r3, #4
 80190c4:	50ca      	str	r2, [r1, r3]
 80190c6:	b10a      	cbz	r2, 80190cc <__lshift+0xa4>
 80190c8:	f108 0602 	add.w	r6, r8, #2
 80190cc:	3e01      	subs	r6, #1
 80190ce:	4638      	mov	r0, r7
 80190d0:	612e      	str	r6, [r5, #16]
 80190d2:	4621      	mov	r1, r4
 80190d4:	f7ff fdda 	bl	8018c8c <_Bfree>
 80190d8:	4628      	mov	r0, r5
 80190da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80190de:	f842 0f04 	str.w	r0, [r2, #4]!
 80190e2:	3301      	adds	r3, #1
 80190e4:	e7c5      	b.n	8019072 <__lshift+0x4a>
 80190e6:	3904      	subs	r1, #4
 80190e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80190ec:	f841 2f04 	str.w	r2, [r1, #4]!
 80190f0:	459c      	cmp	ip, r3
 80190f2:	d8f9      	bhi.n	80190e8 <__lshift+0xc0>
 80190f4:	e7ea      	b.n	80190cc <__lshift+0xa4>
 80190f6:	bf00      	nop
 80190f8:	0801ac93 	.word	0x0801ac93
 80190fc:	0801aca4 	.word	0x0801aca4

08019100 <__mcmp>:
 8019100:	690a      	ldr	r2, [r1, #16]
 8019102:	4603      	mov	r3, r0
 8019104:	6900      	ldr	r0, [r0, #16]
 8019106:	1a80      	subs	r0, r0, r2
 8019108:	b530      	push	{r4, r5, lr}
 801910a:	d10e      	bne.n	801912a <__mcmp+0x2a>
 801910c:	3314      	adds	r3, #20
 801910e:	3114      	adds	r1, #20
 8019110:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8019114:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8019118:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801911c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8019120:	4295      	cmp	r5, r2
 8019122:	d003      	beq.n	801912c <__mcmp+0x2c>
 8019124:	d205      	bcs.n	8019132 <__mcmp+0x32>
 8019126:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801912a:	bd30      	pop	{r4, r5, pc}
 801912c:	42a3      	cmp	r3, r4
 801912e:	d3f3      	bcc.n	8019118 <__mcmp+0x18>
 8019130:	e7fb      	b.n	801912a <__mcmp+0x2a>
 8019132:	2001      	movs	r0, #1
 8019134:	e7f9      	b.n	801912a <__mcmp+0x2a>
	...

08019138 <__mdiff>:
 8019138:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801913c:	4689      	mov	r9, r1
 801913e:	4606      	mov	r6, r0
 8019140:	4611      	mov	r1, r2
 8019142:	4648      	mov	r0, r9
 8019144:	4614      	mov	r4, r2
 8019146:	f7ff ffdb 	bl	8019100 <__mcmp>
 801914a:	1e05      	subs	r5, r0, #0
 801914c:	d112      	bne.n	8019174 <__mdiff+0x3c>
 801914e:	4629      	mov	r1, r5
 8019150:	4630      	mov	r0, r6
 8019152:	f7ff fd5b 	bl	8018c0c <_Balloc>
 8019156:	4602      	mov	r2, r0
 8019158:	b928      	cbnz	r0, 8019166 <__mdiff+0x2e>
 801915a:	4b3f      	ldr	r3, [pc, #252]	@ (8019258 <__mdiff+0x120>)
 801915c:	f240 2137 	movw	r1, #567	@ 0x237
 8019160:	483e      	ldr	r0, [pc, #248]	@ (801925c <__mdiff+0x124>)
 8019162:	f7fe fe93 	bl	8017e8c <__assert_func>
 8019166:	2301      	movs	r3, #1
 8019168:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801916c:	4610      	mov	r0, r2
 801916e:	b003      	add	sp, #12
 8019170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019174:	bfbc      	itt	lt
 8019176:	464b      	movlt	r3, r9
 8019178:	46a1      	movlt	r9, r4
 801917a:	4630      	mov	r0, r6
 801917c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8019180:	bfba      	itte	lt
 8019182:	461c      	movlt	r4, r3
 8019184:	2501      	movlt	r5, #1
 8019186:	2500      	movge	r5, #0
 8019188:	f7ff fd40 	bl	8018c0c <_Balloc>
 801918c:	4602      	mov	r2, r0
 801918e:	b918      	cbnz	r0, 8019198 <__mdiff+0x60>
 8019190:	4b31      	ldr	r3, [pc, #196]	@ (8019258 <__mdiff+0x120>)
 8019192:	f240 2145 	movw	r1, #581	@ 0x245
 8019196:	e7e3      	b.n	8019160 <__mdiff+0x28>
 8019198:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801919c:	6926      	ldr	r6, [r4, #16]
 801919e:	60c5      	str	r5, [r0, #12]
 80191a0:	f109 0310 	add.w	r3, r9, #16
 80191a4:	f109 0514 	add.w	r5, r9, #20
 80191a8:	f104 0e14 	add.w	lr, r4, #20
 80191ac:	f100 0b14 	add.w	fp, r0, #20
 80191b0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80191b4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80191b8:	9301      	str	r3, [sp, #4]
 80191ba:	46d9      	mov	r9, fp
 80191bc:	f04f 0c00 	mov.w	ip, #0
 80191c0:	9b01      	ldr	r3, [sp, #4]
 80191c2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80191c6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80191ca:	9301      	str	r3, [sp, #4]
 80191cc:	fa1f f38a 	uxth.w	r3, sl
 80191d0:	4619      	mov	r1, r3
 80191d2:	b283      	uxth	r3, r0
 80191d4:	1acb      	subs	r3, r1, r3
 80191d6:	0c00      	lsrs	r0, r0, #16
 80191d8:	4463      	add	r3, ip
 80191da:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80191de:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80191e2:	b29b      	uxth	r3, r3
 80191e4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80191e8:	4576      	cmp	r6, lr
 80191ea:	f849 3b04 	str.w	r3, [r9], #4
 80191ee:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80191f2:	d8e5      	bhi.n	80191c0 <__mdiff+0x88>
 80191f4:	1b33      	subs	r3, r6, r4
 80191f6:	3b15      	subs	r3, #21
 80191f8:	f023 0303 	bic.w	r3, r3, #3
 80191fc:	3415      	adds	r4, #21
 80191fe:	3304      	adds	r3, #4
 8019200:	42a6      	cmp	r6, r4
 8019202:	bf38      	it	cc
 8019204:	2304      	movcc	r3, #4
 8019206:	441d      	add	r5, r3
 8019208:	445b      	add	r3, fp
 801920a:	461e      	mov	r6, r3
 801920c:	462c      	mov	r4, r5
 801920e:	4544      	cmp	r4, r8
 8019210:	d30e      	bcc.n	8019230 <__mdiff+0xf8>
 8019212:	f108 0103 	add.w	r1, r8, #3
 8019216:	1b49      	subs	r1, r1, r5
 8019218:	f021 0103 	bic.w	r1, r1, #3
 801921c:	3d03      	subs	r5, #3
 801921e:	45a8      	cmp	r8, r5
 8019220:	bf38      	it	cc
 8019222:	2100      	movcc	r1, #0
 8019224:	440b      	add	r3, r1
 8019226:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801922a:	b191      	cbz	r1, 8019252 <__mdiff+0x11a>
 801922c:	6117      	str	r7, [r2, #16]
 801922e:	e79d      	b.n	801916c <__mdiff+0x34>
 8019230:	f854 1b04 	ldr.w	r1, [r4], #4
 8019234:	46e6      	mov	lr, ip
 8019236:	0c08      	lsrs	r0, r1, #16
 8019238:	fa1c fc81 	uxtah	ip, ip, r1
 801923c:	4471      	add	r1, lr
 801923e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8019242:	b289      	uxth	r1, r1
 8019244:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8019248:	f846 1b04 	str.w	r1, [r6], #4
 801924c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8019250:	e7dd      	b.n	801920e <__mdiff+0xd6>
 8019252:	3f01      	subs	r7, #1
 8019254:	e7e7      	b.n	8019226 <__mdiff+0xee>
 8019256:	bf00      	nop
 8019258:	0801ac93 	.word	0x0801ac93
 801925c:	0801aca4 	.word	0x0801aca4

08019260 <__d2b>:
 8019260:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8019264:	460f      	mov	r7, r1
 8019266:	2101      	movs	r1, #1
 8019268:	ec59 8b10 	vmov	r8, r9, d0
 801926c:	4616      	mov	r6, r2
 801926e:	f7ff fccd 	bl	8018c0c <_Balloc>
 8019272:	4604      	mov	r4, r0
 8019274:	b930      	cbnz	r0, 8019284 <__d2b+0x24>
 8019276:	4602      	mov	r2, r0
 8019278:	4b23      	ldr	r3, [pc, #140]	@ (8019308 <__d2b+0xa8>)
 801927a:	4824      	ldr	r0, [pc, #144]	@ (801930c <__d2b+0xac>)
 801927c:	f240 310f 	movw	r1, #783	@ 0x30f
 8019280:	f7fe fe04 	bl	8017e8c <__assert_func>
 8019284:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8019288:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801928c:	b10d      	cbz	r5, 8019292 <__d2b+0x32>
 801928e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8019292:	9301      	str	r3, [sp, #4]
 8019294:	f1b8 0300 	subs.w	r3, r8, #0
 8019298:	d023      	beq.n	80192e2 <__d2b+0x82>
 801929a:	4668      	mov	r0, sp
 801929c:	9300      	str	r3, [sp, #0]
 801929e:	f7ff fd7c 	bl	8018d9a <__lo0bits>
 80192a2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80192a6:	b1d0      	cbz	r0, 80192de <__d2b+0x7e>
 80192a8:	f1c0 0320 	rsb	r3, r0, #32
 80192ac:	fa02 f303 	lsl.w	r3, r2, r3
 80192b0:	430b      	orrs	r3, r1
 80192b2:	40c2      	lsrs	r2, r0
 80192b4:	6163      	str	r3, [r4, #20]
 80192b6:	9201      	str	r2, [sp, #4]
 80192b8:	9b01      	ldr	r3, [sp, #4]
 80192ba:	61a3      	str	r3, [r4, #24]
 80192bc:	2b00      	cmp	r3, #0
 80192be:	bf0c      	ite	eq
 80192c0:	2201      	moveq	r2, #1
 80192c2:	2202      	movne	r2, #2
 80192c4:	6122      	str	r2, [r4, #16]
 80192c6:	b1a5      	cbz	r5, 80192f2 <__d2b+0x92>
 80192c8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80192cc:	4405      	add	r5, r0
 80192ce:	603d      	str	r5, [r7, #0]
 80192d0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80192d4:	6030      	str	r0, [r6, #0]
 80192d6:	4620      	mov	r0, r4
 80192d8:	b003      	add	sp, #12
 80192da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80192de:	6161      	str	r1, [r4, #20]
 80192e0:	e7ea      	b.n	80192b8 <__d2b+0x58>
 80192e2:	a801      	add	r0, sp, #4
 80192e4:	f7ff fd59 	bl	8018d9a <__lo0bits>
 80192e8:	9b01      	ldr	r3, [sp, #4]
 80192ea:	6163      	str	r3, [r4, #20]
 80192ec:	3020      	adds	r0, #32
 80192ee:	2201      	movs	r2, #1
 80192f0:	e7e8      	b.n	80192c4 <__d2b+0x64>
 80192f2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80192f6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80192fa:	6038      	str	r0, [r7, #0]
 80192fc:	6918      	ldr	r0, [r3, #16]
 80192fe:	f7ff fd2d 	bl	8018d5c <__hi0bits>
 8019302:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8019306:	e7e5      	b.n	80192d4 <__d2b+0x74>
 8019308:	0801ac93 	.word	0x0801ac93
 801930c:	0801aca4 	.word	0x0801aca4

08019310 <_malloc_usable_size_r>:
 8019310:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019314:	1f18      	subs	r0, r3, #4
 8019316:	2b00      	cmp	r3, #0
 8019318:	bfbc      	itt	lt
 801931a:	580b      	ldrlt	r3, [r1, r0]
 801931c:	18c0      	addlt	r0, r0, r3
 801931e:	4770      	bx	lr

08019320 <__ssputs_r>:
 8019320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019324:	688e      	ldr	r6, [r1, #8]
 8019326:	461f      	mov	r7, r3
 8019328:	42be      	cmp	r6, r7
 801932a:	680b      	ldr	r3, [r1, #0]
 801932c:	4682      	mov	sl, r0
 801932e:	460c      	mov	r4, r1
 8019330:	4690      	mov	r8, r2
 8019332:	d82d      	bhi.n	8019390 <__ssputs_r+0x70>
 8019334:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8019338:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801933c:	d026      	beq.n	801938c <__ssputs_r+0x6c>
 801933e:	6965      	ldr	r5, [r4, #20]
 8019340:	6909      	ldr	r1, [r1, #16]
 8019342:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019346:	eba3 0901 	sub.w	r9, r3, r1
 801934a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801934e:	1c7b      	adds	r3, r7, #1
 8019350:	444b      	add	r3, r9
 8019352:	106d      	asrs	r5, r5, #1
 8019354:	429d      	cmp	r5, r3
 8019356:	bf38      	it	cc
 8019358:	461d      	movcc	r5, r3
 801935a:	0553      	lsls	r3, r2, #21
 801935c:	d527      	bpl.n	80193ae <__ssputs_r+0x8e>
 801935e:	4629      	mov	r1, r5
 8019360:	f7fd fba8 	bl	8016ab4 <_malloc_r>
 8019364:	4606      	mov	r6, r0
 8019366:	b360      	cbz	r0, 80193c2 <__ssputs_r+0xa2>
 8019368:	6921      	ldr	r1, [r4, #16]
 801936a:	464a      	mov	r2, r9
 801936c:	f7fe fd7f 	bl	8017e6e <memcpy>
 8019370:	89a3      	ldrh	r3, [r4, #12]
 8019372:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8019376:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801937a:	81a3      	strh	r3, [r4, #12]
 801937c:	6126      	str	r6, [r4, #16]
 801937e:	6165      	str	r5, [r4, #20]
 8019380:	444e      	add	r6, r9
 8019382:	eba5 0509 	sub.w	r5, r5, r9
 8019386:	6026      	str	r6, [r4, #0]
 8019388:	60a5      	str	r5, [r4, #8]
 801938a:	463e      	mov	r6, r7
 801938c:	42be      	cmp	r6, r7
 801938e:	d900      	bls.n	8019392 <__ssputs_r+0x72>
 8019390:	463e      	mov	r6, r7
 8019392:	6820      	ldr	r0, [r4, #0]
 8019394:	4632      	mov	r2, r6
 8019396:	4641      	mov	r1, r8
 8019398:	f7fe fc2c 	bl	8017bf4 <memmove>
 801939c:	68a3      	ldr	r3, [r4, #8]
 801939e:	1b9b      	subs	r3, r3, r6
 80193a0:	60a3      	str	r3, [r4, #8]
 80193a2:	6823      	ldr	r3, [r4, #0]
 80193a4:	4433      	add	r3, r6
 80193a6:	6023      	str	r3, [r4, #0]
 80193a8:	2000      	movs	r0, #0
 80193aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80193ae:	462a      	mov	r2, r5
 80193b0:	f7fd fc80 	bl	8016cb4 <_realloc_r>
 80193b4:	4606      	mov	r6, r0
 80193b6:	2800      	cmp	r0, #0
 80193b8:	d1e0      	bne.n	801937c <__ssputs_r+0x5c>
 80193ba:	6921      	ldr	r1, [r4, #16]
 80193bc:	4650      	mov	r0, sl
 80193be:	f7ff fbdb 	bl	8018b78 <_free_r>
 80193c2:	230c      	movs	r3, #12
 80193c4:	f8ca 3000 	str.w	r3, [sl]
 80193c8:	89a3      	ldrh	r3, [r4, #12]
 80193ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80193ce:	81a3      	strh	r3, [r4, #12]
 80193d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80193d4:	e7e9      	b.n	80193aa <__ssputs_r+0x8a>
	...

080193d8 <_svfiprintf_r>:
 80193d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193dc:	4698      	mov	r8, r3
 80193de:	898b      	ldrh	r3, [r1, #12]
 80193e0:	061b      	lsls	r3, r3, #24
 80193e2:	b09d      	sub	sp, #116	@ 0x74
 80193e4:	4607      	mov	r7, r0
 80193e6:	460d      	mov	r5, r1
 80193e8:	4614      	mov	r4, r2
 80193ea:	d510      	bpl.n	801940e <_svfiprintf_r+0x36>
 80193ec:	690b      	ldr	r3, [r1, #16]
 80193ee:	b973      	cbnz	r3, 801940e <_svfiprintf_r+0x36>
 80193f0:	2140      	movs	r1, #64	@ 0x40
 80193f2:	f7fd fb5f 	bl	8016ab4 <_malloc_r>
 80193f6:	6028      	str	r0, [r5, #0]
 80193f8:	6128      	str	r0, [r5, #16]
 80193fa:	b930      	cbnz	r0, 801940a <_svfiprintf_r+0x32>
 80193fc:	230c      	movs	r3, #12
 80193fe:	603b      	str	r3, [r7, #0]
 8019400:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019404:	b01d      	add	sp, #116	@ 0x74
 8019406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801940a:	2340      	movs	r3, #64	@ 0x40
 801940c:	616b      	str	r3, [r5, #20]
 801940e:	2300      	movs	r3, #0
 8019410:	9309      	str	r3, [sp, #36]	@ 0x24
 8019412:	2320      	movs	r3, #32
 8019414:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8019418:	f8cd 800c 	str.w	r8, [sp, #12]
 801941c:	2330      	movs	r3, #48	@ 0x30
 801941e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80195bc <_svfiprintf_r+0x1e4>
 8019422:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8019426:	f04f 0901 	mov.w	r9, #1
 801942a:	4623      	mov	r3, r4
 801942c:	469a      	mov	sl, r3
 801942e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019432:	b10a      	cbz	r2, 8019438 <_svfiprintf_r+0x60>
 8019434:	2a25      	cmp	r2, #37	@ 0x25
 8019436:	d1f9      	bne.n	801942c <_svfiprintf_r+0x54>
 8019438:	ebba 0b04 	subs.w	fp, sl, r4
 801943c:	d00b      	beq.n	8019456 <_svfiprintf_r+0x7e>
 801943e:	465b      	mov	r3, fp
 8019440:	4622      	mov	r2, r4
 8019442:	4629      	mov	r1, r5
 8019444:	4638      	mov	r0, r7
 8019446:	f7ff ff6b 	bl	8019320 <__ssputs_r>
 801944a:	3001      	adds	r0, #1
 801944c:	f000 80a7 	beq.w	801959e <_svfiprintf_r+0x1c6>
 8019450:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019452:	445a      	add	r2, fp
 8019454:	9209      	str	r2, [sp, #36]	@ 0x24
 8019456:	f89a 3000 	ldrb.w	r3, [sl]
 801945a:	2b00      	cmp	r3, #0
 801945c:	f000 809f 	beq.w	801959e <_svfiprintf_r+0x1c6>
 8019460:	2300      	movs	r3, #0
 8019462:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8019466:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801946a:	f10a 0a01 	add.w	sl, sl, #1
 801946e:	9304      	str	r3, [sp, #16]
 8019470:	9307      	str	r3, [sp, #28]
 8019472:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8019476:	931a      	str	r3, [sp, #104]	@ 0x68
 8019478:	4654      	mov	r4, sl
 801947a:	2205      	movs	r2, #5
 801947c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019480:	484e      	ldr	r0, [pc, #312]	@ (80195bc <_svfiprintf_r+0x1e4>)
 8019482:	f7e6 fed5 	bl	8000230 <memchr>
 8019486:	9a04      	ldr	r2, [sp, #16]
 8019488:	b9d8      	cbnz	r0, 80194c2 <_svfiprintf_r+0xea>
 801948a:	06d0      	lsls	r0, r2, #27
 801948c:	bf44      	itt	mi
 801948e:	2320      	movmi	r3, #32
 8019490:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019494:	0711      	lsls	r1, r2, #28
 8019496:	bf44      	itt	mi
 8019498:	232b      	movmi	r3, #43	@ 0x2b
 801949a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801949e:	f89a 3000 	ldrb.w	r3, [sl]
 80194a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80194a4:	d015      	beq.n	80194d2 <_svfiprintf_r+0xfa>
 80194a6:	9a07      	ldr	r2, [sp, #28]
 80194a8:	4654      	mov	r4, sl
 80194aa:	2000      	movs	r0, #0
 80194ac:	f04f 0c0a 	mov.w	ip, #10
 80194b0:	4621      	mov	r1, r4
 80194b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80194b6:	3b30      	subs	r3, #48	@ 0x30
 80194b8:	2b09      	cmp	r3, #9
 80194ba:	d94b      	bls.n	8019554 <_svfiprintf_r+0x17c>
 80194bc:	b1b0      	cbz	r0, 80194ec <_svfiprintf_r+0x114>
 80194be:	9207      	str	r2, [sp, #28]
 80194c0:	e014      	b.n	80194ec <_svfiprintf_r+0x114>
 80194c2:	eba0 0308 	sub.w	r3, r0, r8
 80194c6:	fa09 f303 	lsl.w	r3, r9, r3
 80194ca:	4313      	orrs	r3, r2
 80194cc:	9304      	str	r3, [sp, #16]
 80194ce:	46a2      	mov	sl, r4
 80194d0:	e7d2      	b.n	8019478 <_svfiprintf_r+0xa0>
 80194d2:	9b03      	ldr	r3, [sp, #12]
 80194d4:	1d19      	adds	r1, r3, #4
 80194d6:	681b      	ldr	r3, [r3, #0]
 80194d8:	9103      	str	r1, [sp, #12]
 80194da:	2b00      	cmp	r3, #0
 80194dc:	bfbb      	ittet	lt
 80194de:	425b      	neglt	r3, r3
 80194e0:	f042 0202 	orrlt.w	r2, r2, #2
 80194e4:	9307      	strge	r3, [sp, #28]
 80194e6:	9307      	strlt	r3, [sp, #28]
 80194e8:	bfb8      	it	lt
 80194ea:	9204      	strlt	r2, [sp, #16]
 80194ec:	7823      	ldrb	r3, [r4, #0]
 80194ee:	2b2e      	cmp	r3, #46	@ 0x2e
 80194f0:	d10a      	bne.n	8019508 <_svfiprintf_r+0x130>
 80194f2:	7863      	ldrb	r3, [r4, #1]
 80194f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80194f6:	d132      	bne.n	801955e <_svfiprintf_r+0x186>
 80194f8:	9b03      	ldr	r3, [sp, #12]
 80194fa:	1d1a      	adds	r2, r3, #4
 80194fc:	681b      	ldr	r3, [r3, #0]
 80194fe:	9203      	str	r2, [sp, #12]
 8019500:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8019504:	3402      	adds	r4, #2
 8019506:	9305      	str	r3, [sp, #20]
 8019508:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80195cc <_svfiprintf_r+0x1f4>
 801950c:	7821      	ldrb	r1, [r4, #0]
 801950e:	2203      	movs	r2, #3
 8019510:	4650      	mov	r0, sl
 8019512:	f7e6 fe8d 	bl	8000230 <memchr>
 8019516:	b138      	cbz	r0, 8019528 <_svfiprintf_r+0x150>
 8019518:	9b04      	ldr	r3, [sp, #16]
 801951a:	eba0 000a 	sub.w	r0, r0, sl
 801951e:	2240      	movs	r2, #64	@ 0x40
 8019520:	4082      	lsls	r2, r0
 8019522:	4313      	orrs	r3, r2
 8019524:	3401      	adds	r4, #1
 8019526:	9304      	str	r3, [sp, #16]
 8019528:	f814 1b01 	ldrb.w	r1, [r4], #1
 801952c:	4824      	ldr	r0, [pc, #144]	@ (80195c0 <_svfiprintf_r+0x1e8>)
 801952e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8019532:	2206      	movs	r2, #6
 8019534:	f7e6 fe7c 	bl	8000230 <memchr>
 8019538:	2800      	cmp	r0, #0
 801953a:	d036      	beq.n	80195aa <_svfiprintf_r+0x1d2>
 801953c:	4b21      	ldr	r3, [pc, #132]	@ (80195c4 <_svfiprintf_r+0x1ec>)
 801953e:	bb1b      	cbnz	r3, 8019588 <_svfiprintf_r+0x1b0>
 8019540:	9b03      	ldr	r3, [sp, #12]
 8019542:	3307      	adds	r3, #7
 8019544:	f023 0307 	bic.w	r3, r3, #7
 8019548:	3308      	adds	r3, #8
 801954a:	9303      	str	r3, [sp, #12]
 801954c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801954e:	4433      	add	r3, r6
 8019550:	9309      	str	r3, [sp, #36]	@ 0x24
 8019552:	e76a      	b.n	801942a <_svfiprintf_r+0x52>
 8019554:	fb0c 3202 	mla	r2, ip, r2, r3
 8019558:	460c      	mov	r4, r1
 801955a:	2001      	movs	r0, #1
 801955c:	e7a8      	b.n	80194b0 <_svfiprintf_r+0xd8>
 801955e:	2300      	movs	r3, #0
 8019560:	3401      	adds	r4, #1
 8019562:	9305      	str	r3, [sp, #20]
 8019564:	4619      	mov	r1, r3
 8019566:	f04f 0c0a 	mov.w	ip, #10
 801956a:	4620      	mov	r0, r4
 801956c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019570:	3a30      	subs	r2, #48	@ 0x30
 8019572:	2a09      	cmp	r2, #9
 8019574:	d903      	bls.n	801957e <_svfiprintf_r+0x1a6>
 8019576:	2b00      	cmp	r3, #0
 8019578:	d0c6      	beq.n	8019508 <_svfiprintf_r+0x130>
 801957a:	9105      	str	r1, [sp, #20]
 801957c:	e7c4      	b.n	8019508 <_svfiprintf_r+0x130>
 801957e:	fb0c 2101 	mla	r1, ip, r1, r2
 8019582:	4604      	mov	r4, r0
 8019584:	2301      	movs	r3, #1
 8019586:	e7f0      	b.n	801956a <_svfiprintf_r+0x192>
 8019588:	ab03      	add	r3, sp, #12
 801958a:	9300      	str	r3, [sp, #0]
 801958c:	462a      	mov	r2, r5
 801958e:	4b0e      	ldr	r3, [pc, #56]	@ (80195c8 <_svfiprintf_r+0x1f0>)
 8019590:	a904      	add	r1, sp, #16
 8019592:	4638      	mov	r0, r7
 8019594:	f7fd fcd4 	bl	8016f40 <_printf_float>
 8019598:	1c42      	adds	r2, r0, #1
 801959a:	4606      	mov	r6, r0
 801959c:	d1d6      	bne.n	801954c <_svfiprintf_r+0x174>
 801959e:	89ab      	ldrh	r3, [r5, #12]
 80195a0:	065b      	lsls	r3, r3, #25
 80195a2:	f53f af2d 	bmi.w	8019400 <_svfiprintf_r+0x28>
 80195a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80195a8:	e72c      	b.n	8019404 <_svfiprintf_r+0x2c>
 80195aa:	ab03      	add	r3, sp, #12
 80195ac:	9300      	str	r3, [sp, #0]
 80195ae:	462a      	mov	r2, r5
 80195b0:	4b05      	ldr	r3, [pc, #20]	@ (80195c8 <_svfiprintf_r+0x1f0>)
 80195b2:	a904      	add	r1, sp, #16
 80195b4:	4638      	mov	r0, r7
 80195b6:	f7fd ff5b 	bl	8017470 <_printf_i>
 80195ba:	e7ed      	b.n	8019598 <_svfiprintf_r+0x1c0>
 80195bc:	0801ae00 	.word	0x0801ae00
 80195c0:	0801ae0a 	.word	0x0801ae0a
 80195c4:	08016f41 	.word	0x08016f41
 80195c8:	08019321 	.word	0x08019321
 80195cc:	0801ae06 	.word	0x0801ae06

080195d0 <__sfputc_r>:
 80195d0:	6893      	ldr	r3, [r2, #8]
 80195d2:	3b01      	subs	r3, #1
 80195d4:	2b00      	cmp	r3, #0
 80195d6:	b410      	push	{r4}
 80195d8:	6093      	str	r3, [r2, #8]
 80195da:	da08      	bge.n	80195ee <__sfputc_r+0x1e>
 80195dc:	6994      	ldr	r4, [r2, #24]
 80195de:	42a3      	cmp	r3, r4
 80195e0:	db01      	blt.n	80195e6 <__sfputc_r+0x16>
 80195e2:	290a      	cmp	r1, #10
 80195e4:	d103      	bne.n	80195ee <__sfputc_r+0x1e>
 80195e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80195ea:	f7fe ba5f 	b.w	8017aac <__swbuf_r>
 80195ee:	6813      	ldr	r3, [r2, #0]
 80195f0:	1c58      	adds	r0, r3, #1
 80195f2:	6010      	str	r0, [r2, #0]
 80195f4:	7019      	strb	r1, [r3, #0]
 80195f6:	4608      	mov	r0, r1
 80195f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80195fc:	4770      	bx	lr

080195fe <__sfputs_r>:
 80195fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019600:	4606      	mov	r6, r0
 8019602:	460f      	mov	r7, r1
 8019604:	4614      	mov	r4, r2
 8019606:	18d5      	adds	r5, r2, r3
 8019608:	42ac      	cmp	r4, r5
 801960a:	d101      	bne.n	8019610 <__sfputs_r+0x12>
 801960c:	2000      	movs	r0, #0
 801960e:	e007      	b.n	8019620 <__sfputs_r+0x22>
 8019610:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019614:	463a      	mov	r2, r7
 8019616:	4630      	mov	r0, r6
 8019618:	f7ff ffda 	bl	80195d0 <__sfputc_r>
 801961c:	1c43      	adds	r3, r0, #1
 801961e:	d1f3      	bne.n	8019608 <__sfputs_r+0xa>
 8019620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019624 <_vfiprintf_r>:
 8019624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019628:	460d      	mov	r5, r1
 801962a:	b09d      	sub	sp, #116	@ 0x74
 801962c:	4614      	mov	r4, r2
 801962e:	4698      	mov	r8, r3
 8019630:	4606      	mov	r6, r0
 8019632:	b118      	cbz	r0, 801963c <_vfiprintf_r+0x18>
 8019634:	6a03      	ldr	r3, [r0, #32]
 8019636:	b90b      	cbnz	r3, 801963c <_vfiprintf_r+0x18>
 8019638:	f7fe f8c6 	bl	80177c8 <__sinit>
 801963c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801963e:	07d9      	lsls	r1, r3, #31
 8019640:	d405      	bmi.n	801964e <_vfiprintf_r+0x2a>
 8019642:	89ab      	ldrh	r3, [r5, #12]
 8019644:	059a      	lsls	r2, r3, #22
 8019646:	d402      	bmi.n	801964e <_vfiprintf_r+0x2a>
 8019648:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801964a:	f7fe fc06 	bl	8017e5a <__retarget_lock_acquire_recursive>
 801964e:	89ab      	ldrh	r3, [r5, #12]
 8019650:	071b      	lsls	r3, r3, #28
 8019652:	d501      	bpl.n	8019658 <_vfiprintf_r+0x34>
 8019654:	692b      	ldr	r3, [r5, #16]
 8019656:	b99b      	cbnz	r3, 8019680 <_vfiprintf_r+0x5c>
 8019658:	4629      	mov	r1, r5
 801965a:	4630      	mov	r0, r6
 801965c:	f7fe fa64 	bl	8017b28 <__swsetup_r>
 8019660:	b170      	cbz	r0, 8019680 <_vfiprintf_r+0x5c>
 8019662:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019664:	07dc      	lsls	r4, r3, #31
 8019666:	d504      	bpl.n	8019672 <_vfiprintf_r+0x4e>
 8019668:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801966c:	b01d      	add	sp, #116	@ 0x74
 801966e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019672:	89ab      	ldrh	r3, [r5, #12]
 8019674:	0598      	lsls	r0, r3, #22
 8019676:	d4f7      	bmi.n	8019668 <_vfiprintf_r+0x44>
 8019678:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801967a:	f7fe fbef 	bl	8017e5c <__retarget_lock_release_recursive>
 801967e:	e7f3      	b.n	8019668 <_vfiprintf_r+0x44>
 8019680:	2300      	movs	r3, #0
 8019682:	9309      	str	r3, [sp, #36]	@ 0x24
 8019684:	2320      	movs	r3, #32
 8019686:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801968a:	f8cd 800c 	str.w	r8, [sp, #12]
 801968e:	2330      	movs	r3, #48	@ 0x30
 8019690:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8019840 <_vfiprintf_r+0x21c>
 8019694:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8019698:	f04f 0901 	mov.w	r9, #1
 801969c:	4623      	mov	r3, r4
 801969e:	469a      	mov	sl, r3
 80196a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80196a4:	b10a      	cbz	r2, 80196aa <_vfiprintf_r+0x86>
 80196a6:	2a25      	cmp	r2, #37	@ 0x25
 80196a8:	d1f9      	bne.n	801969e <_vfiprintf_r+0x7a>
 80196aa:	ebba 0b04 	subs.w	fp, sl, r4
 80196ae:	d00b      	beq.n	80196c8 <_vfiprintf_r+0xa4>
 80196b0:	465b      	mov	r3, fp
 80196b2:	4622      	mov	r2, r4
 80196b4:	4629      	mov	r1, r5
 80196b6:	4630      	mov	r0, r6
 80196b8:	f7ff ffa1 	bl	80195fe <__sfputs_r>
 80196bc:	3001      	adds	r0, #1
 80196be:	f000 80a7 	beq.w	8019810 <_vfiprintf_r+0x1ec>
 80196c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80196c4:	445a      	add	r2, fp
 80196c6:	9209      	str	r2, [sp, #36]	@ 0x24
 80196c8:	f89a 3000 	ldrb.w	r3, [sl]
 80196cc:	2b00      	cmp	r3, #0
 80196ce:	f000 809f 	beq.w	8019810 <_vfiprintf_r+0x1ec>
 80196d2:	2300      	movs	r3, #0
 80196d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80196d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80196dc:	f10a 0a01 	add.w	sl, sl, #1
 80196e0:	9304      	str	r3, [sp, #16]
 80196e2:	9307      	str	r3, [sp, #28]
 80196e4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80196e8:	931a      	str	r3, [sp, #104]	@ 0x68
 80196ea:	4654      	mov	r4, sl
 80196ec:	2205      	movs	r2, #5
 80196ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80196f2:	4853      	ldr	r0, [pc, #332]	@ (8019840 <_vfiprintf_r+0x21c>)
 80196f4:	f7e6 fd9c 	bl	8000230 <memchr>
 80196f8:	9a04      	ldr	r2, [sp, #16]
 80196fa:	b9d8      	cbnz	r0, 8019734 <_vfiprintf_r+0x110>
 80196fc:	06d1      	lsls	r1, r2, #27
 80196fe:	bf44      	itt	mi
 8019700:	2320      	movmi	r3, #32
 8019702:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019706:	0713      	lsls	r3, r2, #28
 8019708:	bf44      	itt	mi
 801970a:	232b      	movmi	r3, #43	@ 0x2b
 801970c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019710:	f89a 3000 	ldrb.w	r3, [sl]
 8019714:	2b2a      	cmp	r3, #42	@ 0x2a
 8019716:	d015      	beq.n	8019744 <_vfiprintf_r+0x120>
 8019718:	9a07      	ldr	r2, [sp, #28]
 801971a:	4654      	mov	r4, sl
 801971c:	2000      	movs	r0, #0
 801971e:	f04f 0c0a 	mov.w	ip, #10
 8019722:	4621      	mov	r1, r4
 8019724:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019728:	3b30      	subs	r3, #48	@ 0x30
 801972a:	2b09      	cmp	r3, #9
 801972c:	d94b      	bls.n	80197c6 <_vfiprintf_r+0x1a2>
 801972e:	b1b0      	cbz	r0, 801975e <_vfiprintf_r+0x13a>
 8019730:	9207      	str	r2, [sp, #28]
 8019732:	e014      	b.n	801975e <_vfiprintf_r+0x13a>
 8019734:	eba0 0308 	sub.w	r3, r0, r8
 8019738:	fa09 f303 	lsl.w	r3, r9, r3
 801973c:	4313      	orrs	r3, r2
 801973e:	9304      	str	r3, [sp, #16]
 8019740:	46a2      	mov	sl, r4
 8019742:	e7d2      	b.n	80196ea <_vfiprintf_r+0xc6>
 8019744:	9b03      	ldr	r3, [sp, #12]
 8019746:	1d19      	adds	r1, r3, #4
 8019748:	681b      	ldr	r3, [r3, #0]
 801974a:	9103      	str	r1, [sp, #12]
 801974c:	2b00      	cmp	r3, #0
 801974e:	bfbb      	ittet	lt
 8019750:	425b      	neglt	r3, r3
 8019752:	f042 0202 	orrlt.w	r2, r2, #2
 8019756:	9307      	strge	r3, [sp, #28]
 8019758:	9307      	strlt	r3, [sp, #28]
 801975a:	bfb8      	it	lt
 801975c:	9204      	strlt	r2, [sp, #16]
 801975e:	7823      	ldrb	r3, [r4, #0]
 8019760:	2b2e      	cmp	r3, #46	@ 0x2e
 8019762:	d10a      	bne.n	801977a <_vfiprintf_r+0x156>
 8019764:	7863      	ldrb	r3, [r4, #1]
 8019766:	2b2a      	cmp	r3, #42	@ 0x2a
 8019768:	d132      	bne.n	80197d0 <_vfiprintf_r+0x1ac>
 801976a:	9b03      	ldr	r3, [sp, #12]
 801976c:	1d1a      	adds	r2, r3, #4
 801976e:	681b      	ldr	r3, [r3, #0]
 8019770:	9203      	str	r2, [sp, #12]
 8019772:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8019776:	3402      	adds	r4, #2
 8019778:	9305      	str	r3, [sp, #20]
 801977a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8019850 <_vfiprintf_r+0x22c>
 801977e:	7821      	ldrb	r1, [r4, #0]
 8019780:	2203      	movs	r2, #3
 8019782:	4650      	mov	r0, sl
 8019784:	f7e6 fd54 	bl	8000230 <memchr>
 8019788:	b138      	cbz	r0, 801979a <_vfiprintf_r+0x176>
 801978a:	9b04      	ldr	r3, [sp, #16]
 801978c:	eba0 000a 	sub.w	r0, r0, sl
 8019790:	2240      	movs	r2, #64	@ 0x40
 8019792:	4082      	lsls	r2, r0
 8019794:	4313      	orrs	r3, r2
 8019796:	3401      	adds	r4, #1
 8019798:	9304      	str	r3, [sp, #16]
 801979a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801979e:	4829      	ldr	r0, [pc, #164]	@ (8019844 <_vfiprintf_r+0x220>)
 80197a0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80197a4:	2206      	movs	r2, #6
 80197a6:	f7e6 fd43 	bl	8000230 <memchr>
 80197aa:	2800      	cmp	r0, #0
 80197ac:	d03f      	beq.n	801982e <_vfiprintf_r+0x20a>
 80197ae:	4b26      	ldr	r3, [pc, #152]	@ (8019848 <_vfiprintf_r+0x224>)
 80197b0:	bb1b      	cbnz	r3, 80197fa <_vfiprintf_r+0x1d6>
 80197b2:	9b03      	ldr	r3, [sp, #12]
 80197b4:	3307      	adds	r3, #7
 80197b6:	f023 0307 	bic.w	r3, r3, #7
 80197ba:	3308      	adds	r3, #8
 80197bc:	9303      	str	r3, [sp, #12]
 80197be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80197c0:	443b      	add	r3, r7
 80197c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80197c4:	e76a      	b.n	801969c <_vfiprintf_r+0x78>
 80197c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80197ca:	460c      	mov	r4, r1
 80197cc:	2001      	movs	r0, #1
 80197ce:	e7a8      	b.n	8019722 <_vfiprintf_r+0xfe>
 80197d0:	2300      	movs	r3, #0
 80197d2:	3401      	adds	r4, #1
 80197d4:	9305      	str	r3, [sp, #20]
 80197d6:	4619      	mov	r1, r3
 80197d8:	f04f 0c0a 	mov.w	ip, #10
 80197dc:	4620      	mov	r0, r4
 80197de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80197e2:	3a30      	subs	r2, #48	@ 0x30
 80197e4:	2a09      	cmp	r2, #9
 80197e6:	d903      	bls.n	80197f0 <_vfiprintf_r+0x1cc>
 80197e8:	2b00      	cmp	r3, #0
 80197ea:	d0c6      	beq.n	801977a <_vfiprintf_r+0x156>
 80197ec:	9105      	str	r1, [sp, #20]
 80197ee:	e7c4      	b.n	801977a <_vfiprintf_r+0x156>
 80197f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80197f4:	4604      	mov	r4, r0
 80197f6:	2301      	movs	r3, #1
 80197f8:	e7f0      	b.n	80197dc <_vfiprintf_r+0x1b8>
 80197fa:	ab03      	add	r3, sp, #12
 80197fc:	9300      	str	r3, [sp, #0]
 80197fe:	462a      	mov	r2, r5
 8019800:	4b12      	ldr	r3, [pc, #72]	@ (801984c <_vfiprintf_r+0x228>)
 8019802:	a904      	add	r1, sp, #16
 8019804:	4630      	mov	r0, r6
 8019806:	f7fd fb9b 	bl	8016f40 <_printf_float>
 801980a:	4607      	mov	r7, r0
 801980c:	1c78      	adds	r0, r7, #1
 801980e:	d1d6      	bne.n	80197be <_vfiprintf_r+0x19a>
 8019810:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019812:	07d9      	lsls	r1, r3, #31
 8019814:	d405      	bmi.n	8019822 <_vfiprintf_r+0x1fe>
 8019816:	89ab      	ldrh	r3, [r5, #12]
 8019818:	059a      	lsls	r2, r3, #22
 801981a:	d402      	bmi.n	8019822 <_vfiprintf_r+0x1fe>
 801981c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801981e:	f7fe fb1d 	bl	8017e5c <__retarget_lock_release_recursive>
 8019822:	89ab      	ldrh	r3, [r5, #12]
 8019824:	065b      	lsls	r3, r3, #25
 8019826:	f53f af1f 	bmi.w	8019668 <_vfiprintf_r+0x44>
 801982a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801982c:	e71e      	b.n	801966c <_vfiprintf_r+0x48>
 801982e:	ab03      	add	r3, sp, #12
 8019830:	9300      	str	r3, [sp, #0]
 8019832:	462a      	mov	r2, r5
 8019834:	4b05      	ldr	r3, [pc, #20]	@ (801984c <_vfiprintf_r+0x228>)
 8019836:	a904      	add	r1, sp, #16
 8019838:	4630      	mov	r0, r6
 801983a:	f7fd fe19 	bl	8017470 <_printf_i>
 801983e:	e7e4      	b.n	801980a <_vfiprintf_r+0x1e6>
 8019840:	0801ae00 	.word	0x0801ae00
 8019844:	0801ae0a 	.word	0x0801ae0a
 8019848:	08016f41 	.word	0x08016f41
 801984c:	080195ff 	.word	0x080195ff
 8019850:	0801ae06 	.word	0x0801ae06

08019854 <__sflush_r>:
 8019854:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8019858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801985c:	0716      	lsls	r6, r2, #28
 801985e:	4605      	mov	r5, r0
 8019860:	460c      	mov	r4, r1
 8019862:	d454      	bmi.n	801990e <__sflush_r+0xba>
 8019864:	684b      	ldr	r3, [r1, #4]
 8019866:	2b00      	cmp	r3, #0
 8019868:	dc02      	bgt.n	8019870 <__sflush_r+0x1c>
 801986a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801986c:	2b00      	cmp	r3, #0
 801986e:	dd48      	ble.n	8019902 <__sflush_r+0xae>
 8019870:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8019872:	2e00      	cmp	r6, #0
 8019874:	d045      	beq.n	8019902 <__sflush_r+0xae>
 8019876:	2300      	movs	r3, #0
 8019878:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801987c:	682f      	ldr	r7, [r5, #0]
 801987e:	6a21      	ldr	r1, [r4, #32]
 8019880:	602b      	str	r3, [r5, #0]
 8019882:	d030      	beq.n	80198e6 <__sflush_r+0x92>
 8019884:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8019886:	89a3      	ldrh	r3, [r4, #12]
 8019888:	0759      	lsls	r1, r3, #29
 801988a:	d505      	bpl.n	8019898 <__sflush_r+0x44>
 801988c:	6863      	ldr	r3, [r4, #4]
 801988e:	1ad2      	subs	r2, r2, r3
 8019890:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8019892:	b10b      	cbz	r3, 8019898 <__sflush_r+0x44>
 8019894:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8019896:	1ad2      	subs	r2, r2, r3
 8019898:	2300      	movs	r3, #0
 801989a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801989c:	6a21      	ldr	r1, [r4, #32]
 801989e:	4628      	mov	r0, r5
 80198a0:	47b0      	blx	r6
 80198a2:	1c43      	adds	r3, r0, #1
 80198a4:	89a3      	ldrh	r3, [r4, #12]
 80198a6:	d106      	bne.n	80198b6 <__sflush_r+0x62>
 80198a8:	6829      	ldr	r1, [r5, #0]
 80198aa:	291d      	cmp	r1, #29
 80198ac:	d82b      	bhi.n	8019906 <__sflush_r+0xb2>
 80198ae:	4a2a      	ldr	r2, [pc, #168]	@ (8019958 <__sflush_r+0x104>)
 80198b0:	410a      	asrs	r2, r1
 80198b2:	07d6      	lsls	r6, r2, #31
 80198b4:	d427      	bmi.n	8019906 <__sflush_r+0xb2>
 80198b6:	2200      	movs	r2, #0
 80198b8:	6062      	str	r2, [r4, #4]
 80198ba:	04d9      	lsls	r1, r3, #19
 80198bc:	6922      	ldr	r2, [r4, #16]
 80198be:	6022      	str	r2, [r4, #0]
 80198c0:	d504      	bpl.n	80198cc <__sflush_r+0x78>
 80198c2:	1c42      	adds	r2, r0, #1
 80198c4:	d101      	bne.n	80198ca <__sflush_r+0x76>
 80198c6:	682b      	ldr	r3, [r5, #0]
 80198c8:	b903      	cbnz	r3, 80198cc <__sflush_r+0x78>
 80198ca:	6560      	str	r0, [r4, #84]	@ 0x54
 80198cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80198ce:	602f      	str	r7, [r5, #0]
 80198d0:	b1b9      	cbz	r1, 8019902 <__sflush_r+0xae>
 80198d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80198d6:	4299      	cmp	r1, r3
 80198d8:	d002      	beq.n	80198e0 <__sflush_r+0x8c>
 80198da:	4628      	mov	r0, r5
 80198dc:	f7ff f94c 	bl	8018b78 <_free_r>
 80198e0:	2300      	movs	r3, #0
 80198e2:	6363      	str	r3, [r4, #52]	@ 0x34
 80198e4:	e00d      	b.n	8019902 <__sflush_r+0xae>
 80198e6:	2301      	movs	r3, #1
 80198e8:	4628      	mov	r0, r5
 80198ea:	47b0      	blx	r6
 80198ec:	4602      	mov	r2, r0
 80198ee:	1c50      	adds	r0, r2, #1
 80198f0:	d1c9      	bne.n	8019886 <__sflush_r+0x32>
 80198f2:	682b      	ldr	r3, [r5, #0]
 80198f4:	2b00      	cmp	r3, #0
 80198f6:	d0c6      	beq.n	8019886 <__sflush_r+0x32>
 80198f8:	2b1d      	cmp	r3, #29
 80198fa:	d001      	beq.n	8019900 <__sflush_r+0xac>
 80198fc:	2b16      	cmp	r3, #22
 80198fe:	d11e      	bne.n	801993e <__sflush_r+0xea>
 8019900:	602f      	str	r7, [r5, #0]
 8019902:	2000      	movs	r0, #0
 8019904:	e022      	b.n	801994c <__sflush_r+0xf8>
 8019906:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801990a:	b21b      	sxth	r3, r3
 801990c:	e01b      	b.n	8019946 <__sflush_r+0xf2>
 801990e:	690f      	ldr	r7, [r1, #16]
 8019910:	2f00      	cmp	r7, #0
 8019912:	d0f6      	beq.n	8019902 <__sflush_r+0xae>
 8019914:	0793      	lsls	r3, r2, #30
 8019916:	680e      	ldr	r6, [r1, #0]
 8019918:	bf08      	it	eq
 801991a:	694b      	ldreq	r3, [r1, #20]
 801991c:	600f      	str	r7, [r1, #0]
 801991e:	bf18      	it	ne
 8019920:	2300      	movne	r3, #0
 8019922:	eba6 0807 	sub.w	r8, r6, r7
 8019926:	608b      	str	r3, [r1, #8]
 8019928:	f1b8 0f00 	cmp.w	r8, #0
 801992c:	dde9      	ble.n	8019902 <__sflush_r+0xae>
 801992e:	6a21      	ldr	r1, [r4, #32]
 8019930:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8019932:	4643      	mov	r3, r8
 8019934:	463a      	mov	r2, r7
 8019936:	4628      	mov	r0, r5
 8019938:	47b0      	blx	r6
 801993a:	2800      	cmp	r0, #0
 801993c:	dc08      	bgt.n	8019950 <__sflush_r+0xfc>
 801993e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019942:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019946:	81a3      	strh	r3, [r4, #12]
 8019948:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801994c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019950:	4407      	add	r7, r0
 8019952:	eba8 0800 	sub.w	r8, r8, r0
 8019956:	e7e7      	b.n	8019928 <__sflush_r+0xd4>
 8019958:	dfbffffe 	.word	0xdfbffffe

0801995c <_fflush_r>:
 801995c:	b538      	push	{r3, r4, r5, lr}
 801995e:	690b      	ldr	r3, [r1, #16]
 8019960:	4605      	mov	r5, r0
 8019962:	460c      	mov	r4, r1
 8019964:	b913      	cbnz	r3, 801996c <_fflush_r+0x10>
 8019966:	2500      	movs	r5, #0
 8019968:	4628      	mov	r0, r5
 801996a:	bd38      	pop	{r3, r4, r5, pc}
 801996c:	b118      	cbz	r0, 8019976 <_fflush_r+0x1a>
 801996e:	6a03      	ldr	r3, [r0, #32]
 8019970:	b90b      	cbnz	r3, 8019976 <_fflush_r+0x1a>
 8019972:	f7fd ff29 	bl	80177c8 <__sinit>
 8019976:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801997a:	2b00      	cmp	r3, #0
 801997c:	d0f3      	beq.n	8019966 <_fflush_r+0xa>
 801997e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8019980:	07d0      	lsls	r0, r2, #31
 8019982:	d404      	bmi.n	801998e <_fflush_r+0x32>
 8019984:	0599      	lsls	r1, r3, #22
 8019986:	d402      	bmi.n	801998e <_fflush_r+0x32>
 8019988:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801998a:	f7fe fa66 	bl	8017e5a <__retarget_lock_acquire_recursive>
 801998e:	4628      	mov	r0, r5
 8019990:	4621      	mov	r1, r4
 8019992:	f7ff ff5f 	bl	8019854 <__sflush_r>
 8019996:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8019998:	07da      	lsls	r2, r3, #31
 801999a:	4605      	mov	r5, r0
 801999c:	d4e4      	bmi.n	8019968 <_fflush_r+0xc>
 801999e:	89a3      	ldrh	r3, [r4, #12]
 80199a0:	059b      	lsls	r3, r3, #22
 80199a2:	d4e1      	bmi.n	8019968 <_fflush_r+0xc>
 80199a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80199a6:	f7fe fa59 	bl	8017e5c <__retarget_lock_release_recursive>
 80199aa:	e7dd      	b.n	8019968 <_fflush_r+0xc>

080199ac <fiprintf>:
 80199ac:	b40e      	push	{r1, r2, r3}
 80199ae:	b503      	push	{r0, r1, lr}
 80199b0:	4601      	mov	r1, r0
 80199b2:	ab03      	add	r3, sp, #12
 80199b4:	4805      	ldr	r0, [pc, #20]	@ (80199cc <fiprintf+0x20>)
 80199b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80199ba:	6800      	ldr	r0, [r0, #0]
 80199bc:	9301      	str	r3, [sp, #4]
 80199be:	f7ff fe31 	bl	8019624 <_vfiprintf_r>
 80199c2:	b002      	add	sp, #8
 80199c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80199c8:	b003      	add	sp, #12
 80199ca:	4770      	bx	lr
 80199cc:	200000c8 	.word	0x200000c8

080199d0 <__swhatbuf_r>:
 80199d0:	b570      	push	{r4, r5, r6, lr}
 80199d2:	460c      	mov	r4, r1
 80199d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80199d8:	2900      	cmp	r1, #0
 80199da:	b096      	sub	sp, #88	@ 0x58
 80199dc:	4615      	mov	r5, r2
 80199de:	461e      	mov	r6, r3
 80199e0:	da0d      	bge.n	80199fe <__swhatbuf_r+0x2e>
 80199e2:	89a3      	ldrh	r3, [r4, #12]
 80199e4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80199e8:	f04f 0100 	mov.w	r1, #0
 80199ec:	bf14      	ite	ne
 80199ee:	2340      	movne	r3, #64	@ 0x40
 80199f0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80199f4:	2000      	movs	r0, #0
 80199f6:	6031      	str	r1, [r6, #0]
 80199f8:	602b      	str	r3, [r5, #0]
 80199fa:	b016      	add	sp, #88	@ 0x58
 80199fc:	bd70      	pop	{r4, r5, r6, pc}
 80199fe:	466a      	mov	r2, sp
 8019a00:	f000 f848 	bl	8019a94 <_fstat_r>
 8019a04:	2800      	cmp	r0, #0
 8019a06:	dbec      	blt.n	80199e2 <__swhatbuf_r+0x12>
 8019a08:	9901      	ldr	r1, [sp, #4]
 8019a0a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8019a0e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8019a12:	4259      	negs	r1, r3
 8019a14:	4159      	adcs	r1, r3
 8019a16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8019a1a:	e7eb      	b.n	80199f4 <__swhatbuf_r+0x24>

08019a1c <__smakebuf_r>:
 8019a1c:	898b      	ldrh	r3, [r1, #12]
 8019a1e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019a20:	079d      	lsls	r5, r3, #30
 8019a22:	4606      	mov	r6, r0
 8019a24:	460c      	mov	r4, r1
 8019a26:	d507      	bpl.n	8019a38 <__smakebuf_r+0x1c>
 8019a28:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8019a2c:	6023      	str	r3, [r4, #0]
 8019a2e:	6123      	str	r3, [r4, #16]
 8019a30:	2301      	movs	r3, #1
 8019a32:	6163      	str	r3, [r4, #20]
 8019a34:	b003      	add	sp, #12
 8019a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019a38:	ab01      	add	r3, sp, #4
 8019a3a:	466a      	mov	r2, sp
 8019a3c:	f7ff ffc8 	bl	80199d0 <__swhatbuf_r>
 8019a40:	9f00      	ldr	r7, [sp, #0]
 8019a42:	4605      	mov	r5, r0
 8019a44:	4639      	mov	r1, r7
 8019a46:	4630      	mov	r0, r6
 8019a48:	f7fd f834 	bl	8016ab4 <_malloc_r>
 8019a4c:	b948      	cbnz	r0, 8019a62 <__smakebuf_r+0x46>
 8019a4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019a52:	059a      	lsls	r2, r3, #22
 8019a54:	d4ee      	bmi.n	8019a34 <__smakebuf_r+0x18>
 8019a56:	f023 0303 	bic.w	r3, r3, #3
 8019a5a:	f043 0302 	orr.w	r3, r3, #2
 8019a5e:	81a3      	strh	r3, [r4, #12]
 8019a60:	e7e2      	b.n	8019a28 <__smakebuf_r+0xc>
 8019a62:	89a3      	ldrh	r3, [r4, #12]
 8019a64:	6020      	str	r0, [r4, #0]
 8019a66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019a6a:	81a3      	strh	r3, [r4, #12]
 8019a6c:	9b01      	ldr	r3, [sp, #4]
 8019a6e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8019a72:	b15b      	cbz	r3, 8019a8c <__smakebuf_r+0x70>
 8019a74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019a78:	4630      	mov	r0, r6
 8019a7a:	f000 f81d 	bl	8019ab8 <_isatty_r>
 8019a7e:	b128      	cbz	r0, 8019a8c <__smakebuf_r+0x70>
 8019a80:	89a3      	ldrh	r3, [r4, #12]
 8019a82:	f023 0303 	bic.w	r3, r3, #3
 8019a86:	f043 0301 	orr.w	r3, r3, #1
 8019a8a:	81a3      	strh	r3, [r4, #12]
 8019a8c:	89a3      	ldrh	r3, [r4, #12]
 8019a8e:	431d      	orrs	r5, r3
 8019a90:	81a5      	strh	r5, [r4, #12]
 8019a92:	e7cf      	b.n	8019a34 <__smakebuf_r+0x18>

08019a94 <_fstat_r>:
 8019a94:	b538      	push	{r3, r4, r5, lr}
 8019a96:	4d07      	ldr	r5, [pc, #28]	@ (8019ab4 <_fstat_r+0x20>)
 8019a98:	2300      	movs	r3, #0
 8019a9a:	4604      	mov	r4, r0
 8019a9c:	4608      	mov	r0, r1
 8019a9e:	4611      	mov	r1, r2
 8019aa0:	602b      	str	r3, [r5, #0]
 8019aa2:	f7e9 f95d 	bl	8002d60 <_fstat>
 8019aa6:	1c43      	adds	r3, r0, #1
 8019aa8:	d102      	bne.n	8019ab0 <_fstat_r+0x1c>
 8019aaa:	682b      	ldr	r3, [r5, #0]
 8019aac:	b103      	cbz	r3, 8019ab0 <_fstat_r+0x1c>
 8019aae:	6023      	str	r3, [r4, #0]
 8019ab0:	bd38      	pop	{r3, r4, r5, pc}
 8019ab2:	bf00      	nop
 8019ab4:	20010dd0 	.word	0x20010dd0

08019ab8 <_isatty_r>:
 8019ab8:	b538      	push	{r3, r4, r5, lr}
 8019aba:	4d06      	ldr	r5, [pc, #24]	@ (8019ad4 <_isatty_r+0x1c>)
 8019abc:	2300      	movs	r3, #0
 8019abe:	4604      	mov	r4, r0
 8019ac0:	4608      	mov	r0, r1
 8019ac2:	602b      	str	r3, [r5, #0]
 8019ac4:	f7e9 f95c 	bl	8002d80 <_isatty>
 8019ac8:	1c43      	adds	r3, r0, #1
 8019aca:	d102      	bne.n	8019ad2 <_isatty_r+0x1a>
 8019acc:	682b      	ldr	r3, [r5, #0]
 8019ace:	b103      	cbz	r3, 8019ad2 <_isatty_r+0x1a>
 8019ad0:	6023      	str	r3, [r4, #0]
 8019ad2:	bd38      	pop	{r3, r4, r5, pc}
 8019ad4:	20010dd0 	.word	0x20010dd0

08019ad8 <abort>:
 8019ad8:	b508      	push	{r3, lr}
 8019ada:	2006      	movs	r0, #6
 8019adc:	f000 f84a 	bl	8019b74 <raise>
 8019ae0:	2001      	movs	r0, #1
 8019ae2:	f7e9 f8ed 	bl	8002cc0 <_exit>

08019ae6 <__ascii_mbtowc>:
 8019ae6:	b082      	sub	sp, #8
 8019ae8:	b901      	cbnz	r1, 8019aec <__ascii_mbtowc+0x6>
 8019aea:	a901      	add	r1, sp, #4
 8019aec:	b142      	cbz	r2, 8019b00 <__ascii_mbtowc+0x1a>
 8019aee:	b14b      	cbz	r3, 8019b04 <__ascii_mbtowc+0x1e>
 8019af0:	7813      	ldrb	r3, [r2, #0]
 8019af2:	600b      	str	r3, [r1, #0]
 8019af4:	7812      	ldrb	r2, [r2, #0]
 8019af6:	1e10      	subs	r0, r2, #0
 8019af8:	bf18      	it	ne
 8019afa:	2001      	movne	r0, #1
 8019afc:	b002      	add	sp, #8
 8019afe:	4770      	bx	lr
 8019b00:	4610      	mov	r0, r2
 8019b02:	e7fb      	b.n	8019afc <__ascii_mbtowc+0x16>
 8019b04:	f06f 0001 	mvn.w	r0, #1
 8019b08:	e7f8      	b.n	8019afc <__ascii_mbtowc+0x16>

08019b0a <__ascii_wctomb>:
 8019b0a:	4603      	mov	r3, r0
 8019b0c:	4608      	mov	r0, r1
 8019b0e:	b141      	cbz	r1, 8019b22 <__ascii_wctomb+0x18>
 8019b10:	2aff      	cmp	r2, #255	@ 0xff
 8019b12:	d904      	bls.n	8019b1e <__ascii_wctomb+0x14>
 8019b14:	228a      	movs	r2, #138	@ 0x8a
 8019b16:	601a      	str	r2, [r3, #0]
 8019b18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019b1c:	4770      	bx	lr
 8019b1e:	700a      	strb	r2, [r1, #0]
 8019b20:	2001      	movs	r0, #1
 8019b22:	4770      	bx	lr

08019b24 <_raise_r>:
 8019b24:	291f      	cmp	r1, #31
 8019b26:	b538      	push	{r3, r4, r5, lr}
 8019b28:	4605      	mov	r5, r0
 8019b2a:	460c      	mov	r4, r1
 8019b2c:	d904      	bls.n	8019b38 <_raise_r+0x14>
 8019b2e:	2316      	movs	r3, #22
 8019b30:	6003      	str	r3, [r0, #0]
 8019b32:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019b36:	bd38      	pop	{r3, r4, r5, pc}
 8019b38:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8019b3a:	b112      	cbz	r2, 8019b42 <_raise_r+0x1e>
 8019b3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019b40:	b94b      	cbnz	r3, 8019b56 <_raise_r+0x32>
 8019b42:	4628      	mov	r0, r5
 8019b44:	f000 f830 	bl	8019ba8 <_getpid_r>
 8019b48:	4622      	mov	r2, r4
 8019b4a:	4601      	mov	r1, r0
 8019b4c:	4628      	mov	r0, r5
 8019b4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019b52:	f000 b817 	b.w	8019b84 <_kill_r>
 8019b56:	2b01      	cmp	r3, #1
 8019b58:	d00a      	beq.n	8019b70 <_raise_r+0x4c>
 8019b5a:	1c59      	adds	r1, r3, #1
 8019b5c:	d103      	bne.n	8019b66 <_raise_r+0x42>
 8019b5e:	2316      	movs	r3, #22
 8019b60:	6003      	str	r3, [r0, #0]
 8019b62:	2001      	movs	r0, #1
 8019b64:	e7e7      	b.n	8019b36 <_raise_r+0x12>
 8019b66:	2100      	movs	r1, #0
 8019b68:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8019b6c:	4620      	mov	r0, r4
 8019b6e:	4798      	blx	r3
 8019b70:	2000      	movs	r0, #0
 8019b72:	e7e0      	b.n	8019b36 <_raise_r+0x12>

08019b74 <raise>:
 8019b74:	4b02      	ldr	r3, [pc, #8]	@ (8019b80 <raise+0xc>)
 8019b76:	4601      	mov	r1, r0
 8019b78:	6818      	ldr	r0, [r3, #0]
 8019b7a:	f7ff bfd3 	b.w	8019b24 <_raise_r>
 8019b7e:	bf00      	nop
 8019b80:	200000c8 	.word	0x200000c8

08019b84 <_kill_r>:
 8019b84:	b538      	push	{r3, r4, r5, lr}
 8019b86:	4d07      	ldr	r5, [pc, #28]	@ (8019ba4 <_kill_r+0x20>)
 8019b88:	2300      	movs	r3, #0
 8019b8a:	4604      	mov	r4, r0
 8019b8c:	4608      	mov	r0, r1
 8019b8e:	4611      	mov	r1, r2
 8019b90:	602b      	str	r3, [r5, #0]
 8019b92:	f7e9 f885 	bl	8002ca0 <_kill>
 8019b96:	1c43      	adds	r3, r0, #1
 8019b98:	d102      	bne.n	8019ba0 <_kill_r+0x1c>
 8019b9a:	682b      	ldr	r3, [r5, #0]
 8019b9c:	b103      	cbz	r3, 8019ba0 <_kill_r+0x1c>
 8019b9e:	6023      	str	r3, [r4, #0]
 8019ba0:	bd38      	pop	{r3, r4, r5, pc}
 8019ba2:	bf00      	nop
 8019ba4:	20010dd0 	.word	0x20010dd0

08019ba8 <_getpid_r>:
 8019ba8:	f7e9 b872 	b.w	8002c90 <_getpid>

08019bac <_init>:
 8019bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019bae:	bf00      	nop
 8019bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019bb2:	bc08      	pop	{r3}
 8019bb4:	469e      	mov	lr, r3
 8019bb6:	4770      	bx	lr

08019bb8 <_fini>:
 8019bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019bba:	bf00      	nop
 8019bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019bbe:	bc08      	pop	{r3}
 8019bc0:	469e      	mov	lr, r3
 8019bc2:	4770      	bx	lr
