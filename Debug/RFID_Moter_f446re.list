
RFID_Moter_f446re.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019ba4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001254  08019d78  08019d78  0001ad78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801afcc  0801afcc  0001c284  2**0
                  CONTENTS
  4 .ARM          00000008  0801afcc  0801afcc  0001bfcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801afd4  0801afd4  0001c284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801afd4  0801afd4  0001bfd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801afdc  0801afdc  0001bfdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000284  20000000  0801afe0  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000111c8  20000288  0801b264  0001c288  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20011450  0801b264  0001c450  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001c284  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e98c  00000000  00000000  0001c2b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004f1f  00000000  00000000  0003ac40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001848  00000000  00000000  0003fb60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001293  00000000  00000000  000413a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000298f9  00000000  00000000  0004263b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002102c  00000000  00000000  0006bf34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e86f4  00000000  00000000  0008cf60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  00175654  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000076fc  00000000  00000000  001756cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0017cdc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000288 	.word	0x20000288
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08019d5c 	.word	0x08019d5c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000028c 	.word	0x2000028c
 800020c:	08019d5c 	.word	0x08019d5c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_ldivmod>:
 8000c08:	b97b      	cbnz	r3, 8000c2a <__aeabi_ldivmod+0x22>
 8000c0a:	b972      	cbnz	r2, 8000c2a <__aeabi_ldivmod+0x22>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bfbe      	ittt	lt
 8000c10:	2000      	movlt	r0, #0
 8000c12:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c16:	e006      	blt.n	8000c26 <__aeabi_ldivmod+0x1e>
 8000c18:	bf08      	it	eq
 8000c1a:	2800      	cmpeq	r0, #0
 8000c1c:	bf1c      	itt	ne
 8000c1e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c22:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c26:	f000 b9b5 	b.w	8000f94 <__aeabi_idiv0>
 8000c2a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c2e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c32:	2900      	cmp	r1, #0
 8000c34:	db09      	blt.n	8000c4a <__aeabi_ldivmod+0x42>
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	db1a      	blt.n	8000c70 <__aeabi_ldivmod+0x68>
 8000c3a:	f000 f84d 	bl	8000cd8 <__udivmoddi4>
 8000c3e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c46:	b004      	add	sp, #16
 8000c48:	4770      	bx	lr
 8000c4a:	4240      	negs	r0, r0
 8000c4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	db1b      	blt.n	8000c8c <__aeabi_ldivmod+0x84>
 8000c54:	f000 f840 	bl	8000cd8 <__udivmoddi4>
 8000c58:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c60:	b004      	add	sp, #16
 8000c62:	4240      	negs	r0, r0
 8000c64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c68:	4252      	negs	r2, r2
 8000c6a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c6e:	4770      	bx	lr
 8000c70:	4252      	negs	r2, r2
 8000c72:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c76:	f000 f82f 	bl	8000cd8 <__udivmoddi4>
 8000c7a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c82:	b004      	add	sp, #16
 8000c84:	4240      	negs	r0, r0
 8000c86:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c8a:	4770      	bx	lr
 8000c8c:	4252      	negs	r2, r2
 8000c8e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c92:	f000 f821 	bl	8000cd8 <__udivmoddi4>
 8000c96:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c9e:	b004      	add	sp, #16
 8000ca0:	4252      	negs	r2, r2
 8000ca2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cbc:	f000 b96a 	b.w	8000f94 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9d08      	ldr	r5, [sp, #32]
 8000cde:	460c      	mov	r4, r1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d14e      	bne.n	8000d82 <__udivmoddi4+0xaa>
 8000ce4:	4694      	mov	ip, r2
 8000ce6:	458c      	cmp	ip, r1
 8000ce8:	4686      	mov	lr, r0
 8000cea:	fab2 f282 	clz	r2, r2
 8000cee:	d962      	bls.n	8000db6 <__udivmoddi4+0xde>
 8000cf0:	b14a      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf2:	f1c2 0320 	rsb	r3, r2, #32
 8000cf6:	4091      	lsls	r1, r2
 8000cf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d00:	4319      	orrs	r1, r3
 8000d02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0a:	fa1f f68c 	uxth.w	r6, ip
 8000d0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d16:	fb07 1114 	mls	r1, r7, r4, r1
 8000d1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1e:	fb04 f106 	mul.w	r1, r4, r6
 8000d22:	4299      	cmp	r1, r3
 8000d24:	d90a      	bls.n	8000d3c <__udivmoddi4+0x64>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d2e:	f080 8112 	bcs.w	8000f56 <__udivmoddi4+0x27e>
 8000d32:	4299      	cmp	r1, r3
 8000d34:	f240 810f 	bls.w	8000f56 <__udivmoddi4+0x27e>
 8000d38:	3c02      	subs	r4, #2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	1a59      	subs	r1, r3, r1
 8000d3e:	fa1f f38e 	uxth.w	r3, lr
 8000d42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d46:	fb07 1110 	mls	r1, r7, r0, r1
 8000d4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4e:	fb00 f606 	mul.w	r6, r0, r6
 8000d52:	429e      	cmp	r6, r3
 8000d54:	d90a      	bls.n	8000d6c <__udivmoddi4+0x94>
 8000d56:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d5e:	f080 80fc 	bcs.w	8000f5a <__udivmoddi4+0x282>
 8000d62:	429e      	cmp	r6, r3
 8000d64:	f240 80f9 	bls.w	8000f5a <__udivmoddi4+0x282>
 8000d68:	4463      	add	r3, ip
 8000d6a:	3802      	subs	r0, #2
 8000d6c:	1b9b      	subs	r3, r3, r6
 8000d6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d72:	2100      	movs	r1, #0
 8000d74:	b11d      	cbz	r5, 8000d7e <__udivmoddi4+0xa6>
 8000d76:	40d3      	lsrs	r3, r2
 8000d78:	2200      	movs	r2, #0
 8000d7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d905      	bls.n	8000d92 <__udivmoddi4+0xba>
 8000d86:	b10d      	cbz	r5, 8000d8c <__udivmoddi4+0xb4>
 8000d88:	e9c5 0100 	strd	r0, r1, [r5]
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	4608      	mov	r0, r1
 8000d90:	e7f5      	b.n	8000d7e <__udivmoddi4+0xa6>
 8000d92:	fab3 f183 	clz	r1, r3
 8000d96:	2900      	cmp	r1, #0
 8000d98:	d146      	bne.n	8000e28 <__udivmoddi4+0x150>
 8000d9a:	42a3      	cmp	r3, r4
 8000d9c:	d302      	bcc.n	8000da4 <__udivmoddi4+0xcc>
 8000d9e:	4290      	cmp	r0, r2
 8000da0:	f0c0 80f0 	bcc.w	8000f84 <__udivmoddi4+0x2ac>
 8000da4:	1a86      	subs	r6, r0, r2
 8000da6:	eb64 0303 	sbc.w	r3, r4, r3
 8000daa:	2001      	movs	r0, #1
 8000dac:	2d00      	cmp	r5, #0
 8000dae:	d0e6      	beq.n	8000d7e <__udivmoddi4+0xa6>
 8000db0:	e9c5 6300 	strd	r6, r3, [r5]
 8000db4:	e7e3      	b.n	8000d7e <__udivmoddi4+0xa6>
 8000db6:	2a00      	cmp	r2, #0
 8000db8:	f040 8090 	bne.w	8000edc <__udivmoddi4+0x204>
 8000dbc:	eba1 040c 	sub.w	r4, r1, ip
 8000dc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dc4:	fa1f f78c 	uxth.w	r7, ip
 8000dc8:	2101      	movs	r1, #1
 8000dca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dda:	fb07 f006 	mul.w	r0, r7, r6
 8000dde:	4298      	cmp	r0, r3
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x11c>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x11a>
 8000dec:	4298      	cmp	r0, r3
 8000dee:	f200 80cd 	bhi.w	8000f8c <__udivmoddi4+0x2b4>
 8000df2:	4626      	mov	r6, r4
 8000df4:	1a1c      	subs	r4, r3, r0
 8000df6:	fa1f f38e 	uxth.w	r3, lr
 8000dfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000e02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e06:	fb00 f707 	mul.w	r7, r0, r7
 8000e0a:	429f      	cmp	r7, r3
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x148>
 8000e0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e12:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e16:	d202      	bcs.n	8000e1e <__udivmoddi4+0x146>
 8000e18:	429f      	cmp	r7, r3
 8000e1a:	f200 80b0 	bhi.w	8000f7e <__udivmoddi4+0x2a6>
 8000e1e:	4620      	mov	r0, r4
 8000e20:	1bdb      	subs	r3, r3, r7
 8000e22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e26:	e7a5      	b.n	8000d74 <__udivmoddi4+0x9c>
 8000e28:	f1c1 0620 	rsb	r6, r1, #32
 8000e2c:	408b      	lsls	r3, r1
 8000e2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e32:	431f      	orrs	r7, r3
 8000e34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e38:	fa04 f301 	lsl.w	r3, r4, r1
 8000e3c:	ea43 030c 	orr.w	r3, r3, ip
 8000e40:	40f4      	lsrs	r4, r6
 8000e42:	fa00 f801 	lsl.w	r8, r0, r1
 8000e46:	0c38      	lsrs	r0, r7, #16
 8000e48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e50:	fa1f fc87 	uxth.w	ip, r7
 8000e54:	fb00 441e 	mls	r4, r0, lr, r4
 8000e58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e60:	45a1      	cmp	r9, r4
 8000e62:	fa02 f201 	lsl.w	r2, r2, r1
 8000e66:	d90a      	bls.n	8000e7e <__udivmoddi4+0x1a6>
 8000e68:	193c      	adds	r4, r7, r4
 8000e6a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e6e:	f080 8084 	bcs.w	8000f7a <__udivmoddi4+0x2a2>
 8000e72:	45a1      	cmp	r9, r4
 8000e74:	f240 8081 	bls.w	8000f7a <__udivmoddi4+0x2a2>
 8000e78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e7c:	443c      	add	r4, r7
 8000e7e:	eba4 0409 	sub.w	r4, r4, r9
 8000e82:	fa1f f983 	uxth.w	r9, r3
 8000e86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e96:	45a4      	cmp	ip, r4
 8000e98:	d907      	bls.n	8000eaa <__udivmoddi4+0x1d2>
 8000e9a:	193c      	adds	r4, r7, r4
 8000e9c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000ea0:	d267      	bcs.n	8000f72 <__udivmoddi4+0x29a>
 8000ea2:	45a4      	cmp	ip, r4
 8000ea4:	d965      	bls.n	8000f72 <__udivmoddi4+0x29a>
 8000ea6:	3b02      	subs	r3, #2
 8000ea8:	443c      	add	r4, r7
 8000eaa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000eae:	fba0 9302 	umull	r9, r3, r0, r2
 8000eb2:	eba4 040c 	sub.w	r4, r4, ip
 8000eb6:	429c      	cmp	r4, r3
 8000eb8:	46ce      	mov	lr, r9
 8000eba:	469c      	mov	ip, r3
 8000ebc:	d351      	bcc.n	8000f62 <__udivmoddi4+0x28a>
 8000ebe:	d04e      	beq.n	8000f5e <__udivmoddi4+0x286>
 8000ec0:	b155      	cbz	r5, 8000ed8 <__udivmoddi4+0x200>
 8000ec2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ec6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eca:	fa04 f606 	lsl.w	r6, r4, r6
 8000ece:	40cb      	lsrs	r3, r1
 8000ed0:	431e      	orrs	r6, r3
 8000ed2:	40cc      	lsrs	r4, r1
 8000ed4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ed8:	2100      	movs	r1, #0
 8000eda:	e750      	b.n	8000d7e <__udivmoddi4+0xa6>
 8000edc:	f1c2 0320 	rsb	r3, r2, #32
 8000ee0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ee4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ee8:	fa24 f303 	lsr.w	r3, r4, r3
 8000eec:	4094      	lsls	r4, r2
 8000eee:	430c      	orrs	r4, r1
 8000ef0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ef4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ef8:	fa1f f78c 	uxth.w	r7, ip
 8000efc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f00:	fb08 3110 	mls	r1, r8, r0, r3
 8000f04:	0c23      	lsrs	r3, r4, #16
 8000f06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f0a:	fb00 f107 	mul.w	r1, r0, r7
 8000f0e:	4299      	cmp	r1, r3
 8000f10:	d908      	bls.n	8000f24 <__udivmoddi4+0x24c>
 8000f12:	eb1c 0303 	adds.w	r3, ip, r3
 8000f16:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f1a:	d22c      	bcs.n	8000f76 <__udivmoddi4+0x29e>
 8000f1c:	4299      	cmp	r1, r3
 8000f1e:	d92a      	bls.n	8000f76 <__udivmoddi4+0x29e>
 8000f20:	3802      	subs	r0, #2
 8000f22:	4463      	add	r3, ip
 8000f24:	1a5b      	subs	r3, r3, r1
 8000f26:	b2a4      	uxth	r4, r4
 8000f28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f34:	fb01 f307 	mul.w	r3, r1, r7
 8000f38:	42a3      	cmp	r3, r4
 8000f3a:	d908      	bls.n	8000f4e <__udivmoddi4+0x276>
 8000f3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f40:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f44:	d213      	bcs.n	8000f6e <__udivmoddi4+0x296>
 8000f46:	42a3      	cmp	r3, r4
 8000f48:	d911      	bls.n	8000f6e <__udivmoddi4+0x296>
 8000f4a:	3902      	subs	r1, #2
 8000f4c:	4464      	add	r4, ip
 8000f4e:	1ae4      	subs	r4, r4, r3
 8000f50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f54:	e739      	b.n	8000dca <__udivmoddi4+0xf2>
 8000f56:	4604      	mov	r4, r0
 8000f58:	e6f0      	b.n	8000d3c <__udivmoddi4+0x64>
 8000f5a:	4608      	mov	r0, r1
 8000f5c:	e706      	b.n	8000d6c <__udivmoddi4+0x94>
 8000f5e:	45c8      	cmp	r8, r9
 8000f60:	d2ae      	bcs.n	8000ec0 <__udivmoddi4+0x1e8>
 8000f62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f6a:	3801      	subs	r0, #1
 8000f6c:	e7a8      	b.n	8000ec0 <__udivmoddi4+0x1e8>
 8000f6e:	4631      	mov	r1, r6
 8000f70:	e7ed      	b.n	8000f4e <__udivmoddi4+0x276>
 8000f72:	4603      	mov	r3, r0
 8000f74:	e799      	b.n	8000eaa <__udivmoddi4+0x1d2>
 8000f76:	4630      	mov	r0, r6
 8000f78:	e7d4      	b.n	8000f24 <__udivmoddi4+0x24c>
 8000f7a:	46d6      	mov	lr, sl
 8000f7c:	e77f      	b.n	8000e7e <__udivmoddi4+0x1a6>
 8000f7e:	4463      	add	r3, ip
 8000f80:	3802      	subs	r0, #2
 8000f82:	e74d      	b.n	8000e20 <__udivmoddi4+0x148>
 8000f84:	4606      	mov	r6, r0
 8000f86:	4623      	mov	r3, r4
 8000f88:	4608      	mov	r0, r1
 8000f8a:	e70f      	b.n	8000dac <__udivmoddi4+0xd4>
 8000f8c:	3e02      	subs	r6, #2
 8000f8e:	4463      	add	r3, ip
 8000f90:	e730      	b.n	8000df4 <__udivmoddi4+0x11c>
 8000f92:	bf00      	nop

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08a      	sub	sp, #40	@ 0x28
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000fa4:	f007 ff50 	bl	8008e48 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000fa8:	4b5a      	ldr	r3, [pc, #360]	@ (8001114 <pvPortMallocMicroROS+0x17c>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d101      	bne.n	8000fb4 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000fb0:	f000 f986 	bl	80012c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000fb4:	4b58      	ldr	r3, [pc, #352]	@ (8001118 <pvPortMallocMicroROS+0x180>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	f040 8090 	bne.w	80010e2 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d01e      	beq.n	8001006 <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8000fc8:	2208      	movs	r2, #8
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4413      	add	r3, r2
 8000fce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f003 0307 	and.w	r3, r3, #7
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d015      	beq.n	8001006 <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	f023 0307 	bic.w	r3, r3, #7
 8000fe0:	3308      	adds	r3, #8
 8000fe2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f003 0307 	and.w	r3, r3, #7
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d00b      	beq.n	8001006 <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000ff2:	f383 8811 	msr	BASEPRI, r3
 8000ff6:	f3bf 8f6f 	isb	sy
 8000ffa:	f3bf 8f4f 	dsb	sy
 8000ffe:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001000:	bf00      	nop
 8001002:	bf00      	nop
 8001004:	e7fd      	b.n	8001002 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d06a      	beq.n	80010e2 <pvPortMallocMicroROS+0x14a>
 800100c:	4b43      	ldr	r3, [pc, #268]	@ (800111c <pvPortMallocMicroROS+0x184>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	429a      	cmp	r2, r3
 8001014:	d865      	bhi.n	80010e2 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001016:	4b42      	ldr	r3, [pc, #264]	@ (8001120 <pvPortMallocMicroROS+0x188>)
 8001018:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800101a:	4b41      	ldr	r3, [pc, #260]	@ (8001120 <pvPortMallocMicroROS+0x188>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001020:	e004      	b.n	800102c <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8001022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001024:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800102c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	429a      	cmp	r2, r3
 8001034:	d903      	bls.n	800103e <pvPortMallocMicroROS+0xa6>
 8001036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d1f1      	bne.n	8001022 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800103e:	4b35      	ldr	r3, [pc, #212]	@ (8001114 <pvPortMallocMicroROS+0x17c>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001044:	429a      	cmp	r2, r3
 8001046:	d04c      	beq.n	80010e2 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001048:	6a3b      	ldr	r3, [r7, #32]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2208      	movs	r2, #8
 800104e:	4413      	add	r3, r2
 8001050:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	6a3b      	ldr	r3, [r7, #32]
 8001058:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800105a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800105c:	685a      	ldr	r2, [r3, #4]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	1ad2      	subs	r2, r2, r3
 8001062:	2308      	movs	r3, #8
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	429a      	cmp	r2, r3
 8001068:	d920      	bls.n	80010ac <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800106a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	4413      	add	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	f003 0307 	and.w	r3, r3, #7
 8001078:	2b00      	cmp	r3, #0
 800107a:	d00b      	beq.n	8001094 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 800107c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001080:	f383 8811 	msr	BASEPRI, r3
 8001084:	f3bf 8f6f 	isb	sy
 8001088:	f3bf 8f4f 	dsb	sy
 800108c:	613b      	str	r3, [r7, #16]
}
 800108e:	bf00      	nop
 8001090:	bf00      	nop
 8001092:	e7fd      	b.n	8001090 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001096:	685a      	ldr	r2, [r3, #4]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	1ad2      	subs	r2, r2, r3
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80010a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80010a6:	69b8      	ldr	r0, [r7, #24]
 80010a8:	f000 f96c 	bl	8001384 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80010ac:	4b1b      	ldr	r3, [pc, #108]	@ (800111c <pvPortMallocMicroROS+0x184>)
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	4a19      	ldr	r2, [pc, #100]	@ (800111c <pvPortMallocMicroROS+0x184>)
 80010b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80010ba:	4b18      	ldr	r3, [pc, #96]	@ (800111c <pvPortMallocMicroROS+0x184>)
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	4b19      	ldr	r3, [pc, #100]	@ (8001124 <pvPortMallocMicroROS+0x18c>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	429a      	cmp	r2, r3
 80010c4:	d203      	bcs.n	80010ce <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80010c6:	4b15      	ldr	r3, [pc, #84]	@ (800111c <pvPortMallocMicroROS+0x184>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a16      	ldr	r2, [pc, #88]	@ (8001124 <pvPortMallocMicroROS+0x18c>)
 80010cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80010ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d0:	685a      	ldr	r2, [r3, #4]
 80010d2:	4b11      	ldr	r3, [pc, #68]	@ (8001118 <pvPortMallocMicroROS+0x180>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	431a      	orrs	r2, r3
 80010d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80010dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80010e2:	f007 febf 	bl	8008e64 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	f003 0307 	and.w	r3, r3, #7
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d00b      	beq.n	8001108 <pvPortMallocMicroROS+0x170>
	__asm volatile
 80010f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80010f4:	f383 8811 	msr	BASEPRI, r3
 80010f8:	f3bf 8f6f 	isb	sy
 80010fc:	f3bf 8f4f 	dsb	sy
 8001100:	60fb      	str	r3, [r7, #12]
}
 8001102:	bf00      	nop
 8001104:	bf00      	nop
 8001106:	e7fd      	b.n	8001104 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8001108:	69fb      	ldr	r3, [r7, #28]
}
 800110a:	4618      	mov	r0, r3
 800110c:	3728      	adds	r7, #40	@ 0x28
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20003eac 	.word	0x20003eac
 8001118:	20003eb8 	.word	0x20003eb8
 800111c:	20003eb0 	.word	0x20003eb0
 8001120:	20003ea4 	.word	0x20003ea4
 8001124:	20003eb4 	.word	0x20003eb4

08001128 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d04a      	beq.n	80011d0 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800113a:	2308      	movs	r3, #8
 800113c:	425b      	negs	r3, r3
 800113e:	697a      	ldr	r2, [r7, #20]
 8001140:	4413      	add	r3, r2
 8001142:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	685a      	ldr	r2, [r3, #4]
 800114c:	4b22      	ldr	r3, [pc, #136]	@ (80011d8 <vPortFreeMicroROS+0xb0>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4013      	ands	r3, r2
 8001152:	2b00      	cmp	r3, #0
 8001154:	d10b      	bne.n	800116e <vPortFreeMicroROS+0x46>
	__asm volatile
 8001156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800115a:	f383 8811 	msr	BASEPRI, r3
 800115e:	f3bf 8f6f 	isb	sy
 8001162:	f3bf 8f4f 	dsb	sy
 8001166:	60fb      	str	r3, [r7, #12]
}
 8001168:	bf00      	nop
 800116a:	bf00      	nop
 800116c:	e7fd      	b.n	800116a <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d00b      	beq.n	800118e <vPortFreeMicroROS+0x66>
	__asm volatile
 8001176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800117a:	f383 8811 	msr	BASEPRI, r3
 800117e:	f3bf 8f6f 	isb	sy
 8001182:	f3bf 8f4f 	dsb	sy
 8001186:	60bb      	str	r3, [r7, #8]
}
 8001188:	bf00      	nop
 800118a:	bf00      	nop
 800118c:	e7fd      	b.n	800118a <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	685a      	ldr	r2, [r3, #4]
 8001192:	4b11      	ldr	r3, [pc, #68]	@ (80011d8 <vPortFreeMicroROS+0xb0>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4013      	ands	r3, r2
 8001198:	2b00      	cmp	r3, #0
 800119a:	d019      	beq.n	80011d0 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d115      	bne.n	80011d0 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	685a      	ldr	r2, [r3, #4]
 80011a8:	4b0b      	ldr	r3, [pc, #44]	@ (80011d8 <vPortFreeMicroROS+0xb0>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	43db      	mvns	r3, r3
 80011ae:	401a      	ands	r2, r3
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80011b4:	f007 fe48 	bl	8008e48 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	685a      	ldr	r2, [r3, #4]
 80011bc:	4b07      	ldr	r3, [pc, #28]	@ (80011dc <vPortFreeMicroROS+0xb4>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4413      	add	r3, r2
 80011c2:	4a06      	ldr	r2, [pc, #24]	@ (80011dc <vPortFreeMicroROS+0xb4>)
 80011c4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80011c6:	6938      	ldr	r0, [r7, #16]
 80011c8:	f000 f8dc 	bl	8001384 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80011cc:	f007 fe4a 	bl	8008e64 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80011d0:	bf00      	nop
 80011d2:	3718      	adds	r7, #24
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20003eb8 	.word	0x20003eb8
 80011dc:	20003eb0 	.word	0x20003eb0

080011e0 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 80011e0:	b480      	push	{r7}
 80011e2:	b087      	sub	sp, #28
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 80011ec:	2308      	movs	r3, #8
 80011ee:	425b      	negs	r3, r3
 80011f0:	697a      	ldr	r2, [r7, #20]
 80011f2:	4413      	add	r3, r2
 80011f4:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	685a      	ldr	r2, [r3, #4]
 80011fe:	4b06      	ldr	r3, [pc, #24]	@ (8001218 <getBlockSize+0x38>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	43db      	mvns	r3, r3
 8001204:	4013      	ands	r3, r2
 8001206:	60fb      	str	r3, [r7, #12]

	return count;
 8001208:	68fb      	ldr	r3, [r7, #12]
}
 800120a:	4618      	mov	r0, r3
 800120c:	371c      	adds	r7, #28
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	20003eb8 	.word	0x20003eb8

0800121c <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001226:	f007 fe0f 	bl	8008e48 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 800122a:	6838      	ldr	r0, [r7, #0]
 800122c:	f7ff feb4 	bl	8000f98 <pvPortMallocMicroROS>
 8001230:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d017      	beq.n	8001268 <pvPortReallocMicroROS+0x4c>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d014      	beq.n	8001268 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f7ff ffce 	bl	80011e0 <getBlockSize>
 8001244:	4603      	mov	r3, r0
 8001246:	2208      	movs	r2, #8
 8001248:	1a9b      	subs	r3, r3, r2
 800124a:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 800124c:	683a      	ldr	r2, [r7, #0]
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	429a      	cmp	r2, r3
 8001252:	d201      	bcs.n	8001258 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8001258:	68fa      	ldr	r2, [r7, #12]
 800125a:	6879      	ldr	r1, [r7, #4]
 800125c:	68b8      	ldr	r0, [r7, #8]
 800125e:	f016 fede 	bl	801801e <memcpy>

		vPortFreeMicroROS(pv);
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f7ff ff60 	bl	8001128 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8001268:	f007 fdfc 	bl	8008e64 <xTaskResumeAll>

	return newmem;
 800126c:	68bb      	ldr	r3, [r7, #8]
}
 800126e:	4618      	mov	r0, r3
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b086      	sub	sp, #24
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
 800127e:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001280:	f007 fde2 	bl	8008e48 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	fb02 f303 	mul.w	r3, r2, r3
 800128c:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 800128e:	6978      	ldr	r0, [r7, #20]
 8001290:	f7ff fe82 	bl	8000f98 <pvPortMallocMicroROS>
 8001294:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	613b      	str	r3, [r7, #16]

  	while(count--)
 800129a:	e004      	b.n	80012a6 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	1c5a      	adds	r2, r3, #1
 80012a0:	613a      	str	r2, [r7, #16]
 80012a2:	2200      	movs	r2, #0
 80012a4:	701a      	strb	r2, [r3, #0]
  	while(count--)
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	1e5a      	subs	r2, r3, #1
 80012aa:	617a      	str	r2, [r7, #20]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d1f5      	bne.n	800129c <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 80012b0:	f007 fdd8 	bl	8008e64 <xTaskResumeAll>
  	return mem;
 80012b4:	68fb      	ldr	r3, [r7, #12]
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3718      	adds	r7, #24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
	...

080012c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80012c0:	b480      	push	{r7}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80012c6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80012ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80012cc:	4b27      	ldr	r3, [pc, #156]	@ (800136c <prvHeapInit+0xac>)
 80012ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	f003 0307 	and.w	r3, r3, #7
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d00c      	beq.n	80012f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	3307      	adds	r3, #7
 80012de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	f023 0307 	bic.w	r3, r3, #7
 80012e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80012e8:	68ba      	ldr	r2, [r7, #8]
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	4a1f      	ldr	r2, [pc, #124]	@ (800136c <prvHeapInit+0xac>)
 80012f0:	4413      	add	r3, r2
 80012f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80012f8:	4a1d      	ldr	r2, [pc, #116]	@ (8001370 <prvHeapInit+0xb0>)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80012fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001370 <prvHeapInit+0xb0>)
 8001300:	2200      	movs	r2, #0
 8001302:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	68ba      	ldr	r2, [r7, #8]
 8001308:	4413      	add	r3, r2
 800130a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800130c:	2208      	movs	r2, #8
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	1a9b      	subs	r3, r3, r2
 8001312:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	f023 0307 	bic.w	r3, r3, #7
 800131a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	4a15      	ldr	r2, [pc, #84]	@ (8001374 <prvHeapInit+0xb4>)
 8001320:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001322:	4b14      	ldr	r3, [pc, #80]	@ (8001374 <prvHeapInit+0xb4>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2200      	movs	r2, #0
 8001328:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800132a:	4b12      	ldr	r3, [pc, #72]	@ (8001374 <prvHeapInit+0xb4>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	68fa      	ldr	r2, [r7, #12]
 800133a:	1ad2      	subs	r2, r2, r3
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001340:	4b0c      	ldr	r3, [pc, #48]	@ (8001374 <prvHeapInit+0xb4>)
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	4a0a      	ldr	r2, [pc, #40]	@ (8001378 <prvHeapInit+0xb8>)
 800134e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	4a09      	ldr	r2, [pc, #36]	@ (800137c <prvHeapInit+0xbc>)
 8001356:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001358:	4b09      	ldr	r3, [pc, #36]	@ (8001380 <prvHeapInit+0xc0>)
 800135a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800135e:	601a      	str	r2, [r3, #0]
}
 8001360:	bf00      	nop
 8001362:	3714      	adds	r7, #20
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	200002a4 	.word	0x200002a4
 8001370:	20003ea4 	.word	0x20003ea4
 8001374:	20003eac 	.word	0x20003eac
 8001378:	20003eb4 	.word	0x20003eb4
 800137c:	20003eb0 	.word	0x20003eb0
 8001380:	20003eb8 	.word	0x20003eb8

08001384 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001384:	b480      	push	{r7}
 8001386:	b085      	sub	sp, #20
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800138c:	4b28      	ldr	r3, [pc, #160]	@ (8001430 <prvInsertBlockIntoFreeList+0xac>)
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	e002      	b.n	8001398 <prvInsertBlockIntoFreeList+0x14>
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	429a      	cmp	r2, r3
 80013a0:	d8f7      	bhi.n	8001392 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	68ba      	ldr	r2, [r7, #8]
 80013ac:	4413      	add	r3, r2
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d108      	bne.n	80013c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	685a      	ldr	r2, [r3, #4]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	441a      	add	r2, r3
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	68ba      	ldr	r2, [r7, #8]
 80013d0:	441a      	add	r2, r3
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	429a      	cmp	r2, r3
 80013d8:	d118      	bne.n	800140c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	4b15      	ldr	r3, [pc, #84]	@ (8001434 <prvInsertBlockIntoFreeList+0xb0>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d00d      	beq.n	8001402 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	685a      	ldr	r2, [r3, #4]
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	441a      	add	r2, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	e008      	b.n	8001414 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001402:	4b0c      	ldr	r3, [pc, #48]	@ (8001434 <prvInsertBlockIntoFreeList+0xb0>)
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	e003      	b.n	8001414 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001414:	68fa      	ldr	r2, [r7, #12]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	429a      	cmp	r2, r3
 800141a:	d002      	beq.n	8001422 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001422:	bf00      	nop
 8001424:	3714      	adds	r7, #20
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	20003ea4 	.word	0x20003ea4
 8001434:	20003eac 	.word	0x20003eac

08001438 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	607b      	str	r3, [r7, #4]
 8001442:	4b23      	ldr	r3, [pc, #140]	@ (80014d0 <MX_DMA_Init+0x98>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001446:	4a22      	ldr	r2, [pc, #136]	@ (80014d0 <MX_DMA_Init+0x98>)
 8001448:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800144c:	6313      	str	r3, [r2, #48]	@ 0x30
 800144e:	4b20      	ldr	r3, [pc, #128]	@ (80014d0 <MX_DMA_Init+0x98>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001452:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001456:	607b      	str	r3, [r7, #4]
 8001458:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	603b      	str	r3, [r7, #0]
 800145e:	4b1c      	ldr	r3, [pc, #112]	@ (80014d0 <MX_DMA_Init+0x98>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001462:	4a1b      	ldr	r2, [pc, #108]	@ (80014d0 <MX_DMA_Init+0x98>)
 8001464:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001468:	6313      	str	r3, [r2, #48]	@ 0x30
 800146a:	4b19      	ldr	r3, [pc, #100]	@ (80014d0 <MX_DMA_Init+0x98>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001472:	603b      	str	r3, [r7, #0]
 8001474:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001476:	2200      	movs	r2, #0
 8001478:	2105      	movs	r1, #5
 800147a:	200b      	movs	r0, #11
 800147c:	f002 fd06 	bl	8003e8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001480:	200b      	movs	r0, #11
 8001482:	f002 fd1f 	bl	8003ec4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001486:	2200      	movs	r2, #0
 8001488:	2105      	movs	r1, #5
 800148a:	2010      	movs	r0, #16
 800148c:	f002 fcfe 	bl	8003e8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001490:	2010      	movs	r0, #16
 8001492:	f002 fd17 	bl	8003ec4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8001496:	2200      	movs	r2, #0
 8001498:	2105      	movs	r1, #5
 800149a:	2039      	movs	r0, #57	@ 0x39
 800149c:	f002 fcf6 	bl	8003e8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80014a0:	2039      	movs	r0, #57	@ 0x39
 80014a2:	f002 fd0f 	bl	8003ec4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 80014a6:	2200      	movs	r2, #0
 80014a8:	2105      	movs	r1, #5
 80014aa:	2044      	movs	r0, #68	@ 0x44
 80014ac:	f002 fcee 	bl	8003e8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80014b0:	2044      	movs	r0, #68	@ 0x44
 80014b2:	f002 fd07 	bl	8003ec4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 80014b6:	2200      	movs	r2, #0
 80014b8:	2105      	movs	r1, #5
 80014ba:	2045      	movs	r0, #69	@ 0x45
 80014bc:	f002 fce6 	bl	8003e8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80014c0:	2045      	movs	r0, #69	@ 0x45
 80014c2:	f002 fcff 	bl	8003ec4 <HAL_NVIC_EnableIRQ>

}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40023800 	.word	0x40023800

080014d4 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80014e2:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 80014e4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80014e8:	4904      	ldr	r1, [pc, #16]	@ (80014fc <cubemx_transport_open+0x28>)
 80014ea:	68f8      	ldr	r0, [r7, #12]
 80014ec:	f005 fd6c 	bl	8006fc8 <HAL_UART_Receive_DMA>
    return true;
 80014f0:	2301      	movs	r3, #1
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3710      	adds	r7, #16
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	20003ebc 	.word	0x20003ebc

08001500 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800150e:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8001510:	68f8      	ldr	r0, [r7, #12]
 8001512:	f005 fd7e 	bl	8007012 <HAL_UART_DMAStop>
    return true;
 8001516:	2301      	movs	r3, #1
}
 8001518:	4618      	mov	r0, r3
 800151a:	3710      	adds	r7, #16
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}

08001520 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8001520:	b580      	push	{r7, lr}
 8001522:	b086      	sub	sp, #24
 8001524:	af00      	add	r7, sp, #0
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	60b9      	str	r1, [r7, #8]
 800152a:	607a      	str	r2, [r7, #4]
 800152c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001534:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800153c:	b2db      	uxtb	r3, r3
 800153e:	2b20      	cmp	r3, #32
 8001540:	d11c      	bne.n	800157c <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	b29b      	uxth	r3, r3
 8001546:	461a      	mov	r2, r3
 8001548:	68b9      	ldr	r1, [r7, #8]
 800154a:	6978      	ldr	r0, [r7, #20]
 800154c:	f005 fccc 	bl	8006ee8 <HAL_UART_Transmit_DMA>
 8001550:	4603      	mov	r3, r0
 8001552:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001554:	e002      	b.n	800155c <cubemx_transport_write+0x3c>
            osDelay(1);
 8001556:	2001      	movs	r0, #1
 8001558:	f006 ffad 	bl	80084b6 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 800155c:	7cfb      	ldrb	r3, [r7, #19]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d105      	bne.n	800156e <cubemx_transport_write+0x4e>
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001568:	b2db      	uxtb	r3, r3
 800156a:	2b20      	cmp	r3, #32
 800156c:	d1f3      	bne.n	8001556 <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 800156e:	7cfb      	ldrb	r3, [r7, #19]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d101      	bne.n	8001578 <cubemx_transport_write+0x58>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	e002      	b.n	800157e <cubemx_transport_write+0x5e>
 8001578:	2300      	movs	r3, #0
 800157a:	e000      	b.n	800157e <cubemx_transport_write+0x5e>
    }else{
        return 0;
 800157c:	2300      	movs	r3, #0
    }
}
 800157e:	4618      	mov	r0, r3
 8001580:	3718      	adds	r7, #24
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
	...

08001588 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8001588:	b580      	push	{r7, lr}
 800158a:	b088      	sub	sp, #32
 800158c:	af00      	add	r7, sp, #0
 800158e:	60f8      	str	r0, [r7, #12]
 8001590:	60b9      	str	r1, [r7, #8]
 8001592:	607a      	str	r2, [r7, #4]
 8001594:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800159c:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 800159e:	2300      	movs	r3, #0
 80015a0:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015a2:	b672      	cpsid	i
}
 80015a4:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80015b2:	4a1c      	ldr	r2, [pc, #112]	@ (8001624 <cubemx_transport_read+0x9c>)
 80015b4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80015b6:	b662      	cpsie	i
}
 80015b8:	bf00      	nop
        __enable_irq();
        ms_used++;
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	3301      	adds	r3, #1
 80015be:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 80015c0:	2001      	movs	r0, #1
 80015c2:	f006 ff78 	bl	80084b6 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 80015c6:	4b18      	ldr	r3, [pc, #96]	@ (8001628 <cubemx_transport_read+0xa0>)
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	4b16      	ldr	r3, [pc, #88]	@ (8001624 <cubemx_transport_read+0x9c>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d103      	bne.n	80015da <cubemx_transport_read+0x52>
 80015d2:	69fa      	ldr	r2, [r7, #28]
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	dbe3      	blt.n	80015a2 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80015da:	2300      	movs	r3, #0
 80015dc:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80015de:	e011      	b.n	8001604 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 80015e0:	4b11      	ldr	r3, [pc, #68]	@ (8001628 <cubemx_transport_read+0xa0>)
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	68b9      	ldr	r1, [r7, #8]
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	440b      	add	r3, r1
 80015ea:	4910      	ldr	r1, [pc, #64]	@ (800162c <cubemx_transport_read+0xa4>)
 80015ec:	5c8a      	ldrb	r2, [r1, r2]
 80015ee:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80015f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001628 <cubemx_transport_read+0xa0>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	3301      	adds	r3, #1
 80015f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015fa:	4a0b      	ldr	r2, [pc, #44]	@ (8001628 <cubemx_transport_read+0xa0>)
 80015fc:	6013      	str	r3, [r2, #0]
        wrote++;
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	3301      	adds	r3, #1
 8001602:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001604:	4b08      	ldr	r3, [pc, #32]	@ (8001628 <cubemx_transport_read+0xa0>)
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	4b06      	ldr	r3, [pc, #24]	@ (8001624 <cubemx_transport_read+0x9c>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	429a      	cmp	r2, r3
 800160e:	d003      	beq.n	8001618 <cubemx_transport_read+0x90>
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	429a      	cmp	r2, r3
 8001616:	d3e3      	bcc.n	80015e0 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8001618:	69bb      	ldr	r3, [r7, #24]
}
 800161a:	4618      	mov	r0, r3
 800161c:	3720      	adds	r7, #32
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	200046c0 	.word	0x200046c0
 8001628:	200046bc 	.word	0x200046bc
 800162c:	20003ebc 	.word	0x20003ebc

08001630 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001630:	b480      	push	{r7}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	4a07      	ldr	r2, [pc, #28]	@ (800165c <vApplicationGetIdleTaskMemory+0x2c>)
 8001640:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	4a06      	ldr	r2, [pc, #24]	@ (8001660 <vApplicationGetIdleTaskMemory+0x30>)
 8001646:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2280      	movs	r2, #128	@ 0x80
 800164c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800164e:	bf00      	nop
 8001650:	3714      	adds	r7, #20
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	20007684 	.word	0x20007684
 8001660:	20007724 	.word	0x20007724

08001664 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001664:	b5b0      	push	{r4, r5, r7, lr}
 8001666:	b0b2      	sub	sp, #200	@ 0xc8
 8001668:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800166a:	4b43      	ldr	r3, [pc, #268]	@ (8001778 <MX_FREERTOS_Init+0x114>)
 800166c:	f107 04ac 	add.w	r4, r7, #172	@ 0xac
 8001670:	461d      	mov	r5, r3
 8001672:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001674:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001676:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800167a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800167e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001682:	2100      	movs	r1, #0
 8001684:	4618      	mov	r0, r3
 8001686:	f006 feca 	bl	800841e <osThreadCreate>
 800168a:	4603      	mov	r3, r0
 800168c:	4a3b      	ldr	r2, [pc, #236]	@ (800177c <MX_FREERTOS_Init+0x118>)
 800168e:	6013      	str	r3, [r2, #0]

  /* definition and creation of rfidExecuteTask */
  osThreadDef(rfidExecuteTask, StartRfidExecuteTask, osPriorityNormal, 0, 128);
 8001690:	4b3b      	ldr	r3, [pc, #236]	@ (8001780 <MX_FREERTOS_Init+0x11c>)
 8001692:	f107 0490 	add.w	r4, r7, #144	@ 0x90
 8001696:	461d      	mov	r5, r3
 8001698:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800169a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800169c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  rfidExecuteTaskHandle = osThreadCreate(osThread(rfidExecuteTask), NULL);
 80016a4:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80016a8:	2100      	movs	r1, #0
 80016aa:	4618      	mov	r0, r3
 80016ac:	f006 feb7 	bl	800841e <osThreadCreate>
 80016b0:	4603      	mov	r3, r0
 80016b2:	4a34      	ldr	r2, [pc, #208]	@ (8001784 <MX_FREERTOS_Init+0x120>)
 80016b4:	6013      	str	r3, [r2, #0]

  /* definition and creation of tagNumTransmitT */
  osThreadDef(tagNumTransmitT, StartTagNumTransmitTask, osPriorityNormal, 0, 128);
 80016b6:	4b34      	ldr	r3, [pc, #208]	@ (8001788 <MX_FREERTOS_Init+0x124>)
 80016b8:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 80016bc:	461d      	mov	r5, r3
 80016be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tagNumTransmitTHandle = osThreadCreate(osThread(tagNumTransmitT), NULL);
 80016ca:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80016ce:	2100      	movs	r1, #0
 80016d0:	4618      	mov	r0, r3
 80016d2:	f006 fea4 	bl	800841e <osThreadCreate>
 80016d6:	4603      	mov	r3, r0
 80016d8:	4a2c      	ldr	r2, [pc, #176]	@ (800178c <MX_FREERTOS_Init+0x128>)
 80016da:	6013      	str	r3, [r2, #0]

  /* definition and creation of rc522_read */
  osThreadDef(rc522_read, rc522_readTask, osPriorityNormal, 0, 128);
 80016dc:	4b2c      	ldr	r3, [pc, #176]	@ (8001790 <MX_FREERTOS_Init+0x12c>)
 80016de:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 80016e2:	461d      	mov	r5, r3
 80016e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  rc522_readHandle = osThreadCreate(osThread(rc522_read), NULL);
 80016f0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80016f4:	2100      	movs	r1, #0
 80016f6:	4618      	mov	r0, r3
 80016f8:	f006 fe91 	bl	800841e <osThreadCreate>
 80016fc:	4603      	mov	r3, r0
 80016fe:	4a25      	ldr	r2, [pc, #148]	@ (8001794 <MX_FREERTOS_Init+0x130>)
 8001700:	6013      	str	r3, [r2, #0]

  /* definition and creation of motorTask */
  osThreadDef(motorTask, controlmotor, osPriorityLow, 0, 128);
 8001702:	4b25      	ldr	r3, [pc, #148]	@ (8001798 <MX_FREERTOS_Init+0x134>)
 8001704:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8001708:	461d      	mov	r5, r3
 800170a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800170c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800170e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001712:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  motorTaskHandle = osThreadCreate(osThread(motorTask), NULL);
 8001716:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800171a:	2100      	movs	r1, #0
 800171c:	4618      	mov	r0, r3
 800171e:	f006 fe7e 	bl	800841e <osThreadCreate>
 8001722:	4603      	mov	r3, r0
 8001724:	4a1d      	ldr	r2, [pc, #116]	@ (800179c <MX_FREERTOS_Init+0x138>)
 8001726:	6013      	str	r3, [r2, #0]

  /* definition and creation of transmitTask2 */
  osThreadDef(transmitTask2, StarttransmitTask2, osPriorityNormal, 0, 128);
 8001728:	4b1d      	ldr	r3, [pc, #116]	@ (80017a0 <MX_FREERTOS_Init+0x13c>)
 800172a:	f107 0420 	add.w	r4, r7, #32
 800172e:	461d      	mov	r5, r3
 8001730:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001732:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001734:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001738:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  transmitTask2Handle = osThreadCreate(osThread(transmitTask2), NULL);
 800173c:	f107 0320 	add.w	r3, r7, #32
 8001740:	2100      	movs	r1, #0
 8001742:	4618      	mov	r0, r3
 8001744:	f006 fe6b 	bl	800841e <osThreadCreate>
 8001748:	4603      	mov	r3, r0
 800174a:	4a16      	ldr	r2, [pc, #88]	@ (80017a4 <MX_FREERTOS_Init+0x140>)
 800174c:	6013      	str	r3, [r2, #0]

  /* definition and creation of RosTask */
  osThreadStaticDef(RosTask, StartRosTask, osPriorityLow, 0, 3000, RosTaskBuffer, &RosTaskControlBlock);
 800174e:	4b16      	ldr	r3, [pc, #88]	@ (80017a8 <MX_FREERTOS_Init+0x144>)
 8001750:	1d3c      	adds	r4, r7, #4
 8001752:	461d      	mov	r5, r3
 8001754:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001756:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001758:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800175c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  RosTaskHandle = osThreadCreate(osThread(RosTask), NULL);
 8001760:	1d3b      	adds	r3, r7, #4
 8001762:	2100      	movs	r1, #0
 8001764:	4618      	mov	r0, r3
 8001766:	f006 fe5a 	bl	800841e <osThreadCreate>
 800176a:	4603      	mov	r3, r0
 800176c:	4a0f      	ldr	r2, [pc, #60]	@ (80017ac <MX_FREERTOS_Init+0x148>)
 800176e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001770:	bf00      	nop
 8001772:	37c8      	adds	r7, #200	@ 0xc8
 8001774:	46bd      	mov	sp, r7
 8001776:	bdb0      	pop	{r4, r5, r7, pc}
 8001778:	08019d84 	.word	0x08019d84
 800177c:	200046e8 	.word	0x200046e8
 8001780:	08019db0 	.word	0x08019db0
 8001784:	200046ec 	.word	0x200046ec
 8001788:	08019ddc 	.word	0x08019ddc
 800178c:	200046f0 	.word	0x200046f0
 8001790:	08019e04 	.word	0x08019e04
 8001794:	200046f4 	.word	0x200046f4
 8001798:	08019e2c 	.word	0x08019e2c
 800179c:	200046f8 	.word	0x200046f8
 80017a0:	08019e58 	.word	0x08019e58
 80017a4:	200046fc 	.word	0x200046fc
 80017a8:	08019e7c 	.word	0x08019e7c
 80017ac:	20004700 	.word	0x20004700

080017b0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	read_rfid_number();
 80017b8:	f001 fc70 	bl	800309c <read_rfid_number>
	read_rfid_number5();
 80017bc:	f001 fd60 	bl	8003280 <read_rfid_number5>
	read_command();
 80017c0:	f001 fe66 	bl	8003490 <read_command>
    osDelay(1);
 80017c4:	2001      	movs	r0, #1
 80017c6:	f006 fe76 	bl	80084b6 <osDelay>
	read_rfid_number();
 80017ca:	bf00      	nop
 80017cc:	e7f4      	b.n	80017b8 <StartDefaultTask+0x8>
	...

080017d0 <StartRfidExecuteTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRfidExecuteTask */
void StartRfidExecuteTask(void const * argument)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRfidExecuteTask */
	  uint8_t read_tag_single_time[] = {0xBB, 0x00, 0x22, 0x00, 0x00, 0x22, 0x7E};
 80017d8:	4a12      	ldr	r2, [pc, #72]	@ (8001824 <StartRfidExecuteTask+0x54>)
 80017da:	f107 0308 	add.w	r3, r7, #8
 80017de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017e2:	6018      	str	r0, [r3, #0]
 80017e4:	3304      	adds	r3, #4
 80017e6:	8019      	strh	r1, [r3, #0]
 80017e8:	3302      	adds	r3, #2
 80017ea:	0c0a      	lsrs	r2, r1, #16
 80017ec:	701a      	strb	r2, [r3, #0]
	  vTaskSuspend(rfidExecuteTaskHandle);
 80017ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001828 <StartRfidExecuteTask+0x58>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f007 f99a 	bl	8008b2c <vTaskSuspend>
	  /* Infinite loop */
	  for(;;)
	  {
		HAL_UART_Transmit(&huart1, read_tag_single_time, sizeof(read_tag_single_time), HAL_MAX_DELAY);
 80017f8:	f107 0108 	add.w	r1, r7, #8
 80017fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001800:	2207      	movs	r2, #7
 8001802:	480a      	ldr	r0, [pc, #40]	@ (800182c <StartRfidExecuteTask+0x5c>)
 8001804:	f005 fae4 	bl	8006dd0 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart5, read_tag_single_time, sizeof(read_tag_single_time), HAL_MAX_DELAY);
 8001808:	f107 0108 	add.w	r1, r7, #8
 800180c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001810:	2207      	movs	r2, #7
 8001812:	4807      	ldr	r0, [pc, #28]	@ (8001830 <StartRfidExecuteTask+0x60>)
 8001814:	f005 fadc 	bl	8006dd0 <HAL_UART_Transmit>
		//vTaskResume(defaultTaskHandle);
	    osDelay(300);
 8001818:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800181c:	f006 fe4b 	bl	80084b6 <osDelay>
		HAL_UART_Transmit(&huart1, read_tag_single_time, sizeof(read_tag_single_time), HAL_MAX_DELAY);
 8001820:	bf00      	nop
 8001822:	e7e9      	b.n	80017f8 <StartRfidExecuteTask+0x28>
 8001824:	08019e98 	.word	0x08019e98
 8001828:	200046ec 	.word	0x200046ec
 800182c:	20008730 	.word	0x20008730
 8001830:	200086e8 	.word	0x200086e8

08001834 <StartTagNumTransmitTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTagNumTransmitTask */
void StartTagNumTransmitTask(void const * argument)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b088      	sub	sp, #32
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  osEvent event;
  osEvent event2;
  for(;;)
  {
	event = osSignalWait(transmitSignal, 100);
 800183c:	f107 0314 	add.w	r3, r7, #20
 8001840:	2264      	movs	r2, #100	@ 0x64
 8001842:	2101      	movs	r1, #1
 8001844:	4618      	mov	r0, r3
 8001846:	f006 fe8b 	bl	8008560 <osSignalWait>
	if(event.value.signals == transmitSignal){
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	2b01      	cmp	r3, #1
 800184e:	d101      	bne.n	8001854 <StartTagNumTransmitTask+0x20>
		transmitData();
 8001850:	f001 fc7e 	bl	8003150 <transmitData>
		}
	event2 = osSignalWait(transmitSignal5, 100);
 8001854:	f107 0308 	add.w	r3, r7, #8
 8001858:	2264      	movs	r2, #100	@ 0x64
 800185a:	2105      	movs	r1, #5
 800185c:	4618      	mov	r0, r3
 800185e:	f006 fe7f 	bl	8008560 <osSignalWait>
	if(event.value.signals == transmitSignal5){
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	2b05      	cmp	r3, #5
 8001866:	d101      	bne.n	800186c <StartTagNumTransmitTask+0x38>
		transmitData5();
 8001868:	f001 fd64 	bl	8003334 <transmitData5>
	}
	osDelay(1);
 800186c:	2001      	movs	r0, #1
 800186e:	f006 fe22 	bl	80084b6 <osDelay>
	event = osSignalWait(transmitSignal, 100);
 8001872:	e7e3      	b.n	800183c <StartTagNumTransmitTask+0x8>

08001874 <rc522_readTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_rc522_readTask */
void rc522_readTask(void const * argument)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b088      	sub	sp, #32
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN rc522_readTask */
  uint8_t status,cardstr[16] = {0,};
 800187c:	2300      	movs	r3, #0
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	f107 0310 	add.w	r3, r7, #16
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	609a      	str	r2, [r3, #8]

  /* Infinite loop */
  for(;;)
  {

	if(MFRC522_Request(PICC_REQIDL, cardstr) == MI_OK){
 800188c:	f107 030c 	add.w	r3, r7, #12
 8001890:	4619      	mov	r1, r3
 8001892:	2026      	movs	r0, #38	@ 0x26
 8001894:	f000 ff41 	bl	800271a <MFRC522_Request>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d111      	bne.n	80018c2 <rc522_readTask+0x4e>
		status = MFRC522_Anticoll(cardstr);
 800189e:	f107 030c 	add.w	r3, r7, #12
 80018a2:	4618      	mov	r0, r3
 80018a4:	f000 ff5e 	bl	8002764 <MFRC522_Anticoll>
 80018a8:	4603      	mov	r3, r0
 80018aa:	77fb      	strb	r3, [r7, #31]
		if(status == MI_OK){
 80018ac:	7ffb      	ldrb	r3, [r7, #31]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d107      	bne.n	80018c2 <rc522_readTask+0x4e>
			HAL_UART_Transmit(&huart2, cardstr, 5, 500);
 80018b2:	f107 010c 	add.w	r1, r7, #12
 80018b6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80018ba:	2205      	movs	r2, #5
 80018bc:	4803      	ldr	r0, [pc, #12]	@ (80018cc <rc522_readTask+0x58>)
 80018be:	f005 fa87 	bl	8006dd0 <HAL_UART_Transmit>
		}
	}
	osDelay(300);
 80018c2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80018c6:	f006 fdf6 	bl	80084b6 <osDelay>
	if(MFRC522_Request(PICC_REQIDL, cardstr) == MI_OK){
 80018ca:	e7df      	b.n	800188c <rc522_readTask+0x18>
 80018cc:	20008778 	.word	0x20008778

080018d0 <controlmotor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_controlmotor */
void controlmotor(void const * argument)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN controlmotor */
  /* Infinite loop */
	vTaskSuspend(motorTaskHandle);
 80018d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001904 <controlmotor+0x34>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4618      	mov	r0, r3
 80018de:	f007 f925 	bl	8008b2c <vTaskSuspend>
  /* Infinite loop */
  for(;;)
  {
	  if(motor_status == 0){
 80018e2:	4b09      	ldr	r3, [pc, #36]	@ (8001908 <controlmotor+0x38>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d102      	bne.n	80018f0 <controlmotor+0x20>
		  scan_motor_up();
 80018ea:	f000 ff79 	bl	80027e0 <scan_motor_up>
 80018ee:	e005      	b.n	80018fc <controlmotor+0x2c>
	  }else if(motor_status == 1){
 80018f0:	4b05      	ldr	r3, [pc, #20]	@ (8001908 <controlmotor+0x38>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d101      	bne.n	80018fc <controlmotor+0x2c>
		  scan_motor_down();
 80018f8:	f000 ff94 	bl	8002824 <scan_motor_down>
	  }
	  osDelay(100);
 80018fc:	2064      	movs	r0, #100	@ 0x64
 80018fe:	f006 fdda 	bl	80084b6 <osDelay>
	  if(motor_status == 0){
 8001902:	e7ee      	b.n	80018e2 <controlmotor+0x12>
 8001904:	200046f8 	.word	0x200046f8
 8001908:	200046e4 	.word	0x200046e4

0800190c <StarttransmitTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StarttransmitTask2 */
void StarttransmitTask2(void const * argument)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StarttransmitTask2 */
	osEvent event;
  /* Infinite loop */
	  for(;;)
	  {
		  event = osSignalWait(transmitSignal2, 100);
 8001914:	f107 030c 	add.w	r3, r7, #12
 8001918:	2264      	movs	r2, #100	@ 0x64
 800191a:	2102      	movs	r1, #2
 800191c:	4618      	mov	r0, r3
 800191e:	f006 fe1f 	bl	8008560 <osSignalWait>
		  if(event.value.signals == transmitSignal2){
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	2b02      	cmp	r3, #2
 8001926:	d101      	bne.n	800192c <StarttransmitTask2+0x20>
			  transmitCommand();
 8001928:	f001 fde4 	bl	80034f4 <transmitCommand>
		  }
		  osDelay(1);
 800192c:	2001      	movs	r0, #1
 800192e:	f006 fdc2 	bl	80084b6 <osDelay>
		  event = osSignalWait(transmitSignal2, 100);
 8001932:	e7ef      	b.n	8001914 <StarttransmitTask2+0x8>

08001934 <subscription_str_callback>:
#define ARRAY_LEN 200
#define RCCHECK(fn) { rcl_ret_t temp_rc = fn; if((temp_rc != RCL_RET_OK)){printf("Failed status on line %d: %d. Aborting.\n",__LINE__,(int)temp_rc); return 1;}}
#define RCSOFTCHECK(fn) { rcl_ret_t temp_rc = fn; if((temp_rc != RCL_RET_OK)){printf("Failed status on line %d: %d. Continuing.\n",__LINE__,(int)temp_rc);}}

void subscription_str_callback(const void * msgin)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b09c      	sub	sp, #112	@ 0x70
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  std_msgs__msg__String * msg = (std_msgs__msg__String *)msgin;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  pub_str_msg = *msg;
 8001940:	4b1e      	ldr	r3, [pc, #120]	@ (80019bc <subscription_str_callback+0x88>)
 8001942:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001944:	ca07      	ldmia	r2, {r0, r1, r2}
 8001946:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  char str[100];
  strcpy(str, msg->data.data);
 800194a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	f107 0308 	add.w	r3, r7, #8
 8001952:	4611      	mov	r1, r2
 8001954:	4618      	mov	r0, r3
 8001956:	f016 fb5a 	bl	801800e <strcpy>
  if(!strcmp(str,"scan")){
 800195a:	f107 0308 	add.w	r3, r7, #8
 800195e:	4918      	ldr	r1, [pc, #96]	@ (80019c0 <subscription_str_callback+0x8c>)
 8001960:	4618      	mov	r0, r3
 8001962:	f7fe fc55 	bl	8000210 <strcmp>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d112      	bne.n	8001992 <subscription_str_callback+0x5e>
	  sprintf(pub_str_msg.data.data, "launch", str);
 800196c:	4b13      	ldr	r3, [pc, #76]	@ (80019bc <subscription_str_callback+0x88>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f107 0208 	add.w	r2, r7, #8
 8001974:	4913      	ldr	r1, [pc, #76]	@ (80019c4 <subscription_str_callback+0x90>)
 8001976:	4618      	mov	r0, r3
 8001978:	f016 f8d4 	bl	8017b24 <siprintf>
	  vTaskResume(motorTaskHandle);
 800197c:	4b12      	ldr	r3, [pc, #72]	@ (80019c8 <subscription_str_callback+0x94>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4618      	mov	r0, r3
 8001982:	f007 f999 	bl	8008cb8 <vTaskResume>
	  vTaskResume(rfidExecuteTaskHandle);
 8001986:	4b11      	ldr	r3, [pc, #68]	@ (80019cc <subscription_str_callback+0x98>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4618      	mov	r0, r3
 800198c:	f007 f994 	bl	8008cb8 <vTaskResume>
 8001990:	e007      	b.n	80019a2 <subscription_str_callback+0x6e>
  }else{
	  sprintf(pub_str_msg.data.data, "F446RE heard: %s", str);
 8001992:	4b0a      	ldr	r3, [pc, #40]	@ (80019bc <subscription_str_callback+0x88>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f107 0208 	add.w	r2, r7, #8
 800199a:	490d      	ldr	r1, [pc, #52]	@ (80019d0 <subscription_str_callback+0x9c>)
 800199c:	4618      	mov	r0, r3
 800199e:	f016 f8c1 	bl	8017b24 <siprintf>
  }
  //sprintf(pub_str_msg.data.data, "F446RE heard: %s", str);
  pub_str_msg.data.size = strlen(pub_str_msg.data.data);
 80019a2:	4b06      	ldr	r3, [pc, #24]	@ (80019bc <subscription_str_callback+0x88>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7fe fc92 	bl	80002d0 <strlen>
 80019ac:	4603      	mov	r3, r0
 80019ae:	4a03      	ldr	r2, [pc, #12]	@ (80019bc <subscription_str_callback+0x88>)
 80019b0:	6053      	str	r3, [r2, #4]
  //rcl_publish(&publisher_string_scan, &pub_str_msg, NULL);
  //Publisher_state();
  //debug_led();
}
 80019b2:	bf00      	nop
 80019b4:	3770      	adds	r7, #112	@ 0x70
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	200046cc 	.word	0x200046cc
 80019c0:	08019ea0 	.word	0x08019ea0
 80019c4:	08019ea8 	.word	0x08019ea8
 80019c8:	200046f8 	.word	0x200046f8
 80019cc:	200046ec 	.word	0x200046ec
 80019d0:	08019eb0 	.word	0x08019eb0

080019d4 <StartRosTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRosTask */
void StartRosTask(void const * argument)
{
 80019d4:	b5b0      	push	{r4, r5, r7, lr}
 80019d6:	f5ad 7d56 	sub.w	sp, sp, #856	@ 0x358
 80019da:	af02      	add	r7, sp, #8
 80019dc:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 80019e0:	f5a3 734d 	sub.w	r3, r3, #820	@ 0x334
 80019e4:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartRosTask */
	  // micro-ROS configuration
	  char test_array[ARRAY_LEN];
	  memset(test_array,'z',ARRAY_LEN);
 80019e6:	f507 7317 	add.w	r3, r7, #604	@ 0x25c
 80019ea:	22c8      	movs	r2, #200	@ 0xc8
 80019ec:	217a      	movs	r1, #122	@ 0x7a
 80019ee:	4618      	mov	r0, r3
 80019f0:	f016 f9f2 	bl	8017dd8 <memset>

	  rmw_uros_set_custom_transport(
 80019f4:	4bcb      	ldr	r3, [pc, #812]	@ (8001d24 <StartRosTask+0x350>)
 80019f6:	9301      	str	r3, [sp, #4]
 80019f8:	4bcb      	ldr	r3, [pc, #812]	@ (8001d28 <StartRosTask+0x354>)
 80019fa:	9300      	str	r3, [sp, #0]
 80019fc:	4bcb      	ldr	r3, [pc, #812]	@ (8001d2c <StartRosTask+0x358>)
 80019fe:	4acc      	ldr	r2, [pc, #816]	@ (8001d30 <StartRosTask+0x35c>)
 8001a00:	49cc      	ldr	r1, [pc, #816]	@ (8001d34 <StartRosTask+0x360>)
 8001a02:	2001      	movs	r0, #1
 8001a04:	f00a fa92 	bl	800bf2c <rmw_uros_set_custom_transport>
	    cubemx_transport_open,
	    cubemx_transport_close,
	    cubemx_transport_write,
	    cubemx_transport_read);

	  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001a08:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 8001a0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001a10:	4618      	mov	r0, r3
 8001a12:	f009 ff5b 	bl	800b8cc <rcutils_get_zero_initialized_allocator>
	  freeRTOS_allocator.allocate = microros_allocate;
 8001a16:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 8001a1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001a1e:	4ac6      	ldr	r2, [pc, #792]	@ (8001d38 <StartRosTask+0x364>)
 8001a20:	601a      	str	r2, [r3, #0]
	  freeRTOS_allocator.deallocate = microros_deallocate;
 8001a22:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 8001a26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001a2a:	4ac4      	ldr	r2, [pc, #784]	@ (8001d3c <StartRosTask+0x368>)
 8001a2c:	605a      	str	r2, [r3, #4]
	  freeRTOS_allocator.reallocate = microros_reallocate;
 8001a2e:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 8001a32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001a36:	4ac2      	ldr	r2, [pc, #776]	@ (8001d40 <StartRosTask+0x36c>)
 8001a38:	609a      	str	r2, [r3, #8]
	  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8001a3a:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 8001a3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001a42:	4ac0      	ldr	r2, [pc, #768]	@ (8001d44 <StartRosTask+0x370>)
 8001a44:	60da      	str	r2, [r3, #12]

	  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8001a46:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f009 ff4c 	bl	800b8e8 <rcutils_set_default_allocator>
 8001a50:	4603      	mov	r3, r0
 8001a52:	f083 0301 	eor.w	r3, r3, #1
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d004      	beq.n	8001a66 <StartRosTask+0x92>
	    printf("Error on default allocators (line %d)\n", __LINE__);
 8001a5c:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8001a60:	48b9      	ldr	r0, [pc, #740]	@ (8001d48 <StartRosTask+0x374>)
 8001a62:	f016 f819 	bl	8017a98 <iprintf>
	  sensor_msgs__msg__Imu sub_imu_msg;
	  rclc_support_t support;
	  rcl_allocator_t allocator;
	  rcl_node_t node;

	  allocator = rcl_get_default_allocator();
 8001a66:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 8001a6a:	f5a3 7428 	sub.w	r4, r3, #672	@ 0x2a0
 8001a6e:	463b      	mov	r3, r7
 8001a70:	4618      	mov	r0, r3
 8001a72:	f009 ff57 	bl	800b924 <rcutils_get_default_allocator>
 8001a76:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 8001a7a:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8001a7e:	461d      	mov	r5, r3
 8001a80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a84:	682b      	ldr	r3, [r5, #0]
 8001a86:	6023      	str	r3, [r4, #0]

	  // create init_options
	  RCCHECK(rclc_support_init(&support, 0, NULL, &allocator));
 8001a88:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8001a8c:	f107 00c4 	add.w	r0, r7, #196	@ 0xc4
 8001a90:	2200      	movs	r2, #0
 8001a92:	2100      	movs	r1, #0
 8001a94:	f009 fe24 	bl	800b6e0 <rclc_support_init>
 8001a98:	f8c7 034c 	str.w	r0, [r7, #844]	@ 0x34c
 8001a9c:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d007      	beq.n	8001ab4 <StartRosTask+0xe0>
 8001aa4:	f8d7 234c 	ldr.w	r2, [r7, #844]	@ 0x34c
 8001aa8:	f240 11a1 	movw	r1, #417	@ 0x1a1
 8001aac:	48a7      	ldr	r0, [pc, #668]	@ (8001d4c <StartRosTask+0x378>)
 8001aae:	f015 fff3 	bl	8017a98 <iprintf>
 8001ab2:	e132      	b.n	8001d1a <StartRosTask+0x346>

	  // create node
	  RCCHECK(rclc_node_init_default(&node, "f446re_node", "", &support));
 8001ab4:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8001ab8:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 8001abc:	4aa4      	ldr	r2, [pc, #656]	@ (8001d50 <StartRosTask+0x37c>)
 8001abe:	49a5      	ldr	r1, [pc, #660]	@ (8001d54 <StartRosTask+0x380>)
 8001ac0:	f009 fe58 	bl	800b774 <rclc_node_init_default>
 8001ac4:	f8c7 0348 	str.w	r0, [r7, #840]	@ 0x348
 8001ac8:	f8d7 3348 	ldr.w	r3, [r7, #840]	@ 0x348
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d007      	beq.n	8001ae0 <StartRosTask+0x10c>
 8001ad0:	f8d7 2348 	ldr.w	r2, [r7, #840]	@ 0x348
 8001ad4:	f44f 71d2 	mov.w	r1, #420	@ 0x1a4
 8001ad8:	489c      	ldr	r0, [pc, #624]	@ (8001d4c <StartRosTask+0x378>)
 8001ada:	f015 ffdd 	bl	8017a98 <iprintf>
 8001ade:	e11c      	b.n	8001d1a <StartRosTask+0x346>

	  // create publisher
	  RCCHECK(rclc_publisher_init_best_effort(
 8001ae0:	f00b fa4e 	bl	800cf80 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 8001aea:	4b9b      	ldr	r3, [pc, #620]	@ (8001d58 <StartRosTask+0x384>)
 8001aec:	489b      	ldr	r0, [pc, #620]	@ (8001d5c <StartRosTask+0x388>)
 8001aee:	f009 fe7d 	bl	800b7ec <rclc_publisher_init_best_effort>
 8001af2:	f8c7 0344 	str.w	r0, [r7, #836]	@ 0x344
 8001af6:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d007      	beq.n	8001b0e <StartRosTask+0x13a>
 8001afe:	f8d7 2344 	ldr.w	r2, [r7, #836]	@ 0x344
 8001b02:	f240 11a7 	movw	r1, #423	@ 0x1a7
 8001b06:	4891      	ldr	r0, [pc, #580]	@ (8001d4c <StartRosTask+0x378>)
 8001b08:	f015 ffc6 	bl	8017a98 <iprintf>
 8001b0c:	e105      	b.n	8001d1a <StartRosTask+0x346>
	    &publisher_string_scan,
	    &node,
	    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, String),
	    "/f446re_scan_status"));

	  RCCHECK(rclc_publisher_init_best_effort(
 8001b0e:	f00b fa37 	bl	800cf80 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>
 8001b12:	4602      	mov	r2, r0
 8001b14:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 8001b18:	4b91      	ldr	r3, [pc, #580]	@ (8001d60 <StartRosTask+0x38c>)
 8001b1a:	4892      	ldr	r0, [pc, #584]	@ (8001d64 <StartRosTask+0x390>)
 8001b1c:	f009 fe66 	bl	800b7ec <rclc_publisher_init_best_effort>
 8001b20:	f8c7 0340 	str.w	r0, [r7, #832]	@ 0x340
 8001b24:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d007      	beq.n	8001b3c <StartRosTask+0x168>
 8001b2c:	f8d7 2340 	ldr.w	r2, [r7, #832]	@ 0x340
 8001b30:	f240 11ad 	movw	r1, #429	@ 0x1ad
 8001b34:	4885      	ldr	r0, [pc, #532]	@ (8001d4c <StartRosTask+0x378>)
 8001b36:	f015 ffaf 	bl	8017a98 <iprintf>
 8001b3a:	e0ee      	b.n	8001d1a <StartRosTask+0x346>
	    &node,
	    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, String),
	    "/f446re_nav_pos"));

	  // create subscriber
	  RCCHECK(rclc_subscription_init_default(
 8001b3c:	f00b fa20 	bl	800cf80 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>
 8001b40:	4602      	mov	r2, r0
 8001b42:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 8001b46:	f507 7011 	add.w	r0, r7, #580	@ 0x244
 8001b4a:	4b87      	ldr	r3, [pc, #540]	@ (8001d68 <StartRosTask+0x394>)
 8001b4c:	f009 fe82 	bl	800b854 <rclc_subscription_init_default>
 8001b50:	f8c7 033c 	str.w	r0, [r7, #828]	@ 0x33c
 8001b54:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d007      	beq.n	8001b6c <StartRosTask+0x198>
 8001b5c:	f8d7 233c 	ldr.w	r2, [r7, #828]	@ 0x33c
 8001b60:	f44f 71da 	mov.w	r1, #436	@ 0x1b4
 8001b64:	4879      	ldr	r0, [pc, #484]	@ (8001d4c <StartRosTask+0x378>)
 8001b66:	f015 ff97 	bl	8017a98 <iprintf>
 8001b6a:	e0d6      	b.n	8001d1a <StartRosTask+0x346>
	    &node,
	    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, String),
	    "/f446re_scan_oper"));

	  // create executor
	  rclc_executor_t executor = rclc_executor_get_zero_initialized_executor();
 8001b6c:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 8001b70:	f5a3 734c 	sub.w	r3, r3, #816	@ 0x330
 8001b74:	4618      	mov	r0, r3
 8001b76:	f009 fad9 	bl	800b12c <rclc_executor_get_zero_initialized_executor>
	  RCCHECK(rclc_executor_init(&executor, &support.context, 2, &allocator));
 8001b7a:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8001b7e:	f107 01c4 	add.w	r1, r7, #196	@ 0xc4
 8001b82:	f107 0020 	add.w	r0, r7, #32
 8001b86:	2202      	movs	r2, #2
 8001b88:	f009 fada 	bl	800b140 <rclc_executor_init>
 8001b8c:	f8c7 0338 	str.w	r0, [r7, #824]	@ 0x338
 8001b90:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d007      	beq.n	8001ba8 <StartRosTask+0x1d4>
 8001b98:	f8d7 2338 	ldr.w	r2, [r7, #824]	@ 0x338
 8001b9c:	f44f 71de 	mov.w	r1, #444	@ 0x1bc
 8001ba0:	486a      	ldr	r0, [pc, #424]	@ (8001d4c <StartRosTask+0x378>)
 8001ba2:	f015 ff79 	bl	8017a98 <iprintf>
 8001ba6:	e0b8      	b.n	8001d1a <StartRosTask+0x346>
	  RCCHECK(rclc_executor_add_subscription(&executor, &subscriber_oper, &sub_str_msg, &subscription_str_callback, ON_NEW_DATA));
 8001ba8:	f507 720e 	add.w	r2, r7, #568	@ 0x238
 8001bac:	f507 7111 	add.w	r1, r7, #580	@ 0x244
 8001bb0:	f107 0020 	add.w	r0, r7, #32
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	9300      	str	r3, [sp, #0]
 8001bb8:	4b6c      	ldr	r3, [pc, #432]	@ (8001d6c <StartRosTask+0x398>)
 8001bba:	f009 fb31 	bl	800b220 <rclc_executor_add_subscription>
 8001bbe:	f8c7 0334 	str.w	r0, [r7, #820]	@ 0x334
 8001bc2:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d007      	beq.n	8001bda <StartRosTask+0x206>
 8001bca:	f8d7 2334 	ldr.w	r2, [r7, #820]	@ 0x334
 8001bce:	f240 11bd 	movw	r1, #445	@ 0x1bd
 8001bd2:	485e      	ldr	r0, [pc, #376]	@ (8001d4c <StartRosTask+0x378>)
 8001bd4:	f015 ff60 	bl	8017a98 <iprintf>
 8001bd8:	e09f      	b.n	8001d1a <StartRosTask+0x346>

	  // initialize message memory
	  pub_str_msg.data.data = (char * ) malloc(ARRAY_LEN * sizeof(char));
 8001bda:	20c8      	movs	r0, #200	@ 0xc8
 8001bdc:	f015 f810 	bl	8016c00 <malloc>
 8001be0:	4603      	mov	r3, r0
 8001be2:	461a      	mov	r2, r3
 8001be4:	4b62      	ldr	r3, [pc, #392]	@ (8001d70 <StartRosTask+0x39c>)
 8001be6:	601a      	str	r2, [r3, #0]
	  pub_str_msg.data.size = 0;
 8001be8:	4b61      	ldr	r3, [pc, #388]	@ (8001d70 <StartRosTask+0x39c>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	605a      	str	r2, [r3, #4]
	  pub_str_msg.data.capacity = ARRAY_LEN;
 8001bee:	4b60      	ldr	r3, [pc, #384]	@ (8001d70 <StartRosTask+0x39c>)
 8001bf0:	22c8      	movs	r2, #200	@ 0xc8
 8001bf2:	609a      	str	r2, [r3, #8]

	  pub_str_pos.data.data = (char * ) malloc(ARRAY_LEN * sizeof(char));
 8001bf4:	20c8      	movs	r0, #200	@ 0xc8
 8001bf6:	f015 f803 	bl	8016c00 <malloc>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	4b5d      	ldr	r3, [pc, #372]	@ (8001d74 <StartRosTask+0x3a0>)
 8001c00:	601a      	str	r2, [r3, #0]
	  pub_str_pos.data.size = 0;
 8001c02:	4b5c      	ldr	r3, [pc, #368]	@ (8001d74 <StartRosTask+0x3a0>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	605a      	str	r2, [r3, #4]
	  pub_str_pos.data.capacity = ARRAY_LEN;
 8001c08:	4b5a      	ldr	r3, [pc, #360]	@ (8001d74 <StartRosTask+0x3a0>)
 8001c0a:	22c8      	movs	r2, #200	@ 0xc8
 8001c0c:	609a      	str	r2, [r3, #8]

	  sub_str_msg.data.data = (char * ) malloc(ARRAY_LEN * sizeof(char));
 8001c0e:	20c8      	movs	r0, #200	@ 0xc8
 8001c10:	f014 fff6 	bl	8016c00 <malloc>
 8001c14:	4603      	mov	r3, r0
 8001c16:	461a      	mov	r2, r3
 8001c18:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 8001c1c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001c20:	601a      	str	r2, [r3, #0]
	  sub_str_msg.data.size = 0;
 8001c22:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 8001c26:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	605a      	str	r2, [r3, #4]
	  sub_str_msg.data.capacity = ARRAY_LEN;
 8001c2e:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 8001c32:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001c36:	22c8      	movs	r2, #200	@ 0xc8
 8001c38:	609a      	str	r2, [r3, #8]

	  sub_imu_msg.header.frame_id.capacity = 100;
 8001c3a:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 8001c3e:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8001c42:	2264      	movs	r2, #100	@ 0x64
 8001c44:	611a      	str	r2, [r3, #16]
	  sub_imu_msg.header.frame_id.data =(char * ) malloc(100 * sizeof(char));
 8001c46:	2064      	movs	r0, #100	@ 0x64
 8001c48:	f014 ffda 	bl	8016c00 <malloc>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	461a      	mov	r2, r3
 8001c50:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 8001c54:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8001c58:	609a      	str	r2, [r3, #8]
	  sub_imu_msg.header.frame_id.size = 0;
 8001c5a:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 8001c5e:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8001c62:	2200      	movs	r2, #0
 8001c64:	60da      	str	r2, [r3, #12]

	  // execute subscriber
	  rclc_executor_spin(&executor);
 8001c66:	f107 0320 	add.w	r3, r7, #32
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f009 fcf8 	bl	800b660 <rclc_executor_spin>
	  // cleaning Up
	  RCCHECK(rcl_publisher_fini(&publisher_string_scan, &node));
 8001c70:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8001c74:	4619      	mov	r1, r3
 8001c76:	4839      	ldr	r0, [pc, #228]	@ (8001d5c <StartRosTask+0x388>)
 8001c78:	f008 fcd8 	bl	800a62c <rcl_publisher_fini>
 8001c7c:	f8c7 0330 	str.w	r0, [r7, #816]	@ 0x330
 8001c80:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d007      	beq.n	8001c98 <StartRosTask+0x2c4>
 8001c88:	f8d7 2330 	ldr.w	r2, [r7, #816]	@ 0x330
 8001c8c:	f240 11d3 	movw	r1, #467	@ 0x1d3
 8001c90:	482e      	ldr	r0, [pc, #184]	@ (8001d4c <StartRosTask+0x378>)
 8001c92:	f015 ff01 	bl	8017a98 <iprintf>
 8001c96:	e040      	b.n	8001d1a <StartRosTask+0x346>
	  RCCHECK(rcl_publisher_fini(&publisher_string_pos, &node));
 8001c98:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4831      	ldr	r0, [pc, #196]	@ (8001d64 <StartRosTask+0x390>)
 8001ca0:	f008 fcc4 	bl	800a62c <rcl_publisher_fini>
 8001ca4:	f8c7 032c 	str.w	r0, [r7, #812]	@ 0x32c
 8001ca8:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d007      	beq.n	8001cc0 <StartRosTask+0x2ec>
 8001cb0:	f8d7 232c 	ldr.w	r2, [r7, #812]	@ 0x32c
 8001cb4:	f44f 71ea 	mov.w	r1, #468	@ 0x1d4
 8001cb8:	4824      	ldr	r0, [pc, #144]	@ (8001d4c <StartRosTask+0x378>)
 8001cba:	f015 feed 	bl	8017a98 <iprintf>
 8001cbe:	e02c      	b.n	8001d1a <StartRosTask+0x346>
	  RCCHECK(rcl_subscription_fini(&subscriber_oper, &node));
 8001cc0:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 8001cc4:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 8001cc8:	4611      	mov	r1, r2
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f008 fdfc 	bl	800a8c8 <rcl_subscription_fini>
 8001cd0:	f8c7 0328 	str.w	r0, [r7, #808]	@ 0x328
 8001cd4:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d007      	beq.n	8001cec <StartRosTask+0x318>
 8001cdc:	f8d7 2328 	ldr.w	r2, [r7, #808]	@ 0x328
 8001ce0:	f240 11d5 	movw	r1, #469	@ 0x1d5
 8001ce4:	4819      	ldr	r0, [pc, #100]	@ (8001d4c <StartRosTask+0x378>)
 8001ce6:	f015 fed7 	bl	8017a98 <iprintf>
 8001cea:	e016      	b.n	8001d1a <StartRosTask+0x346>
	  RCCHECK(rcl_node_fini(&node));
 8001cec:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f008 fb79 	bl	800a3e8 <rcl_node_fini>
 8001cf6:	f8c7 0324 	str.w	r0, [r7, #804]	@ 0x324
 8001cfa:	f8d7 3324 	ldr.w	r3, [r7, #804]	@ 0x324
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d007      	beq.n	8001d12 <StartRosTask+0x33e>
 8001d02:	f8d7 2324 	ldr.w	r2, [r7, #804]	@ 0x324
 8001d06:	f44f 71eb 	mov.w	r1, #470	@ 0x1d6
 8001d0a:	4810      	ldr	r0, [pc, #64]	@ (8001d4c <StartRosTask+0x378>)
 8001d0c:	f015 fec4 	bl	8017a98 <iprintf>
 8001d10:	e003      	b.n	8001d1a <StartRosTask+0x346>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001d12:	2001      	movs	r0, #1
 8001d14:	f006 fbcf 	bl	80084b6 <osDelay>
 8001d18:	e7fb      	b.n	8001d12 <StartRosTask+0x33e>
  }
  /* USER CODE END StartRosTask */
}
 8001d1a:	f507 7754 	add.w	r7, r7, #848	@ 0x350
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bdb0      	pop	{r4, r5, r7, pc}
 8001d22:	bf00      	nop
 8001d24:	08001589 	.word	0x08001589
 8001d28:	08001521 	.word	0x08001521
 8001d2c:	08001501 	.word	0x08001501
 8001d30:	080014d5 	.word	0x080014d5
 8001d34:	20008808 	.word	0x20008808
 8001d38:	08002101 	.word	0x08002101
 8001d3c:	08002145 	.word	0x08002145
 8001d40:	0800217d 	.word	0x0800217d
 8001d44:	080021e9 	.word	0x080021e9
 8001d48:	08019ec4 	.word	0x08019ec4
 8001d4c:	08019eec 	.word	0x08019eec
 8001d50:	08019f18 	.word	0x08019f18
 8001d54:	08019f1c 	.word	0x08019f1c
 8001d58:	08019f28 	.word	0x08019f28
 8001d5c:	200046c4 	.word	0x200046c4
 8001d60:	08019f3c 	.word	0x08019f3c
 8001d64:	200046c8 	.word	0x200046c8
 8001d68:	08019f4c 	.word	0x08019f4c
 8001d6c:	08001935 	.word	0x08001935
 8001d70:	200046cc 	.word	0x200046cc
 8001d74:	200046d8 	.word	0x200046d8

08001d78 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b08a      	sub	sp, #40	@ 0x28
 8001d7c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d7e:	f107 0314 	add.w	r3, r7, #20
 8001d82:	2200      	movs	r2, #0
 8001d84:	601a      	str	r2, [r3, #0]
 8001d86:	605a      	str	r2, [r3, #4]
 8001d88:	609a      	str	r2, [r3, #8]
 8001d8a:	60da      	str	r2, [r3, #12]
 8001d8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	613b      	str	r3, [r7, #16]
 8001d92:	4b4a      	ldr	r3, [pc, #296]	@ (8001ebc <MX_GPIO_Init+0x144>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d96:	4a49      	ldr	r2, [pc, #292]	@ (8001ebc <MX_GPIO_Init+0x144>)
 8001d98:	f043 0304 	orr.w	r3, r3, #4
 8001d9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d9e:	4b47      	ldr	r3, [pc, #284]	@ (8001ebc <MX_GPIO_Init+0x144>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da2:	f003 0304 	and.w	r3, r3, #4
 8001da6:	613b      	str	r3, [r7, #16]
 8001da8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001daa:	2300      	movs	r3, #0
 8001dac:	60fb      	str	r3, [r7, #12]
 8001dae:	4b43      	ldr	r3, [pc, #268]	@ (8001ebc <MX_GPIO_Init+0x144>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db2:	4a42      	ldr	r2, [pc, #264]	@ (8001ebc <MX_GPIO_Init+0x144>)
 8001db4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001db8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dba:	4b40      	ldr	r3, [pc, #256]	@ (8001ebc <MX_GPIO_Init+0x144>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60bb      	str	r3, [r7, #8]
 8001dca:	4b3c      	ldr	r3, [pc, #240]	@ (8001ebc <MX_GPIO_Init+0x144>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dce:	4a3b      	ldr	r2, [pc, #236]	@ (8001ebc <MX_GPIO_Init+0x144>)
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dd6:	4b39      	ldr	r3, [pc, #228]	@ (8001ebc <MX_GPIO_Init+0x144>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	60bb      	str	r3, [r7, #8]
 8001de0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de2:	2300      	movs	r3, #0
 8001de4:	607b      	str	r3, [r7, #4]
 8001de6:	4b35      	ldr	r3, [pc, #212]	@ (8001ebc <MX_GPIO_Init+0x144>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dea:	4a34      	ldr	r2, [pc, #208]	@ (8001ebc <MX_GPIO_Init+0x144>)
 8001dec:	f043 0302 	orr.w	r3, r3, #2
 8001df0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001df2:	4b32      	ldr	r3, [pc, #200]	@ (8001ebc <MX_GPIO_Init+0x144>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	607b      	str	r3, [r7, #4]
 8001dfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dfe:	2300      	movs	r3, #0
 8001e00:	603b      	str	r3, [r7, #0]
 8001e02:	4b2e      	ldr	r3, [pc, #184]	@ (8001ebc <MX_GPIO_Init+0x144>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e06:	4a2d      	ldr	r2, [pc, #180]	@ (8001ebc <MX_GPIO_Init+0x144>)
 8001e08:	f043 0308 	orr.w	r3, r3, #8
 8001e0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e0e:	4b2b      	ldr	r3, [pc, #172]	@ (8001ebc <MX_GPIO_Init+0x144>)
 8001e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e12:	f003 0308 	and.w	r3, r3, #8
 8001e16:	603b      	str	r3, [r7, #0]
 8001e18:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|RC522_CS_Pin, GPIO_PIN_RESET);
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	2160      	movs	r1, #96	@ 0x60
 8001e1e:	4828      	ldr	r0, [pc, #160]	@ (8001ec0 <MX_GPIO_Init+0x148>)
 8001e20:	f002 fdf4 	bl	8004a0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Direction0_Pin|Direction1_Pin, GPIO_PIN_RESET);
 8001e24:	2200      	movs	r2, #0
 8001e26:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8001e2a:	4826      	ldr	r0, [pc, #152]	@ (8001ec4 <MX_GPIO_Init+0x14c>)
 8001e2c:	f002 fdee 	bl	8004a0c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|RC522_CS_Pin;
 8001e30:	2360      	movs	r3, #96	@ 0x60
 8001e32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e34:	2301      	movs	r3, #1
 8001e36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e40:	f107 0314 	add.w	r3, r7, #20
 8001e44:	4619      	mov	r1, r3
 8001e46:	481e      	ldr	r0, [pc, #120]	@ (8001ec0 <MX_GPIO_Init+0x148>)
 8001e48:	f002 fc4c 	bl	80046e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Direction0_Pin|Direction1_Pin;
 8001e4c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001e50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e52:	2301      	movs	r3, #1
 8001e54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e56:	2301      	movs	r3, #1
 8001e58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e5e:	f107 0314 	add.w	r3, r7, #20
 8001e62:	4619      	mov	r1, r3
 8001e64:	4817      	ldr	r0, [pc, #92]	@ (8001ec4 <MX_GPIO_Init+0x14c>)
 8001e66:	f002 fc3d 	bl	80046e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Limit_switch_up_Pin;
 8001e6a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e70:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001e74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e76:	2301      	movs	r3, #1
 8001e78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Limit_switch_up_GPIO_Port, &GPIO_InitStruct);
 8001e7a:	f107 0314 	add.w	r3, r7, #20
 8001e7e:	4619      	mov	r1, r3
 8001e80:	480f      	ldr	r0, [pc, #60]	@ (8001ec0 <MX_GPIO_Init+0x148>)
 8001e82:	f002 fc2f 	bl	80046e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Limit_switch_down_Pin;
 8001e86:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001e8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e8c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001e90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e92:	2302      	movs	r3, #2
 8001e94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Limit_switch_down_GPIO_Port, &GPIO_InitStruct);
 8001e96:	f107 0314 	add.w	r3, r7, #20
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4808      	ldr	r0, [pc, #32]	@ (8001ec0 <MX_GPIO_Init+0x148>)
 8001e9e:	f002 fc21 	bl	80046e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	2105      	movs	r1, #5
 8001ea6:	2028      	movs	r0, #40	@ 0x28
 8001ea8:	f001 fff0 	bl	8003e8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001eac:	2028      	movs	r0, #40	@ 0x28
 8001eae:	f002 f809 	bl	8003ec4 <HAL_NVIC_EnableIRQ>

}
 8001eb2:	bf00      	nop
 8001eb4:	3728      	adds	r7, #40	@ 0x28
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	40023800 	.word	0x40023800
 8001ec0:	40020000 	.word	0x40020000
 8001ec4:	40020800 	.word	0x40020800

08001ec8 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 0 */
extern SPI_HandleTypeDef hspi2;
uint8_t rc522_rx_buf[100];
uint8_t cardstr[17];

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	4603      	mov	r3, r0
 8001ed0:	80fb      	strh	r3, [r7, #6]
	static uint32_t before_tick1 = 0;
	static uint32_t before_tick2 = 0;

	if(GPIO_Pin == Limit_switch_up_Pin){
 8001ed2:	88fb      	ldrh	r3, [r7, #6]
 8001ed4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001ed8:	d11e      	bne.n	8001f18 <HAL_GPIO_EXTI_Callback+0x50>
		if(HAL_GetTick() - before_tick1 >= 300){
 8001eda:	f001 ff13 	bl	8003d04 <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	4b20      	ldr	r3, [pc, #128]	@ (8001f64 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001eea:	d337      	bcc.n	8001f5c <HAL_GPIO_EXTI_Callback+0x94>
			before_tick1 = HAL_GetTick();
 8001eec:	f001 ff0a 	bl	8003d04 <HAL_GetTick>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	4a1c      	ldr	r2, [pc, #112]	@ (8001f64 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001ef4:	6013      	str	r3, [r2, #0]
			limit_switch_up = 1;
 8001ef6:	4b1c      	ldr	r3, [pc, #112]	@ (8001f68 <HAL_GPIO_EXTI_Callback+0xa0>)
 8001ef8:	2201      	movs	r2, #1
 8001efa:	601a      	str	r2, [r3, #0]
			limit_switch_down = 0;
 8001efc:	4b1b      	ldr	r3, [pc, #108]	@ (8001f6c <HAL_GPIO_EXTI_Callback+0xa4>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	601a      	str	r2, [r3, #0]
			vTaskSuspend(rfidExecuteTaskHandle);
 8001f02:	4b1b      	ldr	r3, [pc, #108]	@ (8001f70 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f006 fe10 	bl	8008b2c <vTaskSuspend>
			vTaskSuspend(motorTaskHandle);
 8001f0c:	4b19      	ldr	r3, [pc, #100]	@ (8001f74 <HAL_GPIO_EXTI_Callback+0xac>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f006 fe0b 	bl	8008b2c <vTaskSuspend>
			limit_switch_up = 0;
			vTaskSuspend(rfidExecuteTaskHandle);
			vTaskSuspend(motorTaskHandle);
		}
	}
}
 8001f16:	e021      	b.n	8001f5c <HAL_GPIO_EXTI_Callback+0x94>
	}else if(GPIO_Pin == Limit_switch_down_Pin){
 8001f18:	88fb      	ldrh	r3, [r7, #6]
 8001f1a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001f1e:	d11d      	bne.n	8001f5c <HAL_GPIO_EXTI_Callback+0x94>
		if(HAL_GetTick() - before_tick2 >= 300){
 8001f20:	f001 fef0 	bl	8003d04 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	4b14      	ldr	r3, [pc, #80]	@ (8001f78 <HAL_GPIO_EXTI_Callback+0xb0>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001f30:	d314      	bcc.n	8001f5c <HAL_GPIO_EXTI_Callback+0x94>
			before_tick2 = HAL_GetTick();
 8001f32:	f001 fee7 	bl	8003d04 <HAL_GetTick>
 8001f36:	4603      	mov	r3, r0
 8001f38:	4a0f      	ldr	r2, [pc, #60]	@ (8001f78 <HAL_GPIO_EXTI_Callback+0xb0>)
 8001f3a:	6013      	str	r3, [r2, #0]
			limit_switch_down = 1;
 8001f3c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f6c <HAL_GPIO_EXTI_Callback+0xa4>)
 8001f3e:	2201      	movs	r2, #1
 8001f40:	601a      	str	r2, [r3, #0]
			limit_switch_up = 0;
 8001f42:	4b09      	ldr	r3, [pc, #36]	@ (8001f68 <HAL_GPIO_EXTI_Callback+0xa0>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]
			vTaskSuspend(rfidExecuteTaskHandle);
 8001f48:	4b09      	ldr	r3, [pc, #36]	@ (8001f70 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f006 fded 	bl	8008b2c <vTaskSuspend>
			vTaskSuspend(motorTaskHandle);
 8001f52:	4b08      	ldr	r3, [pc, #32]	@ (8001f74 <HAL_GPIO_EXTI_Callback+0xac>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f006 fde8 	bl	8008b2c <vTaskSuspend>
}
 8001f5c:	bf00      	nop
 8001f5e:	3708      	adds	r7, #8
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	20007924 	.word	0x20007924
 8001f68:	20007934 	.word	0x20007934
 8001f6c:	20007938 	.word	0x20007938
 8001f70:	200046ec 	.word	0x200046ec
 8001f74:	200046f8 	.word	0x200046f8
 8001f78:	20007928 	.word	0x20007928

08001f7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f80:	f001 fe8a 	bl	8003c98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f84:	f000 f832 	bl	8001fec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f88:	f7ff fef6 	bl	8001d78 <MX_GPIO_Init>
  MX_DMA_Init();
 8001f8c:	f7ff fa54 	bl	8001438 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001f90:	f001 fb32 	bl	80035f8 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001f94:	f001 fb06 	bl	80035a4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001f98:	f001 fb58 	bl	800364c <MX_USART3_UART_Init>
  MX_SPI2_Init();
 8001f9c:	f000 fc8e 	bl	80028bc <MX_SPI2_Init>
  MX_USART6_UART_Init();
 8001fa0:	f001 fb7e 	bl	80036a0 <MX_USART6_UART_Init>
  MX_UART5_Init();
 8001fa4:	f001 fad4 	bl	8003550 <MX_UART5_Init>
  MX_TIM2_Init();
 8001fa8:	f000 ff4a 	bl	8002e40 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  uart_init();
 8001fac:	f000 fff8 	bl	8002fa0 <uart_init>
  uart2_init();
 8001fb0:	f001 fa02 	bl	80033b8 <uart2_init>
  MFRC522_Init();
 8001fb4:	f000 faba 	bl	800252c <MFRC522_Init>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001fb8:	210c      	movs	r1, #12
 8001fba:	480a      	ldr	r0, [pc, #40]	@ (8001fe4 <main+0x68>)
 8001fbc:	f004 f904 	bl	80061c8 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(Direction0_GPIO_Port, Direction0_Pin, GPIO_PIN_SET);
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001fc6:	4808      	ldr	r0, [pc, #32]	@ (8001fe8 <main+0x6c>)
 8001fc8:	f002 fd20 	bl	8004a0c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Direction1_GPIO_Port, Direction1_Pin, GPIO_PIN_RESET);
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001fd2:	4805      	ldr	r0, [pc, #20]	@ (8001fe8 <main+0x6c>)
 8001fd4:	f002 fd1a 	bl	8004a0c <HAL_GPIO_WritePin>
//  HAL_SPI_Receive_IT(&hspi2,rc522_rx_buf,sizeof(rc522_rx_buf));

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001fd8:	f7ff fb44 	bl	8001664 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001fdc:	f006 fa18 	bl	8008410 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001fe0:	bf00      	nop
 8001fe2:	e7fd      	b.n	8001fe0 <main+0x64>
 8001fe4:	200079e4 	.word	0x200079e4
 8001fe8:	40020800 	.word	0x40020800

08001fec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b094      	sub	sp, #80	@ 0x50
 8001ff0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ff2:	f107 031c 	add.w	r3, r7, #28
 8001ff6:	2234      	movs	r2, #52	@ 0x34
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f015 feec 	bl	8017dd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002000:	f107 0308 	add.w	r3, r7, #8
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]
 8002008:	605a      	str	r2, [r3, #4]
 800200a:	609a      	str	r2, [r3, #8]
 800200c:	60da      	str	r2, [r3, #12]
 800200e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002010:	2300      	movs	r3, #0
 8002012:	607b      	str	r3, [r7, #4]
 8002014:	4b2c      	ldr	r3, [pc, #176]	@ (80020c8 <SystemClock_Config+0xdc>)
 8002016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002018:	4a2b      	ldr	r2, [pc, #172]	@ (80020c8 <SystemClock_Config+0xdc>)
 800201a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800201e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002020:	4b29      	ldr	r3, [pc, #164]	@ (80020c8 <SystemClock_Config+0xdc>)
 8002022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002024:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002028:	607b      	str	r3, [r7, #4]
 800202a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800202c:	2300      	movs	r3, #0
 800202e:	603b      	str	r3, [r7, #0]
 8002030:	4b26      	ldr	r3, [pc, #152]	@ (80020cc <SystemClock_Config+0xe0>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a25      	ldr	r2, [pc, #148]	@ (80020cc <SystemClock_Config+0xe0>)
 8002036:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800203a:	6013      	str	r3, [r2, #0]
 800203c:	4b23      	ldr	r3, [pc, #140]	@ (80020cc <SystemClock_Config+0xe0>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002044:	603b      	str	r3, [r7, #0]
 8002046:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002048:	2301      	movs	r3, #1
 800204a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800204c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002050:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002052:	2302      	movs	r3, #2
 8002054:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002056:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800205a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800205c:	2304      	movs	r3, #4
 800205e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002060:	23b4      	movs	r3, #180	@ 0xb4
 8002062:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002064:	2302      	movs	r3, #2
 8002066:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002068:	2302      	movs	r3, #2
 800206a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800206c:	2302      	movs	r3, #2
 800206e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002070:	f107 031c 	add.w	r3, r7, #28
 8002074:	4618      	mov	r0, r3
 8002076:	f003 f8c7 	bl	8005208 <HAL_RCC_OscConfig>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002080:	f000 f838 	bl	80020f4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002084:	f002 fcf4 	bl	8004a70 <HAL_PWREx_EnableOverDrive>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800208e:	f000 f831 	bl	80020f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002092:	230f      	movs	r3, #15
 8002094:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002096:	2302      	movs	r3, #2
 8002098:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800209a:	2300      	movs	r3, #0
 800209c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800209e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80020a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80020a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020a8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80020aa:	f107 0308 	add.w	r3, r7, #8
 80020ae:	2105      	movs	r1, #5
 80020b0:	4618      	mov	r0, r3
 80020b2:	f002 fd2d 	bl	8004b10 <HAL_RCC_ClockConfig>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80020bc:	f000 f81a 	bl	80020f4 <Error_Handler>
  }
}
 80020c0:	bf00      	nop
 80020c2:	3750      	adds	r7, #80	@ 0x50
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	40023800 	.word	0x40023800
 80020cc:	40007000 	.word	0x40007000

080020d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a04      	ldr	r2, [pc, #16]	@ (80020f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d101      	bne.n	80020e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80020e2:	f001 fdfb 	bl	8003cdc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80020e6:	bf00      	nop
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	40000800 	.word	0x40000800

080020f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80020f8:	b672      	cpsid	i
}
 80020fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020fc:	bf00      	nop
 80020fe:	e7fd      	b.n	80020fc <Error_Handler+0x8>

08002100 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800210a:	4b0c      	ldr	r3, [pc, #48]	@ (800213c <microros_allocate+0x3c>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	461a      	mov	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4413      	add	r3, r2
 8002114:	461a      	mov	r2, r3
 8002116:	4b09      	ldr	r3, [pc, #36]	@ (800213c <microros_allocate+0x3c>)
 8002118:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 800211a:	4b09      	ldr	r3, [pc, #36]	@ (8002140 <microros_allocate+0x40>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	461a      	mov	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4413      	add	r3, r2
 8002124:	461a      	mov	r2, r3
 8002126:	4b06      	ldr	r3, [pc, #24]	@ (8002140 <microros_allocate+0x40>)
 8002128:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f7fe ff34 	bl	8000f98 <pvPortMallocMicroROS>
 8002130:	4603      	mov	r3, r0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	2000792c 	.word	0x2000792c
 8002140:	20007930 	.word	0x20007930

08002144 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d00c      	beq.n	800216e <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f7ff f843 	bl	80011e0 <getBlockSize>
 800215a:	4603      	mov	r3, r0
 800215c:	4a06      	ldr	r2, [pc, #24]	@ (8002178 <microros_deallocate+0x34>)
 800215e:	6812      	ldr	r2, [r2, #0]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	461a      	mov	r2, r3
 8002164:	4b04      	ldr	r3, [pc, #16]	@ (8002178 <microros_deallocate+0x34>)
 8002166:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f7fe ffdd 	bl	8001128 <vPortFreeMicroROS>
  }
}
 800216e:	bf00      	nop
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	20007930 	.word	0x20007930

0800217c <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002188:	4b15      	ldr	r3, [pc, #84]	@ (80021e0 <microros_reallocate+0x64>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	461a      	mov	r2, r3
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	4413      	add	r3, r2
 8002192:	461a      	mov	r2, r3
 8002194:	4b12      	ldr	r3, [pc, #72]	@ (80021e0 <microros_reallocate+0x64>)
 8002196:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002198:	4b12      	ldr	r3, [pc, #72]	@ (80021e4 <microros_reallocate+0x68>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	461a      	mov	r2, r3
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	4413      	add	r3, r2
 80021a2:	461a      	mov	r2, r3
 80021a4:	4b0f      	ldr	r3, [pc, #60]	@ (80021e4 <microros_reallocate+0x68>)
 80021a6:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d104      	bne.n	80021b8 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 80021ae:	68b8      	ldr	r0, [r7, #8]
 80021b0:	f7fe fef2 	bl	8000f98 <pvPortMallocMicroROS>
 80021b4:	4603      	mov	r3, r0
 80021b6:	e00e      	b.n	80021d6 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 80021b8:	68f8      	ldr	r0, [r7, #12]
 80021ba:	f7ff f811 	bl	80011e0 <getBlockSize>
 80021be:	4603      	mov	r3, r0
 80021c0:	4a08      	ldr	r2, [pc, #32]	@ (80021e4 <microros_reallocate+0x68>)
 80021c2:	6812      	ldr	r2, [r2, #0]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	461a      	mov	r2, r3
 80021c8:	4b06      	ldr	r3, [pc, #24]	@ (80021e4 <microros_reallocate+0x68>)
 80021ca:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 80021cc:	68b9      	ldr	r1, [r7, #8]
 80021ce:	68f8      	ldr	r0, [r7, #12]
 80021d0:	f7ff f824 	bl	800121c <pvPortReallocMicroROS>
 80021d4:	4603      	mov	r3, r0
  }
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3710      	adds	r7, #16
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	2000792c 	.word	0x2000792c
 80021e4:	20007930 	.word	0x20007930

080021e8 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	68ba      	ldr	r2, [r7, #8]
 80021f8:	fb02 f303 	mul.w	r3, r2, r3
 80021fc:	4a0c      	ldr	r2, [pc, #48]	@ (8002230 <microros_zero_allocate+0x48>)
 80021fe:	6812      	ldr	r2, [r2, #0]
 8002200:	4413      	add	r3, r2
 8002202:	461a      	mov	r2, r3
 8002204:	4b0a      	ldr	r3, [pc, #40]	@ (8002230 <microros_zero_allocate+0x48>)
 8002206:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	68ba      	ldr	r2, [r7, #8]
 800220c:	fb02 f303 	mul.w	r3, r2, r3
 8002210:	4a08      	ldr	r2, [pc, #32]	@ (8002234 <microros_zero_allocate+0x4c>)
 8002212:	6812      	ldr	r2, [r2, #0]
 8002214:	4413      	add	r3, r2
 8002216:	461a      	mov	r2, r3
 8002218:	4b06      	ldr	r3, [pc, #24]	@ (8002234 <microros_zero_allocate+0x4c>)
 800221a:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 800221c:	68b9      	ldr	r1, [r7, #8]
 800221e:	68f8      	ldr	r0, [r7, #12]
 8002220:	f7ff f829 	bl	8001276 <pvPortCallocMicroROS>
 8002224:	4603      	mov	r3, r0
 8002226:	4618      	mov	r0, r3
 8002228:	3710      	adds	r7, #16
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	2000792c 	.word	0x2000792c
 8002234:	20007930 	.word	0x20007930

08002238 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8002238:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800223c:	b086      	sub	sp, #24
 800223e:	af00      	add	r7, sp, #0
 8002240:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002244:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8002246:	2300      	movs	r3, #0
 8002248:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 800224a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800224e:	a320      	add	r3, pc, #128	@ (adr r3, 80022d0 <UTILS_NanosecondsToTimespec+0x98>)
 8002250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002254:	f7fe fcd8 	bl	8000c08 <__aeabi_ldivmod>
 8002258:	4602      	mov	r2, r0
 800225a:	460b      	mov	r3, r1
 800225c:	6879      	ldr	r1, [r7, #4]
 800225e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8002262:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002266:	a31a      	add	r3, pc, #104	@ (adr r3, 80022d0 <UTILS_NanosecondsToTimespec+0x98>)
 8002268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800226c:	f7fe fccc 	bl	8000c08 <__aeabi_ldivmod>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	2b00      	cmp	r3, #0
 800227a:	da20      	bge.n	80022be <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	4a11      	ldr	r2, [pc, #68]	@ (80022c8 <UTILS_NanosecondsToTimespec+0x90>)
 8002282:	fb82 1203 	smull	r1, r2, r2, r3
 8002286:	1712      	asrs	r2, r2, #28
 8002288:	17db      	asrs	r3, r3, #31
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	3301      	adds	r3, #1
 800228e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002296:	6979      	ldr	r1, [r7, #20]
 8002298:	17c8      	asrs	r0, r1, #31
 800229a:	460c      	mov	r4, r1
 800229c:	4605      	mov	r5, r0
 800229e:	ebb2 0804 	subs.w	r8, r2, r4
 80022a2:	eb63 0905 	sbc.w	r9, r3, r5
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689a      	ldr	r2, [r3, #8]
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	4906      	ldr	r1, [pc, #24]	@ (80022cc <UTILS_NanosecondsToTimespec+0x94>)
 80022b4:	fb01 f303 	mul.w	r3, r1, r3
 80022b8:	441a      	add	r2, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	609a      	str	r2, [r3, #8]
    }
}
 80022be:	bf00      	nop
 80022c0:	3718      	adds	r7, #24
 80022c2:	46bd      	mov	sp, r7
 80022c4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80022c8:	44b82fa1 	.word	0x44b82fa1
 80022cc:	3b9aca00 	.word	0x3b9aca00
 80022d0:	3b9aca00 	.word	0x3b9aca00
 80022d4:	00000000 	.word	0x00000000

080022d8 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80022d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022dc:	b08e      	sub	sp, #56	@ 0x38
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6278      	str	r0, [r7, #36]	@ 0x24
 80022e2:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80022e4:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80022e8:	2300      	movs	r3, #0
 80022ea:	6013      	str	r3, [r2, #0]
 80022ec:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80022ee:	f04f 0200 	mov.w	r2, #0
 80022f2:	f04f 0300 	mov.w	r3, #0
 80022f6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 80022fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80022fe:	4618      	mov	r0, r3
 8002300:	f006 ff6c 	bl	80091dc <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8002304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002306:	17da      	asrs	r2, r3, #31
 8002308:	61bb      	str	r3, [r7, #24]
 800230a:	61fa      	str	r2, [r7, #28]
 800230c:	f04f 0200 	mov.w	r2, #0
 8002310:	f04f 0300 	mov.w	r3, #0
 8002314:	69b9      	ldr	r1, [r7, #24]
 8002316:	000b      	movs	r3, r1
 8002318:	2200      	movs	r2, #0
 800231a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 800231e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002320:	2200      	movs	r2, #0
 8002322:	461c      	mov	r4, r3
 8002324:	4615      	mov	r5, r2
 8002326:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800232a:	1911      	adds	r1, r2, r4
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	416b      	adcs	r3, r5
 8002330:	60fb      	str	r3, [r7, #12]
 8002332:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002336:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 800233a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800233e:	4602      	mov	r2, r0
 8002340:	460b      	mov	r3, r1
 8002342:	f04f 0400 	mov.w	r4, #0
 8002346:	f04f 0500 	mov.w	r5, #0
 800234a:	015d      	lsls	r5, r3, #5
 800234c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002350:	0154      	lsls	r4, r2, #5
 8002352:	4622      	mov	r2, r4
 8002354:	462b      	mov	r3, r5
 8002356:	ebb2 0800 	subs.w	r8, r2, r0
 800235a:	eb63 0901 	sbc.w	r9, r3, r1
 800235e:	f04f 0200 	mov.w	r2, #0
 8002362:	f04f 0300 	mov.w	r3, #0
 8002366:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800236a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800236e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8002372:	4690      	mov	r8, r2
 8002374:	4699      	mov	r9, r3
 8002376:	eb18 0a00 	adds.w	sl, r8, r0
 800237a:	eb49 0b01 	adc.w	fp, r9, r1
 800237e:	f04f 0200 	mov.w	r2, #0
 8002382:	f04f 0300 	mov.w	r3, #0
 8002386:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800238a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800238e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002392:	ebb2 040a 	subs.w	r4, r2, sl
 8002396:	603c      	str	r4, [r7, #0]
 8002398:	eb63 030b 	sbc.w	r3, r3, fp
 800239c:	607b      	str	r3, [r7, #4]
 800239e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023a2:	4623      	mov	r3, r4
 80023a4:	181b      	adds	r3, r3, r0
 80023a6:	613b      	str	r3, [r7, #16]
 80023a8:	462b      	mov	r3, r5
 80023aa:	eb41 0303 	adc.w	r3, r1, r3
 80023ae:	617b      	str	r3, [r7, #20]
 80023b0:	6a3a      	ldr	r2, [r7, #32]
 80023b2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80023b6:	f7ff ff3f 	bl	8002238 <UTILS_NanosecondsToTimespec>

    return 0;
 80023ba:	2300      	movs	r3, #0
 80023bc:	4618      	mov	r0, r3
 80023be:	3738      	adds	r7, #56	@ 0x38
 80023c0:	46bd      	mov	sp, r7
 80023c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080023c8 <RC522_SPI_Transfer>:
 * Description: A common function used by Write_MFRC522 and Read_MFRC522
 * Input Parameters: data - the value to be written
 * Returns: a byte of data read from the module
 */
uint8_t RC522_SPI_Transfer(uchar data)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af02      	add	r7, sp, #8
 80023ce:	4603      	mov	r3, r0
 80023d0:	71fb      	strb	r3, [r7, #7]
	uchar rx_data;
	HAL_SPI_TransmitReceive(HSPI_INSTANCE,&data,&rx_data,1,100);
 80023d2:	f107 020f 	add.w	r2, r7, #15
 80023d6:	1df9      	adds	r1, r7, #7
 80023d8:	2364      	movs	r3, #100	@ 0x64
 80023da:	9300      	str	r3, [sp, #0]
 80023dc:	2301      	movs	r3, #1
 80023de:	4804      	ldr	r0, [pc, #16]	@ (80023f0 <RC522_SPI_Transfer+0x28>)
 80023e0:	f003 fa39 	bl	8005856 <HAL_SPI_TransmitReceive>

	return rx_data;
 80023e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3710      	adds	r7, #16
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	2000793c 	.word	0x2000793c

080023f4 <Write_MFRC522>:
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parameters: addr - register address; val - the value to be written
 * Return value: None
 */
void Write_MFRC522(uchar addr, uchar val)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	4603      	mov	r3, r0
 80023fc:	460a      	mov	r2, r1
 80023fe:	71fb      	strb	r3, [r7, #7]
 8002400:	4613      	mov	r3, r2
 8002402:	71bb      	strb	r3, [r7, #6]
	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 8002404:	2200      	movs	r2, #0
 8002406:	2140      	movs	r1, #64	@ 0x40
 8002408:	480c      	ldr	r0, [pc, #48]	@ (800243c <Write_MFRC522+0x48>)
 800240a:	f002 faff 	bl	8004a0c <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and clear the MSb to indicate a write
	  // - bottom 8 bits are the data bits being sent for that address, we send them
	RC522_SPI_Transfer((addr<<1)&0x7E);
 800240e:	79fb      	ldrb	r3, [r7, #7]
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	b2db      	uxtb	r3, r3
 8002414:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8002418:	b2db      	uxtb	r3, r3
 800241a:	4618      	mov	r0, r3
 800241c:	f7ff ffd4 	bl	80023c8 <RC522_SPI_Transfer>
	RC522_SPI_Transfer(val);
 8002420:	79bb      	ldrb	r3, [r7, #6]
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff ffd0 	bl	80023c8 <RC522_SPI_Transfer>

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8002428:	2201      	movs	r2, #1
 800242a:	2140      	movs	r1, #64	@ 0x40
 800242c:	4803      	ldr	r0, [pc, #12]	@ (800243c <Write_MFRC522+0x48>)
 800242e:	f002 faed 	bl	8004a0c <HAL_GPIO_WritePin>
}
 8002432:	bf00      	nop
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	40020000 	.word	0x40020000

08002440 <Read_MFRC522>:
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the module
 */
uchar Read_MFRC522(uchar addr)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	4603      	mov	r3, r0
 8002448:	71fb      	strb	r3, [r7, #7]
	uchar val;

	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 800244a:	2200      	movs	r2, #0
 800244c:	2140      	movs	r1, #64	@ 0x40
 800244e:	480f      	ldr	r0, [pc, #60]	@ (800248c <Read_MFRC522+0x4c>)
 8002450:	f002 fadc 	bl	8004a0c <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and set the MSb to indicate a read
	  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
	RC522_SPI_Transfer(((addr<<1)&0x7E) | 0x80);
 8002454:	79fb      	ldrb	r3, [r7, #7]
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	b25b      	sxtb	r3, r3
 800245a:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 800245e:	b25b      	sxtb	r3, r3
 8002460:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002464:	b25b      	sxtb	r3, r3
 8002466:	b2db      	uxtb	r3, r3
 8002468:	4618      	mov	r0, r3
 800246a:	f7ff ffad 	bl	80023c8 <RC522_SPI_Transfer>
	val = RC522_SPI_Transfer(0x00);
 800246e:	2000      	movs	r0, #0
 8002470:	f7ff ffaa 	bl	80023c8 <RC522_SPI_Transfer>
 8002474:	4603      	mov	r3, r0
 8002476:	73fb      	strb	r3, [r7, #15]

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8002478:	2201      	movs	r2, #1
 800247a:	2140      	movs	r1, #64	@ 0x40
 800247c:	4803      	ldr	r0, [pc, #12]	@ (800248c <Read_MFRC522+0x4c>)
 800247e:	f002 fac5 	bl	8004a0c <HAL_GPIO_WritePin>

	return val;
 8002482:	7bfb      	ldrb	r3, [r7, #15]

}
 8002484:	4618      	mov	r0, r3
 8002486:	3710      	adds	r7, #16
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	40020000 	.word	0x40020000

08002490 <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(uchar reg, uchar mask)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	4603      	mov	r3, r0
 8002498:	460a      	mov	r2, r1
 800249a:	71fb      	strb	r3, [r7, #7]
 800249c:	4613      	mov	r3, r2
 800249e:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 80024a0:	79fb      	ldrb	r3, [r7, #7]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7ff ffcc 	bl	8002440 <Read_MFRC522>
 80024a8:	4603      	mov	r3, r0
 80024aa:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 80024ac:	7bfa      	ldrb	r2, [r7, #15]
 80024ae:	79bb      	ldrb	r3, [r7, #6]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	b2da      	uxtb	r2, r3
 80024b4:	79fb      	ldrb	r3, [r7, #7]
 80024b6:	4611      	mov	r1, r2
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7ff ff9b 	bl	80023f4 <Write_MFRC522>
}
 80024be:	bf00      	nop
 80024c0:	3710      	adds	r7, #16
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(uchar reg, uchar mask)
{
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b084      	sub	sp, #16
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	4603      	mov	r3, r0
 80024ce:	460a      	mov	r2, r1
 80024d0:	71fb      	strb	r3, [r7, #7]
 80024d2:	4613      	mov	r3, r2
 80024d4:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 80024d6:	79fb      	ldrb	r3, [r7, #7]
 80024d8:	4618      	mov	r0, r3
 80024da:	f7ff ffb1 	bl	8002440 <Read_MFRC522>
 80024de:	4603      	mov	r3, r0
 80024e0:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 80024e2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80024e6:	43db      	mvns	r3, r3
 80024e8:	b25a      	sxtb	r2, r3
 80024ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024ee:	4013      	ands	r3, r2
 80024f0:	b25b      	sxtb	r3, r3
 80024f2:	b2da      	uxtb	r2, r3
 80024f4:	79fb      	ldrb	r3, [r7, #7]
 80024f6:	4611      	mov	r1, r2
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7ff ff7b 	bl	80023f4 <Write_MFRC522>
}
 80024fe:	bf00      	nop
 8002500:	3710      	adds	r7, #16
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	af00      	add	r7, sp, #0

	Read_MFRC522(TxControlReg);
 800250a:	2014      	movs	r0, #20
 800250c:	f7ff ff98 	bl	8002440 <Read_MFRC522>
	SetBitMask(TxControlReg, 0x03);
 8002510:	2103      	movs	r1, #3
 8002512:	2014      	movs	r0, #20
 8002514:	f7ff ffbc 	bl	8002490 <SetBitMask>
}
 8002518:	bf00      	nop
 800251a:	bd80      	pop	{r7, pc}

0800251c <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
    Write_MFRC522(CommandReg, PCD_RESETPHASE);
 8002520:	210f      	movs	r1, #15
 8002522:	2001      	movs	r0, #1
 8002524:	f7ff ff66 	bl	80023f4 <Write_MFRC522>
}
 8002528:	bf00      	nop
 800252a:	bd80      	pop	{r7, pc}

0800252c <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8002530:	2201      	movs	r2, #1
 8002532:	2140      	movs	r1, #64	@ 0x40
 8002534:	4812      	ldr	r0, [pc, #72]	@ (8002580 <MFRC522_Init+0x54>)
 8002536:	f002 fa69 	bl	8004a0c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MFRC522_RST_PORT,MFRC522_RST_PIN,GPIO_PIN_SET);
 800253a:	2201      	movs	r2, #1
 800253c:	2101      	movs	r1, #1
 800253e:	4811      	ldr	r0, [pc, #68]	@ (8002584 <MFRC522_Init+0x58>)
 8002540:	f002 fa64 	bl	8004a0c <HAL_GPIO_WritePin>
	MFRC522_Reset();
 8002544:	f7ff ffea 	bl	800251c <MFRC522_Reset>

	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_MFRC522(TModeReg, 0x8D);		//Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 8002548:	218d      	movs	r1, #141	@ 0x8d
 800254a:	202a      	movs	r0, #42	@ 0x2a
 800254c:	f7ff ff52 	bl	80023f4 <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E);	//TModeReg[3..0] + TPrescalerReg
 8002550:	213e      	movs	r1, #62	@ 0x3e
 8002552:	202b      	movs	r0, #43	@ 0x2b
 8002554:	f7ff ff4e 	bl	80023f4 <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);
 8002558:	211e      	movs	r1, #30
 800255a:	202d      	movs	r0, #45	@ 0x2d
 800255c:	f7ff ff4a 	bl	80023f4 <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 8002560:	2100      	movs	r1, #0
 8002562:	202c      	movs	r0, #44	@ 0x2c
 8002564:	f7ff ff46 	bl	80023f4 <Write_MFRC522>

	Write_MFRC522(TxAutoReg, 0x40);		// force 100% ASK modulation
 8002568:	2140      	movs	r1, #64	@ 0x40
 800256a:	2015      	movs	r0, #21
 800256c:	f7ff ff42 	bl	80023f4 <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);		// CRC Initial value 0x6363
 8002570:	213d      	movs	r1, #61	@ 0x3d
 8002572:	2011      	movs	r0, #17
 8002574:	f7ff ff3e 	bl	80023f4 <Write_MFRC522>

	AntennaOn();
 8002578:	f7ff ffc5 	bl	8002506 <AntennaOn>
}
 800257c:	bf00      	nop
 800257e:	bd80      	pop	{r7, pc}
 8002580:	40020000 	.word	0x40020000
 8002584:	40020400 	.word	0x40020400

08002588 <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
uchar MFRC522_ToCard(uchar command, uchar *sendData, uchar sendLen, uchar *backData, uint *backLen)
{
 8002588:	b590      	push	{r4, r7, lr}
 800258a:	b089      	sub	sp, #36	@ 0x24
 800258c:	af00      	add	r7, sp, #0
 800258e:	60b9      	str	r1, [r7, #8]
 8002590:	607b      	str	r3, [r7, #4]
 8002592:	4603      	mov	r3, r0
 8002594:	73fb      	strb	r3, [r7, #15]
 8002596:	4613      	mov	r3, r2
 8002598:	73bb      	strb	r3, [r7, #14]
    uchar status = MI_ERR;
 800259a:	2302      	movs	r3, #2
 800259c:	77fb      	strb	r3, [r7, #31]
    uchar irqEn = 0x00;
 800259e:	2300      	movs	r3, #0
 80025a0:	77bb      	strb	r3, [r7, #30]
    uchar waitIRq = 0x00;
 80025a2:	2300      	movs	r3, #0
 80025a4:	777b      	strb	r3, [r7, #29]
    uchar lastBits;
    uchar n;
    uint i;

    switch (command)
 80025a6:	7bfb      	ldrb	r3, [r7, #15]
 80025a8:	2b0c      	cmp	r3, #12
 80025aa:	d006      	beq.n	80025ba <MFRC522_ToCard+0x32>
 80025ac:	2b0e      	cmp	r3, #14
 80025ae:	d109      	bne.n	80025c4 <MFRC522_ToCard+0x3c>
    {
        case PCD_AUTHENT:		// Certification cards close
		{
			irqEn = 0x12;
 80025b0:	2312      	movs	r3, #18
 80025b2:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x10;
 80025b4:	2310      	movs	r3, #16
 80025b6:	777b      	strb	r3, [r7, #29]
			break;
 80025b8:	e005      	b.n	80025c6 <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE:	// Transmit FIFO data
		{
			irqEn = 0x77;
 80025ba:	2377      	movs	r3, #119	@ 0x77
 80025bc:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x30;
 80025be:	2330      	movs	r3, #48	@ 0x30
 80025c0:	777b      	strb	r3, [r7, #29]
			break;
 80025c2:	e000      	b.n	80025c6 <MFRC522_ToCard+0x3e>
		}
		default:
			break;
 80025c4:	bf00      	nop
    }

    Write_MFRC522(CommIEnReg, irqEn|0x80);	// Interrupt request
 80025c6:	7fbb      	ldrb	r3, [r7, #30]
 80025c8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	4619      	mov	r1, r3
 80025d0:	2002      	movs	r0, #2
 80025d2:	f7ff ff0f 	bl	80023f4 <Write_MFRC522>
    ClearBitMask(CommIrqReg, 0x80);			// Clear all interrupt request bit
 80025d6:	2180      	movs	r1, #128	@ 0x80
 80025d8:	2004      	movs	r0, #4
 80025da:	f7ff ff74 	bl	80024c6 <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);			// FlushBuffer=1, FIFO Initialization
 80025de:	2180      	movs	r1, #128	@ 0x80
 80025e0:	200a      	movs	r0, #10
 80025e2:	f7ff ff55 	bl	8002490 <SetBitMask>

	Write_MFRC522(CommandReg, PCD_IDLE);	// NO action; Cancel the current command
 80025e6:	2100      	movs	r1, #0
 80025e8:	2001      	movs	r0, #1
 80025ea:	f7ff ff03 	bl	80023f4 <Write_MFRC522>

	// Writing data to the FIFO
    for (i=0; i<sendLen; i++)
 80025ee:	2300      	movs	r3, #0
 80025f0:	61bb      	str	r3, [r7, #24]
 80025f2:	e00a      	b.n	800260a <MFRC522_ToCard+0x82>
    {
		Write_MFRC522(FIFODataReg, sendData[i]);
 80025f4:	68ba      	ldr	r2, [r7, #8]
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	4413      	add	r3, r2
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	4619      	mov	r1, r3
 80025fe:	2009      	movs	r0, #9
 8002600:	f7ff fef8 	bl	80023f4 <Write_MFRC522>
    for (i=0; i<sendLen; i++)
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	3301      	adds	r3, #1
 8002608:	61bb      	str	r3, [r7, #24]
 800260a:	7bbb      	ldrb	r3, [r7, #14]
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	429a      	cmp	r2, r3
 8002610:	d3f0      	bcc.n	80025f4 <MFRC522_ToCard+0x6c>
	}

    // Execute the command
	Write_MFRC522(CommandReg, command);
 8002612:	7bfb      	ldrb	r3, [r7, #15]
 8002614:	4619      	mov	r1, r3
 8002616:	2001      	movs	r0, #1
 8002618:	f7ff feec 	bl	80023f4 <Write_MFRC522>
    if (command == PCD_TRANSCEIVE)
 800261c:	7bfb      	ldrb	r3, [r7, #15]
 800261e:	2b0c      	cmp	r3, #12
 8002620:	d103      	bne.n	800262a <MFRC522_ToCard+0xa2>
    {
		SetBitMask(BitFramingReg, 0x80);		// StartSend=1,transmission of data starts
 8002622:	2180      	movs	r1, #128	@ 0x80
 8002624:	200d      	movs	r0, #13
 8002626:	f7ff ff33 	bl	8002490 <SetBitMask>
	}

    // Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 800262a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800262e:	61bb      	str	r3, [r7, #24]
    do
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = Read_MFRC522(CommIrqReg);
 8002630:	2004      	movs	r0, #4
 8002632:	f7ff ff05 	bl	8002440 <Read_MFRC522>
 8002636:	4603      	mov	r3, r0
 8002638:	773b      	strb	r3, [r7, #28]
        i--;
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	3b01      	subs	r3, #1
 800263e:	61bb      	str	r3, [r7, #24]
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d00a      	beq.n	800265c <MFRC522_ToCard+0xd4>
 8002646:	7f3b      	ldrb	r3, [r7, #28]
 8002648:	f003 0301 	and.w	r3, r3, #1
 800264c:	2b00      	cmp	r3, #0
 800264e:	d105      	bne.n	800265c <MFRC522_ToCard+0xd4>
 8002650:	7f3a      	ldrb	r2, [r7, #28]
 8002652:	7f7b      	ldrb	r3, [r7, #29]
 8002654:	4013      	ands	r3, r2
 8002656:	b2db      	uxtb	r3, r3
 8002658:	2b00      	cmp	r3, #0
 800265a:	d0e9      	beq.n	8002630 <MFRC522_ToCard+0xa8>

    ClearBitMask(BitFramingReg, 0x80);			//StartSend=0
 800265c:	2180      	movs	r1, #128	@ 0x80
 800265e:	200d      	movs	r0, #13
 8002660:	f7ff ff31 	bl	80024c6 <ClearBitMask>

    if (i != 0)
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d052      	beq.n	8002710 <MFRC522_ToCard+0x188>
    {
        if(!(Read_MFRC522(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 800266a:	2006      	movs	r0, #6
 800266c:	f7ff fee8 	bl	8002440 <Read_MFRC522>
 8002670:	4603      	mov	r3, r0
 8002672:	f003 031b 	and.w	r3, r3, #27
 8002676:	2b00      	cmp	r3, #0
 8002678:	d148      	bne.n	800270c <MFRC522_ToCard+0x184>
        {
            status = MI_OK;
 800267a:	2300      	movs	r3, #0
 800267c:	77fb      	strb	r3, [r7, #31]
            if (n & irqEn & 0x01)
 800267e:	7f3a      	ldrb	r2, [r7, #28]
 8002680:	7fbb      	ldrb	r3, [r7, #30]
 8002682:	4013      	ands	r3, r2
 8002684:	b2db      	uxtb	r3, r3
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <MFRC522_ToCard+0x10a>
            {
				status = MI_NOTAGERR;
 800268e:	2301      	movs	r3, #1
 8002690:	77fb      	strb	r3, [r7, #31]
			}

            if (command == PCD_TRANSCEIVE)
 8002692:	7bfb      	ldrb	r3, [r7, #15]
 8002694:	2b0c      	cmp	r3, #12
 8002696:	d13b      	bne.n	8002710 <MFRC522_ToCard+0x188>
            {
               	n = Read_MFRC522(FIFOLevelReg);
 8002698:	200a      	movs	r0, #10
 800269a:	f7ff fed1 	bl	8002440 <Read_MFRC522>
 800269e:	4603      	mov	r3, r0
 80026a0:	773b      	strb	r3, [r7, #28]
              	lastBits = Read_MFRC522(ControlReg) & 0x07;
 80026a2:	200c      	movs	r0, #12
 80026a4:	f7ff fecc 	bl	8002440 <Read_MFRC522>
 80026a8:	4603      	mov	r3, r0
 80026aa:	f003 0307 	and.w	r3, r3, #7
 80026ae:	75fb      	strb	r3, [r7, #23]
                if (lastBits)
 80026b0:	7dfb      	ldrb	r3, [r7, #23]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d008      	beq.n	80026c8 <MFRC522_ToCard+0x140>
                {
					*backLen = (n-1)*8 + lastBits;
 80026b6:	7f3b      	ldrb	r3, [r7, #28]
 80026b8:	3b01      	subs	r3, #1
 80026ba:	00da      	lsls	r2, r3, #3
 80026bc:	7dfb      	ldrb	r3, [r7, #23]
 80026be:	4413      	add	r3, r2
 80026c0:	461a      	mov	r2, r3
 80026c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026c4:	601a      	str	r2, [r3, #0]
 80026c6:	e004      	b.n	80026d2 <MFRC522_ToCard+0x14a>
				}
                else
                {
					*backLen = n*8;
 80026c8:	7f3b      	ldrb	r3, [r7, #28]
 80026ca:	00db      	lsls	r3, r3, #3
 80026cc:	461a      	mov	r2, r3
 80026ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026d0:	601a      	str	r2, [r3, #0]
				}

                if (n == 0)
 80026d2:	7f3b      	ldrb	r3, [r7, #28]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d101      	bne.n	80026dc <MFRC522_ToCard+0x154>
                {
					n = 1;
 80026d8:	2301      	movs	r3, #1
 80026da:	773b      	strb	r3, [r7, #28]
				}
                if (n > MAX_LEN)
 80026dc:	7f3b      	ldrb	r3, [r7, #28]
 80026de:	2b10      	cmp	r3, #16
 80026e0:	d901      	bls.n	80026e6 <MFRC522_ToCard+0x15e>
                {
					n = MAX_LEN;
 80026e2:	2310      	movs	r3, #16
 80026e4:	773b      	strb	r3, [r7, #28]
				}

                // Reading the received data in FIFO
                for (i=0; i<n; i++)
 80026e6:	2300      	movs	r3, #0
 80026e8:	61bb      	str	r3, [r7, #24]
 80026ea:	e00a      	b.n	8002702 <MFRC522_ToCard+0x17a>
                {
					backData[i] = Read_MFRC522(FIFODataReg);
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	18d4      	adds	r4, r2, r3
 80026f2:	2009      	movs	r0, #9
 80026f4:	f7ff fea4 	bl	8002440 <Read_MFRC522>
 80026f8:	4603      	mov	r3, r0
 80026fa:	7023      	strb	r3, [r4, #0]
                for (i=0; i<n; i++)
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	3301      	adds	r3, #1
 8002700:	61bb      	str	r3, [r7, #24]
 8002702:	7f3b      	ldrb	r3, [r7, #28]
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	429a      	cmp	r2, r3
 8002708:	d3f0      	bcc.n	80026ec <MFRC522_ToCard+0x164>
 800270a:	e001      	b.n	8002710 <MFRC522_ToCard+0x188>
				}
            }
        }
        else
        {
			status = MI_ERR;
 800270c:	2302      	movs	r3, #2
 800270e:	77fb      	strb	r3, [r7, #31]
    }

    //SetBitMask(ControlReg,0x80);           //timer stops
    //Write_MFRC522(CommandReg, PCD_IDLE);

    return status;
 8002710:	7ffb      	ldrb	r3, [r7, #31]
}
 8002712:	4618      	mov	r0, r3
 8002714:	3724      	adds	r7, #36	@ 0x24
 8002716:	46bd      	mov	sp, r7
 8002718:	bd90      	pop	{r4, r7, pc}

0800271a <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Request(uchar reqMode, uchar *TagType)
{
 800271a:	b580      	push	{r7, lr}
 800271c:	b086      	sub	sp, #24
 800271e:	af02      	add	r7, sp, #8
 8002720:	4603      	mov	r3, r0
 8002722:	6039      	str	r1, [r7, #0]
 8002724:	71fb      	strb	r3, [r7, #7]
	uchar status;
	uint backBits;			 // The received data bits

	Write_MFRC522(BitFramingReg, 0x07);		//TxLastBists = BitFramingReg[2..0]
 8002726:	2107      	movs	r1, #7
 8002728:	200d      	movs	r0, #13
 800272a:	f7ff fe63 	bl	80023f4 <Write_MFRC522>

	TagType[0] = reqMode;
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	79fa      	ldrb	r2, [r7, #7]
 8002732:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8002734:	f107 0308 	add.w	r3, r7, #8
 8002738:	9300      	str	r3, [sp, #0]
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	2201      	movs	r2, #1
 800273e:	6839      	ldr	r1, [r7, #0]
 8002740:	200c      	movs	r0, #12
 8002742:	f7ff ff21 	bl	8002588 <MFRC522_ToCard>
 8002746:	4603      	mov	r3, r0
 8002748:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (backBits != 0x10))
 800274a:	7bfb      	ldrb	r3, [r7, #15]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d102      	bne.n	8002756 <MFRC522_Request+0x3c>
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	2b10      	cmp	r3, #16
 8002754:	d001      	beq.n	800275a <MFRC522_Request+0x40>
	{
		status = MI_ERR;
 8002756:	2302      	movs	r3, #2
 8002758:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 800275a:	7bfb      	ldrb	r3, [r7, #15]
}
 800275c:	4618      	mov	r0, r3
 800275e:	3710      	adds	r7, #16
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}

08002764 <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Anticoll(uchar *serNum)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b086      	sub	sp, #24
 8002768:	af02      	add	r7, sp, #8
 800276a:	6078      	str	r0, [r7, #4]
    uchar status;
    uchar i;
	uchar serNumCheck=0;
 800276c:	2300      	movs	r3, #0
 800276e:	737b      	strb	r3, [r7, #13]
    uint unLen;

	Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8002770:	2100      	movs	r1, #0
 8002772:	200d      	movs	r0, #13
 8002774:	f7ff fe3e 	bl	80023f4 <Write_MFRC522>

    serNum[0] = PICC_ANTICOLL;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2293      	movs	r2, #147	@ 0x93
 800277c:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	3301      	adds	r3, #1
 8002782:	2220      	movs	r2, #32
 8002784:	701a      	strb	r2, [r3, #0]
    status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8002786:	f107 0308 	add.w	r3, r7, #8
 800278a:	9300      	str	r3, [sp, #0]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2202      	movs	r2, #2
 8002790:	6879      	ldr	r1, [r7, #4]
 8002792:	200c      	movs	r0, #12
 8002794:	f7ff fef8 	bl	8002588 <MFRC522_ToCard>
 8002798:	4603      	mov	r3, r0
 800279a:	73fb      	strb	r3, [r7, #15]

    if (status == MI_OK)
 800279c:	7bfb      	ldrb	r3, [r7, #15]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d118      	bne.n	80027d4 <MFRC522_Anticoll+0x70>
	{
    	 //Check card serial number
		for (i=0; i<4; i++)
 80027a2:	2300      	movs	r3, #0
 80027a4:	73bb      	strb	r3, [r7, #14]
 80027a6:	e009      	b.n	80027bc <MFRC522_Anticoll+0x58>
		{
		 	serNumCheck ^= serNum[i];
 80027a8:	7bbb      	ldrb	r3, [r7, #14]
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	4413      	add	r3, r2
 80027ae:	781a      	ldrb	r2, [r3, #0]
 80027b0:	7b7b      	ldrb	r3, [r7, #13]
 80027b2:	4053      	eors	r3, r2
 80027b4:	737b      	strb	r3, [r7, #13]
		for (i=0; i<4; i++)
 80027b6:	7bbb      	ldrb	r3, [r7, #14]
 80027b8:	3301      	adds	r3, #1
 80027ba:	73bb      	strb	r3, [r7, #14]
 80027bc:	7bbb      	ldrb	r3, [r7, #14]
 80027be:	2b03      	cmp	r3, #3
 80027c0:	d9f2      	bls.n	80027a8 <MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i])
 80027c2:	7bbb      	ldrb	r3, [r7, #14]
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	4413      	add	r3, r2
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	7b7a      	ldrb	r2, [r7, #13]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d001      	beq.n	80027d4 <MFRC522_Anticoll+0x70>
		{
			status = MI_ERR;
 80027d0:	2302      	movs	r3, #2
 80027d2:	73fb      	strb	r3, [r7, #15]
		}
    }

    return status;
 80027d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3710      	adds	r7, #16
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
	...

080027e0 <scan_motor_up>:

extern int motor_status;
extern osThreadId motorTaskHandle;
extern osThreadId rfidExecuteTaskHandle;

void scan_motor_up(){
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
	if(limit_switch_up){
 80027e4:	4b0d      	ldr	r3, [pc, #52]	@ (800281c <scan_motor_up+0x3c>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d00c      	beq.n	8002806 <scan_motor_up+0x26>
		TIM2->CCR4 = 0;
 80027ec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80027f0:	2200      	movs	r2, #0
 80027f2:	641a      	str	r2, [r3, #64]	@ 0x40
		motor_status = 1;
 80027f4:	4b0a      	ldr	r3, [pc, #40]	@ (8002820 <scan_motor_up+0x40>)
 80027f6:	2201      	movs	r2, #1
 80027f8:	601a      	str	r2, [r3, #0]
		limit_switch_up = 0;
 80027fa:	4b08      	ldr	r3, [pc, #32]	@ (800281c <scan_motor_up+0x3c>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	601a      	str	r2, [r3, #0]
		Publisher_state();
 8002800:	f001 f9f6 	bl	8003bf0 <Publisher_state>
	}else{
		change_motor_direction(1);
		TIM2->CCR4 = 400;
	}
}
 8002804:	e007      	b.n	8002816 <scan_motor_up+0x36>
		change_motor_direction(1);
 8002806:	2001      	movs	r0, #1
 8002808:	f000 f82e 	bl	8002868 <change_motor_direction>
		TIM2->CCR4 = 400;
 800280c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002810:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8002814:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8002816:	bf00      	nop
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	20007934 	.word	0x20007934
 8002820:	200046e4 	.word	0x200046e4

08002824 <scan_motor_down>:

void scan_motor_down(){
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
	if(limit_switch_down){
 8002828:	4b0d      	ldr	r3, [pc, #52]	@ (8002860 <scan_motor_down+0x3c>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d00c      	beq.n	800284a <scan_motor_down+0x26>
		TIM2->CCR4 = 0;
 8002830:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002834:	2200      	movs	r2, #0
 8002836:	641a      	str	r2, [r3, #64]	@ 0x40
		motor_status = 0;
 8002838:	4b0a      	ldr	r3, [pc, #40]	@ (8002864 <scan_motor_down+0x40>)
 800283a:	2200      	movs	r2, #0
 800283c:	601a      	str	r2, [r3, #0]
		limit_switch_down = 0;
 800283e:	4b08      	ldr	r3, [pc, #32]	@ (8002860 <scan_motor_down+0x3c>)
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]
		Publisher_state();
 8002844:	f001 f9d4 	bl	8003bf0 <Publisher_state>
	}else{
		change_motor_direction(0);
		TIM2->CCR4 = 400;
	}
}
 8002848:	e007      	b.n	800285a <scan_motor_down+0x36>
		change_motor_direction(0);
 800284a:	2000      	movs	r0, #0
 800284c:	f000 f80c 	bl	8002868 <change_motor_direction>
		TIM2->CCR4 = 400;
 8002850:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002854:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8002858:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800285a:	bf00      	nop
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	20007938 	.word	0x20007938
 8002864:	200046e4 	.word	0x200046e4

08002868 <change_motor_direction>:

/* 1:반시계 0:시계*/
void change_motor_direction(int direction){
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
	if(direction == 1){
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2b01      	cmp	r3, #1
 8002874:	d10c      	bne.n	8002890 <change_motor_direction+0x28>
		HAL_GPIO_WritePin(Direction0_GPIO_Port, Direction0_Pin, GPIO_PIN_SET);
 8002876:	2201      	movs	r2, #1
 8002878:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800287c:	480e      	ldr	r0, [pc, #56]	@ (80028b8 <change_motor_direction+0x50>)
 800287e:	f002 f8c5 	bl	8004a0c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Direction1_GPIO_Port, Direction1_Pin, GPIO_PIN_RESET);
 8002882:	2200      	movs	r2, #0
 8002884:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002888:	480b      	ldr	r0, [pc, #44]	@ (80028b8 <change_motor_direction+0x50>)
 800288a:	f002 f8bf 	bl	8004a0c <HAL_GPIO_WritePin>
	}else if(direction == 0){
		HAL_GPIO_WritePin(Direction0_GPIO_Port, Direction0_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(Direction1_GPIO_Port, Direction1_Pin, GPIO_PIN_SET);
	}
}
 800288e:	e00e      	b.n	80028ae <change_motor_direction+0x46>
	}else if(direction == 0){
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d10b      	bne.n	80028ae <change_motor_direction+0x46>
		HAL_GPIO_WritePin(Direction0_GPIO_Port, Direction0_Pin, GPIO_PIN_RESET);
 8002896:	2200      	movs	r2, #0
 8002898:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800289c:	4806      	ldr	r0, [pc, #24]	@ (80028b8 <change_motor_direction+0x50>)
 800289e:	f002 f8b5 	bl	8004a0c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Direction1_GPIO_Port, Direction1_Pin, GPIO_PIN_SET);
 80028a2:	2201      	movs	r2, #1
 80028a4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80028a8:	4803      	ldr	r0, [pc, #12]	@ (80028b8 <change_motor_direction+0x50>)
 80028aa:	f002 f8af 	bl	8004a0c <HAL_GPIO_WritePin>
}
 80028ae:	bf00      	nop
 80028b0:	3708      	adds	r7, #8
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	40020800 	.word	0x40020800

080028bc <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80028c0:	4b17      	ldr	r3, [pc, #92]	@ (8002920 <MX_SPI2_Init+0x64>)
 80028c2:	4a18      	ldr	r2, [pc, #96]	@ (8002924 <MX_SPI2_Init+0x68>)
 80028c4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80028c6:	4b16      	ldr	r3, [pc, #88]	@ (8002920 <MX_SPI2_Init+0x64>)
 80028c8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80028cc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80028ce:	4b14      	ldr	r3, [pc, #80]	@ (8002920 <MX_SPI2_Init+0x64>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80028d4:	4b12      	ldr	r3, [pc, #72]	@ (8002920 <MX_SPI2_Init+0x64>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80028da:	4b11      	ldr	r3, [pc, #68]	@ (8002920 <MX_SPI2_Init+0x64>)
 80028dc:	2200      	movs	r2, #0
 80028de:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80028e0:	4b0f      	ldr	r3, [pc, #60]	@ (8002920 <MX_SPI2_Init+0x64>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80028e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002920 <MX_SPI2_Init+0x64>)
 80028e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028ec:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80028ee:	4b0c      	ldr	r3, [pc, #48]	@ (8002920 <MX_SPI2_Init+0x64>)
 80028f0:	2210      	movs	r2, #16
 80028f2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80028f4:	4b0a      	ldr	r3, [pc, #40]	@ (8002920 <MX_SPI2_Init+0x64>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80028fa:	4b09      	ldr	r3, [pc, #36]	@ (8002920 <MX_SPI2_Init+0x64>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002900:	4b07      	ldr	r3, [pc, #28]	@ (8002920 <MX_SPI2_Init+0x64>)
 8002902:	2200      	movs	r2, #0
 8002904:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002906:	4b06      	ldr	r3, [pc, #24]	@ (8002920 <MX_SPI2_Init+0x64>)
 8002908:	220a      	movs	r2, #10
 800290a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800290c:	4804      	ldr	r0, [pc, #16]	@ (8002920 <MX_SPI2_Init+0x64>)
 800290e:	f002 ff19 	bl	8005744 <HAL_SPI_Init>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d001      	beq.n	800291c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002918:	f7ff fbec 	bl	80020f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800291c:	bf00      	nop
 800291e:	bd80      	pop	{r7, pc}
 8002920:	2000793c 	.word	0x2000793c
 8002924:	40003800 	.word	0x40003800

08002928 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b08a      	sub	sp, #40	@ 0x28
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002930:	f107 0314 	add.w	r3, r7, #20
 8002934:	2200      	movs	r2, #0
 8002936:	601a      	str	r2, [r3, #0]
 8002938:	605a      	str	r2, [r3, #4]
 800293a:	609a      	str	r2, [r3, #8]
 800293c:	60da      	str	r2, [r3, #12]
 800293e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a34      	ldr	r2, [pc, #208]	@ (8002a18 <HAL_SPI_MspInit+0xf0>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d162      	bne.n	8002a10 <HAL_SPI_MspInit+0xe8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800294a:	2300      	movs	r3, #0
 800294c:	613b      	str	r3, [r7, #16]
 800294e:	4b33      	ldr	r3, [pc, #204]	@ (8002a1c <HAL_SPI_MspInit+0xf4>)
 8002950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002952:	4a32      	ldr	r2, [pc, #200]	@ (8002a1c <HAL_SPI_MspInit+0xf4>)
 8002954:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002958:	6413      	str	r3, [r2, #64]	@ 0x40
 800295a:	4b30      	ldr	r3, [pc, #192]	@ (8002a1c <HAL_SPI_MspInit+0xf4>)
 800295c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800295e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002962:	613b      	str	r3, [r7, #16]
 8002964:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002966:	2300      	movs	r3, #0
 8002968:	60fb      	str	r3, [r7, #12]
 800296a:	4b2c      	ldr	r3, [pc, #176]	@ (8002a1c <HAL_SPI_MspInit+0xf4>)
 800296c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800296e:	4a2b      	ldr	r2, [pc, #172]	@ (8002a1c <HAL_SPI_MspInit+0xf4>)
 8002970:	f043 0304 	orr.w	r3, r3, #4
 8002974:	6313      	str	r3, [r2, #48]	@ 0x30
 8002976:	4b29      	ldr	r3, [pc, #164]	@ (8002a1c <HAL_SPI_MspInit+0xf4>)
 8002978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800297a:	f003 0304 	and.w	r3, r3, #4
 800297e:	60fb      	str	r3, [r7, #12]
 8002980:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002982:	2300      	movs	r3, #0
 8002984:	60bb      	str	r3, [r7, #8]
 8002986:	4b25      	ldr	r3, [pc, #148]	@ (8002a1c <HAL_SPI_MspInit+0xf4>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800298a:	4a24      	ldr	r2, [pc, #144]	@ (8002a1c <HAL_SPI_MspInit+0xf4>)
 800298c:	f043 0302 	orr.w	r3, r3, #2
 8002990:	6313      	str	r3, [r2, #48]	@ 0x30
 8002992:	4b22      	ldr	r3, [pc, #136]	@ (8002a1c <HAL_SPI_MspInit+0xf4>)
 8002994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	60bb      	str	r3, [r7, #8]
 800299c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800299e:	2302      	movs	r3, #2
 80029a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a2:	2302      	movs	r3, #2
 80029a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a6:	2300      	movs	r3, #0
 80029a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029aa:	2303      	movs	r3, #3
 80029ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 80029ae:	2307      	movs	r3, #7
 80029b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029b2:	f107 0314 	add.w	r3, r7, #20
 80029b6:	4619      	mov	r1, r3
 80029b8:	4819      	ldr	r0, [pc, #100]	@ (8002a20 <HAL_SPI_MspInit+0xf8>)
 80029ba:	f001 fe93 	bl	80046e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80029be:	2304      	movs	r3, #4
 80029c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c2:	2302      	movs	r3, #2
 80029c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c6:	2300      	movs	r3, #0
 80029c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ca:	2303      	movs	r3, #3
 80029cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80029ce:	2305      	movs	r3, #5
 80029d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029d2:	f107 0314 	add.w	r3, r7, #20
 80029d6:	4619      	mov	r1, r3
 80029d8:	4811      	ldr	r0, [pc, #68]	@ (8002a20 <HAL_SPI_MspInit+0xf8>)
 80029da:	f001 fe83 	bl	80046e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80029de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80029e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e4:	2302      	movs	r3, #2
 80029e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e8:	2300      	movs	r3, #0
 80029ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ec:	2303      	movs	r3, #3
 80029ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80029f0:	2305      	movs	r3, #5
 80029f2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029f4:	f107 0314 	add.w	r3, r7, #20
 80029f8:	4619      	mov	r1, r3
 80029fa:	480a      	ldr	r0, [pc, #40]	@ (8002a24 <HAL_SPI_MspInit+0xfc>)
 80029fc:	f001 fe72 	bl	80046e4 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8002a00:	2200      	movs	r2, #0
 8002a02:	2105      	movs	r1, #5
 8002a04:	2024      	movs	r0, #36	@ 0x24
 8002a06:	f001 fa41 	bl	8003e8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002a0a:	2024      	movs	r0, #36	@ 0x24
 8002a0c:	f001 fa5a 	bl	8003ec4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002a10:	bf00      	nop
 8002a12:	3728      	adds	r7, #40	@ 0x28
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	40003800 	.word	0x40003800
 8002a1c:	40023800 	.word	0x40023800
 8002a20:	40020800 	.word	0x40020800
 8002a24:	40020400 	.word	0x40020400

08002a28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a2e:	2300      	movs	r3, #0
 8002a30:	607b      	str	r3, [r7, #4]
 8002a32:	4b12      	ldr	r3, [pc, #72]	@ (8002a7c <HAL_MspInit+0x54>)
 8002a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a36:	4a11      	ldr	r2, [pc, #68]	@ (8002a7c <HAL_MspInit+0x54>)
 8002a38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a3e:	4b0f      	ldr	r3, [pc, #60]	@ (8002a7c <HAL_MspInit+0x54>)
 8002a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a46:	607b      	str	r3, [r7, #4]
 8002a48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	603b      	str	r3, [r7, #0]
 8002a4e:	4b0b      	ldr	r3, [pc, #44]	@ (8002a7c <HAL_MspInit+0x54>)
 8002a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a52:	4a0a      	ldr	r2, [pc, #40]	@ (8002a7c <HAL_MspInit+0x54>)
 8002a54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a58:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a5a:	4b08      	ldr	r3, [pc, #32]	@ (8002a7c <HAL_MspInit+0x54>)
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a62:	603b      	str	r3, [r7, #0]
 8002a64:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002a66:	2200      	movs	r2, #0
 8002a68:	210f      	movs	r1, #15
 8002a6a:	f06f 0001 	mvn.w	r0, #1
 8002a6e:	f001 fa0d 	bl	8003e8c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a72:	bf00      	nop
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	40023800 	.word	0x40023800

08002a80 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b08e      	sub	sp, #56	@ 0x38
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8002a90:	2300      	movs	r3, #0
 8002a92:	60fb      	str	r3, [r7, #12]
 8002a94:	4b33      	ldr	r3, [pc, #204]	@ (8002b64 <HAL_InitTick+0xe4>)
 8002a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a98:	4a32      	ldr	r2, [pc, #200]	@ (8002b64 <HAL_InitTick+0xe4>)
 8002a9a:	f043 0304 	orr.w	r3, r3, #4
 8002a9e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002aa0:	4b30      	ldr	r3, [pc, #192]	@ (8002b64 <HAL_InitTick+0xe4>)
 8002aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa4:	f003 0304 	and.w	r3, r3, #4
 8002aa8:	60fb      	str	r3, [r7, #12]
 8002aaa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002aac:	f107 0210 	add.w	r2, r7, #16
 8002ab0:	f107 0314 	add.w	r3, r7, #20
 8002ab4:	4611      	mov	r1, r2
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f002 f944 	bl	8004d44 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002abc:	6a3b      	ldr	r3, [r7, #32]
 8002abe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002ac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d103      	bne.n	8002ace <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002ac6:	f002 f915 	bl	8004cf4 <HAL_RCC_GetPCLK1Freq>
 8002aca:	6378      	str	r0, [r7, #52]	@ 0x34
 8002acc:	e004      	b.n	8002ad8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002ace:	f002 f911 	bl	8004cf4 <HAL_RCC_GetPCLK1Freq>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002ad8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ada:	4a23      	ldr	r2, [pc, #140]	@ (8002b68 <HAL_InitTick+0xe8>)
 8002adc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae0:	0c9b      	lsrs	r3, r3, #18
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8002ae6:	4b21      	ldr	r3, [pc, #132]	@ (8002b6c <HAL_InitTick+0xec>)
 8002ae8:	4a21      	ldr	r2, [pc, #132]	@ (8002b70 <HAL_InitTick+0xf0>)
 8002aea:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8002aec:	4b1f      	ldr	r3, [pc, #124]	@ (8002b6c <HAL_InitTick+0xec>)
 8002aee:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002af2:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8002af4:	4a1d      	ldr	r2, [pc, #116]	@ (8002b6c <HAL_InitTick+0xec>)
 8002af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002af8:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8002afa:	4b1c      	ldr	r3, [pc, #112]	@ (8002b6c <HAL_InitTick+0xec>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b00:	4b1a      	ldr	r3, [pc, #104]	@ (8002b6c <HAL_InitTick+0xec>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b06:	4b19      	ldr	r3, [pc, #100]	@ (8002b6c <HAL_InitTick+0xec>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8002b0c:	4817      	ldr	r0, [pc, #92]	@ (8002b6c <HAL_InitTick+0xec>)
 8002b0e:	f003 fa41 	bl	8005f94 <HAL_TIM_Base_Init>
 8002b12:	4603      	mov	r3, r0
 8002b14:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002b18:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d11b      	bne.n	8002b58 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8002b20:	4812      	ldr	r0, [pc, #72]	@ (8002b6c <HAL_InitTick+0xec>)
 8002b22:	f003 fa91 	bl	8006048 <HAL_TIM_Base_Start_IT>
 8002b26:	4603      	mov	r3, r0
 8002b28:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002b2c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d111      	bne.n	8002b58 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002b34:	201e      	movs	r0, #30
 8002b36:	f001 f9c5 	bl	8003ec4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2b0f      	cmp	r3, #15
 8002b3e:	d808      	bhi.n	8002b52 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8002b40:	2200      	movs	r2, #0
 8002b42:	6879      	ldr	r1, [r7, #4]
 8002b44:	201e      	movs	r0, #30
 8002b46:	f001 f9a1 	bl	8003e8c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002b4a:	4a0a      	ldr	r2, [pc, #40]	@ (8002b74 <HAL_InitTick+0xf4>)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6013      	str	r3, [r2, #0]
 8002b50:	e002      	b.n	8002b58 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002b58:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3738      	adds	r7, #56	@ 0x38
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	40023800 	.word	0x40023800
 8002b68:	431bde83 	.word	0x431bde83
 8002b6c:	20007994 	.word	0x20007994
 8002b70:	40000800 	.word	0x40000800
 8002b74:	20000010 	.word	0x20000010

08002b78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002b7c:	bf00      	nop
 8002b7e:	e7fd      	b.n	8002b7c <NMI_Handler+0x4>

08002b80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b84:	bf00      	nop
 8002b86:	e7fd      	b.n	8002b84 <HardFault_Handler+0x4>

08002b88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b8c:	bf00      	nop
 8002b8e:	e7fd      	b.n	8002b8c <MemManage_Handler+0x4>

08002b90 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b94:	bf00      	nop
 8002b96:	e7fd      	b.n	8002b94 <BusFault_Handler+0x4>

08002b98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b9c:	bf00      	nop
 8002b9e:	e7fd      	b.n	8002b9c <UsageFault_Handler+0x4>

08002ba0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ba4:	bf00      	nop
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
	...

08002bb0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8002bb4:	4802      	ldr	r0, [pc, #8]	@ (8002bc0 <DMA1_Stream0_IRQHandler+0x10>)
 8002bb6:	f001 fb2b 	bl	8004210 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002bba:	bf00      	nop
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	20008850 	.word	0x20008850

08002bc4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002bc8:	4802      	ldr	r0, [pc, #8]	@ (8002bd4 <DMA1_Stream5_IRQHandler+0x10>)
 8002bca:	f001 fb21 	bl	8004210 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002bce:	bf00      	nop
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	20008910 	.word	0x20008910

08002bd8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002bdc:	4802      	ldr	r0, [pc, #8]	@ (8002be8 <TIM4_IRQHandler+0x10>)
 8002bde:	f003 fbbb 	bl	8006358 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002be2:	bf00      	nop
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	20007994 	.word	0x20007994

08002bec <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002bf0:	4802      	ldr	r0, [pc, #8]	@ (8002bfc <SPI2_IRQHandler+0x10>)
 8002bf2:	f002 ffe1 	bl	8005bb8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002bf6:	bf00      	nop
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	2000793c 	.word	0x2000793c

08002c00 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002c04:	4802      	ldr	r0, [pc, #8]	@ (8002c10 <USART1_IRQHandler+0x10>)
 8002c06:	f004 fa83 	bl	8007110 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002c0a:	bf00      	nop
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	20008730 	.word	0x20008730

08002c14 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002c18:	4802      	ldr	r0, [pc, #8]	@ (8002c24 <USART3_IRQHandler+0x10>)
 8002c1a:	f004 fa79 	bl	8007110 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002c1e:	bf00      	nop
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	200087c0 	.word	0x200087c0

08002c28 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Limit_switch_up_Pin);
 8002c2c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002c30:	f001 ff06 	bl	8004a40 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Limit_switch_down_Pin);
 8002c34:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002c38:	f001 ff02 	bl	8004a40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002c3c:	bf00      	nop
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8002c44:	4802      	ldr	r0, [pc, #8]	@ (8002c50 <DMA2_Stream1_IRQHandler+0x10>)
 8002c46:	f001 fae3 	bl	8004210 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002c4a:	bf00      	nop
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	20008970 	.word	0x20008970

08002c54 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002c58:	4802      	ldr	r0, [pc, #8]	@ (8002c64 <DMA2_Stream5_IRQHandler+0x10>)
 8002c5a:	f001 fad9 	bl	8004210 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8002c5e:	bf00      	nop
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	200088b0 	.word	0x200088b0

08002c68 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8002c6c:	4802      	ldr	r0, [pc, #8]	@ (8002c78 <DMA2_Stream6_IRQHandler+0x10>)
 8002c6e:	f001 facf 	bl	8004210 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8002c72:	bf00      	nop
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	200089d0 	.word	0x200089d0

08002c7c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002c80:	4802      	ldr	r0, [pc, #8]	@ (8002c8c <USART6_IRQHandler+0x10>)
 8002c82:	f004 fa45 	bl	8007110 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002c86:	bf00      	nop
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	20008808 	.word	0x20008808

08002c90 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0
  return 1;
 8002c94:	2301      	movs	r3, #1
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <_kill>:

int _kill(int pid, int sig)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002caa:	f015 f983 	bl	8017fb4 <__errno>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2216      	movs	r2, #22
 8002cb2:	601a      	str	r2, [r3, #0]
  return -1;
 8002cb4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3708      	adds	r7, #8
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <_exit>:

void _exit (int status)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002cc8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f7ff ffe7 	bl	8002ca0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002cd2:	bf00      	nop
 8002cd4:	e7fd      	b.n	8002cd2 <_exit+0x12>

08002cd6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b086      	sub	sp, #24
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	60f8      	str	r0, [r7, #12]
 8002cde:	60b9      	str	r1, [r7, #8]
 8002ce0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	617b      	str	r3, [r7, #20]
 8002ce6:	e00a      	b.n	8002cfe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002ce8:	f3af 8000 	nop.w
 8002cec:	4601      	mov	r1, r0
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	1c5a      	adds	r2, r3, #1
 8002cf2:	60ba      	str	r2, [r7, #8]
 8002cf4:	b2ca      	uxtb	r2, r1
 8002cf6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	617b      	str	r3, [r7, #20]
 8002cfe:	697a      	ldr	r2, [r7, #20]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	dbf0      	blt.n	8002ce8 <_read+0x12>
  }

  return len;
 8002d06:	687b      	ldr	r3, [r7, #4]
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3718      	adds	r7, #24
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b086      	sub	sp, #24
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	617b      	str	r3, [r7, #20]
 8002d20:	e009      	b.n	8002d36 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	1c5a      	adds	r2, r3, #1
 8002d26:	60ba      	str	r2, [r7, #8]
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	3301      	adds	r3, #1
 8002d34:	617b      	str	r3, [r7, #20]
 8002d36:	697a      	ldr	r2, [r7, #20]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	dbf1      	blt.n	8002d22 <_write+0x12>
  }
  return len;
 8002d3e:	687b      	ldr	r3, [r7, #4]
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3718      	adds	r7, #24
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <_close>:

int _close(int file)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002d50:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002d70:	605a      	str	r2, [r3, #4]
  return 0;
 8002d72:	2300      	movs	r3, #0
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <_isatty>:

int _isatty(int file)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002d88:	2301      	movs	r3, #1
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr

08002d96 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d96:	b480      	push	{r7}
 8002d98:	b085      	sub	sp, #20
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	60f8      	str	r0, [r7, #12]
 8002d9e:	60b9      	str	r1, [r7, #8]
 8002da0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3714      	adds	r7, #20
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b086      	sub	sp, #24
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002db8:	4a14      	ldr	r2, [pc, #80]	@ (8002e0c <_sbrk+0x5c>)
 8002dba:	4b15      	ldr	r3, [pc, #84]	@ (8002e10 <_sbrk+0x60>)
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002dc4:	4b13      	ldr	r3, [pc, #76]	@ (8002e14 <_sbrk+0x64>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d102      	bne.n	8002dd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002dcc:	4b11      	ldr	r3, [pc, #68]	@ (8002e14 <_sbrk+0x64>)
 8002dce:	4a12      	ldr	r2, [pc, #72]	@ (8002e18 <_sbrk+0x68>)
 8002dd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002dd2:	4b10      	ldr	r3, [pc, #64]	@ (8002e14 <_sbrk+0x64>)
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4413      	add	r3, r2
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d207      	bcs.n	8002df0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002de0:	f015 f8e8 	bl	8017fb4 <__errno>
 8002de4:	4603      	mov	r3, r0
 8002de6:	220c      	movs	r2, #12
 8002de8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002dea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002dee:	e009      	b.n	8002e04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002df0:	4b08      	ldr	r3, [pc, #32]	@ (8002e14 <_sbrk+0x64>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002df6:	4b07      	ldr	r3, [pc, #28]	@ (8002e14 <_sbrk+0x64>)
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	4a05      	ldr	r2, [pc, #20]	@ (8002e14 <_sbrk+0x64>)
 8002e00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e02:	68fb      	ldr	r3, [r7, #12]
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3718      	adds	r7, #24
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	20020000 	.word	0x20020000
 8002e10:	00000400 	.word	0x00000400
 8002e14:	200079e0 	.word	0x200079e0
 8002e18:	20011450 	.word	0x20011450

08002e1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e20:	4b06      	ldr	r3, [pc, #24]	@ (8002e3c <SystemInit+0x20>)
 8002e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e26:	4a05      	ldr	r2, [pc, #20]	@ (8002e3c <SystemInit+0x20>)
 8002e28:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002e2c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e30:	bf00      	nop
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	e000ed00 	.word	0xe000ed00

08002e40 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b08a      	sub	sp, #40	@ 0x28
 8002e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e46:	f107 0320 	add.w	r3, r7, #32
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	601a      	str	r2, [r3, #0]
 8002e4e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e50:	1d3b      	adds	r3, r7, #4
 8002e52:	2200      	movs	r2, #0
 8002e54:	601a      	str	r2, [r3, #0]
 8002e56:	605a      	str	r2, [r3, #4]
 8002e58:	609a      	str	r2, [r3, #8]
 8002e5a:	60da      	str	r2, [r3, #12]
 8002e5c:	611a      	str	r2, [r3, #16]
 8002e5e:	615a      	str	r2, [r3, #20]
 8002e60:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002e62:	4b22      	ldr	r3, [pc, #136]	@ (8002eec <MX_TIM2_Init+0xac>)
 8002e64:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002e68:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 8002e6a:	4b20      	ldr	r3, [pc, #128]	@ (8002eec <MX_TIM2_Init+0xac>)
 8002e6c:	2259      	movs	r2, #89	@ 0x59
 8002e6e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e70:	4b1e      	ldr	r3, [pc, #120]	@ (8002eec <MX_TIM2_Init+0xac>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8002e76:	4b1d      	ldr	r3, [pc, #116]	@ (8002eec <MX_TIM2_Init+0xac>)
 8002e78:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002e7c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e7e:	4b1b      	ldr	r3, [pc, #108]	@ (8002eec <MX_TIM2_Init+0xac>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e84:	4b19      	ldr	r3, [pc, #100]	@ (8002eec <MX_TIM2_Init+0xac>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002e8a:	4818      	ldr	r0, [pc, #96]	@ (8002eec <MX_TIM2_Init+0xac>)
 8002e8c:	f003 f94c 	bl	8006128 <HAL_TIM_PWM_Init>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8002e96:	f7ff f92d 	bl	80020f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002ea2:	f107 0320 	add.w	r3, r7, #32
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	4810      	ldr	r0, [pc, #64]	@ (8002eec <MX_TIM2_Init+0xac>)
 8002eaa:	f003 feb1 	bl	8006c10 <HAL_TIMEx_MasterConfigSynchronization>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d001      	beq.n	8002eb8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002eb4:	f7ff f91e 	bl	80020f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002eb8:	2360      	movs	r3, #96	@ 0x60
 8002eba:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002ec8:	1d3b      	adds	r3, r7, #4
 8002eca:	220c      	movs	r2, #12
 8002ecc:	4619      	mov	r1, r3
 8002ece:	4807      	ldr	r0, [pc, #28]	@ (8002eec <MX_TIM2_Init+0xac>)
 8002ed0:	f003 fb32 	bl	8006538 <HAL_TIM_PWM_ConfigChannel>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8002eda:	f7ff f90b 	bl	80020f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002ede:	4803      	ldr	r0, [pc, #12]	@ (8002eec <MX_TIM2_Init+0xac>)
 8002ee0:	f000 f826 	bl	8002f30 <HAL_TIM_MspPostInit>

}
 8002ee4:	bf00      	nop
 8002ee6:	3728      	adds	r7, #40	@ 0x28
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	200079e4 	.word	0x200079e4

08002ef0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b085      	sub	sp, #20
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f00:	d10d      	bne.n	8002f1e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f02:	2300      	movs	r3, #0
 8002f04:	60fb      	str	r3, [r7, #12]
 8002f06:	4b09      	ldr	r3, [pc, #36]	@ (8002f2c <HAL_TIM_PWM_MspInit+0x3c>)
 8002f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f0a:	4a08      	ldr	r2, [pc, #32]	@ (8002f2c <HAL_TIM_PWM_MspInit+0x3c>)
 8002f0c:	f043 0301 	orr.w	r3, r3, #1
 8002f10:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f12:	4b06      	ldr	r3, [pc, #24]	@ (8002f2c <HAL_TIM_PWM_MspInit+0x3c>)
 8002f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	60fb      	str	r3, [r7, #12]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002f1e:	bf00      	nop
 8002f20:	3714      	adds	r7, #20
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	40023800 	.word	0x40023800

08002f30 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b088      	sub	sp, #32
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f38:	f107 030c 	add.w	r3, r7, #12
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	601a      	str	r2, [r3, #0]
 8002f40:	605a      	str	r2, [r3, #4]
 8002f42:	609a      	str	r2, [r3, #8]
 8002f44:	60da      	str	r2, [r3, #12]
 8002f46:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f50:	d11d      	bne.n	8002f8e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f52:	2300      	movs	r3, #0
 8002f54:	60bb      	str	r3, [r7, #8]
 8002f56:	4b10      	ldr	r3, [pc, #64]	@ (8002f98 <HAL_TIM_MspPostInit+0x68>)
 8002f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f5a:	4a0f      	ldr	r2, [pc, #60]	@ (8002f98 <HAL_TIM_MspPostInit+0x68>)
 8002f5c:	f043 0302 	orr.w	r3, r3, #2
 8002f60:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f62:	4b0d      	ldr	r3, [pc, #52]	@ (8002f98 <HAL_TIM_MspPostInit+0x68>)
 8002f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	60bb      	str	r3, [r7, #8]
 8002f6c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB2     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002f6e:	2304      	movs	r3, #4
 8002f70:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f72:	2302      	movs	r3, #2
 8002f74:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f76:	2300      	movs	r3, #0
 8002f78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f82:	f107 030c 	add.w	r3, r7, #12
 8002f86:	4619      	mov	r1, r3
 8002f88:	4804      	ldr	r0, [pc, #16]	@ (8002f9c <HAL_TIM_MspPostInit+0x6c>)
 8002f8a:	f001 fbab 	bl	80046e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002f8e:	bf00      	nop
 8002f90:	3720      	adds	r7, #32
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	40023800 	.word	0x40023800
 8002f9c:	40020400 	.word	0x40020400

08002fa0 <uart_init>:

queue8_t uart_queue;
queue8_t uart5_queue;
queue8_t uart2_queue;

void uart_init(){
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&huart1, uart_queue.buf, QUEUE_BUF_MAX) ;
 8002fa4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002fa8:	490d      	ldr	r1, [pc, #52]	@ (8002fe0 <uart_init+0x40>)
 8002faa:	480e      	ldr	r0, [pc, #56]	@ (8002fe4 <uart_init+0x44>)
 8002fac:	f004 f80c 	bl	8006fc8 <HAL_UART_Receive_DMA>
	uart_queue.q_in_index = 0;
 8002fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8002fe0 <uart_init+0x40>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
	uart_queue.q_out_index = 0;
 8002fb8:	4b09      	ldr	r3, [pc, #36]	@ (8002fe0 <uart_init+0x40>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102

	HAL_UART_Receive_DMA(&huart5, uart5_queue.buf, QUEUE_BUF_MAX);
 8002fc0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002fc4:	4908      	ldr	r1, [pc, #32]	@ (8002fe8 <uart_init+0x48>)
 8002fc6:	4809      	ldr	r0, [pc, #36]	@ (8002fec <uart_init+0x4c>)
 8002fc8:	f003 fffe 	bl	8006fc8 <HAL_UART_Receive_DMA>
	uart5_queue.q_in_index = 0;
 8002fcc:	4b06      	ldr	r3, [pc, #24]	@ (8002fe8 <uart_init+0x48>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
	uart5_queue.q_out_index = 0;
 8002fd4:	4b04      	ldr	r3, [pc, #16]	@ (8002fe8 <uart_init+0x48>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
}
 8002fdc:	bf00      	nop
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	20007a2c 	.word	0x20007a2c
 8002fe4:	20008730 	.word	0x20008730
 8002fe8:	20007b30 	.word	0x20007b30
 8002fec:	200086e8 	.word	0x200086e8

08002ff0 <uart_available>:

uint32_t uart_available(void){
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
	uint32_t ret = 0;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	607b      	str	r3, [r7, #4]
	uart_queue.q_in_index = (QUEUE_BUF_MAX - huart1.hdmarx->Instance->NDTR) % QUEUE_BUF_MAX; //원형 큐
 8002ffa:	4b11      	ldr	r3, [pc, #68]	@ (8003040 <uart_available+0x50>)
 8002ffc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	b29b      	uxth	r3, r3
 8003004:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8003008:	b29b      	uxth	r3, r3
 800300a:	b2db      	uxtb	r3, r3
 800300c:	b29a      	uxth	r2, r3
 800300e:	4b0d      	ldr	r3, [pc, #52]	@ (8003044 <uart_available+0x54>)
 8003010:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
//	hdmarx->Instance->CNDTR
	ret = (QUEUE_BUF_MAX + uart_queue.q_in_index - uart_queue.q_out_index) % QUEUE_BUF_MAX; // 버퍼 데이터 개수
 8003014:	4b0b      	ldr	r3, [pc, #44]	@ (8003044 <uart_available+0x54>)
 8003016:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 800301a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800301e:	4a09      	ldr	r2, [pc, #36]	@ (8003044 <uart_available+0x54>)
 8003020:	f8b2 2102 	ldrh.w	r2, [r2, #258]	@ 0x102
 8003024:	1a9b      	subs	r3, r3, r2
 8003026:	425a      	negs	r2, r3
 8003028:	b2db      	uxtb	r3, r3
 800302a:	b2d2      	uxtb	r2, r2
 800302c:	bf58      	it	pl
 800302e:	4253      	negpl	r3, r2
 8003030:	607b      	str	r3, [r7, #4]

	return ret;
 8003032:	687b      	ldr	r3, [r7, #4]
}
 8003034:	4618      	mov	r0, r3
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr
 8003040:	20008730 	.word	0x20008730
 8003044:	20007a2c 	.word	0x20007a2c

08003048 <uart_q8_read>:

uint8_t uart_q8_read(void){
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
	uint8_t ret =0;
 800304e:	2300      	movs	r3, #0
 8003050:	71fb      	strb	r3, [r7, #7]
	if(uart_queue.q_out_index != uart_queue.q_in_index){
 8003052:	4b11      	ldr	r3, [pc, #68]	@ (8003098 <uart_q8_read+0x50>)
 8003054:	f8b3 2102 	ldrh.w	r2, [r3, #258]	@ 0x102
 8003058:	4b0f      	ldr	r3, [pc, #60]	@ (8003098 <uart_q8_read+0x50>)
 800305a:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 800305e:	429a      	cmp	r2, r3
 8003060:	d013      	beq.n	800308a <uart_q8_read+0x42>
		ret = uart_queue.buf[uart_queue.q_out_index];
 8003062:	4b0d      	ldr	r3, [pc, #52]	@ (8003098 <uart_q8_read+0x50>)
 8003064:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 8003068:	461a      	mov	r2, r3
 800306a:	4b0b      	ldr	r3, [pc, #44]	@ (8003098 <uart_q8_read+0x50>)
 800306c:	5c9b      	ldrb	r3, [r3, r2]
 800306e:	71fb      	strb	r3, [r7, #7]
		uart_queue.q_out_index = (uart_queue.q_out_index +1) % QUEUE_BUF_MAX;
 8003070:	4b09      	ldr	r3, [pc, #36]	@ (8003098 <uart_q8_read+0x50>)
 8003072:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 8003076:	3301      	adds	r3, #1
 8003078:	425a      	negs	r2, r3
 800307a:	b2db      	uxtb	r3, r3
 800307c:	b2d2      	uxtb	r2, r2
 800307e:	bf58      	it	pl
 8003080:	4253      	negpl	r3, r2
 8003082:	b29a      	uxth	r2, r3
 8003084:	4b04      	ldr	r3, [pc, #16]	@ (8003098 <uart_q8_read+0x50>)
 8003086:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
	}

	return ret;
 800308a:	79fb      	ldrb	r3, [r7, #7]
}
 800308c:	4618      	mov	r0, r3
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr
 8003098:	20007a2c 	.word	0x20007a2c

0800309c <read_rfid_number>:

uint8_t rfid_number[READ_BOOK_MAX_SIZE][12] = {0,}; //파싱한 rfid 번호 저장
uint8_t recive_data[24] = {0,}; //RFID 태그 한개에서 receive 한 data 저장
uint8_t book_num = 0;  //책 순서
uint8_t book_byte_num = 0; //책 태그의 바이트 순서
void read_rfid_number(){
 800309c:	b590      	push	{r4, r7, lr}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
	uint8_t i;
	if(uart_available()){ // 데이터 있으면
 80030a2:	f7ff ffa5 	bl	8002ff0 <uart_available>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d042      	beq.n	8003132 <read_rfid_number+0x96>
		uint8_t read_byte =  uart_q8_read(); // 버퍼에서 1byte 읽고
 80030ac:	f7ff ffcc 	bl	8003048 <uart_q8_read>
 80030b0:	4603      	mov	r3, r0
 80030b2:	71bb      	strb	r3, [r7, #6]
		recive_data[book_byte_num++] = read_byte;
 80030b4:	4b21      	ldr	r3, [pc, #132]	@ (800313c <read_rfid_number+0xa0>)
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	1c5a      	adds	r2, r3, #1
 80030ba:	b2d1      	uxtb	r1, r2
 80030bc:	4a1f      	ldr	r2, [pc, #124]	@ (800313c <read_rfid_number+0xa0>)
 80030be:	7011      	strb	r1, [r2, #0]
 80030c0:	4619      	mov	r1, r3
 80030c2:	4a1f      	ldr	r2, [pc, #124]	@ (8003140 <read_rfid_number+0xa4>)
 80030c4:	79bb      	ldrb	r3, [r7, #6]
 80030c6:	5453      	strb	r3, [r2, r1]
		if(read_byte == 0x7E) { // 마지막 데이터이면
 80030c8:	79bb      	ldrb	r3, [r7, #6]
 80030ca:	2b7e      	cmp	r3, #126	@ 0x7e
 80030cc:	d126      	bne.n	800311c <read_rfid_number+0x80>
			if(recive_data[1] != 0x01){ //인식이 된 경우 8~19 12byte rfid number
 80030ce:	4b1c      	ldr	r3, [pc, #112]	@ (8003140 <read_rfid_number+0xa4>)
 80030d0:	785b      	ldrb	r3, [r3, #1]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d01f      	beq.n	8003116 <read_rfid_number+0x7a>
				for( i=8; i<=19; i ++)
 80030d6:	2308      	movs	r3, #8
 80030d8:	71fb      	strb	r3, [r7, #7]
 80030da:	e013      	b.n	8003104 <read_rfid_number+0x68>
					rfid_number[book_num][i-8] = recive_data[i];
 80030dc:	79fb      	ldrb	r3, [r7, #7]
 80030de:	4a19      	ldr	r2, [pc, #100]	@ (8003144 <read_rfid_number+0xa8>)
 80030e0:	7812      	ldrb	r2, [r2, #0]
 80030e2:	4610      	mov	r0, r2
 80030e4:	79fa      	ldrb	r2, [r7, #7]
 80030e6:	3a08      	subs	r2, #8
 80030e8:	4915      	ldr	r1, [pc, #84]	@ (8003140 <read_rfid_number+0xa4>)
 80030ea:	5ccc      	ldrb	r4, [r1, r3]
 80030ec:	4916      	ldr	r1, [pc, #88]	@ (8003148 <read_rfid_number+0xac>)
 80030ee:	4603      	mov	r3, r0
 80030f0:	005b      	lsls	r3, r3, #1
 80030f2:	4403      	add	r3, r0
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	440b      	add	r3, r1
 80030f8:	4413      	add	r3, r2
 80030fa:	4622      	mov	r2, r4
 80030fc:	701a      	strb	r2, [r3, #0]
				for( i=8; i<=19; i ++)
 80030fe:	79fb      	ldrb	r3, [r7, #7]
 8003100:	3301      	adds	r3, #1
 8003102:	71fb      	strb	r3, [r7, #7]
 8003104:	79fb      	ldrb	r3, [r7, #7]
 8003106:	2b13      	cmp	r3, #19
 8003108:	d9e8      	bls.n	80030dc <read_rfid_number+0x40>
				book_num ++;
 800310a:	4b0e      	ldr	r3, [pc, #56]	@ (8003144 <read_rfid_number+0xa8>)
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	3301      	adds	r3, #1
 8003110:	b2da      	uxtb	r2, r3
 8003112:	4b0c      	ldr	r3, [pc, #48]	@ (8003144 <read_rfid_number+0xa8>)
 8003114:	701a      	strb	r2, [r3, #0]
			}
			book_byte_num = 0;
 8003116:	4b09      	ldr	r3, [pc, #36]	@ (800313c <read_rfid_number+0xa0>)
 8003118:	2200      	movs	r2, #0
 800311a:	701a      	strb	r2, [r3, #0]
		}
		if(!uart_available()){ //다 읽었으면
 800311c:	f7ff ff68 	bl	8002ff0 <uart_available>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d105      	bne.n	8003132 <read_rfid_number+0x96>
			osSignalSet(tagNumTransmitTHandle, transmitSignal); //전송 이벤트 생성
 8003126:	4b09      	ldr	r3, [pc, #36]	@ (800314c <read_rfid_number+0xb0>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2101      	movs	r1, #1
 800312c:	4618      	mov	r0, r3
 800312e:	f005 f9d7 	bl	80084e0 <osSignalSet>
			//vTaskSuspend(defaultTaskHandle);
			}
		}
}
 8003132:	bf00      	nop
 8003134:	370c      	adds	r7, #12
 8003136:	46bd      	mov	sp, r7
 8003138:	bd90      	pop	{r4, r7, pc}
 800313a:	bf00      	nop
 800313c:	20008201 	.word	0x20008201
 8003140:	200081e8 	.word	0x200081e8
 8003144:	20008200 	.word	0x20008200
 8003148:	20007d38 	.word	0x20007d38
 800314c:	200046f0 	.word	0x200046f0

08003150 <transmitData>:

void transmitData(){
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
	int i=0;
 8003156:	2300      	movs	r3, #0
 8003158:	607b      	str	r3, [r7, #4]
	while(rfid_number[i][0] != 0){
 800315a:	e01c      	b.n	8003196 <transmitData+0x46>
		//computer
		HAL_UART_Transmit(&huart2, rfid_number[i], sizeof(rfid_number[i]), 500);
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	4613      	mov	r3, r2
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	4413      	add	r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	4a17      	ldr	r2, [pc, #92]	@ (80031c4 <transmitData+0x74>)
 8003168:	1899      	adds	r1, r3, r2
 800316a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800316e:	220c      	movs	r2, #12
 8003170:	4815      	ldr	r0, [pc, #84]	@ (80031c8 <transmitData+0x78>)
 8003172:	f003 fe2d 	bl	8006dd0 <HAL_UART_Transmit>
		//esp32
		HAL_UART_Transmit(&huart3, rfid_number[i], sizeof(rfid_number[i]), 500);
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	4613      	mov	r3, r2
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	4413      	add	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	4a10      	ldr	r2, [pc, #64]	@ (80031c4 <transmitData+0x74>)
 8003182:	1899      	adds	r1, r3, r2
 8003184:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003188:	220c      	movs	r2, #12
 800318a:	4810      	ldr	r0, [pc, #64]	@ (80031cc <transmitData+0x7c>)
 800318c:	f003 fe20 	bl	8006dd0 <HAL_UART_Transmit>
		i++;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	3301      	adds	r3, #1
 8003194:	607b      	str	r3, [r7, #4]
	while(rfid_number[i][0] != 0){
 8003196:	490b      	ldr	r1, [pc, #44]	@ (80031c4 <transmitData+0x74>)
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	4613      	mov	r3, r2
 800319c:	005b      	lsls	r3, r3, #1
 800319e:	4413      	add	r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	440b      	add	r3, r1
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1d8      	bne.n	800315c <transmitData+0xc>
		}
	memset(rfid_number,0,sizeof(rfid_number));
 80031aa:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 80031ae:	2100      	movs	r1, #0
 80031b0:	4804      	ldr	r0, [pc, #16]	@ (80031c4 <transmitData+0x74>)
 80031b2:	f014 fe11 	bl	8017dd8 <memset>
	book_num =0;
 80031b6:	4b06      	ldr	r3, [pc, #24]	@ (80031d0 <transmitData+0x80>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	701a      	strb	r2, [r3, #0]

}
 80031bc:	bf00      	nop
 80031be:	3708      	adds	r7, #8
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	20007d38 	.word	0x20007d38
 80031c8:	20008778 	.word	0x20008778
 80031cc:	200087c0 	.word	0x200087c0
 80031d0:	20008200 	.word	0x20008200

080031d4 <uart5_available>:

uint32_t uart5_available(void){
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
	uint32_t ret = 0;
 80031da:	2300      	movs	r3, #0
 80031dc:	607b      	str	r3, [r7, #4]
	uart5_queue.q_in_index = (QUEUE_BUF_MAX - huart5.hdmarx->Instance->NDTR) % QUEUE_BUF_MAX; //원형 큐
 80031de:	4b11      	ldr	r3, [pc, #68]	@ (8003224 <uart5_available+0x50>)
 80031e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	b29a      	uxth	r2, r3
 80031f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003228 <uart5_available+0x54>)
 80031f4:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
//	hdmarx->Instance->CNDTR
	ret = (QUEUE_BUF_MAX + uart5_queue.q_in_index - uart5_queue.q_out_index) % QUEUE_BUF_MAX; // 버퍼 데이터 개수
 80031f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003228 <uart5_available+0x54>)
 80031fa:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 80031fe:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003202:	4a09      	ldr	r2, [pc, #36]	@ (8003228 <uart5_available+0x54>)
 8003204:	f8b2 2102 	ldrh.w	r2, [r2, #258]	@ 0x102
 8003208:	1a9b      	subs	r3, r3, r2
 800320a:	425a      	negs	r2, r3
 800320c:	b2db      	uxtb	r3, r3
 800320e:	b2d2      	uxtb	r2, r2
 8003210:	bf58      	it	pl
 8003212:	4253      	negpl	r3, r2
 8003214:	607b      	str	r3, [r7, #4]

	return ret;
 8003216:	687b      	ldr	r3, [r7, #4]
}
 8003218:	4618      	mov	r0, r3
 800321a:	370c      	adds	r7, #12
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr
 8003224:	200086e8 	.word	0x200086e8
 8003228:	20007b30 	.word	0x20007b30

0800322c <uart5_q8_read>:

uint8_t uart5_q8_read(void){
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
	uint8_t ret =0;
 8003232:	2300      	movs	r3, #0
 8003234:	71fb      	strb	r3, [r7, #7]
	if(uart5_queue.q_out_index != uart5_queue.q_in_index){
 8003236:	4b11      	ldr	r3, [pc, #68]	@ (800327c <uart5_q8_read+0x50>)
 8003238:	f8b3 2102 	ldrh.w	r2, [r3, #258]	@ 0x102
 800323c:	4b0f      	ldr	r3, [pc, #60]	@ (800327c <uart5_q8_read+0x50>)
 800323e:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 8003242:	429a      	cmp	r2, r3
 8003244:	d013      	beq.n	800326e <uart5_q8_read+0x42>
		ret = uart5_queue.buf[uart5_queue.q_out_index];
 8003246:	4b0d      	ldr	r3, [pc, #52]	@ (800327c <uart5_q8_read+0x50>)
 8003248:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 800324c:	461a      	mov	r2, r3
 800324e:	4b0b      	ldr	r3, [pc, #44]	@ (800327c <uart5_q8_read+0x50>)
 8003250:	5c9b      	ldrb	r3, [r3, r2]
 8003252:	71fb      	strb	r3, [r7, #7]
		uart5_queue.q_out_index = (uart5_queue.q_out_index +1) % QUEUE_BUF_MAX;
 8003254:	4b09      	ldr	r3, [pc, #36]	@ (800327c <uart5_q8_read+0x50>)
 8003256:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 800325a:	3301      	adds	r3, #1
 800325c:	425a      	negs	r2, r3
 800325e:	b2db      	uxtb	r3, r3
 8003260:	b2d2      	uxtb	r2, r2
 8003262:	bf58      	it	pl
 8003264:	4253      	negpl	r3, r2
 8003266:	b29a      	uxth	r2, r3
 8003268:	4b04      	ldr	r3, [pc, #16]	@ (800327c <uart5_q8_read+0x50>)
 800326a:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
	}

	return ret;
 800326e:	79fb      	ldrb	r3, [r7, #7]
}
 8003270:	4618      	mov	r0, r3
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr
 800327c:	20007b30 	.word	0x20007b30

08003280 <read_rfid_number5>:

uint8_t rfid_number2[READ_BOOK_MAX_SIZE][12] = {0,}; //파싱한 rfid 번호 저장
uint8_t recive_data2[24] = {0,}; //RFID 태그 한개에서 receive 한 data 저장
uint8_t book_num2 = 0;  //책 순서
uint8_t book_byte_num2 = 0; //책 태그의 바이트 순서
void read_rfid_number5(){
 8003280:	b590      	push	{r4, r7, lr}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
	uint8_t i;
	if(uart5_available()){ // 데이터 있으면
 8003286:	f7ff ffa5 	bl	80031d4 <uart5_available>
 800328a:	4603      	mov	r3, r0
 800328c:	2b00      	cmp	r3, #0
 800328e:	d042      	beq.n	8003316 <read_rfid_number5+0x96>
		uint8_t read_byte =  uart5_q8_read(); // 버퍼에서 1byte 읽고
 8003290:	f7ff ffcc 	bl	800322c <uart5_q8_read>
 8003294:	4603      	mov	r3, r0
 8003296:	71bb      	strb	r3, [r7, #6]
		recive_data2[book_byte_num2++] = read_byte;
 8003298:	4b21      	ldr	r3, [pc, #132]	@ (8003320 <read_rfid_number5+0xa0>)
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	1c5a      	adds	r2, r3, #1
 800329e:	b2d1      	uxtb	r1, r2
 80032a0:	4a1f      	ldr	r2, [pc, #124]	@ (8003320 <read_rfid_number5+0xa0>)
 80032a2:	7011      	strb	r1, [r2, #0]
 80032a4:	4619      	mov	r1, r3
 80032a6:	4a1f      	ldr	r2, [pc, #124]	@ (8003324 <read_rfid_number5+0xa4>)
 80032a8:	79bb      	ldrb	r3, [r7, #6]
 80032aa:	5453      	strb	r3, [r2, r1]
		if(read_byte == 0x7E) { // 마지막 데이터이면
 80032ac:	79bb      	ldrb	r3, [r7, #6]
 80032ae:	2b7e      	cmp	r3, #126	@ 0x7e
 80032b0:	d126      	bne.n	8003300 <read_rfid_number5+0x80>
			if(recive_data2[1] != 0x01){ //인식이 된 경우 8~19 12byte rfid number
 80032b2:	4b1c      	ldr	r3, [pc, #112]	@ (8003324 <read_rfid_number5+0xa4>)
 80032b4:	785b      	ldrb	r3, [r3, #1]
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d01f      	beq.n	80032fa <read_rfid_number5+0x7a>
				for( i=8; i<=19; i ++)
 80032ba:	2308      	movs	r3, #8
 80032bc:	71fb      	strb	r3, [r7, #7]
 80032be:	e013      	b.n	80032e8 <read_rfid_number5+0x68>
					rfid_number2[book_num2][i-8] = recive_data2[i];
 80032c0:	79fb      	ldrb	r3, [r7, #7]
 80032c2:	4a19      	ldr	r2, [pc, #100]	@ (8003328 <read_rfid_number5+0xa8>)
 80032c4:	7812      	ldrb	r2, [r2, #0]
 80032c6:	4610      	mov	r0, r2
 80032c8:	79fa      	ldrb	r2, [r7, #7]
 80032ca:	3a08      	subs	r2, #8
 80032cc:	4915      	ldr	r1, [pc, #84]	@ (8003324 <read_rfid_number5+0xa4>)
 80032ce:	5ccc      	ldrb	r4, [r1, r3]
 80032d0:	4916      	ldr	r1, [pc, #88]	@ (800332c <read_rfid_number5+0xac>)
 80032d2:	4603      	mov	r3, r0
 80032d4:	005b      	lsls	r3, r3, #1
 80032d6:	4403      	add	r3, r0
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	440b      	add	r3, r1
 80032dc:	4413      	add	r3, r2
 80032de:	4622      	mov	r2, r4
 80032e0:	701a      	strb	r2, [r3, #0]
				for( i=8; i<=19; i ++)
 80032e2:	79fb      	ldrb	r3, [r7, #7]
 80032e4:	3301      	adds	r3, #1
 80032e6:	71fb      	strb	r3, [r7, #7]
 80032e8:	79fb      	ldrb	r3, [r7, #7]
 80032ea:	2b13      	cmp	r3, #19
 80032ec:	d9e8      	bls.n	80032c0 <read_rfid_number5+0x40>
				book_num2 ++;
 80032ee:	4b0e      	ldr	r3, [pc, #56]	@ (8003328 <read_rfid_number5+0xa8>)
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	3301      	adds	r3, #1
 80032f4:	b2da      	uxtb	r2, r3
 80032f6:	4b0c      	ldr	r3, [pc, #48]	@ (8003328 <read_rfid_number5+0xa8>)
 80032f8:	701a      	strb	r2, [r3, #0]
			}
			book_byte_num2 = 0;
 80032fa:	4b09      	ldr	r3, [pc, #36]	@ (8003320 <read_rfid_number5+0xa0>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	701a      	strb	r2, [r3, #0]
		}
		if(!uart5_available()){ //다 읽었으면
 8003300:	f7ff ff68 	bl	80031d4 <uart5_available>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d105      	bne.n	8003316 <read_rfid_number5+0x96>
			osSignalSet(tagNumTransmitTHandle, transmitSignal5); //전송 이벤트 생성
 800330a:	4b09      	ldr	r3, [pc, #36]	@ (8003330 <read_rfid_number5+0xb0>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2105      	movs	r1, #5
 8003310:	4618      	mov	r0, r3
 8003312:	f005 f8e5 	bl	80084e0 <osSignalSet>
			//vTaskSuspend(defaultTaskHandle);
			}
		}
}
 8003316:	bf00      	nop
 8003318:	370c      	adds	r7, #12
 800331a:	46bd      	mov	sp, r7
 800331c:	bd90      	pop	{r4, r7, pc}
 800331e:	bf00      	nop
 8003320:	200086cd 	.word	0x200086cd
 8003324:	200086b4 	.word	0x200086b4
 8003328:	200086cc 	.word	0x200086cc
 800332c:	20008204 	.word	0x20008204
 8003330:	200046f0 	.word	0x200046f0

08003334 <transmitData5>:

void transmitData5(){
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
	int i=0;
 800333a:	2300      	movs	r3, #0
 800333c:	607b      	str	r3, [r7, #4]
	while(rfid_number2[i][0] != 0){
 800333e:	e01c      	b.n	800337a <transmitData5+0x46>
		//computer
		HAL_UART_Transmit(&huart2, rfid_number2[i], sizeof(rfid_number2[i]), 500);
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	4613      	mov	r3, r2
 8003344:	005b      	lsls	r3, r3, #1
 8003346:	4413      	add	r3, r2
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	4a17      	ldr	r2, [pc, #92]	@ (80033a8 <transmitData5+0x74>)
 800334c:	1899      	adds	r1, r3, r2
 800334e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003352:	220c      	movs	r2, #12
 8003354:	4815      	ldr	r0, [pc, #84]	@ (80033ac <transmitData5+0x78>)
 8003356:	f003 fd3b 	bl	8006dd0 <HAL_UART_Transmit>
		//esp32
		HAL_UART_Transmit(&huart3, rfid_number2[i], sizeof(rfid_number2[i]), 500);
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	4613      	mov	r3, r2
 800335e:	005b      	lsls	r3, r3, #1
 8003360:	4413      	add	r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	4a10      	ldr	r2, [pc, #64]	@ (80033a8 <transmitData5+0x74>)
 8003366:	1899      	adds	r1, r3, r2
 8003368:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800336c:	220c      	movs	r2, #12
 800336e:	4810      	ldr	r0, [pc, #64]	@ (80033b0 <transmitData5+0x7c>)
 8003370:	f003 fd2e 	bl	8006dd0 <HAL_UART_Transmit>
		i++;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	3301      	adds	r3, #1
 8003378:	607b      	str	r3, [r7, #4]
	while(rfid_number2[i][0] != 0){
 800337a:	490b      	ldr	r1, [pc, #44]	@ (80033a8 <transmitData5+0x74>)
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	4613      	mov	r3, r2
 8003380:	005b      	lsls	r3, r3, #1
 8003382:	4413      	add	r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	440b      	add	r3, r1
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1d8      	bne.n	8003340 <transmitData5+0xc>
		}
	memset(rfid_number2,0,sizeof(rfid_number2));
 800338e:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 8003392:	2100      	movs	r1, #0
 8003394:	4804      	ldr	r0, [pc, #16]	@ (80033a8 <transmitData5+0x74>)
 8003396:	f014 fd1f 	bl	8017dd8 <memset>
	book_num2 =0;
 800339a:	4b06      	ldr	r3, [pc, #24]	@ (80033b4 <transmitData5+0x80>)
 800339c:	2200      	movs	r2, #0
 800339e:	701a      	strb	r2, [r3, #0]

}
 80033a0:	bf00      	nop
 80033a2:	3708      	adds	r7, #8
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	20008204 	.word	0x20008204
 80033ac:	20008778 	.word	0x20008778
 80033b0:	200087c0 	.word	0x200087c0
 80033b4:	200086cc 	.word	0x200086cc

080033b8 <uart2_init>:
//	}
//}

//------------------------------------------------------

void uart2_init(){
 80033b8:	b580      	push	{r7, lr}
 80033ba:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&huart2, uart2_queue.buf, QUEUE_BUF_MAX);
 80033bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80033c0:	4906      	ldr	r1, [pc, #24]	@ (80033dc <uart2_init+0x24>)
 80033c2:	4807      	ldr	r0, [pc, #28]	@ (80033e0 <uart2_init+0x28>)
 80033c4:	f003 fe00 	bl	8006fc8 <HAL_UART_Receive_DMA>
	uart2_queue.q_in_index = 0;
 80033c8:	4b04      	ldr	r3, [pc, #16]	@ (80033dc <uart2_init+0x24>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
	uart2_queue.q_out_index = 0;
 80033d0:	4b02      	ldr	r3, [pc, #8]	@ (80033dc <uart2_init+0x24>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
}
 80033d8:	bf00      	nop
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	20007c34 	.word	0x20007c34
 80033e0:	20008778 	.word	0x20008778

080033e4 <uart2_available>:



uint32_t uart2_available(void){
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
	uint32_t ret = 0;
 80033ea:	2300      	movs	r3, #0
 80033ec:	607b      	str	r3, [r7, #4]
	uart2_queue.q_in_index = (QUEUE_BUF_MAX - huart2.hdmarx->Instance->NDTR) % QUEUE_BUF_MAX; //원형 큐
 80033ee:	4b11      	ldr	r3, [pc, #68]	@ (8003434 <uart2_available+0x50>)
 80033f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	b29a      	uxth	r2, r3
 8003402:	4b0d      	ldr	r3, [pc, #52]	@ (8003438 <uart2_available+0x54>)
 8003404:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
	ret = (QUEUE_BUF_MAX + uart2_queue.q_in_index - uart2_queue.q_out_index) % QUEUE_BUF_MAX; // 버퍼 데이터 개수
 8003408:	4b0b      	ldr	r3, [pc, #44]	@ (8003438 <uart2_available+0x54>)
 800340a:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 800340e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003412:	4a09      	ldr	r2, [pc, #36]	@ (8003438 <uart2_available+0x54>)
 8003414:	f8b2 2102 	ldrh.w	r2, [r2, #258]	@ 0x102
 8003418:	1a9b      	subs	r3, r3, r2
 800341a:	425a      	negs	r2, r3
 800341c:	b2db      	uxtb	r3, r3
 800341e:	b2d2      	uxtb	r2, r2
 8003420:	bf58      	it	pl
 8003422:	4253      	negpl	r3, r2
 8003424:	607b      	str	r3, [r7, #4]

	return ret;
 8003426:	687b      	ldr	r3, [r7, #4]
}
 8003428:	4618      	mov	r0, r3
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr
 8003434:	20008778 	.word	0x20008778
 8003438:	20007c34 	.word	0x20007c34

0800343c <uart2_q8_read>:


uint8_t uart2_q8_read(void){
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
	uint8_t ret =0;
 8003442:	2300      	movs	r3, #0
 8003444:	71fb      	strb	r3, [r7, #7]
	if(uart2_queue.q_out_index != uart2_queue.q_in_index){
 8003446:	4b11      	ldr	r3, [pc, #68]	@ (800348c <uart2_q8_read+0x50>)
 8003448:	f8b3 2102 	ldrh.w	r2, [r3, #258]	@ 0x102
 800344c:	4b0f      	ldr	r3, [pc, #60]	@ (800348c <uart2_q8_read+0x50>)
 800344e:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 8003452:	429a      	cmp	r2, r3
 8003454:	d013      	beq.n	800347e <uart2_q8_read+0x42>
		ret = uart2_queue.buf[uart2_queue.q_out_index];
 8003456:	4b0d      	ldr	r3, [pc, #52]	@ (800348c <uart2_q8_read+0x50>)
 8003458:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 800345c:	461a      	mov	r2, r3
 800345e:	4b0b      	ldr	r3, [pc, #44]	@ (800348c <uart2_q8_read+0x50>)
 8003460:	5c9b      	ldrb	r3, [r3, r2]
 8003462:	71fb      	strb	r3, [r7, #7]
		uart2_queue.q_out_index = (uart2_queue.q_out_index +1) % QUEUE_BUF_MAX;
 8003464:	4b09      	ldr	r3, [pc, #36]	@ (800348c <uart2_q8_read+0x50>)
 8003466:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 800346a:	3301      	adds	r3, #1
 800346c:	425a      	negs	r2, r3
 800346e:	b2db      	uxtb	r3, r3
 8003470:	b2d2      	uxtb	r2, r2
 8003472:	bf58      	it	pl
 8003474:	4253      	negpl	r3, r2
 8003476:	b29a      	uxth	r2, r3
 8003478:	4b04      	ldr	r3, [pc, #16]	@ (800348c <uart2_q8_read+0x50>)
 800347a:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
	}

	return ret;
 800347e:	79fb      	ldrb	r3, [r7, #7]
}
 8003480:	4618      	mov	r0, r3
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr
 800348c:	20007c34 	.word	0x20007c34

08003490 <read_command>:

uint8_t scan_command[20] = {0,}; //파싱한 rfid 번호 저장
uint8_t command_byte_num = 0; //책 태그의 바이트 순서
void read_command(){
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
	if(uart2_available()){ // 데이터 있으면
 8003496:	f7ff ffa5 	bl	80033e4 <uart2_available>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d01e      	beq.n	80034de <read_command+0x4e>
		uint8_t read_byte =  uart2_q8_read(); // 버퍼에서 1byte 읽고
 80034a0:	f7ff ffcc 	bl	800343c <uart2_q8_read>
 80034a4:	4603      	mov	r3, r0
 80034a6:	71fb      	strb	r3, [r7, #7]
		scan_command[command_byte_num++] = read_byte;
 80034a8:	4b0f      	ldr	r3, [pc, #60]	@ (80034e8 <read_command+0x58>)
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	1c5a      	adds	r2, r3, #1
 80034ae:	b2d1      	uxtb	r1, r2
 80034b0:	4a0d      	ldr	r2, [pc, #52]	@ (80034e8 <read_command+0x58>)
 80034b2:	7011      	strb	r1, [r2, #0]
 80034b4:	4619      	mov	r1, r3
 80034b6:	4a0d      	ldr	r2, [pc, #52]	@ (80034ec <read_command+0x5c>)
 80034b8:	79fb      	ldrb	r3, [r7, #7]
 80034ba:	5453      	strb	r3, [r2, r1]
		if(read_byte == 0x0A) { // 마지막 데이터이면
 80034bc:	79fb      	ldrb	r3, [r7, #7]
 80034be:	2b0a      	cmp	r3, #10
 80034c0:	d102      	bne.n	80034c8 <read_command+0x38>
			command_byte_num = 0;
 80034c2:	4b09      	ldr	r3, [pc, #36]	@ (80034e8 <read_command+0x58>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	701a      	strb	r2, [r3, #0]
		}
		if(!uart2_available()){ //다 읽었으면
 80034c8:	f7ff ff8c 	bl	80033e4 <uart2_available>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d105      	bne.n	80034de <read_command+0x4e>
			osSignalSet(transmitTask2Handle, transmitSignal2); //전송 이벤트 생성
 80034d2:	4b07      	ldr	r3, [pc, #28]	@ (80034f0 <read_command+0x60>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2102      	movs	r1, #2
 80034d8:	4618      	mov	r0, r3
 80034da:	f005 f801 	bl	80084e0 <osSignalSet>
		}
	}
}
 80034de:	bf00      	nop
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	200086e4 	.word	0x200086e4
 80034ec:	200086d0 	.word	0x200086d0
 80034f0:	200046fc 	.word	0x200046fc

080034f4 <transmitCommand>:

char motor_command1[] = "scan\n";
char motor_command2[] = "stop\n";

void transmitCommand(){
 80034f4:	b580      	push	{r7, lr}
 80034f6:	af00      	add	r7, sp, #0
//	int i=0;
//	while(scan_command[i] != 10){
//		HAL_UART_Transmit(&huart2, scan_command[i], sizeof(scan_command[i]), 1);
//		i++;
//	}
	if(!(strchr(scan_command,motor_command1))){
 80034f8:	4b0f      	ldr	r3, [pc, #60]	@ (8003538 <transmitCommand+0x44>)
 80034fa:	4619      	mov	r1, r3
 80034fc:	480f      	ldr	r0, [pc, #60]	@ (800353c <transmitCommand+0x48>)
 80034fe:	f014 fc73 	bl	8017de8 <strchr>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d10f      	bne.n	8003528 <transmitCommand+0x34>
		HAL_UART_Transmit(&huart2, "ok\r\n", sizeof("ok\r\n"), 1);
 8003508:	2301      	movs	r3, #1
 800350a:	2205      	movs	r2, #5
 800350c:	490c      	ldr	r1, [pc, #48]	@ (8003540 <transmitCommand+0x4c>)
 800350e:	480d      	ldr	r0, [pc, #52]	@ (8003544 <transmitCommand+0x50>)
 8003510:	f003 fc5e 	bl	8006dd0 <HAL_UART_Transmit>
		vTaskResume(motorTaskHandle);
 8003514:	4b0c      	ldr	r3, [pc, #48]	@ (8003548 <transmitCommand+0x54>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4618      	mov	r0, r3
 800351a:	f005 fbcd 	bl	8008cb8 <vTaskResume>
		vTaskResume(rfidExecuteTaskHandle);
 800351e:	4b0b      	ldr	r3, [pc, #44]	@ (800354c <transmitCommand+0x58>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4618      	mov	r0, r3
 8003524:	f005 fbc8 	bl	8008cb8 <vTaskResume>
	}
//	}else if(!(strchr(scan_command,motor_command2))){
//		HAL_UART_Transmit(&huart2, "ok\r\n", sizeof("ok\r\n"), 1);
//		vTaskSuspend(rfidExecuteHandle);
//	}
	memset(scan_command,0,sizeof(scan_command));
 8003528:	2214      	movs	r2, #20
 800352a:	2100      	movs	r1, #0
 800352c:	4803      	ldr	r0, [pc, #12]	@ (800353c <transmitCommand+0x48>)
 800352e:	f014 fc53 	bl	8017dd8 <memset>
}
 8003532:	bf00      	nop
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	20000008 	.word	0x20000008
 800353c:	200086d0 	.word	0x200086d0
 8003540:	08019f60 	.word	0x08019f60
 8003544:	20008778 	.word	0x20008778
 8003548:	200046f8 	.word	0x200046f8
 800354c:	200046ec 	.word	0x200046ec

08003550 <MX_UART5_Init>:
DMA_HandleTypeDef hdma_usart6_rx;
DMA_HandleTypeDef hdma_usart6_tx;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8003554:	4b11      	ldr	r3, [pc, #68]	@ (800359c <MX_UART5_Init+0x4c>)
 8003556:	4a12      	ldr	r2, [pc, #72]	@ (80035a0 <MX_UART5_Init+0x50>)
 8003558:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800355a:	4b10      	ldr	r3, [pc, #64]	@ (800359c <MX_UART5_Init+0x4c>)
 800355c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003560:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8003562:	4b0e      	ldr	r3, [pc, #56]	@ (800359c <MX_UART5_Init+0x4c>)
 8003564:	2200      	movs	r2, #0
 8003566:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003568:	4b0c      	ldr	r3, [pc, #48]	@ (800359c <MX_UART5_Init+0x4c>)
 800356a:	2200      	movs	r2, #0
 800356c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800356e:	4b0b      	ldr	r3, [pc, #44]	@ (800359c <MX_UART5_Init+0x4c>)
 8003570:	2200      	movs	r2, #0
 8003572:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003574:	4b09      	ldr	r3, [pc, #36]	@ (800359c <MX_UART5_Init+0x4c>)
 8003576:	220c      	movs	r2, #12
 8003578:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800357a:	4b08      	ldr	r3, [pc, #32]	@ (800359c <MX_UART5_Init+0x4c>)
 800357c:	2200      	movs	r2, #0
 800357e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8003580:	4b06      	ldr	r3, [pc, #24]	@ (800359c <MX_UART5_Init+0x4c>)
 8003582:	2200      	movs	r2, #0
 8003584:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8003586:	4805      	ldr	r0, [pc, #20]	@ (800359c <MX_UART5_Init+0x4c>)
 8003588:	f003 fbd2 	bl	8006d30 <HAL_UART_Init>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d001      	beq.n	8003596 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8003592:	f7fe fdaf 	bl	80020f4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8003596:	bf00      	nop
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	200086e8 	.word	0x200086e8
 80035a0:	40005000 	.word	0x40005000

080035a4 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80035a8:	4b11      	ldr	r3, [pc, #68]	@ (80035f0 <MX_USART1_UART_Init+0x4c>)
 80035aa:	4a12      	ldr	r2, [pc, #72]	@ (80035f4 <MX_USART1_UART_Init+0x50>)
 80035ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80035ae:	4b10      	ldr	r3, [pc, #64]	@ (80035f0 <MX_USART1_UART_Init+0x4c>)
 80035b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80035b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80035b6:	4b0e      	ldr	r3, [pc, #56]	@ (80035f0 <MX_USART1_UART_Init+0x4c>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80035bc:	4b0c      	ldr	r3, [pc, #48]	@ (80035f0 <MX_USART1_UART_Init+0x4c>)
 80035be:	2200      	movs	r2, #0
 80035c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80035c2:	4b0b      	ldr	r3, [pc, #44]	@ (80035f0 <MX_USART1_UART_Init+0x4c>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80035c8:	4b09      	ldr	r3, [pc, #36]	@ (80035f0 <MX_USART1_UART_Init+0x4c>)
 80035ca:	220c      	movs	r2, #12
 80035cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80035ce:	4b08      	ldr	r3, [pc, #32]	@ (80035f0 <MX_USART1_UART_Init+0x4c>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80035d4:	4b06      	ldr	r3, [pc, #24]	@ (80035f0 <MX_USART1_UART_Init+0x4c>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80035da:	4805      	ldr	r0, [pc, #20]	@ (80035f0 <MX_USART1_UART_Init+0x4c>)
 80035dc:	f003 fba8 	bl	8006d30 <HAL_UART_Init>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80035e6:	f7fe fd85 	bl	80020f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80035ea:	bf00      	nop
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	20008730 	.word	0x20008730
 80035f4:	40011000 	.word	0x40011000

080035f8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80035fc:	4b11      	ldr	r3, [pc, #68]	@ (8003644 <MX_USART2_UART_Init+0x4c>)
 80035fe:	4a12      	ldr	r2, [pc, #72]	@ (8003648 <MX_USART2_UART_Init+0x50>)
 8003600:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003602:	4b10      	ldr	r3, [pc, #64]	@ (8003644 <MX_USART2_UART_Init+0x4c>)
 8003604:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003608:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800360a:	4b0e      	ldr	r3, [pc, #56]	@ (8003644 <MX_USART2_UART_Init+0x4c>)
 800360c:	2200      	movs	r2, #0
 800360e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003610:	4b0c      	ldr	r3, [pc, #48]	@ (8003644 <MX_USART2_UART_Init+0x4c>)
 8003612:	2200      	movs	r2, #0
 8003614:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003616:	4b0b      	ldr	r3, [pc, #44]	@ (8003644 <MX_USART2_UART_Init+0x4c>)
 8003618:	2200      	movs	r2, #0
 800361a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800361c:	4b09      	ldr	r3, [pc, #36]	@ (8003644 <MX_USART2_UART_Init+0x4c>)
 800361e:	220c      	movs	r2, #12
 8003620:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003622:	4b08      	ldr	r3, [pc, #32]	@ (8003644 <MX_USART2_UART_Init+0x4c>)
 8003624:	2200      	movs	r2, #0
 8003626:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003628:	4b06      	ldr	r3, [pc, #24]	@ (8003644 <MX_USART2_UART_Init+0x4c>)
 800362a:	2200      	movs	r2, #0
 800362c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800362e:	4805      	ldr	r0, [pc, #20]	@ (8003644 <MX_USART2_UART_Init+0x4c>)
 8003630:	f003 fb7e 	bl	8006d30 <HAL_UART_Init>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d001      	beq.n	800363e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800363a:	f7fe fd5b 	bl	80020f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800363e:	bf00      	nop
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	20008778 	.word	0x20008778
 8003648:	40004400 	.word	0x40004400

0800364c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003650:	4b11      	ldr	r3, [pc, #68]	@ (8003698 <MX_USART3_UART_Init+0x4c>)
 8003652:	4a12      	ldr	r2, [pc, #72]	@ (800369c <MX_USART3_UART_Init+0x50>)
 8003654:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8003656:	4b10      	ldr	r3, [pc, #64]	@ (8003698 <MX_USART3_UART_Init+0x4c>)
 8003658:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800365c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800365e:	4b0e      	ldr	r3, [pc, #56]	@ (8003698 <MX_USART3_UART_Init+0x4c>)
 8003660:	2200      	movs	r2, #0
 8003662:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003664:	4b0c      	ldr	r3, [pc, #48]	@ (8003698 <MX_USART3_UART_Init+0x4c>)
 8003666:	2200      	movs	r2, #0
 8003668:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800366a:	4b0b      	ldr	r3, [pc, #44]	@ (8003698 <MX_USART3_UART_Init+0x4c>)
 800366c:	2200      	movs	r2, #0
 800366e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003670:	4b09      	ldr	r3, [pc, #36]	@ (8003698 <MX_USART3_UART_Init+0x4c>)
 8003672:	220c      	movs	r2, #12
 8003674:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003676:	4b08      	ldr	r3, [pc, #32]	@ (8003698 <MX_USART3_UART_Init+0x4c>)
 8003678:	2200      	movs	r2, #0
 800367a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800367c:	4b06      	ldr	r3, [pc, #24]	@ (8003698 <MX_USART3_UART_Init+0x4c>)
 800367e:	2200      	movs	r2, #0
 8003680:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003682:	4805      	ldr	r0, [pc, #20]	@ (8003698 <MX_USART3_UART_Init+0x4c>)
 8003684:	f003 fb54 	bl	8006d30 <HAL_UART_Init>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d001      	beq.n	8003692 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800368e:	f7fe fd31 	bl	80020f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003692:	bf00      	nop
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	200087c0 	.word	0x200087c0
 800369c:	40004800 	.word	0x40004800

080036a0 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80036a4:	4b11      	ldr	r3, [pc, #68]	@ (80036ec <MX_USART6_UART_Init+0x4c>)
 80036a6:	4a12      	ldr	r2, [pc, #72]	@ (80036f0 <MX_USART6_UART_Init+0x50>)
 80036a8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80036aa:	4b10      	ldr	r3, [pc, #64]	@ (80036ec <MX_USART6_UART_Init+0x4c>)
 80036ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80036b0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80036b2:	4b0e      	ldr	r3, [pc, #56]	@ (80036ec <MX_USART6_UART_Init+0x4c>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80036b8:	4b0c      	ldr	r3, [pc, #48]	@ (80036ec <MX_USART6_UART_Init+0x4c>)
 80036ba:	2200      	movs	r2, #0
 80036bc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80036be:	4b0b      	ldr	r3, [pc, #44]	@ (80036ec <MX_USART6_UART_Init+0x4c>)
 80036c0:	2200      	movs	r2, #0
 80036c2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80036c4:	4b09      	ldr	r3, [pc, #36]	@ (80036ec <MX_USART6_UART_Init+0x4c>)
 80036c6:	220c      	movs	r2, #12
 80036c8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80036ca:	4b08      	ldr	r3, [pc, #32]	@ (80036ec <MX_USART6_UART_Init+0x4c>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80036d0:	4b06      	ldr	r3, [pc, #24]	@ (80036ec <MX_USART6_UART_Init+0x4c>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80036d6:	4805      	ldr	r0, [pc, #20]	@ (80036ec <MX_USART6_UART_Init+0x4c>)
 80036d8:	f003 fb2a 	bl	8006d30 <HAL_UART_Init>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d001      	beq.n	80036e6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80036e2:	f7fe fd07 	bl	80020f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80036e6:	bf00      	nop
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	20008808 	.word	0x20008808
 80036f0:	40011400 	.word	0x40011400

080036f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b094      	sub	sp, #80	@ 0x50
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036fc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003700:	2200      	movs	r2, #0
 8003702:	601a      	str	r2, [r3, #0]
 8003704:	605a      	str	r2, [r3, #4]
 8003706:	609a      	str	r2, [r3, #8]
 8003708:	60da      	str	r2, [r3, #12]
 800370a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a73      	ldr	r2, [pc, #460]	@ (80038e0 <HAL_UART_MspInit+0x1ec>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d17a      	bne.n	800380c <HAL_UART_MspInit+0x118>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8003716:	2300      	movs	r3, #0
 8003718:	63bb      	str	r3, [r7, #56]	@ 0x38
 800371a:	4b72      	ldr	r3, [pc, #456]	@ (80038e4 <HAL_UART_MspInit+0x1f0>)
 800371c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800371e:	4a71      	ldr	r2, [pc, #452]	@ (80038e4 <HAL_UART_MspInit+0x1f0>)
 8003720:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003724:	6413      	str	r3, [r2, #64]	@ 0x40
 8003726:	4b6f      	ldr	r3, [pc, #444]	@ (80038e4 <HAL_UART_MspInit+0x1f0>)
 8003728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800372a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800372e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003732:	2300      	movs	r3, #0
 8003734:	637b      	str	r3, [r7, #52]	@ 0x34
 8003736:	4b6b      	ldr	r3, [pc, #428]	@ (80038e4 <HAL_UART_MspInit+0x1f0>)
 8003738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800373a:	4a6a      	ldr	r2, [pc, #424]	@ (80038e4 <HAL_UART_MspInit+0x1f0>)
 800373c:	f043 0304 	orr.w	r3, r3, #4
 8003740:	6313      	str	r3, [r2, #48]	@ 0x30
 8003742:	4b68      	ldr	r3, [pc, #416]	@ (80038e4 <HAL_UART_MspInit+0x1f0>)
 8003744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003746:	f003 0304 	and.w	r3, r3, #4
 800374a:	637b      	str	r3, [r7, #52]	@ 0x34
 800374c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800374e:	2300      	movs	r3, #0
 8003750:	633b      	str	r3, [r7, #48]	@ 0x30
 8003752:	4b64      	ldr	r3, [pc, #400]	@ (80038e4 <HAL_UART_MspInit+0x1f0>)
 8003754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003756:	4a63      	ldr	r2, [pc, #396]	@ (80038e4 <HAL_UART_MspInit+0x1f0>)
 8003758:	f043 0308 	orr.w	r3, r3, #8
 800375c:	6313      	str	r3, [r2, #48]	@ 0x30
 800375e:	4b61      	ldr	r3, [pc, #388]	@ (80038e4 <HAL_UART_MspInit+0x1f0>)
 8003760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003762:	f003 0308 	and.w	r3, r3, #8
 8003766:	633b      	str	r3, [r7, #48]	@ 0x30
 8003768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = UHF02_TX_Pin;
 800376a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800376e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003770:	2302      	movs	r3, #2
 8003772:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003774:	2300      	movs	r3, #0
 8003776:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003778:	2303      	movs	r3, #3
 800377a:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800377c:	2308      	movs	r3, #8
 800377e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(UHF02_TX_GPIO_Port, &GPIO_InitStruct);
 8003780:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003784:	4619      	mov	r1, r3
 8003786:	4858      	ldr	r0, [pc, #352]	@ (80038e8 <HAL_UART_MspInit+0x1f4>)
 8003788:	f000 ffac 	bl	80046e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = UHF02_RX_Pin;
 800378c:	2304      	movs	r3, #4
 800378e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003790:	2302      	movs	r3, #2
 8003792:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003794:	2300      	movs	r3, #0
 8003796:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003798:	2303      	movs	r3, #3
 800379a:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800379c:	2308      	movs	r3, #8
 800379e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(UHF02_RX_GPIO_Port, &GPIO_InitStruct);
 80037a0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80037a4:	4619      	mov	r1, r3
 80037a6:	4851      	ldr	r0, [pc, #324]	@ (80038ec <HAL_UART_MspInit+0x1f8>)
 80037a8:	f000 ff9c 	bl	80046e4 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 80037ac:	4b50      	ldr	r3, [pc, #320]	@ (80038f0 <HAL_UART_MspInit+0x1fc>)
 80037ae:	4a51      	ldr	r2, [pc, #324]	@ (80038f4 <HAL_UART_MspInit+0x200>)
 80037b0:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 80037b2:	4b4f      	ldr	r3, [pc, #316]	@ (80038f0 <HAL_UART_MspInit+0x1fc>)
 80037b4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80037b8:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80037ba:	4b4d      	ldr	r3, [pc, #308]	@ (80038f0 <HAL_UART_MspInit+0x1fc>)
 80037bc:	2200      	movs	r2, #0
 80037be:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80037c0:	4b4b      	ldr	r3, [pc, #300]	@ (80038f0 <HAL_UART_MspInit+0x1fc>)
 80037c2:	2200      	movs	r2, #0
 80037c4:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80037c6:	4b4a      	ldr	r3, [pc, #296]	@ (80038f0 <HAL_UART_MspInit+0x1fc>)
 80037c8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80037cc:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80037ce:	4b48      	ldr	r3, [pc, #288]	@ (80038f0 <HAL_UART_MspInit+0x1fc>)
 80037d0:	2200      	movs	r2, #0
 80037d2:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80037d4:	4b46      	ldr	r3, [pc, #280]	@ (80038f0 <HAL_UART_MspInit+0x1fc>)
 80037d6:	2200      	movs	r2, #0
 80037d8:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 80037da:	4b45      	ldr	r3, [pc, #276]	@ (80038f0 <HAL_UART_MspInit+0x1fc>)
 80037dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80037e0:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 80037e2:	4b43      	ldr	r3, [pc, #268]	@ (80038f0 <HAL_UART_MspInit+0x1fc>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80037e8:	4b41      	ldr	r3, [pc, #260]	@ (80038f0 <HAL_UART_MspInit+0x1fc>)
 80037ea:	2200      	movs	r2, #0
 80037ec:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 80037ee:	4840      	ldr	r0, [pc, #256]	@ (80038f0 <HAL_UART_MspInit+0x1fc>)
 80037f0:	f000 fb76 	bl	8003ee0 <HAL_DMA_Init>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d001      	beq.n	80037fe <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 80037fa:	f7fe fc7b 	bl	80020f4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a3b      	ldr	r2, [pc, #236]	@ (80038f0 <HAL_UART_MspInit+0x1fc>)
 8003802:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003804:	4a3a      	ldr	r2, [pc, #232]	@ (80038f0 <HAL_UART_MspInit+0x1fc>)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800380a:	e1df      	b.n	8003bcc <HAL_UART_MspInit+0x4d8>
  else if(uartHandle->Instance==USART1)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a39      	ldr	r2, [pc, #228]	@ (80038f8 <HAL_UART_MspInit+0x204>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d178      	bne.n	8003908 <HAL_UART_MspInit+0x214>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003816:	2300      	movs	r3, #0
 8003818:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800381a:	4b32      	ldr	r3, [pc, #200]	@ (80038e4 <HAL_UART_MspInit+0x1f0>)
 800381c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800381e:	4a31      	ldr	r2, [pc, #196]	@ (80038e4 <HAL_UART_MspInit+0x1f0>)
 8003820:	f043 0310 	orr.w	r3, r3, #16
 8003824:	6453      	str	r3, [r2, #68]	@ 0x44
 8003826:	4b2f      	ldr	r3, [pc, #188]	@ (80038e4 <HAL_UART_MspInit+0x1f0>)
 8003828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800382a:	f003 0310 	and.w	r3, r3, #16
 800382e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003832:	2300      	movs	r3, #0
 8003834:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003836:	4b2b      	ldr	r3, [pc, #172]	@ (80038e4 <HAL_UART_MspInit+0x1f0>)
 8003838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800383a:	4a2a      	ldr	r2, [pc, #168]	@ (80038e4 <HAL_UART_MspInit+0x1f0>)
 800383c:	f043 0301 	orr.w	r3, r3, #1
 8003840:	6313      	str	r3, [r2, #48]	@ 0x30
 8003842:	4b28      	ldr	r3, [pc, #160]	@ (80038e4 <HAL_UART_MspInit+0x1f0>)
 8003844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003846:	f003 0301 	and.w	r3, r3, #1
 800384a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800384c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = UHF01_TX_Pin|UHF01_RX_Pin;
 800384e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003852:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003854:	2302      	movs	r3, #2
 8003856:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003858:	2300      	movs	r3, #0
 800385a:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800385c:	2303      	movs	r3, #3
 800385e:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003860:	2307      	movs	r3, #7
 8003862:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003864:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003868:	4619      	mov	r1, r3
 800386a:	4824      	ldr	r0, [pc, #144]	@ (80038fc <HAL_UART_MspInit+0x208>)
 800386c:	f000 ff3a 	bl	80046e4 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream5;
 8003870:	4b23      	ldr	r3, [pc, #140]	@ (8003900 <HAL_UART_MspInit+0x20c>)
 8003872:	4a24      	ldr	r2, [pc, #144]	@ (8003904 <HAL_UART_MspInit+0x210>)
 8003874:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8003876:	4b22      	ldr	r3, [pc, #136]	@ (8003900 <HAL_UART_MspInit+0x20c>)
 8003878:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800387c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800387e:	4b20      	ldr	r3, [pc, #128]	@ (8003900 <HAL_UART_MspInit+0x20c>)
 8003880:	2200      	movs	r2, #0
 8003882:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003884:	4b1e      	ldr	r3, [pc, #120]	@ (8003900 <HAL_UART_MspInit+0x20c>)
 8003886:	2200      	movs	r2, #0
 8003888:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800388a:	4b1d      	ldr	r3, [pc, #116]	@ (8003900 <HAL_UART_MspInit+0x20c>)
 800388c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003890:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003892:	4b1b      	ldr	r3, [pc, #108]	@ (8003900 <HAL_UART_MspInit+0x20c>)
 8003894:	2200      	movs	r2, #0
 8003896:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003898:	4b19      	ldr	r3, [pc, #100]	@ (8003900 <HAL_UART_MspInit+0x20c>)
 800389a:	2200      	movs	r2, #0
 800389c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800389e:	4b18      	ldr	r3, [pc, #96]	@ (8003900 <HAL_UART_MspInit+0x20c>)
 80038a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80038a4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80038a6:	4b16      	ldr	r3, [pc, #88]	@ (8003900 <HAL_UART_MspInit+0x20c>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80038ac:	4b14      	ldr	r3, [pc, #80]	@ (8003900 <HAL_UART_MspInit+0x20c>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80038b2:	4813      	ldr	r0, [pc, #76]	@ (8003900 <HAL_UART_MspInit+0x20c>)
 80038b4:	f000 fb14 	bl	8003ee0 <HAL_DMA_Init>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <HAL_UART_MspInit+0x1ce>
      Error_Handler();
 80038be:	f7fe fc19 	bl	80020f4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a0e      	ldr	r2, [pc, #56]	@ (8003900 <HAL_UART_MspInit+0x20c>)
 80038c6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80038c8:	4a0d      	ldr	r2, [pc, #52]	@ (8003900 <HAL_UART_MspInit+0x20c>)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80038ce:	2200      	movs	r2, #0
 80038d0:	2105      	movs	r1, #5
 80038d2:	2025      	movs	r0, #37	@ 0x25
 80038d4:	f000 fada 	bl	8003e8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80038d8:	2025      	movs	r0, #37	@ 0x25
 80038da:	f000 faf3 	bl	8003ec4 <HAL_NVIC_EnableIRQ>
}
 80038de:	e175      	b.n	8003bcc <HAL_UART_MspInit+0x4d8>
 80038e0:	40005000 	.word	0x40005000
 80038e4:	40023800 	.word	0x40023800
 80038e8:	40020800 	.word	0x40020800
 80038ec:	40020c00 	.word	0x40020c00
 80038f0:	20008850 	.word	0x20008850
 80038f4:	40026010 	.word	0x40026010
 80038f8:	40011000 	.word	0x40011000
 80038fc:	40020000 	.word	0x40020000
 8003900:	200088b0 	.word	0x200088b0
 8003904:	40026488 	.word	0x40026488
  else if(uartHandle->Instance==USART2)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a5b      	ldr	r2, [pc, #364]	@ (8003a7c <HAL_UART_MspInit+0x388>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d15a      	bne.n	80039c8 <HAL_UART_MspInit+0x2d4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003912:	2300      	movs	r3, #0
 8003914:	627b      	str	r3, [r7, #36]	@ 0x24
 8003916:	4b5a      	ldr	r3, [pc, #360]	@ (8003a80 <HAL_UART_MspInit+0x38c>)
 8003918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800391a:	4a59      	ldr	r2, [pc, #356]	@ (8003a80 <HAL_UART_MspInit+0x38c>)
 800391c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003920:	6413      	str	r3, [r2, #64]	@ 0x40
 8003922:	4b57      	ldr	r3, [pc, #348]	@ (8003a80 <HAL_UART_MspInit+0x38c>)
 8003924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003926:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800392a:	627b      	str	r3, [r7, #36]	@ 0x24
 800392c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800392e:	2300      	movs	r3, #0
 8003930:	623b      	str	r3, [r7, #32]
 8003932:	4b53      	ldr	r3, [pc, #332]	@ (8003a80 <HAL_UART_MspInit+0x38c>)
 8003934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003936:	4a52      	ldr	r2, [pc, #328]	@ (8003a80 <HAL_UART_MspInit+0x38c>)
 8003938:	f043 0301 	orr.w	r3, r3, #1
 800393c:	6313      	str	r3, [r2, #48]	@ 0x30
 800393e:	4b50      	ldr	r3, [pc, #320]	@ (8003a80 <HAL_UART_MspInit+0x38c>)
 8003940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003942:	f003 0301 	and.w	r3, r3, #1
 8003946:	623b      	str	r3, [r7, #32]
 8003948:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = com_TX_Pin|com_RX_Pin;
 800394a:	230c      	movs	r3, #12
 800394c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800394e:	2302      	movs	r3, #2
 8003950:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003952:	2300      	movs	r3, #0
 8003954:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003956:	2303      	movs	r3, #3
 8003958:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800395a:	2307      	movs	r3, #7
 800395c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800395e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003962:	4619      	mov	r1, r3
 8003964:	4847      	ldr	r0, [pc, #284]	@ (8003a84 <HAL_UART_MspInit+0x390>)
 8003966:	f000 febd 	bl	80046e4 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800396a:	4b47      	ldr	r3, [pc, #284]	@ (8003a88 <HAL_UART_MspInit+0x394>)
 800396c:	4a47      	ldr	r2, [pc, #284]	@ (8003a8c <HAL_UART_MspInit+0x398>)
 800396e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003970:	4b45      	ldr	r3, [pc, #276]	@ (8003a88 <HAL_UART_MspInit+0x394>)
 8003972:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003976:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003978:	4b43      	ldr	r3, [pc, #268]	@ (8003a88 <HAL_UART_MspInit+0x394>)
 800397a:	2200      	movs	r2, #0
 800397c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800397e:	4b42      	ldr	r3, [pc, #264]	@ (8003a88 <HAL_UART_MspInit+0x394>)
 8003980:	2200      	movs	r2, #0
 8003982:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003984:	4b40      	ldr	r3, [pc, #256]	@ (8003a88 <HAL_UART_MspInit+0x394>)
 8003986:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800398a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800398c:	4b3e      	ldr	r3, [pc, #248]	@ (8003a88 <HAL_UART_MspInit+0x394>)
 800398e:	2200      	movs	r2, #0
 8003990:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003992:	4b3d      	ldr	r3, [pc, #244]	@ (8003a88 <HAL_UART_MspInit+0x394>)
 8003994:	2200      	movs	r2, #0
 8003996:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003998:	4b3b      	ldr	r3, [pc, #236]	@ (8003a88 <HAL_UART_MspInit+0x394>)
 800399a:	2200      	movs	r2, #0
 800399c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800399e:	4b3a      	ldr	r3, [pc, #232]	@ (8003a88 <HAL_UART_MspInit+0x394>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80039a4:	4b38      	ldr	r3, [pc, #224]	@ (8003a88 <HAL_UART_MspInit+0x394>)
 80039a6:	2200      	movs	r2, #0
 80039a8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80039aa:	4837      	ldr	r0, [pc, #220]	@ (8003a88 <HAL_UART_MspInit+0x394>)
 80039ac:	f000 fa98 	bl	8003ee0 <HAL_DMA_Init>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d001      	beq.n	80039ba <HAL_UART_MspInit+0x2c6>
      Error_Handler();
 80039b6:	f7fe fb9d 	bl	80020f4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a32      	ldr	r2, [pc, #200]	@ (8003a88 <HAL_UART_MspInit+0x394>)
 80039be:	63da      	str	r2, [r3, #60]	@ 0x3c
 80039c0:	4a31      	ldr	r2, [pc, #196]	@ (8003a88 <HAL_UART_MspInit+0x394>)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80039c6:	e101      	b.n	8003bcc <HAL_UART_MspInit+0x4d8>
  else if(uartHandle->Instance==USART3)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a30      	ldr	r2, [pc, #192]	@ (8003a90 <HAL_UART_MspInit+0x39c>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d164      	bne.n	8003a9c <HAL_UART_MspInit+0x3a8>
    __HAL_RCC_USART3_CLK_ENABLE();
 80039d2:	2300      	movs	r3, #0
 80039d4:	61fb      	str	r3, [r7, #28]
 80039d6:	4b2a      	ldr	r3, [pc, #168]	@ (8003a80 <HAL_UART_MspInit+0x38c>)
 80039d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039da:	4a29      	ldr	r2, [pc, #164]	@ (8003a80 <HAL_UART_MspInit+0x38c>)
 80039dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80039e2:	4b27      	ldr	r3, [pc, #156]	@ (8003a80 <HAL_UART_MspInit+0x38c>)
 80039e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80039ea:	61fb      	str	r3, [r7, #28]
 80039ec:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80039ee:	2300      	movs	r3, #0
 80039f0:	61bb      	str	r3, [r7, #24]
 80039f2:	4b23      	ldr	r3, [pc, #140]	@ (8003a80 <HAL_UART_MspInit+0x38c>)
 80039f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039f6:	4a22      	ldr	r2, [pc, #136]	@ (8003a80 <HAL_UART_MspInit+0x38c>)
 80039f8:	f043 0304 	orr.w	r3, r3, #4
 80039fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80039fe:	4b20      	ldr	r3, [pc, #128]	@ (8003a80 <HAL_UART_MspInit+0x38c>)
 8003a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a02:	f003 0304 	and.w	r3, r3, #4
 8003a06:	61bb      	str	r3, [r7, #24]
 8003a08:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	617b      	str	r3, [r7, #20]
 8003a0e:	4b1c      	ldr	r3, [pc, #112]	@ (8003a80 <HAL_UART_MspInit+0x38c>)
 8003a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a12:	4a1b      	ldr	r2, [pc, #108]	@ (8003a80 <HAL_UART_MspInit+0x38c>)
 8003a14:	f043 0302 	orr.w	r3, r3, #2
 8003a18:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a1a:	4b19      	ldr	r3, [pc, #100]	@ (8003a80 <HAL_UART_MspInit+0x38c>)
 8003a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a1e:	f003 0302 	and.w	r3, r3, #2
 8003a22:	617b      	str	r3, [r7, #20]
 8003a24:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = esp32_RX_Pin;
 8003a26:	2320      	movs	r3, #32
 8003a28:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a2a:	2302      	movs	r3, #2
 8003a2c:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a32:	2303      	movs	r3, #3
 8003a34:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003a36:	2307      	movs	r3, #7
 8003a38:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(esp32_RX_GPIO_Port, &GPIO_InitStruct);
 8003a3a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003a3e:	4619      	mov	r1, r3
 8003a40:	4814      	ldr	r0, [pc, #80]	@ (8003a94 <HAL_UART_MspInit+0x3a0>)
 8003a42:	f000 fe4f 	bl	80046e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = esp32_TX_Pin;
 8003a46:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a4c:	2302      	movs	r3, #2
 8003a4e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a50:	2300      	movs	r3, #0
 8003a52:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a54:	2303      	movs	r3, #3
 8003a56:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003a58:	2307      	movs	r3, #7
 8003a5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(esp32_TX_GPIO_Port, &GPIO_InitStruct);
 8003a5c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003a60:	4619      	mov	r1, r3
 8003a62:	480d      	ldr	r0, [pc, #52]	@ (8003a98 <HAL_UART_MspInit+0x3a4>)
 8003a64:	f000 fe3e 	bl	80046e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8003a68:	2200      	movs	r2, #0
 8003a6a:	2105      	movs	r1, #5
 8003a6c:	2027      	movs	r0, #39	@ 0x27
 8003a6e:	f000 fa0d 	bl	8003e8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003a72:	2027      	movs	r0, #39	@ 0x27
 8003a74:	f000 fa26 	bl	8003ec4 <HAL_NVIC_EnableIRQ>
}
 8003a78:	e0a8      	b.n	8003bcc <HAL_UART_MspInit+0x4d8>
 8003a7a:	bf00      	nop
 8003a7c:	40004400 	.word	0x40004400
 8003a80:	40023800 	.word	0x40023800
 8003a84:	40020000 	.word	0x40020000
 8003a88:	20008910 	.word	0x20008910
 8003a8c:	40026088 	.word	0x40026088
 8003a90:	40004800 	.word	0x40004800
 8003a94:	40020800 	.word	0x40020800
 8003a98:	40020400 	.word	0x40020400
  else if(uartHandle->Instance==USART6)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a4c      	ldr	r2, [pc, #304]	@ (8003bd4 <HAL_UART_MspInit+0x4e0>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	f040 8092 	bne.w	8003bcc <HAL_UART_MspInit+0x4d8>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	613b      	str	r3, [r7, #16]
 8003aac:	4b4a      	ldr	r3, [pc, #296]	@ (8003bd8 <HAL_UART_MspInit+0x4e4>)
 8003aae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ab0:	4a49      	ldr	r2, [pc, #292]	@ (8003bd8 <HAL_UART_MspInit+0x4e4>)
 8003ab2:	f043 0320 	orr.w	r3, r3, #32
 8003ab6:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ab8:	4b47      	ldr	r3, [pc, #284]	@ (8003bd8 <HAL_UART_MspInit+0x4e4>)
 8003aba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003abc:	f003 0320 	and.w	r3, r3, #32
 8003ac0:	613b      	str	r3, [r7, #16]
 8003ac2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	60fb      	str	r3, [r7, #12]
 8003ac8:	4b43      	ldr	r3, [pc, #268]	@ (8003bd8 <HAL_UART_MspInit+0x4e4>)
 8003aca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003acc:	4a42      	ldr	r2, [pc, #264]	@ (8003bd8 <HAL_UART_MspInit+0x4e4>)
 8003ace:	f043 0304 	orr.w	r3, r3, #4
 8003ad2:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ad4:	4b40      	ldr	r3, [pc, #256]	@ (8003bd8 <HAL_UART_MspInit+0x4e4>)
 8003ad6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ad8:	f003 0304 	and.w	r3, r3, #4
 8003adc:	60fb      	str	r3, [r7, #12]
 8003ade:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Micro_ROS_TX_Pin|Micro_ROS_RX_Pin;
 8003ae0:	23c0      	movs	r3, #192	@ 0xc0
 8003ae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003aec:	2303      	movs	r3, #3
 8003aee:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003af0:	2308      	movs	r3, #8
 8003af2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003af4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003af8:	4619      	mov	r1, r3
 8003afa:	4838      	ldr	r0, [pc, #224]	@ (8003bdc <HAL_UART_MspInit+0x4e8>)
 8003afc:	f000 fdf2 	bl	80046e4 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8003b00:	4b37      	ldr	r3, [pc, #220]	@ (8003be0 <HAL_UART_MspInit+0x4ec>)
 8003b02:	4a38      	ldr	r2, [pc, #224]	@ (8003be4 <HAL_UART_MspInit+0x4f0>)
 8003b04:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8003b06:	4b36      	ldr	r3, [pc, #216]	@ (8003be0 <HAL_UART_MspInit+0x4ec>)
 8003b08:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8003b0c:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b0e:	4b34      	ldr	r3, [pc, #208]	@ (8003be0 <HAL_UART_MspInit+0x4ec>)
 8003b10:	2200      	movs	r2, #0
 8003b12:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b14:	4b32      	ldr	r3, [pc, #200]	@ (8003be0 <HAL_UART_MspInit+0x4ec>)
 8003b16:	2200      	movs	r2, #0
 8003b18:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003b1a:	4b31      	ldr	r3, [pc, #196]	@ (8003be0 <HAL_UART_MspInit+0x4ec>)
 8003b1c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003b20:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b22:	4b2f      	ldr	r3, [pc, #188]	@ (8003be0 <HAL_UART_MspInit+0x4ec>)
 8003b24:	2200      	movs	r2, #0
 8003b26:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b28:	4b2d      	ldr	r3, [pc, #180]	@ (8003be0 <HAL_UART_MspInit+0x4ec>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8003b2e:	4b2c      	ldr	r3, [pc, #176]	@ (8003be0 <HAL_UART_MspInit+0x4ec>)
 8003b30:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003b34:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003b36:	4b2a      	ldr	r3, [pc, #168]	@ (8003be0 <HAL_UART_MspInit+0x4ec>)
 8003b38:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003b3c:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b3e:	4b28      	ldr	r3, [pc, #160]	@ (8003be0 <HAL_UART_MspInit+0x4ec>)
 8003b40:	2200      	movs	r2, #0
 8003b42:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8003b44:	4826      	ldr	r0, [pc, #152]	@ (8003be0 <HAL_UART_MspInit+0x4ec>)
 8003b46:	f000 f9cb 	bl	8003ee0 <HAL_DMA_Init>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d001      	beq.n	8003b54 <HAL_UART_MspInit+0x460>
      Error_Handler();
 8003b50:	f7fe fad0 	bl	80020f4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a22      	ldr	r2, [pc, #136]	@ (8003be0 <HAL_UART_MspInit+0x4ec>)
 8003b58:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003b5a:	4a21      	ldr	r2, [pc, #132]	@ (8003be0 <HAL_UART_MspInit+0x4ec>)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8003b60:	4b21      	ldr	r3, [pc, #132]	@ (8003be8 <HAL_UART_MspInit+0x4f4>)
 8003b62:	4a22      	ldr	r2, [pc, #136]	@ (8003bec <HAL_UART_MspInit+0x4f8>)
 8003b64:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8003b66:	4b20      	ldr	r3, [pc, #128]	@ (8003be8 <HAL_UART_MspInit+0x4f4>)
 8003b68:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8003b6c:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003b6e:	4b1e      	ldr	r3, [pc, #120]	@ (8003be8 <HAL_UART_MspInit+0x4f4>)
 8003b70:	2240      	movs	r2, #64	@ 0x40
 8003b72:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b74:	4b1c      	ldr	r3, [pc, #112]	@ (8003be8 <HAL_UART_MspInit+0x4f4>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003b7a:	4b1b      	ldr	r3, [pc, #108]	@ (8003be8 <HAL_UART_MspInit+0x4f4>)
 8003b7c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003b80:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b82:	4b19      	ldr	r3, [pc, #100]	@ (8003be8 <HAL_UART_MspInit+0x4f4>)
 8003b84:	2200      	movs	r2, #0
 8003b86:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b88:	4b17      	ldr	r3, [pc, #92]	@ (8003be8 <HAL_UART_MspInit+0x4f4>)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8003b8e:	4b16      	ldr	r3, [pc, #88]	@ (8003be8 <HAL_UART_MspInit+0x4f4>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003b94:	4b14      	ldr	r3, [pc, #80]	@ (8003be8 <HAL_UART_MspInit+0x4f4>)
 8003b96:	2200      	movs	r2, #0
 8003b98:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b9a:	4b13      	ldr	r3, [pc, #76]	@ (8003be8 <HAL_UART_MspInit+0x4f4>)
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8003ba0:	4811      	ldr	r0, [pc, #68]	@ (8003be8 <HAL_UART_MspInit+0x4f4>)
 8003ba2:	f000 f99d 	bl	8003ee0 <HAL_DMA_Init>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d001      	beq.n	8003bb0 <HAL_UART_MspInit+0x4bc>
      Error_Handler();
 8003bac:	f7fe faa2 	bl	80020f4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a0d      	ldr	r2, [pc, #52]	@ (8003be8 <HAL_UART_MspInit+0x4f4>)
 8003bb4:	639a      	str	r2, [r3, #56]	@ 0x38
 8003bb6:	4a0c      	ldr	r2, [pc, #48]	@ (8003be8 <HAL_UART_MspInit+0x4f4>)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	2105      	movs	r1, #5
 8003bc0:	2047      	movs	r0, #71	@ 0x47
 8003bc2:	f000 f963 	bl	8003e8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003bc6:	2047      	movs	r0, #71	@ 0x47
 8003bc8:	f000 f97c 	bl	8003ec4 <HAL_NVIC_EnableIRQ>
}
 8003bcc:	bf00      	nop
 8003bce:	3750      	adds	r7, #80	@ 0x50
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	40011400 	.word	0x40011400
 8003bd8:	40023800 	.word	0x40023800
 8003bdc:	40020800 	.word	0x40020800
 8003be0:	20008970 	.word	0x20008970
 8003be4:	40026428 	.word	0x40026428
 8003be8:	200089d0 	.word	0x200089d0
 8003bec:	400264a0 	.word	0x400264a0

08003bf0 <Publisher_state>:

extern rcl_publisher_t publisher_string_scan;
extern rcl_publisher_t publisher_string_pos;
extern UART_HandleTypeDef huart2;

void Publisher_state(){
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b088      	sub	sp, #32
 8003bf4:	af00      	add	r7, sp, #0
	std_msgs__msg__String msg;
	char str[20] = "finish";
 8003bf6:	4a11      	ldr	r2, [pc, #68]	@ (8003c3c <Publisher_state+0x4c>)
 8003bf8:	463b      	mov	r3, r7
 8003bfa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003bfe:	6018      	str	r0, [r3, #0]
 8003c00:	3304      	adds	r3, #4
 8003c02:	8019      	strh	r1, [r3, #0]
 8003c04:	3302      	adds	r3, #2
 8003c06:	0c0a      	lsrs	r2, r1, #16
 8003c08:	701a      	strb	r2, [r3, #0]
 8003c0a:	1dfb      	adds	r3, r7, #7
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	601a      	str	r2, [r3, #0]
 8003c10:	605a      	str	r2, [r3, #4]
 8003c12:	609a      	str	r2, [r3, #8]
 8003c14:	731a      	strb	r2, [r3, #12]
	msg.data.data = str;
 8003c16:	463b      	mov	r3, r7
 8003c18:	617b      	str	r3, [r7, #20]
	msg.data.size = strlen(str);
 8003c1a:	463b      	mov	r3, r7
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f7fc fb57 	bl	80002d0 <strlen>
 8003c22:	4603      	mov	r3, r0
 8003c24:	61bb      	str	r3, [r7, #24]
	rcl_publish(&publisher_string_scan, &msg, NULL);
 8003c26:	f107 0314 	add.w	r3, r7, #20
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	4804      	ldr	r0, [pc, #16]	@ (8003c40 <Publisher_state+0x50>)
 8003c30:	f006 fd56 	bl	800a6e0 <rcl_publish>
}
 8003c34:	bf00      	nop
 8003c36:	3720      	adds	r7, #32
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	08019f68 	.word	0x08019f68
 8003c40:	200046c4 	.word	0x200046c4

08003c44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003c44:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003c7c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003c48:	f7ff f8e8 	bl	8002e1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003c4c:	480c      	ldr	r0, [pc, #48]	@ (8003c80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003c4e:	490d      	ldr	r1, [pc, #52]	@ (8003c84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003c50:	4a0d      	ldr	r2, [pc, #52]	@ (8003c88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003c52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c54:	e002      	b.n	8003c5c <LoopCopyDataInit>

08003c56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c5a:	3304      	adds	r3, #4

08003c5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c60:	d3f9      	bcc.n	8003c56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c62:	4a0a      	ldr	r2, [pc, #40]	@ (8003c8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003c64:	4c0a      	ldr	r4, [pc, #40]	@ (8003c90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003c66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c68:	e001      	b.n	8003c6e <LoopFillZerobss>

08003c6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c6c:	3204      	adds	r2, #4

08003c6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c70:	d3fb      	bcc.n	8003c6a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003c72:	f014 f9a5 	bl	8017fc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c76:	f7fe f981 	bl	8001f7c <main>
  bx  lr    
 8003c7a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003c7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003c80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c84:	20000284 	.word	0x20000284
  ldr r2, =_sidata
 8003c88:	0801afe0 	.word	0x0801afe0
  ldr r2, =_sbss
 8003c8c:	20000288 	.word	0x20000288
  ldr r4, =_ebss
 8003c90:	20011450 	.word	0x20011450

08003c94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c94:	e7fe      	b.n	8003c94 <ADC_IRQHandler>
	...

08003c98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003c9c:	4b0e      	ldr	r3, [pc, #56]	@ (8003cd8 <HAL_Init+0x40>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a0d      	ldr	r2, [pc, #52]	@ (8003cd8 <HAL_Init+0x40>)
 8003ca2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003ca6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8003cd8 <HAL_Init+0x40>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a0a      	ldr	r2, [pc, #40]	@ (8003cd8 <HAL_Init+0x40>)
 8003cae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003cb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003cb4:	4b08      	ldr	r3, [pc, #32]	@ (8003cd8 <HAL_Init+0x40>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a07      	ldr	r2, [pc, #28]	@ (8003cd8 <HAL_Init+0x40>)
 8003cba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003cc0:	2003      	movs	r0, #3
 8003cc2:	f000 f8d8 	bl	8003e76 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003cc6:	200f      	movs	r0, #15
 8003cc8:	f7fe feda 	bl	8002a80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003ccc:	f7fe feac 	bl	8002a28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	40023c00 	.word	0x40023c00

08003cdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ce0:	4b06      	ldr	r3, [pc, #24]	@ (8003cfc <HAL_IncTick+0x20>)
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	4b06      	ldr	r3, [pc, #24]	@ (8003d00 <HAL_IncTick+0x24>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4413      	add	r3, r2
 8003cec:	4a04      	ldr	r2, [pc, #16]	@ (8003d00 <HAL_IncTick+0x24>)
 8003cee:	6013      	str	r3, [r2, #0]
}
 8003cf0:	bf00      	nop
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	20000014 	.word	0x20000014
 8003d00:	20008a30 	.word	0x20008a30

08003d04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d04:	b480      	push	{r7}
 8003d06:	af00      	add	r7, sp, #0
  return uwTick;
 8003d08:	4b03      	ldr	r3, [pc, #12]	@ (8003d18 <HAL_GetTick+0x14>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	20008a30 	.word	0x20008a30

08003d1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b085      	sub	sp, #20
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f003 0307 	and.w	r3, r3, #7
 8003d2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d2c:	4b0c      	ldr	r3, [pc, #48]	@ (8003d60 <__NVIC_SetPriorityGrouping+0x44>)
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d32:	68ba      	ldr	r2, [r7, #8]
 8003d34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003d38:	4013      	ands	r3, r2
 8003d3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003d48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d4e:	4a04      	ldr	r2, [pc, #16]	@ (8003d60 <__NVIC_SetPriorityGrouping+0x44>)
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	60d3      	str	r3, [r2, #12]
}
 8003d54:	bf00      	nop
 8003d56:	3714      	adds	r7, #20
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr
 8003d60:	e000ed00 	.word	0xe000ed00

08003d64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d64:	b480      	push	{r7}
 8003d66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d68:	4b04      	ldr	r3, [pc, #16]	@ (8003d7c <__NVIC_GetPriorityGrouping+0x18>)
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	0a1b      	lsrs	r3, r3, #8
 8003d6e:	f003 0307 	and.w	r3, r3, #7
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr
 8003d7c:	e000ed00 	.word	0xe000ed00

08003d80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	4603      	mov	r3, r0
 8003d88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	db0b      	blt.n	8003daa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d92:	79fb      	ldrb	r3, [r7, #7]
 8003d94:	f003 021f 	and.w	r2, r3, #31
 8003d98:	4907      	ldr	r1, [pc, #28]	@ (8003db8 <__NVIC_EnableIRQ+0x38>)
 8003d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d9e:	095b      	lsrs	r3, r3, #5
 8003da0:	2001      	movs	r0, #1
 8003da2:	fa00 f202 	lsl.w	r2, r0, r2
 8003da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003daa:	bf00      	nop
 8003dac:	370c      	adds	r7, #12
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop
 8003db8:	e000e100 	.word	0xe000e100

08003dbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	6039      	str	r1, [r7, #0]
 8003dc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	db0a      	blt.n	8003de6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	b2da      	uxtb	r2, r3
 8003dd4:	490c      	ldr	r1, [pc, #48]	@ (8003e08 <__NVIC_SetPriority+0x4c>)
 8003dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dda:	0112      	lsls	r2, r2, #4
 8003ddc:	b2d2      	uxtb	r2, r2
 8003dde:	440b      	add	r3, r1
 8003de0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003de4:	e00a      	b.n	8003dfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	b2da      	uxtb	r2, r3
 8003dea:	4908      	ldr	r1, [pc, #32]	@ (8003e0c <__NVIC_SetPriority+0x50>)
 8003dec:	79fb      	ldrb	r3, [r7, #7]
 8003dee:	f003 030f 	and.w	r3, r3, #15
 8003df2:	3b04      	subs	r3, #4
 8003df4:	0112      	lsls	r2, r2, #4
 8003df6:	b2d2      	uxtb	r2, r2
 8003df8:	440b      	add	r3, r1
 8003dfa:	761a      	strb	r2, [r3, #24]
}
 8003dfc:	bf00      	nop
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr
 8003e08:	e000e100 	.word	0xe000e100
 8003e0c:	e000ed00 	.word	0xe000ed00

08003e10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b089      	sub	sp, #36	@ 0x24
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f003 0307 	and.w	r3, r3, #7
 8003e22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	f1c3 0307 	rsb	r3, r3, #7
 8003e2a:	2b04      	cmp	r3, #4
 8003e2c:	bf28      	it	cs
 8003e2e:	2304      	movcs	r3, #4
 8003e30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	3304      	adds	r3, #4
 8003e36:	2b06      	cmp	r3, #6
 8003e38:	d902      	bls.n	8003e40 <NVIC_EncodePriority+0x30>
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	3b03      	subs	r3, #3
 8003e3e:	e000      	b.n	8003e42 <NVIC_EncodePriority+0x32>
 8003e40:	2300      	movs	r3, #0
 8003e42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e44:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4e:	43da      	mvns	r2, r3
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	401a      	ands	r2, r3
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e58:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e62:	43d9      	mvns	r1, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e68:	4313      	orrs	r3, r2
         );
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3724      	adds	r7, #36	@ 0x24
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr

08003e76 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e76:	b580      	push	{r7, lr}
 8003e78:	b082      	sub	sp, #8
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f7ff ff4c 	bl	8003d1c <__NVIC_SetPriorityGrouping>
}
 8003e84:	bf00      	nop
 8003e86:	3708      	adds	r7, #8
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b086      	sub	sp, #24
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	4603      	mov	r3, r0
 8003e94:	60b9      	str	r1, [r7, #8]
 8003e96:	607a      	str	r2, [r7, #4]
 8003e98:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e9e:	f7ff ff61 	bl	8003d64 <__NVIC_GetPriorityGrouping>
 8003ea2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	68b9      	ldr	r1, [r7, #8]
 8003ea8:	6978      	ldr	r0, [r7, #20]
 8003eaa:	f7ff ffb1 	bl	8003e10 <NVIC_EncodePriority>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003eb4:	4611      	mov	r1, r2
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f7ff ff80 	bl	8003dbc <__NVIC_SetPriority>
}
 8003ebc:	bf00      	nop
 8003ebe:	3718      	adds	r7, #24
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b082      	sub	sp, #8
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	4603      	mov	r3, r0
 8003ecc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f7ff ff54 	bl	8003d80 <__NVIC_EnableIRQ>
}
 8003ed8:	bf00      	nop
 8003eda:	3708      	adds	r7, #8
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b086      	sub	sp, #24
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003eec:	f7ff ff0a 	bl	8003d04 <HAL_GetTick>
 8003ef0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d101      	bne.n	8003efc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e099      	b.n	8004030 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2202      	movs	r2, #2
 8003f00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f022 0201 	bic.w	r2, r2, #1
 8003f1a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f1c:	e00f      	b.n	8003f3e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f1e:	f7ff fef1 	bl	8003d04 <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	2b05      	cmp	r3, #5
 8003f2a:	d908      	bls.n	8003f3e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2220      	movs	r2, #32
 8003f30:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2203      	movs	r2, #3
 8003f36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e078      	b.n	8004030 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0301 	and.w	r3, r3, #1
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d1e8      	bne.n	8003f1e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	4b38      	ldr	r3, [pc, #224]	@ (8004038 <HAL_DMA_Init+0x158>)
 8003f58:	4013      	ands	r3, r2
 8003f5a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685a      	ldr	r2, [r3, #4]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	691b      	ldr	r3, [r3, #16]
 8003f70:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f76:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	699b      	ldr	r3, [r3, #24]
 8003f7c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f82:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a1b      	ldr	r3, [r3, #32]
 8003f88:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f8a:	697a      	ldr	r2, [r7, #20]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f94:	2b04      	cmp	r3, #4
 8003f96:	d107      	bne.n	8003fa8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	697a      	ldr	r2, [r7, #20]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	697a      	ldr	r2, [r7, #20]
 8003fae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	695b      	ldr	r3, [r3, #20]
 8003fb6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	f023 0307 	bic.w	r3, r3, #7
 8003fbe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc4:	697a      	ldr	r2, [r7, #20]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fce:	2b04      	cmp	r3, #4
 8003fd0:	d117      	bne.n	8004002 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fd6:	697a      	ldr	r2, [r7, #20]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d00e      	beq.n	8004002 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f000 fb01 	bl	80045ec <DMA_CheckFifoParam>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d008      	beq.n	8004002 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2240      	movs	r2, #64	@ 0x40
 8003ff4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003ffe:	2301      	movs	r3, #1
 8004000:	e016      	b.n	8004030 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	697a      	ldr	r2, [r7, #20]
 8004008:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 fab8 	bl	8004580 <DMA_CalcBaseAndBitshift>
 8004010:	4603      	mov	r3, r0
 8004012:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004018:	223f      	movs	r2, #63	@ 0x3f
 800401a:	409a      	lsls	r2, r3
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2201      	movs	r2, #1
 800402a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800402e:	2300      	movs	r3, #0
}
 8004030:	4618      	mov	r0, r3
 8004032:	3718      	adds	r7, #24
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}
 8004038:	f010803f 	.word	0xf010803f

0800403c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b086      	sub	sp, #24
 8004040:	af00      	add	r7, sp, #0
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	60b9      	str	r1, [r7, #8]
 8004046:	607a      	str	r2, [r7, #4]
 8004048:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800404a:	2300      	movs	r3, #0
 800404c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004052:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800405a:	2b01      	cmp	r3, #1
 800405c:	d101      	bne.n	8004062 <HAL_DMA_Start_IT+0x26>
 800405e:	2302      	movs	r3, #2
 8004060:	e040      	b.n	80040e4 <HAL_DMA_Start_IT+0xa8>
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2201      	movs	r2, #1
 8004066:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004070:	b2db      	uxtb	r3, r3
 8004072:	2b01      	cmp	r3, #1
 8004074:	d12f      	bne.n	80040d6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2202      	movs	r2, #2
 800407a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2200      	movs	r2, #0
 8004082:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	68b9      	ldr	r1, [r7, #8]
 800408a:	68f8      	ldr	r0, [r7, #12]
 800408c:	f000 fa4a 	bl	8004524 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004094:	223f      	movs	r2, #63	@ 0x3f
 8004096:	409a      	lsls	r2, r3
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f042 0216 	orr.w	r2, r2, #22
 80040aa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d007      	beq.n	80040c4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f042 0208 	orr.w	r2, r2, #8
 80040c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f042 0201 	orr.w	r2, r2, #1
 80040d2:	601a      	str	r2, [r3, #0]
 80040d4:	e005      	b.n	80040e2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80040de:	2302      	movs	r3, #2
 80040e0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80040e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3718      	adds	r7, #24
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040f8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80040fa:	f7ff fe03 	bl	8003d04 <HAL_GetTick>
 80040fe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004106:	b2db      	uxtb	r3, r3
 8004108:	2b02      	cmp	r3, #2
 800410a:	d008      	beq.n	800411e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2280      	movs	r2, #128	@ 0x80
 8004110:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e052      	b.n	80041c4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f022 0216 	bic.w	r2, r2, #22
 800412c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	695a      	ldr	r2, [r3, #20]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800413c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004142:	2b00      	cmp	r3, #0
 8004144:	d103      	bne.n	800414e <HAL_DMA_Abort+0x62>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800414a:	2b00      	cmp	r3, #0
 800414c:	d007      	beq.n	800415e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f022 0208 	bic.w	r2, r2, #8
 800415c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f022 0201 	bic.w	r2, r2, #1
 800416c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800416e:	e013      	b.n	8004198 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004170:	f7ff fdc8 	bl	8003d04 <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	2b05      	cmp	r3, #5
 800417c:	d90c      	bls.n	8004198 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2220      	movs	r2, #32
 8004182:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2203      	movs	r2, #3
 8004188:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	e015      	b.n	80041c4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0301 	and.w	r3, r3, #1
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1e4      	bne.n	8004170 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041aa:	223f      	movs	r2, #63	@ 0x3f
 80041ac:	409a      	lsls	r2, r3
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2201      	movs	r2, #1
 80041b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80041c2:	2300      	movs	r3, #0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3710      	adds	r7, #16
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	2b02      	cmp	r3, #2
 80041de:	d004      	beq.n	80041ea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2280      	movs	r2, #128	@ 0x80
 80041e4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e00c      	b.n	8004204 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2205      	movs	r2, #5
 80041ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f022 0201 	bic.w	r2, r2, #1
 8004200:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004202:	2300      	movs	r3, #0
}
 8004204:	4618      	mov	r0, r3
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr

08004210 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b086      	sub	sp, #24
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004218:	2300      	movs	r3, #0
 800421a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800421c:	4b8e      	ldr	r3, [pc, #568]	@ (8004458 <HAL_DMA_IRQHandler+0x248>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a8e      	ldr	r2, [pc, #568]	@ (800445c <HAL_DMA_IRQHandler+0x24c>)
 8004222:	fba2 2303 	umull	r2, r3, r2, r3
 8004226:	0a9b      	lsrs	r3, r3, #10
 8004228:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800422e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800423a:	2208      	movs	r2, #8
 800423c:	409a      	lsls	r2, r3
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	4013      	ands	r3, r2
 8004242:	2b00      	cmp	r3, #0
 8004244:	d01a      	beq.n	800427c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0304 	and.w	r3, r3, #4
 8004250:	2b00      	cmp	r3, #0
 8004252:	d013      	beq.n	800427c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f022 0204 	bic.w	r2, r2, #4
 8004262:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004268:	2208      	movs	r2, #8
 800426a:	409a      	lsls	r2, r3
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004274:	f043 0201 	orr.w	r2, r3, #1
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004280:	2201      	movs	r2, #1
 8004282:	409a      	lsls	r2, r3
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	4013      	ands	r3, r2
 8004288:	2b00      	cmp	r3, #0
 800428a:	d012      	beq.n	80042b2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004296:	2b00      	cmp	r3, #0
 8004298:	d00b      	beq.n	80042b2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800429e:	2201      	movs	r2, #1
 80042a0:	409a      	lsls	r2, r3
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042aa:	f043 0202 	orr.w	r2, r3, #2
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042b6:	2204      	movs	r2, #4
 80042b8:	409a      	lsls	r2, r3
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	4013      	ands	r3, r2
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d012      	beq.n	80042e8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0302 	and.w	r3, r3, #2
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d00b      	beq.n	80042e8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042d4:	2204      	movs	r2, #4
 80042d6:	409a      	lsls	r2, r3
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042e0:	f043 0204 	orr.w	r2, r3, #4
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042ec:	2210      	movs	r2, #16
 80042ee:	409a      	lsls	r2, r3
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	4013      	ands	r3, r2
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d043      	beq.n	8004380 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0308 	and.w	r3, r3, #8
 8004302:	2b00      	cmp	r3, #0
 8004304:	d03c      	beq.n	8004380 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800430a:	2210      	movs	r2, #16
 800430c:	409a      	lsls	r2, r3
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d018      	beq.n	8004352 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d108      	bne.n	8004340 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004332:	2b00      	cmp	r3, #0
 8004334:	d024      	beq.n	8004380 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	4798      	blx	r3
 800433e:	e01f      	b.n	8004380 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004344:	2b00      	cmp	r3, #0
 8004346:	d01b      	beq.n	8004380 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	4798      	blx	r3
 8004350:	e016      	b.n	8004380 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800435c:	2b00      	cmp	r3, #0
 800435e:	d107      	bne.n	8004370 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f022 0208 	bic.w	r2, r2, #8
 800436e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004374:	2b00      	cmp	r3, #0
 8004376:	d003      	beq.n	8004380 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004384:	2220      	movs	r2, #32
 8004386:	409a      	lsls	r2, r3
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	4013      	ands	r3, r2
 800438c:	2b00      	cmp	r3, #0
 800438e:	f000 808f 	beq.w	80044b0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0310 	and.w	r3, r3, #16
 800439c:	2b00      	cmp	r3, #0
 800439e:	f000 8087 	beq.w	80044b0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043a6:	2220      	movs	r2, #32
 80043a8:	409a      	lsls	r2, r3
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	2b05      	cmp	r3, #5
 80043b8:	d136      	bne.n	8004428 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f022 0216 	bic.w	r2, r2, #22
 80043c8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	695a      	ldr	r2, [r3, #20]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80043d8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d103      	bne.n	80043ea <HAL_DMA_IRQHandler+0x1da>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d007      	beq.n	80043fa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f022 0208 	bic.w	r2, r2, #8
 80043f8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043fe:	223f      	movs	r2, #63	@ 0x3f
 8004400:	409a      	lsls	r2, r3
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2201      	movs	r2, #1
 800440a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800441a:	2b00      	cmp	r3, #0
 800441c:	d07e      	beq.n	800451c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	4798      	blx	r3
        }
        return;
 8004426:	e079      	b.n	800451c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d01d      	beq.n	8004472 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d10d      	bne.n	8004460 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004448:	2b00      	cmp	r3, #0
 800444a:	d031      	beq.n	80044b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	4798      	blx	r3
 8004454:	e02c      	b.n	80044b0 <HAL_DMA_IRQHandler+0x2a0>
 8004456:	bf00      	nop
 8004458:	20000004 	.word	0x20000004
 800445c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004464:	2b00      	cmp	r3, #0
 8004466:	d023      	beq.n	80044b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	4798      	blx	r3
 8004470:	e01e      	b.n	80044b0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800447c:	2b00      	cmp	r3, #0
 800447e:	d10f      	bne.n	80044a0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f022 0210 	bic.w	r2, r2, #16
 800448e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d003      	beq.n	80044b0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d032      	beq.n	800451e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044bc:	f003 0301 	and.w	r3, r3, #1
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d022      	beq.n	800450a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2205      	movs	r2, #5
 80044c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f022 0201 	bic.w	r2, r2, #1
 80044da:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	3301      	adds	r3, #1
 80044e0:	60bb      	str	r3, [r7, #8]
 80044e2:	697a      	ldr	r2, [r7, #20]
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d307      	bcc.n	80044f8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0301 	and.w	r3, r3, #1
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d1f2      	bne.n	80044dc <HAL_DMA_IRQHandler+0x2cc>
 80044f6:	e000      	b.n	80044fa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80044f8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2201      	movs	r2, #1
 80044fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800450e:	2b00      	cmp	r3, #0
 8004510:	d005      	beq.n	800451e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	4798      	blx	r3
 800451a:	e000      	b.n	800451e <HAL_DMA_IRQHandler+0x30e>
        return;
 800451c:	bf00      	nop
    }
  }
}
 800451e:	3718      	adds	r7, #24
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}

08004524 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004524:	b480      	push	{r7}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
 800452a:	60f8      	str	r0, [r7, #12]
 800452c:	60b9      	str	r1, [r7, #8]
 800452e:	607a      	str	r2, [r7, #4]
 8004530:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004540:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	683a      	ldr	r2, [r7, #0]
 8004548:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	2b40      	cmp	r3, #64	@ 0x40
 8004550:	d108      	bne.n	8004564 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68ba      	ldr	r2, [r7, #8]
 8004560:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004562:	e007      	b.n	8004574 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	68ba      	ldr	r2, [r7, #8]
 800456a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	60da      	str	r2, [r3, #12]
}
 8004574:	bf00      	nop
 8004576:	3714      	adds	r7, #20
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr

08004580 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004580:	b480      	push	{r7}
 8004582:	b085      	sub	sp, #20
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	b2db      	uxtb	r3, r3
 800458e:	3b10      	subs	r3, #16
 8004590:	4a14      	ldr	r2, [pc, #80]	@ (80045e4 <DMA_CalcBaseAndBitshift+0x64>)
 8004592:	fba2 2303 	umull	r2, r3, r2, r3
 8004596:	091b      	lsrs	r3, r3, #4
 8004598:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800459a:	4a13      	ldr	r2, [pc, #76]	@ (80045e8 <DMA_CalcBaseAndBitshift+0x68>)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	4413      	add	r3, r2
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	461a      	mov	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2b03      	cmp	r3, #3
 80045ac:	d909      	bls.n	80045c2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80045b6:	f023 0303 	bic.w	r3, r3, #3
 80045ba:	1d1a      	adds	r2, r3, #4
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	659a      	str	r2, [r3, #88]	@ 0x58
 80045c0:	e007      	b.n	80045d2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80045ca:	f023 0303 	bic.w	r3, r3, #3
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3714      	adds	r7, #20
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	aaaaaaab 	.word	0xaaaaaaab
 80045e8:	08019fc0 	.word	0x08019fc0

080045ec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b085      	sub	sp, #20
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045f4:	2300      	movs	r3, #0
 80045f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045fc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	699b      	ldr	r3, [r3, #24]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d11f      	bne.n	8004646 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	2b03      	cmp	r3, #3
 800460a:	d856      	bhi.n	80046ba <DMA_CheckFifoParam+0xce>
 800460c:	a201      	add	r2, pc, #4	@ (adr r2, 8004614 <DMA_CheckFifoParam+0x28>)
 800460e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004612:	bf00      	nop
 8004614:	08004625 	.word	0x08004625
 8004618:	08004637 	.word	0x08004637
 800461c:	08004625 	.word	0x08004625
 8004620:	080046bb 	.word	0x080046bb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004628:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d046      	beq.n	80046be <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004634:	e043      	b.n	80046be <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800463a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800463e:	d140      	bne.n	80046c2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004644:	e03d      	b.n	80046c2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	699b      	ldr	r3, [r3, #24]
 800464a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800464e:	d121      	bne.n	8004694 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	2b03      	cmp	r3, #3
 8004654:	d837      	bhi.n	80046c6 <DMA_CheckFifoParam+0xda>
 8004656:	a201      	add	r2, pc, #4	@ (adr r2, 800465c <DMA_CheckFifoParam+0x70>)
 8004658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800465c:	0800466d 	.word	0x0800466d
 8004660:	08004673 	.word	0x08004673
 8004664:	0800466d 	.word	0x0800466d
 8004668:	08004685 	.word	0x08004685
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	73fb      	strb	r3, [r7, #15]
      break;
 8004670:	e030      	b.n	80046d4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004676:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d025      	beq.n	80046ca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004682:	e022      	b.n	80046ca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004688:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800468c:	d11f      	bne.n	80046ce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004692:	e01c      	b.n	80046ce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	2b02      	cmp	r3, #2
 8004698:	d903      	bls.n	80046a2 <DMA_CheckFifoParam+0xb6>
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	2b03      	cmp	r3, #3
 800469e:	d003      	beq.n	80046a8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80046a0:	e018      	b.n	80046d4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	73fb      	strb	r3, [r7, #15]
      break;
 80046a6:	e015      	b.n	80046d4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d00e      	beq.n	80046d2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	73fb      	strb	r3, [r7, #15]
      break;
 80046b8:	e00b      	b.n	80046d2 <DMA_CheckFifoParam+0xe6>
      break;
 80046ba:	bf00      	nop
 80046bc:	e00a      	b.n	80046d4 <DMA_CheckFifoParam+0xe8>
      break;
 80046be:	bf00      	nop
 80046c0:	e008      	b.n	80046d4 <DMA_CheckFifoParam+0xe8>
      break;
 80046c2:	bf00      	nop
 80046c4:	e006      	b.n	80046d4 <DMA_CheckFifoParam+0xe8>
      break;
 80046c6:	bf00      	nop
 80046c8:	e004      	b.n	80046d4 <DMA_CheckFifoParam+0xe8>
      break;
 80046ca:	bf00      	nop
 80046cc:	e002      	b.n	80046d4 <DMA_CheckFifoParam+0xe8>
      break;   
 80046ce:	bf00      	nop
 80046d0:	e000      	b.n	80046d4 <DMA_CheckFifoParam+0xe8>
      break;
 80046d2:	bf00      	nop
    }
  } 
  
  return status; 
 80046d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3714      	adds	r7, #20
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop

080046e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b089      	sub	sp, #36	@ 0x24
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80046ee:	2300      	movs	r3, #0
 80046f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80046f2:	2300      	movs	r3, #0
 80046f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80046f6:	2300      	movs	r3, #0
 80046f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046fa:	2300      	movs	r3, #0
 80046fc:	61fb      	str	r3, [r7, #28]
 80046fe:	e165      	b.n	80049cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004700:	2201      	movs	r2, #1
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	fa02 f303 	lsl.w	r3, r2, r3
 8004708:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	697a      	ldr	r2, [r7, #20]
 8004710:	4013      	ands	r3, r2
 8004712:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004714:	693a      	ldr	r2, [r7, #16]
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	429a      	cmp	r2, r3
 800471a:	f040 8154 	bne.w	80049c6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f003 0303 	and.w	r3, r3, #3
 8004726:	2b01      	cmp	r3, #1
 8004728:	d005      	beq.n	8004736 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004732:	2b02      	cmp	r3, #2
 8004734:	d130      	bne.n	8004798 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	005b      	lsls	r3, r3, #1
 8004740:	2203      	movs	r2, #3
 8004742:	fa02 f303 	lsl.w	r3, r2, r3
 8004746:	43db      	mvns	r3, r3
 8004748:	69ba      	ldr	r2, [r7, #24]
 800474a:	4013      	ands	r3, r2
 800474c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	68da      	ldr	r2, [r3, #12]
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	005b      	lsls	r3, r3, #1
 8004756:	fa02 f303 	lsl.w	r3, r2, r3
 800475a:	69ba      	ldr	r2, [r7, #24]
 800475c:	4313      	orrs	r3, r2
 800475e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	69ba      	ldr	r2, [r7, #24]
 8004764:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800476c:	2201      	movs	r2, #1
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	fa02 f303 	lsl.w	r3, r2, r3
 8004774:	43db      	mvns	r3, r3
 8004776:	69ba      	ldr	r2, [r7, #24]
 8004778:	4013      	ands	r3, r2
 800477a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	091b      	lsrs	r3, r3, #4
 8004782:	f003 0201 	and.w	r2, r3, #1
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	fa02 f303 	lsl.w	r3, r2, r3
 800478c:	69ba      	ldr	r2, [r7, #24]
 800478e:	4313      	orrs	r3, r2
 8004790:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	69ba      	ldr	r2, [r7, #24]
 8004796:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	f003 0303 	and.w	r3, r3, #3
 80047a0:	2b03      	cmp	r3, #3
 80047a2:	d017      	beq.n	80047d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	005b      	lsls	r3, r3, #1
 80047ae:	2203      	movs	r2, #3
 80047b0:	fa02 f303 	lsl.w	r3, r2, r3
 80047b4:	43db      	mvns	r3, r3
 80047b6:	69ba      	ldr	r2, [r7, #24]
 80047b8:	4013      	ands	r3, r2
 80047ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	689a      	ldr	r2, [r3, #8]
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	005b      	lsls	r3, r3, #1
 80047c4:	fa02 f303 	lsl.w	r3, r2, r3
 80047c8:	69ba      	ldr	r2, [r7, #24]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	69ba      	ldr	r2, [r7, #24]
 80047d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	f003 0303 	and.w	r3, r3, #3
 80047dc:	2b02      	cmp	r3, #2
 80047de:	d123      	bne.n	8004828 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	08da      	lsrs	r2, r3, #3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	3208      	adds	r2, #8
 80047e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	f003 0307 	and.w	r3, r3, #7
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	220f      	movs	r2, #15
 80047f8:	fa02 f303 	lsl.w	r3, r2, r3
 80047fc:	43db      	mvns	r3, r3
 80047fe:	69ba      	ldr	r2, [r7, #24]
 8004800:	4013      	ands	r3, r2
 8004802:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	691a      	ldr	r2, [r3, #16]
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	f003 0307 	and.w	r3, r3, #7
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	fa02 f303 	lsl.w	r3, r2, r3
 8004814:	69ba      	ldr	r2, [r7, #24]
 8004816:	4313      	orrs	r3, r2
 8004818:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	08da      	lsrs	r2, r3, #3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	3208      	adds	r2, #8
 8004822:	69b9      	ldr	r1, [r7, #24]
 8004824:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	005b      	lsls	r3, r3, #1
 8004832:	2203      	movs	r2, #3
 8004834:	fa02 f303 	lsl.w	r3, r2, r3
 8004838:	43db      	mvns	r3, r3
 800483a:	69ba      	ldr	r2, [r7, #24]
 800483c:	4013      	ands	r3, r2
 800483e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	f003 0203 	and.w	r2, r3, #3
 8004848:	69fb      	ldr	r3, [r7, #28]
 800484a:	005b      	lsls	r3, r3, #1
 800484c:	fa02 f303 	lsl.w	r3, r2, r3
 8004850:	69ba      	ldr	r2, [r7, #24]
 8004852:	4313      	orrs	r3, r2
 8004854:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	69ba      	ldr	r2, [r7, #24]
 800485a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004864:	2b00      	cmp	r3, #0
 8004866:	f000 80ae 	beq.w	80049c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800486a:	2300      	movs	r3, #0
 800486c:	60fb      	str	r3, [r7, #12]
 800486e:	4b5d      	ldr	r3, [pc, #372]	@ (80049e4 <HAL_GPIO_Init+0x300>)
 8004870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004872:	4a5c      	ldr	r2, [pc, #368]	@ (80049e4 <HAL_GPIO_Init+0x300>)
 8004874:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004878:	6453      	str	r3, [r2, #68]	@ 0x44
 800487a:	4b5a      	ldr	r3, [pc, #360]	@ (80049e4 <HAL_GPIO_Init+0x300>)
 800487c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800487e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004882:	60fb      	str	r3, [r7, #12]
 8004884:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004886:	4a58      	ldr	r2, [pc, #352]	@ (80049e8 <HAL_GPIO_Init+0x304>)
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	089b      	lsrs	r3, r3, #2
 800488c:	3302      	adds	r3, #2
 800488e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004892:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	f003 0303 	and.w	r3, r3, #3
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	220f      	movs	r2, #15
 800489e:	fa02 f303 	lsl.w	r3, r2, r3
 80048a2:	43db      	mvns	r3, r3
 80048a4:	69ba      	ldr	r2, [r7, #24]
 80048a6:	4013      	ands	r3, r2
 80048a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a4f      	ldr	r2, [pc, #316]	@ (80049ec <HAL_GPIO_Init+0x308>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d025      	beq.n	80048fe <HAL_GPIO_Init+0x21a>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a4e      	ldr	r2, [pc, #312]	@ (80049f0 <HAL_GPIO_Init+0x30c>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d01f      	beq.n	80048fa <HAL_GPIO_Init+0x216>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a4d      	ldr	r2, [pc, #308]	@ (80049f4 <HAL_GPIO_Init+0x310>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d019      	beq.n	80048f6 <HAL_GPIO_Init+0x212>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a4c      	ldr	r2, [pc, #304]	@ (80049f8 <HAL_GPIO_Init+0x314>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d013      	beq.n	80048f2 <HAL_GPIO_Init+0x20e>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a4b      	ldr	r2, [pc, #300]	@ (80049fc <HAL_GPIO_Init+0x318>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d00d      	beq.n	80048ee <HAL_GPIO_Init+0x20a>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a4a      	ldr	r2, [pc, #296]	@ (8004a00 <HAL_GPIO_Init+0x31c>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d007      	beq.n	80048ea <HAL_GPIO_Init+0x206>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a49      	ldr	r2, [pc, #292]	@ (8004a04 <HAL_GPIO_Init+0x320>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d101      	bne.n	80048e6 <HAL_GPIO_Init+0x202>
 80048e2:	2306      	movs	r3, #6
 80048e4:	e00c      	b.n	8004900 <HAL_GPIO_Init+0x21c>
 80048e6:	2307      	movs	r3, #7
 80048e8:	e00a      	b.n	8004900 <HAL_GPIO_Init+0x21c>
 80048ea:	2305      	movs	r3, #5
 80048ec:	e008      	b.n	8004900 <HAL_GPIO_Init+0x21c>
 80048ee:	2304      	movs	r3, #4
 80048f0:	e006      	b.n	8004900 <HAL_GPIO_Init+0x21c>
 80048f2:	2303      	movs	r3, #3
 80048f4:	e004      	b.n	8004900 <HAL_GPIO_Init+0x21c>
 80048f6:	2302      	movs	r3, #2
 80048f8:	e002      	b.n	8004900 <HAL_GPIO_Init+0x21c>
 80048fa:	2301      	movs	r3, #1
 80048fc:	e000      	b.n	8004900 <HAL_GPIO_Init+0x21c>
 80048fe:	2300      	movs	r3, #0
 8004900:	69fa      	ldr	r2, [r7, #28]
 8004902:	f002 0203 	and.w	r2, r2, #3
 8004906:	0092      	lsls	r2, r2, #2
 8004908:	4093      	lsls	r3, r2
 800490a:	69ba      	ldr	r2, [r7, #24]
 800490c:	4313      	orrs	r3, r2
 800490e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004910:	4935      	ldr	r1, [pc, #212]	@ (80049e8 <HAL_GPIO_Init+0x304>)
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	089b      	lsrs	r3, r3, #2
 8004916:	3302      	adds	r3, #2
 8004918:	69ba      	ldr	r2, [r7, #24]
 800491a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800491e:	4b3a      	ldr	r3, [pc, #232]	@ (8004a08 <HAL_GPIO_Init+0x324>)
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	43db      	mvns	r3, r3
 8004928:	69ba      	ldr	r2, [r7, #24]
 800492a:	4013      	ands	r3, r2
 800492c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d003      	beq.n	8004942 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800493a:	69ba      	ldr	r2, [r7, #24]
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	4313      	orrs	r3, r2
 8004940:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004942:	4a31      	ldr	r2, [pc, #196]	@ (8004a08 <HAL_GPIO_Init+0x324>)
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004948:	4b2f      	ldr	r3, [pc, #188]	@ (8004a08 <HAL_GPIO_Init+0x324>)
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	43db      	mvns	r3, r3
 8004952:	69ba      	ldr	r2, [r7, #24]
 8004954:	4013      	ands	r3, r2
 8004956:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004960:	2b00      	cmp	r3, #0
 8004962:	d003      	beq.n	800496c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004964:	69ba      	ldr	r2, [r7, #24]
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	4313      	orrs	r3, r2
 800496a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800496c:	4a26      	ldr	r2, [pc, #152]	@ (8004a08 <HAL_GPIO_Init+0x324>)
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004972:	4b25      	ldr	r3, [pc, #148]	@ (8004a08 <HAL_GPIO_Init+0x324>)
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	43db      	mvns	r3, r3
 800497c:	69ba      	ldr	r2, [r7, #24]
 800497e:	4013      	ands	r3, r2
 8004980:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d003      	beq.n	8004996 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800498e:	69ba      	ldr	r2, [r7, #24]
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	4313      	orrs	r3, r2
 8004994:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004996:	4a1c      	ldr	r2, [pc, #112]	@ (8004a08 <HAL_GPIO_Init+0x324>)
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800499c:	4b1a      	ldr	r3, [pc, #104]	@ (8004a08 <HAL_GPIO_Init+0x324>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	43db      	mvns	r3, r3
 80049a6:	69ba      	ldr	r2, [r7, #24]
 80049a8:	4013      	ands	r3, r2
 80049aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d003      	beq.n	80049c0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80049b8:	69ba      	ldr	r2, [r7, #24]
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	4313      	orrs	r3, r2
 80049be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80049c0:	4a11      	ldr	r2, [pc, #68]	@ (8004a08 <HAL_GPIO_Init+0x324>)
 80049c2:	69bb      	ldr	r3, [r7, #24]
 80049c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	3301      	adds	r3, #1
 80049ca:	61fb      	str	r3, [r7, #28]
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	2b0f      	cmp	r3, #15
 80049d0:	f67f ae96 	bls.w	8004700 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80049d4:	bf00      	nop
 80049d6:	bf00      	nop
 80049d8:	3724      	adds	r7, #36	@ 0x24
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	40023800 	.word	0x40023800
 80049e8:	40013800 	.word	0x40013800
 80049ec:	40020000 	.word	0x40020000
 80049f0:	40020400 	.word	0x40020400
 80049f4:	40020800 	.word	0x40020800
 80049f8:	40020c00 	.word	0x40020c00
 80049fc:	40021000 	.word	0x40021000
 8004a00:	40021400 	.word	0x40021400
 8004a04:	40021800 	.word	0x40021800
 8004a08:	40013c00 	.word	0x40013c00

08004a0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	460b      	mov	r3, r1
 8004a16:	807b      	strh	r3, [r7, #2]
 8004a18:	4613      	mov	r3, r2
 8004a1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a1c:	787b      	ldrb	r3, [r7, #1]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d003      	beq.n	8004a2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a22:	887a      	ldrh	r2, [r7, #2]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004a28:	e003      	b.n	8004a32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a2a:	887b      	ldrh	r3, [r7, #2]
 8004a2c:	041a      	lsls	r2, r3, #16
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	619a      	str	r2, [r3, #24]
}
 8004a32:	bf00      	nop
 8004a34:	370c      	adds	r7, #12
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
	...

08004a40 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b082      	sub	sp, #8
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	4603      	mov	r3, r0
 8004a48:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004a4a:	4b08      	ldr	r3, [pc, #32]	@ (8004a6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a4c:	695a      	ldr	r2, [r3, #20]
 8004a4e:	88fb      	ldrh	r3, [r7, #6]
 8004a50:	4013      	ands	r3, r2
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d006      	beq.n	8004a64 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004a56:	4a05      	ldr	r2, [pc, #20]	@ (8004a6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a58:	88fb      	ldrh	r3, [r7, #6]
 8004a5a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004a5c:	88fb      	ldrh	r3, [r7, #6]
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f7fd fa32 	bl	8001ec8 <HAL_GPIO_EXTI_Callback>
  }
}
 8004a64:	bf00      	nop
 8004a66:	3708      	adds	r7, #8
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	40013c00 	.word	0x40013c00

08004a70 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b082      	sub	sp, #8
 8004a74:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004a76:	2300      	movs	r3, #0
 8004a78:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	603b      	str	r3, [r7, #0]
 8004a7e:	4b20      	ldr	r3, [pc, #128]	@ (8004b00 <HAL_PWREx_EnableOverDrive+0x90>)
 8004a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a82:	4a1f      	ldr	r2, [pc, #124]	@ (8004b00 <HAL_PWREx_EnableOverDrive+0x90>)
 8004a84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a88:	6413      	str	r3, [r2, #64]	@ 0x40
 8004a8a:	4b1d      	ldr	r3, [pc, #116]	@ (8004b00 <HAL_PWREx_EnableOverDrive+0x90>)
 8004a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a92:	603b      	str	r3, [r7, #0]
 8004a94:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004a96:	4b1b      	ldr	r3, [pc, #108]	@ (8004b04 <HAL_PWREx_EnableOverDrive+0x94>)
 8004a98:	2201      	movs	r2, #1
 8004a9a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a9c:	f7ff f932 	bl	8003d04 <HAL_GetTick>
 8004aa0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004aa2:	e009      	b.n	8004ab8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004aa4:	f7ff f92e 	bl	8003d04 <HAL_GetTick>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004ab2:	d901      	bls.n	8004ab8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004ab4:	2303      	movs	r3, #3
 8004ab6:	e01f      	b.n	8004af8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004ab8:	4b13      	ldr	r3, [pc, #76]	@ (8004b08 <HAL_PWREx_EnableOverDrive+0x98>)
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ac0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ac4:	d1ee      	bne.n	8004aa4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004ac6:	4b11      	ldr	r3, [pc, #68]	@ (8004b0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ac8:	2201      	movs	r2, #1
 8004aca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004acc:	f7ff f91a 	bl	8003d04 <HAL_GetTick>
 8004ad0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004ad2:	e009      	b.n	8004ae8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004ad4:	f7ff f916 	bl	8003d04 <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004ae2:	d901      	bls.n	8004ae8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	e007      	b.n	8004af8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004ae8:	4b07      	ldr	r3, [pc, #28]	@ (8004b08 <HAL_PWREx_EnableOverDrive+0x98>)
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004af0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004af4:	d1ee      	bne.n	8004ad4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004af6:	2300      	movs	r3, #0
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3708      	adds	r7, #8
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	40023800 	.word	0x40023800
 8004b04:	420e0040 	.word	0x420e0040
 8004b08:	40007000 	.word	0x40007000
 8004b0c:	420e0044 	.word	0x420e0044

08004b10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d101      	bne.n	8004b24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e0cc      	b.n	8004cbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b24:	4b68      	ldr	r3, [pc, #416]	@ (8004cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 030f 	and.w	r3, r3, #15
 8004b2c:	683a      	ldr	r2, [r7, #0]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d90c      	bls.n	8004b4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b32:	4b65      	ldr	r3, [pc, #404]	@ (8004cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b34:	683a      	ldr	r2, [r7, #0]
 8004b36:	b2d2      	uxtb	r2, r2
 8004b38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b3a:	4b63      	ldr	r3, [pc, #396]	@ (8004cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 030f 	and.w	r3, r3, #15
 8004b42:	683a      	ldr	r2, [r7, #0]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d001      	beq.n	8004b4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e0b8      	b.n	8004cbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0302 	and.w	r3, r3, #2
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d020      	beq.n	8004b9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 0304 	and.w	r3, r3, #4
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d005      	beq.n	8004b70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b64:	4b59      	ldr	r3, [pc, #356]	@ (8004ccc <HAL_RCC_ClockConfig+0x1bc>)
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	4a58      	ldr	r2, [pc, #352]	@ (8004ccc <HAL_RCC_ClockConfig+0x1bc>)
 8004b6a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004b6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 0308 	and.w	r3, r3, #8
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d005      	beq.n	8004b88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b7c:	4b53      	ldr	r3, [pc, #332]	@ (8004ccc <HAL_RCC_ClockConfig+0x1bc>)
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	4a52      	ldr	r2, [pc, #328]	@ (8004ccc <HAL_RCC_ClockConfig+0x1bc>)
 8004b82:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004b86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b88:	4b50      	ldr	r3, [pc, #320]	@ (8004ccc <HAL_RCC_ClockConfig+0x1bc>)
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	494d      	ldr	r1, [pc, #308]	@ (8004ccc <HAL_RCC_ClockConfig+0x1bc>)
 8004b96:	4313      	orrs	r3, r2
 8004b98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0301 	and.w	r3, r3, #1
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d044      	beq.n	8004c30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d107      	bne.n	8004bbe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bae:	4b47      	ldr	r3, [pc, #284]	@ (8004ccc <HAL_RCC_ClockConfig+0x1bc>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d119      	bne.n	8004bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e07f      	b.n	8004cbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d003      	beq.n	8004bce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bca:	2b03      	cmp	r3, #3
 8004bcc:	d107      	bne.n	8004bde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bce:	4b3f      	ldr	r3, [pc, #252]	@ (8004ccc <HAL_RCC_ClockConfig+0x1bc>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d109      	bne.n	8004bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e06f      	b.n	8004cbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bde:	4b3b      	ldr	r3, [pc, #236]	@ (8004ccc <HAL_RCC_ClockConfig+0x1bc>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0302 	and.w	r3, r3, #2
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d101      	bne.n	8004bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e067      	b.n	8004cbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bee:	4b37      	ldr	r3, [pc, #220]	@ (8004ccc <HAL_RCC_ClockConfig+0x1bc>)
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	f023 0203 	bic.w	r2, r3, #3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	4934      	ldr	r1, [pc, #208]	@ (8004ccc <HAL_RCC_ClockConfig+0x1bc>)
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c00:	f7ff f880 	bl	8003d04 <HAL_GetTick>
 8004c04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c06:	e00a      	b.n	8004c1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c08:	f7ff f87c 	bl	8003d04 <HAL_GetTick>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d901      	bls.n	8004c1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e04f      	b.n	8004cbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c1e:	4b2b      	ldr	r3, [pc, #172]	@ (8004ccc <HAL_RCC_ClockConfig+0x1bc>)
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	f003 020c 	and.w	r2, r3, #12
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d1eb      	bne.n	8004c08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c30:	4b25      	ldr	r3, [pc, #148]	@ (8004cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 030f 	and.w	r3, r3, #15
 8004c38:	683a      	ldr	r2, [r7, #0]
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d20c      	bcs.n	8004c58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c3e:	4b22      	ldr	r3, [pc, #136]	@ (8004cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c40:	683a      	ldr	r2, [r7, #0]
 8004c42:	b2d2      	uxtb	r2, r2
 8004c44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c46:	4b20      	ldr	r3, [pc, #128]	@ (8004cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 030f 	and.w	r3, r3, #15
 8004c4e:	683a      	ldr	r2, [r7, #0]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d001      	beq.n	8004c58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e032      	b.n	8004cbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0304 	and.w	r3, r3, #4
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d008      	beq.n	8004c76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c64:	4b19      	ldr	r3, [pc, #100]	@ (8004ccc <HAL_RCC_ClockConfig+0x1bc>)
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	4916      	ldr	r1, [pc, #88]	@ (8004ccc <HAL_RCC_ClockConfig+0x1bc>)
 8004c72:	4313      	orrs	r3, r2
 8004c74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0308 	and.w	r3, r3, #8
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d009      	beq.n	8004c96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c82:	4b12      	ldr	r3, [pc, #72]	@ (8004ccc <HAL_RCC_ClockConfig+0x1bc>)
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	00db      	lsls	r3, r3, #3
 8004c90:	490e      	ldr	r1, [pc, #56]	@ (8004ccc <HAL_RCC_ClockConfig+0x1bc>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c96:	f000 f887 	bl	8004da8 <HAL_RCC_GetSysClockFreq>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8004ccc <HAL_RCC_ClockConfig+0x1bc>)
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	091b      	lsrs	r3, r3, #4
 8004ca2:	f003 030f 	and.w	r3, r3, #15
 8004ca6:	490a      	ldr	r1, [pc, #40]	@ (8004cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8004ca8:	5ccb      	ldrb	r3, [r1, r3]
 8004caa:	fa22 f303 	lsr.w	r3, r2, r3
 8004cae:	4a09      	ldr	r2, [pc, #36]	@ (8004cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8004cb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004cb2:	4b09      	ldr	r3, [pc, #36]	@ (8004cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f7fd fee2 	bl	8002a80 <HAL_InitTick>

  return HAL_OK;
 8004cbc:	2300      	movs	r3, #0
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3710      	adds	r7, #16
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	40023c00 	.word	0x40023c00
 8004ccc:	40023800 	.word	0x40023800
 8004cd0:	08019fa8 	.word	0x08019fa8
 8004cd4:	20000004 	.word	0x20000004
 8004cd8:	20000010 	.word	0x20000010

08004cdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ce0:	4b03      	ldr	r3, [pc, #12]	@ (8004cf0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop
 8004cf0:	20000004 	.word	0x20000004

08004cf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004cf8:	f7ff fff0 	bl	8004cdc <HAL_RCC_GetHCLKFreq>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	4b05      	ldr	r3, [pc, #20]	@ (8004d14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	0a9b      	lsrs	r3, r3, #10
 8004d04:	f003 0307 	and.w	r3, r3, #7
 8004d08:	4903      	ldr	r1, [pc, #12]	@ (8004d18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d0a:	5ccb      	ldrb	r3, [r1, r3]
 8004d0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	40023800 	.word	0x40023800
 8004d18:	08019fb8 	.word	0x08019fb8

08004d1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004d20:	f7ff ffdc 	bl	8004cdc <HAL_RCC_GetHCLKFreq>
 8004d24:	4602      	mov	r2, r0
 8004d26:	4b05      	ldr	r3, [pc, #20]	@ (8004d3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	0b5b      	lsrs	r3, r3, #13
 8004d2c:	f003 0307 	and.w	r3, r3, #7
 8004d30:	4903      	ldr	r1, [pc, #12]	@ (8004d40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d32:	5ccb      	ldrb	r3, [r1, r3]
 8004d34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	40023800 	.word	0x40023800
 8004d40:	08019fb8 	.word	0x08019fb8

08004d44 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	220f      	movs	r2, #15
 8004d52:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004d54:	4b12      	ldr	r3, [pc, #72]	@ (8004da0 <HAL_RCC_GetClockConfig+0x5c>)
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	f003 0203 	and.w	r2, r3, #3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004d60:	4b0f      	ldr	r3, [pc, #60]	@ (8004da0 <HAL_RCC_GetClockConfig+0x5c>)
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004d6c:	4b0c      	ldr	r3, [pc, #48]	@ (8004da0 <HAL_RCC_GetClockConfig+0x5c>)
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004d78:	4b09      	ldr	r3, [pc, #36]	@ (8004da0 <HAL_RCC_GetClockConfig+0x5c>)
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	08db      	lsrs	r3, r3, #3
 8004d7e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004d86:	4b07      	ldr	r3, [pc, #28]	@ (8004da4 <HAL_RCC_GetClockConfig+0x60>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 020f 	and.w	r2, r3, #15
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	601a      	str	r2, [r3, #0]
}
 8004d92:	bf00      	nop
 8004d94:	370c      	adds	r7, #12
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr
 8004d9e:	bf00      	nop
 8004da0:	40023800 	.word	0x40023800
 8004da4:	40023c00 	.word	0x40023c00

08004da8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004da8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004dac:	b0ae      	sub	sp, #184	@ 0xb8
 8004dae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004db0:	2300      	movs	r3, #0
 8004db2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8004db6:	2300      	movs	r3, #0
 8004db8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004dce:	4bcb      	ldr	r3, [pc, #812]	@ (80050fc <HAL_RCC_GetSysClockFreq+0x354>)
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	f003 030c 	and.w	r3, r3, #12
 8004dd6:	2b0c      	cmp	r3, #12
 8004dd8:	f200 8206 	bhi.w	80051e8 <HAL_RCC_GetSysClockFreq+0x440>
 8004ddc:	a201      	add	r2, pc, #4	@ (adr r2, 8004de4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004de2:	bf00      	nop
 8004de4:	08004e19 	.word	0x08004e19
 8004de8:	080051e9 	.word	0x080051e9
 8004dec:	080051e9 	.word	0x080051e9
 8004df0:	080051e9 	.word	0x080051e9
 8004df4:	08004e21 	.word	0x08004e21
 8004df8:	080051e9 	.word	0x080051e9
 8004dfc:	080051e9 	.word	0x080051e9
 8004e00:	080051e9 	.word	0x080051e9
 8004e04:	08004e29 	.word	0x08004e29
 8004e08:	080051e9 	.word	0x080051e9
 8004e0c:	080051e9 	.word	0x080051e9
 8004e10:	080051e9 	.word	0x080051e9
 8004e14:	08005019 	.word	0x08005019
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e18:	4bb9      	ldr	r3, [pc, #740]	@ (8005100 <HAL_RCC_GetSysClockFreq+0x358>)
 8004e1a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8004e1e:	e1e7      	b.n	80051f0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e20:	4bb8      	ldr	r3, [pc, #736]	@ (8005104 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004e22:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004e26:	e1e3      	b.n	80051f0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e28:	4bb4      	ldr	r3, [pc, #720]	@ (80050fc <HAL_RCC_GetSysClockFreq+0x354>)
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e30:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e34:	4bb1      	ldr	r3, [pc, #708]	@ (80050fc <HAL_RCC_GetSysClockFreq+0x354>)
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d071      	beq.n	8004f24 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e40:	4bae      	ldr	r3, [pc, #696]	@ (80050fc <HAL_RCC_GetSysClockFreq+0x354>)
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	099b      	lsrs	r3, r3, #6
 8004e46:	2200      	movs	r2, #0
 8004e48:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004e4c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004e50:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004e54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e58:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004e62:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004e66:	4622      	mov	r2, r4
 8004e68:	462b      	mov	r3, r5
 8004e6a:	f04f 0000 	mov.w	r0, #0
 8004e6e:	f04f 0100 	mov.w	r1, #0
 8004e72:	0159      	lsls	r1, r3, #5
 8004e74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e78:	0150      	lsls	r0, r2, #5
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	460b      	mov	r3, r1
 8004e7e:	4621      	mov	r1, r4
 8004e80:	1a51      	subs	r1, r2, r1
 8004e82:	6439      	str	r1, [r7, #64]	@ 0x40
 8004e84:	4629      	mov	r1, r5
 8004e86:	eb63 0301 	sbc.w	r3, r3, r1
 8004e8a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e8c:	f04f 0200 	mov.w	r2, #0
 8004e90:	f04f 0300 	mov.w	r3, #0
 8004e94:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004e98:	4649      	mov	r1, r9
 8004e9a:	018b      	lsls	r3, r1, #6
 8004e9c:	4641      	mov	r1, r8
 8004e9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004ea2:	4641      	mov	r1, r8
 8004ea4:	018a      	lsls	r2, r1, #6
 8004ea6:	4641      	mov	r1, r8
 8004ea8:	1a51      	subs	r1, r2, r1
 8004eaa:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004eac:	4649      	mov	r1, r9
 8004eae:	eb63 0301 	sbc.w	r3, r3, r1
 8004eb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004eb4:	f04f 0200 	mov.w	r2, #0
 8004eb8:	f04f 0300 	mov.w	r3, #0
 8004ebc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004ec0:	4649      	mov	r1, r9
 8004ec2:	00cb      	lsls	r3, r1, #3
 8004ec4:	4641      	mov	r1, r8
 8004ec6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004eca:	4641      	mov	r1, r8
 8004ecc:	00ca      	lsls	r2, r1, #3
 8004ece:	4610      	mov	r0, r2
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	4622      	mov	r2, r4
 8004ed6:	189b      	adds	r3, r3, r2
 8004ed8:	633b      	str	r3, [r7, #48]	@ 0x30
 8004eda:	462b      	mov	r3, r5
 8004edc:	460a      	mov	r2, r1
 8004ede:	eb42 0303 	adc.w	r3, r2, r3
 8004ee2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ee4:	f04f 0200 	mov.w	r2, #0
 8004ee8:	f04f 0300 	mov.w	r3, #0
 8004eec:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004ef0:	4629      	mov	r1, r5
 8004ef2:	024b      	lsls	r3, r1, #9
 8004ef4:	4621      	mov	r1, r4
 8004ef6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004efa:	4621      	mov	r1, r4
 8004efc:	024a      	lsls	r2, r1, #9
 8004efe:	4610      	mov	r0, r2
 8004f00:	4619      	mov	r1, r3
 8004f02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004f06:	2200      	movs	r2, #0
 8004f08:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004f0c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004f10:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004f14:	f7fb fec8 	bl	8000ca8 <__aeabi_uldivmod>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	460b      	mov	r3, r1
 8004f1c:	4613      	mov	r3, r2
 8004f1e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004f22:	e067      	b.n	8004ff4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f24:	4b75      	ldr	r3, [pc, #468]	@ (80050fc <HAL_RCC_GetSysClockFreq+0x354>)
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	099b      	lsrs	r3, r3, #6
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004f30:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004f34:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004f38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f3c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004f3e:	2300      	movs	r3, #0
 8004f40:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004f42:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004f46:	4622      	mov	r2, r4
 8004f48:	462b      	mov	r3, r5
 8004f4a:	f04f 0000 	mov.w	r0, #0
 8004f4e:	f04f 0100 	mov.w	r1, #0
 8004f52:	0159      	lsls	r1, r3, #5
 8004f54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f58:	0150      	lsls	r0, r2, #5
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	460b      	mov	r3, r1
 8004f5e:	4621      	mov	r1, r4
 8004f60:	1a51      	subs	r1, r2, r1
 8004f62:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004f64:	4629      	mov	r1, r5
 8004f66:	eb63 0301 	sbc.w	r3, r3, r1
 8004f6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f6c:	f04f 0200 	mov.w	r2, #0
 8004f70:	f04f 0300 	mov.w	r3, #0
 8004f74:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004f78:	4649      	mov	r1, r9
 8004f7a:	018b      	lsls	r3, r1, #6
 8004f7c:	4641      	mov	r1, r8
 8004f7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f82:	4641      	mov	r1, r8
 8004f84:	018a      	lsls	r2, r1, #6
 8004f86:	4641      	mov	r1, r8
 8004f88:	ebb2 0a01 	subs.w	sl, r2, r1
 8004f8c:	4649      	mov	r1, r9
 8004f8e:	eb63 0b01 	sbc.w	fp, r3, r1
 8004f92:	f04f 0200 	mov.w	r2, #0
 8004f96:	f04f 0300 	mov.w	r3, #0
 8004f9a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004f9e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004fa2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004fa6:	4692      	mov	sl, r2
 8004fa8:	469b      	mov	fp, r3
 8004faa:	4623      	mov	r3, r4
 8004fac:	eb1a 0303 	adds.w	r3, sl, r3
 8004fb0:	623b      	str	r3, [r7, #32]
 8004fb2:	462b      	mov	r3, r5
 8004fb4:	eb4b 0303 	adc.w	r3, fp, r3
 8004fb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fba:	f04f 0200 	mov.w	r2, #0
 8004fbe:	f04f 0300 	mov.w	r3, #0
 8004fc2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004fc6:	4629      	mov	r1, r5
 8004fc8:	028b      	lsls	r3, r1, #10
 8004fca:	4621      	mov	r1, r4
 8004fcc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004fd0:	4621      	mov	r1, r4
 8004fd2:	028a      	lsls	r2, r1, #10
 8004fd4:	4610      	mov	r0, r2
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004fdc:	2200      	movs	r2, #0
 8004fde:	673b      	str	r3, [r7, #112]	@ 0x70
 8004fe0:	677a      	str	r2, [r7, #116]	@ 0x74
 8004fe2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004fe6:	f7fb fe5f 	bl	8000ca8 <__aeabi_uldivmod>
 8004fea:	4602      	mov	r2, r0
 8004fec:	460b      	mov	r3, r1
 8004fee:	4613      	mov	r3, r2
 8004ff0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ff4:	4b41      	ldr	r3, [pc, #260]	@ (80050fc <HAL_RCC_GetSysClockFreq+0x354>)
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	0c1b      	lsrs	r3, r3, #16
 8004ffa:	f003 0303 	and.w	r3, r3, #3
 8004ffe:	3301      	adds	r3, #1
 8005000:	005b      	lsls	r3, r3, #1
 8005002:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8005006:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800500a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800500e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005012:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005016:	e0eb      	b.n	80051f0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005018:	4b38      	ldr	r3, [pc, #224]	@ (80050fc <HAL_RCC_GetSysClockFreq+0x354>)
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005020:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005024:	4b35      	ldr	r3, [pc, #212]	@ (80050fc <HAL_RCC_GetSysClockFreq+0x354>)
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800502c:	2b00      	cmp	r3, #0
 800502e:	d06b      	beq.n	8005108 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005030:	4b32      	ldr	r3, [pc, #200]	@ (80050fc <HAL_RCC_GetSysClockFreq+0x354>)
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	099b      	lsrs	r3, r3, #6
 8005036:	2200      	movs	r2, #0
 8005038:	66bb      	str	r3, [r7, #104]	@ 0x68
 800503a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800503c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800503e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005042:	663b      	str	r3, [r7, #96]	@ 0x60
 8005044:	2300      	movs	r3, #0
 8005046:	667b      	str	r3, [r7, #100]	@ 0x64
 8005048:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800504c:	4622      	mov	r2, r4
 800504e:	462b      	mov	r3, r5
 8005050:	f04f 0000 	mov.w	r0, #0
 8005054:	f04f 0100 	mov.w	r1, #0
 8005058:	0159      	lsls	r1, r3, #5
 800505a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800505e:	0150      	lsls	r0, r2, #5
 8005060:	4602      	mov	r2, r0
 8005062:	460b      	mov	r3, r1
 8005064:	4621      	mov	r1, r4
 8005066:	1a51      	subs	r1, r2, r1
 8005068:	61b9      	str	r1, [r7, #24]
 800506a:	4629      	mov	r1, r5
 800506c:	eb63 0301 	sbc.w	r3, r3, r1
 8005070:	61fb      	str	r3, [r7, #28]
 8005072:	f04f 0200 	mov.w	r2, #0
 8005076:	f04f 0300 	mov.w	r3, #0
 800507a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800507e:	4659      	mov	r1, fp
 8005080:	018b      	lsls	r3, r1, #6
 8005082:	4651      	mov	r1, sl
 8005084:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005088:	4651      	mov	r1, sl
 800508a:	018a      	lsls	r2, r1, #6
 800508c:	4651      	mov	r1, sl
 800508e:	ebb2 0801 	subs.w	r8, r2, r1
 8005092:	4659      	mov	r1, fp
 8005094:	eb63 0901 	sbc.w	r9, r3, r1
 8005098:	f04f 0200 	mov.w	r2, #0
 800509c:	f04f 0300 	mov.w	r3, #0
 80050a0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80050a4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80050a8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80050ac:	4690      	mov	r8, r2
 80050ae:	4699      	mov	r9, r3
 80050b0:	4623      	mov	r3, r4
 80050b2:	eb18 0303 	adds.w	r3, r8, r3
 80050b6:	613b      	str	r3, [r7, #16]
 80050b8:	462b      	mov	r3, r5
 80050ba:	eb49 0303 	adc.w	r3, r9, r3
 80050be:	617b      	str	r3, [r7, #20]
 80050c0:	f04f 0200 	mov.w	r2, #0
 80050c4:	f04f 0300 	mov.w	r3, #0
 80050c8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80050cc:	4629      	mov	r1, r5
 80050ce:	024b      	lsls	r3, r1, #9
 80050d0:	4621      	mov	r1, r4
 80050d2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80050d6:	4621      	mov	r1, r4
 80050d8:	024a      	lsls	r2, r1, #9
 80050da:	4610      	mov	r0, r2
 80050dc:	4619      	mov	r1, r3
 80050de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80050e2:	2200      	movs	r2, #0
 80050e4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80050e6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80050e8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80050ec:	f7fb fddc 	bl	8000ca8 <__aeabi_uldivmod>
 80050f0:	4602      	mov	r2, r0
 80050f2:	460b      	mov	r3, r1
 80050f4:	4613      	mov	r3, r2
 80050f6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80050fa:	e065      	b.n	80051c8 <HAL_RCC_GetSysClockFreq+0x420>
 80050fc:	40023800 	.word	0x40023800
 8005100:	00f42400 	.word	0x00f42400
 8005104:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005108:	4b3d      	ldr	r3, [pc, #244]	@ (8005200 <HAL_RCC_GetSysClockFreq+0x458>)
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	099b      	lsrs	r3, r3, #6
 800510e:	2200      	movs	r2, #0
 8005110:	4618      	mov	r0, r3
 8005112:	4611      	mov	r1, r2
 8005114:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005118:	653b      	str	r3, [r7, #80]	@ 0x50
 800511a:	2300      	movs	r3, #0
 800511c:	657b      	str	r3, [r7, #84]	@ 0x54
 800511e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8005122:	4642      	mov	r2, r8
 8005124:	464b      	mov	r3, r9
 8005126:	f04f 0000 	mov.w	r0, #0
 800512a:	f04f 0100 	mov.w	r1, #0
 800512e:	0159      	lsls	r1, r3, #5
 8005130:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005134:	0150      	lsls	r0, r2, #5
 8005136:	4602      	mov	r2, r0
 8005138:	460b      	mov	r3, r1
 800513a:	4641      	mov	r1, r8
 800513c:	1a51      	subs	r1, r2, r1
 800513e:	60b9      	str	r1, [r7, #8]
 8005140:	4649      	mov	r1, r9
 8005142:	eb63 0301 	sbc.w	r3, r3, r1
 8005146:	60fb      	str	r3, [r7, #12]
 8005148:	f04f 0200 	mov.w	r2, #0
 800514c:	f04f 0300 	mov.w	r3, #0
 8005150:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005154:	4659      	mov	r1, fp
 8005156:	018b      	lsls	r3, r1, #6
 8005158:	4651      	mov	r1, sl
 800515a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800515e:	4651      	mov	r1, sl
 8005160:	018a      	lsls	r2, r1, #6
 8005162:	4651      	mov	r1, sl
 8005164:	1a54      	subs	r4, r2, r1
 8005166:	4659      	mov	r1, fp
 8005168:	eb63 0501 	sbc.w	r5, r3, r1
 800516c:	f04f 0200 	mov.w	r2, #0
 8005170:	f04f 0300 	mov.w	r3, #0
 8005174:	00eb      	lsls	r3, r5, #3
 8005176:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800517a:	00e2      	lsls	r2, r4, #3
 800517c:	4614      	mov	r4, r2
 800517e:	461d      	mov	r5, r3
 8005180:	4643      	mov	r3, r8
 8005182:	18e3      	adds	r3, r4, r3
 8005184:	603b      	str	r3, [r7, #0]
 8005186:	464b      	mov	r3, r9
 8005188:	eb45 0303 	adc.w	r3, r5, r3
 800518c:	607b      	str	r3, [r7, #4]
 800518e:	f04f 0200 	mov.w	r2, #0
 8005192:	f04f 0300 	mov.w	r3, #0
 8005196:	e9d7 4500 	ldrd	r4, r5, [r7]
 800519a:	4629      	mov	r1, r5
 800519c:	028b      	lsls	r3, r1, #10
 800519e:	4621      	mov	r1, r4
 80051a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80051a4:	4621      	mov	r1, r4
 80051a6:	028a      	lsls	r2, r1, #10
 80051a8:	4610      	mov	r0, r2
 80051aa:	4619      	mov	r1, r3
 80051ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80051b0:	2200      	movs	r2, #0
 80051b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80051b4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80051b6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80051ba:	f7fb fd75 	bl	8000ca8 <__aeabi_uldivmod>
 80051be:	4602      	mov	r2, r0
 80051c0:	460b      	mov	r3, r1
 80051c2:	4613      	mov	r3, r2
 80051c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80051c8:	4b0d      	ldr	r3, [pc, #52]	@ (8005200 <HAL_RCC_GetSysClockFreq+0x458>)
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	0f1b      	lsrs	r3, r3, #28
 80051ce:	f003 0307 	and.w	r3, r3, #7
 80051d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 80051d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80051da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80051de:	fbb2 f3f3 	udiv	r3, r2, r3
 80051e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80051e6:	e003      	b.n	80051f0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80051e8:	4b06      	ldr	r3, [pc, #24]	@ (8005204 <HAL_RCC_GetSysClockFreq+0x45c>)
 80051ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80051ee:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	37b8      	adds	r7, #184	@ 0xb8
 80051f8:	46bd      	mov	sp, r7
 80051fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051fe:	bf00      	nop
 8005200:	40023800 	.word	0x40023800
 8005204:	00f42400 	.word	0x00f42400

08005208 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b086      	sub	sp, #24
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d101      	bne.n	800521a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e28d      	b.n	8005736 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 0301 	and.w	r3, r3, #1
 8005222:	2b00      	cmp	r3, #0
 8005224:	f000 8083 	beq.w	800532e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005228:	4b94      	ldr	r3, [pc, #592]	@ (800547c <HAL_RCC_OscConfig+0x274>)
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	f003 030c 	and.w	r3, r3, #12
 8005230:	2b04      	cmp	r3, #4
 8005232:	d019      	beq.n	8005268 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005234:	4b91      	ldr	r3, [pc, #580]	@ (800547c <HAL_RCC_OscConfig+0x274>)
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800523c:	2b08      	cmp	r3, #8
 800523e:	d106      	bne.n	800524e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005240:	4b8e      	ldr	r3, [pc, #568]	@ (800547c <HAL_RCC_OscConfig+0x274>)
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005248:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800524c:	d00c      	beq.n	8005268 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800524e:	4b8b      	ldr	r3, [pc, #556]	@ (800547c <HAL_RCC_OscConfig+0x274>)
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005256:	2b0c      	cmp	r3, #12
 8005258:	d112      	bne.n	8005280 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800525a:	4b88      	ldr	r3, [pc, #544]	@ (800547c <HAL_RCC_OscConfig+0x274>)
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005262:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005266:	d10b      	bne.n	8005280 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005268:	4b84      	ldr	r3, [pc, #528]	@ (800547c <HAL_RCC_OscConfig+0x274>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005270:	2b00      	cmp	r3, #0
 8005272:	d05b      	beq.n	800532c <HAL_RCC_OscConfig+0x124>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d157      	bne.n	800532c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	e25a      	b.n	8005736 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005288:	d106      	bne.n	8005298 <HAL_RCC_OscConfig+0x90>
 800528a:	4b7c      	ldr	r3, [pc, #496]	@ (800547c <HAL_RCC_OscConfig+0x274>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a7b      	ldr	r2, [pc, #492]	@ (800547c <HAL_RCC_OscConfig+0x274>)
 8005290:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005294:	6013      	str	r3, [r2, #0]
 8005296:	e01d      	b.n	80052d4 <HAL_RCC_OscConfig+0xcc>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80052a0:	d10c      	bne.n	80052bc <HAL_RCC_OscConfig+0xb4>
 80052a2:	4b76      	ldr	r3, [pc, #472]	@ (800547c <HAL_RCC_OscConfig+0x274>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a75      	ldr	r2, [pc, #468]	@ (800547c <HAL_RCC_OscConfig+0x274>)
 80052a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80052ac:	6013      	str	r3, [r2, #0]
 80052ae:	4b73      	ldr	r3, [pc, #460]	@ (800547c <HAL_RCC_OscConfig+0x274>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a72      	ldr	r2, [pc, #456]	@ (800547c <HAL_RCC_OscConfig+0x274>)
 80052b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052b8:	6013      	str	r3, [r2, #0]
 80052ba:	e00b      	b.n	80052d4 <HAL_RCC_OscConfig+0xcc>
 80052bc:	4b6f      	ldr	r3, [pc, #444]	@ (800547c <HAL_RCC_OscConfig+0x274>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a6e      	ldr	r2, [pc, #440]	@ (800547c <HAL_RCC_OscConfig+0x274>)
 80052c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052c6:	6013      	str	r3, [r2, #0]
 80052c8:	4b6c      	ldr	r3, [pc, #432]	@ (800547c <HAL_RCC_OscConfig+0x274>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a6b      	ldr	r2, [pc, #428]	@ (800547c <HAL_RCC_OscConfig+0x274>)
 80052ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80052d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d013      	beq.n	8005304 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052dc:	f7fe fd12 	bl	8003d04 <HAL_GetTick>
 80052e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052e2:	e008      	b.n	80052f6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052e4:	f7fe fd0e 	bl	8003d04 <HAL_GetTick>
 80052e8:	4602      	mov	r2, r0
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	1ad3      	subs	r3, r2, r3
 80052ee:	2b64      	cmp	r3, #100	@ 0x64
 80052f0:	d901      	bls.n	80052f6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80052f2:	2303      	movs	r3, #3
 80052f4:	e21f      	b.n	8005736 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052f6:	4b61      	ldr	r3, [pc, #388]	@ (800547c <HAL_RCC_OscConfig+0x274>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d0f0      	beq.n	80052e4 <HAL_RCC_OscConfig+0xdc>
 8005302:	e014      	b.n	800532e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005304:	f7fe fcfe 	bl	8003d04 <HAL_GetTick>
 8005308:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800530a:	e008      	b.n	800531e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800530c:	f7fe fcfa 	bl	8003d04 <HAL_GetTick>
 8005310:	4602      	mov	r2, r0
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	2b64      	cmp	r3, #100	@ 0x64
 8005318:	d901      	bls.n	800531e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800531a:	2303      	movs	r3, #3
 800531c:	e20b      	b.n	8005736 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800531e:	4b57      	ldr	r3, [pc, #348]	@ (800547c <HAL_RCC_OscConfig+0x274>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005326:	2b00      	cmp	r3, #0
 8005328:	d1f0      	bne.n	800530c <HAL_RCC_OscConfig+0x104>
 800532a:	e000      	b.n	800532e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800532c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 0302 	and.w	r3, r3, #2
 8005336:	2b00      	cmp	r3, #0
 8005338:	d06f      	beq.n	800541a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800533a:	4b50      	ldr	r3, [pc, #320]	@ (800547c <HAL_RCC_OscConfig+0x274>)
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	f003 030c 	and.w	r3, r3, #12
 8005342:	2b00      	cmp	r3, #0
 8005344:	d017      	beq.n	8005376 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005346:	4b4d      	ldr	r3, [pc, #308]	@ (800547c <HAL_RCC_OscConfig+0x274>)
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800534e:	2b08      	cmp	r3, #8
 8005350:	d105      	bne.n	800535e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005352:	4b4a      	ldr	r3, [pc, #296]	@ (800547c <HAL_RCC_OscConfig+0x274>)
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800535a:	2b00      	cmp	r3, #0
 800535c:	d00b      	beq.n	8005376 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800535e:	4b47      	ldr	r3, [pc, #284]	@ (800547c <HAL_RCC_OscConfig+0x274>)
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005366:	2b0c      	cmp	r3, #12
 8005368:	d11c      	bne.n	80053a4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800536a:	4b44      	ldr	r3, [pc, #272]	@ (800547c <HAL_RCC_OscConfig+0x274>)
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005372:	2b00      	cmp	r3, #0
 8005374:	d116      	bne.n	80053a4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005376:	4b41      	ldr	r3, [pc, #260]	@ (800547c <HAL_RCC_OscConfig+0x274>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 0302 	and.w	r3, r3, #2
 800537e:	2b00      	cmp	r3, #0
 8005380:	d005      	beq.n	800538e <HAL_RCC_OscConfig+0x186>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	2b01      	cmp	r3, #1
 8005388:	d001      	beq.n	800538e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	e1d3      	b.n	8005736 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800538e:	4b3b      	ldr	r3, [pc, #236]	@ (800547c <HAL_RCC_OscConfig+0x274>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	691b      	ldr	r3, [r3, #16]
 800539a:	00db      	lsls	r3, r3, #3
 800539c:	4937      	ldr	r1, [pc, #220]	@ (800547c <HAL_RCC_OscConfig+0x274>)
 800539e:	4313      	orrs	r3, r2
 80053a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053a2:	e03a      	b.n	800541a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d020      	beq.n	80053ee <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053ac:	4b34      	ldr	r3, [pc, #208]	@ (8005480 <HAL_RCC_OscConfig+0x278>)
 80053ae:	2201      	movs	r2, #1
 80053b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053b2:	f7fe fca7 	bl	8003d04 <HAL_GetTick>
 80053b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053b8:	e008      	b.n	80053cc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053ba:	f7fe fca3 	bl	8003d04 <HAL_GetTick>
 80053be:	4602      	mov	r2, r0
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	1ad3      	subs	r3, r2, r3
 80053c4:	2b02      	cmp	r3, #2
 80053c6:	d901      	bls.n	80053cc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80053c8:	2303      	movs	r3, #3
 80053ca:	e1b4      	b.n	8005736 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053cc:	4b2b      	ldr	r3, [pc, #172]	@ (800547c <HAL_RCC_OscConfig+0x274>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 0302 	and.w	r3, r3, #2
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d0f0      	beq.n	80053ba <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053d8:	4b28      	ldr	r3, [pc, #160]	@ (800547c <HAL_RCC_OscConfig+0x274>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	691b      	ldr	r3, [r3, #16]
 80053e4:	00db      	lsls	r3, r3, #3
 80053e6:	4925      	ldr	r1, [pc, #148]	@ (800547c <HAL_RCC_OscConfig+0x274>)
 80053e8:	4313      	orrs	r3, r2
 80053ea:	600b      	str	r3, [r1, #0]
 80053ec:	e015      	b.n	800541a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053ee:	4b24      	ldr	r3, [pc, #144]	@ (8005480 <HAL_RCC_OscConfig+0x278>)
 80053f0:	2200      	movs	r2, #0
 80053f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053f4:	f7fe fc86 	bl	8003d04 <HAL_GetTick>
 80053f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053fa:	e008      	b.n	800540e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053fc:	f7fe fc82 	bl	8003d04 <HAL_GetTick>
 8005400:	4602      	mov	r2, r0
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	2b02      	cmp	r3, #2
 8005408:	d901      	bls.n	800540e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	e193      	b.n	8005736 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800540e:	4b1b      	ldr	r3, [pc, #108]	@ (800547c <HAL_RCC_OscConfig+0x274>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 0302 	and.w	r3, r3, #2
 8005416:	2b00      	cmp	r3, #0
 8005418:	d1f0      	bne.n	80053fc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 0308 	and.w	r3, r3, #8
 8005422:	2b00      	cmp	r3, #0
 8005424:	d036      	beq.n	8005494 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	695b      	ldr	r3, [r3, #20]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d016      	beq.n	800545c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800542e:	4b15      	ldr	r3, [pc, #84]	@ (8005484 <HAL_RCC_OscConfig+0x27c>)
 8005430:	2201      	movs	r2, #1
 8005432:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005434:	f7fe fc66 	bl	8003d04 <HAL_GetTick>
 8005438:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800543a:	e008      	b.n	800544e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800543c:	f7fe fc62 	bl	8003d04 <HAL_GetTick>
 8005440:	4602      	mov	r2, r0
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	2b02      	cmp	r3, #2
 8005448:	d901      	bls.n	800544e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800544a:	2303      	movs	r3, #3
 800544c:	e173      	b.n	8005736 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800544e:	4b0b      	ldr	r3, [pc, #44]	@ (800547c <HAL_RCC_OscConfig+0x274>)
 8005450:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005452:	f003 0302 	and.w	r3, r3, #2
 8005456:	2b00      	cmp	r3, #0
 8005458:	d0f0      	beq.n	800543c <HAL_RCC_OscConfig+0x234>
 800545a:	e01b      	b.n	8005494 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800545c:	4b09      	ldr	r3, [pc, #36]	@ (8005484 <HAL_RCC_OscConfig+0x27c>)
 800545e:	2200      	movs	r2, #0
 8005460:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005462:	f7fe fc4f 	bl	8003d04 <HAL_GetTick>
 8005466:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005468:	e00e      	b.n	8005488 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800546a:	f7fe fc4b 	bl	8003d04 <HAL_GetTick>
 800546e:	4602      	mov	r2, r0
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	1ad3      	subs	r3, r2, r3
 8005474:	2b02      	cmp	r3, #2
 8005476:	d907      	bls.n	8005488 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005478:	2303      	movs	r3, #3
 800547a:	e15c      	b.n	8005736 <HAL_RCC_OscConfig+0x52e>
 800547c:	40023800 	.word	0x40023800
 8005480:	42470000 	.word	0x42470000
 8005484:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005488:	4b8a      	ldr	r3, [pc, #552]	@ (80056b4 <HAL_RCC_OscConfig+0x4ac>)
 800548a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800548c:	f003 0302 	and.w	r3, r3, #2
 8005490:	2b00      	cmp	r3, #0
 8005492:	d1ea      	bne.n	800546a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 0304 	and.w	r3, r3, #4
 800549c:	2b00      	cmp	r3, #0
 800549e:	f000 8097 	beq.w	80055d0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054a2:	2300      	movs	r3, #0
 80054a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054a6:	4b83      	ldr	r3, [pc, #524]	@ (80056b4 <HAL_RCC_OscConfig+0x4ac>)
 80054a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d10f      	bne.n	80054d2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054b2:	2300      	movs	r3, #0
 80054b4:	60bb      	str	r3, [r7, #8]
 80054b6:	4b7f      	ldr	r3, [pc, #508]	@ (80056b4 <HAL_RCC_OscConfig+0x4ac>)
 80054b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ba:	4a7e      	ldr	r2, [pc, #504]	@ (80056b4 <HAL_RCC_OscConfig+0x4ac>)
 80054bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80054c2:	4b7c      	ldr	r3, [pc, #496]	@ (80056b4 <HAL_RCC_OscConfig+0x4ac>)
 80054c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054ca:	60bb      	str	r3, [r7, #8]
 80054cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054ce:	2301      	movs	r3, #1
 80054d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054d2:	4b79      	ldr	r3, [pc, #484]	@ (80056b8 <HAL_RCC_OscConfig+0x4b0>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d118      	bne.n	8005510 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054de:	4b76      	ldr	r3, [pc, #472]	@ (80056b8 <HAL_RCC_OscConfig+0x4b0>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a75      	ldr	r2, [pc, #468]	@ (80056b8 <HAL_RCC_OscConfig+0x4b0>)
 80054e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054ea:	f7fe fc0b 	bl	8003d04 <HAL_GetTick>
 80054ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054f0:	e008      	b.n	8005504 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054f2:	f7fe fc07 	bl	8003d04 <HAL_GetTick>
 80054f6:	4602      	mov	r2, r0
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	1ad3      	subs	r3, r2, r3
 80054fc:	2b02      	cmp	r3, #2
 80054fe:	d901      	bls.n	8005504 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005500:	2303      	movs	r3, #3
 8005502:	e118      	b.n	8005736 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005504:	4b6c      	ldr	r3, [pc, #432]	@ (80056b8 <HAL_RCC_OscConfig+0x4b0>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800550c:	2b00      	cmp	r3, #0
 800550e:	d0f0      	beq.n	80054f2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	2b01      	cmp	r3, #1
 8005516:	d106      	bne.n	8005526 <HAL_RCC_OscConfig+0x31e>
 8005518:	4b66      	ldr	r3, [pc, #408]	@ (80056b4 <HAL_RCC_OscConfig+0x4ac>)
 800551a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800551c:	4a65      	ldr	r2, [pc, #404]	@ (80056b4 <HAL_RCC_OscConfig+0x4ac>)
 800551e:	f043 0301 	orr.w	r3, r3, #1
 8005522:	6713      	str	r3, [r2, #112]	@ 0x70
 8005524:	e01c      	b.n	8005560 <HAL_RCC_OscConfig+0x358>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	2b05      	cmp	r3, #5
 800552c:	d10c      	bne.n	8005548 <HAL_RCC_OscConfig+0x340>
 800552e:	4b61      	ldr	r3, [pc, #388]	@ (80056b4 <HAL_RCC_OscConfig+0x4ac>)
 8005530:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005532:	4a60      	ldr	r2, [pc, #384]	@ (80056b4 <HAL_RCC_OscConfig+0x4ac>)
 8005534:	f043 0304 	orr.w	r3, r3, #4
 8005538:	6713      	str	r3, [r2, #112]	@ 0x70
 800553a:	4b5e      	ldr	r3, [pc, #376]	@ (80056b4 <HAL_RCC_OscConfig+0x4ac>)
 800553c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800553e:	4a5d      	ldr	r2, [pc, #372]	@ (80056b4 <HAL_RCC_OscConfig+0x4ac>)
 8005540:	f043 0301 	orr.w	r3, r3, #1
 8005544:	6713      	str	r3, [r2, #112]	@ 0x70
 8005546:	e00b      	b.n	8005560 <HAL_RCC_OscConfig+0x358>
 8005548:	4b5a      	ldr	r3, [pc, #360]	@ (80056b4 <HAL_RCC_OscConfig+0x4ac>)
 800554a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800554c:	4a59      	ldr	r2, [pc, #356]	@ (80056b4 <HAL_RCC_OscConfig+0x4ac>)
 800554e:	f023 0301 	bic.w	r3, r3, #1
 8005552:	6713      	str	r3, [r2, #112]	@ 0x70
 8005554:	4b57      	ldr	r3, [pc, #348]	@ (80056b4 <HAL_RCC_OscConfig+0x4ac>)
 8005556:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005558:	4a56      	ldr	r2, [pc, #344]	@ (80056b4 <HAL_RCC_OscConfig+0x4ac>)
 800555a:	f023 0304 	bic.w	r3, r3, #4
 800555e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d015      	beq.n	8005594 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005568:	f7fe fbcc 	bl	8003d04 <HAL_GetTick>
 800556c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800556e:	e00a      	b.n	8005586 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005570:	f7fe fbc8 	bl	8003d04 <HAL_GetTick>
 8005574:	4602      	mov	r2, r0
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800557e:	4293      	cmp	r3, r2
 8005580:	d901      	bls.n	8005586 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	e0d7      	b.n	8005736 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005586:	4b4b      	ldr	r3, [pc, #300]	@ (80056b4 <HAL_RCC_OscConfig+0x4ac>)
 8005588:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800558a:	f003 0302 	and.w	r3, r3, #2
 800558e:	2b00      	cmp	r3, #0
 8005590:	d0ee      	beq.n	8005570 <HAL_RCC_OscConfig+0x368>
 8005592:	e014      	b.n	80055be <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005594:	f7fe fbb6 	bl	8003d04 <HAL_GetTick>
 8005598:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800559a:	e00a      	b.n	80055b2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800559c:	f7fe fbb2 	bl	8003d04 <HAL_GetTick>
 80055a0:	4602      	mov	r2, r0
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d901      	bls.n	80055b2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80055ae:	2303      	movs	r3, #3
 80055b0:	e0c1      	b.n	8005736 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055b2:	4b40      	ldr	r3, [pc, #256]	@ (80056b4 <HAL_RCC_OscConfig+0x4ac>)
 80055b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055b6:	f003 0302 	and.w	r3, r3, #2
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d1ee      	bne.n	800559c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80055be:	7dfb      	ldrb	r3, [r7, #23]
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d105      	bne.n	80055d0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055c4:	4b3b      	ldr	r3, [pc, #236]	@ (80056b4 <HAL_RCC_OscConfig+0x4ac>)
 80055c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055c8:	4a3a      	ldr	r2, [pc, #232]	@ (80056b4 <HAL_RCC_OscConfig+0x4ac>)
 80055ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055ce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	699b      	ldr	r3, [r3, #24]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	f000 80ad 	beq.w	8005734 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80055da:	4b36      	ldr	r3, [pc, #216]	@ (80056b4 <HAL_RCC_OscConfig+0x4ac>)
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	f003 030c 	and.w	r3, r3, #12
 80055e2:	2b08      	cmp	r3, #8
 80055e4:	d060      	beq.n	80056a8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	699b      	ldr	r3, [r3, #24]
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d145      	bne.n	800567a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055ee:	4b33      	ldr	r3, [pc, #204]	@ (80056bc <HAL_RCC_OscConfig+0x4b4>)
 80055f0:	2200      	movs	r2, #0
 80055f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055f4:	f7fe fb86 	bl	8003d04 <HAL_GetTick>
 80055f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055fa:	e008      	b.n	800560e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055fc:	f7fe fb82 	bl	8003d04 <HAL_GetTick>
 8005600:	4602      	mov	r2, r0
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	2b02      	cmp	r3, #2
 8005608:	d901      	bls.n	800560e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800560a:	2303      	movs	r3, #3
 800560c:	e093      	b.n	8005736 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800560e:	4b29      	ldr	r3, [pc, #164]	@ (80056b4 <HAL_RCC_OscConfig+0x4ac>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005616:	2b00      	cmp	r3, #0
 8005618:	d1f0      	bne.n	80055fc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	69da      	ldr	r2, [r3, #28]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a1b      	ldr	r3, [r3, #32]
 8005622:	431a      	orrs	r2, r3
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005628:	019b      	lsls	r3, r3, #6
 800562a:	431a      	orrs	r2, r3
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005630:	085b      	lsrs	r3, r3, #1
 8005632:	3b01      	subs	r3, #1
 8005634:	041b      	lsls	r3, r3, #16
 8005636:	431a      	orrs	r2, r3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800563c:	061b      	lsls	r3, r3, #24
 800563e:	431a      	orrs	r2, r3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005644:	071b      	lsls	r3, r3, #28
 8005646:	491b      	ldr	r1, [pc, #108]	@ (80056b4 <HAL_RCC_OscConfig+0x4ac>)
 8005648:	4313      	orrs	r3, r2
 800564a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800564c:	4b1b      	ldr	r3, [pc, #108]	@ (80056bc <HAL_RCC_OscConfig+0x4b4>)
 800564e:	2201      	movs	r2, #1
 8005650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005652:	f7fe fb57 	bl	8003d04 <HAL_GetTick>
 8005656:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005658:	e008      	b.n	800566c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800565a:	f7fe fb53 	bl	8003d04 <HAL_GetTick>
 800565e:	4602      	mov	r2, r0
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	1ad3      	subs	r3, r2, r3
 8005664:	2b02      	cmp	r3, #2
 8005666:	d901      	bls.n	800566c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005668:	2303      	movs	r3, #3
 800566a:	e064      	b.n	8005736 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800566c:	4b11      	ldr	r3, [pc, #68]	@ (80056b4 <HAL_RCC_OscConfig+0x4ac>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005674:	2b00      	cmp	r3, #0
 8005676:	d0f0      	beq.n	800565a <HAL_RCC_OscConfig+0x452>
 8005678:	e05c      	b.n	8005734 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800567a:	4b10      	ldr	r3, [pc, #64]	@ (80056bc <HAL_RCC_OscConfig+0x4b4>)
 800567c:	2200      	movs	r2, #0
 800567e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005680:	f7fe fb40 	bl	8003d04 <HAL_GetTick>
 8005684:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005686:	e008      	b.n	800569a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005688:	f7fe fb3c 	bl	8003d04 <HAL_GetTick>
 800568c:	4602      	mov	r2, r0
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	1ad3      	subs	r3, r2, r3
 8005692:	2b02      	cmp	r3, #2
 8005694:	d901      	bls.n	800569a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005696:	2303      	movs	r3, #3
 8005698:	e04d      	b.n	8005736 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800569a:	4b06      	ldr	r3, [pc, #24]	@ (80056b4 <HAL_RCC_OscConfig+0x4ac>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d1f0      	bne.n	8005688 <HAL_RCC_OscConfig+0x480>
 80056a6:	e045      	b.n	8005734 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	699b      	ldr	r3, [r3, #24]
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d107      	bne.n	80056c0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e040      	b.n	8005736 <HAL_RCC_OscConfig+0x52e>
 80056b4:	40023800 	.word	0x40023800
 80056b8:	40007000 	.word	0x40007000
 80056bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80056c0:	4b1f      	ldr	r3, [pc, #124]	@ (8005740 <HAL_RCC_OscConfig+0x538>)
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	699b      	ldr	r3, [r3, #24]
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d030      	beq.n	8005730 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056d8:	429a      	cmp	r2, r3
 80056da:	d129      	bne.n	8005730 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d122      	bne.n	8005730 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80056ea:	68fa      	ldr	r2, [r7, #12]
 80056ec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80056f0:	4013      	ands	r3, r2
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80056f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d119      	bne.n	8005730 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005706:	085b      	lsrs	r3, r3, #1
 8005708:	3b01      	subs	r3, #1
 800570a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800570c:	429a      	cmp	r2, r3
 800570e:	d10f      	bne.n	8005730 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800571a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800571c:	429a      	cmp	r2, r3
 800571e:	d107      	bne.n	8005730 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800572a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800572c:	429a      	cmp	r2, r3
 800572e:	d001      	beq.n	8005734 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	e000      	b.n	8005736 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005734:	2300      	movs	r3, #0
}
 8005736:	4618      	mov	r0, r3
 8005738:	3718      	adds	r7, #24
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop
 8005740:	40023800 	.word	0x40023800

08005744 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b082      	sub	sp, #8
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d101      	bne.n	8005756 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	e07b      	b.n	800584e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800575a:	2b00      	cmp	r3, #0
 800575c:	d108      	bne.n	8005770 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005766:	d009      	beq.n	800577c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	61da      	str	r2, [r3, #28]
 800576e:	e005      	b.n	800577c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2200      	movs	r2, #0
 8005774:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005788:	b2db      	uxtb	r3, r3
 800578a:	2b00      	cmp	r3, #0
 800578c:	d106      	bne.n	800579c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f7fd f8c6 	bl	8002928 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2202      	movs	r2, #2
 80057a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80057b2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80057c4:	431a      	orrs	r2, r3
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80057ce:	431a      	orrs	r2, r3
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	691b      	ldr	r3, [r3, #16]
 80057d4:	f003 0302 	and.w	r3, r3, #2
 80057d8:	431a      	orrs	r2, r3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	695b      	ldr	r3, [r3, #20]
 80057de:	f003 0301 	and.w	r3, r3, #1
 80057e2:	431a      	orrs	r2, r3
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	699b      	ldr	r3, [r3, #24]
 80057e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80057ec:	431a      	orrs	r2, r3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	69db      	ldr	r3, [r3, #28]
 80057f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80057f6:	431a      	orrs	r2, r3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6a1b      	ldr	r3, [r3, #32]
 80057fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005800:	ea42 0103 	orr.w	r1, r2, r3
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005808:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	430a      	orrs	r2, r1
 8005812:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	699b      	ldr	r3, [r3, #24]
 8005818:	0c1b      	lsrs	r3, r3, #16
 800581a:	f003 0104 	and.w	r1, r3, #4
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005822:	f003 0210 	and.w	r2, r3, #16
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	430a      	orrs	r2, r1
 800582c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	69da      	ldr	r2, [r3, #28]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800583c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800584c:	2300      	movs	r3, #0
}
 800584e:	4618      	mov	r0, r3
 8005850:	3708      	adds	r7, #8
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}

08005856 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005856:	b580      	push	{r7, lr}
 8005858:	b08c      	sub	sp, #48	@ 0x30
 800585a:	af00      	add	r7, sp, #0
 800585c:	60f8      	str	r0, [r7, #12]
 800585e:	60b9      	str	r1, [r7, #8]
 8005860:	607a      	str	r2, [r7, #4]
 8005862:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005864:	2301      	movs	r3, #1
 8005866:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005868:	2300      	movs	r3, #0
 800586a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005874:	2b01      	cmp	r3, #1
 8005876:	d101      	bne.n	800587c <HAL_SPI_TransmitReceive+0x26>
 8005878:	2302      	movs	r3, #2
 800587a:	e198      	b.n	8005bae <HAL_SPI_TransmitReceive+0x358>
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005884:	f7fe fa3e 	bl	8003d04 <HAL_GetTick>
 8005888:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005890:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800589a:	887b      	ldrh	r3, [r7, #2]
 800589c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800589e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d00f      	beq.n	80058c6 <HAL_SPI_TransmitReceive+0x70>
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80058ac:	d107      	bne.n	80058be <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d103      	bne.n	80058be <HAL_SPI_TransmitReceive+0x68>
 80058b6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80058ba:	2b04      	cmp	r3, #4
 80058bc:	d003      	beq.n	80058c6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80058be:	2302      	movs	r3, #2
 80058c0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80058c4:	e16d      	b.n	8005ba2 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d005      	beq.n	80058d8 <HAL_SPI_TransmitReceive+0x82>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d002      	beq.n	80058d8 <HAL_SPI_TransmitReceive+0x82>
 80058d2:	887b      	ldrh	r3, [r7, #2]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d103      	bne.n	80058e0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80058de:	e160      	b.n	8005ba2 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	2b04      	cmp	r3, #4
 80058ea:	d003      	beq.n	80058f4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2205      	movs	r2, #5
 80058f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2200      	movs	r2, #0
 80058f8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	687a      	ldr	r2, [r7, #4]
 80058fe:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	887a      	ldrh	r2, [r7, #2]
 8005904:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	887a      	ldrh	r2, [r7, #2]
 800590a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	68ba      	ldr	r2, [r7, #8]
 8005910:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	887a      	ldrh	r2, [r7, #2]
 8005916:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	887a      	ldrh	r2, [r7, #2]
 800591c:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2200      	movs	r2, #0
 8005922:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2200      	movs	r2, #0
 8005928:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005934:	2b40      	cmp	r3, #64	@ 0x40
 8005936:	d007      	beq.n	8005948 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005946:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005950:	d17c      	bne.n	8005a4c <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d002      	beq.n	8005960 <HAL_SPI_TransmitReceive+0x10a>
 800595a:	8b7b      	ldrh	r3, [r7, #26]
 800595c:	2b01      	cmp	r3, #1
 800595e:	d16a      	bne.n	8005a36 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005964:	881a      	ldrh	r2, [r3, #0]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005970:	1c9a      	adds	r2, r3, #2
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800597a:	b29b      	uxth	r3, r3
 800597c:	3b01      	subs	r3, #1
 800597e:	b29a      	uxth	r2, r3
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005984:	e057      	b.n	8005a36 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	f003 0302 	and.w	r3, r3, #2
 8005990:	2b02      	cmp	r3, #2
 8005992:	d11b      	bne.n	80059cc <HAL_SPI_TransmitReceive+0x176>
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005998:	b29b      	uxth	r3, r3
 800599a:	2b00      	cmp	r3, #0
 800599c:	d016      	beq.n	80059cc <HAL_SPI_TransmitReceive+0x176>
 800599e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d113      	bne.n	80059cc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059a8:	881a      	ldrh	r2, [r3, #0]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059b4:	1c9a      	adds	r2, r3, #2
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80059be:	b29b      	uxth	r3, r3
 80059c0:	3b01      	subs	r3, #1
 80059c2:	b29a      	uxth	r2, r3
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80059c8:	2300      	movs	r3, #0
 80059ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	f003 0301 	and.w	r3, r3, #1
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d119      	bne.n	8005a0e <HAL_SPI_TransmitReceive+0x1b8>
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059de:	b29b      	uxth	r3, r3
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d014      	beq.n	8005a0e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	68da      	ldr	r2, [r3, #12]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059ee:	b292      	uxth	r2, r2
 80059f0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059f6:	1c9a      	adds	r2, r3, #2
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	3b01      	subs	r3, #1
 8005a04:	b29a      	uxth	r2, r3
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005a0e:	f7fe f979 	bl	8003d04 <HAL_GetTick>
 8005a12:	4602      	mov	r2, r0
 8005a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a16:	1ad3      	subs	r3, r2, r3
 8005a18:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d80b      	bhi.n	8005a36 <HAL_SPI_TransmitReceive+0x1e0>
 8005a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a20:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a24:	d007      	beq.n	8005a36 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8005a26:	2303      	movs	r3, #3
 8005a28:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8005a34:	e0b5      	b.n	8005ba2 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d1a2      	bne.n	8005986 <HAL_SPI_TransmitReceive+0x130>
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d19d      	bne.n	8005986 <HAL_SPI_TransmitReceive+0x130>
 8005a4a:	e080      	b.n	8005b4e <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d002      	beq.n	8005a5a <HAL_SPI_TransmitReceive+0x204>
 8005a54:	8b7b      	ldrh	r3, [r7, #26]
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d16f      	bne.n	8005b3a <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	330c      	adds	r3, #12
 8005a64:	7812      	ldrb	r2, [r2, #0]
 8005a66:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a6c:	1c5a      	adds	r2, r3, #1
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	3b01      	subs	r3, #1
 8005a7a:	b29a      	uxth	r2, r3
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a80:	e05b      	b.n	8005b3a <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	f003 0302 	and.w	r3, r3, #2
 8005a8c:	2b02      	cmp	r3, #2
 8005a8e:	d11c      	bne.n	8005aca <HAL_SPI_TransmitReceive+0x274>
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d017      	beq.n	8005aca <HAL_SPI_TransmitReceive+0x274>
 8005a9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d114      	bne.n	8005aca <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	330c      	adds	r3, #12
 8005aaa:	7812      	ldrb	r2, [r2, #0]
 8005aac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ab2:	1c5a      	adds	r2, r3, #1
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	3b01      	subs	r3, #1
 8005ac0:	b29a      	uxth	r2, r3
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	f003 0301 	and.w	r3, r3, #1
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d119      	bne.n	8005b0c <HAL_SPI_TransmitReceive+0x2b6>
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d014      	beq.n	8005b0c <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	68da      	ldr	r2, [r3, #12]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aec:	b2d2      	uxtb	r2, r2
 8005aee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005af4:	1c5a      	adds	r2, r3, #1
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	3b01      	subs	r3, #1
 8005b02:	b29a      	uxth	r2, r3
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005b0c:	f7fe f8fa 	bl	8003d04 <HAL_GetTick>
 8005b10:	4602      	mov	r2, r0
 8005b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b14:	1ad3      	subs	r3, r2, r3
 8005b16:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d803      	bhi.n	8005b24 <HAL_SPI_TransmitReceive+0x2ce>
 8005b1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b1e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005b22:	d102      	bne.n	8005b2a <HAL_SPI_TransmitReceive+0x2d4>
 8005b24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d107      	bne.n	8005b3a <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8005b38:	e033      	b.n	8005ba2 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d19e      	bne.n	8005a82 <HAL_SPI_TransmitReceive+0x22c>
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d199      	bne.n	8005a82 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b50:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005b52:	68f8      	ldr	r0, [r7, #12]
 8005b54:	f000 f9ca 	bl	8005eec <SPI_EndRxTxTransaction>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d006      	beq.n	8005b6c <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2220      	movs	r2, #32
 8005b68:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8005b6a:	e01a      	b.n	8005ba2 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d10a      	bne.n	8005b8a <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b74:	2300      	movs	r3, #0
 8005b76:	617b      	str	r3, [r7, #20]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	617b      	str	r3, [r7, #20]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	617b      	str	r3, [r7, #20]
 8005b88:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d003      	beq.n	8005b9a <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b98:	e003      	b.n	8005ba2 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005baa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3730      	adds	r7, #48	@ 0x30
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
	...

08005bb8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b088      	sub	sp, #32
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005bd0:	69bb      	ldr	r3, [r7, #24]
 8005bd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d10e      	bne.n	8005bf8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d009      	beq.n	8005bf8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d004      	beq.n	8005bf8 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	4798      	blx	r3
    return;
 8005bf6:	e0ce      	b.n	8005d96 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005bf8:	69bb      	ldr	r3, [r7, #24]
 8005bfa:	f003 0302 	and.w	r3, r3, #2
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d009      	beq.n	8005c16 <HAL_SPI_IRQHandler+0x5e>
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d004      	beq.n	8005c16 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	4798      	blx	r3
    return;
 8005c14:	e0bf      	b.n	8005d96 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005c16:	69bb      	ldr	r3, [r7, #24]
 8005c18:	f003 0320 	and.w	r3, r3, #32
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d10a      	bne.n	8005c36 <HAL_SPI_IRQHandler+0x7e>
 8005c20:	69bb      	ldr	r3, [r7, #24]
 8005c22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d105      	bne.n	8005c36 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005c2a:	69bb      	ldr	r3, [r7, #24]
 8005c2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	f000 80b0 	beq.w	8005d96 <HAL_SPI_IRQHandler+0x1de>
 8005c36:	69fb      	ldr	r3, [r7, #28]
 8005c38:	f003 0320 	and.w	r3, r3, #32
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	f000 80aa 	beq.w	8005d96 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005c42:	69bb      	ldr	r3, [r7, #24]
 8005c44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d023      	beq.n	8005c94 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005c52:	b2db      	uxtb	r3, r3
 8005c54:	2b03      	cmp	r3, #3
 8005c56:	d011      	beq.n	8005c7c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c5c:	f043 0204 	orr.w	r2, r3, #4
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c64:	2300      	movs	r3, #0
 8005c66:	617b      	str	r3, [r7, #20]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	617b      	str	r3, [r7, #20]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	617b      	str	r3, [r7, #20]
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	e00b      	b.n	8005c94 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	613b      	str	r3, [r7, #16]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	613b      	str	r3, [r7, #16]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	613b      	str	r3, [r7, #16]
 8005c90:	693b      	ldr	r3, [r7, #16]
        return;
 8005c92:	e080      	b.n	8005d96 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005c94:	69bb      	ldr	r3, [r7, #24]
 8005c96:	f003 0320 	and.w	r3, r3, #32
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d014      	beq.n	8005cc8 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ca2:	f043 0201 	orr.w	r2, r3, #1
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005caa:	2300      	movs	r3, #0
 8005cac:	60fb      	str	r3, [r7, #12]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	60fb      	str	r3, [r7, #12]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005cc4:	601a      	str	r2, [r3, #0]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005cc8:	69bb      	ldr	r3, [r7, #24]
 8005cca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d00c      	beq.n	8005cec <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cd6:	f043 0208 	orr.w	r2, r3, #8
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005cde:	2300      	movs	r3, #0
 8005ce0:	60bb      	str	r3, [r7, #8]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	60bb      	str	r3, [r7, #8]
 8005cea:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d04f      	beq.n	8005d94 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	685a      	ldr	r2, [r3, #4]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005d02:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	f003 0302 	and.w	r3, r3, #2
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d104      	bne.n	8005d20 <HAL_SPI_IRQHandler+0x168>
 8005d16:	69fb      	ldr	r3, [r7, #28]
 8005d18:	f003 0301 	and.w	r3, r3, #1
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d034      	beq.n	8005d8a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	685a      	ldr	r2, [r3, #4]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f022 0203 	bic.w	r2, r2, #3
 8005d2e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d011      	beq.n	8005d5c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d3c:	4a17      	ldr	r2, [pc, #92]	@ (8005d9c <HAL_SPI_IRQHandler+0x1e4>)
 8005d3e:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d44:	4618      	mov	r0, r3
 8005d46:	f7fe fa41 	bl	80041cc <HAL_DMA_Abort_IT>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d005      	beq.n	8005d5c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d54:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d016      	beq.n	8005d92 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d68:	4a0c      	ldr	r2, [pc, #48]	@ (8005d9c <HAL_SPI_IRQHandler+0x1e4>)
 8005d6a:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d70:	4618      	mov	r0, r3
 8005d72:	f7fe fa2b 	bl	80041cc <HAL_DMA_Abort_IT>
 8005d76:	4603      	mov	r3, r0
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d00a      	beq.n	8005d92 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d80:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8005d88:	e003      	b.n	8005d92 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f000 f808 	bl	8005da0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005d90:	e000      	b.n	8005d94 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8005d92:	bf00      	nop
    return;
 8005d94:	bf00      	nop
  }
}
 8005d96:	3720      	adds	r7, #32
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}
 8005d9c:	08005db5 	.word	0x08005db5

08005da0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b083      	sub	sp, #12
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005da8:	bf00      	nop
 8005daa:	370c      	adds	r7, #12
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b084      	sub	sp, #16
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dc0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005dce:	68f8      	ldr	r0, [r7, #12]
 8005dd0:	f7ff ffe6 	bl	8005da0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005dd4:	bf00      	nop
 8005dd6:	3710      	adds	r7, #16
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}

08005ddc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b088      	sub	sp, #32
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	60b9      	str	r1, [r7, #8]
 8005de6:	603b      	str	r3, [r7, #0]
 8005de8:	4613      	mov	r3, r2
 8005dea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005dec:	f7fd ff8a 	bl	8003d04 <HAL_GetTick>
 8005df0:	4602      	mov	r2, r0
 8005df2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005df4:	1a9b      	subs	r3, r3, r2
 8005df6:	683a      	ldr	r2, [r7, #0]
 8005df8:	4413      	add	r3, r2
 8005dfa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005dfc:	f7fd ff82 	bl	8003d04 <HAL_GetTick>
 8005e00:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005e02:	4b39      	ldr	r3, [pc, #228]	@ (8005ee8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	015b      	lsls	r3, r3, #5
 8005e08:	0d1b      	lsrs	r3, r3, #20
 8005e0a:	69fa      	ldr	r2, [r7, #28]
 8005e0c:	fb02 f303 	mul.w	r3, r2, r3
 8005e10:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e12:	e054      	b.n	8005ebe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e1a:	d050      	beq.n	8005ebe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005e1c:	f7fd ff72 	bl	8003d04 <HAL_GetTick>
 8005e20:	4602      	mov	r2, r0
 8005e22:	69bb      	ldr	r3, [r7, #24]
 8005e24:	1ad3      	subs	r3, r2, r3
 8005e26:	69fa      	ldr	r2, [r7, #28]
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d902      	bls.n	8005e32 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005e2c:	69fb      	ldr	r3, [r7, #28]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d13d      	bne.n	8005eae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	685a      	ldr	r2, [r3, #4]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005e40:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e4a:	d111      	bne.n	8005e70 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e54:	d004      	beq.n	8005e60 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e5e:	d107      	bne.n	8005e70 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e6e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e78:	d10f      	bne.n	8005e9a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005e88:	601a      	str	r2, [r3, #0]
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005e98:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005eaa:	2303      	movs	r3, #3
 8005eac:	e017      	b.n	8005ede <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d101      	bne.n	8005eb8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	3b01      	subs	r3, #1
 8005ebc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	689a      	ldr	r2, [r3, #8]
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	4013      	ands	r3, r2
 8005ec8:	68ba      	ldr	r2, [r7, #8]
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	bf0c      	ite	eq
 8005ece:	2301      	moveq	r3, #1
 8005ed0:	2300      	movne	r3, #0
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	79fb      	ldrb	r3, [r7, #7]
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d19b      	bne.n	8005e14 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005edc:	2300      	movs	r3, #0
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3720      	adds	r7, #32
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
 8005ee6:	bf00      	nop
 8005ee8:	20000004 	.word	0x20000004

08005eec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b088      	sub	sp, #32
 8005ef0:	af02      	add	r7, sp, #8
 8005ef2:	60f8      	str	r0, [r7, #12]
 8005ef4:	60b9      	str	r1, [r7, #8]
 8005ef6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	9300      	str	r3, [sp, #0]
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	2201      	movs	r2, #1
 8005f00:	2102      	movs	r1, #2
 8005f02:	68f8      	ldr	r0, [r7, #12]
 8005f04:	f7ff ff6a 	bl	8005ddc <SPI_WaitFlagStateUntilTimeout>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d007      	beq.n	8005f1e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f12:	f043 0220 	orr.w	r2, r3, #32
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005f1a:	2303      	movs	r3, #3
 8005f1c:	e032      	b.n	8005f84 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005f1e:	4b1b      	ldr	r3, [pc, #108]	@ (8005f8c <SPI_EndRxTxTransaction+0xa0>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a1b      	ldr	r2, [pc, #108]	@ (8005f90 <SPI_EndRxTxTransaction+0xa4>)
 8005f24:	fba2 2303 	umull	r2, r3, r2, r3
 8005f28:	0d5b      	lsrs	r3, r3, #21
 8005f2a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005f2e:	fb02 f303 	mul.w	r3, r2, r3
 8005f32:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f3c:	d112      	bne.n	8005f64 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	9300      	str	r3, [sp, #0]
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	2200      	movs	r2, #0
 8005f46:	2180      	movs	r1, #128	@ 0x80
 8005f48:	68f8      	ldr	r0, [r7, #12]
 8005f4a:	f7ff ff47 	bl	8005ddc <SPI_WaitFlagStateUntilTimeout>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d016      	beq.n	8005f82 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f58:	f043 0220 	orr.w	r2, r3, #32
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005f60:	2303      	movs	r3, #3
 8005f62:	e00f      	b.n	8005f84 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d00a      	beq.n	8005f80 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	3b01      	subs	r3, #1
 8005f6e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f7a:	2b80      	cmp	r3, #128	@ 0x80
 8005f7c:	d0f2      	beq.n	8005f64 <SPI_EndRxTxTransaction+0x78>
 8005f7e:	e000      	b.n	8005f82 <SPI_EndRxTxTransaction+0x96>
        break;
 8005f80:	bf00      	nop
  }

  return HAL_OK;
 8005f82:	2300      	movs	r3, #0
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3718      	adds	r7, #24
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}
 8005f8c:	20000004 	.word	0x20000004
 8005f90:	165e9f81 	.word	0x165e9f81

08005f94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b082      	sub	sp, #8
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d101      	bne.n	8005fa6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e041      	b.n	800602a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d106      	bne.n	8005fc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 f839 	bl	8006032 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2202      	movs	r2, #2
 8005fc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	3304      	adds	r3, #4
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	4610      	mov	r0, r2
 8005fd4:	f000 fb9a 	bl	800670c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2201      	movs	r2, #1
 8005fec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2201      	movs	r2, #1
 8006004:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2201      	movs	r2, #1
 800600c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2201      	movs	r2, #1
 8006014:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2201      	movs	r2, #1
 800601c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2201      	movs	r2, #1
 8006024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006028:	2300      	movs	r3, #0
}
 800602a:	4618      	mov	r0, r3
 800602c:	3708      	adds	r7, #8
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}

08006032 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006032:	b480      	push	{r7}
 8006034:	b083      	sub	sp, #12
 8006036:	af00      	add	r7, sp, #0
 8006038:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800603a:	bf00      	nop
 800603c:	370c      	adds	r7, #12
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr
	...

08006048 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006048:	b480      	push	{r7}
 800604a:	b085      	sub	sp, #20
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006056:	b2db      	uxtb	r3, r3
 8006058:	2b01      	cmp	r3, #1
 800605a:	d001      	beq.n	8006060 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800605c:	2301      	movs	r3, #1
 800605e:	e04e      	b.n	80060fe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2202      	movs	r2, #2
 8006064:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	68da      	ldr	r2, [r3, #12]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f042 0201 	orr.w	r2, r2, #1
 8006076:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a23      	ldr	r2, [pc, #140]	@ (800610c <HAL_TIM_Base_Start_IT+0xc4>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d022      	beq.n	80060c8 <HAL_TIM_Base_Start_IT+0x80>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800608a:	d01d      	beq.n	80060c8 <HAL_TIM_Base_Start_IT+0x80>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a1f      	ldr	r2, [pc, #124]	@ (8006110 <HAL_TIM_Base_Start_IT+0xc8>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d018      	beq.n	80060c8 <HAL_TIM_Base_Start_IT+0x80>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a1e      	ldr	r2, [pc, #120]	@ (8006114 <HAL_TIM_Base_Start_IT+0xcc>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d013      	beq.n	80060c8 <HAL_TIM_Base_Start_IT+0x80>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a1c      	ldr	r2, [pc, #112]	@ (8006118 <HAL_TIM_Base_Start_IT+0xd0>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d00e      	beq.n	80060c8 <HAL_TIM_Base_Start_IT+0x80>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a1b      	ldr	r2, [pc, #108]	@ (800611c <HAL_TIM_Base_Start_IT+0xd4>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d009      	beq.n	80060c8 <HAL_TIM_Base_Start_IT+0x80>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a19      	ldr	r2, [pc, #100]	@ (8006120 <HAL_TIM_Base_Start_IT+0xd8>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d004      	beq.n	80060c8 <HAL_TIM_Base_Start_IT+0x80>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a18      	ldr	r2, [pc, #96]	@ (8006124 <HAL_TIM_Base_Start_IT+0xdc>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d111      	bne.n	80060ec <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	f003 0307 	and.w	r3, r3, #7
 80060d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2b06      	cmp	r3, #6
 80060d8:	d010      	beq.n	80060fc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f042 0201 	orr.w	r2, r2, #1
 80060e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060ea:	e007      	b.n	80060fc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f042 0201 	orr.w	r2, r2, #1
 80060fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80060fc:	2300      	movs	r3, #0
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3714      	adds	r7, #20
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr
 800610a:	bf00      	nop
 800610c:	40010000 	.word	0x40010000
 8006110:	40000400 	.word	0x40000400
 8006114:	40000800 	.word	0x40000800
 8006118:	40000c00 	.word	0x40000c00
 800611c:	40010400 	.word	0x40010400
 8006120:	40014000 	.word	0x40014000
 8006124:	40001800 	.word	0x40001800

08006128 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b082      	sub	sp, #8
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d101      	bne.n	800613a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	e041      	b.n	80061be <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006140:	b2db      	uxtb	r3, r3
 8006142:	2b00      	cmp	r3, #0
 8006144:	d106      	bne.n	8006154 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f7fc fece 	bl	8002ef0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2202      	movs	r2, #2
 8006158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	3304      	adds	r3, #4
 8006164:	4619      	mov	r1, r3
 8006166:	4610      	mov	r0, r2
 8006168:	f000 fad0 	bl	800670c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2201      	movs	r2, #1
 8006170:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2201      	movs	r2, #1
 8006188:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2201      	movs	r2, #1
 80061a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2201      	movs	r2, #1
 80061a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2201      	movs	r2, #1
 80061b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2201      	movs	r2, #1
 80061b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80061bc:	2300      	movs	r3, #0
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3708      	adds	r7, #8
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
	...

080061c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b084      	sub	sp, #16
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
 80061d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d109      	bne.n	80061ec <HAL_TIM_PWM_Start+0x24>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80061de:	b2db      	uxtb	r3, r3
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	bf14      	ite	ne
 80061e4:	2301      	movne	r3, #1
 80061e6:	2300      	moveq	r3, #0
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	e022      	b.n	8006232 <HAL_TIM_PWM_Start+0x6a>
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	2b04      	cmp	r3, #4
 80061f0:	d109      	bne.n	8006206 <HAL_TIM_PWM_Start+0x3e>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	bf14      	ite	ne
 80061fe:	2301      	movne	r3, #1
 8006200:	2300      	moveq	r3, #0
 8006202:	b2db      	uxtb	r3, r3
 8006204:	e015      	b.n	8006232 <HAL_TIM_PWM_Start+0x6a>
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	2b08      	cmp	r3, #8
 800620a:	d109      	bne.n	8006220 <HAL_TIM_PWM_Start+0x58>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006212:	b2db      	uxtb	r3, r3
 8006214:	2b01      	cmp	r3, #1
 8006216:	bf14      	ite	ne
 8006218:	2301      	movne	r3, #1
 800621a:	2300      	moveq	r3, #0
 800621c:	b2db      	uxtb	r3, r3
 800621e:	e008      	b.n	8006232 <HAL_TIM_PWM_Start+0x6a>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006226:	b2db      	uxtb	r3, r3
 8006228:	2b01      	cmp	r3, #1
 800622a:	bf14      	ite	ne
 800622c:	2301      	movne	r3, #1
 800622e:	2300      	moveq	r3, #0
 8006230:	b2db      	uxtb	r3, r3
 8006232:	2b00      	cmp	r3, #0
 8006234:	d001      	beq.n	800623a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	e07c      	b.n	8006334 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d104      	bne.n	800624a <HAL_TIM_PWM_Start+0x82>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2202      	movs	r2, #2
 8006244:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006248:	e013      	b.n	8006272 <HAL_TIM_PWM_Start+0xaa>
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	2b04      	cmp	r3, #4
 800624e:	d104      	bne.n	800625a <HAL_TIM_PWM_Start+0x92>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2202      	movs	r2, #2
 8006254:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006258:	e00b      	b.n	8006272 <HAL_TIM_PWM_Start+0xaa>
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	2b08      	cmp	r3, #8
 800625e:	d104      	bne.n	800626a <HAL_TIM_PWM_Start+0xa2>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2202      	movs	r2, #2
 8006264:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006268:	e003      	b.n	8006272 <HAL_TIM_PWM_Start+0xaa>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2202      	movs	r2, #2
 800626e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	2201      	movs	r2, #1
 8006278:	6839      	ldr	r1, [r7, #0]
 800627a:	4618      	mov	r0, r3
 800627c:	f000 fca2 	bl	8006bc4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a2d      	ldr	r2, [pc, #180]	@ (800633c <HAL_TIM_PWM_Start+0x174>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d004      	beq.n	8006294 <HAL_TIM_PWM_Start+0xcc>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a2c      	ldr	r2, [pc, #176]	@ (8006340 <HAL_TIM_PWM_Start+0x178>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d101      	bne.n	8006298 <HAL_TIM_PWM_Start+0xd0>
 8006294:	2301      	movs	r3, #1
 8006296:	e000      	b.n	800629a <HAL_TIM_PWM_Start+0xd2>
 8006298:	2300      	movs	r3, #0
 800629a:	2b00      	cmp	r3, #0
 800629c:	d007      	beq.n	80062ae <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80062ac:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a22      	ldr	r2, [pc, #136]	@ (800633c <HAL_TIM_PWM_Start+0x174>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d022      	beq.n	80062fe <HAL_TIM_PWM_Start+0x136>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062c0:	d01d      	beq.n	80062fe <HAL_TIM_PWM_Start+0x136>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a1f      	ldr	r2, [pc, #124]	@ (8006344 <HAL_TIM_PWM_Start+0x17c>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d018      	beq.n	80062fe <HAL_TIM_PWM_Start+0x136>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a1d      	ldr	r2, [pc, #116]	@ (8006348 <HAL_TIM_PWM_Start+0x180>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d013      	beq.n	80062fe <HAL_TIM_PWM_Start+0x136>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a1c      	ldr	r2, [pc, #112]	@ (800634c <HAL_TIM_PWM_Start+0x184>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d00e      	beq.n	80062fe <HAL_TIM_PWM_Start+0x136>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a16      	ldr	r2, [pc, #88]	@ (8006340 <HAL_TIM_PWM_Start+0x178>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d009      	beq.n	80062fe <HAL_TIM_PWM_Start+0x136>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a18      	ldr	r2, [pc, #96]	@ (8006350 <HAL_TIM_PWM_Start+0x188>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d004      	beq.n	80062fe <HAL_TIM_PWM_Start+0x136>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a16      	ldr	r2, [pc, #88]	@ (8006354 <HAL_TIM_PWM_Start+0x18c>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d111      	bne.n	8006322 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	f003 0307 	and.w	r3, r3, #7
 8006308:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2b06      	cmp	r3, #6
 800630e:	d010      	beq.n	8006332 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f042 0201 	orr.w	r2, r2, #1
 800631e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006320:	e007      	b.n	8006332 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f042 0201 	orr.w	r2, r2, #1
 8006330:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006332:	2300      	movs	r3, #0
}
 8006334:	4618      	mov	r0, r3
 8006336:	3710      	adds	r7, #16
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}
 800633c:	40010000 	.word	0x40010000
 8006340:	40010400 	.word	0x40010400
 8006344:	40000400 	.word	0x40000400
 8006348:	40000800 	.word	0x40000800
 800634c:	40000c00 	.word	0x40000c00
 8006350:	40014000 	.word	0x40014000
 8006354:	40001800 	.word	0x40001800

08006358 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b084      	sub	sp, #16
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	f003 0302 	and.w	r3, r3, #2
 8006376:	2b00      	cmp	r3, #0
 8006378:	d020      	beq.n	80063bc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f003 0302 	and.w	r3, r3, #2
 8006380:	2b00      	cmp	r3, #0
 8006382:	d01b      	beq.n	80063bc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f06f 0202 	mvn.w	r2, #2
 800638c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2201      	movs	r2, #1
 8006392:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	699b      	ldr	r3, [r3, #24]
 800639a:	f003 0303 	and.w	r3, r3, #3
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d003      	beq.n	80063aa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 f994 	bl	80066d0 <HAL_TIM_IC_CaptureCallback>
 80063a8:	e005      	b.n	80063b6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f000 f986 	bl	80066bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f000 f997 	bl	80066e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2200      	movs	r2, #0
 80063ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	f003 0304 	and.w	r3, r3, #4
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d020      	beq.n	8006408 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	f003 0304 	and.w	r3, r3, #4
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d01b      	beq.n	8006408 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f06f 0204 	mvn.w	r2, #4
 80063d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2202      	movs	r2, #2
 80063de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	699b      	ldr	r3, [r3, #24]
 80063e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d003      	beq.n	80063f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 f96e 	bl	80066d0 <HAL_TIM_IC_CaptureCallback>
 80063f4:	e005      	b.n	8006402 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f000 f960 	bl	80066bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f000 f971 	bl	80066e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2200      	movs	r2, #0
 8006406:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	f003 0308 	and.w	r3, r3, #8
 800640e:	2b00      	cmp	r3, #0
 8006410:	d020      	beq.n	8006454 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	f003 0308 	and.w	r3, r3, #8
 8006418:	2b00      	cmp	r3, #0
 800641a:	d01b      	beq.n	8006454 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f06f 0208 	mvn.w	r2, #8
 8006424:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2204      	movs	r2, #4
 800642a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	69db      	ldr	r3, [r3, #28]
 8006432:	f003 0303 	and.w	r3, r3, #3
 8006436:	2b00      	cmp	r3, #0
 8006438:	d003      	beq.n	8006442 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f000 f948 	bl	80066d0 <HAL_TIM_IC_CaptureCallback>
 8006440:	e005      	b.n	800644e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f000 f93a 	bl	80066bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f000 f94b 	bl	80066e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	f003 0310 	and.w	r3, r3, #16
 800645a:	2b00      	cmp	r3, #0
 800645c:	d020      	beq.n	80064a0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f003 0310 	and.w	r3, r3, #16
 8006464:	2b00      	cmp	r3, #0
 8006466:	d01b      	beq.n	80064a0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f06f 0210 	mvn.w	r2, #16
 8006470:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2208      	movs	r2, #8
 8006476:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	69db      	ldr	r3, [r3, #28]
 800647e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006482:	2b00      	cmp	r3, #0
 8006484:	d003      	beq.n	800648e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f000 f922 	bl	80066d0 <HAL_TIM_IC_CaptureCallback>
 800648c:	e005      	b.n	800649a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f000 f914 	bl	80066bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f000 f925 	bl	80066e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2200      	movs	r2, #0
 800649e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	f003 0301 	and.w	r3, r3, #1
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d00c      	beq.n	80064c4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f003 0301 	and.w	r3, r3, #1
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d007      	beq.n	80064c4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f06f 0201 	mvn.w	r2, #1
 80064bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f7fb fe06 	bl	80020d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d00c      	beq.n	80064e8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d007      	beq.n	80064e8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80064e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f000 fc1a 	bl	8006d1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d00c      	beq.n	800650c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d007      	beq.n	800650c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006504:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 f8f6 	bl	80066f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	f003 0320 	and.w	r3, r3, #32
 8006512:	2b00      	cmp	r3, #0
 8006514:	d00c      	beq.n	8006530 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f003 0320 	and.w	r3, r3, #32
 800651c:	2b00      	cmp	r3, #0
 800651e:	d007      	beq.n	8006530 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f06f 0220 	mvn.w	r2, #32
 8006528:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 fbec 	bl	8006d08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006530:	bf00      	nop
 8006532:	3710      	adds	r7, #16
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}

08006538 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b086      	sub	sp, #24
 800653c:	af00      	add	r7, sp, #0
 800653e:	60f8      	str	r0, [r7, #12]
 8006540:	60b9      	str	r1, [r7, #8]
 8006542:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006544:	2300      	movs	r3, #0
 8006546:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800654e:	2b01      	cmp	r3, #1
 8006550:	d101      	bne.n	8006556 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006552:	2302      	movs	r3, #2
 8006554:	e0ae      	b.n	80066b4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2201      	movs	r2, #1
 800655a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2b0c      	cmp	r3, #12
 8006562:	f200 809f 	bhi.w	80066a4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006566:	a201      	add	r2, pc, #4	@ (adr r2, 800656c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800656c:	080065a1 	.word	0x080065a1
 8006570:	080066a5 	.word	0x080066a5
 8006574:	080066a5 	.word	0x080066a5
 8006578:	080066a5 	.word	0x080066a5
 800657c:	080065e1 	.word	0x080065e1
 8006580:	080066a5 	.word	0x080066a5
 8006584:	080066a5 	.word	0x080066a5
 8006588:	080066a5 	.word	0x080066a5
 800658c:	08006623 	.word	0x08006623
 8006590:	080066a5 	.word	0x080066a5
 8006594:	080066a5 	.word	0x080066a5
 8006598:	080066a5 	.word	0x080066a5
 800659c:	08006663 	.word	0x08006663
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	68b9      	ldr	r1, [r7, #8]
 80065a6:	4618      	mov	r0, r3
 80065a8:	f000 f95c 	bl	8006864 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	699a      	ldr	r2, [r3, #24]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f042 0208 	orr.w	r2, r2, #8
 80065ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	699a      	ldr	r2, [r3, #24]
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f022 0204 	bic.w	r2, r2, #4
 80065ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	6999      	ldr	r1, [r3, #24]
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	691a      	ldr	r2, [r3, #16]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	430a      	orrs	r2, r1
 80065dc:	619a      	str	r2, [r3, #24]
      break;
 80065de:	e064      	b.n	80066aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	68b9      	ldr	r1, [r7, #8]
 80065e6:	4618      	mov	r0, r3
 80065e8:	f000 f9ac 	bl	8006944 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	699a      	ldr	r2, [r3, #24]
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80065fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	699a      	ldr	r2, [r3, #24]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800660a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	6999      	ldr	r1, [r3, #24]
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	691b      	ldr	r3, [r3, #16]
 8006616:	021a      	lsls	r2, r3, #8
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	430a      	orrs	r2, r1
 800661e:	619a      	str	r2, [r3, #24]
      break;
 8006620:	e043      	b.n	80066aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	68b9      	ldr	r1, [r7, #8]
 8006628:	4618      	mov	r0, r3
 800662a:	f000 fa01 	bl	8006a30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	69da      	ldr	r2, [r3, #28]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f042 0208 	orr.w	r2, r2, #8
 800663c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	69da      	ldr	r2, [r3, #28]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f022 0204 	bic.w	r2, r2, #4
 800664c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	69d9      	ldr	r1, [r3, #28]
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	691a      	ldr	r2, [r3, #16]
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	430a      	orrs	r2, r1
 800665e:	61da      	str	r2, [r3, #28]
      break;
 8006660:	e023      	b.n	80066aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	68b9      	ldr	r1, [r7, #8]
 8006668:	4618      	mov	r0, r3
 800666a:	f000 fa55 	bl	8006b18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	69da      	ldr	r2, [r3, #28]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800667c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	69da      	ldr	r2, [r3, #28]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800668c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	69d9      	ldr	r1, [r3, #28]
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	691b      	ldr	r3, [r3, #16]
 8006698:	021a      	lsls	r2, r3, #8
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	430a      	orrs	r2, r1
 80066a0:	61da      	str	r2, [r3, #28]
      break;
 80066a2:	e002      	b.n	80066aa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80066a4:	2301      	movs	r3, #1
 80066a6:	75fb      	strb	r3, [r7, #23]
      break;
 80066a8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2200      	movs	r2, #0
 80066ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80066b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3718      	adds	r7, #24
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}

080066bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80066bc:	b480      	push	{r7}
 80066be:	b083      	sub	sp, #12
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80066c4:	bf00      	nop
 80066c6:	370c      	adds	r7, #12
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr

080066d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b083      	sub	sp, #12
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80066d8:	bf00      	nop
 80066da:	370c      	adds	r7, #12
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr

080066e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b083      	sub	sp, #12
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80066ec:	bf00      	nop
 80066ee:	370c      	adds	r7, #12
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr

080066f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b083      	sub	sp, #12
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006700:	bf00      	nop
 8006702:	370c      	adds	r7, #12
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr

0800670c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800670c:	b480      	push	{r7}
 800670e:	b085      	sub	sp, #20
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	4a46      	ldr	r2, [pc, #280]	@ (8006838 <TIM_Base_SetConfig+0x12c>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d013      	beq.n	800674c <TIM_Base_SetConfig+0x40>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800672a:	d00f      	beq.n	800674c <TIM_Base_SetConfig+0x40>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	4a43      	ldr	r2, [pc, #268]	@ (800683c <TIM_Base_SetConfig+0x130>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d00b      	beq.n	800674c <TIM_Base_SetConfig+0x40>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	4a42      	ldr	r2, [pc, #264]	@ (8006840 <TIM_Base_SetConfig+0x134>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d007      	beq.n	800674c <TIM_Base_SetConfig+0x40>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	4a41      	ldr	r2, [pc, #260]	@ (8006844 <TIM_Base_SetConfig+0x138>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d003      	beq.n	800674c <TIM_Base_SetConfig+0x40>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	4a40      	ldr	r2, [pc, #256]	@ (8006848 <TIM_Base_SetConfig+0x13c>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d108      	bne.n	800675e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006752:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	68fa      	ldr	r2, [r7, #12]
 800675a:	4313      	orrs	r3, r2
 800675c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	4a35      	ldr	r2, [pc, #212]	@ (8006838 <TIM_Base_SetConfig+0x12c>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d02b      	beq.n	80067be <TIM_Base_SetConfig+0xb2>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800676c:	d027      	beq.n	80067be <TIM_Base_SetConfig+0xb2>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	4a32      	ldr	r2, [pc, #200]	@ (800683c <TIM_Base_SetConfig+0x130>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d023      	beq.n	80067be <TIM_Base_SetConfig+0xb2>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	4a31      	ldr	r2, [pc, #196]	@ (8006840 <TIM_Base_SetConfig+0x134>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d01f      	beq.n	80067be <TIM_Base_SetConfig+0xb2>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	4a30      	ldr	r2, [pc, #192]	@ (8006844 <TIM_Base_SetConfig+0x138>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d01b      	beq.n	80067be <TIM_Base_SetConfig+0xb2>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	4a2f      	ldr	r2, [pc, #188]	@ (8006848 <TIM_Base_SetConfig+0x13c>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d017      	beq.n	80067be <TIM_Base_SetConfig+0xb2>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	4a2e      	ldr	r2, [pc, #184]	@ (800684c <TIM_Base_SetConfig+0x140>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d013      	beq.n	80067be <TIM_Base_SetConfig+0xb2>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	4a2d      	ldr	r2, [pc, #180]	@ (8006850 <TIM_Base_SetConfig+0x144>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d00f      	beq.n	80067be <TIM_Base_SetConfig+0xb2>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	4a2c      	ldr	r2, [pc, #176]	@ (8006854 <TIM_Base_SetConfig+0x148>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d00b      	beq.n	80067be <TIM_Base_SetConfig+0xb2>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	4a2b      	ldr	r2, [pc, #172]	@ (8006858 <TIM_Base_SetConfig+0x14c>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d007      	beq.n	80067be <TIM_Base_SetConfig+0xb2>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	4a2a      	ldr	r2, [pc, #168]	@ (800685c <TIM_Base_SetConfig+0x150>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d003      	beq.n	80067be <TIM_Base_SetConfig+0xb2>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	4a29      	ldr	r2, [pc, #164]	@ (8006860 <TIM_Base_SetConfig+0x154>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d108      	bne.n	80067d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80067c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	68db      	ldr	r3, [r3, #12]
 80067ca:	68fa      	ldr	r2, [r7, #12]
 80067cc:	4313      	orrs	r3, r2
 80067ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	695b      	ldr	r3, [r3, #20]
 80067da:	4313      	orrs	r3, r2
 80067dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	68fa      	ldr	r2, [r7, #12]
 80067e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	689a      	ldr	r2, [r3, #8]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	4a10      	ldr	r2, [pc, #64]	@ (8006838 <TIM_Base_SetConfig+0x12c>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d003      	beq.n	8006804 <TIM_Base_SetConfig+0xf8>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	4a12      	ldr	r2, [pc, #72]	@ (8006848 <TIM_Base_SetConfig+0x13c>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d103      	bne.n	800680c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	691a      	ldr	r2, [r3, #16]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2201      	movs	r2, #1
 8006810:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	691b      	ldr	r3, [r3, #16]
 8006816:	f003 0301 	and.w	r3, r3, #1
 800681a:	2b01      	cmp	r3, #1
 800681c:	d105      	bne.n	800682a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	691b      	ldr	r3, [r3, #16]
 8006822:	f023 0201 	bic.w	r2, r3, #1
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	611a      	str	r2, [r3, #16]
  }
}
 800682a:	bf00      	nop
 800682c:	3714      	adds	r7, #20
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr
 8006836:	bf00      	nop
 8006838:	40010000 	.word	0x40010000
 800683c:	40000400 	.word	0x40000400
 8006840:	40000800 	.word	0x40000800
 8006844:	40000c00 	.word	0x40000c00
 8006848:	40010400 	.word	0x40010400
 800684c:	40014000 	.word	0x40014000
 8006850:	40014400 	.word	0x40014400
 8006854:	40014800 	.word	0x40014800
 8006858:	40001800 	.word	0x40001800
 800685c:	40001c00 	.word	0x40001c00
 8006860:	40002000 	.word	0x40002000

08006864 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006864:	b480      	push	{r7}
 8006866:	b087      	sub	sp, #28
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6a1b      	ldr	r3, [r3, #32]
 8006872:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6a1b      	ldr	r3, [r3, #32]
 8006878:	f023 0201 	bic.w	r2, r3, #1
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	699b      	ldr	r3, [r3, #24]
 800688a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006892:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f023 0303 	bic.w	r3, r3, #3
 800689a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	68fa      	ldr	r2, [r7, #12]
 80068a2:	4313      	orrs	r3, r2
 80068a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	f023 0302 	bic.w	r3, r3, #2
 80068ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	689b      	ldr	r3, [r3, #8]
 80068b2:	697a      	ldr	r2, [r7, #20]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	4a20      	ldr	r2, [pc, #128]	@ (800693c <TIM_OC1_SetConfig+0xd8>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d003      	beq.n	80068c8 <TIM_OC1_SetConfig+0x64>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	4a1f      	ldr	r2, [pc, #124]	@ (8006940 <TIM_OC1_SetConfig+0xdc>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d10c      	bne.n	80068e2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	f023 0308 	bic.w	r3, r3, #8
 80068ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	68db      	ldr	r3, [r3, #12]
 80068d4:	697a      	ldr	r2, [r7, #20]
 80068d6:	4313      	orrs	r3, r2
 80068d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	f023 0304 	bic.w	r3, r3, #4
 80068e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	4a15      	ldr	r2, [pc, #84]	@ (800693c <TIM_OC1_SetConfig+0xd8>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d003      	beq.n	80068f2 <TIM_OC1_SetConfig+0x8e>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	4a14      	ldr	r2, [pc, #80]	@ (8006940 <TIM_OC1_SetConfig+0xdc>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d111      	bne.n	8006916 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80068f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006900:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	695b      	ldr	r3, [r3, #20]
 8006906:	693a      	ldr	r2, [r7, #16]
 8006908:	4313      	orrs	r3, r2
 800690a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	699b      	ldr	r3, [r3, #24]
 8006910:	693a      	ldr	r2, [r7, #16]
 8006912:	4313      	orrs	r3, r2
 8006914:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	693a      	ldr	r2, [r7, #16]
 800691a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	68fa      	ldr	r2, [r7, #12]
 8006920:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	685a      	ldr	r2, [r3, #4]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	697a      	ldr	r2, [r7, #20]
 800692e:	621a      	str	r2, [r3, #32]
}
 8006930:	bf00      	nop
 8006932:	371c      	adds	r7, #28
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr
 800693c:	40010000 	.word	0x40010000
 8006940:	40010400 	.word	0x40010400

08006944 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006944:	b480      	push	{r7}
 8006946:	b087      	sub	sp, #28
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6a1b      	ldr	r3, [r3, #32]
 8006952:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6a1b      	ldr	r3, [r3, #32]
 8006958:	f023 0210 	bic.w	r2, r3, #16
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	699b      	ldr	r3, [r3, #24]
 800696a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006972:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800697a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	021b      	lsls	r3, r3, #8
 8006982:	68fa      	ldr	r2, [r7, #12]
 8006984:	4313      	orrs	r3, r2
 8006986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	f023 0320 	bic.w	r3, r3, #32
 800698e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	011b      	lsls	r3, r3, #4
 8006996:	697a      	ldr	r2, [r7, #20]
 8006998:	4313      	orrs	r3, r2
 800699a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	4a22      	ldr	r2, [pc, #136]	@ (8006a28 <TIM_OC2_SetConfig+0xe4>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d003      	beq.n	80069ac <TIM_OC2_SetConfig+0x68>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	4a21      	ldr	r2, [pc, #132]	@ (8006a2c <TIM_OC2_SetConfig+0xe8>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d10d      	bne.n	80069c8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80069b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	68db      	ldr	r3, [r3, #12]
 80069b8:	011b      	lsls	r3, r3, #4
 80069ba:	697a      	ldr	r2, [r7, #20]
 80069bc:	4313      	orrs	r3, r2
 80069be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80069c6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	4a17      	ldr	r2, [pc, #92]	@ (8006a28 <TIM_OC2_SetConfig+0xe4>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d003      	beq.n	80069d8 <TIM_OC2_SetConfig+0x94>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	4a16      	ldr	r2, [pc, #88]	@ (8006a2c <TIM_OC2_SetConfig+0xe8>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d113      	bne.n	8006a00 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80069de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80069e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	695b      	ldr	r3, [r3, #20]
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	693a      	ldr	r2, [r7, #16]
 80069f0:	4313      	orrs	r3, r2
 80069f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	699b      	ldr	r3, [r3, #24]
 80069f8:	009b      	lsls	r3, r3, #2
 80069fa:	693a      	ldr	r2, [r7, #16]
 80069fc:	4313      	orrs	r3, r2
 80069fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	693a      	ldr	r2, [r7, #16]
 8006a04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	68fa      	ldr	r2, [r7, #12]
 8006a0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	685a      	ldr	r2, [r3, #4]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	697a      	ldr	r2, [r7, #20]
 8006a18:	621a      	str	r2, [r3, #32]
}
 8006a1a:	bf00      	nop
 8006a1c:	371c      	adds	r7, #28
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a24:	4770      	bx	lr
 8006a26:	bf00      	nop
 8006a28:	40010000 	.word	0x40010000
 8006a2c:	40010400 	.word	0x40010400

08006a30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b087      	sub	sp, #28
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6a1b      	ldr	r3, [r3, #32]
 8006a3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6a1b      	ldr	r3, [r3, #32]
 8006a44:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	69db      	ldr	r3, [r3, #28]
 8006a56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f023 0303 	bic.w	r3, r3, #3
 8006a66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	68fa      	ldr	r2, [r7, #12]
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006a78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	021b      	lsls	r3, r3, #8
 8006a80:	697a      	ldr	r2, [r7, #20]
 8006a82:	4313      	orrs	r3, r2
 8006a84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	4a21      	ldr	r2, [pc, #132]	@ (8006b10 <TIM_OC3_SetConfig+0xe0>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d003      	beq.n	8006a96 <TIM_OC3_SetConfig+0x66>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	4a20      	ldr	r2, [pc, #128]	@ (8006b14 <TIM_OC3_SetConfig+0xe4>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d10d      	bne.n	8006ab2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006a9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	68db      	ldr	r3, [r3, #12]
 8006aa2:	021b      	lsls	r3, r3, #8
 8006aa4:	697a      	ldr	r2, [r7, #20]
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006ab0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	4a16      	ldr	r2, [pc, #88]	@ (8006b10 <TIM_OC3_SetConfig+0xe0>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d003      	beq.n	8006ac2 <TIM_OC3_SetConfig+0x92>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	4a15      	ldr	r2, [pc, #84]	@ (8006b14 <TIM_OC3_SetConfig+0xe4>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d113      	bne.n	8006aea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006ac8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006ad0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	695b      	ldr	r3, [r3, #20]
 8006ad6:	011b      	lsls	r3, r3, #4
 8006ad8:	693a      	ldr	r2, [r7, #16]
 8006ada:	4313      	orrs	r3, r2
 8006adc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	699b      	ldr	r3, [r3, #24]
 8006ae2:	011b      	lsls	r3, r3, #4
 8006ae4:	693a      	ldr	r2, [r7, #16]
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	693a      	ldr	r2, [r7, #16]
 8006aee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	68fa      	ldr	r2, [r7, #12]
 8006af4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	685a      	ldr	r2, [r3, #4]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	697a      	ldr	r2, [r7, #20]
 8006b02:	621a      	str	r2, [r3, #32]
}
 8006b04:	bf00      	nop
 8006b06:	371c      	adds	r7, #28
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr
 8006b10:	40010000 	.word	0x40010000
 8006b14:	40010400 	.word	0x40010400

08006b18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b087      	sub	sp, #28
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6a1b      	ldr	r3, [r3, #32]
 8006b26:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6a1b      	ldr	r3, [r3, #32]
 8006b2c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	69db      	ldr	r3, [r3, #28]
 8006b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	021b      	lsls	r3, r3, #8
 8006b56:	68fa      	ldr	r2, [r7, #12]
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006b62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	689b      	ldr	r3, [r3, #8]
 8006b68:	031b      	lsls	r3, r3, #12
 8006b6a:	693a      	ldr	r2, [r7, #16]
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	4a12      	ldr	r2, [pc, #72]	@ (8006bbc <TIM_OC4_SetConfig+0xa4>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d003      	beq.n	8006b80 <TIM_OC4_SetConfig+0x68>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	4a11      	ldr	r2, [pc, #68]	@ (8006bc0 <TIM_OC4_SetConfig+0xa8>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d109      	bne.n	8006b94 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006b86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	695b      	ldr	r3, [r3, #20]
 8006b8c:	019b      	lsls	r3, r3, #6
 8006b8e:	697a      	ldr	r2, [r7, #20]
 8006b90:	4313      	orrs	r3, r2
 8006b92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	697a      	ldr	r2, [r7, #20]
 8006b98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	68fa      	ldr	r2, [r7, #12]
 8006b9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	685a      	ldr	r2, [r3, #4]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	693a      	ldr	r2, [r7, #16]
 8006bac:	621a      	str	r2, [r3, #32]
}
 8006bae:	bf00      	nop
 8006bb0:	371c      	adds	r7, #28
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr
 8006bba:	bf00      	nop
 8006bbc:	40010000 	.word	0x40010000
 8006bc0:	40010400 	.word	0x40010400

08006bc4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b087      	sub	sp, #28
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	60f8      	str	r0, [r7, #12]
 8006bcc:	60b9      	str	r1, [r7, #8]
 8006bce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	f003 031f 	and.w	r3, r3, #31
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8006bdc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	6a1a      	ldr	r2, [r3, #32]
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	43db      	mvns	r3, r3
 8006be6:	401a      	ands	r2, r3
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	6a1a      	ldr	r2, [r3, #32]
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	f003 031f 	and.w	r3, r3, #31
 8006bf6:	6879      	ldr	r1, [r7, #4]
 8006bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8006bfc:	431a      	orrs	r2, r3
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	621a      	str	r2, [r3, #32]
}
 8006c02:	bf00      	nop
 8006c04:	371c      	adds	r7, #28
 8006c06:	46bd      	mov	sp, r7
 8006c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0c:	4770      	bx	lr
	...

08006c10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b085      	sub	sp, #20
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d101      	bne.n	8006c28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c24:	2302      	movs	r3, #2
 8006c26:	e05a      	b.n	8006cde <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2202      	movs	r2, #2
 8006c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	689b      	ldr	r3, [r3, #8]
 8006c46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	68fa      	ldr	r2, [r7, #12]
 8006c56:	4313      	orrs	r3, r2
 8006c58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	68fa      	ldr	r2, [r7, #12]
 8006c60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a21      	ldr	r2, [pc, #132]	@ (8006cec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d022      	beq.n	8006cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c74:	d01d      	beq.n	8006cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a1d      	ldr	r2, [pc, #116]	@ (8006cf0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d018      	beq.n	8006cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a1b      	ldr	r2, [pc, #108]	@ (8006cf4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d013      	beq.n	8006cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a1a      	ldr	r2, [pc, #104]	@ (8006cf8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d00e      	beq.n	8006cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a18      	ldr	r2, [pc, #96]	@ (8006cfc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d009      	beq.n	8006cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a17      	ldr	r2, [pc, #92]	@ (8006d00 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d004      	beq.n	8006cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a15      	ldr	r2, [pc, #84]	@ (8006d04 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d10c      	bne.n	8006ccc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006cb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	68ba      	ldr	r2, [r7, #8]
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	68ba      	ldr	r2, [r7, #8]
 8006cca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2201      	movs	r2, #1
 8006cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006cdc:	2300      	movs	r3, #0
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3714      	adds	r7, #20
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce8:	4770      	bx	lr
 8006cea:	bf00      	nop
 8006cec:	40010000 	.word	0x40010000
 8006cf0:	40000400 	.word	0x40000400
 8006cf4:	40000800 	.word	0x40000800
 8006cf8:	40000c00 	.word	0x40000c00
 8006cfc:	40010400 	.word	0x40010400
 8006d00:	40014000 	.word	0x40014000
 8006d04:	40001800 	.word	0x40001800

08006d08 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b083      	sub	sp, #12
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d10:	bf00      	nop
 8006d12:	370c      	adds	r7, #12
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr

08006d1c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b083      	sub	sp, #12
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d24:	bf00      	nop
 8006d26:	370c      	adds	r7, #12
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr

08006d30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b082      	sub	sp, #8
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d101      	bne.n	8006d42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	e042      	b.n	8006dc8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d48:	b2db      	uxtb	r3, r3
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d106      	bne.n	8006d5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2200      	movs	r2, #0
 8006d52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f7fc fccc 	bl	80036f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2224      	movs	r2, #36	@ 0x24
 8006d60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	68da      	ldr	r2, [r3, #12]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006d72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f001 f8ad 	bl	8007ed4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	691a      	ldr	r2, [r3, #16]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006d88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	695a      	ldr	r2, [r3, #20]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006d98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	68da      	ldr	r2, [r3, #12]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006da8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2200      	movs	r2, #0
 8006dae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2220      	movs	r2, #32
 8006db4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2220      	movs	r2, #32
 8006dbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006dc6:	2300      	movs	r3, #0
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3708      	adds	r7, #8
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b08a      	sub	sp, #40	@ 0x28
 8006dd4:	af02      	add	r7, sp, #8
 8006dd6:	60f8      	str	r0, [r7, #12]
 8006dd8:	60b9      	str	r1, [r7, #8]
 8006dda:	603b      	str	r3, [r7, #0]
 8006ddc:	4613      	mov	r3, r2
 8006dde:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006de0:	2300      	movs	r3, #0
 8006de2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006dea:	b2db      	uxtb	r3, r3
 8006dec:	2b20      	cmp	r3, #32
 8006dee:	d175      	bne.n	8006edc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d002      	beq.n	8006dfc <HAL_UART_Transmit+0x2c>
 8006df6:	88fb      	ldrh	r3, [r7, #6]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d101      	bne.n	8006e00 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	e06e      	b.n	8006ede <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2200      	movs	r2, #0
 8006e04:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2221      	movs	r2, #33	@ 0x21
 8006e0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006e0e:	f7fc ff79 	bl	8003d04 <HAL_GetTick>
 8006e12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	88fa      	ldrh	r2, [r7, #6]
 8006e18:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	88fa      	ldrh	r2, [r7, #6]
 8006e1e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e28:	d108      	bne.n	8006e3c <HAL_UART_Transmit+0x6c>
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	691b      	ldr	r3, [r3, #16]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d104      	bne.n	8006e3c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006e32:	2300      	movs	r3, #0
 8006e34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	61bb      	str	r3, [r7, #24]
 8006e3a:	e003      	b.n	8006e44 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e40:	2300      	movs	r3, #0
 8006e42:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006e44:	e02e      	b.n	8006ea4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	9300      	str	r3, [sp, #0]
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	2180      	movs	r1, #128	@ 0x80
 8006e50:	68f8      	ldr	r0, [r7, #12]
 8006e52:	f000 fd86 	bl	8007962 <UART_WaitOnFlagUntilTimeout>
 8006e56:	4603      	mov	r3, r0
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d005      	beq.n	8006e68 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2220      	movs	r2, #32
 8006e60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006e64:	2303      	movs	r3, #3
 8006e66:	e03a      	b.n	8006ede <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006e68:	69fb      	ldr	r3, [r7, #28]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d10b      	bne.n	8006e86 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006e6e:	69bb      	ldr	r3, [r7, #24]
 8006e70:	881b      	ldrh	r3, [r3, #0]
 8006e72:	461a      	mov	r2, r3
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e7c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006e7e:	69bb      	ldr	r3, [r7, #24]
 8006e80:	3302      	adds	r3, #2
 8006e82:	61bb      	str	r3, [r7, #24]
 8006e84:	e007      	b.n	8006e96 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006e86:	69fb      	ldr	r3, [r7, #28]
 8006e88:	781a      	ldrb	r2, [r3, #0]
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006e90:	69fb      	ldr	r3, [r7, #28]
 8006e92:	3301      	adds	r3, #1
 8006e94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	3b01      	subs	r3, #1
 8006e9e:	b29a      	uxth	r2, r3
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d1cb      	bne.n	8006e46 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	9300      	str	r3, [sp, #0]
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	2140      	movs	r1, #64	@ 0x40
 8006eb8:	68f8      	ldr	r0, [r7, #12]
 8006eba:	f000 fd52 	bl	8007962 <UART_WaitOnFlagUntilTimeout>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d005      	beq.n	8006ed0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2220      	movs	r2, #32
 8006ec8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006ecc:	2303      	movs	r3, #3
 8006ece:	e006      	b.n	8006ede <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2220      	movs	r2, #32
 8006ed4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	e000      	b.n	8006ede <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006edc:	2302      	movs	r3, #2
  }
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3720      	adds	r7, #32
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}
	...

08006ee8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b08c      	sub	sp, #48	@ 0x30
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	60f8      	str	r0, [r7, #12]
 8006ef0:	60b9      	str	r1, [r7, #8]
 8006ef2:	4613      	mov	r3, r2
 8006ef4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006efc:	b2db      	uxtb	r3, r3
 8006efe:	2b20      	cmp	r3, #32
 8006f00:	d156      	bne.n	8006fb0 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d002      	beq.n	8006f0e <HAL_UART_Transmit_DMA+0x26>
 8006f08:	88fb      	ldrh	r3, [r7, #6]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d101      	bne.n	8006f12 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	e04f      	b.n	8006fb2 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8006f12:	68ba      	ldr	r2, [r7, #8]
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	88fa      	ldrh	r2, [r7, #6]
 8006f1c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	88fa      	ldrh	r2, [r7, #6]
 8006f22:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2200      	movs	r2, #0
 8006f28:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2221      	movs	r2, #33	@ 0x21
 8006f2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f36:	4a21      	ldr	r2, [pc, #132]	@ (8006fbc <HAL_UART_Transmit_DMA+0xd4>)
 8006f38:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f3e:	4a20      	ldr	r2, [pc, #128]	@ (8006fc0 <HAL_UART_Transmit_DMA+0xd8>)
 8006f40:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f46:	4a1f      	ldr	r2, [pc, #124]	@ (8006fc4 <HAL_UART_Transmit_DMA+0xdc>)
 8006f48:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f4e:	2200      	movs	r2, #0
 8006f50:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8006f52:	f107 0308 	add.w	r3, r7, #8
 8006f56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006f5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f5e:	6819      	ldr	r1, [r3, #0]
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	3304      	adds	r3, #4
 8006f66:	461a      	mov	r2, r3
 8006f68:	88fb      	ldrh	r3, [r7, #6]
 8006f6a:	f7fd f867 	bl	800403c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006f76:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	3314      	adds	r3, #20
 8006f7e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f80:	69bb      	ldr	r3, [r7, #24]
 8006f82:	e853 3f00 	ldrex	r3, [r3]
 8006f86:	617b      	str	r3, [r7, #20]
   return(result);
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f8e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	3314      	adds	r3, #20
 8006f96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006f98:	627a      	str	r2, [r7, #36]	@ 0x24
 8006f9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f9c:	6a39      	ldr	r1, [r7, #32]
 8006f9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006fa0:	e841 2300 	strex	r3, r2, [r1]
 8006fa4:	61fb      	str	r3, [r7, #28]
   return(result);
 8006fa6:	69fb      	ldr	r3, [r7, #28]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d1e5      	bne.n	8006f78 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8006fac:	2300      	movs	r3, #0
 8006fae:	e000      	b.n	8006fb2 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8006fb0:	2302      	movs	r3, #2
  }
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3730      	adds	r7, #48	@ 0x30
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
 8006fba:	bf00      	nop
 8006fbc:	080076b1 	.word	0x080076b1
 8006fc0:	0800774b 	.word	0x0800774b
 8006fc4:	080078cf 	.word	0x080078cf

08006fc8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	60f8      	str	r0, [r7, #12]
 8006fd0:	60b9      	str	r1, [r7, #8]
 8006fd2:	4613      	mov	r3, r2
 8006fd4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006fdc:	b2db      	uxtb	r3, r3
 8006fde:	2b20      	cmp	r3, #32
 8006fe0:	d112      	bne.n	8007008 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d002      	beq.n	8006fee <HAL_UART_Receive_DMA+0x26>
 8006fe8:	88fb      	ldrh	r3, [r7, #6]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d101      	bne.n	8006ff2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	e00b      	b.n	800700a <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006ff8:	88fb      	ldrh	r3, [r7, #6]
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	68b9      	ldr	r1, [r7, #8]
 8006ffe:	68f8      	ldr	r0, [r7, #12]
 8007000:	f000 fd08 	bl	8007a14 <UART_Start_Receive_DMA>
 8007004:	4603      	mov	r3, r0
 8007006:	e000      	b.n	800700a <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007008:	2302      	movs	r3, #2
  }
}
 800700a:	4618      	mov	r0, r3
 800700c:	3710      	adds	r7, #16
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}

08007012 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8007012:	b580      	push	{r7, lr}
 8007014:	b090      	sub	sp, #64	@ 0x40
 8007016:	af00      	add	r7, sp, #0
 8007018:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800701a:	2300      	movs	r3, #0
 800701c:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	695b      	ldr	r3, [r3, #20]
 8007024:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007028:	2b80      	cmp	r3, #128	@ 0x80
 800702a:	bf0c      	ite	eq
 800702c:	2301      	moveq	r3, #1
 800702e:	2300      	movne	r3, #0
 8007030:	b2db      	uxtb	r3, r3
 8007032:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800703a:	b2db      	uxtb	r3, r3
 800703c:	2b21      	cmp	r3, #33	@ 0x21
 800703e:	d128      	bne.n	8007092 <HAL_UART_DMAStop+0x80>
 8007040:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007042:	2b00      	cmp	r3, #0
 8007044:	d025      	beq.n	8007092 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	3314      	adds	r3, #20
 800704c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800704e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007050:	e853 3f00 	ldrex	r3, [r3]
 8007054:	623b      	str	r3, [r7, #32]
   return(result);
 8007056:	6a3b      	ldr	r3, [r7, #32]
 8007058:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800705c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	3314      	adds	r3, #20
 8007064:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007066:	633a      	str	r2, [r7, #48]	@ 0x30
 8007068:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800706a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800706c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800706e:	e841 2300 	strex	r3, r2, [r1]
 8007072:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007076:	2b00      	cmp	r3, #0
 8007078:	d1e5      	bne.n	8007046 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800707e:	2b00      	cmp	r3, #0
 8007080:	d004      	beq.n	800708c <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007086:	4618      	mov	r0, r3
 8007088:	f7fd f830 	bl	80040ec <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f000 fd5b 	bl	8007b48 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	695b      	ldr	r3, [r3, #20]
 8007098:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800709c:	2b40      	cmp	r3, #64	@ 0x40
 800709e:	bf0c      	ite	eq
 80070a0:	2301      	moveq	r3, #1
 80070a2:	2300      	movne	r3, #0
 80070a4:	b2db      	uxtb	r3, r3
 80070a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80070ae:	b2db      	uxtb	r3, r3
 80070b0:	2b22      	cmp	r3, #34	@ 0x22
 80070b2:	d128      	bne.n	8007106 <HAL_UART_DMAStop+0xf4>
 80070b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d025      	beq.n	8007106 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	3314      	adds	r3, #20
 80070c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	e853 3f00 	ldrex	r3, [r3]
 80070c8:	60fb      	str	r3, [r7, #12]
   return(result);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80070d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	3314      	adds	r3, #20
 80070d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80070da:	61fa      	str	r2, [r7, #28]
 80070dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070de:	69b9      	ldr	r1, [r7, #24]
 80070e0:	69fa      	ldr	r2, [r7, #28]
 80070e2:	e841 2300 	strex	r3, r2, [r1]
 80070e6:	617b      	str	r3, [r7, #20]
   return(result);
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d1e5      	bne.n	80070ba <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d004      	beq.n	8007100 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070fa:	4618      	mov	r0, r3
 80070fc:	f7fc fff6 	bl	80040ec <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f000 fd49 	bl	8007b98 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8007106:	2300      	movs	r3, #0
}
 8007108:	4618      	mov	r0, r3
 800710a:	3740      	adds	r7, #64	@ 0x40
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}

08007110 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b0ba      	sub	sp, #232	@ 0xe8
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	68db      	ldr	r3, [r3, #12]
 8007128:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	695b      	ldr	r3, [r3, #20]
 8007132:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007136:	2300      	movs	r3, #0
 8007138:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800713c:	2300      	movs	r3, #0
 800713e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007146:	f003 030f 	and.w	r3, r3, #15
 800714a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800714e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007152:	2b00      	cmp	r3, #0
 8007154:	d10f      	bne.n	8007176 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007156:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800715a:	f003 0320 	and.w	r3, r3, #32
 800715e:	2b00      	cmp	r3, #0
 8007160:	d009      	beq.n	8007176 <HAL_UART_IRQHandler+0x66>
 8007162:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007166:	f003 0320 	and.w	r3, r3, #32
 800716a:	2b00      	cmp	r3, #0
 800716c:	d003      	beq.n	8007176 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f000 fdf1 	bl	8007d56 <UART_Receive_IT>
      return;
 8007174:	e25b      	b.n	800762e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007176:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800717a:	2b00      	cmp	r3, #0
 800717c:	f000 80de 	beq.w	800733c <HAL_UART_IRQHandler+0x22c>
 8007180:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007184:	f003 0301 	and.w	r3, r3, #1
 8007188:	2b00      	cmp	r3, #0
 800718a:	d106      	bne.n	800719a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800718c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007190:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007194:	2b00      	cmp	r3, #0
 8007196:	f000 80d1 	beq.w	800733c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800719a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800719e:	f003 0301 	and.w	r3, r3, #1
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d00b      	beq.n	80071be <HAL_UART_IRQHandler+0xae>
 80071a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d005      	beq.n	80071be <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071b6:	f043 0201 	orr.w	r2, r3, #1
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80071be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071c2:	f003 0304 	and.w	r3, r3, #4
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d00b      	beq.n	80071e2 <HAL_UART_IRQHandler+0xd2>
 80071ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80071ce:	f003 0301 	and.w	r3, r3, #1
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d005      	beq.n	80071e2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071da:	f043 0202 	orr.w	r2, r3, #2
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80071e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071e6:	f003 0302 	and.w	r3, r3, #2
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d00b      	beq.n	8007206 <HAL_UART_IRQHandler+0xf6>
 80071ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80071f2:	f003 0301 	and.w	r3, r3, #1
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d005      	beq.n	8007206 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071fe:	f043 0204 	orr.w	r2, r3, #4
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007206:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800720a:	f003 0308 	and.w	r3, r3, #8
 800720e:	2b00      	cmp	r3, #0
 8007210:	d011      	beq.n	8007236 <HAL_UART_IRQHandler+0x126>
 8007212:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007216:	f003 0320 	and.w	r3, r3, #32
 800721a:	2b00      	cmp	r3, #0
 800721c:	d105      	bne.n	800722a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800721e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007222:	f003 0301 	and.w	r3, r3, #1
 8007226:	2b00      	cmp	r3, #0
 8007228:	d005      	beq.n	8007236 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800722e:	f043 0208 	orr.w	r2, r3, #8
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800723a:	2b00      	cmp	r3, #0
 800723c:	f000 81f2 	beq.w	8007624 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007240:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007244:	f003 0320 	and.w	r3, r3, #32
 8007248:	2b00      	cmp	r3, #0
 800724a:	d008      	beq.n	800725e <HAL_UART_IRQHandler+0x14e>
 800724c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007250:	f003 0320 	and.w	r3, r3, #32
 8007254:	2b00      	cmp	r3, #0
 8007256:	d002      	beq.n	800725e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f000 fd7c 	bl	8007d56 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	695b      	ldr	r3, [r3, #20]
 8007264:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007268:	2b40      	cmp	r3, #64	@ 0x40
 800726a:	bf0c      	ite	eq
 800726c:	2301      	moveq	r3, #1
 800726e:	2300      	movne	r3, #0
 8007270:	b2db      	uxtb	r3, r3
 8007272:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800727a:	f003 0308 	and.w	r3, r3, #8
 800727e:	2b00      	cmp	r3, #0
 8007280:	d103      	bne.n	800728a <HAL_UART_IRQHandler+0x17a>
 8007282:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007286:	2b00      	cmp	r3, #0
 8007288:	d04f      	beq.n	800732a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 fc84 	bl	8007b98 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	695b      	ldr	r3, [r3, #20]
 8007296:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800729a:	2b40      	cmp	r3, #64	@ 0x40
 800729c:	d141      	bne.n	8007322 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	3314      	adds	r3, #20
 80072a4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80072ac:	e853 3f00 	ldrex	r3, [r3]
 80072b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80072b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80072b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80072bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	3314      	adds	r3, #20
 80072c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80072ca:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80072ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80072d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80072da:	e841 2300 	strex	r3, r2, [r1]
 80072de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80072e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d1d9      	bne.n	800729e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d013      	beq.n	800731a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072f6:	4a7e      	ldr	r2, [pc, #504]	@ (80074f0 <HAL_UART_IRQHandler+0x3e0>)
 80072f8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072fe:	4618      	mov	r0, r3
 8007300:	f7fc ff64 	bl	80041cc <HAL_DMA_Abort_IT>
 8007304:	4603      	mov	r3, r0
 8007306:	2b00      	cmp	r3, #0
 8007308:	d016      	beq.n	8007338 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800730e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007314:	4610      	mov	r0, r2
 8007316:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007318:	e00e      	b.n	8007338 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f000 f9b2 	bl	8007684 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007320:	e00a      	b.n	8007338 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 f9ae 	bl	8007684 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007328:	e006      	b.n	8007338 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f000 f9aa 	bl	8007684 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2200      	movs	r2, #0
 8007334:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007336:	e175      	b.n	8007624 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007338:	bf00      	nop
    return;
 800733a:	e173      	b.n	8007624 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007340:	2b01      	cmp	r3, #1
 8007342:	f040 814f 	bne.w	80075e4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007346:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800734a:	f003 0310 	and.w	r3, r3, #16
 800734e:	2b00      	cmp	r3, #0
 8007350:	f000 8148 	beq.w	80075e4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007354:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007358:	f003 0310 	and.w	r3, r3, #16
 800735c:	2b00      	cmp	r3, #0
 800735e:	f000 8141 	beq.w	80075e4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007362:	2300      	movs	r3, #0
 8007364:	60bb      	str	r3, [r7, #8]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	60bb      	str	r3, [r7, #8]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	60bb      	str	r3, [r7, #8]
 8007376:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	695b      	ldr	r3, [r3, #20]
 800737e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007382:	2b40      	cmp	r3, #64	@ 0x40
 8007384:	f040 80b6 	bne.w	80074f4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007394:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007398:	2b00      	cmp	r3, #0
 800739a:	f000 8145 	beq.w	8007628 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80073a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80073a6:	429a      	cmp	r2, r3
 80073a8:	f080 813e 	bcs.w	8007628 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80073b2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073b8:	69db      	ldr	r3, [r3, #28]
 80073ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80073be:	f000 8088 	beq.w	80074d2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	330c      	adds	r3, #12
 80073c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80073d0:	e853 3f00 	ldrex	r3, [r3]
 80073d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80073d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80073dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80073e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	330c      	adds	r3, #12
 80073ea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80073ee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80073f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80073fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80073fe:	e841 2300 	strex	r3, r2, [r1]
 8007402:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007406:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800740a:	2b00      	cmp	r3, #0
 800740c:	d1d9      	bne.n	80073c2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	3314      	adds	r3, #20
 8007414:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007416:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007418:	e853 3f00 	ldrex	r3, [r3]
 800741c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800741e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007420:	f023 0301 	bic.w	r3, r3, #1
 8007424:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	3314      	adds	r3, #20
 800742e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007432:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007436:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007438:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800743a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800743e:	e841 2300 	strex	r3, r2, [r1]
 8007442:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007444:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007446:	2b00      	cmp	r3, #0
 8007448:	d1e1      	bne.n	800740e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	3314      	adds	r3, #20
 8007450:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007452:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007454:	e853 3f00 	ldrex	r3, [r3]
 8007458:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800745a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800745c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007460:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	3314      	adds	r3, #20
 800746a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800746e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007470:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007472:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007474:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007476:	e841 2300 	strex	r3, r2, [r1]
 800747a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800747c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800747e:	2b00      	cmp	r3, #0
 8007480:	d1e3      	bne.n	800744a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2220      	movs	r2, #32
 8007486:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	330c      	adds	r3, #12
 8007496:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007498:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800749a:	e853 3f00 	ldrex	r3, [r3]
 800749e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80074a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80074a2:	f023 0310 	bic.w	r3, r3, #16
 80074a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	330c      	adds	r3, #12
 80074b0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80074b4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80074b6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80074ba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80074bc:	e841 2300 	strex	r3, r2, [r1]
 80074c0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80074c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d1e3      	bne.n	8007490 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074cc:	4618      	mov	r0, r3
 80074ce:	f7fc fe0d 	bl	80040ec <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2202      	movs	r2, #2
 80074d6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	1ad3      	subs	r3, r2, r3
 80074e4:	b29b      	uxth	r3, r3
 80074e6:	4619      	mov	r1, r3
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f000 f8d5 	bl	8007698 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80074ee:	e09b      	b.n	8007628 <HAL_UART_IRQHandler+0x518>
 80074f0:	08007c5f 	.word	0x08007c5f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	1ad3      	subs	r3, r2, r3
 8007500:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007508:	b29b      	uxth	r3, r3
 800750a:	2b00      	cmp	r3, #0
 800750c:	f000 808e 	beq.w	800762c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007510:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007514:	2b00      	cmp	r3, #0
 8007516:	f000 8089 	beq.w	800762c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	330c      	adds	r3, #12
 8007520:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007524:	e853 3f00 	ldrex	r3, [r3]
 8007528:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800752a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800752c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007530:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	330c      	adds	r3, #12
 800753a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800753e:	647a      	str	r2, [r7, #68]	@ 0x44
 8007540:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007542:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007544:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007546:	e841 2300 	strex	r3, r2, [r1]
 800754a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800754c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800754e:	2b00      	cmp	r3, #0
 8007550:	d1e3      	bne.n	800751a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	3314      	adds	r3, #20
 8007558:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800755a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800755c:	e853 3f00 	ldrex	r3, [r3]
 8007560:	623b      	str	r3, [r7, #32]
   return(result);
 8007562:	6a3b      	ldr	r3, [r7, #32]
 8007564:	f023 0301 	bic.w	r3, r3, #1
 8007568:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	3314      	adds	r3, #20
 8007572:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007576:	633a      	str	r2, [r7, #48]	@ 0x30
 8007578:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800757a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800757c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800757e:	e841 2300 	strex	r3, r2, [r1]
 8007582:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007586:	2b00      	cmp	r3, #0
 8007588:	d1e3      	bne.n	8007552 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2220      	movs	r2, #32
 800758e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2200      	movs	r2, #0
 8007596:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	330c      	adds	r3, #12
 800759e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	e853 3f00 	ldrex	r3, [r3]
 80075a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f023 0310 	bic.w	r3, r3, #16
 80075ae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	330c      	adds	r3, #12
 80075b8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80075bc:	61fa      	str	r2, [r7, #28]
 80075be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c0:	69b9      	ldr	r1, [r7, #24]
 80075c2:	69fa      	ldr	r2, [r7, #28]
 80075c4:	e841 2300 	strex	r3, r2, [r1]
 80075c8:	617b      	str	r3, [r7, #20]
   return(result);
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d1e3      	bne.n	8007598 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2202      	movs	r2, #2
 80075d4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80075d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80075da:	4619      	mov	r1, r3
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f000 f85b 	bl	8007698 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80075e2:	e023      	b.n	800762c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80075e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d009      	beq.n	8007604 <HAL_UART_IRQHandler+0x4f4>
 80075f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d003      	beq.n	8007604 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f000 fb42 	bl	8007c86 <UART_Transmit_IT>
    return;
 8007602:	e014      	b.n	800762e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007604:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007608:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800760c:	2b00      	cmp	r3, #0
 800760e:	d00e      	beq.n	800762e <HAL_UART_IRQHandler+0x51e>
 8007610:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007614:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007618:	2b00      	cmp	r3, #0
 800761a:	d008      	beq.n	800762e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f000 fb82 	bl	8007d26 <UART_EndTransmit_IT>
    return;
 8007622:	e004      	b.n	800762e <HAL_UART_IRQHandler+0x51e>
    return;
 8007624:	bf00      	nop
 8007626:	e002      	b.n	800762e <HAL_UART_IRQHandler+0x51e>
      return;
 8007628:	bf00      	nop
 800762a:	e000      	b.n	800762e <HAL_UART_IRQHandler+0x51e>
      return;
 800762c:	bf00      	nop
  }
}
 800762e:	37e8      	adds	r7, #232	@ 0xe8
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}

08007634 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007634:	b480      	push	{r7}
 8007636:	b083      	sub	sp, #12
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800763c:	bf00      	nop
 800763e:	370c      	adds	r7, #12
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr

08007648 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007648:	b480      	push	{r7}
 800764a:	b083      	sub	sp, #12
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007650:	bf00      	nop
 8007652:	370c      	adds	r7, #12
 8007654:	46bd      	mov	sp, r7
 8007656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765a:	4770      	bx	lr

0800765c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800765c:	b480      	push	{r7}
 800765e:	b083      	sub	sp, #12
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007664:	bf00      	nop
 8007666:	370c      	adds	r7, #12
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr

08007670 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007670:	b480      	push	{r7}
 8007672:	b083      	sub	sp, #12
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007678:	bf00      	nop
 800767a:	370c      	adds	r7, #12
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr

08007684 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007684:	b480      	push	{r7}
 8007686:	b083      	sub	sp, #12
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800768c:	bf00      	nop
 800768e:	370c      	adds	r7, #12
 8007690:	46bd      	mov	sp, r7
 8007692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007696:	4770      	bx	lr

08007698 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007698:	b480      	push	{r7}
 800769a:	b083      	sub	sp, #12
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
 80076a0:	460b      	mov	r3, r1
 80076a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80076a4:	bf00      	nop
 80076a6:	370c      	adds	r7, #12
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr

080076b0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b090      	sub	sp, #64	@ 0x40
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d137      	bne.n	800773c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80076cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076ce:	2200      	movs	r2, #0
 80076d0:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80076d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	3314      	adds	r3, #20
 80076d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076dc:	e853 3f00 	ldrex	r3, [r3]
 80076e0:	623b      	str	r3, [r7, #32]
   return(result);
 80076e2:	6a3b      	ldr	r3, [r7, #32]
 80076e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80076e8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80076ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	3314      	adds	r3, #20
 80076f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80076f2:	633a      	str	r2, [r7, #48]	@ 0x30
 80076f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80076f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076fa:	e841 2300 	strex	r3, r2, [r1]
 80076fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007702:	2b00      	cmp	r3, #0
 8007704:	d1e5      	bne.n	80076d2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007706:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	330c      	adds	r3, #12
 800770c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	e853 3f00 	ldrex	r3, [r3]
 8007714:	60fb      	str	r3, [r7, #12]
   return(result);
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800771c:	637b      	str	r3, [r7, #52]	@ 0x34
 800771e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	330c      	adds	r3, #12
 8007724:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007726:	61fa      	str	r2, [r7, #28]
 8007728:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800772a:	69b9      	ldr	r1, [r7, #24]
 800772c:	69fa      	ldr	r2, [r7, #28]
 800772e:	e841 2300 	strex	r3, r2, [r1]
 8007732:	617b      	str	r3, [r7, #20]
   return(result);
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d1e5      	bne.n	8007706 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800773a:	e002      	b.n	8007742 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800773c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800773e:	f7ff ff79 	bl	8007634 <HAL_UART_TxCpltCallback>
}
 8007742:	bf00      	nop
 8007744:	3740      	adds	r7, #64	@ 0x40
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}

0800774a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800774a:	b580      	push	{r7, lr}
 800774c:	b084      	sub	sp, #16
 800774e:	af00      	add	r7, sp, #0
 8007750:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007756:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007758:	68f8      	ldr	r0, [r7, #12]
 800775a:	f7ff ff75 	bl	8007648 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800775e:	bf00      	nop
 8007760:	3710      	adds	r7, #16
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}

08007766 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007766:	b580      	push	{r7, lr}
 8007768:	b09c      	sub	sp, #112	@ 0x70
 800776a:	af00      	add	r7, sp, #0
 800776c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007772:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800777e:	2b00      	cmp	r3, #0
 8007780:	d172      	bne.n	8007868 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007782:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007784:	2200      	movs	r2, #0
 8007786:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007788:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	330c      	adds	r3, #12
 800778e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007790:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007792:	e853 3f00 	ldrex	r3, [r3]
 8007796:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007798:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800779a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800779e:	66bb      	str	r3, [r7, #104]	@ 0x68
 80077a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	330c      	adds	r3, #12
 80077a6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80077a8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80077aa:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80077ae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80077b0:	e841 2300 	strex	r3, r2, [r1]
 80077b4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80077b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d1e5      	bne.n	8007788 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	3314      	adds	r3, #20
 80077c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077c6:	e853 3f00 	ldrex	r3, [r3]
 80077ca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80077cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077ce:	f023 0301 	bic.w	r3, r3, #1
 80077d2:	667b      	str	r3, [r7, #100]	@ 0x64
 80077d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	3314      	adds	r3, #20
 80077da:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80077dc:	647a      	str	r2, [r7, #68]	@ 0x44
 80077de:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80077e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80077e4:	e841 2300 	strex	r3, r2, [r1]
 80077e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80077ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d1e5      	bne.n	80077bc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	3314      	adds	r3, #20
 80077f6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077fa:	e853 3f00 	ldrex	r3, [r3]
 80077fe:	623b      	str	r3, [r7, #32]
   return(result);
 8007800:	6a3b      	ldr	r3, [r7, #32]
 8007802:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007806:	663b      	str	r3, [r7, #96]	@ 0x60
 8007808:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	3314      	adds	r3, #20
 800780e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007810:	633a      	str	r2, [r7, #48]	@ 0x30
 8007812:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007814:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007816:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007818:	e841 2300 	strex	r3, r2, [r1]
 800781c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800781e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007820:	2b00      	cmp	r3, #0
 8007822:	d1e5      	bne.n	80077f0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007824:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007826:	2220      	movs	r2, #32
 8007828:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800782c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800782e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007830:	2b01      	cmp	r3, #1
 8007832:	d119      	bne.n	8007868 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007834:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	330c      	adds	r3, #12
 800783a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	e853 3f00 	ldrex	r3, [r3]
 8007842:	60fb      	str	r3, [r7, #12]
   return(result);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f023 0310 	bic.w	r3, r3, #16
 800784a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800784c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	330c      	adds	r3, #12
 8007852:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007854:	61fa      	str	r2, [r7, #28]
 8007856:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007858:	69b9      	ldr	r1, [r7, #24]
 800785a:	69fa      	ldr	r2, [r7, #28]
 800785c:	e841 2300 	strex	r3, r2, [r1]
 8007860:	617b      	str	r3, [r7, #20]
   return(result);
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d1e5      	bne.n	8007834 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007868:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800786a:	2200      	movs	r2, #0
 800786c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800786e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007872:	2b01      	cmp	r3, #1
 8007874:	d106      	bne.n	8007884 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007876:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007878:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800787a:	4619      	mov	r1, r3
 800787c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800787e:	f7ff ff0b 	bl	8007698 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007882:	e002      	b.n	800788a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007884:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007886:	f7ff fee9 	bl	800765c <HAL_UART_RxCpltCallback>
}
 800788a:	bf00      	nop
 800788c:	3770      	adds	r7, #112	@ 0x70
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}

08007892 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007892:	b580      	push	{r7, lr}
 8007894:	b084      	sub	sp, #16
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800789e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2201      	movs	r2, #1
 80078a4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078aa:	2b01      	cmp	r3, #1
 80078ac:	d108      	bne.n	80078c0 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80078b2:	085b      	lsrs	r3, r3, #1
 80078b4:	b29b      	uxth	r3, r3
 80078b6:	4619      	mov	r1, r3
 80078b8:	68f8      	ldr	r0, [r7, #12]
 80078ba:	f7ff feed 	bl	8007698 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80078be:	e002      	b.n	80078c6 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80078c0:	68f8      	ldr	r0, [r7, #12]
 80078c2:	f7ff fed5 	bl	8007670 <HAL_UART_RxHalfCpltCallback>
}
 80078c6:	bf00      	nop
 80078c8:	3710      	adds	r7, #16
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}

080078ce <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80078ce:	b580      	push	{r7, lr}
 80078d0:	b084      	sub	sp, #16
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80078d6:	2300      	movs	r3, #0
 80078d8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078de:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	695b      	ldr	r3, [r3, #20]
 80078e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078ea:	2b80      	cmp	r3, #128	@ 0x80
 80078ec:	bf0c      	ite	eq
 80078ee:	2301      	moveq	r3, #1
 80078f0:	2300      	movne	r3, #0
 80078f2:	b2db      	uxtb	r3, r3
 80078f4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80078fc:	b2db      	uxtb	r3, r3
 80078fe:	2b21      	cmp	r3, #33	@ 0x21
 8007900:	d108      	bne.n	8007914 <UART_DMAError+0x46>
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d005      	beq.n	8007914 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	2200      	movs	r2, #0
 800790c:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800790e:	68b8      	ldr	r0, [r7, #8]
 8007910:	f000 f91a 	bl	8007b48 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	695b      	ldr	r3, [r3, #20]
 800791a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800791e:	2b40      	cmp	r3, #64	@ 0x40
 8007920:	bf0c      	ite	eq
 8007922:	2301      	moveq	r3, #1
 8007924:	2300      	movne	r3, #0
 8007926:	b2db      	uxtb	r3, r3
 8007928:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007930:	b2db      	uxtb	r3, r3
 8007932:	2b22      	cmp	r3, #34	@ 0x22
 8007934:	d108      	bne.n	8007948 <UART_DMAError+0x7a>
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d005      	beq.n	8007948 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	2200      	movs	r2, #0
 8007940:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8007942:	68b8      	ldr	r0, [r7, #8]
 8007944:	f000 f928 	bl	8007b98 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800794c:	f043 0210 	orr.w	r2, r3, #16
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007954:	68b8      	ldr	r0, [r7, #8]
 8007956:	f7ff fe95 	bl	8007684 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800795a:	bf00      	nop
 800795c:	3710      	adds	r7, #16
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}

08007962 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007962:	b580      	push	{r7, lr}
 8007964:	b086      	sub	sp, #24
 8007966:	af00      	add	r7, sp, #0
 8007968:	60f8      	str	r0, [r7, #12]
 800796a:	60b9      	str	r1, [r7, #8]
 800796c:	603b      	str	r3, [r7, #0]
 800796e:	4613      	mov	r3, r2
 8007970:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007972:	e03b      	b.n	80079ec <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007974:	6a3b      	ldr	r3, [r7, #32]
 8007976:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800797a:	d037      	beq.n	80079ec <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800797c:	f7fc f9c2 	bl	8003d04 <HAL_GetTick>
 8007980:	4602      	mov	r2, r0
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	1ad3      	subs	r3, r2, r3
 8007986:	6a3a      	ldr	r2, [r7, #32]
 8007988:	429a      	cmp	r2, r3
 800798a:	d302      	bcc.n	8007992 <UART_WaitOnFlagUntilTimeout+0x30>
 800798c:	6a3b      	ldr	r3, [r7, #32]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d101      	bne.n	8007996 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007992:	2303      	movs	r3, #3
 8007994:	e03a      	b.n	8007a0c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	68db      	ldr	r3, [r3, #12]
 800799c:	f003 0304 	and.w	r3, r3, #4
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d023      	beq.n	80079ec <UART_WaitOnFlagUntilTimeout+0x8a>
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	2b80      	cmp	r3, #128	@ 0x80
 80079a8:	d020      	beq.n	80079ec <UART_WaitOnFlagUntilTimeout+0x8a>
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	2b40      	cmp	r3, #64	@ 0x40
 80079ae:	d01d      	beq.n	80079ec <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f003 0308 	and.w	r3, r3, #8
 80079ba:	2b08      	cmp	r3, #8
 80079bc:	d116      	bne.n	80079ec <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80079be:	2300      	movs	r3, #0
 80079c0:	617b      	str	r3, [r7, #20]
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	617b      	str	r3, [r7, #20]
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	617b      	str	r3, [r7, #20]
 80079d2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80079d4:	68f8      	ldr	r0, [r7, #12]
 80079d6:	f000 f8df 	bl	8007b98 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2208      	movs	r2, #8
 80079de:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2200      	movs	r2, #0
 80079e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80079e8:	2301      	movs	r3, #1
 80079ea:	e00f      	b.n	8007a0c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	681a      	ldr	r2, [r3, #0]
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	4013      	ands	r3, r2
 80079f6:	68ba      	ldr	r2, [r7, #8]
 80079f8:	429a      	cmp	r2, r3
 80079fa:	bf0c      	ite	eq
 80079fc:	2301      	moveq	r3, #1
 80079fe:	2300      	movne	r3, #0
 8007a00:	b2db      	uxtb	r3, r3
 8007a02:	461a      	mov	r2, r3
 8007a04:	79fb      	ldrb	r3, [r7, #7]
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d0b4      	beq.n	8007974 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007a0a:	2300      	movs	r3, #0
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3718      	adds	r7, #24
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}

08007a14 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b098      	sub	sp, #96	@ 0x60
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	60f8      	str	r0, [r7, #12]
 8007a1c:	60b9      	str	r1, [r7, #8]
 8007a1e:	4613      	mov	r3, r2
 8007a20:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007a22:	68ba      	ldr	r2, [r7, #8]
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	88fa      	ldrh	r2, [r7, #6]
 8007a2c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	2200      	movs	r2, #0
 8007a32:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	2222      	movs	r2, #34	@ 0x22
 8007a38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a40:	4a3e      	ldr	r2, [pc, #248]	@ (8007b3c <UART_Start_Receive_DMA+0x128>)
 8007a42:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a48:	4a3d      	ldr	r2, [pc, #244]	@ (8007b40 <UART_Start_Receive_DMA+0x12c>)
 8007a4a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a50:	4a3c      	ldr	r2, [pc, #240]	@ (8007b44 <UART_Start_Receive_DMA+0x130>)
 8007a52:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a58:	2200      	movs	r2, #0
 8007a5a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007a5c:	f107 0308 	add.w	r3, r7, #8
 8007a60:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	3304      	adds	r3, #4
 8007a6c:	4619      	mov	r1, r3
 8007a6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a70:	681a      	ldr	r2, [r3, #0]
 8007a72:	88fb      	ldrh	r3, [r7, #6]
 8007a74:	f7fc fae2 	bl	800403c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007a78:	2300      	movs	r3, #0
 8007a7a:	613b      	str	r3, [r7, #16]
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	613b      	str	r3, [r7, #16]
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	613b      	str	r3, [r7, #16]
 8007a8c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	691b      	ldr	r3, [r3, #16]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d019      	beq.n	8007aca <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	330c      	adds	r3, #12
 8007a9c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007aa0:	e853 3f00 	ldrex	r3, [r3]
 8007aa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007aa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007aa8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007aac:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	330c      	adds	r3, #12
 8007ab4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007ab6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8007ab8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aba:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007abc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007abe:	e841 2300 	strex	r3, r2, [r1]
 8007ac2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007ac4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d1e5      	bne.n	8007a96 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	3314      	adds	r3, #20
 8007ad0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ad4:	e853 3f00 	ldrex	r3, [r3]
 8007ad8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007ada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007adc:	f043 0301 	orr.w	r3, r3, #1
 8007ae0:	657b      	str	r3, [r7, #84]	@ 0x54
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	3314      	adds	r3, #20
 8007ae8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007aea:	63ba      	str	r2, [r7, #56]	@ 0x38
 8007aec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aee:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007af0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007af2:	e841 2300 	strex	r3, r2, [r1]
 8007af6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d1e5      	bne.n	8007aca <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	3314      	adds	r3, #20
 8007b04:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b06:	69bb      	ldr	r3, [r7, #24]
 8007b08:	e853 3f00 	ldrex	r3, [r3]
 8007b0c:	617b      	str	r3, [r7, #20]
   return(result);
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b14:	653b      	str	r3, [r7, #80]	@ 0x50
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	3314      	adds	r3, #20
 8007b1c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007b1e:	627a      	str	r2, [r7, #36]	@ 0x24
 8007b20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b22:	6a39      	ldr	r1, [r7, #32]
 8007b24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b26:	e841 2300 	strex	r3, r2, [r1]
 8007b2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b2c:	69fb      	ldr	r3, [r7, #28]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d1e5      	bne.n	8007afe <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8007b32:	2300      	movs	r3, #0
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3760      	adds	r7, #96	@ 0x60
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}
 8007b3c:	08007767 	.word	0x08007767
 8007b40:	08007893 	.word	0x08007893
 8007b44:	080078cf 	.word	0x080078cf

08007b48 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b089      	sub	sp, #36	@ 0x24
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	330c      	adds	r3, #12
 8007b56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	e853 3f00 	ldrex	r3, [r3]
 8007b5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007b66:	61fb      	str	r3, [r7, #28]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	330c      	adds	r3, #12
 8007b6e:	69fa      	ldr	r2, [r7, #28]
 8007b70:	61ba      	str	r2, [r7, #24]
 8007b72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b74:	6979      	ldr	r1, [r7, #20]
 8007b76:	69ba      	ldr	r2, [r7, #24]
 8007b78:	e841 2300 	strex	r3, r2, [r1]
 8007b7c:	613b      	str	r3, [r7, #16]
   return(result);
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d1e5      	bne.n	8007b50 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2220      	movs	r2, #32
 8007b88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8007b8c:	bf00      	nop
 8007b8e:	3724      	adds	r7, #36	@ 0x24
 8007b90:	46bd      	mov	sp, r7
 8007b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b96:	4770      	bx	lr

08007b98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b095      	sub	sp, #84	@ 0x54
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	330c      	adds	r3, #12
 8007ba6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007baa:	e853 3f00 	ldrex	r3, [r3]
 8007bae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bb2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007bb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	330c      	adds	r3, #12
 8007bbe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007bc0:	643a      	str	r2, [r7, #64]	@ 0x40
 8007bc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007bc6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007bc8:	e841 2300 	strex	r3, r2, [r1]
 8007bcc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007bce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d1e5      	bne.n	8007ba0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	3314      	adds	r3, #20
 8007bda:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bdc:	6a3b      	ldr	r3, [r7, #32]
 8007bde:	e853 3f00 	ldrex	r3, [r3]
 8007be2:	61fb      	str	r3, [r7, #28]
   return(result);
 8007be4:	69fb      	ldr	r3, [r7, #28]
 8007be6:	f023 0301 	bic.w	r3, r3, #1
 8007bea:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	3314      	adds	r3, #20
 8007bf2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007bf4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007bf6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007bfa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007bfc:	e841 2300 	strex	r3, r2, [r1]
 8007c00:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d1e5      	bne.n	8007bd4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c0c:	2b01      	cmp	r3, #1
 8007c0e:	d119      	bne.n	8007c44 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	330c      	adds	r3, #12
 8007c16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	e853 3f00 	ldrex	r3, [r3]
 8007c1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	f023 0310 	bic.w	r3, r3, #16
 8007c26:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	330c      	adds	r3, #12
 8007c2e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007c30:	61ba      	str	r2, [r7, #24]
 8007c32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c34:	6979      	ldr	r1, [r7, #20]
 8007c36:	69ba      	ldr	r2, [r7, #24]
 8007c38:	e841 2300 	strex	r3, r2, [r1]
 8007c3c:	613b      	str	r3, [r7, #16]
   return(result);
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d1e5      	bne.n	8007c10 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2220      	movs	r2, #32
 8007c48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007c52:	bf00      	nop
 8007c54:	3754      	adds	r7, #84	@ 0x54
 8007c56:	46bd      	mov	sp, r7
 8007c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5c:	4770      	bx	lr

08007c5e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007c5e:	b580      	push	{r7, lr}
 8007c60:	b084      	sub	sp, #16
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c6a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2200      	movs	r2, #0
 8007c76:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007c78:	68f8      	ldr	r0, [r7, #12]
 8007c7a:	f7ff fd03 	bl	8007684 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c7e:	bf00      	nop
 8007c80:	3710      	adds	r7, #16
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}

08007c86 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007c86:	b480      	push	{r7}
 8007c88:	b085      	sub	sp, #20
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c94:	b2db      	uxtb	r3, r3
 8007c96:	2b21      	cmp	r3, #33	@ 0x21
 8007c98:	d13e      	bne.n	8007d18 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	689b      	ldr	r3, [r3, #8]
 8007c9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ca2:	d114      	bne.n	8007cce <UART_Transmit_IT+0x48>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	691b      	ldr	r3, [r3, #16]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d110      	bne.n	8007cce <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6a1b      	ldr	r3, [r3, #32]
 8007cb0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	881b      	ldrh	r3, [r3, #0]
 8007cb6:	461a      	mov	r2, r3
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007cc0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6a1b      	ldr	r3, [r3, #32]
 8007cc6:	1c9a      	adds	r2, r3, #2
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	621a      	str	r2, [r3, #32]
 8007ccc:	e008      	b.n	8007ce0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6a1b      	ldr	r3, [r3, #32]
 8007cd2:	1c59      	adds	r1, r3, #1
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	6211      	str	r1, [r2, #32]
 8007cd8:	781a      	ldrb	r2, [r3, #0]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	3b01      	subs	r3, #1
 8007ce8:	b29b      	uxth	r3, r3
 8007cea:	687a      	ldr	r2, [r7, #4]
 8007cec:	4619      	mov	r1, r3
 8007cee:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d10f      	bne.n	8007d14 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	68da      	ldr	r2, [r3, #12]
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007d02:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	68da      	ldr	r2, [r3, #12]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007d12:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007d14:	2300      	movs	r3, #0
 8007d16:	e000      	b.n	8007d1a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007d18:	2302      	movs	r3, #2
  }
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3714      	adds	r7, #20
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d24:	4770      	bx	lr

08007d26 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007d26:	b580      	push	{r7, lr}
 8007d28:	b082      	sub	sp, #8
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	68da      	ldr	r2, [r3, #12]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007d3c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2220      	movs	r2, #32
 8007d42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f7ff fc74 	bl	8007634 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007d4c:	2300      	movs	r3, #0
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3708      	adds	r7, #8
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}

08007d56 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007d56:	b580      	push	{r7, lr}
 8007d58:	b08c      	sub	sp, #48	@ 0x30
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007d64:	b2db      	uxtb	r3, r3
 8007d66:	2b22      	cmp	r3, #34	@ 0x22
 8007d68:	f040 80ae 	bne.w	8007ec8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	689b      	ldr	r3, [r3, #8]
 8007d70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d74:	d117      	bne.n	8007da6 <UART_Receive_IT+0x50>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	691b      	ldr	r3, [r3, #16]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d113      	bne.n	8007da6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007d7e:	2300      	movs	r3, #0
 8007d80:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d86:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	b29b      	uxth	r3, r3
 8007d90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d94:	b29a      	uxth	r2, r3
 8007d96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d98:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d9e:	1c9a      	adds	r2, r3, #2
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	629a      	str	r2, [r3, #40]	@ 0x28
 8007da4:	e026      	b.n	8007df4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007daa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007dac:	2300      	movs	r3, #0
 8007dae:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	689b      	ldr	r3, [r3, #8]
 8007db4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007db8:	d007      	beq.n	8007dca <UART_Receive_IT+0x74>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	689b      	ldr	r3, [r3, #8]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d10a      	bne.n	8007dd8 <UART_Receive_IT+0x82>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	691b      	ldr	r3, [r3, #16]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d106      	bne.n	8007dd8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	b2da      	uxtb	r2, r3
 8007dd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dd4:	701a      	strb	r2, [r3, #0]
 8007dd6:	e008      	b.n	8007dea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	b2db      	uxtb	r3, r3
 8007de0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007de4:	b2da      	uxtb	r2, r3
 8007de6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007de8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dee:	1c5a      	adds	r2, r3, #1
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007df8:	b29b      	uxth	r3, r3
 8007dfa:	3b01      	subs	r3, #1
 8007dfc:	b29b      	uxth	r3, r3
 8007dfe:	687a      	ldr	r2, [r7, #4]
 8007e00:	4619      	mov	r1, r3
 8007e02:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d15d      	bne.n	8007ec4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	68da      	ldr	r2, [r3, #12]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f022 0220 	bic.w	r2, r2, #32
 8007e16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	68da      	ldr	r2, [r3, #12]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007e26:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	695a      	ldr	r2, [r3, #20]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f022 0201 	bic.w	r2, r2, #1
 8007e36:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2220      	movs	r2, #32
 8007e3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2200      	movs	r2, #0
 8007e44:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e4a:	2b01      	cmp	r3, #1
 8007e4c:	d135      	bne.n	8007eba <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2200      	movs	r2, #0
 8007e52:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	330c      	adds	r3, #12
 8007e5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	e853 3f00 	ldrex	r3, [r3]
 8007e62:	613b      	str	r3, [r7, #16]
   return(result);
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	f023 0310 	bic.w	r3, r3, #16
 8007e6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	330c      	adds	r3, #12
 8007e72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e74:	623a      	str	r2, [r7, #32]
 8007e76:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e78:	69f9      	ldr	r1, [r7, #28]
 8007e7a:	6a3a      	ldr	r2, [r7, #32]
 8007e7c:	e841 2300 	strex	r3, r2, [r1]
 8007e80:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e82:	69bb      	ldr	r3, [r7, #24]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d1e5      	bne.n	8007e54 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f003 0310 	and.w	r3, r3, #16
 8007e92:	2b10      	cmp	r3, #16
 8007e94:	d10a      	bne.n	8007eac <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007e96:	2300      	movs	r3, #0
 8007e98:	60fb      	str	r3, [r7, #12]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	60fb      	str	r3, [r7, #12]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	60fb      	str	r3, [r7, #12]
 8007eaa:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007eb0:	4619      	mov	r1, r3
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f7ff fbf0 	bl	8007698 <HAL_UARTEx_RxEventCallback>
 8007eb8:	e002      	b.n	8007ec0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f7ff fbce 	bl	800765c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	e002      	b.n	8007eca <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	e000      	b.n	8007eca <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007ec8:	2302      	movs	r3, #2
  }
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3730      	adds	r7, #48	@ 0x30
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}
	...

08007ed4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ed4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ed8:	b0c0      	sub	sp, #256	@ 0x100
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	691b      	ldr	r3, [r3, #16]
 8007ee8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ef0:	68d9      	ldr	r1, [r3, #12]
 8007ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ef6:	681a      	ldr	r2, [r3, #0]
 8007ef8:	ea40 0301 	orr.w	r3, r0, r1
 8007efc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f02:	689a      	ldr	r2, [r3, #8]
 8007f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f08:	691b      	ldr	r3, [r3, #16]
 8007f0a:	431a      	orrs	r2, r3
 8007f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f10:	695b      	ldr	r3, [r3, #20]
 8007f12:	431a      	orrs	r2, r3
 8007f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f18:	69db      	ldr	r3, [r3, #28]
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	68db      	ldr	r3, [r3, #12]
 8007f28:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007f2c:	f021 010c 	bic.w	r1, r1, #12
 8007f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f34:	681a      	ldr	r2, [r3, #0]
 8007f36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007f3a:	430b      	orrs	r3, r1
 8007f3c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007f3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	695b      	ldr	r3, [r3, #20]
 8007f46:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007f4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f4e:	6999      	ldr	r1, [r3, #24]
 8007f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f54:	681a      	ldr	r2, [r3, #0]
 8007f56:	ea40 0301 	orr.w	r3, r0, r1
 8007f5a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f60:	681a      	ldr	r2, [r3, #0]
 8007f62:	4b8f      	ldr	r3, [pc, #572]	@ (80081a0 <UART_SetConfig+0x2cc>)
 8007f64:	429a      	cmp	r2, r3
 8007f66:	d005      	beq.n	8007f74 <UART_SetConfig+0xa0>
 8007f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f6c:	681a      	ldr	r2, [r3, #0]
 8007f6e:	4b8d      	ldr	r3, [pc, #564]	@ (80081a4 <UART_SetConfig+0x2d0>)
 8007f70:	429a      	cmp	r2, r3
 8007f72:	d104      	bne.n	8007f7e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007f74:	f7fc fed2 	bl	8004d1c <HAL_RCC_GetPCLK2Freq>
 8007f78:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007f7c:	e003      	b.n	8007f86 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007f7e:	f7fc feb9 	bl	8004cf4 <HAL_RCC_GetPCLK1Freq>
 8007f82:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f8a:	69db      	ldr	r3, [r3, #28]
 8007f8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f90:	f040 810c 	bne.w	80081ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007f94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f98:	2200      	movs	r2, #0
 8007f9a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007f9e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007fa2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007fa6:	4622      	mov	r2, r4
 8007fa8:	462b      	mov	r3, r5
 8007faa:	1891      	adds	r1, r2, r2
 8007fac:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007fae:	415b      	adcs	r3, r3
 8007fb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007fb2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007fb6:	4621      	mov	r1, r4
 8007fb8:	eb12 0801 	adds.w	r8, r2, r1
 8007fbc:	4629      	mov	r1, r5
 8007fbe:	eb43 0901 	adc.w	r9, r3, r1
 8007fc2:	f04f 0200 	mov.w	r2, #0
 8007fc6:	f04f 0300 	mov.w	r3, #0
 8007fca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007fce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007fd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007fd6:	4690      	mov	r8, r2
 8007fd8:	4699      	mov	r9, r3
 8007fda:	4623      	mov	r3, r4
 8007fdc:	eb18 0303 	adds.w	r3, r8, r3
 8007fe0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007fe4:	462b      	mov	r3, r5
 8007fe6:	eb49 0303 	adc.w	r3, r9, r3
 8007fea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007ffa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007ffe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008002:	460b      	mov	r3, r1
 8008004:	18db      	adds	r3, r3, r3
 8008006:	653b      	str	r3, [r7, #80]	@ 0x50
 8008008:	4613      	mov	r3, r2
 800800a:	eb42 0303 	adc.w	r3, r2, r3
 800800e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008010:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008014:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008018:	f7f8 fe46 	bl	8000ca8 <__aeabi_uldivmod>
 800801c:	4602      	mov	r2, r0
 800801e:	460b      	mov	r3, r1
 8008020:	4b61      	ldr	r3, [pc, #388]	@ (80081a8 <UART_SetConfig+0x2d4>)
 8008022:	fba3 2302 	umull	r2, r3, r3, r2
 8008026:	095b      	lsrs	r3, r3, #5
 8008028:	011c      	lsls	r4, r3, #4
 800802a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800802e:	2200      	movs	r2, #0
 8008030:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008034:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008038:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800803c:	4642      	mov	r2, r8
 800803e:	464b      	mov	r3, r9
 8008040:	1891      	adds	r1, r2, r2
 8008042:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008044:	415b      	adcs	r3, r3
 8008046:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008048:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800804c:	4641      	mov	r1, r8
 800804e:	eb12 0a01 	adds.w	sl, r2, r1
 8008052:	4649      	mov	r1, r9
 8008054:	eb43 0b01 	adc.w	fp, r3, r1
 8008058:	f04f 0200 	mov.w	r2, #0
 800805c:	f04f 0300 	mov.w	r3, #0
 8008060:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008064:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008068:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800806c:	4692      	mov	sl, r2
 800806e:	469b      	mov	fp, r3
 8008070:	4643      	mov	r3, r8
 8008072:	eb1a 0303 	adds.w	r3, sl, r3
 8008076:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800807a:	464b      	mov	r3, r9
 800807c:	eb4b 0303 	adc.w	r3, fp, r3
 8008080:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	2200      	movs	r2, #0
 800808c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008090:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008094:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008098:	460b      	mov	r3, r1
 800809a:	18db      	adds	r3, r3, r3
 800809c:	643b      	str	r3, [r7, #64]	@ 0x40
 800809e:	4613      	mov	r3, r2
 80080a0:	eb42 0303 	adc.w	r3, r2, r3
 80080a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80080a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80080aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80080ae:	f7f8 fdfb 	bl	8000ca8 <__aeabi_uldivmod>
 80080b2:	4602      	mov	r2, r0
 80080b4:	460b      	mov	r3, r1
 80080b6:	4611      	mov	r1, r2
 80080b8:	4b3b      	ldr	r3, [pc, #236]	@ (80081a8 <UART_SetConfig+0x2d4>)
 80080ba:	fba3 2301 	umull	r2, r3, r3, r1
 80080be:	095b      	lsrs	r3, r3, #5
 80080c0:	2264      	movs	r2, #100	@ 0x64
 80080c2:	fb02 f303 	mul.w	r3, r2, r3
 80080c6:	1acb      	subs	r3, r1, r3
 80080c8:	00db      	lsls	r3, r3, #3
 80080ca:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80080ce:	4b36      	ldr	r3, [pc, #216]	@ (80081a8 <UART_SetConfig+0x2d4>)
 80080d0:	fba3 2302 	umull	r2, r3, r3, r2
 80080d4:	095b      	lsrs	r3, r3, #5
 80080d6:	005b      	lsls	r3, r3, #1
 80080d8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80080dc:	441c      	add	r4, r3
 80080de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80080e2:	2200      	movs	r2, #0
 80080e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80080e8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80080ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80080f0:	4642      	mov	r2, r8
 80080f2:	464b      	mov	r3, r9
 80080f4:	1891      	adds	r1, r2, r2
 80080f6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80080f8:	415b      	adcs	r3, r3
 80080fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80080fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008100:	4641      	mov	r1, r8
 8008102:	1851      	adds	r1, r2, r1
 8008104:	6339      	str	r1, [r7, #48]	@ 0x30
 8008106:	4649      	mov	r1, r9
 8008108:	414b      	adcs	r3, r1
 800810a:	637b      	str	r3, [r7, #52]	@ 0x34
 800810c:	f04f 0200 	mov.w	r2, #0
 8008110:	f04f 0300 	mov.w	r3, #0
 8008114:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008118:	4659      	mov	r1, fp
 800811a:	00cb      	lsls	r3, r1, #3
 800811c:	4651      	mov	r1, sl
 800811e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008122:	4651      	mov	r1, sl
 8008124:	00ca      	lsls	r2, r1, #3
 8008126:	4610      	mov	r0, r2
 8008128:	4619      	mov	r1, r3
 800812a:	4603      	mov	r3, r0
 800812c:	4642      	mov	r2, r8
 800812e:	189b      	adds	r3, r3, r2
 8008130:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008134:	464b      	mov	r3, r9
 8008136:	460a      	mov	r2, r1
 8008138:	eb42 0303 	adc.w	r3, r2, r3
 800813c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008144:	685b      	ldr	r3, [r3, #4]
 8008146:	2200      	movs	r2, #0
 8008148:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800814c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008150:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008154:	460b      	mov	r3, r1
 8008156:	18db      	adds	r3, r3, r3
 8008158:	62bb      	str	r3, [r7, #40]	@ 0x28
 800815a:	4613      	mov	r3, r2
 800815c:	eb42 0303 	adc.w	r3, r2, r3
 8008160:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008162:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008166:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800816a:	f7f8 fd9d 	bl	8000ca8 <__aeabi_uldivmod>
 800816e:	4602      	mov	r2, r0
 8008170:	460b      	mov	r3, r1
 8008172:	4b0d      	ldr	r3, [pc, #52]	@ (80081a8 <UART_SetConfig+0x2d4>)
 8008174:	fba3 1302 	umull	r1, r3, r3, r2
 8008178:	095b      	lsrs	r3, r3, #5
 800817a:	2164      	movs	r1, #100	@ 0x64
 800817c:	fb01 f303 	mul.w	r3, r1, r3
 8008180:	1ad3      	subs	r3, r2, r3
 8008182:	00db      	lsls	r3, r3, #3
 8008184:	3332      	adds	r3, #50	@ 0x32
 8008186:	4a08      	ldr	r2, [pc, #32]	@ (80081a8 <UART_SetConfig+0x2d4>)
 8008188:	fba2 2303 	umull	r2, r3, r2, r3
 800818c:	095b      	lsrs	r3, r3, #5
 800818e:	f003 0207 	and.w	r2, r3, #7
 8008192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4422      	add	r2, r4
 800819a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800819c:	e106      	b.n	80083ac <UART_SetConfig+0x4d8>
 800819e:	bf00      	nop
 80081a0:	40011000 	.word	0x40011000
 80081a4:	40011400 	.word	0x40011400
 80081a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80081ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80081b0:	2200      	movs	r2, #0
 80081b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80081b6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80081ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80081be:	4642      	mov	r2, r8
 80081c0:	464b      	mov	r3, r9
 80081c2:	1891      	adds	r1, r2, r2
 80081c4:	6239      	str	r1, [r7, #32]
 80081c6:	415b      	adcs	r3, r3
 80081c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80081ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80081ce:	4641      	mov	r1, r8
 80081d0:	1854      	adds	r4, r2, r1
 80081d2:	4649      	mov	r1, r9
 80081d4:	eb43 0501 	adc.w	r5, r3, r1
 80081d8:	f04f 0200 	mov.w	r2, #0
 80081dc:	f04f 0300 	mov.w	r3, #0
 80081e0:	00eb      	lsls	r3, r5, #3
 80081e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80081e6:	00e2      	lsls	r2, r4, #3
 80081e8:	4614      	mov	r4, r2
 80081ea:	461d      	mov	r5, r3
 80081ec:	4643      	mov	r3, r8
 80081ee:	18e3      	adds	r3, r4, r3
 80081f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80081f4:	464b      	mov	r3, r9
 80081f6:	eb45 0303 	adc.w	r3, r5, r3
 80081fa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80081fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	2200      	movs	r2, #0
 8008206:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800820a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800820e:	f04f 0200 	mov.w	r2, #0
 8008212:	f04f 0300 	mov.w	r3, #0
 8008216:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800821a:	4629      	mov	r1, r5
 800821c:	008b      	lsls	r3, r1, #2
 800821e:	4621      	mov	r1, r4
 8008220:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008224:	4621      	mov	r1, r4
 8008226:	008a      	lsls	r2, r1, #2
 8008228:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800822c:	f7f8 fd3c 	bl	8000ca8 <__aeabi_uldivmod>
 8008230:	4602      	mov	r2, r0
 8008232:	460b      	mov	r3, r1
 8008234:	4b60      	ldr	r3, [pc, #384]	@ (80083b8 <UART_SetConfig+0x4e4>)
 8008236:	fba3 2302 	umull	r2, r3, r3, r2
 800823a:	095b      	lsrs	r3, r3, #5
 800823c:	011c      	lsls	r4, r3, #4
 800823e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008242:	2200      	movs	r2, #0
 8008244:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008248:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800824c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008250:	4642      	mov	r2, r8
 8008252:	464b      	mov	r3, r9
 8008254:	1891      	adds	r1, r2, r2
 8008256:	61b9      	str	r1, [r7, #24]
 8008258:	415b      	adcs	r3, r3
 800825a:	61fb      	str	r3, [r7, #28]
 800825c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008260:	4641      	mov	r1, r8
 8008262:	1851      	adds	r1, r2, r1
 8008264:	6139      	str	r1, [r7, #16]
 8008266:	4649      	mov	r1, r9
 8008268:	414b      	adcs	r3, r1
 800826a:	617b      	str	r3, [r7, #20]
 800826c:	f04f 0200 	mov.w	r2, #0
 8008270:	f04f 0300 	mov.w	r3, #0
 8008274:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008278:	4659      	mov	r1, fp
 800827a:	00cb      	lsls	r3, r1, #3
 800827c:	4651      	mov	r1, sl
 800827e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008282:	4651      	mov	r1, sl
 8008284:	00ca      	lsls	r2, r1, #3
 8008286:	4610      	mov	r0, r2
 8008288:	4619      	mov	r1, r3
 800828a:	4603      	mov	r3, r0
 800828c:	4642      	mov	r2, r8
 800828e:	189b      	adds	r3, r3, r2
 8008290:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008294:	464b      	mov	r3, r9
 8008296:	460a      	mov	r2, r1
 8008298:	eb42 0303 	adc.w	r3, r2, r3
 800829c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80082a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082a4:	685b      	ldr	r3, [r3, #4]
 80082a6:	2200      	movs	r2, #0
 80082a8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80082aa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80082ac:	f04f 0200 	mov.w	r2, #0
 80082b0:	f04f 0300 	mov.w	r3, #0
 80082b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80082b8:	4649      	mov	r1, r9
 80082ba:	008b      	lsls	r3, r1, #2
 80082bc:	4641      	mov	r1, r8
 80082be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80082c2:	4641      	mov	r1, r8
 80082c4:	008a      	lsls	r2, r1, #2
 80082c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80082ca:	f7f8 fced 	bl	8000ca8 <__aeabi_uldivmod>
 80082ce:	4602      	mov	r2, r0
 80082d0:	460b      	mov	r3, r1
 80082d2:	4611      	mov	r1, r2
 80082d4:	4b38      	ldr	r3, [pc, #224]	@ (80083b8 <UART_SetConfig+0x4e4>)
 80082d6:	fba3 2301 	umull	r2, r3, r3, r1
 80082da:	095b      	lsrs	r3, r3, #5
 80082dc:	2264      	movs	r2, #100	@ 0x64
 80082de:	fb02 f303 	mul.w	r3, r2, r3
 80082e2:	1acb      	subs	r3, r1, r3
 80082e4:	011b      	lsls	r3, r3, #4
 80082e6:	3332      	adds	r3, #50	@ 0x32
 80082e8:	4a33      	ldr	r2, [pc, #204]	@ (80083b8 <UART_SetConfig+0x4e4>)
 80082ea:	fba2 2303 	umull	r2, r3, r2, r3
 80082ee:	095b      	lsrs	r3, r3, #5
 80082f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80082f4:	441c      	add	r4, r3
 80082f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80082fa:	2200      	movs	r2, #0
 80082fc:	673b      	str	r3, [r7, #112]	@ 0x70
 80082fe:	677a      	str	r2, [r7, #116]	@ 0x74
 8008300:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008304:	4642      	mov	r2, r8
 8008306:	464b      	mov	r3, r9
 8008308:	1891      	adds	r1, r2, r2
 800830a:	60b9      	str	r1, [r7, #8]
 800830c:	415b      	adcs	r3, r3
 800830e:	60fb      	str	r3, [r7, #12]
 8008310:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008314:	4641      	mov	r1, r8
 8008316:	1851      	adds	r1, r2, r1
 8008318:	6039      	str	r1, [r7, #0]
 800831a:	4649      	mov	r1, r9
 800831c:	414b      	adcs	r3, r1
 800831e:	607b      	str	r3, [r7, #4]
 8008320:	f04f 0200 	mov.w	r2, #0
 8008324:	f04f 0300 	mov.w	r3, #0
 8008328:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800832c:	4659      	mov	r1, fp
 800832e:	00cb      	lsls	r3, r1, #3
 8008330:	4651      	mov	r1, sl
 8008332:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008336:	4651      	mov	r1, sl
 8008338:	00ca      	lsls	r2, r1, #3
 800833a:	4610      	mov	r0, r2
 800833c:	4619      	mov	r1, r3
 800833e:	4603      	mov	r3, r0
 8008340:	4642      	mov	r2, r8
 8008342:	189b      	adds	r3, r3, r2
 8008344:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008346:	464b      	mov	r3, r9
 8008348:	460a      	mov	r2, r1
 800834a:	eb42 0303 	adc.w	r3, r2, r3
 800834e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008354:	685b      	ldr	r3, [r3, #4]
 8008356:	2200      	movs	r2, #0
 8008358:	663b      	str	r3, [r7, #96]	@ 0x60
 800835a:	667a      	str	r2, [r7, #100]	@ 0x64
 800835c:	f04f 0200 	mov.w	r2, #0
 8008360:	f04f 0300 	mov.w	r3, #0
 8008364:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008368:	4649      	mov	r1, r9
 800836a:	008b      	lsls	r3, r1, #2
 800836c:	4641      	mov	r1, r8
 800836e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008372:	4641      	mov	r1, r8
 8008374:	008a      	lsls	r2, r1, #2
 8008376:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800837a:	f7f8 fc95 	bl	8000ca8 <__aeabi_uldivmod>
 800837e:	4602      	mov	r2, r0
 8008380:	460b      	mov	r3, r1
 8008382:	4b0d      	ldr	r3, [pc, #52]	@ (80083b8 <UART_SetConfig+0x4e4>)
 8008384:	fba3 1302 	umull	r1, r3, r3, r2
 8008388:	095b      	lsrs	r3, r3, #5
 800838a:	2164      	movs	r1, #100	@ 0x64
 800838c:	fb01 f303 	mul.w	r3, r1, r3
 8008390:	1ad3      	subs	r3, r2, r3
 8008392:	011b      	lsls	r3, r3, #4
 8008394:	3332      	adds	r3, #50	@ 0x32
 8008396:	4a08      	ldr	r2, [pc, #32]	@ (80083b8 <UART_SetConfig+0x4e4>)
 8008398:	fba2 2303 	umull	r2, r3, r2, r3
 800839c:	095b      	lsrs	r3, r3, #5
 800839e:	f003 020f 	and.w	r2, r3, #15
 80083a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	4422      	add	r2, r4
 80083aa:	609a      	str	r2, [r3, #8]
}
 80083ac:	bf00      	nop
 80083ae:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80083b2:	46bd      	mov	sp, r7
 80083b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80083b8:	51eb851f 	.word	0x51eb851f

080083bc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80083bc:	b480      	push	{r7}
 80083be:	b085      	sub	sp, #20
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	4603      	mov	r3, r0
 80083c4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80083c6:	2300      	movs	r3, #0
 80083c8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80083ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80083ce:	2b84      	cmp	r3, #132	@ 0x84
 80083d0:	d005      	beq.n	80083de <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80083d2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	4413      	add	r3, r2
 80083da:	3303      	adds	r3, #3
 80083dc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80083de:	68fb      	ldr	r3, [r7, #12]
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	3714      	adds	r7, #20
 80083e4:	46bd      	mov	sp, r7
 80083e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ea:	4770      	bx	lr

080083ec <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b083      	sub	sp, #12
 80083f0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80083f2:	f3ef 8305 	mrs	r3, IPSR
 80083f6:	607b      	str	r3, [r7, #4]
  return(result);
 80083f8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	bf14      	ite	ne
 80083fe:	2301      	movne	r3, #1
 8008400:	2300      	moveq	r3, #0
 8008402:	b2db      	uxtb	r3, r3
}
 8008404:	4618      	mov	r0, r3
 8008406:	370c      	adds	r7, #12
 8008408:	46bd      	mov	sp, r7
 800840a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840e:	4770      	bx	lr

08008410 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008414:	f000 fcae 	bl	8008d74 <vTaskStartScheduler>
  
  return osOK;
 8008418:	2300      	movs	r3, #0
}
 800841a:	4618      	mov	r0, r3
 800841c:	bd80      	pop	{r7, pc}

0800841e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800841e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008420:	b089      	sub	sp, #36	@ 0x24
 8008422:	af04      	add	r7, sp, #16
 8008424:	6078      	str	r0, [r7, #4]
 8008426:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	695b      	ldr	r3, [r3, #20]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d020      	beq.n	8008472 <osThreadCreate+0x54>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	699b      	ldr	r3, [r3, #24]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d01c      	beq.n	8008472 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	685c      	ldr	r4, [r3, #4]
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	691e      	ldr	r6, [r3, #16]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800844a:	4618      	mov	r0, r3
 800844c:	f7ff ffb6 	bl	80083bc <makeFreeRtosPriority>
 8008450:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	695b      	ldr	r3, [r3, #20]
 8008456:	687a      	ldr	r2, [r7, #4]
 8008458:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800845a:	9202      	str	r2, [sp, #8]
 800845c:	9301      	str	r3, [sp, #4]
 800845e:	9100      	str	r1, [sp, #0]
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	4632      	mov	r2, r6
 8008464:	4629      	mov	r1, r5
 8008466:	4620      	mov	r0, r4
 8008468:	f000 f97a 	bl	8008760 <xTaskCreateStatic>
 800846c:	4603      	mov	r3, r0
 800846e:	60fb      	str	r3, [r7, #12]
 8008470:	e01c      	b.n	80084ac <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	685c      	ldr	r4, [r3, #4]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800847e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008486:	4618      	mov	r0, r3
 8008488:	f7ff ff98 	bl	80083bc <makeFreeRtosPriority>
 800848c:	4602      	mov	r2, r0
 800848e:	f107 030c 	add.w	r3, r7, #12
 8008492:	9301      	str	r3, [sp, #4]
 8008494:	9200      	str	r2, [sp, #0]
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	4632      	mov	r2, r6
 800849a:	4629      	mov	r1, r5
 800849c:	4620      	mov	r0, r4
 800849e:	f000 f9bf 	bl	8008820 <xTaskCreate>
 80084a2:	4603      	mov	r3, r0
 80084a4:	2b01      	cmp	r3, #1
 80084a6:	d001      	beq.n	80084ac <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80084a8:	2300      	movs	r3, #0
 80084aa:	e000      	b.n	80084ae <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80084ac:	68fb      	ldr	r3, [r7, #12]
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3714      	adds	r7, #20
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080084b6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80084b6:	b580      	push	{r7, lr}
 80084b8:	b084      	sub	sp, #16
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d001      	beq.n	80084cc <osDelay+0x16>
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	e000      	b.n	80084ce <osDelay+0x18>
 80084cc:	2301      	movs	r3, #1
 80084ce:	4618      	mov	r0, r3
 80084d0:	f000 faf6 	bl	8008ac0 <vTaskDelay>
  
  return osOK;
 80084d4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3710      	adds	r7, #16
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}
	...

080084e0 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b086      	sub	sp, #24
 80084e4:	af02      	add	r7, sp, #8
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80084ea:	2300      	movs	r3, #0
 80084ec:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 80084ee:	2300      	movs	r3, #0
 80084f0:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 80084f2:	f7ff ff7b 	bl	80083ec <inHandlerMode>
 80084f6:	4603      	mov	r3, r0
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d01c      	beq.n	8008536 <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 80084fc:	6839      	ldr	r1, [r7, #0]
 80084fe:	f107 0208 	add.w	r2, r7, #8
 8008502:	f107 030c 	add.w	r3, r7, #12
 8008506:	9300      	str	r3, [sp, #0]
 8008508:	4613      	mov	r3, r2
 800850a:	2201      	movs	r2, #1
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f001 f88b 	bl	8009628 <xTaskGenericNotifyFromISR>
 8008512:	4603      	mov	r3, r0
 8008514:	2b01      	cmp	r3, #1
 8008516:	d002      	beq.n	800851e <osSignalSet+0x3e>
      return 0x80000000;
 8008518:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800851c:	e019      	b.n	8008552 <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d015      	beq.n	8008550 <osSignalSet+0x70>
 8008524:	4b0d      	ldr	r3, [pc, #52]	@ (800855c <osSignalSet+0x7c>)
 8008526:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800852a:	601a      	str	r2, [r3, #0]
 800852c:	f3bf 8f4f 	dsb	sy
 8008530:	f3bf 8f6f 	isb	sy
 8008534:	e00c      	b.n	8008550 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 8008536:	6839      	ldr	r1, [r7, #0]
 8008538:	f107 0308 	add.w	r3, r7, #8
 800853c:	2201      	movs	r2, #1
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f000 ffb0 	bl	80094a4 <xTaskGenericNotify>
 8008544:	4603      	mov	r3, r0
 8008546:	2b01      	cmp	r3, #1
 8008548:	d002      	beq.n	8008550 <osSignalSet+0x70>
    return 0x80000000;
 800854a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800854e:	e000      	b.n	8008552 <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 8008550:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 8008552:	4618      	mov	r0, r3
 8008554:	3710      	adds	r7, #16
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}
 800855a:	bf00      	nop
 800855c:	e000ed04 	.word	0xe000ed04

08008560 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8008560:	b590      	push	{r4, r7, lr}
 8008562:	b089      	sub	sp, #36	@ 0x24
 8008564:	af00      	add	r7, sp, #0
 8008566:	60f8      	str	r0, [r7, #12]
 8008568:	60b9      	str	r1, [r7, #8]
 800856a:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 800856c:	2300      	movs	r3, #0
 800856e:	617b      	str	r3, [r7, #20]
  ticks = 0;
 8008570:	2300      	movs	r3, #0
 8008572:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800857a:	d103      	bne.n	8008584 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 800857c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008580:	61fb      	str	r3, [r7, #28]
 8008582:	e009      	b.n	8008598 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d006      	beq.n	8008598 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 800858e:	69fb      	ldr	r3, [r7, #28]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d101      	bne.n	8008598 <osSignalWait+0x38>
      ticks = 1;
 8008594:	2301      	movs	r3, #1
 8008596:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 8008598:	f7ff ff28 	bl	80083ec <inHandlerMode>
 800859c:	4603      	mov	r3, r0
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d002      	beq.n	80085a8 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 80085a2:	2382      	movs	r3, #130	@ 0x82
 80085a4:	613b      	str	r3, [r7, #16]
 80085a6:	e01b      	b.n	80085e0 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 80085a8:	68b9      	ldr	r1, [r7, #8]
 80085aa:	f107 0310 	add.w	r3, r7, #16
 80085ae:	1d1a      	adds	r2, r3, #4
 80085b0:	69fb      	ldr	r3, [r7, #28]
 80085b2:	2000      	movs	r0, #0
 80085b4:	f000 ff16 	bl	80093e4 <xTaskNotifyWait>
 80085b8:	4603      	mov	r3, r0
 80085ba:	2b01      	cmp	r3, #1
 80085bc:	d008      	beq.n	80085d0 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 80085be:	69fb      	ldr	r3, [r7, #28]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d102      	bne.n	80085ca <osSignalWait+0x6a>
 80085c4:	2300      	movs	r3, #0
 80085c6:	613b      	str	r3, [r7, #16]
 80085c8:	e00a      	b.n	80085e0 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 80085ca:	2340      	movs	r3, #64	@ 0x40
 80085cc:	613b      	str	r3, [r7, #16]
 80085ce:	e007      	b.n	80085e0 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 80085d0:	697b      	ldr	r3, [r7, #20]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	da02      	bge.n	80085dc <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 80085d6:	2386      	movs	r3, #134	@ 0x86
 80085d8:	613b      	str	r3, [r7, #16]
 80085da:	e001      	b.n	80085e0 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 80085dc:	2308      	movs	r3, #8
 80085de:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	461c      	mov	r4, r3
 80085e4:	f107 0310 	add.w	r3, r7, #16
 80085e8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80085ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80085f0:	68f8      	ldr	r0, [r7, #12]
 80085f2:	3724      	adds	r7, #36	@ 0x24
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd90      	pop	{r4, r7, pc}

080085f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80085f8:	b480      	push	{r7}
 80085fa:	b083      	sub	sp, #12
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f103 0208 	add.w	r2, r3, #8
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008610:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f103 0208 	add.w	r2, r3, #8
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f103 0208 	add.w	r2, r3, #8
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2200      	movs	r2, #0
 800862a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800862c:	bf00      	nop
 800862e:	370c      	adds	r7, #12
 8008630:	46bd      	mov	sp, r7
 8008632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008636:	4770      	bx	lr

08008638 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008638:	b480      	push	{r7}
 800863a:	b083      	sub	sp, #12
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2200      	movs	r2, #0
 8008644:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008646:	bf00      	nop
 8008648:	370c      	adds	r7, #12
 800864a:	46bd      	mov	sp, r7
 800864c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008650:	4770      	bx	lr

08008652 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008652:	b480      	push	{r7}
 8008654:	b085      	sub	sp, #20
 8008656:	af00      	add	r7, sp, #0
 8008658:	6078      	str	r0, [r7, #4]
 800865a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	685b      	ldr	r3, [r3, #4]
 8008660:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	68fa      	ldr	r2, [r7, #12]
 8008666:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	689a      	ldr	r2, [r3, #8]
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	689b      	ldr	r3, [r3, #8]
 8008674:	683a      	ldr	r2, [r7, #0]
 8008676:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	683a      	ldr	r2, [r7, #0]
 800867c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	687a      	ldr	r2, [r7, #4]
 8008682:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	1c5a      	adds	r2, r3, #1
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	601a      	str	r2, [r3, #0]
}
 800868e:	bf00      	nop
 8008690:	3714      	adds	r7, #20
 8008692:	46bd      	mov	sp, r7
 8008694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008698:	4770      	bx	lr

0800869a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800869a:	b480      	push	{r7}
 800869c:	b085      	sub	sp, #20
 800869e:	af00      	add	r7, sp, #0
 80086a0:	6078      	str	r0, [r7, #4]
 80086a2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80086b0:	d103      	bne.n	80086ba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	691b      	ldr	r3, [r3, #16]
 80086b6:	60fb      	str	r3, [r7, #12]
 80086b8:	e00c      	b.n	80086d4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	3308      	adds	r3, #8
 80086be:	60fb      	str	r3, [r7, #12]
 80086c0:	e002      	b.n	80086c8 <vListInsert+0x2e>
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	685b      	ldr	r3, [r3, #4]
 80086c6:	60fb      	str	r3, [r7, #12]
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	685b      	ldr	r3, [r3, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	68ba      	ldr	r2, [r7, #8]
 80086d0:	429a      	cmp	r2, r3
 80086d2:	d2f6      	bcs.n	80086c2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	685a      	ldr	r2, [r3, #4]
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	683a      	ldr	r2, [r7, #0]
 80086e2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	68fa      	ldr	r2, [r7, #12]
 80086e8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	683a      	ldr	r2, [r7, #0]
 80086ee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	687a      	ldr	r2, [r7, #4]
 80086f4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	1c5a      	adds	r2, r3, #1
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	601a      	str	r2, [r3, #0]
}
 8008700:	bf00      	nop
 8008702:	3714      	adds	r7, #20
 8008704:	46bd      	mov	sp, r7
 8008706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870a:	4770      	bx	lr

0800870c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800870c:	b480      	push	{r7}
 800870e:	b085      	sub	sp, #20
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	691b      	ldr	r3, [r3, #16]
 8008718:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	685b      	ldr	r3, [r3, #4]
 800871e:	687a      	ldr	r2, [r7, #4]
 8008720:	6892      	ldr	r2, [r2, #8]
 8008722:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	689b      	ldr	r3, [r3, #8]
 8008728:	687a      	ldr	r2, [r7, #4]
 800872a:	6852      	ldr	r2, [r2, #4]
 800872c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	685b      	ldr	r3, [r3, #4]
 8008732:	687a      	ldr	r2, [r7, #4]
 8008734:	429a      	cmp	r2, r3
 8008736:	d103      	bne.n	8008740 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	689a      	ldr	r2, [r3, #8]
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2200      	movs	r2, #0
 8008744:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	1e5a      	subs	r2, r3, #1
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
}
 8008754:	4618      	mov	r0, r3
 8008756:	3714      	adds	r7, #20
 8008758:	46bd      	mov	sp, r7
 800875a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875e:	4770      	bx	lr

08008760 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008760:	b580      	push	{r7, lr}
 8008762:	b08e      	sub	sp, #56	@ 0x38
 8008764:	af04      	add	r7, sp, #16
 8008766:	60f8      	str	r0, [r7, #12]
 8008768:	60b9      	str	r1, [r7, #8]
 800876a:	607a      	str	r2, [r7, #4]
 800876c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800876e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008770:	2b00      	cmp	r3, #0
 8008772:	d10b      	bne.n	800878c <xTaskCreateStatic+0x2c>
	__asm volatile
 8008774:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008778:	f383 8811 	msr	BASEPRI, r3
 800877c:	f3bf 8f6f 	isb	sy
 8008780:	f3bf 8f4f 	dsb	sy
 8008784:	623b      	str	r3, [r7, #32]
}
 8008786:	bf00      	nop
 8008788:	bf00      	nop
 800878a:	e7fd      	b.n	8008788 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800878c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800878e:	2b00      	cmp	r3, #0
 8008790:	d10b      	bne.n	80087aa <xTaskCreateStatic+0x4a>
	__asm volatile
 8008792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008796:	f383 8811 	msr	BASEPRI, r3
 800879a:	f3bf 8f6f 	isb	sy
 800879e:	f3bf 8f4f 	dsb	sy
 80087a2:	61fb      	str	r3, [r7, #28]
}
 80087a4:	bf00      	nop
 80087a6:	bf00      	nop
 80087a8:	e7fd      	b.n	80087a6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80087aa:	23a0      	movs	r3, #160	@ 0xa0
 80087ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	2ba0      	cmp	r3, #160	@ 0xa0
 80087b2:	d00b      	beq.n	80087cc <xTaskCreateStatic+0x6c>
	__asm volatile
 80087b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087b8:	f383 8811 	msr	BASEPRI, r3
 80087bc:	f3bf 8f6f 	isb	sy
 80087c0:	f3bf 8f4f 	dsb	sy
 80087c4:	61bb      	str	r3, [r7, #24]
}
 80087c6:	bf00      	nop
 80087c8:	bf00      	nop
 80087ca:	e7fd      	b.n	80087c8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80087cc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80087ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d01e      	beq.n	8008812 <xTaskCreateStatic+0xb2>
 80087d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d01b      	beq.n	8008812 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80087da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087dc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80087de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80087e2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80087e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087e6:	2202      	movs	r2, #2
 80087e8:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80087ec:	2300      	movs	r3, #0
 80087ee:	9303      	str	r3, [sp, #12]
 80087f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087f2:	9302      	str	r3, [sp, #8]
 80087f4:	f107 0314 	add.w	r3, r7, #20
 80087f8:	9301      	str	r3, [sp, #4]
 80087fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087fc:	9300      	str	r3, [sp, #0]
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	687a      	ldr	r2, [r7, #4]
 8008802:	68b9      	ldr	r1, [r7, #8]
 8008804:	68f8      	ldr	r0, [r7, #12]
 8008806:	f000 f851 	bl	80088ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800880a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800880c:	f000 f8ee 	bl	80089ec <prvAddNewTaskToReadyList>
 8008810:	e001      	b.n	8008816 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008812:	2300      	movs	r3, #0
 8008814:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008816:	697b      	ldr	r3, [r7, #20]
	}
 8008818:	4618      	mov	r0, r3
 800881a:	3728      	adds	r7, #40	@ 0x28
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}

08008820 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008820:	b580      	push	{r7, lr}
 8008822:	b08c      	sub	sp, #48	@ 0x30
 8008824:	af04      	add	r7, sp, #16
 8008826:	60f8      	str	r0, [r7, #12]
 8008828:	60b9      	str	r1, [r7, #8]
 800882a:	603b      	str	r3, [r7, #0]
 800882c:	4613      	mov	r3, r2
 800882e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008830:	88fb      	ldrh	r3, [r7, #6]
 8008832:	009b      	lsls	r3, r3, #2
 8008834:	4618      	mov	r0, r3
 8008836:	f001 fa99 	bl	8009d6c <pvPortMalloc>
 800883a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800883c:	697b      	ldr	r3, [r7, #20]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d00e      	beq.n	8008860 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008842:	20a0      	movs	r0, #160	@ 0xa0
 8008844:	f001 fa92 	bl	8009d6c <pvPortMalloc>
 8008848:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800884a:	69fb      	ldr	r3, [r7, #28]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d003      	beq.n	8008858 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008850:	69fb      	ldr	r3, [r7, #28]
 8008852:	697a      	ldr	r2, [r7, #20]
 8008854:	631a      	str	r2, [r3, #48]	@ 0x30
 8008856:	e005      	b.n	8008864 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008858:	6978      	ldr	r0, [r7, #20]
 800885a:	f001 fb55 	bl	8009f08 <vPortFree>
 800885e:	e001      	b.n	8008864 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008860:	2300      	movs	r3, #0
 8008862:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008864:	69fb      	ldr	r3, [r7, #28]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d017      	beq.n	800889a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800886a:	69fb      	ldr	r3, [r7, #28]
 800886c:	2200      	movs	r2, #0
 800886e:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008872:	88fa      	ldrh	r2, [r7, #6]
 8008874:	2300      	movs	r3, #0
 8008876:	9303      	str	r3, [sp, #12]
 8008878:	69fb      	ldr	r3, [r7, #28]
 800887a:	9302      	str	r3, [sp, #8]
 800887c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800887e:	9301      	str	r3, [sp, #4]
 8008880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008882:	9300      	str	r3, [sp, #0]
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	68b9      	ldr	r1, [r7, #8]
 8008888:	68f8      	ldr	r0, [r7, #12]
 800888a:	f000 f80f 	bl	80088ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800888e:	69f8      	ldr	r0, [r7, #28]
 8008890:	f000 f8ac 	bl	80089ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008894:	2301      	movs	r3, #1
 8008896:	61bb      	str	r3, [r7, #24]
 8008898:	e002      	b.n	80088a0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800889a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800889e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80088a0:	69bb      	ldr	r3, [r7, #24]
	}
 80088a2:	4618      	mov	r0, r3
 80088a4:	3720      	adds	r7, #32
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}
	...

080088ac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b088      	sub	sp, #32
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	60f8      	str	r0, [r7, #12]
 80088b4:	60b9      	str	r1, [r7, #8]
 80088b6:	607a      	str	r2, [r7, #4]
 80088b8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80088ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80088c4:	3b01      	subs	r3, #1
 80088c6:	009b      	lsls	r3, r3, #2
 80088c8:	4413      	add	r3, r2
 80088ca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80088cc:	69bb      	ldr	r3, [r7, #24]
 80088ce:	f023 0307 	bic.w	r3, r3, #7
 80088d2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80088d4:	69bb      	ldr	r3, [r7, #24]
 80088d6:	f003 0307 	and.w	r3, r3, #7
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d00b      	beq.n	80088f6 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80088de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088e2:	f383 8811 	msr	BASEPRI, r3
 80088e6:	f3bf 8f6f 	isb	sy
 80088ea:	f3bf 8f4f 	dsb	sy
 80088ee:	617b      	str	r3, [r7, #20]
}
 80088f0:	bf00      	nop
 80088f2:	bf00      	nop
 80088f4:	e7fd      	b.n	80088f2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d01f      	beq.n	800893c <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80088fc:	2300      	movs	r3, #0
 80088fe:	61fb      	str	r3, [r7, #28]
 8008900:	e012      	b.n	8008928 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008902:	68ba      	ldr	r2, [r7, #8]
 8008904:	69fb      	ldr	r3, [r7, #28]
 8008906:	4413      	add	r3, r2
 8008908:	7819      	ldrb	r1, [r3, #0]
 800890a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800890c:	69fb      	ldr	r3, [r7, #28]
 800890e:	4413      	add	r3, r2
 8008910:	3334      	adds	r3, #52	@ 0x34
 8008912:	460a      	mov	r2, r1
 8008914:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008916:	68ba      	ldr	r2, [r7, #8]
 8008918:	69fb      	ldr	r3, [r7, #28]
 800891a:	4413      	add	r3, r2
 800891c:	781b      	ldrb	r3, [r3, #0]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d006      	beq.n	8008930 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008922:	69fb      	ldr	r3, [r7, #28]
 8008924:	3301      	adds	r3, #1
 8008926:	61fb      	str	r3, [r7, #28]
 8008928:	69fb      	ldr	r3, [r7, #28]
 800892a:	2b0f      	cmp	r3, #15
 800892c:	d9e9      	bls.n	8008902 <prvInitialiseNewTask+0x56>
 800892e:	e000      	b.n	8008932 <prvInitialiseNewTask+0x86>
			{
				break;
 8008930:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008934:	2200      	movs	r2, #0
 8008936:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800893a:	e003      	b.n	8008944 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800893c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800893e:	2200      	movs	r2, #0
 8008940:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008946:	2b06      	cmp	r3, #6
 8008948:	d901      	bls.n	800894e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800894a:	2306      	movs	r3, #6
 800894c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800894e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008950:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008952:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008956:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008958:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800895a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800895c:	2200      	movs	r2, #0
 800895e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008962:	3304      	adds	r3, #4
 8008964:	4618      	mov	r0, r3
 8008966:	f7ff fe67 	bl	8008638 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800896a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800896c:	3318      	adds	r3, #24
 800896e:	4618      	mov	r0, r3
 8008970:	f7ff fe62 	bl	8008638 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008976:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008978:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800897a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800897c:	f1c3 0207 	rsb	r2, r3, #7
 8008980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008982:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008986:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008988:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800898a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800898c:	2200      	movs	r2, #0
 800898e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008994:	2200      	movs	r2, #0
 8008996:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800899a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800899c:	334c      	adds	r3, #76	@ 0x4c
 800899e:	224c      	movs	r2, #76	@ 0x4c
 80089a0:	2100      	movs	r1, #0
 80089a2:	4618      	mov	r0, r3
 80089a4:	f00f fa18 	bl	8017dd8 <memset>
 80089a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089aa:	4a0d      	ldr	r2, [pc, #52]	@ (80089e0 <prvInitialiseNewTask+0x134>)
 80089ac:	651a      	str	r2, [r3, #80]	@ 0x50
 80089ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089b0:	4a0c      	ldr	r2, [pc, #48]	@ (80089e4 <prvInitialiseNewTask+0x138>)
 80089b2:	655a      	str	r2, [r3, #84]	@ 0x54
 80089b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089b6:	4a0c      	ldr	r2, [pc, #48]	@ (80089e8 <prvInitialiseNewTask+0x13c>)
 80089b8:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80089ba:	683a      	ldr	r2, [r7, #0]
 80089bc:	68f9      	ldr	r1, [r7, #12]
 80089be:	69b8      	ldr	r0, [r7, #24]
 80089c0:	f000 ff7e 	bl	80098c0 <pxPortInitialiseStack>
 80089c4:	4602      	mov	r2, r0
 80089c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089c8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80089ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d002      	beq.n	80089d6 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80089d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80089d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80089d6:	bf00      	nop
 80089d8:	3720      	adds	r7, #32
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}
 80089de:	bf00      	nop
 80089e0:	2001130c 	.word	0x2001130c
 80089e4:	20011374 	.word	0x20011374
 80089e8:	200113dc 	.word	0x200113dc

080089ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b082      	sub	sp, #8
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80089f4:	f001 f898 	bl	8009b28 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80089f8:	4b2a      	ldr	r3, [pc, #168]	@ (8008aa4 <prvAddNewTaskToReadyList+0xb8>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	3301      	adds	r3, #1
 80089fe:	4a29      	ldr	r2, [pc, #164]	@ (8008aa4 <prvAddNewTaskToReadyList+0xb8>)
 8008a00:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008a02:	4b29      	ldr	r3, [pc, #164]	@ (8008aa8 <prvAddNewTaskToReadyList+0xbc>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d109      	bne.n	8008a1e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008a0a:	4a27      	ldr	r2, [pc, #156]	@ (8008aa8 <prvAddNewTaskToReadyList+0xbc>)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008a10:	4b24      	ldr	r3, [pc, #144]	@ (8008aa4 <prvAddNewTaskToReadyList+0xb8>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	2b01      	cmp	r3, #1
 8008a16:	d110      	bne.n	8008a3a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008a18:	f000 fc20 	bl	800925c <prvInitialiseTaskLists>
 8008a1c:	e00d      	b.n	8008a3a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008a1e:	4b23      	ldr	r3, [pc, #140]	@ (8008aac <prvAddNewTaskToReadyList+0xc0>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d109      	bne.n	8008a3a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008a26:	4b20      	ldr	r3, [pc, #128]	@ (8008aa8 <prvAddNewTaskToReadyList+0xbc>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a30:	429a      	cmp	r2, r3
 8008a32:	d802      	bhi.n	8008a3a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008a34:	4a1c      	ldr	r2, [pc, #112]	@ (8008aa8 <prvAddNewTaskToReadyList+0xbc>)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008a3a:	4b1d      	ldr	r3, [pc, #116]	@ (8008ab0 <prvAddNewTaskToReadyList+0xc4>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	3301      	adds	r3, #1
 8008a40:	4a1b      	ldr	r2, [pc, #108]	@ (8008ab0 <prvAddNewTaskToReadyList+0xc4>)
 8008a42:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a48:	2201      	movs	r2, #1
 8008a4a:	409a      	lsls	r2, r3
 8008a4c:	4b19      	ldr	r3, [pc, #100]	@ (8008ab4 <prvAddNewTaskToReadyList+0xc8>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4313      	orrs	r3, r2
 8008a52:	4a18      	ldr	r2, [pc, #96]	@ (8008ab4 <prvAddNewTaskToReadyList+0xc8>)
 8008a54:	6013      	str	r3, [r2, #0]
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a5a:	4613      	mov	r3, r2
 8008a5c:	009b      	lsls	r3, r3, #2
 8008a5e:	4413      	add	r3, r2
 8008a60:	009b      	lsls	r3, r3, #2
 8008a62:	4a15      	ldr	r2, [pc, #84]	@ (8008ab8 <prvAddNewTaskToReadyList+0xcc>)
 8008a64:	441a      	add	r2, r3
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	3304      	adds	r3, #4
 8008a6a:	4619      	mov	r1, r3
 8008a6c:	4610      	mov	r0, r2
 8008a6e:	f7ff fdf0 	bl	8008652 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008a72:	f001 f88b 	bl	8009b8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008a76:	4b0d      	ldr	r3, [pc, #52]	@ (8008aac <prvAddNewTaskToReadyList+0xc0>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d00e      	beq.n	8008a9c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008a7e:	4b0a      	ldr	r3, [pc, #40]	@ (8008aa8 <prvAddNewTaskToReadyList+0xbc>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a88:	429a      	cmp	r2, r3
 8008a8a:	d207      	bcs.n	8008a9c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008a8c:	4b0b      	ldr	r3, [pc, #44]	@ (8008abc <prvAddNewTaskToReadyList+0xd0>)
 8008a8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a92:	601a      	str	r2, [r3, #0]
 8008a94:	f3bf 8f4f 	dsb	sy
 8008a98:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008a9c:	bf00      	nop
 8008a9e:	3708      	adds	r7, #8
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}
 8008aa4:	20008b34 	.word	0x20008b34
 8008aa8:	20008a34 	.word	0x20008a34
 8008aac:	20008b40 	.word	0x20008b40
 8008ab0:	20008b50 	.word	0x20008b50
 8008ab4:	20008b3c 	.word	0x20008b3c
 8008ab8:	20008a38 	.word	0x20008a38
 8008abc:	e000ed04 	.word	0xe000ed04

08008ac0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b084      	sub	sp, #16
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d018      	beq.n	8008b04 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008ad2:	4b14      	ldr	r3, [pc, #80]	@ (8008b24 <vTaskDelay+0x64>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d00b      	beq.n	8008af2 <vTaskDelay+0x32>
	__asm volatile
 8008ada:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ade:	f383 8811 	msr	BASEPRI, r3
 8008ae2:	f3bf 8f6f 	isb	sy
 8008ae6:	f3bf 8f4f 	dsb	sy
 8008aea:	60bb      	str	r3, [r7, #8]
}
 8008aec:	bf00      	nop
 8008aee:	bf00      	nop
 8008af0:	e7fd      	b.n	8008aee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008af2:	f000 f9a9 	bl	8008e48 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008af6:	2100      	movs	r1, #0
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f000 fe7b 	bl	80097f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008afe:	f000 f9b1 	bl	8008e64 <xTaskResumeAll>
 8008b02:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d107      	bne.n	8008b1a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008b0a:	4b07      	ldr	r3, [pc, #28]	@ (8008b28 <vTaskDelay+0x68>)
 8008b0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b10:	601a      	str	r2, [r3, #0]
 8008b12:	f3bf 8f4f 	dsb	sy
 8008b16:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008b1a:	bf00      	nop
 8008b1c:	3710      	adds	r7, #16
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}
 8008b22:	bf00      	nop
 8008b24:	20008b5c 	.word	0x20008b5c
 8008b28:	e000ed04 	.word	0xe000ed04

08008b2c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b084      	sub	sp, #16
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8008b34:	f000 fff8 	bl	8009b28 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d102      	bne.n	8008b44 <vTaskSuspend+0x18>
 8008b3e:	4b3d      	ldr	r3, [pc, #244]	@ (8008c34 <vTaskSuspend+0x108>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	e000      	b.n	8008b46 <vTaskSuspend+0x1a>
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	3304      	adds	r3, #4
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	f7ff fddd 	bl	800870c <uxListRemove>
 8008b52:	4603      	mov	r3, r0
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d115      	bne.n	8008b84 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b5c:	4936      	ldr	r1, [pc, #216]	@ (8008c38 <vTaskSuspend+0x10c>)
 8008b5e:	4613      	mov	r3, r2
 8008b60:	009b      	lsls	r3, r3, #2
 8008b62:	4413      	add	r3, r2
 8008b64:	009b      	lsls	r3, r3, #2
 8008b66:	440b      	add	r3, r1
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d10a      	bne.n	8008b84 <vTaskSuspend+0x58>
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b72:	2201      	movs	r2, #1
 8008b74:	fa02 f303 	lsl.w	r3, r2, r3
 8008b78:	43da      	mvns	r2, r3
 8008b7a:	4b30      	ldr	r3, [pc, #192]	@ (8008c3c <vTaskSuspend+0x110>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	4013      	ands	r3, r2
 8008b80:	4a2e      	ldr	r2, [pc, #184]	@ (8008c3c <vTaskSuspend+0x110>)
 8008b82:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d004      	beq.n	8008b96 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	3318      	adds	r3, #24
 8008b90:	4618      	mov	r0, r3
 8008b92:	f7ff fdbb 	bl	800870c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	3304      	adds	r3, #4
 8008b9a:	4619      	mov	r1, r3
 8008b9c:	4828      	ldr	r0, [pc, #160]	@ (8008c40 <vTaskSuspend+0x114>)
 8008b9e:	f7ff fd58 	bl	8008652 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8008ba8:	b2db      	uxtb	r3, r3
 8008baa:	2b01      	cmp	r3, #1
 8008bac:	d103      	bne.n	8008bb6 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8008bb6:	f000 ffe9 	bl	8009b8c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8008bba:	4b22      	ldr	r3, [pc, #136]	@ (8008c44 <vTaskSuspend+0x118>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d005      	beq.n	8008bce <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8008bc2:	f000 ffb1 	bl	8009b28 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8008bc6:	f000 fbed 	bl	80093a4 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8008bca:	f000 ffdf 	bl	8009b8c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8008bce:	4b19      	ldr	r3, [pc, #100]	@ (8008c34 <vTaskSuspend+0x108>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	68fa      	ldr	r2, [r7, #12]
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	d128      	bne.n	8008c2a <vTaskSuspend+0xfe>
		{
			if( xSchedulerRunning != pdFALSE )
 8008bd8:	4b1a      	ldr	r3, [pc, #104]	@ (8008c44 <vTaskSuspend+0x118>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d018      	beq.n	8008c12 <vTaskSuspend+0xe6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8008be0:	4b19      	ldr	r3, [pc, #100]	@ (8008c48 <vTaskSuspend+0x11c>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d00b      	beq.n	8008c00 <vTaskSuspend+0xd4>
	__asm volatile
 8008be8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bec:	f383 8811 	msr	BASEPRI, r3
 8008bf0:	f3bf 8f6f 	isb	sy
 8008bf4:	f3bf 8f4f 	dsb	sy
 8008bf8:	60bb      	str	r3, [r7, #8]
}
 8008bfa:	bf00      	nop
 8008bfc:	bf00      	nop
 8008bfe:	e7fd      	b.n	8008bfc <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8008c00:	4b12      	ldr	r3, [pc, #72]	@ (8008c4c <vTaskSuspend+0x120>)
 8008c02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c06:	601a      	str	r2, [r3, #0]
 8008c08:	f3bf 8f4f 	dsb	sy
 8008c0c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008c10:	e00b      	b.n	8008c2a <vTaskSuspend+0xfe>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8008c12:	4b0b      	ldr	r3, [pc, #44]	@ (8008c40 <vTaskSuspend+0x114>)
 8008c14:	681a      	ldr	r2, [r3, #0]
 8008c16:	4b0e      	ldr	r3, [pc, #56]	@ (8008c50 <vTaskSuspend+0x124>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	429a      	cmp	r2, r3
 8008c1c:	d103      	bne.n	8008c26 <vTaskSuspend+0xfa>
					pxCurrentTCB = NULL;
 8008c1e:	4b05      	ldr	r3, [pc, #20]	@ (8008c34 <vTaskSuspend+0x108>)
 8008c20:	2200      	movs	r2, #0
 8008c22:	601a      	str	r2, [r3, #0]
	}
 8008c24:	e001      	b.n	8008c2a <vTaskSuspend+0xfe>
					vTaskSwitchContext();
 8008c26:	f000 fa75 	bl	8009114 <vTaskSwitchContext>
	}
 8008c2a:	bf00      	nop
 8008c2c:	3710      	adds	r7, #16
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}
 8008c32:	bf00      	nop
 8008c34:	20008a34 	.word	0x20008a34
 8008c38:	20008a38 	.word	0x20008a38
 8008c3c:	20008b3c 	.word	0x20008b3c
 8008c40:	20008b20 	.word	0x20008b20
 8008c44:	20008b40 	.word	0x20008b40
 8008c48:	20008b5c 	.word	0x20008b5c
 8008c4c:	e000ed04 	.word	0xe000ed04
 8008c50:	20008b34 	.word	0x20008b34

08008c54 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8008c54:	b480      	push	{r7}
 8008c56:	b087      	sub	sp, #28
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d10b      	bne.n	8008c82 <prvTaskIsTaskSuspended+0x2e>
	__asm volatile
 8008c6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c6e:	f383 8811 	msr	BASEPRI, r3
 8008c72:	f3bf 8f6f 	isb	sy
 8008c76:	f3bf 8f4f 	dsb	sy
 8008c7a:	60fb      	str	r3, [r7, #12]
}
 8008c7c:	bf00      	nop
 8008c7e:	bf00      	nop
 8008c80:	e7fd      	b.n	8008c7e <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	695b      	ldr	r3, [r3, #20]
 8008c86:	4a0a      	ldr	r2, [pc, #40]	@ (8008cb0 <prvTaskIsTaskSuspended+0x5c>)
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d10a      	bne.n	8008ca2 <prvTaskIsTaskSuspended+0x4e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c90:	4a08      	ldr	r2, [pc, #32]	@ (8008cb4 <prvTaskIsTaskSuspended+0x60>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d005      	beq.n	8008ca2 <prvTaskIsTaskSuspended+0x4e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d101      	bne.n	8008ca2 <prvTaskIsTaskSuspended+0x4e>
				{
					xReturn = pdTRUE;
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008ca2:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	371c      	adds	r7, #28
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cae:	4770      	bx	lr
 8008cb0:	20008b20 	.word	0x20008b20
 8008cb4:	20008af4 	.word	0x20008af4

08008cb8 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b084      	sub	sp, #16
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d10b      	bne.n	8008ce2 <vTaskResume+0x2a>
	__asm volatile
 8008cca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cce:	f383 8811 	msr	BASEPRI, r3
 8008cd2:	f3bf 8f6f 	isb	sy
 8008cd6:	f3bf 8f4f 	dsb	sy
 8008cda:	60bb      	str	r3, [r7, #8]
}
 8008cdc:	bf00      	nop
 8008cde:	bf00      	nop
 8008ce0:	e7fd      	b.n	8008cde <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8008ce2:	4b20      	ldr	r3, [pc, #128]	@ (8008d64 <vTaskResume+0xac>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	68fa      	ldr	r2, [r7, #12]
 8008ce8:	429a      	cmp	r2, r3
 8008cea:	d037      	beq.n	8008d5c <vTaskResume+0xa4>
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d034      	beq.n	8008d5c <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 8008cf2:	f000 ff19 	bl	8009b28 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8008cf6:	68f8      	ldr	r0, [r7, #12]
 8008cf8:	f7ff ffac 	bl	8008c54 <prvTaskIsTaskSuspended>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d02a      	beq.n	8008d58 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	3304      	adds	r3, #4
 8008d06:	4618      	mov	r0, r3
 8008d08:	f7ff fd00 	bl	800870c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d10:	2201      	movs	r2, #1
 8008d12:	409a      	lsls	r2, r3
 8008d14:	4b14      	ldr	r3, [pc, #80]	@ (8008d68 <vTaskResume+0xb0>)
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	4313      	orrs	r3, r2
 8008d1a:	4a13      	ldr	r2, [pc, #76]	@ (8008d68 <vTaskResume+0xb0>)
 8008d1c:	6013      	str	r3, [r2, #0]
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d22:	4613      	mov	r3, r2
 8008d24:	009b      	lsls	r3, r3, #2
 8008d26:	4413      	add	r3, r2
 8008d28:	009b      	lsls	r3, r3, #2
 8008d2a:	4a10      	ldr	r2, [pc, #64]	@ (8008d6c <vTaskResume+0xb4>)
 8008d2c:	441a      	add	r2, r3
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	3304      	adds	r3, #4
 8008d32:	4619      	mov	r1, r3
 8008d34:	4610      	mov	r0, r2
 8008d36:	f7ff fc8c 	bl	8008652 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d3e:	4b09      	ldr	r3, [pc, #36]	@ (8008d64 <vTaskResume+0xac>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d44:	429a      	cmp	r2, r3
 8008d46:	d307      	bcc.n	8008d58 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8008d48:	4b09      	ldr	r3, [pc, #36]	@ (8008d70 <vTaskResume+0xb8>)
 8008d4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d4e:	601a      	str	r2, [r3, #0]
 8008d50:	f3bf 8f4f 	dsb	sy
 8008d54:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8008d58:	f000 ff18 	bl	8009b8c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008d5c:	bf00      	nop
 8008d5e:	3710      	adds	r7, #16
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}
 8008d64:	20008a34 	.word	0x20008a34
 8008d68:	20008b3c 	.word	0x20008b3c
 8008d6c:	20008a38 	.word	0x20008a38
 8008d70:	e000ed04 	.word	0xe000ed04

08008d74 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b08a      	sub	sp, #40	@ 0x28
 8008d78:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008d82:	463a      	mov	r2, r7
 8008d84:	1d39      	adds	r1, r7, #4
 8008d86:	f107 0308 	add.w	r3, r7, #8
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f7f8 fc50 	bl	8001630 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008d90:	6839      	ldr	r1, [r7, #0]
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	68ba      	ldr	r2, [r7, #8]
 8008d96:	9202      	str	r2, [sp, #8]
 8008d98:	9301      	str	r3, [sp, #4]
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	9300      	str	r3, [sp, #0]
 8008d9e:	2300      	movs	r3, #0
 8008da0:	460a      	mov	r2, r1
 8008da2:	4921      	ldr	r1, [pc, #132]	@ (8008e28 <vTaskStartScheduler+0xb4>)
 8008da4:	4821      	ldr	r0, [pc, #132]	@ (8008e2c <vTaskStartScheduler+0xb8>)
 8008da6:	f7ff fcdb 	bl	8008760 <xTaskCreateStatic>
 8008daa:	4603      	mov	r3, r0
 8008dac:	4a20      	ldr	r2, [pc, #128]	@ (8008e30 <vTaskStartScheduler+0xbc>)
 8008dae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008db0:	4b1f      	ldr	r3, [pc, #124]	@ (8008e30 <vTaskStartScheduler+0xbc>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d002      	beq.n	8008dbe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008db8:	2301      	movs	r3, #1
 8008dba:	617b      	str	r3, [r7, #20]
 8008dbc:	e001      	b.n	8008dc2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008dc2:	697b      	ldr	r3, [r7, #20]
 8008dc4:	2b01      	cmp	r3, #1
 8008dc6:	d11b      	bne.n	8008e00 <vTaskStartScheduler+0x8c>
	__asm volatile
 8008dc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dcc:	f383 8811 	msr	BASEPRI, r3
 8008dd0:	f3bf 8f6f 	isb	sy
 8008dd4:	f3bf 8f4f 	dsb	sy
 8008dd8:	613b      	str	r3, [r7, #16]
}
 8008dda:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008ddc:	4b15      	ldr	r3, [pc, #84]	@ (8008e34 <vTaskStartScheduler+0xc0>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	334c      	adds	r3, #76	@ 0x4c
 8008de2:	4a15      	ldr	r2, [pc, #84]	@ (8008e38 <vTaskStartScheduler+0xc4>)
 8008de4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008de6:	4b15      	ldr	r3, [pc, #84]	@ (8008e3c <vTaskStartScheduler+0xc8>)
 8008de8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008dec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008dee:	4b14      	ldr	r3, [pc, #80]	@ (8008e40 <vTaskStartScheduler+0xcc>)
 8008df0:	2201      	movs	r2, #1
 8008df2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008df4:	4b13      	ldr	r3, [pc, #76]	@ (8008e44 <vTaskStartScheduler+0xd0>)
 8008df6:	2200      	movs	r2, #0
 8008df8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008dfa:	f000 fdf1 	bl	80099e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008dfe:	e00f      	b.n	8008e20 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008e06:	d10b      	bne.n	8008e20 <vTaskStartScheduler+0xac>
	__asm volatile
 8008e08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e0c:	f383 8811 	msr	BASEPRI, r3
 8008e10:	f3bf 8f6f 	isb	sy
 8008e14:	f3bf 8f4f 	dsb	sy
 8008e18:	60fb      	str	r3, [r7, #12]
}
 8008e1a:	bf00      	nop
 8008e1c:	bf00      	nop
 8008e1e:	e7fd      	b.n	8008e1c <vTaskStartScheduler+0xa8>
}
 8008e20:	bf00      	nop
 8008e22:	3718      	adds	r7, #24
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}
 8008e28:	08019f84 	.word	0x08019f84
 8008e2c:	0800922d 	.word	0x0800922d
 8008e30:	20008b58 	.word	0x20008b58
 8008e34:	20008a34 	.word	0x20008a34
 8008e38:	200000c8 	.word	0x200000c8
 8008e3c:	20008b54 	.word	0x20008b54
 8008e40:	20008b40 	.word	0x20008b40
 8008e44:	20008b38 	.word	0x20008b38

08008e48 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008e48:	b480      	push	{r7}
 8008e4a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008e4c:	4b04      	ldr	r3, [pc, #16]	@ (8008e60 <vTaskSuspendAll+0x18>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	3301      	adds	r3, #1
 8008e52:	4a03      	ldr	r2, [pc, #12]	@ (8008e60 <vTaskSuspendAll+0x18>)
 8008e54:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008e56:	bf00      	nop
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5e:	4770      	bx	lr
 8008e60:	20008b5c 	.word	0x20008b5c

08008e64 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b084      	sub	sp, #16
 8008e68:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008e72:	4b42      	ldr	r3, [pc, #264]	@ (8008f7c <xTaskResumeAll+0x118>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d10b      	bne.n	8008e92 <xTaskResumeAll+0x2e>
	__asm volatile
 8008e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e7e:	f383 8811 	msr	BASEPRI, r3
 8008e82:	f3bf 8f6f 	isb	sy
 8008e86:	f3bf 8f4f 	dsb	sy
 8008e8a:	603b      	str	r3, [r7, #0]
}
 8008e8c:	bf00      	nop
 8008e8e:	bf00      	nop
 8008e90:	e7fd      	b.n	8008e8e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008e92:	f000 fe49 	bl	8009b28 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008e96:	4b39      	ldr	r3, [pc, #228]	@ (8008f7c <xTaskResumeAll+0x118>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	3b01      	subs	r3, #1
 8008e9c:	4a37      	ldr	r2, [pc, #220]	@ (8008f7c <xTaskResumeAll+0x118>)
 8008e9e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ea0:	4b36      	ldr	r3, [pc, #216]	@ (8008f7c <xTaskResumeAll+0x118>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d161      	bne.n	8008f6c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008ea8:	4b35      	ldr	r3, [pc, #212]	@ (8008f80 <xTaskResumeAll+0x11c>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d05d      	beq.n	8008f6c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008eb0:	e02e      	b.n	8008f10 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008eb2:	4b34      	ldr	r3, [pc, #208]	@ (8008f84 <xTaskResumeAll+0x120>)
 8008eb4:	68db      	ldr	r3, [r3, #12]
 8008eb6:	68db      	ldr	r3, [r3, #12]
 8008eb8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	3318      	adds	r3, #24
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f7ff fc24 	bl	800870c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	3304      	adds	r3, #4
 8008ec8:	4618      	mov	r0, r3
 8008eca:	f7ff fc1f 	bl	800870c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	409a      	lsls	r2, r3
 8008ed6:	4b2c      	ldr	r3, [pc, #176]	@ (8008f88 <xTaskResumeAll+0x124>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	4313      	orrs	r3, r2
 8008edc:	4a2a      	ldr	r2, [pc, #168]	@ (8008f88 <xTaskResumeAll+0x124>)
 8008ede:	6013      	str	r3, [r2, #0]
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ee4:	4613      	mov	r3, r2
 8008ee6:	009b      	lsls	r3, r3, #2
 8008ee8:	4413      	add	r3, r2
 8008eea:	009b      	lsls	r3, r3, #2
 8008eec:	4a27      	ldr	r2, [pc, #156]	@ (8008f8c <xTaskResumeAll+0x128>)
 8008eee:	441a      	add	r2, r3
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	3304      	adds	r3, #4
 8008ef4:	4619      	mov	r1, r3
 8008ef6:	4610      	mov	r0, r2
 8008ef8:	f7ff fbab 	bl	8008652 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f00:	4b23      	ldr	r3, [pc, #140]	@ (8008f90 <xTaskResumeAll+0x12c>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f06:	429a      	cmp	r2, r3
 8008f08:	d302      	bcc.n	8008f10 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008f0a:	4b22      	ldr	r3, [pc, #136]	@ (8008f94 <xTaskResumeAll+0x130>)
 8008f0c:	2201      	movs	r2, #1
 8008f0e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008f10:	4b1c      	ldr	r3, [pc, #112]	@ (8008f84 <xTaskResumeAll+0x120>)
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d1cc      	bne.n	8008eb2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d001      	beq.n	8008f22 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008f1e:	f000 fa41 	bl	80093a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008f22:	4b1d      	ldr	r3, [pc, #116]	@ (8008f98 <xTaskResumeAll+0x134>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d010      	beq.n	8008f50 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008f2e:	f000 f837 	bl	8008fa0 <xTaskIncrementTick>
 8008f32:	4603      	mov	r3, r0
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d002      	beq.n	8008f3e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008f38:	4b16      	ldr	r3, [pc, #88]	@ (8008f94 <xTaskResumeAll+0x130>)
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	3b01      	subs	r3, #1
 8008f42:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d1f1      	bne.n	8008f2e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008f4a:	4b13      	ldr	r3, [pc, #76]	@ (8008f98 <xTaskResumeAll+0x134>)
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008f50:	4b10      	ldr	r3, [pc, #64]	@ (8008f94 <xTaskResumeAll+0x130>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d009      	beq.n	8008f6c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008f58:	2301      	movs	r3, #1
 8008f5a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008f5c:	4b0f      	ldr	r3, [pc, #60]	@ (8008f9c <xTaskResumeAll+0x138>)
 8008f5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f62:	601a      	str	r2, [r3, #0]
 8008f64:	f3bf 8f4f 	dsb	sy
 8008f68:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008f6c:	f000 fe0e 	bl	8009b8c <vPortExitCritical>

	return xAlreadyYielded;
 8008f70:	68bb      	ldr	r3, [r7, #8]
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3710      	adds	r7, #16
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}
 8008f7a:	bf00      	nop
 8008f7c:	20008b5c 	.word	0x20008b5c
 8008f80:	20008b34 	.word	0x20008b34
 8008f84:	20008af4 	.word	0x20008af4
 8008f88:	20008b3c 	.word	0x20008b3c
 8008f8c:	20008a38 	.word	0x20008a38
 8008f90:	20008a34 	.word	0x20008a34
 8008f94:	20008b48 	.word	0x20008b48
 8008f98:	20008b44 	.word	0x20008b44
 8008f9c:	e000ed04 	.word	0xe000ed04

08008fa0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b086      	sub	sp, #24
 8008fa4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008faa:	4b4f      	ldr	r3, [pc, #316]	@ (80090e8 <xTaskIncrementTick+0x148>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	f040 808f 	bne.w	80090d2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008fb4:	4b4d      	ldr	r3, [pc, #308]	@ (80090ec <xTaskIncrementTick+0x14c>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	3301      	adds	r3, #1
 8008fba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008fbc:	4a4b      	ldr	r2, [pc, #300]	@ (80090ec <xTaskIncrementTick+0x14c>)
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d121      	bne.n	800900c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008fc8:	4b49      	ldr	r3, [pc, #292]	@ (80090f0 <xTaskIncrementTick+0x150>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d00b      	beq.n	8008fea <xTaskIncrementTick+0x4a>
	__asm volatile
 8008fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fd6:	f383 8811 	msr	BASEPRI, r3
 8008fda:	f3bf 8f6f 	isb	sy
 8008fde:	f3bf 8f4f 	dsb	sy
 8008fe2:	603b      	str	r3, [r7, #0]
}
 8008fe4:	bf00      	nop
 8008fe6:	bf00      	nop
 8008fe8:	e7fd      	b.n	8008fe6 <xTaskIncrementTick+0x46>
 8008fea:	4b41      	ldr	r3, [pc, #260]	@ (80090f0 <xTaskIncrementTick+0x150>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	60fb      	str	r3, [r7, #12]
 8008ff0:	4b40      	ldr	r3, [pc, #256]	@ (80090f4 <xTaskIncrementTick+0x154>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	4a3e      	ldr	r2, [pc, #248]	@ (80090f0 <xTaskIncrementTick+0x150>)
 8008ff6:	6013      	str	r3, [r2, #0]
 8008ff8:	4a3e      	ldr	r2, [pc, #248]	@ (80090f4 <xTaskIncrementTick+0x154>)
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	6013      	str	r3, [r2, #0]
 8008ffe:	4b3e      	ldr	r3, [pc, #248]	@ (80090f8 <xTaskIncrementTick+0x158>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	3301      	adds	r3, #1
 8009004:	4a3c      	ldr	r2, [pc, #240]	@ (80090f8 <xTaskIncrementTick+0x158>)
 8009006:	6013      	str	r3, [r2, #0]
 8009008:	f000 f9cc 	bl	80093a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800900c:	4b3b      	ldr	r3, [pc, #236]	@ (80090fc <xTaskIncrementTick+0x15c>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	693a      	ldr	r2, [r7, #16]
 8009012:	429a      	cmp	r2, r3
 8009014:	d348      	bcc.n	80090a8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009016:	4b36      	ldr	r3, [pc, #216]	@ (80090f0 <xTaskIncrementTick+0x150>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d104      	bne.n	800902a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009020:	4b36      	ldr	r3, [pc, #216]	@ (80090fc <xTaskIncrementTick+0x15c>)
 8009022:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009026:	601a      	str	r2, [r3, #0]
					break;
 8009028:	e03e      	b.n	80090a8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800902a:	4b31      	ldr	r3, [pc, #196]	@ (80090f0 <xTaskIncrementTick+0x150>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	68db      	ldr	r3, [r3, #12]
 8009030:	68db      	ldr	r3, [r3, #12]
 8009032:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	685b      	ldr	r3, [r3, #4]
 8009038:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800903a:	693a      	ldr	r2, [r7, #16]
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	429a      	cmp	r2, r3
 8009040:	d203      	bcs.n	800904a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009042:	4a2e      	ldr	r2, [pc, #184]	@ (80090fc <xTaskIncrementTick+0x15c>)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009048:	e02e      	b.n	80090a8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	3304      	adds	r3, #4
 800904e:	4618      	mov	r0, r3
 8009050:	f7ff fb5c 	bl	800870c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009058:	2b00      	cmp	r3, #0
 800905a:	d004      	beq.n	8009066 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	3318      	adds	r3, #24
 8009060:	4618      	mov	r0, r3
 8009062:	f7ff fb53 	bl	800870c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009066:	68bb      	ldr	r3, [r7, #8]
 8009068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800906a:	2201      	movs	r2, #1
 800906c:	409a      	lsls	r2, r3
 800906e:	4b24      	ldr	r3, [pc, #144]	@ (8009100 <xTaskIncrementTick+0x160>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	4313      	orrs	r3, r2
 8009074:	4a22      	ldr	r2, [pc, #136]	@ (8009100 <xTaskIncrementTick+0x160>)
 8009076:	6013      	str	r3, [r2, #0]
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800907c:	4613      	mov	r3, r2
 800907e:	009b      	lsls	r3, r3, #2
 8009080:	4413      	add	r3, r2
 8009082:	009b      	lsls	r3, r3, #2
 8009084:	4a1f      	ldr	r2, [pc, #124]	@ (8009104 <xTaskIncrementTick+0x164>)
 8009086:	441a      	add	r2, r3
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	3304      	adds	r3, #4
 800908c:	4619      	mov	r1, r3
 800908e:	4610      	mov	r0, r2
 8009090:	f7ff fadf 	bl	8008652 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009098:	4b1b      	ldr	r3, [pc, #108]	@ (8009108 <xTaskIncrementTick+0x168>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800909e:	429a      	cmp	r2, r3
 80090a0:	d3b9      	bcc.n	8009016 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80090a2:	2301      	movs	r3, #1
 80090a4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80090a6:	e7b6      	b.n	8009016 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80090a8:	4b17      	ldr	r3, [pc, #92]	@ (8009108 <xTaskIncrementTick+0x168>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090ae:	4915      	ldr	r1, [pc, #84]	@ (8009104 <xTaskIncrementTick+0x164>)
 80090b0:	4613      	mov	r3, r2
 80090b2:	009b      	lsls	r3, r3, #2
 80090b4:	4413      	add	r3, r2
 80090b6:	009b      	lsls	r3, r3, #2
 80090b8:	440b      	add	r3, r1
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	2b01      	cmp	r3, #1
 80090be:	d901      	bls.n	80090c4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80090c0:	2301      	movs	r3, #1
 80090c2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80090c4:	4b11      	ldr	r3, [pc, #68]	@ (800910c <xTaskIncrementTick+0x16c>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d007      	beq.n	80090dc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80090cc:	2301      	movs	r3, #1
 80090ce:	617b      	str	r3, [r7, #20]
 80090d0:	e004      	b.n	80090dc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80090d2:	4b0f      	ldr	r3, [pc, #60]	@ (8009110 <xTaskIncrementTick+0x170>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	3301      	adds	r3, #1
 80090d8:	4a0d      	ldr	r2, [pc, #52]	@ (8009110 <xTaskIncrementTick+0x170>)
 80090da:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80090dc:	697b      	ldr	r3, [r7, #20]
}
 80090de:	4618      	mov	r0, r3
 80090e0:	3718      	adds	r7, #24
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}
 80090e6:	bf00      	nop
 80090e8:	20008b5c 	.word	0x20008b5c
 80090ec:	20008b38 	.word	0x20008b38
 80090f0:	20008aec 	.word	0x20008aec
 80090f4:	20008af0 	.word	0x20008af0
 80090f8:	20008b4c 	.word	0x20008b4c
 80090fc:	20008b54 	.word	0x20008b54
 8009100:	20008b3c 	.word	0x20008b3c
 8009104:	20008a38 	.word	0x20008a38
 8009108:	20008a34 	.word	0x20008a34
 800910c:	20008b48 	.word	0x20008b48
 8009110:	20008b44 	.word	0x20008b44

08009114 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009114:	b480      	push	{r7}
 8009116:	b087      	sub	sp, #28
 8009118:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800911a:	4b2a      	ldr	r3, [pc, #168]	@ (80091c4 <vTaskSwitchContext+0xb0>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d003      	beq.n	800912a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009122:	4b29      	ldr	r3, [pc, #164]	@ (80091c8 <vTaskSwitchContext+0xb4>)
 8009124:	2201      	movs	r2, #1
 8009126:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009128:	e045      	b.n	80091b6 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800912a:	4b27      	ldr	r3, [pc, #156]	@ (80091c8 <vTaskSwitchContext+0xb4>)
 800912c:	2200      	movs	r2, #0
 800912e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009130:	4b26      	ldr	r3, [pc, #152]	@ (80091cc <vTaskSwitchContext+0xb8>)
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	fab3 f383 	clz	r3, r3
 800913c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800913e:	7afb      	ldrb	r3, [r7, #11]
 8009140:	f1c3 031f 	rsb	r3, r3, #31
 8009144:	617b      	str	r3, [r7, #20]
 8009146:	4922      	ldr	r1, [pc, #136]	@ (80091d0 <vTaskSwitchContext+0xbc>)
 8009148:	697a      	ldr	r2, [r7, #20]
 800914a:	4613      	mov	r3, r2
 800914c:	009b      	lsls	r3, r3, #2
 800914e:	4413      	add	r3, r2
 8009150:	009b      	lsls	r3, r3, #2
 8009152:	440b      	add	r3, r1
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d10b      	bne.n	8009172 <vTaskSwitchContext+0x5e>
	__asm volatile
 800915a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800915e:	f383 8811 	msr	BASEPRI, r3
 8009162:	f3bf 8f6f 	isb	sy
 8009166:	f3bf 8f4f 	dsb	sy
 800916a:	607b      	str	r3, [r7, #4]
}
 800916c:	bf00      	nop
 800916e:	bf00      	nop
 8009170:	e7fd      	b.n	800916e <vTaskSwitchContext+0x5a>
 8009172:	697a      	ldr	r2, [r7, #20]
 8009174:	4613      	mov	r3, r2
 8009176:	009b      	lsls	r3, r3, #2
 8009178:	4413      	add	r3, r2
 800917a:	009b      	lsls	r3, r3, #2
 800917c:	4a14      	ldr	r2, [pc, #80]	@ (80091d0 <vTaskSwitchContext+0xbc>)
 800917e:	4413      	add	r3, r2
 8009180:	613b      	str	r3, [r7, #16]
 8009182:	693b      	ldr	r3, [r7, #16]
 8009184:	685b      	ldr	r3, [r3, #4]
 8009186:	685a      	ldr	r2, [r3, #4]
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	605a      	str	r2, [r3, #4]
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	685a      	ldr	r2, [r3, #4]
 8009190:	693b      	ldr	r3, [r7, #16]
 8009192:	3308      	adds	r3, #8
 8009194:	429a      	cmp	r2, r3
 8009196:	d104      	bne.n	80091a2 <vTaskSwitchContext+0x8e>
 8009198:	693b      	ldr	r3, [r7, #16]
 800919a:	685b      	ldr	r3, [r3, #4]
 800919c:	685a      	ldr	r2, [r3, #4]
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	605a      	str	r2, [r3, #4]
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	685b      	ldr	r3, [r3, #4]
 80091a6:	68db      	ldr	r3, [r3, #12]
 80091a8:	4a0a      	ldr	r2, [pc, #40]	@ (80091d4 <vTaskSwitchContext+0xc0>)
 80091aa:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80091ac:	4b09      	ldr	r3, [pc, #36]	@ (80091d4 <vTaskSwitchContext+0xc0>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	334c      	adds	r3, #76	@ 0x4c
 80091b2:	4a09      	ldr	r2, [pc, #36]	@ (80091d8 <vTaskSwitchContext+0xc4>)
 80091b4:	6013      	str	r3, [r2, #0]
}
 80091b6:	bf00      	nop
 80091b8:	371c      	adds	r7, #28
 80091ba:	46bd      	mov	sp, r7
 80091bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c0:	4770      	bx	lr
 80091c2:	bf00      	nop
 80091c4:	20008b5c 	.word	0x20008b5c
 80091c8:	20008b48 	.word	0x20008b48
 80091cc:	20008b3c 	.word	0x20008b3c
 80091d0:	20008a38 	.word	0x20008a38
 80091d4:	20008a34 	.word	0x20008a34
 80091d8:	200000c8 	.word	0x200000c8

080091dc <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b084      	sub	sp, #16
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d10b      	bne.n	8009202 <vTaskSetTimeOutState+0x26>
	__asm volatile
 80091ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091ee:	f383 8811 	msr	BASEPRI, r3
 80091f2:	f3bf 8f6f 	isb	sy
 80091f6:	f3bf 8f4f 	dsb	sy
 80091fa:	60fb      	str	r3, [r7, #12]
}
 80091fc:	bf00      	nop
 80091fe:	bf00      	nop
 8009200:	e7fd      	b.n	80091fe <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8009202:	f000 fc91 	bl	8009b28 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009206:	4b07      	ldr	r3, [pc, #28]	@ (8009224 <vTaskSetTimeOutState+0x48>)
 8009208:	681a      	ldr	r2, [r3, #0]
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800920e:	4b06      	ldr	r3, [pc, #24]	@ (8009228 <vTaskSetTimeOutState+0x4c>)
 8009210:	681a      	ldr	r2, [r3, #0]
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8009216:	f000 fcb9 	bl	8009b8c <vPortExitCritical>
}
 800921a:	bf00      	nop
 800921c:	3710      	adds	r7, #16
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}
 8009222:	bf00      	nop
 8009224:	20008b4c 	.word	0x20008b4c
 8009228:	20008b38 	.word	0x20008b38

0800922c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b082      	sub	sp, #8
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009234:	f000 f852 	bl	80092dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009238:	4b06      	ldr	r3, [pc, #24]	@ (8009254 <prvIdleTask+0x28>)
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	2b01      	cmp	r3, #1
 800923e:	d9f9      	bls.n	8009234 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009240:	4b05      	ldr	r3, [pc, #20]	@ (8009258 <prvIdleTask+0x2c>)
 8009242:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009246:	601a      	str	r2, [r3, #0]
 8009248:	f3bf 8f4f 	dsb	sy
 800924c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009250:	e7f0      	b.n	8009234 <prvIdleTask+0x8>
 8009252:	bf00      	nop
 8009254:	20008a38 	.word	0x20008a38
 8009258:	e000ed04 	.word	0xe000ed04

0800925c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b082      	sub	sp, #8
 8009260:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009262:	2300      	movs	r3, #0
 8009264:	607b      	str	r3, [r7, #4]
 8009266:	e00c      	b.n	8009282 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009268:	687a      	ldr	r2, [r7, #4]
 800926a:	4613      	mov	r3, r2
 800926c:	009b      	lsls	r3, r3, #2
 800926e:	4413      	add	r3, r2
 8009270:	009b      	lsls	r3, r3, #2
 8009272:	4a12      	ldr	r2, [pc, #72]	@ (80092bc <prvInitialiseTaskLists+0x60>)
 8009274:	4413      	add	r3, r2
 8009276:	4618      	mov	r0, r3
 8009278:	f7ff f9be 	bl	80085f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	3301      	adds	r3, #1
 8009280:	607b      	str	r3, [r7, #4]
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2b06      	cmp	r3, #6
 8009286:	d9ef      	bls.n	8009268 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009288:	480d      	ldr	r0, [pc, #52]	@ (80092c0 <prvInitialiseTaskLists+0x64>)
 800928a:	f7ff f9b5 	bl	80085f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800928e:	480d      	ldr	r0, [pc, #52]	@ (80092c4 <prvInitialiseTaskLists+0x68>)
 8009290:	f7ff f9b2 	bl	80085f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009294:	480c      	ldr	r0, [pc, #48]	@ (80092c8 <prvInitialiseTaskLists+0x6c>)
 8009296:	f7ff f9af 	bl	80085f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800929a:	480c      	ldr	r0, [pc, #48]	@ (80092cc <prvInitialiseTaskLists+0x70>)
 800929c:	f7ff f9ac 	bl	80085f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80092a0:	480b      	ldr	r0, [pc, #44]	@ (80092d0 <prvInitialiseTaskLists+0x74>)
 80092a2:	f7ff f9a9 	bl	80085f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80092a6:	4b0b      	ldr	r3, [pc, #44]	@ (80092d4 <prvInitialiseTaskLists+0x78>)
 80092a8:	4a05      	ldr	r2, [pc, #20]	@ (80092c0 <prvInitialiseTaskLists+0x64>)
 80092aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80092ac:	4b0a      	ldr	r3, [pc, #40]	@ (80092d8 <prvInitialiseTaskLists+0x7c>)
 80092ae:	4a05      	ldr	r2, [pc, #20]	@ (80092c4 <prvInitialiseTaskLists+0x68>)
 80092b0:	601a      	str	r2, [r3, #0]
}
 80092b2:	bf00      	nop
 80092b4:	3708      	adds	r7, #8
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}
 80092ba:	bf00      	nop
 80092bc:	20008a38 	.word	0x20008a38
 80092c0:	20008ac4 	.word	0x20008ac4
 80092c4:	20008ad8 	.word	0x20008ad8
 80092c8:	20008af4 	.word	0x20008af4
 80092cc:	20008b08 	.word	0x20008b08
 80092d0:	20008b20 	.word	0x20008b20
 80092d4:	20008aec 	.word	0x20008aec
 80092d8:	20008af0 	.word	0x20008af0

080092dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b082      	sub	sp, #8
 80092e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80092e2:	e019      	b.n	8009318 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80092e4:	f000 fc20 	bl	8009b28 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092e8:	4b10      	ldr	r3, [pc, #64]	@ (800932c <prvCheckTasksWaitingTermination+0x50>)
 80092ea:	68db      	ldr	r3, [r3, #12]
 80092ec:	68db      	ldr	r3, [r3, #12]
 80092ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	3304      	adds	r3, #4
 80092f4:	4618      	mov	r0, r3
 80092f6:	f7ff fa09 	bl	800870c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80092fa:	4b0d      	ldr	r3, [pc, #52]	@ (8009330 <prvCheckTasksWaitingTermination+0x54>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	3b01      	subs	r3, #1
 8009300:	4a0b      	ldr	r2, [pc, #44]	@ (8009330 <prvCheckTasksWaitingTermination+0x54>)
 8009302:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009304:	4b0b      	ldr	r3, [pc, #44]	@ (8009334 <prvCheckTasksWaitingTermination+0x58>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	3b01      	subs	r3, #1
 800930a:	4a0a      	ldr	r2, [pc, #40]	@ (8009334 <prvCheckTasksWaitingTermination+0x58>)
 800930c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800930e:	f000 fc3d 	bl	8009b8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f000 f810 	bl	8009338 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009318:	4b06      	ldr	r3, [pc, #24]	@ (8009334 <prvCheckTasksWaitingTermination+0x58>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d1e1      	bne.n	80092e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009320:	bf00      	nop
 8009322:	bf00      	nop
 8009324:	3708      	adds	r7, #8
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}
 800932a:	bf00      	nop
 800932c:	20008b08 	.word	0x20008b08
 8009330:	20008b34 	.word	0x20008b34
 8009334:	20008b1c 	.word	0x20008b1c

08009338 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009338:	b580      	push	{r7, lr}
 800933a:	b084      	sub	sp, #16
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	334c      	adds	r3, #76	@ 0x4c
 8009344:	4618      	mov	r0, r3
 8009346:	f00e fd99 	bl	8017e7c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8009350:	2b00      	cmp	r3, #0
 8009352:	d108      	bne.n	8009366 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009358:	4618      	mov	r0, r3
 800935a:	f000 fdd5 	bl	8009f08 <vPortFree>
				vPortFree( pxTCB );
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f000 fdd2 	bl	8009f08 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009364:	e019      	b.n	800939a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800936c:	2b01      	cmp	r3, #1
 800936e:	d103      	bne.n	8009378 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f000 fdc9 	bl	8009f08 <vPortFree>
	}
 8009376:	e010      	b.n	800939a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800937e:	2b02      	cmp	r3, #2
 8009380:	d00b      	beq.n	800939a <prvDeleteTCB+0x62>
	__asm volatile
 8009382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009386:	f383 8811 	msr	BASEPRI, r3
 800938a:	f3bf 8f6f 	isb	sy
 800938e:	f3bf 8f4f 	dsb	sy
 8009392:	60fb      	str	r3, [r7, #12]
}
 8009394:	bf00      	nop
 8009396:	bf00      	nop
 8009398:	e7fd      	b.n	8009396 <prvDeleteTCB+0x5e>
	}
 800939a:	bf00      	nop
 800939c:	3710      	adds	r7, #16
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}
	...

080093a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80093a4:	b480      	push	{r7}
 80093a6:	b083      	sub	sp, #12
 80093a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80093aa:	4b0c      	ldr	r3, [pc, #48]	@ (80093dc <prvResetNextTaskUnblockTime+0x38>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d104      	bne.n	80093be <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80093b4:	4b0a      	ldr	r3, [pc, #40]	@ (80093e0 <prvResetNextTaskUnblockTime+0x3c>)
 80093b6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80093ba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80093bc:	e008      	b.n	80093d0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093be:	4b07      	ldr	r3, [pc, #28]	@ (80093dc <prvResetNextTaskUnblockTime+0x38>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	68db      	ldr	r3, [r3, #12]
 80093c4:	68db      	ldr	r3, [r3, #12]
 80093c6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	685b      	ldr	r3, [r3, #4]
 80093cc:	4a04      	ldr	r2, [pc, #16]	@ (80093e0 <prvResetNextTaskUnblockTime+0x3c>)
 80093ce:	6013      	str	r3, [r2, #0]
}
 80093d0:	bf00      	nop
 80093d2:	370c      	adds	r7, #12
 80093d4:	46bd      	mov	sp, r7
 80093d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093da:	4770      	bx	lr
 80093dc:	20008aec 	.word	0x20008aec
 80093e0:	20008b54 	.word	0x20008b54

080093e4 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b086      	sub	sp, #24
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	60f8      	str	r0, [r7, #12]
 80093ec:	60b9      	str	r1, [r7, #8]
 80093ee:	607a      	str	r2, [r7, #4]
 80093f0:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80093f2:	f000 fb99 	bl	8009b28 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80093f6:	4b29      	ldr	r3, [pc, #164]	@ (800949c <xTaskNotifyWait+0xb8>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 80093fe:	b2db      	uxtb	r3, r3
 8009400:	2b02      	cmp	r3, #2
 8009402:	d01c      	beq.n	800943e <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8009404:	4b25      	ldr	r3, [pc, #148]	@ (800949c <xTaskNotifyWait+0xb8>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 800940c:	68fa      	ldr	r2, [r7, #12]
 800940e:	43d2      	mvns	r2, r2
 8009410:	400a      	ands	r2, r1
 8009412:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8009416:	4b21      	ldr	r3, [pc, #132]	@ (800949c <xTaskNotifyWait+0xb8>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	2201      	movs	r2, #1
 800941c:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d00b      	beq.n	800943e <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009426:	2101      	movs	r1, #1
 8009428:	6838      	ldr	r0, [r7, #0]
 800942a:	f000 f9e3 	bl	80097f4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800942e:	4b1c      	ldr	r3, [pc, #112]	@ (80094a0 <xTaskNotifyWait+0xbc>)
 8009430:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009434:	601a      	str	r2, [r3, #0]
 8009436:	f3bf 8f4f 	dsb	sy
 800943a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800943e:	f000 fba5 	bl	8009b8c <vPortExitCritical>

		taskENTER_CRITICAL();
 8009442:	f000 fb71 	bl	8009b28 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d005      	beq.n	8009458 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800944c:	4b13      	ldr	r3, [pc, #76]	@ (800949c <xTaskNotifyWait+0xb8>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009458:	4b10      	ldr	r3, [pc, #64]	@ (800949c <xTaskNotifyWait+0xb8>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8009460:	b2db      	uxtb	r3, r3
 8009462:	2b02      	cmp	r3, #2
 8009464:	d002      	beq.n	800946c <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8009466:	2300      	movs	r3, #0
 8009468:	617b      	str	r3, [r7, #20]
 800946a:	e00a      	b.n	8009482 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800946c:	4b0b      	ldr	r3, [pc, #44]	@ (800949c <xTaskNotifyWait+0xb8>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 8009474:	68ba      	ldr	r2, [r7, #8]
 8009476:	43d2      	mvns	r2, r2
 8009478:	400a      	ands	r2, r1
 800947a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
				xReturn = pdTRUE;
 800947e:	2301      	movs	r3, #1
 8009480:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009482:	4b06      	ldr	r3, [pc, #24]	@ (800949c <xTaskNotifyWait+0xb8>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	2200      	movs	r2, #0
 8009488:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
		}
		taskEXIT_CRITICAL();
 800948c:	f000 fb7e 	bl	8009b8c <vPortExitCritical>

		return xReturn;
 8009490:	697b      	ldr	r3, [r7, #20]
	}
 8009492:	4618      	mov	r0, r3
 8009494:	3718      	adds	r7, #24
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}
 800949a:	bf00      	nop
 800949c:	20008a34 	.word	0x20008a34
 80094a0:	e000ed04 	.word	0xe000ed04

080094a4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b08a      	sub	sp, #40	@ 0x28
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	60f8      	str	r0, [r7, #12]
 80094ac:	60b9      	str	r1, [r7, #8]
 80094ae:	603b      	str	r3, [r7, #0]
 80094b0:	4613      	mov	r3, r2
 80094b2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80094b4:	2301      	movs	r3, #1
 80094b6:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d10b      	bne.n	80094d6 <xTaskGenericNotify+0x32>
	__asm volatile
 80094be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094c2:	f383 8811 	msr	BASEPRI, r3
 80094c6:	f3bf 8f6f 	isb	sy
 80094ca:	f3bf 8f4f 	dsb	sy
 80094ce:	61bb      	str	r3, [r7, #24]
}
 80094d0:	bf00      	nop
 80094d2:	bf00      	nop
 80094d4:	e7fd      	b.n	80094d2 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80094da:	f000 fb25 	bl	8009b28 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d004      	beq.n	80094ee <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80094e4:	6a3b      	ldr	r3, [r7, #32]
 80094e6:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80094ee:	6a3b      	ldr	r3, [r7, #32]
 80094f0:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 80094f4:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80094f6:	6a3b      	ldr	r3, [r7, #32]
 80094f8:	2202      	movs	r2, #2
 80094fa:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

			switch( eAction )
 80094fe:	79fb      	ldrb	r3, [r7, #7]
 8009500:	2b04      	cmp	r3, #4
 8009502:	d82e      	bhi.n	8009562 <xTaskGenericNotify+0xbe>
 8009504:	a201      	add	r2, pc, #4	@ (adr r2, 800950c <xTaskGenericNotify+0x68>)
 8009506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800950a:	bf00      	nop
 800950c:	08009587 	.word	0x08009587
 8009510:	08009521 	.word	0x08009521
 8009514:	08009533 	.word	0x08009533
 8009518:	08009543 	.word	0x08009543
 800951c:	0800954d 	.word	0x0800954d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8009520:	6a3b      	ldr	r3, [r7, #32]
 8009522:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	431a      	orrs	r2, r3
 800952a:	6a3b      	ldr	r3, [r7, #32]
 800952c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8009530:	e02c      	b.n	800958c <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8009532:	6a3b      	ldr	r3, [r7, #32]
 8009534:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009538:	1c5a      	adds	r2, r3, #1
 800953a:	6a3b      	ldr	r3, [r7, #32]
 800953c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8009540:	e024      	b.n	800958c <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8009542:	6a3b      	ldr	r3, [r7, #32]
 8009544:	68ba      	ldr	r2, [r7, #8]
 8009546:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 800954a:	e01f      	b.n	800958c <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800954c:	7ffb      	ldrb	r3, [r7, #31]
 800954e:	2b02      	cmp	r3, #2
 8009550:	d004      	beq.n	800955c <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8009552:	6a3b      	ldr	r3, [r7, #32]
 8009554:	68ba      	ldr	r2, [r7, #8]
 8009556:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800955a:	e017      	b.n	800958c <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 800955c:	2300      	movs	r3, #0
 800955e:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8009560:	e014      	b.n	800958c <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8009562:	6a3b      	ldr	r3, [r7, #32]
 8009564:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009568:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800956c:	d00d      	beq.n	800958a <xTaskGenericNotify+0xe6>
	__asm volatile
 800956e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009572:	f383 8811 	msr	BASEPRI, r3
 8009576:	f3bf 8f6f 	isb	sy
 800957a:	f3bf 8f4f 	dsb	sy
 800957e:	617b      	str	r3, [r7, #20]
}
 8009580:	bf00      	nop
 8009582:	bf00      	nop
 8009584:	e7fd      	b.n	8009582 <xTaskGenericNotify+0xde>
					break;
 8009586:	bf00      	nop
 8009588:	e000      	b.n	800958c <xTaskGenericNotify+0xe8>

					break;
 800958a:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800958c:	7ffb      	ldrb	r3, [r7, #31]
 800958e:	2b01      	cmp	r3, #1
 8009590:	d13a      	bne.n	8009608 <xTaskGenericNotify+0x164>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009592:	6a3b      	ldr	r3, [r7, #32]
 8009594:	3304      	adds	r3, #4
 8009596:	4618      	mov	r0, r3
 8009598:	f7ff f8b8 	bl	800870c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800959c:	6a3b      	ldr	r3, [r7, #32]
 800959e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095a0:	2201      	movs	r2, #1
 80095a2:	409a      	lsls	r2, r3
 80095a4:	4b1c      	ldr	r3, [pc, #112]	@ (8009618 <xTaskGenericNotify+0x174>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	4313      	orrs	r3, r2
 80095aa:	4a1b      	ldr	r2, [pc, #108]	@ (8009618 <xTaskGenericNotify+0x174>)
 80095ac:	6013      	str	r3, [r2, #0]
 80095ae:	6a3b      	ldr	r3, [r7, #32]
 80095b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095b2:	4613      	mov	r3, r2
 80095b4:	009b      	lsls	r3, r3, #2
 80095b6:	4413      	add	r3, r2
 80095b8:	009b      	lsls	r3, r3, #2
 80095ba:	4a18      	ldr	r2, [pc, #96]	@ (800961c <xTaskGenericNotify+0x178>)
 80095bc:	441a      	add	r2, r3
 80095be:	6a3b      	ldr	r3, [r7, #32]
 80095c0:	3304      	adds	r3, #4
 80095c2:	4619      	mov	r1, r3
 80095c4:	4610      	mov	r0, r2
 80095c6:	f7ff f844 	bl	8008652 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80095ca:	6a3b      	ldr	r3, [r7, #32]
 80095cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d00b      	beq.n	80095ea <xTaskGenericNotify+0x146>
	__asm volatile
 80095d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095d6:	f383 8811 	msr	BASEPRI, r3
 80095da:	f3bf 8f6f 	isb	sy
 80095de:	f3bf 8f4f 	dsb	sy
 80095e2:	613b      	str	r3, [r7, #16]
}
 80095e4:	bf00      	nop
 80095e6:	bf00      	nop
 80095e8:	e7fd      	b.n	80095e6 <xTaskGenericNotify+0x142>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80095ea:	6a3b      	ldr	r3, [r7, #32]
 80095ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095ee:	4b0c      	ldr	r3, [pc, #48]	@ (8009620 <xTaskGenericNotify+0x17c>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095f4:	429a      	cmp	r2, r3
 80095f6:	d907      	bls.n	8009608 <xTaskGenericNotify+0x164>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80095f8:	4b0a      	ldr	r3, [pc, #40]	@ (8009624 <xTaskGenericNotify+0x180>)
 80095fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80095fe:	601a      	str	r2, [r3, #0]
 8009600:	f3bf 8f4f 	dsb	sy
 8009604:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009608:	f000 fac0 	bl	8009b8c <vPortExitCritical>

		return xReturn;
 800960c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800960e:	4618      	mov	r0, r3
 8009610:	3728      	adds	r7, #40	@ 0x28
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}
 8009616:	bf00      	nop
 8009618:	20008b3c 	.word	0x20008b3c
 800961c:	20008a38 	.word	0x20008a38
 8009620:	20008a34 	.word	0x20008a34
 8009624:	e000ed04 	.word	0xe000ed04

08009628 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8009628:	b580      	push	{r7, lr}
 800962a:	b08e      	sub	sp, #56	@ 0x38
 800962c:	af00      	add	r7, sp, #0
 800962e:	60f8      	str	r0, [r7, #12]
 8009630:	60b9      	str	r1, [r7, #8]
 8009632:	603b      	str	r3, [r7, #0]
 8009634:	4613      	mov	r3, r2
 8009636:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8009638:	2301      	movs	r3, #1
 800963a:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d10b      	bne.n	800965a <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 8009642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009646:	f383 8811 	msr	BASEPRI, r3
 800964a:	f3bf 8f6f 	isb	sy
 800964e:	f3bf 8f4f 	dsb	sy
 8009652:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009654:	bf00      	nop
 8009656:	bf00      	nop
 8009658:	e7fd      	b.n	8009656 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800965a:	f000 fb45 	bl	8009ce8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	633b      	str	r3, [r7, #48]	@ 0x30

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009662:	f3ef 8211 	mrs	r2, BASEPRI
 8009666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800966a:	f383 8811 	msr	BASEPRI, r3
 800966e:	f3bf 8f6f 	isb	sy
 8009672:	f3bf 8f4f 	dsb	sy
 8009676:	623a      	str	r2, [r7, #32]
 8009678:	61fb      	str	r3, [r7, #28]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800967a:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800967c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d004      	beq.n	800968e <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009686:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800968e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009690:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8009694:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800969a:	2202      	movs	r2, #2
 800969c:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

			switch( eAction )
 80096a0:	79fb      	ldrb	r3, [r7, #7]
 80096a2:	2b04      	cmp	r3, #4
 80096a4:	d82e      	bhi.n	8009704 <xTaskGenericNotifyFromISR+0xdc>
 80096a6:	a201      	add	r2, pc, #4	@ (adr r2, 80096ac <xTaskGenericNotifyFromISR+0x84>)
 80096a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096ac:	08009729 	.word	0x08009729
 80096b0:	080096c1 	.word	0x080096c1
 80096b4:	080096d3 	.word	0x080096d3
 80096b8:	080096e3 	.word	0x080096e3
 80096bc:	080096ed 	.word	0x080096ed
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80096c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096c2:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80096c6:	68bb      	ldr	r3, [r7, #8]
 80096c8:	431a      	orrs	r2, r3
 80096ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096cc:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 80096d0:	e02d      	b.n	800972e <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80096d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80096d8:	1c5a      	adds	r2, r3, #1
 80096da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096dc:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 80096e0:	e025      	b.n	800972e <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80096e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096e4:	68ba      	ldr	r2, [r7, #8]
 80096e6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 80096ea:	e020      	b.n	800972e <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80096ec:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80096f0:	2b02      	cmp	r3, #2
 80096f2:	d004      	beq.n	80096fe <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80096f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096f6:	68ba      	ldr	r2, [r7, #8]
 80096f8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80096fc:	e017      	b.n	800972e <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 80096fe:	2300      	movs	r3, #0
 8009700:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 8009702:	e014      	b.n	800972e <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8009704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009706:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800970a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800970e:	d00d      	beq.n	800972c <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 8009710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009714:	f383 8811 	msr	BASEPRI, r3
 8009718:	f3bf 8f6f 	isb	sy
 800971c:	f3bf 8f4f 	dsb	sy
 8009720:	61bb      	str	r3, [r7, #24]
}
 8009722:	bf00      	nop
 8009724:	bf00      	nop
 8009726:	e7fd      	b.n	8009724 <xTaskGenericNotifyFromISR+0xfc>
					break;
 8009728:	bf00      	nop
 800972a:	e000      	b.n	800972e <xTaskGenericNotifyFromISR+0x106>
					break;
 800972c:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800972e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009732:	2b01      	cmp	r3, #1
 8009734:	d146      	bne.n	80097c4 <xTaskGenericNotifyFromISR+0x19c>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800973a:	2b00      	cmp	r3, #0
 800973c:	d00b      	beq.n	8009756 <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 800973e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009742:	f383 8811 	msr	BASEPRI, r3
 8009746:	f3bf 8f6f 	isb	sy
 800974a:	f3bf 8f4f 	dsb	sy
 800974e:	617b      	str	r3, [r7, #20]
}
 8009750:	bf00      	nop
 8009752:	bf00      	nop
 8009754:	e7fd      	b.n	8009752 <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009756:	4b21      	ldr	r3, [pc, #132]	@ (80097dc <xTaskGenericNotifyFromISR+0x1b4>)
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d11c      	bne.n	8009798 <xTaskGenericNotifyFromISR+0x170>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800975e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009760:	3304      	adds	r3, #4
 8009762:	4618      	mov	r0, r3
 8009764:	f7fe ffd2 	bl	800870c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800976a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800976c:	2201      	movs	r2, #1
 800976e:	409a      	lsls	r2, r3
 8009770:	4b1b      	ldr	r3, [pc, #108]	@ (80097e0 <xTaskGenericNotifyFromISR+0x1b8>)
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	4313      	orrs	r3, r2
 8009776:	4a1a      	ldr	r2, [pc, #104]	@ (80097e0 <xTaskGenericNotifyFromISR+0x1b8>)
 8009778:	6013      	str	r3, [r2, #0]
 800977a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800977c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800977e:	4613      	mov	r3, r2
 8009780:	009b      	lsls	r3, r3, #2
 8009782:	4413      	add	r3, r2
 8009784:	009b      	lsls	r3, r3, #2
 8009786:	4a17      	ldr	r2, [pc, #92]	@ (80097e4 <xTaskGenericNotifyFromISR+0x1bc>)
 8009788:	441a      	add	r2, r3
 800978a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800978c:	3304      	adds	r3, #4
 800978e:	4619      	mov	r1, r3
 8009790:	4610      	mov	r0, r2
 8009792:	f7fe ff5e 	bl	8008652 <vListInsertEnd>
 8009796:	e005      	b.n	80097a4 <xTaskGenericNotifyFromISR+0x17c>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8009798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800979a:	3318      	adds	r3, #24
 800979c:	4619      	mov	r1, r3
 800979e:	4812      	ldr	r0, [pc, #72]	@ (80097e8 <xTaskGenericNotifyFromISR+0x1c0>)
 80097a0:	f7fe ff57 	bl	8008652 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80097a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097a8:	4b10      	ldr	r3, [pc, #64]	@ (80097ec <xTaskGenericNotifyFromISR+0x1c4>)
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097ae:	429a      	cmp	r2, r3
 80097b0:	d908      	bls.n	80097c4 <xTaskGenericNotifyFromISR+0x19c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80097b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d002      	beq.n	80097be <xTaskGenericNotifyFromISR+0x196>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80097b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80097ba:	2201      	movs	r2, #1
 80097bc:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80097be:	4b0c      	ldr	r3, [pc, #48]	@ (80097f0 <xTaskGenericNotifyFromISR+0x1c8>)
 80097c0:	2201      	movs	r2, #1
 80097c2:	601a      	str	r2, [r3, #0]
 80097c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097c6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80097c8:	693b      	ldr	r3, [r7, #16]
 80097ca:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80097ce:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80097d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 80097d2:	4618      	mov	r0, r3
 80097d4:	3738      	adds	r7, #56	@ 0x38
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}
 80097da:	bf00      	nop
 80097dc:	20008b5c 	.word	0x20008b5c
 80097e0:	20008b3c 	.word	0x20008b3c
 80097e4:	20008a38 	.word	0x20008a38
 80097e8:	20008af4 	.word	0x20008af4
 80097ec:	20008a34 	.word	0x20008a34
 80097f0:	20008b48 	.word	0x20008b48

080097f4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b084      	sub	sp, #16
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
 80097fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80097fe:	4b29      	ldr	r3, [pc, #164]	@ (80098a4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009804:	4b28      	ldr	r3, [pc, #160]	@ (80098a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	3304      	adds	r3, #4
 800980a:	4618      	mov	r0, r3
 800980c:	f7fe ff7e 	bl	800870c <uxListRemove>
 8009810:	4603      	mov	r3, r0
 8009812:	2b00      	cmp	r3, #0
 8009814:	d10b      	bne.n	800982e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009816:	4b24      	ldr	r3, [pc, #144]	@ (80098a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800981c:	2201      	movs	r2, #1
 800981e:	fa02 f303 	lsl.w	r3, r2, r3
 8009822:	43da      	mvns	r2, r3
 8009824:	4b21      	ldr	r3, [pc, #132]	@ (80098ac <prvAddCurrentTaskToDelayedList+0xb8>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4013      	ands	r3, r2
 800982a:	4a20      	ldr	r2, [pc, #128]	@ (80098ac <prvAddCurrentTaskToDelayedList+0xb8>)
 800982c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009834:	d10a      	bne.n	800984c <prvAddCurrentTaskToDelayedList+0x58>
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d007      	beq.n	800984c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800983c:	4b1a      	ldr	r3, [pc, #104]	@ (80098a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	3304      	adds	r3, #4
 8009842:	4619      	mov	r1, r3
 8009844:	481a      	ldr	r0, [pc, #104]	@ (80098b0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009846:	f7fe ff04 	bl	8008652 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800984a:	e026      	b.n	800989a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800984c:	68fa      	ldr	r2, [r7, #12]
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	4413      	add	r3, r2
 8009852:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009854:	4b14      	ldr	r3, [pc, #80]	@ (80098a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	68ba      	ldr	r2, [r7, #8]
 800985a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800985c:	68ba      	ldr	r2, [r7, #8]
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	429a      	cmp	r2, r3
 8009862:	d209      	bcs.n	8009878 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009864:	4b13      	ldr	r3, [pc, #76]	@ (80098b4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009866:	681a      	ldr	r2, [r3, #0]
 8009868:	4b0f      	ldr	r3, [pc, #60]	@ (80098a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	3304      	adds	r3, #4
 800986e:	4619      	mov	r1, r3
 8009870:	4610      	mov	r0, r2
 8009872:	f7fe ff12 	bl	800869a <vListInsert>
}
 8009876:	e010      	b.n	800989a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009878:	4b0f      	ldr	r3, [pc, #60]	@ (80098b8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800987a:	681a      	ldr	r2, [r3, #0]
 800987c:	4b0a      	ldr	r3, [pc, #40]	@ (80098a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	3304      	adds	r3, #4
 8009882:	4619      	mov	r1, r3
 8009884:	4610      	mov	r0, r2
 8009886:	f7fe ff08 	bl	800869a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800988a:	4b0c      	ldr	r3, [pc, #48]	@ (80098bc <prvAddCurrentTaskToDelayedList+0xc8>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	68ba      	ldr	r2, [r7, #8]
 8009890:	429a      	cmp	r2, r3
 8009892:	d202      	bcs.n	800989a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009894:	4a09      	ldr	r2, [pc, #36]	@ (80098bc <prvAddCurrentTaskToDelayedList+0xc8>)
 8009896:	68bb      	ldr	r3, [r7, #8]
 8009898:	6013      	str	r3, [r2, #0]
}
 800989a:	bf00      	nop
 800989c:	3710      	adds	r7, #16
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}
 80098a2:	bf00      	nop
 80098a4:	20008b38 	.word	0x20008b38
 80098a8:	20008a34 	.word	0x20008a34
 80098ac:	20008b3c 	.word	0x20008b3c
 80098b0:	20008b20 	.word	0x20008b20
 80098b4:	20008af0 	.word	0x20008af0
 80098b8:	20008aec 	.word	0x20008aec
 80098bc:	20008b54 	.word	0x20008b54

080098c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80098c0:	b480      	push	{r7}
 80098c2:	b085      	sub	sp, #20
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	60f8      	str	r0, [r7, #12]
 80098c8:	60b9      	str	r1, [r7, #8]
 80098ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	3b04      	subs	r3, #4
 80098d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80098d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	3b04      	subs	r3, #4
 80098de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80098e0:	68bb      	ldr	r3, [r7, #8]
 80098e2:	f023 0201 	bic.w	r2, r3, #1
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	3b04      	subs	r3, #4
 80098ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80098f0:	4a0c      	ldr	r2, [pc, #48]	@ (8009924 <pxPortInitialiseStack+0x64>)
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	3b14      	subs	r3, #20
 80098fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80098fc:	687a      	ldr	r2, [r7, #4]
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	3b04      	subs	r3, #4
 8009906:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	f06f 0202 	mvn.w	r2, #2
 800990e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	3b20      	subs	r3, #32
 8009914:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009916:	68fb      	ldr	r3, [r7, #12]
}
 8009918:	4618      	mov	r0, r3
 800991a:	3714      	adds	r7, #20
 800991c:	46bd      	mov	sp, r7
 800991e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009922:	4770      	bx	lr
 8009924:	08009929 	.word	0x08009929

08009928 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009928:	b480      	push	{r7}
 800992a:	b085      	sub	sp, #20
 800992c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800992e:	2300      	movs	r3, #0
 8009930:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009932:	4b13      	ldr	r3, [pc, #76]	@ (8009980 <prvTaskExitError+0x58>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800993a:	d00b      	beq.n	8009954 <prvTaskExitError+0x2c>
	__asm volatile
 800993c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009940:	f383 8811 	msr	BASEPRI, r3
 8009944:	f3bf 8f6f 	isb	sy
 8009948:	f3bf 8f4f 	dsb	sy
 800994c:	60fb      	str	r3, [r7, #12]
}
 800994e:	bf00      	nop
 8009950:	bf00      	nop
 8009952:	e7fd      	b.n	8009950 <prvTaskExitError+0x28>
	__asm volatile
 8009954:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009958:	f383 8811 	msr	BASEPRI, r3
 800995c:	f3bf 8f6f 	isb	sy
 8009960:	f3bf 8f4f 	dsb	sy
 8009964:	60bb      	str	r3, [r7, #8]
}
 8009966:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009968:	bf00      	nop
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d0fc      	beq.n	800996a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009970:	bf00      	nop
 8009972:	bf00      	nop
 8009974:	3714      	adds	r7, #20
 8009976:	46bd      	mov	sp, r7
 8009978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997c:	4770      	bx	lr
 800997e:	bf00      	nop
 8009980:	20000018 	.word	0x20000018
	...

08009990 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009990:	4b07      	ldr	r3, [pc, #28]	@ (80099b0 <pxCurrentTCBConst2>)
 8009992:	6819      	ldr	r1, [r3, #0]
 8009994:	6808      	ldr	r0, [r1, #0]
 8009996:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800999a:	f380 8809 	msr	PSP, r0
 800999e:	f3bf 8f6f 	isb	sy
 80099a2:	f04f 0000 	mov.w	r0, #0
 80099a6:	f380 8811 	msr	BASEPRI, r0
 80099aa:	4770      	bx	lr
 80099ac:	f3af 8000 	nop.w

080099b0 <pxCurrentTCBConst2>:
 80099b0:	20008a34 	.word	0x20008a34
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80099b4:	bf00      	nop
 80099b6:	bf00      	nop

080099b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80099b8:	4808      	ldr	r0, [pc, #32]	@ (80099dc <prvPortStartFirstTask+0x24>)
 80099ba:	6800      	ldr	r0, [r0, #0]
 80099bc:	6800      	ldr	r0, [r0, #0]
 80099be:	f380 8808 	msr	MSP, r0
 80099c2:	f04f 0000 	mov.w	r0, #0
 80099c6:	f380 8814 	msr	CONTROL, r0
 80099ca:	b662      	cpsie	i
 80099cc:	b661      	cpsie	f
 80099ce:	f3bf 8f4f 	dsb	sy
 80099d2:	f3bf 8f6f 	isb	sy
 80099d6:	df00      	svc	0
 80099d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80099da:	bf00      	nop
 80099dc:	e000ed08 	.word	0xe000ed08

080099e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b086      	sub	sp, #24
 80099e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80099e6:	4b47      	ldr	r3, [pc, #284]	@ (8009b04 <xPortStartScheduler+0x124>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	4a47      	ldr	r2, [pc, #284]	@ (8009b08 <xPortStartScheduler+0x128>)
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d10b      	bne.n	8009a08 <xPortStartScheduler+0x28>
	__asm volatile
 80099f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099f4:	f383 8811 	msr	BASEPRI, r3
 80099f8:	f3bf 8f6f 	isb	sy
 80099fc:	f3bf 8f4f 	dsb	sy
 8009a00:	613b      	str	r3, [r7, #16]
}
 8009a02:	bf00      	nop
 8009a04:	bf00      	nop
 8009a06:	e7fd      	b.n	8009a04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009a08:	4b3e      	ldr	r3, [pc, #248]	@ (8009b04 <xPortStartScheduler+0x124>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	4a3f      	ldr	r2, [pc, #252]	@ (8009b0c <xPortStartScheduler+0x12c>)
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	d10b      	bne.n	8009a2a <xPortStartScheduler+0x4a>
	__asm volatile
 8009a12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a16:	f383 8811 	msr	BASEPRI, r3
 8009a1a:	f3bf 8f6f 	isb	sy
 8009a1e:	f3bf 8f4f 	dsb	sy
 8009a22:	60fb      	str	r3, [r7, #12]
}
 8009a24:	bf00      	nop
 8009a26:	bf00      	nop
 8009a28:	e7fd      	b.n	8009a26 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009a2a:	4b39      	ldr	r3, [pc, #228]	@ (8009b10 <xPortStartScheduler+0x130>)
 8009a2c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	781b      	ldrb	r3, [r3, #0]
 8009a32:	b2db      	uxtb	r3, r3
 8009a34:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009a36:	697b      	ldr	r3, [r7, #20]
 8009a38:	22ff      	movs	r2, #255	@ 0xff
 8009a3a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009a3c:	697b      	ldr	r3, [r7, #20]
 8009a3e:	781b      	ldrb	r3, [r3, #0]
 8009a40:	b2db      	uxtb	r3, r3
 8009a42:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009a44:	78fb      	ldrb	r3, [r7, #3]
 8009a46:	b2db      	uxtb	r3, r3
 8009a48:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009a4c:	b2da      	uxtb	r2, r3
 8009a4e:	4b31      	ldr	r3, [pc, #196]	@ (8009b14 <xPortStartScheduler+0x134>)
 8009a50:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009a52:	4b31      	ldr	r3, [pc, #196]	@ (8009b18 <xPortStartScheduler+0x138>)
 8009a54:	2207      	movs	r2, #7
 8009a56:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009a58:	e009      	b.n	8009a6e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8009a5a:	4b2f      	ldr	r3, [pc, #188]	@ (8009b18 <xPortStartScheduler+0x138>)
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	3b01      	subs	r3, #1
 8009a60:	4a2d      	ldr	r2, [pc, #180]	@ (8009b18 <xPortStartScheduler+0x138>)
 8009a62:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009a64:	78fb      	ldrb	r3, [r7, #3]
 8009a66:	b2db      	uxtb	r3, r3
 8009a68:	005b      	lsls	r3, r3, #1
 8009a6a:	b2db      	uxtb	r3, r3
 8009a6c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009a6e:	78fb      	ldrb	r3, [r7, #3]
 8009a70:	b2db      	uxtb	r3, r3
 8009a72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a76:	2b80      	cmp	r3, #128	@ 0x80
 8009a78:	d0ef      	beq.n	8009a5a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009a7a:	4b27      	ldr	r3, [pc, #156]	@ (8009b18 <xPortStartScheduler+0x138>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	f1c3 0307 	rsb	r3, r3, #7
 8009a82:	2b04      	cmp	r3, #4
 8009a84:	d00b      	beq.n	8009a9e <xPortStartScheduler+0xbe>
	__asm volatile
 8009a86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a8a:	f383 8811 	msr	BASEPRI, r3
 8009a8e:	f3bf 8f6f 	isb	sy
 8009a92:	f3bf 8f4f 	dsb	sy
 8009a96:	60bb      	str	r3, [r7, #8]
}
 8009a98:	bf00      	nop
 8009a9a:	bf00      	nop
 8009a9c:	e7fd      	b.n	8009a9a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009a9e:	4b1e      	ldr	r3, [pc, #120]	@ (8009b18 <xPortStartScheduler+0x138>)
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	021b      	lsls	r3, r3, #8
 8009aa4:	4a1c      	ldr	r2, [pc, #112]	@ (8009b18 <xPortStartScheduler+0x138>)
 8009aa6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009aa8:	4b1b      	ldr	r3, [pc, #108]	@ (8009b18 <xPortStartScheduler+0x138>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009ab0:	4a19      	ldr	r2, [pc, #100]	@ (8009b18 <xPortStartScheduler+0x138>)
 8009ab2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	b2da      	uxtb	r2, r3
 8009ab8:	697b      	ldr	r3, [r7, #20]
 8009aba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009abc:	4b17      	ldr	r3, [pc, #92]	@ (8009b1c <xPortStartScheduler+0x13c>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	4a16      	ldr	r2, [pc, #88]	@ (8009b1c <xPortStartScheduler+0x13c>)
 8009ac2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009ac6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009ac8:	4b14      	ldr	r3, [pc, #80]	@ (8009b1c <xPortStartScheduler+0x13c>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	4a13      	ldr	r2, [pc, #76]	@ (8009b1c <xPortStartScheduler+0x13c>)
 8009ace:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009ad2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009ad4:	f000 f8da 	bl	8009c8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009ad8:	4b11      	ldr	r3, [pc, #68]	@ (8009b20 <xPortStartScheduler+0x140>)
 8009ada:	2200      	movs	r2, #0
 8009adc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009ade:	f000 f8f9 	bl	8009cd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009ae2:	4b10      	ldr	r3, [pc, #64]	@ (8009b24 <xPortStartScheduler+0x144>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	4a0f      	ldr	r2, [pc, #60]	@ (8009b24 <xPortStartScheduler+0x144>)
 8009ae8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009aec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009aee:	f7ff ff63 	bl	80099b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009af2:	f7ff fb0f 	bl	8009114 <vTaskSwitchContext>
	prvTaskExitError();
 8009af6:	f7ff ff17 	bl	8009928 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009afa:	2300      	movs	r3, #0
}
 8009afc:	4618      	mov	r0, r3
 8009afe:	3718      	adds	r7, #24
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}
 8009b04:	e000ed00 	.word	0xe000ed00
 8009b08:	410fc271 	.word	0x410fc271
 8009b0c:	410fc270 	.word	0x410fc270
 8009b10:	e000e400 	.word	0xe000e400
 8009b14:	20008b60 	.word	0x20008b60
 8009b18:	20008b64 	.word	0x20008b64
 8009b1c:	e000ed20 	.word	0xe000ed20
 8009b20:	20000018 	.word	0x20000018
 8009b24:	e000ef34 	.word	0xe000ef34

08009b28 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009b28:	b480      	push	{r7}
 8009b2a:	b083      	sub	sp, #12
 8009b2c:	af00      	add	r7, sp, #0
	__asm volatile
 8009b2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b32:	f383 8811 	msr	BASEPRI, r3
 8009b36:	f3bf 8f6f 	isb	sy
 8009b3a:	f3bf 8f4f 	dsb	sy
 8009b3e:	607b      	str	r3, [r7, #4]
}
 8009b40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009b42:	4b10      	ldr	r3, [pc, #64]	@ (8009b84 <vPortEnterCritical+0x5c>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	3301      	adds	r3, #1
 8009b48:	4a0e      	ldr	r2, [pc, #56]	@ (8009b84 <vPortEnterCritical+0x5c>)
 8009b4a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009b4c:	4b0d      	ldr	r3, [pc, #52]	@ (8009b84 <vPortEnterCritical+0x5c>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	2b01      	cmp	r3, #1
 8009b52:	d110      	bne.n	8009b76 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009b54:	4b0c      	ldr	r3, [pc, #48]	@ (8009b88 <vPortEnterCritical+0x60>)
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	b2db      	uxtb	r3, r3
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d00b      	beq.n	8009b76 <vPortEnterCritical+0x4e>
	__asm volatile
 8009b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b62:	f383 8811 	msr	BASEPRI, r3
 8009b66:	f3bf 8f6f 	isb	sy
 8009b6a:	f3bf 8f4f 	dsb	sy
 8009b6e:	603b      	str	r3, [r7, #0]
}
 8009b70:	bf00      	nop
 8009b72:	bf00      	nop
 8009b74:	e7fd      	b.n	8009b72 <vPortEnterCritical+0x4a>
	}
}
 8009b76:	bf00      	nop
 8009b78:	370c      	adds	r7, #12
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b80:	4770      	bx	lr
 8009b82:	bf00      	nop
 8009b84:	20000018 	.word	0x20000018
 8009b88:	e000ed04 	.word	0xe000ed04

08009b8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009b8c:	b480      	push	{r7}
 8009b8e:	b083      	sub	sp, #12
 8009b90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009b92:	4b12      	ldr	r3, [pc, #72]	@ (8009bdc <vPortExitCritical+0x50>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d10b      	bne.n	8009bb2 <vPortExitCritical+0x26>
	__asm volatile
 8009b9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b9e:	f383 8811 	msr	BASEPRI, r3
 8009ba2:	f3bf 8f6f 	isb	sy
 8009ba6:	f3bf 8f4f 	dsb	sy
 8009baa:	607b      	str	r3, [r7, #4]
}
 8009bac:	bf00      	nop
 8009bae:	bf00      	nop
 8009bb0:	e7fd      	b.n	8009bae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009bb2:	4b0a      	ldr	r3, [pc, #40]	@ (8009bdc <vPortExitCritical+0x50>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	3b01      	subs	r3, #1
 8009bb8:	4a08      	ldr	r2, [pc, #32]	@ (8009bdc <vPortExitCritical+0x50>)
 8009bba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009bbc:	4b07      	ldr	r3, [pc, #28]	@ (8009bdc <vPortExitCritical+0x50>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d105      	bne.n	8009bd0 <vPortExitCritical+0x44>
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	f383 8811 	msr	BASEPRI, r3
}
 8009bce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009bd0:	bf00      	nop
 8009bd2:	370c      	adds	r7, #12
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bda:	4770      	bx	lr
 8009bdc:	20000018 	.word	0x20000018

08009be0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009be0:	f3ef 8009 	mrs	r0, PSP
 8009be4:	f3bf 8f6f 	isb	sy
 8009be8:	4b15      	ldr	r3, [pc, #84]	@ (8009c40 <pxCurrentTCBConst>)
 8009bea:	681a      	ldr	r2, [r3, #0]
 8009bec:	f01e 0f10 	tst.w	lr, #16
 8009bf0:	bf08      	it	eq
 8009bf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009bf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bfa:	6010      	str	r0, [r2, #0]
 8009bfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009c00:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009c04:	f380 8811 	msr	BASEPRI, r0
 8009c08:	f3bf 8f4f 	dsb	sy
 8009c0c:	f3bf 8f6f 	isb	sy
 8009c10:	f7ff fa80 	bl	8009114 <vTaskSwitchContext>
 8009c14:	f04f 0000 	mov.w	r0, #0
 8009c18:	f380 8811 	msr	BASEPRI, r0
 8009c1c:	bc09      	pop	{r0, r3}
 8009c1e:	6819      	ldr	r1, [r3, #0]
 8009c20:	6808      	ldr	r0, [r1, #0]
 8009c22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c26:	f01e 0f10 	tst.w	lr, #16
 8009c2a:	bf08      	it	eq
 8009c2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009c30:	f380 8809 	msr	PSP, r0
 8009c34:	f3bf 8f6f 	isb	sy
 8009c38:	4770      	bx	lr
 8009c3a:	bf00      	nop
 8009c3c:	f3af 8000 	nop.w

08009c40 <pxCurrentTCBConst>:
 8009c40:	20008a34 	.word	0x20008a34
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009c44:	bf00      	nop
 8009c46:	bf00      	nop

08009c48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b082      	sub	sp, #8
 8009c4c:	af00      	add	r7, sp, #0
	__asm volatile
 8009c4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c52:	f383 8811 	msr	BASEPRI, r3
 8009c56:	f3bf 8f6f 	isb	sy
 8009c5a:	f3bf 8f4f 	dsb	sy
 8009c5e:	607b      	str	r3, [r7, #4]
}
 8009c60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009c62:	f7ff f99d 	bl	8008fa0 <xTaskIncrementTick>
 8009c66:	4603      	mov	r3, r0
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d003      	beq.n	8009c74 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009c6c:	4b06      	ldr	r3, [pc, #24]	@ (8009c88 <SysTick_Handler+0x40>)
 8009c6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c72:	601a      	str	r2, [r3, #0]
 8009c74:	2300      	movs	r3, #0
 8009c76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	f383 8811 	msr	BASEPRI, r3
}
 8009c7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009c80:	bf00      	nop
 8009c82:	3708      	adds	r7, #8
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}
 8009c88:	e000ed04 	.word	0xe000ed04

08009c8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009c90:	4b0b      	ldr	r3, [pc, #44]	@ (8009cc0 <vPortSetupTimerInterrupt+0x34>)
 8009c92:	2200      	movs	r2, #0
 8009c94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009c96:	4b0b      	ldr	r3, [pc, #44]	@ (8009cc4 <vPortSetupTimerInterrupt+0x38>)
 8009c98:	2200      	movs	r2, #0
 8009c9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009c9c:	4b0a      	ldr	r3, [pc, #40]	@ (8009cc8 <vPortSetupTimerInterrupt+0x3c>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	4a0a      	ldr	r2, [pc, #40]	@ (8009ccc <vPortSetupTimerInterrupt+0x40>)
 8009ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ca6:	099b      	lsrs	r3, r3, #6
 8009ca8:	4a09      	ldr	r2, [pc, #36]	@ (8009cd0 <vPortSetupTimerInterrupt+0x44>)
 8009caa:	3b01      	subs	r3, #1
 8009cac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009cae:	4b04      	ldr	r3, [pc, #16]	@ (8009cc0 <vPortSetupTimerInterrupt+0x34>)
 8009cb0:	2207      	movs	r2, #7
 8009cb2:	601a      	str	r2, [r3, #0]
}
 8009cb4:	bf00      	nop
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbc:	4770      	bx	lr
 8009cbe:	bf00      	nop
 8009cc0:	e000e010 	.word	0xe000e010
 8009cc4:	e000e018 	.word	0xe000e018
 8009cc8:	20000004 	.word	0x20000004
 8009ccc:	10624dd3 	.word	0x10624dd3
 8009cd0:	e000e014 	.word	0xe000e014

08009cd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009cd4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009ce4 <vPortEnableVFP+0x10>
 8009cd8:	6801      	ldr	r1, [r0, #0]
 8009cda:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009cde:	6001      	str	r1, [r0, #0]
 8009ce0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009ce2:	bf00      	nop
 8009ce4:	e000ed88 	.word	0xe000ed88

08009ce8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009ce8:	b480      	push	{r7}
 8009cea:	b085      	sub	sp, #20
 8009cec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009cee:	f3ef 8305 	mrs	r3, IPSR
 8009cf2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	2b0f      	cmp	r3, #15
 8009cf8:	d915      	bls.n	8009d26 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009cfa:	4a18      	ldr	r2, [pc, #96]	@ (8009d5c <vPortValidateInterruptPriority+0x74>)
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	4413      	add	r3, r2
 8009d00:	781b      	ldrb	r3, [r3, #0]
 8009d02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009d04:	4b16      	ldr	r3, [pc, #88]	@ (8009d60 <vPortValidateInterruptPriority+0x78>)
 8009d06:	781b      	ldrb	r3, [r3, #0]
 8009d08:	7afa      	ldrb	r2, [r7, #11]
 8009d0a:	429a      	cmp	r2, r3
 8009d0c:	d20b      	bcs.n	8009d26 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8009d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d12:	f383 8811 	msr	BASEPRI, r3
 8009d16:	f3bf 8f6f 	isb	sy
 8009d1a:	f3bf 8f4f 	dsb	sy
 8009d1e:	607b      	str	r3, [r7, #4]
}
 8009d20:	bf00      	nop
 8009d22:	bf00      	nop
 8009d24:	e7fd      	b.n	8009d22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009d26:	4b0f      	ldr	r3, [pc, #60]	@ (8009d64 <vPortValidateInterruptPriority+0x7c>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009d2e:	4b0e      	ldr	r3, [pc, #56]	@ (8009d68 <vPortValidateInterruptPriority+0x80>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	429a      	cmp	r2, r3
 8009d34:	d90b      	bls.n	8009d4e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d3a:	f383 8811 	msr	BASEPRI, r3
 8009d3e:	f3bf 8f6f 	isb	sy
 8009d42:	f3bf 8f4f 	dsb	sy
 8009d46:	603b      	str	r3, [r7, #0]
}
 8009d48:	bf00      	nop
 8009d4a:	bf00      	nop
 8009d4c:	e7fd      	b.n	8009d4a <vPortValidateInterruptPriority+0x62>
	}
 8009d4e:	bf00      	nop
 8009d50:	3714      	adds	r7, #20
 8009d52:	46bd      	mov	sp, r7
 8009d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d58:	4770      	bx	lr
 8009d5a:	bf00      	nop
 8009d5c:	e000e3f0 	.word	0xe000e3f0
 8009d60:	20008b60 	.word	0x20008b60
 8009d64:	e000ed0c 	.word	0xe000ed0c
 8009d68:	20008b64 	.word	0x20008b64

08009d6c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b08a      	sub	sp, #40	@ 0x28
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009d74:	2300      	movs	r3, #0
 8009d76:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009d78:	f7ff f866 	bl	8008e48 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009d7c:	4b5c      	ldr	r3, [pc, #368]	@ (8009ef0 <pvPortMalloc+0x184>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d101      	bne.n	8009d88 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009d84:	f000 f924 	bl	8009fd0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009d88:	4b5a      	ldr	r3, [pc, #360]	@ (8009ef4 <pvPortMalloc+0x188>)
 8009d8a:	681a      	ldr	r2, [r3, #0]
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	4013      	ands	r3, r2
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	f040 8095 	bne.w	8009ec0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d01e      	beq.n	8009dda <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009d9c:	2208      	movs	r2, #8
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	4413      	add	r3, r2
 8009da2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f003 0307 	and.w	r3, r3, #7
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d015      	beq.n	8009dda <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	f023 0307 	bic.w	r3, r3, #7
 8009db4:	3308      	adds	r3, #8
 8009db6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	f003 0307 	and.w	r3, r3, #7
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d00b      	beq.n	8009dda <pvPortMalloc+0x6e>
	__asm volatile
 8009dc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dc6:	f383 8811 	msr	BASEPRI, r3
 8009dca:	f3bf 8f6f 	isb	sy
 8009dce:	f3bf 8f4f 	dsb	sy
 8009dd2:	617b      	str	r3, [r7, #20]
}
 8009dd4:	bf00      	nop
 8009dd6:	bf00      	nop
 8009dd8:	e7fd      	b.n	8009dd6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d06f      	beq.n	8009ec0 <pvPortMalloc+0x154>
 8009de0:	4b45      	ldr	r3, [pc, #276]	@ (8009ef8 <pvPortMalloc+0x18c>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	687a      	ldr	r2, [r7, #4]
 8009de6:	429a      	cmp	r2, r3
 8009de8:	d86a      	bhi.n	8009ec0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009dea:	4b44      	ldr	r3, [pc, #272]	@ (8009efc <pvPortMalloc+0x190>)
 8009dec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009dee:	4b43      	ldr	r3, [pc, #268]	@ (8009efc <pvPortMalloc+0x190>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009df4:	e004      	b.n	8009e00 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009df8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e02:	685b      	ldr	r3, [r3, #4]
 8009e04:	687a      	ldr	r2, [r7, #4]
 8009e06:	429a      	cmp	r2, r3
 8009e08:	d903      	bls.n	8009e12 <pvPortMalloc+0xa6>
 8009e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d1f1      	bne.n	8009df6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009e12:	4b37      	ldr	r3, [pc, #220]	@ (8009ef0 <pvPortMalloc+0x184>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e18:	429a      	cmp	r2, r3
 8009e1a:	d051      	beq.n	8009ec0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009e1c:	6a3b      	ldr	r3, [r7, #32]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	2208      	movs	r2, #8
 8009e22:	4413      	add	r3, r2
 8009e24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e28:	681a      	ldr	r2, [r3, #0]
 8009e2a:	6a3b      	ldr	r3, [r7, #32]
 8009e2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e30:	685a      	ldr	r2, [r3, #4]
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	1ad2      	subs	r2, r2, r3
 8009e36:	2308      	movs	r3, #8
 8009e38:	005b      	lsls	r3, r3, #1
 8009e3a:	429a      	cmp	r2, r3
 8009e3c:	d920      	bls.n	8009e80 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009e3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	4413      	add	r3, r2
 8009e44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e46:	69bb      	ldr	r3, [r7, #24]
 8009e48:	f003 0307 	and.w	r3, r3, #7
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d00b      	beq.n	8009e68 <pvPortMalloc+0xfc>
	__asm volatile
 8009e50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e54:	f383 8811 	msr	BASEPRI, r3
 8009e58:	f3bf 8f6f 	isb	sy
 8009e5c:	f3bf 8f4f 	dsb	sy
 8009e60:	613b      	str	r3, [r7, #16]
}
 8009e62:	bf00      	nop
 8009e64:	bf00      	nop
 8009e66:	e7fd      	b.n	8009e64 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e6a:	685a      	ldr	r2, [r3, #4]
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	1ad2      	subs	r2, r2, r3
 8009e70:	69bb      	ldr	r3, [r7, #24]
 8009e72:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e76:	687a      	ldr	r2, [r7, #4]
 8009e78:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009e7a:	69b8      	ldr	r0, [r7, #24]
 8009e7c:	f000 f90a 	bl	800a094 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009e80:	4b1d      	ldr	r3, [pc, #116]	@ (8009ef8 <pvPortMalloc+0x18c>)
 8009e82:	681a      	ldr	r2, [r3, #0]
 8009e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e86:	685b      	ldr	r3, [r3, #4]
 8009e88:	1ad3      	subs	r3, r2, r3
 8009e8a:	4a1b      	ldr	r2, [pc, #108]	@ (8009ef8 <pvPortMalloc+0x18c>)
 8009e8c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009e8e:	4b1a      	ldr	r3, [pc, #104]	@ (8009ef8 <pvPortMalloc+0x18c>)
 8009e90:	681a      	ldr	r2, [r3, #0]
 8009e92:	4b1b      	ldr	r3, [pc, #108]	@ (8009f00 <pvPortMalloc+0x194>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	429a      	cmp	r2, r3
 8009e98:	d203      	bcs.n	8009ea2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009e9a:	4b17      	ldr	r3, [pc, #92]	@ (8009ef8 <pvPortMalloc+0x18c>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	4a18      	ldr	r2, [pc, #96]	@ (8009f00 <pvPortMalloc+0x194>)
 8009ea0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ea4:	685a      	ldr	r2, [r3, #4]
 8009ea6:	4b13      	ldr	r3, [pc, #76]	@ (8009ef4 <pvPortMalloc+0x188>)
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	431a      	orrs	r2, r3
 8009eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009eb6:	4b13      	ldr	r3, [pc, #76]	@ (8009f04 <pvPortMalloc+0x198>)
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	3301      	adds	r3, #1
 8009ebc:	4a11      	ldr	r2, [pc, #68]	@ (8009f04 <pvPortMalloc+0x198>)
 8009ebe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009ec0:	f7fe ffd0 	bl	8008e64 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ec4:	69fb      	ldr	r3, [r7, #28]
 8009ec6:	f003 0307 	and.w	r3, r3, #7
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d00b      	beq.n	8009ee6 <pvPortMalloc+0x17a>
	__asm volatile
 8009ece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ed2:	f383 8811 	msr	BASEPRI, r3
 8009ed6:	f3bf 8f6f 	isb	sy
 8009eda:	f3bf 8f4f 	dsb	sy
 8009ede:	60fb      	str	r3, [r7, #12]
}
 8009ee0:	bf00      	nop
 8009ee2:	bf00      	nop
 8009ee4:	e7fd      	b.n	8009ee2 <pvPortMalloc+0x176>
	return pvReturn;
 8009ee6:	69fb      	ldr	r3, [r7, #28]
}
 8009ee8:	4618      	mov	r0, r3
 8009eea:	3728      	adds	r7, #40	@ 0x28
 8009eec:	46bd      	mov	sp, r7
 8009eee:	bd80      	pop	{r7, pc}
 8009ef0:	2000c770 	.word	0x2000c770
 8009ef4:	2000c784 	.word	0x2000c784
 8009ef8:	2000c774 	.word	0x2000c774
 8009efc:	2000c768 	.word	0x2000c768
 8009f00:	2000c778 	.word	0x2000c778
 8009f04:	2000c77c 	.word	0x2000c77c

08009f08 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b086      	sub	sp, #24
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d04f      	beq.n	8009fba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009f1a:	2308      	movs	r3, #8
 8009f1c:	425b      	negs	r3, r3
 8009f1e:	697a      	ldr	r2, [r7, #20]
 8009f20:	4413      	add	r3, r2
 8009f22:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009f24:	697b      	ldr	r3, [r7, #20]
 8009f26:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009f28:	693b      	ldr	r3, [r7, #16]
 8009f2a:	685a      	ldr	r2, [r3, #4]
 8009f2c:	4b25      	ldr	r3, [pc, #148]	@ (8009fc4 <vPortFree+0xbc>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	4013      	ands	r3, r2
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d10b      	bne.n	8009f4e <vPortFree+0x46>
	__asm volatile
 8009f36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f3a:	f383 8811 	msr	BASEPRI, r3
 8009f3e:	f3bf 8f6f 	isb	sy
 8009f42:	f3bf 8f4f 	dsb	sy
 8009f46:	60fb      	str	r3, [r7, #12]
}
 8009f48:	bf00      	nop
 8009f4a:	bf00      	nop
 8009f4c:	e7fd      	b.n	8009f4a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009f4e:	693b      	ldr	r3, [r7, #16]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d00b      	beq.n	8009f6e <vPortFree+0x66>
	__asm volatile
 8009f56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f5a:	f383 8811 	msr	BASEPRI, r3
 8009f5e:	f3bf 8f6f 	isb	sy
 8009f62:	f3bf 8f4f 	dsb	sy
 8009f66:	60bb      	str	r3, [r7, #8]
}
 8009f68:	bf00      	nop
 8009f6a:	bf00      	nop
 8009f6c:	e7fd      	b.n	8009f6a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009f6e:	693b      	ldr	r3, [r7, #16]
 8009f70:	685a      	ldr	r2, [r3, #4]
 8009f72:	4b14      	ldr	r3, [pc, #80]	@ (8009fc4 <vPortFree+0xbc>)
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	4013      	ands	r3, r2
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d01e      	beq.n	8009fba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009f7c:	693b      	ldr	r3, [r7, #16]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d11a      	bne.n	8009fba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009f84:	693b      	ldr	r3, [r7, #16]
 8009f86:	685a      	ldr	r2, [r3, #4]
 8009f88:	4b0e      	ldr	r3, [pc, #56]	@ (8009fc4 <vPortFree+0xbc>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	43db      	mvns	r3, r3
 8009f8e:	401a      	ands	r2, r3
 8009f90:	693b      	ldr	r3, [r7, #16]
 8009f92:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009f94:	f7fe ff58 	bl	8008e48 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009f98:	693b      	ldr	r3, [r7, #16]
 8009f9a:	685a      	ldr	r2, [r3, #4]
 8009f9c:	4b0a      	ldr	r3, [pc, #40]	@ (8009fc8 <vPortFree+0xc0>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	4413      	add	r3, r2
 8009fa2:	4a09      	ldr	r2, [pc, #36]	@ (8009fc8 <vPortFree+0xc0>)
 8009fa4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009fa6:	6938      	ldr	r0, [r7, #16]
 8009fa8:	f000 f874 	bl	800a094 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009fac:	4b07      	ldr	r3, [pc, #28]	@ (8009fcc <vPortFree+0xc4>)
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	3301      	adds	r3, #1
 8009fb2:	4a06      	ldr	r2, [pc, #24]	@ (8009fcc <vPortFree+0xc4>)
 8009fb4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009fb6:	f7fe ff55 	bl	8008e64 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009fba:	bf00      	nop
 8009fbc:	3718      	adds	r7, #24
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bd80      	pop	{r7, pc}
 8009fc2:	bf00      	nop
 8009fc4:	2000c784 	.word	0x2000c784
 8009fc8:	2000c774 	.word	0x2000c774
 8009fcc:	2000c780 	.word	0x2000c780

08009fd0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009fd0:	b480      	push	{r7}
 8009fd2:	b085      	sub	sp, #20
 8009fd4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009fd6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8009fda:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009fdc:	4b27      	ldr	r3, [pc, #156]	@ (800a07c <prvHeapInit+0xac>)
 8009fde:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	f003 0307 	and.w	r3, r3, #7
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d00c      	beq.n	800a004 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	3307      	adds	r3, #7
 8009fee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	f023 0307 	bic.w	r3, r3, #7
 8009ff6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009ff8:	68ba      	ldr	r2, [r7, #8]
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	1ad3      	subs	r3, r2, r3
 8009ffe:	4a1f      	ldr	r2, [pc, #124]	@ (800a07c <prvHeapInit+0xac>)
 800a000:	4413      	add	r3, r2
 800a002:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a008:	4a1d      	ldr	r2, [pc, #116]	@ (800a080 <prvHeapInit+0xb0>)
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a00e:	4b1c      	ldr	r3, [pc, #112]	@ (800a080 <prvHeapInit+0xb0>)
 800a010:	2200      	movs	r2, #0
 800a012:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	68ba      	ldr	r2, [r7, #8]
 800a018:	4413      	add	r3, r2
 800a01a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a01c:	2208      	movs	r2, #8
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	1a9b      	subs	r3, r3, r2
 800a022:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	f023 0307 	bic.w	r3, r3, #7
 800a02a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	4a15      	ldr	r2, [pc, #84]	@ (800a084 <prvHeapInit+0xb4>)
 800a030:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a032:	4b14      	ldr	r3, [pc, #80]	@ (800a084 <prvHeapInit+0xb4>)
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	2200      	movs	r2, #0
 800a038:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a03a:	4b12      	ldr	r3, [pc, #72]	@ (800a084 <prvHeapInit+0xb4>)
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	2200      	movs	r2, #0
 800a040:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	68fa      	ldr	r2, [r7, #12]
 800a04a:	1ad2      	subs	r2, r2, r3
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a050:	4b0c      	ldr	r3, [pc, #48]	@ (800a084 <prvHeapInit+0xb4>)
 800a052:	681a      	ldr	r2, [r3, #0]
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	685b      	ldr	r3, [r3, #4]
 800a05c:	4a0a      	ldr	r2, [pc, #40]	@ (800a088 <prvHeapInit+0xb8>)
 800a05e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	685b      	ldr	r3, [r3, #4]
 800a064:	4a09      	ldr	r2, [pc, #36]	@ (800a08c <prvHeapInit+0xbc>)
 800a066:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a068:	4b09      	ldr	r3, [pc, #36]	@ (800a090 <prvHeapInit+0xc0>)
 800a06a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a06e:	601a      	str	r2, [r3, #0]
}
 800a070:	bf00      	nop
 800a072:	3714      	adds	r7, #20
 800a074:	46bd      	mov	sp, r7
 800a076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07a:	4770      	bx	lr
 800a07c:	20008b68 	.word	0x20008b68
 800a080:	2000c768 	.word	0x2000c768
 800a084:	2000c770 	.word	0x2000c770
 800a088:	2000c778 	.word	0x2000c778
 800a08c:	2000c774 	.word	0x2000c774
 800a090:	2000c784 	.word	0x2000c784

0800a094 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a094:	b480      	push	{r7}
 800a096:	b085      	sub	sp, #20
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a09c:	4b28      	ldr	r3, [pc, #160]	@ (800a140 <prvInsertBlockIntoFreeList+0xac>)
 800a09e:	60fb      	str	r3, [r7, #12]
 800a0a0:	e002      	b.n	800a0a8 <prvInsertBlockIntoFreeList+0x14>
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	60fb      	str	r3, [r7, #12]
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	687a      	ldr	r2, [r7, #4]
 800a0ae:	429a      	cmp	r2, r3
 800a0b0:	d8f7      	bhi.n	800a0a2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	685b      	ldr	r3, [r3, #4]
 800a0ba:	68ba      	ldr	r2, [r7, #8]
 800a0bc:	4413      	add	r3, r2
 800a0be:	687a      	ldr	r2, [r7, #4]
 800a0c0:	429a      	cmp	r2, r3
 800a0c2:	d108      	bne.n	800a0d6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	685a      	ldr	r2, [r3, #4]
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	685b      	ldr	r3, [r3, #4]
 800a0cc:	441a      	add	r2, r3
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	685b      	ldr	r3, [r3, #4]
 800a0de:	68ba      	ldr	r2, [r7, #8]
 800a0e0:	441a      	add	r2, r3
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	429a      	cmp	r2, r3
 800a0e8:	d118      	bne.n	800a11c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	681a      	ldr	r2, [r3, #0]
 800a0ee:	4b15      	ldr	r3, [pc, #84]	@ (800a144 <prvInsertBlockIntoFreeList+0xb0>)
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	429a      	cmp	r2, r3
 800a0f4:	d00d      	beq.n	800a112 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	685a      	ldr	r2, [r3, #4]
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	685b      	ldr	r3, [r3, #4]
 800a100:	441a      	add	r2, r3
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	681a      	ldr	r2, [r3, #0]
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	601a      	str	r2, [r3, #0]
 800a110:	e008      	b.n	800a124 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a112:	4b0c      	ldr	r3, [pc, #48]	@ (800a144 <prvInsertBlockIntoFreeList+0xb0>)
 800a114:	681a      	ldr	r2, [r3, #0]
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	601a      	str	r2, [r3, #0]
 800a11a:	e003      	b.n	800a124 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	681a      	ldr	r2, [r3, #0]
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a124:	68fa      	ldr	r2, [r7, #12]
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	429a      	cmp	r2, r3
 800a12a:	d002      	beq.n	800a132 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	687a      	ldr	r2, [r7, #4]
 800a130:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a132:	bf00      	nop
 800a134:	3714      	adds	r7, #20
 800a136:	46bd      	mov	sp, r7
 800a138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13c:	4770      	bx	lr
 800a13e:	bf00      	nop
 800a140:	2000c768 	.word	0x2000c768
 800a144:	2000c770 	.word	0x2000c770

0800a148 <rcl_get_zero_initialized_node>:
 800a148:	4a03      	ldr	r2, [pc, #12]	@ (800a158 <rcl_get_zero_initialized_node+0x10>)
 800a14a:	4603      	mov	r3, r0
 800a14c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a150:	e883 0003 	stmia.w	r3, {r0, r1}
 800a154:	4618      	mov	r0, r3
 800a156:	4770      	bx	lr
 800a158:	08019fe4 	.word	0x08019fe4

0800a15c <rcl_node_init>:
 800a15c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a160:	b0a9      	sub	sp, #164	@ 0xa4
 800a162:	4604      	mov	r4, r0
 800a164:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 800a168:	a823      	add	r0, sp, #140	@ 0x8c
 800a16a:	460e      	mov	r6, r1
 800a16c:	4615      	mov	r5, r2
 800a16e:	461f      	mov	r7, r3
 800a170:	f006 fa08 	bl	8010584 <rcl_guard_condition_get_default_options>
 800a174:	f1b8 0f00 	cmp.w	r8, #0
 800a178:	f000 80e6 	beq.w	800a348 <rcl_node_init+0x1ec>
 800a17c:	4640      	mov	r0, r8
 800a17e:	f001 fbdf 	bl	800b940 <rcutils_allocator_is_valid>
 800a182:	2800      	cmp	r0, #0
 800a184:	f000 80e0 	beq.w	800a348 <rcl_node_init+0x1ec>
 800a188:	2e00      	cmp	r6, #0
 800a18a:	f000 80dd 	beq.w	800a348 <rcl_node_init+0x1ec>
 800a18e:	2d00      	cmp	r5, #0
 800a190:	f000 80da 	beq.w	800a348 <rcl_node_init+0x1ec>
 800a194:	2c00      	cmp	r4, #0
 800a196:	f000 80d7 	beq.w	800a348 <rcl_node_init+0x1ec>
 800a19a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800a19e:	f1b9 0f00 	cmp.w	r9, #0
 800a1a2:	f040 80fd 	bne.w	800a3a0 <rcl_node_init+0x244>
 800a1a6:	2f00      	cmp	r7, #0
 800a1a8:	f000 80ce 	beq.w	800a348 <rcl_node_init+0x1ec>
 800a1ac:	4638      	mov	r0, r7
 800a1ae:	f006 f8f3 	bl	8010398 <rcl_context_is_valid>
 800a1b2:	4682      	mov	sl, r0
 800a1b4:	2800      	cmp	r0, #0
 800a1b6:	f000 80cd 	beq.w	800a354 <rcl_node_init+0x1f8>
 800a1ba:	464a      	mov	r2, r9
 800a1bc:	a922      	add	r1, sp, #136	@ 0x88
 800a1be:	4630      	mov	r0, r6
 800a1c0:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 800a1c4:	f001 fe54 	bl	800be70 <rmw_validate_node_name>
 800a1c8:	4681      	mov	r9, r0
 800a1ca:	2800      	cmp	r0, #0
 800a1cc:	f040 80be 	bne.w	800a34c <rcl_node_init+0x1f0>
 800a1d0:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800a1d2:	2800      	cmp	r0, #0
 800a1d4:	f040 80f0 	bne.w	800a3b8 <rcl_node_init+0x25c>
 800a1d8:	4628      	mov	r0, r5
 800a1da:	f7f6 f879 	bl	80002d0 <strlen>
 800a1de:	2800      	cmp	r0, #0
 800a1e0:	f040 80bb 	bne.w	800a35a <rcl_node_init+0x1fe>
 800a1e4:	4d7c      	ldr	r5, [pc, #496]	@ (800a3d8 <rcl_node_init+0x27c>)
 800a1e6:	a922      	add	r1, sp, #136	@ 0x88
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	4628      	mov	r0, r5
 800a1ec:	f001 fe22 	bl	800be34 <rmw_validate_namespace>
 800a1f0:	4681      	mov	r9, r0
 800a1f2:	2800      	cmp	r0, #0
 800a1f4:	f040 80aa 	bne.w	800a34c <rcl_node_init+0x1f0>
 800a1f8:	4682      	mov	sl, r0
 800a1fa:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800a1fc:	2800      	cmp	r0, #0
 800a1fe:	f040 80e0 	bne.w	800a3c2 <rcl_node_init+0x266>
 800a202:	f8d8 3000 	ldr.w	r3, [r8]
 800a206:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800a20a:	2078      	movs	r0, #120	@ 0x78
 800a20c:	4798      	blx	r3
 800a20e:	4681      	mov	r9, r0
 800a210:	6060      	str	r0, [r4, #4]
 800a212:	2800      	cmp	r0, #0
 800a214:	f000 80ca 	beq.w	800a3ac <rcl_node_init+0x250>
 800a218:	2200      	movs	r2, #0
 800a21a:	2300      	movs	r3, #0
 800a21c:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 800a220:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 800a224:	a808      	add	r0, sp, #32
 800a226:	f000 f939 	bl	800a49c <rcl_node_get_default_options>
 800a22a:	a908      	add	r1, sp, #32
 800a22c:	4648      	mov	r0, r9
 800a22e:	2268      	movs	r2, #104	@ 0x68
 800a230:	f00d fef5 	bl	801801e <memcpy>
 800a234:	6861      	ldr	r1, [r4, #4]
 800a236:	6027      	str	r7, [r4, #0]
 800a238:	4640      	mov	r0, r8
 800a23a:	f000 f93d 	bl	800a4b8 <rcl_node_options_copy>
 800a23e:	2800      	cmp	r0, #0
 800a240:	d158      	bne.n	800a2f4 <rcl_node_init+0x198>
 800a242:	4628      	mov	r0, r5
 800a244:	f7f6 f844 	bl	80002d0 <strlen>
 800a248:	4428      	add	r0, r5
 800a24a:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800a24e:	e9cd 5603 	strd	r5, r6, [sp, #12]
 800a252:	2b2f      	cmp	r3, #47	@ 0x2f
 800a254:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800a258:	9300      	str	r3, [sp, #0]
 800a25a:	bf0c      	ite	eq
 800a25c:	4b5f      	ldreq	r3, [pc, #380]	@ (800a3dc <rcl_node_init+0x280>)
 800a25e:	4b60      	ldrne	r3, [pc, #384]	@ (800a3e0 <rcl_node_init+0x284>)
 800a260:	9302      	str	r3, [sp, #8]
 800a262:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a266:	9301      	str	r3, [sp, #4]
 800a268:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800a26c:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800a270:	f001 fbbe 	bl	800b9f0 <rcutils_format_string_limit>
 800a274:	6823      	ldr	r3, [r4, #0]
 800a276:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 800a27a:	6818      	ldr	r0, [r3, #0]
 800a27c:	4631      	mov	r1, r6
 800a27e:	3028      	adds	r0, #40	@ 0x28
 800a280:	462a      	mov	r2, r5
 800a282:	6866      	ldr	r6, [r4, #4]
 800a284:	f001 fee2 	bl	800c04c <rmw_create_node>
 800a288:	6863      	ldr	r3, [r4, #4]
 800a28a:	66b0      	str	r0, [r6, #104]	@ 0x68
 800a28c:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800a28e:	2800      	cmp	r0, #0
 800a290:	d032      	beq.n	800a2f8 <rcl_node_init+0x19c>
 800a292:	f001 ff6f 	bl	800c174 <rmw_node_get_graph_guard_condition>
 800a296:	4681      	mov	r9, r0
 800a298:	b360      	cbz	r0, 800a2f4 <rcl_node_init+0x198>
 800a29a:	f8d8 3000 	ldr.w	r3, [r8]
 800a29e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800a2a2:	6866      	ldr	r6, [r4, #4]
 800a2a4:	2008      	movs	r0, #8
 800a2a6:	4798      	blx	r3
 800a2a8:	6863      	ldr	r3, [r4, #4]
 800a2aa:	66f0      	str	r0, [r6, #108]	@ 0x6c
 800a2ac:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 800a2b0:	f1bb 0f00 	cmp.w	fp, #0
 800a2b4:	d020      	beq.n	800a2f8 <rcl_node_init+0x19c>
 800a2b6:	a806      	add	r0, sp, #24
 800a2b8:	f006 f8d4 	bl	8010464 <rcl_get_zero_initialized_guard_condition>
 800a2bc:	a806      	add	r0, sp, #24
 800a2be:	c803      	ldmia	r0, {r0, r1}
 800a2c0:	6863      	ldr	r3, [r4, #4]
 800a2c2:	46c4      	mov	ip, r8
 800a2c4:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 800a2c8:	e88b 0003 	stmia.w	fp, {r0, r1}
 800a2cc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a2d0:	ae23      	add	r6, sp, #140	@ 0x8c
 800a2d2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a2d4:	f8dc 3000 	ldr.w	r3, [ip]
 800a2d8:	6033      	str	r3, [r6, #0]
 800a2da:	ab28      	add	r3, sp, #160	@ 0xa0
 800a2dc:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800a2e0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800a2e4:	4649      	mov	r1, r9
 800a2e6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a2e8:	463a      	mov	r2, r7
 800a2ea:	4670      	mov	r0, lr
 800a2ec:	f006 f8c4 	bl	8010478 <rcl_guard_condition_init_from_rmw>
 800a2f0:	4681      	mov	r9, r0
 800a2f2:	b328      	cbz	r0, 800a340 <rcl_node_init+0x1e4>
 800a2f4:	6863      	ldr	r3, [r4, #4]
 800a2f6:	b1f3      	cbz	r3, 800a336 <rcl_node_init+0x1da>
 800a2f8:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800a2fa:	b128      	cbz	r0, 800a308 <rcl_node_init+0x1ac>
 800a2fc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a300:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800a304:	4798      	blx	r3
 800a306:	6863      	ldr	r3, [r4, #4]
 800a308:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800a30a:	b110      	cbz	r0, 800a312 <rcl_node_init+0x1b6>
 800a30c:	f001 feb6 	bl	800c07c <rmw_destroy_node>
 800a310:	6863      	ldr	r3, [r4, #4]
 800a312:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800a314:	b148      	cbz	r0, 800a32a <rcl_node_init+0x1ce>
 800a316:	f006 f90f 	bl	8010538 <rcl_guard_condition_fini>
 800a31a:	6863      	ldr	r3, [r4, #4]
 800a31c:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800a320:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800a322:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a326:	4798      	blx	r3
 800a328:	6863      	ldr	r3, [r4, #4]
 800a32a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800a32e:	4618      	mov	r0, r3
 800a330:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a334:	4798      	blx	r3
 800a336:	2300      	movs	r3, #0
 800a338:	e9c4 3300 	strd	r3, r3, [r4]
 800a33c:	f04f 0901 	mov.w	r9, #1
 800a340:	f1ba 0f00 	cmp.w	sl, #0
 800a344:	d125      	bne.n	800a392 <rcl_node_init+0x236>
 800a346:	e001      	b.n	800a34c <rcl_node_init+0x1f0>
 800a348:	f04f 090b 	mov.w	r9, #11
 800a34c:	4648      	mov	r0, r9
 800a34e:	b029      	add	sp, #164	@ 0xa4
 800a350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a354:	f04f 0965 	mov.w	r9, #101	@ 0x65
 800a358:	e7f8      	b.n	800a34c <rcl_node_init+0x1f0>
 800a35a:	782b      	ldrb	r3, [r5, #0]
 800a35c:	2b2f      	cmp	r3, #47	@ 0x2f
 800a35e:	f43f af42 	beq.w	800a1e6 <rcl_node_init+0x8a>
 800a362:	9503      	str	r5, [sp, #12]
 800a364:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800a368:	9300      	str	r3, [sp, #0]
 800a36a:	4b1e      	ldr	r3, [pc, #120]	@ (800a3e4 <rcl_node_init+0x288>)
 800a36c:	9302      	str	r3, [sp, #8]
 800a36e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a372:	9301      	str	r3, [sp, #4]
 800a374:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800a378:	f001 fb3a 	bl	800b9f0 <rcutils_format_string_limit>
 800a37c:	4605      	mov	r5, r0
 800a37e:	b340      	cbz	r0, 800a3d2 <rcl_node_init+0x276>
 800a380:	2200      	movs	r2, #0
 800a382:	a922      	add	r1, sp, #136	@ 0x88
 800a384:	9222      	str	r2, [sp, #136]	@ 0x88
 800a386:	f001 fd55 	bl	800be34 <rmw_validate_namespace>
 800a38a:	4681      	mov	r9, r0
 800a38c:	2800      	cmp	r0, #0
 800a38e:	f43f af34 	beq.w	800a1fa <rcl_node_init+0x9e>
 800a392:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a396:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800a39a:	4628      	mov	r0, r5
 800a39c:	4798      	blx	r3
 800a39e:	e7d5      	b.n	800a34c <rcl_node_init+0x1f0>
 800a3a0:	f04f 0964 	mov.w	r9, #100	@ 0x64
 800a3a4:	4648      	mov	r0, r9
 800a3a6:	b029      	add	sp, #164	@ 0xa4
 800a3a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3ac:	f04f 090a 	mov.w	r9, #10
 800a3b0:	f1ba 0f00 	cmp.w	sl, #0
 800a3b4:	d1ed      	bne.n	800a392 <rcl_node_init+0x236>
 800a3b6:	e7c9      	b.n	800a34c <rcl_node_init+0x1f0>
 800a3b8:	f001 fdac 	bl	800bf14 <rmw_node_name_validation_result_string>
 800a3bc:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 800a3c0:	e7c4      	b.n	800a34c <rcl_node_init+0x1f0>
 800a3c2:	f001 fd49 	bl	800be58 <rmw_namespace_validation_result_string>
 800a3c6:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 800a3ca:	f1ba 0f00 	cmp.w	sl, #0
 800a3ce:	d1e0      	bne.n	800a392 <rcl_node_init+0x236>
 800a3d0:	e7bc      	b.n	800a34c <rcl_node_init+0x1f0>
 800a3d2:	f04f 090a 	mov.w	r9, #10
 800a3d6:	e7b9      	b.n	800a34c <rcl_node_init+0x1f0>
 800a3d8:	08019fcc 	.word	0x08019fcc
 800a3dc:	08019fd4 	.word	0x08019fd4
 800a3e0:	08019fdc 	.word	0x08019fdc
 800a3e4:	08019fd0 	.word	0x08019fd0

0800a3e8 <rcl_node_fini>:
 800a3e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3ea:	b320      	cbz	r0, 800a436 <rcl_node_fini+0x4e>
 800a3ec:	6845      	ldr	r5, [r0, #4]
 800a3ee:	4604      	mov	r4, r0
 800a3f0:	b1fd      	cbz	r5, 800a432 <rcl_node_fini+0x4a>
 800a3f2:	6ea8      	ldr	r0, [r5, #104]	@ 0x68
 800a3f4:	686f      	ldr	r7, [r5, #4]
 800a3f6:	692e      	ldr	r6, [r5, #16]
 800a3f8:	f001 fe40 	bl	800c07c <rmw_destroy_node>
 800a3fc:	6863      	ldr	r3, [r4, #4]
 800a3fe:	4605      	mov	r5, r0
 800a400:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800a402:	f006 f899 	bl	8010538 <rcl_guard_condition_fini>
 800a406:	ea55 0300 	orrs.w	r3, r5, r0
 800a40a:	6863      	ldr	r3, [r4, #4]
 800a40c:	4631      	mov	r1, r6
 800a40e:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800a410:	bf14      	ite	ne
 800a412:	2501      	movne	r5, #1
 800a414:	2500      	moveq	r5, #0
 800a416:	47b8      	blx	r7
 800a418:	6863      	ldr	r3, [r4, #4]
 800a41a:	4631      	mov	r1, r6
 800a41c:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800a41e:	47b8      	blx	r7
 800a420:	6863      	ldr	r3, [r4, #4]
 800a422:	4631      	mov	r1, r6
 800a424:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800a426:	47b8      	blx	r7
 800a428:	6860      	ldr	r0, [r4, #4]
 800a42a:	4631      	mov	r1, r6
 800a42c:	47b8      	blx	r7
 800a42e:	2300      	movs	r3, #0
 800a430:	6063      	str	r3, [r4, #4]
 800a432:	4628      	mov	r0, r5
 800a434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a436:	25c8      	movs	r5, #200	@ 0xc8
 800a438:	4628      	mov	r0, r5
 800a43a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a43c <rcl_node_is_valid_except_context>:
 800a43c:	b128      	cbz	r0, 800a44a <rcl_node_is_valid_except_context+0xe>
 800a43e:	6840      	ldr	r0, [r0, #4]
 800a440:	b118      	cbz	r0, 800a44a <rcl_node_is_valid_except_context+0xe>
 800a442:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800a444:	3800      	subs	r0, #0
 800a446:	bf18      	it	ne
 800a448:	2001      	movne	r0, #1
 800a44a:	4770      	bx	lr

0800a44c <rcl_node_is_valid>:
 800a44c:	b130      	cbz	r0, 800a45c <rcl_node_is_valid+0x10>
 800a44e:	6843      	ldr	r3, [r0, #4]
 800a450:	b123      	cbz	r3, 800a45c <rcl_node_is_valid+0x10>
 800a452:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a454:	b113      	cbz	r3, 800a45c <rcl_node_is_valid+0x10>
 800a456:	6800      	ldr	r0, [r0, #0]
 800a458:	f005 bf9e 	b.w	8010398 <rcl_context_is_valid>
 800a45c:	2000      	movs	r0, #0
 800a45e:	4770      	bx	lr

0800a460 <rcl_node_get_name>:
 800a460:	b120      	cbz	r0, 800a46c <rcl_node_get_name+0xc>
 800a462:	6840      	ldr	r0, [r0, #4]
 800a464:	b110      	cbz	r0, 800a46c <rcl_node_get_name+0xc>
 800a466:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800a468:	b100      	cbz	r0, 800a46c <rcl_node_get_name+0xc>
 800a46a:	6880      	ldr	r0, [r0, #8]
 800a46c:	4770      	bx	lr
 800a46e:	bf00      	nop

0800a470 <rcl_node_get_namespace>:
 800a470:	b120      	cbz	r0, 800a47c <rcl_node_get_namespace+0xc>
 800a472:	6840      	ldr	r0, [r0, #4]
 800a474:	b110      	cbz	r0, 800a47c <rcl_node_get_namespace+0xc>
 800a476:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800a478:	b100      	cbz	r0, 800a47c <rcl_node_get_namespace+0xc>
 800a47a:	68c0      	ldr	r0, [r0, #12]
 800a47c:	4770      	bx	lr
 800a47e:	bf00      	nop

0800a480 <rcl_node_get_options>:
 800a480:	b128      	cbz	r0, 800a48e <rcl_node_get_options+0xe>
 800a482:	6840      	ldr	r0, [r0, #4]
 800a484:	b118      	cbz	r0, 800a48e <rcl_node_get_options+0xe>
 800a486:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 800a488:	2b00      	cmp	r3, #0
 800a48a:	bf08      	it	eq
 800a48c:	2000      	moveq	r0, #0
 800a48e:	4770      	bx	lr

0800a490 <rcl_node_get_rmw_handle>:
 800a490:	b110      	cbz	r0, 800a498 <rcl_node_get_rmw_handle+0x8>
 800a492:	6840      	ldr	r0, [r0, #4]
 800a494:	b100      	cbz	r0, 800a498 <rcl_node_get_rmw_handle+0x8>
 800a496:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800a498:	4770      	bx	lr
 800a49a:	bf00      	nop

0800a49c <rcl_node_get_default_options>:
 800a49c:	b510      	push	{r4, lr}
 800a49e:	2268      	movs	r2, #104	@ 0x68
 800a4a0:	4604      	mov	r4, r0
 800a4a2:	2100      	movs	r1, #0
 800a4a4:	f00d fc98 	bl	8017dd8 <memset>
 800a4a8:	4620      	mov	r0, r4
 800a4aa:	f001 fa3b 	bl	800b924 <rcutils_get_default_allocator>
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	7523      	strb	r3, [r4, #20]
 800a4b2:	4620      	mov	r0, r4
 800a4b4:	bd10      	pop	{r4, pc}
 800a4b6:	bf00      	nop

0800a4b8 <rcl_node_options_copy>:
 800a4b8:	b1d0      	cbz	r0, 800a4f0 <rcl_node_options_copy+0x38>
 800a4ba:	b570      	push	{r4, r5, r6, lr}
 800a4bc:	460c      	mov	r4, r1
 800a4be:	b1a9      	cbz	r1, 800a4ec <rcl_node_options_copy+0x34>
 800a4c0:	4288      	cmp	r0, r1
 800a4c2:	4684      	mov	ip, r0
 800a4c4:	d012      	beq.n	800a4ec <rcl_node_options_copy+0x34>
 800a4c6:	4605      	mov	r5, r0
 800a4c8:	8a86      	ldrh	r6, [r0, #20]
 800a4ca:	468e      	mov	lr, r1
 800a4cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a4ce:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a4d2:	682b      	ldr	r3, [r5, #0]
 800a4d4:	f8ce 3000 	str.w	r3, [lr]
 800a4d8:	f10c 0118 	add.w	r1, ip, #24
 800a4dc:	2250      	movs	r2, #80	@ 0x50
 800a4de:	82a6      	strh	r6, [r4, #20]
 800a4e0:	f104 0018 	add.w	r0, r4, #24
 800a4e4:	f00d fd9b 	bl	801801e <memcpy>
 800a4e8:	2000      	movs	r0, #0
 800a4ea:	bd70      	pop	{r4, r5, r6, pc}
 800a4ec:	200b      	movs	r0, #11
 800a4ee:	bd70      	pop	{r4, r5, r6, pc}
 800a4f0:	200b      	movs	r0, #11
 800a4f2:	4770      	bx	lr

0800a4f4 <rcl_get_zero_initialized_publisher>:
 800a4f4:	4b01      	ldr	r3, [pc, #4]	@ (800a4fc <rcl_get_zero_initialized_publisher+0x8>)
 800a4f6:	6818      	ldr	r0, [r3, #0]
 800a4f8:	4770      	bx	lr
 800a4fa:	bf00      	nop
 800a4fc:	08019fec 	.word	0x08019fec

0800a500 <rcl_publisher_init>:
 800a500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a504:	b088      	sub	sp, #32
 800a506:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800a508:	2d00      	cmp	r5, #0
 800a50a:	d069      	beq.n	800a5e0 <rcl_publisher_init+0xe0>
 800a50c:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800a510:	4604      	mov	r4, r0
 800a512:	4648      	mov	r0, r9
 800a514:	460e      	mov	r6, r1
 800a516:	4690      	mov	r8, r2
 800a518:	461f      	mov	r7, r3
 800a51a:	f001 fa11 	bl	800b940 <rcutils_allocator_is_valid>
 800a51e:	2800      	cmp	r0, #0
 800a520:	d05e      	beq.n	800a5e0 <rcl_publisher_init+0xe0>
 800a522:	2c00      	cmp	r4, #0
 800a524:	d05c      	beq.n	800a5e0 <rcl_publisher_init+0xe0>
 800a526:	f8d4 a000 	ldr.w	sl, [r4]
 800a52a:	f1ba 0f00 	cmp.w	sl, #0
 800a52e:	d004      	beq.n	800a53a <rcl_publisher_init+0x3a>
 800a530:	2764      	movs	r7, #100	@ 0x64
 800a532:	4638      	mov	r0, r7
 800a534:	b008      	add	sp, #32
 800a536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a53a:	4630      	mov	r0, r6
 800a53c:	f7ff ff86 	bl	800a44c <rcl_node_is_valid>
 800a540:	2800      	cmp	r0, #0
 800a542:	d052      	beq.n	800a5ea <rcl_publisher_init+0xea>
 800a544:	f1b8 0f00 	cmp.w	r8, #0
 800a548:	d04a      	beq.n	800a5e0 <rcl_publisher_init+0xe0>
 800a54a:	2f00      	cmp	r7, #0
 800a54c:	d048      	beq.n	800a5e0 <rcl_publisher_init+0xe0>
 800a54e:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800a552:	aa07      	add	r2, sp, #28
 800a554:	9205      	str	r2, [sp, #20]
 800a556:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800a55a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a55e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800a562:	f8cd a01c 	str.w	sl, [sp, #28]
 800a566:	4639      	mov	r1, r7
 800a568:	e899 000c 	ldmia.w	r9, {r2, r3}
 800a56c:	4630      	mov	r0, r6
 800a56e:	f006 fa4f 	bl	8010a10 <rcl_node_resolve_name>
 800a572:	4607      	mov	r7, r0
 800a574:	2800      	cmp	r0, #0
 800a576:	d14f      	bne.n	800a618 <rcl_publisher_init+0x118>
 800a578:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800a57a:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800a57c:	20c8      	movs	r0, #200	@ 0xc8
 800a57e:	4798      	blx	r3
 800a580:	6020      	str	r0, [r4, #0]
 800a582:	2800      	cmp	r0, #0
 800a584:	d04e      	beq.n	800a624 <rcl_publisher_init+0x124>
 800a586:	4630      	mov	r0, r6
 800a588:	f7ff ff82 	bl	800a490 <rcl_node_get_rmw_handle>
 800a58c:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800a590:	9300      	str	r3, [sp, #0]
 800a592:	9a07      	ldr	r2, [sp, #28]
 800a594:	6827      	ldr	r7, [r4, #0]
 800a596:	462b      	mov	r3, r5
 800a598:	4641      	mov	r1, r8
 800a59a:	f001 fe55 	bl	800c248 <rmw_create_publisher>
 800a59e:	6823      	ldr	r3, [r4, #0]
 800a5a0:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800a5a4:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800a5a8:	b370      	cbz	r0, 800a608 <rcl_publisher_init+0x108>
 800a5aa:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800a5ae:	f001 ff29 	bl	800c404 <rmw_publisher_get_actual_qos>
 800a5b2:	6823      	ldr	r3, [r4, #0]
 800a5b4:	4607      	mov	r7, r0
 800a5b6:	b9d0      	cbnz	r0, 800a5ee <rcl_publisher_init+0xee>
 800a5b8:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800a5bc:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800a5c0:	4629      	mov	r1, r5
 800a5c2:	2270      	movs	r2, #112	@ 0x70
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	f00d fd2a 	bl	801801e <memcpy>
 800a5ca:	6832      	ldr	r2, [r6, #0]
 800a5cc:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800a5d0:	9807      	ldr	r0, [sp, #28]
 800a5d2:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800a5d4:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800a5d6:	4798      	blx	r3
 800a5d8:	4638      	mov	r0, r7
 800a5da:	b008      	add	sp, #32
 800a5dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5e0:	270b      	movs	r7, #11
 800a5e2:	4638      	mov	r0, r7
 800a5e4:	b008      	add	sp, #32
 800a5e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5ea:	27c8      	movs	r7, #200	@ 0xc8
 800a5ec:	e7a1      	b.n	800a532 <rcl_publisher_init+0x32>
 800a5ee:	b18b      	cbz	r3, 800a614 <rcl_publisher_init+0x114>
 800a5f0:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800a5f4:	b142      	cbz	r2, 800a608 <rcl_publisher_init+0x108>
 800a5f6:	4630      	mov	r0, r6
 800a5f8:	f7ff ff4a 	bl	800a490 <rcl_node_get_rmw_handle>
 800a5fc:	6823      	ldr	r3, [r4, #0]
 800a5fe:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800a602:	f001 ff0f 	bl	800c424 <rmw_destroy_publisher>
 800a606:	6823      	ldr	r3, [r4, #0]
 800a608:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800a60a:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800a60c:	4618      	mov	r0, r3
 800a60e:	4790      	blx	r2
 800a610:	2300      	movs	r3, #0
 800a612:	6023      	str	r3, [r4, #0]
 800a614:	2701      	movs	r7, #1
 800a616:	e7db      	b.n	800a5d0 <rcl_publisher_init+0xd0>
 800a618:	2867      	cmp	r0, #103	@ 0x67
 800a61a:	d0d9      	beq.n	800a5d0 <rcl_publisher_init+0xd0>
 800a61c:	2869      	cmp	r0, #105	@ 0x69
 800a61e:	d003      	beq.n	800a628 <rcl_publisher_init+0x128>
 800a620:	280a      	cmp	r0, #10
 800a622:	d1f7      	bne.n	800a614 <rcl_publisher_init+0x114>
 800a624:	270a      	movs	r7, #10
 800a626:	e7d3      	b.n	800a5d0 <rcl_publisher_init+0xd0>
 800a628:	2767      	movs	r7, #103	@ 0x67
 800a62a:	e7d1      	b.n	800a5d0 <rcl_publisher_init+0xd0>

0800a62c <rcl_publisher_fini>:
 800a62c:	b570      	push	{r4, r5, r6, lr}
 800a62e:	b300      	cbz	r0, 800a672 <rcl_publisher_fini+0x46>
 800a630:	4604      	mov	r4, r0
 800a632:	4608      	mov	r0, r1
 800a634:	460d      	mov	r5, r1
 800a636:	f7ff ff01 	bl	800a43c <rcl_node_is_valid_except_context>
 800a63a:	b1f0      	cbz	r0, 800a67a <rcl_publisher_fini+0x4e>
 800a63c:	6823      	ldr	r3, [r4, #0]
 800a63e:	b1ab      	cbz	r3, 800a66c <rcl_publisher_fini+0x40>
 800a640:	4628      	mov	r0, r5
 800a642:	6d5e      	ldr	r6, [r3, #84]	@ 0x54
 800a644:	6e1d      	ldr	r5, [r3, #96]	@ 0x60
 800a646:	f7ff ff23 	bl	800a490 <rcl_node_get_rmw_handle>
 800a64a:	b1c8      	cbz	r0, 800a680 <rcl_publisher_fini+0x54>
 800a64c:	6823      	ldr	r3, [r4, #0]
 800a64e:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800a652:	f001 fee7 	bl	800c424 <rmw_destroy_publisher>
 800a656:	4603      	mov	r3, r0
 800a658:	4629      	mov	r1, r5
 800a65a:	6820      	ldr	r0, [r4, #0]
 800a65c:	1e1d      	subs	r5, r3, #0
 800a65e:	bf18      	it	ne
 800a660:	2501      	movne	r5, #1
 800a662:	47b0      	blx	r6
 800a664:	2300      	movs	r3, #0
 800a666:	6023      	str	r3, [r4, #0]
 800a668:	4628      	mov	r0, r5
 800a66a:	bd70      	pop	{r4, r5, r6, pc}
 800a66c:	461d      	mov	r5, r3
 800a66e:	4628      	mov	r0, r5
 800a670:	bd70      	pop	{r4, r5, r6, pc}
 800a672:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 800a676:	4628      	mov	r0, r5
 800a678:	bd70      	pop	{r4, r5, r6, pc}
 800a67a:	25c8      	movs	r5, #200	@ 0xc8
 800a67c:	4628      	mov	r0, r5
 800a67e:	bd70      	pop	{r4, r5, r6, pc}
 800a680:	250b      	movs	r5, #11
 800a682:	e7f1      	b.n	800a668 <rcl_publisher_fini+0x3c>

0800a684 <rcl_publisher_get_default_options>:
 800a684:	b570      	push	{r4, r5, r6, lr}
 800a686:	4d14      	ldr	r5, [pc, #80]	@ (800a6d8 <rcl_publisher_get_default_options+0x54>)
 800a688:	4914      	ldr	r1, [pc, #80]	@ (800a6dc <rcl_publisher_get_default_options+0x58>)
 800a68a:	b088      	sub	sp, #32
 800a68c:	4604      	mov	r4, r0
 800a68e:	2250      	movs	r2, #80	@ 0x50
 800a690:	4628      	mov	r0, r5
 800a692:	f00d fcc4 	bl	801801e <memcpy>
 800a696:	a802      	add	r0, sp, #8
 800a698:	f001 f944 	bl	800b924 <rcutils_get_default_allocator>
 800a69c:	f10d 0c08 	add.w	ip, sp, #8
 800a6a0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a6a4:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800a6a8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a6ac:	466e      	mov	r6, sp
 800a6ae:	f8dc 3000 	ldr.w	r3, [ip]
 800a6b2:	f8ce 3000 	str.w	r3, [lr]
 800a6b6:	4630      	mov	r0, r6
 800a6b8:	f001 fb42 	bl	800bd40 <rmw_get_default_publisher_options>
 800a6bc:	e896 0003 	ldmia.w	r6, {r0, r1}
 800a6c0:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800a6c4:	e883 0003 	stmia.w	r3, {r0, r1}
 800a6c8:	2270      	movs	r2, #112	@ 0x70
 800a6ca:	4629      	mov	r1, r5
 800a6cc:	4620      	mov	r0, r4
 800a6ce:	f00d fca6 	bl	801801e <memcpy>
 800a6d2:	4620      	mov	r0, r4
 800a6d4:	b008      	add	sp, #32
 800a6d6:	bd70      	pop	{r4, r5, r6, pc}
 800a6d8:	2000c788 	.word	0x2000c788
 800a6dc:	08019ff0 	.word	0x08019ff0

0800a6e0 <rcl_publish>:
 800a6e0:	b1f8      	cbz	r0, 800a722 <rcl_publish+0x42>
 800a6e2:	6803      	ldr	r3, [r0, #0]
 800a6e4:	b570      	push	{r4, r5, r6, lr}
 800a6e6:	4604      	mov	r4, r0
 800a6e8:	b1b3      	cbz	r3, 800a718 <rcl_publish+0x38>
 800a6ea:	4616      	mov	r6, r2
 800a6ec:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800a6f0:	b192      	cbz	r2, 800a718 <rcl_publish+0x38>
 800a6f2:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800a6f6:	460d      	mov	r5, r1
 800a6f8:	f005 fe4e 	bl	8010398 <rcl_context_is_valid>
 800a6fc:	b160      	cbz	r0, 800a718 <rcl_publish+0x38>
 800a6fe:	6823      	ldr	r3, [r4, #0]
 800a700:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800a704:	b140      	cbz	r0, 800a718 <rcl_publish+0x38>
 800a706:	b155      	cbz	r5, 800a71e <rcl_publish+0x3e>
 800a708:	4632      	mov	r2, r6
 800a70a:	4629      	mov	r1, r5
 800a70c:	f001 fd3c 	bl	800c188 <rmw_publish>
 800a710:	3800      	subs	r0, #0
 800a712:	bf18      	it	ne
 800a714:	2001      	movne	r0, #1
 800a716:	bd70      	pop	{r4, r5, r6, pc}
 800a718:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800a71c:	bd70      	pop	{r4, r5, r6, pc}
 800a71e:	200b      	movs	r0, #11
 800a720:	bd70      	pop	{r4, r5, r6, pc}
 800a722:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800a726:	4770      	bx	lr

0800a728 <rcl_publisher_is_valid>:
 800a728:	b1a0      	cbz	r0, 800a754 <rcl_publisher_is_valid+0x2c>
 800a72a:	6803      	ldr	r3, [r0, #0]
 800a72c:	b510      	push	{r4, lr}
 800a72e:	4604      	mov	r4, r0
 800a730:	b173      	cbz	r3, 800a750 <rcl_publisher_is_valid+0x28>
 800a732:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800a736:	b15a      	cbz	r2, 800a750 <rcl_publisher_is_valid+0x28>
 800a738:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800a73c:	f005 fe2c 	bl	8010398 <rcl_context_is_valid>
 800a740:	b130      	cbz	r0, 800a750 <rcl_publisher_is_valid+0x28>
 800a742:	6823      	ldr	r3, [r4, #0]
 800a744:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800a748:	3800      	subs	r0, #0
 800a74a:	bf18      	it	ne
 800a74c:	2001      	movne	r0, #1
 800a74e:	bd10      	pop	{r4, pc}
 800a750:	2000      	movs	r0, #0
 800a752:	bd10      	pop	{r4, pc}
 800a754:	2000      	movs	r0, #0
 800a756:	4770      	bx	lr

0800a758 <rcl_publisher_is_valid_except_context>:
 800a758:	b130      	cbz	r0, 800a768 <rcl_publisher_is_valid_except_context+0x10>
 800a75a:	6800      	ldr	r0, [r0, #0]
 800a75c:	b120      	cbz	r0, 800a768 <rcl_publisher_is_valid_except_context+0x10>
 800a75e:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800a762:	3800      	subs	r0, #0
 800a764:	bf18      	it	ne
 800a766:	2001      	movne	r0, #1
 800a768:	4770      	bx	lr
 800a76a:	bf00      	nop

0800a76c <rcl_get_zero_initialized_subscription>:
 800a76c:	4b01      	ldr	r3, [pc, #4]	@ (800a774 <rcl_get_zero_initialized_subscription+0x8>)
 800a76e:	6818      	ldr	r0, [r3, #0]
 800a770:	4770      	bx	lr
 800a772:	bf00      	nop
 800a774:	0801a040 	.word	0x0801a040

0800a778 <rcl_subscription_init>:
 800a778:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a77c:	b089      	sub	sp, #36	@ 0x24
 800a77e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800a780:	b1d6      	cbz	r6, 800a7b8 <rcl_subscription_init+0x40>
 800a782:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 800a786:	4604      	mov	r4, r0
 800a788:	4648      	mov	r0, r9
 800a78a:	460d      	mov	r5, r1
 800a78c:	4690      	mov	r8, r2
 800a78e:	461f      	mov	r7, r3
 800a790:	f001 f8d6 	bl	800b940 <rcutils_allocator_is_valid>
 800a794:	b180      	cbz	r0, 800a7b8 <rcl_subscription_init+0x40>
 800a796:	b17c      	cbz	r4, 800a7b8 <rcl_subscription_init+0x40>
 800a798:	4628      	mov	r0, r5
 800a79a:	f7ff fe57 	bl	800a44c <rcl_node_is_valid>
 800a79e:	2800      	cmp	r0, #0
 800a7a0:	d054      	beq.n	800a84c <rcl_subscription_init+0xd4>
 800a7a2:	f1b8 0f00 	cmp.w	r8, #0
 800a7a6:	d007      	beq.n	800a7b8 <rcl_subscription_init+0x40>
 800a7a8:	b137      	cbz	r7, 800a7b8 <rcl_subscription_init+0x40>
 800a7aa:	6823      	ldr	r3, [r4, #0]
 800a7ac:	b14b      	cbz	r3, 800a7c2 <rcl_subscription_init+0x4a>
 800a7ae:	2764      	movs	r7, #100	@ 0x64
 800a7b0:	4638      	mov	r0, r7
 800a7b2:	b009      	add	sp, #36	@ 0x24
 800a7b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a7b8:	270b      	movs	r7, #11
 800a7ba:	4638      	mov	r0, r7
 800a7bc:	b009      	add	sp, #36	@ 0x24
 800a7be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a7c2:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800a7c6:	aa07      	add	r2, sp, #28
 800a7c8:	9205      	str	r2, [sp, #20]
 800a7ca:	9307      	str	r3, [sp, #28]
 800a7cc:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 800a7d0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a7d4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800a7d8:	4639      	mov	r1, r7
 800a7da:	e899 000c 	ldmia.w	r9, {r2, r3}
 800a7de:	4628      	mov	r0, r5
 800a7e0:	f006 f916 	bl	8010a10 <rcl_node_resolve_name>
 800a7e4:	4607      	mov	r7, r0
 800a7e6:	2800      	cmp	r0, #0
 800a7e8:	d15f      	bne.n	800a8aa <rcl_subscription_init+0x132>
 800a7ea:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	@ 0x5c
 800a7ee:	21c8      	movs	r1, #200	@ 0xc8
 800a7f0:	2001      	movs	r0, #1
 800a7f2:	4798      	blx	r3
 800a7f4:	6020      	str	r0, [r4, #0]
 800a7f6:	2800      	cmp	r0, #0
 800a7f8:	d05d      	beq.n	800a8b6 <rcl_subscription_init+0x13e>
 800a7fa:	4628      	mov	r0, r5
 800a7fc:	f7ff fe48 	bl	800a490 <rcl_node_get_rmw_handle>
 800a800:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 800a804:	9300      	str	r3, [sp, #0]
 800a806:	9a07      	ldr	r2, [sp, #28]
 800a808:	6827      	ldr	r7, [r4, #0]
 800a80a:	4641      	mov	r1, r8
 800a80c:	4633      	mov	r3, r6
 800a80e:	f001 fe9f 	bl	800c550 <rmw_create_subscription>
 800a812:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
 800a816:	6827      	ldr	r7, [r4, #0]
 800a818:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 800a81c:	b348      	cbz	r0, 800a872 <rcl_subscription_init+0xfa>
 800a81e:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 800a822:	f001 ff77 	bl	800c714 <rmw_subscription_get_actual_qos>
 800a826:	4607      	mov	r7, r0
 800a828:	b9a8      	cbnz	r0, 800a856 <rcl_subscription_init+0xde>
 800a82a:	6820      	ldr	r0, [r4, #0]
 800a82c:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 800a830:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 800a834:	2270      	movs	r2, #112	@ 0x70
 800a836:	4631      	mov	r1, r6
 800a838:	f00d fbf1 	bl	801801e <memcpy>
 800a83c:	9807      	ldr	r0, [sp, #28]
 800a83e:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800a840:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800a842:	4798      	blx	r3
 800a844:	4638      	mov	r0, r7
 800a846:	b009      	add	sp, #36	@ 0x24
 800a848:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a84c:	27c8      	movs	r7, #200	@ 0xc8
 800a84e:	4638      	mov	r0, r7
 800a850:	b009      	add	sp, #36	@ 0x24
 800a852:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a856:	6827      	ldr	r7, [r4, #0]
 800a858:	b32f      	cbz	r7, 800a8a6 <rcl_subscription_init+0x12e>
 800a85a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a85e:	b14b      	cbz	r3, 800a874 <rcl_subscription_init+0xfc>
 800a860:	4628      	mov	r0, r5
 800a862:	f7ff fe15 	bl	800a490 <rcl_node_get_rmw_handle>
 800a866:	6823      	ldr	r3, [r4, #0]
 800a868:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800a86c:	f001 ff62 	bl	800c734 <rmw_destroy_subscription>
 800a870:	6827      	ldr	r7, [r4, #0]
 800a872:	b197      	cbz	r7, 800a89a <rcl_subscription_init+0x122>
 800a874:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 800a878:	4628      	mov	r0, r5
 800a87a:	f001 f861 	bl	800b940 <rcutils_allocator_is_valid>
 800a87e:	b158      	cbz	r0, 800a898 <rcl_subscription_init+0x120>
 800a880:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a882:	b148      	cbz	r0, 800a898 <rcl_subscription_init+0x120>
 800a884:	4629      	mov	r1, r5
 800a886:	f001 fa5f 	bl	800bd48 <rmw_subscription_content_filter_options_fini>
 800a88a:	4605      	mov	r5, r0
 800a88c:	b9b8      	cbnz	r0, 800a8be <rcl_subscription_init+0x146>
 800a88e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a890:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800a892:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a894:	4798      	blx	r3
 800a896:	66fd      	str	r5, [r7, #108]	@ 0x6c
 800a898:	6827      	ldr	r7, [r4, #0]
 800a89a:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800a89c:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800a89e:	4638      	mov	r0, r7
 800a8a0:	4798      	blx	r3
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	6023      	str	r3, [r4, #0]
 800a8a6:	2701      	movs	r7, #1
 800a8a8:	e7c8      	b.n	800a83c <rcl_subscription_init+0xc4>
 800a8aa:	2867      	cmp	r0, #103	@ 0x67
 800a8ac:	d0c6      	beq.n	800a83c <rcl_subscription_init+0xc4>
 800a8ae:	2869      	cmp	r0, #105	@ 0x69
 800a8b0:	d003      	beq.n	800a8ba <rcl_subscription_init+0x142>
 800a8b2:	280a      	cmp	r0, #10
 800a8b4:	d1f7      	bne.n	800a8a6 <rcl_subscription_init+0x12e>
 800a8b6:	270a      	movs	r7, #10
 800a8b8:	e7c0      	b.n	800a83c <rcl_subscription_init+0xc4>
 800a8ba:	2767      	movs	r7, #103	@ 0x67
 800a8bc:	e7be      	b.n	800a83c <rcl_subscription_init+0xc4>
 800a8be:	f005 fd4d 	bl	801035c <rcl_convert_rmw_ret_to_rcl_ret>
 800a8c2:	6827      	ldr	r7, [r4, #0]
 800a8c4:	e7e9      	b.n	800a89a <rcl_subscription_init+0x122>
 800a8c6:	bf00      	nop

0800a8c8 <rcl_subscription_fini>:
 800a8c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8cc:	2800      	cmp	r0, #0
 800a8ce:	d039      	beq.n	800a944 <rcl_subscription_fini+0x7c>
 800a8d0:	4604      	mov	r4, r0
 800a8d2:	4608      	mov	r0, r1
 800a8d4:	460d      	mov	r5, r1
 800a8d6:	f7ff fdb1 	bl	800a43c <rcl_node_is_valid_except_context>
 800a8da:	2800      	cmp	r0, #0
 800a8dc:	d037      	beq.n	800a94e <rcl_subscription_fini+0x86>
 800a8de:	6823      	ldr	r3, [r4, #0]
 800a8e0:	b363      	cbz	r3, 800a93c <rcl_subscription_fini+0x74>
 800a8e2:	4628      	mov	r0, r5
 800a8e4:	6d5f      	ldr	r7, [r3, #84]	@ 0x54
 800a8e6:	f8d3 8060 	ldr.w	r8, [r3, #96]	@ 0x60
 800a8ea:	f7ff fdd1 	bl	800a490 <rcl_node_get_rmw_handle>
 800a8ee:	b390      	cbz	r0, 800a956 <rcl_subscription_fini+0x8e>
 800a8f0:	6823      	ldr	r3, [r4, #0]
 800a8f2:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800a8f6:	f001 ff1d 	bl	800c734 <rmw_destroy_subscription>
 800a8fa:	6826      	ldr	r6, [r4, #0]
 800a8fc:	1e05      	subs	r5, r0, #0
 800a8fe:	bf18      	it	ne
 800a900:	2501      	movne	r5, #1
 800a902:	b37e      	cbz	r6, 800a964 <rcl_subscription_fini+0x9c>
 800a904:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 800a908:	4648      	mov	r0, r9
 800a90a:	f001 f819 	bl	800b940 <rcutils_allocator_is_valid>
 800a90e:	b358      	cbz	r0, 800a968 <rcl_subscription_fini+0xa0>
 800a910:	6ef0      	ldr	r0, [r6, #108]	@ 0x6c
 800a912:	b150      	cbz	r0, 800a92a <rcl_subscription_fini+0x62>
 800a914:	4649      	mov	r1, r9
 800a916:	f001 fa17 	bl	800bd48 <rmw_subscription_content_filter_options_fini>
 800a91a:	4681      	mov	r9, r0
 800a91c:	b9e8      	cbnz	r0, 800a95a <rcl_subscription_fini+0x92>
 800a91e:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800a920:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800a922:	6ef0      	ldr	r0, [r6, #108]	@ 0x6c
 800a924:	4798      	blx	r3
 800a926:	f8c6 906c 	str.w	r9, [r6, #108]	@ 0x6c
 800a92a:	6826      	ldr	r6, [r4, #0]
 800a92c:	4630      	mov	r0, r6
 800a92e:	4641      	mov	r1, r8
 800a930:	47b8      	blx	r7
 800a932:	2300      	movs	r3, #0
 800a934:	6023      	str	r3, [r4, #0]
 800a936:	4628      	mov	r0, r5
 800a938:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a93c:	461d      	mov	r5, r3
 800a93e:	4628      	mov	r0, r5
 800a940:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a944:	f44f 75c8 	mov.w	r5, #400	@ 0x190
 800a948:	4628      	mov	r0, r5
 800a94a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a94e:	25c8      	movs	r5, #200	@ 0xc8
 800a950:	4628      	mov	r0, r5
 800a952:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a956:	250b      	movs	r5, #11
 800a958:	e7f1      	b.n	800a93e <rcl_subscription_fini+0x76>
 800a95a:	f005 fcff 	bl	801035c <rcl_convert_rmw_ret_to_rcl_ret>
 800a95e:	6826      	ldr	r6, [r4, #0]
 800a960:	2800      	cmp	r0, #0
 800a962:	d0e3      	beq.n	800a92c <rcl_subscription_fini+0x64>
 800a964:	2501      	movs	r5, #1
 800a966:	e7e1      	b.n	800a92c <rcl_subscription_fini+0x64>
 800a968:	6826      	ldr	r6, [r4, #0]
 800a96a:	2501      	movs	r5, #1
 800a96c:	e7de      	b.n	800a92c <rcl_subscription_fini+0x64>
 800a96e:	bf00      	nop

0800a970 <rcl_subscription_get_default_options>:
 800a970:	b570      	push	{r4, r5, r6, lr}
 800a972:	4d14      	ldr	r5, [pc, #80]	@ (800a9c4 <rcl_subscription_get_default_options+0x54>)
 800a974:	4914      	ldr	r1, [pc, #80]	@ (800a9c8 <rcl_subscription_get_default_options+0x58>)
 800a976:	b08a      	sub	sp, #40	@ 0x28
 800a978:	4604      	mov	r4, r0
 800a97a:	2250      	movs	r2, #80	@ 0x50
 800a97c:	4628      	mov	r0, r5
 800a97e:	f00d fb4e 	bl	801801e <memcpy>
 800a982:	a804      	add	r0, sp, #16
 800a984:	f000 ffce 	bl	800b924 <rcutils_get_default_allocator>
 800a988:	f10d 0c10 	add.w	ip, sp, #16
 800a98c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a990:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800a994:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a998:	466e      	mov	r6, sp
 800a99a:	f8dc 3000 	ldr.w	r3, [ip]
 800a99e:	f8ce 3000 	str.w	r3, [lr]
 800a9a2:	4630      	mov	r0, r6
 800a9a4:	f001 f9ea 	bl	800bd7c <rmw_get_default_subscription_options>
 800a9a8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800a9ac:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800a9b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a9b4:	2270      	movs	r2, #112	@ 0x70
 800a9b6:	4629      	mov	r1, r5
 800a9b8:	4620      	mov	r0, r4
 800a9ba:	f00d fb30 	bl	801801e <memcpy>
 800a9be:	4620      	mov	r0, r4
 800a9c0:	b00a      	add	sp, #40	@ 0x28
 800a9c2:	bd70      	pop	{r4, r5, r6, pc}
 800a9c4:	2000c7f8 	.word	0x2000c7f8
 800a9c8:	0801a048 	.word	0x0801a048

0800a9cc <rcl_take>:
 800a9cc:	2800      	cmp	r0, #0
 800a9ce:	d04a      	beq.n	800aa66 <rcl_take+0x9a>
 800a9d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9d4:	4604      	mov	r4, r0
 800a9d6:	6800      	ldr	r0, [r0, #0]
 800a9d8:	b0a4      	sub	sp, #144	@ 0x90
 800a9da:	2800      	cmp	r0, #0
 800a9dc:	d03b      	beq.n	800aa56 <rcl_take+0x8a>
 800a9de:	461f      	mov	r7, r3
 800a9e0:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d036      	beq.n	800aa56 <rcl_take+0x8a>
 800a9e8:	460e      	mov	r6, r1
 800a9ea:	2900      	cmp	r1, #0
 800a9ec:	d039      	beq.n	800aa62 <rcl_take+0x96>
 800a9ee:	4615      	mov	r5, r2
 800a9f0:	2a00      	cmp	r2, #0
 800a9f2:	d03c      	beq.n	800aa6e <rcl_take+0xa2>
 800a9f4:	a802      	add	r0, sp, #8
 800a9f6:	f001 f9c7 	bl	800bd88 <rmw_get_zero_initialized_message_info>
 800a9fa:	f10d 0c08 	add.w	ip, sp, #8
 800a9fe:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800aa02:	46ae      	mov	lr, r5
 800aa04:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800aa08:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800aa0c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800aa10:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800aa14:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800aa18:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 800aa1c:	f04f 0800 	mov.w	r8, #0
 800aa20:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 800aa24:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 800aa28:	6822      	ldr	r2, [r4, #0]
 800aa2a:	462b      	mov	r3, r5
 800aa2c:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 800aa30:	9700      	str	r7, [sp, #0]
 800aa32:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 800aa36:	4631      	mov	r1, r6
 800aa38:	f001 fedc 	bl	800c7f4 <rmw_take_with_info>
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	b9c0      	cbnz	r0, 800aa72 <rcl_take+0xa6>
 800aa40:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 800aa44:	f240 1291 	movw	r2, #401	@ 0x191
 800aa48:	2900      	cmp	r1, #0
 800aa4a:	bf08      	it	eq
 800aa4c:	4613      	moveq	r3, r2
 800aa4e:	4618      	mov	r0, r3
 800aa50:	b024      	add	sp, #144	@ 0x90
 800aa52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa56:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	b024      	add	sp, #144	@ 0x90
 800aa5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa62:	230b      	movs	r3, #11
 800aa64:	e7f3      	b.n	800aa4e <rcl_take+0x82>
 800aa66:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	4770      	bx	lr
 800aa6e:	ad14      	add	r5, sp, #80	@ 0x50
 800aa70:	e7c0      	b.n	800a9f4 <rcl_take+0x28>
 800aa72:	f005 fc73 	bl	801035c <rcl_convert_rmw_ret_to_rcl_ret>
 800aa76:	4603      	mov	r3, r0
 800aa78:	e7e9      	b.n	800aa4e <rcl_take+0x82>
 800aa7a:	bf00      	nop

0800aa7c <rcl_subscription_get_rmw_handle>:
 800aa7c:	b118      	cbz	r0, 800aa86 <rcl_subscription_get_rmw_handle+0xa>
 800aa7e:	6800      	ldr	r0, [r0, #0]
 800aa80:	b108      	cbz	r0, 800aa86 <rcl_subscription_get_rmw_handle+0xa>
 800aa82:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 800aa86:	4770      	bx	lr

0800aa88 <rcl_subscription_is_valid>:
 800aa88:	b130      	cbz	r0, 800aa98 <rcl_subscription_is_valid+0x10>
 800aa8a:	6800      	ldr	r0, [r0, #0]
 800aa8c:	b120      	cbz	r0, 800aa98 <rcl_subscription_is_valid+0x10>
 800aa8e:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 800aa92:	3800      	subs	r0, #0
 800aa94:	bf18      	it	ne
 800aa96:	2001      	movne	r0, #1
 800aa98:	4770      	bx	lr
 800aa9a:	bf00      	nop

0800aa9c <_rclc_check_for_new_data>:
 800aa9c:	2800      	cmp	r0, #0
 800aa9e:	d046      	beq.n	800ab2e <_rclc_check_for_new_data+0x92>
 800aaa0:	b510      	push	{r4, lr}
 800aaa2:	7802      	ldrb	r2, [r0, #0]
 800aaa4:	b084      	sub	sp, #16
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	2a0a      	cmp	r2, #10
 800aaaa:	d842      	bhi.n	800ab32 <_rclc_check_for_new_data+0x96>
 800aaac:	e8df f002 	tbb	[pc, r2]
 800aab0:	14181212 	.word	0x14181212
 800aab4:	06060614 	.word	0x06060614
 800aab8:	2e1a      	.short	0x2e1a
 800aaba:	16          	.byte	0x16
 800aabb:	00          	.byte	0x00
 800aabc:	6a0a      	ldr	r2, [r1, #32]
 800aabe:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800aac0:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800aac4:	2000      	movs	r0, #0
 800aac6:	1a12      	subs	r2, r2, r0
 800aac8:	bf18      	it	ne
 800aaca:	2201      	movne	r2, #1
 800aacc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800aad0:	b004      	add	sp, #16
 800aad2:	bd10      	pop	{r4, pc}
 800aad4:	680a      	ldr	r2, [r1, #0]
 800aad6:	e7f2      	b.n	800aabe <_rclc_check_for_new_data+0x22>
 800aad8:	698a      	ldr	r2, [r1, #24]
 800aada:	e7f0      	b.n	800aabe <_rclc_check_for_new_data+0x22>
 800aadc:	688a      	ldr	r2, [r1, #8]
 800aade:	e7ee      	b.n	800aabe <_rclc_check_for_new_data+0x22>
 800aae0:	690a      	ldr	r2, [r1, #16]
 800aae2:	e7ec      	b.n	800aabe <_rclc_check_for_new_data+0x22>
 800aae4:	685c      	ldr	r4, [r3, #4]
 800aae6:	4608      	mov	r0, r1
 800aae8:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800aaec:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800aaf0:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800aaf4:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800aaf8:	9300      	str	r3, [sp, #0]
 800aafa:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800aafe:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800ab02:	f104 0110 	add.w	r1, r4, #16
 800ab06:	f007 fb0b 	bl	8012120 <rcl_action_client_wait_set_get_entities_ready>
 800ab0a:	e7e1      	b.n	800aad0 <_rclc_check_for_new_data+0x34>
 800ab0c:	685c      	ldr	r4, [r3, #4]
 800ab0e:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800ab12:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800ab16:	e9cd 3200 	strd	r3, r2, [sp]
 800ab1a:	4608      	mov	r0, r1
 800ab1c:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800ab20:	f104 0220 	add.w	r2, r4, #32
 800ab24:	f104 0110 	add.w	r1, r4, #16
 800ab28:	f007 fd12 	bl	8012550 <rcl_action_server_wait_set_get_entities_ready>
 800ab2c:	e7d0      	b.n	800aad0 <_rclc_check_for_new_data+0x34>
 800ab2e:	200b      	movs	r0, #11
 800ab30:	4770      	bx	lr
 800ab32:	2001      	movs	r0, #1
 800ab34:	e7cc      	b.n	800aad0 <_rclc_check_for_new_data+0x34>
 800ab36:	bf00      	nop

0800ab38 <_rclc_take_new_data>:
 800ab38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab3a:	b09b      	sub	sp, #108	@ 0x6c
 800ab3c:	2800      	cmp	r0, #0
 800ab3e:	f000 8088 	beq.w	800ac52 <_rclc_take_new_data+0x11a>
 800ab42:	7803      	ldrb	r3, [r0, #0]
 800ab44:	4604      	mov	r4, r0
 800ab46:	2b0a      	cmp	r3, #10
 800ab48:	f200 8167 	bhi.w	800ae1a <_rclc_take_new_data+0x2e2>
 800ab4c:	e8df f003 	tbb	[pc, r3]
 800ab50:	44152d2d 	.word	0x44152d2d
 800ab54:	19191944 	.word	0x19191944
 800ab58:	065a      	.short	0x065a
 800ab5a:	15          	.byte	0x15
 800ab5b:	00          	.byte	0x00
 800ab5c:	6840      	ldr	r0, [r0, #4]
 800ab5e:	f890 3020 	ldrb.w	r3, [r0, #32]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	f040 80b2 	bne.w	800accc <_rclc_take_new_data+0x194>
 800ab68:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	f040 80e4 	bne.w	800ad3a <_rclc_take_new_data+0x202>
 800ab72:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d16f      	bne.n	800ac5a <_rclc_take_new_data+0x122>
 800ab7a:	2500      	movs	r5, #0
 800ab7c:	4628      	mov	r0, r5
 800ab7e:	b01b      	add	sp, #108	@ 0x6c
 800ab80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab82:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800ab84:	6a0b      	ldr	r3, [r1, #32]
 800ab86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d0f5      	beq.n	800ab7a <_rclc_take_new_data+0x42>
 800ab8e:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800ab92:	f104 0110 	add.w	r1, r4, #16
 800ab96:	f006 f8e5 	bl	8010d64 <rcl_take_request>
 800ab9a:	4605      	mov	r5, r0
 800ab9c:	2800      	cmp	r0, #0
 800ab9e:	d0ec      	beq.n	800ab7a <_rclc_take_new_data+0x42>
 800aba0:	f240 2359 	movw	r3, #601	@ 0x259
 800aba4:	4298      	cmp	r0, r3
 800aba6:	d013      	beq.n	800abd0 <_rclc_take_new_data+0x98>
 800aba8:	e029      	b.n	800abfe <_rclc_take_new_data+0xc6>
 800abaa:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800abac:	680b      	ldr	r3, [r1, #0]
 800abae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d0e1      	beq.n	800ab7a <_rclc_take_new_data+0x42>
 800abb6:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800abba:	2300      	movs	r3, #0
 800abbc:	aa0a      	add	r2, sp, #40	@ 0x28
 800abbe:	f7ff ff05 	bl	800a9cc <rcl_take>
 800abc2:	4605      	mov	r5, r0
 800abc4:	2800      	cmp	r0, #0
 800abc6:	d0d9      	beq.n	800ab7c <_rclc_take_new_data+0x44>
 800abc8:	f240 1391 	movw	r3, #401	@ 0x191
 800abcc:	4298      	cmp	r0, r3
 800abce:	d116      	bne.n	800abfe <_rclc_take_new_data+0xc6>
 800abd0:	2300      	movs	r3, #0
 800abd2:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800abd6:	e7d1      	b.n	800ab7c <_rclc_take_new_data+0x44>
 800abd8:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800abda:	698b      	ldr	r3, [r1, #24]
 800abdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d0ca      	beq.n	800ab7a <_rclc_take_new_data+0x42>
 800abe4:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800abe8:	f104 0110 	add.w	r1, r4, #16
 800abec:	f005 fb64 	bl	80102b8 <rcl_take_response>
 800abf0:	4605      	mov	r5, r0
 800abf2:	2800      	cmp	r0, #0
 800abf4:	d0c1      	beq.n	800ab7a <_rclc_take_new_data+0x42>
 800abf6:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800abfa:	4298      	cmp	r0, r3
 800abfc:	d0be      	beq.n	800ab7c <_rclc_take_new_data+0x44>
 800abfe:	f000 fedb 	bl	800b9b8 <rcutils_reset_error>
 800ac02:	e7bb      	b.n	800ab7c <_rclc_take_new_data+0x44>
 800ac04:	6840      	ldr	r0, [r0, #4]
 800ac06:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d17d      	bne.n	800ad0a <_rclc_take_new_data+0x1d2>
 800ac0e:	69c3      	ldr	r3, [r0, #28]
 800ac10:	b11b      	cbz	r3, 800ac1a <_rclc_take_new_data+0xe2>
 800ac12:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d144      	bne.n	800aca4 <_rclc_take_new_data+0x16c>
 800ac1a:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	f040 80ac 	bne.w	800ad7c <_rclc_take_new_data+0x244>
 800ac24:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d0a6      	beq.n	800ab7a <_rclc_take_new_data+0x42>
 800ac2c:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800ac2e:	a90a      	add	r1, sp, #40	@ 0x28
 800ac30:	3010      	adds	r0, #16
 800ac32:	f007 f94d 	bl	8011ed0 <rcl_action_take_result_response>
 800ac36:	4605      	mov	r5, r0
 800ac38:	2800      	cmp	r0, #0
 800ac3a:	d1e0      	bne.n	800abfe <_rclc_take_new_data+0xc6>
 800ac3c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ac40:	6860      	ldr	r0, [r4, #4]
 800ac42:	f007 fda9 	bl	8012798 <rclc_action_find_handle_by_result_request_sequence_number>
 800ac46:	2800      	cmp	r0, #0
 800ac48:	d098      	beq.n	800ab7c <_rclc_take_new_data+0x44>
 800ac4a:	2301      	movs	r3, #1
 800ac4c:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800ac50:	e794      	b.n	800ab7c <_rclc_take_new_data+0x44>
 800ac52:	250b      	movs	r5, #11
 800ac54:	4628      	mov	r0, r5
 800ac56:	b01b      	add	sp, #108	@ 0x6c
 800ac58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac5a:	ae04      	add	r6, sp, #16
 800ac5c:	aa0a      	add	r2, sp, #40	@ 0x28
 800ac5e:	3010      	adds	r0, #16
 800ac60:	4631      	mov	r1, r6
 800ac62:	f007 fba9 	bl	80123b8 <rcl_action_take_cancel_request>
 800ac66:	4605      	mov	r5, r0
 800ac68:	2800      	cmp	r0, #0
 800ac6a:	d1c8      	bne.n	800abfe <_rclc_take_new_data+0xc6>
 800ac6c:	6860      	ldr	r0, [r4, #4]
 800ac6e:	a90a      	add	r1, sp, #40	@ 0x28
 800ac70:	f007 fd50 	bl	8012714 <rclc_action_find_goal_handle_by_uuid>
 800ac74:	4607      	mov	r7, r0
 800ac76:	2800      	cmp	r0, #0
 800ac78:	f000 80bb 	beq.w	800adf2 <_rclc_take_new_data+0x2ba>
 800ac7c:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800ac80:	2101      	movs	r1, #1
 800ac82:	f007 fcd1 	bl	8012628 <rcl_action_transition_goal_state>
 800ac86:	2803      	cmp	r0, #3
 800ac88:	4684      	mov	ip, r0
 800ac8a:	f040 80a7 	bne.w	800addc <_rclc_take_new_data+0x2a4>
 800ac8e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800ac90:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800ac94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ac96:	e896 0003 	ldmia.w	r6, {r0, r1}
 800ac9a:	e884 0003 	stmia.w	r4, {r0, r1}
 800ac9e:	f887 c008 	strb.w	ip, [r7, #8]
 800aca2:	e76b      	b.n	800ab7c <_rclc_take_new_data+0x44>
 800aca4:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800aca6:	3010      	adds	r0, #16
 800aca8:	f007 f992 	bl	8011fd0 <rcl_action_take_feedback>
 800acac:	4605      	mov	r5, r0
 800acae:	2800      	cmp	r0, #0
 800acb0:	d1a5      	bne.n	800abfe <_rclc_take_new_data+0xc6>
 800acb2:	6860      	ldr	r0, [r4, #4]
 800acb4:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800acb6:	f007 fd2d 	bl	8012714 <rclc_action_find_goal_handle_by_uuid>
 800acba:	4603      	mov	r3, r0
 800acbc:	2800      	cmp	r0, #0
 800acbe:	f000 80a3 	beq.w	800ae08 <_rclc_take_new_data+0x2d0>
 800acc2:	2201      	movs	r2, #1
 800acc4:	6860      	ldr	r0, [r4, #4]
 800acc6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800acca:	e7a6      	b.n	800ac1a <_rclc_take_new_data+0xe2>
 800accc:	f007 fcfc 	bl	80126c8 <rclc_action_take_goal_handle>
 800acd0:	4606      	mov	r6, r0
 800acd2:	6860      	ldr	r0, [r4, #4]
 800acd4:	2e00      	cmp	r6, #0
 800acd6:	f43f af47 	beq.w	800ab68 <_rclc_take_new_data+0x30>
 800acda:	6070      	str	r0, [r6, #4]
 800acdc:	69f2      	ldr	r2, [r6, #28]
 800acde:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800ace2:	3010      	adds	r0, #16
 800ace4:	f007 fab0 	bl	8012248 <rcl_action_take_goal_request>
 800ace8:	4605      	mov	r5, r0
 800acea:	2800      	cmp	r0, #0
 800acec:	f040 808e 	bne.w	800ae0c <_rclc_take_new_data+0x2d4>
 800acf0:	69f7      	ldr	r7, [r6, #28]
 800acf2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800acf4:	7235      	strb	r5, [r6, #8]
 800acf6:	f8c6 0009 	str.w	r0, [r6, #9]
 800acfa:	f8c6 100d 	str.w	r1, [r6, #13]
 800acfe:	6860      	ldr	r0, [r4, #4]
 800ad00:	f8c6 2011 	str.w	r2, [r6, #17]
 800ad04:	f8c6 3015 	str.w	r3, [r6, #21]
 800ad08:	e72e      	b.n	800ab68 <_rclc_take_new_data+0x30>
 800ad0a:	aa04      	add	r2, sp, #16
 800ad0c:	a90a      	add	r1, sp, #40	@ 0x28
 800ad0e:	3010      	adds	r0, #16
 800ad10:	f007 f866 	bl	8011de0 <rcl_action_take_goal_response>
 800ad14:	4605      	mov	r5, r0
 800ad16:	2800      	cmp	r0, #0
 800ad18:	f47f af71 	bne.w	800abfe <_rclc_take_new_data+0xc6>
 800ad1c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ad20:	6860      	ldr	r0, [r4, #4]
 800ad22:	f007 fd27 	bl	8012774 <rclc_action_find_handle_by_goal_request_sequence_number>
 800ad26:	b130      	cbz	r0, 800ad36 <_rclc_take_new_data+0x1fe>
 800ad28:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800ad2c:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800ad30:	2201      	movs	r2, #1
 800ad32:	f880 2020 	strb.w	r2, [r0, #32]
 800ad36:	6860      	ldr	r0, [r4, #4]
 800ad38:	e769      	b.n	800ac0e <_rclc_take_new_data+0xd6>
 800ad3a:	aa04      	add	r2, sp, #16
 800ad3c:	3010      	adds	r0, #16
 800ad3e:	a90a      	add	r1, sp, #40	@ 0x28
 800ad40:	f007 fafa 	bl	8012338 <rcl_action_take_result_request>
 800ad44:	4605      	mov	r5, r0
 800ad46:	2800      	cmp	r0, #0
 800ad48:	f47f af59 	bne.w	800abfe <_rclc_take_new_data+0xc6>
 800ad4c:	6860      	ldr	r0, [r4, #4]
 800ad4e:	a904      	add	r1, sp, #16
 800ad50:	f007 fce0 	bl	8012714 <rclc_action_find_goal_handle_by_uuid>
 800ad54:	4607      	mov	r7, r0
 800ad56:	b160      	cbz	r0, 800ad72 <_rclc_take_new_data+0x23a>
 800ad58:	ad0a      	add	r5, sp, #40	@ 0x28
 800ad5a:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800ad5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ad60:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800ad62:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ad66:	f04f 0c02 	mov.w	ip, #2
 800ad6a:	e886 0003 	stmia.w	r6, {r0, r1}
 800ad6e:	f887 c008 	strb.w	ip, [r7, #8]
 800ad72:	6860      	ldr	r0, [r4, #4]
 800ad74:	2300      	movs	r3, #0
 800ad76:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800ad7a:	e6fa      	b.n	800ab72 <_rclc_take_new_data+0x3a>
 800ad7c:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800ad80:	a90a      	add	r1, sp, #40	@ 0x28
 800ad82:	3010      	adds	r0, #16
 800ad84:	f007 f8e4 	bl	8011f50 <rcl_action_take_cancel_response>
 800ad88:	4605      	mov	r5, r0
 800ad8a:	2800      	cmp	r0, #0
 800ad8c:	f47f af37 	bne.w	800abfe <_rclc_take_new_data+0xc6>
 800ad90:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ad94:	6860      	ldr	r0, [r4, #4]
 800ad96:	f007 fd11 	bl	80127bc <rclc_action_find_handle_by_cancel_request_sequence_number>
 800ad9a:	4606      	mov	r6, r0
 800ad9c:	6860      	ldr	r0, [r4, #4]
 800ad9e:	2e00      	cmp	r6, #0
 800ada0:	f43f af40 	beq.w	800ac24 <_rclc_take_new_data+0xec>
 800ada4:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800ada6:	2701      	movs	r7, #1
 800ada8:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800adaa:	2b00      	cmp	r3, #0
 800adac:	f43f af3a 	beq.w	800ac24 <_rclc_take_new_data+0xec>
 800adb0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800adb2:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800adb6:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800adba:	f007 fcab 	bl	8012714 <rclc_action_find_goal_handle_by_uuid>
 800adbe:	b138      	cbz	r0, 800add0 <_rclc_take_new_data+0x298>
 800adc0:	6860      	ldr	r0, [r4, #4]
 800adc2:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800adc4:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800adc8:	3501      	adds	r5, #1
 800adca:	42ab      	cmp	r3, r5
 800adcc:	d8f0      	bhi.n	800adb0 <_rclc_take_new_data+0x278>
 800adce:	e729      	b.n	800ac24 <_rclc_take_new_data+0xec>
 800add0:	6860      	ldr	r0, [r4, #4]
 800add2:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800add4:	3501      	adds	r5, #1
 800add6:	42ab      	cmp	r3, r5
 800add8:	d8ea      	bhi.n	800adb0 <_rclc_take_new_data+0x278>
 800adda:	e723      	b.n	800ac24 <_rclc_take_new_data+0xec>
 800addc:	ab06      	add	r3, sp, #24
 800adde:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ade0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800ade4:	2103      	movs	r1, #3
 800ade6:	e896 000c 	ldmia.w	r6, {r2, r3}
 800adea:	6860      	ldr	r0, [r4, #4]
 800adec:	f007 fd5c 	bl	80128a8 <rclc_action_server_goal_cancel_reject>
 800adf0:	e6c4      	b.n	800ab7c <_rclc_take_new_data+0x44>
 800adf2:	ab06      	add	r3, sp, #24
 800adf4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800adf6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800adfa:	2102      	movs	r1, #2
 800adfc:	e896 000c 	ldmia.w	r6, {r2, r3}
 800ae00:	6860      	ldr	r0, [r4, #4]
 800ae02:	f007 fd51 	bl	80128a8 <rclc_action_server_goal_cancel_reject>
 800ae06:	e6b9      	b.n	800ab7c <_rclc_take_new_data+0x44>
 800ae08:	6860      	ldr	r0, [r4, #4]
 800ae0a:	e706      	b.n	800ac1a <_rclc_take_new_data+0xe2>
 800ae0c:	6860      	ldr	r0, [r4, #4]
 800ae0e:	4631      	mov	r1, r6
 800ae10:	f007 fc6a 	bl	80126e8 <rclc_action_remove_used_goal_handle>
 800ae14:	f000 fdd0 	bl	800b9b8 <rcutils_reset_error>
 800ae18:	e6b0      	b.n	800ab7c <_rclc_take_new_data+0x44>
 800ae1a:	2501      	movs	r5, #1
 800ae1c:	e6ae      	b.n	800ab7c <_rclc_take_new_data+0x44>
 800ae1e:	bf00      	nop

0800ae20 <_rclc_execute.part.0>:
 800ae20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae22:	7803      	ldrb	r3, [r0, #0]
 800ae24:	b087      	sub	sp, #28
 800ae26:	4604      	mov	r4, r0
 800ae28:	2b0a      	cmp	r3, #10
 800ae2a:	f200 8136 	bhi.w	800b09a <_rclc_execute.part.0+0x27a>
 800ae2e:	e8df f003 	tbb	[pc, r3]
 800ae32:	435e      	.short	0x435e
 800ae34:	06a1664f 	.word	0x06a1664f
 800ae38:	6c1e0606 	.word	0x6c1e0606
 800ae3c:	59          	.byte	0x59
 800ae3d:	00          	.byte	0x00
 800ae3e:	2b06      	cmp	r3, #6
 800ae40:	f000 8122 	beq.w	800b088 <_rclc_execute.part.0+0x268>
 800ae44:	2b07      	cmp	r3, #7
 800ae46:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800ae48:	f040 8118 	bne.w	800b07c <_rclc_execute.part.0+0x25c>
 800ae4c:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800ae50:	6880      	ldr	r0, [r0, #8]
 800ae52:	4798      	blx	r3
 800ae54:	f104 0110 	add.w	r1, r4, #16
 800ae58:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800ae5a:	6860      	ldr	r0, [r4, #4]
 800ae5c:	f005 ffc2 	bl	8010de4 <rcl_send_response>
 800ae60:	2800      	cmp	r0, #0
 800ae62:	d033      	beq.n	800aecc <_rclc_execute.part.0+0xac>
 800ae64:	9005      	str	r0, [sp, #20]
 800ae66:	f000 fda7 	bl	800b9b8 <rcutils_reset_error>
 800ae6a:	9805      	ldr	r0, [sp, #20]
 800ae6c:	e02e      	b.n	800aecc <_rclc_execute.part.0+0xac>
 800ae6e:	6840      	ldr	r0, [r0, #4]
 800ae70:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	f000 8086 	beq.w	800af86 <_rclc_execute.part.0+0x166>
 800ae7a:	2600      	movs	r6, #0
 800ae7c:	2701      	movs	r7, #1
 800ae7e:	e004      	b.n	800ae8a <_rclc_execute.part.0+0x6a>
 800ae80:	f007 fbfc 	bl	801267c <rclc_action_send_result_request>
 800ae84:	b998      	cbnz	r0, 800aeae <_rclc_execute.part.0+0x8e>
 800ae86:	722f      	strb	r7, [r5, #8]
 800ae88:	6860      	ldr	r0, [r4, #4]
 800ae8a:	f007 fca9 	bl	80127e0 <rclc_action_find_first_handle_with_goal_response>
 800ae8e:	4605      	mov	r5, r0
 800ae90:	2800      	cmp	r0, #0
 800ae92:	d077      	beq.n	800af84 <_rclc_execute.part.0+0x164>
 800ae94:	6863      	ldr	r3, [r4, #4]
 800ae96:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800ae98:	699b      	ldr	r3, [r3, #24]
 800ae9a:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800ae9e:	f885 6020 	strb.w	r6, [r5, #32]
 800aea2:	4798      	blx	r3
 800aea4:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800aea8:	4628      	mov	r0, r5
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d1e8      	bne.n	800ae80 <_rclc_execute.part.0+0x60>
 800aeae:	6860      	ldr	r0, [r4, #4]
 800aeb0:	4629      	mov	r1, r5
 800aeb2:	f007 fc19 	bl	80126e8 <rclc_action_remove_used_goal_handle>
 800aeb6:	e7e7      	b.n	800ae88 <_rclc_execute.part.0+0x68>
 800aeb8:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800aebc:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 800aec0:	2d00      	cmp	r5, #0
 800aec2:	f000 80c9 	beq.w	800b058 <_rclc_execute.part.0+0x238>
 800aec6:	6880      	ldr	r0, [r0, #8]
 800aec8:	4798      	blx	r3
 800aeca:	2000      	movs	r0, #0
 800aecc:	b007      	add	sp, #28
 800aece:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aed0:	6840      	ldr	r0, [r0, #4]
 800aed2:	f006 f845 	bl	8010f60 <rcl_timer_call>
 800aed6:	f240 3321 	movw	r3, #801	@ 0x321
 800aeda:	4298      	cmp	r0, r3
 800aedc:	d004      	beq.n	800aee8 <_rclc_execute.part.0+0xc8>
 800aede:	2800      	cmp	r0, #0
 800aee0:	d0f4      	beq.n	800aecc <_rclc_execute.part.0+0xac>
 800aee2:	e7bf      	b.n	800ae64 <_rclc_execute.part.0+0x44>
 800aee4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800aee6:	4798      	blx	r3
 800aee8:	2000      	movs	r0, #0
 800aeea:	b007      	add	sp, #28
 800aeec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aeee:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800aef2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800aef4:	b925      	cbnz	r5, 800af00 <_rclc_execute.part.0+0xe0>
 800aef6:	4628      	mov	r0, r5
 800aef8:	4798      	blx	r3
 800aefa:	4628      	mov	r0, r5
 800aefc:	e7e6      	b.n	800aecc <_rclc_execute.part.0+0xac>
 800aefe:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800af00:	68a0      	ldr	r0, [r4, #8]
 800af02:	4798      	blx	r3
 800af04:	2000      	movs	r0, #0
 800af06:	b007      	add	sp, #28
 800af08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af0a:	6840      	ldr	r0, [r0, #4]
 800af0c:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800af10:	bb3b      	cbnz	r3, 800af62 <_rclc_execute.part.0+0x142>
 800af12:	f890 3020 	ldrb.w	r3, [r0, #32]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d07b      	beq.n	800b012 <_rclc_execute.part.0+0x1f2>
 800af1a:	f640 0634 	movw	r6, #2100	@ 0x834
 800af1e:	2701      	movs	r7, #1
 800af20:	e007      	b.n	800af32 <_rclc_execute.part.0+0x112>
 800af22:	4628      	mov	r0, r5
 800af24:	f007 fc74 	bl	8012810 <rclc_action_server_response_goal_request>
 800af28:	6860      	ldr	r0, [r4, #4]
 800af2a:	4629      	mov	r1, r5
 800af2c:	f007 fbdc 	bl	80126e8 <rclc_action_remove_used_goal_handle>
 800af30:	6860      	ldr	r0, [r4, #4]
 800af32:	2100      	movs	r1, #0
 800af34:	f007 fc06 	bl	8012744 <rclc_action_find_first_handle_by_status>
 800af38:	4605      	mov	r5, r0
 800af3a:	2800      	cmp	r0, #0
 800af3c:	d066      	beq.n	800b00c <_rclc_execute.part.0+0x1ec>
 800af3e:	6863      	ldr	r3, [r4, #4]
 800af40:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800af42:	699b      	ldr	r3, [r3, #24]
 800af44:	4798      	blx	r3
 800af46:	42b0      	cmp	r0, r6
 800af48:	f04f 0100 	mov.w	r1, #0
 800af4c:	d1e9      	bne.n	800af22 <_rclc_execute.part.0+0x102>
 800af4e:	2101      	movs	r1, #1
 800af50:	4628      	mov	r0, r5
 800af52:	f007 fc5d 	bl	8012810 <rclc_action_server_response_goal_request>
 800af56:	722f      	strb	r7, [r5, #8]
 800af58:	e7ea      	b.n	800af30 <_rclc_execute.part.0+0x110>
 800af5a:	6848      	ldr	r0, [r1, #4]
 800af5c:	f007 fbc4 	bl	80126e8 <rclc_action_remove_used_goal_handle>
 800af60:	6860      	ldr	r0, [r4, #4]
 800af62:	f007 fbfb 	bl	801275c <rclc_action_find_first_terminated_handle>
 800af66:	4601      	mov	r1, r0
 800af68:	2800      	cmp	r0, #0
 800af6a:	d1f6      	bne.n	800af5a <_rclc_execute.part.0+0x13a>
 800af6c:	6860      	ldr	r0, [r4, #4]
 800af6e:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800af72:	e7ce      	b.n	800af12 <_rclc_execute.part.0+0xf2>
 800af74:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800af76:	6880      	ldr	r0, [r0, #8]
 800af78:	f104 0110 	add.w	r1, r4, #16
 800af7c:	4798      	blx	r3
 800af7e:	2000      	movs	r0, #0
 800af80:	b007      	add	sp, #28
 800af82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af84:	6860      	ldr	r0, [r4, #4]
 800af86:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800af8a:	b18b      	cbz	r3, 800afb0 <_rclc_execute.part.0+0x190>
 800af8c:	68c5      	ldr	r5, [r0, #12]
 800af8e:	b32d      	cbz	r5, 800afdc <_rclc_execute.part.0+0x1bc>
 800af90:	2600      	movs	r6, #0
 800af92:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800af96:	b143      	cbz	r3, 800afaa <_rclc_execute.part.0+0x18a>
 800af98:	69c3      	ldr	r3, [r0, #28]
 800af9a:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800af9e:	b123      	cbz	r3, 800afaa <_rclc_execute.part.0+0x18a>
 800afa0:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800afa2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800afa4:	4628      	mov	r0, r5
 800afa6:	4798      	blx	r3
 800afa8:	6860      	ldr	r0, [r4, #4]
 800afaa:	682d      	ldr	r5, [r5, #0]
 800afac:	2d00      	cmp	r5, #0
 800afae:	d1f0      	bne.n	800af92 <_rclc_execute.part.0+0x172>
 800afb0:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800afb4:	b193      	cbz	r3, 800afdc <_rclc_execute.part.0+0x1bc>
 800afb6:	68c5      	ldr	r5, [r0, #12]
 800afb8:	b185      	cbz	r5, 800afdc <_rclc_execute.part.0+0x1bc>
 800afba:	2600      	movs	r6, #0
 800afbc:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800afc0:	b14b      	cbz	r3, 800afd6 <_rclc_execute.part.0+0x1b6>
 800afc2:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800afc4:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800afc8:	b12b      	cbz	r3, 800afd6 <_rclc_execute.part.0+0x1b6>
 800afca:	4628      	mov	r0, r5
 800afcc:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800afd0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800afd2:	4798      	blx	r3
 800afd4:	6860      	ldr	r0, [r4, #4]
 800afd6:	682d      	ldr	r5, [r5, #0]
 800afd8:	2d00      	cmp	r5, #0
 800afda:	d1ef      	bne.n	800afbc <_rclc_execute.part.0+0x19c>
 800afdc:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d081      	beq.n	800aee8 <_rclc_execute.part.0+0xc8>
 800afe4:	2700      	movs	r7, #0
 800afe6:	e00b      	b.n	800b000 <_rclc_execute.part.0+0x1e0>
 800afe8:	6863      	ldr	r3, [r4, #4]
 800afea:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800afec:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800afee:	6a1e      	ldr	r6, [r3, #32]
 800aff0:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800aff4:	47b0      	blx	r6
 800aff6:	6860      	ldr	r0, [r4, #4]
 800aff8:	4629      	mov	r1, r5
 800affa:	f007 fb75 	bl	80126e8 <rclc_action_remove_used_goal_handle>
 800affe:	6860      	ldr	r0, [r4, #4]
 800b000:	f007 fbfa 	bl	80127f8 <rclc_action_find_first_handle_with_result_response>
 800b004:	4605      	mov	r5, r0
 800b006:	2800      	cmp	r0, #0
 800b008:	d1ee      	bne.n	800afe8 <_rclc_execute.part.0+0x1c8>
 800b00a:	e76d      	b.n	800aee8 <_rclc_execute.part.0+0xc8>
 800b00c:	6860      	ldr	r0, [r4, #4]
 800b00e:	f880 5020 	strb.w	r5, [r0, #32]
 800b012:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800b016:	2b00      	cmp	r3, #0
 800b018:	f43f af66 	beq.w	800aee8 <_rclc_execute.part.0+0xc8>
 800b01c:	68c5      	ldr	r5, [r0, #12]
 800b01e:	b1b5      	cbz	r5, 800b04e <_rclc_execute.part.0+0x22e>
 800b020:	2602      	movs	r6, #2
 800b022:	e001      	b.n	800b028 <_rclc_execute.part.0+0x208>
 800b024:	682d      	ldr	r5, [r5, #0]
 800b026:	b195      	cbz	r5, 800b04e <_rclc_execute.part.0+0x22e>
 800b028:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800b02c:	2b03      	cmp	r3, #3
 800b02e:	d1f9      	bne.n	800b024 <_rclc_execute.part.0+0x204>
 800b030:	69c3      	ldr	r3, [r0, #28]
 800b032:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800b034:	4628      	mov	r0, r5
 800b036:	4798      	blx	r3
 800b038:	4603      	mov	r3, r0
 800b03a:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800b03e:	4628      	mov	r0, r5
 800b040:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800b044:	b163      	cbz	r3, 800b060 <_rclc_execute.part.0+0x240>
 800b046:	f007 fc03 	bl	8012850 <rclc_action_server_goal_cancel_accept>
 800b04a:	6860      	ldr	r0, [r4, #4]
 800b04c:	e7ea      	b.n	800b024 <_rclc_execute.part.0+0x204>
 800b04e:	2300      	movs	r3, #0
 800b050:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800b054:	4618      	mov	r0, r3
 800b056:	e739      	b.n	800aecc <_rclc_execute.part.0+0xac>
 800b058:	4628      	mov	r0, r5
 800b05a:	4798      	blx	r3
 800b05c:	4628      	mov	r0, r5
 800b05e:	e735      	b.n	800aecc <_rclc_execute.part.0+0xac>
 800b060:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800b062:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800b066:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800b06a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b06e:	6860      	ldr	r0, [r4, #4]
 800b070:	2101      	movs	r1, #1
 800b072:	f007 fc19 	bl	80128a8 <rclc_action_server_goal_cancel_reject>
 800b076:	722e      	strb	r6, [r5, #8]
 800b078:	6860      	ldr	r0, [r4, #4]
 800b07a:	e7d3      	b.n	800b024 <_rclc_execute.part.0+0x204>
 800b07c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800b07e:	6880      	ldr	r0, [r0, #8]
 800b080:	4798      	blx	r3
 800b082:	f104 0110 	add.w	r1, r4, #16
 800b086:	e6e7      	b.n	800ae58 <_rclc_execute.part.0+0x38>
 800b088:	f100 0110 	add.w	r1, r0, #16
 800b08c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800b08e:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800b090:	6880      	ldr	r0, [r0, #8]
 800b092:	9105      	str	r1, [sp, #20]
 800b094:	4798      	blx	r3
 800b096:	9905      	ldr	r1, [sp, #20]
 800b098:	e6de      	b.n	800ae58 <_rclc_execute.part.0+0x38>
 800b09a:	2001      	movs	r0, #1
 800b09c:	e716      	b.n	800aecc <_rclc_execute.part.0+0xac>
 800b09e:	bf00      	nop

0800b0a0 <rclc_executor_trigger_any>:
 800b0a0:	2800      	cmp	r0, #0
 800b0a2:	d03f      	beq.n	800b124 <rclc_executor_trigger_any+0x84>
 800b0a4:	2900      	cmp	r1, #0
 800b0a6:	d03e      	beq.n	800b126 <rclc_executor_trigger_any+0x86>
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	2800      	cmp	r0, #0
 800b0b2:	d037      	beq.n	800b124 <rclc_executor_trigger_any+0x84>
 800b0b4:	b430      	push	{r4, r5}
 800b0b6:	f893 c000 	ldrb.w	ip, [r3]
 800b0ba:	f1bc 0f08 	cmp.w	ip, #8
 800b0be:	d11e      	bne.n	800b0fe <rclc_executor_trigger_any+0x5e>
 800b0c0:	685c      	ldr	r4, [r3, #4]
 800b0c2:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800b0c4:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800b0c8:	d105      	bne.n	800b0d6 <rclc_executor_trigger_any+0x36>
 800b0ca:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800b0ce:	b910      	cbnz	r0, 800b0d6 <rclc_executor_trigger_any+0x36>
 800b0d0:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800b0d4:	b128      	cbz	r0, 800b0e2 <rclc_executor_trigger_any+0x42>
 800b0d6:	bc30      	pop	{r4, r5}
 800b0d8:	4770      	bx	lr
 800b0da:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800b0de:	2800      	cmp	r0, #0
 800b0e0:	d1f9      	bne.n	800b0d6 <rclc_executor_trigger_any+0x36>
 800b0e2:	3201      	adds	r2, #1
 800b0e4:	4291      	cmp	r1, r2
 800b0e6:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800b0ea:	d018      	beq.n	800b11e <rclc_executor_trigger_any+0x7e>
 800b0ec:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800b0f0:	2800      	cmp	r0, #0
 800b0f2:	d0f0      	beq.n	800b0d6 <rclc_executor_trigger_any+0x36>
 800b0f4:	f893 c000 	ldrb.w	ip, [r3]
 800b0f8:	f1bc 0f08 	cmp.w	ip, #8
 800b0fc:	d0e0      	beq.n	800b0c0 <rclc_executor_trigger_any+0x20>
 800b0fe:	f1bc 0f09 	cmp.w	ip, #9
 800b102:	d1ea      	bne.n	800b0da <rclc_executor_trigger_any+0x3a>
 800b104:	685c      	ldr	r4, [r3, #4]
 800b106:	6a25      	ldr	r5, [r4, #32]
 800b108:	2d00      	cmp	r5, #0
 800b10a:	d1e4      	bne.n	800b0d6 <rclc_executor_trigger_any+0x36>
 800b10c:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800b110:	2800      	cmp	r0, #0
 800b112:	d1e0      	bne.n	800b0d6 <rclc_executor_trigger_any+0x36>
 800b114:	3201      	adds	r2, #1
 800b116:	4291      	cmp	r1, r2
 800b118:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800b11c:	d1e6      	bne.n	800b0ec <rclc_executor_trigger_any+0x4c>
 800b11e:	2000      	movs	r0, #0
 800b120:	bc30      	pop	{r4, r5}
 800b122:	4770      	bx	lr
 800b124:	4770      	bx	lr
 800b126:	4608      	mov	r0, r1
 800b128:	4770      	bx	lr
 800b12a:	bf00      	nop

0800b12c <rclc_executor_get_zero_initialized_executor>:
 800b12c:	b510      	push	{r4, lr}
 800b12e:	4903      	ldr	r1, [pc, #12]	@ (800b13c <rclc_executor_get_zero_initialized_executor+0x10>)
 800b130:	4604      	mov	r4, r0
 800b132:	2288      	movs	r2, #136	@ 0x88
 800b134:	f00c ff73 	bl	801801e <memcpy>
 800b138:	4620      	mov	r0, r4
 800b13a:	bd10      	pop	{r4, pc}
 800b13c:	0801a098 	.word	0x0801a098

0800b140 <rclc_executor_init>:
 800b140:	2800      	cmp	r0, #0
 800b142:	d05f      	beq.n	800b204 <rclc_executor_init+0xc4>
 800b144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b148:	460c      	mov	r4, r1
 800b14a:	b0b0      	sub	sp, #192	@ 0xc0
 800b14c:	2900      	cmp	r1, #0
 800b14e:	d051      	beq.n	800b1f4 <rclc_executor_init+0xb4>
 800b150:	4605      	mov	r5, r0
 800b152:	4618      	mov	r0, r3
 800b154:	4616      	mov	r6, r2
 800b156:	461f      	mov	r7, r3
 800b158:	f000 fbf2 	bl	800b940 <rcutils_allocator_is_valid>
 800b15c:	2800      	cmp	r0, #0
 800b15e:	d049      	beq.n	800b1f4 <rclc_executor_init+0xb4>
 800b160:	2e00      	cmp	r6, #0
 800b162:	d047      	beq.n	800b1f4 <rclc_executor_init+0xb4>
 800b164:	492c      	ldr	r1, [pc, #176]	@ (800b218 <rclc_executor_init+0xd8>)
 800b166:	2288      	movs	r2, #136	@ 0x88
 800b168:	a80e      	add	r0, sp, #56	@ 0x38
 800b16a:	f00c ff58 	bl	801801e <memcpy>
 800b16e:	a90e      	add	r1, sp, #56	@ 0x38
 800b170:	2288      	movs	r2, #136	@ 0x88
 800b172:	4628      	mov	r0, r5
 800b174:	f00c ff53 	bl	801801e <memcpy>
 800b178:	602c      	str	r4, [r5, #0]
 800b17a:	4668      	mov	r0, sp
 800b17c:	60ae      	str	r6, [r5, #8]
 800b17e:	466c      	mov	r4, sp
 800b180:	f006 f860 	bl	8011244 <rcl_get_zero_initialized_wait_set>
 800b184:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b186:	f105 0c14 	add.w	ip, r5, #20
 800b18a:	f8d7 8000 	ldr.w	r8, [r7]
 800b18e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b192:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b194:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b198:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b19a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b19e:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800b210 <rclc_executor_init+0xd0>
 800b1a2:	6823      	ldr	r3, [r4, #0]
 800b1a4:	f8cc 3000 	str.w	r3, [ip]
 800b1a8:	6939      	ldr	r1, [r7, #16]
 800b1aa:	612f      	str	r7, [r5, #16]
 800b1ac:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 800b1b0:	01b0      	lsls	r0, r6, #6
 800b1b2:	47c0      	blx	r8
 800b1b4:	6068      	str	r0, [r5, #4]
 800b1b6:	b338      	cbz	r0, 800b208 <rclc_executor_init+0xc8>
 800b1b8:	2400      	movs	r4, #0
 800b1ba:	e000      	b.n	800b1be <rclc_executor_init+0x7e>
 800b1bc:	6868      	ldr	r0, [r5, #4]
 800b1be:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800b1c2:	4631      	mov	r1, r6
 800b1c4:	3401      	adds	r4, #1
 800b1c6:	f000 fa73 	bl	800b6b0 <rclc_executor_handle_init>
 800b1ca:	42a6      	cmp	r6, r4
 800b1cc:	d1f6      	bne.n	800b1bc <rclc_executor_init+0x7c>
 800b1ce:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800b1d2:	f000 fa63 	bl	800b69c <rclc_executor_handle_counters_zero_init>
 800b1d6:	4a11      	ldr	r2, [pc, #68]	@ (800b21c <rclc_executor_init+0xdc>)
 800b1d8:	686b      	ldr	r3, [r5, #4]
 800b1da:	2000      	movs	r0, #0
 800b1dc:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 800b1e0:	b163      	cbz	r3, 800b1fc <rclc_executor_init+0xbc>
 800b1e2:	692b      	ldr	r3, [r5, #16]
 800b1e4:	b153      	cbz	r3, 800b1fc <rclc_executor_init+0xbc>
 800b1e6:	68ab      	ldr	r3, [r5, #8]
 800b1e8:	b143      	cbz	r3, 800b1fc <rclc_executor_init+0xbc>
 800b1ea:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 800b1ee:	b030      	add	sp, #192	@ 0xc0
 800b1f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1f4:	200b      	movs	r0, #11
 800b1f6:	b030      	add	sp, #192	@ 0xc0
 800b1f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	b030      	add	sp, #192	@ 0xc0
 800b200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b204:	200b      	movs	r0, #11
 800b206:	4770      	bx	lr
 800b208:	200a      	movs	r0, #10
 800b20a:	e7f4      	b.n	800b1f6 <rclc_executor_init+0xb6>
 800b20c:	f3af 8000 	nop.w
 800b210:	3b9aca00 	.word	0x3b9aca00
 800b214:	00000000 	.word	0x00000000
 800b218:	0801a098 	.word	0x0801a098
 800b21c:	0800b0a1 	.word	0x0800b0a1

0800b220 <rclc_executor_add_subscription>:
 800b220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b222:	f89d e018 	ldrb.w	lr, [sp, #24]
 800b226:	b338      	cbz	r0, 800b278 <rclc_executor_add_subscription+0x58>
 800b228:	b331      	cbz	r1, 800b278 <rclc_executor_add_subscription+0x58>
 800b22a:	b32a      	cbz	r2, 800b278 <rclc_executor_add_subscription+0x58>
 800b22c:	b323      	cbz	r3, 800b278 <rclc_executor_add_subscription+0x58>
 800b22e:	4604      	mov	r4, r0
 800b230:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
 800b234:	42a8      	cmp	r0, r5
 800b236:	d301      	bcc.n	800b23c <rclc_executor_add_subscription+0x1c>
 800b238:	2001      	movs	r0, #1
 800b23a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b23c:	6866      	ldr	r6, [r4, #4]
 800b23e:	0187      	lsls	r7, r0, #6
 800b240:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 800b244:	2500      	movs	r5, #0
 800b246:	55f5      	strb	r5, [r6, r7]
 800b248:	3001      	adds	r0, #1
 800b24a:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 800b24e:	f8cc 502c 	str.w	r5, [ip, #44]	@ 0x2c
 800b252:	2301      	movs	r3, #1
 800b254:	f104 0514 	add.w	r5, r4, #20
 800b258:	e9cc 1201 	strd	r1, r2, [ip, #4]
 800b25c:	f88c e001 	strb.w	lr, [ip, #1]
 800b260:	f8ac 3038 	strh.w	r3, [ip, #56]	@ 0x38
 800b264:	60e0      	str	r0, [r4, #12]
 800b266:	4628      	mov	r0, r5
 800b268:	f006 f800 	bl	801126c <rcl_wait_set_is_valid>
 800b26c:	b930      	cbnz	r0, 800b27c <rclc_executor_add_subscription+0x5c>
 800b26e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800b270:	3301      	adds	r3, #1
 800b272:	2000      	movs	r0, #0
 800b274:	64a3      	str	r3, [r4, #72]	@ 0x48
 800b276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b278:	200b      	movs	r0, #11
 800b27a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b27c:	4628      	mov	r0, r5
 800b27e:	f005 fffb 	bl	8011278 <rcl_wait_set_fini>
 800b282:	2800      	cmp	r0, #0
 800b284:	d0f3      	beq.n	800b26e <rclc_executor_add_subscription+0x4e>
 800b286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b288 <rclc_executor_prepare>:
 800b288:	2800      	cmp	r0, #0
 800b28a:	d044      	beq.n	800b316 <rclc_executor_prepare+0x8e>
 800b28c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b28e:	f100 0514 	add.w	r5, r0, #20
 800b292:	b09b      	sub	sp, #108	@ 0x6c
 800b294:	4604      	mov	r4, r0
 800b296:	4628      	mov	r0, r5
 800b298:	f005 ffe8 	bl	801126c <rcl_wait_set_is_valid>
 800b29c:	b110      	cbz	r0, 800b2a4 <rclc_executor_prepare+0x1c>
 800b29e:	2000      	movs	r0, #0
 800b2a0:	b01b      	add	sp, #108	@ 0x6c
 800b2a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b2a4:	4628      	mov	r0, r5
 800b2a6:	f005 ffe7 	bl	8011278 <rcl_wait_set_fini>
 800b2aa:	2800      	cmp	r0, #0
 800b2ac:	d130      	bne.n	800b310 <rclc_executor_prepare+0x88>
 800b2ae:	a80c      	add	r0, sp, #48	@ 0x30
 800b2b0:	f005 ffc8 	bl	8011244 <rcl_get_zero_initialized_wait_set>
 800b2b4:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800b2b8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b2bc:	46ae      	mov	lr, r5
 800b2be:	6927      	ldr	r7, [r4, #16]
 800b2c0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800b2c4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b2c8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800b2cc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b2d0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800b2d4:	f8dc 3000 	ldr.w	r3, [ip]
 800b2d8:	f8ce 3000 	str.w	r3, [lr]
 800b2dc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800b2de:	ae04      	add	r6, sp, #16
 800b2e0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800b2e2:	683b      	ldr	r3, [r7, #0]
 800b2e4:	6822      	ldr	r2, [r4, #0]
 800b2e6:	6033      	str	r3, [r6, #0]
 800b2e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b2ea:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800b2ec:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800b2f0:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 800b2f4:	e9cd 2100 	strd	r2, r1, [sp]
 800b2f8:	4628      	mov	r0, r5
 800b2fa:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800b2fc:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800b2fe:	f006 fab9 	bl	8011874 <rcl_wait_set_init>
 800b302:	2800      	cmp	r0, #0
 800b304:	d0cc      	beq.n	800b2a0 <rclc_executor_prepare+0x18>
 800b306:	900b      	str	r0, [sp, #44]	@ 0x2c
 800b308:	f000 fb56 	bl	800b9b8 <rcutils_reset_error>
 800b30c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800b30e:	e7c7      	b.n	800b2a0 <rclc_executor_prepare+0x18>
 800b310:	f000 fb52 	bl	800b9b8 <rcutils_reset_error>
 800b314:	e7cb      	b.n	800b2ae <rclc_executor_prepare+0x26>
 800b316:	200b      	movs	r0, #11
 800b318:	4770      	bx	lr
 800b31a:	bf00      	nop

0800b31c <rclc_executor_spin_some.part.0>:
 800b31c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b320:	f100 0614 	add.w	r6, r0, #20
 800b324:	b083      	sub	sp, #12
 800b326:	4691      	mov	r9, r2
 800b328:	4698      	mov	r8, r3
 800b32a:	4605      	mov	r5, r0
 800b32c:	f7ff ffac 	bl	800b288 <rclc_executor_prepare>
 800b330:	4630      	mov	r0, r6
 800b332:	f006 f86d 	bl	8011410 <rcl_wait_set_clear>
 800b336:	4607      	mov	r7, r0
 800b338:	2800      	cmp	r0, #0
 800b33a:	f040 80ed 	bne.w	800b518 <rclc_executor_spin_some.part.0+0x1fc>
 800b33e:	68ab      	ldr	r3, [r5, #8]
 800b340:	4604      	mov	r4, r0
 800b342:	b303      	cbz	r3, 800b386 <rclc_executor_spin_some.part.0+0x6a>
 800b344:	6869      	ldr	r1, [r5, #4]
 800b346:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800b34a:	01a2      	lsls	r2, r4, #6
 800b34c:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800b350:	b1cb      	cbz	r3, 800b386 <rclc_executor_spin_some.part.0+0x6a>
 800b352:	5c8b      	ldrb	r3, [r1, r2]
 800b354:	2b0a      	cmp	r3, #10
 800b356:	f200 80d8 	bhi.w	800b50a <rclc_executor_spin_some.part.0+0x1ee>
 800b35a:	e8df f003 	tbb	[pc, r3]
 800b35e:	9c9c      	.short	0x9c9c
 800b360:	068c8ca7 	.word	0x068c8ca7
 800b364:	bdc90606 	.word	0xbdc90606
 800b368:	b2          	.byte	0xb2
 800b369:	00          	.byte	0x00
 800b36a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b36e:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b372:	4630      	mov	r0, r6
 800b374:	f006 fb94 	bl	8011aa0 <rcl_wait_set_add_service>
 800b378:	2800      	cmp	r0, #0
 800b37a:	f040 8086 	bne.w	800b48a <rclc_executor_spin_some.part.0+0x16e>
 800b37e:	68ab      	ldr	r3, [r5, #8]
 800b380:	3401      	adds	r4, #1
 800b382:	429c      	cmp	r4, r3
 800b384:	d3de      	bcc.n	800b344 <rclc_executor_spin_some.part.0+0x28>
 800b386:	4643      	mov	r3, r8
 800b388:	464a      	mov	r2, r9
 800b38a:	4630      	mov	r0, r6
 800b38c:	f006 fbb4 	bl	8011af8 <rcl_wait>
 800b390:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 800b394:	2b00      	cmp	r3, #0
 800b396:	f000 80c7 	beq.w	800b528 <rclc_executor_spin_some.part.0+0x20c>
 800b39a:	2b01      	cmp	r3, #1
 800b39c:	f040 80b5 	bne.w	800b50a <rclc_executor_spin_some.part.0+0x1ee>
 800b3a0:	68ab      	ldr	r3, [r5, #8]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	f000 8159 	beq.w	800b65a <rclc_executor_spin_some.part.0+0x33e>
 800b3a8:	2400      	movs	r4, #0
 800b3aa:	46a0      	mov	r8, r4
 800b3ac:	f240 1991 	movw	r9, #401	@ 0x191
 800b3b0:	e00a      	b.n	800b3c8 <rclc_executor_spin_some.part.0+0xac>
 800b3b2:	f7ff fb73 	bl	800aa9c <_rclc_check_for_new_data>
 800b3b6:	4604      	mov	r4, r0
 800b3b8:	b110      	cbz	r0, 800b3c0 <rclc_executor_spin_some.part.0+0xa4>
 800b3ba:	4548      	cmp	r0, r9
 800b3bc:	f040 80b2 	bne.w	800b524 <rclc_executor_spin_some.part.0+0x208>
 800b3c0:	68ab      	ldr	r3, [r5, #8]
 800b3c2:	4598      	cmp	r8, r3
 800b3c4:	f080 8126 	bcs.w	800b614 <rclc_executor_spin_some.part.0+0x2f8>
 800b3c8:	686a      	ldr	r2, [r5, #4]
 800b3ca:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800b3ce:	4631      	mov	r1, r6
 800b3d0:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800b3d4:	f108 0801 	add.w	r8, r8, #1
 800b3d8:	f1bc 0f00 	cmp.w	ip, #0
 800b3dc:	d1e9      	bne.n	800b3b2 <rclc_executor_spin_some.part.0+0x96>
 800b3de:	4619      	mov	r1, r3
 800b3e0:	4610      	mov	r0, r2
 800b3e2:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800b3e6:	4798      	blx	r3
 800b3e8:	2800      	cmp	r0, #0
 800b3ea:	f000 809b 	beq.w	800b524 <rclc_executor_spin_some.part.0+0x208>
 800b3ee:	68ab      	ldr	r3, [r5, #8]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	f000 8097 	beq.w	800b524 <rclc_executor_spin_some.part.0+0x208>
 800b3f6:	f04f 0800 	mov.w	r8, #0
 800b3fa:	f240 1991 	movw	r9, #401	@ 0x191
 800b3fe:	e009      	b.n	800b414 <rclc_executor_spin_some.part.0+0xf8>
 800b400:	f7ff fb9a 	bl	800ab38 <_rclc_take_new_data>
 800b404:	4604      	mov	r4, r0
 800b406:	b110      	cbz	r0, 800b40e <rclc_executor_spin_some.part.0+0xf2>
 800b408:	4548      	cmp	r0, r9
 800b40a:	f040 808b 	bne.w	800b524 <rclc_executor_spin_some.part.0+0x208>
 800b40e:	68ab      	ldr	r3, [r5, #8]
 800b410:	4598      	cmp	r8, r3
 800b412:	d209      	bcs.n	800b428 <rclc_executor_spin_some.part.0+0x10c>
 800b414:	6868      	ldr	r0, [r5, #4]
 800b416:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800b41a:	4631      	mov	r1, r6
 800b41c:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800b420:	f108 0801 	add.w	r8, r8, #1
 800b424:	2a00      	cmp	r2, #0
 800b426:	d1eb      	bne.n	800b400 <rclc_executor_spin_some.part.0+0xe4>
 800b428:	2600      	movs	r6, #0
 800b42a:	b97b      	cbnz	r3, 800b44c <rclc_executor_spin_some.part.0+0x130>
 800b42c:	e07a      	b.n	800b524 <rclc_executor_spin_some.part.0+0x208>
 800b42e:	f812 200c 	ldrb.w	r2, [r2, ip]
 800b432:	2a08      	cmp	r2, #8
 800b434:	f000 80fd 	beq.w	800b632 <rclc_executor_spin_some.part.0+0x316>
 800b438:	2a09      	cmp	r2, #9
 800b43a:	f000 80ef 	beq.w	800b61c <rclc_executor_spin_some.part.0+0x300>
 800b43e:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800b442:	b98a      	cbnz	r2, 800b468 <rclc_executor_spin_some.part.0+0x14c>
 800b444:	3601      	adds	r6, #1
 800b446:	429e      	cmp	r6, r3
 800b448:	d262      	bcs.n	800b510 <rclc_executor_spin_some.part.0+0x1f4>
 800b44a:	2400      	movs	r4, #0
 800b44c:	686a      	ldr	r2, [r5, #4]
 800b44e:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800b452:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800b456:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800b45a:	2900      	cmp	r1, #0
 800b45c:	d062      	beq.n	800b524 <rclc_executor_spin_some.part.0+0x208>
 800b45e:	7841      	ldrb	r1, [r0, #1]
 800b460:	2900      	cmp	r1, #0
 800b462:	d0e4      	beq.n	800b42e <rclc_executor_spin_some.part.0+0x112>
 800b464:	2901      	cmp	r1, #1
 800b466:	d1ed      	bne.n	800b444 <rclc_executor_spin_some.part.0+0x128>
 800b468:	f7ff fcda 	bl	800ae20 <_rclc_execute.part.0>
 800b46c:	2800      	cmp	r0, #0
 800b46e:	f040 80b6 	bne.w	800b5de <rclc_executor_spin_some.part.0+0x2c2>
 800b472:	68ab      	ldr	r3, [r5, #8]
 800b474:	e7e6      	b.n	800b444 <rclc_executor_spin_some.part.0+0x128>
 800b476:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b47a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b47e:	4630      	mov	r0, r6
 800b480:	f006 fae2 	bl	8011a48 <rcl_wait_set_add_client>
 800b484:	2800      	cmp	r0, #0
 800b486:	f43f af7a 	beq.w	800b37e <rclc_executor_spin_some.part.0+0x62>
 800b48a:	9001      	str	r0, [sp, #4]
 800b48c:	f000 fa94 	bl	800b9b8 <rcutils_reset_error>
 800b490:	9801      	ldr	r0, [sp, #4]
 800b492:	4607      	mov	r7, r0
 800b494:	e03c      	b.n	800b510 <rclc_executor_spin_some.part.0+0x1f4>
 800b496:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b49a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b49e:	4630      	mov	r0, r6
 800b4a0:	f005 ff8a 	bl	80113b8 <rcl_wait_set_add_subscription>
 800b4a4:	2800      	cmp	r0, #0
 800b4a6:	f43f af6a 	beq.w	800b37e <rclc_executor_spin_some.part.0+0x62>
 800b4aa:	e7ee      	b.n	800b48a <rclc_executor_spin_some.part.0+0x16e>
 800b4ac:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b4b0:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b4b4:	4630      	mov	r0, r6
 800b4b6:	f006 fa97 	bl	80119e8 <rcl_wait_set_add_timer>
 800b4ba:	2800      	cmp	r0, #0
 800b4bc:	f43f af5f 	beq.w	800b37e <rclc_executor_spin_some.part.0+0x62>
 800b4c0:	e7e3      	b.n	800b48a <rclc_executor_spin_some.part.0+0x16e>
 800b4c2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b4c6:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b4ca:	4630      	mov	r0, r6
 800b4cc:	f006 fa60 	bl	8011990 <rcl_wait_set_add_guard_condition>
 800b4d0:	2800      	cmp	r0, #0
 800b4d2:	f43f af54 	beq.w	800b37e <rclc_executor_spin_some.part.0+0x62>
 800b4d6:	e7d8      	b.n	800b48a <rclc_executor_spin_some.part.0+0x16e>
 800b4d8:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b4dc:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b4e0:	3110      	adds	r1, #16
 800b4e2:	4630      	mov	r0, r6
 800b4e4:	f006 ffe0 	bl	80124a8 <rcl_action_wait_set_add_action_server>
 800b4e8:	2800      	cmp	r0, #0
 800b4ea:	f43f af48 	beq.w	800b37e <rclc_executor_spin_some.part.0+0x62>
 800b4ee:	e7cc      	b.n	800b48a <rclc_executor_spin_some.part.0+0x16e>
 800b4f0:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b4f4:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b4f8:	3110      	adds	r1, #16
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	4630      	mov	r0, r6
 800b4fe:	f006 fdab 	bl	8012058 <rcl_action_wait_set_add_action_client>
 800b502:	2800      	cmp	r0, #0
 800b504:	f43f af3b 	beq.w	800b37e <rclc_executor_spin_some.part.0+0x62>
 800b508:	e7bf      	b.n	800b48a <rclc_executor_spin_some.part.0+0x16e>
 800b50a:	f000 fa55 	bl	800b9b8 <rcutils_reset_error>
 800b50e:	2701      	movs	r7, #1
 800b510:	4638      	mov	r0, r7
 800b512:	b003      	add	sp, #12
 800b514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b518:	f000 fa4e 	bl	800b9b8 <rcutils_reset_error>
 800b51c:	4638      	mov	r0, r7
 800b51e:	b003      	add	sp, #12
 800b520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b524:	4627      	mov	r7, r4
 800b526:	e7f3      	b.n	800b510 <rclc_executor_spin_some.part.0+0x1f4>
 800b528:	68ab      	ldr	r3, [r5, #8]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	f000 8092 	beq.w	800b654 <rclc_executor_spin_some.part.0+0x338>
 800b530:	2400      	movs	r4, #0
 800b532:	46a0      	mov	r8, r4
 800b534:	f240 1991 	movw	r9, #401	@ 0x191
 800b538:	e008      	b.n	800b54c <rclc_executor_spin_some.part.0+0x230>
 800b53a:	f7ff faaf 	bl	800aa9c <_rclc_check_for_new_data>
 800b53e:	4604      	mov	r4, r0
 800b540:	b108      	cbz	r0, 800b546 <rclc_executor_spin_some.part.0+0x22a>
 800b542:	4548      	cmp	r0, r9
 800b544:	d1ee      	bne.n	800b524 <rclc_executor_spin_some.part.0+0x208>
 800b546:	68ab      	ldr	r3, [r5, #8]
 800b548:	4598      	cmp	r8, r3
 800b54a:	d265      	bcs.n	800b618 <rclc_executor_spin_some.part.0+0x2fc>
 800b54c:	686a      	ldr	r2, [r5, #4]
 800b54e:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800b552:	4631      	mov	r1, r6
 800b554:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800b558:	f108 0801 	add.w	r8, r8, #1
 800b55c:	f1bc 0f00 	cmp.w	ip, #0
 800b560:	d1eb      	bne.n	800b53a <rclc_executor_spin_some.part.0+0x21e>
 800b562:	4619      	mov	r1, r3
 800b564:	4610      	mov	r0, r2
 800b566:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800b56a:	4798      	blx	r3
 800b56c:	2800      	cmp	r0, #0
 800b56e:	d0d9      	beq.n	800b524 <rclc_executor_spin_some.part.0+0x208>
 800b570:	68ab      	ldr	r3, [r5, #8]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d0d6      	beq.n	800b524 <rclc_executor_spin_some.part.0+0x208>
 800b576:	f04f 0800 	mov.w	r8, #0
 800b57a:	f240 1991 	movw	r9, #401	@ 0x191
 800b57e:	f240 2a59 	movw	sl, #601	@ 0x259
 800b582:	e00e      	b.n	800b5a2 <rclc_executor_spin_some.part.0+0x286>
 800b584:	f813 300b 	ldrb.w	r3, [r3, fp]
 800b588:	2b08      	cmp	r3, #8
 800b58a:	d033      	beq.n	800b5f4 <rclc_executor_spin_some.part.0+0x2d8>
 800b58c:	2b09      	cmp	r3, #9
 800b58e:	d028      	beq.n	800b5e2 <rclc_executor_spin_some.part.0+0x2c6>
 800b590:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800b594:	b9fb      	cbnz	r3, 800b5d6 <rclc_executor_spin_some.part.0+0x2ba>
 800b596:	68ab      	ldr	r3, [r5, #8]
 800b598:	f108 0801 	add.w	r8, r8, #1
 800b59c:	4598      	cmp	r8, r3
 800b59e:	d2b7      	bcs.n	800b510 <rclc_executor_spin_some.part.0+0x1f4>
 800b5a0:	2400      	movs	r4, #0
 800b5a2:	6868      	ldr	r0, [r5, #4]
 800b5a4:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800b5a8:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800b5ac:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d0b7      	beq.n	800b524 <rclc_executor_spin_some.part.0+0x208>
 800b5b4:	4631      	mov	r1, r6
 800b5b6:	f7ff fabf 	bl	800ab38 <_rclc_take_new_data>
 800b5ba:	b118      	cbz	r0, 800b5c4 <rclc_executor_spin_some.part.0+0x2a8>
 800b5bc:	4548      	cmp	r0, r9
 800b5be:	d001      	beq.n	800b5c4 <rclc_executor_spin_some.part.0+0x2a8>
 800b5c0:	4550      	cmp	r0, sl
 800b5c2:	d10c      	bne.n	800b5de <rclc_executor_spin_some.part.0+0x2c2>
 800b5c4:	686b      	ldr	r3, [r5, #4]
 800b5c6:	eb13 000b 	adds.w	r0, r3, fp
 800b5ca:	d021      	beq.n	800b610 <rclc_executor_spin_some.part.0+0x2f4>
 800b5cc:	7842      	ldrb	r2, [r0, #1]
 800b5ce:	2a00      	cmp	r2, #0
 800b5d0:	d0d8      	beq.n	800b584 <rclc_executor_spin_some.part.0+0x268>
 800b5d2:	2a01      	cmp	r2, #1
 800b5d4:	d1df      	bne.n	800b596 <rclc_executor_spin_some.part.0+0x27a>
 800b5d6:	f7ff fc23 	bl	800ae20 <_rclc_execute.part.0>
 800b5da:	2800      	cmp	r0, #0
 800b5dc:	d0db      	beq.n	800b596 <rclc_executor_spin_some.part.0+0x27a>
 800b5de:	4607      	mov	r7, r0
 800b5e0:	e796      	b.n	800b510 <rclc_executor_spin_some.part.0+0x1f4>
 800b5e2:	6843      	ldr	r3, [r0, #4]
 800b5e4:	6a1a      	ldr	r2, [r3, #32]
 800b5e6:	2a00      	cmp	r2, #0
 800b5e8:	d1f5      	bne.n	800b5d6 <rclc_executor_spin_some.part.0+0x2ba>
 800b5ea:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d0d1      	beq.n	800b596 <rclc_executor_spin_some.part.0+0x27a>
 800b5f2:	e7f0      	b.n	800b5d6 <rclc_executor_spin_some.part.0+0x2ba>
 800b5f4:	6843      	ldr	r3, [r0, #4]
 800b5f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b5f8:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800b5fc:	d1eb      	bne.n	800b5d6 <rclc_executor_spin_some.part.0+0x2ba>
 800b5fe:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800b602:	2a00      	cmp	r2, #0
 800b604:	d1e7      	bne.n	800b5d6 <rclc_executor_spin_some.part.0+0x2ba>
 800b606:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d0c3      	beq.n	800b596 <rclc_executor_spin_some.part.0+0x27a>
 800b60e:	e7e2      	b.n	800b5d6 <rclc_executor_spin_some.part.0+0x2ba>
 800b610:	270b      	movs	r7, #11
 800b612:	e77d      	b.n	800b510 <rclc_executor_spin_some.part.0+0x1f4>
 800b614:	686a      	ldr	r2, [r5, #4]
 800b616:	e6e2      	b.n	800b3de <rclc_executor_spin_some.part.0+0xc2>
 800b618:	686a      	ldr	r2, [r5, #4]
 800b61a:	e7a2      	b.n	800b562 <rclc_executor_spin_some.part.0+0x246>
 800b61c:	6842      	ldr	r2, [r0, #4]
 800b61e:	6a11      	ldr	r1, [r2, #32]
 800b620:	2900      	cmp	r1, #0
 800b622:	f47f af21 	bne.w	800b468 <rclc_executor_spin_some.part.0+0x14c>
 800b626:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800b62a:	2a00      	cmp	r2, #0
 800b62c:	f43f af0a 	beq.w	800b444 <rclc_executor_spin_some.part.0+0x128>
 800b630:	e71a      	b.n	800b468 <rclc_executor_spin_some.part.0+0x14c>
 800b632:	6842      	ldr	r2, [r0, #4]
 800b634:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800b636:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800b63a:	f47f af15 	bne.w	800b468 <rclc_executor_spin_some.part.0+0x14c>
 800b63e:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800b642:	2900      	cmp	r1, #0
 800b644:	f47f af10 	bne.w	800b468 <rclc_executor_spin_some.part.0+0x14c>
 800b648:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800b64c:	2a00      	cmp	r2, #0
 800b64e:	f43f aef9 	beq.w	800b444 <rclc_executor_spin_some.part.0+0x128>
 800b652:	e709      	b.n	800b468 <rclc_executor_spin_some.part.0+0x14c>
 800b654:	686a      	ldr	r2, [r5, #4]
 800b656:	461c      	mov	r4, r3
 800b658:	e783      	b.n	800b562 <rclc_executor_spin_some.part.0+0x246>
 800b65a:	686a      	ldr	r2, [r5, #4]
 800b65c:	461c      	mov	r4, r3
 800b65e:	e6be      	b.n	800b3de <rclc_executor_spin_some.part.0+0xc2>

0800b660 <rclc_executor_spin>:
 800b660:	b1d0      	cbz	r0, 800b698 <rclc_executor_spin+0x38>
 800b662:	b510      	push	{r4, lr}
 800b664:	4604      	mov	r4, r0
 800b666:	b082      	sub	sp, #8
 800b668:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	@ 0x68
 800b66c:	6820      	ldr	r0, [r4, #0]
 800b66e:	e9cd 2300 	strd	r2, r3, [sp]
 800b672:	f004 fe91 	bl	8010398 <rcl_context_is_valid>
 800b676:	4601      	mov	r1, r0
 800b678:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b67c:	4620      	mov	r0, r4
 800b67e:	b131      	cbz	r1, 800b68e <rclc_executor_spin+0x2e>
 800b680:	f7ff fe4c 	bl	800b31c <rclc_executor_spin_some.part.0>
 800b684:	f030 0302 	bics.w	r3, r0, #2
 800b688:	d0ee      	beq.n	800b668 <rclc_executor_spin+0x8>
 800b68a:	b002      	add	sp, #8
 800b68c:	bd10      	pop	{r4, pc}
 800b68e:	f000 f993 	bl	800b9b8 <rcutils_reset_error>
 800b692:	2001      	movs	r0, #1
 800b694:	b002      	add	sp, #8
 800b696:	bd10      	pop	{r4, pc}
 800b698:	200b      	movs	r0, #11
 800b69a:	4770      	bx	lr

0800b69c <rclc_executor_handle_counters_zero_init>:
 800b69c:	b130      	cbz	r0, 800b6ac <rclc_executor_handle_counters_zero_init+0x10>
 800b69e:	b508      	push	{r3, lr}
 800b6a0:	2220      	movs	r2, #32
 800b6a2:	2100      	movs	r1, #0
 800b6a4:	f00c fb98 	bl	8017dd8 <memset>
 800b6a8:	2000      	movs	r0, #0
 800b6aa:	bd08      	pop	{r3, pc}
 800b6ac:	200b      	movs	r0, #11
 800b6ae:	4770      	bx	lr

0800b6b0 <rclc_executor_handle_init>:
 800b6b0:	b168      	cbz	r0, 800b6ce <rclc_executor_handle_init+0x1e>
 800b6b2:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 800b6d8 <rclc_executor_handle_init+0x28>
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	220b      	movs	r2, #11
 800b6ba:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 800b6be:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800b6c2:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800b6c6:	8002      	strh	r2, [r0, #0]
 800b6c8:	8703      	strh	r3, [r0, #56]	@ 0x38
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	4770      	bx	lr
 800b6ce:	200b      	movs	r0, #11
 800b6d0:	4770      	bx	lr
 800b6d2:	bf00      	nop
 800b6d4:	f3af 8000 	nop.w
	...

0800b6e0 <rclc_support_init>:
 800b6e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6e4:	b086      	sub	sp, #24
 800b6e6:	b3b8      	cbz	r0, 800b758 <rclc_support_init+0x78>
 800b6e8:	461c      	mov	r4, r3
 800b6ea:	b3ab      	cbz	r3, 800b758 <rclc_support_init+0x78>
 800b6ec:	460f      	mov	r7, r1
 800b6ee:	4690      	mov	r8, r2
 800b6f0:	4606      	mov	r6, r0
 800b6f2:	f005 f86d 	bl	80107d0 <rcl_get_zero_initialized_init_options>
 800b6f6:	f104 030c 	add.w	r3, r4, #12
 800b6fa:	9005      	str	r0, [sp, #20]
 800b6fc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b700:	e88d 0003 	stmia.w	sp, {r0, r1}
 800b704:	a805      	add	r0, sp, #20
 800b706:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800b70a:	f005 f863 	bl	80107d4 <rcl_init_options_init>
 800b70e:	4605      	mov	r5, r0
 800b710:	b9e0      	cbnz	r0, 800b74c <rclc_support_init+0x6c>
 800b712:	ad02      	add	r5, sp, #8
 800b714:	4628      	mov	r0, r5
 800b716:	f004 fe35 	bl	8010384 <rcl_get_zero_initialized_context>
 800b71a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b71e:	4633      	mov	r3, r6
 800b720:	e886 0003 	stmia.w	r6, {r0, r1}
 800b724:	aa05      	add	r2, sp, #20
 800b726:	4641      	mov	r1, r8
 800b728:	4638      	mov	r0, r7
 800b72a:	f004 ff4d 	bl	80105c8 <rcl_init>
 800b72e:	4605      	mov	r5, r0
 800b730:	b9b8      	cbnz	r0, 800b762 <rclc_support_init+0x82>
 800b732:	60b4      	str	r4, [r6, #8]
 800b734:	4622      	mov	r2, r4
 800b736:	f106 010c 	add.w	r1, r6, #12
 800b73a:	2003      	movs	r0, #3
 800b73c:	f005 fb8c 	bl	8010e58 <rcl_clock_init>
 800b740:	4605      	mov	r5, r0
 800b742:	b970      	cbnz	r0, 800b762 <rclc_support_init+0x82>
 800b744:	a805      	add	r0, sp, #20
 800b746:	f005 f8ab 	bl	80108a0 <rcl_init_options_fini>
 800b74a:	b108      	cbz	r0, 800b750 <rclc_support_init+0x70>
 800b74c:	f000 f934 	bl	800b9b8 <rcutils_reset_error>
 800b750:	4628      	mov	r0, r5
 800b752:	b006      	add	sp, #24
 800b754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b758:	250b      	movs	r5, #11
 800b75a:	4628      	mov	r0, r5
 800b75c:	b006      	add	sp, #24
 800b75e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b762:	f000 f929 	bl	800b9b8 <rcutils_reset_error>
 800b766:	a805      	add	r0, sp, #20
 800b768:	f005 f89a 	bl	80108a0 <rcl_init_options_fini>
 800b76c:	2800      	cmp	r0, #0
 800b76e:	d0ef      	beq.n	800b750 <rclc_support_init+0x70>
 800b770:	e7ec      	b.n	800b74c <rclc_support_init+0x6c>
 800b772:	bf00      	nop

0800b774 <rclc_node_init_default>:
 800b774:	b3b8      	cbz	r0, 800b7e6 <rclc_node_init_default+0x72>
 800b776:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b77a:	460d      	mov	r5, r1
 800b77c:	b0a1      	sub	sp, #132	@ 0x84
 800b77e:	b329      	cbz	r1, 800b7cc <rclc_node_init_default+0x58>
 800b780:	4616      	mov	r6, r2
 800b782:	b31a      	cbz	r2, 800b7cc <rclc_node_init_default+0x58>
 800b784:	461f      	mov	r7, r3
 800b786:	b30b      	cbz	r3, 800b7cc <rclc_node_init_default+0x58>
 800b788:	f10d 0810 	add.w	r8, sp, #16
 800b78c:	4604      	mov	r4, r0
 800b78e:	4640      	mov	r0, r8
 800b790:	f7fe fcda 	bl	800a148 <rcl_get_zero_initialized_node>
 800b794:	e898 0003 	ldmia.w	r8, {r0, r1}
 800b798:	f10d 0918 	add.w	r9, sp, #24
 800b79c:	e884 0003 	stmia.w	r4, {r0, r1}
 800b7a0:	4648      	mov	r0, r9
 800b7a2:	f7fe fe7b 	bl	800a49c <rcl_node_get_default_options>
 800b7a6:	4640      	mov	r0, r8
 800b7a8:	f7fe fcce 	bl	800a148 <rcl_get_zero_initialized_node>
 800b7ac:	f8cd 9000 	str.w	r9, [sp]
 800b7b0:	e898 0003 	ldmia.w	r8, {r0, r1}
 800b7b4:	463b      	mov	r3, r7
 800b7b6:	e884 0003 	stmia.w	r4, {r0, r1}
 800b7ba:	4632      	mov	r2, r6
 800b7bc:	4629      	mov	r1, r5
 800b7be:	4620      	mov	r0, r4
 800b7c0:	f7fe fccc 	bl	800a15c <rcl_node_init>
 800b7c4:	b930      	cbnz	r0, 800b7d4 <rclc_node_init_default+0x60>
 800b7c6:	b021      	add	sp, #132	@ 0x84
 800b7c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b7cc:	200b      	movs	r0, #11
 800b7ce:	b021      	add	sp, #132	@ 0x84
 800b7d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b7d4:	9003      	str	r0, [sp, #12]
 800b7d6:	f000 f8ef 	bl	800b9b8 <rcutils_reset_error>
 800b7da:	f000 f8ed 	bl	800b9b8 <rcutils_reset_error>
 800b7de:	9803      	ldr	r0, [sp, #12]
 800b7e0:	b021      	add	sp, #132	@ 0x84
 800b7e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b7e6:	200b      	movs	r0, #11
 800b7e8:	4770      	bx	lr
 800b7ea:	bf00      	nop

0800b7ec <rclc_publisher_init_best_effort>:
 800b7ec:	b368      	cbz	r0, 800b84a <rclc_publisher_init_best_effort+0x5e>
 800b7ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7f2:	460d      	mov	r5, r1
 800b7f4:	b0a0      	sub	sp, #128	@ 0x80
 800b7f6:	b321      	cbz	r1, 800b842 <rclc_publisher_init_best_effort+0x56>
 800b7f8:	4616      	mov	r6, r2
 800b7fa:	b312      	cbz	r2, 800b842 <rclc_publisher_init_best_effort+0x56>
 800b7fc:	461f      	mov	r7, r3
 800b7fe:	b303      	cbz	r3, 800b842 <rclc_publisher_init_best_effort+0x56>
 800b800:	4604      	mov	r4, r0
 800b802:	f7fe fe77 	bl	800a4f4 <rcl_get_zero_initialized_publisher>
 800b806:	f10d 0810 	add.w	r8, sp, #16
 800b80a:	6020      	str	r0, [r4, #0]
 800b80c:	4640      	mov	r0, r8
 800b80e:	f7fe ff39 	bl	800a684 <rcl_publisher_get_default_options>
 800b812:	490f      	ldr	r1, [pc, #60]	@ (800b850 <rclc_publisher_init_best_effort+0x64>)
 800b814:	2250      	movs	r2, #80	@ 0x50
 800b816:	4640      	mov	r0, r8
 800b818:	f00c fc01 	bl	801801e <memcpy>
 800b81c:	f8cd 8000 	str.w	r8, [sp]
 800b820:	463b      	mov	r3, r7
 800b822:	4632      	mov	r2, r6
 800b824:	4629      	mov	r1, r5
 800b826:	4620      	mov	r0, r4
 800b828:	f7fe fe6a 	bl	800a500 <rcl_publisher_init>
 800b82c:	b910      	cbnz	r0, 800b834 <rclc_publisher_init_best_effort+0x48>
 800b82e:	b020      	add	sp, #128	@ 0x80
 800b830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b834:	9003      	str	r0, [sp, #12]
 800b836:	f000 f8bf 	bl	800b9b8 <rcutils_reset_error>
 800b83a:	9803      	ldr	r0, [sp, #12]
 800b83c:	b020      	add	sp, #128	@ 0x80
 800b83e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b842:	200b      	movs	r0, #11
 800b844:	b020      	add	sp, #128	@ 0x80
 800b846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b84a:	200b      	movs	r0, #11
 800b84c:	4770      	bx	lr
 800b84e:	bf00      	nop
 800b850:	0801a120 	.word	0x0801a120

0800b854 <rclc_subscription_init_default>:
 800b854:	b368      	cbz	r0, 800b8b2 <rclc_subscription_init_default+0x5e>
 800b856:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b85a:	460d      	mov	r5, r1
 800b85c:	b0a0      	sub	sp, #128	@ 0x80
 800b85e:	b321      	cbz	r1, 800b8aa <rclc_subscription_init_default+0x56>
 800b860:	4616      	mov	r6, r2
 800b862:	b312      	cbz	r2, 800b8aa <rclc_subscription_init_default+0x56>
 800b864:	461f      	mov	r7, r3
 800b866:	b303      	cbz	r3, 800b8aa <rclc_subscription_init_default+0x56>
 800b868:	4604      	mov	r4, r0
 800b86a:	f7fe ff7f 	bl	800a76c <rcl_get_zero_initialized_subscription>
 800b86e:	f10d 0810 	add.w	r8, sp, #16
 800b872:	6020      	str	r0, [r4, #0]
 800b874:	4640      	mov	r0, r8
 800b876:	f7ff f87b 	bl	800a970 <rcl_subscription_get_default_options>
 800b87a:	490f      	ldr	r1, [pc, #60]	@ (800b8b8 <rclc_subscription_init_default+0x64>)
 800b87c:	2250      	movs	r2, #80	@ 0x50
 800b87e:	4640      	mov	r0, r8
 800b880:	f00c fbcd 	bl	801801e <memcpy>
 800b884:	f8cd 8000 	str.w	r8, [sp]
 800b888:	463b      	mov	r3, r7
 800b88a:	4632      	mov	r2, r6
 800b88c:	4629      	mov	r1, r5
 800b88e:	4620      	mov	r0, r4
 800b890:	f7fe ff72 	bl	800a778 <rcl_subscription_init>
 800b894:	b910      	cbnz	r0, 800b89c <rclc_subscription_init_default+0x48>
 800b896:	b020      	add	sp, #128	@ 0x80
 800b898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b89c:	9003      	str	r0, [sp, #12]
 800b89e:	f000 f88b 	bl	800b9b8 <rcutils_reset_error>
 800b8a2:	9803      	ldr	r0, [sp, #12]
 800b8a4:	b020      	add	sp, #128	@ 0x80
 800b8a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8aa:	200b      	movs	r0, #11
 800b8ac:	b020      	add	sp, #128	@ 0x80
 800b8ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8b2:	200b      	movs	r0, #11
 800b8b4:	4770      	bx	lr
 800b8b6:	bf00      	nop
 800b8b8:	0801a170 	.word	0x0801a170

0800b8bc <__default_zero_allocate>:
 800b8bc:	f00b b92a 	b.w	8016b14 <calloc>

0800b8c0 <__default_reallocate>:
 800b8c0:	f00b bac8 	b.w	8016e54 <realloc>

0800b8c4 <__default_deallocate>:
 800b8c4:	f00b b9a4 	b.w	8016c10 <free>

0800b8c8 <__default_allocate>:
 800b8c8:	f00b b99a 	b.w	8016c00 <malloc>

0800b8cc <rcutils_get_zero_initialized_allocator>:
 800b8cc:	b510      	push	{r4, lr}
 800b8ce:	4c05      	ldr	r4, [pc, #20]	@ (800b8e4 <rcutils_get_zero_initialized_allocator+0x18>)
 800b8d0:	4686      	mov	lr, r0
 800b8d2:	4684      	mov	ip, r0
 800b8d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b8d6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b8da:	6823      	ldr	r3, [r4, #0]
 800b8dc:	f8cc 3000 	str.w	r3, [ip]
 800b8e0:	4670      	mov	r0, lr
 800b8e2:	bd10      	pop	{r4, pc}
 800b8e4:	0801a1c0 	.word	0x0801a1c0

0800b8e8 <rcutils_set_default_allocator>:
 800b8e8:	b1a8      	cbz	r0, 800b916 <rcutils_set_default_allocator+0x2e>
 800b8ea:	6802      	ldr	r2, [r0, #0]
 800b8ec:	b1a2      	cbz	r2, 800b918 <rcutils_set_default_allocator+0x30>
 800b8ee:	6841      	ldr	r1, [r0, #4]
 800b8f0:	b1a1      	cbz	r1, 800b91c <rcutils_set_default_allocator+0x34>
 800b8f2:	b410      	push	{r4}
 800b8f4:	68c4      	ldr	r4, [r0, #12]
 800b8f6:	b164      	cbz	r4, 800b912 <rcutils_set_default_allocator+0x2a>
 800b8f8:	6880      	ldr	r0, [r0, #8]
 800b8fa:	b138      	cbz	r0, 800b90c <rcutils_set_default_allocator+0x24>
 800b8fc:	4b08      	ldr	r3, [pc, #32]	@ (800b920 <rcutils_set_default_allocator+0x38>)
 800b8fe:	601a      	str	r2, [r3, #0]
 800b900:	2200      	movs	r2, #0
 800b902:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800b906:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800b90a:	2001      	movs	r0, #1
 800b90c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b910:	4770      	bx	lr
 800b912:	4620      	mov	r0, r4
 800b914:	e7fa      	b.n	800b90c <rcutils_set_default_allocator+0x24>
 800b916:	4770      	bx	lr
 800b918:	4610      	mov	r0, r2
 800b91a:	4770      	bx	lr
 800b91c:	4608      	mov	r0, r1
 800b91e:	4770      	bx	lr
 800b920:	2000001c 	.word	0x2000001c

0800b924 <rcutils_get_default_allocator>:
 800b924:	b510      	push	{r4, lr}
 800b926:	4c05      	ldr	r4, [pc, #20]	@ (800b93c <rcutils_get_default_allocator+0x18>)
 800b928:	4686      	mov	lr, r0
 800b92a:	4684      	mov	ip, r0
 800b92c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b92e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b932:	6823      	ldr	r3, [r4, #0]
 800b934:	f8cc 3000 	str.w	r3, [ip]
 800b938:	4670      	mov	r0, lr
 800b93a:	bd10      	pop	{r4, pc}
 800b93c:	2000001c 	.word	0x2000001c

0800b940 <rcutils_allocator_is_valid>:
 800b940:	b158      	cbz	r0, 800b95a <rcutils_allocator_is_valid+0x1a>
 800b942:	6803      	ldr	r3, [r0, #0]
 800b944:	b143      	cbz	r3, 800b958 <rcutils_allocator_is_valid+0x18>
 800b946:	6843      	ldr	r3, [r0, #4]
 800b948:	b133      	cbz	r3, 800b958 <rcutils_allocator_is_valid+0x18>
 800b94a:	68c3      	ldr	r3, [r0, #12]
 800b94c:	b123      	cbz	r3, 800b958 <rcutils_allocator_is_valid+0x18>
 800b94e:	6880      	ldr	r0, [r0, #8]
 800b950:	3800      	subs	r0, #0
 800b952:	bf18      	it	ne
 800b954:	2001      	movne	r0, #1
 800b956:	4770      	bx	lr
 800b958:	4618      	mov	r0, r3
 800b95a:	4770      	bx	lr

0800b95c <rcutils_get_env>:
 800b95c:	b168      	cbz	r0, 800b97a <rcutils_get_env+0x1e>
 800b95e:	b510      	push	{r4, lr}
 800b960:	460c      	mov	r4, r1
 800b962:	b129      	cbz	r1, 800b970 <rcutils_get_env+0x14>
 800b964:	f00b f904 	bl	8016b70 <getenv>
 800b968:	b120      	cbz	r0, 800b974 <rcutils_get_env+0x18>
 800b96a:	6020      	str	r0, [r4, #0]
 800b96c:	2000      	movs	r0, #0
 800b96e:	bd10      	pop	{r4, pc}
 800b970:	4803      	ldr	r0, [pc, #12]	@ (800b980 <rcutils_get_env+0x24>)
 800b972:	bd10      	pop	{r4, pc}
 800b974:	4b03      	ldr	r3, [pc, #12]	@ (800b984 <rcutils_get_env+0x28>)
 800b976:	6023      	str	r3, [r4, #0]
 800b978:	bd10      	pop	{r4, pc}
 800b97a:	4803      	ldr	r0, [pc, #12]	@ (800b988 <rcutils_get_env+0x2c>)
 800b97c:	4770      	bx	lr
 800b97e:	bf00      	nop
 800b980:	0801a1f0 	.word	0x0801a1f0
 800b984:	0801ab58 	.word	0x0801ab58
 800b988:	0801a1d4 	.word	0x0801a1d4

0800b98c <rcutils_get_error_string>:
 800b98c:	4b06      	ldr	r3, [pc, #24]	@ (800b9a8 <rcutils_get_error_string+0x1c>)
 800b98e:	781b      	ldrb	r3, [r3, #0]
 800b990:	b13b      	cbz	r3, 800b9a2 <rcutils_get_error_string+0x16>
 800b992:	4b06      	ldr	r3, [pc, #24]	@ (800b9ac <rcutils_get_error_string+0x20>)
 800b994:	781a      	ldrb	r2, [r3, #0]
 800b996:	b90a      	cbnz	r2, 800b99c <rcutils_get_error_string+0x10>
 800b998:	2201      	movs	r2, #1
 800b99a:	701a      	strb	r2, [r3, #0]
 800b99c:	4b04      	ldr	r3, [pc, #16]	@ (800b9b0 <rcutils_get_error_string+0x24>)
 800b99e:	7818      	ldrb	r0, [r3, #0]
 800b9a0:	4770      	bx	lr
 800b9a2:	4b04      	ldr	r3, [pc, #16]	@ (800b9b4 <rcutils_get_error_string+0x28>)
 800b9a4:	7818      	ldrb	r0, [r3, #0]
 800b9a6:	4770      	bx	lr
 800b9a8:	2000c868 	.word	0x2000c868
 800b9ac:	2000c881 	.word	0x2000c881
 800b9b0:	2000c880 	.word	0x2000c880
 800b9b4:	0801a20c 	.word	0x0801a20c

0800b9b8 <rcutils_reset_error>:
 800b9b8:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800b9d8 <rcutils_reset_error+0x20>
 800b9bc:	4a08      	ldr	r2, [pc, #32]	@ (800b9e0 <rcutils_reset_error+0x28>)
 800b9be:	4809      	ldr	r0, [pc, #36]	@ (800b9e4 <rcutils_reset_error+0x2c>)
 800b9c0:	4909      	ldr	r1, [pc, #36]	@ (800b9e8 <rcutils_reset_error+0x30>)
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	8013      	strh	r3, [r2, #0]
 800b9c6:	ed82 7b02 	vstr	d7, [r2, #8]
 800b9ca:	4a08      	ldr	r2, [pc, #32]	@ (800b9ec <rcutils_reset_error+0x34>)
 800b9cc:	7003      	strb	r3, [r0, #0]
 800b9ce:	700b      	strb	r3, [r1, #0]
 800b9d0:	7013      	strb	r3, [r2, #0]
 800b9d2:	4770      	bx	lr
 800b9d4:	f3af 8000 	nop.w
	...
 800b9e0:	2000c870 	.word	0x2000c870
 800b9e4:	2000c881 	.word	0x2000c881
 800b9e8:	2000c880 	.word	0x2000c880
 800b9ec:	2000c868 	.word	0x2000c868

0800b9f0 <rcutils_format_string_limit>:
 800b9f0:	b40f      	push	{r0, r1, r2, r3}
 800b9f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b9f4:	b083      	sub	sp, #12
 800b9f6:	ac08      	add	r4, sp, #32
 800b9f8:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 800b9fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b9fe:	b34e      	cbz	r6, 800ba54 <rcutils_format_string_limit+0x64>
 800ba00:	a808      	add	r0, sp, #32
 800ba02:	f7ff ff9d 	bl	800b940 <rcutils_allocator_is_valid>
 800ba06:	b328      	cbz	r0, 800ba54 <rcutils_format_string_limit+0x64>
 800ba08:	2100      	movs	r1, #0
 800ba0a:	ab0f      	add	r3, sp, #60	@ 0x3c
 800ba0c:	4632      	mov	r2, r6
 800ba0e:	4608      	mov	r0, r1
 800ba10:	e9cd 3300 	strd	r3, r3, [sp]
 800ba14:	f000 f8f4 	bl	800bc00 <rcutils_vsnprintf>
 800ba18:	1c43      	adds	r3, r0, #1
 800ba1a:	4605      	mov	r5, r0
 800ba1c:	d01a      	beq.n	800ba54 <rcutils_format_string_limit+0x64>
 800ba1e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ba20:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ba22:	1c47      	adds	r7, r0, #1
 800ba24:	429f      	cmp	r7, r3
 800ba26:	bf84      	itt	hi
 800ba28:	461f      	movhi	r7, r3
 800ba2a:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 800ba2e:	4638      	mov	r0, r7
 800ba30:	9b08      	ldr	r3, [sp, #32]
 800ba32:	4798      	blx	r3
 800ba34:	4604      	mov	r4, r0
 800ba36:	b168      	cbz	r0, 800ba54 <rcutils_format_string_limit+0x64>
 800ba38:	9b01      	ldr	r3, [sp, #4]
 800ba3a:	4632      	mov	r2, r6
 800ba3c:	4639      	mov	r1, r7
 800ba3e:	f000 f8df 	bl	800bc00 <rcutils_vsnprintf>
 800ba42:	2800      	cmp	r0, #0
 800ba44:	db02      	blt.n	800ba4c <rcutils_format_string_limit+0x5c>
 800ba46:	2300      	movs	r3, #0
 800ba48:	5563      	strb	r3, [r4, r5]
 800ba4a:	e004      	b.n	800ba56 <rcutils_format_string_limit+0x66>
 800ba4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba4e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ba50:	4620      	mov	r0, r4
 800ba52:	4798      	blx	r3
 800ba54:	2400      	movs	r4, #0
 800ba56:	4620      	mov	r0, r4
 800ba58:	b003      	add	sp, #12
 800ba5a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ba5e:	b004      	add	sp, #16
 800ba60:	4770      	bx	lr
 800ba62:	bf00      	nop

0800ba64 <rcutils_repl_str>:
 800ba64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba68:	ed2d 8b02 	vpush	{d8}
 800ba6c:	b087      	sub	sp, #28
 800ba6e:	4680      	mov	r8, r0
 800ba70:	4608      	mov	r0, r1
 800ba72:	f8cd 8004 	str.w	r8, [sp, #4]
 800ba76:	ee08 2a10 	vmov	s16, r2
 800ba7a:	468a      	mov	sl, r1
 800ba7c:	4699      	mov	r9, r3
 800ba7e:	f7f4 fc27 	bl	80002d0 <strlen>
 800ba82:	2600      	movs	r6, #0
 800ba84:	4647      	mov	r7, r8
 800ba86:	9002      	str	r0, [sp, #8]
 800ba88:	46b3      	mov	fp, r6
 800ba8a:	2510      	movs	r5, #16
 800ba8c:	46b0      	mov	r8, r6
 800ba8e:	e01d      	b.n	800bacc <rcutils_repl_str+0x68>
 800ba90:	f10b 0b01 	add.w	fp, fp, #1
 800ba94:	455e      	cmp	r6, fp
 800ba96:	d211      	bcs.n	800babc <rcutils_repl_str+0x58>
 800ba98:	442e      	add	r6, r5
 800ba9a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800ba9e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800baa2:	00b1      	lsls	r1, r6, #2
 800baa4:	4798      	blx	r3
 800baa6:	2800      	cmp	r0, #0
 800baa8:	f000 8088 	beq.w	800bbbc <rcutils_repl_str+0x158>
 800baac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bab0:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 800bab4:	4680      	mov	r8, r0
 800bab6:	bf28      	it	cs
 800bab8:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 800babc:	9a01      	ldr	r2, [sp, #4]
 800babe:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 800bac2:	1aa2      	subs	r2, r4, r2
 800bac4:	f843 2c04 	str.w	r2, [r3, #-4]
 800bac8:	9b02      	ldr	r3, [sp, #8]
 800baca:	18e7      	adds	r7, r4, r3
 800bacc:	4651      	mov	r1, sl
 800bace:	4638      	mov	r0, r7
 800bad0:	f00c f9a9 	bl	8017e26 <strstr>
 800bad4:	4604      	mov	r4, r0
 800bad6:	4640      	mov	r0, r8
 800bad8:	2c00      	cmp	r4, #0
 800bada:	d1d9      	bne.n	800ba90 <rcutils_repl_str+0x2c>
 800badc:	46b8      	mov	r8, r7
 800bade:	4607      	mov	r7, r0
 800bae0:	4640      	mov	r0, r8
 800bae2:	f7f4 fbf5 	bl	80002d0 <strlen>
 800bae6:	9b01      	ldr	r3, [sp, #4]
 800bae8:	eba8 0303 	sub.w	r3, r8, r3
 800baec:	181c      	adds	r4, r3, r0
 800baee:	9404      	str	r4, [sp, #16]
 800baf0:	f1bb 0f00 	cmp.w	fp, #0
 800baf4:	d04a      	beq.n	800bb8c <rcutils_repl_str+0x128>
 800baf6:	ee18 0a10 	vmov	r0, s16
 800bafa:	f7f4 fbe9 	bl	80002d0 <strlen>
 800bafe:	9b02      	ldr	r3, [sp, #8]
 800bb00:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800bb04:	1ac3      	subs	r3, r0, r3
 800bb06:	fb0b 4303 	mla	r3, fp, r3, r4
 800bb0a:	461a      	mov	r2, r3
 800bb0c:	9305      	str	r3, [sp, #20]
 800bb0e:	4606      	mov	r6, r0
 800bb10:	f8d9 3000 	ldr.w	r3, [r9]
 800bb14:	1c50      	adds	r0, r2, #1
 800bb16:	4798      	blx	r3
 800bb18:	9003      	str	r0, [sp, #12]
 800bb1a:	2800      	cmp	r0, #0
 800bb1c:	d04f      	beq.n	800bbbe <rcutils_repl_str+0x15a>
 800bb1e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800bb22:	683a      	ldr	r2, [r7, #0]
 800bb24:	4641      	mov	r1, r8
 800bb26:	f00c fa7a 	bl	801801e <memcpy>
 800bb2a:	683d      	ldr	r5, [r7, #0]
 800bb2c:	9b03      	ldr	r3, [sp, #12]
 800bb2e:	9701      	str	r7, [sp, #4]
 800bb30:	46ba      	mov	sl, r7
 800bb32:	441d      	add	r5, r3
 800bb34:	9f02      	ldr	r7, [sp, #8]
 800bb36:	f8cd 9008 	str.w	r9, [sp, #8]
 800bb3a:	2401      	movs	r4, #1
 800bb3c:	46d1      	mov	r9, sl
 800bb3e:	ee18 aa10 	vmov	sl, s16
 800bb42:	e00a      	b.n	800bb5a <rcutils_repl_str+0xf6>
 800bb44:	f8d9 5000 	ldr.w	r5, [r9]
 800bb48:	1aaa      	subs	r2, r5, r2
 800bb4a:	1885      	adds	r5, r0, r2
 800bb4c:	f00c fa67 	bl	801801e <memcpy>
 800bb50:	45a3      	cmp	fp, r4
 800bb52:	f104 0201 	add.w	r2, r4, #1
 800bb56:	d935      	bls.n	800bbc4 <rcutils_repl_str+0x160>
 800bb58:	4614      	mov	r4, r2
 800bb5a:	4632      	mov	r2, r6
 800bb5c:	4651      	mov	r1, sl
 800bb5e:	4628      	mov	r0, r5
 800bb60:	f00c fa5d 	bl	801801e <memcpy>
 800bb64:	f859 2b04 	ldr.w	r2, [r9], #4
 800bb68:	45a3      	cmp	fp, r4
 800bb6a:	443a      	add	r2, r7
 800bb6c:	eb05 0006 	add.w	r0, r5, r6
 800bb70:	eb08 0102 	add.w	r1, r8, r2
 800bb74:	d1e6      	bne.n	800bb44 <rcutils_repl_str+0xe0>
 800bb76:	9b04      	ldr	r3, [sp, #16]
 800bb78:	1a9a      	subs	r2, r3, r2
 800bb7a:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 800bb7e:	f00c fa4e 	bl	801801e <memcpy>
 800bb82:	9a03      	ldr	r2, [sp, #12]
 800bb84:	9905      	ldr	r1, [sp, #20]
 800bb86:	2300      	movs	r3, #0
 800bb88:	5453      	strb	r3, [r2, r1]
 800bb8a:	e00b      	b.n	800bba4 <rcutils_repl_str+0x140>
 800bb8c:	4620      	mov	r0, r4
 800bb8e:	f8d9 3000 	ldr.w	r3, [r9]
 800bb92:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800bb96:	3001      	adds	r0, #1
 800bb98:	4798      	blx	r3
 800bb9a:	9003      	str	r0, [sp, #12]
 800bb9c:	b110      	cbz	r0, 800bba4 <rcutils_repl_str+0x140>
 800bb9e:	9901      	ldr	r1, [sp, #4]
 800bba0:	f00c fa35 	bl	801800e <strcpy>
 800bba4:	4638      	mov	r0, r7
 800bba6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800bbaa:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800bbae:	4798      	blx	r3
 800bbb0:	9803      	ldr	r0, [sp, #12]
 800bbb2:	b007      	add	sp, #28
 800bbb4:	ecbd 8b02 	vpop	{d8}
 800bbb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbbc:	4647      	mov	r7, r8
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	9303      	str	r3, [sp, #12]
 800bbc2:	e7ef      	b.n	800bba4 <rcutils_repl_str+0x140>
 800bbc4:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 800bbc8:	e7db      	b.n	800bb82 <rcutils_repl_str+0x11e>
 800bbca:	bf00      	nop

0800bbcc <rcutils_snprintf>:
 800bbcc:	b40c      	push	{r2, r3}
 800bbce:	b530      	push	{r4, r5, lr}
 800bbd0:	b083      	sub	sp, #12
 800bbd2:	ab06      	add	r3, sp, #24
 800bbd4:	f853 2b04 	ldr.w	r2, [r3], #4
 800bbd8:	9301      	str	r3, [sp, #4]
 800bbda:	b152      	cbz	r2, 800bbf2 <rcutils_snprintf+0x26>
 800bbdc:	b138      	cbz	r0, 800bbee <rcutils_snprintf+0x22>
 800bbde:	b141      	cbz	r1, 800bbf2 <rcutils_snprintf+0x26>
 800bbe0:	f00c f82e 	bl	8017c40 <vsniprintf>
 800bbe4:	b003      	add	sp, #12
 800bbe6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bbea:	b002      	add	sp, #8
 800bbec:	4770      	bx	lr
 800bbee:	2900      	cmp	r1, #0
 800bbf0:	d0f6      	beq.n	800bbe0 <rcutils_snprintf+0x14>
 800bbf2:	f00c f9df 	bl	8017fb4 <__errno>
 800bbf6:	2316      	movs	r3, #22
 800bbf8:	6003      	str	r3, [r0, #0]
 800bbfa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bbfe:	e7f1      	b.n	800bbe4 <rcutils_snprintf+0x18>

0800bc00 <rcutils_vsnprintf>:
 800bc00:	b570      	push	{r4, r5, r6, lr}
 800bc02:	b13a      	cbz	r2, 800bc14 <rcutils_vsnprintf+0x14>
 800bc04:	b120      	cbz	r0, 800bc10 <rcutils_vsnprintf+0x10>
 800bc06:	b129      	cbz	r1, 800bc14 <rcutils_vsnprintf+0x14>
 800bc08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bc0c:	f00c b818 	b.w	8017c40 <vsniprintf>
 800bc10:	2900      	cmp	r1, #0
 800bc12:	d0f9      	beq.n	800bc08 <rcutils_vsnprintf+0x8>
 800bc14:	f00c f9ce 	bl	8017fb4 <__errno>
 800bc18:	2316      	movs	r3, #22
 800bc1a:	6003      	str	r3, [r0, #0]
 800bc1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bc20:	bd70      	pop	{r4, r5, r6, pc}
 800bc22:	bf00      	nop

0800bc24 <rcutils_strdup>:
 800bc24:	b084      	sub	sp, #16
 800bc26:	b570      	push	{r4, r5, r6, lr}
 800bc28:	b082      	sub	sp, #8
 800bc2a:	ac07      	add	r4, sp, #28
 800bc2c:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 800bc30:	4605      	mov	r5, r0
 800bc32:	b1b0      	cbz	r0, 800bc62 <rcutils_strdup+0x3e>
 800bc34:	f7f4 fb4c 	bl	80002d0 <strlen>
 800bc38:	1c42      	adds	r2, r0, #1
 800bc3a:	9b07      	ldr	r3, [sp, #28]
 800bc3c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bc3e:	9201      	str	r2, [sp, #4]
 800bc40:	4606      	mov	r6, r0
 800bc42:	4610      	mov	r0, r2
 800bc44:	4798      	blx	r3
 800bc46:	4604      	mov	r4, r0
 800bc48:	b128      	cbz	r0, 800bc56 <rcutils_strdup+0x32>
 800bc4a:	9a01      	ldr	r2, [sp, #4]
 800bc4c:	4629      	mov	r1, r5
 800bc4e:	f00c f9e6 	bl	801801e <memcpy>
 800bc52:	2300      	movs	r3, #0
 800bc54:	55a3      	strb	r3, [r4, r6]
 800bc56:	4620      	mov	r0, r4
 800bc58:	b002      	add	sp, #8
 800bc5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bc5e:	b004      	add	sp, #16
 800bc60:	4770      	bx	lr
 800bc62:	4604      	mov	r4, r0
 800bc64:	e7f7      	b.n	800bc56 <rcutils_strdup+0x32>
 800bc66:	bf00      	nop

0800bc68 <rcutils_strndup>:
 800bc68:	b082      	sub	sp, #8
 800bc6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc6c:	ac06      	add	r4, sp, #24
 800bc6e:	e884 000c 	stmia.w	r4, {r2, r3}
 800bc72:	4605      	mov	r5, r0
 800bc74:	b188      	cbz	r0, 800bc9a <rcutils_strndup+0x32>
 800bc76:	1c4f      	adds	r7, r1, #1
 800bc78:	460e      	mov	r6, r1
 800bc7a:	4638      	mov	r0, r7
 800bc7c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bc7e:	4790      	blx	r2
 800bc80:	4604      	mov	r4, r0
 800bc82:	b128      	cbz	r0, 800bc90 <rcutils_strndup+0x28>
 800bc84:	463a      	mov	r2, r7
 800bc86:	4629      	mov	r1, r5
 800bc88:	f00c f9c9 	bl	801801e <memcpy>
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	55a3      	strb	r3, [r4, r6]
 800bc90:	4620      	mov	r0, r4
 800bc92:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bc96:	b002      	add	sp, #8
 800bc98:	4770      	bx	lr
 800bc9a:	4604      	mov	r4, r0
 800bc9c:	e7f8      	b.n	800bc90 <rcutils_strndup+0x28>
 800bc9e:	bf00      	nop

0800bca0 <rcutils_system_time_now>:
 800bca0:	b308      	cbz	r0, 800bce6 <rcutils_system_time_now+0x46>
 800bca2:	b570      	push	{r4, r5, r6, lr}
 800bca4:	b084      	sub	sp, #16
 800bca6:	4604      	mov	r4, r0
 800bca8:	4669      	mov	r1, sp
 800bcaa:	2001      	movs	r0, #1
 800bcac:	f7f6 fb14 	bl	80022d8 <clock_gettime>
 800bcb0:	e9dd 3500 	ldrd	r3, r5, [sp]
 800bcb4:	2d00      	cmp	r5, #0
 800bcb6:	db13      	blt.n	800bce0 <rcutils_system_time_now+0x40>
 800bcb8:	9902      	ldr	r1, [sp, #8]
 800bcba:	2900      	cmp	r1, #0
 800bcbc:	db0d      	blt.n	800bcda <rcutils_system_time_now+0x3a>
 800bcbe:	4e0b      	ldr	r6, [pc, #44]	@ (800bcec <rcutils_system_time_now+0x4c>)
 800bcc0:	fba3 3206 	umull	r3, r2, r3, r6
 800bcc4:	185b      	adds	r3, r3, r1
 800bcc6:	fb06 2205 	mla	r2, r6, r5, r2
 800bcca:	f04f 0000 	mov.w	r0, #0
 800bcce:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800bcd2:	e9c4 3200 	strd	r3, r2, [r4]
 800bcd6:	b004      	add	sp, #16
 800bcd8:	bd70      	pop	{r4, r5, r6, pc}
 800bcda:	ea53 0205 	orrs.w	r2, r3, r5
 800bcde:	d1ee      	bne.n	800bcbe <rcutils_system_time_now+0x1e>
 800bce0:	2002      	movs	r0, #2
 800bce2:	b004      	add	sp, #16
 800bce4:	bd70      	pop	{r4, r5, r6, pc}
 800bce6:	200b      	movs	r0, #11
 800bce8:	4770      	bx	lr
 800bcea:	bf00      	nop
 800bcec:	3b9aca00 	.word	0x3b9aca00

0800bcf0 <rcutils_steady_time_now>:
 800bcf0:	b308      	cbz	r0, 800bd36 <rcutils_steady_time_now+0x46>
 800bcf2:	b570      	push	{r4, r5, r6, lr}
 800bcf4:	b084      	sub	sp, #16
 800bcf6:	4604      	mov	r4, r0
 800bcf8:	4669      	mov	r1, sp
 800bcfa:	2000      	movs	r0, #0
 800bcfc:	f7f6 faec 	bl	80022d8 <clock_gettime>
 800bd00:	e9dd 3500 	ldrd	r3, r5, [sp]
 800bd04:	2d00      	cmp	r5, #0
 800bd06:	db13      	blt.n	800bd30 <rcutils_steady_time_now+0x40>
 800bd08:	9902      	ldr	r1, [sp, #8]
 800bd0a:	2900      	cmp	r1, #0
 800bd0c:	db0d      	blt.n	800bd2a <rcutils_steady_time_now+0x3a>
 800bd0e:	4e0b      	ldr	r6, [pc, #44]	@ (800bd3c <rcutils_steady_time_now+0x4c>)
 800bd10:	fba3 3206 	umull	r3, r2, r3, r6
 800bd14:	185b      	adds	r3, r3, r1
 800bd16:	fb06 2205 	mla	r2, r6, r5, r2
 800bd1a:	f04f 0000 	mov.w	r0, #0
 800bd1e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800bd22:	e9c4 3200 	strd	r3, r2, [r4]
 800bd26:	b004      	add	sp, #16
 800bd28:	bd70      	pop	{r4, r5, r6, pc}
 800bd2a:	ea53 0205 	orrs.w	r2, r3, r5
 800bd2e:	d1ee      	bne.n	800bd0e <rcutils_steady_time_now+0x1e>
 800bd30:	2002      	movs	r0, #2
 800bd32:	b004      	add	sp, #16
 800bd34:	bd70      	pop	{r4, r5, r6, pc}
 800bd36:	200b      	movs	r0, #11
 800bd38:	4770      	bx	lr
 800bd3a:	bf00      	nop
 800bd3c:	3b9aca00 	.word	0x3b9aca00

0800bd40 <rmw_get_default_publisher_options>:
 800bd40:	2200      	movs	r2, #0
 800bd42:	6002      	str	r2, [r0, #0]
 800bd44:	7102      	strb	r2, [r0, #4]
 800bd46:	4770      	bx	lr

0800bd48 <rmw_subscription_content_filter_options_fini>:
 800bd48:	b1b0      	cbz	r0, 800bd78 <rmw_subscription_content_filter_options_fini+0x30>
 800bd4a:	b538      	push	{r3, r4, r5, lr}
 800bd4c:	4604      	mov	r4, r0
 800bd4e:	4608      	mov	r0, r1
 800bd50:	460d      	mov	r5, r1
 800bd52:	f7ff fdf5 	bl	800b940 <rcutils_allocator_is_valid>
 800bd56:	b168      	cbz	r0, 800bd74 <rmw_subscription_content_filter_options_fini+0x2c>
 800bd58:	6820      	ldr	r0, [r4, #0]
 800bd5a:	b120      	cbz	r0, 800bd66 <rmw_subscription_content_filter_options_fini+0x1e>
 800bd5c:	686b      	ldr	r3, [r5, #4]
 800bd5e:	6929      	ldr	r1, [r5, #16]
 800bd60:	4798      	blx	r3
 800bd62:	2300      	movs	r3, #0
 800bd64:	6023      	str	r3, [r4, #0]
 800bd66:	1d20      	adds	r0, r4, #4
 800bd68:	f006 fe72 	bl	8012a50 <rcutils_string_array_fini>
 800bd6c:	3800      	subs	r0, #0
 800bd6e:	bf18      	it	ne
 800bd70:	2001      	movne	r0, #1
 800bd72:	bd38      	pop	{r3, r4, r5, pc}
 800bd74:	200b      	movs	r0, #11
 800bd76:	bd38      	pop	{r3, r4, r5, pc}
 800bd78:	200b      	movs	r0, #11
 800bd7a:	4770      	bx	lr

0800bd7c <rmw_get_default_subscription_options>:
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	e9c0 2200 	strd	r2, r2, [r0]
 800bd82:	6082      	str	r2, [r0, #8]
 800bd84:	4770      	bx	lr
 800bd86:	bf00      	nop

0800bd88 <rmw_get_zero_initialized_message_info>:
 800bd88:	b510      	push	{r4, lr}
 800bd8a:	2240      	movs	r2, #64	@ 0x40
 800bd8c:	4604      	mov	r4, r0
 800bd8e:	2100      	movs	r1, #0
 800bd90:	f00c f822 	bl	8017dd8 <memset>
 800bd94:	4620      	mov	r0, r4
 800bd96:	bd10      	pop	{r4, pc}

0800bd98 <rmw_validate_namespace_with_size>:
 800bd98:	b340      	cbz	r0, 800bdec <rmw_validate_namespace_with_size+0x54>
 800bd9a:	b570      	push	{r4, r5, r6, lr}
 800bd9c:	4614      	mov	r4, r2
 800bd9e:	b0c2      	sub	sp, #264	@ 0x108
 800bda0:	b332      	cbz	r2, 800bdf0 <rmw_validate_namespace_with_size+0x58>
 800bda2:	2901      	cmp	r1, #1
 800bda4:	460d      	mov	r5, r1
 800bda6:	461e      	mov	r6, r3
 800bda8:	d102      	bne.n	800bdb0 <rmw_validate_namespace_with_size+0x18>
 800bdaa:	7803      	ldrb	r3, [r0, #0]
 800bdac:	2b2f      	cmp	r3, #47	@ 0x2f
 800bdae:	d012      	beq.n	800bdd6 <rmw_validate_namespace_with_size+0x3e>
 800bdb0:	aa01      	add	r2, sp, #4
 800bdb2:	4669      	mov	r1, sp
 800bdb4:	f007 f848 	bl	8012e48 <rmw_validate_full_topic_name>
 800bdb8:	b978      	cbnz	r0, 800bdda <rmw_validate_namespace_with_size+0x42>
 800bdba:	9b00      	ldr	r3, [sp, #0]
 800bdbc:	b14b      	cbz	r3, 800bdd2 <rmw_validate_namespace_with_size+0x3a>
 800bdbe:	2b07      	cmp	r3, #7
 800bdc0:	d007      	beq.n	800bdd2 <rmw_validate_namespace_with_size+0x3a>
 800bdc2:	1e5a      	subs	r2, r3, #1
 800bdc4:	2a05      	cmp	r2, #5
 800bdc6:	d82b      	bhi.n	800be20 <rmw_validate_namespace_with_size+0x88>
 800bdc8:	e8df f002 	tbb	[pc, r2]
 800bdcc:	1e212427 	.word	0x1e212427
 800bdd0:	141b      	.short	0x141b
 800bdd2:	2df5      	cmp	r5, #245	@ 0xf5
 800bdd4:	d803      	bhi.n	800bdde <rmw_validate_namespace_with_size+0x46>
 800bdd6:	2000      	movs	r0, #0
 800bdd8:	6020      	str	r0, [r4, #0]
 800bdda:	b042      	add	sp, #264	@ 0x108
 800bddc:	bd70      	pop	{r4, r5, r6, pc}
 800bdde:	2307      	movs	r3, #7
 800bde0:	6023      	str	r3, [r4, #0]
 800bde2:	2e00      	cmp	r6, #0
 800bde4:	d0f9      	beq.n	800bdda <rmw_validate_namespace_with_size+0x42>
 800bde6:	23f4      	movs	r3, #244	@ 0xf4
 800bde8:	6033      	str	r3, [r6, #0]
 800bdea:	e7f6      	b.n	800bdda <rmw_validate_namespace_with_size+0x42>
 800bdec:	200b      	movs	r0, #11
 800bdee:	4770      	bx	lr
 800bdf0:	200b      	movs	r0, #11
 800bdf2:	e7f2      	b.n	800bdda <rmw_validate_namespace_with_size+0x42>
 800bdf4:	2306      	movs	r3, #6
 800bdf6:	6023      	str	r3, [r4, #0]
 800bdf8:	2e00      	cmp	r6, #0
 800bdfa:	d0ee      	beq.n	800bdda <rmw_validate_namespace_with_size+0x42>
 800bdfc:	9b01      	ldr	r3, [sp, #4]
 800bdfe:	6033      	str	r3, [r6, #0]
 800be00:	e7eb      	b.n	800bdda <rmw_validate_namespace_with_size+0x42>
 800be02:	2305      	movs	r3, #5
 800be04:	6023      	str	r3, [r4, #0]
 800be06:	e7f7      	b.n	800bdf8 <rmw_validate_namespace_with_size+0x60>
 800be08:	2304      	movs	r3, #4
 800be0a:	6023      	str	r3, [r4, #0]
 800be0c:	e7f4      	b.n	800bdf8 <rmw_validate_namespace_with_size+0x60>
 800be0e:	2303      	movs	r3, #3
 800be10:	6023      	str	r3, [r4, #0]
 800be12:	e7f1      	b.n	800bdf8 <rmw_validate_namespace_with_size+0x60>
 800be14:	2302      	movs	r3, #2
 800be16:	6023      	str	r3, [r4, #0]
 800be18:	e7ee      	b.n	800bdf8 <rmw_validate_namespace_with_size+0x60>
 800be1a:	2301      	movs	r3, #1
 800be1c:	6023      	str	r3, [r4, #0]
 800be1e:	e7eb      	b.n	800bdf8 <rmw_validate_namespace_with_size+0x60>
 800be20:	4a03      	ldr	r2, [pc, #12]	@ (800be30 <rmw_validate_namespace_with_size+0x98>)
 800be22:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800be26:	a802      	add	r0, sp, #8
 800be28:	f7ff fed0 	bl	800bbcc <rcutils_snprintf>
 800be2c:	2001      	movs	r0, #1
 800be2e:	e7d4      	b.n	800bdda <rmw_validate_namespace_with_size+0x42>
 800be30:	0801a210 	.word	0x0801a210

0800be34 <rmw_validate_namespace>:
 800be34:	b168      	cbz	r0, 800be52 <rmw_validate_namespace+0x1e>
 800be36:	b570      	push	{r4, r5, r6, lr}
 800be38:	460d      	mov	r5, r1
 800be3a:	4616      	mov	r6, r2
 800be3c:	4604      	mov	r4, r0
 800be3e:	f7f4 fa47 	bl	80002d0 <strlen>
 800be42:	4633      	mov	r3, r6
 800be44:	4601      	mov	r1, r0
 800be46:	462a      	mov	r2, r5
 800be48:	4620      	mov	r0, r4
 800be4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800be4e:	f7ff bfa3 	b.w	800bd98 <rmw_validate_namespace_with_size>
 800be52:	200b      	movs	r0, #11
 800be54:	4770      	bx	lr
 800be56:	bf00      	nop

0800be58 <rmw_namespace_validation_result_string>:
 800be58:	2807      	cmp	r0, #7
 800be5a:	bf9a      	itte	ls
 800be5c:	4b02      	ldrls	r3, [pc, #8]	@ (800be68 <rmw_namespace_validation_result_string+0x10>)
 800be5e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800be62:	4802      	ldrhi	r0, [pc, #8]	@ (800be6c <rmw_namespace_validation_result_string+0x14>)
 800be64:	4770      	bx	lr
 800be66:	bf00      	nop
 800be68:	0801a408 	.word	0x0801a408
 800be6c:	0801a260 	.word	0x0801a260

0800be70 <rmw_validate_node_name>:
 800be70:	2800      	cmp	r0, #0
 800be72:	d03b      	beq.n	800beec <rmw_validate_node_name+0x7c>
 800be74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be78:	460d      	mov	r5, r1
 800be7a:	2900      	cmp	r1, #0
 800be7c:	d038      	beq.n	800bef0 <rmw_validate_node_name+0x80>
 800be7e:	4616      	mov	r6, r2
 800be80:	4604      	mov	r4, r0
 800be82:	f7f4 fa25 	bl	80002d0 <strlen>
 800be86:	b1e0      	cbz	r0, 800bec2 <rmw_validate_node_name+0x52>
 800be88:	1e63      	subs	r3, r4, #1
 800be8a:	eb03 0800 	add.w	r8, r3, r0
 800be8e:	f1c4 0101 	rsb	r1, r4, #1
 800be92:	18cf      	adds	r7, r1, r3
 800be94:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 800be98:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 800be9c:	f02e 0c20 	bic.w	ip, lr, #32
 800bea0:	2a09      	cmp	r2, #9
 800bea2:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 800bea6:	d914      	bls.n	800bed2 <rmw_validate_node_name+0x62>
 800bea8:	f1bc 0f19 	cmp.w	ip, #25
 800beac:	d911      	bls.n	800bed2 <rmw_validate_node_name+0x62>
 800beae:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 800beb2:	d00e      	beq.n	800bed2 <rmw_validate_node_name+0x62>
 800beb4:	2302      	movs	r3, #2
 800beb6:	602b      	str	r3, [r5, #0]
 800beb8:	b106      	cbz	r6, 800bebc <rmw_validate_node_name+0x4c>
 800beba:	6037      	str	r7, [r6, #0]
 800bebc:	2000      	movs	r0, #0
 800bebe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bec2:	2301      	movs	r3, #1
 800bec4:	602b      	str	r3, [r5, #0]
 800bec6:	2e00      	cmp	r6, #0
 800bec8:	d0f8      	beq.n	800bebc <rmw_validate_node_name+0x4c>
 800beca:	2000      	movs	r0, #0
 800becc:	6030      	str	r0, [r6, #0]
 800bece:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bed2:	4543      	cmp	r3, r8
 800bed4:	d1dd      	bne.n	800be92 <rmw_validate_node_name+0x22>
 800bed6:	7822      	ldrb	r2, [r4, #0]
 800bed8:	4b0d      	ldr	r3, [pc, #52]	@ (800bf10 <rmw_validate_node_name+0xa0>)
 800beda:	5cd3      	ldrb	r3, [r2, r3]
 800bedc:	f013 0304 	ands.w	r3, r3, #4
 800bee0:	d110      	bne.n	800bf04 <rmw_validate_node_name+0x94>
 800bee2:	28ff      	cmp	r0, #255	@ 0xff
 800bee4:	d806      	bhi.n	800bef4 <rmw_validate_node_name+0x84>
 800bee6:	602b      	str	r3, [r5, #0]
 800bee8:	4618      	mov	r0, r3
 800beea:	e7e8      	b.n	800bebe <rmw_validate_node_name+0x4e>
 800beec:	200b      	movs	r0, #11
 800beee:	4770      	bx	lr
 800bef0:	200b      	movs	r0, #11
 800bef2:	e7e4      	b.n	800bebe <rmw_validate_node_name+0x4e>
 800bef4:	2204      	movs	r2, #4
 800bef6:	602a      	str	r2, [r5, #0]
 800bef8:	2e00      	cmp	r6, #0
 800befa:	d0df      	beq.n	800bebc <rmw_validate_node_name+0x4c>
 800befc:	22fe      	movs	r2, #254	@ 0xfe
 800befe:	6032      	str	r2, [r6, #0]
 800bf00:	4618      	mov	r0, r3
 800bf02:	e7dc      	b.n	800bebe <rmw_validate_node_name+0x4e>
 800bf04:	2303      	movs	r3, #3
 800bf06:	602b      	str	r3, [r5, #0]
 800bf08:	2e00      	cmp	r6, #0
 800bf0a:	d1de      	bne.n	800beca <rmw_validate_node_name+0x5a>
 800bf0c:	e7d6      	b.n	800bebc <rmw_validate_node_name+0x4c>
 800bf0e:	bf00      	nop
 800bf10:	0801ac6e 	.word	0x0801ac6e

0800bf14 <rmw_node_name_validation_result_string>:
 800bf14:	2804      	cmp	r0, #4
 800bf16:	bf9a      	itte	ls
 800bf18:	4b02      	ldrls	r3, [pc, #8]	@ (800bf24 <rmw_node_name_validation_result_string+0x10>)
 800bf1a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800bf1e:	4802      	ldrhi	r0, [pc, #8]	@ (800bf28 <rmw_node_name_validation_result_string+0x14>)
 800bf20:	4770      	bx	lr
 800bf22:	bf00      	nop
 800bf24:	0801a514 	.word	0x0801a514
 800bf28:	0801a428 	.word	0x0801a428

0800bf2c <rmw_uros_set_custom_transport>:
 800bf2c:	b470      	push	{r4, r5, r6}
 800bf2e:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800bf32:	b162      	cbz	r2, 800bf4e <rmw_uros_set_custom_transport+0x22>
 800bf34:	b15b      	cbz	r3, 800bf4e <rmw_uros_set_custom_transport+0x22>
 800bf36:	b155      	cbz	r5, 800bf4e <rmw_uros_set_custom_transport+0x22>
 800bf38:	b14e      	cbz	r6, 800bf4e <rmw_uros_set_custom_transport+0x22>
 800bf3a:	4c06      	ldr	r4, [pc, #24]	@ (800bf54 <rmw_uros_set_custom_transport+0x28>)
 800bf3c:	7020      	strb	r0, [r4, #0]
 800bf3e:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800bf42:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800bf46:	6166      	str	r6, [r4, #20]
 800bf48:	2000      	movs	r0, #0
 800bf4a:	bc70      	pop	{r4, r5, r6}
 800bf4c:	4770      	bx	lr
 800bf4e:	200b      	movs	r0, #11
 800bf50:	bc70      	pop	{r4, r5, r6}
 800bf52:	4770      	bx	lr
 800bf54:	2000c884 	.word	0x2000c884

0800bf58 <create_node>:
 800bf58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bf5c:	b083      	sub	sp, #12
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d05f      	beq.n	800c022 <create_node+0xca>
 800bf62:	4606      	mov	r6, r0
 800bf64:	4835      	ldr	r0, [pc, #212]	@ (800c03c <create_node+0xe4>)
 800bf66:	460f      	mov	r7, r1
 800bf68:	4690      	mov	r8, r2
 800bf6a:	461d      	mov	r5, r3
 800bf6c:	f006 ffe2 	bl	8012f34 <get_memory>
 800bf70:	2800      	cmp	r0, #0
 800bf72:	d056      	beq.n	800c022 <create_node+0xca>
 800bf74:	6884      	ldr	r4, [r0, #8]
 800bf76:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800bf78:	6123      	str	r3, [r4, #16]
 800bf7a:	f007 f843 	bl	8013004 <rmw_get_implementation_identifier>
 800bf7e:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 800bf82:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800bf86:	f8c4 9020 	str.w	r9, [r4, #32]
 800bf8a:	4630      	mov	r0, r6
 800bf8c:	f7f4 f9a0 	bl	80002d0 <strlen>
 800bf90:	1c42      	adds	r2, r0, #1
 800bf92:	2a3c      	cmp	r2, #60	@ 0x3c
 800bf94:	f104 0518 	add.w	r5, r4, #24
 800bf98:	d840      	bhi.n	800c01c <create_node+0xc4>
 800bf9a:	4648      	mov	r0, r9
 800bf9c:	4631      	mov	r1, r6
 800bf9e:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 800bfa2:	f00c f83c 	bl	801801e <memcpy>
 800bfa6:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 800bfaa:	4638      	mov	r0, r7
 800bfac:	f7f4 f990 	bl	80002d0 <strlen>
 800bfb0:	1c42      	adds	r2, r0, #1
 800bfb2:	2a3c      	cmp	r2, #60	@ 0x3c
 800bfb4:	d832      	bhi.n	800c01c <create_node+0xc4>
 800bfb6:	4639      	mov	r1, r7
 800bfb8:	4648      	mov	r0, r9
 800bfba:	f00c f830 	bl	801801e <memcpy>
 800bfbe:	6923      	ldr	r3, [r4, #16]
 800bfc0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bfc4:	2101      	movs	r1, #1
 800bfc6:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 800bfca:	1842      	adds	r2, r0, r1
 800bfcc:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 800bfd0:	f001 fb84 	bl	800d6dc <uxr_object_id>
 800bfd4:	6160      	str	r0, [r4, #20]
 800bfd6:	783b      	ldrb	r3, [r7, #0]
 800bfd8:	2b2f      	cmp	r3, #47	@ 0x2f
 800bfda:	d127      	bne.n	800c02c <create_node+0xd4>
 800bfdc:	787b      	ldrb	r3, [r7, #1]
 800bfde:	bb2b      	cbnz	r3, 800c02c <create_node+0xd4>
 800bfe0:	4a17      	ldr	r2, [pc, #92]	@ (800c040 <create_node+0xe8>)
 800bfe2:	4818      	ldr	r0, [pc, #96]	@ (800c044 <create_node+0xec>)
 800bfe4:	4633      	mov	r3, r6
 800bfe6:	213c      	movs	r1, #60	@ 0x3c
 800bfe8:	f00b fd68 	bl	8017abc <sniprintf>
 800bfec:	6920      	ldr	r0, [r4, #16]
 800bfee:	4915      	ldr	r1, [pc, #84]	@ (800c044 <create_node+0xec>)
 800bff0:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800bff4:	9100      	str	r1, [sp, #0]
 800bff6:	2106      	movs	r1, #6
 800bff8:	9101      	str	r1, [sp, #4]
 800bffa:	6811      	ldr	r1, [r2, #0]
 800bffc:	6962      	ldr	r2, [r4, #20]
 800bffe:	fa1f f388 	uxth.w	r3, r8
 800c002:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c006:	f001 f9b3 	bl	800d370 <uxr_buffer_create_participant_bin>
 800c00a:	4602      	mov	r2, r0
 800c00c:	6920      	ldr	r0, [r4, #16]
 800c00e:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800c012:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800c016:	f000 ff19 	bl	800ce4c <run_xrce_session>
 800c01a:	b918      	cbnz	r0, 800c024 <create_node+0xcc>
 800c01c:	4628      	mov	r0, r5
 800c01e:	f000 fda3 	bl	800cb68 <rmw_uxrce_fini_node_memory>
 800c022:	2500      	movs	r5, #0
 800c024:	4628      	mov	r0, r5
 800c026:	b003      	add	sp, #12
 800c028:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c02c:	4a06      	ldr	r2, [pc, #24]	@ (800c048 <create_node+0xf0>)
 800c02e:	9600      	str	r6, [sp, #0]
 800c030:	463b      	mov	r3, r7
 800c032:	213c      	movs	r1, #60	@ 0x3c
 800c034:	4803      	ldr	r0, [pc, #12]	@ (800c044 <create_node+0xec>)
 800c036:	f00b fd41 	bl	8017abc <sniprintf>
 800c03a:	e7d7      	b.n	800bfec <create_node+0x94>
 800c03c:	200111ac 	.word	0x200111ac
 800c040:	0801a55c 	.word	0x0801a55c
 800c044:	2000c8a0 	.word	0x2000c8a0
 800c048:	08019fdc 	.word	0x08019fdc

0800c04c <rmw_create_node>:
 800c04c:	b199      	cbz	r1, 800c076 <rmw_create_node+0x2a>
 800c04e:	780b      	ldrb	r3, [r1, #0]
 800c050:	468c      	mov	ip, r1
 800c052:	b183      	cbz	r3, 800c076 <rmw_create_node+0x2a>
 800c054:	b410      	push	{r4}
 800c056:	4614      	mov	r4, r2
 800c058:	b14a      	cbz	r2, 800c06e <rmw_create_node+0x22>
 800c05a:	7813      	ldrb	r3, [r2, #0]
 800c05c:	b13b      	cbz	r3, 800c06e <rmw_create_node+0x22>
 800c05e:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 800c060:	4603      	mov	r3, r0
 800c062:	4621      	mov	r1, r4
 800c064:	4660      	mov	r0, ip
 800c066:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c06a:	f7ff bf75 	b.w	800bf58 <create_node>
 800c06e:	2000      	movs	r0, #0
 800c070:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c074:	4770      	bx	lr
 800c076:	2000      	movs	r0, #0
 800c078:	4770      	bx	lr
 800c07a:	bf00      	nop

0800c07c <rmw_destroy_node>:
 800c07c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c07e:	b328      	cbz	r0, 800c0cc <rmw_destroy_node+0x50>
 800c080:	4607      	mov	r7, r0
 800c082:	6800      	ldr	r0, [r0, #0]
 800c084:	b120      	cbz	r0, 800c090 <rmw_destroy_node+0x14>
 800c086:	4b36      	ldr	r3, [pc, #216]	@ (800c160 <rmw_destroy_node+0xe4>)
 800c088:	6819      	ldr	r1, [r3, #0]
 800c08a:	f7f4 f8c1 	bl	8000210 <strcmp>
 800c08e:	b9e8      	cbnz	r0, 800c0cc <rmw_destroy_node+0x50>
 800c090:	687d      	ldr	r5, [r7, #4]
 800c092:	b1dd      	cbz	r5, 800c0cc <rmw_destroy_node+0x50>
 800c094:	4b33      	ldr	r3, [pc, #204]	@ (800c164 <rmw_destroy_node+0xe8>)
 800c096:	681c      	ldr	r4, [r3, #0]
 800c098:	2c00      	cmp	r4, #0
 800c09a:	d05f      	beq.n	800c15c <rmw_destroy_node+0xe0>
 800c09c:	2600      	movs	r6, #0
 800c09e:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800c0a2:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 800c0a6:	429d      	cmp	r5, r3
 800c0a8:	d013      	beq.n	800c0d2 <rmw_destroy_node+0x56>
 800c0aa:	2c00      	cmp	r4, #0
 800c0ac:	d1f7      	bne.n	800c09e <rmw_destroy_node+0x22>
 800c0ae:	4b2e      	ldr	r3, [pc, #184]	@ (800c168 <rmw_destroy_node+0xec>)
 800c0b0:	681c      	ldr	r4, [r3, #0]
 800c0b2:	b1c4      	cbz	r4, 800c0e6 <rmw_destroy_node+0x6a>
 800c0b4:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800c0b8:	6a0b      	ldr	r3, [r1, #32]
 800c0ba:	429d      	cmp	r5, r3
 800c0bc:	d1f9      	bne.n	800c0b2 <rmw_destroy_node+0x36>
 800c0be:	317c      	adds	r1, #124	@ 0x7c
 800c0c0:	4638      	mov	r0, r7
 800c0c2:	f000 fb37 	bl	800c734 <rmw_destroy_subscription>
 800c0c6:	2801      	cmp	r0, #1
 800c0c8:	4606      	mov	r6, r0
 800c0ca:	d1f2      	bne.n	800c0b2 <rmw_destroy_node+0x36>
 800c0cc:	2601      	movs	r6, #1
 800c0ce:	4630      	mov	r0, r6
 800c0d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0d2:	3184      	adds	r1, #132	@ 0x84
 800c0d4:	4638      	mov	r0, r7
 800c0d6:	f000 f9a5 	bl	800c424 <rmw_destroy_publisher>
 800c0da:	2801      	cmp	r0, #1
 800c0dc:	4606      	mov	r6, r0
 800c0de:	d0f5      	beq.n	800c0cc <rmw_destroy_node+0x50>
 800c0e0:	2c00      	cmp	r4, #0
 800c0e2:	d1dc      	bne.n	800c09e <rmw_destroy_node+0x22>
 800c0e4:	e7e3      	b.n	800c0ae <rmw_destroy_node+0x32>
 800c0e6:	4b21      	ldr	r3, [pc, #132]	@ (800c16c <rmw_destroy_node+0xf0>)
 800c0e8:	681c      	ldr	r4, [r3, #0]
 800c0ea:	b16c      	cbz	r4, 800c108 <rmw_destroy_node+0x8c>
 800c0ec:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800c0f0:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800c0f2:	429d      	cmp	r5, r3
 800c0f4:	d1f9      	bne.n	800c0ea <rmw_destroy_node+0x6e>
 800c0f6:	317c      	adds	r1, #124	@ 0x7c
 800c0f8:	4638      	mov	r0, r7
 800c0fa:	f000 f9e5 	bl	800c4c8 <rmw_destroy_service>
 800c0fe:	2801      	cmp	r0, #1
 800c100:	4606      	mov	r6, r0
 800c102:	d0e3      	beq.n	800c0cc <rmw_destroy_node+0x50>
 800c104:	2c00      	cmp	r4, #0
 800c106:	d1f1      	bne.n	800c0ec <rmw_destroy_node+0x70>
 800c108:	4b19      	ldr	r3, [pc, #100]	@ (800c170 <rmw_destroy_node+0xf4>)
 800c10a:	681c      	ldr	r4, [r3, #0]
 800c10c:	b16c      	cbz	r4, 800c12a <rmw_destroy_node+0xae>
 800c10e:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800c112:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800c114:	429d      	cmp	r5, r3
 800c116:	d1f9      	bne.n	800c10c <rmw_destroy_node+0x90>
 800c118:	317c      	adds	r1, #124	@ 0x7c
 800c11a:	4638      	mov	r0, r7
 800c11c:	f006 ff2e 	bl	8012f7c <rmw_destroy_client>
 800c120:	2801      	cmp	r0, #1
 800c122:	4606      	mov	r6, r0
 800c124:	d0d2      	beq.n	800c0cc <rmw_destroy_node+0x50>
 800c126:	2c00      	cmp	r4, #0
 800c128:	d1f1      	bne.n	800c10e <rmw_destroy_node+0x92>
 800c12a:	6928      	ldr	r0, [r5, #16]
 800c12c:	696a      	ldr	r2, [r5, #20]
 800c12e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800c132:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c136:	6819      	ldr	r1, [r3, #0]
 800c138:	f001 f8ce 	bl	800d2d8 <uxr_buffer_delete_entity>
 800c13c:	4602      	mov	r2, r0
 800c13e:	6928      	ldr	r0, [r5, #16]
 800c140:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800c144:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800c148:	f000 fe80 	bl	800ce4c <run_xrce_session>
 800c14c:	2800      	cmp	r0, #0
 800c14e:	bf08      	it	eq
 800c150:	2602      	moveq	r6, #2
 800c152:	4638      	mov	r0, r7
 800c154:	f000 fd08 	bl	800cb68 <rmw_uxrce_fini_node_memory>
 800c158:	4630      	mov	r0, r6
 800c15a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c15c:	4626      	mov	r6, r4
 800c15e:	e7a6      	b.n	800c0ae <rmw_destroy_node+0x32>
 800c160:	0801a8bc 	.word	0x0801a8bc
 800c164:	200111bc 	.word	0x200111bc
 800c168:	200111fc 	.word	0x200111fc
 800c16c:	200111cc 	.word	0x200111cc
 800c170:	2000c8dc 	.word	0x2000c8dc

0800c174 <rmw_node_get_graph_guard_condition>:
 800c174:	6843      	ldr	r3, [r0, #4]
 800c176:	6918      	ldr	r0, [r3, #16]
 800c178:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 800c17c:	4770      	bx	lr
 800c17e:	bf00      	nop

0800c180 <flush_session>:
 800c180:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800c182:	f002 b8e9 	b.w	800e358 <uxr_run_session_until_confirm_delivery>
 800c186:	bf00      	nop

0800c188 <rmw_publish>:
 800c188:	2800      	cmp	r0, #0
 800c18a:	d053      	beq.n	800c234 <rmw_publish+0xac>
 800c18c:	b570      	push	{r4, r5, r6, lr}
 800c18e:	460d      	mov	r5, r1
 800c190:	b08e      	sub	sp, #56	@ 0x38
 800c192:	2900      	cmp	r1, #0
 800c194:	d04b      	beq.n	800c22e <rmw_publish+0xa6>
 800c196:	4604      	mov	r4, r0
 800c198:	6800      	ldr	r0, [r0, #0]
 800c19a:	f000 fed7 	bl	800cf4c <is_uxrce_rmw_identifier_valid>
 800c19e:	2800      	cmp	r0, #0
 800c1a0:	d045      	beq.n	800c22e <rmw_publish+0xa6>
 800c1a2:	6866      	ldr	r6, [r4, #4]
 800c1a4:	2e00      	cmp	r6, #0
 800c1a6:	d042      	beq.n	800c22e <rmw_publish+0xa6>
 800c1a8:	69b4      	ldr	r4, [r6, #24]
 800c1aa:	4628      	mov	r0, r5
 800c1ac:	6923      	ldr	r3, [r4, #16]
 800c1ae:	4798      	blx	r3
 800c1b0:	69f3      	ldr	r3, [r6, #28]
 800c1b2:	9005      	str	r0, [sp, #20]
 800c1b4:	b113      	cbz	r3, 800c1bc <rmw_publish+0x34>
 800c1b6:	a805      	add	r0, sp, #20
 800c1b8:	4798      	blx	r3
 800c1ba:	9805      	ldr	r0, [sp, #20]
 800c1bc:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800c1c0:	691b      	ldr	r3, [r3, #16]
 800c1c2:	9000      	str	r0, [sp, #0]
 800c1c4:	6972      	ldr	r2, [r6, #20]
 800c1c6:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800c1c8:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800c1cc:	ab06      	add	r3, sp, #24
 800c1ce:	f002 feaf 	bl	800ef30 <uxr_prepare_output_stream>
 800c1d2:	b1d8      	cbz	r0, 800c20c <rmw_publish+0x84>
 800c1d4:	68a3      	ldr	r3, [r4, #8]
 800c1d6:	a906      	add	r1, sp, #24
 800c1d8:	4628      	mov	r0, r5
 800c1da:	4798      	blx	r3
 800c1dc:	6a33      	ldr	r3, [r6, #32]
 800c1de:	4604      	mov	r4, r0
 800c1e0:	b10b      	cbz	r3, 800c1e6 <rmw_publish+0x5e>
 800c1e2:	a806      	add	r0, sp, #24
 800c1e4:	4798      	blx	r3
 800c1e6:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800c1ea:	2b01      	cmp	r3, #1
 800c1ec:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800c1f0:	d022      	beq.n	800c238 <rmw_publish+0xb0>
 800c1f2:	6918      	ldr	r0, [r3, #16]
 800c1f4:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800c1f6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c1fa:	f002 f8ad 	bl	800e358 <uxr_run_session_until_confirm_delivery>
 800c1fe:	4020      	ands	r0, r4
 800c200:	b2c4      	uxtb	r4, r0
 800c202:	f084 0001 	eor.w	r0, r4, #1
 800c206:	b2c0      	uxtb	r0, r0
 800c208:	b00e      	add	sp, #56	@ 0x38
 800c20a:	bd70      	pop	{r4, r5, r6, pc}
 800c20c:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800c210:	6918      	ldr	r0, [r3, #16]
 800c212:	9b05      	ldr	r3, [sp, #20]
 800c214:	9300      	str	r3, [sp, #0]
 800c216:	4b0b      	ldr	r3, [pc, #44]	@ (800c244 <rmw_publish+0xbc>)
 800c218:	9301      	str	r3, [sp, #4]
 800c21a:	9602      	str	r6, [sp, #8]
 800c21c:	6972      	ldr	r2, [r6, #20]
 800c21e:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800c220:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c224:	ab06      	add	r3, sp, #24
 800c226:	f002 feb3 	bl	800ef90 <uxr_prepare_output_stream_fragmented>
 800c22a:	2800      	cmp	r0, #0
 800c22c:	d1d2      	bne.n	800c1d4 <rmw_publish+0x4c>
 800c22e:	2001      	movs	r0, #1
 800c230:	b00e      	add	sp, #56	@ 0x38
 800c232:	bd70      	pop	{r4, r5, r6, pc}
 800c234:	2001      	movs	r0, #1
 800c236:	4770      	bx	lr
 800c238:	6918      	ldr	r0, [r3, #16]
 800c23a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c23e:	f001 fccb 	bl	800dbd8 <uxr_flash_output_streams>
 800c242:	e7de      	b.n	800c202 <rmw_publish+0x7a>
 800c244:	0800c181 	.word	0x0800c181

0800c248 <rmw_create_publisher>:
 800c248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c24c:	b087      	sub	sp, #28
 800c24e:	2800      	cmp	r0, #0
 800c250:	f000 80cc 	beq.w	800c3ec <rmw_create_publisher+0x1a4>
 800c254:	460e      	mov	r6, r1
 800c256:	2900      	cmp	r1, #0
 800c258:	f000 80c8 	beq.w	800c3ec <rmw_create_publisher+0x1a4>
 800c25c:	4604      	mov	r4, r0
 800c25e:	6800      	ldr	r0, [r0, #0]
 800c260:	4615      	mov	r5, r2
 800c262:	4698      	mov	r8, r3
 800c264:	f000 fe72 	bl	800cf4c <is_uxrce_rmw_identifier_valid>
 800c268:	2800      	cmp	r0, #0
 800c26a:	f000 80bf 	beq.w	800c3ec <rmw_create_publisher+0x1a4>
 800c26e:	2d00      	cmp	r5, #0
 800c270:	f000 80bc 	beq.w	800c3ec <rmw_create_publisher+0x1a4>
 800c274:	782b      	ldrb	r3, [r5, #0]
 800c276:	2b00      	cmp	r3, #0
 800c278:	f000 80b8 	beq.w	800c3ec <rmw_create_publisher+0x1a4>
 800c27c:	f1b8 0f00 	cmp.w	r8, #0
 800c280:	f000 80b4 	beq.w	800c3ec <rmw_create_publisher+0x1a4>
 800c284:	485c      	ldr	r0, [pc, #368]	@ (800c3f8 <rmw_create_publisher+0x1b0>)
 800c286:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800c28a:	f006 fe53 	bl	8012f34 <get_memory>
 800c28e:	2800      	cmp	r0, #0
 800c290:	f000 80ac 	beq.w	800c3ec <rmw_create_publisher+0x1a4>
 800c294:	6884      	ldr	r4, [r0, #8]
 800c296:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800c29a:	f006 feb3 	bl	8013004 <rmw_get_implementation_identifier>
 800c29e:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800c2a2:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800c2a6:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800c2aa:	4628      	mov	r0, r5
 800c2ac:	f7f4 f810 	bl	80002d0 <strlen>
 800c2b0:	3001      	adds	r0, #1
 800c2b2:	283c      	cmp	r0, #60	@ 0x3c
 800c2b4:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 800c2b8:	f200 8091 	bhi.w	800c3de <rmw_create_publisher+0x196>
 800c2bc:	4a4f      	ldr	r2, [pc, #316]	@ (800c3fc <rmw_create_publisher+0x1b4>)
 800c2be:	462b      	mov	r3, r5
 800c2c0:	213c      	movs	r1, #60	@ 0x3c
 800c2c2:	4650      	mov	r0, sl
 800c2c4:	f00b fbfa 	bl	8017abc <sniprintf>
 800c2c8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c2cc:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800c2ce:	4641      	mov	r1, r8
 800c2d0:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800c2d4:	2250      	movs	r2, #80	@ 0x50
 800c2d6:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800c2da:	f00b fea0 	bl	801801e <memcpy>
 800c2de:	f898 3008 	ldrb.w	r3, [r8, #8]
 800c2e2:	4947      	ldr	r1, [pc, #284]	@ (800c400 <rmw_create_publisher+0x1b8>)
 800c2e4:	2b02      	cmp	r3, #2
 800c2e6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c2ea:	bf0c      	ite	eq
 800c2ec:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800c2f0:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800c2f4:	67a3      	str	r3, [r4, #120]	@ 0x78
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800c2fc:	4630      	mov	r0, r6
 800c2fe:	f000 fe33 	bl	800cf68 <get_message_typesupport_handle>
 800c302:	2800      	cmp	r0, #0
 800c304:	d06b      	beq.n	800c3de <rmw_create_publisher+0x196>
 800c306:	6842      	ldr	r2, [r0, #4]
 800c308:	61a2      	str	r2, [r4, #24]
 800c30a:	2a00      	cmp	r2, #0
 800c30c:	d067      	beq.n	800c3de <rmw_create_publisher+0x196>
 800c30e:	4629      	mov	r1, r5
 800c310:	4643      	mov	r3, r8
 800c312:	4648      	mov	r0, r9
 800c314:	f007 f904 	bl	8013520 <create_topic>
 800c318:	6260      	str	r0, [r4, #36]	@ 0x24
 800c31a:	2800      	cmp	r0, #0
 800c31c:	d063      	beq.n	800c3e6 <rmw_create_publisher+0x19e>
 800c31e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c322:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c326:	2103      	movs	r1, #3
 800c328:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800c32c:	1c42      	adds	r2, r0, #1
 800c32e:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800c332:	f001 f9d3 	bl	800d6dc <uxr_object_id>
 800c336:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800c33a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c33e:	6120      	str	r0, [r4, #16]
 800c340:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800c344:	6910      	ldr	r0, [r2, #16]
 800c346:	2506      	movs	r5, #6
 800c348:	9500      	str	r5, [sp, #0]
 800c34a:	6819      	ldr	r1, [r3, #0]
 800c34c:	6922      	ldr	r2, [r4, #16]
 800c34e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800c352:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c356:	f001 f873 	bl	800d440 <uxr_buffer_create_publisher_bin>
 800c35a:	4602      	mov	r2, r0
 800c35c:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800c360:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800c364:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800c368:	f000 fd70 	bl	800ce4c <run_xrce_session>
 800c36c:	b3b8      	cbz	r0, 800c3de <rmw_create_publisher+0x196>
 800c36e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c372:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c376:	2105      	movs	r1, #5
 800c378:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800c37c:	1c42      	adds	r2, r0, #1
 800c37e:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800c382:	f001 f9ab 	bl	800d6dc <uxr_object_id>
 800c386:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800c38a:	6160      	str	r0, [r4, #20]
 800c38c:	691e      	ldr	r6, [r3, #16]
 800c38e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c392:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800c396:	f10d 0a10 	add.w	sl, sp, #16
 800c39a:	4641      	mov	r1, r8
 800c39c:	4650      	mov	r0, sl
 800c39e:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 800c3a2:	f000 fd6f 	bl	800ce84 <convert_qos_profile>
 800c3a6:	9503      	str	r5, [sp, #12]
 800c3a8:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800c3ac:	9001      	str	r0, [sp, #4]
 800c3ae:	f8ad 1008 	strh.w	r1, [sp, #8]
 800c3b2:	f8db 3010 	ldr.w	r3, [fp, #16]
 800c3b6:	9300      	str	r3, [sp, #0]
 800c3b8:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800c3bc:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800c3c0:	f8d8 1000 	ldr.w	r1, [r8]
 800c3c4:	4630      	mov	r0, r6
 800c3c6:	f001 f89b 	bl	800d500 <uxr_buffer_create_datawriter_bin>
 800c3ca:	4602      	mov	r2, r0
 800c3cc:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800c3d0:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800c3d4:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800c3d8:	f000 fd38 	bl	800ce4c <run_xrce_session>
 800c3dc:	b938      	cbnz	r0, 800c3ee <rmw_create_publisher+0x1a6>
 800c3de:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800c3e0:	b108      	cbz	r0, 800c3e6 <rmw_create_publisher+0x19e>
 800c3e2:	f000 fc31 	bl	800cc48 <rmw_uxrce_fini_topic_memory>
 800c3e6:	4638      	mov	r0, r7
 800c3e8:	f000 fbd6 	bl	800cb98 <rmw_uxrce_fini_publisher_memory>
 800c3ec:	2700      	movs	r7, #0
 800c3ee:	4638      	mov	r0, r7
 800c3f0:	b007      	add	sp, #28
 800c3f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3f6:	bf00      	nop
 800c3f8:	200111bc 	.word	0x200111bc
 800c3fc:	0801a55c 	.word	0x0801a55c
 800c400:	0801a528 	.word	0x0801a528

0800c404 <rmw_publisher_get_actual_qos>:
 800c404:	b150      	cbz	r0, 800c41c <rmw_publisher_get_actual_qos+0x18>
 800c406:	b508      	push	{r3, lr}
 800c408:	460b      	mov	r3, r1
 800c40a:	b149      	cbz	r1, 800c420 <rmw_publisher_get_actual_qos+0x1c>
 800c40c:	6841      	ldr	r1, [r0, #4]
 800c40e:	2250      	movs	r2, #80	@ 0x50
 800c410:	3128      	adds	r1, #40	@ 0x28
 800c412:	4618      	mov	r0, r3
 800c414:	f00b fe03 	bl	801801e <memcpy>
 800c418:	2000      	movs	r0, #0
 800c41a:	bd08      	pop	{r3, pc}
 800c41c:	200b      	movs	r0, #11
 800c41e:	4770      	bx	lr
 800c420:	200b      	movs	r0, #11
 800c422:	bd08      	pop	{r3, pc}

0800c424 <rmw_destroy_publisher>:
 800c424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c426:	b128      	cbz	r0, 800c434 <rmw_destroy_publisher+0x10>
 800c428:	4604      	mov	r4, r0
 800c42a:	6800      	ldr	r0, [r0, #0]
 800c42c:	460d      	mov	r5, r1
 800c42e:	f000 fd8d 	bl	800cf4c <is_uxrce_rmw_identifier_valid>
 800c432:	b910      	cbnz	r0, 800c43a <rmw_destroy_publisher+0x16>
 800c434:	2401      	movs	r4, #1
 800c436:	4620      	mov	r0, r4
 800c438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c43a:	6863      	ldr	r3, [r4, #4]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d0f9      	beq.n	800c434 <rmw_destroy_publisher+0x10>
 800c440:	2d00      	cmp	r5, #0
 800c442:	d0f7      	beq.n	800c434 <rmw_destroy_publisher+0x10>
 800c444:	6828      	ldr	r0, [r5, #0]
 800c446:	f000 fd81 	bl	800cf4c <is_uxrce_rmw_identifier_valid>
 800c44a:	2800      	cmp	r0, #0
 800c44c:	d0f2      	beq.n	800c434 <rmw_destroy_publisher+0x10>
 800c44e:	686c      	ldr	r4, [r5, #4]
 800c450:	2c00      	cmp	r4, #0
 800c452:	d0ef      	beq.n	800c434 <rmw_destroy_publisher+0x10>
 800c454:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800c456:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800c45a:	f007 f8b1 	bl	80135c0 <destroy_topic>
 800c45e:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800c462:	6962      	ldr	r2, [r4, #20]
 800c464:	6918      	ldr	r0, [r3, #16]
 800c466:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800c46a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c46e:	6819      	ldr	r1, [r3, #0]
 800c470:	f000 ff32 	bl	800d2d8 <uxr_buffer_delete_entity>
 800c474:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800c478:	6922      	ldr	r2, [r4, #16]
 800c47a:	691b      	ldr	r3, [r3, #16]
 800c47c:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800c480:	4604      	mov	r4, r0
 800c482:	6809      	ldr	r1, [r1, #0]
 800c484:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800c488:	f000 ff26 	bl	800d2d8 <uxr_buffer_delete_entity>
 800c48c:	693e      	ldr	r6, [r7, #16]
 800c48e:	4622      	mov	r2, r4
 800c490:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800c494:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800c498:	4604      	mov	r4, r0
 800c49a:	4630      	mov	r0, r6
 800c49c:	f000 fcd6 	bl	800ce4c <run_xrce_session>
 800c4a0:	693e      	ldr	r6, [r7, #16]
 800c4a2:	4622      	mov	r2, r4
 800c4a4:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800c4a8:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800c4ac:	4604      	mov	r4, r0
 800c4ae:	4630      	mov	r0, r6
 800c4b0:	f000 fccc 	bl	800ce4c <run_xrce_session>
 800c4b4:	b12c      	cbz	r4, 800c4c2 <rmw_destroy_publisher+0x9e>
 800c4b6:	b120      	cbz	r0, 800c4c2 <rmw_destroy_publisher+0x9e>
 800c4b8:	2400      	movs	r4, #0
 800c4ba:	4628      	mov	r0, r5
 800c4bc:	f000 fb6c 	bl	800cb98 <rmw_uxrce_fini_publisher_memory>
 800c4c0:	e7b9      	b.n	800c436 <rmw_destroy_publisher+0x12>
 800c4c2:	2402      	movs	r4, #2
 800c4c4:	e7f9      	b.n	800c4ba <rmw_destroy_publisher+0x96>
 800c4c6:	bf00      	nop

0800c4c8 <rmw_destroy_service>:
 800c4c8:	b570      	push	{r4, r5, r6, lr}
 800c4ca:	b128      	cbz	r0, 800c4d8 <rmw_destroy_service+0x10>
 800c4cc:	4604      	mov	r4, r0
 800c4ce:	6800      	ldr	r0, [r0, #0]
 800c4d0:	460d      	mov	r5, r1
 800c4d2:	f000 fd3b 	bl	800cf4c <is_uxrce_rmw_identifier_valid>
 800c4d6:	b910      	cbnz	r0, 800c4de <rmw_destroy_service+0x16>
 800c4d8:	2401      	movs	r4, #1
 800c4da:	4620      	mov	r0, r4
 800c4dc:	bd70      	pop	{r4, r5, r6, pc}
 800c4de:	6863      	ldr	r3, [r4, #4]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d0f9      	beq.n	800c4d8 <rmw_destroy_service+0x10>
 800c4e4:	2d00      	cmp	r5, #0
 800c4e6:	d0f7      	beq.n	800c4d8 <rmw_destroy_service+0x10>
 800c4e8:	6828      	ldr	r0, [r5, #0]
 800c4ea:	f000 fd2f 	bl	800cf4c <is_uxrce_rmw_identifier_valid>
 800c4ee:	2800      	cmp	r0, #0
 800c4f0:	d0f2      	beq.n	800c4d8 <rmw_destroy_service+0x10>
 800c4f2:	686e      	ldr	r6, [r5, #4]
 800c4f4:	2e00      	cmp	r6, #0
 800c4f6:	d0ef      	beq.n	800c4d8 <rmw_destroy_service+0x10>
 800c4f8:	6864      	ldr	r4, [r4, #4]
 800c4fa:	6932      	ldr	r2, [r6, #16]
 800c4fc:	6920      	ldr	r0, [r4, #16]
 800c4fe:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800c502:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c506:	6819      	ldr	r1, [r3, #0]
 800c508:	f001 f952 	bl	800d7b0 <uxr_buffer_cancel_data>
 800c50c:	4602      	mov	r2, r0
 800c50e:	6920      	ldr	r0, [r4, #16]
 800c510:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800c514:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800c518:	f000 fc98 	bl	800ce4c <run_xrce_session>
 800c51c:	6920      	ldr	r0, [r4, #16]
 800c51e:	6932      	ldr	r2, [r6, #16]
 800c520:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800c524:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c528:	6819      	ldr	r1, [r3, #0]
 800c52a:	f000 fed5 	bl	800d2d8 <uxr_buffer_delete_entity>
 800c52e:	4602      	mov	r2, r0
 800c530:	6920      	ldr	r0, [r4, #16]
 800c532:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800c536:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800c53a:	f000 fc87 	bl	800ce4c <run_xrce_session>
 800c53e:	2800      	cmp	r0, #0
 800c540:	4628      	mov	r0, r5
 800c542:	bf14      	ite	ne
 800c544:	2400      	movne	r4, #0
 800c546:	2402      	moveq	r4, #2
 800c548:	f000 fb52 	bl	800cbf0 <rmw_uxrce_fini_service_memory>
 800c54c:	e7c5      	b.n	800c4da <rmw_destroy_service+0x12>
 800c54e:	bf00      	nop

0800c550 <rmw_create_subscription>:
 800c550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c554:	b08d      	sub	sp, #52	@ 0x34
 800c556:	2800      	cmp	r0, #0
 800c558:	f000 80d1 	beq.w	800c6fe <rmw_create_subscription+0x1ae>
 800c55c:	460e      	mov	r6, r1
 800c55e:	2900      	cmp	r1, #0
 800c560:	f000 80cd 	beq.w	800c6fe <rmw_create_subscription+0x1ae>
 800c564:	4604      	mov	r4, r0
 800c566:	6800      	ldr	r0, [r0, #0]
 800c568:	4615      	mov	r5, r2
 800c56a:	4698      	mov	r8, r3
 800c56c:	f000 fcee 	bl	800cf4c <is_uxrce_rmw_identifier_valid>
 800c570:	2800      	cmp	r0, #0
 800c572:	f000 80c4 	beq.w	800c6fe <rmw_create_subscription+0x1ae>
 800c576:	2d00      	cmp	r5, #0
 800c578:	f000 80c1 	beq.w	800c6fe <rmw_create_subscription+0x1ae>
 800c57c:	782b      	ldrb	r3, [r5, #0]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	f000 80bd 	beq.w	800c6fe <rmw_create_subscription+0x1ae>
 800c584:	f1b8 0f00 	cmp.w	r8, #0
 800c588:	f000 80b9 	beq.w	800c6fe <rmw_create_subscription+0x1ae>
 800c58c:	485e      	ldr	r0, [pc, #376]	@ (800c708 <rmw_create_subscription+0x1b8>)
 800c58e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800c592:	f006 fccf 	bl	8012f34 <get_memory>
 800c596:	4604      	mov	r4, r0
 800c598:	2800      	cmp	r0, #0
 800c59a:	f000 80b1 	beq.w	800c700 <rmw_create_subscription+0x1b0>
 800c59e:	6887      	ldr	r7, [r0, #8]
 800c5a0:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 800c5a4:	f006 fd2e 	bl	8013004 <rmw_get_implementation_identifier>
 800c5a8:	f107 0a98 	add.w	sl, r7, #152	@ 0x98
 800c5ac:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800c5ae:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 800c5b2:	4628      	mov	r0, r5
 800c5b4:	f7f3 fe8c 	bl	80002d0 <strlen>
 800c5b8:	3001      	adds	r0, #1
 800c5ba:	283c      	cmp	r0, #60	@ 0x3c
 800c5bc:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 800c5c0:	f200 8096 	bhi.w	800c6f0 <rmw_create_subscription+0x1a0>
 800c5c4:	4a51      	ldr	r2, [pc, #324]	@ (800c70c <rmw_create_subscription+0x1bc>)
 800c5c6:	462b      	mov	r3, r5
 800c5c8:	213c      	movs	r1, #60	@ 0x3c
 800c5ca:	4650      	mov	r0, sl
 800c5cc:	f00b fa76 	bl	8017abc <sniprintf>
 800c5d0:	4641      	mov	r1, r8
 800c5d2:	f8c7 9020 	str.w	r9, [r7, #32]
 800c5d6:	2250      	movs	r2, #80	@ 0x50
 800c5d8:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800c5dc:	f00b fd1f 	bl	801801e <memcpy>
 800c5e0:	494b      	ldr	r1, [pc, #300]	@ (800c710 <rmw_create_subscription+0x1c0>)
 800c5e2:	4630      	mov	r0, r6
 800c5e4:	f000 fcc0 	bl	800cf68 <get_message_typesupport_handle>
 800c5e8:	2800      	cmp	r0, #0
 800c5ea:	f000 8081 	beq.w	800c6f0 <rmw_create_subscription+0x1a0>
 800c5ee:	6842      	ldr	r2, [r0, #4]
 800c5f0:	61ba      	str	r2, [r7, #24]
 800c5f2:	2a00      	cmp	r2, #0
 800c5f4:	d07c      	beq.n	800c6f0 <rmw_create_subscription+0x1a0>
 800c5f6:	4629      	mov	r1, r5
 800c5f8:	4643      	mov	r3, r8
 800c5fa:	4648      	mov	r0, r9
 800c5fc:	f006 ff90 	bl	8013520 <create_topic>
 800c600:	61f8      	str	r0, [r7, #28]
 800c602:	2800      	cmp	r0, #0
 800c604:	d078      	beq.n	800c6f8 <rmw_create_subscription+0x1a8>
 800c606:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c60a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c60e:	2104      	movs	r1, #4
 800c610:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 800c614:	1c42      	adds	r2, r0, #1
 800c616:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 800c61a:	f001 f85f 	bl	800d6dc <uxr_object_id>
 800c61e:	6138      	str	r0, [r7, #16]
 800c620:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800c624:	2506      	movs	r5, #6
 800c626:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 800c62a:	9500      	str	r5, [sp, #0]
 800c62c:	6819      	ldr	r1, [r3, #0]
 800c62e:	693a      	ldr	r2, [r7, #16]
 800c630:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800c634:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c638:	f000 ff32 	bl	800d4a0 <uxr_buffer_create_subscriber_bin>
 800c63c:	4602      	mov	r2, r0
 800c63e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800c642:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800c646:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800c64a:	f000 fbff 	bl	800ce4c <run_xrce_session>
 800c64e:	2800      	cmp	r0, #0
 800c650:	d04e      	beq.n	800c6f0 <rmw_create_subscription+0x1a0>
 800c652:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c656:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c65a:	4629      	mov	r1, r5
 800c65c:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 800c660:	1c42      	adds	r2, r0, #1
 800c662:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 800c666:	f001 f839 	bl	800d6dc <uxr_object_id>
 800c66a:	ae08      	add	r6, sp, #32
 800c66c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c670:	69fb      	ldr	r3, [r7, #28]
 800c672:	6178      	str	r0, [r7, #20]
 800c674:	4641      	mov	r1, r8
 800c676:	4630      	mov	r0, r6
 800c678:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 800c67c:	9305      	str	r3, [sp, #20]
 800c67e:	f000 fc01 	bl	800ce84 <convert_qos_profile>
 800c682:	9503      	str	r5, [sp, #12]
 800c684:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c688:	9b05      	ldr	r3, [sp, #20]
 800c68a:	9001      	str	r0, [sp, #4]
 800c68c:	f8ad 1008 	strh.w	r1, [sp, #8]
 800c690:	691b      	ldr	r3, [r3, #16]
 800c692:	9300      	str	r3, [sp, #0]
 800c694:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 800c698:	f8db 1000 	ldr.w	r1, [fp]
 800c69c:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 800c6a0:	f000 ffa4 	bl	800d5ec <uxr_buffer_create_datareader_bin>
 800c6a4:	4602      	mov	r2, r0
 800c6a6:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800c6aa:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800c6ae:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800c6b2:	f000 fbcb 	bl	800ce4c <run_xrce_session>
 800c6b6:	b1d8      	cbz	r0, 800c6f0 <rmw_create_subscription+0x1a0>
 800c6b8:	f898 3008 	ldrb.w	r3, [r8, #8]
 800c6bc:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800c6c0:	2b02      	cmp	r3, #2
 800c6c2:	bf0c      	ite	eq
 800c6c4:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 800c6c8:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 800c6cc:	9307      	str	r3, [sp, #28]
 800c6ce:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800c6d2:	2200      	movs	r2, #0
 800c6d4:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 800c6d8:	ab0a      	add	r3, sp, #40	@ 0x28
 800c6da:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800c6de:	9300      	str	r3, [sp, #0]
 800c6e0:	697a      	ldr	r2, [r7, #20]
 800c6e2:	9b07      	ldr	r3, [sp, #28]
 800c6e4:	6809      	ldr	r1, [r1, #0]
 800c6e6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c6ea:	f001 f827 	bl	800d73c <uxr_buffer_request_data>
 800c6ee:	e007      	b.n	800c700 <rmw_create_subscription+0x1b0>
 800c6f0:	69f8      	ldr	r0, [r7, #28]
 800c6f2:	b108      	cbz	r0, 800c6f8 <rmw_create_subscription+0x1a8>
 800c6f4:	f000 faa8 	bl	800cc48 <rmw_uxrce_fini_topic_memory>
 800c6f8:	4620      	mov	r0, r4
 800c6fa:	f000 fa63 	bl	800cbc4 <rmw_uxrce_fini_subscription_memory>
 800c6fe:	2400      	movs	r4, #0
 800c700:	4620      	mov	r0, r4
 800c702:	b00d      	add	sp, #52	@ 0x34
 800c704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c708:	200111fc 	.word	0x200111fc
 800c70c:	0801a55c 	.word	0x0801a55c
 800c710:	0801a528 	.word	0x0801a528

0800c714 <rmw_subscription_get_actual_qos>:
 800c714:	b150      	cbz	r0, 800c72c <rmw_subscription_get_actual_qos+0x18>
 800c716:	b508      	push	{r3, lr}
 800c718:	460b      	mov	r3, r1
 800c71a:	b149      	cbz	r1, 800c730 <rmw_subscription_get_actual_qos+0x1c>
 800c71c:	6841      	ldr	r1, [r0, #4]
 800c71e:	2250      	movs	r2, #80	@ 0x50
 800c720:	3128      	adds	r1, #40	@ 0x28
 800c722:	4618      	mov	r0, r3
 800c724:	f00b fc7b 	bl	801801e <memcpy>
 800c728:	2000      	movs	r0, #0
 800c72a:	bd08      	pop	{r3, pc}
 800c72c:	200b      	movs	r0, #11
 800c72e:	4770      	bx	lr
 800c730:	200b      	movs	r0, #11
 800c732:	bd08      	pop	{r3, pc}

0800c734 <rmw_destroy_subscription>:
 800c734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c736:	b128      	cbz	r0, 800c744 <rmw_destroy_subscription+0x10>
 800c738:	4604      	mov	r4, r0
 800c73a:	6800      	ldr	r0, [r0, #0]
 800c73c:	460d      	mov	r5, r1
 800c73e:	f000 fc05 	bl	800cf4c <is_uxrce_rmw_identifier_valid>
 800c742:	b910      	cbnz	r0, 800c74a <rmw_destroy_subscription+0x16>
 800c744:	2401      	movs	r4, #1
 800c746:	4620      	mov	r0, r4
 800c748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c74a:	6863      	ldr	r3, [r4, #4]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d0f9      	beq.n	800c744 <rmw_destroy_subscription+0x10>
 800c750:	2d00      	cmp	r5, #0
 800c752:	d0f7      	beq.n	800c744 <rmw_destroy_subscription+0x10>
 800c754:	6828      	ldr	r0, [r5, #0]
 800c756:	f000 fbf9 	bl	800cf4c <is_uxrce_rmw_identifier_valid>
 800c75a:	2800      	cmp	r0, #0
 800c75c:	d0f2      	beq.n	800c744 <rmw_destroy_subscription+0x10>
 800c75e:	686c      	ldr	r4, [r5, #4]
 800c760:	2c00      	cmp	r4, #0
 800c762:	d0ef      	beq.n	800c744 <rmw_destroy_subscription+0x10>
 800c764:	6a26      	ldr	r6, [r4, #32]
 800c766:	6962      	ldr	r2, [r4, #20]
 800c768:	6930      	ldr	r0, [r6, #16]
 800c76a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800c76e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c772:	6819      	ldr	r1, [r3, #0]
 800c774:	f001 f81c 	bl	800d7b0 <uxr_buffer_cancel_data>
 800c778:	4602      	mov	r2, r0
 800c77a:	6930      	ldr	r0, [r6, #16]
 800c77c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800c780:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800c784:	f000 fb62 	bl	800ce4c <run_xrce_session>
 800c788:	69e0      	ldr	r0, [r4, #28]
 800c78a:	f006 ff19 	bl	80135c0 <destroy_topic>
 800c78e:	6a23      	ldr	r3, [r4, #32]
 800c790:	6962      	ldr	r2, [r4, #20]
 800c792:	6918      	ldr	r0, [r3, #16]
 800c794:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800c798:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c79c:	6819      	ldr	r1, [r3, #0]
 800c79e:	f000 fd9b 	bl	800d2d8 <uxr_buffer_delete_entity>
 800c7a2:	6a23      	ldr	r3, [r4, #32]
 800c7a4:	6922      	ldr	r2, [r4, #16]
 800c7a6:	691b      	ldr	r3, [r3, #16]
 800c7a8:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800c7ac:	4604      	mov	r4, r0
 800c7ae:	6809      	ldr	r1, [r1, #0]
 800c7b0:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800c7b4:	f000 fd90 	bl	800d2d8 <uxr_buffer_delete_entity>
 800c7b8:	6937      	ldr	r7, [r6, #16]
 800c7ba:	4622      	mov	r2, r4
 800c7bc:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 800c7c0:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 800c7c4:	4604      	mov	r4, r0
 800c7c6:	4638      	mov	r0, r7
 800c7c8:	f000 fb40 	bl	800ce4c <run_xrce_session>
 800c7cc:	6936      	ldr	r6, [r6, #16]
 800c7ce:	4622      	mov	r2, r4
 800c7d0:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800c7d4:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800c7d8:	4604      	mov	r4, r0
 800c7da:	4630      	mov	r0, r6
 800c7dc:	f000 fb36 	bl	800ce4c <run_xrce_session>
 800c7e0:	b12c      	cbz	r4, 800c7ee <rmw_destroy_subscription+0xba>
 800c7e2:	b120      	cbz	r0, 800c7ee <rmw_destroy_subscription+0xba>
 800c7e4:	2400      	movs	r4, #0
 800c7e6:	4628      	mov	r0, r5
 800c7e8:	f000 f9ec 	bl	800cbc4 <rmw_uxrce_fini_subscription_memory>
 800c7ec:	e7ab      	b.n	800c746 <rmw_destroy_subscription+0x12>
 800c7ee:	2402      	movs	r4, #2
 800c7f0:	e7f9      	b.n	800c7e6 <rmw_destroy_subscription+0xb2>
 800c7f2:	bf00      	nop

0800c7f4 <rmw_take_with_info>:
 800c7f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c7f6:	4604      	mov	r4, r0
 800c7f8:	6800      	ldr	r0, [r0, #0]
 800c7fa:	b089      	sub	sp, #36	@ 0x24
 800c7fc:	460f      	mov	r7, r1
 800c7fe:	4615      	mov	r5, r2
 800c800:	b128      	cbz	r0, 800c80e <rmw_take_with_info+0x1a>
 800c802:	4b24      	ldr	r3, [pc, #144]	@ (800c894 <rmw_take_with_info+0xa0>)
 800c804:	6819      	ldr	r1, [r3, #0]
 800c806:	f7f3 fd03 	bl	8000210 <strcmp>
 800c80a:	2800      	cmp	r0, #0
 800c80c:	d13e      	bne.n	800c88c <rmw_take_with_info+0x98>
 800c80e:	b305      	cbz	r5, 800c852 <rmw_take_with_info+0x5e>
 800c810:	6864      	ldr	r4, [r4, #4]
 800c812:	2300      	movs	r3, #0
 800c814:	702b      	strb	r3, [r5, #0]
 800c816:	f000 fa9b 	bl	800cd50 <rmw_uxrce_clean_expired_static_input_buffer>
 800c81a:	4620      	mov	r0, r4
 800c81c:	f000 fa70 	bl	800cd00 <rmw_uxrce_find_static_input_buffer_by_owner>
 800c820:	4606      	mov	r6, r0
 800c822:	b1f0      	cbz	r0, 800c862 <rmw_take_with_info+0x6e>
 800c824:	6881      	ldr	r1, [r0, #8]
 800c826:	4668      	mov	r0, sp
 800c828:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 800c82c:	3110      	adds	r1, #16
 800c82e:	f000 fc8b 	bl	800d148 <ucdr_init_buffer>
 800c832:	69a3      	ldr	r3, [r4, #24]
 800c834:	4639      	mov	r1, r7
 800c836:	68db      	ldr	r3, [r3, #12]
 800c838:	4668      	mov	r0, sp
 800c83a:	4798      	blx	r3
 800c83c:	4631      	mov	r1, r6
 800c83e:	4604      	mov	r4, r0
 800c840:	4815      	ldr	r0, [pc, #84]	@ (800c898 <rmw_take_with_info+0xa4>)
 800c842:	f006 fb87 	bl	8012f54 <put_memory>
 800c846:	702c      	strb	r4, [r5, #0]
 800c848:	f084 0001 	eor.w	r0, r4, #1
 800c84c:	b2c0      	uxtb	r0, r0
 800c84e:	b009      	add	sp, #36	@ 0x24
 800c850:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c852:	6864      	ldr	r4, [r4, #4]
 800c854:	f000 fa7c 	bl	800cd50 <rmw_uxrce_clean_expired_static_input_buffer>
 800c858:	4620      	mov	r0, r4
 800c85a:	f000 fa51 	bl	800cd00 <rmw_uxrce_find_static_input_buffer_by_owner>
 800c85e:	4605      	mov	r5, r0
 800c860:	b910      	cbnz	r0, 800c868 <rmw_take_with_info+0x74>
 800c862:	2001      	movs	r0, #1
 800c864:	b009      	add	sp, #36	@ 0x24
 800c866:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c868:	68a9      	ldr	r1, [r5, #8]
 800c86a:	4668      	mov	r0, sp
 800c86c:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 800c870:	3110      	adds	r1, #16
 800c872:	f000 fc69 	bl	800d148 <ucdr_init_buffer>
 800c876:	69a3      	ldr	r3, [r4, #24]
 800c878:	4639      	mov	r1, r7
 800c87a:	68db      	ldr	r3, [r3, #12]
 800c87c:	4668      	mov	r0, sp
 800c87e:	4798      	blx	r3
 800c880:	4629      	mov	r1, r5
 800c882:	4604      	mov	r4, r0
 800c884:	4804      	ldr	r0, [pc, #16]	@ (800c898 <rmw_take_with_info+0xa4>)
 800c886:	f006 fb65 	bl	8012f54 <put_memory>
 800c88a:	e7dd      	b.n	800c848 <rmw_take_with_info+0x54>
 800c88c:	200c      	movs	r0, #12
 800c88e:	b009      	add	sp, #36	@ 0x24
 800c890:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c892:	bf00      	nop
 800c894:	0801a8bc 	.word	0x0801a8bc
 800c898:	200111ec 	.word	0x200111ec

0800c89c <rmw_uxrce_init_service_memory>:
 800c89c:	b1e2      	cbz	r2, 800c8d8 <rmw_uxrce_init_service_memory+0x3c>
 800c89e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8a2:	7b05      	ldrb	r5, [r0, #12]
 800c8a4:	4606      	mov	r6, r0
 800c8a6:	b9ad      	cbnz	r5, 800c8d4 <rmw_uxrce_init_service_memory+0x38>
 800c8a8:	23c8      	movs	r3, #200	@ 0xc8
 800c8aa:	e9c0 5500 	strd	r5, r5, [r0]
 800c8ae:	6083      	str	r3, [r0, #8]
 800c8b0:	f240 1301 	movw	r3, #257	@ 0x101
 800c8b4:	4617      	mov	r7, r2
 800c8b6:	8183      	strh	r3, [r0, #12]
 800c8b8:	460c      	mov	r4, r1
 800c8ba:	46a8      	mov	r8, r5
 800c8bc:	4621      	mov	r1, r4
 800c8be:	4630      	mov	r0, r6
 800c8c0:	3501      	adds	r5, #1
 800c8c2:	f006 fb47 	bl	8012f54 <put_memory>
 800c8c6:	42af      	cmp	r7, r5
 800c8c8:	60a4      	str	r4, [r4, #8]
 800c8ca:	f884 800c 	strb.w	r8, [r4, #12]
 800c8ce:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800c8d2:	d1f3      	bne.n	800c8bc <rmw_uxrce_init_service_memory+0x20>
 800c8d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8d8:	4770      	bx	lr
 800c8da:	bf00      	nop

0800c8dc <rmw_uxrce_init_client_memory>:
 800c8dc:	b1e2      	cbz	r2, 800c918 <rmw_uxrce_init_client_memory+0x3c>
 800c8de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8e2:	7b05      	ldrb	r5, [r0, #12]
 800c8e4:	4606      	mov	r6, r0
 800c8e6:	b9ad      	cbnz	r5, 800c914 <rmw_uxrce_init_client_memory+0x38>
 800c8e8:	23c8      	movs	r3, #200	@ 0xc8
 800c8ea:	e9c0 5500 	strd	r5, r5, [r0]
 800c8ee:	6083      	str	r3, [r0, #8]
 800c8f0:	f240 1301 	movw	r3, #257	@ 0x101
 800c8f4:	4617      	mov	r7, r2
 800c8f6:	8183      	strh	r3, [r0, #12]
 800c8f8:	460c      	mov	r4, r1
 800c8fa:	46a8      	mov	r8, r5
 800c8fc:	4621      	mov	r1, r4
 800c8fe:	4630      	mov	r0, r6
 800c900:	3501      	adds	r5, #1
 800c902:	f006 fb27 	bl	8012f54 <put_memory>
 800c906:	42af      	cmp	r7, r5
 800c908:	60a4      	str	r4, [r4, #8]
 800c90a:	f884 800c 	strb.w	r8, [r4, #12]
 800c90e:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800c912:	d1f3      	bne.n	800c8fc <rmw_uxrce_init_client_memory+0x20>
 800c914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c918:	4770      	bx	lr
 800c91a:	bf00      	nop

0800c91c <rmw_uxrce_init_publisher_memory>:
 800c91c:	b1e2      	cbz	r2, 800c958 <rmw_uxrce_init_publisher_memory+0x3c>
 800c91e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c922:	7b05      	ldrb	r5, [r0, #12]
 800c924:	4606      	mov	r6, r0
 800c926:	b9ad      	cbnz	r5, 800c954 <rmw_uxrce_init_publisher_memory+0x38>
 800c928:	23d8      	movs	r3, #216	@ 0xd8
 800c92a:	e9c0 5500 	strd	r5, r5, [r0]
 800c92e:	6083      	str	r3, [r0, #8]
 800c930:	f240 1301 	movw	r3, #257	@ 0x101
 800c934:	4617      	mov	r7, r2
 800c936:	8183      	strh	r3, [r0, #12]
 800c938:	460c      	mov	r4, r1
 800c93a:	46a8      	mov	r8, r5
 800c93c:	4621      	mov	r1, r4
 800c93e:	4630      	mov	r0, r6
 800c940:	3501      	adds	r5, #1
 800c942:	f006 fb07 	bl	8012f54 <put_memory>
 800c946:	42af      	cmp	r7, r5
 800c948:	60a4      	str	r4, [r4, #8]
 800c94a:	f884 800c 	strb.w	r8, [r4, #12]
 800c94e:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800c952:	d1f3      	bne.n	800c93c <rmw_uxrce_init_publisher_memory+0x20>
 800c954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c958:	4770      	bx	lr
 800c95a:	bf00      	nop

0800c95c <rmw_uxrce_init_subscription_memory>:
 800c95c:	b1e2      	cbz	r2, 800c998 <rmw_uxrce_init_subscription_memory+0x3c>
 800c95e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c962:	7b05      	ldrb	r5, [r0, #12]
 800c964:	4606      	mov	r6, r0
 800c966:	b9ad      	cbnz	r5, 800c994 <rmw_uxrce_init_subscription_memory+0x38>
 800c968:	23d8      	movs	r3, #216	@ 0xd8
 800c96a:	e9c0 5500 	strd	r5, r5, [r0]
 800c96e:	6083      	str	r3, [r0, #8]
 800c970:	f240 1301 	movw	r3, #257	@ 0x101
 800c974:	4617      	mov	r7, r2
 800c976:	8183      	strh	r3, [r0, #12]
 800c978:	460c      	mov	r4, r1
 800c97a:	46a8      	mov	r8, r5
 800c97c:	4621      	mov	r1, r4
 800c97e:	4630      	mov	r0, r6
 800c980:	3501      	adds	r5, #1
 800c982:	f006 fae7 	bl	8012f54 <put_memory>
 800c986:	42af      	cmp	r7, r5
 800c988:	60a4      	str	r4, [r4, #8]
 800c98a:	f884 800c 	strb.w	r8, [r4, #12]
 800c98e:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800c992:	d1f3      	bne.n	800c97c <rmw_uxrce_init_subscription_memory+0x20>
 800c994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c998:	4770      	bx	lr
 800c99a:	bf00      	nop

0800c99c <rmw_uxrce_init_node_memory>:
 800c99c:	b1e2      	cbz	r2, 800c9d8 <rmw_uxrce_init_node_memory+0x3c>
 800c99e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9a2:	7b05      	ldrb	r5, [r0, #12]
 800c9a4:	4606      	mov	r6, r0
 800c9a6:	b9ad      	cbnz	r5, 800c9d4 <rmw_uxrce_init_node_memory+0x38>
 800c9a8:	23a4      	movs	r3, #164	@ 0xa4
 800c9aa:	e9c0 5500 	strd	r5, r5, [r0]
 800c9ae:	6083      	str	r3, [r0, #8]
 800c9b0:	f240 1301 	movw	r3, #257	@ 0x101
 800c9b4:	4617      	mov	r7, r2
 800c9b6:	8183      	strh	r3, [r0, #12]
 800c9b8:	460c      	mov	r4, r1
 800c9ba:	46a8      	mov	r8, r5
 800c9bc:	4621      	mov	r1, r4
 800c9be:	4630      	mov	r0, r6
 800c9c0:	3501      	adds	r5, #1
 800c9c2:	f006 fac7 	bl	8012f54 <put_memory>
 800c9c6:	42af      	cmp	r7, r5
 800c9c8:	60a4      	str	r4, [r4, #8]
 800c9ca:	f884 800c 	strb.w	r8, [r4, #12]
 800c9ce:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800c9d2:	d1f3      	bne.n	800c9bc <rmw_uxrce_init_node_memory+0x20>
 800c9d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9d8:	4770      	bx	lr
 800c9da:	bf00      	nop

0800c9dc <rmw_uxrce_init_session_memory>:
 800c9dc:	b1ea      	cbz	r2, 800ca1a <rmw_uxrce_init_session_memory+0x3e>
 800c9de:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c9e2:	7b05      	ldrb	r5, [r0, #12]
 800c9e4:	4606      	mov	r6, r0
 800c9e6:	b9b5      	cbnz	r5, 800ca16 <rmw_uxrce_init_session_memory+0x3a>
 800c9e8:	e9c0 5500 	strd	r5, r5, [r0]
 800c9ec:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800c9f0:	f240 1301 	movw	r3, #257	@ 0x101
 800c9f4:	4617      	mov	r7, r2
 800c9f6:	f8c0 8008 	str.w	r8, [r0, #8]
 800c9fa:	460c      	mov	r4, r1
 800c9fc:	8183      	strh	r3, [r0, #12]
 800c9fe:	46a9      	mov	r9, r5
 800ca00:	4621      	mov	r1, r4
 800ca02:	4630      	mov	r0, r6
 800ca04:	3501      	adds	r5, #1
 800ca06:	f006 faa5 	bl	8012f54 <put_memory>
 800ca0a:	42af      	cmp	r7, r5
 800ca0c:	60a4      	str	r4, [r4, #8]
 800ca0e:	f884 900c 	strb.w	r9, [r4, #12]
 800ca12:	4444      	add	r4, r8
 800ca14:	d1f4      	bne.n	800ca00 <rmw_uxrce_init_session_memory+0x24>
 800ca16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca1a:	4770      	bx	lr

0800ca1c <rmw_uxrce_init_topic_memory>:
 800ca1c:	b1e2      	cbz	r2, 800ca58 <rmw_uxrce_init_topic_memory+0x3c>
 800ca1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca22:	7b05      	ldrb	r5, [r0, #12]
 800ca24:	4606      	mov	r6, r0
 800ca26:	b9ad      	cbnz	r5, 800ca54 <rmw_uxrce_init_topic_memory+0x38>
 800ca28:	231c      	movs	r3, #28
 800ca2a:	e9c0 5500 	strd	r5, r5, [r0]
 800ca2e:	6083      	str	r3, [r0, #8]
 800ca30:	f240 1301 	movw	r3, #257	@ 0x101
 800ca34:	4617      	mov	r7, r2
 800ca36:	8183      	strh	r3, [r0, #12]
 800ca38:	460c      	mov	r4, r1
 800ca3a:	46a8      	mov	r8, r5
 800ca3c:	4621      	mov	r1, r4
 800ca3e:	4630      	mov	r0, r6
 800ca40:	3501      	adds	r5, #1
 800ca42:	f006 fa87 	bl	8012f54 <put_memory>
 800ca46:	42af      	cmp	r7, r5
 800ca48:	60a4      	str	r4, [r4, #8]
 800ca4a:	f884 800c 	strb.w	r8, [r4, #12]
 800ca4e:	f104 041c 	add.w	r4, r4, #28
 800ca52:	d1f3      	bne.n	800ca3c <rmw_uxrce_init_topic_memory+0x20>
 800ca54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca58:	4770      	bx	lr
 800ca5a:	bf00      	nop

0800ca5c <rmw_uxrce_init_static_input_buffer_memory>:
 800ca5c:	b1ea      	cbz	r2, 800ca9a <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800ca5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca62:	7b05      	ldrb	r5, [r0, #12]
 800ca64:	4606      	mov	r6, r0
 800ca66:	b9b5      	cbnz	r5, 800ca96 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800ca68:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800ca6c:	e9c0 5500 	strd	r5, r5, [r0]
 800ca70:	6083      	str	r3, [r0, #8]
 800ca72:	f240 1301 	movw	r3, #257	@ 0x101
 800ca76:	4617      	mov	r7, r2
 800ca78:	8183      	strh	r3, [r0, #12]
 800ca7a:	460c      	mov	r4, r1
 800ca7c:	46a8      	mov	r8, r5
 800ca7e:	4621      	mov	r1, r4
 800ca80:	4630      	mov	r0, r6
 800ca82:	3501      	adds	r5, #1
 800ca84:	f006 fa66 	bl	8012f54 <put_memory>
 800ca88:	42af      	cmp	r7, r5
 800ca8a:	60a4      	str	r4, [r4, #8]
 800ca8c:	f884 800c 	strb.w	r8, [r4, #12]
 800ca90:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800ca94:	d1f3      	bne.n	800ca7e <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800ca96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca9a:	4770      	bx	lr

0800ca9c <rmw_uxrce_init_init_options_impl_memory>:
 800ca9c:	b1e2      	cbz	r2, 800cad8 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800ca9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800caa2:	7b05      	ldrb	r5, [r0, #12]
 800caa4:	4606      	mov	r6, r0
 800caa6:	b9ad      	cbnz	r5, 800cad4 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800caa8:	232c      	movs	r3, #44	@ 0x2c
 800caaa:	e9c0 5500 	strd	r5, r5, [r0]
 800caae:	6083      	str	r3, [r0, #8]
 800cab0:	f240 1301 	movw	r3, #257	@ 0x101
 800cab4:	4617      	mov	r7, r2
 800cab6:	8183      	strh	r3, [r0, #12]
 800cab8:	460c      	mov	r4, r1
 800caba:	46a8      	mov	r8, r5
 800cabc:	4621      	mov	r1, r4
 800cabe:	4630      	mov	r0, r6
 800cac0:	3501      	adds	r5, #1
 800cac2:	f006 fa47 	bl	8012f54 <put_memory>
 800cac6:	42af      	cmp	r7, r5
 800cac8:	60a4      	str	r4, [r4, #8]
 800caca:	f884 800c 	strb.w	r8, [r4, #12]
 800cace:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800cad2:	d1f3      	bne.n	800cabc <rmw_uxrce_init_init_options_impl_memory+0x20>
 800cad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cad8:	4770      	bx	lr
 800cada:	bf00      	nop

0800cadc <rmw_uxrce_init_wait_set_memory>:
 800cadc:	b1e2      	cbz	r2, 800cb18 <rmw_uxrce_init_wait_set_memory+0x3c>
 800cade:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cae2:	7b05      	ldrb	r5, [r0, #12]
 800cae4:	4606      	mov	r6, r0
 800cae6:	b9ad      	cbnz	r5, 800cb14 <rmw_uxrce_init_wait_set_memory+0x38>
 800cae8:	231c      	movs	r3, #28
 800caea:	e9c0 5500 	strd	r5, r5, [r0]
 800caee:	6083      	str	r3, [r0, #8]
 800caf0:	f240 1301 	movw	r3, #257	@ 0x101
 800caf4:	4617      	mov	r7, r2
 800caf6:	8183      	strh	r3, [r0, #12]
 800caf8:	460c      	mov	r4, r1
 800cafa:	46a8      	mov	r8, r5
 800cafc:	4621      	mov	r1, r4
 800cafe:	4630      	mov	r0, r6
 800cb00:	3501      	adds	r5, #1
 800cb02:	f006 fa27 	bl	8012f54 <put_memory>
 800cb06:	42af      	cmp	r7, r5
 800cb08:	60a4      	str	r4, [r4, #8]
 800cb0a:	f884 800c 	strb.w	r8, [r4, #12]
 800cb0e:	f104 041c 	add.w	r4, r4, #28
 800cb12:	d1f3      	bne.n	800cafc <rmw_uxrce_init_wait_set_memory+0x20>
 800cb14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb18:	4770      	bx	lr
 800cb1a:	bf00      	nop

0800cb1c <rmw_uxrce_init_guard_condition_memory>:
 800cb1c:	b1e2      	cbz	r2, 800cb58 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800cb1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb22:	7b05      	ldrb	r5, [r0, #12]
 800cb24:	4606      	mov	r6, r0
 800cb26:	b9ad      	cbnz	r5, 800cb54 <rmw_uxrce_init_guard_condition_memory+0x38>
 800cb28:	2320      	movs	r3, #32
 800cb2a:	e9c0 5500 	strd	r5, r5, [r0]
 800cb2e:	6083      	str	r3, [r0, #8]
 800cb30:	f240 1301 	movw	r3, #257	@ 0x101
 800cb34:	4617      	mov	r7, r2
 800cb36:	8183      	strh	r3, [r0, #12]
 800cb38:	460c      	mov	r4, r1
 800cb3a:	46a8      	mov	r8, r5
 800cb3c:	4621      	mov	r1, r4
 800cb3e:	4630      	mov	r0, r6
 800cb40:	3501      	adds	r5, #1
 800cb42:	f006 fa07 	bl	8012f54 <put_memory>
 800cb46:	42af      	cmp	r7, r5
 800cb48:	60a4      	str	r4, [r4, #8]
 800cb4a:	f884 800c 	strb.w	r8, [r4, #12]
 800cb4e:	f104 0420 	add.w	r4, r4, #32
 800cb52:	d1f3      	bne.n	800cb3c <rmw_uxrce_init_guard_condition_memory+0x20>
 800cb54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb58:	4770      	bx	lr
 800cb5a:	bf00      	nop

0800cb5c <rmw_uxrce_fini_session_memory>:
 800cb5c:	4601      	mov	r1, r0
 800cb5e:	4801      	ldr	r0, [pc, #4]	@ (800cb64 <rmw_uxrce_fini_session_memory+0x8>)
 800cb60:	f006 b9f8 	b.w	8012f54 <put_memory>
 800cb64:	200111dc 	.word	0x200111dc

0800cb68 <rmw_uxrce_fini_node_memory>:
 800cb68:	b538      	push	{r3, r4, r5, lr}
 800cb6a:	4604      	mov	r4, r0
 800cb6c:	6800      	ldr	r0, [r0, #0]
 800cb6e:	b128      	cbz	r0, 800cb7c <rmw_uxrce_fini_node_memory+0x14>
 800cb70:	4b07      	ldr	r3, [pc, #28]	@ (800cb90 <rmw_uxrce_fini_node_memory+0x28>)
 800cb72:	6819      	ldr	r1, [r3, #0]
 800cb74:	f7f3 fb4c 	bl	8000210 <strcmp>
 800cb78:	b940      	cbnz	r0, 800cb8c <rmw_uxrce_fini_node_memory+0x24>
 800cb7a:	6020      	str	r0, [r4, #0]
 800cb7c:	6861      	ldr	r1, [r4, #4]
 800cb7e:	b129      	cbz	r1, 800cb8c <rmw_uxrce_fini_node_memory+0x24>
 800cb80:	2500      	movs	r5, #0
 800cb82:	4804      	ldr	r0, [pc, #16]	@ (800cb94 <rmw_uxrce_fini_node_memory+0x2c>)
 800cb84:	610d      	str	r5, [r1, #16]
 800cb86:	f006 f9e5 	bl	8012f54 <put_memory>
 800cb8a:	6065      	str	r5, [r4, #4]
 800cb8c:	bd38      	pop	{r3, r4, r5, pc}
 800cb8e:	bf00      	nop
 800cb90:	0801a8bc 	.word	0x0801a8bc
 800cb94:	200111ac 	.word	0x200111ac

0800cb98 <rmw_uxrce_fini_publisher_memory>:
 800cb98:	b510      	push	{r4, lr}
 800cb9a:	4604      	mov	r4, r0
 800cb9c:	6800      	ldr	r0, [r0, #0]
 800cb9e:	b128      	cbz	r0, 800cbac <rmw_uxrce_fini_publisher_memory+0x14>
 800cba0:	4b06      	ldr	r3, [pc, #24]	@ (800cbbc <rmw_uxrce_fini_publisher_memory+0x24>)
 800cba2:	6819      	ldr	r1, [r3, #0]
 800cba4:	f7f3 fb34 	bl	8000210 <strcmp>
 800cba8:	b938      	cbnz	r0, 800cbba <rmw_uxrce_fini_publisher_memory+0x22>
 800cbaa:	6020      	str	r0, [r4, #0]
 800cbac:	6861      	ldr	r1, [r4, #4]
 800cbae:	b121      	cbz	r1, 800cbba <rmw_uxrce_fini_publisher_memory+0x22>
 800cbb0:	4803      	ldr	r0, [pc, #12]	@ (800cbc0 <rmw_uxrce_fini_publisher_memory+0x28>)
 800cbb2:	f006 f9cf 	bl	8012f54 <put_memory>
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	6063      	str	r3, [r4, #4]
 800cbba:	bd10      	pop	{r4, pc}
 800cbbc:	0801a8bc 	.word	0x0801a8bc
 800cbc0:	200111bc 	.word	0x200111bc

0800cbc4 <rmw_uxrce_fini_subscription_memory>:
 800cbc4:	b510      	push	{r4, lr}
 800cbc6:	4604      	mov	r4, r0
 800cbc8:	6800      	ldr	r0, [r0, #0]
 800cbca:	b128      	cbz	r0, 800cbd8 <rmw_uxrce_fini_subscription_memory+0x14>
 800cbcc:	4b06      	ldr	r3, [pc, #24]	@ (800cbe8 <rmw_uxrce_fini_subscription_memory+0x24>)
 800cbce:	6819      	ldr	r1, [r3, #0]
 800cbd0:	f7f3 fb1e 	bl	8000210 <strcmp>
 800cbd4:	b938      	cbnz	r0, 800cbe6 <rmw_uxrce_fini_subscription_memory+0x22>
 800cbd6:	6020      	str	r0, [r4, #0]
 800cbd8:	6861      	ldr	r1, [r4, #4]
 800cbda:	b121      	cbz	r1, 800cbe6 <rmw_uxrce_fini_subscription_memory+0x22>
 800cbdc:	4803      	ldr	r0, [pc, #12]	@ (800cbec <rmw_uxrce_fini_subscription_memory+0x28>)
 800cbde:	f006 f9b9 	bl	8012f54 <put_memory>
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	6063      	str	r3, [r4, #4]
 800cbe6:	bd10      	pop	{r4, pc}
 800cbe8:	0801a8bc 	.word	0x0801a8bc
 800cbec:	200111fc 	.word	0x200111fc

0800cbf0 <rmw_uxrce_fini_service_memory>:
 800cbf0:	b510      	push	{r4, lr}
 800cbf2:	4604      	mov	r4, r0
 800cbf4:	6800      	ldr	r0, [r0, #0]
 800cbf6:	b128      	cbz	r0, 800cc04 <rmw_uxrce_fini_service_memory+0x14>
 800cbf8:	4b06      	ldr	r3, [pc, #24]	@ (800cc14 <rmw_uxrce_fini_service_memory+0x24>)
 800cbfa:	6819      	ldr	r1, [r3, #0]
 800cbfc:	f7f3 fb08 	bl	8000210 <strcmp>
 800cc00:	b938      	cbnz	r0, 800cc12 <rmw_uxrce_fini_service_memory+0x22>
 800cc02:	6020      	str	r0, [r4, #0]
 800cc04:	6861      	ldr	r1, [r4, #4]
 800cc06:	b121      	cbz	r1, 800cc12 <rmw_uxrce_fini_service_memory+0x22>
 800cc08:	4803      	ldr	r0, [pc, #12]	@ (800cc18 <rmw_uxrce_fini_service_memory+0x28>)
 800cc0a:	f006 f9a3 	bl	8012f54 <put_memory>
 800cc0e:	2300      	movs	r3, #0
 800cc10:	6063      	str	r3, [r4, #4]
 800cc12:	bd10      	pop	{r4, pc}
 800cc14:	0801a8bc 	.word	0x0801a8bc
 800cc18:	200111cc 	.word	0x200111cc

0800cc1c <rmw_uxrce_fini_client_memory>:
 800cc1c:	b510      	push	{r4, lr}
 800cc1e:	4604      	mov	r4, r0
 800cc20:	6800      	ldr	r0, [r0, #0]
 800cc22:	b128      	cbz	r0, 800cc30 <rmw_uxrce_fini_client_memory+0x14>
 800cc24:	4b06      	ldr	r3, [pc, #24]	@ (800cc40 <rmw_uxrce_fini_client_memory+0x24>)
 800cc26:	6819      	ldr	r1, [r3, #0]
 800cc28:	f7f3 faf2 	bl	8000210 <strcmp>
 800cc2c:	b938      	cbnz	r0, 800cc3e <rmw_uxrce_fini_client_memory+0x22>
 800cc2e:	6020      	str	r0, [r4, #0]
 800cc30:	6861      	ldr	r1, [r4, #4]
 800cc32:	b121      	cbz	r1, 800cc3e <rmw_uxrce_fini_client_memory+0x22>
 800cc34:	4803      	ldr	r0, [pc, #12]	@ (800cc44 <rmw_uxrce_fini_client_memory+0x28>)
 800cc36:	f006 f98d 	bl	8012f54 <put_memory>
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	6063      	str	r3, [r4, #4]
 800cc3e:	bd10      	pop	{r4, pc}
 800cc40:	0801a8bc 	.word	0x0801a8bc
 800cc44:	2000c8dc 	.word	0x2000c8dc

0800cc48 <rmw_uxrce_fini_topic_memory>:
 800cc48:	b510      	push	{r4, lr}
 800cc4a:	4604      	mov	r4, r0
 800cc4c:	4621      	mov	r1, r4
 800cc4e:	4803      	ldr	r0, [pc, #12]	@ (800cc5c <rmw_uxrce_fini_topic_memory+0x14>)
 800cc50:	f006 f980 	bl	8012f54 <put_memory>
 800cc54:	2300      	movs	r3, #0
 800cc56:	61a3      	str	r3, [r4, #24]
 800cc58:	bd10      	pop	{r4, pc}
 800cc5a:	bf00      	nop
 800cc5c:	2001120c 	.word	0x2001120c

0800cc60 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800cc60:	b082      	sub	sp, #8
 800cc62:	b530      	push	{r4, r5, lr}
 800cc64:	4925      	ldr	r1, [pc, #148]	@ (800ccfc <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800cc66:	680d      	ldr	r5, [r1, #0]
 800cc68:	ac03      	add	r4, sp, #12
 800cc6a:	e884 000c 	stmia.w	r4, {r2, r3}
 800cc6e:	461c      	mov	r4, r3
 800cc70:	2d00      	cmp	r5, #0
 800cc72:	d041      	beq.n	800ccf8 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800cc74:	462b      	mov	r3, r5
 800cc76:	2100      	movs	r1, #0
 800cc78:	689a      	ldr	r2, [r3, #8]
 800cc7a:	685b      	ldr	r3, [r3, #4]
 800cc7c:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800cc80:	4290      	cmp	r0, r2
 800cc82:	bf08      	it	eq
 800cc84:	3101      	addeq	r1, #1
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d1f6      	bne.n	800cc78 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800cc8a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800cc8e:	2b02      	cmp	r3, #2
 800cc90:	d029      	beq.n	800cce6 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800cc92:	d907      	bls.n	800cca4 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800cc94:	2b03      	cmp	r3, #3
 800cc96:	d005      	beq.n	800cca4 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800cc98:	2100      	movs	r1, #0
 800cc9a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cc9e:	4608      	mov	r0, r1
 800cca0:	b002      	add	sp, #8
 800cca2:	4770      	bx	lr
 800cca4:	b314      	cbz	r4, 800ccec <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800cca6:	428c      	cmp	r4, r1
 800cca8:	d820      	bhi.n	800ccec <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800ccaa:	2d00      	cmp	r5, #0
 800ccac:	d0f4      	beq.n	800cc98 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800ccae:	2100      	movs	r1, #0
 800ccb0:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800ccb4:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800ccb8:	e002      	b.n	800ccc0 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800ccba:	686d      	ldr	r5, [r5, #4]
 800ccbc:	2d00      	cmp	r5, #0
 800ccbe:	d0ec      	beq.n	800cc9a <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800ccc0:	68ab      	ldr	r3, [r5, #8]
 800ccc2:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800ccc6:	4290      	cmp	r0, r2
 800ccc8:	d1f7      	bne.n	800ccba <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800ccca:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800ccce:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800ccd2:	4562      	cmp	r2, ip
 800ccd4:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800ccd8:	eb73 0e04 	sbcs.w	lr, r3, r4
 800ccdc:	daed      	bge.n	800ccba <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800ccde:	4694      	mov	ip, r2
 800cce0:	461c      	mov	r4, r3
 800cce2:	4629      	mov	r1, r5
 800cce4:	e7e9      	b.n	800ccba <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800cce6:	b10c      	cbz	r4, 800ccec <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800cce8:	428c      	cmp	r4, r1
 800ccea:	d9d5      	bls.n	800cc98 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800ccec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ccf0:	4802      	ldr	r0, [pc, #8]	@ (800ccfc <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800ccf2:	b002      	add	sp, #8
 800ccf4:	f006 b91e 	b.w	8012f34 <get_memory>
 800ccf8:	4629      	mov	r1, r5
 800ccfa:	e7c6      	b.n	800cc8a <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800ccfc:	200111ec 	.word	0x200111ec

0800cd00 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800cd00:	4b11      	ldr	r3, [pc, #68]	@ (800cd48 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	b530      	push	{r4, r5, lr}
 800cd06:	b1e3      	cbz	r3, 800cd42 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800cd08:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 800cd0c:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 800cd10:	2400      	movs	r4, #0
 800cd12:	e001      	b.n	800cd18 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800cd14:	685b      	ldr	r3, [r3, #4]
 800cd16:	b193      	cbz	r3, 800cd3e <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800cd18:	689a      	ldr	r2, [r3, #8]
 800cd1a:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800cd1e:	4288      	cmp	r0, r1
 800cd20:	d1f8      	bne.n	800cd14 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800cd22:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800cd26:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800cd2a:	4571      	cmp	r1, lr
 800cd2c:	eb72 050c 	sbcs.w	r5, r2, ip
 800cd30:	daf0      	bge.n	800cd14 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800cd32:	461c      	mov	r4, r3
 800cd34:	685b      	ldr	r3, [r3, #4]
 800cd36:	468e      	mov	lr, r1
 800cd38:	4694      	mov	ip, r2
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d1ec      	bne.n	800cd18 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800cd3e:	4620      	mov	r0, r4
 800cd40:	bd30      	pop	{r4, r5, pc}
 800cd42:	461c      	mov	r4, r3
 800cd44:	4620      	mov	r0, r4
 800cd46:	bd30      	pop	{r4, r5, pc}
 800cd48:	200111ec 	.word	0x200111ec
 800cd4c:	00000000 	.word	0x00000000

0800cd50 <rmw_uxrce_clean_expired_static_input_buffer>:
 800cd50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd54:	4b3c      	ldr	r3, [pc, #240]	@ (800ce48 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800cd56:	ed2d 8b06 	vpush	{d8-d10}
 800cd5a:	681f      	ldr	r7, [r3, #0]
 800cd5c:	b08d      	sub	sp, #52	@ 0x34
 800cd5e:	f006 ff51 	bl	8013c04 <rmw_uros_epoch_nanos>
 800cd62:	2f00      	cmp	r7, #0
 800cd64:	d05d      	beq.n	800ce22 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800cd66:	46b8      	mov	r8, r7
 800cd68:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 800ce30 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800cd6c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800cd70:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800cd74:	2b04      	cmp	r3, #4
 800cd76:	ed9f ab30 	vldr	d10, [pc, #192]	@ 800ce38 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800cd7a:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 800ce40 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800cd7e:	4681      	mov	r9, r0
 800cd80:	468a      	mov	sl, r1
 800cd82:	ac04      	add	r4, sp, #16
 800cd84:	d03f      	beq.n	800ce06 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800cd86:	2b05      	cmp	r3, #5
 800cd88:	d044      	beq.n	800ce14 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800cd8a:	2b03      	cmp	r3, #3
 800cd8c:	d03b      	beq.n	800ce06 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800cd8e:	ed8d 8b04 	vstr	d8, [sp, #16]
 800cd92:	ed8d ab06 	vstr	d10, [sp, #24]
 800cd96:	ed8d 8b08 	vstr	d8, [sp, #32]
 800cd9a:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800cd9e:	ab08      	add	r3, sp, #32
 800cda0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800cda2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800cda6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800cdaa:	f005 ffc9 	bl	8012d40 <rmw_time_equal>
 800cdae:	b118      	cbz	r0, 800cdb8 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800cdb0:	ed8d 9b04 	vstr	d9, [sp, #16]
 800cdb4:	ed8d 8b06 	vstr	d8, [sp, #24]
 800cdb8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800cdbc:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 800cdc0:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 800cdc4:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800cdc8:	f006 f80e 	bl	8012de8 <rmw_time_total_nsec>
 800cdcc:	1830      	adds	r0, r6, r0
 800cdce:	eb47 0101 	adc.w	r1, r7, r1
 800cdd2:	4548      	cmp	r0, r9
 800cdd4:	eb71 030a 	sbcs.w	r3, r1, sl
 800cdd8:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800cddc:	db05      	blt.n	800cdea <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800cdde:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800cde2:	4591      	cmp	r9, r2
 800cde4:	eb7a 0303 	sbcs.w	r3, sl, r3
 800cde8:	da03      	bge.n	800cdf2 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800cdea:	4817      	ldr	r0, [pc, #92]	@ (800ce48 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800cdec:	4641      	mov	r1, r8
 800cdee:	f006 f8b1 	bl	8012f54 <put_memory>
 800cdf2:	f1bb 0f00 	cmp.w	fp, #0
 800cdf6:	d014      	beq.n	800ce22 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800cdf8:	46d8      	mov	r8, fp
 800cdfa:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800cdfe:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800ce02:	2b04      	cmp	r3, #4
 800ce04:	d1bf      	bne.n	800cd86 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800ce06:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800ce0a:	3340      	adds	r3, #64	@ 0x40
 800ce0c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ce0e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ce12:	e7c0      	b.n	800cd96 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800ce14:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800ce18:	3348      	adds	r3, #72	@ 0x48
 800ce1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ce1c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ce20:	e7b9      	b.n	800cd96 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800ce22:	b00d      	add	sp, #52	@ 0x34
 800ce24:	ecbd 8b06 	vpop	{d8-d10}
 800ce28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce2c:	f3af 8000 	nop.w
	...
 800ce38:	00000001 	.word	0x00000001
 800ce3c:	00000000 	.word	0x00000000
 800ce40:	0000001e 	.word	0x0000001e
 800ce44:	00000000 	.word	0x00000000
 800ce48:	200111ec 	.word	0x200111ec

0800ce4c <run_xrce_session>:
 800ce4c:	b510      	push	{r4, lr}
 800ce4e:	788c      	ldrb	r4, [r1, #2]
 800ce50:	b086      	sub	sp, #24
 800ce52:	2c01      	cmp	r4, #1
 800ce54:	f8ad 200e 	strh.w	r2, [sp, #14]
 800ce58:	d00c      	beq.n	800ce74 <run_xrce_session+0x28>
 800ce5a:	4619      	mov	r1, r3
 800ce5c:	2301      	movs	r3, #1
 800ce5e:	9300      	str	r3, [sp, #0]
 800ce60:	f10d 020e 	add.w	r2, sp, #14
 800ce64:	f10d 0317 	add.w	r3, sp, #23
 800ce68:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ce6c:	f001 fa9a 	bl	800e3a4 <uxr_run_session_until_all_status>
 800ce70:	b006      	add	sp, #24
 800ce72:	bd10      	pop	{r4, pc}
 800ce74:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ce78:	f000 feae 	bl	800dbd8 <uxr_flash_output_streams>
 800ce7c:	4620      	mov	r0, r4
 800ce7e:	b006      	add	sp, #24
 800ce80:	bd10      	pop	{r4, pc}
 800ce82:	bf00      	nop

0800ce84 <convert_qos_profile>:
 800ce84:	7a4a      	ldrb	r2, [r1, #9]
 800ce86:	f891 c008 	ldrb.w	ip, [r1, #8]
 800ce8a:	2a02      	cmp	r2, #2
 800ce8c:	bf18      	it	ne
 800ce8e:	2200      	movne	r2, #0
 800ce90:	7002      	strb	r2, [r0, #0]
 800ce92:	780a      	ldrb	r2, [r1, #0]
 800ce94:	8889      	ldrh	r1, [r1, #4]
 800ce96:	8081      	strh	r1, [r0, #4]
 800ce98:	f1ac 0c02 	sub.w	ip, ip, #2
 800ce9c:	f1a2 0202 	sub.w	r2, r2, #2
 800cea0:	fabc fc8c 	clz	ip, ip
 800cea4:	fab2 f282 	clz	r2, r2
 800cea8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800ceac:	0952      	lsrs	r2, r2, #5
 800ceae:	f880 c001 	strb.w	ip, [r0, #1]
 800ceb2:	7082      	strb	r2, [r0, #2]
 800ceb4:	4770      	bx	lr
 800ceb6:	bf00      	nop

0800ceb8 <generate_type_name>:
 800ceb8:	b530      	push	{r4, r5, lr}
 800ceba:	2300      	movs	r3, #0
 800cebc:	700b      	strb	r3, [r1, #0]
 800cebe:	6803      	ldr	r3, [r0, #0]
 800cec0:	b087      	sub	sp, #28
 800cec2:	4614      	mov	r4, r2
 800cec4:	b1d3      	cbz	r3, 800cefc <generate_type_name+0x44>
 800cec6:	4a0f      	ldr	r2, [pc, #60]	@ (800cf04 <generate_type_name+0x4c>)
 800cec8:	4615      	mov	r5, r2
 800ceca:	9203      	str	r2, [sp, #12]
 800cecc:	9500      	str	r5, [sp, #0]
 800cece:	6842      	ldr	r2, [r0, #4]
 800ced0:	480d      	ldr	r0, [pc, #52]	@ (800cf08 <generate_type_name+0x50>)
 800ced2:	9001      	str	r0, [sp, #4]
 800ced4:	4608      	mov	r0, r1
 800ced6:	490d      	ldr	r1, [pc, #52]	@ (800cf0c <generate_type_name+0x54>)
 800ced8:	9204      	str	r2, [sp, #16]
 800ceda:	9105      	str	r1, [sp, #20]
 800cedc:	9102      	str	r1, [sp, #8]
 800cede:	4a0c      	ldr	r2, [pc, #48]	@ (800cf10 <generate_type_name+0x58>)
 800cee0:	4621      	mov	r1, r4
 800cee2:	f00a fdeb 	bl	8017abc <sniprintf>
 800cee6:	2800      	cmp	r0, #0
 800cee8:	db05      	blt.n	800cef6 <generate_type_name+0x3e>
 800ceea:	4284      	cmp	r4, r0
 800ceec:	bfd4      	ite	le
 800ceee:	2000      	movle	r0, #0
 800cef0:	2001      	movgt	r0, #1
 800cef2:	b007      	add	sp, #28
 800cef4:	bd30      	pop	{r4, r5, pc}
 800cef6:	2000      	movs	r0, #0
 800cef8:	b007      	add	sp, #28
 800cefa:	bd30      	pop	{r4, r5, pc}
 800cefc:	4b05      	ldr	r3, [pc, #20]	@ (800cf14 <generate_type_name+0x5c>)
 800cefe:	4a01      	ldr	r2, [pc, #4]	@ (800cf04 <generate_type_name+0x4c>)
 800cf00:	461d      	mov	r5, r3
 800cf02:	e7e2      	b.n	800ceca <generate_type_name+0x12>
 800cf04:	0801a54c 	.word	0x0801a54c
 800cf08:	0801a564 	.word	0x0801a564
 800cf0c:	0801a560 	.word	0x0801a560
 800cf10:	0801a550 	.word	0x0801a550
 800cf14:	0801ab58 	.word	0x0801ab58

0800cf18 <generate_topic_name>:
 800cf18:	b510      	push	{r4, lr}
 800cf1a:	b082      	sub	sp, #8
 800cf1c:	4614      	mov	r4, r2
 800cf1e:	9000      	str	r0, [sp, #0]
 800cf20:	4b08      	ldr	r3, [pc, #32]	@ (800cf44 <generate_topic_name+0x2c>)
 800cf22:	4a09      	ldr	r2, [pc, #36]	@ (800cf48 <generate_topic_name+0x30>)
 800cf24:	4608      	mov	r0, r1
 800cf26:	4621      	mov	r1, r4
 800cf28:	f00a fdc8 	bl	8017abc <sniprintf>
 800cf2c:	2800      	cmp	r0, #0
 800cf2e:	db05      	blt.n	800cf3c <generate_topic_name+0x24>
 800cf30:	4284      	cmp	r4, r0
 800cf32:	bfd4      	ite	le
 800cf34:	2000      	movle	r0, #0
 800cf36:	2001      	movgt	r0, #1
 800cf38:	b002      	add	sp, #8
 800cf3a:	bd10      	pop	{r4, pc}
 800cf3c:	2000      	movs	r0, #0
 800cf3e:	b002      	add	sp, #8
 800cf40:	bd10      	pop	{r4, pc}
 800cf42:	bf00      	nop
 800cf44:	0801a568 	.word	0x0801a568
 800cf48:	08019fd4 	.word	0x08019fd4

0800cf4c <is_uxrce_rmw_identifier_valid>:
 800cf4c:	b510      	push	{r4, lr}
 800cf4e:	4604      	mov	r4, r0
 800cf50:	b140      	cbz	r0, 800cf64 <is_uxrce_rmw_identifier_valid+0x18>
 800cf52:	f006 f857 	bl	8013004 <rmw_get_implementation_identifier>
 800cf56:	4601      	mov	r1, r0
 800cf58:	4620      	mov	r0, r4
 800cf5a:	f7f3 f959 	bl	8000210 <strcmp>
 800cf5e:	fab0 f080 	clz	r0, r0
 800cf62:	0940      	lsrs	r0, r0, #5
 800cf64:	bd10      	pop	{r4, pc}
 800cf66:	bf00      	nop

0800cf68 <get_message_typesupport_handle>:
 800cf68:	6883      	ldr	r3, [r0, #8]
 800cf6a:	4718      	bx	r3

0800cf6c <get_message_typesupport_handle_function>:
 800cf6c:	b510      	push	{r4, lr}
 800cf6e:	4604      	mov	r4, r0
 800cf70:	6800      	ldr	r0, [r0, #0]
 800cf72:	f7f3 f94d 	bl	8000210 <strcmp>
 800cf76:	2800      	cmp	r0, #0
 800cf78:	bf0c      	ite	eq
 800cf7a:	4620      	moveq	r0, r4
 800cf7c:	2000      	movne	r0, #0
 800cf7e:	bd10      	pop	{r4, pc}

0800cf80 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>:
 800cf80:	4b04      	ldr	r3, [pc, #16]	@ (800cf94 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 800cf82:	681a      	ldr	r2, [r3, #0]
 800cf84:	b10a      	cbz	r2, 800cf8a <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0xa>
 800cf86:	4803      	ldr	r0, [pc, #12]	@ (800cf94 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 800cf88:	4770      	bx	lr
 800cf8a:	4a03      	ldr	r2, [pc, #12]	@ (800cf98 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x18>)
 800cf8c:	4801      	ldr	r0, [pc, #4]	@ (800cf94 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 800cf8e:	6812      	ldr	r2, [r2, #0]
 800cf90:	601a      	str	r2, [r3, #0]
 800cf92:	4770      	bx	lr
 800cf94:	20000038 	.word	0x20000038
 800cf98:	200000b4 	.word	0x200000b4

0800cf9c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>:
 800cf9c:	4a02      	ldr	r2, [pc, #8]	@ (800cfa8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0xc>)
 800cf9e:	4b03      	ldr	r3, [pc, #12]	@ (800cfac <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x10>)
 800cfa0:	6812      	ldr	r2, [r2, #0]
 800cfa2:	601a      	str	r2, [r3, #0]
 800cfa4:	4770      	bx	lr
 800cfa6:	bf00      	nop
 800cfa8:	200000b4 	.word	0x200000b4
 800cfac:	20000038 	.word	0x20000038

0800cfb0 <std_msgs__msg__String__rosidl_typesupport_introspection_c__String_init_function>:
 800cfb0:	f006 be64 	b.w	8013c7c <std_msgs__msg__String__init>

0800cfb4 <std_msgs__msg__String__rosidl_typesupport_introspection_c__String_fini_function>:
 800cfb4:	f006 be74 	b.w	8013ca0 <std_msgs__msg__String__fini>

0800cfb8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String>:
 800cfb8:	4b04      	ldr	r3, [pc, #16]	@ (800cfcc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 800cfba:	681a      	ldr	r2, [r3, #0]
 800cfbc:	b10a      	cbz	r2, 800cfc2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0xa>
 800cfbe:	4803      	ldr	r0, [pc, #12]	@ (800cfcc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 800cfc0:	4770      	bx	lr
 800cfc2:	4a03      	ldr	r2, [pc, #12]	@ (800cfd0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x18>)
 800cfc4:	4801      	ldr	r0, [pc, #4]	@ (800cfcc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 800cfc6:	6812      	ldr	r2, [r2, #0]
 800cfc8:	601a      	str	r2, [r3, #0]
 800cfca:	4770      	bx	lr
 800cfcc:	20000080 	.word	0x20000080
 800cfd0:	200000b8 	.word	0x200000b8

0800cfd4 <_String__max_serialized_size>:
 800cfd4:	2000      	movs	r0, #0
 800cfd6:	4770      	bx	lr

0800cfd8 <_String__cdr_serialize>:
 800cfd8:	b1c0      	cbz	r0, 800d00c <_String__cdr_serialize+0x34>
 800cfda:	b570      	push	{r4, r5, r6, lr}
 800cfdc:	6806      	ldr	r6, [r0, #0]
 800cfde:	460d      	mov	r5, r1
 800cfe0:	4604      	mov	r4, r0
 800cfe2:	b156      	cbz	r6, 800cffa <_String__cdr_serialize+0x22>
 800cfe4:	4630      	mov	r0, r6
 800cfe6:	f7f3 f973 	bl	80002d0 <strlen>
 800cfea:	4631      	mov	r1, r6
 800cfec:	6060      	str	r0, [r4, #4]
 800cfee:	1c42      	adds	r2, r0, #1
 800cff0:	4628      	mov	r0, r5
 800cff2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cff6:	f000 b917 	b.w	800d228 <ucdr_serialize_sequence_char>
 800cffa:	4630      	mov	r0, r6
 800cffc:	6060      	str	r0, [r4, #4]
 800cffe:	4632      	mov	r2, r6
 800d000:	4631      	mov	r1, r6
 800d002:	4628      	mov	r0, r5
 800d004:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d008:	f000 b90e 	b.w	800d228 <ucdr_serialize_sequence_char>
 800d00c:	4770      	bx	lr
 800d00e:	bf00      	nop

0800d010 <get_serialized_size_std_msgs__msg__String>:
 800d010:	b510      	push	{r4, lr}
 800d012:	4604      	mov	r4, r0
 800d014:	b138      	cbz	r0, 800d026 <get_serialized_size_std_msgs__msg__String+0x16>
 800d016:	460b      	mov	r3, r1
 800d018:	4618      	mov	r0, r3
 800d01a:	2104      	movs	r1, #4
 800d01c:	f000 f898 	bl	800d150 <ucdr_alignment>
 800d020:	6863      	ldr	r3, [r4, #4]
 800d022:	3305      	adds	r3, #5
 800d024:	4418      	add	r0, r3
 800d026:	bd10      	pop	{r4, pc}

0800d028 <_String__cdr_deserialize>:
 800d028:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d02a:	460c      	mov	r4, r1
 800d02c:	b083      	sub	sp, #12
 800d02e:	b1a1      	cbz	r1, 800d05a <_String__cdr_deserialize+0x32>
 800d030:	688f      	ldr	r7, [r1, #8]
 800d032:	6809      	ldr	r1, [r1, #0]
 800d034:	ab01      	add	r3, sp, #4
 800d036:	463a      	mov	r2, r7
 800d038:	4606      	mov	r6, r0
 800d03a:	f000 f907 	bl	800d24c <ucdr_deserialize_sequence_char>
 800d03e:	9b01      	ldr	r3, [sp, #4]
 800d040:	4605      	mov	r5, r0
 800d042:	b920      	cbnz	r0, 800d04e <_String__cdr_deserialize+0x26>
 800d044:	429f      	cmp	r7, r3
 800d046:	d30c      	bcc.n	800d062 <_String__cdr_deserialize+0x3a>
 800d048:	4628      	mov	r0, r5
 800d04a:	b003      	add	sp, #12
 800d04c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d04e:	b103      	cbz	r3, 800d052 <_String__cdr_deserialize+0x2a>
 800d050:	3b01      	subs	r3, #1
 800d052:	4628      	mov	r0, r5
 800d054:	6063      	str	r3, [r4, #4]
 800d056:	b003      	add	sp, #12
 800d058:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d05a:	460d      	mov	r5, r1
 800d05c:	4628      	mov	r0, r5
 800d05e:	b003      	add	sp, #12
 800d060:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d062:	2101      	movs	r1, #1
 800d064:	75b0      	strb	r0, [r6, #22]
 800d066:	7571      	strb	r1, [r6, #21]
 800d068:	4630      	mov	r0, r6
 800d06a:	6065      	str	r5, [r4, #4]
 800d06c:	f000 f886 	bl	800d17c <ucdr_align_to>
 800d070:	4630      	mov	r0, r6
 800d072:	9901      	ldr	r1, [sp, #4]
 800d074:	f000 f8b8 	bl	800d1e8 <ucdr_advance_buffer>
 800d078:	4628      	mov	r0, r5
 800d07a:	b003      	add	sp, #12
 800d07c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d07e:	bf00      	nop

0800d080 <_String__get_serialized_size>:
 800d080:	b510      	push	{r4, lr}
 800d082:	4604      	mov	r4, r0
 800d084:	b130      	cbz	r0, 800d094 <_String__get_serialized_size+0x14>
 800d086:	2104      	movs	r1, #4
 800d088:	2000      	movs	r0, #0
 800d08a:	f000 f861 	bl	800d150 <ucdr_alignment>
 800d08e:	6863      	ldr	r3, [r4, #4]
 800d090:	3305      	adds	r3, #5
 800d092:	4418      	add	r0, r3
 800d094:	bd10      	pop	{r4, pc}
 800d096:	bf00      	nop

0800d098 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__String>:
 800d098:	4800      	ldr	r0, [pc, #0]	@ (800d09c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__String+0x4>)
 800d09a:	4770      	bx	lr
 800d09c:	2000008c 	.word	0x2000008c

0800d0a0 <ucdr_check_buffer_available_for>:
 800d0a0:	7d83      	ldrb	r3, [r0, #22]
 800d0a2:	b93b      	cbnz	r3, 800d0b4 <ucdr_check_buffer_available_for+0x14>
 800d0a4:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800d0a8:	4419      	add	r1, r3
 800d0aa:	4288      	cmp	r0, r1
 800d0ac:	bf34      	ite	cc
 800d0ae:	2000      	movcc	r0, #0
 800d0b0:	2001      	movcs	r0, #1
 800d0b2:	4770      	bx	lr
 800d0b4:	2000      	movs	r0, #0
 800d0b6:	4770      	bx	lr

0800d0b8 <ucdr_check_final_buffer_behavior>:
 800d0b8:	7d83      	ldrb	r3, [r0, #22]
 800d0ba:	b943      	cbnz	r3, 800d0ce <ucdr_check_final_buffer_behavior+0x16>
 800d0bc:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800d0c0:	4291      	cmp	r1, r2
 800d0c2:	b510      	push	{r4, lr}
 800d0c4:	4604      	mov	r4, r0
 800d0c6:	d205      	bcs.n	800d0d4 <ucdr_check_final_buffer_behavior+0x1c>
 800d0c8:	2301      	movs	r3, #1
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	bd10      	pop	{r4, pc}
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	4770      	bx	lr
 800d0d4:	6982      	ldr	r2, [r0, #24]
 800d0d6:	b13a      	cbz	r2, 800d0e8 <ucdr_check_final_buffer_behavior+0x30>
 800d0d8:	69c1      	ldr	r1, [r0, #28]
 800d0da:	4790      	blx	r2
 800d0dc:	f080 0301 	eor.w	r3, r0, #1
 800d0e0:	b2db      	uxtb	r3, r3
 800d0e2:	75a0      	strb	r0, [r4, #22]
 800d0e4:	4618      	mov	r0, r3
 800d0e6:	bd10      	pop	{r4, pc}
 800d0e8:	2001      	movs	r0, #1
 800d0ea:	75a0      	strb	r0, [r4, #22]
 800d0ec:	e7fa      	b.n	800d0e4 <ucdr_check_final_buffer_behavior+0x2c>
 800d0ee:	bf00      	nop

0800d0f0 <ucdr_set_on_full_buffer_callback>:
 800d0f0:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800d0f4:	4770      	bx	lr
 800d0f6:	bf00      	nop

0800d0f8 <ucdr_init_buffer_origin_offset_endian>:
 800d0f8:	b410      	push	{r4}
 800d0fa:	9c01      	ldr	r4, [sp, #4]
 800d0fc:	6001      	str	r1, [r0, #0]
 800d0fe:	440a      	add	r2, r1
 800d100:	6042      	str	r2, [r0, #4]
 800d102:	190a      	adds	r2, r1, r4
 800d104:	441c      	add	r4, r3
 800d106:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800d10a:	6082      	str	r2, [r0, #8]
 800d10c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800d110:	7503      	strb	r3, [r0, #20]
 800d112:	2200      	movs	r2, #0
 800d114:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800d118:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d11c:	7542      	strb	r2, [r0, #21]
 800d11e:	7582      	strb	r2, [r0, #22]
 800d120:	4770      	bx	lr
 800d122:	bf00      	nop

0800d124 <ucdr_init_buffer_origin_offset>:
 800d124:	b510      	push	{r4, lr}
 800d126:	b082      	sub	sp, #8
 800d128:	9c04      	ldr	r4, [sp, #16]
 800d12a:	9400      	str	r4, [sp, #0]
 800d12c:	2401      	movs	r4, #1
 800d12e:	9401      	str	r4, [sp, #4]
 800d130:	f7ff ffe2 	bl	800d0f8 <ucdr_init_buffer_origin_offset_endian>
 800d134:	b002      	add	sp, #8
 800d136:	bd10      	pop	{r4, pc}

0800d138 <ucdr_init_buffer_origin>:
 800d138:	b510      	push	{r4, lr}
 800d13a:	b082      	sub	sp, #8
 800d13c:	2400      	movs	r4, #0
 800d13e:	9400      	str	r4, [sp, #0]
 800d140:	f7ff fff0 	bl	800d124 <ucdr_init_buffer_origin_offset>
 800d144:	b002      	add	sp, #8
 800d146:	bd10      	pop	{r4, pc}

0800d148 <ucdr_init_buffer>:
 800d148:	2300      	movs	r3, #0
 800d14a:	f7ff bff5 	b.w	800d138 <ucdr_init_buffer_origin>
 800d14e:	bf00      	nop

0800d150 <ucdr_alignment>:
 800d150:	fbb0 f3f1 	udiv	r3, r0, r1
 800d154:	fb03 0011 	mls	r0, r3, r1, r0
 800d158:	1a08      	subs	r0, r1, r0
 800d15a:	3901      	subs	r1, #1
 800d15c:	4008      	ands	r0, r1
 800d15e:	4770      	bx	lr

0800d160 <ucdr_buffer_alignment>:
 800d160:	7d43      	ldrb	r3, [r0, #21]
 800d162:	428b      	cmp	r3, r1
 800d164:	d208      	bcs.n	800d178 <ucdr_buffer_alignment+0x18>
 800d166:	6900      	ldr	r0, [r0, #16]
 800d168:	fbb0 f3f1 	udiv	r3, r0, r1
 800d16c:	fb01 0013 	mls	r0, r1, r3, r0
 800d170:	1a08      	subs	r0, r1, r0
 800d172:	3901      	subs	r1, #1
 800d174:	4008      	ands	r0, r1
 800d176:	4770      	bx	lr
 800d178:	2000      	movs	r0, #0
 800d17a:	4770      	bx	lr

0800d17c <ucdr_align_to>:
 800d17c:	b538      	push	{r3, r4, r5, lr}
 800d17e:	4604      	mov	r4, r0
 800d180:	460d      	mov	r5, r1
 800d182:	f7ff ffed 	bl	800d160 <ucdr_buffer_alignment>
 800d186:	68a3      	ldr	r3, [r4, #8]
 800d188:	6921      	ldr	r1, [r4, #16]
 800d18a:	7565      	strb	r5, [r4, #21]
 800d18c:	181a      	adds	r2, r3, r0
 800d18e:	6863      	ldr	r3, [r4, #4]
 800d190:	4293      	cmp	r3, r2
 800d192:	4408      	add	r0, r1
 800d194:	bf28      	it	cs
 800d196:	4613      	movcs	r3, r2
 800d198:	6120      	str	r0, [r4, #16]
 800d19a:	60a3      	str	r3, [r4, #8]
 800d19c:	bd38      	pop	{r3, r4, r5, pc}
 800d19e:	bf00      	nop

0800d1a0 <ucdr_buffer_length>:
 800d1a0:	6882      	ldr	r2, [r0, #8]
 800d1a2:	6800      	ldr	r0, [r0, #0]
 800d1a4:	1a10      	subs	r0, r2, r0
 800d1a6:	4770      	bx	lr

0800d1a8 <ucdr_buffer_remaining>:
 800d1a8:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800d1ac:	1a10      	subs	r0, r2, r0
 800d1ae:	4770      	bx	lr

0800d1b0 <ucdr_check_final_buffer_behavior_array>:
 800d1b0:	b538      	push	{r3, r4, r5, lr}
 800d1b2:	7d83      	ldrb	r3, [r0, #22]
 800d1b4:	b963      	cbnz	r3, 800d1d0 <ucdr_check_final_buffer_behavior_array+0x20>
 800d1b6:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800d1ba:	429a      	cmp	r2, r3
 800d1bc:	4604      	mov	r4, r0
 800d1be:	460d      	mov	r5, r1
 800d1c0:	d308      	bcc.n	800d1d4 <ucdr_check_final_buffer_behavior_array+0x24>
 800d1c2:	b139      	cbz	r1, 800d1d4 <ucdr_check_final_buffer_behavior_array+0x24>
 800d1c4:	6983      	ldr	r3, [r0, #24]
 800d1c6:	b163      	cbz	r3, 800d1e2 <ucdr_check_final_buffer_behavior_array+0x32>
 800d1c8:	69c1      	ldr	r1, [r0, #28]
 800d1ca:	4798      	blx	r3
 800d1cc:	75a0      	strb	r0, [r4, #22]
 800d1ce:	b108      	cbz	r0, 800d1d4 <ucdr_check_final_buffer_behavior_array+0x24>
 800d1d0:	2000      	movs	r0, #0
 800d1d2:	bd38      	pop	{r3, r4, r5, pc}
 800d1d4:	4620      	mov	r0, r4
 800d1d6:	f7ff ffe7 	bl	800d1a8 <ucdr_buffer_remaining>
 800d1da:	42a8      	cmp	r0, r5
 800d1dc:	bf28      	it	cs
 800d1de:	4628      	movcs	r0, r5
 800d1e0:	bd38      	pop	{r3, r4, r5, pc}
 800d1e2:	2301      	movs	r3, #1
 800d1e4:	7583      	strb	r3, [r0, #22]
 800d1e6:	e7f3      	b.n	800d1d0 <ucdr_check_final_buffer_behavior_array+0x20>

0800d1e8 <ucdr_advance_buffer>:
 800d1e8:	b538      	push	{r3, r4, r5, lr}
 800d1ea:	4604      	mov	r4, r0
 800d1ec:	460d      	mov	r5, r1
 800d1ee:	f7ff ff57 	bl	800d0a0 <ucdr_check_buffer_available_for>
 800d1f2:	b178      	cbz	r0, 800d214 <ucdr_advance_buffer+0x2c>
 800d1f4:	6923      	ldr	r3, [r4, #16]
 800d1f6:	68a2      	ldr	r2, [r4, #8]
 800d1f8:	442b      	add	r3, r5
 800d1fa:	6123      	str	r3, [r4, #16]
 800d1fc:	2301      	movs	r3, #1
 800d1fe:	442a      	add	r2, r5
 800d200:	7563      	strb	r3, [r4, #21]
 800d202:	60a2      	str	r2, [r4, #8]
 800d204:	bd38      	pop	{r3, r4, r5, pc}
 800d206:	68a2      	ldr	r2, [r4, #8]
 800d208:	6923      	ldr	r3, [r4, #16]
 800d20a:	4402      	add	r2, r0
 800d20c:	4403      	add	r3, r0
 800d20e:	1a2d      	subs	r5, r5, r0
 800d210:	60a2      	str	r2, [r4, #8]
 800d212:	6123      	str	r3, [r4, #16]
 800d214:	4629      	mov	r1, r5
 800d216:	2201      	movs	r2, #1
 800d218:	4620      	mov	r0, r4
 800d21a:	f7ff ffc9 	bl	800d1b0 <ucdr_check_final_buffer_behavior_array>
 800d21e:	2800      	cmp	r0, #0
 800d220:	d1f1      	bne.n	800d206 <ucdr_advance_buffer+0x1e>
 800d222:	2301      	movs	r3, #1
 800d224:	7563      	strb	r3, [r4, #21]
 800d226:	bd38      	pop	{r3, r4, r5, pc}

0800d228 <ucdr_serialize_sequence_char>:
 800d228:	b570      	push	{r4, r5, r6, lr}
 800d22a:	4615      	mov	r5, r2
 800d22c:	460e      	mov	r6, r1
 800d22e:	7d01      	ldrb	r1, [r0, #20]
 800d230:	4604      	mov	r4, r0
 800d232:	f007 f941 	bl	80144b8 <ucdr_serialize_endian_uint32_t>
 800d236:	b90d      	cbnz	r5, 800d23c <ucdr_serialize_sequence_char+0x14>
 800d238:	2001      	movs	r0, #1
 800d23a:	bd70      	pop	{r4, r5, r6, pc}
 800d23c:	7d21      	ldrb	r1, [r4, #20]
 800d23e:	462b      	mov	r3, r5
 800d240:	4632      	mov	r2, r6
 800d242:	4620      	mov	r0, r4
 800d244:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d248:	f006 bd2e 	b.w	8013ca8 <ucdr_serialize_endian_array_char>

0800d24c <ucdr_deserialize_sequence_char>:
 800d24c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d250:	461d      	mov	r5, r3
 800d252:	4616      	mov	r6, r2
 800d254:	460f      	mov	r7, r1
 800d256:	461a      	mov	r2, r3
 800d258:	7d01      	ldrb	r1, [r0, #20]
 800d25a:	4604      	mov	r4, r0
 800d25c:	f007 fa54 	bl	8014708 <ucdr_deserialize_endian_uint32_t>
 800d260:	682b      	ldr	r3, [r5, #0]
 800d262:	429e      	cmp	r6, r3
 800d264:	bf3c      	itt	cc
 800d266:	2201      	movcc	r2, #1
 800d268:	75a2      	strbcc	r2, [r4, #22]
 800d26a:	b913      	cbnz	r3, 800d272 <ucdr_deserialize_sequence_char+0x26>
 800d26c:	2001      	movs	r0, #1
 800d26e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d272:	7d21      	ldrb	r1, [r4, #20]
 800d274:	463a      	mov	r2, r7
 800d276:	4620      	mov	r0, r4
 800d278:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d27c:	f006 bd46 	b.w	8013d0c <ucdr_deserialize_endian_array_char>

0800d280 <ucdr_serialize_sequence_uint8_t>:
 800d280:	b570      	push	{r4, r5, r6, lr}
 800d282:	4615      	mov	r5, r2
 800d284:	460e      	mov	r6, r1
 800d286:	7d01      	ldrb	r1, [r0, #20]
 800d288:	4604      	mov	r4, r0
 800d28a:	f007 f915 	bl	80144b8 <ucdr_serialize_endian_uint32_t>
 800d28e:	b90d      	cbnz	r5, 800d294 <ucdr_serialize_sequence_uint8_t+0x14>
 800d290:	2001      	movs	r0, #1
 800d292:	bd70      	pop	{r4, r5, r6, pc}
 800d294:	7d21      	ldrb	r1, [r4, #20]
 800d296:	462b      	mov	r3, r5
 800d298:	4632      	mov	r2, r6
 800d29a:	4620      	mov	r0, r4
 800d29c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d2a0:	f006 bd98 	b.w	8013dd4 <ucdr_serialize_endian_array_uint8_t>

0800d2a4 <ucdr_deserialize_sequence_uint8_t>:
 800d2a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2a8:	461d      	mov	r5, r3
 800d2aa:	4616      	mov	r6, r2
 800d2ac:	460f      	mov	r7, r1
 800d2ae:	461a      	mov	r2, r3
 800d2b0:	7d01      	ldrb	r1, [r0, #20]
 800d2b2:	4604      	mov	r4, r0
 800d2b4:	f007 fa28 	bl	8014708 <ucdr_deserialize_endian_uint32_t>
 800d2b8:	682b      	ldr	r3, [r5, #0]
 800d2ba:	429e      	cmp	r6, r3
 800d2bc:	bf3c      	itt	cc
 800d2be:	2201      	movcc	r2, #1
 800d2c0:	75a2      	strbcc	r2, [r4, #22]
 800d2c2:	b913      	cbnz	r3, 800d2ca <ucdr_deserialize_sequence_uint8_t+0x26>
 800d2c4:	2001      	movs	r0, #1
 800d2c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2ca:	7d21      	ldrb	r1, [r4, #20]
 800d2cc:	463a      	mov	r2, r7
 800d2ce:	4620      	mov	r0, r4
 800d2d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d2d4:	f006 bde2 	b.w	8013e9c <ucdr_deserialize_endian_array_uint8_t>

0800d2d8 <uxr_buffer_delete_entity>:
 800d2d8:	b510      	push	{r4, lr}
 800d2da:	2300      	movs	r3, #0
 800d2dc:	b08e      	sub	sp, #56	@ 0x38
 800d2de:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800d2e2:	2303      	movs	r3, #3
 800d2e4:	9300      	str	r3, [sp, #0]
 800d2e6:	2204      	movs	r2, #4
 800d2e8:	ab06      	add	r3, sp, #24
 800d2ea:	4604      	mov	r4, r0
 800d2ec:	9103      	str	r1, [sp, #12]
 800d2ee:	f001 fa81 	bl	800e7f4 <uxr_prepare_stream_to_write_submessage>
 800d2f2:	b918      	cbnz	r0, 800d2fc <uxr_buffer_delete_entity+0x24>
 800d2f4:	4604      	mov	r4, r0
 800d2f6:	4620      	mov	r0, r4
 800d2f8:	b00e      	add	sp, #56	@ 0x38
 800d2fa:	bd10      	pop	{r4, pc}
 800d2fc:	9902      	ldr	r1, [sp, #8]
 800d2fe:	aa05      	add	r2, sp, #20
 800d300:	4620      	mov	r0, r4
 800d302:	f001 fbad 	bl	800ea60 <uxr_init_base_object_request>
 800d306:	a905      	add	r1, sp, #20
 800d308:	4604      	mov	r4, r0
 800d30a:	a806      	add	r0, sp, #24
 800d30c:	f002 fdfe 	bl	800ff0c <uxr_serialize_DELETE_Payload>
 800d310:	4620      	mov	r0, r4
 800d312:	b00e      	add	sp, #56	@ 0x38
 800d314:	bd10      	pop	{r4, pc}
 800d316:	bf00      	nop

0800d318 <uxr_common_create_entity>:
 800d318:	b510      	push	{r4, lr}
 800d31a:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800d31e:	b08c      	sub	sp, #48	@ 0x30
 800d320:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800d324:	f1bc 0f01 	cmp.w	ip, #1
 800d328:	bf0c      	ite	eq
 800d32a:	f003 0201 	andeq.w	r2, r3, #1
 800d32e:	2200      	movne	r2, #0
 800d330:	330e      	adds	r3, #14
 800d332:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800d336:	9101      	str	r1, [sp, #4]
 800d338:	441a      	add	r2, r3
 800d33a:	2301      	movs	r3, #1
 800d33c:	9300      	str	r3, [sp, #0]
 800d33e:	9903      	ldr	r1, [sp, #12]
 800d340:	ab04      	add	r3, sp, #16
 800d342:	b292      	uxth	r2, r2
 800d344:	4604      	mov	r4, r0
 800d346:	f001 fa55 	bl	800e7f4 <uxr_prepare_stream_to_write_submessage>
 800d34a:	b918      	cbnz	r0, 800d354 <uxr_common_create_entity+0x3c>
 800d34c:	4604      	mov	r4, r0
 800d34e:	4620      	mov	r0, r4
 800d350:	b00c      	add	sp, #48	@ 0x30
 800d352:	bd10      	pop	{r4, pc}
 800d354:	9902      	ldr	r1, [sp, #8]
 800d356:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d358:	4620      	mov	r0, r4
 800d35a:	f001 fb81 	bl	800ea60 <uxr_init_base_object_request>
 800d35e:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d360:	4604      	mov	r4, r0
 800d362:	a804      	add	r0, sp, #16
 800d364:	f002 fd2e 	bl	800fdc4 <uxr_serialize_CREATE_Payload>
 800d368:	4620      	mov	r0, r4
 800d36a:	b00c      	add	sp, #48	@ 0x30
 800d36c:	bd10      	pop	{r4, pc}
 800d36e:	bf00      	nop

0800d370 <uxr_buffer_create_participant_bin>:
 800d370:	b570      	push	{r4, r5, r6, lr}
 800d372:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800d376:	ac11      	add	r4, sp, #68	@ 0x44
 800d378:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 800d37c:	2303      	movs	r3, #3
 800d37e:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800d382:	7223      	strb	r3, [r4, #8]
 800d384:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 800d386:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 800d38a:	2201      	movs	r2, #1
 800d38c:	2100      	movs	r1, #0
 800d38e:	4605      	mov	r5, r0
 800d390:	7122      	strb	r2, [r4, #4]
 800d392:	f88d 1014 	strb.w	r1, [sp, #20]
 800d396:	b1cb      	cbz	r3, 800d3cc <uxr_buffer_create_participant_bin+0x5c>
 800d398:	f88d 201c 	strb.w	r2, [sp, #28]
 800d39c:	9308      	str	r3, [sp, #32]
 800d39e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d3a2:	a915      	add	r1, sp, #84	@ 0x54
 800d3a4:	a809      	add	r0, sp, #36	@ 0x24
 800d3a6:	f7ff fecf 	bl	800d148 <ucdr_init_buffer>
 800d3aa:	a905      	add	r1, sp, #20
 800d3ac:	a809      	add	r0, sp, #36	@ 0x24
 800d3ae:	f002 f8eb 	bl	800f588 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800d3b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d3b4:	9600      	str	r6, [sp, #0]
 800d3b6:	9401      	str	r4, [sp, #4]
 800d3b8:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800d3bc:	60e3      	str	r3, [r4, #12]
 800d3be:	4628      	mov	r0, r5
 800d3c0:	b29b      	uxth	r3, r3
 800d3c2:	f7ff ffa9 	bl	800d318 <uxr_common_create_entity>
 800d3c6:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 800d3ca:	bd70      	pop	{r4, r5, r6, pc}
 800d3cc:	f88d 301c 	strb.w	r3, [sp, #28]
 800d3d0:	e7e5      	b.n	800d39e <uxr_buffer_create_participant_bin+0x2e>
 800d3d2:	bf00      	nop

0800d3d4 <uxr_buffer_create_topic_bin>:
 800d3d4:	b570      	push	{r4, r5, r6, lr}
 800d3d6:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 800d3da:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800d3de:	9105      	str	r1, [sp, #20]
 800d3e0:	4605      	mov	r5, r0
 800d3e2:	a997      	add	r1, sp, #604	@ 0x25c
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	2302      	movs	r3, #2
 800d3e8:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 800d3ec:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 800d3f0:	f000 f996 	bl	800d720 <uxr_object_id_to_raw>
 800d3f4:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 800d3f6:	9306      	str	r3, [sp, #24]
 800d3f8:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 800d3fa:	930a      	str	r3, [sp, #40]	@ 0x28
 800d3fc:	2303      	movs	r3, #3
 800d3fe:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800d402:	2301      	movs	r3, #1
 800d404:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d408:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800d40c:	a917      	add	r1, sp, #92	@ 0x5c
 800d40e:	2300      	movs	r3, #0
 800d410:	a80b      	add	r0, sp, #44	@ 0x2c
 800d412:	f88d 301c 	strb.w	r3, [sp, #28]
 800d416:	f7ff fe97 	bl	800d148 <ucdr_init_buffer>
 800d41a:	a906      	add	r1, sp, #24
 800d41c:	a80b      	add	r0, sp, #44	@ 0x2c
 800d41e:	f002 f8d5 	bl	800f5cc <uxr_serialize_OBJK_Topic_Binary>
 800d422:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d424:	9316      	str	r3, [sp, #88]	@ 0x58
 800d426:	ac13      	add	r4, sp, #76	@ 0x4c
 800d428:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800d42c:	9600      	str	r6, [sp, #0]
 800d42e:	9401      	str	r4, [sp, #4]
 800d430:	b29b      	uxth	r3, r3
 800d432:	4628      	mov	r0, r5
 800d434:	f7ff ff70 	bl	800d318 <uxr_common_create_entity>
 800d438:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 800d43c:	bd70      	pop	{r4, r5, r6, pc}
 800d43e:	bf00      	nop

0800d440 <uxr_buffer_create_publisher_bin>:
 800d440:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d442:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 800d446:	4605      	mov	r5, r0
 800d448:	9105      	str	r1, [sp, #20]
 800d44a:	4618      	mov	r0, r3
 800d44c:	2603      	movs	r6, #3
 800d44e:	a992      	add	r1, sp, #584	@ 0x248
 800d450:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800d454:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 800d458:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 800d45c:	f000 f960 	bl	800d720 <uxr_object_id_to_raw>
 800d460:	2300      	movs	r3, #0
 800d462:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d466:	a912      	add	r1, sp, #72	@ 0x48
 800d468:	a806      	add	r0, sp, #24
 800d46a:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800d46e:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800d472:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 800d476:	f7ff fe67 	bl	800d148 <ucdr_init_buffer>
 800d47a:	a993      	add	r1, sp, #588	@ 0x24c
 800d47c:	a806      	add	r0, sp, #24
 800d47e:	f002 f959 	bl	800f734 <uxr_serialize_OBJK_Publisher_Binary>
 800d482:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d484:	9311      	str	r3, [sp, #68]	@ 0x44
 800d486:	ac0e      	add	r4, sp, #56	@ 0x38
 800d488:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800d48c:	9700      	str	r7, [sp, #0]
 800d48e:	9401      	str	r4, [sp, #4]
 800d490:	b29b      	uxth	r3, r3
 800d492:	4628      	mov	r0, r5
 800d494:	f7ff ff40 	bl	800d318 <uxr_common_create_entity>
 800d498:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 800d49c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d49e:	bf00      	nop

0800d4a0 <uxr_buffer_create_subscriber_bin>:
 800d4a0:	b570      	push	{r4, r5, r6, lr}
 800d4a2:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 800d4a6:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800d4aa:	9105      	str	r1, [sp, #20]
 800d4ac:	4605      	mov	r5, r0
 800d4ae:	a992      	add	r1, sp, #584	@ 0x248
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	2304      	movs	r3, #4
 800d4b4:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 800d4b8:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 800d4bc:	f000 f930 	bl	800d720 <uxr_object_id_to_raw>
 800d4c0:	2300      	movs	r3, #0
 800d4c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d4c6:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800d4ca:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800d4ce:	a912      	add	r1, sp, #72	@ 0x48
 800d4d0:	2303      	movs	r3, #3
 800d4d2:	a806      	add	r0, sp, #24
 800d4d4:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 800d4d8:	f7ff fe36 	bl	800d148 <ucdr_init_buffer>
 800d4dc:	a993      	add	r1, sp, #588	@ 0x24c
 800d4de:	a806      	add	r0, sp, #24
 800d4e0:	f002 f9d8 	bl	800f894 <uxr_serialize_OBJK_Subscriber_Binary>
 800d4e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d4e6:	9311      	str	r3, [sp, #68]	@ 0x44
 800d4e8:	ac0e      	add	r4, sp, #56	@ 0x38
 800d4ea:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800d4ee:	9600      	str	r6, [sp, #0]
 800d4f0:	9401      	str	r4, [sp, #4]
 800d4f2:	b29b      	uxth	r3, r3
 800d4f4:	4628      	mov	r0, r5
 800d4f6:	f7ff ff0f 	bl	800d318 <uxr_common_create_entity>
 800d4fa:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 800d4fe:	bd70      	pop	{r4, r5, r6, pc}

0800d500 <uxr_buffer_create_datawriter_bin>:
 800d500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d504:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800d508:	ac1d      	add	r4, sp, #116	@ 0x74
 800d50a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800d50e:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 800d512:	9105      	str	r1, [sp, #20]
 800d514:	4606      	mov	r6, r0
 800d516:	a9a1      	add	r1, sp, #644	@ 0x284
 800d518:	4618      	mov	r0, r3
 800d51a:	2305      	movs	r3, #5
 800d51c:	7123      	strb	r3, [r4, #4]
 800d51e:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 800d522:	2703      	movs	r7, #3
 800d524:	f000 f8fc 	bl	800d720 <uxr_object_id_to_raw>
 800d528:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 800d52a:	7227      	strb	r7, [r4, #8]
 800d52c:	a90e      	add	r1, sp, #56	@ 0x38
 800d52e:	f000 f8f7 	bl	800d720 <uxr_object_id_to_raw>
 800d532:	2300      	movs	r3, #0
 800d534:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800d538:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 800d53c:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800d540:	3d00      	subs	r5, #0
 800d542:	bf18      	it	ne
 800d544:	2501      	movne	r5, #1
 800d546:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800d54a:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800d54e:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800d552:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800d556:	2301      	movs	r3, #1
 800d558:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800d55c:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800d560:	bb8a      	cbnz	r2, 800d5c6 <uxr_buffer_create_datawriter_bin+0xc6>
 800d562:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800d566:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800d56a:	f04f 0c13 	mov.w	ip, #19
 800d56e:	250b      	movs	r5, #11
 800d570:	2221      	movs	r2, #33	@ 0x21
 800d572:	2111      	movs	r1, #17
 800d574:	2009      	movs	r0, #9
 800d576:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 800d57a:	b923      	cbnz	r3, 800d586 <uxr_buffer_create_datawriter_bin+0x86>
 800d57c:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800d580:	4672      	mov	r2, lr
 800d582:	4661      	mov	r1, ip
 800d584:	4628      	mov	r0, r5
 800d586:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 800d58a:	2b01      	cmp	r3, #1
 800d58c:	d025      	beq.n	800d5da <uxr_buffer_create_datawriter_bin+0xda>
 800d58e:	2b03      	cmp	r3, #3
 800d590:	d029      	beq.n	800d5e6 <uxr_buffer_create_datawriter_bin+0xe6>
 800d592:	b32b      	cbz	r3, 800d5e0 <uxr_buffer_create_datawriter_bin+0xe0>
 800d594:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d598:	a921      	add	r1, sp, #132	@ 0x84
 800d59a:	a806      	add	r0, sp, #24
 800d59c:	f7ff fdd4 	bl	800d148 <ucdr_init_buffer>
 800d5a0:	a90e      	add	r1, sp, #56	@ 0x38
 800d5a2:	a806      	add	r0, sp, #24
 800d5a4:	f002 fa28 	bl	800f9f8 <uxr_serialize_OBJK_DataWriter_Binary>
 800d5a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d5aa:	f8cd 8000 	str.w	r8, [sp]
 800d5ae:	9401      	str	r4, [sp, #4]
 800d5b0:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800d5b4:	60e3      	str	r3, [r4, #12]
 800d5b6:	4630      	mov	r0, r6
 800d5b8:	b29b      	uxth	r3, r3
 800d5ba:	f7ff fead 	bl	800d318 <uxr_common_create_entity>
 800d5be:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800d5c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5c6:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800d5ca:	f04f 0c12 	mov.w	ip, #18
 800d5ce:	250a      	movs	r5, #10
 800d5d0:	2220      	movs	r2, #32
 800d5d2:	2110      	movs	r1, #16
 800d5d4:	2008      	movs	r0, #8
 800d5d6:	2702      	movs	r7, #2
 800d5d8:	e7cd      	b.n	800d576 <uxr_buffer_create_datawriter_bin+0x76>
 800d5da:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800d5de:	e7d9      	b.n	800d594 <uxr_buffer_create_datawriter_bin+0x94>
 800d5e0:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800d5e4:	e7d6      	b.n	800d594 <uxr_buffer_create_datawriter_bin+0x94>
 800d5e6:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800d5ea:	e7d3      	b.n	800d594 <uxr_buffer_create_datawriter_bin+0x94>

0800d5ec <uxr_buffer_create_datareader_bin>:
 800d5ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5f0:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800d5f4:	ac1f      	add	r4, sp, #124	@ 0x7c
 800d5f6:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800d5fa:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 800d5fe:	9105      	str	r1, [sp, #20]
 800d600:	4606      	mov	r6, r0
 800d602:	a9a3      	add	r1, sp, #652	@ 0x28c
 800d604:	4618      	mov	r0, r3
 800d606:	2306      	movs	r3, #6
 800d608:	7123      	strb	r3, [r4, #4]
 800d60a:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 800d60e:	2703      	movs	r7, #3
 800d610:	f000 f886 	bl	800d720 <uxr_object_id_to_raw>
 800d614:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 800d616:	7227      	strb	r7, [r4, #8]
 800d618:	a90e      	add	r1, sp, #56	@ 0x38
 800d61a:	f000 f881 	bl	800d720 <uxr_object_id_to_raw>
 800d61e:	2300      	movs	r3, #0
 800d620:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800d624:	f89d 22ad 	ldrb.w	r2, [sp, #685]	@ 0x2ad
 800d628:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 800d62c:	3d00      	subs	r5, #0
 800d62e:	bf18      	it	ne
 800d630:	2501      	movne	r5, #1
 800d632:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800d636:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800d63a:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800d63e:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800d642:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800d646:	2301      	movs	r3, #1
 800d648:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800d64c:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800d650:	bb8a      	cbnz	r2, 800d6b6 <uxr_buffer_create_datareader_bin+0xca>
 800d652:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800d656:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800d65a:	f04f 0c13 	mov.w	ip, #19
 800d65e:	250b      	movs	r5, #11
 800d660:	2221      	movs	r2, #33	@ 0x21
 800d662:	2111      	movs	r1, #17
 800d664:	2009      	movs	r0, #9
 800d666:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 800d66a:	b923      	cbnz	r3, 800d676 <uxr_buffer_create_datareader_bin+0x8a>
 800d66c:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800d670:	4672      	mov	r2, lr
 800d672:	4661      	mov	r1, ip
 800d674:	4628      	mov	r0, r5
 800d676:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 800d67a:	2b01      	cmp	r3, #1
 800d67c:	d025      	beq.n	800d6ca <uxr_buffer_create_datareader_bin+0xde>
 800d67e:	2b03      	cmp	r3, #3
 800d680:	d029      	beq.n	800d6d6 <uxr_buffer_create_datareader_bin+0xea>
 800d682:	b32b      	cbz	r3, 800d6d0 <uxr_buffer_create_datareader_bin+0xe4>
 800d684:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d688:	a923      	add	r1, sp, #140	@ 0x8c
 800d68a:	a806      	add	r0, sp, #24
 800d68c:	f7ff fd5c 	bl	800d148 <ucdr_init_buffer>
 800d690:	a90e      	add	r1, sp, #56	@ 0x38
 800d692:	a806      	add	r0, sp, #24
 800d694:	f002 f974 	bl	800f980 <uxr_serialize_OBJK_DataReader_Binary>
 800d698:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d69a:	f8cd 8000 	str.w	r8, [sp]
 800d69e:	9401      	str	r4, [sp, #4]
 800d6a0:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800d6a4:	60e3      	str	r3, [r4, #12]
 800d6a6:	4630      	mov	r0, r6
 800d6a8:	b29b      	uxth	r3, r3
 800d6aa:	f7ff fe35 	bl	800d318 <uxr_common_create_entity>
 800d6ae:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800d6b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6b6:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800d6ba:	f04f 0c12 	mov.w	ip, #18
 800d6be:	250a      	movs	r5, #10
 800d6c0:	2220      	movs	r2, #32
 800d6c2:	2110      	movs	r1, #16
 800d6c4:	2008      	movs	r0, #8
 800d6c6:	2702      	movs	r7, #2
 800d6c8:	e7cd      	b.n	800d666 <uxr_buffer_create_datareader_bin+0x7a>
 800d6ca:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800d6ce:	e7d9      	b.n	800d684 <uxr_buffer_create_datareader_bin+0x98>
 800d6d0:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800d6d4:	e7d6      	b.n	800d684 <uxr_buffer_create_datareader_bin+0x98>
 800d6d6:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800d6da:	e7d3      	b.n	800d684 <uxr_buffer_create_datareader_bin+0x98>

0800d6dc <uxr_object_id>:
 800d6dc:	b082      	sub	sp, #8
 800d6de:	2300      	movs	r3, #0
 800d6e0:	f88d 1006 	strb.w	r1, [sp, #6]
 800d6e4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d6e8:	f360 030f 	bfi	r3, r0, #0, #16
 800d6ec:	f362 431f 	bfi	r3, r2, #16, #16
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	b002      	add	sp, #8
 800d6f4:	4770      	bx	lr
 800d6f6:	bf00      	nop

0800d6f8 <uxr_object_id_from_raw>:
 800d6f8:	7843      	ldrb	r3, [r0, #1]
 800d6fa:	7801      	ldrb	r1, [r0, #0]
 800d6fc:	b082      	sub	sp, #8
 800d6fe:	f003 020f 	and.w	r2, r3, #15
 800d702:	f88d 2006 	strb.w	r2, [sp, #6]
 800d706:	091b      	lsrs	r3, r3, #4
 800d708:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d70c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800d710:	2000      	movs	r0, #0
 800d712:	f363 000f 	bfi	r0, r3, #0, #16
 800d716:	f362 401f 	bfi	r0, r2, #16, #16
 800d71a:	b002      	add	sp, #8
 800d71c:	4770      	bx	lr
 800d71e:	bf00      	nop

0800d720 <uxr_object_id_to_raw>:
 800d720:	4602      	mov	r2, r0
 800d722:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800d726:	b082      	sub	sp, #8
 800d728:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800d72c:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800d730:	f881 c000 	strb.w	ip, [r1]
 800d734:	7048      	strb	r0, [r1, #1]
 800d736:	b002      	add	sp, #8
 800d738:	4770      	bx	lr
 800d73a:	bf00      	nop

0800d73c <uxr_buffer_request_data>:
 800d73c:	b530      	push	{r4, r5, lr}
 800d73e:	b095      	sub	sp, #84	@ 0x54
 800d740:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800d744:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 800d746:	9303      	str	r3, [sp, #12]
 800d748:	2200      	movs	r2, #0
 800d74a:	2d00      	cmp	r5, #0
 800d74c:	bf14      	ite	ne
 800d74e:	2101      	movne	r1, #1
 800d750:	4611      	moveq	r1, r2
 800d752:	4604      	mov	r4, r0
 800d754:	f88d 301c 	strb.w	r3, [sp, #28]
 800d758:	f88d 201d 	strb.w	r2, [sp, #29]
 800d75c:	f88d 201e 	strb.w	r2, [sp, #30]
 800d760:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 800d764:	d021      	beq.n	800d7aa <uxr_buffer_request_data+0x6e>
 800d766:	682a      	ldr	r2, [r5, #0]
 800d768:	686b      	ldr	r3, [r5, #4]
 800d76a:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 800d76e:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 800d772:	2210      	movs	r2, #16
 800d774:	2308      	movs	r3, #8
 800d776:	2100      	movs	r1, #0
 800d778:	e9cd 3100 	strd	r3, r1, [sp]
 800d77c:	4620      	mov	r0, r4
 800d77e:	9905      	ldr	r1, [sp, #20]
 800d780:	ab0c      	add	r3, sp, #48	@ 0x30
 800d782:	f001 f837 	bl	800e7f4 <uxr_prepare_stream_to_write_submessage>
 800d786:	b918      	cbnz	r0, 800d790 <uxr_buffer_request_data+0x54>
 800d788:	4604      	mov	r4, r0
 800d78a:	4620      	mov	r0, r4
 800d78c:	b015      	add	sp, #84	@ 0x54
 800d78e:	bd30      	pop	{r4, r5, pc}
 800d790:	9904      	ldr	r1, [sp, #16]
 800d792:	aa06      	add	r2, sp, #24
 800d794:	4620      	mov	r0, r4
 800d796:	f001 f963 	bl	800ea60 <uxr_init_base_object_request>
 800d79a:	a906      	add	r1, sp, #24
 800d79c:	4604      	mov	r4, r0
 800d79e:	a80c      	add	r0, sp, #48	@ 0x30
 800d7a0:	f002 fc5e 	bl	8010060 <uxr_serialize_READ_DATA_Payload>
 800d7a4:	4620      	mov	r0, r4
 800d7a6:	b015      	add	sp, #84	@ 0x54
 800d7a8:	bd30      	pop	{r4, r5, pc}
 800d7aa:	2208      	movs	r2, #8
 800d7ac:	e7e2      	b.n	800d774 <uxr_buffer_request_data+0x38>
 800d7ae:	bf00      	nop

0800d7b0 <uxr_buffer_cancel_data>:
 800d7b0:	b510      	push	{r4, lr}
 800d7b2:	b094      	sub	sp, #80	@ 0x50
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	9202      	str	r2, [sp, #8]
 800d7b8:	9205      	str	r2, [sp, #20]
 800d7ba:	9301      	str	r3, [sp, #4]
 800d7bc:	2201      	movs	r2, #1
 800d7be:	f8ad 301c 	strh.w	r3, [sp, #28]
 800d7c2:	f88d 301e 	strb.w	r3, [sp, #30]
 800d7c6:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 800d7ca:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 800d7ce:	2308      	movs	r3, #8
 800d7d0:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 800d7d4:	9300      	str	r3, [sp, #0]
 800d7d6:	2210      	movs	r2, #16
 800d7d8:	ab0c      	add	r3, sp, #48	@ 0x30
 800d7da:	4604      	mov	r4, r0
 800d7dc:	9103      	str	r1, [sp, #12]
 800d7de:	f001 f809 	bl	800e7f4 <uxr_prepare_stream_to_write_submessage>
 800d7e2:	b918      	cbnz	r0, 800d7ec <uxr_buffer_cancel_data+0x3c>
 800d7e4:	4604      	mov	r4, r0
 800d7e6:	4620      	mov	r0, r4
 800d7e8:	b014      	add	sp, #80	@ 0x50
 800d7ea:	bd10      	pop	{r4, pc}
 800d7ec:	9905      	ldr	r1, [sp, #20]
 800d7ee:	aa06      	add	r2, sp, #24
 800d7f0:	4620      	mov	r0, r4
 800d7f2:	f001 f935 	bl	800ea60 <uxr_init_base_object_request>
 800d7f6:	a906      	add	r1, sp, #24
 800d7f8:	4604      	mov	r4, r0
 800d7fa:	a80c      	add	r0, sp, #48	@ 0x30
 800d7fc:	f002 fc30 	bl	8010060 <uxr_serialize_READ_DATA_Payload>
 800d800:	4620      	mov	r0, r4
 800d802:	b014      	add	sp, #80	@ 0x50
 800d804:	bd10      	pop	{r4, pc}
 800d806:	bf00      	nop

0800d808 <read_submessage_format>:
 800d808:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d80c:	b095      	sub	sp, #84	@ 0x54
 800d80e:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 800d812:	b113      	cbz	r3, 800d81a <read_submessage_format+0x12>
 800d814:	b015      	add	sp, #84	@ 0x54
 800d816:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d81a:	460c      	mov	r4, r1
 800d81c:	4615      	mov	r5, r2
 800d81e:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800d822:	4607      	mov	r7, r0
 800d824:	981c      	ldr	r0, [sp, #112]	@ 0x70
 800d826:	9004      	str	r0, [sp, #16]
 800d828:	981d      	ldr	r0, [sp, #116]	@ 0x74
 800d82a:	9005      	str	r0, [sp, #20]
 800d82c:	1a52      	subs	r2, r2, r1
 800d82e:	a80c      	add	r0, sp, #48	@ 0x30
 800d830:	4699      	mov	r9, r3
 800d832:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 800d836:	f7ff fc87 	bl	800d148 <ucdr_init_buffer>
 800d83a:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800d83e:	a80c      	add	r0, sp, #48	@ 0x30
 800d840:	f7ff fc56 	bl	800d0f0 <ucdr_set_on_full_buffer_callback>
 800d844:	69e2      	ldr	r2, [r4, #28]
 800d846:	b19a      	cbz	r2, 800d870 <read_submessage_format+0x68>
 800d848:	f1b8 0f07 	cmp.w	r8, #7
 800d84c:	f882 9014 	strb.w	r9, [r2, #20]
 800d850:	d040      	beq.n	800d8d4 <read_submessage_format+0xcc>
 800d852:	f1b8 0f08 	cmp.w	r8, #8
 800d856:	d02e      	beq.n	800d8b6 <read_submessage_format+0xae>
 800d858:	f1b8 0f06 	cmp.w	r8, #6
 800d85c:	d011      	beq.n	800d882 <read_submessage_format+0x7a>
 800d85e:	2301      	movs	r3, #1
 800d860:	7513      	strb	r3, [r2, #20]
 800d862:	4629      	mov	r1, r5
 800d864:	4620      	mov	r0, r4
 800d866:	f7ff fcbf 	bl	800d1e8 <ucdr_advance_buffer>
 800d86a:	b015      	add	sp, #84	@ 0x54
 800d86c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d870:	f1b8 0f07 	cmp.w	r8, #7
 800d874:	d02e      	beq.n	800d8d4 <read_submessage_format+0xcc>
 800d876:	f1b8 0f08 	cmp.w	r8, #8
 800d87a:	d01c      	beq.n	800d8b6 <read_submessage_format+0xae>
 800d87c:	f1b8 0f06 	cmp.w	r8, #6
 800d880:	d1ef      	bne.n	800d862 <read_submessage_format+0x5a>
 800d882:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 800d886:	f1b8 0f00 	cmp.w	r8, #0
 800d88a:	d011      	beq.n	800d8b0 <read_submessage_format+0xa8>
 800d88c:	ab0c      	add	r3, sp, #48	@ 0x30
 800d88e:	e9cd 3500 	strd	r3, r5, [sp]
 800d892:	2306      	movs	r3, #6
 800d894:	f88d 3016 	strb.w	r3, [sp, #22]
 800d898:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d89c:	9302      	str	r3, [sp, #8]
 800d89e:	4632      	mov	r2, r6
 800d8a0:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 800d8a4:	4638      	mov	r0, r7
 800d8a6:	47c0      	blx	r8
 800d8a8:	2301      	movs	r3, #1
 800d8aa:	69e2      	ldr	r2, [r4, #28]
 800d8ac:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800d8b0:	2a00      	cmp	r2, #0
 800d8b2:	d1d4      	bne.n	800d85e <read_submessage_format+0x56>
 800d8b4:	e7d5      	b.n	800d862 <read_submessage_format+0x5a>
 800d8b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d0f8      	beq.n	800d8b0 <read_submessage_format+0xa8>
 800d8be:	a906      	add	r1, sp, #24
 800d8c0:	a80c      	add	r0, sp, #48	@ 0x30
 800d8c2:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800d8c6:	f002 fc91 	bl	80101ec <uxr_deserialize_SampleIdentity>
 800d8ca:	b9a0      	cbnz	r0, 800d8f6 <read_submessage_format+0xee>
 800d8cc:	69e2      	ldr	r2, [r4, #28]
 800d8ce:	2a00      	cmp	r2, #0
 800d8d0:	d1c5      	bne.n	800d85e <read_submessage_format+0x56>
 800d8d2:	e7c6      	b.n	800d862 <read_submessage_format+0x5a>
 800d8d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d8d8:	b13b      	cbz	r3, 800d8ea <read_submessage_format+0xe2>
 800d8da:	a906      	add	r1, sp, #24
 800d8dc:	a80c      	add	r0, sp, #48	@ 0x30
 800d8de:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800d8e2:	f002 f957 	bl	800fb94 <uxr_deserialize_BaseObjectRequest>
 800d8e6:	bb60      	cbnz	r0, 800d942 <read_submessage_format+0x13a>
 800d8e8:	69e2      	ldr	r2, [r4, #28]
 800d8ea:	68a3      	ldr	r3, [r4, #8]
 800d8ec:	442b      	add	r3, r5
 800d8ee:	60a3      	str	r3, [r4, #8]
 800d8f0:	2a00      	cmp	r2, #0
 800d8f2:	d1b4      	bne.n	800d85e <read_submessage_format+0x56>
 800d8f4:	e7b5      	b.n	800d862 <read_submessage_format+0x5a>
 800d8f6:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800d8fa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d8fc:	1a52      	subs	r2, r2, r1
 800d8fe:	eba8 0803 	sub.w	r8, r8, r3
 800d902:	a80c      	add	r0, sp, #48	@ 0x30
 800d904:	f7ff fc20 	bl	800d148 <ucdr_init_buffer>
 800d908:	44a8      	add	r8, r5
 800d90a:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800d90e:	a80c      	add	r0, sp, #48	@ 0x30
 800d910:	f7ff fbee 	bl	800d0f0 <ucdr_set_on_full_buffer_callback>
 800d914:	fa1f f888 	uxth.w	r8, r8
 800d918:	ab0c      	add	r3, sp, #48	@ 0x30
 800d91a:	9300      	str	r3, [sp, #0]
 800d91c:	f8cd 8004 	str.w	r8, [sp, #4]
 800d920:	2108      	movs	r1, #8
 800d922:	f88d 1016 	strb.w	r1, [sp, #22]
 800d926:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 800d92a:	9102      	str	r1, [sp, #8]
 800d92c:	ab06      	add	r3, sp, #24
 800d92e:	4632      	mov	r2, r6
 800d930:	9905      	ldr	r1, [sp, #20]
 800d932:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 800d936:	4638      	mov	r0, r7
 800d938:	47b0      	blx	r6
 800d93a:	2301      	movs	r3, #1
 800d93c:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800d940:	e7c4      	b.n	800d8cc <read_submessage_format+0xc4>
 800d942:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800d946:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d948:	1a52      	subs	r2, r2, r1
 800d94a:	a80c      	add	r0, sp, #48	@ 0x30
 800d94c:	eba8 0803 	sub.w	r8, r8, r3
 800d950:	f7ff fbfa 	bl	800d148 <ucdr_init_buffer>
 800d954:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800d958:	a80c      	add	r0, sp, #48	@ 0x30
 800d95a:	f7ff fbc9 	bl	800d0f0 <ucdr_set_on_full_buffer_callback>
 800d95e:	ab0c      	add	r3, sp, #48	@ 0x30
 800d960:	9300      	str	r3, [sp, #0]
 800d962:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800d966:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800d96a:	44a8      	add	r8, r5
 800d96c:	fa1f f888 	uxth.w	r8, r8
 800d970:	f8cd 8004 	str.w	r8, [sp, #4]
 800d974:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800d978:	2107      	movs	r1, #7
 800d97a:	f88d 1016 	strb.w	r1, [sp, #22]
 800d97e:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 800d982:	9102      	str	r1, [sp, #8]
 800d984:	4632      	mov	r2, r6
 800d986:	b29b      	uxth	r3, r3
 800d988:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 800d98c:	9905      	ldr	r1, [sp, #20]
 800d98e:	4638      	mov	r0, r7
 800d990:	47b0      	blx	r6
 800d992:	2301      	movs	r3, #1
 800d994:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800d998:	e7a6      	b.n	800d8e8 <read_submessage_format+0xe0>
 800d99a:	bf00      	nop

0800d99c <on_get_fragmentation_info>:
 800d99c:	b500      	push	{lr}
 800d99e:	b08b      	sub	sp, #44	@ 0x2c
 800d9a0:	4601      	mov	r1, r0
 800d9a2:	2204      	movs	r2, #4
 800d9a4:	a802      	add	r0, sp, #8
 800d9a6:	f7ff fbcf 	bl	800d148 <ucdr_init_buffer>
 800d9aa:	f10d 0305 	add.w	r3, sp, #5
 800d9ae:	f10d 0206 	add.w	r2, sp, #6
 800d9b2:	a901      	add	r1, sp, #4
 800d9b4:	a802      	add	r0, sp, #8
 800d9b6:	f001 f9d5 	bl	800ed64 <uxr_read_submessage_header>
 800d9ba:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d9be:	2b0d      	cmp	r3, #13
 800d9c0:	d003      	beq.n	800d9ca <on_get_fragmentation_info+0x2e>
 800d9c2:	2000      	movs	r0, #0
 800d9c4:	b00b      	add	sp, #44	@ 0x2c
 800d9c6:	f85d fb04 	ldr.w	pc, [sp], #4
 800d9ca:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d9ce:	f013 0f02 	tst.w	r3, #2
 800d9d2:	bf14      	ite	ne
 800d9d4:	2002      	movne	r0, #2
 800d9d6:	2001      	moveq	r0, #1
 800d9d8:	b00b      	add	sp, #44	@ 0x2c
 800d9da:	f85d fb04 	ldr.w	pc, [sp], #4
 800d9de:	bf00      	nop

0800d9e0 <read_submessage_get_info>:
 800d9e0:	b570      	push	{r4, r5, r6, lr}
 800d9e2:	2500      	movs	r5, #0
 800d9e4:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 800d9e8:	4604      	mov	r4, r0
 800d9ea:	f44f 7224 	mov.w	r2, #656	@ 0x290
 800d9ee:	460e      	mov	r6, r1
 800d9f0:	a810      	add	r0, sp, #64	@ 0x40
 800d9f2:	4629      	mov	r1, r5
 800d9f4:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800d9f8:	f00a f9ee 	bl	8017dd8 <memset>
 800d9fc:	a903      	add	r1, sp, #12
 800d9fe:	4630      	mov	r0, r6
 800da00:	f002 fa70 	bl	800fee4 <uxr_deserialize_GET_INFO_Payload>
 800da04:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800da08:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800da0c:	4620      	mov	r0, r4
 800da0e:	f001 f81f 	bl	800ea50 <uxr_session_header_offset>
 800da12:	462b      	mov	r3, r5
 800da14:	9000      	str	r0, [sp, #0]
 800da16:	220c      	movs	r2, #12
 800da18:	a905      	add	r1, sp, #20
 800da1a:	a808      	add	r0, sp, #32
 800da1c:	f7ff fb82 	bl	800d124 <ucdr_init_buffer_origin_offset>
 800da20:	a910      	add	r1, sp, #64	@ 0x40
 800da22:	a808      	add	r0, sp, #32
 800da24:	f002 fad0 	bl	800ffc8 <uxr_serialize_INFO_Payload>
 800da28:	9b08      	ldr	r3, [sp, #32]
 800da2a:	462a      	mov	r2, r5
 800da2c:	4629      	mov	r1, r5
 800da2e:	4620      	mov	r0, r4
 800da30:	f000 ffb8 	bl	800e9a4 <uxr_stamp_session_header>
 800da34:	a808      	add	r0, sp, #32
 800da36:	f7ff fbb3 	bl	800d1a0 <ucdr_buffer_length>
 800da3a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800da3c:	4602      	mov	r2, r0
 800da3e:	a905      	add	r1, sp, #20
 800da40:	e9d3 0400 	ldrd	r0, r4, [r3]
 800da44:	47a0      	blx	r4
 800da46:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 800da4a:	bd70      	pop	{r4, r5, r6, pc}

0800da4c <write_submessage_acknack.isra.0>:
 800da4c:	b570      	push	{r4, r5, r6, lr}
 800da4e:	b092      	sub	sp, #72	@ 0x48
 800da50:	4605      	mov	r5, r0
 800da52:	460e      	mov	r6, r1
 800da54:	4614      	mov	r4, r2
 800da56:	f000 fffb 	bl	800ea50 <uxr_session_header_offset>
 800da5a:	a905      	add	r1, sp, #20
 800da5c:	9000      	str	r0, [sp, #0]
 800da5e:	2300      	movs	r3, #0
 800da60:	a80a      	add	r0, sp, #40	@ 0x28
 800da62:	2211      	movs	r2, #17
 800da64:	f7ff fb5e 	bl	800d124 <ucdr_init_buffer_origin_offset>
 800da68:	2218      	movs	r2, #24
 800da6a:	fb02 5404 	mla	r4, r2, r4, r5
 800da6e:	2300      	movs	r3, #0
 800da70:	2205      	movs	r2, #5
 800da72:	3450      	adds	r4, #80	@ 0x50
 800da74:	210a      	movs	r1, #10
 800da76:	a80a      	add	r0, sp, #40	@ 0x28
 800da78:	f001 f95a 	bl	800ed30 <uxr_buffer_submessage_header>
 800da7c:	a903      	add	r1, sp, #12
 800da7e:	4620      	mov	r0, r4
 800da80:	f007 fc40 	bl	8015304 <uxr_compute_acknack>
 800da84:	ba40      	rev16	r0, r0
 800da86:	f8ad 000e 	strh.w	r0, [sp, #14]
 800da8a:	a903      	add	r1, sp, #12
 800da8c:	a80a      	add	r0, sp, #40	@ 0x28
 800da8e:	f88d 6010 	strb.w	r6, [sp, #16]
 800da92:	f002 fb09 	bl	80100a8 <uxr_serialize_ACKNACK_Payload>
 800da96:	2200      	movs	r2, #0
 800da98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800da9a:	4611      	mov	r1, r2
 800da9c:	4628      	mov	r0, r5
 800da9e:	f000 ff81 	bl	800e9a4 <uxr_stamp_session_header>
 800daa2:	a80a      	add	r0, sp, #40	@ 0x28
 800daa4:	f7ff fb7c 	bl	800d1a0 <ucdr_buffer_length>
 800daa8:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800daaa:	4602      	mov	r2, r0
 800daac:	a905      	add	r1, sp, #20
 800daae:	e9d3 0400 	ldrd	r0, r4, [r3]
 800dab2:	47a0      	blx	r4
 800dab4:	b012      	add	sp, #72	@ 0x48
 800dab6:	bd70      	pop	{r4, r5, r6, pc}

0800dab8 <uxr_init_session>:
 800dab8:	b510      	push	{r4, lr}
 800daba:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800daf0 <uxr_init_session+0x38>
 800dabe:	2300      	movs	r3, #0
 800dac0:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 800dac4:	4604      	mov	r4, r0
 800dac6:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 800daca:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 800dace:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 800dad2:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 800dad6:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 800dada:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 800dade:	2181      	movs	r1, #129	@ 0x81
 800dae0:	f000 fecc 	bl	800e87c <uxr_init_session_info>
 800dae4:	f104 0008 	add.w	r0, r4, #8
 800dae8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800daec:	f001 b83c 	b.w	800eb68 <uxr_init_stream_storage>
	...

0800daf8 <uxr_set_status_callback>:
 800daf8:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 800dafc:	4770      	bx	lr
 800dafe:	bf00      	nop

0800db00 <uxr_set_topic_callback>:
 800db00:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 800db04:	4770      	bx	lr
 800db06:	bf00      	nop

0800db08 <uxr_set_request_callback>:
 800db08:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 800db0c:	4770      	bx	lr
 800db0e:	bf00      	nop

0800db10 <uxr_set_reply_callback>:
 800db10:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 800db14:	4770      	bx	lr
 800db16:	bf00      	nop

0800db18 <uxr_create_output_best_effort_stream>:
 800db18:	b510      	push	{r4, lr}
 800db1a:	b084      	sub	sp, #16
 800db1c:	e9cd 2100 	strd	r2, r1, [sp]
 800db20:	4604      	mov	r4, r0
 800db22:	f000 ff95 	bl	800ea50 <uxr_session_header_offset>
 800db26:	e9dd 2100 	ldrd	r2, r1, [sp]
 800db2a:	4603      	mov	r3, r0
 800db2c:	f104 0008 	add.w	r0, r4, #8
 800db30:	b004      	add	sp, #16
 800db32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800db36:	f001 b861 	b.w	800ebfc <uxr_add_output_best_effort_buffer>
 800db3a:	bf00      	nop

0800db3c <uxr_create_output_reliable_stream>:
 800db3c:	b510      	push	{r4, lr}
 800db3e:	b088      	sub	sp, #32
 800db40:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800db44:	4604      	mov	r4, r0
 800db46:	9303      	str	r3, [sp, #12]
 800db48:	f000 ff82 	bl	800ea50 <uxr_session_header_offset>
 800db4c:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800db50:	9000      	str	r0, [sp, #0]
 800db52:	9905      	ldr	r1, [sp, #20]
 800db54:	f104 0008 	add.w	r0, r4, #8
 800db58:	f001 f864 	bl	800ec24 <uxr_add_output_reliable_buffer>
 800db5c:	2200      	movs	r2, #0
 800db5e:	b2c3      	uxtb	r3, r0
 800db60:	f363 0207 	bfi	r2, r3, #0, #8
 800db64:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800db68:	f363 220f 	bfi	r2, r3, #8, #8
 800db6c:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800db70:	f363 4217 	bfi	r2, r3, #16, #8
 800db74:	0e03      	lsrs	r3, r0, #24
 800db76:	f363 621f 	bfi	r2, r3, #24, #8
 800db7a:	4610      	mov	r0, r2
 800db7c:	b008      	add	sp, #32
 800db7e:	bd10      	pop	{r4, pc}

0800db80 <uxr_create_input_best_effort_stream>:
 800db80:	b082      	sub	sp, #8
 800db82:	3008      	adds	r0, #8
 800db84:	b002      	add	sp, #8
 800db86:	f001 b867 	b.w	800ec58 <uxr_add_input_best_effort_buffer>
 800db8a:	bf00      	nop

0800db8c <uxr_create_input_reliable_stream>:
 800db8c:	b510      	push	{r4, lr}
 800db8e:	b084      	sub	sp, #16
 800db90:	4c0b      	ldr	r4, [pc, #44]	@ (800dbc0 <uxr_create_input_reliable_stream+0x34>)
 800db92:	9400      	str	r4, [sp, #0]
 800db94:	3008      	adds	r0, #8
 800db96:	f001 f875 	bl	800ec84 <uxr_add_input_reliable_buffer>
 800db9a:	2200      	movs	r2, #0
 800db9c:	b2c3      	uxtb	r3, r0
 800db9e:	f363 0207 	bfi	r2, r3, #0, #8
 800dba2:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800dba6:	f363 220f 	bfi	r2, r3, #8, #8
 800dbaa:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800dbae:	f363 4217 	bfi	r2, r3, #16, #8
 800dbb2:	0e03      	lsrs	r3, r0, #24
 800dbb4:	f363 621f 	bfi	r2, r3, #24, #8
 800dbb8:	4610      	mov	r0, r2
 800dbba:	b004      	add	sp, #16
 800dbbc:	bd10      	pop	{r4, pc}
 800dbbe:	bf00      	nop
 800dbc0:	0800d99d 	.word	0x0800d99d

0800dbc4 <uxr_epoch_nanos>:
 800dbc4:	b510      	push	{r4, lr}
 800dbc6:	4604      	mov	r4, r0
 800dbc8:	f001 f912 	bl	800edf0 <uxr_nanos>
 800dbcc:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 800dbd0:	1ac0      	subs	r0, r0, r3
 800dbd2:	eb61 0102 	sbc.w	r1, r1, r2
 800dbd6:	bd10      	pop	{r4, pc}

0800dbd8 <uxr_flash_output_streams>:
 800dbd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dbdc:	7e03      	ldrb	r3, [r0, #24]
 800dbde:	b084      	sub	sp, #16
 800dbe0:	4604      	mov	r4, r0
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d035      	beq.n	800dc52 <uxr_flash_output_streams+0x7a>
 800dbe6:	f04f 0900 	mov.w	r9, #0
 800dbea:	4648      	mov	r0, r9
 800dbec:	f10d 0802 	add.w	r8, sp, #2
 800dbf0:	af03      	add	r7, sp, #12
 800dbf2:	ae02      	add	r6, sp, #8
 800dbf4:	e006      	b.n	800dc04 <uxr_flash_output_streams+0x2c>
 800dbf6:	7e23      	ldrb	r3, [r4, #24]
 800dbf8:	f109 0901 	add.w	r9, r9, #1
 800dbfc:	fa5f f089 	uxtb.w	r0, r9
 800dc00:	4283      	cmp	r3, r0
 800dc02:	d926      	bls.n	800dc52 <uxr_flash_output_streams+0x7a>
 800dc04:	2201      	movs	r2, #1
 800dc06:	4611      	mov	r1, r2
 800dc08:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800dc0c:	f000 ff58 	bl	800eac0 <uxr_stream_id>
 800dc10:	3508      	adds	r5, #8
 800dc12:	4684      	mov	ip, r0
 800dc14:	4643      	mov	r3, r8
 800dc16:	463a      	mov	r2, r7
 800dc18:	4631      	mov	r1, r6
 800dc1a:	4628      	mov	r0, r5
 800dc1c:	f8cd c004 	str.w	ip, [sp, #4]
 800dc20:	f007 fbf6 	bl	8015410 <uxr_prepare_best_effort_buffer_to_send>
 800dc24:	2800      	cmp	r0, #0
 800dc26:	d0e6      	beq.n	800dbf6 <uxr_flash_output_streams+0x1e>
 800dc28:	9b02      	ldr	r3, [sp, #8]
 800dc2a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800dc2e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800dc32:	4620      	mov	r0, r4
 800dc34:	f000 feb6 	bl	800e9a4 <uxr_stamp_session_header>
 800dc38:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800dc3a:	9a03      	ldr	r2, [sp, #12]
 800dc3c:	685d      	ldr	r5, [r3, #4]
 800dc3e:	6818      	ldr	r0, [r3, #0]
 800dc40:	9902      	ldr	r1, [sp, #8]
 800dc42:	47a8      	blx	r5
 800dc44:	f109 0901 	add.w	r9, r9, #1
 800dc48:	7e23      	ldrb	r3, [r4, #24]
 800dc4a:	fa5f f089 	uxtb.w	r0, r9
 800dc4e:	4283      	cmp	r3, r0
 800dc50:	d8d8      	bhi.n	800dc04 <uxr_flash_output_streams+0x2c>
 800dc52:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800dc56:	b38b      	cbz	r3, 800dcbc <uxr_flash_output_streams+0xe4>
 800dc58:	f04f 0900 	mov.w	r9, #0
 800dc5c:	f10d 0802 	add.w	r8, sp, #2
 800dc60:	af03      	add	r7, sp, #12
 800dc62:	ae02      	add	r6, sp, #8
 800dc64:	4648      	mov	r0, r9
 800dc66:	2201      	movs	r2, #1
 800dc68:	2102      	movs	r1, #2
 800dc6a:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800dc6e:	f000 ff27 	bl	800eac0 <uxr_stream_id>
 800dc72:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800dc76:	3520      	adds	r5, #32
 800dc78:	9001      	str	r0, [sp, #4]
 800dc7a:	e00d      	b.n	800dc98 <uxr_flash_output_streams+0xc0>
 800dc7c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800dc80:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800dc84:	9b02      	ldr	r3, [sp, #8]
 800dc86:	f000 fe8d 	bl	800e9a4 <uxr_stamp_session_header>
 800dc8a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800dc8c:	9a03      	ldr	r2, [sp, #12]
 800dc8e:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800dc92:	9902      	ldr	r1, [sp, #8]
 800dc94:	6818      	ldr	r0, [r3, #0]
 800dc96:	47d0      	blx	sl
 800dc98:	4643      	mov	r3, r8
 800dc9a:	463a      	mov	r2, r7
 800dc9c:	4631      	mov	r1, r6
 800dc9e:	4628      	mov	r0, r5
 800dca0:	f007 fdd4 	bl	801584c <uxr_prepare_next_reliable_buffer_to_send>
 800dca4:	4603      	mov	r3, r0
 800dca6:	4620      	mov	r0, r4
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d1e7      	bne.n	800dc7c <uxr_flash_output_streams+0xa4>
 800dcac:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800dcb0:	f109 0901 	add.w	r9, r9, #1
 800dcb4:	fa5f f089 	uxtb.w	r0, r9
 800dcb8:	4283      	cmp	r3, r0
 800dcba:	d8d4      	bhi.n	800dc66 <uxr_flash_output_streams+0x8e>
 800dcbc:	b004      	add	sp, #16
 800dcbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dcc2:	bf00      	nop

0800dcc4 <read_submessage_info>:
 800dcc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcc8:	460d      	mov	r5, r1
 800dcca:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800dcce:	4669      	mov	r1, sp
 800dcd0:	4607      	mov	r7, r0
 800dcd2:	4628      	mov	r0, r5
 800dcd4:	f002 f814 	bl	800fd00 <uxr_deserialize_BaseObjectReply>
 800dcd8:	a902      	add	r1, sp, #8
 800dcda:	4604      	mov	r4, r0
 800dcdc:	4628      	mov	r0, r5
 800dcde:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800dce2:	f006 f923 	bl	8013f2c <ucdr_deserialize_bool>
 800dce6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800dcea:	4004      	ands	r4, r0
 800dcec:	b2e4      	uxtb	r4, r4
 800dcee:	b95b      	cbnz	r3, 800dd08 <read_submessage_info+0x44>
 800dcf0:	a987      	add	r1, sp, #540	@ 0x21c
 800dcf2:	4628      	mov	r0, r5
 800dcf4:	f006 f91a 	bl	8013f2c <ucdr_deserialize_bool>
 800dcf8:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 800dcfc:	4606      	mov	r6, r0
 800dcfe:	b94b      	cbnz	r3, 800dd14 <read_submessage_info+0x50>
 800dd00:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800dd04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd08:	a903      	add	r1, sp, #12
 800dd0a:	4628      	mov	r0, r5
 800dd0c:	f001 fea0 	bl	800fa50 <uxr_deserialize_ObjectVariant>
 800dd10:	4004      	ands	r4, r0
 800dd12:	e7ed      	b.n	800dcf0 <read_submessage_info+0x2c>
 800dd14:	a988      	add	r1, sp, #544	@ 0x220
 800dd16:	4628      	mov	r0, r5
 800dd18:	f006 f936 	bl	8013f88 <ucdr_deserialize_uint8_t>
 800dd1c:	4234      	tst	r4, r6
 800dd1e:	d0ef      	beq.n	800dd00 <read_submessage_info+0x3c>
 800dd20:	2800      	cmp	r0, #0
 800dd22:	d0ed      	beq.n	800dd00 <read_submessage_info+0x3c>
 800dd24:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 800dd28:	2b0d      	cmp	r3, #13
 800dd2a:	d1e9      	bne.n	800dd00 <read_submessage_info+0x3c>
 800dd2c:	a98a      	add	r1, sp, #552	@ 0x228
 800dd2e:	4628      	mov	r0, r5
 800dd30:	f006 fed0 	bl	8014ad4 <ucdr_deserialize_int16_t>
 800dd34:	b140      	cbz	r0, 800dd48 <read_submessage_info+0x84>
 800dd36:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	dd07      	ble.n	800dd4e <read_submessage_info+0x8a>
 800dd3e:	f1b8 0f00 	cmp.w	r8, #0
 800dd42:	bf14      	ite	ne
 800dd44:	2001      	movne	r0, #1
 800dd46:	2002      	moveq	r0, #2
 800dd48:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 800dd4c:	e7d8      	b.n	800dd00 <read_submessage_info+0x3c>
 800dd4e:	2000      	movs	r0, #0
 800dd50:	e7fa      	b.n	800dd48 <read_submessage_info+0x84>
 800dd52:	bf00      	nop

0800dd54 <read_submessage_list>:
 800dd54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd58:	b097      	sub	sp, #92	@ 0x5c
 800dd5a:	4ec1      	ldr	r6, [pc, #772]	@ (800e060 <read_submessage_list+0x30c>)
 800dd5c:	9209      	str	r2, [sp, #36]	@ 0x24
 800dd5e:	4604      	mov	r4, r0
 800dd60:	460d      	mov	r5, r1
 800dd62:	f04f 0801 	mov.w	r8, #1
 800dd66:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 800dd6a:	aa0c      	add	r2, sp, #48	@ 0x30
 800dd6c:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 800dd70:	4628      	mov	r0, r5
 800dd72:	f000 fff7 	bl	800ed64 <uxr_read_submessage_header>
 800dd76:	2800      	cmp	r0, #0
 800dd78:	f000 813e 	beq.w	800dff8 <read_submessage_list+0x2a4>
 800dd7c:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 800dd80:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 800dd84:	3b02      	subs	r3, #2
 800dd86:	2b0d      	cmp	r3, #13
 800dd88:	d8ed      	bhi.n	800dd66 <read_submessage_list+0x12>
 800dd8a:	a101      	add	r1, pc, #4	@ (adr r1, 800dd90 <read_submessage_list+0x3c>)
 800dd8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dd90:	0800dfef 	.word	0x0800dfef
 800dd94:	0800dd67 	.word	0x0800dd67
 800dd98:	0800dfdf 	.word	0x0800dfdf
 800dd9c:	0800df7d 	.word	0x0800df7d
 800dda0:	0800df73 	.word	0x0800df73
 800dda4:	0800dd67 	.word	0x0800dd67
 800dda8:	0800dd67 	.word	0x0800dd67
 800ddac:	0800ded3 	.word	0x0800ded3
 800ddb0:	0800de63 	.word	0x0800de63
 800ddb4:	0800de23 	.word	0x0800de23
 800ddb8:	0800dd67 	.word	0x0800dd67
 800ddbc:	0800dd67 	.word	0x0800dd67
 800ddc0:	0800dd67 	.word	0x0800dd67
 800ddc4:	0800ddc9 	.word	0x0800ddc9
 800ddc8:	a910      	add	r1, sp, #64	@ 0x40
 800ddca:	4628      	mov	r0, r5
 800ddcc:	f002 f9bc 	bl	8010148 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800ddd0:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 800ddd4:	f1b9 0f00 	cmp.w	r9, #0
 800ddd8:	f000 8116 	beq.w	800e008 <read_submessage_list+0x2b4>
 800dddc:	f001 f808 	bl	800edf0 <uxr_nanos>
 800dde0:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800dde2:	4602      	mov	r2, r0
 800dde4:	460b      	mov	r3, r1
 800dde6:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800dde8:	2100      	movs	r1, #0
 800ddea:	468c      	mov	ip, r1
 800ddec:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800ddf0:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 800ddf4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800ddf6:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 800ddf8:	468c      	mov	ip, r1
 800ddfa:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800ddfe:	46e2      	mov	sl, ip
 800de00:	46bc      	mov	ip, r7
 800de02:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 800de06:	fbc0 7106 	smlal	r7, r1, r0, r6
 800de0a:	e9cd ca02 	strd	ip, sl, [sp, #8]
 800de0e:	e9cd 7100 	strd	r7, r1, [sp]
 800de12:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800de16:	9106      	str	r1, [sp, #24]
 800de18:	4620      	mov	r0, r4
 800de1a:	47c8      	blx	r9
 800de1c:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 800de20:	e7a1      	b.n	800dd66 <read_submessage_list+0x12>
 800de22:	a910      	add	r1, sp, #64	@ 0x40
 800de24:	4628      	mov	r0, r5
 800de26:	f002 f97d 	bl	8010124 <uxr_deserialize_HEARTBEAT_Payload>
 800de2a:	2100      	movs	r1, #0
 800de2c:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800de30:	f000 fe70 	bl	800eb14 <uxr_stream_id_from_raw>
 800de34:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800de38:	900f      	str	r0, [sp, #60]	@ 0x3c
 800de3a:	4639      	mov	r1, r7
 800de3c:	f104 0008 	add.w	r0, r4, #8
 800de40:	f000 ff56 	bl	800ecf0 <uxr_get_input_reliable_stream>
 800de44:	2800      	cmp	r0, #0
 800de46:	d08e      	beq.n	800dd66 <read_submessage_list+0x12>
 800de48:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 800de4c:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 800de50:	f007 fa4c 	bl	80152ec <uxr_process_heartbeat>
 800de54:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 800de58:	463a      	mov	r2, r7
 800de5a:	4620      	mov	r0, r4
 800de5c:	f7ff fdf6 	bl	800da4c <write_submessage_acknack.isra.0>
 800de60:	e781      	b.n	800dd66 <read_submessage_list+0x12>
 800de62:	a910      	add	r1, sp, #64	@ 0x40
 800de64:	4628      	mov	r0, r5
 800de66:	f002 f935 	bl	80100d4 <uxr_deserialize_ACKNACK_Payload>
 800de6a:	2100      	movs	r1, #0
 800de6c:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800de70:	f000 fe50 	bl	800eb14 <uxr_stream_id_from_raw>
 800de74:	900d      	str	r0, [sp, #52]	@ 0x34
 800de76:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800de7a:	f104 0008 	add.w	r0, r4, #8
 800de7e:	f000 ff23 	bl	800ecc8 <uxr_get_output_reliable_stream>
 800de82:	4607      	mov	r7, r0
 800de84:	2800      	cmp	r0, #0
 800de86:	f43f af6e 	beq.w	800dd66 <read_submessage_list+0x12>
 800de8a:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 800de8e:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 800de92:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800de96:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800de9a:	b289      	uxth	r1, r1
 800de9c:	f007 fd80 	bl	80159a0 <uxr_process_acknack>
 800dea0:	4638      	mov	r0, r7
 800dea2:	f007 fd3d 	bl	8015920 <uxr_begin_output_nack_buffer_it>
 800dea6:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800deaa:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 800deae:	e006      	b.n	800debe <read_submessage_list+0x16a>
 800deb0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800deb2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800deb4:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800deb8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800deba:	6818      	ldr	r0, [r3, #0]
 800debc:	47c8      	blx	r9
 800debe:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 800dec2:	aa0f      	add	r2, sp, #60	@ 0x3c
 800dec4:	4651      	mov	r1, sl
 800dec6:	4638      	mov	r0, r7
 800dec8:	f007 fd2c 	bl	8015924 <uxr_next_reliable_nack_buffer_to_send>
 800decc:	2800      	cmp	r0, #0
 800dece:	d1ef      	bne.n	800deb0 <read_submessage_list+0x15c>
 800ded0:	e749      	b.n	800dd66 <read_submessage_list+0x12>
 800ded2:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 800ded6:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 800deda:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800dede:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 800dee2:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 800dee6:	4651      	mov	r1, sl
 800dee8:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800deec:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 800def0:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 800def4:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 800def8:	4628      	mov	r0, r5
 800defa:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 800defe:	f001 fe49 	bl	800fb94 <uxr_deserialize_BaseObjectRequest>
 800df02:	4650      	mov	r0, sl
 800df04:	a90f      	add	r1, sp, #60	@ 0x3c
 800df06:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 800df0a:	f000 fdc7 	bl	800ea9c <uxr_parse_base_object_request>
 800df0e:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 800df12:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800df14:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 800df18:	9110      	str	r1, [sp, #64]	@ 0x40
 800df1a:	3f04      	subs	r7, #4
 800df1c:	f009 090e 	and.w	r9, r9, #14
 800df20:	b2bf      	uxth	r7, r7
 800df22:	f1bb 0f00 	cmp.w	fp, #0
 800df26:	d006      	beq.n	800df36 <read_submessage_list+0x1e2>
 800df28:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800df2c:	9300      	str	r3, [sp, #0]
 800df2e:	4652      	mov	r2, sl
 800df30:	2300      	movs	r3, #0
 800df32:	4620      	mov	r0, r4
 800df34:	47d8      	blx	fp
 800df36:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800df38:	b16a      	cbz	r2, 800df56 <read_submessage_list+0x202>
 800df3a:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800df3c:	2100      	movs	r1, #0
 800df3e:	3802      	subs	r0, #2
 800df40:	e002      	b.n	800df48 <read_submessage_list+0x1f4>
 800df42:	3101      	adds	r1, #1
 800df44:	4291      	cmp	r1, r2
 800df46:	d006      	beq.n	800df56 <read_submessage_list+0x202>
 800df48:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800df4c:	4553      	cmp	r3, sl
 800df4e:	d1f8      	bne.n	800df42 <read_submessage_list+0x1ee>
 800df50:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800df52:	2200      	movs	r2, #0
 800df54:	545a      	strb	r2, [r3, r1]
 800df56:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 800df5a:	9102      	str	r1, [sp, #8]
 800df5c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800df5e:	9101      	str	r1, [sp, #4]
 800df60:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800df62:	9100      	str	r1, [sp, #0]
 800df64:	464b      	mov	r3, r9
 800df66:	463a      	mov	r2, r7
 800df68:	4629      	mov	r1, r5
 800df6a:	4620      	mov	r0, r4
 800df6c:	f7ff fc4c 	bl	800d808 <read_submessage_format>
 800df70:	e6f9      	b.n	800dd66 <read_submessage_list+0x12>
 800df72:	4629      	mov	r1, r5
 800df74:	4620      	mov	r0, r4
 800df76:	f7ff fea5 	bl	800dcc4 <read_submessage_info>
 800df7a:	e6f4      	b.n	800dd66 <read_submessage_list+0x12>
 800df7c:	2a00      	cmp	r2, #0
 800df7e:	d03e      	beq.n	800dffe <read_submessage_list+0x2aa>
 800df80:	a910      	add	r1, sp, #64	@ 0x40
 800df82:	4628      	mov	r0, r5
 800df84:	f002 f802 	bl	800ff8c <uxr_deserialize_STATUS_Payload>
 800df88:	a90e      	add	r1, sp, #56	@ 0x38
 800df8a:	aa0d      	add	r2, sp, #52	@ 0x34
 800df8c:	a810      	add	r0, sp, #64	@ 0x40
 800df8e:	f000 fd85 	bl	800ea9c <uxr_parse_base_object_request>
 800df92:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 800df96:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800df98:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 800df9c:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 800dfa0:	910f      	str	r1, [sp, #60]	@ 0x3c
 800dfa2:	f1ba 0f00 	cmp.w	sl, #0
 800dfa6:	d006      	beq.n	800dfb6 <read_submessage_list+0x262>
 800dfa8:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800dfac:	9300      	str	r3, [sp, #0]
 800dfae:	463a      	mov	r2, r7
 800dfb0:	464b      	mov	r3, r9
 800dfb2:	4620      	mov	r0, r4
 800dfb4:	47d0      	blx	sl
 800dfb6:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800dfb8:	2a00      	cmp	r2, #0
 800dfba:	f43f aed4 	beq.w	800dd66 <read_submessage_list+0x12>
 800dfbe:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800dfc0:	2100      	movs	r1, #0
 800dfc2:	3802      	subs	r0, #2
 800dfc4:	e003      	b.n	800dfce <read_submessage_list+0x27a>
 800dfc6:	3101      	adds	r1, #1
 800dfc8:	4291      	cmp	r1, r2
 800dfca:	f43f aecc 	beq.w	800dd66 <read_submessage_list+0x12>
 800dfce:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800dfd2:	42bb      	cmp	r3, r7
 800dfd4:	d1f7      	bne.n	800dfc6 <read_submessage_list+0x272>
 800dfd6:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800dfd8:	f803 9001 	strb.w	r9, [r3, r1]
 800dfdc:	e6c3      	b.n	800dd66 <read_submessage_list+0x12>
 800dfde:	2a00      	cmp	r2, #0
 800dfe0:	f47f aec1 	bne.w	800dd66 <read_submessage_list+0x12>
 800dfe4:	4629      	mov	r1, r5
 800dfe6:	4620      	mov	r0, r4
 800dfe8:	f000 fc9e 	bl	800e928 <uxr_read_create_session_status>
 800dfec:	e6bb      	b.n	800dd66 <read_submessage_list+0x12>
 800dfee:	4629      	mov	r1, r5
 800dff0:	4620      	mov	r0, r4
 800dff2:	f7ff fcf5 	bl	800d9e0 <read_submessage_get_info>
 800dff6:	e6b6      	b.n	800dd66 <read_submessage_list+0x12>
 800dff8:	b017      	add	sp, #92	@ 0x5c
 800dffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dffe:	4629      	mov	r1, r5
 800e000:	4620      	mov	r0, r4
 800e002:	f000 fc9d 	bl	800e940 <uxr_read_delete_session_status>
 800e006:	e6ae      	b.n	800dd66 <read_submessage_list+0x12>
 800e008:	f000 fef2 	bl	800edf0 <uxr_nanos>
 800e00c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e00e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800e010:	464f      	mov	r7, r9
 800e012:	fbc3 2706 	smlal	r2, r7, r3, r6
 800e016:	1812      	adds	r2, r2, r0
 800e018:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e01a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800e01c:	eb47 0101 	adc.w	r1, r7, r1
 800e020:	464f      	mov	r7, r9
 800e022:	fbc3 0706 	smlal	r0, r7, r3, r6
 800e026:	463b      	mov	r3, r7
 800e028:	4684      	mov	ip, r0
 800e02a:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 800e02e:	fbc7 0906 	smlal	r0, r9, r7, r6
 800e032:	eb1c 0c00 	adds.w	ip, ip, r0
 800e036:	464f      	mov	r7, r9
 800e038:	eb43 0307 	adc.w	r3, r3, r7
 800e03c:	ebb2 0c0c 	subs.w	ip, r2, ip
 800e040:	eb61 0303 	sbc.w	r3, r1, r3
 800e044:	0fda      	lsrs	r2, r3, #31
 800e046:	eb12 020c 	adds.w	r2, r2, ip
 800e04a:	f143 0300 	adc.w	r3, r3, #0
 800e04e:	0852      	lsrs	r2, r2, #1
 800e050:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800e054:	105b      	asrs	r3, r3, #1
 800e056:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 800e05a:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 800e05e:	e6dd      	b.n	800de1c <read_submessage_list+0xc8>
 800e060:	3b9aca00 	.word	0x3b9aca00

0800e064 <listen_message_reliably>:
 800e064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e068:	1e0b      	subs	r3, r1, #0
 800e06a:	b09d      	sub	sp, #116	@ 0x74
 800e06c:	bfb8      	it	lt
 800e06e:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 800e072:	4680      	mov	r8, r0
 800e074:	9305      	str	r3, [sp, #20]
 800e076:	f000 fea1 	bl	800edbc <uxr_millis>
 800e07a:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 800e07e:	4681      	mov	r9, r0
 800e080:	2a00      	cmp	r2, #0
 800e082:	f000 80a1 	beq.w	800e1c8 <listen_message_reliably+0x164>
 800e086:	2600      	movs	r6, #0
 800e088:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800e08c:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800e090:	9303      	str	r3, [sp, #12]
 800e092:	4630      	mov	r0, r6
 800e094:	460f      	mov	r7, r1
 800e096:	e00f      	b.n	800e0b8 <listen_message_reliably+0x54>
 800e098:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800e09c:	9903      	ldr	r1, [sp, #12]
 800e09e:	455a      	cmp	r2, fp
 800e0a0:	f106 0601 	add.w	r6, r6, #1
 800e0a4:	eb73 0101 	sbcs.w	r1, r3, r1
 800e0a8:	b2f0      	uxtb	r0, r6
 800e0aa:	da01      	bge.n	800e0b0 <listen_message_reliably+0x4c>
 800e0ac:	4693      	mov	fp, r2
 800e0ae:	9303      	str	r3, [sp, #12]
 800e0b0:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800e0b4:	4283      	cmp	r3, r0
 800e0b6:	d960      	bls.n	800e17a <listen_message_reliably+0x116>
 800e0b8:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800e0bc:	2102      	movs	r1, #2
 800e0be:	2201      	movs	r2, #1
 800e0c0:	f000 fcfe 	bl	800eac0 <uxr_stream_id>
 800e0c4:	00e4      	lsls	r4, r4, #3
 800e0c6:	f104 0520 	add.w	r5, r4, #32
 800e0ca:	4445      	add	r5, r8
 800e0cc:	4601      	mov	r1, r0
 800e0ce:	463b      	mov	r3, r7
 800e0d0:	464a      	mov	r2, r9
 800e0d2:	4628      	mov	r0, r5
 800e0d4:	9109      	str	r1, [sp, #36]	@ 0x24
 800e0d6:	f007 fbf9 	bl	80158cc <uxr_update_output_stream_heartbeat_timestamp>
 800e0da:	eb08 0304 	add.w	r3, r8, r4
 800e0de:	2800      	cmp	r0, #0
 800e0e0:	d0da      	beq.n	800e098 <listen_message_reliably+0x34>
 800e0e2:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800e0e6:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 800e0ea:	9304      	str	r3, [sp, #16]
 800e0ec:	4640      	mov	r0, r8
 800e0ee:	f000 fcaf 	bl	800ea50 <uxr_session_header_offset>
 800e0f2:	3501      	adds	r5, #1
 800e0f4:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 800e0f8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800e0fc:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 800e100:	2300      	movs	r3, #0
 800e102:	2211      	movs	r2, #17
 800e104:	9000      	str	r0, [sp, #0]
 800e106:	a90c      	add	r1, sp, #48	@ 0x30
 800e108:	4650      	mov	r0, sl
 800e10a:	f7ff f80b 	bl	800d124 <ucdr_init_buffer_origin_offset>
 800e10e:	2300      	movs	r3, #0
 800e110:	2205      	movs	r2, #5
 800e112:	210b      	movs	r1, #11
 800e114:	4650      	mov	r0, sl
 800e116:	f000 fe0b 	bl	800ed30 <uxr_buffer_submessage_header>
 800e11a:	8968      	ldrh	r0, [r5, #10]
 800e11c:	2101      	movs	r1, #1
 800e11e:	f007 fc97 	bl	8015a50 <uxr_seq_num_add>
 800e122:	892b      	ldrh	r3, [r5, #8]
 800e124:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800e128:	4602      	mov	r2, r0
 800e12a:	9b04      	ldr	r3, [sp, #16]
 800e12c:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800e130:	a90a      	add	r1, sp, #40	@ 0x28
 800e132:	4650      	mov	r0, sl
 800e134:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 800e138:	f001 ffe0 	bl	80100fc <uxr_serialize_HEARTBEAT_Payload>
 800e13c:	2200      	movs	r2, #0
 800e13e:	4611      	mov	r1, r2
 800e140:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e142:	4640      	mov	r0, r8
 800e144:	f000 fc2e 	bl	800e9a4 <uxr_stamp_session_header>
 800e148:	4650      	mov	r0, sl
 800e14a:	f7ff f829 	bl	800d1a0 <ucdr_buffer_length>
 800e14e:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800e152:	4602      	mov	r2, r0
 800e154:	a90c      	add	r1, sp, #48	@ 0x30
 800e156:	e9d3 0500 	ldrd	r0, r5, [r3]
 800e15a:	4444      	add	r4, r8
 800e15c:	47a8      	blx	r5
 800e15e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 800e162:	9903      	ldr	r1, [sp, #12]
 800e164:	455a      	cmp	r2, fp
 800e166:	f106 0601 	add.w	r6, r6, #1
 800e16a:	eb73 0101 	sbcs.w	r1, r3, r1
 800e16e:	b2f0      	uxtb	r0, r6
 800e170:	db9c      	blt.n	800e0ac <listen_message_reliably+0x48>
 800e172:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800e176:	4283      	cmp	r3, r0
 800e178:	d89e      	bhi.n	800e0b8 <listen_message_reliably+0x54>
 800e17a:	9a03      	ldr	r2, [sp, #12]
 800e17c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800e180:	429a      	cmp	r2, r3
 800e182:	bf08      	it	eq
 800e184:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 800e188:	d01e      	beq.n	800e1c8 <listen_message_reliably+0x164>
 800e18a:	ebab 0309 	sub.w	r3, fp, r9
 800e18e:	9905      	ldr	r1, [sp, #20]
 800e190:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 800e194:	2b00      	cmp	r3, #0
 800e196:	bf08      	it	eq
 800e198:	2301      	moveq	r3, #1
 800e19a:	4299      	cmp	r1, r3
 800e19c:	bfa8      	it	ge
 800e19e:	4619      	movge	r1, r3
 800e1a0:	6894      	ldr	r4, [r2, #8]
 800e1a2:	6810      	ldr	r0, [r2, #0]
 800e1a4:	4689      	mov	r9, r1
 800e1a6:	460b      	mov	r3, r1
 800e1a8:	aa08      	add	r2, sp, #32
 800e1aa:	a907      	add	r1, sp, #28
 800e1ac:	47a0      	blx	r4
 800e1ae:	b968      	cbnz	r0, 800e1cc <listen_message_reliably+0x168>
 800e1b0:	9b05      	ldr	r3, [sp, #20]
 800e1b2:	eba3 0309 	sub.w	r3, r3, r9
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	9305      	str	r3, [sp, #20]
 800e1ba:	f73f af5c 	bgt.w	800e076 <listen_message_reliably+0x12>
 800e1be:	4604      	mov	r4, r0
 800e1c0:	4620      	mov	r0, r4
 800e1c2:	b01d      	add	sp, #116	@ 0x74
 800e1c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1c8:	9b05      	ldr	r3, [sp, #20]
 800e1ca:	e7e0      	b.n	800e18e <listen_message_reliably+0x12a>
 800e1cc:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800e1d0:	4604      	mov	r4, r0
 800e1d2:	a80c      	add	r0, sp, #48	@ 0x30
 800e1d4:	f7fe ffb8 	bl	800d148 <ucdr_init_buffer>
 800e1d8:	2500      	movs	r5, #0
 800e1da:	f10d 031a 	add.w	r3, sp, #26
 800e1de:	aa06      	add	r2, sp, #24
 800e1e0:	a90c      	add	r1, sp, #48	@ 0x30
 800e1e2:	4640      	mov	r0, r8
 800e1e4:	f88d 5018 	strb.w	r5, [sp, #24]
 800e1e8:	f000 fbf0 	bl	800e9cc <uxr_read_session_header>
 800e1ec:	b918      	cbnz	r0, 800e1f6 <listen_message_reliably+0x192>
 800e1ee:	4620      	mov	r0, r4
 800e1f0:	b01d      	add	sp, #116	@ 0x74
 800e1f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1f6:	4629      	mov	r1, r5
 800e1f8:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800e1fc:	f000 fc8a 	bl	800eb14 <uxr_stream_id_from_raw>
 800e200:	f3c0 4507 	ubfx	r5, r0, #16, #8
 800e204:	2d01      	cmp	r5, #1
 800e206:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800e20a:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 800e20e:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800e212:	d04b      	beq.n	800e2ac <listen_message_reliably+0x248>
 800e214:	2d02      	cmp	r5, #2
 800e216:	d00f      	beq.n	800e238 <listen_message_reliably+0x1d4>
 800e218:	2d00      	cmp	r5, #0
 800e21a:	d1e8      	bne.n	800e1ee <listen_message_reliably+0x18a>
 800e21c:	4629      	mov	r1, r5
 800e21e:	4628      	mov	r0, r5
 800e220:	f000 fc78 	bl	800eb14 <uxr_stream_id_from_raw>
 800e224:	a90c      	add	r1, sp, #48	@ 0x30
 800e226:	4602      	mov	r2, r0
 800e228:	4640      	mov	r0, r8
 800e22a:	920a      	str	r2, [sp, #40]	@ 0x28
 800e22c:	f7ff fd92 	bl	800dd54 <read_submessage_list>
 800e230:	4620      	mov	r0, r4
 800e232:	b01d      	add	sp, #116	@ 0x74
 800e234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e238:	4631      	mov	r1, r6
 800e23a:	f108 0008 	add.w	r0, r8, #8
 800e23e:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 800e242:	f000 fd55 	bl	800ecf0 <uxr_get_input_reliable_stream>
 800e246:	4607      	mov	r7, r0
 800e248:	b338      	cbz	r0, 800e29a <listen_message_reliably+0x236>
 800e24a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e24c:	9203      	str	r2, [sp, #12]
 800e24e:	a80c      	add	r0, sp, #48	@ 0x30
 800e250:	f7fe ffaa 	bl	800d1a8 <ucdr_buffer_remaining>
 800e254:	4603      	mov	r3, r0
 800e256:	f10d 0019 	add.w	r0, sp, #25
 800e25a:	9000      	str	r0, [sp, #0]
 800e25c:	9a03      	ldr	r2, [sp, #12]
 800e25e:	4651      	mov	r1, sl
 800e260:	4638      	mov	r0, r7
 800e262:	f006 ff49 	bl	80150f8 <uxr_receive_reliable_message>
 800e266:	b1c0      	cbz	r0, 800e29a <listen_message_reliably+0x236>
 800e268:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800e26c:	b393      	cbz	r3, 800e2d4 <listen_message_reliably+0x270>
 800e26e:	ad14      	add	r5, sp, #80	@ 0x50
 800e270:	f04f 0a02 	mov.w	sl, #2
 800e274:	e00a      	b.n	800e28c <listen_message_reliably+0x228>
 800e276:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 800e27a:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 800e27e:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 800e282:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e284:	4629      	mov	r1, r5
 800e286:	4640      	mov	r0, r8
 800e288:	f7ff fd64 	bl	800dd54 <read_submessage_list>
 800e28c:	2204      	movs	r2, #4
 800e28e:	4629      	mov	r1, r5
 800e290:	4638      	mov	r0, r7
 800e292:	f006 ffb1 	bl	80151f8 <uxr_next_input_reliable_buffer_available>
 800e296:	2800      	cmp	r0, #0
 800e298:	d1ed      	bne.n	800e276 <listen_message_reliably+0x212>
 800e29a:	4640      	mov	r0, r8
 800e29c:	4632      	mov	r2, r6
 800e29e:	4649      	mov	r1, r9
 800e2a0:	f7ff fbd4 	bl	800da4c <write_submessage_acknack.isra.0>
 800e2a4:	4620      	mov	r0, r4
 800e2a6:	b01d      	add	sp, #116	@ 0x74
 800e2a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2ac:	4631      	mov	r1, r6
 800e2ae:	f108 0008 	add.w	r0, r8, #8
 800e2b2:	f000 fd13 	bl	800ecdc <uxr_get_input_best_effort_stream>
 800e2b6:	2800      	cmp	r0, #0
 800e2b8:	d099      	beq.n	800e1ee <listen_message_reliably+0x18a>
 800e2ba:	4651      	mov	r1, sl
 800e2bc:	f006 fe88 	bl	8014fd0 <uxr_receive_best_effort_message>
 800e2c0:	2800      	cmp	r0, #0
 800e2c2:	d094      	beq.n	800e1ee <listen_message_reliably+0x18a>
 800e2c4:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800e2c8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e2ca:	a90c      	add	r1, sp, #48	@ 0x30
 800e2cc:	4640      	mov	r0, r8
 800e2ce:	f7ff fd41 	bl	800dd54 <read_submessage_list>
 800e2d2:	e78c      	b.n	800e1ee <listen_message_reliably+0x18a>
 800e2d4:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800e2d8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e2da:	a90c      	add	r1, sp, #48	@ 0x30
 800e2dc:	4640      	mov	r0, r8
 800e2de:	f7ff fd39 	bl	800dd54 <read_submessage_list>
 800e2e2:	e7c4      	b.n	800e26e <listen_message_reliably+0x20a>

0800e2e4 <uxr_run_session_timeout>:
 800e2e4:	b570      	push	{r4, r5, r6, lr}
 800e2e6:	4604      	mov	r4, r0
 800e2e8:	460d      	mov	r5, r1
 800e2ea:	f000 fd67 	bl	800edbc <uxr_millis>
 800e2ee:	4606      	mov	r6, r0
 800e2f0:	4620      	mov	r0, r4
 800e2f2:	f7ff fc71 	bl	800dbd8 <uxr_flash_output_streams>
 800e2f6:	4629      	mov	r1, r5
 800e2f8:	4620      	mov	r0, r4
 800e2fa:	f7ff feb3 	bl	800e064 <listen_message_reliably>
 800e2fe:	f000 fd5d 	bl	800edbc <uxr_millis>
 800e302:	1b83      	subs	r3, r0, r6
 800e304:	1ae9      	subs	r1, r5, r3
 800e306:	2900      	cmp	r1, #0
 800e308:	dcf6      	bgt.n	800e2f8 <uxr_run_session_timeout+0x14>
 800e30a:	f104 0008 	add.w	r0, r4, #8
 800e30e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e312:	f000 bcf7 	b.w	800ed04 <uxr_output_streams_confirmed>
 800e316:	bf00      	nop

0800e318 <uxr_run_session_until_data>:
 800e318:	b570      	push	{r4, r5, r6, lr}
 800e31a:	4604      	mov	r4, r0
 800e31c:	460d      	mov	r5, r1
 800e31e:	f000 fd4d 	bl	800edbc <uxr_millis>
 800e322:	4606      	mov	r6, r0
 800e324:	4620      	mov	r0, r4
 800e326:	f7ff fc57 	bl	800dbd8 <uxr_flash_output_streams>
 800e32a:	2300      	movs	r3, #0
 800e32c:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 800e330:	4629      	mov	r1, r5
 800e332:	e005      	b.n	800e340 <uxr_run_session_until_data+0x28>
 800e334:	f000 fd42 	bl	800edbc <uxr_millis>
 800e338:	1b83      	subs	r3, r0, r6
 800e33a:	1ae9      	subs	r1, r5, r3
 800e33c:	2900      	cmp	r1, #0
 800e33e:	dd07      	ble.n	800e350 <uxr_run_session_until_data+0x38>
 800e340:	4620      	mov	r0, r4
 800e342:	f7ff fe8f 	bl	800e064 <listen_message_reliably>
 800e346:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800e34a:	2800      	cmp	r0, #0
 800e34c:	d0f2      	beq.n	800e334 <uxr_run_session_until_data+0x1c>
 800e34e:	bd70      	pop	{r4, r5, r6, pc}
 800e350:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800e354:	bd70      	pop	{r4, r5, r6, pc}
 800e356:	bf00      	nop

0800e358 <uxr_run_session_until_confirm_delivery>:
 800e358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e35c:	4606      	mov	r6, r0
 800e35e:	460d      	mov	r5, r1
 800e360:	f000 fd2c 	bl	800edbc <uxr_millis>
 800e364:	4607      	mov	r7, r0
 800e366:	4630      	mov	r0, r6
 800e368:	f7ff fc36 	bl	800dbd8 <uxr_flash_output_streams>
 800e36c:	2d00      	cmp	r5, #0
 800e36e:	f106 0808 	add.w	r8, r6, #8
 800e372:	bfa8      	it	ge
 800e374:	462c      	movge	r4, r5
 800e376:	da07      	bge.n	800e388 <uxr_run_session_until_confirm_delivery+0x30>
 800e378:	e00e      	b.n	800e398 <uxr_run_session_until_confirm_delivery+0x40>
 800e37a:	f7ff fe73 	bl	800e064 <listen_message_reliably>
 800e37e:	f000 fd1d 	bl	800edbc <uxr_millis>
 800e382:	1bc3      	subs	r3, r0, r7
 800e384:	1aec      	subs	r4, r5, r3
 800e386:	d407      	bmi.n	800e398 <uxr_run_session_until_confirm_delivery+0x40>
 800e388:	4640      	mov	r0, r8
 800e38a:	f000 fcbb 	bl	800ed04 <uxr_output_streams_confirmed>
 800e38e:	4603      	mov	r3, r0
 800e390:	4621      	mov	r1, r4
 800e392:	4630      	mov	r0, r6
 800e394:	2b00      	cmp	r3, #0
 800e396:	d0f0      	beq.n	800e37a <uxr_run_session_until_confirm_delivery+0x22>
 800e398:	4640      	mov	r0, r8
 800e39a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e39e:	f000 bcb1 	b.w	800ed04 <uxr_output_streams_confirmed>
 800e3a2:	bf00      	nop

0800e3a4 <uxr_run_session_until_all_status>:
 800e3a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e3a8:	9c08      	ldr	r4, [sp, #32]
 800e3aa:	4606      	mov	r6, r0
 800e3ac:	460f      	mov	r7, r1
 800e3ae:	4691      	mov	r9, r2
 800e3b0:	461d      	mov	r5, r3
 800e3b2:	f7ff fc11 	bl	800dbd8 <uxr_flash_output_streams>
 800e3b6:	b124      	cbz	r4, 800e3c2 <uxr_run_session_until_all_status+0x1e>
 800e3b8:	4622      	mov	r2, r4
 800e3ba:	21ff      	movs	r1, #255	@ 0xff
 800e3bc:	4628      	mov	r0, r5
 800e3be:	f009 fd0b 	bl	8017dd8 <memset>
 800e3c2:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 800e3c6:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800e3c8:	f000 fcf8 	bl	800edbc <uxr_millis>
 800e3cc:	3d01      	subs	r5, #1
 800e3ce:	f1a9 0902 	sub.w	r9, r9, #2
 800e3d2:	4680      	mov	r8, r0
 800e3d4:	4639      	mov	r1, r7
 800e3d6:	4630      	mov	r0, r6
 800e3d8:	f7ff fe44 	bl	800e064 <listen_message_reliably>
 800e3dc:	f000 fcee 	bl	800edbc <uxr_millis>
 800e3e0:	eba0 0008 	sub.w	r0, r0, r8
 800e3e4:	1a39      	subs	r1, r7, r0
 800e3e6:	b344      	cbz	r4, 800e43a <uxr_run_session_until_all_status+0x96>
 800e3e8:	4628      	mov	r0, r5
 800e3ea:	46ac      	mov	ip, r5
 800e3ec:	2301      	movs	r3, #1
 800e3ee:	e002      	b.n	800e3f6 <uxr_run_session_until_all_status+0x52>
 800e3f0:	42a3      	cmp	r3, r4
 800e3f2:	d20d      	bcs.n	800e410 <uxr_run_session_until_all_status+0x6c>
 800e3f4:	3301      	adds	r3, #1
 800e3f6:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 800e3fa:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 800e3fe:	d1f7      	bne.n	800e3f0 <uxr_run_session_until_all_status+0x4c>
 800e400:	42a3      	cmp	r3, r4
 800e402:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 800e406:	d213      	bcs.n	800e430 <uxr_run_session_until_all_status+0x8c>
 800e408:	2a00      	cmp	r2, #0
 800e40a:	d0f3      	beq.n	800e3f4 <uxr_run_session_until_all_status+0x50>
 800e40c:	2900      	cmp	r1, #0
 800e40e:	dce2      	bgt.n	800e3d6 <uxr_run_session_until_all_status+0x32>
 800e410:	2300      	movs	r3, #0
 800e412:	67f3      	str	r3, [r6, #124]	@ 0x7c
 800e414:	442c      	add	r4, r5
 800e416:	e001      	b.n	800e41c <uxr_run_session_until_all_status+0x78>
 800e418:	2b01      	cmp	r3, #1
 800e41a:	d812      	bhi.n	800e442 <uxr_run_session_until_all_status+0x9e>
 800e41c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800e420:	4284      	cmp	r4, r0
 800e422:	d1f9      	bne.n	800e418 <uxr_run_session_until_all_status+0x74>
 800e424:	2b01      	cmp	r3, #1
 800e426:	bf8c      	ite	hi
 800e428:	2000      	movhi	r0, #0
 800e42a:	2001      	movls	r0, #1
 800e42c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e430:	2900      	cmp	r1, #0
 800e432:	dded      	ble.n	800e410 <uxr_run_session_until_all_status+0x6c>
 800e434:	2a00      	cmp	r2, #0
 800e436:	d1ce      	bne.n	800e3d6 <uxr_run_session_until_all_status+0x32>
 800e438:	e7ea      	b.n	800e410 <uxr_run_session_until_all_status+0x6c>
 800e43a:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800e43c:	2001      	movs	r0, #1
 800e43e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e442:	2000      	movs	r0, #0
 800e444:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800e448 <wait_session_status>:
 800e448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e44c:	4604      	mov	r4, r0
 800e44e:	b09d      	sub	sp, #116	@ 0x74
 800e450:	20ff      	movs	r0, #255	@ 0xff
 800e452:	7160      	strb	r0, [r4, #5]
 800e454:	9303      	str	r3, [sp, #12]
 800e456:	2b00      	cmp	r3, #0
 800e458:	f000 80b6 	beq.w	800e5c8 <wait_session_status+0x180>
 800e45c:	468a      	mov	sl, r1
 800e45e:	4691      	mov	r9, r2
 800e460:	f04f 0b00 	mov.w	fp, #0
 800e464:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e466:	464a      	mov	r2, r9
 800e468:	e9d3 0500 	ldrd	r0, r5, [r3]
 800e46c:	4651      	mov	r1, sl
 800e46e:	47a8      	blx	r5
 800e470:	f000 fca4 	bl	800edbc <uxr_millis>
 800e474:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800e478:	4605      	mov	r5, r0
 800e47a:	e009      	b.n	800e490 <wait_session_status+0x48>
 800e47c:	f000 fc9e 	bl	800edbc <uxr_millis>
 800e480:	1b40      	subs	r0, r0, r5
 800e482:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800e486:	2b00      	cmp	r3, #0
 800e488:	dd40      	ble.n	800e50c <wait_session_status+0xc4>
 800e48a:	7960      	ldrb	r0, [r4, #5]
 800e48c:	28ff      	cmp	r0, #255	@ 0xff
 800e48e:	d145      	bne.n	800e51c <wait_session_status+0xd4>
 800e490:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800e492:	a908      	add	r1, sp, #32
 800e494:	6896      	ldr	r6, [r2, #8]
 800e496:	6810      	ldr	r0, [r2, #0]
 800e498:	aa09      	add	r2, sp, #36	@ 0x24
 800e49a:	47b0      	blx	r6
 800e49c:	2800      	cmp	r0, #0
 800e49e:	d0ed      	beq.n	800e47c <wait_session_status+0x34>
 800e4a0:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800e4a4:	a80c      	add	r0, sp, #48	@ 0x30
 800e4a6:	f7fe fe4f 	bl	800d148 <ucdr_init_buffer>
 800e4aa:	2600      	movs	r6, #0
 800e4ac:	f10d 031e 	add.w	r3, sp, #30
 800e4b0:	aa07      	add	r2, sp, #28
 800e4b2:	a90c      	add	r1, sp, #48	@ 0x30
 800e4b4:	4620      	mov	r0, r4
 800e4b6:	f88d 601c 	strb.w	r6, [sp, #28]
 800e4ba:	f000 fa87 	bl	800e9cc <uxr_read_session_header>
 800e4be:	2800      	cmp	r0, #0
 800e4c0:	d0dc      	beq.n	800e47c <wait_session_status+0x34>
 800e4c2:	4631      	mov	r1, r6
 800e4c4:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800e4c8:	f000 fb24 	bl	800eb14 <uxr_stream_id_from_raw>
 800e4cc:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800e4d0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800e4d4:	9302      	str	r3, [sp, #8]
 800e4d6:	2f01      	cmp	r7, #1
 800e4d8:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 800e4dc:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800e4e0:	d05c      	beq.n	800e59c <wait_session_status+0x154>
 800e4e2:	2f02      	cmp	r7, #2
 800e4e4:	d020      	beq.n	800e528 <wait_session_status+0xe0>
 800e4e6:	2f00      	cmp	r7, #0
 800e4e8:	d1c8      	bne.n	800e47c <wait_session_status+0x34>
 800e4ea:	4639      	mov	r1, r7
 800e4ec:	4638      	mov	r0, r7
 800e4ee:	f000 fb11 	bl	800eb14 <uxr_stream_id_from_raw>
 800e4f2:	a90c      	add	r1, sp, #48	@ 0x30
 800e4f4:	4602      	mov	r2, r0
 800e4f6:	900b      	str	r0, [sp, #44]	@ 0x2c
 800e4f8:	4620      	mov	r0, r4
 800e4fa:	f7ff fc2b 	bl	800dd54 <read_submessage_list>
 800e4fe:	f000 fc5d 	bl	800edbc <uxr_millis>
 800e502:	1b40      	subs	r0, r0, r5
 800e504:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800e508:	2b00      	cmp	r3, #0
 800e50a:	dcbe      	bgt.n	800e48a <wait_session_status+0x42>
 800e50c:	9b03      	ldr	r3, [sp, #12]
 800e50e:	7960      	ldrb	r0, [r4, #5]
 800e510:	f10b 0b01 	add.w	fp, fp, #1
 800e514:	455b      	cmp	r3, fp
 800e516:	d001      	beq.n	800e51c <wait_session_status+0xd4>
 800e518:	28ff      	cmp	r0, #255	@ 0xff
 800e51a:	d0a3      	beq.n	800e464 <wait_session_status+0x1c>
 800e51c:	38ff      	subs	r0, #255	@ 0xff
 800e51e:	bf18      	it	ne
 800e520:	2001      	movne	r0, #1
 800e522:	b01d      	add	sp, #116	@ 0x74
 800e524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e528:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 800e52c:	9304      	str	r3, [sp, #16]
 800e52e:	4631      	mov	r1, r6
 800e530:	f104 0008 	add.w	r0, r4, #8
 800e534:	f000 fbdc 	bl	800ecf0 <uxr_get_input_reliable_stream>
 800e538:	4680      	mov	r8, r0
 800e53a:	b348      	cbz	r0, 800e590 <wait_session_status+0x148>
 800e53c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e53e:	9205      	str	r2, [sp, #20]
 800e540:	a80c      	add	r0, sp, #48	@ 0x30
 800e542:	f7fe fe31 	bl	800d1a8 <ucdr_buffer_remaining>
 800e546:	4603      	mov	r3, r0
 800e548:	f10d 001d 	add.w	r0, sp, #29
 800e54c:	9000      	str	r0, [sp, #0]
 800e54e:	9a05      	ldr	r2, [sp, #20]
 800e550:	9902      	ldr	r1, [sp, #8]
 800e552:	4640      	mov	r0, r8
 800e554:	f006 fdd0 	bl	80150f8 <uxr_receive_reliable_message>
 800e558:	b1d0      	cbz	r0, 800e590 <wait_session_status+0x148>
 800e55a:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d03a      	beq.n	800e5d8 <wait_session_status+0x190>
 800e562:	9f04      	ldr	r7, [sp, #16]
 800e564:	e00a      	b.n	800e57c <wait_session_status+0x134>
 800e566:	f04f 0302 	mov.w	r3, #2
 800e56a:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 800e56e:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 800e572:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 800e576:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e578:	f7ff fbec 	bl	800dd54 <read_submessage_list>
 800e57c:	a914      	add	r1, sp, #80	@ 0x50
 800e57e:	2204      	movs	r2, #4
 800e580:	4640      	mov	r0, r8
 800e582:	f006 fe39 	bl	80151f8 <uxr_next_input_reliable_buffer_available>
 800e586:	4603      	mov	r3, r0
 800e588:	a914      	add	r1, sp, #80	@ 0x50
 800e58a:	4620      	mov	r0, r4
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d1ea      	bne.n	800e566 <wait_session_status+0x11e>
 800e590:	9904      	ldr	r1, [sp, #16]
 800e592:	4632      	mov	r2, r6
 800e594:	4620      	mov	r0, r4
 800e596:	f7ff fa59 	bl	800da4c <write_submessage_acknack.isra.0>
 800e59a:	e76f      	b.n	800e47c <wait_session_status+0x34>
 800e59c:	4631      	mov	r1, r6
 800e59e:	f104 0008 	add.w	r0, r4, #8
 800e5a2:	f000 fb9b 	bl	800ecdc <uxr_get_input_best_effort_stream>
 800e5a6:	2800      	cmp	r0, #0
 800e5a8:	f43f af68 	beq.w	800e47c <wait_session_status+0x34>
 800e5ac:	9902      	ldr	r1, [sp, #8]
 800e5ae:	f006 fd0f 	bl	8014fd0 <uxr_receive_best_effort_message>
 800e5b2:	2800      	cmp	r0, #0
 800e5b4:	f43f af62 	beq.w	800e47c <wait_session_status+0x34>
 800e5b8:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800e5bc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e5be:	a90c      	add	r1, sp, #48	@ 0x30
 800e5c0:	4620      	mov	r0, r4
 800e5c2:	f7ff fbc7 	bl	800dd54 <read_submessage_list>
 800e5c6:	e759      	b.n	800e47c <wait_session_status+0x34>
 800e5c8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e5ca:	e9d3 0400 	ldrd	r0, r4, [r3]
 800e5ce:	47a0      	blx	r4
 800e5d0:	2001      	movs	r0, #1
 800e5d2:	b01d      	add	sp, #116	@ 0x74
 800e5d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5d8:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800e5dc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e5de:	a90c      	add	r1, sp, #48	@ 0x30
 800e5e0:	4620      	mov	r0, r4
 800e5e2:	f7ff fbb7 	bl	800dd54 <read_submessage_list>
 800e5e6:	e7bc      	b.n	800e562 <wait_session_status+0x11a>

0800e5e8 <uxr_delete_session_retries>:
 800e5e8:	b530      	push	{r4, r5, lr}
 800e5ea:	b08f      	sub	sp, #60	@ 0x3c
 800e5ec:	4604      	mov	r4, r0
 800e5ee:	460d      	mov	r5, r1
 800e5f0:	f000 fa2e 	bl	800ea50 <uxr_session_header_offset>
 800e5f4:	2300      	movs	r3, #0
 800e5f6:	2210      	movs	r2, #16
 800e5f8:	9000      	str	r0, [sp, #0]
 800e5fa:	a902      	add	r1, sp, #8
 800e5fc:	a806      	add	r0, sp, #24
 800e5fe:	f7fe fd91 	bl	800d124 <ucdr_init_buffer_origin_offset>
 800e602:	a906      	add	r1, sp, #24
 800e604:	4620      	mov	r0, r4
 800e606:	f000 f973 	bl	800e8f0 <uxr_buffer_delete_session>
 800e60a:	2200      	movs	r2, #0
 800e60c:	4611      	mov	r1, r2
 800e60e:	9b06      	ldr	r3, [sp, #24]
 800e610:	4620      	mov	r0, r4
 800e612:	f000 f9c7 	bl	800e9a4 <uxr_stamp_session_header>
 800e616:	a806      	add	r0, sp, #24
 800e618:	f7fe fdc2 	bl	800d1a0 <ucdr_buffer_length>
 800e61c:	462b      	mov	r3, r5
 800e61e:	4602      	mov	r2, r0
 800e620:	a902      	add	r1, sp, #8
 800e622:	4620      	mov	r0, r4
 800e624:	f7ff ff10 	bl	800e448 <wait_session_status>
 800e628:	b118      	cbz	r0, 800e632 <uxr_delete_session_retries+0x4a>
 800e62a:	7960      	ldrb	r0, [r4, #5]
 800e62c:	fab0 f080 	clz	r0, r0
 800e630:	0940      	lsrs	r0, r0, #5
 800e632:	b00f      	add	sp, #60	@ 0x3c
 800e634:	bd30      	pop	{r4, r5, pc}
 800e636:	bf00      	nop

0800e638 <uxr_create_session>:
 800e638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e63c:	f100 0b08 	add.w	fp, r0, #8
 800e640:	b0ab      	sub	sp, #172	@ 0xac
 800e642:	4604      	mov	r4, r0
 800e644:	4658      	mov	r0, fp
 800e646:	f000 fa99 	bl	800eb7c <uxr_reset_stream_storage>
 800e64a:	4620      	mov	r0, r4
 800e64c:	f000 fa00 	bl	800ea50 <uxr_session_header_offset>
 800e650:	2300      	movs	r3, #0
 800e652:	9000      	str	r0, [sp, #0]
 800e654:	221c      	movs	r2, #28
 800e656:	a90b      	add	r1, sp, #44	@ 0x2c
 800e658:	a812      	add	r0, sp, #72	@ 0x48
 800e65a:	f7fe fd63 	bl	800d124 <ucdr_init_buffer_origin_offset>
 800e65e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e660:	8a1a      	ldrh	r2, [r3, #16]
 800e662:	3a04      	subs	r2, #4
 800e664:	b292      	uxth	r2, r2
 800e666:	a912      	add	r1, sp, #72	@ 0x48
 800e668:	4620      	mov	r0, r4
 800e66a:	f000 f917 	bl	800e89c <uxr_buffer_create_session>
 800e66e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e670:	4620      	mov	r0, r4
 800e672:	f000 f983 	bl	800e97c <uxr_stamp_create_session_header>
 800e676:	a812      	add	r0, sp, #72	@ 0x48
 800e678:	f7fe fd92 	bl	800d1a0 <ucdr_buffer_length>
 800e67c:	23ff      	movs	r3, #255	@ 0xff
 800e67e:	7163      	strb	r3, [r4, #5]
 800e680:	230a      	movs	r3, #10
 800e682:	46da      	mov	sl, fp
 800e684:	9303      	str	r3, [sp, #12]
 800e686:	4683      	mov	fp, r0
 800e688:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e68a:	465a      	mov	r2, fp
 800e68c:	e9d3 0500 	ldrd	r0, r5, [r3]
 800e690:	a90b      	add	r1, sp, #44	@ 0x2c
 800e692:	47a8      	blx	r5
 800e694:	f000 fb92 	bl	800edbc <uxr_millis>
 800e698:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800e69c:	4605      	mov	r5, r0
 800e69e:	e009      	b.n	800e6b4 <uxr_create_session+0x7c>
 800e6a0:	f000 fb8c 	bl	800edbc <uxr_millis>
 800e6a4:	1b40      	subs	r0, r0, r5
 800e6a6:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	7962      	ldrb	r2, [r4, #5]
 800e6ae:	dd38      	ble.n	800e722 <uxr_create_session+0xea>
 800e6b0:	2aff      	cmp	r2, #255	@ 0xff
 800e6b2:	d13c      	bne.n	800e72e <uxr_create_session+0xf6>
 800e6b4:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800e6b6:	a907      	add	r1, sp, #28
 800e6b8:	6896      	ldr	r6, [r2, #8]
 800e6ba:	6810      	ldr	r0, [r2, #0]
 800e6bc:	aa08      	add	r2, sp, #32
 800e6be:	47b0      	blx	r6
 800e6c0:	2800      	cmp	r0, #0
 800e6c2:	d0ed      	beq.n	800e6a0 <uxr_create_session+0x68>
 800e6c4:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800e6c8:	a81a      	add	r0, sp, #104	@ 0x68
 800e6ca:	f7fe fd3d 	bl	800d148 <ucdr_init_buffer>
 800e6ce:	2600      	movs	r6, #0
 800e6d0:	f10d 031a 	add.w	r3, sp, #26
 800e6d4:	aa06      	add	r2, sp, #24
 800e6d6:	a91a      	add	r1, sp, #104	@ 0x68
 800e6d8:	4620      	mov	r0, r4
 800e6da:	f88d 6018 	strb.w	r6, [sp, #24]
 800e6de:	f000 f975 	bl	800e9cc <uxr_read_session_header>
 800e6e2:	2800      	cmp	r0, #0
 800e6e4:	d0dc      	beq.n	800e6a0 <uxr_create_session+0x68>
 800e6e6:	4631      	mov	r1, r6
 800e6e8:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800e6ec:	f000 fa12 	bl	800eb14 <uxr_stream_id_from_raw>
 800e6f0:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800e6f4:	2e01      	cmp	r6, #1
 800e6f6:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800e6fa:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 800e6fe:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800e702:	d053      	beq.n	800e7ac <uxr_create_session+0x174>
 800e704:	2e02      	cmp	r6, #2
 800e706:	d018      	beq.n	800e73a <uxr_create_session+0x102>
 800e708:	2e00      	cmp	r6, #0
 800e70a:	d1c9      	bne.n	800e6a0 <uxr_create_session+0x68>
 800e70c:	4631      	mov	r1, r6
 800e70e:	4630      	mov	r0, r6
 800e710:	f000 fa00 	bl	800eb14 <uxr_stream_id_from_raw>
 800e714:	a91a      	add	r1, sp, #104	@ 0x68
 800e716:	4602      	mov	r2, r0
 800e718:	900a      	str	r0, [sp, #40]	@ 0x28
 800e71a:	4620      	mov	r0, r4
 800e71c:	f7ff fb1a 	bl	800dd54 <read_submessage_list>
 800e720:	e7be      	b.n	800e6a0 <uxr_create_session+0x68>
 800e722:	9b03      	ldr	r3, [sp, #12]
 800e724:	3b01      	subs	r3, #1
 800e726:	9303      	str	r3, [sp, #12]
 800e728:	d001      	beq.n	800e72e <uxr_create_session+0xf6>
 800e72a:	2aff      	cmp	r2, #255	@ 0xff
 800e72c:	d0ac      	beq.n	800e688 <uxr_create_session+0x50>
 800e72e:	2a00      	cmp	r2, #0
 800e730:	d051      	beq.n	800e7d6 <uxr_create_session+0x19e>
 800e732:	2000      	movs	r0, #0
 800e734:	b02b      	add	sp, #172	@ 0xac
 800e736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e73a:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800e73e:	9304      	str	r3, [sp, #16]
 800e740:	4639      	mov	r1, r7
 800e742:	4650      	mov	r0, sl
 800e744:	f000 fad4 	bl	800ecf0 <uxr_get_input_reliable_stream>
 800e748:	4680      	mov	r8, r0
 800e74a:	b348      	cbz	r0, 800e7a0 <uxr_create_session+0x168>
 800e74c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800e74e:	9205      	str	r2, [sp, #20]
 800e750:	a81a      	add	r0, sp, #104	@ 0x68
 800e752:	f7fe fd29 	bl	800d1a8 <ucdr_buffer_remaining>
 800e756:	4603      	mov	r3, r0
 800e758:	f10d 0019 	add.w	r0, sp, #25
 800e75c:	9000      	str	r0, [sp, #0]
 800e75e:	9a05      	ldr	r2, [sp, #20]
 800e760:	4649      	mov	r1, r9
 800e762:	4640      	mov	r0, r8
 800e764:	f006 fcc8 	bl	80150f8 <uxr_receive_reliable_message>
 800e768:	b1d0      	cbz	r0, 800e7a0 <uxr_create_session+0x168>
 800e76a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d038      	beq.n	800e7e4 <uxr_create_session+0x1ac>
 800e772:	9e04      	ldr	r6, [sp, #16]
 800e774:	e00a      	b.n	800e78c <uxr_create_session+0x154>
 800e776:	f04f 0302 	mov.w	r3, #2
 800e77a:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 800e77e:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 800e782:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e786:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e788:	f7ff fae4 	bl	800dd54 <read_submessage_list>
 800e78c:	a922      	add	r1, sp, #136	@ 0x88
 800e78e:	2204      	movs	r2, #4
 800e790:	4640      	mov	r0, r8
 800e792:	f006 fd31 	bl	80151f8 <uxr_next_input_reliable_buffer_available>
 800e796:	4603      	mov	r3, r0
 800e798:	a922      	add	r1, sp, #136	@ 0x88
 800e79a:	4620      	mov	r0, r4
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d1ea      	bne.n	800e776 <uxr_create_session+0x13e>
 800e7a0:	9904      	ldr	r1, [sp, #16]
 800e7a2:	463a      	mov	r2, r7
 800e7a4:	4620      	mov	r0, r4
 800e7a6:	f7ff f951 	bl	800da4c <write_submessage_acknack.isra.0>
 800e7aa:	e779      	b.n	800e6a0 <uxr_create_session+0x68>
 800e7ac:	4639      	mov	r1, r7
 800e7ae:	4650      	mov	r0, sl
 800e7b0:	f000 fa94 	bl	800ecdc <uxr_get_input_best_effort_stream>
 800e7b4:	2800      	cmp	r0, #0
 800e7b6:	f43f af73 	beq.w	800e6a0 <uxr_create_session+0x68>
 800e7ba:	4649      	mov	r1, r9
 800e7bc:	f006 fc08 	bl	8014fd0 <uxr_receive_best_effort_message>
 800e7c0:	2800      	cmp	r0, #0
 800e7c2:	f43f af6d 	beq.w	800e6a0 <uxr_create_session+0x68>
 800e7c6:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800e7ca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e7cc:	a91a      	add	r1, sp, #104	@ 0x68
 800e7ce:	4620      	mov	r0, r4
 800e7d0:	f7ff fac0 	bl	800dd54 <read_submessage_list>
 800e7d4:	e764      	b.n	800e6a0 <uxr_create_session+0x68>
 800e7d6:	4650      	mov	r0, sl
 800e7d8:	f000 f9d0 	bl	800eb7c <uxr_reset_stream_storage>
 800e7dc:	2001      	movs	r0, #1
 800e7de:	b02b      	add	sp, #172	@ 0xac
 800e7e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7e4:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800e7e8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e7ea:	a91a      	add	r1, sp, #104	@ 0x68
 800e7ec:	4620      	mov	r0, r4
 800e7ee:	f7ff fab1 	bl	800dd54 <read_submessage_list>
 800e7f2:	e7be      	b.n	800e772 <uxr_create_session+0x13a>

0800e7f4 <uxr_prepare_stream_to_write_submessage>:
 800e7f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e7f8:	b082      	sub	sp, #8
 800e7fa:	4682      	mov	sl, r0
 800e7fc:	4610      	mov	r0, r2
 800e7fe:	4615      	mov	r5, r2
 800e800:	461e      	mov	r6, r3
 800e802:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 800e806:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 800e80a:	9101      	str	r1, [sp, #4]
 800e80c:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800e810:	f000 face 	bl	800edb0 <uxr_submessage_padding>
 800e814:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e818:	f105 0904 	add.w	r9, r5, #4
 800e81c:	2b01      	cmp	r3, #1
 800e81e:	4481      	add	r9, r0
 800e820:	d01d      	beq.n	800e85e <uxr_prepare_stream_to_write_submessage+0x6a>
 800e822:	2b02      	cmp	r3, #2
 800e824:	d116      	bne.n	800e854 <uxr_prepare_stream_to_write_submessage+0x60>
 800e826:	4621      	mov	r1, r4
 800e828:	f10a 0008 	add.w	r0, sl, #8
 800e82c:	f000 fa4c 	bl	800ecc8 <uxr_get_output_reliable_stream>
 800e830:	4604      	mov	r4, r0
 800e832:	b158      	cbz	r0, 800e84c <uxr_prepare_stream_to_write_submessage+0x58>
 800e834:	4649      	mov	r1, r9
 800e836:	4632      	mov	r2, r6
 800e838:	f006 fe9a 	bl	8015570 <uxr_prepare_reliable_buffer_to_write>
 800e83c:	4604      	mov	r4, r0
 800e83e:	b12c      	cbz	r4, 800e84c <uxr_prepare_stream_to_write_submessage+0x58>
 800e840:	4643      	mov	r3, r8
 800e842:	b2aa      	uxth	r2, r5
 800e844:	4639      	mov	r1, r7
 800e846:	4630      	mov	r0, r6
 800e848:	f000 fa72 	bl	800ed30 <uxr_buffer_submessage_header>
 800e84c:	4620      	mov	r0, r4
 800e84e:	b002      	add	sp, #8
 800e850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e854:	2400      	movs	r4, #0
 800e856:	4620      	mov	r0, r4
 800e858:	b002      	add	sp, #8
 800e85a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e85e:	4621      	mov	r1, r4
 800e860:	f10a 0008 	add.w	r0, sl, #8
 800e864:	f000 fa28 	bl	800ecb8 <uxr_get_output_best_effort_stream>
 800e868:	4604      	mov	r4, r0
 800e86a:	2800      	cmp	r0, #0
 800e86c:	d0ee      	beq.n	800e84c <uxr_prepare_stream_to_write_submessage+0x58>
 800e86e:	4649      	mov	r1, r9
 800e870:	4632      	mov	r2, r6
 800e872:	f006 fdad 	bl	80153d0 <uxr_prepare_best_effort_buffer_to_write>
 800e876:	4604      	mov	r4, r0
 800e878:	e7e1      	b.n	800e83e <uxr_prepare_stream_to_write_submessage+0x4a>
 800e87a:	bf00      	nop

0800e87c <uxr_init_session_info>:
 800e87c:	0e13      	lsrs	r3, r2, #24
 800e87e:	7043      	strb	r3, [r0, #1]
 800e880:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800e884:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800e888:	7001      	strb	r1, [r0, #0]
 800e88a:	70c3      	strb	r3, [r0, #3]
 800e88c:	2109      	movs	r1, #9
 800e88e:	23ff      	movs	r3, #255	@ 0xff
 800e890:	f880 c002 	strb.w	ip, [r0, #2]
 800e894:	7102      	strb	r2, [r0, #4]
 800e896:	80c1      	strh	r1, [r0, #6]
 800e898:	7143      	strb	r3, [r0, #5]
 800e89a:	4770      	bx	lr

0800e89c <uxr_buffer_create_session>:
 800e89c:	b530      	push	{r4, r5, lr}
 800e89e:	b089      	sub	sp, #36	@ 0x24
 800e8a0:	2300      	movs	r3, #0
 800e8a2:	4d12      	ldr	r5, [pc, #72]	@ (800e8ec <uxr_buffer_create_session+0x50>)
 800e8a4:	9307      	str	r3, [sp, #28]
 800e8a6:	f8ad 201c 	strh.w	r2, [sp, #28]
 800e8aa:	2201      	movs	r2, #1
 800e8ac:	9301      	str	r3, [sp, #4]
 800e8ae:	80c2      	strh	r2, [r0, #6]
 800e8b0:	f88d 2004 	strb.w	r2, [sp, #4]
 800e8b4:	682a      	ldr	r2, [r5, #0]
 800e8b6:	9200      	str	r2, [sp, #0]
 800e8b8:	88aa      	ldrh	r2, [r5, #4]
 800e8ba:	f8ad 2006 	strh.w	r2, [sp, #6]
 800e8be:	f8d0 2001 	ldr.w	r2, [r0, #1]
 800e8c2:	9202      	str	r2, [sp, #8]
 800e8c4:	460c      	mov	r4, r1
 800e8c6:	7802      	ldrb	r2, [r0, #0]
 800e8c8:	9303      	str	r3, [sp, #12]
 800e8ca:	4619      	mov	r1, r3
 800e8cc:	f88d 200c 	strb.w	r2, [sp, #12]
 800e8d0:	4620      	mov	r0, r4
 800e8d2:	2210      	movs	r2, #16
 800e8d4:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800e8d8:	9306      	str	r3, [sp, #24]
 800e8da:	f000 fa29 	bl	800ed30 <uxr_buffer_submessage_header>
 800e8de:	4669      	mov	r1, sp
 800e8e0:	4620      	mov	r0, r4
 800e8e2:	f001 fa6d 	bl	800fdc0 <uxr_serialize_CREATE_CLIENT_Payload>
 800e8e6:	b009      	add	sp, #36	@ 0x24
 800e8e8:	bd30      	pop	{r4, r5, pc}
 800e8ea:	bf00      	nop
 800e8ec:	08019f8c 	.word	0x08019f8c

0800e8f0 <uxr_buffer_delete_session>:
 800e8f0:	b510      	push	{r4, lr}
 800e8f2:	4b0c      	ldr	r3, [pc, #48]	@ (800e924 <uxr_buffer_delete_session+0x34>)
 800e8f4:	b082      	sub	sp, #8
 800e8f6:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 800e8fa:	f8ad c006 	strh.w	ip, [sp, #6]
 800e8fe:	460c      	mov	r4, r1
 800e900:	2202      	movs	r2, #2
 800e902:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e906:	80c2      	strh	r2, [r0, #6]
 800e908:	f8ad 3004 	strh.w	r3, [sp, #4]
 800e90c:	2204      	movs	r2, #4
 800e90e:	2300      	movs	r3, #0
 800e910:	2103      	movs	r1, #3
 800e912:	4620      	mov	r0, r4
 800e914:	f000 fa0c 	bl	800ed30 <uxr_buffer_submessage_header>
 800e918:	a901      	add	r1, sp, #4
 800e91a:	4620      	mov	r0, r4
 800e91c:	f001 faf6 	bl	800ff0c <uxr_serialize_DELETE_Payload>
 800e920:	b002      	add	sp, #8
 800e922:	bd10      	pop	{r4, pc}
 800e924:	08019f8c 	.word	0x08019f8c

0800e928 <uxr_read_create_session_status>:
 800e928:	b510      	push	{r4, lr}
 800e92a:	b088      	sub	sp, #32
 800e92c:	4604      	mov	r4, r0
 800e92e:	4608      	mov	r0, r1
 800e930:	a901      	add	r1, sp, #4
 800e932:	f001 fafb 	bl	800ff2c <uxr_deserialize_STATUS_AGENT_Payload>
 800e936:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e93a:	7163      	strb	r3, [r4, #5]
 800e93c:	b008      	add	sp, #32
 800e93e:	bd10      	pop	{r4, pc}

0800e940 <uxr_read_delete_session_status>:
 800e940:	b510      	push	{r4, lr}
 800e942:	4604      	mov	r4, r0
 800e944:	b084      	sub	sp, #16
 800e946:	4608      	mov	r0, r1
 800e948:	a902      	add	r1, sp, #8
 800e94a:	f001 fb1f 	bl	800ff8c <uxr_deserialize_STATUS_Payload>
 800e94e:	88e3      	ldrh	r3, [r4, #6]
 800e950:	2b02      	cmp	r3, #2
 800e952:	d001      	beq.n	800e958 <uxr_read_delete_session_status+0x18>
 800e954:	b004      	add	sp, #16
 800e956:	bd10      	pop	{r4, pc}
 800e958:	f10d 000a 	add.w	r0, sp, #10
 800e95c:	f7fe fecc 	bl	800d6f8 <uxr_object_id_from_raw>
 800e960:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800e964:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800e968:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800e96c:	b29b      	uxth	r3, r3
 800e96e:	2b02      	cmp	r3, #2
 800e970:	bf04      	itt	eq
 800e972:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 800e976:	7163      	strbeq	r3, [r4, #5]
 800e978:	b004      	add	sp, #16
 800e97a:	bd10      	pop	{r4, pc}

0800e97c <uxr_stamp_create_session_header>:
 800e97c:	b510      	push	{r4, lr}
 800e97e:	2208      	movs	r2, #8
 800e980:	b08a      	sub	sp, #40	@ 0x28
 800e982:	4604      	mov	r4, r0
 800e984:	eb0d 0002 	add.w	r0, sp, r2
 800e988:	f7fe fbde 	bl	800d148 <ucdr_init_buffer>
 800e98c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e990:	9400      	str	r4, [sp, #0]
 800e992:	2300      	movs	r3, #0
 800e994:	461a      	mov	r2, r3
 800e996:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 800e99a:	a802      	add	r0, sp, #8
 800e99c:	f000 fbc2 	bl	800f124 <uxr_serialize_message_header>
 800e9a0:	b00a      	add	sp, #40	@ 0x28
 800e9a2:	bd10      	pop	{r4, pc}

0800e9a4 <uxr_stamp_session_header>:
 800e9a4:	b530      	push	{r4, r5, lr}
 800e9a6:	b08d      	sub	sp, #52	@ 0x34
 800e9a8:	4604      	mov	r4, r0
 800e9aa:	460d      	mov	r5, r1
 800e9ac:	9203      	str	r2, [sp, #12]
 800e9ae:	4619      	mov	r1, r3
 800e9b0:	a804      	add	r0, sp, #16
 800e9b2:	2208      	movs	r2, #8
 800e9b4:	f7fe fbc8 	bl	800d148 <ucdr_init_buffer>
 800e9b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9bc:	9b03      	ldr	r3, [sp, #12]
 800e9be:	9400      	str	r4, [sp, #0]
 800e9c0:	462a      	mov	r2, r5
 800e9c2:	a804      	add	r0, sp, #16
 800e9c4:	f000 fbae 	bl	800f124 <uxr_serialize_message_header>
 800e9c8:	b00d      	add	sp, #52	@ 0x34
 800e9ca:	bd30      	pop	{r4, r5, pc}

0800e9cc <uxr_read_session_header>:
 800e9cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9d0:	4607      	mov	r7, r0
 800e9d2:	b084      	sub	sp, #16
 800e9d4:	4608      	mov	r0, r1
 800e9d6:	460c      	mov	r4, r1
 800e9d8:	4615      	mov	r5, r2
 800e9da:	461e      	mov	r6, r3
 800e9dc:	f7fe fbe4 	bl	800d1a8 <ucdr_buffer_remaining>
 800e9e0:	2808      	cmp	r0, #8
 800e9e2:	d803      	bhi.n	800e9ec <uxr_read_session_header+0x20>
 800e9e4:	2000      	movs	r0, #0
 800e9e6:	b004      	add	sp, #16
 800e9e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9ec:	f10d 080c 	add.w	r8, sp, #12
 800e9f0:	4633      	mov	r3, r6
 800e9f2:	462a      	mov	r2, r5
 800e9f4:	f8cd 8000 	str.w	r8, [sp]
 800e9f8:	4620      	mov	r0, r4
 800e9fa:	f10d 010b 	add.w	r1, sp, #11
 800e9fe:	f000 fbaf 	bl	800f160 <uxr_deserialize_message_header>
 800ea02:	783a      	ldrb	r2, [r7, #0]
 800ea04:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800ea08:	4293      	cmp	r3, r2
 800ea0a:	d1eb      	bne.n	800e9e4 <uxr_read_session_header+0x18>
 800ea0c:	061b      	lsls	r3, r3, #24
 800ea0e:	d41c      	bmi.n	800ea4a <uxr_read_session_header+0x7e>
 800ea10:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800ea14:	787b      	ldrb	r3, [r7, #1]
 800ea16:	429a      	cmp	r2, r3
 800ea18:	d003      	beq.n	800ea22 <uxr_read_session_header+0x56>
 800ea1a:	2001      	movs	r0, #1
 800ea1c:	f080 0001 	eor.w	r0, r0, #1
 800ea20:	e7e1      	b.n	800e9e6 <uxr_read_session_header+0x1a>
 800ea22:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800ea26:	78bb      	ldrb	r3, [r7, #2]
 800ea28:	429a      	cmp	r2, r3
 800ea2a:	f107 0102 	add.w	r1, r7, #2
 800ea2e:	d1f4      	bne.n	800ea1a <uxr_read_session_header+0x4e>
 800ea30:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800ea34:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ea38:	429a      	cmp	r2, r3
 800ea3a:	d1ee      	bne.n	800ea1a <uxr_read_session_header+0x4e>
 800ea3c:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800ea40:	784b      	ldrb	r3, [r1, #1]
 800ea42:	429a      	cmp	r2, r3
 800ea44:	d1e9      	bne.n	800ea1a <uxr_read_session_header+0x4e>
 800ea46:	2000      	movs	r0, #0
 800ea48:	e7e8      	b.n	800ea1c <uxr_read_session_header+0x50>
 800ea4a:	2001      	movs	r0, #1
 800ea4c:	e7cb      	b.n	800e9e6 <uxr_read_session_header+0x1a>
 800ea4e:	bf00      	nop

0800ea50 <uxr_session_header_offset>:
 800ea50:	f990 3000 	ldrsb.w	r3, [r0]
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	bfac      	ite	ge
 800ea58:	2008      	movge	r0, #8
 800ea5a:	2004      	movlt	r0, #4
 800ea5c:	4770      	bx	lr
 800ea5e:	bf00      	nop

0800ea60 <uxr_init_base_object_request>:
 800ea60:	b510      	push	{r4, lr}
 800ea62:	88c3      	ldrh	r3, [r0, #6]
 800ea64:	b082      	sub	sp, #8
 800ea66:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 800ea6a:	9101      	str	r1, [sp, #4]
 800ea6c:	f1a3 010a 	sub.w	r1, r3, #10
 800ea70:	b289      	uxth	r1, r1
 800ea72:	42a1      	cmp	r1, r4
 800ea74:	d80e      	bhi.n	800ea94 <uxr_init_base_object_request+0x34>
 800ea76:	3301      	adds	r3, #1
 800ea78:	b29c      	uxth	r4, r3
 800ea7a:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800ea7e:	b2db      	uxtb	r3, r3
 800ea80:	80c4      	strh	r4, [r0, #6]
 800ea82:	9801      	ldr	r0, [sp, #4]
 800ea84:	7011      	strb	r1, [r2, #0]
 800ea86:	7053      	strb	r3, [r2, #1]
 800ea88:	1c91      	adds	r1, r2, #2
 800ea8a:	f7fe fe49 	bl	800d720 <uxr_object_id_to_raw>
 800ea8e:	4620      	mov	r0, r4
 800ea90:	b002      	add	sp, #8
 800ea92:	bd10      	pop	{r4, pc}
 800ea94:	230a      	movs	r3, #10
 800ea96:	2100      	movs	r1, #0
 800ea98:	461c      	mov	r4, r3
 800ea9a:	e7f1      	b.n	800ea80 <uxr_init_base_object_request+0x20>

0800ea9c <uxr_parse_base_object_request>:
 800ea9c:	b570      	push	{r4, r5, r6, lr}
 800ea9e:	4604      	mov	r4, r0
 800eaa0:	3002      	adds	r0, #2
 800eaa2:	460d      	mov	r5, r1
 800eaa4:	4616      	mov	r6, r2
 800eaa6:	f7fe fe27 	bl	800d6f8 <uxr_object_id_from_raw>
 800eaaa:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800eaae:	8028      	strh	r0, [r5, #0]
 800eab0:	806b      	strh	r3, [r5, #2]
 800eab2:	7822      	ldrb	r2, [r4, #0]
 800eab4:	7863      	ldrb	r3, [r4, #1]
 800eab6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800eaba:	8033      	strh	r3, [r6, #0]
 800eabc:	bd70      	pop	{r4, r5, r6, pc}
 800eabe:	bf00      	nop

0800eac0 <uxr_stream_id>:
 800eac0:	2901      	cmp	r1, #1
 800eac2:	b082      	sub	sp, #8
 800eac4:	d01d      	beq.n	800eb02 <uxr_stream_id+0x42>
 800eac6:	2902      	cmp	r1, #2
 800eac8:	f04f 0c00 	mov.w	ip, #0
 800eacc:	d01e      	beq.n	800eb0c <uxr_stream_id+0x4c>
 800eace:	2300      	movs	r3, #0
 800ead0:	f36c 0307 	bfi	r3, ip, #0, #8
 800ead4:	f360 230f 	bfi	r3, r0, #8, #8
 800ead8:	f361 4317 	bfi	r3, r1, #16, #8
 800eadc:	f362 631f 	bfi	r3, r2, #24, #8
 800eae0:	b2da      	uxtb	r2, r3
 800eae2:	2000      	movs	r0, #0
 800eae4:	f362 0007 	bfi	r0, r2, #0, #8
 800eae8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800eaec:	f362 200f 	bfi	r0, r2, #8, #8
 800eaf0:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800eaf4:	f362 4017 	bfi	r0, r2, #16, #8
 800eaf8:	0e1b      	lsrs	r3, r3, #24
 800eafa:	f363 601f 	bfi	r0, r3, #24, #8
 800eafe:	b002      	add	sp, #8
 800eb00:	4770      	bx	lr
 800eb02:	f100 0c01 	add.w	ip, r0, #1
 800eb06:	fa5f fc8c 	uxtb.w	ip, ip
 800eb0a:	e7e0      	b.n	800eace <uxr_stream_id+0xe>
 800eb0c:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 800eb10:	e7dd      	b.n	800eace <uxr_stream_id+0xe>
 800eb12:	bf00      	nop

0800eb14 <uxr_stream_id_from_raw>:
 800eb14:	b082      	sub	sp, #8
 800eb16:	b130      	cbz	r0, 800eb26 <uxr_stream_id_from_raw+0x12>
 800eb18:	0603      	lsls	r3, r0, #24
 800eb1a:	d420      	bmi.n	800eb5e <uxr_stream_id_from_raw+0x4a>
 800eb1c:	1e42      	subs	r2, r0, #1
 800eb1e:	b2d2      	uxtb	r2, r2
 800eb20:	f04f 0c01 	mov.w	ip, #1
 800eb24:	e001      	b.n	800eb2a <uxr_stream_id_from_raw+0x16>
 800eb26:	4684      	mov	ip, r0
 800eb28:	4602      	mov	r2, r0
 800eb2a:	2300      	movs	r3, #0
 800eb2c:	f360 0307 	bfi	r3, r0, #0, #8
 800eb30:	f362 230f 	bfi	r3, r2, #8, #8
 800eb34:	f36c 4317 	bfi	r3, ip, #16, #8
 800eb38:	f361 631f 	bfi	r3, r1, #24, #8
 800eb3c:	b2da      	uxtb	r2, r3
 800eb3e:	2000      	movs	r0, #0
 800eb40:	f362 0007 	bfi	r0, r2, #0, #8
 800eb44:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800eb48:	f362 200f 	bfi	r0, r2, #8, #8
 800eb4c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800eb50:	f362 4017 	bfi	r0, r2, #16, #8
 800eb54:	0e1b      	lsrs	r3, r3, #24
 800eb56:	f363 601f 	bfi	r0, r3, #24, #8
 800eb5a:	b002      	add	sp, #8
 800eb5c:	4770      	bx	lr
 800eb5e:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 800eb62:	f04f 0c02 	mov.w	ip, #2
 800eb66:	e7e0      	b.n	800eb2a <uxr_stream_id_from_raw+0x16>

0800eb68 <uxr_init_stream_storage>:
 800eb68:	2300      	movs	r3, #0
 800eb6a:	7403      	strb	r3, [r0, #16]
 800eb6c:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 800eb70:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 800eb74:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 800eb78:	4770      	bx	lr
 800eb7a:	bf00      	nop

0800eb7c <uxr_reset_stream_storage>:
 800eb7c:	b570      	push	{r4, r5, r6, lr}
 800eb7e:	7c03      	ldrb	r3, [r0, #16]
 800eb80:	4604      	mov	r4, r0
 800eb82:	b153      	cbz	r3, 800eb9a <uxr_reset_stream_storage+0x1e>
 800eb84:	4606      	mov	r6, r0
 800eb86:	2500      	movs	r5, #0
 800eb88:	4630      	mov	r0, r6
 800eb8a:	f006 fc1b 	bl	80153c4 <uxr_reset_output_best_effort_stream>
 800eb8e:	7c23      	ldrb	r3, [r4, #16]
 800eb90:	3501      	adds	r5, #1
 800eb92:	42ab      	cmp	r3, r5
 800eb94:	f106 0610 	add.w	r6, r6, #16
 800eb98:	d8f6      	bhi.n	800eb88 <uxr_reset_stream_storage+0xc>
 800eb9a:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800eb9e:	b163      	cbz	r3, 800ebba <uxr_reset_stream_storage+0x3e>
 800eba0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800eba4:	2500      	movs	r5, #0
 800eba6:	4630      	mov	r0, r6
 800eba8:	f006 fa0e 	bl	8014fc8 <uxr_reset_input_best_effort_stream>
 800ebac:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800ebb0:	3501      	adds	r5, #1
 800ebb2:	42ab      	cmp	r3, r5
 800ebb4:	f106 0602 	add.w	r6, r6, #2
 800ebb8:	d8f5      	bhi.n	800eba6 <uxr_reset_stream_storage+0x2a>
 800ebba:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800ebbe:	b163      	cbz	r3, 800ebda <uxr_reset_stream_storage+0x5e>
 800ebc0:	f104 0618 	add.w	r6, r4, #24
 800ebc4:	2500      	movs	r5, #0
 800ebc6:	4630      	mov	r0, r6
 800ebc8:	f006 fca8 	bl	801551c <uxr_reset_output_reliable_stream>
 800ebcc:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800ebd0:	3501      	adds	r5, #1
 800ebd2:	42ab      	cmp	r3, r5
 800ebd4:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 800ebd8:	d8f5      	bhi.n	800ebc6 <uxr_reset_stream_storage+0x4a>
 800ebda:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800ebde:	b163      	cbz	r3, 800ebfa <uxr_reset_stream_storage+0x7e>
 800ebe0:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 800ebe4:	2500      	movs	r5, #0
 800ebe6:	4630      	mov	r0, r6
 800ebe8:	f006 fa62 	bl	80150b0 <uxr_reset_input_reliable_stream>
 800ebec:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800ebf0:	3501      	adds	r5, #1
 800ebf2:	42ab      	cmp	r3, r5
 800ebf4:	f106 0618 	add.w	r6, r6, #24
 800ebf8:	d8f5      	bhi.n	800ebe6 <uxr_reset_stream_storage+0x6a>
 800ebfa:	bd70      	pop	{r4, r5, r6, pc}

0800ebfc <uxr_add_output_best_effort_buffer>:
 800ebfc:	b510      	push	{r4, lr}
 800ebfe:	7c04      	ldrb	r4, [r0, #16]
 800ec00:	f104 0c01 	add.w	ip, r4, #1
 800ec04:	b082      	sub	sp, #8
 800ec06:	f880 c010 	strb.w	ip, [r0, #16]
 800ec0a:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800ec0e:	f006 fbcf 	bl	80153b0 <uxr_init_output_best_effort_stream>
 800ec12:	2201      	movs	r2, #1
 800ec14:	4611      	mov	r1, r2
 800ec16:	4620      	mov	r0, r4
 800ec18:	b002      	add	sp, #8
 800ec1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec1e:	f7ff bf4f 	b.w	800eac0 <uxr_stream_id>
 800ec22:	bf00      	nop

0800ec24 <uxr_add_output_reliable_buffer>:
 800ec24:	b510      	push	{r4, lr}
 800ec26:	b084      	sub	sp, #16
 800ec28:	4684      	mov	ip, r0
 800ec2a:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800ec2e:	9000      	str	r0, [sp, #0]
 800ec30:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 800ec34:	2028      	movs	r0, #40	@ 0x28
 800ec36:	fb00 c004 	mla	r0, r0, r4, ip
 800ec3a:	f104 0e01 	add.w	lr, r4, #1
 800ec3e:	3018      	adds	r0, #24
 800ec40:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 800ec44:	f006 fc32 	bl	80154ac <uxr_init_output_reliable_stream>
 800ec48:	2201      	movs	r2, #1
 800ec4a:	2102      	movs	r1, #2
 800ec4c:	4620      	mov	r0, r4
 800ec4e:	b004      	add	sp, #16
 800ec50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec54:	f7ff bf34 	b.w	800eac0 <uxr_stream_id>

0800ec58 <uxr_add_input_best_effort_buffer>:
 800ec58:	b510      	push	{r4, lr}
 800ec5a:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 800ec5e:	4603      	mov	r3, r0
 800ec60:	1c62      	adds	r2, r4, #1
 800ec62:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 800ec66:	b082      	sub	sp, #8
 800ec68:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800ec6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ec70:	f006 f9a6 	bl	8014fc0 <uxr_init_input_best_effort_stream>
 800ec74:	2200      	movs	r2, #0
 800ec76:	2101      	movs	r1, #1
 800ec78:	4620      	mov	r0, r4
 800ec7a:	b002      	add	sp, #8
 800ec7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec80:	f7ff bf1e 	b.w	800eac0 <uxr_stream_id>

0800ec84 <uxr_add_input_reliable_buffer>:
 800ec84:	b510      	push	{r4, lr}
 800ec86:	b084      	sub	sp, #16
 800ec88:	4684      	mov	ip, r0
 800ec8a:	9806      	ldr	r0, [sp, #24]
 800ec8c:	9000      	str	r0, [sp, #0]
 800ec8e:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 800ec92:	2018      	movs	r0, #24
 800ec94:	fb00 c004 	mla	r0, r0, r4, ip
 800ec98:	f104 0e01 	add.w	lr, r4, #1
 800ec9c:	3048      	adds	r0, #72	@ 0x48
 800ec9e:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 800eca2:	f006 f9d9 	bl	8015058 <uxr_init_input_reliable_stream>
 800eca6:	2200      	movs	r2, #0
 800eca8:	2102      	movs	r1, #2
 800ecaa:	4620      	mov	r0, r4
 800ecac:	b004      	add	sp, #16
 800ecae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ecb2:	f7ff bf05 	b.w	800eac0 <uxr_stream_id>
 800ecb6:	bf00      	nop

0800ecb8 <uxr_get_output_best_effort_stream>:
 800ecb8:	7c03      	ldrb	r3, [r0, #16]
 800ecba:	428b      	cmp	r3, r1
 800ecbc:	bf8c      	ite	hi
 800ecbe:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800ecc2:	2000      	movls	r0, #0
 800ecc4:	4770      	bx	lr
 800ecc6:	bf00      	nop

0800ecc8 <uxr_get_output_reliable_stream>:
 800ecc8:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800eccc:	428b      	cmp	r3, r1
 800ecce:	bf83      	ittte	hi
 800ecd0:	2328      	movhi	r3, #40	@ 0x28
 800ecd2:	fb03 0001 	mlahi	r0, r3, r1, r0
 800ecd6:	3018      	addhi	r0, #24
 800ecd8:	2000      	movls	r0, #0
 800ecda:	4770      	bx	lr

0800ecdc <uxr_get_input_best_effort_stream>:
 800ecdc:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800ece0:	428b      	cmp	r3, r1
 800ece2:	bf86      	itte	hi
 800ece4:	3121      	addhi	r1, #33	@ 0x21
 800ece6:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 800ecea:	2000      	movls	r0, #0
 800ecec:	4770      	bx	lr
 800ecee:	bf00      	nop

0800ecf0 <uxr_get_input_reliable_stream>:
 800ecf0:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 800ecf4:	428b      	cmp	r3, r1
 800ecf6:	bf83      	ittte	hi
 800ecf8:	2318      	movhi	r3, #24
 800ecfa:	fb03 0001 	mlahi	r0, r3, r1, r0
 800ecfe:	3048      	addhi	r0, #72	@ 0x48
 800ed00:	2000      	movls	r0, #0
 800ed02:	4770      	bx	lr

0800ed04 <uxr_output_streams_confirmed>:
 800ed04:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800ed08:	b183      	cbz	r3, 800ed2c <uxr_output_streams_confirmed+0x28>
 800ed0a:	b570      	push	{r4, r5, r6, lr}
 800ed0c:	4606      	mov	r6, r0
 800ed0e:	f100 0518 	add.w	r5, r0, #24
 800ed12:	2400      	movs	r4, #0
 800ed14:	e001      	b.n	800ed1a <uxr_output_streams_confirmed+0x16>
 800ed16:	3528      	adds	r5, #40	@ 0x28
 800ed18:	b138      	cbz	r0, 800ed2a <uxr_output_streams_confirmed+0x26>
 800ed1a:	4628      	mov	r0, r5
 800ed1c:	f006 fe6e 	bl	80159fc <uxr_is_output_up_to_date>
 800ed20:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 800ed24:	3401      	adds	r4, #1
 800ed26:	42a3      	cmp	r3, r4
 800ed28:	d8f5      	bhi.n	800ed16 <uxr_output_streams_confirmed+0x12>
 800ed2a:	bd70      	pop	{r4, r5, r6, pc}
 800ed2c:	2001      	movs	r0, #1
 800ed2e:	4770      	bx	lr

0800ed30 <uxr_buffer_submessage_header>:
 800ed30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed32:	4604      	mov	r4, r0
 800ed34:	460e      	mov	r6, r1
 800ed36:	2104      	movs	r1, #4
 800ed38:	4615      	mov	r5, r2
 800ed3a:	461f      	mov	r7, r3
 800ed3c:	f7fe fa1e 	bl	800d17c <ucdr_align_to>
 800ed40:	2301      	movs	r3, #1
 800ed42:	ea47 0203 	orr.w	r2, r7, r3
 800ed46:	4631      	mov	r1, r6
 800ed48:	7523      	strb	r3, [r4, #20]
 800ed4a:	4620      	mov	r0, r4
 800ed4c:	462b      	mov	r3, r5
 800ed4e:	f000 fa27 	bl	800f1a0 <uxr_serialize_submessage_header>
 800ed52:	4620      	mov	r0, r4
 800ed54:	f7fe fa28 	bl	800d1a8 <ucdr_buffer_remaining>
 800ed58:	42a8      	cmp	r0, r5
 800ed5a:	bf34      	ite	cc
 800ed5c:	2000      	movcc	r0, #0
 800ed5e:	2001      	movcs	r0, #1
 800ed60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed62:	bf00      	nop

0800ed64 <uxr_read_submessage_header>:
 800ed64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed68:	4604      	mov	r4, r0
 800ed6a:	460d      	mov	r5, r1
 800ed6c:	2104      	movs	r1, #4
 800ed6e:	4616      	mov	r6, r2
 800ed70:	4698      	mov	r8, r3
 800ed72:	f7fe fa03 	bl	800d17c <ucdr_align_to>
 800ed76:	4620      	mov	r0, r4
 800ed78:	f7fe fa16 	bl	800d1a8 <ucdr_buffer_remaining>
 800ed7c:	2803      	cmp	r0, #3
 800ed7e:	bf8c      	ite	hi
 800ed80:	2701      	movhi	r7, #1
 800ed82:	2700      	movls	r7, #0
 800ed84:	d802      	bhi.n	800ed8c <uxr_read_submessage_header+0x28>
 800ed86:	4638      	mov	r0, r7
 800ed88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed8c:	4633      	mov	r3, r6
 800ed8e:	4642      	mov	r2, r8
 800ed90:	4620      	mov	r0, r4
 800ed92:	4629      	mov	r1, r5
 800ed94:	f000 fa18 	bl	800f1c8 <uxr_deserialize_submessage_header>
 800ed98:	f898 3000 	ldrb.w	r3, [r8]
 800ed9c:	f003 0201 	and.w	r2, r3, #1
 800eda0:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800eda4:	f888 3000 	strb.w	r3, [r8]
 800eda8:	7522      	strb	r2, [r4, #20]
 800edaa:	4638      	mov	r0, r7
 800edac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800edb0 <uxr_submessage_padding>:
 800edb0:	f010 0003 	ands.w	r0, r0, #3
 800edb4:	bf18      	it	ne
 800edb6:	f1c0 0004 	rsbne	r0, r0, #4
 800edba:	4770      	bx	lr

0800edbc <uxr_millis>:
 800edbc:	b510      	push	{r4, lr}
 800edbe:	b084      	sub	sp, #16
 800edc0:	4669      	mov	r1, sp
 800edc2:	2001      	movs	r0, #1
 800edc4:	f7f3 fa88 	bl	80022d8 <clock_gettime>
 800edc8:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 800edcc:	4906      	ldr	r1, [pc, #24]	@ (800ede8 <uxr_millis+0x2c>)
 800edce:	fba0 0301 	umull	r0, r3, r0, r1
 800edd2:	1900      	adds	r0, r0, r4
 800edd4:	fb01 3102 	mla	r1, r1, r2, r3
 800edd8:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800eddc:	4a03      	ldr	r2, [pc, #12]	@ (800edec <uxr_millis+0x30>)
 800edde:	2300      	movs	r3, #0
 800ede0:	f7f1 ff12 	bl	8000c08 <__aeabi_ldivmod>
 800ede4:	b004      	add	sp, #16
 800ede6:	bd10      	pop	{r4, pc}
 800ede8:	3b9aca00 	.word	0x3b9aca00
 800edec:	000f4240 	.word	0x000f4240

0800edf0 <uxr_nanos>:
 800edf0:	b510      	push	{r4, lr}
 800edf2:	b084      	sub	sp, #16
 800edf4:	4669      	mov	r1, sp
 800edf6:	2001      	movs	r0, #1
 800edf8:	f7f3 fa6e 	bl	80022d8 <clock_gettime>
 800edfc:	4a06      	ldr	r2, [pc, #24]	@ (800ee18 <uxr_nanos+0x28>)
 800edfe:	9800      	ldr	r0, [sp, #0]
 800ee00:	9902      	ldr	r1, [sp, #8]
 800ee02:	9c01      	ldr	r4, [sp, #4]
 800ee04:	fba0 0302 	umull	r0, r3, r0, r2
 800ee08:	1840      	adds	r0, r0, r1
 800ee0a:	fb02 3304 	mla	r3, r2, r4, r3
 800ee0e:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 800ee12:	b004      	add	sp, #16
 800ee14:	bd10      	pop	{r4, pc}
 800ee16:	bf00      	nop
 800ee18:	3b9aca00 	.word	0x3b9aca00

0800ee1c <on_full_output_buffer_fragmented>:
 800ee1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee20:	460c      	mov	r4, r1
 800ee22:	b08a      	sub	sp, #40	@ 0x28
 800ee24:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 800ee28:	4606      	mov	r6, r0
 800ee2a:	f104 0008 	add.w	r0, r4, #8
 800ee2e:	f7ff ff4b 	bl	800ecc8 <uxr_get_output_reliable_stream>
 800ee32:	4605      	mov	r5, r0
 800ee34:	f006 fdec 	bl	8015a10 <get_available_free_slots>
 800ee38:	b968      	cbnz	r0, 800ee56 <on_full_output_buffer_fragmented+0x3a>
 800ee3a:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 800ee3e:	4620      	mov	r0, r4
 800ee40:	4798      	blx	r3
 800ee42:	b918      	cbnz	r0, 800ee4c <on_full_output_buffer_fragmented+0x30>
 800ee44:	2001      	movs	r0, #1
 800ee46:	b00a      	add	sp, #40	@ 0x28
 800ee48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee4c:	4628      	mov	r0, r5
 800ee4e:	f006 fddf 	bl	8015a10 <get_available_free_slots>
 800ee52:	2800      	cmp	r0, #0
 800ee54:	d0f6      	beq.n	800ee44 <on_full_output_buffer_fragmented+0x28>
 800ee56:	8929      	ldrh	r1, [r5, #8]
 800ee58:	89eb      	ldrh	r3, [r5, #14]
 800ee5a:	7b28      	ldrb	r0, [r5, #12]
 800ee5c:	686a      	ldr	r2, [r5, #4]
 800ee5e:	fbb2 f8f1 	udiv	r8, r2, r1
 800ee62:	fbb3 f2f1 	udiv	r2, r3, r1
 800ee66:	fb01 3112 	mls	r1, r1, r2, r3
 800ee6a:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 800ee6e:	b289      	uxth	r1, r1
 800ee70:	fb08 f101 	mul.w	r1, r8, r1
 800ee74:	30fc      	adds	r0, #252	@ 0xfc
 800ee76:	f1a8 0804 	sub.w	r8, r8, #4
 800ee7a:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 800ee7e:	4440      	add	r0, r8
 800ee80:	b287      	uxth	r7, r0
 800ee82:	1bdb      	subs	r3, r3, r7
 800ee84:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 800ee88:	682b      	ldr	r3, [r5, #0]
 800ee8a:	3104      	adds	r1, #4
 800ee8c:	4419      	add	r1, r3
 800ee8e:	4642      	mov	r2, r8
 800ee90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ee94:	9300      	str	r3, [sp, #0]
 800ee96:	a802      	add	r0, sp, #8
 800ee98:	2300      	movs	r3, #0
 800ee9a:	f7fe f943 	bl	800d124 <ucdr_init_buffer_origin_offset>
 800ee9e:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 800eea2:	f102 0308 	add.w	r3, r2, #8
 800eea6:	4543      	cmp	r3, r8
 800eea8:	d928      	bls.n	800eefc <on_full_output_buffer_fragmented+0xe0>
 800eeaa:	463a      	mov	r2, r7
 800eeac:	2300      	movs	r3, #0
 800eeae:	210d      	movs	r1, #13
 800eeb0:	a802      	add	r0, sp, #8
 800eeb2:	f7ff ff3d 	bl	800ed30 <uxr_buffer_submessage_header>
 800eeb6:	8929      	ldrh	r1, [r5, #8]
 800eeb8:	89eb      	ldrh	r3, [r5, #14]
 800eeba:	fbb3 f2f1 	udiv	r2, r3, r1
 800eebe:	fb01 3312 	mls	r3, r1, r2, r3
 800eec2:	b29b      	uxth	r3, r3
 800eec4:	686a      	ldr	r2, [r5, #4]
 800eec6:	fbb2 f2f1 	udiv	r2, r2, r1
 800eeca:	fb02 f303 	mul.w	r3, r2, r3
 800eece:	682a      	ldr	r2, [r5, #0]
 800eed0:	f842 8003 	str.w	r8, [r2, r3]
 800eed4:	89e8      	ldrh	r0, [r5, #14]
 800eed6:	2101      	movs	r1, #1
 800eed8:	f006 fdba 	bl	8015a50 <uxr_seq_num_add>
 800eedc:	9904      	ldr	r1, [sp, #16]
 800eede:	9a03      	ldr	r2, [sp, #12]
 800eee0:	81e8      	strh	r0, [r5, #14]
 800eee2:	1a52      	subs	r2, r2, r1
 800eee4:	4630      	mov	r0, r6
 800eee6:	f7fe f92f 	bl	800d148 <ucdr_init_buffer>
 800eeea:	4630      	mov	r0, r6
 800eeec:	490f      	ldr	r1, [pc, #60]	@ (800ef2c <on_full_output_buffer_fragmented+0x110>)
 800eeee:	4622      	mov	r2, r4
 800eef0:	f7fe f8fe 	bl	800d0f0 <ucdr_set_on_full_buffer_callback>
 800eef4:	2000      	movs	r0, #0
 800eef6:	b00a      	add	sp, #40	@ 0x28
 800eef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eefc:	b292      	uxth	r2, r2
 800eefe:	2302      	movs	r3, #2
 800ef00:	210d      	movs	r1, #13
 800ef02:	a802      	add	r0, sp, #8
 800ef04:	f7ff ff14 	bl	800ed30 <uxr_buffer_submessage_header>
 800ef08:	8928      	ldrh	r0, [r5, #8]
 800ef0a:	89eb      	ldrh	r3, [r5, #14]
 800ef0c:	fbb3 f1f0 	udiv	r1, r3, r0
 800ef10:	fb00 3311 	mls	r3, r0, r1, r3
 800ef14:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 800ef18:	6869      	ldr	r1, [r5, #4]
 800ef1a:	fbb1 f1f0 	udiv	r1, r1, r0
 800ef1e:	b29b      	uxth	r3, r3
 800ef20:	fb01 f303 	mul.w	r3, r1, r3
 800ef24:	6829      	ldr	r1, [r5, #0]
 800ef26:	3208      	adds	r2, #8
 800ef28:	50ca      	str	r2, [r1, r3]
 800ef2a:	e7d3      	b.n	800eed4 <on_full_output_buffer_fragmented+0xb8>
 800ef2c:	0800ee1d 	.word	0x0800ee1d

0800ef30 <uxr_prepare_output_stream>:
 800ef30:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef32:	b087      	sub	sp, #28
 800ef34:	2707      	movs	r7, #7
 800ef36:	9202      	str	r2, [sp, #8]
 800ef38:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ef3a:	9103      	str	r1, [sp, #12]
 800ef3c:	2500      	movs	r5, #0
 800ef3e:	3204      	adds	r2, #4
 800ef40:	e9cd 7500 	strd	r7, r5, [sp]
 800ef44:	461c      	mov	r4, r3
 800ef46:	4606      	mov	r6, r0
 800ef48:	f7ff fc54 	bl	800e7f4 <uxr_prepare_stream_to_write_submessage>
 800ef4c:	f080 0201 	eor.w	r2, r0, #1
 800ef50:	b2d2      	uxtb	r2, r2
 800ef52:	75a2      	strb	r2, [r4, #22]
 800ef54:	b112      	cbz	r2, 800ef5c <uxr_prepare_output_stream+0x2c>
 800ef56:	4628      	mov	r0, r5
 800ef58:	b007      	add	sp, #28
 800ef5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef5c:	aa05      	add	r2, sp, #20
 800ef5e:	9902      	ldr	r1, [sp, #8]
 800ef60:	4630      	mov	r0, r6
 800ef62:	f7ff fd7d 	bl	800ea60 <uxr_init_base_object_request>
 800ef66:	a905      	add	r1, sp, #20
 800ef68:	4605      	mov	r5, r0
 800ef6a:	4620      	mov	r0, r4
 800ef6c:	f001 f88c 	bl	8010088 <uxr_serialize_WRITE_DATA_Payload_Data>
 800ef70:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 800ef74:	69a6      	ldr	r6, [r4, #24]
 800ef76:	69e7      	ldr	r7, [r4, #28]
 800ef78:	1a52      	subs	r2, r2, r1
 800ef7a:	4620      	mov	r0, r4
 800ef7c:	f7fe f8e4 	bl	800d148 <ucdr_init_buffer>
 800ef80:	4620      	mov	r0, r4
 800ef82:	463a      	mov	r2, r7
 800ef84:	4631      	mov	r1, r6
 800ef86:	f7fe f8b3 	bl	800d0f0 <ucdr_set_on_full_buffer_callback>
 800ef8a:	4628      	mov	r0, r5
 800ef8c:	b007      	add	sp, #28
 800ef8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ef90 <uxr_prepare_output_stream_fragmented>:
 800ef90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef94:	b091      	sub	sp, #68	@ 0x44
 800ef96:	4605      	mov	r5, r0
 800ef98:	9105      	str	r1, [sp, #20]
 800ef9a:	3008      	adds	r0, #8
 800ef9c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800efa0:	461e      	mov	r6, r3
 800efa2:	9204      	str	r2, [sp, #16]
 800efa4:	f7ff fe90 	bl	800ecc8 <uxr_get_output_reliable_stream>
 800efa8:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800efac:	2b01      	cmp	r3, #1
 800efae:	f000 8091 	beq.w	800f0d4 <uxr_prepare_output_stream_fragmented+0x144>
 800efb2:	4604      	mov	r4, r0
 800efb4:	2800      	cmp	r0, #0
 800efb6:	f000 808d 	beq.w	800f0d4 <uxr_prepare_output_stream_fragmented+0x144>
 800efba:	f006 fd29 	bl	8015a10 <get_available_free_slots>
 800efbe:	2800      	cmp	r0, #0
 800efc0:	f000 8083 	beq.w	800f0ca <uxr_prepare_output_stream_fragmented+0x13a>
 800efc4:	8922      	ldrh	r2, [r4, #8]
 800efc6:	89e7      	ldrh	r7, [r4, #14]
 800efc8:	fbb7 f9f2 	udiv	r9, r7, r2
 800efcc:	fb02 7919 	mls	r9, r2, r9, r7
 800efd0:	fa1f f989 	uxth.w	r9, r9
 800efd4:	6863      	ldr	r3, [r4, #4]
 800efd6:	fbb3 f2f2 	udiv	r2, r3, r2
 800efda:	6823      	ldr	r3, [r4, #0]
 800efdc:	9203      	str	r2, [sp, #12]
 800efde:	fb02 f909 	mul.w	r9, r2, r9
 800efe2:	f109 0904 	add.w	r9, r9, #4
 800efe6:	4499      	add	r9, r3
 800efe8:	7b23      	ldrb	r3, [r4, #12]
 800efea:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800efee:	4543      	cmp	r3, r8
 800eff0:	f1a2 0b04 	sub.w	fp, r2, #4
 800eff4:	d37a      	bcc.n	800f0ec <uxr_prepare_output_stream_fragmented+0x15c>
 800eff6:	f1ab 0a04 	sub.w	sl, fp, #4
 800effa:	ebaa 0a03 	sub.w	sl, sl, r3
 800effe:	465a      	mov	r2, fp
 800f000:	2300      	movs	r3, #0
 800f002:	4649      	mov	r1, r9
 800f004:	a808      	add	r0, sp, #32
 800f006:	f8cd 8000 	str.w	r8, [sp]
 800f00a:	f7fe f88b 	bl	800d124 <ucdr_init_buffer_origin_offset>
 800f00e:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800f010:	fa1f fa8a 	uxth.w	sl, sl
 800f014:	4652      	mov	r2, sl
 800f016:	f103 0a08 	add.w	sl, r3, #8
 800f01a:	45da      	cmp	sl, fp
 800f01c:	bf34      	ite	cc
 800f01e:	2302      	movcc	r3, #2
 800f020:	2300      	movcs	r3, #0
 800f022:	210d      	movs	r1, #13
 800f024:	a808      	add	r0, sp, #32
 800f026:	f7ff fe83 	bl	800ed30 <uxr_buffer_submessage_header>
 800f02a:	8921      	ldrh	r1, [r4, #8]
 800f02c:	fbb7 f2f1 	udiv	r2, r7, r1
 800f030:	fb01 7212 	mls	r2, r1, r2, r7
 800f034:	b292      	uxth	r2, r2
 800f036:	6863      	ldr	r3, [r4, #4]
 800f038:	fbb3 f3f1 	udiv	r3, r3, r1
 800f03c:	fb02 f303 	mul.w	r3, r2, r3
 800f040:	6822      	ldr	r2, [r4, #0]
 800f042:	4638      	mov	r0, r7
 800f044:	f842 b003 	str.w	fp, [r2, r3]
 800f048:	2101      	movs	r1, #1
 800f04a:	f006 fd01 	bl	8015a50 <uxr_seq_num_add>
 800f04e:	9b03      	ldr	r3, [sp, #12]
 800f050:	f108 0104 	add.w	r1, r8, #4
 800f054:	f1a3 0208 	sub.w	r2, r3, #8
 800f058:	eba2 0208 	sub.w	r2, r2, r8
 800f05c:	4449      	add	r1, r9
 800f05e:	4607      	mov	r7, r0
 800f060:	4630      	mov	r0, r6
 800f062:	f7fe f871 	bl	800d148 <ucdr_init_buffer>
 800f066:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800f068:	81e7      	strh	r7, [r4, #14]
 800f06a:	1d1a      	adds	r2, r3, #4
 800f06c:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800f070:	bf28      	it	cs
 800f072:	2200      	movcs	r2, #0
 800f074:	2300      	movs	r3, #0
 800f076:	b292      	uxth	r2, r2
 800f078:	2107      	movs	r1, #7
 800f07a:	4630      	mov	r0, r6
 800f07c:	f7ff fe58 	bl	800ed30 <uxr_buffer_submessage_header>
 800f080:	9904      	ldr	r1, [sp, #16]
 800f082:	aa07      	add	r2, sp, #28
 800f084:	4628      	mov	r0, r5
 800f086:	f7ff fceb 	bl	800ea60 <uxr_init_base_object_request>
 800f08a:	4604      	mov	r4, r0
 800f08c:	b318      	cbz	r0, 800f0d6 <uxr_prepare_output_stream_fragmented+0x146>
 800f08e:	a907      	add	r1, sp, #28
 800f090:	4630      	mov	r0, r6
 800f092:	f000 fff9 	bl	8010088 <uxr_serialize_WRITE_DATA_Payload_Data>
 800f096:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 800f09a:	4630      	mov	r0, r6
 800f09c:	1a52      	subs	r2, r2, r1
 800f09e:	f7fe f853 	bl	800d148 <ucdr_init_buffer>
 800f0a2:	9b05      	ldr	r3, [sp, #20]
 800f0a4:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 800f0a8:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800f0aa:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 800f0ae:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800f0b0:	491b      	ldr	r1, [pc, #108]	@ (800f120 <uxr_prepare_output_stream_fragmented+0x190>)
 800f0b2:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 800f0b6:	4630      	mov	r0, r6
 800f0b8:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 800f0bc:	462a      	mov	r2, r5
 800f0be:	f7fe f817 	bl	800d0f0 <ucdr_set_on_full_buffer_callback>
 800f0c2:	4620      	mov	r0, r4
 800f0c4:	b011      	add	sp, #68	@ 0x44
 800f0c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0ca:	991c      	ldr	r1, [sp, #112]	@ 0x70
 800f0cc:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800f0ce:	4628      	mov	r0, r5
 800f0d0:	4798      	blx	r3
 800f0d2:	b920      	cbnz	r0, 800f0de <uxr_prepare_output_stream_fragmented+0x14e>
 800f0d4:	2400      	movs	r4, #0
 800f0d6:	4620      	mov	r0, r4
 800f0d8:	b011      	add	sp, #68	@ 0x44
 800f0da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0de:	4620      	mov	r0, r4
 800f0e0:	f006 fc96 	bl	8015a10 <get_available_free_slots>
 800f0e4:	2800      	cmp	r0, #0
 800f0e6:	f47f af6d 	bne.w	800efc4 <uxr_prepare_output_stream_fragmented+0x34>
 800f0ea:	e7f3      	b.n	800f0d4 <uxr_prepare_output_stream_fragmented+0x144>
 800f0ec:	4638      	mov	r0, r7
 800f0ee:	2101      	movs	r1, #1
 800f0f0:	f006 fcae 	bl	8015a50 <uxr_seq_num_add>
 800f0f4:	8921      	ldrh	r1, [r4, #8]
 800f0f6:	fbb0 f2f1 	udiv	r2, r0, r1
 800f0fa:	fb01 0912 	mls	r9, r1, r2, r0
 800f0fe:	fa1f f289 	uxth.w	r2, r9
 800f102:	6863      	ldr	r3, [r4, #4]
 800f104:	fbb3 f9f1 	udiv	r9, r3, r1
 800f108:	6823      	ldr	r3, [r4, #0]
 800f10a:	fb02 f909 	mul.w	r9, r2, r9
 800f10e:	f109 0904 	add.w	r9, r9, #4
 800f112:	4499      	add	r9, r3
 800f114:	4607      	mov	r7, r0
 800f116:	7b23      	ldrb	r3, [r4, #12]
 800f118:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800f11c:	e76b      	b.n	800eff6 <uxr_prepare_output_stream_fragmented+0x66>
 800f11e:	bf00      	nop
 800f120:	0800ee1d 	.word	0x0800ee1d

0800f124 <uxr_serialize_message_header>:
 800f124:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f126:	b083      	sub	sp, #12
 800f128:	4616      	mov	r6, r2
 800f12a:	4604      	mov	r4, r0
 800f12c:	9301      	str	r3, [sp, #4]
 800f12e:	460d      	mov	r5, r1
 800f130:	9f08      	ldr	r7, [sp, #32]
 800f132:	f004 ff13 	bl	8013f5c <ucdr_serialize_uint8_t>
 800f136:	4631      	mov	r1, r6
 800f138:	4620      	mov	r0, r4
 800f13a:	f004 ff0f 	bl	8013f5c <ucdr_serialize_uint8_t>
 800f13e:	9a01      	ldr	r2, [sp, #4]
 800f140:	2101      	movs	r1, #1
 800f142:	4620      	mov	r0, r4
 800f144:	f004 ffb6 	bl	80140b4 <ucdr_serialize_endian_uint16_t>
 800f148:	062b      	lsls	r3, r5, #24
 800f14a:	d501      	bpl.n	800f150 <uxr_serialize_message_header+0x2c>
 800f14c:	b003      	add	sp, #12
 800f14e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f150:	2204      	movs	r2, #4
 800f152:	4639      	mov	r1, r7
 800f154:	4620      	mov	r0, r4
 800f156:	b003      	add	sp, #12
 800f158:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f15c:	f004 be08 	b.w	8013d70 <ucdr_serialize_array_uint8_t>

0800f160 <uxr_deserialize_message_header>:
 800f160:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f162:	b083      	sub	sp, #12
 800f164:	4616      	mov	r6, r2
 800f166:	4604      	mov	r4, r0
 800f168:	9301      	str	r3, [sp, #4]
 800f16a:	460d      	mov	r5, r1
 800f16c:	9f08      	ldr	r7, [sp, #32]
 800f16e:	f004 ff0b 	bl	8013f88 <ucdr_deserialize_uint8_t>
 800f172:	4631      	mov	r1, r6
 800f174:	4620      	mov	r0, r4
 800f176:	f004 ff07 	bl	8013f88 <ucdr_deserialize_uint8_t>
 800f17a:	9a01      	ldr	r2, [sp, #4]
 800f17c:	2101      	movs	r1, #1
 800f17e:	4620      	mov	r0, r4
 800f180:	f005 f88c 	bl	801429c <ucdr_deserialize_endian_uint16_t>
 800f184:	f995 3000 	ldrsb.w	r3, [r5]
 800f188:	2b00      	cmp	r3, #0
 800f18a:	da01      	bge.n	800f190 <uxr_deserialize_message_header+0x30>
 800f18c:	b003      	add	sp, #12
 800f18e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f190:	2204      	movs	r2, #4
 800f192:	4639      	mov	r1, r7
 800f194:	4620      	mov	r0, r4
 800f196:	b003      	add	sp, #12
 800f198:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f19c:	f004 be4c 	b.w	8013e38 <ucdr_deserialize_array_uint8_t>

0800f1a0 <uxr_serialize_submessage_header>:
 800f1a0:	b530      	push	{r4, r5, lr}
 800f1a2:	b083      	sub	sp, #12
 800f1a4:	4615      	mov	r5, r2
 800f1a6:	4604      	mov	r4, r0
 800f1a8:	9301      	str	r3, [sp, #4]
 800f1aa:	f004 fed7 	bl	8013f5c <ucdr_serialize_uint8_t>
 800f1ae:	4629      	mov	r1, r5
 800f1b0:	4620      	mov	r0, r4
 800f1b2:	f004 fed3 	bl	8013f5c <ucdr_serialize_uint8_t>
 800f1b6:	9a01      	ldr	r2, [sp, #4]
 800f1b8:	2101      	movs	r1, #1
 800f1ba:	4620      	mov	r0, r4
 800f1bc:	b003      	add	sp, #12
 800f1be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f1c2:	f004 bf77 	b.w	80140b4 <ucdr_serialize_endian_uint16_t>
 800f1c6:	bf00      	nop

0800f1c8 <uxr_deserialize_submessage_header>:
 800f1c8:	b530      	push	{r4, r5, lr}
 800f1ca:	b083      	sub	sp, #12
 800f1cc:	4615      	mov	r5, r2
 800f1ce:	4604      	mov	r4, r0
 800f1d0:	9301      	str	r3, [sp, #4]
 800f1d2:	f004 fed9 	bl	8013f88 <ucdr_deserialize_uint8_t>
 800f1d6:	4629      	mov	r1, r5
 800f1d8:	4620      	mov	r0, r4
 800f1da:	f004 fed5 	bl	8013f88 <ucdr_deserialize_uint8_t>
 800f1de:	9a01      	ldr	r2, [sp, #4]
 800f1e0:	2101      	movs	r1, #1
 800f1e2:	4620      	mov	r0, r4
 800f1e4:	b003      	add	sp, #12
 800f1e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f1ea:	f005 b857 	b.w	801429c <ucdr_deserialize_endian_uint16_t>
 800f1ee:	bf00      	nop

0800f1f0 <uxr_serialize_CLIENT_Representation>:
 800f1f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f1f4:	2204      	movs	r2, #4
 800f1f6:	460e      	mov	r6, r1
 800f1f8:	4605      	mov	r5, r0
 800f1fa:	f004 fdb9 	bl	8013d70 <ucdr_serialize_array_uint8_t>
 800f1fe:	2202      	movs	r2, #2
 800f200:	4607      	mov	r7, r0
 800f202:	1d31      	adds	r1, r6, #4
 800f204:	4628      	mov	r0, r5
 800f206:	f004 fdb3 	bl	8013d70 <ucdr_serialize_array_uint8_t>
 800f20a:	4038      	ands	r0, r7
 800f20c:	2202      	movs	r2, #2
 800f20e:	1db1      	adds	r1, r6, #6
 800f210:	b2c7      	uxtb	r7, r0
 800f212:	4628      	mov	r0, r5
 800f214:	f004 fdac 	bl	8013d70 <ucdr_serialize_array_uint8_t>
 800f218:	2204      	movs	r2, #4
 800f21a:	4007      	ands	r7, r0
 800f21c:	f106 0108 	add.w	r1, r6, #8
 800f220:	4628      	mov	r0, r5
 800f222:	f004 fda5 	bl	8013d70 <ucdr_serialize_array_uint8_t>
 800f226:	7b31      	ldrb	r1, [r6, #12]
 800f228:	4007      	ands	r7, r0
 800f22a:	4628      	mov	r0, r5
 800f22c:	f004 fe96 	bl	8013f5c <ucdr_serialize_uint8_t>
 800f230:	7b71      	ldrb	r1, [r6, #13]
 800f232:	4007      	ands	r7, r0
 800f234:	4628      	mov	r0, r5
 800f236:	f004 fe63 	bl	8013f00 <ucdr_serialize_bool>
 800f23a:	7b73      	ldrb	r3, [r6, #13]
 800f23c:	ea07 0800 	and.w	r8, r7, r0
 800f240:	b93b      	cbnz	r3, 800f252 <uxr_serialize_CLIENT_Representation+0x62>
 800f242:	8bb1      	ldrh	r1, [r6, #28]
 800f244:	4628      	mov	r0, r5
 800f246:	f004 feb5 	bl	8013fb4 <ucdr_serialize_uint16_t>
 800f24a:	ea08 0000 	and.w	r0, r8, r0
 800f24e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f252:	6931      	ldr	r1, [r6, #16]
 800f254:	4628      	mov	r0, r5
 800f256:	f005 f897 	bl	8014388 <ucdr_serialize_uint32_t>
 800f25a:	6933      	ldr	r3, [r6, #16]
 800f25c:	b1e3      	cbz	r3, 800f298 <uxr_serialize_CLIENT_Representation+0xa8>
 800f25e:	b1c0      	cbz	r0, 800f292 <uxr_serialize_CLIENT_Representation+0xa2>
 800f260:	4637      	mov	r7, r6
 800f262:	f04f 0900 	mov.w	r9, #0
 800f266:	e001      	b.n	800f26c <uxr_serialize_CLIENT_Representation+0x7c>
 800f268:	3708      	adds	r7, #8
 800f26a:	b194      	cbz	r4, 800f292 <uxr_serialize_CLIENT_Representation+0xa2>
 800f26c:	6979      	ldr	r1, [r7, #20]
 800f26e:	4628      	mov	r0, r5
 800f270:	f005 fdcc 	bl	8014e0c <ucdr_serialize_string>
 800f274:	69b9      	ldr	r1, [r7, #24]
 800f276:	4604      	mov	r4, r0
 800f278:	4628      	mov	r0, r5
 800f27a:	f005 fdc7 	bl	8014e0c <ucdr_serialize_string>
 800f27e:	6933      	ldr	r3, [r6, #16]
 800f280:	f109 0901 	add.w	r9, r9, #1
 800f284:	4004      	ands	r4, r0
 800f286:	4599      	cmp	r9, r3
 800f288:	b2e4      	uxtb	r4, r4
 800f28a:	d3ed      	bcc.n	800f268 <uxr_serialize_CLIENT_Representation+0x78>
 800f28c:	ea08 0804 	and.w	r8, r8, r4
 800f290:	e7d7      	b.n	800f242 <uxr_serialize_CLIENT_Representation+0x52>
 800f292:	f04f 0800 	mov.w	r8, #0
 800f296:	e7d4      	b.n	800f242 <uxr_serialize_CLIENT_Representation+0x52>
 800f298:	ea08 0800 	and.w	r8, r8, r0
 800f29c:	e7d1      	b.n	800f242 <uxr_serialize_CLIENT_Representation+0x52>
 800f29e:	bf00      	nop

0800f2a0 <uxr_deserialize_CLIENT_Representation>:
 800f2a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f2a4:	2204      	movs	r2, #4
 800f2a6:	460c      	mov	r4, r1
 800f2a8:	4605      	mov	r5, r0
 800f2aa:	f004 fdc5 	bl	8013e38 <ucdr_deserialize_array_uint8_t>
 800f2ae:	2202      	movs	r2, #2
 800f2b0:	4607      	mov	r7, r0
 800f2b2:	1d21      	adds	r1, r4, #4
 800f2b4:	4628      	mov	r0, r5
 800f2b6:	f004 fdbf 	bl	8013e38 <ucdr_deserialize_array_uint8_t>
 800f2ba:	4038      	ands	r0, r7
 800f2bc:	2202      	movs	r2, #2
 800f2be:	1da1      	adds	r1, r4, #6
 800f2c0:	b2c6      	uxtb	r6, r0
 800f2c2:	4628      	mov	r0, r5
 800f2c4:	f004 fdb8 	bl	8013e38 <ucdr_deserialize_array_uint8_t>
 800f2c8:	2204      	movs	r2, #4
 800f2ca:	4006      	ands	r6, r0
 800f2cc:	f104 0108 	add.w	r1, r4, #8
 800f2d0:	4628      	mov	r0, r5
 800f2d2:	f004 fdb1 	bl	8013e38 <ucdr_deserialize_array_uint8_t>
 800f2d6:	f104 010c 	add.w	r1, r4, #12
 800f2da:	4006      	ands	r6, r0
 800f2dc:	4628      	mov	r0, r5
 800f2de:	f004 fe53 	bl	8013f88 <ucdr_deserialize_uint8_t>
 800f2e2:	f104 010d 	add.w	r1, r4, #13
 800f2e6:	ea06 0700 	and.w	r7, r6, r0
 800f2ea:	4628      	mov	r0, r5
 800f2ec:	f004 fe1e 	bl	8013f2c <ucdr_deserialize_bool>
 800f2f0:	7b63      	ldrb	r3, [r4, #13]
 800f2f2:	4007      	ands	r7, r0
 800f2f4:	b93b      	cbnz	r3, 800f306 <uxr_deserialize_CLIENT_Representation+0x66>
 800f2f6:	f104 011c 	add.w	r1, r4, #28
 800f2fa:	4628      	mov	r0, r5
 800f2fc:	f004 ff5a 	bl	80141b4 <ucdr_deserialize_uint16_t>
 800f300:	4038      	ands	r0, r7
 800f302:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f306:	f104 0110 	add.w	r1, r4, #16
 800f30a:	4628      	mov	r0, r5
 800f30c:	f005 f96c 	bl	80145e8 <ucdr_deserialize_uint32_t>
 800f310:	6923      	ldr	r3, [r4, #16]
 800f312:	2b01      	cmp	r3, #1
 800f314:	d903      	bls.n	800f31e <uxr_deserialize_CLIENT_Representation+0x7e>
 800f316:	2301      	movs	r3, #1
 800f318:	75ab      	strb	r3, [r5, #22]
 800f31a:	2700      	movs	r7, #0
 800f31c:	e7eb      	b.n	800f2f6 <uxr_deserialize_CLIENT_Representation+0x56>
 800f31e:	b30b      	cbz	r3, 800f364 <uxr_deserialize_CLIENT_Representation+0xc4>
 800f320:	2800      	cmp	r0, #0
 800f322:	d0fa      	beq.n	800f31a <uxr_deserialize_CLIENT_Representation+0x7a>
 800f324:	46a0      	mov	r8, r4
 800f326:	f04f 0900 	mov.w	r9, #0
 800f32a:	e001      	b.n	800f330 <uxr_deserialize_CLIENT_Representation+0x90>
 800f32c:	2e00      	cmp	r6, #0
 800f32e:	d0f4      	beq.n	800f31a <uxr_deserialize_CLIENT_Representation+0x7a>
 800f330:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800f334:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f338:	4628      	mov	r0, r5
 800f33a:	f005 fd77 	bl	8014e2c <ucdr_deserialize_string>
 800f33e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f342:	4606      	mov	r6, r0
 800f344:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800f348:	4628      	mov	r0, r5
 800f34a:	f005 fd6f 	bl	8014e2c <ucdr_deserialize_string>
 800f34e:	6923      	ldr	r3, [r4, #16]
 800f350:	f109 0901 	add.w	r9, r9, #1
 800f354:	4006      	ands	r6, r0
 800f356:	4599      	cmp	r9, r3
 800f358:	f108 0808 	add.w	r8, r8, #8
 800f35c:	b2f6      	uxtb	r6, r6
 800f35e:	d3e5      	bcc.n	800f32c <uxr_deserialize_CLIENT_Representation+0x8c>
 800f360:	4037      	ands	r7, r6
 800f362:	e7c8      	b.n	800f2f6 <uxr_deserialize_CLIENT_Representation+0x56>
 800f364:	4007      	ands	r7, r0
 800f366:	e7c6      	b.n	800f2f6 <uxr_deserialize_CLIENT_Representation+0x56>

0800f368 <uxr_serialize_AGENT_Representation>:
 800f368:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f36c:	2204      	movs	r2, #4
 800f36e:	460f      	mov	r7, r1
 800f370:	4605      	mov	r5, r0
 800f372:	f004 fcfd 	bl	8013d70 <ucdr_serialize_array_uint8_t>
 800f376:	2202      	movs	r2, #2
 800f378:	4604      	mov	r4, r0
 800f37a:	1d39      	adds	r1, r7, #4
 800f37c:	4628      	mov	r0, r5
 800f37e:	f004 fcf7 	bl	8013d70 <ucdr_serialize_array_uint8_t>
 800f382:	4020      	ands	r0, r4
 800f384:	2202      	movs	r2, #2
 800f386:	1db9      	adds	r1, r7, #6
 800f388:	b2c4      	uxtb	r4, r0
 800f38a:	4628      	mov	r0, r5
 800f38c:	f004 fcf0 	bl	8013d70 <ucdr_serialize_array_uint8_t>
 800f390:	7a39      	ldrb	r1, [r7, #8]
 800f392:	4004      	ands	r4, r0
 800f394:	4628      	mov	r0, r5
 800f396:	f004 fdb3 	bl	8013f00 <ucdr_serialize_bool>
 800f39a:	7a3b      	ldrb	r3, [r7, #8]
 800f39c:	ea00 0804 	and.w	r8, r0, r4
 800f3a0:	b913      	cbnz	r3, 800f3a8 <uxr_serialize_AGENT_Representation+0x40>
 800f3a2:	4640      	mov	r0, r8
 800f3a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f3a8:	68f9      	ldr	r1, [r7, #12]
 800f3aa:	4628      	mov	r0, r5
 800f3ac:	f004 ffec 	bl	8014388 <ucdr_serialize_uint32_t>
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	b303      	cbz	r3, 800f3f6 <uxr_serialize_AGENT_Representation+0x8e>
 800f3b4:	b1d0      	cbz	r0, 800f3ec <uxr_serialize_AGENT_Representation+0x84>
 800f3b6:	463e      	mov	r6, r7
 800f3b8:	f04f 0900 	mov.w	r9, #0
 800f3bc:	e001      	b.n	800f3c2 <uxr_serialize_AGENT_Representation+0x5a>
 800f3be:	3608      	adds	r6, #8
 800f3c0:	b1a4      	cbz	r4, 800f3ec <uxr_serialize_AGENT_Representation+0x84>
 800f3c2:	6931      	ldr	r1, [r6, #16]
 800f3c4:	4628      	mov	r0, r5
 800f3c6:	f005 fd21 	bl	8014e0c <ucdr_serialize_string>
 800f3ca:	6971      	ldr	r1, [r6, #20]
 800f3cc:	4604      	mov	r4, r0
 800f3ce:	4628      	mov	r0, r5
 800f3d0:	f005 fd1c 	bl	8014e0c <ucdr_serialize_string>
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	f109 0901 	add.w	r9, r9, #1
 800f3da:	4004      	ands	r4, r0
 800f3dc:	4599      	cmp	r9, r3
 800f3de:	b2e4      	uxtb	r4, r4
 800f3e0:	d3ed      	bcc.n	800f3be <uxr_serialize_AGENT_Representation+0x56>
 800f3e2:	ea08 0804 	and.w	r8, r8, r4
 800f3e6:	4640      	mov	r0, r8
 800f3e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f3ec:	f04f 0800 	mov.w	r8, #0
 800f3f0:	4640      	mov	r0, r8
 800f3f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f3f6:	ea08 0800 	and.w	r8, r8, r0
 800f3fa:	e7d2      	b.n	800f3a2 <uxr_serialize_AGENT_Representation+0x3a>

0800f3fc <uxr_serialize_DATAWRITER_Representation>:
 800f3fc:	b570      	push	{r4, r5, r6, lr}
 800f3fe:	460d      	mov	r5, r1
 800f400:	7809      	ldrb	r1, [r1, #0]
 800f402:	4606      	mov	r6, r0
 800f404:	f004 fdaa 	bl	8013f5c <ucdr_serialize_uint8_t>
 800f408:	4604      	mov	r4, r0
 800f40a:	b130      	cbz	r0, 800f41a <uxr_serialize_DATAWRITER_Representation+0x1e>
 800f40c:	782b      	ldrb	r3, [r5, #0]
 800f40e:	2b02      	cmp	r3, #2
 800f410:	d00c      	beq.n	800f42c <uxr_serialize_DATAWRITER_Representation+0x30>
 800f412:	2b03      	cmp	r3, #3
 800f414:	d010      	beq.n	800f438 <uxr_serialize_DATAWRITER_Representation+0x3c>
 800f416:	2b01      	cmp	r3, #1
 800f418:	d008      	beq.n	800f42c <uxr_serialize_DATAWRITER_Representation+0x30>
 800f41a:	2202      	movs	r2, #2
 800f41c:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 800f420:	4630      	mov	r0, r6
 800f422:	f004 fca5 	bl	8013d70 <ucdr_serialize_array_uint8_t>
 800f426:	4020      	ands	r0, r4
 800f428:	b2c0      	uxtb	r0, r0
 800f42a:	bd70      	pop	{r4, r5, r6, pc}
 800f42c:	6869      	ldr	r1, [r5, #4]
 800f42e:	4630      	mov	r0, r6
 800f430:	f005 fcec 	bl	8014e0c <ucdr_serialize_string>
 800f434:	4604      	mov	r4, r0
 800f436:	e7f0      	b.n	800f41a <uxr_serialize_DATAWRITER_Representation+0x1e>
 800f438:	4629      	mov	r1, r5
 800f43a:	4630      	mov	r0, r6
 800f43c:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800f440:	3104      	adds	r1, #4
 800f442:	f7fd ff1d 	bl	800d280 <ucdr_serialize_sequence_uint8_t>
 800f446:	4604      	mov	r4, r0
 800f448:	e7e7      	b.n	800f41a <uxr_serialize_DATAWRITER_Representation+0x1e>
 800f44a:	bf00      	nop

0800f44c <uxr_serialize_ObjectVariant.part.0>:
 800f44c:	b570      	push	{r4, r5, r6, lr}
 800f44e:	780b      	ldrb	r3, [r1, #0]
 800f450:	3b01      	subs	r3, #1
 800f452:	460c      	mov	r4, r1
 800f454:	4605      	mov	r5, r0
 800f456:	2b0d      	cmp	r3, #13
 800f458:	d854      	bhi.n	800f504 <uxr_serialize_ObjectVariant.part.0+0xb8>
 800f45a:	e8df f003 	tbb	[pc, r3]
 800f45e:	0730      	.short	0x0730
 800f460:	07071b1b 	.word	0x07071b1b
 800f464:	0c530707 	.word	0x0c530707
 800f468:	494e0c0c 	.word	0x494e0c0c
 800f46c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f470:	3104      	adds	r1, #4
 800f472:	f7ff bfc3 	b.w	800f3fc <uxr_serialize_DATAWRITER_Representation>
 800f476:	7909      	ldrb	r1, [r1, #4]
 800f478:	f004 fd70 	bl	8013f5c <ucdr_serialize_uint8_t>
 800f47c:	b1e8      	cbz	r0, 800f4ba <uxr_serialize_ObjectVariant.part.0+0x6e>
 800f47e:	7923      	ldrb	r3, [r4, #4]
 800f480:	2b01      	cmp	r3, #1
 800f482:	d001      	beq.n	800f488 <uxr_serialize_ObjectVariant.part.0+0x3c>
 800f484:	2b02      	cmp	r3, #2
 800f486:	d13d      	bne.n	800f504 <uxr_serialize_ObjectVariant.part.0+0xb8>
 800f488:	68a1      	ldr	r1, [r4, #8]
 800f48a:	4628      	mov	r0, r5
 800f48c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f490:	f005 bcbc 	b.w	8014e0c <ucdr_serialize_string>
 800f494:	7909      	ldrb	r1, [r1, #4]
 800f496:	f004 fd61 	bl	8013f5c <ucdr_serialize_uint8_t>
 800f49a:	4606      	mov	r6, r0
 800f49c:	b120      	cbz	r0, 800f4a8 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800f49e:	7923      	ldrb	r3, [r4, #4]
 800f4a0:	2b02      	cmp	r3, #2
 800f4a2:	d039      	beq.n	800f518 <uxr_serialize_ObjectVariant.part.0+0xcc>
 800f4a4:	2b03      	cmp	r3, #3
 800f4a6:	d02f      	beq.n	800f508 <uxr_serialize_ObjectVariant.part.0+0xbc>
 800f4a8:	2202      	movs	r2, #2
 800f4aa:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 800f4ae:	4628      	mov	r0, r5
 800f4b0:	f004 fc5e 	bl	8013d70 <ucdr_serialize_array_uint8_t>
 800f4b4:	4030      	ands	r0, r6
 800f4b6:	b2c0      	uxtb	r0, r0
 800f4b8:	bd70      	pop	{r4, r5, r6, pc}
 800f4ba:	2000      	movs	r0, #0
 800f4bc:	bd70      	pop	{r4, r5, r6, pc}
 800f4be:	7909      	ldrb	r1, [r1, #4]
 800f4c0:	f004 fd4c 	bl	8013f5c <ucdr_serialize_uint8_t>
 800f4c4:	4606      	mov	r6, r0
 800f4c6:	b158      	cbz	r0, 800f4e0 <uxr_serialize_ObjectVariant.part.0+0x94>
 800f4c8:	7923      	ldrb	r3, [r4, #4]
 800f4ca:	2b02      	cmp	r3, #2
 800f4cc:	d003      	beq.n	800f4d6 <uxr_serialize_ObjectVariant.part.0+0x8a>
 800f4ce:	2b03      	cmp	r3, #3
 800f4d0:	d028      	beq.n	800f524 <uxr_serialize_ObjectVariant.part.0+0xd8>
 800f4d2:	2b01      	cmp	r3, #1
 800f4d4:	d104      	bne.n	800f4e0 <uxr_serialize_ObjectVariant.part.0+0x94>
 800f4d6:	68a1      	ldr	r1, [r4, #8]
 800f4d8:	4628      	mov	r0, r5
 800f4da:	f005 fc97 	bl	8014e0c <ucdr_serialize_string>
 800f4de:	4606      	mov	r6, r0
 800f4e0:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 800f4e4:	4628      	mov	r0, r5
 800f4e6:	f005 fa75 	bl	80149d4 <ucdr_serialize_int16_t>
 800f4ea:	4030      	ands	r0, r6
 800f4ec:	b2c0      	uxtb	r0, r0
 800f4ee:	bd70      	pop	{r4, r5, r6, pc}
 800f4f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f4f4:	3104      	adds	r1, #4
 800f4f6:	f7ff be7b 	b.w	800f1f0 <uxr_serialize_CLIENT_Representation>
 800f4fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f4fe:	3104      	adds	r1, #4
 800f500:	f7ff bf32 	b.w	800f368 <uxr_serialize_AGENT_Representation>
 800f504:	2001      	movs	r0, #1
 800f506:	bd70      	pop	{r4, r5, r6, pc}
 800f508:	68a2      	ldr	r2, [r4, #8]
 800f50a:	f104 010c 	add.w	r1, r4, #12
 800f50e:	4628      	mov	r0, r5
 800f510:	f7fd feb6 	bl	800d280 <ucdr_serialize_sequence_uint8_t>
 800f514:	4606      	mov	r6, r0
 800f516:	e7c7      	b.n	800f4a8 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800f518:	68a1      	ldr	r1, [r4, #8]
 800f51a:	4628      	mov	r0, r5
 800f51c:	f005 fc76 	bl	8014e0c <ucdr_serialize_string>
 800f520:	4606      	mov	r6, r0
 800f522:	e7c1      	b.n	800f4a8 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800f524:	68a2      	ldr	r2, [r4, #8]
 800f526:	f104 010c 	add.w	r1, r4, #12
 800f52a:	4628      	mov	r0, r5
 800f52c:	f7fd fea8 	bl	800d280 <ucdr_serialize_sequence_uint8_t>
 800f530:	4606      	mov	r6, r0
 800f532:	e7d5      	b.n	800f4e0 <uxr_serialize_ObjectVariant.part.0+0x94>

0800f534 <uxr_deserialize_DATAWRITER_Representation>:
 800f534:	b570      	push	{r4, r5, r6, lr}
 800f536:	4606      	mov	r6, r0
 800f538:	460d      	mov	r5, r1
 800f53a:	f004 fd25 	bl	8013f88 <ucdr_deserialize_uint8_t>
 800f53e:	4604      	mov	r4, r0
 800f540:	b130      	cbz	r0, 800f550 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800f542:	782b      	ldrb	r3, [r5, #0]
 800f544:	2b02      	cmp	r3, #2
 800f546:	d00c      	beq.n	800f562 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800f548:	2b03      	cmp	r3, #3
 800f54a:	d012      	beq.n	800f572 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 800f54c:	2b01      	cmp	r3, #1
 800f54e:	d008      	beq.n	800f562 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800f550:	2202      	movs	r2, #2
 800f552:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 800f556:	4630      	mov	r0, r6
 800f558:	f004 fc6e 	bl	8013e38 <ucdr_deserialize_array_uint8_t>
 800f55c:	4020      	ands	r0, r4
 800f55e:	b2c0      	uxtb	r0, r0
 800f560:	bd70      	pop	{r4, r5, r6, pc}
 800f562:	6869      	ldr	r1, [r5, #4]
 800f564:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f568:	4630      	mov	r0, r6
 800f56a:	f005 fc5f 	bl	8014e2c <ucdr_deserialize_string>
 800f56e:	4604      	mov	r4, r0
 800f570:	e7ee      	b.n	800f550 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800f572:	1d2b      	adds	r3, r5, #4
 800f574:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f578:	f105 0108 	add.w	r1, r5, #8
 800f57c:	4630      	mov	r0, r6
 800f57e:	f7fd fe91 	bl	800d2a4 <ucdr_deserialize_sequence_uint8_t>
 800f582:	4604      	mov	r4, r0
 800f584:	e7e4      	b.n	800f550 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800f586:	bf00      	nop

0800f588 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 800f588:	b570      	push	{r4, r5, r6, lr}
 800f58a:	460d      	mov	r5, r1
 800f58c:	7809      	ldrb	r1, [r1, #0]
 800f58e:	4606      	mov	r6, r0
 800f590:	f004 fcb6 	bl	8013f00 <ucdr_serialize_bool>
 800f594:	782b      	ldrb	r3, [r5, #0]
 800f596:	4604      	mov	r4, r0
 800f598:	b94b      	cbnz	r3, 800f5ae <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 800f59a:	7a29      	ldrb	r1, [r5, #8]
 800f59c:	4630      	mov	r0, r6
 800f59e:	f004 fcaf 	bl	8013f00 <ucdr_serialize_bool>
 800f5a2:	7a2b      	ldrb	r3, [r5, #8]
 800f5a4:	4004      	ands	r4, r0
 800f5a6:	b2e4      	uxtb	r4, r4
 800f5a8:	b943      	cbnz	r3, 800f5bc <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 800f5aa:	4620      	mov	r0, r4
 800f5ac:	bd70      	pop	{r4, r5, r6, pc}
 800f5ae:	6869      	ldr	r1, [r5, #4]
 800f5b0:	4630      	mov	r0, r6
 800f5b2:	f005 fc2b 	bl	8014e0c <ucdr_serialize_string>
 800f5b6:	4004      	ands	r4, r0
 800f5b8:	b2e4      	uxtb	r4, r4
 800f5ba:	e7ee      	b.n	800f59a <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 800f5bc:	68e9      	ldr	r1, [r5, #12]
 800f5be:	4630      	mov	r0, r6
 800f5c0:	f005 fc24 	bl	8014e0c <ucdr_serialize_string>
 800f5c4:	4004      	ands	r4, r0
 800f5c6:	4620      	mov	r0, r4
 800f5c8:	bd70      	pop	{r4, r5, r6, pc}
 800f5ca:	bf00      	nop

0800f5cc <uxr_serialize_OBJK_Topic_Binary>:
 800f5cc:	b570      	push	{r4, r5, r6, lr}
 800f5ce:	460d      	mov	r5, r1
 800f5d0:	6809      	ldr	r1, [r1, #0]
 800f5d2:	4606      	mov	r6, r0
 800f5d4:	f005 fc1a 	bl	8014e0c <ucdr_serialize_string>
 800f5d8:	7929      	ldrb	r1, [r5, #4]
 800f5da:	4604      	mov	r4, r0
 800f5dc:	4630      	mov	r0, r6
 800f5de:	f004 fc8f 	bl	8013f00 <ucdr_serialize_bool>
 800f5e2:	792b      	ldrb	r3, [r5, #4]
 800f5e4:	4004      	ands	r4, r0
 800f5e6:	b2e4      	uxtb	r4, r4
 800f5e8:	b943      	cbnz	r3, 800f5fc <uxr_serialize_OBJK_Topic_Binary+0x30>
 800f5ea:	7b29      	ldrb	r1, [r5, #12]
 800f5ec:	4630      	mov	r0, r6
 800f5ee:	f004 fc87 	bl	8013f00 <ucdr_serialize_bool>
 800f5f2:	7b2b      	ldrb	r3, [r5, #12]
 800f5f4:	4004      	ands	r4, r0
 800f5f6:	b93b      	cbnz	r3, 800f608 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 800f5f8:	4620      	mov	r0, r4
 800f5fa:	bd70      	pop	{r4, r5, r6, pc}
 800f5fc:	68a9      	ldr	r1, [r5, #8]
 800f5fe:	4630      	mov	r0, r6
 800f600:	f005 fc04 	bl	8014e0c <ucdr_serialize_string>
 800f604:	4004      	ands	r4, r0
 800f606:	e7f0      	b.n	800f5ea <uxr_serialize_OBJK_Topic_Binary+0x1e>
 800f608:	6929      	ldr	r1, [r5, #16]
 800f60a:	4630      	mov	r0, r6
 800f60c:	f005 fbfe 	bl	8014e0c <ucdr_serialize_string>
 800f610:	4004      	ands	r4, r0
 800f612:	b2e4      	uxtb	r4, r4
 800f614:	4620      	mov	r0, r4
 800f616:	bd70      	pop	{r4, r5, r6, pc}

0800f618 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 800f618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f61c:	460c      	mov	r4, r1
 800f61e:	7809      	ldrb	r1, [r1, #0]
 800f620:	4606      	mov	r6, r0
 800f622:	f004 fc6d 	bl	8013f00 <ucdr_serialize_bool>
 800f626:	7823      	ldrb	r3, [r4, #0]
 800f628:	4605      	mov	r5, r0
 800f62a:	b96b      	cbnz	r3, 800f648 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 800f62c:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 800f630:	4630      	mov	r0, r6
 800f632:	f004 fc65 	bl	8013f00 <ucdr_serialize_bool>
 800f636:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800f63a:	4005      	ands	r5, r0
 800f63c:	b2ed      	uxtb	r5, r5
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d169      	bne.n	800f716 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 800f642:	4628      	mov	r0, r5
 800f644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f648:	6861      	ldr	r1, [r4, #4]
 800f64a:	4630      	mov	r0, r6
 800f64c:	f004 fe9c 	bl	8014388 <ucdr_serialize_uint32_t>
 800f650:	6863      	ldr	r3, [r4, #4]
 800f652:	2b00      	cmp	r3, #0
 800f654:	d06b      	beq.n	800f72e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 800f656:	2800      	cmp	r0, #0
 800f658:	d067      	beq.n	800f72a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f65a:	68a1      	ldr	r1, [r4, #8]
 800f65c:	4630      	mov	r0, r6
 800f65e:	f005 fbd5 	bl	8014e0c <ucdr_serialize_string>
 800f662:	6863      	ldr	r3, [r4, #4]
 800f664:	2b01      	cmp	r3, #1
 800f666:	d953      	bls.n	800f710 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f668:	2800      	cmp	r0, #0
 800f66a:	d05e      	beq.n	800f72a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f66c:	68e1      	ldr	r1, [r4, #12]
 800f66e:	4630      	mov	r0, r6
 800f670:	f005 fbcc 	bl	8014e0c <ucdr_serialize_string>
 800f674:	6863      	ldr	r3, [r4, #4]
 800f676:	2b02      	cmp	r3, #2
 800f678:	d94a      	bls.n	800f710 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f67a:	2800      	cmp	r0, #0
 800f67c:	d055      	beq.n	800f72a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f67e:	6921      	ldr	r1, [r4, #16]
 800f680:	4630      	mov	r0, r6
 800f682:	f005 fbc3 	bl	8014e0c <ucdr_serialize_string>
 800f686:	6863      	ldr	r3, [r4, #4]
 800f688:	2b03      	cmp	r3, #3
 800f68a:	d941      	bls.n	800f710 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f68c:	2800      	cmp	r0, #0
 800f68e:	d04c      	beq.n	800f72a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f690:	6961      	ldr	r1, [r4, #20]
 800f692:	4630      	mov	r0, r6
 800f694:	f005 fbba 	bl	8014e0c <ucdr_serialize_string>
 800f698:	6863      	ldr	r3, [r4, #4]
 800f69a:	2b04      	cmp	r3, #4
 800f69c:	d938      	bls.n	800f710 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f69e:	2800      	cmp	r0, #0
 800f6a0:	d043      	beq.n	800f72a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f6a2:	69a1      	ldr	r1, [r4, #24]
 800f6a4:	4630      	mov	r0, r6
 800f6a6:	f005 fbb1 	bl	8014e0c <ucdr_serialize_string>
 800f6aa:	6863      	ldr	r3, [r4, #4]
 800f6ac:	2b05      	cmp	r3, #5
 800f6ae:	d92f      	bls.n	800f710 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f6b0:	2800      	cmp	r0, #0
 800f6b2:	d03a      	beq.n	800f72a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f6b4:	69e1      	ldr	r1, [r4, #28]
 800f6b6:	4630      	mov	r0, r6
 800f6b8:	f005 fba8 	bl	8014e0c <ucdr_serialize_string>
 800f6bc:	6863      	ldr	r3, [r4, #4]
 800f6be:	2b06      	cmp	r3, #6
 800f6c0:	d926      	bls.n	800f710 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f6c2:	b390      	cbz	r0, 800f72a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f6c4:	6a21      	ldr	r1, [r4, #32]
 800f6c6:	4630      	mov	r0, r6
 800f6c8:	f005 fba0 	bl	8014e0c <ucdr_serialize_string>
 800f6cc:	6863      	ldr	r3, [r4, #4]
 800f6ce:	2b07      	cmp	r3, #7
 800f6d0:	d91e      	bls.n	800f710 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f6d2:	b350      	cbz	r0, 800f72a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f6d4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800f6d6:	4630      	mov	r0, r6
 800f6d8:	f005 fb98 	bl	8014e0c <ucdr_serialize_string>
 800f6dc:	6863      	ldr	r3, [r4, #4]
 800f6de:	2b08      	cmp	r3, #8
 800f6e0:	d916      	bls.n	800f710 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f6e2:	b310      	cbz	r0, 800f72a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f6e4:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800f6e6:	4630      	mov	r0, r6
 800f6e8:	f005 fb90 	bl	8014e0c <ucdr_serialize_string>
 800f6ec:	6863      	ldr	r3, [r4, #4]
 800f6ee:	2b09      	cmp	r3, #9
 800f6f0:	d90e      	bls.n	800f710 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f6f2:	b1d0      	cbz	r0, 800f72a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f6f4:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 800f6f8:	2709      	movs	r7, #9
 800f6fa:	e000      	b.n	800f6fe <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 800f6fc:	b1a8      	cbz	r0, 800f72a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f6fe:	f858 1b04 	ldr.w	r1, [r8], #4
 800f702:	4630      	mov	r0, r6
 800f704:	f005 fb82 	bl	8014e0c <ucdr_serialize_string>
 800f708:	6862      	ldr	r2, [r4, #4]
 800f70a:	3701      	adds	r7, #1
 800f70c:	4297      	cmp	r7, r2
 800f70e:	d3f5      	bcc.n	800f6fc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 800f710:	4005      	ands	r5, r0
 800f712:	b2ed      	uxtb	r5, r5
 800f714:	e78a      	b.n	800f62c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800f716:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800f718:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800f71c:	4630      	mov	r0, r6
 800f71e:	f7fd fdaf 	bl	800d280 <ucdr_serialize_sequence_uint8_t>
 800f722:	4005      	ands	r5, r0
 800f724:	4628      	mov	r0, r5
 800f726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f72a:	2500      	movs	r5, #0
 800f72c:	e77e      	b.n	800f62c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800f72e:	4028      	ands	r0, r5
 800f730:	b2c5      	uxtb	r5, r0
 800f732:	e77b      	b.n	800f62c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

0800f734 <uxr_serialize_OBJK_Publisher_Binary>:
 800f734:	b570      	push	{r4, r5, r6, lr}
 800f736:	460d      	mov	r5, r1
 800f738:	7809      	ldrb	r1, [r1, #0]
 800f73a:	4606      	mov	r6, r0
 800f73c:	f004 fbe0 	bl	8013f00 <ucdr_serialize_bool>
 800f740:	782b      	ldrb	r3, [r5, #0]
 800f742:	4604      	mov	r4, r0
 800f744:	b94b      	cbnz	r3, 800f75a <uxr_serialize_OBJK_Publisher_Binary+0x26>
 800f746:	7a29      	ldrb	r1, [r5, #8]
 800f748:	4630      	mov	r0, r6
 800f74a:	f004 fbd9 	bl	8013f00 <ucdr_serialize_bool>
 800f74e:	7a2b      	ldrb	r3, [r5, #8]
 800f750:	4004      	ands	r4, r0
 800f752:	b2e4      	uxtb	r4, r4
 800f754:	b943      	cbnz	r3, 800f768 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 800f756:	4620      	mov	r0, r4
 800f758:	bd70      	pop	{r4, r5, r6, pc}
 800f75a:	6869      	ldr	r1, [r5, #4]
 800f75c:	4630      	mov	r0, r6
 800f75e:	f005 fb55 	bl	8014e0c <ucdr_serialize_string>
 800f762:	4004      	ands	r4, r0
 800f764:	b2e4      	uxtb	r4, r4
 800f766:	e7ee      	b.n	800f746 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 800f768:	f105 010c 	add.w	r1, r5, #12
 800f76c:	4630      	mov	r0, r6
 800f76e:	f7ff ff53 	bl	800f618 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 800f772:	4004      	ands	r4, r0
 800f774:	4620      	mov	r0, r4
 800f776:	bd70      	pop	{r4, r5, r6, pc}

0800f778 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 800f778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f77c:	460c      	mov	r4, r1
 800f77e:	7809      	ldrb	r1, [r1, #0]
 800f780:	4606      	mov	r6, r0
 800f782:	f004 fbbd 	bl	8013f00 <ucdr_serialize_bool>
 800f786:	7823      	ldrb	r3, [r4, #0]
 800f788:	4605      	mov	r5, r0
 800f78a:	b96b      	cbnz	r3, 800f7a8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 800f78c:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 800f790:	4630      	mov	r0, r6
 800f792:	f004 fbb5 	bl	8013f00 <ucdr_serialize_bool>
 800f796:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800f79a:	4005      	ands	r5, r0
 800f79c:	b2ed      	uxtb	r5, r5
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d169      	bne.n	800f876 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 800f7a2:	4628      	mov	r0, r5
 800f7a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7a8:	6861      	ldr	r1, [r4, #4]
 800f7aa:	4630      	mov	r0, r6
 800f7ac:	f004 fdec 	bl	8014388 <ucdr_serialize_uint32_t>
 800f7b0:	6863      	ldr	r3, [r4, #4]
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d06b      	beq.n	800f88e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 800f7b6:	2800      	cmp	r0, #0
 800f7b8:	d067      	beq.n	800f88a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f7ba:	68a1      	ldr	r1, [r4, #8]
 800f7bc:	4630      	mov	r0, r6
 800f7be:	f005 fb25 	bl	8014e0c <ucdr_serialize_string>
 800f7c2:	6863      	ldr	r3, [r4, #4]
 800f7c4:	2b01      	cmp	r3, #1
 800f7c6:	d953      	bls.n	800f870 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f7c8:	2800      	cmp	r0, #0
 800f7ca:	d05e      	beq.n	800f88a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f7cc:	68e1      	ldr	r1, [r4, #12]
 800f7ce:	4630      	mov	r0, r6
 800f7d0:	f005 fb1c 	bl	8014e0c <ucdr_serialize_string>
 800f7d4:	6863      	ldr	r3, [r4, #4]
 800f7d6:	2b02      	cmp	r3, #2
 800f7d8:	d94a      	bls.n	800f870 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f7da:	2800      	cmp	r0, #0
 800f7dc:	d055      	beq.n	800f88a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f7de:	6921      	ldr	r1, [r4, #16]
 800f7e0:	4630      	mov	r0, r6
 800f7e2:	f005 fb13 	bl	8014e0c <ucdr_serialize_string>
 800f7e6:	6863      	ldr	r3, [r4, #4]
 800f7e8:	2b03      	cmp	r3, #3
 800f7ea:	d941      	bls.n	800f870 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f7ec:	2800      	cmp	r0, #0
 800f7ee:	d04c      	beq.n	800f88a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f7f0:	6961      	ldr	r1, [r4, #20]
 800f7f2:	4630      	mov	r0, r6
 800f7f4:	f005 fb0a 	bl	8014e0c <ucdr_serialize_string>
 800f7f8:	6863      	ldr	r3, [r4, #4]
 800f7fa:	2b04      	cmp	r3, #4
 800f7fc:	d938      	bls.n	800f870 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f7fe:	2800      	cmp	r0, #0
 800f800:	d043      	beq.n	800f88a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f802:	69a1      	ldr	r1, [r4, #24]
 800f804:	4630      	mov	r0, r6
 800f806:	f005 fb01 	bl	8014e0c <ucdr_serialize_string>
 800f80a:	6863      	ldr	r3, [r4, #4]
 800f80c:	2b05      	cmp	r3, #5
 800f80e:	d92f      	bls.n	800f870 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f810:	2800      	cmp	r0, #0
 800f812:	d03a      	beq.n	800f88a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f814:	69e1      	ldr	r1, [r4, #28]
 800f816:	4630      	mov	r0, r6
 800f818:	f005 faf8 	bl	8014e0c <ucdr_serialize_string>
 800f81c:	6863      	ldr	r3, [r4, #4]
 800f81e:	2b06      	cmp	r3, #6
 800f820:	d926      	bls.n	800f870 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f822:	b390      	cbz	r0, 800f88a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f824:	6a21      	ldr	r1, [r4, #32]
 800f826:	4630      	mov	r0, r6
 800f828:	f005 faf0 	bl	8014e0c <ucdr_serialize_string>
 800f82c:	6863      	ldr	r3, [r4, #4]
 800f82e:	2b07      	cmp	r3, #7
 800f830:	d91e      	bls.n	800f870 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f832:	b350      	cbz	r0, 800f88a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f834:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800f836:	4630      	mov	r0, r6
 800f838:	f005 fae8 	bl	8014e0c <ucdr_serialize_string>
 800f83c:	6863      	ldr	r3, [r4, #4]
 800f83e:	2b08      	cmp	r3, #8
 800f840:	d916      	bls.n	800f870 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f842:	b310      	cbz	r0, 800f88a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f844:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800f846:	4630      	mov	r0, r6
 800f848:	f005 fae0 	bl	8014e0c <ucdr_serialize_string>
 800f84c:	6863      	ldr	r3, [r4, #4]
 800f84e:	2b09      	cmp	r3, #9
 800f850:	d90e      	bls.n	800f870 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f852:	b1d0      	cbz	r0, 800f88a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f854:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 800f858:	2709      	movs	r7, #9
 800f85a:	e000      	b.n	800f85e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 800f85c:	b1a8      	cbz	r0, 800f88a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f85e:	f858 1b04 	ldr.w	r1, [r8], #4
 800f862:	4630      	mov	r0, r6
 800f864:	f005 fad2 	bl	8014e0c <ucdr_serialize_string>
 800f868:	6862      	ldr	r2, [r4, #4]
 800f86a:	3701      	adds	r7, #1
 800f86c:	4297      	cmp	r7, r2
 800f86e:	d3f5      	bcc.n	800f85c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 800f870:	4005      	ands	r5, r0
 800f872:	b2ed      	uxtb	r5, r5
 800f874:	e78a      	b.n	800f78c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 800f876:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800f878:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800f87c:	4630      	mov	r0, r6
 800f87e:	f7fd fcff 	bl	800d280 <ucdr_serialize_sequence_uint8_t>
 800f882:	4005      	ands	r5, r0
 800f884:	4628      	mov	r0, r5
 800f886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f88a:	2500      	movs	r5, #0
 800f88c:	e77e      	b.n	800f78c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 800f88e:	4028      	ands	r0, r5
 800f890:	b2c5      	uxtb	r5, r0
 800f892:	e77b      	b.n	800f78c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

0800f894 <uxr_serialize_OBJK_Subscriber_Binary>:
 800f894:	b570      	push	{r4, r5, r6, lr}
 800f896:	460d      	mov	r5, r1
 800f898:	7809      	ldrb	r1, [r1, #0]
 800f89a:	4606      	mov	r6, r0
 800f89c:	f004 fb30 	bl	8013f00 <ucdr_serialize_bool>
 800f8a0:	782b      	ldrb	r3, [r5, #0]
 800f8a2:	4604      	mov	r4, r0
 800f8a4:	b94b      	cbnz	r3, 800f8ba <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 800f8a6:	7a29      	ldrb	r1, [r5, #8]
 800f8a8:	4630      	mov	r0, r6
 800f8aa:	f004 fb29 	bl	8013f00 <ucdr_serialize_bool>
 800f8ae:	7a2b      	ldrb	r3, [r5, #8]
 800f8b0:	4004      	ands	r4, r0
 800f8b2:	b2e4      	uxtb	r4, r4
 800f8b4:	b943      	cbnz	r3, 800f8c8 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 800f8b6:	4620      	mov	r0, r4
 800f8b8:	bd70      	pop	{r4, r5, r6, pc}
 800f8ba:	6869      	ldr	r1, [r5, #4]
 800f8bc:	4630      	mov	r0, r6
 800f8be:	f005 faa5 	bl	8014e0c <ucdr_serialize_string>
 800f8c2:	4004      	ands	r4, r0
 800f8c4:	b2e4      	uxtb	r4, r4
 800f8c6:	e7ee      	b.n	800f8a6 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 800f8c8:	f105 010c 	add.w	r1, r5, #12
 800f8cc:	4630      	mov	r0, r6
 800f8ce:	f7ff ff53 	bl	800f778 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 800f8d2:	4004      	ands	r4, r0
 800f8d4:	4620      	mov	r0, r4
 800f8d6:	bd70      	pop	{r4, r5, r6, pc}

0800f8d8 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 800f8d8:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 800f8dc:	4688      	mov	r8, r1
 800f8de:	8809      	ldrh	r1, [r1, #0]
 800f8e0:	4681      	mov	r9, r0
 800f8e2:	f004 fb67 	bl	8013fb4 <ucdr_serialize_uint16_t>
 800f8e6:	f898 1002 	ldrb.w	r1, [r8, #2]
 800f8ea:	4606      	mov	r6, r0
 800f8ec:	4648      	mov	r0, r9
 800f8ee:	f004 fb07 	bl	8013f00 <ucdr_serialize_bool>
 800f8f2:	f898 3002 	ldrb.w	r3, [r8, #2]
 800f8f6:	4006      	ands	r6, r0
 800f8f8:	b2f5      	uxtb	r5, r6
 800f8fa:	b9eb      	cbnz	r3, 800f938 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 800f8fc:	f898 1006 	ldrb.w	r1, [r8, #6]
 800f900:	4648      	mov	r0, r9
 800f902:	f004 fafd 	bl	8013f00 <ucdr_serialize_bool>
 800f906:	f898 3006 	ldrb.w	r3, [r8, #6]
 800f90a:	4005      	ands	r5, r0
 800f90c:	bb7b      	cbnz	r3, 800f96e <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 800f90e:	f898 100c 	ldrb.w	r1, [r8, #12]
 800f912:	4648      	mov	r0, r9
 800f914:	f004 faf4 	bl	8013f00 <ucdr_serialize_bool>
 800f918:	f898 300c 	ldrb.w	r3, [r8, #12]
 800f91c:	4005      	ands	r5, r0
 800f91e:	b9f3      	cbnz	r3, 800f95e <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 800f920:	f898 1014 	ldrb.w	r1, [r8, #20]
 800f924:	4648      	mov	r0, r9
 800f926:	f004 faeb 	bl	8013f00 <ucdr_serialize_bool>
 800f92a:	f898 3014 	ldrb.w	r3, [r8, #20]
 800f92e:	4005      	ands	r5, r0
 800f930:	b94b      	cbnz	r3, 800f946 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 800f932:	4628      	mov	r0, r5
 800f934:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800f938:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 800f93c:	4648      	mov	r0, r9
 800f93e:	f004 fb39 	bl	8013fb4 <ucdr_serialize_uint16_t>
 800f942:	4005      	ands	r5, r0
 800f944:	e7da      	b.n	800f8fc <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 800f946:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800f94a:	f108 011c 	add.w	r1, r8, #28
 800f94e:	4648      	mov	r0, r9
 800f950:	f7fd fc96 	bl	800d280 <ucdr_serialize_sequence_uint8_t>
 800f954:	4028      	ands	r0, r5
 800f956:	b2c5      	uxtb	r5, r0
 800f958:	4628      	mov	r0, r5
 800f95a:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800f95e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800f962:	4648      	mov	r0, r9
 800f964:	f004 fd10 	bl	8014388 <ucdr_serialize_uint32_t>
 800f968:	4028      	ands	r0, r5
 800f96a:	b2c5      	uxtb	r5, r0
 800f96c:	e7d8      	b.n	800f920 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 800f96e:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800f972:	4648      	mov	r0, r9
 800f974:	f004 fd08 	bl	8014388 <ucdr_serialize_uint32_t>
 800f978:	4028      	ands	r0, r5
 800f97a:	b2c5      	uxtb	r5, r0
 800f97c:	e7c7      	b.n	800f90e <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 800f97e:	bf00      	nop

0800f980 <uxr_serialize_OBJK_DataReader_Binary>:
 800f980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f982:	2202      	movs	r2, #2
 800f984:	460c      	mov	r4, r1
 800f986:	4606      	mov	r6, r0
 800f988:	f004 f9f2 	bl	8013d70 <ucdr_serialize_array_uint8_t>
 800f98c:	78a1      	ldrb	r1, [r4, #2]
 800f98e:	4605      	mov	r5, r0
 800f990:	4630      	mov	r0, r6
 800f992:	f004 fab5 	bl	8013f00 <ucdr_serialize_bool>
 800f996:	78a3      	ldrb	r3, [r4, #2]
 800f998:	4005      	ands	r5, r0
 800f99a:	b2ed      	uxtb	r5, r5
 800f99c:	b90b      	cbnz	r3, 800f9a2 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 800f99e:	4628      	mov	r0, r5
 800f9a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f9a2:	f104 0108 	add.w	r1, r4, #8
 800f9a6:	4630      	mov	r0, r6
 800f9a8:	f7ff ff96 	bl	800f8d8 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800f9ac:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800f9b0:	4607      	mov	r7, r0
 800f9b2:	4630      	mov	r0, r6
 800f9b4:	f004 faa4 	bl	8013f00 <ucdr_serialize_bool>
 800f9b8:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800f9bc:	4038      	ands	r0, r7
 800f9be:	b2c7      	uxtb	r7, r0
 800f9c0:	b95b      	cbnz	r3, 800f9da <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 800f9c2:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 800f9c6:	4630      	mov	r0, r6
 800f9c8:	f004 fa9a 	bl	8013f00 <ucdr_serialize_bool>
 800f9cc:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800f9d0:	4007      	ands	r7, r0
 800f9d2:	b94b      	cbnz	r3, 800f9e8 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 800f9d4:	403d      	ands	r5, r7
 800f9d6:	4628      	mov	r0, r5
 800f9d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f9da:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 800f9de:	4630      	mov	r0, r6
 800f9e0:	f004 ff28 	bl	8014834 <ucdr_serialize_uint64_t>
 800f9e4:	4007      	ands	r7, r0
 800f9e6:	e7ec      	b.n	800f9c2 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 800f9e8:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 800f9ea:	4630      	mov	r0, r6
 800f9ec:	f005 fa0e 	bl	8014e0c <ucdr_serialize_string>
 800f9f0:	4007      	ands	r7, r0
 800f9f2:	b2ff      	uxtb	r7, r7
 800f9f4:	e7ee      	b.n	800f9d4 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 800f9f6:	bf00      	nop

0800f9f8 <uxr_serialize_OBJK_DataWriter_Binary>:
 800f9f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9fa:	2202      	movs	r2, #2
 800f9fc:	460d      	mov	r5, r1
 800f9fe:	4606      	mov	r6, r0
 800fa00:	f004 f9b6 	bl	8013d70 <ucdr_serialize_array_uint8_t>
 800fa04:	78a9      	ldrb	r1, [r5, #2]
 800fa06:	4604      	mov	r4, r0
 800fa08:	4630      	mov	r0, r6
 800fa0a:	f004 fa79 	bl	8013f00 <ucdr_serialize_bool>
 800fa0e:	78ab      	ldrb	r3, [r5, #2]
 800fa10:	4004      	ands	r4, r0
 800fa12:	b2e4      	uxtb	r4, r4
 800fa14:	b90b      	cbnz	r3, 800fa1a <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 800fa16:	4620      	mov	r0, r4
 800fa18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa1a:	f105 0108 	add.w	r1, r5, #8
 800fa1e:	4630      	mov	r0, r6
 800fa20:	f7ff ff5a 	bl	800f8d8 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800fa24:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 800fa28:	4607      	mov	r7, r0
 800fa2a:	4630      	mov	r0, r6
 800fa2c:	f004 fa68 	bl	8013f00 <ucdr_serialize_bool>
 800fa30:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 800fa34:	4038      	ands	r0, r7
 800fa36:	b2c7      	uxtb	r7, r0
 800fa38:	b913      	cbnz	r3, 800fa40 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 800fa3a:	403c      	ands	r4, r7
 800fa3c:	4620      	mov	r0, r4
 800fa3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa40:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 800fa44:	4630      	mov	r0, r6
 800fa46:	f004 fef5 	bl	8014834 <ucdr_serialize_uint64_t>
 800fa4a:	4007      	ands	r7, r0
 800fa4c:	e7f5      	b.n	800fa3a <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 800fa4e:	bf00      	nop

0800fa50 <uxr_deserialize_ObjectVariant>:
 800fa50:	b570      	push	{r4, r5, r6, lr}
 800fa52:	4605      	mov	r5, r0
 800fa54:	460e      	mov	r6, r1
 800fa56:	f004 fa97 	bl	8013f88 <ucdr_deserialize_uint8_t>
 800fa5a:	b168      	cbz	r0, 800fa78 <uxr_deserialize_ObjectVariant+0x28>
 800fa5c:	7833      	ldrb	r3, [r6, #0]
 800fa5e:	3b01      	subs	r3, #1
 800fa60:	4604      	mov	r4, r0
 800fa62:	2b0d      	cmp	r3, #13
 800fa64:	d809      	bhi.n	800fa7a <uxr_deserialize_ObjectVariant+0x2a>
 800fa66:	e8df f003 	tbb	[pc, r3]
 800fa6a:	0a41      	.short	0x0a41
 800fa6c:	0a0a2323 	.word	0x0a0a2323
 800fa70:	10080a0a 	.word	0x10080a0a
 800fa74:	565c1010 	.word	0x565c1010
 800fa78:	2400      	movs	r4, #0
 800fa7a:	4620      	mov	r0, r4
 800fa7c:	bd70      	pop	{r4, r5, r6, pc}
 800fa7e:	1d31      	adds	r1, r6, #4
 800fa80:	4628      	mov	r0, r5
 800fa82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fa86:	f7ff bd55 	b.w	800f534 <uxr_deserialize_DATAWRITER_Representation>
 800fa8a:	1d31      	adds	r1, r6, #4
 800fa8c:	4628      	mov	r0, r5
 800fa8e:	f004 fa7b 	bl	8013f88 <ucdr_deserialize_uint8_t>
 800fa92:	2800      	cmp	r0, #0
 800fa94:	d0f0      	beq.n	800fa78 <uxr_deserialize_ObjectVariant+0x28>
 800fa96:	7933      	ldrb	r3, [r6, #4]
 800fa98:	2b01      	cmp	r3, #1
 800fa9a:	d001      	beq.n	800faa0 <uxr_deserialize_ObjectVariant+0x50>
 800fa9c:	2b02      	cmp	r3, #2
 800fa9e:	d1ec      	bne.n	800fa7a <uxr_deserialize_ObjectVariant+0x2a>
 800faa0:	68b1      	ldr	r1, [r6, #8]
 800faa2:	4628      	mov	r0, r5
 800faa4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800faa8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800faac:	f005 b9be 	b.w	8014e2c <ucdr_deserialize_string>
 800fab0:	1d31      	adds	r1, r6, #4
 800fab2:	4628      	mov	r0, r5
 800fab4:	f004 fa68 	bl	8013f88 <ucdr_deserialize_uint8_t>
 800fab8:	4604      	mov	r4, r0
 800faba:	b170      	cbz	r0, 800fada <uxr_deserialize_ObjectVariant+0x8a>
 800fabc:	7933      	ldrb	r3, [r6, #4]
 800fabe:	2b02      	cmp	r3, #2
 800fac0:	d04c      	beq.n	800fb5c <uxr_deserialize_ObjectVariant+0x10c>
 800fac2:	2b03      	cmp	r3, #3
 800fac4:	d109      	bne.n	800fada <uxr_deserialize_ObjectVariant+0x8a>
 800fac6:	f106 0308 	add.w	r3, r6, #8
 800faca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800face:	f106 010c 	add.w	r1, r6, #12
 800fad2:	4628      	mov	r0, r5
 800fad4:	f7fd fbe6 	bl	800d2a4 <ucdr_deserialize_sequence_uint8_t>
 800fad8:	4604      	mov	r4, r0
 800fada:	2202      	movs	r2, #2
 800fadc:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800fae0:	4628      	mov	r0, r5
 800fae2:	f004 f9a9 	bl	8013e38 <ucdr_deserialize_array_uint8_t>
 800fae6:	4020      	ands	r0, r4
 800fae8:	b2c4      	uxtb	r4, r0
 800faea:	e7c6      	b.n	800fa7a <uxr_deserialize_ObjectVariant+0x2a>
 800faec:	1d31      	adds	r1, r6, #4
 800faee:	4628      	mov	r0, r5
 800faf0:	f004 fa4a 	bl	8013f88 <ucdr_deserialize_uint8_t>
 800faf4:	4604      	mov	r4, r0
 800faf6:	b130      	cbz	r0, 800fb06 <uxr_deserialize_ObjectVariant+0xb6>
 800faf8:	7933      	ldrb	r3, [r6, #4]
 800fafa:	2b02      	cmp	r3, #2
 800fafc:	d036      	beq.n	800fb6c <uxr_deserialize_ObjectVariant+0x11c>
 800fafe:	2b03      	cmp	r3, #3
 800fb00:	d03c      	beq.n	800fb7c <uxr_deserialize_ObjectVariant+0x12c>
 800fb02:	2b01      	cmp	r3, #1
 800fb04:	d032      	beq.n	800fb6c <uxr_deserialize_ObjectVariant+0x11c>
 800fb06:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800fb0a:	4628      	mov	r0, r5
 800fb0c:	f004 ffe2 	bl	8014ad4 <ucdr_deserialize_int16_t>
 800fb10:	4020      	ands	r0, r4
 800fb12:	b2c4      	uxtb	r4, r0
 800fb14:	e7b1      	b.n	800fa7a <uxr_deserialize_ObjectVariant+0x2a>
 800fb16:	1d31      	adds	r1, r6, #4
 800fb18:	4628      	mov	r0, r5
 800fb1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fb1e:	f7ff bbbf 	b.w	800f2a0 <uxr_deserialize_CLIENT_Representation>
 800fb22:	2204      	movs	r2, #4
 800fb24:	18b1      	adds	r1, r6, r2
 800fb26:	4628      	mov	r0, r5
 800fb28:	f004 f986 	bl	8013e38 <ucdr_deserialize_array_uint8_t>
 800fb2c:	2202      	movs	r2, #2
 800fb2e:	f106 0108 	add.w	r1, r6, #8
 800fb32:	4604      	mov	r4, r0
 800fb34:	4628      	mov	r0, r5
 800fb36:	f004 f97f 	bl	8013e38 <ucdr_deserialize_array_uint8_t>
 800fb3a:	2202      	movs	r2, #2
 800fb3c:	4004      	ands	r4, r0
 800fb3e:	f106 010a 	add.w	r1, r6, #10
 800fb42:	4628      	mov	r0, r5
 800fb44:	f004 f978 	bl	8013e38 <ucdr_deserialize_array_uint8_t>
 800fb48:	b2e4      	uxtb	r4, r4
 800fb4a:	4603      	mov	r3, r0
 800fb4c:	f106 010c 	add.w	r1, r6, #12
 800fb50:	4628      	mov	r0, r5
 800fb52:	401c      	ands	r4, r3
 800fb54:	f004 f9ea 	bl	8013f2c <ucdr_deserialize_bool>
 800fb58:	4004      	ands	r4, r0
 800fb5a:	e78e      	b.n	800fa7a <uxr_deserialize_ObjectVariant+0x2a>
 800fb5c:	68b1      	ldr	r1, [r6, #8]
 800fb5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fb62:	4628      	mov	r0, r5
 800fb64:	f005 f962 	bl	8014e2c <ucdr_deserialize_string>
 800fb68:	4604      	mov	r4, r0
 800fb6a:	e7b6      	b.n	800fada <uxr_deserialize_ObjectVariant+0x8a>
 800fb6c:	68b1      	ldr	r1, [r6, #8]
 800fb6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fb72:	4628      	mov	r0, r5
 800fb74:	f005 f95a 	bl	8014e2c <ucdr_deserialize_string>
 800fb78:	4604      	mov	r4, r0
 800fb7a:	e7c4      	b.n	800fb06 <uxr_deserialize_ObjectVariant+0xb6>
 800fb7c:	f106 0308 	add.w	r3, r6, #8
 800fb80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fb84:	f106 010c 	add.w	r1, r6, #12
 800fb88:	4628      	mov	r0, r5
 800fb8a:	f7fd fb8b 	bl	800d2a4 <ucdr_deserialize_sequence_uint8_t>
 800fb8e:	4604      	mov	r4, r0
 800fb90:	e7b9      	b.n	800fb06 <uxr_deserialize_ObjectVariant+0xb6>
 800fb92:	bf00      	nop

0800fb94 <uxr_deserialize_BaseObjectRequest>:
 800fb94:	b570      	push	{r4, r5, r6, lr}
 800fb96:	2202      	movs	r2, #2
 800fb98:	4605      	mov	r5, r0
 800fb9a:	460e      	mov	r6, r1
 800fb9c:	f004 f94c 	bl	8013e38 <ucdr_deserialize_array_uint8_t>
 800fba0:	2202      	movs	r2, #2
 800fba2:	4604      	mov	r4, r0
 800fba4:	18b1      	adds	r1, r6, r2
 800fba6:	4628      	mov	r0, r5
 800fba8:	f004 f946 	bl	8013e38 <ucdr_deserialize_array_uint8_t>
 800fbac:	4020      	ands	r0, r4
 800fbae:	b2c0      	uxtb	r0, r0
 800fbb0:	bd70      	pop	{r4, r5, r6, pc}
 800fbb2:	bf00      	nop

0800fbb4 <uxr_serialize_ActivityInfoVariant>:
 800fbb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fbb8:	460d      	mov	r5, r1
 800fbba:	7809      	ldrb	r1, [r1, #0]
 800fbbc:	4607      	mov	r7, r0
 800fbbe:	f004 f9cd 	bl	8013f5c <ucdr_serialize_uint8_t>
 800fbc2:	4681      	mov	r9, r0
 800fbc4:	b138      	cbz	r0, 800fbd6 <uxr_serialize_ActivityInfoVariant+0x22>
 800fbc6:	782b      	ldrb	r3, [r5, #0]
 800fbc8:	2b06      	cmp	r3, #6
 800fbca:	f000 8082 	beq.w	800fcd2 <uxr_serialize_ActivityInfoVariant+0x11e>
 800fbce:	2b0d      	cmp	r3, #13
 800fbd0:	d016      	beq.n	800fc00 <uxr_serialize_ActivityInfoVariant+0x4c>
 800fbd2:	2b05      	cmp	r3, #5
 800fbd4:	d002      	beq.n	800fbdc <uxr_serialize_ActivityInfoVariant+0x28>
 800fbd6:	4648      	mov	r0, r9
 800fbd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fbdc:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800fbe0:	4638      	mov	r0, r7
 800fbe2:	f004 fef7 	bl	80149d4 <ucdr_serialize_int16_t>
 800fbe6:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 800fbea:	4681      	mov	r9, r0
 800fbec:	4638      	mov	r0, r7
 800fbee:	f004 fe21 	bl	8014834 <ucdr_serialize_uint64_t>
 800fbf2:	ea09 0000 	and.w	r0, r9, r0
 800fbf6:	fa5f f980 	uxtb.w	r9, r0
 800fbfa:	4648      	mov	r0, r9
 800fbfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc00:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800fc04:	4638      	mov	r0, r7
 800fc06:	f004 fee5 	bl	80149d4 <ucdr_serialize_int16_t>
 800fc0a:	68e9      	ldr	r1, [r5, #12]
 800fc0c:	4681      	mov	r9, r0
 800fc0e:	4638      	mov	r0, r7
 800fc10:	f004 fbba 	bl	8014388 <ucdr_serialize_uint32_t>
 800fc14:	68eb      	ldr	r3, [r5, #12]
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d0eb      	beq.n	800fbf2 <uxr_serialize_ActivityInfoVariant+0x3e>
 800fc1a:	b320      	cbz	r0, 800fc66 <uxr_serialize_ActivityInfoVariant+0xb2>
 800fc1c:	f105 080c 	add.w	r8, r5, #12
 800fc20:	2600      	movs	r6, #0
 800fc22:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 800fc26:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 800fc2a:	f89a 1010 	ldrb.w	r1, [sl, #16]
 800fc2e:	4638      	mov	r0, r7
 800fc30:	f004 f994 	bl	8013f5c <ucdr_serialize_uint8_t>
 800fc34:	2800      	cmp	r0, #0
 800fc36:	d053      	beq.n	800fce0 <uxr_serialize_ActivityInfoVariant+0x12c>
 800fc38:	f89a 3010 	ldrb.w	r3, [sl, #16]
 800fc3c:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 800fc40:	0074      	lsls	r4, r6, #1
 800fc42:	00c9      	lsls	r1, r1, #3
 800fc44:	2b03      	cmp	r3, #3
 800fc46:	d854      	bhi.n	800fcf2 <uxr_serialize_ActivityInfoVariant+0x13e>
 800fc48:	e8df f003 	tbb	[pc, r3]
 800fc4c:	02102132 	.word	0x02102132
 800fc50:	4441      	add	r1, r8
 800fc52:	4638      	mov	r0, r7
 800fc54:	6889      	ldr	r1, [r1, #8]
 800fc56:	f005 f8d9 	bl	8014e0c <ucdr_serialize_string>
 800fc5a:	68ea      	ldr	r2, [r5, #12]
 800fc5c:	3601      	adds	r6, #1
 800fc5e:	4296      	cmp	r6, r2
 800fc60:	d242      	bcs.n	800fce8 <uxr_serialize_ActivityInfoVariant+0x134>
 800fc62:	2800      	cmp	r0, #0
 800fc64:	d1dd      	bne.n	800fc22 <uxr_serialize_ActivityInfoVariant+0x6e>
 800fc66:	f04f 0900 	mov.w	r9, #0
 800fc6a:	e7b4      	b.n	800fbd6 <uxr_serialize_ActivityInfoVariant+0x22>
 800fc6c:	3108      	adds	r1, #8
 800fc6e:	4441      	add	r1, r8
 800fc70:	2210      	movs	r2, #16
 800fc72:	4638      	mov	r0, r7
 800fc74:	f004 f87c 	bl	8013d70 <ucdr_serialize_array_uint8_t>
 800fc78:	4434      	add	r4, r6
 800fc7a:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800fc7e:	4604      	mov	r4, r0
 800fc80:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800fc82:	4638      	mov	r0, r7
 800fc84:	f004 fb80 	bl	8014388 <ucdr_serialize_uint32_t>
 800fc88:	4020      	ands	r0, r4
 800fc8a:	b2c0      	uxtb	r0, r0
 800fc8c:	e7e5      	b.n	800fc5a <uxr_serialize_ActivityInfoVariant+0xa6>
 800fc8e:	3108      	adds	r1, #8
 800fc90:	4441      	add	r1, r8
 800fc92:	2204      	movs	r2, #4
 800fc94:	4638      	mov	r0, r7
 800fc96:	f004 f86b 	bl	8013d70 <ucdr_serialize_array_uint8_t>
 800fc9a:	4434      	add	r4, r6
 800fc9c:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800fca0:	4604      	mov	r4, r0
 800fca2:	8b19      	ldrh	r1, [r3, #24]
 800fca4:	4638      	mov	r0, r7
 800fca6:	f004 f985 	bl	8013fb4 <ucdr_serialize_uint16_t>
 800fcaa:	4020      	ands	r0, r4
 800fcac:	b2c0      	uxtb	r0, r0
 800fcae:	e7d4      	b.n	800fc5a <uxr_serialize_ActivityInfoVariant+0xa6>
 800fcb0:	3108      	adds	r1, #8
 800fcb2:	4441      	add	r1, r8
 800fcb4:	2202      	movs	r2, #2
 800fcb6:	4638      	mov	r0, r7
 800fcb8:	f004 f85a 	bl	8013d70 <ucdr_serialize_array_uint8_t>
 800fcbc:	4434      	add	r4, r6
 800fcbe:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800fcc2:	4604      	mov	r4, r0
 800fcc4:	7d99      	ldrb	r1, [r3, #22]
 800fcc6:	4638      	mov	r0, r7
 800fcc8:	f004 f948 	bl	8013f5c <ucdr_serialize_uint8_t>
 800fccc:	4020      	ands	r0, r4
 800fcce:	b2c0      	uxtb	r0, r0
 800fcd0:	e7c3      	b.n	800fc5a <uxr_serialize_ActivityInfoVariant+0xa6>
 800fcd2:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800fcd6:	4638      	mov	r0, r7
 800fcd8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fcdc:	f004 be7a 	b.w	80149d4 <ucdr_serialize_int16_t>
 800fce0:	68ea      	ldr	r2, [r5, #12]
 800fce2:	3601      	adds	r6, #1
 800fce4:	42b2      	cmp	r2, r6
 800fce6:	d8be      	bhi.n	800fc66 <uxr_serialize_ActivityInfoVariant+0xb2>
 800fce8:	ea09 0900 	and.w	r9, r9, r0
 800fcec:	fa5f f989 	uxtb.w	r9, r9
 800fcf0:	e771      	b.n	800fbd6 <uxr_serialize_ActivityInfoVariant+0x22>
 800fcf2:	68eb      	ldr	r3, [r5, #12]
 800fcf4:	3601      	adds	r6, #1
 800fcf6:	429e      	cmp	r6, r3
 800fcf8:	f10a 0a18 	add.w	sl, sl, #24
 800fcfc:	d395      	bcc.n	800fc2a <uxr_serialize_ActivityInfoVariant+0x76>
 800fcfe:	e76a      	b.n	800fbd6 <uxr_serialize_ActivityInfoVariant+0x22>

0800fd00 <uxr_deserialize_BaseObjectReply>:
 800fd00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd04:	2202      	movs	r2, #2
 800fd06:	4606      	mov	r6, r0
 800fd08:	460f      	mov	r7, r1
 800fd0a:	f004 f895 	bl	8013e38 <ucdr_deserialize_array_uint8_t>
 800fd0e:	2202      	movs	r2, #2
 800fd10:	18b9      	adds	r1, r7, r2
 800fd12:	4605      	mov	r5, r0
 800fd14:	4630      	mov	r0, r6
 800fd16:	f004 f88f 	bl	8013e38 <ucdr_deserialize_array_uint8_t>
 800fd1a:	1d39      	adds	r1, r7, #4
 800fd1c:	4680      	mov	r8, r0
 800fd1e:	4630      	mov	r0, r6
 800fd20:	f004 f932 	bl	8013f88 <ucdr_deserialize_uint8_t>
 800fd24:	1d79      	adds	r1, r7, #5
 800fd26:	4604      	mov	r4, r0
 800fd28:	4630      	mov	r0, r6
 800fd2a:	f004 f92d 	bl	8013f88 <ucdr_deserialize_uint8_t>
 800fd2e:	ea05 0508 	and.w	r5, r5, r8
 800fd32:	402c      	ands	r4, r5
 800fd34:	4020      	ands	r0, r4
 800fd36:	b2c0      	uxtb	r0, r0
 800fd38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800fd3c <uxr_serialize_ReadSpecification>:
 800fd3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd40:	460e      	mov	r6, r1
 800fd42:	7809      	ldrb	r1, [r1, #0]
 800fd44:	4607      	mov	r7, r0
 800fd46:	f004 f909 	bl	8013f5c <ucdr_serialize_uint8_t>
 800fd4a:	7871      	ldrb	r1, [r6, #1]
 800fd4c:	4604      	mov	r4, r0
 800fd4e:	4638      	mov	r0, r7
 800fd50:	f004 f904 	bl	8013f5c <ucdr_serialize_uint8_t>
 800fd54:	78b1      	ldrb	r1, [r6, #2]
 800fd56:	4004      	ands	r4, r0
 800fd58:	4638      	mov	r0, r7
 800fd5a:	f004 f8d1 	bl	8013f00 <ucdr_serialize_bool>
 800fd5e:	78b3      	ldrb	r3, [r6, #2]
 800fd60:	b2e4      	uxtb	r4, r4
 800fd62:	4004      	ands	r4, r0
 800fd64:	b94b      	cbnz	r3, 800fd7a <uxr_serialize_ReadSpecification+0x3e>
 800fd66:	7a31      	ldrb	r1, [r6, #8]
 800fd68:	4638      	mov	r0, r7
 800fd6a:	f004 f8c9 	bl	8013f00 <ucdr_serialize_bool>
 800fd6e:	7a33      	ldrb	r3, [r6, #8]
 800fd70:	4004      	ands	r4, r0
 800fd72:	b943      	cbnz	r3, 800fd86 <uxr_serialize_ReadSpecification+0x4a>
 800fd74:	4620      	mov	r0, r4
 800fd76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd7a:	6871      	ldr	r1, [r6, #4]
 800fd7c:	4638      	mov	r0, r7
 800fd7e:	f005 f845 	bl	8014e0c <ucdr_serialize_string>
 800fd82:	4004      	ands	r4, r0
 800fd84:	e7ef      	b.n	800fd66 <uxr_serialize_ReadSpecification+0x2a>
 800fd86:	8971      	ldrh	r1, [r6, #10]
 800fd88:	4638      	mov	r0, r7
 800fd8a:	f004 f913 	bl	8013fb4 <ucdr_serialize_uint16_t>
 800fd8e:	89b1      	ldrh	r1, [r6, #12]
 800fd90:	4605      	mov	r5, r0
 800fd92:	4638      	mov	r0, r7
 800fd94:	f004 f90e 	bl	8013fb4 <ucdr_serialize_uint16_t>
 800fd98:	89f1      	ldrh	r1, [r6, #14]
 800fd9a:	4005      	ands	r5, r0
 800fd9c:	4638      	mov	r0, r7
 800fd9e:	f004 f909 	bl	8013fb4 <ucdr_serialize_uint16_t>
 800fda2:	8a31      	ldrh	r1, [r6, #16]
 800fda4:	4680      	mov	r8, r0
 800fda6:	4638      	mov	r0, r7
 800fda8:	f004 f904 	bl	8013fb4 <ucdr_serialize_uint16_t>
 800fdac:	b2ed      	uxtb	r5, r5
 800fdae:	4025      	ands	r5, r4
 800fdb0:	ea08 0505 	and.w	r5, r8, r5
 800fdb4:	ea00 0405 	and.w	r4, r0, r5
 800fdb8:	4620      	mov	r0, r4
 800fdba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fdbe:	bf00      	nop

0800fdc0 <uxr_serialize_CREATE_CLIENT_Payload>:
 800fdc0:	f7ff ba16 	b.w	800f1f0 <uxr_serialize_CLIENT_Representation>

0800fdc4 <uxr_serialize_CREATE_Payload>:
 800fdc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdc6:	2202      	movs	r2, #2
 800fdc8:	4607      	mov	r7, r0
 800fdca:	460e      	mov	r6, r1
 800fdcc:	f003 ffd0 	bl	8013d70 <ucdr_serialize_array_uint8_t>
 800fdd0:	2202      	movs	r2, #2
 800fdd2:	18b1      	adds	r1, r6, r2
 800fdd4:	4605      	mov	r5, r0
 800fdd6:	4638      	mov	r0, r7
 800fdd8:	f003 ffca 	bl	8013d70 <ucdr_serialize_array_uint8_t>
 800fddc:	7931      	ldrb	r1, [r6, #4]
 800fdde:	4604      	mov	r4, r0
 800fde0:	4638      	mov	r0, r7
 800fde2:	f004 f8bb 	bl	8013f5c <ucdr_serialize_uint8_t>
 800fde6:	b170      	cbz	r0, 800fe06 <uxr_serialize_CREATE_Payload+0x42>
 800fde8:	7933      	ldrb	r3, [r6, #4]
 800fdea:	402c      	ands	r4, r5
 800fdec:	3b01      	subs	r3, #1
 800fdee:	b2e4      	uxtb	r4, r4
 800fdf0:	2b0d      	cmp	r3, #13
 800fdf2:	d809      	bhi.n	800fe08 <uxr_serialize_CREATE_Payload+0x44>
 800fdf4:	e8df f003 	tbb	[pc, r3]
 800fdf8:	23230a4c 	.word	0x23230a4c
 800fdfc:	0a0a0a0a 	.word	0x0a0a0a0a
 800fe00:	12121208 	.word	0x12121208
 800fe04:	3e45      	.short	0x3e45
 800fe06:	2400      	movs	r4, #0
 800fe08:	4620      	mov	r0, r4
 800fe0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe0c:	f106 0108 	add.w	r1, r6, #8
 800fe10:	4638      	mov	r0, r7
 800fe12:	f7ff faf3 	bl	800f3fc <uxr_serialize_DATAWRITER_Representation>
 800fe16:	4004      	ands	r4, r0
 800fe18:	4620      	mov	r0, r4
 800fe1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe1c:	7a31      	ldrb	r1, [r6, #8]
 800fe1e:	4638      	mov	r0, r7
 800fe20:	f004 f89c 	bl	8013f5c <ucdr_serialize_uint8_t>
 800fe24:	2800      	cmp	r0, #0
 800fe26:	d0ee      	beq.n	800fe06 <uxr_serialize_CREATE_Payload+0x42>
 800fe28:	7a33      	ldrb	r3, [r6, #8]
 800fe2a:	2b01      	cmp	r3, #1
 800fe2c:	d001      	beq.n	800fe32 <uxr_serialize_CREATE_Payload+0x6e>
 800fe2e:	2b02      	cmp	r3, #2
 800fe30:	d1ea      	bne.n	800fe08 <uxr_serialize_CREATE_Payload+0x44>
 800fe32:	68f1      	ldr	r1, [r6, #12]
 800fe34:	4638      	mov	r0, r7
 800fe36:	f004 ffe9 	bl	8014e0c <ucdr_serialize_string>
 800fe3a:	4004      	ands	r4, r0
 800fe3c:	e7e4      	b.n	800fe08 <uxr_serialize_CREATE_Payload+0x44>
 800fe3e:	7a31      	ldrb	r1, [r6, #8]
 800fe40:	4638      	mov	r0, r7
 800fe42:	f004 f88b 	bl	8013f5c <ucdr_serialize_uint8_t>
 800fe46:	4605      	mov	r5, r0
 800fe48:	b158      	cbz	r0, 800fe62 <uxr_serialize_CREATE_Payload+0x9e>
 800fe4a:	7a33      	ldrb	r3, [r6, #8]
 800fe4c:	2b02      	cmp	r3, #2
 800fe4e:	d034      	beq.n	800feba <uxr_serialize_CREATE_Payload+0xf6>
 800fe50:	2b03      	cmp	r3, #3
 800fe52:	d106      	bne.n	800fe62 <uxr_serialize_CREATE_Payload+0x9e>
 800fe54:	68f2      	ldr	r2, [r6, #12]
 800fe56:	f106 0110 	add.w	r1, r6, #16
 800fe5a:	4638      	mov	r0, r7
 800fe5c:	f7fd fa10 	bl	800d280 <ucdr_serialize_sequence_uint8_t>
 800fe60:	4605      	mov	r5, r0
 800fe62:	2202      	movs	r2, #2
 800fe64:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 800fe68:	4638      	mov	r0, r7
 800fe6a:	f003 ff81 	bl	8013d70 <ucdr_serialize_array_uint8_t>
 800fe6e:	4028      	ands	r0, r5
 800fe70:	4004      	ands	r4, r0
 800fe72:	e7c9      	b.n	800fe08 <uxr_serialize_CREATE_Payload+0x44>
 800fe74:	f106 0108 	add.w	r1, r6, #8
 800fe78:	4638      	mov	r0, r7
 800fe7a:	f7ff f9b9 	bl	800f1f0 <uxr_serialize_CLIENT_Representation>
 800fe7e:	4004      	ands	r4, r0
 800fe80:	e7c2      	b.n	800fe08 <uxr_serialize_CREATE_Payload+0x44>
 800fe82:	f106 0108 	add.w	r1, r6, #8
 800fe86:	4638      	mov	r0, r7
 800fe88:	f7ff fa6e 	bl	800f368 <uxr_serialize_AGENT_Representation>
 800fe8c:	4004      	ands	r4, r0
 800fe8e:	e7bb      	b.n	800fe08 <uxr_serialize_CREATE_Payload+0x44>
 800fe90:	7a31      	ldrb	r1, [r6, #8]
 800fe92:	4638      	mov	r0, r7
 800fe94:	f004 f862 	bl	8013f5c <ucdr_serialize_uint8_t>
 800fe98:	4605      	mov	r5, r0
 800fe9a:	b130      	cbz	r0, 800feaa <uxr_serialize_CREATE_Payload+0xe6>
 800fe9c:	7a33      	ldrb	r3, [r6, #8]
 800fe9e:	2b02      	cmp	r3, #2
 800fea0:	d011      	beq.n	800fec6 <uxr_serialize_CREATE_Payload+0x102>
 800fea2:	2b03      	cmp	r3, #3
 800fea4:	d015      	beq.n	800fed2 <uxr_serialize_CREATE_Payload+0x10e>
 800fea6:	2b01      	cmp	r3, #1
 800fea8:	d00d      	beq.n	800fec6 <uxr_serialize_CREATE_Payload+0x102>
 800feaa:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 800feae:	4638      	mov	r0, r7
 800feb0:	f004 fd90 	bl	80149d4 <ucdr_serialize_int16_t>
 800feb4:	4028      	ands	r0, r5
 800feb6:	4004      	ands	r4, r0
 800feb8:	e7a6      	b.n	800fe08 <uxr_serialize_CREATE_Payload+0x44>
 800feba:	68f1      	ldr	r1, [r6, #12]
 800febc:	4638      	mov	r0, r7
 800febe:	f004 ffa5 	bl	8014e0c <ucdr_serialize_string>
 800fec2:	4605      	mov	r5, r0
 800fec4:	e7cd      	b.n	800fe62 <uxr_serialize_CREATE_Payload+0x9e>
 800fec6:	68f1      	ldr	r1, [r6, #12]
 800fec8:	4638      	mov	r0, r7
 800feca:	f004 ff9f 	bl	8014e0c <ucdr_serialize_string>
 800fece:	4605      	mov	r5, r0
 800fed0:	e7eb      	b.n	800feaa <uxr_serialize_CREATE_Payload+0xe6>
 800fed2:	68f2      	ldr	r2, [r6, #12]
 800fed4:	f106 0110 	add.w	r1, r6, #16
 800fed8:	4638      	mov	r0, r7
 800feda:	f7fd f9d1 	bl	800d280 <ucdr_serialize_sequence_uint8_t>
 800fede:	4605      	mov	r5, r0
 800fee0:	e7e3      	b.n	800feaa <uxr_serialize_CREATE_Payload+0xe6>
 800fee2:	bf00      	nop

0800fee4 <uxr_deserialize_GET_INFO_Payload>:
 800fee4:	b570      	push	{r4, r5, r6, lr}
 800fee6:	2202      	movs	r2, #2
 800fee8:	4605      	mov	r5, r0
 800feea:	460e      	mov	r6, r1
 800feec:	f003 ffa4 	bl	8013e38 <ucdr_deserialize_array_uint8_t>
 800fef0:	2202      	movs	r2, #2
 800fef2:	18b1      	adds	r1, r6, r2
 800fef4:	4604      	mov	r4, r0
 800fef6:	4628      	mov	r0, r5
 800fef8:	f003 ff9e 	bl	8013e38 <ucdr_deserialize_array_uint8_t>
 800fefc:	1d31      	adds	r1, r6, #4
 800fefe:	4004      	ands	r4, r0
 800ff00:	4628      	mov	r0, r5
 800ff02:	f004 fb71 	bl	80145e8 <ucdr_deserialize_uint32_t>
 800ff06:	b2e4      	uxtb	r4, r4
 800ff08:	4020      	ands	r0, r4
 800ff0a:	bd70      	pop	{r4, r5, r6, pc}

0800ff0c <uxr_serialize_DELETE_Payload>:
 800ff0c:	b570      	push	{r4, r5, r6, lr}
 800ff0e:	2202      	movs	r2, #2
 800ff10:	4605      	mov	r5, r0
 800ff12:	460e      	mov	r6, r1
 800ff14:	f003 ff2c 	bl	8013d70 <ucdr_serialize_array_uint8_t>
 800ff18:	2202      	movs	r2, #2
 800ff1a:	4604      	mov	r4, r0
 800ff1c:	18b1      	adds	r1, r6, r2
 800ff1e:	4628      	mov	r0, r5
 800ff20:	f003 ff26 	bl	8013d70 <ucdr_serialize_array_uint8_t>
 800ff24:	4020      	ands	r0, r4
 800ff26:	b2c0      	uxtb	r0, r0
 800ff28:	bd70      	pop	{r4, r5, r6, pc}
 800ff2a:	bf00      	nop

0800ff2c <uxr_deserialize_STATUS_AGENT_Payload>:
 800ff2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff30:	4605      	mov	r5, r0
 800ff32:	460e      	mov	r6, r1
 800ff34:	f004 f828 	bl	8013f88 <ucdr_deserialize_uint8_t>
 800ff38:	1c71      	adds	r1, r6, #1
 800ff3a:	4604      	mov	r4, r0
 800ff3c:	4628      	mov	r0, r5
 800ff3e:	f004 f823 	bl	8013f88 <ucdr_deserialize_uint8_t>
 800ff42:	2204      	movs	r2, #4
 800ff44:	18b1      	adds	r1, r6, r2
 800ff46:	4680      	mov	r8, r0
 800ff48:	4628      	mov	r0, r5
 800ff4a:	f003 ff75 	bl	8013e38 <ucdr_deserialize_array_uint8_t>
 800ff4e:	f106 0108 	add.w	r1, r6, #8
 800ff52:	4607      	mov	r7, r0
 800ff54:	2202      	movs	r2, #2
 800ff56:	4628      	mov	r0, r5
 800ff58:	f003 ff6e 	bl	8013e38 <ucdr_deserialize_array_uint8_t>
 800ff5c:	ea04 0308 	and.w	r3, r4, r8
 800ff60:	b2db      	uxtb	r3, r3
 800ff62:	ea03 0407 	and.w	r4, r3, r7
 800ff66:	2202      	movs	r2, #2
 800ff68:	4607      	mov	r7, r0
 800ff6a:	f106 010a 	add.w	r1, r6, #10
 800ff6e:	4628      	mov	r0, r5
 800ff70:	f003 ff62 	bl	8013e38 <ucdr_deserialize_array_uint8_t>
 800ff74:	f106 010c 	add.w	r1, r6, #12
 800ff78:	4603      	mov	r3, r0
 800ff7a:	4628      	mov	r0, r5
 800ff7c:	461d      	mov	r5, r3
 800ff7e:	f003 ffd5 	bl	8013f2c <ucdr_deserialize_bool>
 800ff82:	403c      	ands	r4, r7
 800ff84:	4025      	ands	r5, r4
 800ff86:	4028      	ands	r0, r5
 800ff88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ff8c <uxr_deserialize_STATUS_Payload>:
 800ff8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff90:	2202      	movs	r2, #2
 800ff92:	4606      	mov	r6, r0
 800ff94:	460f      	mov	r7, r1
 800ff96:	f003 ff4f 	bl	8013e38 <ucdr_deserialize_array_uint8_t>
 800ff9a:	2202      	movs	r2, #2
 800ff9c:	18b9      	adds	r1, r7, r2
 800ff9e:	4605      	mov	r5, r0
 800ffa0:	4630      	mov	r0, r6
 800ffa2:	f003 ff49 	bl	8013e38 <ucdr_deserialize_array_uint8_t>
 800ffa6:	1d39      	adds	r1, r7, #4
 800ffa8:	4680      	mov	r8, r0
 800ffaa:	4630      	mov	r0, r6
 800ffac:	f003 ffec 	bl	8013f88 <ucdr_deserialize_uint8_t>
 800ffb0:	1d79      	adds	r1, r7, #5
 800ffb2:	4604      	mov	r4, r0
 800ffb4:	4630      	mov	r0, r6
 800ffb6:	f003 ffe7 	bl	8013f88 <ucdr_deserialize_uint8_t>
 800ffba:	ea05 0508 	and.w	r5, r5, r8
 800ffbe:	402c      	ands	r4, r5
 800ffc0:	4020      	ands	r0, r4
 800ffc2:	b2c0      	uxtb	r0, r0
 800ffc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ffc8 <uxr_serialize_INFO_Payload>:
 800ffc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffcc:	2202      	movs	r2, #2
 800ffce:	460c      	mov	r4, r1
 800ffd0:	4605      	mov	r5, r0
 800ffd2:	f003 fecd 	bl	8013d70 <ucdr_serialize_array_uint8_t>
 800ffd6:	2202      	movs	r2, #2
 800ffd8:	18a1      	adds	r1, r4, r2
 800ffda:	4680      	mov	r8, r0
 800ffdc:	4628      	mov	r0, r5
 800ffde:	f003 fec7 	bl	8013d70 <ucdr_serialize_array_uint8_t>
 800ffe2:	7921      	ldrb	r1, [r4, #4]
 800ffe4:	4607      	mov	r7, r0
 800ffe6:	4628      	mov	r0, r5
 800ffe8:	f003 ffb8 	bl	8013f5c <ucdr_serialize_uint8_t>
 800ffec:	7961      	ldrb	r1, [r4, #5]
 800ffee:	4606      	mov	r6, r0
 800fff0:	4628      	mov	r0, r5
 800fff2:	f003 ffb3 	bl	8013f5c <ucdr_serialize_uint8_t>
 800fff6:	ea08 0807 	and.w	r8, r8, r7
 800fffa:	ea06 0608 	and.w	r6, r6, r8
 800fffe:	4006      	ands	r6, r0
 8010000:	7a21      	ldrb	r1, [r4, #8]
 8010002:	4628      	mov	r0, r5
 8010004:	f003 ff7c 	bl	8013f00 <ucdr_serialize_bool>
 8010008:	7a23      	ldrb	r3, [r4, #8]
 801000a:	b2f7      	uxtb	r7, r6
 801000c:	4606      	mov	r6, r0
 801000e:	b96b      	cbnz	r3, 801002c <uxr_serialize_INFO_Payload+0x64>
 8010010:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8010014:	4628      	mov	r0, r5
 8010016:	f003 ff73 	bl	8013f00 <ucdr_serialize_bool>
 801001a:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 801001e:	4030      	ands	r0, r6
 8010020:	b2c6      	uxtb	r6, r0
 8010022:	b983      	cbnz	r3, 8010046 <uxr_serialize_INFO_Payload+0x7e>
 8010024:	ea06 0007 	and.w	r0, r6, r7
 8010028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801002c:	7b21      	ldrb	r1, [r4, #12]
 801002e:	4628      	mov	r0, r5
 8010030:	f003 ff94 	bl	8013f5c <ucdr_serialize_uint8_t>
 8010034:	b188      	cbz	r0, 801005a <uxr_serialize_INFO_Payload+0x92>
 8010036:	f104 010c 	add.w	r1, r4, #12
 801003a:	4628      	mov	r0, r5
 801003c:	f7ff fa06 	bl	800f44c <uxr_serialize_ObjectVariant.part.0>
 8010040:	4030      	ands	r0, r6
 8010042:	b2c6      	uxtb	r6, r0
 8010044:	e7e4      	b.n	8010010 <uxr_serialize_INFO_Payload+0x48>
 8010046:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 801004a:	4628      	mov	r0, r5
 801004c:	f7ff fdb2 	bl	800fbb4 <uxr_serialize_ActivityInfoVariant>
 8010050:	4006      	ands	r6, r0
 8010052:	ea06 0007 	and.w	r0, r6, r7
 8010056:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801005a:	4606      	mov	r6, r0
 801005c:	e7d8      	b.n	8010010 <uxr_serialize_INFO_Payload+0x48>
 801005e:	bf00      	nop

08010060 <uxr_serialize_READ_DATA_Payload>:
 8010060:	b570      	push	{r4, r5, r6, lr}
 8010062:	2202      	movs	r2, #2
 8010064:	4605      	mov	r5, r0
 8010066:	460e      	mov	r6, r1
 8010068:	f003 fe82 	bl	8013d70 <ucdr_serialize_array_uint8_t>
 801006c:	2202      	movs	r2, #2
 801006e:	18b1      	adds	r1, r6, r2
 8010070:	4604      	mov	r4, r0
 8010072:	4628      	mov	r0, r5
 8010074:	f003 fe7c 	bl	8013d70 <ucdr_serialize_array_uint8_t>
 8010078:	1d31      	adds	r1, r6, #4
 801007a:	4004      	ands	r4, r0
 801007c:	4628      	mov	r0, r5
 801007e:	f7ff fe5d 	bl	800fd3c <uxr_serialize_ReadSpecification>
 8010082:	b2e4      	uxtb	r4, r4
 8010084:	4020      	ands	r0, r4
 8010086:	bd70      	pop	{r4, r5, r6, pc}

08010088 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8010088:	b570      	push	{r4, r5, r6, lr}
 801008a:	2202      	movs	r2, #2
 801008c:	4605      	mov	r5, r0
 801008e:	460e      	mov	r6, r1
 8010090:	f003 fe6e 	bl	8013d70 <ucdr_serialize_array_uint8_t>
 8010094:	2202      	movs	r2, #2
 8010096:	4604      	mov	r4, r0
 8010098:	18b1      	adds	r1, r6, r2
 801009a:	4628      	mov	r0, r5
 801009c:	f003 fe68 	bl	8013d70 <ucdr_serialize_array_uint8_t>
 80100a0:	4020      	ands	r0, r4
 80100a2:	b2c0      	uxtb	r0, r0
 80100a4:	bd70      	pop	{r4, r5, r6, pc}
 80100a6:	bf00      	nop

080100a8 <uxr_serialize_ACKNACK_Payload>:
 80100a8:	b570      	push	{r4, r5, r6, lr}
 80100aa:	460c      	mov	r4, r1
 80100ac:	460e      	mov	r6, r1
 80100ae:	f834 1b02 	ldrh.w	r1, [r4], #2
 80100b2:	4605      	mov	r5, r0
 80100b4:	f003 ff7e 	bl	8013fb4 <ucdr_serialize_uint16_t>
 80100b8:	2202      	movs	r2, #2
 80100ba:	4621      	mov	r1, r4
 80100bc:	4604      	mov	r4, r0
 80100be:	4628      	mov	r0, r5
 80100c0:	f003 fe56 	bl	8013d70 <ucdr_serialize_array_uint8_t>
 80100c4:	7931      	ldrb	r1, [r6, #4]
 80100c6:	4004      	ands	r4, r0
 80100c8:	4628      	mov	r0, r5
 80100ca:	f003 ff47 	bl	8013f5c <ucdr_serialize_uint8_t>
 80100ce:	b2e4      	uxtb	r4, r4
 80100d0:	4020      	ands	r0, r4
 80100d2:	bd70      	pop	{r4, r5, r6, pc}

080100d4 <uxr_deserialize_ACKNACK_Payload>:
 80100d4:	b570      	push	{r4, r5, r6, lr}
 80100d6:	4605      	mov	r5, r0
 80100d8:	460e      	mov	r6, r1
 80100da:	f004 f86b 	bl	80141b4 <ucdr_deserialize_uint16_t>
 80100de:	2202      	movs	r2, #2
 80100e0:	18b1      	adds	r1, r6, r2
 80100e2:	4604      	mov	r4, r0
 80100e4:	4628      	mov	r0, r5
 80100e6:	f003 fea7 	bl	8013e38 <ucdr_deserialize_array_uint8_t>
 80100ea:	1d31      	adds	r1, r6, #4
 80100ec:	4004      	ands	r4, r0
 80100ee:	4628      	mov	r0, r5
 80100f0:	f003 ff4a 	bl	8013f88 <ucdr_deserialize_uint8_t>
 80100f4:	b2e4      	uxtb	r4, r4
 80100f6:	4020      	ands	r0, r4
 80100f8:	bd70      	pop	{r4, r5, r6, pc}
 80100fa:	bf00      	nop

080100fc <uxr_serialize_HEARTBEAT_Payload>:
 80100fc:	b570      	push	{r4, r5, r6, lr}
 80100fe:	460d      	mov	r5, r1
 8010100:	8809      	ldrh	r1, [r1, #0]
 8010102:	4606      	mov	r6, r0
 8010104:	f003 ff56 	bl	8013fb4 <ucdr_serialize_uint16_t>
 8010108:	8869      	ldrh	r1, [r5, #2]
 801010a:	4604      	mov	r4, r0
 801010c:	4630      	mov	r0, r6
 801010e:	f003 ff51 	bl	8013fb4 <ucdr_serialize_uint16_t>
 8010112:	7929      	ldrb	r1, [r5, #4]
 8010114:	4004      	ands	r4, r0
 8010116:	4630      	mov	r0, r6
 8010118:	f003 ff20 	bl	8013f5c <ucdr_serialize_uint8_t>
 801011c:	b2e4      	uxtb	r4, r4
 801011e:	4020      	ands	r0, r4
 8010120:	bd70      	pop	{r4, r5, r6, pc}
 8010122:	bf00      	nop

08010124 <uxr_deserialize_HEARTBEAT_Payload>:
 8010124:	b570      	push	{r4, r5, r6, lr}
 8010126:	4605      	mov	r5, r0
 8010128:	460e      	mov	r6, r1
 801012a:	f004 f843 	bl	80141b4 <ucdr_deserialize_uint16_t>
 801012e:	1cb1      	adds	r1, r6, #2
 8010130:	4604      	mov	r4, r0
 8010132:	4628      	mov	r0, r5
 8010134:	f004 f83e 	bl	80141b4 <ucdr_deserialize_uint16_t>
 8010138:	1d31      	adds	r1, r6, #4
 801013a:	4004      	ands	r4, r0
 801013c:	4628      	mov	r0, r5
 801013e:	f003 ff23 	bl	8013f88 <ucdr_deserialize_uint8_t>
 8010142:	b2e4      	uxtb	r4, r4
 8010144:	4020      	ands	r0, r4
 8010146:	bd70      	pop	{r4, r5, r6, pc}

08010148 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8010148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801014c:	4605      	mov	r5, r0
 801014e:	460e      	mov	r6, r1
 8010150:	f004 fdcc 	bl	8014cec <ucdr_deserialize_int32_t>
 8010154:	1d31      	adds	r1, r6, #4
 8010156:	4607      	mov	r7, r0
 8010158:	4628      	mov	r0, r5
 801015a:	f004 fa45 	bl	80145e8 <ucdr_deserialize_uint32_t>
 801015e:	f106 0108 	add.w	r1, r6, #8
 8010162:	4680      	mov	r8, r0
 8010164:	4628      	mov	r0, r5
 8010166:	f004 fdc1 	bl	8014cec <ucdr_deserialize_int32_t>
 801016a:	f106 010c 	add.w	r1, r6, #12
 801016e:	4604      	mov	r4, r0
 8010170:	4628      	mov	r0, r5
 8010172:	f004 fa39 	bl	80145e8 <ucdr_deserialize_uint32_t>
 8010176:	ea07 0708 	and.w	r7, r7, r8
 801017a:	403c      	ands	r4, r7
 801017c:	f106 0110 	add.w	r1, r6, #16
 8010180:	4004      	ands	r4, r0
 8010182:	4628      	mov	r0, r5
 8010184:	f004 fdb2 	bl	8014cec <ucdr_deserialize_int32_t>
 8010188:	f106 0114 	add.w	r1, r6, #20
 801018c:	4607      	mov	r7, r0
 801018e:	4628      	mov	r0, r5
 8010190:	f004 fa2a 	bl	80145e8 <ucdr_deserialize_uint32_t>
 8010194:	b2e4      	uxtb	r4, r4
 8010196:	403c      	ands	r4, r7
 8010198:	4020      	ands	r0, r4
 801019a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801019e:	bf00      	nop

080101a0 <uxr_serialize_SampleIdentity>:
 80101a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101a4:	220c      	movs	r2, #12
 80101a6:	4604      	mov	r4, r0
 80101a8:	460d      	mov	r5, r1
 80101aa:	f003 fde1 	bl	8013d70 <ucdr_serialize_array_uint8_t>
 80101ae:	2203      	movs	r2, #3
 80101b0:	f105 010c 	add.w	r1, r5, #12
 80101b4:	4607      	mov	r7, r0
 80101b6:	4620      	mov	r0, r4
 80101b8:	f003 fdda 	bl	8013d70 <ucdr_serialize_array_uint8_t>
 80101bc:	7be9      	ldrb	r1, [r5, #15]
 80101be:	4680      	mov	r8, r0
 80101c0:	4620      	mov	r0, r4
 80101c2:	f003 fecb 	bl	8013f5c <ucdr_serialize_uint8_t>
 80101c6:	6929      	ldr	r1, [r5, #16]
 80101c8:	4606      	mov	r6, r0
 80101ca:	4620      	mov	r0, r4
 80101cc:	f004 fcf6 	bl	8014bbc <ucdr_serialize_int32_t>
 80101d0:	6969      	ldr	r1, [r5, #20]
 80101d2:	4603      	mov	r3, r0
 80101d4:	4620      	mov	r0, r4
 80101d6:	ea07 0708 	and.w	r7, r7, r8
 80101da:	461c      	mov	r4, r3
 80101dc:	f004 f8d4 	bl	8014388 <ucdr_serialize_uint32_t>
 80101e0:	403e      	ands	r6, r7
 80101e2:	4034      	ands	r4, r6
 80101e4:	4020      	ands	r0, r4
 80101e6:	b2c0      	uxtb	r0, r0
 80101e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080101ec <uxr_deserialize_SampleIdentity>:
 80101ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101f0:	220c      	movs	r2, #12
 80101f2:	4604      	mov	r4, r0
 80101f4:	460d      	mov	r5, r1
 80101f6:	f003 fe1f 	bl	8013e38 <ucdr_deserialize_array_uint8_t>
 80101fa:	2203      	movs	r2, #3
 80101fc:	f105 010c 	add.w	r1, r5, #12
 8010200:	4607      	mov	r7, r0
 8010202:	4620      	mov	r0, r4
 8010204:	f003 fe18 	bl	8013e38 <ucdr_deserialize_array_uint8_t>
 8010208:	f105 010f 	add.w	r1, r5, #15
 801020c:	4680      	mov	r8, r0
 801020e:	4620      	mov	r0, r4
 8010210:	f003 feba 	bl	8013f88 <ucdr_deserialize_uint8_t>
 8010214:	f105 0110 	add.w	r1, r5, #16
 8010218:	4606      	mov	r6, r0
 801021a:	4620      	mov	r0, r4
 801021c:	f004 fd66 	bl	8014cec <ucdr_deserialize_int32_t>
 8010220:	f105 0114 	add.w	r1, r5, #20
 8010224:	4603      	mov	r3, r0
 8010226:	4620      	mov	r0, r4
 8010228:	ea07 0708 	and.w	r7, r7, r8
 801022c:	461c      	mov	r4, r3
 801022e:	f004 f9db 	bl	80145e8 <ucdr_deserialize_uint32_t>
 8010232:	403e      	ands	r6, r7
 8010234:	4034      	ands	r4, r6
 8010236:	4020      	ands	r0, r4
 8010238:	b2c0      	uxtb	r0, r0
 801023a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801023e:	bf00      	nop

08010240 <rcl_client_get_rmw_handle>:
 8010240:	b118      	cbz	r0, 801024a <rcl_client_get_rmw_handle+0xa>
 8010242:	6800      	ldr	r0, [r0, #0]
 8010244:	b108      	cbz	r0, 801024a <rcl_client_get_rmw_handle+0xa>
 8010246:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801024a:	4770      	bx	lr

0801024c <rcl_send_request>:
 801024c:	b570      	push	{r4, r5, r6, lr}
 801024e:	b082      	sub	sp, #8
 8010250:	b1e8      	cbz	r0, 801028e <rcl_send_request+0x42>
 8010252:	4604      	mov	r4, r0
 8010254:	6800      	ldr	r0, [r0, #0]
 8010256:	b1d0      	cbz	r0, 801028e <rcl_send_request+0x42>
 8010258:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 801025c:	b1bb      	cbz	r3, 801028e <rcl_send_request+0x42>
 801025e:	460e      	mov	r6, r1
 8010260:	b1d1      	cbz	r1, 8010298 <rcl_send_request+0x4c>
 8010262:	4615      	mov	r5, r2
 8010264:	b1c2      	cbz	r2, 8010298 <rcl_send_request+0x4c>
 8010266:	2105      	movs	r1, #5
 8010268:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 801026c:	f002 fb3c 	bl	80128e8 <__atomic_load_8>
 8010270:	6823      	ldr	r3, [r4, #0]
 8010272:	e9c5 0100 	strd	r0, r1, [r5]
 8010276:	462a      	mov	r2, r5
 8010278:	4631      	mov	r1, r6
 801027a:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801027e:	f003 f9c1 	bl	8013604 <rmw_send_request>
 8010282:	4606      	mov	r6, r0
 8010284:	b160      	cbz	r0, 80102a0 <rcl_send_request+0x54>
 8010286:	2601      	movs	r6, #1
 8010288:	4630      	mov	r0, r6
 801028a:	b002      	add	sp, #8
 801028c:	bd70      	pop	{r4, r5, r6, pc}
 801028e:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 8010292:	4630      	mov	r0, r6
 8010294:	b002      	add	sp, #8
 8010296:	bd70      	pop	{r4, r5, r6, pc}
 8010298:	260b      	movs	r6, #11
 801029a:	4630      	mov	r0, r6
 801029c:	b002      	add	sp, #8
 801029e:	bd70      	pop	{r4, r5, r6, pc}
 80102a0:	6820      	ldr	r0, [r4, #0]
 80102a2:	2105      	movs	r1, #5
 80102a4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80102a8:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 80102ac:	9100      	str	r1, [sp, #0]
 80102ae:	f002 fb87 	bl	80129c0 <__atomic_exchange_8>
 80102b2:	4630      	mov	r0, r6
 80102b4:	b002      	add	sp, #8
 80102b6:	bd70      	pop	{r4, r5, r6, pc}

080102b8 <rcl_take_response>:
 80102b8:	b570      	push	{r4, r5, r6, lr}
 80102ba:	468e      	mov	lr, r1
 80102bc:	460c      	mov	r4, r1
 80102be:	4616      	mov	r6, r2
 80102c0:	4605      	mov	r5, r0
 80102c2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80102c6:	b08c      	sub	sp, #48	@ 0x30
 80102c8:	f10d 0c18 	add.w	ip, sp, #24
 80102cc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80102d0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80102d4:	e88c 0003 	stmia.w	ip, {r0, r1}
 80102d8:	b35d      	cbz	r5, 8010332 <rcl_take_response+0x7a>
 80102da:	682b      	ldr	r3, [r5, #0]
 80102dc:	b34b      	cbz	r3, 8010332 <rcl_take_response+0x7a>
 80102de:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80102e2:	b330      	cbz	r0, 8010332 <rcl_take_response+0x7a>
 80102e4:	b346      	cbz	r6, 8010338 <rcl_take_response+0x80>
 80102e6:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8010340 <rcl_take_response+0x88>
 80102ea:	2300      	movs	r3, #0
 80102ec:	f88d 3007 	strb.w	r3, [sp, #7]
 80102f0:	4632      	mov	r2, r6
 80102f2:	f10d 0307 	add.w	r3, sp, #7
 80102f6:	a902      	add	r1, sp, #8
 80102f8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80102fc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8010300:	f003 fa88 	bl	8013814 <rmw_take_response>
 8010304:	4605      	mov	r5, r0
 8010306:	b9c8      	cbnz	r0, 801033c <rcl_take_response+0x84>
 8010308:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801030c:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8010310:	2a00      	cmp	r2, #0
 8010312:	bf08      	it	eq
 8010314:	461d      	moveq	r5, r3
 8010316:	f10d 0e18 	add.w	lr, sp, #24
 801031a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801031e:	46a4      	mov	ip, r4
 8010320:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010324:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8010328:	e88c 0003 	stmia.w	ip, {r0, r1}
 801032c:	4628      	mov	r0, r5
 801032e:	b00c      	add	sp, #48	@ 0x30
 8010330:	bd70      	pop	{r4, r5, r6, pc}
 8010332:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 8010336:	e7ee      	b.n	8010316 <rcl_take_response+0x5e>
 8010338:	250b      	movs	r5, #11
 801033a:	e7ec      	b.n	8010316 <rcl_take_response+0x5e>
 801033c:	2501      	movs	r5, #1
 801033e:	e7ea      	b.n	8010316 <rcl_take_response+0x5e>
	...

08010348 <rcl_client_is_valid>:
 8010348:	b130      	cbz	r0, 8010358 <rcl_client_is_valid+0x10>
 801034a:	6800      	ldr	r0, [r0, #0]
 801034c:	b120      	cbz	r0, 8010358 <rcl_client_is_valid+0x10>
 801034e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8010352:	3800      	subs	r0, #0
 8010354:	bf18      	it	ne
 8010356:	2001      	movne	r0, #1
 8010358:	4770      	bx	lr
 801035a:	bf00      	nop

0801035c <rcl_convert_rmw_ret_to_rcl_ret>:
 801035c:	280b      	cmp	r0, #11
 801035e:	dc0d      	bgt.n	801037c <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8010360:	2800      	cmp	r0, #0
 8010362:	db09      	blt.n	8010378 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8010364:	280b      	cmp	r0, #11
 8010366:	d807      	bhi.n	8010378 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8010368:	e8df f000 	tbb	[pc, r0]
 801036c:	07060607 	.word	0x07060607
 8010370:	06060606 	.word	0x06060606
 8010374:	07070606 	.word	0x07070606
 8010378:	2001      	movs	r0, #1
 801037a:	4770      	bx	lr
 801037c:	28cb      	cmp	r0, #203	@ 0xcb
 801037e:	bf18      	it	ne
 8010380:	2001      	movne	r0, #1
 8010382:	4770      	bx	lr

08010384 <rcl_get_zero_initialized_context>:
 8010384:	4a03      	ldr	r2, [pc, #12]	@ (8010394 <rcl_get_zero_initialized_context+0x10>)
 8010386:	4603      	mov	r3, r0
 8010388:	e892 0003 	ldmia.w	r2, {r0, r1}
 801038c:	e883 0003 	stmia.w	r3, {r0, r1}
 8010390:	4618      	mov	r0, r3
 8010392:	4770      	bx	lr
 8010394:	0801a6bc 	.word	0x0801a6bc

08010398 <rcl_context_is_valid>:
 8010398:	b118      	cbz	r0, 80103a2 <rcl_context_is_valid+0xa>
 801039a:	6840      	ldr	r0, [r0, #4]
 801039c:	3800      	subs	r0, #0
 801039e:	bf18      	it	ne
 80103a0:	2001      	movne	r0, #1
 80103a2:	4770      	bx	lr

080103a4 <__cleanup_context>:
 80103a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80103a8:	4606      	mov	r6, r0
 80103aa:	6800      	ldr	r0, [r0, #0]
 80103ac:	2300      	movs	r3, #0
 80103ae:	6073      	str	r3, [r6, #4]
 80103b0:	2800      	cmp	r0, #0
 80103b2:	d049      	beq.n	8010448 <__cleanup_context+0xa4>
 80103b4:	6947      	ldr	r7, [r0, #20]
 80103b6:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80103ba:	f8d0 9010 	ldr.w	r9, [r0, #16]
 80103be:	b137      	cbz	r7, 80103ce <__cleanup_context+0x2a>
 80103c0:	3014      	adds	r0, #20
 80103c2:	f000 fa6d 	bl	80108a0 <rcl_init_options_fini>
 80103c6:	4607      	mov	r7, r0
 80103c8:	2800      	cmp	r0, #0
 80103ca:	d144      	bne.n	8010456 <__cleanup_context+0xb2>
 80103cc:	6830      	ldr	r0, [r6, #0]
 80103ce:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80103d0:	b143      	cbz	r3, 80103e4 <__cleanup_context+0x40>
 80103d2:	3028      	adds	r0, #40	@ 0x28
 80103d4:	f003 f872 	bl	80134bc <rmw_context_fini>
 80103d8:	b118      	cbz	r0, 80103e2 <__cleanup_context+0x3e>
 80103da:	2f00      	cmp	r7, #0
 80103dc:	d03e      	beq.n	801045c <__cleanup_context+0xb8>
 80103de:	f7fb faeb 	bl	800b9b8 <rcutils_reset_error>
 80103e2:	6830      	ldr	r0, [r6, #0]
 80103e4:	6a03      	ldr	r3, [r0, #32]
 80103e6:	b1db      	cbz	r3, 8010420 <__cleanup_context+0x7c>
 80103e8:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 80103ec:	2a01      	cmp	r2, #1
 80103ee:	f17c 0100 	sbcs.w	r1, ip, #0
 80103f2:	db11      	blt.n	8010418 <__cleanup_context+0x74>
 80103f4:	2400      	movs	r4, #0
 80103f6:	4625      	mov	r5, r4
 80103f8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80103fc:	4649      	mov	r1, r9
 80103fe:	b1b8      	cbz	r0, 8010430 <__cleanup_context+0x8c>
 8010400:	47c0      	blx	r8
 8010402:	6833      	ldr	r3, [r6, #0]
 8010404:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8010408:	3401      	adds	r4, #1
 801040a:	f145 0500 	adc.w	r5, r5, #0
 801040e:	4294      	cmp	r4, r2
 8010410:	eb75 010c 	sbcs.w	r1, r5, ip
 8010414:	6a1b      	ldr	r3, [r3, #32]
 8010416:	dbef      	blt.n	80103f8 <__cleanup_context+0x54>
 8010418:	4618      	mov	r0, r3
 801041a:	4649      	mov	r1, r9
 801041c:	47c0      	blx	r8
 801041e:	6830      	ldr	r0, [r6, #0]
 8010420:	4649      	mov	r1, r9
 8010422:	47c0      	blx	r8
 8010424:	2300      	movs	r3, #0
 8010426:	e9c6 3300 	strd	r3, r3, [r6]
 801042a:	4638      	mov	r0, r7
 801042c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010430:	3401      	adds	r4, #1
 8010432:	f145 0500 	adc.w	r5, r5, #0
 8010436:	4294      	cmp	r4, r2
 8010438:	eb75 010c 	sbcs.w	r1, r5, ip
 801043c:	dbdc      	blt.n	80103f8 <__cleanup_context+0x54>
 801043e:	4618      	mov	r0, r3
 8010440:	4649      	mov	r1, r9
 8010442:	47c0      	blx	r8
 8010444:	6830      	ldr	r0, [r6, #0]
 8010446:	e7eb      	b.n	8010420 <__cleanup_context+0x7c>
 8010448:	4607      	mov	r7, r0
 801044a:	2300      	movs	r3, #0
 801044c:	e9c6 3300 	strd	r3, r3, [r6]
 8010450:	4638      	mov	r0, r7
 8010452:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010456:	f7fb faaf 	bl	800b9b8 <rcutils_reset_error>
 801045a:	e7b7      	b.n	80103cc <__cleanup_context+0x28>
 801045c:	f7ff ff7e 	bl	801035c <rcl_convert_rmw_ret_to_rcl_ret>
 8010460:	4607      	mov	r7, r0
 8010462:	e7bc      	b.n	80103de <__cleanup_context+0x3a>

08010464 <rcl_get_zero_initialized_guard_condition>:
 8010464:	4a03      	ldr	r2, [pc, #12]	@ (8010474 <rcl_get_zero_initialized_guard_condition+0x10>)
 8010466:	4603      	mov	r3, r0
 8010468:	e892 0003 	ldmia.w	r2, {r0, r1}
 801046c:	e883 0003 	stmia.w	r3, {r0, r1}
 8010470:	4618      	mov	r0, r3
 8010472:	4770      	bx	lr
 8010474:	0801a6c4 	.word	0x0801a6c4

08010478 <rcl_guard_condition_init_from_rmw>:
 8010478:	b082      	sub	sp, #8
 801047a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801047e:	b086      	sub	sp, #24
 8010480:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8010484:	4604      	mov	r4, r0
 8010486:	f84c 3f04 	str.w	r3, [ip, #4]!
 801048a:	460e      	mov	r6, r1
 801048c:	4617      	mov	r7, r2
 801048e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010492:	f10d 0e04 	add.w	lr, sp, #4
 8010496:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801049a:	f8dc 3000 	ldr.w	r3, [ip]
 801049e:	f8ce 3000 	str.w	r3, [lr]
 80104a2:	a801      	add	r0, sp, #4
 80104a4:	f7fb fa4c 	bl	800b940 <rcutils_allocator_is_valid>
 80104a8:	b350      	cbz	r0, 8010500 <rcl_guard_condition_init_from_rmw+0x88>
 80104aa:	b34c      	cbz	r4, 8010500 <rcl_guard_condition_init_from_rmw+0x88>
 80104ac:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80104b0:	f1b8 0f00 	cmp.w	r8, #0
 80104b4:	d11e      	bne.n	80104f4 <rcl_guard_condition_init_from_rmw+0x7c>
 80104b6:	b31f      	cbz	r7, 8010500 <rcl_guard_condition_init_from_rmw+0x88>
 80104b8:	4638      	mov	r0, r7
 80104ba:	f7ff ff6d 	bl	8010398 <rcl_context_is_valid>
 80104be:	b328      	cbz	r0, 801050c <rcl_guard_condition_init_from_rmw+0x94>
 80104c0:	9b01      	ldr	r3, [sp, #4]
 80104c2:	9905      	ldr	r1, [sp, #20]
 80104c4:	201c      	movs	r0, #28
 80104c6:	4798      	blx	r3
 80104c8:	4605      	mov	r5, r0
 80104ca:	6060      	str	r0, [r4, #4]
 80104cc:	b358      	cbz	r0, 8010526 <rcl_guard_condition_init_from_rmw+0xae>
 80104ce:	b1fe      	cbz	r6, 8010510 <rcl_guard_condition_init_from_rmw+0x98>
 80104d0:	6006      	str	r6, [r0, #0]
 80104d2:	f880 8004 	strb.w	r8, [r0, #4]
 80104d6:	ac01      	add	r4, sp, #4
 80104d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80104da:	f105 0c08 	add.w	ip, r5, #8
 80104de:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80104e2:	6823      	ldr	r3, [r4, #0]
 80104e4:	f8cc 3000 	str.w	r3, [ip]
 80104e8:	2000      	movs	r0, #0
 80104ea:	b006      	add	sp, #24
 80104ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80104f0:	b002      	add	sp, #8
 80104f2:	4770      	bx	lr
 80104f4:	2064      	movs	r0, #100	@ 0x64
 80104f6:	b006      	add	sp, #24
 80104f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80104fc:	b002      	add	sp, #8
 80104fe:	4770      	bx	lr
 8010500:	200b      	movs	r0, #11
 8010502:	b006      	add	sp, #24
 8010504:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010508:	b002      	add	sp, #8
 801050a:	4770      	bx	lr
 801050c:	2065      	movs	r0, #101	@ 0x65
 801050e:	e7f2      	b.n	80104f6 <rcl_guard_condition_init_from_rmw+0x7e>
 8010510:	6838      	ldr	r0, [r7, #0]
 8010512:	3028      	adds	r0, #40	@ 0x28
 8010514:	f002 fd7c 	bl	8013010 <rmw_create_guard_condition>
 8010518:	6028      	str	r0, [r5, #0]
 801051a:	6865      	ldr	r5, [r4, #4]
 801051c:	682e      	ldr	r6, [r5, #0]
 801051e:	b126      	cbz	r6, 801052a <rcl_guard_condition_init_from_rmw+0xb2>
 8010520:	2301      	movs	r3, #1
 8010522:	712b      	strb	r3, [r5, #4]
 8010524:	e7d7      	b.n	80104d6 <rcl_guard_condition_init_from_rmw+0x5e>
 8010526:	200a      	movs	r0, #10
 8010528:	e7e5      	b.n	80104f6 <rcl_guard_condition_init_from_rmw+0x7e>
 801052a:	4628      	mov	r0, r5
 801052c:	9b02      	ldr	r3, [sp, #8]
 801052e:	9905      	ldr	r1, [sp, #20]
 8010530:	4798      	blx	r3
 8010532:	6066      	str	r6, [r4, #4]
 8010534:	2001      	movs	r0, #1
 8010536:	e7de      	b.n	80104f6 <rcl_guard_condition_init_from_rmw+0x7e>

08010538 <rcl_guard_condition_fini>:
 8010538:	b570      	push	{r4, r5, r6, lr}
 801053a:	b082      	sub	sp, #8
 801053c:	b1f0      	cbz	r0, 801057c <rcl_guard_condition_fini+0x44>
 801053e:	6843      	ldr	r3, [r0, #4]
 8010540:	4604      	mov	r4, r0
 8010542:	b163      	cbz	r3, 801055e <rcl_guard_condition_fini+0x26>
 8010544:	6818      	ldr	r0, [r3, #0]
 8010546:	68de      	ldr	r6, [r3, #12]
 8010548:	6999      	ldr	r1, [r3, #24]
 801054a:	b160      	cbz	r0, 8010566 <rcl_guard_condition_fini+0x2e>
 801054c:	791d      	ldrb	r5, [r3, #4]
 801054e:	b965      	cbnz	r5, 801056a <rcl_guard_condition_fini+0x32>
 8010550:	4618      	mov	r0, r3
 8010552:	47b0      	blx	r6
 8010554:	2300      	movs	r3, #0
 8010556:	4628      	mov	r0, r5
 8010558:	6063      	str	r3, [r4, #4]
 801055a:	b002      	add	sp, #8
 801055c:	bd70      	pop	{r4, r5, r6, pc}
 801055e:	461d      	mov	r5, r3
 8010560:	4628      	mov	r0, r5
 8010562:	b002      	add	sp, #8
 8010564:	bd70      	pop	{r4, r5, r6, pc}
 8010566:	4605      	mov	r5, r0
 8010568:	e7f2      	b.n	8010550 <rcl_guard_condition_fini+0x18>
 801056a:	9101      	str	r1, [sp, #4]
 801056c:	f002 fd64 	bl	8013038 <rmw_destroy_guard_condition>
 8010570:	1e05      	subs	r5, r0, #0
 8010572:	6863      	ldr	r3, [r4, #4]
 8010574:	9901      	ldr	r1, [sp, #4]
 8010576:	bf18      	it	ne
 8010578:	2501      	movne	r5, #1
 801057a:	e7e9      	b.n	8010550 <rcl_guard_condition_fini+0x18>
 801057c:	250b      	movs	r5, #11
 801057e:	4628      	mov	r0, r5
 8010580:	b002      	add	sp, #8
 8010582:	bd70      	pop	{r4, r5, r6, pc}

08010584 <rcl_guard_condition_get_default_options>:
 8010584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010586:	b087      	sub	sp, #28
 8010588:	4606      	mov	r6, r0
 801058a:	4668      	mov	r0, sp
 801058c:	f7fb f9ca 	bl	800b924 <rcutils_get_default_allocator>
 8010590:	4b09      	ldr	r3, [pc, #36]	@ (80105b8 <rcl_guard_condition_get_default_options+0x34>)
 8010592:	46ee      	mov	lr, sp
 8010594:	469c      	mov	ip, r3
 8010596:	461d      	mov	r5, r3
 8010598:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801059c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80105a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80105a2:	4634      	mov	r4, r6
 80105a4:	f8de 7000 	ldr.w	r7, [lr]
 80105a8:	f8cc 7000 	str.w	r7, [ip]
 80105ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80105ae:	4630      	mov	r0, r6
 80105b0:	6027      	str	r7, [r4, #0]
 80105b2:	b007      	add	sp, #28
 80105b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80105b6:	bf00      	nop
 80105b8:	2001122c 	.word	0x2001122c

080105bc <rcl_guard_condition_get_rmw_handle>:
 80105bc:	b110      	cbz	r0, 80105c4 <rcl_guard_condition_get_rmw_handle+0x8>
 80105be:	6840      	ldr	r0, [r0, #4]
 80105c0:	b100      	cbz	r0, 80105c4 <rcl_guard_condition_get_rmw_handle+0x8>
 80105c2:	6800      	ldr	r0, [r0, #0]
 80105c4:	4770      	bx	lr
 80105c6:	bf00      	nop

080105c8 <rcl_init>:
 80105c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80105cc:	1e05      	subs	r5, r0, #0
 80105ce:	b09e      	sub	sp, #120	@ 0x78
 80105d0:	460e      	mov	r6, r1
 80105d2:	4690      	mov	r8, r2
 80105d4:	461f      	mov	r7, r3
 80105d6:	f340 809c 	ble.w	8010712 <rcl_init+0x14a>
 80105da:	2900      	cmp	r1, #0
 80105dc:	f000 809c 	beq.w	8010718 <rcl_init+0x150>
 80105e0:	f1a1 0e04 	sub.w	lr, r1, #4
 80105e4:	f04f 0c00 	mov.w	ip, #0
 80105e8:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 80105ec:	f10c 0c01 	add.w	ip, ip, #1
 80105f0:	2c00      	cmp	r4, #0
 80105f2:	f000 8091 	beq.w	8010718 <rcl_init+0x150>
 80105f6:	4565      	cmp	r5, ip
 80105f8:	d1f6      	bne.n	80105e8 <rcl_init+0x20>
 80105fa:	f1b8 0f00 	cmp.w	r8, #0
 80105fe:	f000 808b 	beq.w	8010718 <rcl_init+0x150>
 8010602:	f8d8 4000 	ldr.w	r4, [r8]
 8010606:	2c00      	cmp	r4, #0
 8010608:	f000 8086 	beq.w	8010718 <rcl_init+0x150>
 801060c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801060e:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 8010612:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010616:	6823      	ldr	r3, [r4, #0]
 8010618:	f8cc 3000 	str.w	r3, [ip]
 801061c:	a819      	add	r0, sp, #100	@ 0x64
 801061e:	f7fb f98f 	bl	800b940 <rcutils_allocator_is_valid>
 8010622:	2800      	cmp	r0, #0
 8010624:	d078      	beq.n	8010718 <rcl_init+0x150>
 8010626:	2f00      	cmp	r7, #0
 8010628:	d076      	beq.n	8010718 <rcl_init+0x150>
 801062a:	683b      	ldr	r3, [r7, #0]
 801062c:	2b00      	cmp	r3, #0
 801062e:	d178      	bne.n	8010722 <rcl_init+0x15a>
 8010630:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8010634:	2178      	movs	r1, #120	@ 0x78
 8010636:	2001      	movs	r0, #1
 8010638:	4798      	blx	r3
 801063a:	4604      	mov	r4, r0
 801063c:	6038      	str	r0, [r7, #0]
 801063e:	2800      	cmp	r0, #0
 8010640:	f000 80b6 	beq.w	80107b0 <rcl_init+0x1e8>
 8010644:	a802      	add	r0, sp, #8
 8010646:	f002 fb57 	bl	8012cf8 <rmw_get_zero_initialized_context>
 801064a:	a902      	add	r1, sp, #8
 801064c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8010650:	2250      	movs	r2, #80	@ 0x50
 8010652:	ac19      	add	r4, sp, #100	@ 0x64
 8010654:	f007 fce3 	bl	801801e <memcpy>
 8010658:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801065a:	f8d7 e000 	ldr.w	lr, [r7]
 801065e:	46f4      	mov	ip, lr
 8010660:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010664:	6823      	ldr	r3, [r4, #0]
 8010666:	f8cc 3000 	str.w	r3, [ip]
 801066a:	f10e 0114 	add.w	r1, lr, #20
 801066e:	4640      	mov	r0, r8
 8010670:	f000 f940 	bl	80108f4 <rcl_init_options_copy>
 8010674:	4604      	mov	r4, r0
 8010676:	2800      	cmp	r0, #0
 8010678:	d144      	bne.n	8010704 <rcl_init+0x13c>
 801067a:	f8d7 9000 	ldr.w	r9, [r7]
 801067e:	ea4f 78e5 	mov.w	r8, r5, asr #31
 8010682:	f8c9 0020 	str.w	r0, [r9, #32]
 8010686:	f8c9 5018 	str.w	r5, [r9, #24]
 801068a:	f8c9 801c 	str.w	r8, [r9, #28]
 801068e:	2d00      	cmp	r5, #0
 8010690:	d04e      	beq.n	8010730 <rcl_init+0x168>
 8010692:	2e00      	cmp	r6, #0
 8010694:	d04c      	beq.n	8010730 <rcl_init+0x168>
 8010696:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 801069a:	2104      	movs	r1, #4
 801069c:	4628      	mov	r0, r5
 801069e:	4798      	blx	r3
 80106a0:	f8c9 0020 	str.w	r0, [r9, #32]
 80106a4:	f8d7 9000 	ldr.w	r9, [r7]
 80106a8:	f8d9 3020 	ldr.w	r3, [r9, #32]
 80106ac:	46ca      	mov	sl, r9
 80106ae:	b343      	cbz	r3, 8010702 <rcl_init+0x13a>
 80106b0:	2d01      	cmp	r5, #1
 80106b2:	f178 0300 	sbcs.w	r3, r8, #0
 80106b6:	db3b      	blt.n	8010730 <rcl_init+0x168>
 80106b8:	2400      	movs	r4, #0
 80106ba:	3e04      	subs	r6, #4
 80106bc:	46a1      	mov	r9, r4
 80106be:	e00b      	b.n	80106d8 <rcl_init+0x110>
 80106c0:	6831      	ldr	r1, [r6, #0]
 80106c2:	f007 fcac 	bl	801801e <memcpy>
 80106c6:	3401      	adds	r4, #1
 80106c8:	f149 0900 	adc.w	r9, r9, #0
 80106cc:	45c8      	cmp	r8, r9
 80106ce:	bf08      	it	eq
 80106d0:	42a5      	cmpeq	r5, r4
 80106d2:	d02b      	beq.n	801072c <rcl_init+0x164>
 80106d4:	f8d7 a000 	ldr.w	sl, [r7]
 80106d8:	f856 0f04 	ldr.w	r0, [r6, #4]!
 80106dc:	f7ef fdf8 	bl	80002d0 <strlen>
 80106e0:	1c42      	adds	r2, r0, #1
 80106e2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80106e4:	991d      	ldr	r1, [sp, #116]	@ 0x74
 80106e6:	f8da a020 	ldr.w	sl, [sl, #32]
 80106ea:	9201      	str	r2, [sp, #4]
 80106ec:	4610      	mov	r0, r2
 80106ee:	4798      	blx	r3
 80106f0:	683b      	ldr	r3, [r7, #0]
 80106f2:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 80106f6:	6a1b      	ldr	r3, [r3, #32]
 80106f8:	9a01      	ldr	r2, [sp, #4]
 80106fa:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80106fe:	2800      	cmp	r0, #0
 8010700:	d1de      	bne.n	80106c0 <rcl_init+0xf8>
 8010702:	240a      	movs	r4, #10
 8010704:	4638      	mov	r0, r7
 8010706:	f7ff fe4d 	bl	80103a4 <__cleanup_context>
 801070a:	4620      	mov	r0, r4
 801070c:	b01e      	add	sp, #120	@ 0x78
 801070e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010712:	2900      	cmp	r1, #0
 8010714:	f43f af71 	beq.w	80105fa <rcl_init+0x32>
 8010718:	240b      	movs	r4, #11
 801071a:	4620      	mov	r0, r4
 801071c:	b01e      	add	sp, #120	@ 0x78
 801071e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010722:	2464      	movs	r4, #100	@ 0x64
 8010724:	4620      	mov	r0, r4
 8010726:	b01e      	add	sp, #120	@ 0x78
 8010728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801072c:	f8d7 9000 	ldr.w	r9, [r7]
 8010730:	4926      	ldr	r1, [pc, #152]	@ (80107cc <rcl_init+0x204>)
 8010732:	680b      	ldr	r3, [r1, #0]
 8010734:	3301      	adds	r3, #1
 8010736:	d036      	beq.n	80107a6 <rcl_init+0x1de>
 8010738:	600b      	str	r3, [r1, #0]
 801073a:	461a      	mov	r2, r3
 801073c:	2400      	movs	r4, #0
 801073e:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8010742:	607b      	str	r3, [r7, #4]
 8010744:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8010746:	3301      	adds	r3, #1
 8010748:	e9c0 2406 	strd	r2, r4, [r0, #24]
 801074c:	d034      	beq.n	80107b8 <rcl_init+0x1f0>
 801074e:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 8010752:	b93b      	cbnz	r3, 8010764 <rcl_init+0x19c>
 8010754:	3030      	adds	r0, #48	@ 0x30
 8010756:	f000 f939 	bl	80109cc <rcl_get_localhost_only>
 801075a:	4604      	mov	r4, r0
 801075c:	2800      	cmp	r0, #0
 801075e:	d1d1      	bne.n	8010704 <rcl_init+0x13c>
 8010760:	683b      	ldr	r3, [r7, #0]
 8010762:	6958      	ldr	r0, [r3, #20]
 8010764:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8010766:	aa18      	add	r2, sp, #96	@ 0x60
 8010768:	a917      	add	r1, sp, #92	@ 0x5c
 801076a:	f000 fd59 	bl	8011220 <rcl_validate_enclave_name>
 801076e:	4604      	mov	r4, r0
 8010770:	2800      	cmp	r0, #0
 8010772:	d1c7      	bne.n	8010704 <rcl_init+0x13c>
 8010774:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8010776:	b9eb      	cbnz	r3, 80107b4 <rcl_init+0x1ec>
 8010778:	6839      	ldr	r1, [r7, #0]
 801077a:	694b      	ldr	r3, [r1, #20]
 801077c:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 801077e:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8010782:	f000 fa99 	bl	8010cb8 <rcl_get_security_options_from_environment>
 8010786:	4604      	mov	r4, r0
 8010788:	2800      	cmp	r0, #0
 801078a:	d1bb      	bne.n	8010704 <rcl_init+0x13c>
 801078c:	6839      	ldr	r1, [r7, #0]
 801078e:	6948      	ldr	r0, [r1, #20]
 8010790:	3128      	adds	r1, #40	@ 0x28
 8010792:	3018      	adds	r0, #24
 8010794:	f002 fd5c 	bl	8013250 <rmw_init>
 8010798:	4604      	mov	r4, r0
 801079a:	2800      	cmp	r0, #0
 801079c:	d0bd      	beq.n	801071a <rcl_init+0x152>
 801079e:	f7ff fddd 	bl	801035c <rcl_convert_rmw_ret_to_rcl_ret>
 80107a2:	4604      	mov	r4, r0
 80107a4:	e7ae      	b.n	8010704 <rcl_init+0x13c>
 80107a6:	2201      	movs	r2, #1
 80107a8:	461c      	mov	r4, r3
 80107aa:	600a      	str	r2, [r1, #0]
 80107ac:	4613      	mov	r3, r2
 80107ae:	e7c6      	b.n	801073e <rcl_init+0x176>
 80107b0:	240a      	movs	r4, #10
 80107b2:	e7b2      	b.n	801071a <rcl_init+0x152>
 80107b4:	2401      	movs	r4, #1
 80107b6:	e7a5      	b.n	8010704 <rcl_init+0x13c>
 80107b8:	3024      	adds	r0, #36	@ 0x24
 80107ba:	f005 fdfb 	bl	80163b4 <rcl_get_default_domain_id>
 80107be:	4604      	mov	r4, r0
 80107c0:	2800      	cmp	r0, #0
 80107c2:	d19f      	bne.n	8010704 <rcl_init+0x13c>
 80107c4:	683b      	ldr	r3, [r7, #0]
 80107c6:	6958      	ldr	r0, [r3, #20]
 80107c8:	e7c1      	b.n	801074e <rcl_init+0x186>
 80107ca:	bf00      	nop
 80107cc:	20011240 	.word	0x20011240

080107d0 <rcl_get_zero_initialized_init_options>:
 80107d0:	2000      	movs	r0, #0
 80107d2:	4770      	bx	lr

080107d4 <rcl_init_options_init>:
 80107d4:	b084      	sub	sp, #16
 80107d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80107d8:	b097      	sub	sp, #92	@ 0x5c
 80107da:	ae1d      	add	r6, sp, #116	@ 0x74
 80107dc:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 80107e0:	2800      	cmp	r0, #0
 80107e2:	d058      	beq.n	8010896 <rcl_init_options_init+0xc2>
 80107e4:	6803      	ldr	r3, [r0, #0]
 80107e6:	4605      	mov	r5, r0
 80107e8:	b133      	cbz	r3, 80107f8 <rcl_init_options_init+0x24>
 80107ea:	2464      	movs	r4, #100	@ 0x64
 80107ec:	4620      	mov	r0, r4
 80107ee:	b017      	add	sp, #92	@ 0x5c
 80107f0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80107f4:	b004      	add	sp, #16
 80107f6:	4770      	bx	lr
 80107f8:	4630      	mov	r0, r6
 80107fa:	f7fb f8a1 	bl	800b940 <rcutils_allocator_is_valid>
 80107fe:	2800      	cmp	r0, #0
 8010800:	d049      	beq.n	8010896 <rcl_init_options_init+0xc2>
 8010802:	46b4      	mov	ip, r6
 8010804:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010808:	ac11      	add	r4, sp, #68	@ 0x44
 801080a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801080c:	f8dc 3000 	ldr.w	r3, [ip]
 8010810:	6023      	str	r3, [r4, #0]
 8010812:	9921      	ldr	r1, [sp, #132]	@ 0x84
 8010814:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010816:	2050      	movs	r0, #80	@ 0x50
 8010818:	4798      	blx	r3
 801081a:	4604      	mov	r4, r0
 801081c:	6028      	str	r0, [r5, #0]
 801081e:	2800      	cmp	r0, #0
 8010820:	d03b      	beq.n	801089a <rcl_init_options_init+0xc6>
 8010822:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8010826:	4686      	mov	lr, r0
 8010828:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801082c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010830:	f8dc 3000 	ldr.w	r3, [ip]
 8010834:	f8ce 3000 	str.w	r3, [lr]
 8010838:	a802      	add	r0, sp, #8
 801083a:	f002 fa6d 	bl	8012d18 <rmw_get_zero_initialized_init_options>
 801083e:	f10d 0e08 	add.w	lr, sp, #8
 8010842:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010846:	f104 0c18 	add.w	ip, r4, #24
 801084a:	682f      	ldr	r7, [r5, #0]
 801084c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010850:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010854:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010858:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801085c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010860:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8010864:	ac20      	add	r4, sp, #128	@ 0x80
 8010866:	e88c 0003 	stmia.w	ip, {r0, r1}
 801086a:	e894 0003 	ldmia.w	r4, {r0, r1}
 801086e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8010872:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8010876:	f107 0018 	add.w	r0, r7, #24
 801087a:	f002 fbf1 	bl	8013060 <rmw_init_options_init>
 801087e:	4604      	mov	r4, r0
 8010880:	2800      	cmp	r0, #0
 8010882:	d0b3      	beq.n	80107ec <rcl_init_options_init+0x18>
 8010884:	9921      	ldr	r1, [sp, #132]	@ 0x84
 8010886:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8010888:	6828      	ldr	r0, [r5, #0]
 801088a:	4798      	blx	r3
 801088c:	4620      	mov	r0, r4
 801088e:	f7ff fd65 	bl	801035c <rcl_convert_rmw_ret_to_rcl_ret>
 8010892:	4604      	mov	r4, r0
 8010894:	e7aa      	b.n	80107ec <rcl_init_options_init+0x18>
 8010896:	240b      	movs	r4, #11
 8010898:	e7a8      	b.n	80107ec <rcl_init_options_init+0x18>
 801089a:	240a      	movs	r4, #10
 801089c:	e7a6      	b.n	80107ec <rcl_init_options_init+0x18>
 801089e:	bf00      	nop

080108a0 <rcl_init_options_fini>:
 80108a0:	b530      	push	{r4, r5, lr}
 80108a2:	b087      	sub	sp, #28
 80108a4:	b1f0      	cbz	r0, 80108e4 <rcl_init_options_fini+0x44>
 80108a6:	6803      	ldr	r3, [r0, #0]
 80108a8:	4604      	mov	r4, r0
 80108aa:	b1db      	cbz	r3, 80108e4 <rcl_init_options_fini+0x44>
 80108ac:	469c      	mov	ip, r3
 80108ae:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80108b2:	f10d 0e04 	add.w	lr, sp, #4
 80108b6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80108ba:	f8dc 3000 	ldr.w	r3, [ip]
 80108be:	f8ce 3000 	str.w	r3, [lr]
 80108c2:	a801      	add	r0, sp, #4
 80108c4:	f7fb f83c 	bl	800b940 <rcutils_allocator_is_valid>
 80108c8:	b160      	cbz	r0, 80108e4 <rcl_init_options_fini+0x44>
 80108ca:	6820      	ldr	r0, [r4, #0]
 80108cc:	3018      	adds	r0, #24
 80108ce:	f002 fc77 	bl	80131c0 <rmw_init_options_fini>
 80108d2:	4605      	mov	r5, r0
 80108d4:	b950      	cbnz	r0, 80108ec <rcl_init_options_fini+0x4c>
 80108d6:	6820      	ldr	r0, [r4, #0]
 80108d8:	9b02      	ldr	r3, [sp, #8]
 80108da:	9905      	ldr	r1, [sp, #20]
 80108dc:	4798      	blx	r3
 80108de:	4628      	mov	r0, r5
 80108e0:	b007      	add	sp, #28
 80108e2:	bd30      	pop	{r4, r5, pc}
 80108e4:	250b      	movs	r5, #11
 80108e6:	4628      	mov	r0, r5
 80108e8:	b007      	add	sp, #28
 80108ea:	bd30      	pop	{r4, r5, pc}
 80108ec:	f7ff fd36 	bl	801035c <rcl_convert_rmw_ret_to_rcl_ret>
 80108f0:	4605      	mov	r5, r0
 80108f2:	e7f8      	b.n	80108e6 <rcl_init_options_fini+0x46>

080108f4 <rcl_init_options_copy>:
 80108f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108f8:	b094      	sub	sp, #80	@ 0x50
 80108fa:	2800      	cmp	r0, #0
 80108fc:	d058      	beq.n	80109b0 <rcl_init_options_copy+0xbc>
 80108fe:	4604      	mov	r4, r0
 8010900:	6800      	ldr	r0, [r0, #0]
 8010902:	2800      	cmp	r0, #0
 8010904:	d054      	beq.n	80109b0 <rcl_init_options_copy+0xbc>
 8010906:	460e      	mov	r6, r1
 8010908:	f7fb f81a 	bl	800b940 <rcutils_allocator_is_valid>
 801090c:	2800      	cmp	r0, #0
 801090e:	d04f      	beq.n	80109b0 <rcl_init_options_copy+0xbc>
 8010910:	2e00      	cmp	r6, #0
 8010912:	d04d      	beq.n	80109b0 <rcl_init_options_copy+0xbc>
 8010914:	6833      	ldr	r3, [r6, #0]
 8010916:	b123      	cbz	r3, 8010922 <rcl_init_options_copy+0x2e>
 8010918:	2464      	movs	r4, #100	@ 0x64
 801091a:	4620      	mov	r0, r4
 801091c:	b014      	add	sp, #80	@ 0x50
 801091e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010922:	6827      	ldr	r7, [r4, #0]
 8010924:	46bc      	mov	ip, r7
 8010926:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801092a:	ad0f      	add	r5, sp, #60	@ 0x3c
 801092c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801092e:	f8dc 3000 	ldr.w	r3, [ip]
 8010932:	f8d7 8000 	ldr.w	r8, [r7]
 8010936:	602b      	str	r3, [r5, #0]
 8010938:	4619      	mov	r1, r3
 801093a:	2050      	movs	r0, #80	@ 0x50
 801093c:	47c0      	blx	r8
 801093e:	4605      	mov	r5, r0
 8010940:	6030      	str	r0, [r6, #0]
 8010942:	b3d0      	cbz	r0, 80109ba <rcl_init_options_copy+0xc6>
 8010944:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 8010948:	4686      	mov	lr, r0
 801094a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801094e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010952:	f8dc 3000 	ldr.w	r3, [ip]
 8010956:	f8ce 3000 	str.w	r3, [lr]
 801095a:	4668      	mov	r0, sp
 801095c:	f002 f9dc 	bl	8012d18 <rmw_get_zero_initialized_init_options>
 8010960:	46ee      	mov	lr, sp
 8010962:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010966:	f105 0c18 	add.w	ip, r5, #24
 801096a:	6824      	ldr	r4, [r4, #0]
 801096c:	6835      	ldr	r5, [r6, #0]
 801096e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010972:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010976:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801097a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801097e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010982:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8010986:	e88c 0003 	stmia.w	ip, {r0, r1}
 801098a:	f104 0018 	add.w	r0, r4, #24
 801098e:	f105 0118 	add.w	r1, r5, #24
 8010992:	f002 fbcd 	bl	8013130 <rmw_init_options_copy>
 8010996:	4604      	mov	r4, r0
 8010998:	2800      	cmp	r0, #0
 801099a:	d0be      	beq.n	801091a <rcl_init_options_copy+0x26>
 801099c:	f7fa fff6 	bl	800b98c <rcutils_get_error_string>
 80109a0:	f7fb f80a 	bl	800b9b8 <rcutils_reset_error>
 80109a4:	4630      	mov	r0, r6
 80109a6:	f7ff ff7b 	bl	80108a0 <rcl_init_options_fini>
 80109aa:	b140      	cbz	r0, 80109be <rcl_init_options_copy+0xca>
 80109ac:	4604      	mov	r4, r0
 80109ae:	e7b4      	b.n	801091a <rcl_init_options_copy+0x26>
 80109b0:	240b      	movs	r4, #11
 80109b2:	4620      	mov	r0, r4
 80109b4:	b014      	add	sp, #80	@ 0x50
 80109b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109ba:	240a      	movs	r4, #10
 80109bc:	e7ad      	b.n	801091a <rcl_init_options_copy+0x26>
 80109be:	4620      	mov	r0, r4
 80109c0:	b014      	add	sp, #80	@ 0x50
 80109c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80109c6:	f7ff bcc9 	b.w	801035c <rcl_convert_rmw_ret_to_rcl_ret>
 80109ca:	bf00      	nop

080109cc <rcl_get_localhost_only>:
 80109cc:	b510      	push	{r4, lr}
 80109ce:	b082      	sub	sp, #8
 80109d0:	2300      	movs	r3, #0
 80109d2:	9301      	str	r3, [sp, #4]
 80109d4:	b1b8      	cbz	r0, 8010a06 <rcl_get_localhost_only+0x3a>
 80109d6:	4604      	mov	r4, r0
 80109d8:	a901      	add	r1, sp, #4
 80109da:	480c      	ldr	r0, [pc, #48]	@ (8010a0c <rcl_get_localhost_only+0x40>)
 80109dc:	f7fa ffbe 	bl	800b95c <rcutils_get_env>
 80109e0:	b110      	cbz	r0, 80109e8 <rcl_get_localhost_only+0x1c>
 80109e2:	2001      	movs	r0, #1
 80109e4:	b002      	add	sp, #8
 80109e6:	bd10      	pop	{r4, pc}
 80109e8:	9b01      	ldr	r3, [sp, #4]
 80109ea:	b113      	cbz	r3, 80109f2 <rcl_get_localhost_only+0x26>
 80109ec:	781a      	ldrb	r2, [r3, #0]
 80109ee:	2a31      	cmp	r2, #49	@ 0x31
 80109f0:	d004      	beq.n	80109fc <rcl_get_localhost_only+0x30>
 80109f2:	2302      	movs	r3, #2
 80109f4:	2000      	movs	r0, #0
 80109f6:	7023      	strb	r3, [r4, #0]
 80109f8:	b002      	add	sp, #8
 80109fa:	bd10      	pop	{r4, pc}
 80109fc:	785b      	ldrb	r3, [r3, #1]
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d1f7      	bne.n	80109f2 <rcl_get_localhost_only+0x26>
 8010a02:	2301      	movs	r3, #1
 8010a04:	e7f6      	b.n	80109f4 <rcl_get_localhost_only+0x28>
 8010a06:	200b      	movs	r0, #11
 8010a08:	b002      	add	sp, #8
 8010a0a:	bd10      	pop	{r4, pc}
 8010a0c:	0801a6cc 	.word	0x0801a6cc

08010a10 <rcl_node_resolve_name>:
 8010a10:	b082      	sub	sp, #8
 8010a12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a16:	b091      	sub	sp, #68	@ 0x44
 8010a18:	ac1a      	add	r4, sp, #104	@ 0x68
 8010a1a:	e884 000c 	stmia.w	r4, {r2, r3}
 8010a1e:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 8010a22:	2800      	cmp	r0, #0
 8010a24:	d03b      	beq.n	8010a9e <rcl_node_resolve_name+0x8e>
 8010a26:	460c      	mov	r4, r1
 8010a28:	4605      	mov	r5, r0
 8010a2a:	f7f9 fd29 	bl	800a480 <rcl_node_get_options>
 8010a2e:	2800      	cmp	r0, #0
 8010a30:	d037      	beq.n	8010aa2 <rcl_node_resolve_name+0x92>
 8010a32:	4628      	mov	r0, r5
 8010a34:	f7f9 fd14 	bl	800a460 <rcl_node_get_name>
 8010a38:	4606      	mov	r6, r0
 8010a3a:	4628      	mov	r0, r5
 8010a3c:	f7f9 fd18 	bl	800a470 <rcl_node_get_namespace>
 8010a40:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8010a44:	4681      	mov	r9, r0
 8010a46:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010a4a:	ad0b      	add	r5, sp, #44	@ 0x2c
 8010a4c:	46ac      	mov	ip, r5
 8010a4e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010a52:	f8de 3000 	ldr.w	r3, [lr]
 8010a56:	f8cc 3000 	str.w	r3, [ip]
 8010a5a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010a5c:	b1fb      	cbz	r3, 8010a9e <rcl_node_resolve_name+0x8e>
 8010a5e:	468a      	mov	sl, r1
 8010a60:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 8010a64:	f002 f81c 	bl	8012aa0 <rcutils_get_zero_initialized_string_map>
 8010a68:	ab10      	add	r3, sp, #64	@ 0x40
 8010a6a:	9008      	str	r0, [sp, #32]
 8010a6c:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8010a70:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8010a74:	2100      	movs	r1, #0
 8010a76:	e895 000c 	ldmia.w	r5, {r2, r3}
 8010a7a:	a808      	add	r0, sp, #32
 8010a7c:	f002 f888 	bl	8012b90 <rcutils_string_map_init>
 8010a80:	4607      	mov	r7, r0
 8010a82:	b180      	cbz	r0, 8010aa6 <rcl_node_resolve_name+0x96>
 8010a84:	f7fa ff82 	bl	800b98c <rcutils_get_error_string>
 8010a88:	f7fa ff96 	bl	800b9b8 <rcutils_reset_error>
 8010a8c:	2f0a      	cmp	r7, #10
 8010a8e:	bf18      	it	ne
 8010a90:	2701      	movne	r7, #1
 8010a92:	4638      	mov	r0, r7
 8010a94:	b011      	add	sp, #68	@ 0x44
 8010a96:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a9a:	b002      	add	sp, #8
 8010a9c:	4770      	bx	lr
 8010a9e:	270b      	movs	r7, #11
 8010aa0:	e7f7      	b.n	8010a92 <rcl_node_resolve_name+0x82>
 8010aa2:	2701      	movs	r7, #1
 8010aa4:	e7f5      	b.n	8010a92 <rcl_node_resolve_name+0x82>
 8010aa6:	9009      	str	r0, [sp, #36]	@ 0x24
 8010aa8:	9007      	str	r0, [sp, #28]
 8010aaa:	a808      	add	r0, sp, #32
 8010aac:	f005 fe14 	bl	80166d8 <rcl_get_default_topic_name_substitutions>
 8010ab0:	4607      	mov	r7, r0
 8010ab2:	b1a8      	cbz	r0, 8010ae0 <rcl_node_resolve_name+0xd0>
 8010ab4:	280a      	cmp	r0, #10
 8010ab6:	9c07      	ldr	r4, [sp, #28]
 8010ab8:	d000      	beq.n	8010abc <rcl_node_resolve_name+0xac>
 8010aba:	2701      	movs	r7, #1
 8010abc:	a808      	add	r0, sp, #32
 8010abe:	f002 f8a7 	bl	8012c10 <rcutils_string_map_fini>
 8010ac2:	2800      	cmp	r0, #0
 8010ac4:	d13d      	bne.n	8010b42 <rcl_node_resolve_name+0x132>
 8010ac6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010ac8:	4659      	mov	r1, fp
 8010aca:	47d0      	blx	sl
 8010acc:	4659      	mov	r1, fp
 8010ace:	4620      	mov	r0, r4
 8010ad0:	47d0      	blx	sl
 8010ad2:	f1b8 0f00 	cmp.w	r8, #0
 8010ad6:	d0dc      	beq.n	8010a92 <rcl_node_resolve_name+0x82>
 8010ad8:	2f67      	cmp	r7, #103	@ 0x67
 8010ada:	bf08      	it	eq
 8010adc:	2768      	moveq	r7, #104	@ 0x68
 8010ade:	e7d8      	b.n	8010a92 <rcl_node_resolve_name+0x82>
 8010ae0:	ab09      	add	r3, sp, #36	@ 0x24
 8010ae2:	9305      	str	r3, [sp, #20]
 8010ae4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010ae6:	46ec      	mov	ip, sp
 8010ae8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010aec:	682b      	ldr	r3, [r5, #0]
 8010aee:	f8cc 3000 	str.w	r3, [ip]
 8010af2:	464a      	mov	r2, r9
 8010af4:	4631      	mov	r1, r6
 8010af6:	4620      	mov	r0, r4
 8010af8:	ab08      	add	r3, sp, #32
 8010afa:	f005 fc8f 	bl	801641c <rcl_expand_topic_name>
 8010afe:	4607      	mov	r7, r0
 8010b00:	b9b8      	cbnz	r0, 8010b32 <rcl_node_resolve_name+0x122>
 8010b02:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8010b04:	9009      	str	r0, [sp, #36]	@ 0x24
 8010b06:	4602      	mov	r2, r0
 8010b08:	a90a      	add	r1, sp, #40	@ 0x28
 8010b0a:	4620      	mov	r0, r4
 8010b0c:	f002 f99c 	bl	8012e48 <rmw_validate_full_topic_name>
 8010b10:	b988      	cbnz	r0, 8010b36 <rcl_node_resolve_name+0x126>
 8010b12:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8010b14:	b9d5      	cbnz	r5, 8010b4c <rcl_node_resolve_name+0x13c>
 8010b16:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010b18:	a808      	add	r0, sp, #32
 8010b1a:	601c      	str	r4, [r3, #0]
 8010b1c:	f002 f878 	bl	8012c10 <rcutils_string_map_fini>
 8010b20:	4607      	mov	r7, r0
 8010b22:	b1a8      	cbz	r0, 8010b50 <rcl_node_resolve_name+0x140>
 8010b24:	f7fa ff32 	bl	800b98c <rcutils_get_error_string>
 8010b28:	462c      	mov	r4, r5
 8010b2a:	f7fa ff45 	bl	800b9b8 <rcutils_reset_error>
 8010b2e:	2701      	movs	r7, #1
 8010b30:	e7c9      	b.n	8010ac6 <rcl_node_resolve_name+0xb6>
 8010b32:	9c07      	ldr	r4, [sp, #28]
 8010b34:	e7c2      	b.n	8010abc <rcl_node_resolve_name+0xac>
 8010b36:	f7fa ff29 	bl	800b98c <rcutils_get_error_string>
 8010b3a:	2701      	movs	r7, #1
 8010b3c:	f7fa ff3c 	bl	800b9b8 <rcutils_reset_error>
 8010b40:	e7bc      	b.n	8010abc <rcl_node_resolve_name+0xac>
 8010b42:	f7fa ff23 	bl	800b98c <rcutils_get_error_string>
 8010b46:	f7fa ff37 	bl	800b9b8 <rcutils_reset_error>
 8010b4a:	e7bc      	b.n	8010ac6 <rcl_node_resolve_name+0xb6>
 8010b4c:	2767      	movs	r7, #103	@ 0x67
 8010b4e:	e7b5      	b.n	8010abc <rcl_node_resolve_name+0xac>
 8010b50:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010b52:	4659      	mov	r1, fp
 8010b54:	47d0      	blx	sl
 8010b56:	4659      	mov	r1, fp
 8010b58:	4638      	mov	r0, r7
 8010b5a:	47d0      	blx	sl
 8010b5c:	e799      	b.n	8010a92 <rcl_node_resolve_name+0x82>
 8010b5e:	bf00      	nop

08010b60 <exact_match_lookup>:
 8010b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010b62:	f102 0708 	add.w	r7, r2, #8
 8010b66:	460b      	mov	r3, r1
 8010b68:	4614      	mov	r4, r2
 8010b6a:	4606      	mov	r6, r0
 8010b6c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8010b70:	b085      	sub	sp, #20
 8010b72:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8010b76:	4618      	mov	r0, r3
 8010b78:	4919      	ldr	r1, [pc, #100]	@ (8010be0 <exact_match_lookup+0x80>)
 8010b7a:	e894 000c 	ldmia.w	r4, {r2, r3}
 8010b7e:	f001 ff59 	bl	8012a34 <rcutils_join_path>
 8010b82:	7833      	ldrb	r3, [r6, #0]
 8010b84:	2b2f      	cmp	r3, #47	@ 0x2f
 8010b86:	4605      	mov	r5, r0
 8010b88:	d023      	beq.n	8010bd2 <exact_match_lookup+0x72>
 8010b8a:	f104 030c 	add.w	r3, r4, #12
 8010b8e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010b92:	e88d 0003 	stmia.w	sp, {r0, r1}
 8010b96:	1c70      	adds	r0, r6, #1
 8010b98:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8010b9c:	f001 ff50 	bl	8012a40 <rcutils_to_native_path>
 8010ba0:	4606      	mov	r6, r0
 8010ba2:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8010ba6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8010baa:	4631      	mov	r1, r6
 8010bac:	e894 000c 	ldmia.w	r4, {r2, r3}
 8010bb0:	4628      	mov	r0, r5
 8010bb2:	f001 ff3f 	bl	8012a34 <rcutils_join_path>
 8010bb6:	6862      	ldr	r2, [r4, #4]
 8010bb8:	6921      	ldr	r1, [r4, #16]
 8010bba:	4603      	mov	r3, r0
 8010bbc:	4630      	mov	r0, r6
 8010bbe:	461e      	mov	r6, r3
 8010bc0:	4790      	blx	r2
 8010bc2:	4628      	mov	r0, r5
 8010bc4:	6863      	ldr	r3, [r4, #4]
 8010bc6:	6921      	ldr	r1, [r4, #16]
 8010bc8:	4798      	blx	r3
 8010bca:	4635      	mov	r5, r6
 8010bcc:	4628      	mov	r0, r5
 8010bce:	b005      	add	sp, #20
 8010bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010bd2:	7873      	ldrb	r3, [r6, #1]
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d1d8      	bne.n	8010b8a <exact_match_lookup+0x2a>
 8010bd8:	4628      	mov	r0, r5
 8010bda:	b005      	add	sp, #20
 8010bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010bde:	bf00      	nop
 8010be0:	0801a71c 	.word	0x0801a71c

08010be4 <rcl_get_secure_root>:
 8010be4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010be8:	b085      	sub	sp, #20
 8010bea:	b168      	cbz	r0, 8010c08 <rcl_get_secure_root+0x24>
 8010bec:	4607      	mov	r7, r0
 8010bee:	4608      	mov	r0, r1
 8010bf0:	460c      	mov	r4, r1
 8010bf2:	f7fa fea5 	bl	800b940 <rcutils_allocator_is_valid>
 8010bf6:	b138      	cbz	r0, 8010c08 <rcl_get_secure_root+0x24>
 8010bf8:	2300      	movs	r3, #0
 8010bfa:	482d      	ldr	r0, [pc, #180]	@ (8010cb0 <rcl_get_secure_root+0xcc>)
 8010bfc:	9303      	str	r3, [sp, #12]
 8010bfe:	a903      	add	r1, sp, #12
 8010c00:	f7fa feac 	bl	800b95c <rcutils_get_env>
 8010c04:	4605      	mov	r5, r0
 8010c06:	b120      	cbz	r0, 8010c12 <rcl_get_secure_root+0x2e>
 8010c08:	2500      	movs	r5, #0
 8010c0a:	4628      	mov	r0, r5
 8010c0c:	b005      	add	sp, #20
 8010c0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010c12:	9b03      	ldr	r3, [sp, #12]
 8010c14:	781a      	ldrb	r2, [r3, #0]
 8010c16:	2a00      	cmp	r2, #0
 8010c18:	d0f6      	beq.n	8010c08 <rcl_get_secure_root+0x24>
 8010c1a:	f104 090c 	add.w	r9, r4, #12
 8010c1e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8010c22:	e88d 0003 	stmia.w	sp, {r0, r1}
 8010c26:	4618      	mov	r0, r3
 8010c28:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8010c2c:	f7fa fffa 	bl	800bc24 <rcutils_strdup>
 8010c30:	4680      	mov	r8, r0
 8010c32:	2800      	cmp	r0, #0
 8010c34:	d0e8      	beq.n	8010c08 <rcl_get_secure_root+0x24>
 8010c36:	481f      	ldr	r0, [pc, #124]	@ (8010cb4 <rcl_get_secure_root+0xd0>)
 8010c38:	9503      	str	r5, [sp, #12]
 8010c3a:	a903      	add	r1, sp, #12
 8010c3c:	f7fa fe8e 	bl	800b95c <rcutils_get_env>
 8010c40:	b160      	cbz	r0, 8010c5c <rcl_get_secure_root+0x78>
 8010c42:	2600      	movs	r6, #0
 8010c44:	6863      	ldr	r3, [r4, #4]
 8010c46:	6921      	ldr	r1, [r4, #16]
 8010c48:	4630      	mov	r0, r6
 8010c4a:	4798      	blx	r3
 8010c4c:	4640      	mov	r0, r8
 8010c4e:	6863      	ldr	r3, [r4, #4]
 8010c50:	6921      	ldr	r1, [r4, #16]
 8010c52:	4798      	blx	r3
 8010c54:	4628      	mov	r0, r5
 8010c56:	b005      	add	sp, #20
 8010c58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010c5c:	9b03      	ldr	r3, [sp, #12]
 8010c5e:	781e      	ldrb	r6, [r3, #0]
 8010c60:	b1f6      	cbz	r6, 8010ca0 <rcl_get_secure_root+0xbc>
 8010c62:	e899 0003 	ldmia.w	r9, {r0, r1}
 8010c66:	e88d 0003 	stmia.w	sp, {r0, r1}
 8010c6a:	4618      	mov	r0, r3
 8010c6c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8010c70:	f7fa ffd8 	bl	800bc24 <rcutils_strdup>
 8010c74:	4606      	mov	r6, r0
 8010c76:	2800      	cmp	r0, #0
 8010c78:	d0e3      	beq.n	8010c42 <rcl_get_secure_root+0x5e>
 8010c7a:	4622      	mov	r2, r4
 8010c7c:	4641      	mov	r1, r8
 8010c7e:	f7ff ff6f 	bl	8010b60 <exact_match_lookup>
 8010c82:	4605      	mov	r5, r0
 8010c84:	2d00      	cmp	r5, #0
 8010c86:	d0dd      	beq.n	8010c44 <rcl_get_secure_root+0x60>
 8010c88:	4628      	mov	r0, r5
 8010c8a:	f001 fed1 	bl	8012a30 <rcutils_is_directory>
 8010c8e:	4603      	mov	r3, r0
 8010c90:	2800      	cmp	r0, #0
 8010c92:	d1d7      	bne.n	8010c44 <rcl_get_secure_root+0x60>
 8010c94:	4628      	mov	r0, r5
 8010c96:	6921      	ldr	r1, [r4, #16]
 8010c98:	461d      	mov	r5, r3
 8010c9a:	6863      	ldr	r3, [r4, #4]
 8010c9c:	4798      	blx	r3
 8010c9e:	e7d1      	b.n	8010c44 <rcl_get_secure_root+0x60>
 8010ca0:	4622      	mov	r2, r4
 8010ca2:	4638      	mov	r0, r7
 8010ca4:	4641      	mov	r1, r8
 8010ca6:	f7ff ff5b 	bl	8010b60 <exact_match_lookup>
 8010caa:	4605      	mov	r5, r0
 8010cac:	e7ea      	b.n	8010c84 <rcl_get_secure_root+0xa0>
 8010cae:	bf00      	nop
 8010cb0:	0801a728 	.word	0x0801a728
 8010cb4:	0801a740 	.word	0x0801a740

08010cb8 <rcl_get_security_options_from_environment>:
 8010cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010cbc:	b082      	sub	sp, #8
 8010cbe:	2300      	movs	r3, #0
 8010cc0:	4606      	mov	r6, r0
 8010cc2:	460f      	mov	r7, r1
 8010cc4:	4820      	ldr	r0, [pc, #128]	@ (8010d48 <rcl_get_security_options_from_environment+0x90>)
 8010cc6:	9301      	str	r3, [sp, #4]
 8010cc8:	a901      	add	r1, sp, #4
 8010cca:	4690      	mov	r8, r2
 8010ccc:	f7fa fe46 	bl	800b95c <rcutils_get_env>
 8010cd0:	b120      	cbz	r0, 8010cdc <rcl_get_security_options_from_environment+0x24>
 8010cd2:	2501      	movs	r5, #1
 8010cd4:	4628      	mov	r0, r5
 8010cd6:	b002      	add	sp, #8
 8010cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010cdc:	491b      	ldr	r1, [pc, #108]	@ (8010d4c <rcl_get_security_options_from_environment+0x94>)
 8010cde:	4604      	mov	r4, r0
 8010ce0:	9801      	ldr	r0, [sp, #4]
 8010ce2:	f7ef fa95 	bl	8000210 <strcmp>
 8010ce6:	4605      	mov	r5, r0
 8010ce8:	b9e8      	cbnz	r0, 8010d26 <rcl_get_security_options_from_environment+0x6e>
 8010cea:	9001      	str	r0, [sp, #4]
 8010cec:	f1b8 0f00 	cmp.w	r8, #0
 8010cf0:	d020      	beq.n	8010d34 <rcl_get_security_options_from_environment+0x7c>
 8010cf2:	4817      	ldr	r0, [pc, #92]	@ (8010d50 <rcl_get_security_options_from_environment+0x98>)
 8010cf4:	a901      	add	r1, sp, #4
 8010cf6:	f7fa fe31 	bl	800b95c <rcutils_get_env>
 8010cfa:	2800      	cmp	r0, #0
 8010cfc:	d1e9      	bne.n	8010cd2 <rcl_get_security_options_from_environment+0x1a>
 8010cfe:	4915      	ldr	r1, [pc, #84]	@ (8010d54 <rcl_get_security_options_from_environment+0x9c>)
 8010d00:	9801      	ldr	r0, [sp, #4]
 8010d02:	f7ef fa85 	bl	8000210 <strcmp>
 8010d06:	fab0 f080 	clz	r0, r0
 8010d0a:	0940      	lsrs	r0, r0, #5
 8010d0c:	f888 0000 	strb.w	r0, [r8]
 8010d10:	4639      	mov	r1, r7
 8010d12:	4630      	mov	r0, r6
 8010d14:	f7ff ff66 	bl	8010be4 <rcl_get_secure_root>
 8010d18:	b170      	cbz	r0, 8010d38 <rcl_get_security_options_from_environment+0x80>
 8010d1a:	f8c8 0004 	str.w	r0, [r8, #4]
 8010d1e:	4628      	mov	r0, r5
 8010d20:	b002      	add	sp, #8
 8010d22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d26:	4625      	mov	r5, r4
 8010d28:	4628      	mov	r0, r5
 8010d2a:	f888 4000 	strb.w	r4, [r8]
 8010d2e:	b002      	add	sp, #8
 8010d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d34:	250b      	movs	r5, #11
 8010d36:	e7cd      	b.n	8010cd4 <rcl_get_security_options_from_environment+0x1c>
 8010d38:	f898 5000 	ldrb.w	r5, [r8]
 8010d3c:	f1a5 0501 	sub.w	r5, r5, #1
 8010d40:	fab5 f585 	clz	r5, r5
 8010d44:	096d      	lsrs	r5, r5, #5
 8010d46:	e7c5      	b.n	8010cd4 <rcl_get_security_options_from_environment+0x1c>
 8010d48:	0801a6e0 	.word	0x0801a6e0
 8010d4c:	0801a6f4 	.word	0x0801a6f4
 8010d50:	0801a6fc 	.word	0x0801a6fc
 8010d54:	0801a714 	.word	0x0801a714

08010d58 <rcl_service_get_rmw_handle>:
 8010d58:	b118      	cbz	r0, 8010d62 <rcl_service_get_rmw_handle+0xa>
 8010d5a:	6800      	ldr	r0, [r0, #0]
 8010d5c:	b108      	cbz	r0, 8010d62 <rcl_service_get_rmw_handle+0xa>
 8010d5e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8010d62:	4770      	bx	lr

08010d64 <rcl_take_request>:
 8010d64:	b570      	push	{r4, r5, r6, lr}
 8010d66:	468e      	mov	lr, r1
 8010d68:	460c      	mov	r4, r1
 8010d6a:	4616      	mov	r6, r2
 8010d6c:	4605      	mov	r5, r0
 8010d6e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010d72:	b08c      	sub	sp, #48	@ 0x30
 8010d74:	f10d 0c18 	add.w	ip, sp, #24
 8010d78:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010d7c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8010d80:	e88c 0003 	stmia.w	ip, {r0, r1}
 8010d84:	b30d      	cbz	r5, 8010dca <rcl_take_request+0x66>
 8010d86:	682b      	ldr	r3, [r5, #0]
 8010d88:	b1fb      	cbz	r3, 8010dca <rcl_take_request+0x66>
 8010d8a:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8010d8e:	b1e0      	cbz	r0, 8010dca <rcl_take_request+0x66>
 8010d90:	b336      	cbz	r6, 8010de0 <rcl_take_request+0x7c>
 8010d92:	2300      	movs	r3, #0
 8010d94:	f88d 3007 	strb.w	r3, [sp, #7]
 8010d98:	4632      	mov	r2, r6
 8010d9a:	f10d 0307 	add.w	r3, sp, #7
 8010d9e:	a902      	add	r1, sp, #8
 8010da0:	f002 fc7e 	bl	80136a0 <rmw_take_request>
 8010da4:	4605      	mov	r5, r0
 8010da6:	b198      	cbz	r0, 8010dd0 <rcl_take_request+0x6c>
 8010da8:	280a      	cmp	r0, #10
 8010daa:	bf18      	it	ne
 8010dac:	2501      	movne	r5, #1
 8010dae:	f10d 0e18 	add.w	lr, sp, #24
 8010db2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010db6:	46a4      	mov	ip, r4
 8010db8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010dbc:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8010dc0:	e88c 0003 	stmia.w	ip, {r0, r1}
 8010dc4:	4628      	mov	r0, r5
 8010dc6:	b00c      	add	sp, #48	@ 0x30
 8010dc8:	bd70      	pop	{r4, r5, r6, pc}
 8010dca:	f44f 7516 	mov.w	r5, #600	@ 0x258
 8010dce:	e7ee      	b.n	8010dae <rcl_take_request+0x4a>
 8010dd0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8010dd4:	f240 2359 	movw	r3, #601	@ 0x259
 8010dd8:	2a00      	cmp	r2, #0
 8010dda:	bf08      	it	eq
 8010ddc:	461d      	moveq	r5, r3
 8010dde:	e7e6      	b.n	8010dae <rcl_take_request+0x4a>
 8010de0:	250b      	movs	r5, #11
 8010de2:	e7e4      	b.n	8010dae <rcl_take_request+0x4a>

08010de4 <rcl_send_response>:
 8010de4:	b170      	cbz	r0, 8010e04 <rcl_send_response+0x20>
 8010de6:	6800      	ldr	r0, [r0, #0]
 8010de8:	b160      	cbz	r0, 8010e04 <rcl_send_response+0x20>
 8010dea:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8010dee:	b148      	cbz	r0, 8010e04 <rcl_send_response+0x20>
 8010df0:	b159      	cbz	r1, 8010e0a <rcl_send_response+0x26>
 8010df2:	b510      	push	{r4, lr}
 8010df4:	b15a      	cbz	r2, 8010e0e <rcl_send_response+0x2a>
 8010df6:	f002 fcb1 	bl	801375c <rmw_send_response>
 8010dfa:	b110      	cbz	r0, 8010e02 <rcl_send_response+0x1e>
 8010dfc:	2802      	cmp	r0, #2
 8010dfe:	bf18      	it	ne
 8010e00:	2001      	movne	r0, #1
 8010e02:	bd10      	pop	{r4, pc}
 8010e04:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8010e08:	4770      	bx	lr
 8010e0a:	200b      	movs	r0, #11
 8010e0c:	4770      	bx	lr
 8010e0e:	200b      	movs	r0, #11
 8010e10:	bd10      	pop	{r4, pc}
 8010e12:	bf00      	nop

08010e14 <rcl_service_is_valid>:
 8010e14:	b130      	cbz	r0, 8010e24 <rcl_service_is_valid+0x10>
 8010e16:	6800      	ldr	r0, [r0, #0]
 8010e18:	b120      	cbz	r0, 8010e24 <rcl_service_is_valid+0x10>
 8010e1a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8010e1e:	3800      	subs	r0, #0
 8010e20:	bf18      	it	ne
 8010e22:	2001      	movne	r0, #1
 8010e24:	4770      	bx	lr
 8010e26:	bf00      	nop

08010e28 <rcl_get_system_time>:
 8010e28:	4608      	mov	r0, r1
 8010e2a:	f7fa bf39 	b.w	800bca0 <rcutils_system_time_now>
 8010e2e:	bf00      	nop

08010e30 <rcl_get_steady_time>:
 8010e30:	4608      	mov	r0, r1
 8010e32:	f7fa bf5d 	b.w	800bcf0 <rcutils_steady_time_now>
 8010e36:	bf00      	nop

08010e38 <rcl_get_ros_time>:
 8010e38:	7a03      	ldrb	r3, [r0, #8]
 8010e3a:	b510      	push	{r4, lr}
 8010e3c:	460c      	mov	r4, r1
 8010e3e:	b133      	cbz	r3, 8010e4e <rcl_get_ros_time+0x16>
 8010e40:	2105      	movs	r1, #5
 8010e42:	f001 fd51 	bl	80128e8 <__atomic_load_8>
 8010e46:	e9c4 0100 	strd	r0, r1, [r4]
 8010e4a:	2000      	movs	r0, #0
 8010e4c:	bd10      	pop	{r4, pc}
 8010e4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010e52:	4608      	mov	r0, r1
 8010e54:	f7fa bf24 	b.w	800bca0 <rcutils_system_time_now>

08010e58 <rcl_clock_init>:
 8010e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e5a:	4605      	mov	r5, r0
 8010e5c:	4610      	mov	r0, r2
 8010e5e:	4614      	mov	r4, r2
 8010e60:	460e      	mov	r6, r1
 8010e62:	f7fa fd6d 	bl	800b940 <rcutils_allocator_is_valid>
 8010e66:	b128      	cbz	r0, 8010e74 <rcl_clock_init+0x1c>
 8010e68:	2d03      	cmp	r5, #3
 8010e6a:	d803      	bhi.n	8010e74 <rcl_clock_init+0x1c>
 8010e6c:	e8df f005 	tbb	[pc, r5]
 8010e70:	06532e1d 	.word	0x06532e1d
 8010e74:	f04f 0c0b 	mov.w	ip, #11
 8010e78:	4660      	mov	r0, ip
 8010e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010e7c:	2e00      	cmp	r6, #0
 8010e7e:	d0f9      	beq.n	8010e74 <rcl_clock_init+0x1c>
 8010e80:	2c00      	cmp	r4, #0
 8010e82:	d0f7      	beq.n	8010e74 <rcl_clock_init+0x1c>
 8010e84:	2300      	movs	r3, #0
 8010e86:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8010e8a:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 8010f40 <rcl_clock_init+0xe8>
 8010e8e:	6133      	str	r3, [r6, #16]
 8010e90:	f106 0514 	add.w	r5, r6, #20
 8010e94:	469c      	mov	ip, r3
 8010e96:	2703      	movs	r7, #3
 8010e98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010e9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010e9c:	6823      	ldr	r3, [r4, #0]
 8010e9e:	602b      	str	r3, [r5, #0]
 8010ea0:	7037      	strb	r7, [r6, #0]
 8010ea2:	f8c6 e00c 	str.w	lr, [r6, #12]
 8010ea6:	4660      	mov	r0, ip
 8010ea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010eaa:	2e00      	cmp	r6, #0
 8010eac:	d0e2      	beq.n	8010e74 <rcl_clock_init+0x1c>
 8010eae:	2300      	movs	r3, #0
 8010eb0:	7033      	strb	r3, [r6, #0]
 8010eb2:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8010eb6:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8010eba:	469c      	mov	ip, r3
 8010ebc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010ebe:	f106 0514 	add.w	r5, r6, #20
 8010ec2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010ec4:	6823      	ldr	r3, [r4, #0]
 8010ec6:	602b      	str	r3, [r5, #0]
 8010ec8:	4660      	mov	r0, ip
 8010eca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ecc:	2e00      	cmp	r6, #0
 8010ece:	d0d1      	beq.n	8010e74 <rcl_clock_init+0x1c>
 8010ed0:	2c00      	cmp	r4, #0
 8010ed2:	d0cf      	beq.n	8010e74 <rcl_clock_init+0x1c>
 8010ed4:	2700      	movs	r7, #0
 8010ed6:	7037      	strb	r7, [r6, #0]
 8010ed8:	46a4      	mov	ip, r4
 8010eda:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010ede:	f106 0514 	add.w	r5, r6, #20
 8010ee2:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8010ee6:	e9c6 7703 	strd	r7, r7, [r6, #12]
 8010eea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010eec:	f8dc 3000 	ldr.w	r3, [ip]
 8010ef0:	602b      	str	r3, [r5, #0]
 8010ef2:	6921      	ldr	r1, [r4, #16]
 8010ef4:	6823      	ldr	r3, [r4, #0]
 8010ef6:	2010      	movs	r0, #16
 8010ef8:	4798      	blx	r3
 8010efa:	6130      	str	r0, [r6, #16]
 8010efc:	b1d0      	cbz	r0, 8010f34 <rcl_clock_init+0xdc>
 8010efe:	2200      	movs	r2, #0
 8010f00:	2300      	movs	r3, #0
 8010f02:	e9c0 2300 	strd	r2, r3, [r0]
 8010f06:	2301      	movs	r3, #1
 8010f08:	7207      	strb	r7, [r0, #8]
 8010f0a:	4a0c      	ldr	r2, [pc, #48]	@ (8010f3c <rcl_clock_init+0xe4>)
 8010f0c:	7033      	strb	r3, [r6, #0]
 8010f0e:	46bc      	mov	ip, r7
 8010f10:	60f2      	str	r2, [r6, #12]
 8010f12:	4660      	mov	r0, ip
 8010f14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010f16:	2e00      	cmp	r6, #0
 8010f18:	d0ac      	beq.n	8010e74 <rcl_clock_init+0x1c>
 8010f1a:	2c00      	cmp	r4, #0
 8010f1c:	d0aa      	beq.n	8010e74 <rcl_clock_init+0x1c>
 8010f1e:	2300      	movs	r3, #0
 8010f20:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8010f24:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 8010f44 <rcl_clock_init+0xec>
 8010f28:	6133      	str	r3, [r6, #16]
 8010f2a:	f106 0514 	add.w	r5, r6, #20
 8010f2e:	469c      	mov	ip, r3
 8010f30:	2702      	movs	r7, #2
 8010f32:	e7b1      	b.n	8010e98 <rcl_clock_init+0x40>
 8010f34:	f04f 0c0a 	mov.w	ip, #10
 8010f38:	e79e      	b.n	8010e78 <rcl_clock_init+0x20>
 8010f3a:	bf00      	nop
 8010f3c:	08010e39 	.word	0x08010e39
 8010f40:	08010e31 	.word	0x08010e31
 8010f44:	08010e29 	.word	0x08010e29

08010f48 <rcl_clock_get_now>:
 8010f48:	b140      	cbz	r0, 8010f5c <rcl_clock_get_now+0x14>
 8010f4a:	b139      	cbz	r1, 8010f5c <rcl_clock_get_now+0x14>
 8010f4c:	7803      	ldrb	r3, [r0, #0]
 8010f4e:	b11b      	cbz	r3, 8010f58 <rcl_clock_get_now+0x10>
 8010f50:	68c3      	ldr	r3, [r0, #12]
 8010f52:	b10b      	cbz	r3, 8010f58 <rcl_clock_get_now+0x10>
 8010f54:	6900      	ldr	r0, [r0, #16]
 8010f56:	4718      	bx	r3
 8010f58:	2001      	movs	r0, #1
 8010f5a:	4770      	bx	lr
 8010f5c:	200b      	movs	r0, #11
 8010f5e:	4770      	bx	lr

08010f60 <rcl_timer_call>:
 8010f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f64:	b087      	sub	sp, #28
 8010f66:	2800      	cmp	r0, #0
 8010f68:	d06d      	beq.n	8011046 <rcl_timer_call+0xe6>
 8010f6a:	6803      	ldr	r3, [r0, #0]
 8010f6c:	4604      	mov	r4, r0
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	d063      	beq.n	801103a <rcl_timer_call+0xda>
 8010f72:	f3bf 8f5b 	dmb	ish
 8010f76:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8010f7a:	f3bf 8f5b 	dmb	ish
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d150      	bne.n	8011024 <rcl_timer_call+0xc4>
 8010f82:	6803      	ldr	r3, [r0, #0]
 8010f84:	a904      	add	r1, sp, #16
 8010f86:	6818      	ldr	r0, [r3, #0]
 8010f88:	f7ff ffde 	bl	8010f48 <rcl_clock_get_now>
 8010f8c:	4605      	mov	r5, r0
 8010f8e:	2800      	cmp	r0, #0
 8010f90:	d14a      	bne.n	8011028 <rcl_timer_call+0xc8>
 8010f92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	db4a      	blt.n	8011030 <rcl_timer_call+0xd0>
 8010f9a:	6820      	ldr	r0, [r4, #0]
 8010f9c:	f04f 0a05 	mov.w	sl, #5
 8010fa0:	f8cd a000 	str.w	sl, [sp]
 8010fa4:	3020      	adds	r0, #32
 8010fa6:	f001 fd0b 	bl	80129c0 <__atomic_exchange_8>
 8010faa:	6823      	ldr	r3, [r4, #0]
 8010fac:	f3bf 8f5b 	dmb	ish
 8010fb0:	4680      	mov	r8, r0
 8010fb2:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8010fb6:	f3bf 8f5b 	dmb	ish
 8010fba:	6820      	ldr	r0, [r4, #0]
 8010fbc:	4689      	mov	r9, r1
 8010fbe:	3028      	adds	r0, #40	@ 0x28
 8010fc0:	4651      	mov	r1, sl
 8010fc2:	f001 fc91 	bl	80128e8 <__atomic_load_8>
 8010fc6:	4606      	mov	r6, r0
 8010fc8:	6820      	ldr	r0, [r4, #0]
 8010fca:	460f      	mov	r7, r1
 8010fcc:	3018      	adds	r0, #24
 8010fce:	4651      	mov	r1, sl
 8010fd0:	f001 fc8a 	bl	80128e8 <__atomic_load_8>
 8010fd4:	1836      	adds	r6, r6, r0
 8010fd6:	4602      	mov	r2, r0
 8010fd8:	4682      	mov	sl, r0
 8010fda:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 8010fde:	eb47 0701 	adc.w	r7, r7, r1
 8010fe2:	4286      	cmp	r6, r0
 8010fe4:	460b      	mov	r3, r1
 8010fe6:	eb77 010c 	sbcs.w	r1, r7, ip
 8010fea:	da04      	bge.n	8010ff6 <rcl_timer_call+0x96>
 8010fec:	ea53 0102 	orrs.w	r1, r3, r2
 8010ff0:	d12e      	bne.n	8011050 <rcl_timer_call+0xf0>
 8010ff2:	4606      	mov	r6, r0
 8010ff4:	4667      	mov	r7, ip
 8010ff6:	6820      	ldr	r0, [r4, #0]
 8010ff8:	2105      	movs	r1, #5
 8010ffa:	4632      	mov	r2, r6
 8010ffc:	463b      	mov	r3, r7
 8010ffe:	3028      	adds	r0, #40	@ 0x28
 8011000:	9100      	str	r1, [sp, #0]
 8011002:	f001 fca7 	bl	8012954 <__atomic_store_8>
 8011006:	f1bb 0f00 	cmp.w	fp, #0
 801100a:	d00d      	beq.n	8011028 <rcl_timer_call+0xc8>
 801100c:	9a04      	ldr	r2, [sp, #16]
 801100e:	9b05      	ldr	r3, [sp, #20]
 8011010:	ebb2 0208 	subs.w	r2, r2, r8
 8011014:	4620      	mov	r0, r4
 8011016:	eb63 0309 	sbc.w	r3, r3, r9
 801101a:	47d8      	blx	fp
 801101c:	4628      	mov	r0, r5
 801101e:	b007      	add	sp, #28
 8011020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011024:	f240 3521 	movw	r5, #801	@ 0x321
 8011028:	4628      	mov	r0, r5
 801102a:	b007      	add	sp, #28
 801102c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011030:	2501      	movs	r5, #1
 8011032:	4628      	mov	r0, r5
 8011034:	b007      	add	sp, #28
 8011036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801103a:	f44f 7548 	mov.w	r5, #800	@ 0x320
 801103e:	4628      	mov	r0, r5
 8011040:	b007      	add	sp, #28
 8011042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011046:	250b      	movs	r5, #11
 8011048:	4628      	mov	r0, r5
 801104a:	b007      	add	sp, #28
 801104c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011050:	1b80      	subs	r0, r0, r6
 8011052:	eb6c 0107 	sbc.w	r1, ip, r7
 8011056:	3801      	subs	r0, #1
 8011058:	f161 0100 	sbc.w	r1, r1, #0
 801105c:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8011060:	f7ef fdd2 	bl	8000c08 <__aeabi_ldivmod>
 8011064:	9b02      	ldr	r3, [sp, #8]
 8011066:	3001      	adds	r0, #1
 8011068:	f141 0100 	adc.w	r1, r1, #0
 801106c:	fb00 f303 	mul.w	r3, r0, r3
 8011070:	fb01 330a 	mla	r3, r1, sl, r3
 8011074:	fba0 0a0a 	umull	r0, sl, r0, sl
 8011078:	1986      	adds	r6, r0, r6
 801107a:	4453      	add	r3, sl
 801107c:	eb43 0707 	adc.w	r7, r3, r7
 8011080:	e7b9      	b.n	8010ff6 <rcl_timer_call+0x96>
 8011082:	bf00      	nop

08011084 <rcl_timer_is_ready>:
 8011084:	b570      	push	{r4, r5, r6, lr}
 8011086:	b082      	sub	sp, #8
 8011088:	b378      	cbz	r0, 80110ea <rcl_timer_is_ready+0x66>
 801108a:	6803      	ldr	r3, [r0, #0]
 801108c:	4604      	mov	r4, r0
 801108e:	b383      	cbz	r3, 80110f2 <rcl_timer_is_ready+0x6e>
 8011090:	460d      	mov	r5, r1
 8011092:	b351      	cbz	r1, 80110ea <rcl_timer_is_ready+0x66>
 8011094:	f3bf 8f5b 	dmb	ish
 8011098:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801109c:	f3bf 8f5b 	dmb	ish
 80110a0:	b953      	cbnz	r3, 80110b8 <rcl_timer_is_ready+0x34>
 80110a2:	6803      	ldr	r3, [r0, #0]
 80110a4:	4669      	mov	r1, sp
 80110a6:	6818      	ldr	r0, [r3, #0]
 80110a8:	f7ff ff4e 	bl	8010f48 <rcl_clock_get_now>
 80110ac:	4606      	mov	r6, r0
 80110ae:	b140      	cbz	r0, 80110c2 <rcl_timer_is_ready+0x3e>
 80110b0:	f240 3321 	movw	r3, #801	@ 0x321
 80110b4:	4298      	cmp	r0, r3
 80110b6:	d101      	bne.n	80110bc <rcl_timer_is_ready+0x38>
 80110b8:	2600      	movs	r6, #0
 80110ba:	702e      	strb	r6, [r5, #0]
 80110bc:	4630      	mov	r0, r6
 80110be:	b002      	add	sp, #8
 80110c0:	bd70      	pop	{r4, r5, r6, pc}
 80110c2:	6820      	ldr	r0, [r4, #0]
 80110c4:	2105      	movs	r1, #5
 80110c6:	3028      	adds	r0, #40	@ 0x28
 80110c8:	f001 fc0e 	bl	80128e8 <__atomic_load_8>
 80110cc:	9b00      	ldr	r3, [sp, #0]
 80110ce:	1ac0      	subs	r0, r0, r3
 80110d0:	9b01      	ldr	r3, [sp, #4]
 80110d2:	eb61 0103 	sbc.w	r1, r1, r3
 80110d6:	2801      	cmp	r0, #1
 80110d8:	f171 0300 	sbcs.w	r3, r1, #0
 80110dc:	bfb4      	ite	lt
 80110de:	2301      	movlt	r3, #1
 80110e0:	2300      	movge	r3, #0
 80110e2:	4630      	mov	r0, r6
 80110e4:	702b      	strb	r3, [r5, #0]
 80110e6:	b002      	add	sp, #8
 80110e8:	bd70      	pop	{r4, r5, r6, pc}
 80110ea:	260b      	movs	r6, #11
 80110ec:	4630      	mov	r0, r6
 80110ee:	b002      	add	sp, #8
 80110f0:	bd70      	pop	{r4, r5, r6, pc}
 80110f2:	f44f 7648 	mov.w	r6, #800	@ 0x320
 80110f6:	e7e1      	b.n	80110bc <rcl_timer_is_ready+0x38>

080110f8 <rcl_timer_get_time_until_next_call>:
 80110f8:	b570      	push	{r4, r5, r6, lr}
 80110fa:	b082      	sub	sp, #8
 80110fc:	b330      	cbz	r0, 801114c <rcl_timer_get_time_until_next_call+0x54>
 80110fe:	6803      	ldr	r3, [r0, #0]
 8011100:	4604      	mov	r4, r0
 8011102:	b33b      	cbz	r3, 8011154 <rcl_timer_get_time_until_next_call+0x5c>
 8011104:	460d      	mov	r5, r1
 8011106:	b309      	cbz	r1, 801114c <rcl_timer_get_time_until_next_call+0x54>
 8011108:	f3bf 8f5b 	dmb	ish
 801110c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8011110:	f3bf 8f5b 	dmb	ish
 8011114:	b9ab      	cbnz	r3, 8011142 <rcl_timer_get_time_until_next_call+0x4a>
 8011116:	6803      	ldr	r3, [r0, #0]
 8011118:	4669      	mov	r1, sp
 801111a:	6818      	ldr	r0, [r3, #0]
 801111c:	f7ff ff14 	bl	8010f48 <rcl_clock_get_now>
 8011120:	4606      	mov	r6, r0
 8011122:	b958      	cbnz	r0, 801113c <rcl_timer_get_time_until_next_call+0x44>
 8011124:	6820      	ldr	r0, [r4, #0]
 8011126:	2105      	movs	r1, #5
 8011128:	3028      	adds	r0, #40	@ 0x28
 801112a:	f001 fbdd 	bl	80128e8 <__atomic_load_8>
 801112e:	9b00      	ldr	r3, [sp, #0]
 8011130:	1ac0      	subs	r0, r0, r3
 8011132:	9b01      	ldr	r3, [sp, #4]
 8011134:	6028      	str	r0, [r5, #0]
 8011136:	eb61 0103 	sbc.w	r1, r1, r3
 801113a:	6069      	str	r1, [r5, #4]
 801113c:	4630      	mov	r0, r6
 801113e:	b002      	add	sp, #8
 8011140:	bd70      	pop	{r4, r5, r6, pc}
 8011142:	f240 3621 	movw	r6, #801	@ 0x321
 8011146:	4630      	mov	r0, r6
 8011148:	b002      	add	sp, #8
 801114a:	bd70      	pop	{r4, r5, r6, pc}
 801114c:	260b      	movs	r6, #11
 801114e:	4630      	mov	r0, r6
 8011150:	b002      	add	sp, #8
 8011152:	bd70      	pop	{r4, r5, r6, pc}
 8011154:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8011158:	e7f0      	b.n	801113c <rcl_timer_get_time_until_next_call+0x44>
 801115a:	bf00      	nop

0801115c <rcl_timer_get_guard_condition>:
 801115c:	b130      	cbz	r0, 801116c <rcl_timer_get_guard_condition+0x10>
 801115e:	6800      	ldr	r0, [r0, #0]
 8011160:	b120      	cbz	r0, 801116c <rcl_timer_get_guard_condition+0x10>
 8011162:	68c3      	ldr	r3, [r0, #12]
 8011164:	b10b      	cbz	r3, 801116a <rcl_timer_get_guard_condition+0xe>
 8011166:	3008      	adds	r0, #8
 8011168:	4770      	bx	lr
 801116a:	4618      	mov	r0, r3
 801116c:	4770      	bx	lr
 801116e:	bf00      	nop

08011170 <rcl_validate_enclave_name_with_size>:
 8011170:	b378      	cbz	r0, 80111d2 <rcl_validate_enclave_name_with_size+0x62>
 8011172:	b570      	push	{r4, r5, r6, lr}
 8011174:	4615      	mov	r5, r2
 8011176:	b0c2      	sub	sp, #264	@ 0x108
 8011178:	b302      	cbz	r2, 80111bc <rcl_validate_enclave_name_with_size+0x4c>
 801117a:	461e      	mov	r6, r3
 801117c:	466a      	mov	r2, sp
 801117e:	ab01      	add	r3, sp, #4
 8011180:	460c      	mov	r4, r1
 8011182:	f7fa fe09 	bl	800bd98 <rmw_validate_namespace_with_size>
 8011186:	4684      	mov	ip, r0
 8011188:	b9e8      	cbnz	r0, 80111c6 <rcl_validate_enclave_name_with_size+0x56>
 801118a:	9b00      	ldr	r3, [sp, #0]
 801118c:	b923      	cbnz	r3, 8011198 <rcl_validate_enclave_name_with_size+0x28>
 801118e:	2300      	movs	r3, #0
 8011190:	602b      	str	r3, [r5, #0]
 8011192:	4660      	mov	r0, ip
 8011194:	b042      	add	sp, #264	@ 0x108
 8011196:	bd70      	pop	{r4, r5, r6, pc}
 8011198:	2b07      	cmp	r3, #7
 801119a:	d007      	beq.n	80111ac <rcl_validate_enclave_name_with_size+0x3c>
 801119c:	1e5a      	subs	r2, r3, #1
 801119e:	2a05      	cmp	r2, #5
 80111a0:	d833      	bhi.n	801120a <rcl_validate_enclave_name_with_size+0x9a>
 80111a2:	e8df f002 	tbb	[pc, r2]
 80111a6:	2c2f      	.short	0x2c2f
 80111a8:	1a232629 	.word	0x1a232629
 80111ac:	2cff      	cmp	r4, #255	@ 0xff
 80111ae:	d9ee      	bls.n	801118e <rcl_validate_enclave_name_with_size+0x1e>
 80111b0:	602b      	str	r3, [r5, #0]
 80111b2:	2e00      	cmp	r6, #0
 80111b4:	d0ed      	beq.n	8011192 <rcl_validate_enclave_name_with_size+0x22>
 80111b6:	23fe      	movs	r3, #254	@ 0xfe
 80111b8:	6033      	str	r3, [r6, #0]
 80111ba:	e7ea      	b.n	8011192 <rcl_validate_enclave_name_with_size+0x22>
 80111bc:	f04f 0c0b 	mov.w	ip, #11
 80111c0:	4660      	mov	r0, ip
 80111c2:	b042      	add	sp, #264	@ 0x108
 80111c4:	bd70      	pop	{r4, r5, r6, pc}
 80111c6:	f7ff f8c9 	bl	801035c <rcl_convert_rmw_ret_to_rcl_ret>
 80111ca:	4684      	mov	ip, r0
 80111cc:	4660      	mov	r0, ip
 80111ce:	b042      	add	sp, #264	@ 0x108
 80111d0:	bd70      	pop	{r4, r5, r6, pc}
 80111d2:	f04f 0c0b 	mov.w	ip, #11
 80111d6:	4660      	mov	r0, ip
 80111d8:	4770      	bx	lr
 80111da:	2306      	movs	r3, #6
 80111dc:	602b      	str	r3, [r5, #0]
 80111de:	2e00      	cmp	r6, #0
 80111e0:	d0d7      	beq.n	8011192 <rcl_validate_enclave_name_with_size+0x22>
 80111e2:	9b01      	ldr	r3, [sp, #4]
 80111e4:	6033      	str	r3, [r6, #0]
 80111e6:	4660      	mov	r0, ip
 80111e8:	b042      	add	sp, #264	@ 0x108
 80111ea:	bd70      	pop	{r4, r5, r6, pc}
 80111ec:	2305      	movs	r3, #5
 80111ee:	602b      	str	r3, [r5, #0]
 80111f0:	e7f5      	b.n	80111de <rcl_validate_enclave_name_with_size+0x6e>
 80111f2:	2304      	movs	r3, #4
 80111f4:	602b      	str	r3, [r5, #0]
 80111f6:	e7f2      	b.n	80111de <rcl_validate_enclave_name_with_size+0x6e>
 80111f8:	2303      	movs	r3, #3
 80111fa:	602b      	str	r3, [r5, #0]
 80111fc:	e7ef      	b.n	80111de <rcl_validate_enclave_name_with_size+0x6e>
 80111fe:	2302      	movs	r3, #2
 8011200:	602b      	str	r3, [r5, #0]
 8011202:	e7ec      	b.n	80111de <rcl_validate_enclave_name_with_size+0x6e>
 8011204:	2301      	movs	r3, #1
 8011206:	602b      	str	r3, [r5, #0]
 8011208:	e7e9      	b.n	80111de <rcl_validate_enclave_name_with_size+0x6e>
 801120a:	4a04      	ldr	r2, [pc, #16]	@ (801121c <rcl_validate_enclave_name_with_size+0xac>)
 801120c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011210:	a802      	add	r0, sp, #8
 8011212:	f7fa fcdb 	bl	800bbcc <rcutils_snprintf>
 8011216:	f04f 0c01 	mov.w	ip, #1
 801121a:	e7ba      	b.n	8011192 <rcl_validate_enclave_name_with_size+0x22>
 801121c:	0801a760 	.word	0x0801a760

08011220 <rcl_validate_enclave_name>:
 8011220:	b168      	cbz	r0, 801123e <rcl_validate_enclave_name+0x1e>
 8011222:	b570      	push	{r4, r5, r6, lr}
 8011224:	460d      	mov	r5, r1
 8011226:	4616      	mov	r6, r2
 8011228:	4604      	mov	r4, r0
 801122a:	f7ef f851 	bl	80002d0 <strlen>
 801122e:	4633      	mov	r3, r6
 8011230:	4601      	mov	r1, r0
 8011232:	462a      	mov	r2, r5
 8011234:	4620      	mov	r0, r4
 8011236:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801123a:	f7ff bf99 	b.w	8011170 <rcl_validate_enclave_name_with_size>
 801123e:	200b      	movs	r0, #11
 8011240:	4770      	bx	lr
 8011242:	bf00      	nop

08011244 <rcl_get_zero_initialized_wait_set>:
 8011244:	b510      	push	{r4, lr}
 8011246:	4c08      	ldr	r4, [pc, #32]	@ (8011268 <rcl_get_zero_initialized_wait_set+0x24>)
 8011248:	4686      	mov	lr, r0
 801124a:	4684      	mov	ip, r0
 801124c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801124e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011252:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011254:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011258:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801125a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801125e:	6823      	ldr	r3, [r4, #0]
 8011260:	f8cc 3000 	str.w	r3, [ip]
 8011264:	4670      	mov	r0, lr
 8011266:	bd10      	pop	{r4, pc}
 8011268:	0801a7c0 	.word	0x0801a7c0

0801126c <rcl_wait_set_is_valid>:
 801126c:	b118      	cbz	r0, 8011276 <rcl_wait_set_is_valid+0xa>
 801126e:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8011270:	3800      	subs	r0, #0
 8011272:	bf18      	it	ne
 8011274:	2001      	movne	r0, #1
 8011276:	4770      	bx	lr

08011278 <rcl_wait_set_fini>:
 8011278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801127c:	b082      	sub	sp, #8
 801127e:	2800      	cmp	r0, #0
 8011280:	f000 8095 	beq.w	80113ae <rcl_wait_set_fini+0x136>
 8011284:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8011286:	4604      	mov	r4, r0
 8011288:	2e00      	cmp	r6, #0
 801128a:	f000 808c 	beq.w	80113a6 <rcl_wait_set_fini+0x12e>
 801128e:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 8011290:	f002 fca4 	bl	8013bdc <rmw_destroy_wait_set>
 8011294:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011296:	1e06      	subs	r6, r0, #0
 8011298:	bf18      	it	ne
 801129a:	f44f 7661 	movne.w	r6, #900	@ 0x384
 801129e:	2d00      	cmp	r5, #0
 80112a0:	f000 8081 	beq.w	80113a6 <rcl_wait_set_fini+0x12e>
 80112a4:	6820      	ldr	r0, [r4, #0]
 80112a6:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 80112aa:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80112ac:	2700      	movs	r7, #0
 80112ae:	6067      	str	r7, [r4, #4]
 80112b0:	602f      	str	r7, [r5, #0]
 80112b2:	b120      	cbz	r0, 80112be <rcl_wait_set_fini+0x46>
 80112b4:	9101      	str	r1, [sp, #4]
 80112b6:	47c0      	blx	r8
 80112b8:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80112ba:	9901      	ldr	r1, [sp, #4]
 80112bc:	6027      	str	r7, [r4, #0]
 80112be:	68a8      	ldr	r0, [r5, #8]
 80112c0:	b120      	cbz	r0, 80112cc <rcl_wait_set_fini+0x54>
 80112c2:	47c0      	blx	r8
 80112c4:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80112c6:	2300      	movs	r3, #0
 80112c8:	e9c5 3301 	strd	r3, r3, [r5, #4]
 80112cc:	68a0      	ldr	r0, [r4, #8]
 80112ce:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80112d0:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80112d2:	f04f 0800 	mov.w	r8, #0
 80112d6:	f8c4 800c 	str.w	r8, [r4, #12]
 80112da:	f8c5 800c 	str.w	r8, [r5, #12]
 80112de:	b128      	cbz	r0, 80112ec <rcl_wait_set_fini+0x74>
 80112e0:	47b8      	blx	r7
 80112e2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80112e4:	f8c4 8008 	str.w	r8, [r4, #8]
 80112e8:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80112ea:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80112ec:	6968      	ldr	r0, [r5, #20]
 80112ee:	f04f 0800 	mov.w	r8, #0
 80112f2:	f8c5 8010 	str.w	r8, [r5, #16]
 80112f6:	b128      	cbz	r0, 8011304 <rcl_wait_set_fini+0x8c>
 80112f8:	47b8      	blx	r7
 80112fa:	f8c5 8014 	str.w	r8, [r5, #20]
 80112fe:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011300:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8011302:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8011304:	6920      	ldr	r0, [r4, #16]
 8011306:	f04f 0800 	mov.w	r8, #0
 801130a:	f8c4 8014 	str.w	r8, [r4, #20]
 801130e:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 8011312:	b128      	cbz	r0, 8011320 <rcl_wait_set_fini+0xa8>
 8011314:	47b8      	blx	r7
 8011316:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011318:	f8c4 8010 	str.w	r8, [r4, #16]
 801131c:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801131e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8011320:	69a0      	ldr	r0, [r4, #24]
 8011322:	f04f 0800 	mov.w	r8, #0
 8011326:	f8c4 801c 	str.w	r8, [r4, #28]
 801132a:	f8c5 8018 	str.w	r8, [r5, #24]
 801132e:	b128      	cbz	r0, 801133c <rcl_wait_set_fini+0xc4>
 8011330:	9101      	str	r1, [sp, #4]
 8011332:	47b8      	blx	r7
 8011334:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011336:	9901      	ldr	r1, [sp, #4]
 8011338:	f8c4 8018 	str.w	r8, [r4, #24]
 801133c:	6a28      	ldr	r0, [r5, #32]
 801133e:	b120      	cbz	r0, 801134a <rcl_wait_set_fini+0xd2>
 8011340:	47b8      	blx	r7
 8011342:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011344:	2300      	movs	r3, #0
 8011346:	e9c5 3307 	strd	r3, r3, [r5, #28]
 801134a:	6a20      	ldr	r0, [r4, #32]
 801134c:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8011350:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8011352:	2700      	movs	r7, #0
 8011354:	6267      	str	r7, [r4, #36]	@ 0x24
 8011356:	626f      	str	r7, [r5, #36]	@ 0x24
 8011358:	b120      	cbz	r0, 8011364 <rcl_wait_set_fini+0xec>
 801135a:	9101      	str	r1, [sp, #4]
 801135c:	47c0      	blx	r8
 801135e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011360:	9901      	ldr	r1, [sp, #4]
 8011362:	6227      	str	r7, [r4, #32]
 8011364:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8011366:	b120      	cbz	r0, 8011372 <rcl_wait_set_fini+0xfa>
 8011368:	47c0      	blx	r8
 801136a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801136c:	2300      	movs	r3, #0
 801136e:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8011372:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8011374:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8011378:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801137a:	2700      	movs	r7, #0
 801137c:	62e7      	str	r7, [r4, #44]	@ 0x2c
 801137e:	632f      	str	r7, [r5, #48]	@ 0x30
 8011380:	b120      	cbz	r0, 801138c <rcl_wait_set_fini+0x114>
 8011382:	9101      	str	r1, [sp, #4]
 8011384:	47c0      	blx	r8
 8011386:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011388:	9901      	ldr	r1, [sp, #4]
 801138a:	62a7      	str	r7, [r4, #40]	@ 0x28
 801138c:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 801138e:	b120      	cbz	r0, 801139a <rcl_wait_set_fini+0x122>
 8011390:	47c0      	blx	r8
 8011392:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011394:	2300      	movs	r3, #0
 8011396:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 801139a:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 801139c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801139e:	4628      	mov	r0, r5
 80113a0:	4798      	blx	r3
 80113a2:	2300      	movs	r3, #0
 80113a4:	6323      	str	r3, [r4, #48]	@ 0x30
 80113a6:	4630      	mov	r0, r6
 80113a8:	b002      	add	sp, #8
 80113aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80113ae:	260b      	movs	r6, #11
 80113b0:	4630      	mov	r0, r6
 80113b2:	b002      	add	sp, #8
 80113b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080113b8 <rcl_wait_set_add_subscription>:
 80113b8:	b318      	cbz	r0, 8011402 <rcl_wait_set_add_subscription+0x4a>
 80113ba:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80113bc:	b570      	push	{r4, r5, r6, lr}
 80113be:	4604      	mov	r4, r0
 80113c0:	b30b      	cbz	r3, 8011406 <rcl_wait_set_add_subscription+0x4e>
 80113c2:	b319      	cbz	r1, 801140c <rcl_wait_set_add_subscription+0x54>
 80113c4:	681d      	ldr	r5, [r3, #0]
 80113c6:	6840      	ldr	r0, [r0, #4]
 80113c8:	4285      	cmp	r5, r0
 80113ca:	d217      	bcs.n	80113fc <rcl_wait_set_add_subscription+0x44>
 80113cc:	6820      	ldr	r0, [r4, #0]
 80113ce:	1c6e      	adds	r6, r5, #1
 80113d0:	601e      	str	r6, [r3, #0]
 80113d2:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80113d6:	b102      	cbz	r2, 80113da <rcl_wait_set_add_subscription+0x22>
 80113d8:	6015      	str	r5, [r2, #0]
 80113da:	4608      	mov	r0, r1
 80113dc:	f7f9 fb4e 	bl	800aa7c <rcl_subscription_get_rmw_handle>
 80113e0:	b150      	cbz	r0, 80113f8 <rcl_wait_set_add_subscription+0x40>
 80113e2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80113e4:	6842      	ldr	r2, [r0, #4]
 80113e6:	689b      	ldr	r3, [r3, #8]
 80113e8:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80113ec:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80113ee:	6853      	ldr	r3, [r2, #4]
 80113f0:	3301      	adds	r3, #1
 80113f2:	2000      	movs	r0, #0
 80113f4:	6053      	str	r3, [r2, #4]
 80113f6:	bd70      	pop	{r4, r5, r6, pc}
 80113f8:	2001      	movs	r0, #1
 80113fa:	bd70      	pop	{r4, r5, r6, pc}
 80113fc:	f240 3086 	movw	r0, #902	@ 0x386
 8011400:	bd70      	pop	{r4, r5, r6, pc}
 8011402:	200b      	movs	r0, #11
 8011404:	4770      	bx	lr
 8011406:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801140a:	bd70      	pop	{r4, r5, r6, pc}
 801140c:	200b      	movs	r0, #11
 801140e:	bd70      	pop	{r4, r5, r6, pc}

08011410 <rcl_wait_set_clear>:
 8011410:	2800      	cmp	r0, #0
 8011412:	d073      	beq.n	80114fc <rcl_wait_set_clear+0xec>
 8011414:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8011416:	b510      	push	{r4, lr}
 8011418:	4604      	mov	r4, r0
 801141a:	2b00      	cmp	r3, #0
 801141c:	d070      	beq.n	8011500 <rcl_wait_set_clear+0xf0>
 801141e:	6800      	ldr	r0, [r0, #0]
 8011420:	b138      	cbz	r0, 8011432 <rcl_wait_set_clear+0x22>
 8011422:	6862      	ldr	r2, [r4, #4]
 8011424:	2100      	movs	r1, #0
 8011426:	0092      	lsls	r2, r2, #2
 8011428:	f006 fcd6 	bl	8017dd8 <memset>
 801142c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801142e:	2200      	movs	r2, #0
 8011430:	601a      	str	r2, [r3, #0]
 8011432:	68a0      	ldr	r0, [r4, #8]
 8011434:	b138      	cbz	r0, 8011446 <rcl_wait_set_clear+0x36>
 8011436:	68e2      	ldr	r2, [r4, #12]
 8011438:	2100      	movs	r1, #0
 801143a:	0092      	lsls	r2, r2, #2
 801143c:	f006 fccc 	bl	8017dd8 <memset>
 8011440:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011442:	2200      	movs	r2, #0
 8011444:	60da      	str	r2, [r3, #12]
 8011446:	69a0      	ldr	r0, [r4, #24]
 8011448:	b138      	cbz	r0, 801145a <rcl_wait_set_clear+0x4a>
 801144a:	69e2      	ldr	r2, [r4, #28]
 801144c:	2100      	movs	r1, #0
 801144e:	0092      	lsls	r2, r2, #2
 8011450:	f006 fcc2 	bl	8017dd8 <memset>
 8011454:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011456:	2200      	movs	r2, #0
 8011458:	619a      	str	r2, [r3, #24]
 801145a:	6a20      	ldr	r0, [r4, #32]
 801145c:	b138      	cbz	r0, 801146e <rcl_wait_set_clear+0x5e>
 801145e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8011460:	2100      	movs	r1, #0
 8011462:	0092      	lsls	r2, r2, #2
 8011464:	f006 fcb8 	bl	8017dd8 <memset>
 8011468:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801146a:	2200      	movs	r2, #0
 801146c:	625a      	str	r2, [r3, #36]	@ 0x24
 801146e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8011470:	b138      	cbz	r0, 8011482 <rcl_wait_set_clear+0x72>
 8011472:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8011474:	2100      	movs	r1, #0
 8011476:	0092      	lsls	r2, r2, #2
 8011478:	f006 fcae 	bl	8017dd8 <memset>
 801147c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801147e:	2200      	movs	r2, #0
 8011480:	631a      	str	r2, [r3, #48]	@ 0x30
 8011482:	6920      	ldr	r0, [r4, #16]
 8011484:	b138      	cbz	r0, 8011496 <rcl_wait_set_clear+0x86>
 8011486:	6962      	ldr	r2, [r4, #20]
 8011488:	2100      	movs	r1, #0
 801148a:	0092      	lsls	r2, r2, #2
 801148c:	f006 fca4 	bl	8017dd8 <memset>
 8011490:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011492:	2200      	movs	r2, #0
 8011494:	641a      	str	r2, [r3, #64]	@ 0x40
 8011496:	6898      	ldr	r0, [r3, #8]
 8011498:	b138      	cbz	r0, 80114aa <rcl_wait_set_clear+0x9a>
 801149a:	685a      	ldr	r2, [r3, #4]
 801149c:	2100      	movs	r1, #0
 801149e:	0092      	lsls	r2, r2, #2
 80114a0:	f006 fc9a 	bl	8017dd8 <memset>
 80114a4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80114a6:	2200      	movs	r2, #0
 80114a8:	605a      	str	r2, [r3, #4]
 80114aa:	6958      	ldr	r0, [r3, #20]
 80114ac:	b138      	cbz	r0, 80114be <rcl_wait_set_clear+0xae>
 80114ae:	691a      	ldr	r2, [r3, #16]
 80114b0:	2100      	movs	r1, #0
 80114b2:	0092      	lsls	r2, r2, #2
 80114b4:	f006 fc90 	bl	8017dd8 <memset>
 80114b8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80114ba:	2200      	movs	r2, #0
 80114bc:	611a      	str	r2, [r3, #16]
 80114be:	6a18      	ldr	r0, [r3, #32]
 80114c0:	b138      	cbz	r0, 80114d2 <rcl_wait_set_clear+0xc2>
 80114c2:	69da      	ldr	r2, [r3, #28]
 80114c4:	2100      	movs	r1, #0
 80114c6:	0092      	lsls	r2, r2, #2
 80114c8:	f006 fc86 	bl	8017dd8 <memset>
 80114cc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80114ce:	2200      	movs	r2, #0
 80114d0:	61da      	str	r2, [r3, #28]
 80114d2:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80114d4:	b138      	cbz	r0, 80114e6 <rcl_wait_set_clear+0xd6>
 80114d6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80114d8:	2100      	movs	r1, #0
 80114da:	0092      	lsls	r2, r2, #2
 80114dc:	f006 fc7c 	bl	8017dd8 <memset>
 80114e0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80114e2:	2200      	movs	r2, #0
 80114e4:	629a      	str	r2, [r3, #40]	@ 0x28
 80114e6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80114e8:	b138      	cbz	r0, 80114fa <rcl_wait_set_clear+0xea>
 80114ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80114ec:	2100      	movs	r1, #0
 80114ee:	0092      	lsls	r2, r2, #2
 80114f0:	f006 fc72 	bl	8017dd8 <memset>
 80114f4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80114f6:	2000      	movs	r0, #0
 80114f8:	6358      	str	r0, [r3, #52]	@ 0x34
 80114fa:	bd10      	pop	{r4, pc}
 80114fc:	200b      	movs	r0, #11
 80114fe:	4770      	bx	lr
 8011500:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011504:	bd10      	pop	{r4, pc}
 8011506:	bf00      	nop

08011508 <rcl_wait_set_resize>:
 8011508:	2800      	cmp	r0, #0
 801150a:	f000 8185 	beq.w	8011818 <rcl_wait_set_resize+0x310>
 801150e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011512:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8011514:	b083      	sub	sp, #12
 8011516:	4605      	mov	r5, r0
 8011518:	2c00      	cmp	r4, #0
 801151a:	f000 817f 	beq.w	801181c <rcl_wait_set_resize+0x314>
 801151e:	f04f 0900 	mov.w	r9, #0
 8011522:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 8011526:	461f      	mov	r7, r3
 8011528:	4688      	mov	r8, r1
 801152a:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 801152e:	4616      	mov	r6, r2
 8011530:	f8c0 9004 	str.w	r9, [r0, #4]
 8011534:	f8c4 9000 	str.w	r9, [r4]
 8011538:	2900      	cmp	r1, #0
 801153a:	f000 80bd 	beq.w	80116b8 <rcl_wait_set_resize+0x1b0>
 801153e:	008c      	lsls	r4, r1, #2
 8011540:	6800      	ldr	r0, [r0, #0]
 8011542:	9301      	str	r3, [sp, #4]
 8011544:	4652      	mov	r2, sl
 8011546:	4621      	mov	r1, r4
 8011548:	4798      	blx	r3
 801154a:	9b01      	ldr	r3, [sp, #4]
 801154c:	6028      	str	r0, [r5, #0]
 801154e:	2800      	cmp	r0, #0
 8011550:	f000 80cb 	beq.w	80116ea <rcl_wait_set_resize+0x1e2>
 8011554:	4622      	mov	r2, r4
 8011556:	4649      	mov	r1, r9
 8011558:	9301      	str	r3, [sp, #4]
 801155a:	f006 fc3d 	bl	8017dd8 <memset>
 801155e:	f8c5 8004 	str.w	r8, [r5, #4]
 8011562:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 8011566:	9b01      	ldr	r3, [sp, #4]
 8011568:	f8d8 0008 	ldr.w	r0, [r8, #8]
 801156c:	f8c8 9004 	str.w	r9, [r8, #4]
 8011570:	4652      	mov	r2, sl
 8011572:	4621      	mov	r1, r4
 8011574:	4798      	blx	r3
 8011576:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8011578:	f8c8 0008 	str.w	r0, [r8, #8]
 801157c:	689b      	ldr	r3, [r3, #8]
 801157e:	2b00      	cmp	r3, #0
 8011580:	f000 80ac 	beq.w	80116dc <rcl_wait_set_resize+0x1d4>
 8011584:	4622      	mov	r2, r4
 8011586:	4649      	mov	r1, r9
 8011588:	4618      	mov	r0, r3
 801158a:	f006 fc25 	bl	8017dd8 <memset>
 801158e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011590:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8011594:	f04f 0800 	mov.w	r8, #0
 8011598:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 801159c:	f8c5 800c 	str.w	r8, [r5, #12]
 80115a0:	f8c4 800c 	str.w	r8, [r4, #12]
 80115a4:	2e00      	cmp	r6, #0
 80115a6:	f040 80a4 	bne.w	80116f2 <rcl_wait_set_resize+0x1ea>
 80115aa:	68a8      	ldr	r0, [r5, #8]
 80115ac:	b128      	cbz	r0, 80115ba <rcl_wait_set_resize+0xb2>
 80115ae:	4649      	mov	r1, r9
 80115b0:	4790      	blx	r2
 80115b2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80115b4:	60ae      	str	r6, [r5, #8]
 80115b6:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80115ba:	f04f 0800 	mov.w	r8, #0
 80115be:	19f6      	adds	r6, r6, r7
 80115c0:	f8c4 8010 	str.w	r8, [r4, #16]
 80115c4:	f040 80ac 	bne.w	8011720 <rcl_wait_set_resize+0x218>
 80115c8:	6960      	ldr	r0, [r4, #20]
 80115ca:	b130      	cbz	r0, 80115da <rcl_wait_set_resize+0xd2>
 80115cc:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80115ce:	4649      	mov	r1, r9
 80115d0:	4798      	blx	r3
 80115d2:	6166      	str	r6, [r4, #20]
 80115d4:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80115d6:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80115da:	2600      	movs	r6, #0
 80115dc:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 80115e0:	616e      	str	r6, [r5, #20]
 80115e2:	6426      	str	r6, [r4, #64]	@ 0x40
 80115e4:	2f00      	cmp	r7, #0
 80115e6:	f040 80ad 	bne.w	8011744 <rcl_wait_set_resize+0x23c>
 80115ea:	6928      	ldr	r0, [r5, #16]
 80115ec:	b138      	cbz	r0, 80115fe <rcl_wait_set_resize+0xf6>
 80115ee:	4649      	mov	r1, r9
 80115f0:	47d0      	blx	sl
 80115f2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80115f4:	612f      	str	r7, [r5, #16]
 80115f6:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 80115fa:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80115fe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011600:	2600      	movs	r6, #0
 8011602:	61ee      	str	r6, [r5, #28]
 8011604:	61a6      	str	r6, [r4, #24]
 8011606:	2b00      	cmp	r3, #0
 8011608:	f040 80af 	bne.w	801176a <rcl_wait_set_resize+0x262>
 801160c:	69a8      	ldr	r0, [r5, #24]
 801160e:	b120      	cbz	r0, 801161a <rcl_wait_set_resize+0x112>
 8011610:	4649      	mov	r1, r9
 8011612:	47d0      	blx	sl
 8011614:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011616:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011618:	61ab      	str	r3, [r5, #24]
 801161a:	6a20      	ldr	r0, [r4, #32]
 801161c:	b128      	cbz	r0, 801162a <rcl_wait_set_resize+0x122>
 801161e:	4649      	mov	r1, r9
 8011620:	47d0      	blx	sl
 8011622:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011624:	2300      	movs	r3, #0
 8011626:	e9c4 3307 	strd	r3, r3, [r4, #28]
 801162a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801162c:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 801162e:	2600      	movs	r6, #0
 8011630:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8011634:	626e      	str	r6, [r5, #36]	@ 0x24
 8011636:	6266      	str	r6, [r4, #36]	@ 0x24
 8011638:	2b00      	cmp	r3, #0
 801163a:	f000 80b6 	beq.w	80117aa <rcl_wait_set_resize+0x2a2>
 801163e:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8011642:	6a28      	ldr	r0, [r5, #32]
 8011644:	463a      	mov	r2, r7
 8011646:	4651      	mov	r1, sl
 8011648:	47c8      	blx	r9
 801164a:	6228      	str	r0, [r5, #32]
 801164c:	2800      	cmp	r0, #0
 801164e:	d04c      	beq.n	80116ea <rcl_wait_set_resize+0x1e2>
 8011650:	4652      	mov	r2, sl
 8011652:	4631      	mov	r1, r6
 8011654:	f006 fbc0 	bl	8017dd8 <memset>
 8011658:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801165a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801165c:	626b      	str	r3, [r5, #36]	@ 0x24
 801165e:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8011660:	62a6      	str	r6, [r4, #40]	@ 0x28
 8011662:	463a      	mov	r2, r7
 8011664:	4651      	mov	r1, sl
 8011666:	47c8      	blx	r9
 8011668:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801166a:	62e0      	str	r0, [r4, #44]	@ 0x2c
 801166c:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 801166e:	2c00      	cmp	r4, #0
 8011670:	f000 80f0 	beq.w	8011854 <rcl_wait_set_resize+0x34c>
 8011674:	4620      	mov	r0, r4
 8011676:	4652      	mov	r2, sl
 8011678:	4631      	mov	r1, r6
 801167a:	f006 fbad 	bl	8017dd8 <memset>
 801167e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011680:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011682:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8011684:	2600      	movs	r6, #0
 8011686:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 801168a:	62ee      	str	r6, [r5, #44]	@ 0x2c
 801168c:	6326      	str	r6, [r4, #48]	@ 0x30
 801168e:	2b00      	cmp	r3, #0
 8011690:	f040 809d 	bne.w	80117ce <rcl_wait_set_resize+0x2c6>
 8011694:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8011696:	b120      	cbz	r0, 80116a2 <rcl_wait_set_resize+0x19a>
 8011698:	4639      	mov	r1, r7
 801169a:	47c0      	blx	r8
 801169c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801169e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80116a0:	62ab      	str	r3, [r5, #40]	@ 0x28
 80116a2:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80116a4:	b310      	cbz	r0, 80116ec <rcl_wait_set_resize+0x1e4>
 80116a6:	4639      	mov	r1, r7
 80116a8:	47c0      	blx	r8
 80116aa:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80116ac:	2000      	movs	r0, #0
 80116ae:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 80116b2:	b003      	add	sp, #12
 80116b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116b8:	6800      	ldr	r0, [r0, #0]
 80116ba:	b120      	cbz	r0, 80116c6 <rcl_wait_set_resize+0x1be>
 80116bc:	4651      	mov	r1, sl
 80116be:	47d8      	blx	fp
 80116c0:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80116c2:	f8c5 8000 	str.w	r8, [r5]
 80116c6:	68a0      	ldr	r0, [r4, #8]
 80116c8:	2800      	cmp	r0, #0
 80116ca:	f43f af61 	beq.w	8011590 <rcl_wait_set_resize+0x88>
 80116ce:	4651      	mov	r1, sl
 80116d0:	47d8      	blx	fp
 80116d2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80116d4:	2300      	movs	r3, #0
 80116d6:	e9c4 3301 	strd	r3, r3, [r4, #4]
 80116da:	e759      	b.n	8011590 <rcl_wait_set_resize+0x88>
 80116dc:	6828      	ldr	r0, [r5, #0]
 80116de:	9301      	str	r3, [sp, #4]
 80116e0:	4651      	mov	r1, sl
 80116e2:	47d8      	blx	fp
 80116e4:	9b01      	ldr	r3, [sp, #4]
 80116e6:	e9c5 3300 	strd	r3, r3, [r5]
 80116ea:	200a      	movs	r0, #10
 80116ec:	b003      	add	sp, #12
 80116ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116f2:	00b4      	lsls	r4, r6, #2
 80116f4:	68a8      	ldr	r0, [r5, #8]
 80116f6:	464a      	mov	r2, r9
 80116f8:	4621      	mov	r1, r4
 80116fa:	4798      	blx	r3
 80116fc:	60a8      	str	r0, [r5, #8]
 80116fe:	2800      	cmp	r0, #0
 8011700:	d0f3      	beq.n	80116ea <rcl_wait_set_resize+0x1e2>
 8011702:	4622      	mov	r2, r4
 8011704:	4641      	mov	r1, r8
 8011706:	f006 fb67 	bl	8017dd8 <memset>
 801170a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801170c:	60ee      	str	r6, [r5, #12]
 801170e:	f04f 0800 	mov.w	r8, #0
 8011712:	19f6      	adds	r6, r6, r7
 8011714:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8011718:	f8c4 8010 	str.w	r8, [r4, #16]
 801171c:	f43f af54 	beq.w	80115c8 <rcl_wait_set_resize+0xc0>
 8011720:	00b6      	lsls	r6, r6, #2
 8011722:	464a      	mov	r2, r9
 8011724:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8011726:	6960      	ldr	r0, [r4, #20]
 8011728:	4631      	mov	r1, r6
 801172a:	4798      	blx	r3
 801172c:	4681      	mov	r9, r0
 801172e:	6160      	str	r0, [r4, #20]
 8011730:	2800      	cmp	r0, #0
 8011732:	d076      	beq.n	8011822 <rcl_wait_set_resize+0x31a>
 8011734:	4632      	mov	r2, r6
 8011736:	4641      	mov	r1, r8
 8011738:	f006 fb4e 	bl	8017dd8 <memset>
 801173c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801173e:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8011742:	e74a      	b.n	80115da <rcl_wait_set_resize+0xd2>
 8011744:	00bc      	lsls	r4, r7, #2
 8011746:	6928      	ldr	r0, [r5, #16]
 8011748:	464a      	mov	r2, r9
 801174a:	4621      	mov	r1, r4
 801174c:	47c0      	blx	r8
 801174e:	6128      	str	r0, [r5, #16]
 8011750:	2800      	cmp	r0, #0
 8011752:	d0ca      	beq.n	80116ea <rcl_wait_set_resize+0x1e2>
 8011754:	4622      	mov	r2, r4
 8011756:	4631      	mov	r1, r6
 8011758:	f006 fb3e 	bl	8017dd8 <memset>
 801175c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801175e:	616f      	str	r7, [r5, #20]
 8011760:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8011764:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8011768:	e749      	b.n	80115fe <rcl_wait_set_resize+0xf6>
 801176a:	009c      	lsls	r4, r3, #2
 801176c:	69a8      	ldr	r0, [r5, #24]
 801176e:	464a      	mov	r2, r9
 8011770:	4621      	mov	r1, r4
 8011772:	47c0      	blx	r8
 8011774:	61a8      	str	r0, [r5, #24]
 8011776:	2800      	cmp	r0, #0
 8011778:	d0b7      	beq.n	80116ea <rcl_wait_set_resize+0x1e2>
 801177a:	4622      	mov	r2, r4
 801177c:	4631      	mov	r1, r6
 801177e:	f006 fb2b 	bl	8017dd8 <memset>
 8011782:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 8011784:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011786:	61eb      	str	r3, [r5, #28]
 8011788:	6a38      	ldr	r0, [r7, #32]
 801178a:	61fe      	str	r6, [r7, #28]
 801178c:	464a      	mov	r2, r9
 801178e:	4621      	mov	r1, r4
 8011790:	47c0      	blx	r8
 8011792:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8011794:	6238      	str	r0, [r7, #32]
 8011796:	6a1f      	ldr	r7, [r3, #32]
 8011798:	2f00      	cmp	r7, #0
 801179a:	d054      	beq.n	8011846 <rcl_wait_set_resize+0x33e>
 801179c:	4622      	mov	r2, r4
 801179e:	4631      	mov	r1, r6
 80117a0:	4638      	mov	r0, r7
 80117a2:	f006 fb19 	bl	8017dd8 <memset>
 80117a6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80117a8:	e73f      	b.n	801162a <rcl_wait_set_resize+0x122>
 80117aa:	6a28      	ldr	r0, [r5, #32]
 80117ac:	b120      	cbz	r0, 80117b8 <rcl_wait_set_resize+0x2b0>
 80117ae:	4639      	mov	r1, r7
 80117b0:	47c0      	blx	r8
 80117b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80117b4:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80117b6:	622b      	str	r3, [r5, #32]
 80117b8:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80117ba:	2800      	cmp	r0, #0
 80117bc:	f43f af60 	beq.w	8011680 <rcl_wait_set_resize+0x178>
 80117c0:	4639      	mov	r1, r7
 80117c2:	47c0      	blx	r8
 80117c4:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80117c6:	2300      	movs	r3, #0
 80117c8:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 80117cc:	e758      	b.n	8011680 <rcl_wait_set_resize+0x178>
 80117ce:	009c      	lsls	r4, r3, #2
 80117d0:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 80117d2:	463a      	mov	r2, r7
 80117d4:	4621      	mov	r1, r4
 80117d6:	47c8      	blx	r9
 80117d8:	62a8      	str	r0, [r5, #40]	@ 0x28
 80117da:	2800      	cmp	r0, #0
 80117dc:	d085      	beq.n	80116ea <rcl_wait_set_resize+0x1e2>
 80117de:	4622      	mov	r2, r4
 80117e0:	4631      	mov	r1, r6
 80117e2:	f006 faf9 	bl	8017dd8 <memset>
 80117e6:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 80117ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80117ec:	62eb      	str	r3, [r5, #44]	@ 0x2c
 80117ee:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 80117f2:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 80117f6:	463a      	mov	r2, r7
 80117f8:	4621      	mov	r1, r4
 80117fa:	47c8      	blx	r9
 80117fc:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80117fe:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 8011802:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011804:	b36b      	cbz	r3, 8011862 <rcl_wait_set_resize+0x35a>
 8011806:	4622      	mov	r2, r4
 8011808:	4631      	mov	r1, r6
 801180a:	4618      	mov	r0, r3
 801180c:	f006 fae4 	bl	8017dd8 <memset>
 8011810:	4630      	mov	r0, r6
 8011812:	b003      	add	sp, #12
 8011814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011818:	200b      	movs	r0, #11
 801181a:	4770      	bx	lr
 801181c:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011820:	e764      	b.n	80116ec <rcl_wait_set_resize+0x1e4>
 8011822:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8011824:	68a8      	ldr	r0, [r5, #8]
 8011826:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8011828:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801182a:	4798      	blx	r3
 801182c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801182e:	6928      	ldr	r0, [r5, #16]
 8011830:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011832:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8011834:	f8c5 900c 	str.w	r9, [r5, #12]
 8011838:	f8c5 9008 	str.w	r9, [r5, #8]
 801183c:	4790      	blx	r2
 801183e:	e9c5 9904 	strd	r9, r9, [r5, #16]
 8011842:	200a      	movs	r0, #10
 8011844:	e752      	b.n	80116ec <rcl_wait_set_resize+0x1e4>
 8011846:	69a8      	ldr	r0, [r5, #24]
 8011848:	4649      	mov	r1, r9
 801184a:	47d0      	blx	sl
 801184c:	e9c5 7706 	strd	r7, r7, [r5, #24]
 8011850:	200a      	movs	r0, #10
 8011852:	e74b      	b.n	80116ec <rcl_wait_set_resize+0x1e4>
 8011854:	6a28      	ldr	r0, [r5, #32]
 8011856:	4639      	mov	r1, r7
 8011858:	47c0      	blx	r8
 801185a:	e9c5 4408 	strd	r4, r4, [r5, #32]
 801185e:	200a      	movs	r0, #10
 8011860:	e744      	b.n	80116ec <rcl_wait_set_resize+0x1e4>
 8011862:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8011864:	9301      	str	r3, [sp, #4]
 8011866:	4639      	mov	r1, r7
 8011868:	47c0      	blx	r8
 801186a:	9b01      	ldr	r3, [sp, #4]
 801186c:	200a      	movs	r0, #10
 801186e:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8011872:	e73b      	b.n	80116ec <rcl_wait_set_resize+0x1e4>

08011874 <rcl_wait_set_init>:
 8011874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011878:	b084      	sub	sp, #16
 801187a:	4604      	mov	r4, r0
 801187c:	a810      	add	r0, sp, #64	@ 0x40
 801187e:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 8011882:	460f      	mov	r7, r1
 8011884:	4690      	mov	r8, r2
 8011886:	4699      	mov	r9, r3
 8011888:	f7fa f85a 	bl	800b940 <rcutils_allocator_is_valid>
 801188c:	2800      	cmp	r0, #0
 801188e:	d06b      	beq.n	8011968 <rcl_wait_set_init+0xf4>
 8011890:	2c00      	cmp	r4, #0
 8011892:	d069      	beq.n	8011968 <rcl_wait_set_init+0xf4>
 8011894:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011896:	b125      	cbz	r5, 80118a2 <rcl_wait_set_init+0x2e>
 8011898:	2564      	movs	r5, #100	@ 0x64
 801189a:	4628      	mov	r0, r5
 801189c:	b004      	add	sp, #16
 801189e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80118a2:	f1ba 0f00 	cmp.w	sl, #0
 80118a6:	d05f      	beq.n	8011968 <rcl_wait_set_init+0xf4>
 80118a8:	4650      	mov	r0, sl
 80118aa:	f7fe fd75 	bl	8010398 <rcl_context_is_valid>
 80118ae:	2800      	cmp	r0, #0
 80118b0:	d067      	beq.n	8011982 <rcl_wait_set_init+0x10e>
 80118b2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80118b4:	9914      	ldr	r1, [sp, #80]	@ 0x50
 80118b6:	205c      	movs	r0, #92	@ 0x5c
 80118b8:	4798      	blx	r3
 80118ba:	6320      	str	r0, [r4, #48]	@ 0x30
 80118bc:	2800      	cmp	r0, #0
 80118be:	d062      	beq.n	8011986 <rcl_wait_set_init+0x112>
 80118c0:	4629      	mov	r1, r5
 80118c2:	225c      	movs	r2, #92	@ 0x5c
 80118c4:	f006 fa88 	bl	8017dd8 <memset>
 80118c8:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 80118cc:	eb03 0e02 	add.w	lr, r3, r2
 80118d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80118d2:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 80118d4:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 80118d8:	449e      	add	lr, r3
 80118da:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80118de:	e9c6 5501 	strd	r5, r5, [r6, #4]
 80118e2:	e9c6 5504 	strd	r5, r5, [r6, #16]
 80118e6:	e9c6 5507 	strd	r5, r5, [r6, #28]
 80118ea:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 80118ee:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 80118f2:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 80118f6:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 80118fa:	f8da a000 	ldr.w	sl, [sl]
 80118fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011900:	44c6      	add	lr, r8
 8011902:	f8dc 3000 	ldr.w	r3, [ip]
 8011906:	602b      	str	r3, [r5, #0]
 8011908:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 801190c:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 8011910:	f002 f95a 	bl	8013bc8 <rmw_create_wait_set>
 8011914:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011916:	63f0      	str	r0, [r6, #60]	@ 0x3c
 8011918:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801191a:	b350      	cbz	r0, 8011972 <rcl_wait_set_init+0xfe>
 801191c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801191e:	9302      	str	r3, [sp, #8]
 8011920:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011922:	9301      	str	r3, [sp, #4]
 8011924:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011926:	9300      	str	r3, [sp, #0]
 8011928:	4642      	mov	r2, r8
 801192a:	464b      	mov	r3, r9
 801192c:	4639      	mov	r1, r7
 801192e:	4620      	mov	r0, r4
 8011930:	f7ff fdea 	bl	8011508 <rcl_wait_set_resize>
 8011934:	4605      	mov	r5, r0
 8011936:	2800      	cmp	r0, #0
 8011938:	d0af      	beq.n	801189a <rcl_wait_set_init+0x26>
 801193a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801193c:	bb2b      	cbnz	r3, 801198a <rcl_wait_set_init+0x116>
 801193e:	2600      	movs	r6, #0
 8011940:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8011944:	9600      	str	r6, [sp, #0]
 8011946:	4633      	mov	r3, r6
 8011948:	4632      	mov	r2, r6
 801194a:	4631      	mov	r1, r6
 801194c:	4620      	mov	r0, r4
 801194e:	f7ff fddb 	bl	8011508 <rcl_wait_set_resize>
 8011952:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8011954:	2800      	cmp	r0, #0
 8011956:	d0a0      	beq.n	801189a <rcl_wait_set_init+0x26>
 8011958:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 801195a:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 801195c:	4798      	blx	r3
 801195e:	4628      	mov	r0, r5
 8011960:	6326      	str	r6, [r4, #48]	@ 0x30
 8011962:	b004      	add	sp, #16
 8011964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011968:	250b      	movs	r5, #11
 801196a:	4628      	mov	r0, r5
 801196c:	b004      	add	sp, #16
 801196e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011972:	2501      	movs	r5, #1
 8011974:	f002 f932 	bl	8013bdc <rmw_destroy_wait_set>
 8011978:	2800      	cmp	r0, #0
 801197a:	bf18      	it	ne
 801197c:	f44f 7561 	movne.w	r5, #900	@ 0x384
 8011980:	e7dd      	b.n	801193e <rcl_wait_set_init+0xca>
 8011982:	2565      	movs	r5, #101	@ 0x65
 8011984:	e789      	b.n	801189a <rcl_wait_set_init+0x26>
 8011986:	250a      	movs	r5, #10
 8011988:	e787      	b.n	801189a <rcl_wait_set_init+0x26>
 801198a:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801198c:	e7f2      	b.n	8011974 <rcl_wait_set_init+0x100>
 801198e:	bf00      	nop

08011990 <rcl_wait_set_add_guard_condition>:
 8011990:	b318      	cbz	r0, 80119da <rcl_wait_set_add_guard_condition+0x4a>
 8011992:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8011994:	b570      	push	{r4, r5, r6, lr}
 8011996:	4604      	mov	r4, r0
 8011998:	b30b      	cbz	r3, 80119de <rcl_wait_set_add_guard_condition+0x4e>
 801199a:	b319      	cbz	r1, 80119e4 <rcl_wait_set_add_guard_condition+0x54>
 801199c:	68dd      	ldr	r5, [r3, #12]
 801199e:	68c0      	ldr	r0, [r0, #12]
 80119a0:	4285      	cmp	r5, r0
 80119a2:	d217      	bcs.n	80119d4 <rcl_wait_set_add_guard_condition+0x44>
 80119a4:	68a0      	ldr	r0, [r4, #8]
 80119a6:	1c6e      	adds	r6, r5, #1
 80119a8:	60de      	str	r6, [r3, #12]
 80119aa:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80119ae:	b102      	cbz	r2, 80119b2 <rcl_wait_set_add_guard_condition+0x22>
 80119b0:	6015      	str	r5, [r2, #0]
 80119b2:	4608      	mov	r0, r1
 80119b4:	f7fe fe02 	bl	80105bc <rcl_guard_condition_get_rmw_handle>
 80119b8:	b150      	cbz	r0, 80119d0 <rcl_wait_set_add_guard_condition+0x40>
 80119ba:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80119bc:	6842      	ldr	r2, [r0, #4]
 80119be:	695b      	ldr	r3, [r3, #20]
 80119c0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80119c4:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80119c6:	6913      	ldr	r3, [r2, #16]
 80119c8:	3301      	adds	r3, #1
 80119ca:	2000      	movs	r0, #0
 80119cc:	6113      	str	r3, [r2, #16]
 80119ce:	bd70      	pop	{r4, r5, r6, pc}
 80119d0:	2001      	movs	r0, #1
 80119d2:	bd70      	pop	{r4, r5, r6, pc}
 80119d4:	f240 3086 	movw	r0, #902	@ 0x386
 80119d8:	bd70      	pop	{r4, r5, r6, pc}
 80119da:	200b      	movs	r0, #11
 80119dc:	4770      	bx	lr
 80119de:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80119e2:	bd70      	pop	{r4, r5, r6, pc}
 80119e4:	200b      	movs	r0, #11
 80119e6:	bd70      	pop	{r4, r5, r6, pc}

080119e8 <rcl_wait_set_add_timer>:
 80119e8:	b328      	cbz	r0, 8011a36 <rcl_wait_set_add_timer+0x4e>
 80119ea:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80119ec:	b570      	push	{r4, r5, r6, lr}
 80119ee:	4604      	mov	r4, r0
 80119f0:	b31b      	cbz	r3, 8011a3a <rcl_wait_set_add_timer+0x52>
 80119f2:	b329      	cbz	r1, 8011a40 <rcl_wait_set_add_timer+0x58>
 80119f4:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 80119f6:	6965      	ldr	r5, [r4, #20]
 80119f8:	42a8      	cmp	r0, r5
 80119fa:	d219      	bcs.n	8011a30 <rcl_wait_set_add_timer+0x48>
 80119fc:	6925      	ldr	r5, [r4, #16]
 80119fe:	1c46      	adds	r6, r0, #1
 8011a00:	641e      	str	r6, [r3, #64]	@ 0x40
 8011a02:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8011a06:	b102      	cbz	r2, 8011a0a <rcl_wait_set_add_timer+0x22>
 8011a08:	6010      	str	r0, [r2, #0]
 8011a0a:	4608      	mov	r0, r1
 8011a0c:	f7ff fba6 	bl	801115c <rcl_timer_get_guard_condition>
 8011a10:	b168      	cbz	r0, 8011a2e <rcl_wait_set_add_timer+0x46>
 8011a12:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8011a14:	68e3      	ldr	r3, [r4, #12]
 8011a16:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8011a18:	3b01      	subs	r3, #1
 8011a1a:	441d      	add	r5, r3
 8011a1c:	f7fe fdce 	bl	80105bc <rcl_guard_condition_get_rmw_handle>
 8011a20:	b180      	cbz	r0, 8011a44 <rcl_wait_set_add_timer+0x5c>
 8011a22:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011a24:	6842      	ldr	r2, [r0, #4]
 8011a26:	695b      	ldr	r3, [r3, #20]
 8011a28:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011a2c:	2000      	movs	r0, #0
 8011a2e:	bd70      	pop	{r4, r5, r6, pc}
 8011a30:	f240 3086 	movw	r0, #902	@ 0x386
 8011a34:	bd70      	pop	{r4, r5, r6, pc}
 8011a36:	200b      	movs	r0, #11
 8011a38:	4770      	bx	lr
 8011a3a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011a3e:	bd70      	pop	{r4, r5, r6, pc}
 8011a40:	200b      	movs	r0, #11
 8011a42:	bd70      	pop	{r4, r5, r6, pc}
 8011a44:	2001      	movs	r0, #1
 8011a46:	bd70      	pop	{r4, r5, r6, pc}

08011a48 <rcl_wait_set_add_client>:
 8011a48:	b318      	cbz	r0, 8011a92 <rcl_wait_set_add_client+0x4a>
 8011a4a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8011a4c:	b570      	push	{r4, r5, r6, lr}
 8011a4e:	4604      	mov	r4, r0
 8011a50:	b30b      	cbz	r3, 8011a96 <rcl_wait_set_add_client+0x4e>
 8011a52:	b319      	cbz	r1, 8011a9c <rcl_wait_set_add_client+0x54>
 8011a54:	699d      	ldr	r5, [r3, #24]
 8011a56:	69c0      	ldr	r0, [r0, #28]
 8011a58:	4285      	cmp	r5, r0
 8011a5a:	d217      	bcs.n	8011a8c <rcl_wait_set_add_client+0x44>
 8011a5c:	69a0      	ldr	r0, [r4, #24]
 8011a5e:	1c6e      	adds	r6, r5, #1
 8011a60:	619e      	str	r6, [r3, #24]
 8011a62:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8011a66:	b102      	cbz	r2, 8011a6a <rcl_wait_set_add_client+0x22>
 8011a68:	6015      	str	r5, [r2, #0]
 8011a6a:	4608      	mov	r0, r1
 8011a6c:	f7fe fbe8 	bl	8010240 <rcl_client_get_rmw_handle>
 8011a70:	b150      	cbz	r0, 8011a88 <rcl_wait_set_add_client+0x40>
 8011a72:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011a74:	6842      	ldr	r2, [r0, #4]
 8011a76:	6a1b      	ldr	r3, [r3, #32]
 8011a78:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011a7c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8011a7e:	69d3      	ldr	r3, [r2, #28]
 8011a80:	3301      	adds	r3, #1
 8011a82:	2000      	movs	r0, #0
 8011a84:	61d3      	str	r3, [r2, #28]
 8011a86:	bd70      	pop	{r4, r5, r6, pc}
 8011a88:	2001      	movs	r0, #1
 8011a8a:	bd70      	pop	{r4, r5, r6, pc}
 8011a8c:	f240 3086 	movw	r0, #902	@ 0x386
 8011a90:	bd70      	pop	{r4, r5, r6, pc}
 8011a92:	200b      	movs	r0, #11
 8011a94:	4770      	bx	lr
 8011a96:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011a9a:	bd70      	pop	{r4, r5, r6, pc}
 8011a9c:	200b      	movs	r0, #11
 8011a9e:	bd70      	pop	{r4, r5, r6, pc}

08011aa0 <rcl_wait_set_add_service>:
 8011aa0:	b318      	cbz	r0, 8011aea <rcl_wait_set_add_service+0x4a>
 8011aa2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8011aa4:	b570      	push	{r4, r5, r6, lr}
 8011aa6:	4604      	mov	r4, r0
 8011aa8:	b30b      	cbz	r3, 8011aee <rcl_wait_set_add_service+0x4e>
 8011aaa:	b319      	cbz	r1, 8011af4 <rcl_wait_set_add_service+0x54>
 8011aac:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8011aae:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8011ab0:	4285      	cmp	r5, r0
 8011ab2:	d217      	bcs.n	8011ae4 <rcl_wait_set_add_service+0x44>
 8011ab4:	6a20      	ldr	r0, [r4, #32]
 8011ab6:	1c6e      	adds	r6, r5, #1
 8011ab8:	625e      	str	r6, [r3, #36]	@ 0x24
 8011aba:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8011abe:	b102      	cbz	r2, 8011ac2 <rcl_wait_set_add_service+0x22>
 8011ac0:	6015      	str	r5, [r2, #0]
 8011ac2:	4608      	mov	r0, r1
 8011ac4:	f7ff f948 	bl	8010d58 <rcl_service_get_rmw_handle>
 8011ac8:	b150      	cbz	r0, 8011ae0 <rcl_wait_set_add_service+0x40>
 8011aca:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011acc:	6842      	ldr	r2, [r0, #4]
 8011ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011ad0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011ad4:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8011ad6:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8011ad8:	3301      	adds	r3, #1
 8011ada:	2000      	movs	r0, #0
 8011adc:	6293      	str	r3, [r2, #40]	@ 0x28
 8011ade:	bd70      	pop	{r4, r5, r6, pc}
 8011ae0:	2001      	movs	r0, #1
 8011ae2:	bd70      	pop	{r4, r5, r6, pc}
 8011ae4:	f240 3086 	movw	r0, #902	@ 0x386
 8011ae8:	bd70      	pop	{r4, r5, r6, pc}
 8011aea:	200b      	movs	r0, #11
 8011aec:	4770      	bx	lr
 8011aee:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011af2:	bd70      	pop	{r4, r5, r6, pc}
 8011af4:	200b      	movs	r0, #11
 8011af6:	bd70      	pop	{r4, r5, r6, pc}

08011af8 <rcl_wait>:
 8011af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011afc:	ed2d 8b02 	vpush	{d8}
 8011b00:	b08d      	sub	sp, #52	@ 0x34
 8011b02:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011b06:	2800      	cmp	r0, #0
 8011b08:	f000 8143 	beq.w	8011d92 <rcl_wait+0x29a>
 8011b0c:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8011b0e:	4605      	mov	r5, r0
 8011b10:	2e00      	cmp	r6, #0
 8011b12:	f000 8112 	beq.w	8011d3a <rcl_wait+0x242>
 8011b16:	6843      	ldr	r3, [r0, #4]
 8011b18:	b983      	cbnz	r3, 8011b3c <rcl_wait+0x44>
 8011b1a:	68eb      	ldr	r3, [r5, #12]
 8011b1c:	b973      	cbnz	r3, 8011b3c <rcl_wait+0x44>
 8011b1e:	696b      	ldr	r3, [r5, #20]
 8011b20:	b963      	cbnz	r3, 8011b3c <rcl_wait+0x44>
 8011b22:	69eb      	ldr	r3, [r5, #28]
 8011b24:	b953      	cbnz	r3, 8011b3c <rcl_wait+0x44>
 8011b26:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8011b28:	b943      	cbnz	r3, 8011b3c <rcl_wait+0x44>
 8011b2a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8011b2c:	b933      	cbnz	r3, 8011b3c <rcl_wait+0x44>
 8011b2e:	f240 3085 	movw	r0, #901	@ 0x385
 8011b32:	b00d      	add	sp, #52	@ 0x34
 8011b34:	ecbd 8b02 	vpop	{d8}
 8011b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b3c:	9b04      	ldr	r3, [sp, #16]
 8011b3e:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8011b40:	2b01      	cmp	r3, #1
 8011b42:	9b05      	ldr	r3, [sp, #20]
 8011b44:	f173 0300 	sbcs.w	r3, r3, #0
 8011b48:	f2c0 80f0 	blt.w	8011d2c <rcl_wait+0x234>
 8011b4c:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8011b50:	4643      	mov	r3, r8
 8011b52:	2a00      	cmp	r2, #0
 8011b54:	f000 8133 	beq.w	8011dbe <rcl_wait+0x2c6>
 8011b58:	2400      	movs	r4, #0
 8011b5a:	4613      	mov	r3, r2
 8011b5c:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 8011dd0 <rcl_wait+0x2d8>
 8011b60:	46a2      	mov	sl, r4
 8011b62:	46a3      	mov	fp, r4
 8011b64:	f240 3921 	movw	r9, #801	@ 0x321
 8011b68:	4632      	mov	r2, r6
 8011b6a:	e014      	b.n	8011b96 <rcl_wait+0x9e>
 8011b6c:	2800      	cmp	r0, #0
 8011b6e:	d1e0      	bne.n	8011b32 <rcl_wait+0x3a>
 8011b70:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8011b74:	4542      	cmp	r2, r8
 8011b76:	eb73 0107 	sbcs.w	r1, r3, r7
 8011b7a:	da03      	bge.n	8011b84 <rcl_wait+0x8c>
 8011b7c:	4690      	mov	r8, r2
 8011b7e:	461f      	mov	r7, r3
 8011b80:	f04f 0b01 	mov.w	fp, #1
 8011b84:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8011b86:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8011b88:	3401      	adds	r4, #1
 8011b8a:	f14a 0a00 	adc.w	sl, sl, #0
 8011b8e:	429c      	cmp	r4, r3
 8011b90:	f17a 0100 	sbcs.w	r1, sl, #0
 8011b94:	d228      	bcs.n	8011be8 <rcl_wait+0xf0>
 8011b96:	6928      	ldr	r0, [r5, #16]
 8011b98:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8011b9c:	a908      	add	r1, sp, #32
 8011b9e:	00a6      	lsls	r6, r4, #2
 8011ba0:	2800      	cmp	r0, #0
 8011ba2:	d0f1      	beq.n	8011b88 <rcl_wait+0x90>
 8011ba4:	68eb      	ldr	r3, [r5, #12]
 8011ba6:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8011baa:	4423      	add	r3, r4
 8011bac:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8011bb0:	f1be 0f00 	cmp.w	lr, #0
 8011bb4:	d006      	beq.n	8011bc4 <rcl_wait+0xcc>
 8011bb6:	6913      	ldr	r3, [r2, #16]
 8011bb8:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8011bbc:	3301      	adds	r3, #1
 8011bbe:	6113      	str	r3, [r2, #16]
 8011bc0:	692b      	ldr	r3, [r5, #16]
 8011bc2:	5998      	ldr	r0, [r3, r6]
 8011bc4:	ed8d 8b08 	vstr	d8, [sp, #32]
 8011bc8:	f7ff fa96 	bl	80110f8 <rcl_timer_get_time_until_next_call>
 8011bcc:	4548      	cmp	r0, r9
 8011bce:	d1cd      	bne.n	8011b6c <rcl_wait+0x74>
 8011bd0:	692b      	ldr	r3, [r5, #16]
 8011bd2:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8011bd4:	2100      	movs	r1, #0
 8011bd6:	5199      	str	r1, [r3, r6]
 8011bd8:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8011bda:	3401      	adds	r4, #1
 8011bdc:	f14a 0a00 	adc.w	sl, sl, #0
 8011be0:	429c      	cmp	r4, r3
 8011be2:	f17a 0100 	sbcs.w	r1, sl, #0
 8011be6:	d3d6      	bcc.n	8011b96 <rcl_wait+0x9e>
 8011be8:	4616      	mov	r6, r2
 8011bea:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8011bee:	4313      	orrs	r3, r2
 8011bf0:	46d9      	mov	r9, fp
 8011bf2:	f040 80a9 	bne.w	8011d48 <rcl_wait+0x250>
 8011bf6:	2300      	movs	r3, #0
 8011bf8:	2200      	movs	r2, #0
 8011bfa:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011bfe:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8011c02:	ab08      	add	r3, sp, #32
 8011c04:	9302      	str	r3, [sp, #8]
 8011c06:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 8011c08:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 8011c0c:	e9cd 3200 	strd	r3, r2, [sp]
 8011c10:	f106 0110 	add.w	r1, r6, #16
 8011c14:	f106 031c 	add.w	r3, r6, #28
 8011c18:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 8011c1c:	1d30      	adds	r0, r6, #4
 8011c1e:	f001 fe5b 	bl	80138d8 <rmw_wait>
 8011c22:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8011c24:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011c26:	4680      	mov	r8, r0
 8011c28:	b1ca      	cbz	r2, 8011c5e <rcl_wait+0x166>
 8011c2a:	2400      	movs	r4, #0
 8011c2c:	4627      	mov	r7, r4
 8011c2e:	692a      	ldr	r2, [r5, #16]
 8011c30:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8011c34:	f10d 011f 	add.w	r1, sp, #31
 8011c38:	00a6      	lsls	r6, r4, #2
 8011c3a:	b160      	cbz	r0, 8011c56 <rcl_wait+0x15e>
 8011c3c:	f88d 701f 	strb.w	r7, [sp, #31]
 8011c40:	f7ff fa20 	bl	8011084 <rcl_timer_is_ready>
 8011c44:	2800      	cmp	r0, #0
 8011c46:	f47f af74 	bne.w	8011b32 <rcl_wait+0x3a>
 8011c4a:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8011c4e:	b90b      	cbnz	r3, 8011c54 <rcl_wait+0x15c>
 8011c50:	692a      	ldr	r2, [r5, #16]
 8011c52:	5193      	str	r3, [r2, r6]
 8011c54:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8011c56:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011c58:	3401      	adds	r4, #1
 8011c5a:	42a2      	cmp	r2, r4
 8011c5c:	d8e7      	bhi.n	8011c2e <rcl_wait+0x136>
 8011c5e:	f038 0002 	bics.w	r0, r8, #2
 8011c62:	f040 8090 	bne.w	8011d86 <rcl_wait+0x28e>
 8011c66:	686e      	ldr	r6, [r5, #4]
 8011c68:	4602      	mov	r2, r0
 8011c6a:	b91e      	cbnz	r6, 8011c74 <rcl_wait+0x17c>
 8011c6c:	e00d      	b.n	8011c8a <rcl_wait+0x192>
 8011c6e:	3201      	adds	r2, #1
 8011c70:	42b2      	cmp	r2, r6
 8011c72:	d00a      	beq.n	8011c8a <rcl_wait+0x192>
 8011c74:	6899      	ldr	r1, [r3, #8]
 8011c76:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8011c7a:	2900      	cmp	r1, #0
 8011c7c:	d1f7      	bne.n	8011c6e <rcl_wait+0x176>
 8011c7e:	682c      	ldr	r4, [r5, #0]
 8011c80:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8011c84:	3201      	adds	r2, #1
 8011c86:	42b2      	cmp	r2, r6
 8011c88:	d1f4      	bne.n	8011c74 <rcl_wait+0x17c>
 8011c8a:	68ee      	ldr	r6, [r5, #12]
 8011c8c:	2200      	movs	r2, #0
 8011c8e:	b91e      	cbnz	r6, 8011c98 <rcl_wait+0x1a0>
 8011c90:	e00d      	b.n	8011cae <rcl_wait+0x1b6>
 8011c92:	3201      	adds	r2, #1
 8011c94:	42b2      	cmp	r2, r6
 8011c96:	d00a      	beq.n	8011cae <rcl_wait+0x1b6>
 8011c98:	6959      	ldr	r1, [r3, #20]
 8011c9a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8011c9e:	2900      	cmp	r1, #0
 8011ca0:	d1f7      	bne.n	8011c92 <rcl_wait+0x19a>
 8011ca2:	68ac      	ldr	r4, [r5, #8]
 8011ca4:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8011ca8:	3201      	adds	r2, #1
 8011caa:	42b2      	cmp	r2, r6
 8011cac:	d1f4      	bne.n	8011c98 <rcl_wait+0x1a0>
 8011cae:	69ee      	ldr	r6, [r5, #28]
 8011cb0:	2200      	movs	r2, #0
 8011cb2:	b91e      	cbnz	r6, 8011cbc <rcl_wait+0x1c4>
 8011cb4:	e00d      	b.n	8011cd2 <rcl_wait+0x1da>
 8011cb6:	3201      	adds	r2, #1
 8011cb8:	42b2      	cmp	r2, r6
 8011cba:	d00a      	beq.n	8011cd2 <rcl_wait+0x1da>
 8011cbc:	6a19      	ldr	r1, [r3, #32]
 8011cbe:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8011cc2:	2900      	cmp	r1, #0
 8011cc4:	d1f7      	bne.n	8011cb6 <rcl_wait+0x1be>
 8011cc6:	69ac      	ldr	r4, [r5, #24]
 8011cc8:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8011ccc:	3201      	adds	r2, #1
 8011cce:	42b2      	cmp	r2, r6
 8011cd0:	d1f4      	bne.n	8011cbc <rcl_wait+0x1c4>
 8011cd2:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 8011cd4:	2200      	movs	r2, #0
 8011cd6:	b91e      	cbnz	r6, 8011ce0 <rcl_wait+0x1e8>
 8011cd8:	e00d      	b.n	8011cf6 <rcl_wait+0x1fe>
 8011cda:	3201      	adds	r2, #1
 8011cdc:	4296      	cmp	r6, r2
 8011cde:	d00a      	beq.n	8011cf6 <rcl_wait+0x1fe>
 8011ce0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8011ce2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8011ce6:	2900      	cmp	r1, #0
 8011ce8:	d1f7      	bne.n	8011cda <rcl_wait+0x1e2>
 8011cea:	6a2c      	ldr	r4, [r5, #32]
 8011cec:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8011cf0:	3201      	adds	r2, #1
 8011cf2:	4296      	cmp	r6, r2
 8011cf4:	d1f4      	bne.n	8011ce0 <rcl_wait+0x1e8>
 8011cf6:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 8011cf8:	2200      	movs	r2, #0
 8011cfa:	b91e      	cbnz	r6, 8011d04 <rcl_wait+0x20c>
 8011cfc:	e00d      	b.n	8011d1a <rcl_wait+0x222>
 8011cfe:	3201      	adds	r2, #1
 8011d00:	42b2      	cmp	r2, r6
 8011d02:	d00a      	beq.n	8011d1a <rcl_wait+0x222>
 8011d04:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8011d06:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8011d0a:	2900      	cmp	r1, #0
 8011d0c:	d1f7      	bne.n	8011cfe <rcl_wait+0x206>
 8011d0e:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 8011d10:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8011d14:	3201      	adds	r2, #1
 8011d16:	42b2      	cmp	r2, r6
 8011d18:	d1f4      	bne.n	8011d04 <rcl_wait+0x20c>
 8011d1a:	f1b8 0f02 	cmp.w	r8, #2
 8011d1e:	f47f af08 	bne.w	8011b32 <rcl_wait+0x3a>
 8011d22:	464b      	mov	r3, r9
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	bf08      	it	eq
 8011d28:	2002      	moveq	r0, #2
 8011d2a:	e702      	b.n	8011b32 <rcl_wait+0x3a>
 8011d2c:	2a00      	cmp	r2, #0
 8011d2e:	d03a      	beq.n	8011da6 <rcl_wait+0x2ae>
 8011d30:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8011d34:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8011d38:	e70e      	b.n	8011b58 <rcl_wait+0x60>
 8011d3a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011d3e:	b00d      	add	sp, #52	@ 0x34
 8011d40:	ecbd 8b02 	vpop	{d8}
 8011d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d48:	9b04      	ldr	r3, [sp, #16]
 8011d4a:	2b01      	cmp	r3, #1
 8011d4c:	9b05      	ldr	r3, [sp, #20]
 8011d4e:	f173 0300 	sbcs.w	r3, r3, #0
 8011d52:	db24      	blt.n	8011d9e <rcl_wait+0x2a6>
 8011d54:	2f00      	cmp	r7, #0
 8011d56:	bfbc      	itt	lt
 8011d58:	f04f 0800 	movlt.w	r8, #0
 8011d5c:	4647      	movlt	r7, r8
 8011d5e:	a31e      	add	r3, pc, #120	@ (adr r3, 8011dd8 <rcl_wait+0x2e0>)
 8011d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d64:	4640      	mov	r0, r8
 8011d66:	4639      	mov	r1, r7
 8011d68:	f7ee ff4e 	bl	8000c08 <__aeabi_ldivmod>
 8011d6c:	a31a      	add	r3, pc, #104	@ (adr r3, 8011dd8 <rcl_wait+0x2e0>)
 8011d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d72:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011d76:	4640      	mov	r0, r8
 8011d78:	4639      	mov	r1, r7
 8011d7a:	f7ee ff45 	bl	8000c08 <__aeabi_ldivmod>
 8011d7e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8011d82:	ab08      	add	r3, sp, #32
 8011d84:	e73e      	b.n	8011c04 <rcl_wait+0x10c>
 8011d86:	2001      	movs	r0, #1
 8011d88:	b00d      	add	sp, #52	@ 0x34
 8011d8a:	ecbd 8b02 	vpop	{d8}
 8011d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d92:	200b      	movs	r0, #11
 8011d94:	b00d      	add	sp, #52	@ 0x34
 8011d96:	ecbd 8b02 	vpop	{d8}
 8011d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d9e:	465b      	mov	r3, fp
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d1d7      	bne.n	8011d54 <rcl_wait+0x25c>
 8011da4:	e72e      	b.n	8011c04 <rcl_wait+0x10c>
 8011da6:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8011daa:	430b      	orrs	r3, r1
 8011dac:	bf08      	it	eq
 8011dae:	4691      	moveq	r9, r2
 8011db0:	f43f af21 	beq.w	8011bf6 <rcl_wait+0xfe>
 8011db4:	9b04      	ldr	r3, [sp, #16]
 8011db6:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8011dba:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8011dbe:	2b01      	cmp	r3, #1
 8011dc0:	9b05      	ldr	r3, [sp, #20]
 8011dc2:	f173 0300 	sbcs.w	r3, r3, #0
 8011dc6:	f04f 0300 	mov.w	r3, #0
 8011dca:	4699      	mov	r9, r3
 8011dcc:	dac2      	bge.n	8011d54 <rcl_wait+0x25c>
 8011dce:	e719      	b.n	8011c04 <rcl_wait+0x10c>
 8011dd0:	ffffffff 	.word	0xffffffff
 8011dd4:	7fffffff 	.word	0x7fffffff
 8011dd8:	3b9aca00 	.word	0x3b9aca00
 8011ddc:	00000000 	.word	0x00000000

08011de0 <rcl_action_take_goal_response>:
 8011de0:	2800      	cmp	r0, #0
 8011de2:	d039      	beq.n	8011e58 <rcl_action_take_goal_response+0x78>
 8011de4:	b570      	push	{r4, r5, r6, lr}
 8011de6:	4604      	mov	r4, r0
 8011de8:	6800      	ldr	r0, [r0, #0]
 8011dea:	b380      	cbz	r0, 8011e4e <rcl_action_take_goal_response+0x6e>
 8011dec:	460d      	mov	r5, r1
 8011dee:	4616      	mov	r6, r2
 8011df0:	f7fe faaa 	bl	8010348 <rcl_client_is_valid>
 8011df4:	b330      	cbz	r0, 8011e44 <rcl_action_take_goal_response+0x64>
 8011df6:	6820      	ldr	r0, [r4, #0]
 8011df8:	3004      	adds	r0, #4
 8011dfa:	f7fe faa5 	bl	8010348 <rcl_client_is_valid>
 8011dfe:	b308      	cbz	r0, 8011e44 <rcl_action_take_goal_response+0x64>
 8011e00:	6820      	ldr	r0, [r4, #0]
 8011e02:	3008      	adds	r0, #8
 8011e04:	f7fe faa0 	bl	8010348 <rcl_client_is_valid>
 8011e08:	b1e0      	cbz	r0, 8011e44 <rcl_action_take_goal_response+0x64>
 8011e0a:	6820      	ldr	r0, [r4, #0]
 8011e0c:	300c      	adds	r0, #12
 8011e0e:	f7f8 fe3b 	bl	800aa88 <rcl_subscription_is_valid>
 8011e12:	b1b8      	cbz	r0, 8011e44 <rcl_action_take_goal_response+0x64>
 8011e14:	6820      	ldr	r0, [r4, #0]
 8011e16:	3010      	adds	r0, #16
 8011e18:	f7f8 fe36 	bl	800aa88 <rcl_subscription_is_valid>
 8011e1c:	b190      	cbz	r0, 8011e44 <rcl_action_take_goal_response+0x64>
 8011e1e:	b1cd      	cbz	r5, 8011e54 <rcl_action_take_goal_response+0x74>
 8011e20:	b1c6      	cbz	r6, 8011e54 <rcl_action_take_goal_response+0x74>
 8011e22:	6820      	ldr	r0, [r4, #0]
 8011e24:	4632      	mov	r2, r6
 8011e26:	4629      	mov	r1, r5
 8011e28:	f7fe fa46 	bl	80102b8 <rcl_take_response>
 8011e2c:	b148      	cbz	r0, 8011e42 <rcl_action_take_goal_response+0x62>
 8011e2e:	280a      	cmp	r0, #10
 8011e30:	d007      	beq.n	8011e42 <rcl_action_take_goal_response+0x62>
 8011e32:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8011e36:	f640 0337 	movw	r3, #2103	@ 0x837
 8011e3a:	4290      	cmp	r0, r2
 8011e3c:	bf0c      	ite	eq
 8011e3e:	4618      	moveq	r0, r3
 8011e40:	2001      	movne	r0, #1
 8011e42:	bd70      	pop	{r4, r5, r6, pc}
 8011e44:	f7f9 fdb8 	bl	800b9b8 <rcutils_reset_error>
 8011e48:	f640 0036 	movw	r0, #2102	@ 0x836
 8011e4c:	bd70      	pop	{r4, r5, r6, pc}
 8011e4e:	f640 0036 	movw	r0, #2102	@ 0x836
 8011e52:	bd70      	pop	{r4, r5, r6, pc}
 8011e54:	200b      	movs	r0, #11
 8011e56:	bd70      	pop	{r4, r5, r6, pc}
 8011e58:	f640 0036 	movw	r0, #2102	@ 0x836
 8011e5c:	4770      	bx	lr
 8011e5e:	bf00      	nop

08011e60 <rcl_action_send_result_request>:
 8011e60:	b390      	cbz	r0, 8011ec8 <rcl_action_send_result_request+0x68>
 8011e62:	b570      	push	{r4, r5, r6, lr}
 8011e64:	4604      	mov	r4, r0
 8011e66:	6800      	ldr	r0, [r0, #0]
 8011e68:	b348      	cbz	r0, 8011ebe <rcl_action_send_result_request+0x5e>
 8011e6a:	460d      	mov	r5, r1
 8011e6c:	4616      	mov	r6, r2
 8011e6e:	f7fe fa6b 	bl	8010348 <rcl_client_is_valid>
 8011e72:	b1f8      	cbz	r0, 8011eb4 <rcl_action_send_result_request+0x54>
 8011e74:	6820      	ldr	r0, [r4, #0]
 8011e76:	3004      	adds	r0, #4
 8011e78:	f7fe fa66 	bl	8010348 <rcl_client_is_valid>
 8011e7c:	b1d0      	cbz	r0, 8011eb4 <rcl_action_send_result_request+0x54>
 8011e7e:	6820      	ldr	r0, [r4, #0]
 8011e80:	3008      	adds	r0, #8
 8011e82:	f7fe fa61 	bl	8010348 <rcl_client_is_valid>
 8011e86:	b1a8      	cbz	r0, 8011eb4 <rcl_action_send_result_request+0x54>
 8011e88:	6820      	ldr	r0, [r4, #0]
 8011e8a:	300c      	adds	r0, #12
 8011e8c:	f7f8 fdfc 	bl	800aa88 <rcl_subscription_is_valid>
 8011e90:	b180      	cbz	r0, 8011eb4 <rcl_action_send_result_request+0x54>
 8011e92:	6820      	ldr	r0, [r4, #0]
 8011e94:	3010      	adds	r0, #16
 8011e96:	f7f8 fdf7 	bl	800aa88 <rcl_subscription_is_valid>
 8011e9a:	b158      	cbz	r0, 8011eb4 <rcl_action_send_result_request+0x54>
 8011e9c:	b195      	cbz	r5, 8011ec4 <rcl_action_send_result_request+0x64>
 8011e9e:	b18e      	cbz	r6, 8011ec4 <rcl_action_send_result_request+0x64>
 8011ea0:	6820      	ldr	r0, [r4, #0]
 8011ea2:	4632      	mov	r2, r6
 8011ea4:	4629      	mov	r1, r5
 8011ea6:	3008      	adds	r0, #8
 8011ea8:	f7fe f9d0 	bl	801024c <rcl_send_request>
 8011eac:	3800      	subs	r0, #0
 8011eae:	bf18      	it	ne
 8011eb0:	2001      	movne	r0, #1
 8011eb2:	bd70      	pop	{r4, r5, r6, pc}
 8011eb4:	f7f9 fd80 	bl	800b9b8 <rcutils_reset_error>
 8011eb8:	f640 0036 	movw	r0, #2102	@ 0x836
 8011ebc:	bd70      	pop	{r4, r5, r6, pc}
 8011ebe:	f640 0036 	movw	r0, #2102	@ 0x836
 8011ec2:	bd70      	pop	{r4, r5, r6, pc}
 8011ec4:	200b      	movs	r0, #11
 8011ec6:	bd70      	pop	{r4, r5, r6, pc}
 8011ec8:	f640 0036 	movw	r0, #2102	@ 0x836
 8011ecc:	4770      	bx	lr
 8011ece:	bf00      	nop

08011ed0 <rcl_action_take_result_response>:
 8011ed0:	2800      	cmp	r0, #0
 8011ed2:	d03a      	beq.n	8011f4a <rcl_action_take_result_response+0x7a>
 8011ed4:	b570      	push	{r4, r5, r6, lr}
 8011ed6:	4604      	mov	r4, r0
 8011ed8:	6800      	ldr	r0, [r0, #0]
 8011eda:	b388      	cbz	r0, 8011f40 <rcl_action_take_result_response+0x70>
 8011edc:	460d      	mov	r5, r1
 8011ede:	4616      	mov	r6, r2
 8011ee0:	f7fe fa32 	bl	8010348 <rcl_client_is_valid>
 8011ee4:	b338      	cbz	r0, 8011f36 <rcl_action_take_result_response+0x66>
 8011ee6:	6820      	ldr	r0, [r4, #0]
 8011ee8:	3004      	adds	r0, #4
 8011eea:	f7fe fa2d 	bl	8010348 <rcl_client_is_valid>
 8011eee:	b310      	cbz	r0, 8011f36 <rcl_action_take_result_response+0x66>
 8011ef0:	6820      	ldr	r0, [r4, #0]
 8011ef2:	3008      	adds	r0, #8
 8011ef4:	f7fe fa28 	bl	8010348 <rcl_client_is_valid>
 8011ef8:	b1e8      	cbz	r0, 8011f36 <rcl_action_take_result_response+0x66>
 8011efa:	6820      	ldr	r0, [r4, #0]
 8011efc:	300c      	adds	r0, #12
 8011efe:	f7f8 fdc3 	bl	800aa88 <rcl_subscription_is_valid>
 8011f02:	b1c0      	cbz	r0, 8011f36 <rcl_action_take_result_response+0x66>
 8011f04:	6820      	ldr	r0, [r4, #0]
 8011f06:	3010      	adds	r0, #16
 8011f08:	f7f8 fdbe 	bl	800aa88 <rcl_subscription_is_valid>
 8011f0c:	b198      	cbz	r0, 8011f36 <rcl_action_take_result_response+0x66>
 8011f0e:	b1d5      	cbz	r5, 8011f46 <rcl_action_take_result_response+0x76>
 8011f10:	b1ce      	cbz	r6, 8011f46 <rcl_action_take_result_response+0x76>
 8011f12:	6820      	ldr	r0, [r4, #0]
 8011f14:	4632      	mov	r2, r6
 8011f16:	4629      	mov	r1, r5
 8011f18:	3008      	adds	r0, #8
 8011f1a:	f7fe f9cd 	bl	80102b8 <rcl_take_response>
 8011f1e:	b148      	cbz	r0, 8011f34 <rcl_action_take_result_response+0x64>
 8011f20:	280a      	cmp	r0, #10
 8011f22:	d007      	beq.n	8011f34 <rcl_action_take_result_response+0x64>
 8011f24:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8011f28:	f640 0337 	movw	r3, #2103	@ 0x837
 8011f2c:	4290      	cmp	r0, r2
 8011f2e:	bf0c      	ite	eq
 8011f30:	4618      	moveq	r0, r3
 8011f32:	2001      	movne	r0, #1
 8011f34:	bd70      	pop	{r4, r5, r6, pc}
 8011f36:	f7f9 fd3f 	bl	800b9b8 <rcutils_reset_error>
 8011f3a:	f640 0036 	movw	r0, #2102	@ 0x836
 8011f3e:	bd70      	pop	{r4, r5, r6, pc}
 8011f40:	f640 0036 	movw	r0, #2102	@ 0x836
 8011f44:	bd70      	pop	{r4, r5, r6, pc}
 8011f46:	200b      	movs	r0, #11
 8011f48:	bd70      	pop	{r4, r5, r6, pc}
 8011f4a:	f640 0036 	movw	r0, #2102	@ 0x836
 8011f4e:	4770      	bx	lr

08011f50 <rcl_action_take_cancel_response>:
 8011f50:	2800      	cmp	r0, #0
 8011f52:	d03a      	beq.n	8011fca <rcl_action_take_cancel_response+0x7a>
 8011f54:	b570      	push	{r4, r5, r6, lr}
 8011f56:	4604      	mov	r4, r0
 8011f58:	6800      	ldr	r0, [r0, #0]
 8011f5a:	b388      	cbz	r0, 8011fc0 <rcl_action_take_cancel_response+0x70>
 8011f5c:	460d      	mov	r5, r1
 8011f5e:	4616      	mov	r6, r2
 8011f60:	f7fe f9f2 	bl	8010348 <rcl_client_is_valid>
 8011f64:	b338      	cbz	r0, 8011fb6 <rcl_action_take_cancel_response+0x66>
 8011f66:	6820      	ldr	r0, [r4, #0]
 8011f68:	3004      	adds	r0, #4
 8011f6a:	f7fe f9ed 	bl	8010348 <rcl_client_is_valid>
 8011f6e:	b310      	cbz	r0, 8011fb6 <rcl_action_take_cancel_response+0x66>
 8011f70:	6820      	ldr	r0, [r4, #0]
 8011f72:	3008      	adds	r0, #8
 8011f74:	f7fe f9e8 	bl	8010348 <rcl_client_is_valid>
 8011f78:	b1e8      	cbz	r0, 8011fb6 <rcl_action_take_cancel_response+0x66>
 8011f7a:	6820      	ldr	r0, [r4, #0]
 8011f7c:	300c      	adds	r0, #12
 8011f7e:	f7f8 fd83 	bl	800aa88 <rcl_subscription_is_valid>
 8011f82:	b1c0      	cbz	r0, 8011fb6 <rcl_action_take_cancel_response+0x66>
 8011f84:	6820      	ldr	r0, [r4, #0]
 8011f86:	3010      	adds	r0, #16
 8011f88:	f7f8 fd7e 	bl	800aa88 <rcl_subscription_is_valid>
 8011f8c:	b198      	cbz	r0, 8011fb6 <rcl_action_take_cancel_response+0x66>
 8011f8e:	b1d5      	cbz	r5, 8011fc6 <rcl_action_take_cancel_response+0x76>
 8011f90:	b1ce      	cbz	r6, 8011fc6 <rcl_action_take_cancel_response+0x76>
 8011f92:	6820      	ldr	r0, [r4, #0]
 8011f94:	4632      	mov	r2, r6
 8011f96:	4629      	mov	r1, r5
 8011f98:	3004      	adds	r0, #4
 8011f9a:	f7fe f98d 	bl	80102b8 <rcl_take_response>
 8011f9e:	b148      	cbz	r0, 8011fb4 <rcl_action_take_cancel_response+0x64>
 8011fa0:	280a      	cmp	r0, #10
 8011fa2:	d007      	beq.n	8011fb4 <rcl_action_take_cancel_response+0x64>
 8011fa4:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8011fa8:	f640 0337 	movw	r3, #2103	@ 0x837
 8011fac:	4290      	cmp	r0, r2
 8011fae:	bf0c      	ite	eq
 8011fb0:	4618      	moveq	r0, r3
 8011fb2:	2001      	movne	r0, #1
 8011fb4:	bd70      	pop	{r4, r5, r6, pc}
 8011fb6:	f7f9 fcff 	bl	800b9b8 <rcutils_reset_error>
 8011fba:	f640 0036 	movw	r0, #2102	@ 0x836
 8011fbe:	bd70      	pop	{r4, r5, r6, pc}
 8011fc0:	f640 0036 	movw	r0, #2102	@ 0x836
 8011fc4:	bd70      	pop	{r4, r5, r6, pc}
 8011fc6:	200b      	movs	r0, #11
 8011fc8:	bd70      	pop	{r4, r5, r6, pc}
 8011fca:	f640 0036 	movw	r0, #2102	@ 0x836
 8011fce:	4770      	bx	lr

08011fd0 <rcl_action_take_feedback>:
 8011fd0:	2800      	cmp	r0, #0
 8011fd2:	d038      	beq.n	8012046 <rcl_action_take_feedback+0x76>
 8011fd4:	b530      	push	{r4, r5, lr}
 8011fd6:	4604      	mov	r4, r0
 8011fd8:	6800      	ldr	r0, [r0, #0]
 8011fda:	b091      	sub	sp, #68	@ 0x44
 8011fdc:	b378      	cbz	r0, 801203e <rcl_action_take_feedback+0x6e>
 8011fde:	460d      	mov	r5, r1
 8011fe0:	f7fe f9b2 	bl	8010348 <rcl_client_is_valid>
 8011fe4:	b328      	cbz	r0, 8012032 <rcl_action_take_feedback+0x62>
 8011fe6:	6820      	ldr	r0, [r4, #0]
 8011fe8:	3004      	adds	r0, #4
 8011fea:	f7fe f9ad 	bl	8010348 <rcl_client_is_valid>
 8011fee:	b300      	cbz	r0, 8012032 <rcl_action_take_feedback+0x62>
 8011ff0:	6820      	ldr	r0, [r4, #0]
 8011ff2:	3008      	adds	r0, #8
 8011ff4:	f7fe f9a8 	bl	8010348 <rcl_client_is_valid>
 8011ff8:	b1d8      	cbz	r0, 8012032 <rcl_action_take_feedback+0x62>
 8011ffa:	6820      	ldr	r0, [r4, #0]
 8011ffc:	300c      	adds	r0, #12
 8011ffe:	f7f8 fd43 	bl	800aa88 <rcl_subscription_is_valid>
 8012002:	b1b0      	cbz	r0, 8012032 <rcl_action_take_feedback+0x62>
 8012004:	6820      	ldr	r0, [r4, #0]
 8012006:	3010      	adds	r0, #16
 8012008:	f7f8 fd3e 	bl	800aa88 <rcl_subscription_is_valid>
 801200c:	b188      	cbz	r0, 8012032 <rcl_action_take_feedback+0x62>
 801200e:	b1ed      	cbz	r5, 801204c <rcl_action_take_feedback+0x7c>
 8012010:	6820      	ldr	r0, [r4, #0]
 8012012:	2300      	movs	r3, #0
 8012014:	466a      	mov	r2, sp
 8012016:	4629      	mov	r1, r5
 8012018:	300c      	adds	r0, #12
 801201a:	f7f8 fcd7 	bl	800a9cc <rcl_take>
 801201e:	b160      	cbz	r0, 801203a <rcl_action_take_feedback+0x6a>
 8012020:	f240 1391 	movw	r3, #401	@ 0x191
 8012024:	4298      	cmp	r0, r3
 8012026:	d014      	beq.n	8012052 <rcl_action_take_feedback+0x82>
 8012028:	280a      	cmp	r0, #10
 801202a:	bf18      	it	ne
 801202c:	2001      	movne	r0, #1
 801202e:	b011      	add	sp, #68	@ 0x44
 8012030:	bd30      	pop	{r4, r5, pc}
 8012032:	f7f9 fcc1 	bl	800b9b8 <rcutils_reset_error>
 8012036:	f640 0036 	movw	r0, #2102	@ 0x836
 801203a:	b011      	add	sp, #68	@ 0x44
 801203c:	bd30      	pop	{r4, r5, pc}
 801203e:	f640 0036 	movw	r0, #2102	@ 0x836
 8012042:	b011      	add	sp, #68	@ 0x44
 8012044:	bd30      	pop	{r4, r5, pc}
 8012046:	f640 0036 	movw	r0, #2102	@ 0x836
 801204a:	4770      	bx	lr
 801204c:	200b      	movs	r0, #11
 801204e:	b011      	add	sp, #68	@ 0x44
 8012050:	bd30      	pop	{r4, r5, pc}
 8012052:	f640 0037 	movw	r0, #2103	@ 0x837
 8012056:	e7f0      	b.n	801203a <rcl_action_take_feedback+0x6a>

08012058 <rcl_action_wait_set_add_action_client>:
 8012058:	2800      	cmp	r0, #0
 801205a:	d048      	beq.n	80120ee <rcl_action_wait_set_add_action_client+0x96>
 801205c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801205e:	460c      	mov	r4, r1
 8012060:	2900      	cmp	r1, #0
 8012062:	d03c      	beq.n	80120de <rcl_action_wait_set_add_action_client+0x86>
 8012064:	4605      	mov	r5, r0
 8012066:	6808      	ldr	r0, [r1, #0]
 8012068:	2800      	cmp	r0, #0
 801206a:	d038      	beq.n	80120de <rcl_action_wait_set_add_action_client+0x86>
 801206c:	4617      	mov	r7, r2
 801206e:	461e      	mov	r6, r3
 8012070:	f7fe f96a 	bl	8010348 <rcl_client_is_valid>
 8012074:	b3b0      	cbz	r0, 80120e4 <rcl_action_wait_set_add_action_client+0x8c>
 8012076:	6820      	ldr	r0, [r4, #0]
 8012078:	3004      	adds	r0, #4
 801207a:	f7fe f965 	bl	8010348 <rcl_client_is_valid>
 801207e:	b388      	cbz	r0, 80120e4 <rcl_action_wait_set_add_action_client+0x8c>
 8012080:	6820      	ldr	r0, [r4, #0]
 8012082:	3008      	adds	r0, #8
 8012084:	f7fe f960 	bl	8010348 <rcl_client_is_valid>
 8012088:	b360      	cbz	r0, 80120e4 <rcl_action_wait_set_add_action_client+0x8c>
 801208a:	6820      	ldr	r0, [r4, #0]
 801208c:	300c      	adds	r0, #12
 801208e:	f7f8 fcfb 	bl	800aa88 <rcl_subscription_is_valid>
 8012092:	b338      	cbz	r0, 80120e4 <rcl_action_wait_set_add_action_client+0x8c>
 8012094:	6820      	ldr	r0, [r4, #0]
 8012096:	3010      	adds	r0, #16
 8012098:	f7f8 fcf6 	bl	800aa88 <rcl_subscription_is_valid>
 801209c:	b310      	cbz	r0, 80120e4 <rcl_action_wait_set_add_action_client+0x8c>
 801209e:	6821      	ldr	r1, [r4, #0]
 80120a0:	4628      	mov	r0, r5
 80120a2:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 80120a6:	f7ff fccf 	bl	8011a48 <rcl_wait_set_add_client>
 80120aa:	b9b8      	cbnz	r0, 80120dc <rcl_action_wait_set_add_action_client+0x84>
 80120ac:	6821      	ldr	r1, [r4, #0]
 80120ae:	4628      	mov	r0, r5
 80120b0:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 80120b4:	3104      	adds	r1, #4
 80120b6:	f7ff fcc7 	bl	8011a48 <rcl_wait_set_add_client>
 80120ba:	b978      	cbnz	r0, 80120dc <rcl_action_wait_set_add_action_client+0x84>
 80120bc:	6821      	ldr	r1, [r4, #0]
 80120be:	4628      	mov	r0, r5
 80120c0:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 80120c4:	3108      	adds	r1, #8
 80120c6:	f7ff fcbf 	bl	8011a48 <rcl_wait_set_add_client>
 80120ca:	b938      	cbnz	r0, 80120dc <rcl_action_wait_set_add_action_client+0x84>
 80120cc:	6821      	ldr	r1, [r4, #0]
 80120ce:	4628      	mov	r0, r5
 80120d0:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 80120d4:	310c      	adds	r1, #12
 80120d6:	f7ff f96f 	bl	80113b8 <rcl_wait_set_add_subscription>
 80120da:	b158      	cbz	r0, 80120f4 <rcl_action_wait_set_add_action_client+0x9c>
 80120dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80120de:	f640 0036 	movw	r0, #2102	@ 0x836
 80120e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80120e4:	f7f9 fc68 	bl	800b9b8 <rcutils_reset_error>
 80120e8:	f640 0036 	movw	r0, #2102	@ 0x836
 80120ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80120ee:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80120f2:	4770      	bx	lr
 80120f4:	6821      	ldr	r1, [r4, #0]
 80120f6:	4628      	mov	r0, r5
 80120f8:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 80120fc:	3110      	adds	r1, #16
 80120fe:	f7ff f95b 	bl	80113b8 <rcl_wait_set_add_subscription>
 8012102:	2800      	cmp	r0, #0
 8012104:	d1ea      	bne.n	80120dc <rcl_action_wait_set_add_action_client+0x84>
 8012106:	b11f      	cbz	r7, 8012110 <rcl_action_wait_set_add_action_client+0xb8>
 8012108:	6823      	ldr	r3, [r4, #0]
 801210a:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 801210e:	603b      	str	r3, [r7, #0]
 8012110:	2e00      	cmp	r6, #0
 8012112:	d0e3      	beq.n	80120dc <rcl_action_wait_set_add_action_client+0x84>
 8012114:	6823      	ldr	r3, [r4, #0]
 8012116:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 801211a:	6033      	str	r3, [r6, #0]
 801211c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801211e:	bf00      	nop

08012120 <rcl_action_client_wait_set_get_entities_ready>:
 8012120:	2800      	cmp	r0, #0
 8012122:	f000 808d 	beq.w	8012240 <rcl_action_client_wait_set_get_entities_ready+0x120>
 8012126:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801212a:	460c      	mov	r4, r1
 801212c:	2900      	cmp	r1, #0
 801212e:	d077      	beq.n	8012220 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8012130:	4605      	mov	r5, r0
 8012132:	6808      	ldr	r0, [r1, #0]
 8012134:	2800      	cmp	r0, #0
 8012136:	d073      	beq.n	8012220 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8012138:	4616      	mov	r6, r2
 801213a:	461f      	mov	r7, r3
 801213c:	f7fe f904 	bl	8010348 <rcl_client_is_valid>
 8012140:	2800      	cmp	r0, #0
 8012142:	d071      	beq.n	8012228 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8012144:	6820      	ldr	r0, [r4, #0]
 8012146:	3004      	adds	r0, #4
 8012148:	f7fe f8fe 	bl	8010348 <rcl_client_is_valid>
 801214c:	2800      	cmp	r0, #0
 801214e:	d06b      	beq.n	8012228 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8012150:	6820      	ldr	r0, [r4, #0]
 8012152:	3008      	adds	r0, #8
 8012154:	f7fe f8f8 	bl	8010348 <rcl_client_is_valid>
 8012158:	2800      	cmp	r0, #0
 801215a:	d065      	beq.n	8012228 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801215c:	6820      	ldr	r0, [r4, #0]
 801215e:	300c      	adds	r0, #12
 8012160:	f7f8 fc92 	bl	800aa88 <rcl_subscription_is_valid>
 8012164:	2800      	cmp	r0, #0
 8012166:	d05f      	beq.n	8012228 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8012168:	6820      	ldr	r0, [r4, #0]
 801216a:	3010      	adds	r0, #16
 801216c:	f7f8 fc8c 	bl	800aa88 <rcl_subscription_is_valid>
 8012170:	2800      	cmp	r0, #0
 8012172:	d059      	beq.n	8012228 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8012174:	2e00      	cmp	r6, #0
 8012176:	d060      	beq.n	801223a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8012178:	2f00      	cmp	r7, #0
 801217a:	d05e      	beq.n	801223a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 801217c:	9b06      	ldr	r3, [sp, #24]
 801217e:	2b00      	cmp	r3, #0
 8012180:	d05b      	beq.n	801223a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8012182:	9b07      	ldr	r3, [sp, #28]
 8012184:	2b00      	cmp	r3, #0
 8012186:	d058      	beq.n	801223a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8012188:	9b08      	ldr	r3, [sp, #32]
 801218a:	2b00      	cmp	r3, #0
 801218c:	d055      	beq.n	801223a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 801218e:	6823      	ldr	r3, [r4, #0]
 8012190:	686a      	ldr	r2, [r5, #4]
 8012192:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 8012196:	428a      	cmp	r2, r1
 8012198:	d94c      	bls.n	8012234 <rcl_action_client_wait_set_get_entities_ready+0x114>
 801219a:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 801219e:	4282      	cmp	r2, r0
 80121a0:	d948      	bls.n	8012234 <rcl_action_client_wait_set_get_entities_ready+0x114>
 80121a2:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 80121a6:	69ea      	ldr	r2, [r5, #28]
 80121a8:	42a2      	cmp	r2, r4
 80121aa:	d943      	bls.n	8012234 <rcl_action_client_wait_set_get_entities_ready+0x114>
 80121ac:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 80121b0:	4562      	cmp	r2, ip
 80121b2:	d93f      	bls.n	8012234 <rcl_action_client_wait_set_get_entities_ready+0x114>
 80121b4:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 80121b8:	4572      	cmp	r2, lr
 80121ba:	d93b      	bls.n	8012234 <rcl_action_client_wait_set_get_entities_ready+0x114>
 80121bc:	69aa      	ldr	r2, [r5, #24]
 80121be:	682d      	ldr	r5, [r5, #0]
 80121c0:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 80121c4:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 80121c8:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 80121cc:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 80121d0:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 80121d4:	f103 0c0c 	add.w	ip, r3, #12
 80121d8:	eba5 050c 	sub.w	r5, r5, ip
 80121dc:	fab5 f585 	clz	r5, r5
 80121e0:	096d      	lsrs	r5, r5, #5
 80121e2:	7035      	strb	r5, [r6, #0]
 80121e4:	f103 0510 	add.w	r5, r3, #16
 80121e8:	1b64      	subs	r4, r4, r5
 80121ea:	fab4 f484 	clz	r4, r4
 80121ee:	0964      	lsrs	r4, r4, #5
 80121f0:	703c      	strb	r4, [r7, #0]
 80121f2:	eba3 0008 	sub.w	r0, r3, r8
 80121f6:	1d1c      	adds	r4, r3, #4
 80121f8:	3308      	adds	r3, #8
 80121fa:	1ad3      	subs	r3, r2, r3
 80121fc:	fab0 f080 	clz	r0, r0
 8012200:	9a06      	ldr	r2, [sp, #24]
 8012202:	0940      	lsrs	r0, r0, #5
 8012204:	1b09      	subs	r1, r1, r4
 8012206:	7010      	strb	r0, [r2, #0]
 8012208:	fab1 f181 	clz	r1, r1
 801220c:	9a07      	ldr	r2, [sp, #28]
 801220e:	0949      	lsrs	r1, r1, #5
 8012210:	7011      	strb	r1, [r2, #0]
 8012212:	fab3 f383 	clz	r3, r3
 8012216:	9a08      	ldr	r2, [sp, #32]
 8012218:	095b      	lsrs	r3, r3, #5
 801221a:	2000      	movs	r0, #0
 801221c:	7013      	strb	r3, [r2, #0]
 801221e:	e001      	b.n	8012224 <rcl_action_client_wait_set_get_entities_ready+0x104>
 8012220:	f640 0036 	movw	r0, #2102	@ 0x836
 8012224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012228:	f7f9 fbc6 	bl	800b9b8 <rcutils_reset_error>
 801222c:	f640 0036 	movw	r0, #2102	@ 0x836
 8012230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012234:	2001      	movs	r0, #1
 8012236:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801223a:	200b      	movs	r0, #11
 801223c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012240:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012244:	4770      	bx	lr
 8012246:	bf00      	nop

08012248 <rcl_action_take_goal_request>:
 8012248:	2800      	cmp	r0, #0
 801224a:	d039      	beq.n	80122c0 <rcl_action_take_goal_request+0x78>
 801224c:	b570      	push	{r4, r5, r6, lr}
 801224e:	4604      	mov	r4, r0
 8012250:	6800      	ldr	r0, [r0, #0]
 8012252:	b380      	cbz	r0, 80122b6 <rcl_action_take_goal_request+0x6e>
 8012254:	460d      	mov	r5, r1
 8012256:	4616      	mov	r6, r2
 8012258:	f7fe fddc 	bl	8010e14 <rcl_service_is_valid>
 801225c:	b330      	cbz	r0, 80122ac <rcl_action_take_goal_request+0x64>
 801225e:	6820      	ldr	r0, [r4, #0]
 8012260:	3004      	adds	r0, #4
 8012262:	f7fe fdd7 	bl	8010e14 <rcl_service_is_valid>
 8012266:	b308      	cbz	r0, 80122ac <rcl_action_take_goal_request+0x64>
 8012268:	6820      	ldr	r0, [r4, #0]
 801226a:	3008      	adds	r0, #8
 801226c:	f7fe fdd2 	bl	8010e14 <rcl_service_is_valid>
 8012270:	b1e0      	cbz	r0, 80122ac <rcl_action_take_goal_request+0x64>
 8012272:	6820      	ldr	r0, [r4, #0]
 8012274:	300c      	adds	r0, #12
 8012276:	f7f8 fa57 	bl	800a728 <rcl_publisher_is_valid>
 801227a:	b1b8      	cbz	r0, 80122ac <rcl_action_take_goal_request+0x64>
 801227c:	6820      	ldr	r0, [r4, #0]
 801227e:	3010      	adds	r0, #16
 8012280:	f7f8 fa52 	bl	800a728 <rcl_publisher_is_valid>
 8012284:	b190      	cbz	r0, 80122ac <rcl_action_take_goal_request+0x64>
 8012286:	b1cd      	cbz	r5, 80122bc <rcl_action_take_goal_request+0x74>
 8012288:	b1c6      	cbz	r6, 80122bc <rcl_action_take_goal_request+0x74>
 801228a:	6820      	ldr	r0, [r4, #0]
 801228c:	4632      	mov	r2, r6
 801228e:	4629      	mov	r1, r5
 8012290:	f7fe fd68 	bl	8010d64 <rcl_take_request>
 8012294:	b148      	cbz	r0, 80122aa <rcl_action_take_goal_request+0x62>
 8012296:	280a      	cmp	r0, #10
 8012298:	d007      	beq.n	80122aa <rcl_action_take_goal_request+0x62>
 801229a:	f240 2259 	movw	r2, #601	@ 0x259
 801229e:	f640 0399 	movw	r3, #2201	@ 0x899
 80122a2:	4290      	cmp	r0, r2
 80122a4:	bf0c      	ite	eq
 80122a6:	4618      	moveq	r0, r3
 80122a8:	2001      	movne	r0, #1
 80122aa:	bd70      	pop	{r4, r5, r6, pc}
 80122ac:	f7f9 fb84 	bl	800b9b8 <rcutils_reset_error>
 80122b0:	f640 0098 	movw	r0, #2200	@ 0x898
 80122b4:	bd70      	pop	{r4, r5, r6, pc}
 80122b6:	f640 0098 	movw	r0, #2200	@ 0x898
 80122ba:	bd70      	pop	{r4, r5, r6, pc}
 80122bc:	200b      	movs	r0, #11
 80122be:	bd70      	pop	{r4, r5, r6, pc}
 80122c0:	f640 0098 	movw	r0, #2200	@ 0x898
 80122c4:	4770      	bx	lr
 80122c6:	bf00      	nop

080122c8 <rcl_action_send_goal_response>:
 80122c8:	b390      	cbz	r0, 8012330 <rcl_action_send_goal_response+0x68>
 80122ca:	b570      	push	{r4, r5, r6, lr}
 80122cc:	4604      	mov	r4, r0
 80122ce:	6800      	ldr	r0, [r0, #0]
 80122d0:	b348      	cbz	r0, 8012326 <rcl_action_send_goal_response+0x5e>
 80122d2:	460d      	mov	r5, r1
 80122d4:	4616      	mov	r6, r2
 80122d6:	f7fe fd9d 	bl	8010e14 <rcl_service_is_valid>
 80122da:	b1f8      	cbz	r0, 801231c <rcl_action_send_goal_response+0x54>
 80122dc:	6820      	ldr	r0, [r4, #0]
 80122de:	3004      	adds	r0, #4
 80122e0:	f7fe fd98 	bl	8010e14 <rcl_service_is_valid>
 80122e4:	b1d0      	cbz	r0, 801231c <rcl_action_send_goal_response+0x54>
 80122e6:	6820      	ldr	r0, [r4, #0]
 80122e8:	3008      	adds	r0, #8
 80122ea:	f7fe fd93 	bl	8010e14 <rcl_service_is_valid>
 80122ee:	b1a8      	cbz	r0, 801231c <rcl_action_send_goal_response+0x54>
 80122f0:	6820      	ldr	r0, [r4, #0]
 80122f2:	300c      	adds	r0, #12
 80122f4:	f7f8 fa18 	bl	800a728 <rcl_publisher_is_valid>
 80122f8:	b180      	cbz	r0, 801231c <rcl_action_send_goal_response+0x54>
 80122fa:	6820      	ldr	r0, [r4, #0]
 80122fc:	3010      	adds	r0, #16
 80122fe:	f7f8 fa13 	bl	800a728 <rcl_publisher_is_valid>
 8012302:	b158      	cbz	r0, 801231c <rcl_action_send_goal_response+0x54>
 8012304:	b195      	cbz	r5, 801232c <rcl_action_send_goal_response+0x64>
 8012306:	b18e      	cbz	r6, 801232c <rcl_action_send_goal_response+0x64>
 8012308:	6820      	ldr	r0, [r4, #0]
 801230a:	4632      	mov	r2, r6
 801230c:	4629      	mov	r1, r5
 801230e:	f7fe fd69 	bl	8010de4 <rcl_send_response>
 8012312:	b110      	cbz	r0, 801231a <rcl_action_send_goal_response+0x52>
 8012314:	2802      	cmp	r0, #2
 8012316:	bf18      	it	ne
 8012318:	2001      	movne	r0, #1
 801231a:	bd70      	pop	{r4, r5, r6, pc}
 801231c:	f7f9 fb4c 	bl	800b9b8 <rcutils_reset_error>
 8012320:	f640 0098 	movw	r0, #2200	@ 0x898
 8012324:	bd70      	pop	{r4, r5, r6, pc}
 8012326:	f640 0098 	movw	r0, #2200	@ 0x898
 801232a:	bd70      	pop	{r4, r5, r6, pc}
 801232c:	200b      	movs	r0, #11
 801232e:	bd70      	pop	{r4, r5, r6, pc}
 8012330:	f640 0098 	movw	r0, #2200	@ 0x898
 8012334:	4770      	bx	lr
 8012336:	bf00      	nop

08012338 <rcl_action_take_result_request>:
 8012338:	2800      	cmp	r0, #0
 801233a:	d03a      	beq.n	80123b2 <rcl_action_take_result_request+0x7a>
 801233c:	b570      	push	{r4, r5, r6, lr}
 801233e:	4604      	mov	r4, r0
 8012340:	6800      	ldr	r0, [r0, #0]
 8012342:	b388      	cbz	r0, 80123a8 <rcl_action_take_result_request+0x70>
 8012344:	460d      	mov	r5, r1
 8012346:	4616      	mov	r6, r2
 8012348:	f7fe fd64 	bl	8010e14 <rcl_service_is_valid>
 801234c:	b338      	cbz	r0, 801239e <rcl_action_take_result_request+0x66>
 801234e:	6820      	ldr	r0, [r4, #0]
 8012350:	3004      	adds	r0, #4
 8012352:	f7fe fd5f 	bl	8010e14 <rcl_service_is_valid>
 8012356:	b310      	cbz	r0, 801239e <rcl_action_take_result_request+0x66>
 8012358:	6820      	ldr	r0, [r4, #0]
 801235a:	3008      	adds	r0, #8
 801235c:	f7fe fd5a 	bl	8010e14 <rcl_service_is_valid>
 8012360:	b1e8      	cbz	r0, 801239e <rcl_action_take_result_request+0x66>
 8012362:	6820      	ldr	r0, [r4, #0]
 8012364:	300c      	adds	r0, #12
 8012366:	f7f8 f9df 	bl	800a728 <rcl_publisher_is_valid>
 801236a:	b1c0      	cbz	r0, 801239e <rcl_action_take_result_request+0x66>
 801236c:	6820      	ldr	r0, [r4, #0]
 801236e:	3010      	adds	r0, #16
 8012370:	f7f8 f9da 	bl	800a728 <rcl_publisher_is_valid>
 8012374:	b198      	cbz	r0, 801239e <rcl_action_take_result_request+0x66>
 8012376:	b1d5      	cbz	r5, 80123ae <rcl_action_take_result_request+0x76>
 8012378:	b1ce      	cbz	r6, 80123ae <rcl_action_take_result_request+0x76>
 801237a:	6820      	ldr	r0, [r4, #0]
 801237c:	4632      	mov	r2, r6
 801237e:	4629      	mov	r1, r5
 8012380:	3008      	adds	r0, #8
 8012382:	f7fe fcef 	bl	8010d64 <rcl_take_request>
 8012386:	b148      	cbz	r0, 801239c <rcl_action_take_result_request+0x64>
 8012388:	280a      	cmp	r0, #10
 801238a:	d007      	beq.n	801239c <rcl_action_take_result_request+0x64>
 801238c:	f240 2259 	movw	r2, #601	@ 0x259
 8012390:	f640 0399 	movw	r3, #2201	@ 0x899
 8012394:	4290      	cmp	r0, r2
 8012396:	bf0c      	ite	eq
 8012398:	4618      	moveq	r0, r3
 801239a:	2001      	movne	r0, #1
 801239c:	bd70      	pop	{r4, r5, r6, pc}
 801239e:	f7f9 fb0b 	bl	800b9b8 <rcutils_reset_error>
 80123a2:	f640 0098 	movw	r0, #2200	@ 0x898
 80123a6:	bd70      	pop	{r4, r5, r6, pc}
 80123a8:	f640 0098 	movw	r0, #2200	@ 0x898
 80123ac:	bd70      	pop	{r4, r5, r6, pc}
 80123ae:	200b      	movs	r0, #11
 80123b0:	bd70      	pop	{r4, r5, r6, pc}
 80123b2:	f640 0098 	movw	r0, #2200	@ 0x898
 80123b6:	4770      	bx	lr

080123b8 <rcl_action_take_cancel_request>:
 80123b8:	2800      	cmp	r0, #0
 80123ba:	d03a      	beq.n	8012432 <rcl_action_take_cancel_request+0x7a>
 80123bc:	b570      	push	{r4, r5, r6, lr}
 80123be:	4604      	mov	r4, r0
 80123c0:	6800      	ldr	r0, [r0, #0]
 80123c2:	b388      	cbz	r0, 8012428 <rcl_action_take_cancel_request+0x70>
 80123c4:	460d      	mov	r5, r1
 80123c6:	4616      	mov	r6, r2
 80123c8:	f7fe fd24 	bl	8010e14 <rcl_service_is_valid>
 80123cc:	b338      	cbz	r0, 801241e <rcl_action_take_cancel_request+0x66>
 80123ce:	6820      	ldr	r0, [r4, #0]
 80123d0:	3004      	adds	r0, #4
 80123d2:	f7fe fd1f 	bl	8010e14 <rcl_service_is_valid>
 80123d6:	b310      	cbz	r0, 801241e <rcl_action_take_cancel_request+0x66>
 80123d8:	6820      	ldr	r0, [r4, #0]
 80123da:	3008      	adds	r0, #8
 80123dc:	f7fe fd1a 	bl	8010e14 <rcl_service_is_valid>
 80123e0:	b1e8      	cbz	r0, 801241e <rcl_action_take_cancel_request+0x66>
 80123e2:	6820      	ldr	r0, [r4, #0]
 80123e4:	300c      	adds	r0, #12
 80123e6:	f7f8 f99f 	bl	800a728 <rcl_publisher_is_valid>
 80123ea:	b1c0      	cbz	r0, 801241e <rcl_action_take_cancel_request+0x66>
 80123ec:	6820      	ldr	r0, [r4, #0]
 80123ee:	3010      	adds	r0, #16
 80123f0:	f7f8 f99a 	bl	800a728 <rcl_publisher_is_valid>
 80123f4:	b198      	cbz	r0, 801241e <rcl_action_take_cancel_request+0x66>
 80123f6:	b1d5      	cbz	r5, 801242e <rcl_action_take_cancel_request+0x76>
 80123f8:	b1ce      	cbz	r6, 801242e <rcl_action_take_cancel_request+0x76>
 80123fa:	6820      	ldr	r0, [r4, #0]
 80123fc:	4632      	mov	r2, r6
 80123fe:	4629      	mov	r1, r5
 8012400:	3004      	adds	r0, #4
 8012402:	f7fe fcaf 	bl	8010d64 <rcl_take_request>
 8012406:	b148      	cbz	r0, 801241c <rcl_action_take_cancel_request+0x64>
 8012408:	280a      	cmp	r0, #10
 801240a:	d007      	beq.n	801241c <rcl_action_take_cancel_request+0x64>
 801240c:	f240 2259 	movw	r2, #601	@ 0x259
 8012410:	f640 0399 	movw	r3, #2201	@ 0x899
 8012414:	4290      	cmp	r0, r2
 8012416:	bf0c      	ite	eq
 8012418:	4618      	moveq	r0, r3
 801241a:	2001      	movne	r0, #1
 801241c:	bd70      	pop	{r4, r5, r6, pc}
 801241e:	f7f9 facb 	bl	800b9b8 <rcutils_reset_error>
 8012422:	f640 0098 	movw	r0, #2200	@ 0x898
 8012426:	bd70      	pop	{r4, r5, r6, pc}
 8012428:	f640 0098 	movw	r0, #2200	@ 0x898
 801242c:	bd70      	pop	{r4, r5, r6, pc}
 801242e:	200b      	movs	r0, #11
 8012430:	bd70      	pop	{r4, r5, r6, pc}
 8012432:	f640 0098 	movw	r0, #2200	@ 0x898
 8012436:	4770      	bx	lr

08012438 <rcl_action_send_cancel_response>:
 8012438:	b398      	cbz	r0, 80124a2 <rcl_action_send_cancel_response+0x6a>
 801243a:	b570      	push	{r4, r5, r6, lr}
 801243c:	4604      	mov	r4, r0
 801243e:	6800      	ldr	r0, [r0, #0]
 8012440:	b350      	cbz	r0, 8012498 <rcl_action_send_cancel_response+0x60>
 8012442:	460d      	mov	r5, r1
 8012444:	4616      	mov	r6, r2
 8012446:	f7fe fce5 	bl	8010e14 <rcl_service_is_valid>
 801244a:	b300      	cbz	r0, 801248e <rcl_action_send_cancel_response+0x56>
 801244c:	6820      	ldr	r0, [r4, #0]
 801244e:	3004      	adds	r0, #4
 8012450:	f7fe fce0 	bl	8010e14 <rcl_service_is_valid>
 8012454:	b1d8      	cbz	r0, 801248e <rcl_action_send_cancel_response+0x56>
 8012456:	6820      	ldr	r0, [r4, #0]
 8012458:	3008      	adds	r0, #8
 801245a:	f7fe fcdb 	bl	8010e14 <rcl_service_is_valid>
 801245e:	b1b0      	cbz	r0, 801248e <rcl_action_send_cancel_response+0x56>
 8012460:	6820      	ldr	r0, [r4, #0]
 8012462:	300c      	adds	r0, #12
 8012464:	f7f8 f960 	bl	800a728 <rcl_publisher_is_valid>
 8012468:	b188      	cbz	r0, 801248e <rcl_action_send_cancel_response+0x56>
 801246a:	6820      	ldr	r0, [r4, #0]
 801246c:	3010      	adds	r0, #16
 801246e:	f7f8 f95b 	bl	800a728 <rcl_publisher_is_valid>
 8012472:	b160      	cbz	r0, 801248e <rcl_action_send_cancel_response+0x56>
 8012474:	b19d      	cbz	r5, 801249e <rcl_action_send_cancel_response+0x66>
 8012476:	b196      	cbz	r6, 801249e <rcl_action_send_cancel_response+0x66>
 8012478:	6820      	ldr	r0, [r4, #0]
 801247a:	4632      	mov	r2, r6
 801247c:	4629      	mov	r1, r5
 801247e:	3004      	adds	r0, #4
 8012480:	f7fe fcb0 	bl	8010de4 <rcl_send_response>
 8012484:	b110      	cbz	r0, 801248c <rcl_action_send_cancel_response+0x54>
 8012486:	2802      	cmp	r0, #2
 8012488:	bf18      	it	ne
 801248a:	2001      	movne	r0, #1
 801248c:	bd70      	pop	{r4, r5, r6, pc}
 801248e:	f7f9 fa93 	bl	800b9b8 <rcutils_reset_error>
 8012492:	f640 0098 	movw	r0, #2200	@ 0x898
 8012496:	bd70      	pop	{r4, r5, r6, pc}
 8012498:	f640 0098 	movw	r0, #2200	@ 0x898
 801249c:	bd70      	pop	{r4, r5, r6, pc}
 801249e:	200b      	movs	r0, #11
 80124a0:	bd70      	pop	{r4, r5, r6, pc}
 80124a2:	f640 0098 	movw	r0, #2200	@ 0x898
 80124a6:	4770      	bx	lr

080124a8 <rcl_action_wait_set_add_action_server>:
 80124a8:	2800      	cmp	r0, #0
 80124aa:	d04d      	beq.n	8012548 <rcl_action_wait_set_add_action_server+0xa0>
 80124ac:	b570      	push	{r4, r5, r6, lr}
 80124ae:	460c      	mov	r4, r1
 80124b0:	b159      	cbz	r1, 80124ca <rcl_action_wait_set_add_action_server+0x22>
 80124b2:	4605      	mov	r5, r0
 80124b4:	6808      	ldr	r0, [r1, #0]
 80124b6:	b140      	cbz	r0, 80124ca <rcl_action_wait_set_add_action_server+0x22>
 80124b8:	4616      	mov	r6, r2
 80124ba:	f7fe fcab 	bl	8010e14 <rcl_service_is_valid>
 80124be:	b120      	cbz	r0, 80124ca <rcl_action_wait_set_add_action_server+0x22>
 80124c0:	6820      	ldr	r0, [r4, #0]
 80124c2:	3004      	adds	r0, #4
 80124c4:	f7fe fca6 	bl	8010e14 <rcl_service_is_valid>
 80124c8:	b910      	cbnz	r0, 80124d0 <rcl_action_wait_set_add_action_server+0x28>
 80124ca:	f640 0098 	movw	r0, #2200	@ 0x898
 80124ce:	bd70      	pop	{r4, r5, r6, pc}
 80124d0:	6820      	ldr	r0, [r4, #0]
 80124d2:	3008      	adds	r0, #8
 80124d4:	f7fe fc9e 	bl	8010e14 <rcl_service_is_valid>
 80124d8:	2800      	cmp	r0, #0
 80124da:	d0f6      	beq.n	80124ca <rcl_action_wait_set_add_action_server+0x22>
 80124dc:	6820      	ldr	r0, [r4, #0]
 80124de:	300c      	adds	r0, #12
 80124e0:	f7f8 f93a 	bl	800a758 <rcl_publisher_is_valid_except_context>
 80124e4:	2800      	cmp	r0, #0
 80124e6:	d0f0      	beq.n	80124ca <rcl_action_wait_set_add_action_server+0x22>
 80124e8:	6820      	ldr	r0, [r4, #0]
 80124ea:	3010      	adds	r0, #16
 80124ec:	f7f8 f934 	bl	800a758 <rcl_publisher_is_valid_except_context>
 80124f0:	2800      	cmp	r0, #0
 80124f2:	d0ea      	beq.n	80124ca <rcl_action_wait_set_add_action_server+0x22>
 80124f4:	6821      	ldr	r1, [r4, #0]
 80124f6:	4628      	mov	r0, r5
 80124f8:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 80124fc:	f7ff fad0 	bl	8011aa0 <rcl_wait_set_add_service>
 8012500:	2800      	cmp	r0, #0
 8012502:	d1e4      	bne.n	80124ce <rcl_action_wait_set_add_action_server+0x26>
 8012504:	6821      	ldr	r1, [r4, #0]
 8012506:	4628      	mov	r0, r5
 8012508:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 801250c:	3104      	adds	r1, #4
 801250e:	f7ff fac7 	bl	8011aa0 <rcl_wait_set_add_service>
 8012512:	2800      	cmp	r0, #0
 8012514:	d1db      	bne.n	80124ce <rcl_action_wait_set_add_action_server+0x26>
 8012516:	6821      	ldr	r1, [r4, #0]
 8012518:	4628      	mov	r0, r5
 801251a:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 801251e:	3108      	adds	r1, #8
 8012520:	f7ff fabe 	bl	8011aa0 <rcl_wait_set_add_service>
 8012524:	2800      	cmp	r0, #0
 8012526:	d1d2      	bne.n	80124ce <rcl_action_wait_set_add_action_server+0x26>
 8012528:	6821      	ldr	r1, [r4, #0]
 801252a:	4628      	mov	r0, r5
 801252c:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 8012530:	3114      	adds	r1, #20
 8012532:	f7ff fa59 	bl	80119e8 <rcl_wait_set_add_timer>
 8012536:	2800      	cmp	r0, #0
 8012538:	d1c9      	bne.n	80124ce <rcl_action_wait_set_add_action_server+0x26>
 801253a:	2e00      	cmp	r6, #0
 801253c:	d0c7      	beq.n	80124ce <rcl_action_wait_set_add_action_server+0x26>
 801253e:	6823      	ldr	r3, [r4, #0]
 8012540:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 8012544:	6033      	str	r3, [r6, #0]
 8012546:	bd70      	pop	{r4, r5, r6, pc}
 8012548:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801254c:	4770      	bx	lr
 801254e:	bf00      	nop

08012550 <rcl_action_server_wait_set_get_entities_ready>:
 8012550:	2800      	cmp	r0, #0
 8012552:	d05a      	beq.n	801260a <rcl_action_server_wait_set_get_entities_ready+0xba>
 8012554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012556:	460c      	mov	r4, r1
 8012558:	b161      	cbz	r1, 8012574 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801255a:	4605      	mov	r5, r0
 801255c:	6808      	ldr	r0, [r1, #0]
 801255e:	b148      	cbz	r0, 8012574 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8012560:	4616      	mov	r6, r2
 8012562:	461f      	mov	r7, r3
 8012564:	f7fe fc56 	bl	8010e14 <rcl_service_is_valid>
 8012568:	b120      	cbz	r0, 8012574 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801256a:	6820      	ldr	r0, [r4, #0]
 801256c:	3004      	adds	r0, #4
 801256e:	f7fe fc51 	bl	8010e14 <rcl_service_is_valid>
 8012572:	b910      	cbnz	r0, 801257a <rcl_action_server_wait_set_get_entities_ready+0x2a>
 8012574:	f640 0098 	movw	r0, #2200	@ 0x898
 8012578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801257a:	6820      	ldr	r0, [r4, #0]
 801257c:	3008      	adds	r0, #8
 801257e:	f7fe fc49 	bl	8010e14 <rcl_service_is_valid>
 8012582:	2800      	cmp	r0, #0
 8012584:	d0f6      	beq.n	8012574 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8012586:	6820      	ldr	r0, [r4, #0]
 8012588:	300c      	adds	r0, #12
 801258a:	f7f8 f8e5 	bl	800a758 <rcl_publisher_is_valid_except_context>
 801258e:	2800      	cmp	r0, #0
 8012590:	d0f0      	beq.n	8012574 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8012592:	6820      	ldr	r0, [r4, #0]
 8012594:	3010      	adds	r0, #16
 8012596:	f7f8 f8df 	bl	800a758 <rcl_publisher_is_valid_except_context>
 801259a:	2800      	cmp	r0, #0
 801259c:	d0ea      	beq.n	8012574 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801259e:	b3be      	cbz	r6, 8012610 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80125a0:	b3b7      	cbz	r7, 8012610 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80125a2:	9b06      	ldr	r3, [sp, #24]
 80125a4:	b3a3      	cbz	r3, 8012610 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80125a6:	9b07      	ldr	r3, [sp, #28]
 80125a8:	b393      	cbz	r3, 8012610 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80125aa:	6821      	ldr	r1, [r4, #0]
 80125ac:	692a      	ldr	r2, [r5, #16]
 80125ae:	6a2c      	ldr	r4, [r5, #32]
 80125b0:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 80125b4:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 80125b8:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 80125bc:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 80125c0:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 80125c4:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 80125c8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80125cc:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 80125d0:	1a64      	subs	r4, r4, r1
 80125d2:	fab4 f484 	clz	r4, r4
 80125d6:	0964      	lsrs	r4, r4, #5
 80125d8:	7034      	strb	r4, [r6, #0]
 80125da:	1d0c      	adds	r4, r1, #4
 80125dc:	1b1b      	subs	r3, r3, r4
 80125de:	fab3 f383 	clz	r3, r3
 80125e2:	095b      	lsrs	r3, r3, #5
 80125e4:	f101 0408 	add.w	r4, r1, #8
 80125e8:	703b      	strb	r3, [r7, #0]
 80125ea:	f101 0314 	add.w	r3, r1, #20
 80125ee:	1b01      	subs	r1, r0, r4
 80125f0:	1ad3      	subs	r3, r2, r3
 80125f2:	fab1 f181 	clz	r1, r1
 80125f6:	9a06      	ldr	r2, [sp, #24]
 80125f8:	0949      	lsrs	r1, r1, #5
 80125fa:	7011      	strb	r1, [r2, #0]
 80125fc:	fab3 f383 	clz	r3, r3
 8012600:	9a07      	ldr	r2, [sp, #28]
 8012602:	095b      	lsrs	r3, r3, #5
 8012604:	2000      	movs	r0, #0
 8012606:	7013      	strb	r3, [r2, #0]
 8012608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801260a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801260e:	4770      	bx	lr
 8012610:	200b      	movs	r0, #11
 8012612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012614 <_execute_event_handler>:
 8012614:	2002      	movs	r0, #2
 8012616:	4770      	bx	lr

08012618 <_cancel_goal_event_handler>:
 8012618:	2003      	movs	r0, #3
 801261a:	4770      	bx	lr

0801261c <_succeed_event_handler>:
 801261c:	2004      	movs	r0, #4
 801261e:	4770      	bx	lr

08012620 <_abort_event_handler>:
 8012620:	2006      	movs	r0, #6
 8012622:	4770      	bx	lr

08012624 <_canceled_event_handler>:
 8012624:	2005      	movs	r0, #5
 8012626:	4770      	bx	lr

08012628 <rcl_action_transition_goal_state>:
 8012628:	b2c2      	uxtb	r2, r0
 801262a:	2a06      	cmp	r2, #6
 801262c:	d80c      	bhi.n	8012648 <rcl_action_transition_goal_state+0x20>
 801262e:	2904      	cmp	r1, #4
 8012630:	d80a      	bhi.n	8012648 <rcl_action_transition_goal_state+0x20>
 8012632:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8012636:	b410      	push	{r4}
 8012638:	1853      	adds	r3, r2, r1
 801263a:	4c06      	ldr	r4, [pc, #24]	@ (8012654 <rcl_action_transition_goal_state+0x2c>)
 801263c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8012640:	b123      	cbz	r3, 801264c <rcl_action_transition_goal_state+0x24>
 8012642:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012646:	4718      	bx	r3
 8012648:	2000      	movs	r0, #0
 801264a:	4770      	bx	lr
 801264c:	2000      	movs	r0, #0
 801264e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012652:	4770      	bx	lr
 8012654:	0801a7f4 	.word	0x0801a7f4

08012658 <rcl_action_get_zero_initialized_cancel_response>:
 8012658:	b510      	push	{r4, lr}
 801265a:	4c07      	ldr	r4, [pc, #28]	@ (8012678 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 801265c:	4686      	mov	lr, r0
 801265e:	4684      	mov	ip, r0
 8012660:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012662:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012666:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012668:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801266c:	6823      	ldr	r3, [r4, #0]
 801266e:	f8cc 3000 	str.w	r3, [ip]
 8012672:	4670      	mov	r0, lr
 8012674:	bd10      	pop	{r4, pc}
 8012676:	bf00      	nop
 8012678:	0801a880 	.word	0x0801a880

0801267c <rclc_action_send_result_request>:
 801267c:	b1d0      	cbz	r0, 80126b4 <rclc_action_send_result_request+0x38>
 801267e:	b500      	push	{lr}
 8012680:	4684      	mov	ip, r0
 8012682:	b087      	sub	sp, #28
 8012684:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8012688:	f8dc 100d 	ldr.w	r1, [ip, #13]
 801268c:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8012690:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8012694:	f10d 0e08 	add.w	lr, sp, #8
 8012698:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801269c:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80126a0:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 80126a4:	a902      	add	r1, sp, #8
 80126a6:	3010      	adds	r0, #16
 80126a8:	f7ff fbda 	bl	8011e60 <rcl_action_send_result_request>
 80126ac:	b920      	cbnz	r0, 80126b8 <rclc_action_send_result_request+0x3c>
 80126ae:	b007      	add	sp, #28
 80126b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80126b4:	200b      	movs	r0, #11
 80126b6:	4770      	bx	lr
 80126b8:	9001      	str	r0, [sp, #4]
 80126ba:	f7f9 f97d 	bl	800b9b8 <rcutils_reset_error>
 80126be:	9801      	ldr	r0, [sp, #4]
 80126c0:	b007      	add	sp, #28
 80126c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80126c6:	bf00      	nop

080126c8 <rclc_action_take_goal_handle>:
 80126c8:	b160      	cbz	r0, 80126e4 <rclc_action_take_goal_handle+0x1c>
 80126ca:	6883      	ldr	r3, [r0, #8]
 80126cc:	b143      	cbz	r3, 80126e0 <rclc_action_take_goal_handle+0x18>
 80126ce:	6819      	ldr	r1, [r3, #0]
 80126d0:	6081      	str	r1, [r0, #8]
 80126d2:	2200      	movs	r2, #0
 80126d4:	721a      	strb	r2, [r3, #8]
 80126d6:	68c1      	ldr	r1, [r0, #12]
 80126d8:	6019      	str	r1, [r3, #0]
 80126da:	621a      	str	r2, [r3, #32]
 80126dc:	849a      	strh	r2, [r3, #36]	@ 0x24
 80126de:	60c3      	str	r3, [r0, #12]
 80126e0:	4618      	mov	r0, r3
 80126e2:	4770      	bx	lr
 80126e4:	4603      	mov	r3, r0
 80126e6:	e7fb      	b.n	80126e0 <rclc_action_take_goal_handle+0x18>

080126e8 <rclc_action_remove_used_goal_handle>:
 80126e8:	b180      	cbz	r0, 801270c <rclc_action_remove_used_goal_handle+0x24>
 80126ea:	b179      	cbz	r1, 801270c <rclc_action_remove_used_goal_handle+0x24>
 80126ec:	68c3      	ldr	r3, [r0, #12]
 80126ee:	4299      	cmp	r1, r3
 80126f0:	d00d      	beq.n	801270e <rclc_action_remove_used_goal_handle+0x26>
 80126f2:	b12b      	cbz	r3, 8012700 <rclc_action_remove_used_goal_handle+0x18>
 80126f4:	681a      	ldr	r2, [r3, #0]
 80126f6:	4291      	cmp	r1, r2
 80126f8:	d003      	beq.n	8012702 <rclc_action_remove_used_goal_handle+0x1a>
 80126fa:	4613      	mov	r3, r2
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	d1f9      	bne.n	80126f4 <rclc_action_remove_used_goal_handle+0xc>
 8012700:	4770      	bx	lr
 8012702:	680a      	ldr	r2, [r1, #0]
 8012704:	601a      	str	r2, [r3, #0]
 8012706:	6883      	ldr	r3, [r0, #8]
 8012708:	600b      	str	r3, [r1, #0]
 801270a:	6081      	str	r1, [r0, #8]
 801270c:	4770      	bx	lr
 801270e:	680b      	ldr	r3, [r1, #0]
 8012710:	60c3      	str	r3, [r0, #12]
 8012712:	e7f8      	b.n	8012706 <rclc_action_remove_used_goal_handle+0x1e>

08012714 <rclc_action_find_goal_handle_by_uuid>:
 8012714:	b538      	push	{r3, r4, r5, lr}
 8012716:	b180      	cbz	r0, 801273a <rclc_action_find_goal_handle_by_uuid+0x26>
 8012718:	460d      	mov	r5, r1
 801271a:	b181      	cbz	r1, 801273e <rclc_action_find_goal_handle_by_uuid+0x2a>
 801271c:	68c4      	ldr	r4, [r0, #12]
 801271e:	b914      	cbnz	r4, 8012726 <rclc_action_find_goal_handle_by_uuid+0x12>
 8012720:	e009      	b.n	8012736 <rclc_action_find_goal_handle_by_uuid+0x22>
 8012722:	6824      	ldr	r4, [r4, #0]
 8012724:	b13c      	cbz	r4, 8012736 <rclc_action_find_goal_handle_by_uuid+0x22>
 8012726:	f104 0009 	add.w	r0, r4, #9
 801272a:	2210      	movs	r2, #16
 801272c:	4629      	mov	r1, r5
 801272e:	f005 fb29 	bl	8017d84 <memcmp>
 8012732:	2800      	cmp	r0, #0
 8012734:	d1f5      	bne.n	8012722 <rclc_action_find_goal_handle_by_uuid+0xe>
 8012736:	4620      	mov	r0, r4
 8012738:	bd38      	pop	{r3, r4, r5, pc}
 801273a:	4604      	mov	r4, r0
 801273c:	e7fb      	b.n	8012736 <rclc_action_find_goal_handle_by_uuid+0x22>
 801273e:	460c      	mov	r4, r1
 8012740:	e7f9      	b.n	8012736 <rclc_action_find_goal_handle_by_uuid+0x22>
 8012742:	bf00      	nop

08012744 <rclc_action_find_first_handle_by_status>:
 8012744:	b140      	cbz	r0, 8012758 <rclc_action_find_first_handle_by_status+0x14>
 8012746:	68c0      	ldr	r0, [r0, #12]
 8012748:	b910      	cbnz	r0, 8012750 <rclc_action_find_first_handle_by_status+0xc>
 801274a:	e005      	b.n	8012758 <rclc_action_find_first_handle_by_status+0x14>
 801274c:	6800      	ldr	r0, [r0, #0]
 801274e:	b118      	cbz	r0, 8012758 <rclc_action_find_first_handle_by_status+0x14>
 8012750:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8012754:	428b      	cmp	r3, r1
 8012756:	d1f9      	bne.n	801274c <rclc_action_find_first_handle_by_status+0x8>
 8012758:	4770      	bx	lr
 801275a:	bf00      	nop

0801275c <rclc_action_find_first_terminated_handle>:
 801275c:	b140      	cbz	r0, 8012770 <rclc_action_find_first_terminated_handle+0x14>
 801275e:	68c0      	ldr	r0, [r0, #12]
 8012760:	b910      	cbnz	r0, 8012768 <rclc_action_find_first_terminated_handle+0xc>
 8012762:	e005      	b.n	8012770 <rclc_action_find_first_terminated_handle+0x14>
 8012764:	6800      	ldr	r0, [r0, #0]
 8012766:	b118      	cbz	r0, 8012770 <rclc_action_find_first_terminated_handle+0x14>
 8012768:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801276c:	2b03      	cmp	r3, #3
 801276e:	ddf9      	ble.n	8012764 <rclc_action_find_first_terminated_handle+0x8>
 8012770:	4770      	bx	lr
 8012772:	bf00      	nop

08012774 <rclc_action_find_handle_by_goal_request_sequence_number>:
 8012774:	b170      	cbz	r0, 8012794 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8012776:	68c0      	ldr	r0, [r0, #12]
 8012778:	b160      	cbz	r0, 8012794 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801277a:	b410      	push	{r4}
 801277c:	e001      	b.n	8012782 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 801277e:	6800      	ldr	r0, [r0, #0]
 8012780:	b128      	cbz	r0, 801278e <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8012782:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 8012786:	4299      	cmp	r1, r3
 8012788:	bf08      	it	eq
 801278a:	4294      	cmpeq	r4, r2
 801278c:	d1f7      	bne.n	801277e <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 801278e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012792:	4770      	bx	lr
 8012794:	4770      	bx	lr
 8012796:	bf00      	nop

08012798 <rclc_action_find_handle_by_result_request_sequence_number>:
 8012798:	b170      	cbz	r0, 80127b8 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801279a:	68c0      	ldr	r0, [r0, #12]
 801279c:	b160      	cbz	r0, 80127b8 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801279e:	b410      	push	{r4}
 80127a0:	e001      	b.n	80127a6 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 80127a2:	6800      	ldr	r0, [r0, #0]
 80127a4:	b128      	cbz	r0, 80127b2 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 80127a6:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 80127aa:	4299      	cmp	r1, r3
 80127ac:	bf08      	it	eq
 80127ae:	4294      	cmpeq	r4, r2
 80127b0:	d1f7      	bne.n	80127a2 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 80127b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80127b6:	4770      	bx	lr
 80127b8:	4770      	bx	lr
 80127ba:	bf00      	nop

080127bc <rclc_action_find_handle_by_cancel_request_sequence_number>:
 80127bc:	b170      	cbz	r0, 80127dc <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 80127be:	68c0      	ldr	r0, [r0, #12]
 80127c0:	b160      	cbz	r0, 80127dc <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 80127c2:	b410      	push	{r4}
 80127c4:	e001      	b.n	80127ca <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 80127c6:	6800      	ldr	r0, [r0, #0]
 80127c8:	b128      	cbz	r0, 80127d6 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 80127ca:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 80127ce:	4299      	cmp	r1, r3
 80127d0:	bf08      	it	eq
 80127d2:	4294      	cmpeq	r4, r2
 80127d4:	d1f7      	bne.n	80127c6 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 80127d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80127da:	4770      	bx	lr
 80127dc:	4770      	bx	lr
 80127de:	bf00      	nop

080127e0 <rclc_action_find_first_handle_with_goal_response>:
 80127e0:	b140      	cbz	r0, 80127f4 <rclc_action_find_first_handle_with_goal_response+0x14>
 80127e2:	68c0      	ldr	r0, [r0, #12]
 80127e4:	b910      	cbnz	r0, 80127ec <rclc_action_find_first_handle_with_goal_response+0xc>
 80127e6:	e005      	b.n	80127f4 <rclc_action_find_first_handle_with_goal_response+0x14>
 80127e8:	6800      	ldr	r0, [r0, #0]
 80127ea:	b118      	cbz	r0, 80127f4 <rclc_action_find_first_handle_with_goal_response+0x14>
 80127ec:	f890 3020 	ldrb.w	r3, [r0, #32]
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d0f9      	beq.n	80127e8 <rclc_action_find_first_handle_with_goal_response+0x8>
 80127f4:	4770      	bx	lr
 80127f6:	bf00      	nop

080127f8 <rclc_action_find_first_handle_with_result_response>:
 80127f8:	b140      	cbz	r0, 801280c <rclc_action_find_first_handle_with_result_response+0x14>
 80127fa:	68c0      	ldr	r0, [r0, #12]
 80127fc:	b910      	cbnz	r0, 8012804 <rclc_action_find_first_handle_with_result_response+0xc>
 80127fe:	e005      	b.n	801280c <rclc_action_find_first_handle_with_result_response+0x14>
 8012800:	6800      	ldr	r0, [r0, #0]
 8012802:	b118      	cbz	r0, 801280c <rclc_action_find_first_handle_with_result_response+0x14>
 8012804:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8012808:	2b00      	cmp	r3, #0
 801280a:	d0f9      	beq.n	8012800 <rclc_action_find_first_handle_with_result_response+0x8>
 801280c:	4770      	bx	lr
 801280e:	bf00      	nop

08012810 <rclc_action_server_response_goal_request>:
 8012810:	b198      	cbz	r0, 801283a <rclc_action_server_response_goal_request+0x2a>
 8012812:	b510      	push	{r4, lr}
 8012814:	6844      	ldr	r4, [r0, #4]
 8012816:	b086      	sub	sp, #24
 8012818:	2200      	movs	r2, #0
 801281a:	e9cd 2203 	strd	r2, r2, [sp, #12]
 801281e:	460b      	mov	r3, r1
 8012820:	9205      	str	r2, [sp, #20]
 8012822:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 8012826:	aa03      	add	r2, sp, #12
 8012828:	f104 0010 	add.w	r0, r4, #16
 801282c:	f88d 300c 	strb.w	r3, [sp, #12]
 8012830:	f7ff fd4a 	bl	80122c8 <rcl_action_send_goal_response>
 8012834:	b918      	cbnz	r0, 801283e <rclc_action_server_response_goal_request+0x2e>
 8012836:	b006      	add	sp, #24
 8012838:	bd10      	pop	{r4, pc}
 801283a:	200b      	movs	r0, #11
 801283c:	4770      	bx	lr
 801283e:	9001      	str	r0, [sp, #4]
 8012840:	f7f9 f8ba 	bl	800b9b8 <rcutils_reset_error>
 8012844:	9801      	ldr	r0, [sp, #4]
 8012846:	b006      	add	sp, #24
 8012848:	bd10      	pop	{r4, pc}
 801284a:	bf00      	nop
 801284c:	0000      	movs	r0, r0
	...

08012850 <rclc_action_server_goal_cancel_accept>:
 8012850:	b310      	cbz	r0, 8012898 <rclc_action_server_goal_cancel_accept+0x48>
 8012852:	b510      	push	{r4, lr}
 8012854:	b090      	sub	sp, #64	@ 0x40
 8012856:	4604      	mov	r4, r0
 8012858:	a806      	add	r0, sp, #24
 801285a:	f7ff fefd 	bl	8012658 <rcl_action_get_zero_initialized_cancel_response>
 801285e:	2300      	movs	r3, #0
 8012860:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8012864:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8012868:	f8d4 2011 	ldr.w	r2, [r4, #17]
 801286c:	f88d 3018 	strb.w	r3, [sp, #24]
 8012870:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8012874:	f8cd d01c 	str.w	sp, [sp, #28]
 8012878:	46ec      	mov	ip, sp
 801287a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801287e:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 80128a0 <rclc_action_server_goal_cancel_accept+0x50>
 8012882:	6860      	ldr	r0, [r4, #4]
 8012884:	aa06      	add	r2, sp, #24
 8012886:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 801288a:	3010      	adds	r0, #16
 801288c:	ed8d 7b08 	vstr	d7, [sp, #32]
 8012890:	f7ff fdd2 	bl	8012438 <rcl_action_send_cancel_response>
 8012894:	b010      	add	sp, #64	@ 0x40
 8012896:	bd10      	pop	{r4, pc}
 8012898:	200b      	movs	r0, #11
 801289a:	4770      	bx	lr
 801289c:	f3af 8000 	nop.w
 80128a0:	00000001 	.word	0x00000001
 80128a4:	00000001 	.word	0x00000001

080128a8 <rclc_action_server_goal_cancel_reject>:
 80128a8:	b082      	sub	sp, #8
 80128aa:	b530      	push	{r4, r5, lr}
 80128ac:	b08b      	sub	sp, #44	@ 0x2c
 80128ae:	ac0e      	add	r4, sp, #56	@ 0x38
 80128b0:	e884 000c 	stmia.w	r4, {r2, r3}
 80128b4:	b188      	cbz	r0, 80128da <rclc_action_server_goal_cancel_reject+0x32>
 80128b6:	4604      	mov	r4, r0
 80128b8:	a801      	add	r0, sp, #4
 80128ba:	460d      	mov	r5, r1
 80128bc:	f7ff fecc 	bl	8012658 <rcl_action_get_zero_initialized_cancel_response>
 80128c0:	aa01      	add	r2, sp, #4
 80128c2:	a90e      	add	r1, sp, #56	@ 0x38
 80128c4:	f104 0010 	add.w	r0, r4, #16
 80128c8:	f88d 5004 	strb.w	r5, [sp, #4]
 80128cc:	f7ff fdb4 	bl	8012438 <rcl_action_send_cancel_response>
 80128d0:	b00b      	add	sp, #44	@ 0x2c
 80128d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80128d6:	b002      	add	sp, #8
 80128d8:	4770      	bx	lr
 80128da:	200b      	movs	r0, #11
 80128dc:	b00b      	add	sp, #44	@ 0x2c
 80128de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80128e2:	b002      	add	sp, #8
 80128e4:	4770      	bx	lr
 80128e6:	bf00      	nop

080128e8 <__atomic_load_8>:
 80128e8:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 80128ec:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 80128f0:	4a15      	ldr	r2, [pc, #84]	@ (8012948 <__atomic_load_8+0x60>)
 80128f2:	4b16      	ldr	r3, [pc, #88]	@ (801294c <__atomic_load_8+0x64>)
 80128f4:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80128f8:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 80128fc:	fb02 f101 	mul.w	r1, r2, r1
 8012900:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8012904:	fba3 2301 	umull	r2, r3, r3, r1
 8012908:	091b      	lsrs	r3, r3, #4
 801290a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801290e:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8012912:	b4d0      	push	{r4, r6, r7}
 8012914:	4c0e      	ldr	r4, [pc, #56]	@ (8012950 <__atomic_load_8+0x68>)
 8012916:	1ac9      	subs	r1, r1, r3
 8012918:	1862      	adds	r2, r4, r1
 801291a:	f04f 0c01 	mov.w	ip, #1
 801291e:	e8d2 3f4f 	ldrexb	r3, [r2]
 8012922:	e8c2 cf46 	strexb	r6, ip, [r2]
 8012926:	2e00      	cmp	r6, #0
 8012928:	d1f9      	bne.n	801291e <__atomic_load_8+0x36>
 801292a:	f3bf 8f5b 	dmb	ish
 801292e:	b2db      	uxtb	r3, r3
 8012930:	2b00      	cmp	r3, #0
 8012932:	d1f4      	bne.n	801291e <__atomic_load_8+0x36>
 8012934:	e9d0 6700 	ldrd	r6, r7, [r0]
 8012938:	f3bf 8f5b 	dmb	ish
 801293c:	5463      	strb	r3, [r4, r1]
 801293e:	4630      	mov	r0, r6
 8012940:	4639      	mov	r1, r7
 8012942:	bcd0      	pop	{r4, r6, r7}
 8012944:	4770      	bx	lr
 8012946:	bf00      	nop
 8012948:	27d4eb2d 	.word	0x27d4eb2d
 801294c:	b21642c9 	.word	0xb21642c9
 8012950:	20011244 	.word	0x20011244

08012954 <__atomic_store_8>:
 8012954:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8012958:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 801295c:	b570      	push	{r4, r5, r6, lr}
 801295e:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8012962:	4c14      	ldr	r4, [pc, #80]	@ (80129b4 <__atomic_store_8+0x60>)
 8012964:	4d14      	ldr	r5, [pc, #80]	@ (80129b8 <__atomic_store_8+0x64>)
 8012966:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 801296a:	fb04 f101 	mul.w	r1, r4, r1
 801296e:	4c13      	ldr	r4, [pc, #76]	@ (80129bc <__atomic_store_8+0x68>)
 8012970:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8012974:	fba4 4e01 	umull	r4, lr, r4, r1
 8012978:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 801297c:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 8012980:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 8012984:	eba1 0e0e 	sub.w	lr, r1, lr
 8012988:	eb05 0c0e 	add.w	ip, r5, lr
 801298c:	f04f 0401 	mov.w	r4, #1
 8012990:	e8dc 1f4f 	ldrexb	r1, [ip]
 8012994:	e8cc 4f46 	strexb	r6, r4, [ip]
 8012998:	2e00      	cmp	r6, #0
 801299a:	d1f9      	bne.n	8012990 <__atomic_store_8+0x3c>
 801299c:	f3bf 8f5b 	dmb	ish
 80129a0:	b2c9      	uxtb	r1, r1
 80129a2:	2900      	cmp	r1, #0
 80129a4:	d1f4      	bne.n	8012990 <__atomic_store_8+0x3c>
 80129a6:	e9c0 2300 	strd	r2, r3, [r0]
 80129aa:	f3bf 8f5b 	dmb	ish
 80129ae:	f805 100e 	strb.w	r1, [r5, lr]
 80129b2:	bd70      	pop	{r4, r5, r6, pc}
 80129b4:	27d4eb2d 	.word	0x27d4eb2d
 80129b8:	20011244 	.word	0x20011244
 80129bc:	b21642c9 	.word	0xb21642c9

080129c0 <__atomic_exchange_8>:
 80129c0:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 80129c4:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 80129c8:	4916      	ldr	r1, [pc, #88]	@ (8012a24 <__atomic_exchange_8+0x64>)
 80129ca:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 80129ce:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 80129d2:	fb01 fc0c 	mul.w	ip, r1, ip
 80129d6:	4914      	ldr	r1, [pc, #80]	@ (8012a28 <__atomic_exchange_8+0x68>)
 80129d8:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 80129dc:	b570      	push	{r4, r5, r6, lr}
 80129de:	4605      	mov	r5, r0
 80129e0:	fba1 010c 	umull	r0, r1, r1, ip
 80129e4:	0909      	lsrs	r1, r1, #4
 80129e6:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 80129ea:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 80129ee:	4e0f      	ldr	r6, [pc, #60]	@ (8012a2c <__atomic_exchange_8+0x6c>)
 80129f0:	ebac 0c01 	sub.w	ip, ip, r1
 80129f4:	eb06 010c 	add.w	r1, r6, ip
 80129f8:	f04f 0e01 	mov.w	lr, #1
 80129fc:	e8d1 4f4f 	ldrexb	r4, [r1]
 8012a00:	e8c1 ef40 	strexb	r0, lr, [r1]
 8012a04:	2800      	cmp	r0, #0
 8012a06:	d1f9      	bne.n	80129fc <__atomic_exchange_8+0x3c>
 8012a08:	f3bf 8f5b 	dmb	ish
 8012a0c:	b2e4      	uxtb	r4, r4
 8012a0e:	2c00      	cmp	r4, #0
 8012a10:	d1f4      	bne.n	80129fc <__atomic_exchange_8+0x3c>
 8012a12:	e9d5 0100 	ldrd	r0, r1, [r5]
 8012a16:	e9c5 2300 	strd	r2, r3, [r5]
 8012a1a:	f3bf 8f5b 	dmb	ish
 8012a1e:	f806 400c 	strb.w	r4, [r6, ip]
 8012a22:	bd70      	pop	{r4, r5, r6, pc}
 8012a24:	27d4eb2d 	.word	0x27d4eb2d
 8012a28:	b21642c9 	.word	0xb21642c9
 8012a2c:	20011244 	.word	0x20011244

08012a30 <rcutils_is_directory>:
 8012a30:	2000      	movs	r0, #0
 8012a32:	4770      	bx	lr

08012a34 <rcutils_join_path>:
 8012a34:	b082      	sub	sp, #8
 8012a36:	e88d 000c 	stmia.w	sp, {r2, r3}
 8012a3a:	2000      	movs	r0, #0
 8012a3c:	b002      	add	sp, #8
 8012a3e:	4770      	bx	lr

08012a40 <rcutils_to_native_path>:
 8012a40:	b084      	sub	sp, #16
 8012a42:	a801      	add	r0, sp, #4
 8012a44:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8012a48:	b004      	add	sp, #16
 8012a4a:	2000      	movs	r0, #0
 8012a4c:	4770      	bx	lr
 8012a4e:	bf00      	nop

08012a50 <rcutils_string_array_fini>:
 8012a50:	b320      	cbz	r0, 8012a9c <rcutils_string_array_fini+0x4c>
 8012a52:	b570      	push	{r4, r5, r6, lr}
 8012a54:	4604      	mov	r4, r0
 8012a56:	6840      	ldr	r0, [r0, #4]
 8012a58:	b1d8      	cbz	r0, 8012a92 <rcutils_string_array_fini+0x42>
 8012a5a:	f104 0008 	add.w	r0, r4, #8
 8012a5e:	f7f8 ff6f 	bl	800b940 <rcutils_allocator_is_valid>
 8012a62:	b1b8      	cbz	r0, 8012a94 <rcutils_string_array_fini+0x44>
 8012a64:	6823      	ldr	r3, [r4, #0]
 8012a66:	b1bb      	cbz	r3, 8012a98 <rcutils_string_array_fini+0x48>
 8012a68:	2500      	movs	r5, #0
 8012a6a:	6860      	ldr	r0, [r4, #4]
 8012a6c:	462e      	mov	r6, r5
 8012a6e:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8012a72:	68e3      	ldr	r3, [r4, #12]
 8012a74:	69a1      	ldr	r1, [r4, #24]
 8012a76:	4798      	blx	r3
 8012a78:	e9d4 3000 	ldrd	r3, r0, [r4]
 8012a7c:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 8012a80:	3501      	adds	r5, #1
 8012a82:	429d      	cmp	r5, r3
 8012a84:	d3f3      	bcc.n	8012a6e <rcutils_string_array_fini+0x1e>
 8012a86:	68e3      	ldr	r3, [r4, #12]
 8012a88:	69a1      	ldr	r1, [r4, #24]
 8012a8a:	4798      	blx	r3
 8012a8c:	2000      	movs	r0, #0
 8012a8e:	e9c4 0000 	strd	r0, r0, [r4]
 8012a92:	bd70      	pop	{r4, r5, r6, pc}
 8012a94:	200b      	movs	r0, #11
 8012a96:	bd70      	pop	{r4, r5, r6, pc}
 8012a98:	6860      	ldr	r0, [r4, #4]
 8012a9a:	e7f4      	b.n	8012a86 <rcutils_string_array_fini+0x36>
 8012a9c:	200b      	movs	r0, #11
 8012a9e:	4770      	bx	lr

08012aa0 <rcutils_get_zero_initialized_string_map>:
 8012aa0:	4b01      	ldr	r3, [pc, #4]	@ (8012aa8 <rcutils_get_zero_initialized_string_map+0x8>)
 8012aa2:	2000      	movs	r0, #0
 8012aa4:	6018      	str	r0, [r3, #0]
 8012aa6:	4770      	bx	lr
 8012aa8:	2001125c 	.word	0x2001125c

08012aac <rcutils_string_map_reserve>:
 8012aac:	2800      	cmp	r0, #0
 8012aae:	d05f      	beq.n	8012b70 <rcutils_string_map_reserve+0xc4>
 8012ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ab4:	460c      	mov	r4, r1
 8012ab6:	6801      	ldr	r1, [r0, #0]
 8012ab8:	b082      	sub	sp, #8
 8012aba:	4605      	mov	r5, r0
 8012abc:	b129      	cbz	r1, 8012aca <rcutils_string_map_reserve+0x1e>
 8012abe:	68cb      	ldr	r3, [r1, #12]
 8012ac0:	42a3      	cmp	r3, r4
 8012ac2:	d906      	bls.n	8012ad2 <rcutils_string_map_reserve+0x26>
 8012ac4:	461c      	mov	r4, r3
 8012ac6:	2900      	cmp	r1, #0
 8012ac8:	d1f9      	bne.n	8012abe <rcutils_string_map_reserve+0x12>
 8012aca:	201f      	movs	r0, #31
 8012acc:	b002      	add	sp, #8
 8012ace:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ad2:	688b      	ldr	r3, [r1, #8]
 8012ad4:	42a3      	cmp	r3, r4
 8012ad6:	d047      	beq.n	8012b68 <rcutils_string_map_reserve+0xbc>
 8012ad8:	6a0e      	ldr	r6, [r1, #32]
 8012ada:	2c00      	cmp	r4, #0
 8012adc:	d034      	beq.n	8012b48 <rcutils_string_map_reserve+0x9c>
 8012ade:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8012ae2:	d243      	bcs.n	8012b6c <rcutils_string_map_reserve+0xc0>
 8012ae4:	00a7      	lsls	r7, r4, #2
 8012ae6:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8012aea:	6808      	ldr	r0, [r1, #0]
 8012aec:	4632      	mov	r2, r6
 8012aee:	4639      	mov	r1, r7
 8012af0:	47c0      	blx	r8
 8012af2:	2800      	cmp	r0, #0
 8012af4:	d03a      	beq.n	8012b6c <rcutils_string_map_reserve+0xc0>
 8012af6:	682b      	ldr	r3, [r5, #0]
 8012af8:	4632      	mov	r2, r6
 8012afa:	6018      	str	r0, [r3, #0]
 8012afc:	4639      	mov	r1, r7
 8012afe:	6858      	ldr	r0, [r3, #4]
 8012b00:	47c0      	blx	r8
 8012b02:	2800      	cmp	r0, #0
 8012b04:	d032      	beq.n	8012b6c <rcutils_string_map_reserve+0xc0>
 8012b06:	682d      	ldr	r5, [r5, #0]
 8012b08:	68ab      	ldr	r3, [r5, #8]
 8012b0a:	6068      	str	r0, [r5, #4]
 8012b0c:	42a3      	cmp	r3, r4
 8012b0e:	d226      	bcs.n	8012b5e <rcutils_string_map_reserve+0xb2>
 8012b10:	682a      	ldr	r2, [r5, #0]
 8012b12:	eb00 0c07 	add.w	ip, r0, r7
 8012b16:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8012b1a:	45e6      	cmp	lr, ip
 8012b1c:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8012b20:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8012b24:	d203      	bcs.n	8012b2e <rcutils_string_map_reserve+0x82>
 8012b26:	eb02 0c07 	add.w	ip, r2, r7
 8012b2a:	4566      	cmp	r6, ip
 8012b2c:	d322      	bcc.n	8012b74 <rcutils_string_map_reserve+0xc8>
 8012b2e:	1ae3      	subs	r3, r4, r3
 8012b30:	009a      	lsls	r2, r3, #2
 8012b32:	4670      	mov	r0, lr
 8012b34:	2100      	movs	r1, #0
 8012b36:	9201      	str	r2, [sp, #4]
 8012b38:	f005 f94e 	bl	8017dd8 <memset>
 8012b3c:	9a01      	ldr	r2, [sp, #4]
 8012b3e:	2100      	movs	r1, #0
 8012b40:	4630      	mov	r0, r6
 8012b42:	f005 f949 	bl	8017dd8 <memset>
 8012b46:	e00a      	b.n	8012b5e <rcutils_string_map_reserve+0xb2>
 8012b48:	694f      	ldr	r7, [r1, #20]
 8012b4a:	6808      	ldr	r0, [r1, #0]
 8012b4c:	4631      	mov	r1, r6
 8012b4e:	47b8      	blx	r7
 8012b50:	682b      	ldr	r3, [r5, #0]
 8012b52:	4631      	mov	r1, r6
 8012b54:	6858      	ldr	r0, [r3, #4]
 8012b56:	601c      	str	r4, [r3, #0]
 8012b58:	47b8      	blx	r7
 8012b5a:	682d      	ldr	r5, [r5, #0]
 8012b5c:	606c      	str	r4, [r5, #4]
 8012b5e:	2000      	movs	r0, #0
 8012b60:	60ac      	str	r4, [r5, #8]
 8012b62:	b002      	add	sp, #8
 8012b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b68:	2000      	movs	r0, #0
 8012b6a:	e7af      	b.n	8012acc <rcutils_string_map_reserve+0x20>
 8012b6c:	200a      	movs	r0, #10
 8012b6e:	e7ad      	b.n	8012acc <rcutils_string_map_reserve+0x20>
 8012b70:	200b      	movs	r0, #11
 8012b72:	4770      	bx	lr
 8012b74:	1f0b      	subs	r3, r1, #4
 8012b76:	4418      	add	r0, r3
 8012b78:	4413      	add	r3, r2
 8012b7a:	3a04      	subs	r2, #4
 8012b7c:	4417      	add	r7, r2
 8012b7e:	2200      	movs	r2, #0
 8012b80:	f843 2f04 	str.w	r2, [r3, #4]!
 8012b84:	42bb      	cmp	r3, r7
 8012b86:	f840 2f04 	str.w	r2, [r0, #4]!
 8012b8a:	d1f9      	bne.n	8012b80 <rcutils_string_map_reserve+0xd4>
 8012b8c:	e7e7      	b.n	8012b5e <rcutils_string_map_reserve+0xb2>
 8012b8e:	bf00      	nop

08012b90 <rcutils_string_map_init>:
 8012b90:	b082      	sub	sp, #8
 8012b92:	b570      	push	{r4, r5, r6, lr}
 8012b94:	ac04      	add	r4, sp, #16
 8012b96:	e884 000c 	stmia.w	r4, {r2, r3}
 8012b9a:	b380      	cbz	r0, 8012bfe <rcutils_string_map_init+0x6e>
 8012b9c:	6806      	ldr	r6, [r0, #0]
 8012b9e:	4604      	mov	r4, r0
 8012ba0:	b12e      	cbz	r6, 8012bae <rcutils_string_map_init+0x1e>
 8012ba2:	251e      	movs	r5, #30
 8012ba4:	4628      	mov	r0, r5
 8012ba6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012baa:	b002      	add	sp, #8
 8012bac:	4770      	bx	lr
 8012bae:	a804      	add	r0, sp, #16
 8012bb0:	460d      	mov	r5, r1
 8012bb2:	f7f8 fec5 	bl	800b940 <rcutils_allocator_is_valid>
 8012bb6:	b310      	cbz	r0, 8012bfe <rcutils_string_map_init+0x6e>
 8012bb8:	9b04      	ldr	r3, [sp, #16]
 8012bba:	9908      	ldr	r1, [sp, #32]
 8012bbc:	2024      	movs	r0, #36	@ 0x24
 8012bbe:	4798      	blx	r3
 8012bc0:	6020      	str	r0, [r4, #0]
 8012bc2:	b310      	cbz	r0, 8012c0a <rcutils_string_map_init+0x7a>
 8012bc4:	f10d 0e10 	add.w	lr, sp, #16
 8012bc8:	e9c0 6600 	strd	r6, r6, [r0]
 8012bcc:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8012bd0:	f100 0c10 	add.w	ip, r0, #16
 8012bd4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012bd8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012bdc:	f8de 3000 	ldr.w	r3, [lr]
 8012be0:	f8cc 3000 	str.w	r3, [ip]
 8012be4:	4629      	mov	r1, r5
 8012be6:	4620      	mov	r0, r4
 8012be8:	f7ff ff60 	bl	8012aac <rcutils_string_map_reserve>
 8012bec:	4605      	mov	r5, r0
 8012bee:	2800      	cmp	r0, #0
 8012bf0:	d0d8      	beq.n	8012ba4 <rcutils_string_map_init+0x14>
 8012bf2:	9b05      	ldr	r3, [sp, #20]
 8012bf4:	9908      	ldr	r1, [sp, #32]
 8012bf6:	6820      	ldr	r0, [r4, #0]
 8012bf8:	4798      	blx	r3
 8012bfa:	6026      	str	r6, [r4, #0]
 8012bfc:	e7d2      	b.n	8012ba4 <rcutils_string_map_init+0x14>
 8012bfe:	250b      	movs	r5, #11
 8012c00:	4628      	mov	r0, r5
 8012c02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012c06:	b002      	add	sp, #8
 8012c08:	4770      	bx	lr
 8012c0a:	250a      	movs	r5, #10
 8012c0c:	e7ca      	b.n	8012ba4 <rcutils_string_map_init+0x14>
 8012c0e:	bf00      	nop

08012c10 <rcutils_string_map_fini>:
 8012c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c14:	b082      	sub	sp, #8
 8012c16:	2800      	cmp	r0, #0
 8012c18:	d03a      	beq.n	8012c90 <rcutils_string_map_fini+0x80>
 8012c1a:	6804      	ldr	r4, [r0, #0]
 8012c1c:	4606      	mov	r6, r0
 8012c1e:	2c00      	cmp	r4, #0
 8012c20:	d032      	beq.n	8012c88 <rcutils_string_map_fini+0x78>
 8012c22:	68a3      	ldr	r3, [r4, #8]
 8012c24:	b32b      	cbz	r3, 8012c72 <rcutils_string_map_fini+0x62>
 8012c26:	2500      	movs	r5, #0
 8012c28:	6822      	ldr	r2, [r4, #0]
 8012c2a:	462f      	mov	r7, r5
 8012c2c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8012c30:	b1e0      	cbz	r0, 8012c6c <rcutils_string_map_fini+0x5c>
 8012c32:	6a21      	ldr	r1, [r4, #32]
 8012c34:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8012c38:	9101      	str	r1, [sp, #4]
 8012c3a:	47c0      	blx	r8
 8012c3c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8012c40:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8012c44:	9901      	ldr	r1, [sp, #4]
 8012c46:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012c4a:	47c0      	blx	r8
 8012c4c:	68e3      	ldr	r3, [r4, #12]
 8012c4e:	6862      	ldr	r2, [r4, #4]
 8012c50:	3b01      	subs	r3, #1
 8012c52:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8012c56:	60e3      	str	r3, [r4, #12]
 8012c58:	6834      	ldr	r4, [r6, #0]
 8012c5a:	68a3      	ldr	r3, [r4, #8]
 8012c5c:	3501      	adds	r5, #1
 8012c5e:	429d      	cmp	r5, r3
 8012c60:	d207      	bcs.n	8012c72 <rcutils_string_map_fini+0x62>
 8012c62:	6822      	ldr	r2, [r4, #0]
 8012c64:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8012c68:	2800      	cmp	r0, #0
 8012c6a:	d1e2      	bne.n	8012c32 <rcutils_string_map_fini+0x22>
 8012c6c:	3501      	adds	r5, #1
 8012c6e:	429d      	cmp	r5, r3
 8012c70:	d3dc      	bcc.n	8012c2c <rcutils_string_map_fini+0x1c>
 8012c72:	2100      	movs	r1, #0
 8012c74:	4630      	mov	r0, r6
 8012c76:	f7ff ff19 	bl	8012aac <rcutils_string_map_reserve>
 8012c7a:	4604      	mov	r4, r0
 8012c7c:	b920      	cbnz	r0, 8012c88 <rcutils_string_map_fini+0x78>
 8012c7e:	6830      	ldr	r0, [r6, #0]
 8012c80:	6943      	ldr	r3, [r0, #20]
 8012c82:	6a01      	ldr	r1, [r0, #32]
 8012c84:	4798      	blx	r3
 8012c86:	6034      	str	r4, [r6, #0]
 8012c88:	4620      	mov	r0, r4
 8012c8a:	b002      	add	sp, #8
 8012c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c90:	240b      	movs	r4, #11
 8012c92:	4620      	mov	r0, r4
 8012c94:	b002      	add	sp, #8
 8012c96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c9a:	bf00      	nop

08012c9c <rcutils_string_map_getn>:
 8012c9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ca0:	b300      	cbz	r0, 8012ce4 <rcutils_string_map_getn+0x48>
 8012ca2:	6807      	ldr	r7, [r0, #0]
 8012ca4:	b1ff      	cbz	r7, 8012ce6 <rcutils_string_map_getn+0x4a>
 8012ca6:	4688      	mov	r8, r1
 8012ca8:	b1e1      	cbz	r1, 8012ce4 <rcutils_string_map_getn+0x48>
 8012caa:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8012cae:	683e      	ldr	r6, [r7, #0]
 8012cb0:	f1ba 0f00 	cmp.w	sl, #0
 8012cb4:	d016      	beq.n	8012ce4 <rcutils_string_map_getn+0x48>
 8012cb6:	4691      	mov	r9, r2
 8012cb8:	3e04      	subs	r6, #4
 8012cba:	2400      	movs	r4, #0
 8012cbc:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8012cc0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8012cc4:	4628      	mov	r0, r5
 8012cc6:	3401      	adds	r4, #1
 8012cc8:	b155      	cbz	r5, 8012ce0 <rcutils_string_map_getn+0x44>
 8012cca:	f7ed fb01 	bl	80002d0 <strlen>
 8012cce:	4548      	cmp	r0, r9
 8012cd0:	4602      	mov	r2, r0
 8012cd2:	4629      	mov	r1, r5
 8012cd4:	bf38      	it	cc
 8012cd6:	464a      	movcc	r2, r9
 8012cd8:	4640      	mov	r0, r8
 8012cda:	f005 f892 	bl	8017e02 <strncmp>
 8012cde:	b128      	cbz	r0, 8012cec <rcutils_string_map_getn+0x50>
 8012ce0:	45a2      	cmp	sl, r4
 8012ce2:	d1eb      	bne.n	8012cbc <rcutils_string_map_getn+0x20>
 8012ce4:	2700      	movs	r7, #0
 8012ce6:	4638      	mov	r0, r7
 8012ce8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	f853 700b 	ldr.w	r7, [r3, fp]
 8012cf2:	4638      	mov	r0, r7
 8012cf4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012cf8 <rmw_get_zero_initialized_context>:
 8012cf8:	b510      	push	{r4, lr}
 8012cfa:	4604      	mov	r4, r0
 8012cfc:	3010      	adds	r0, #16
 8012cfe:	f000 f80b 	bl	8012d18 <rmw_get_zero_initialized_init_options>
 8012d02:	2300      	movs	r3, #0
 8012d04:	2000      	movs	r0, #0
 8012d06:	2100      	movs	r1, #0
 8012d08:	e9c4 0100 	strd	r0, r1, [r4]
 8012d0c:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 8012d10:	60a3      	str	r3, [r4, #8]
 8012d12:	4620      	mov	r0, r4
 8012d14:	bd10      	pop	{r4, pc}
 8012d16:	bf00      	nop

08012d18 <rmw_get_zero_initialized_init_options>:
 8012d18:	b510      	push	{r4, lr}
 8012d1a:	2238      	movs	r2, #56	@ 0x38
 8012d1c:	4604      	mov	r4, r0
 8012d1e:	2100      	movs	r1, #0
 8012d20:	f005 f85a 	bl	8017dd8 <memset>
 8012d24:	f104 0010 	add.w	r0, r4, #16
 8012d28:	f000 f806 	bl	8012d38 <rmw_get_default_security_options>
 8012d2c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012d30:	60e3      	str	r3, [r4, #12]
 8012d32:	4620      	mov	r0, r4
 8012d34:	bd10      	pop	{r4, pc}
 8012d36:	bf00      	nop

08012d38 <rmw_get_default_security_options>:
 8012d38:	2200      	movs	r2, #0
 8012d3a:	7002      	strb	r2, [r0, #0]
 8012d3c:	6042      	str	r2, [r0, #4]
 8012d3e:	4770      	bx	lr

08012d40 <rmw_time_equal>:
 8012d40:	b4f0      	push	{r4, r5, r6, r7}
 8012d42:	b084      	sub	sp, #16
 8012d44:	ac04      	add	r4, sp, #16
 8012d46:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8012d4a:	4603      	mov	r3, r0
 8012d4c:	4924      	ldr	r1, [pc, #144]	@ (8012de0 <rmw_time_equal+0xa0>)
 8012d4e:	9e03      	ldr	r6, [sp, #12]
 8012d50:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8012d54:	2202      	movs	r2, #2
 8012d56:	4299      	cmp	r1, r3
 8012d58:	41aa      	sbcs	r2, r5
 8012d5a:	d330      	bcc.n	8012dbe <rmw_time_equal+0x7e>
 8012d5c:	4c21      	ldr	r4, [pc, #132]	@ (8012de4 <rmw_time_equal+0xa4>)
 8012d5e:	fba3 3204 	umull	r3, r2, r3, r4
 8012d62:	fb04 2205 	mla	r2, r4, r5, r2
 8012d66:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012d6a:	43dd      	mvns	r5, r3
 8012d6c:	1a8c      	subs	r4, r1, r2
 8012d6e:	4285      	cmp	r5, r0
 8012d70:	41b4      	sbcs	r4, r6
 8012d72:	d332      	bcc.n	8012dda <rmw_time_equal+0x9a>
 8012d74:	eb10 0c03 	adds.w	ip, r0, r3
 8012d78:	eb42 0106 	adc.w	r1, r2, r6
 8012d7c:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8012d80:	4817      	ldr	r0, [pc, #92]	@ (8012de0 <rmw_time_equal+0xa0>)
 8012d82:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8012d84:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8012d86:	2202      	movs	r2, #2
 8012d88:	4298      	cmp	r0, r3
 8012d8a:	41b2      	sbcs	r2, r6
 8012d8c:	d31c      	bcc.n	8012dc8 <rmw_time_equal+0x88>
 8012d8e:	4c15      	ldr	r4, [pc, #84]	@ (8012de4 <rmw_time_equal+0xa4>)
 8012d90:	fba3 3204 	umull	r3, r2, r3, r4
 8012d94:	fb04 2206 	mla	r2, r4, r6, r2
 8012d98:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8012d9c:	43de      	mvns	r6, r3
 8012d9e:	1a84      	subs	r4, r0, r2
 8012da0:	42ae      	cmp	r6, r5
 8012da2:	41bc      	sbcs	r4, r7
 8012da4:	d315      	bcc.n	8012dd2 <rmw_time_equal+0x92>
 8012da6:	195b      	adds	r3, r3, r5
 8012da8:	eb42 0207 	adc.w	r2, r2, r7
 8012dac:	428a      	cmp	r2, r1
 8012dae:	bf08      	it	eq
 8012db0:	4563      	cmpeq	r3, ip
 8012db2:	bf0c      	ite	eq
 8012db4:	2001      	moveq	r0, #1
 8012db6:	2000      	movne	r0, #0
 8012db8:	b004      	add	sp, #16
 8012dba:	bcf0      	pop	{r4, r5, r6, r7}
 8012dbc:	4770      	bx	lr
 8012dbe:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8012dc2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012dc6:	e7d9      	b.n	8012d7c <rmw_time_equal+0x3c>
 8012dc8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012dcc:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8012dd0:	e7ec      	b.n	8012dac <rmw_time_equal+0x6c>
 8012dd2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012dd6:	4602      	mov	r2, r0
 8012dd8:	e7e8      	b.n	8012dac <rmw_time_equal+0x6c>
 8012dda:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8012dde:	e7cd      	b.n	8012d7c <rmw_time_equal+0x3c>
 8012de0:	25c17d04 	.word	0x25c17d04
 8012de4:	3b9aca00 	.word	0x3b9aca00

08012de8 <rmw_time_total_nsec>:
 8012de8:	b470      	push	{r4, r5, r6}
 8012dea:	b085      	sub	sp, #20
 8012dec:	ac04      	add	r4, sp, #16
 8012dee:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8012df2:	4603      	mov	r3, r0
 8012df4:	4912      	ldr	r1, [pc, #72]	@ (8012e40 <rmw_time_total_nsec+0x58>)
 8012df6:	9e03      	ldr	r6, [sp, #12]
 8012df8:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8012dfc:	2202      	movs	r2, #2
 8012dfe:	4299      	cmp	r1, r3
 8012e00:	41aa      	sbcs	r2, r5
 8012e02:	d311      	bcc.n	8012e28 <rmw_time_total_nsec+0x40>
 8012e04:	4c0f      	ldr	r4, [pc, #60]	@ (8012e44 <rmw_time_total_nsec+0x5c>)
 8012e06:	fba3 3204 	umull	r3, r2, r3, r4
 8012e0a:	fb04 2205 	mla	r2, r4, r5, r2
 8012e0e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012e12:	43dd      	mvns	r5, r3
 8012e14:	1a8c      	subs	r4, r1, r2
 8012e16:	4285      	cmp	r5, r0
 8012e18:	41b4      	sbcs	r4, r6
 8012e1a:	d30c      	bcc.n	8012e36 <rmw_time_total_nsec+0x4e>
 8012e1c:	1818      	adds	r0, r3, r0
 8012e1e:	eb42 0106 	adc.w	r1, r2, r6
 8012e22:	b005      	add	sp, #20
 8012e24:	bc70      	pop	{r4, r5, r6}
 8012e26:	4770      	bx	lr
 8012e28:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012e2c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012e30:	b005      	add	sp, #20
 8012e32:	bc70      	pop	{r4, r5, r6}
 8012e34:	4770      	bx	lr
 8012e36:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012e3a:	b005      	add	sp, #20
 8012e3c:	bc70      	pop	{r4, r5, r6}
 8012e3e:	4770      	bx	lr
 8012e40:	25c17d04 	.word	0x25c17d04
 8012e44:	3b9aca00 	.word	0x3b9aca00

08012e48 <rmw_validate_full_topic_name>:
 8012e48:	2800      	cmp	r0, #0
 8012e4a:	d057      	beq.n	8012efc <rmw_validate_full_topic_name+0xb4>
 8012e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e50:	460d      	mov	r5, r1
 8012e52:	2900      	cmp	r1, #0
 8012e54:	d054      	beq.n	8012f00 <rmw_validate_full_topic_name+0xb8>
 8012e56:	4616      	mov	r6, r2
 8012e58:	4604      	mov	r4, r0
 8012e5a:	f7ed fa39 	bl	80002d0 <strlen>
 8012e5e:	b148      	cbz	r0, 8012e74 <rmw_validate_full_topic_name+0x2c>
 8012e60:	7823      	ldrb	r3, [r4, #0]
 8012e62:	2b2f      	cmp	r3, #47	@ 0x2f
 8012e64:	d00d      	beq.n	8012e82 <rmw_validate_full_topic_name+0x3a>
 8012e66:	2302      	movs	r3, #2
 8012e68:	602b      	str	r3, [r5, #0]
 8012e6a:	b13e      	cbz	r6, 8012e7c <rmw_validate_full_topic_name+0x34>
 8012e6c:	2000      	movs	r0, #0
 8012e6e:	6030      	str	r0, [r6, #0]
 8012e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e74:	2301      	movs	r3, #1
 8012e76:	602b      	str	r3, [r5, #0]
 8012e78:	2e00      	cmp	r6, #0
 8012e7a:	d1f7      	bne.n	8012e6c <rmw_validate_full_topic_name+0x24>
 8012e7c:	2000      	movs	r0, #0
 8012e7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e82:	1e43      	subs	r3, r0, #1
 8012e84:	5ce2      	ldrb	r2, [r4, r3]
 8012e86:	2a2f      	cmp	r2, #47	@ 0x2f
 8012e88:	d03c      	beq.n	8012f04 <rmw_validate_full_topic_name+0xbc>
 8012e8a:	1e63      	subs	r3, r4, #1
 8012e8c:	eb03 0800 	add.w	r8, r3, r0
 8012e90:	f1c4 0e01 	rsb	lr, r4, #1
 8012e94:	eb0e 0703 	add.w	r7, lr, r3
 8012e98:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8012e9c:	f021 0220 	bic.w	r2, r1, #32
 8012ea0:	3a41      	subs	r2, #65	@ 0x41
 8012ea2:	2a19      	cmp	r2, #25
 8012ea4:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 8012ea8:	d90b      	bls.n	8012ec2 <rmw_validate_full_topic_name+0x7a>
 8012eaa:	295f      	cmp	r1, #95	@ 0x5f
 8012eac:	d009      	beq.n	8012ec2 <rmw_validate_full_topic_name+0x7a>
 8012eae:	f1bc 0f0a 	cmp.w	ip, #10
 8012eb2:	d906      	bls.n	8012ec2 <rmw_validate_full_topic_name+0x7a>
 8012eb4:	2304      	movs	r3, #4
 8012eb6:	602b      	str	r3, [r5, #0]
 8012eb8:	2e00      	cmp	r6, #0
 8012eba:	d0df      	beq.n	8012e7c <rmw_validate_full_topic_name+0x34>
 8012ebc:	6037      	str	r7, [r6, #0]
 8012ebe:	2000      	movs	r0, #0
 8012ec0:	e7d6      	b.n	8012e70 <rmw_validate_full_topic_name+0x28>
 8012ec2:	4543      	cmp	r3, r8
 8012ec4:	d1e6      	bne.n	8012e94 <rmw_validate_full_topic_name+0x4c>
 8012ec6:	4f1a      	ldr	r7, [pc, #104]	@ (8012f30 <rmw_validate_full_topic_name+0xe8>)
 8012ec8:	2301      	movs	r3, #1
 8012eca:	e004      	b.n	8012ed6 <rmw_validate_full_topic_name+0x8e>
 8012ecc:	4298      	cmp	r0, r3
 8012ece:	f104 0401 	add.w	r4, r4, #1
 8012ed2:	d91c      	bls.n	8012f0e <rmw_validate_full_topic_name+0xc6>
 8012ed4:	4613      	mov	r3, r2
 8012ed6:	4298      	cmp	r0, r3
 8012ed8:	f103 0201 	add.w	r2, r3, #1
 8012edc:	d0f6      	beq.n	8012ecc <rmw_validate_full_topic_name+0x84>
 8012ede:	7821      	ldrb	r1, [r4, #0]
 8012ee0:	292f      	cmp	r1, #47	@ 0x2f
 8012ee2:	d1f3      	bne.n	8012ecc <rmw_validate_full_topic_name+0x84>
 8012ee4:	7861      	ldrb	r1, [r4, #1]
 8012ee6:	292f      	cmp	r1, #47	@ 0x2f
 8012ee8:	d01c      	beq.n	8012f24 <rmw_validate_full_topic_name+0xdc>
 8012eea:	5dc9      	ldrb	r1, [r1, r7]
 8012eec:	0749      	lsls	r1, r1, #29
 8012eee:	d5ed      	bpl.n	8012ecc <rmw_validate_full_topic_name+0x84>
 8012ef0:	2206      	movs	r2, #6
 8012ef2:	602a      	str	r2, [r5, #0]
 8012ef4:	2e00      	cmp	r6, #0
 8012ef6:	d0c1      	beq.n	8012e7c <rmw_validate_full_topic_name+0x34>
 8012ef8:	6033      	str	r3, [r6, #0]
 8012efa:	e7bf      	b.n	8012e7c <rmw_validate_full_topic_name+0x34>
 8012efc:	200b      	movs	r0, #11
 8012efe:	4770      	bx	lr
 8012f00:	200b      	movs	r0, #11
 8012f02:	e7b5      	b.n	8012e70 <rmw_validate_full_topic_name+0x28>
 8012f04:	2203      	movs	r2, #3
 8012f06:	602a      	str	r2, [r5, #0]
 8012f08:	2e00      	cmp	r6, #0
 8012f0a:	d1f5      	bne.n	8012ef8 <rmw_validate_full_topic_name+0xb0>
 8012f0c:	e7b6      	b.n	8012e7c <rmw_validate_full_topic_name+0x34>
 8012f0e:	28f7      	cmp	r0, #247	@ 0xf7
 8012f10:	d802      	bhi.n	8012f18 <rmw_validate_full_topic_name+0xd0>
 8012f12:	2000      	movs	r0, #0
 8012f14:	6028      	str	r0, [r5, #0]
 8012f16:	e7ab      	b.n	8012e70 <rmw_validate_full_topic_name+0x28>
 8012f18:	2307      	movs	r3, #7
 8012f1a:	602b      	str	r3, [r5, #0]
 8012f1c:	2e00      	cmp	r6, #0
 8012f1e:	d0ad      	beq.n	8012e7c <rmw_validate_full_topic_name+0x34>
 8012f20:	23f6      	movs	r3, #246	@ 0xf6
 8012f22:	e7e9      	b.n	8012ef8 <rmw_validate_full_topic_name+0xb0>
 8012f24:	2205      	movs	r2, #5
 8012f26:	602a      	str	r2, [r5, #0]
 8012f28:	2e00      	cmp	r6, #0
 8012f2a:	d1e5      	bne.n	8012ef8 <rmw_validate_full_topic_name+0xb0>
 8012f2c:	e7a6      	b.n	8012e7c <rmw_validate_full_topic_name+0x34>
 8012f2e:	bf00      	nop
 8012f30:	0801ac6e 	.word	0x0801ac6e

08012f34 <get_memory>:
 8012f34:	4603      	mov	r3, r0
 8012f36:	6840      	ldr	r0, [r0, #4]
 8012f38:	b158      	cbz	r0, 8012f52 <get_memory+0x1e>
 8012f3a:	6842      	ldr	r2, [r0, #4]
 8012f3c:	605a      	str	r2, [r3, #4]
 8012f3e:	b10a      	cbz	r2, 8012f44 <get_memory+0x10>
 8012f40:	2100      	movs	r1, #0
 8012f42:	6011      	str	r1, [r2, #0]
 8012f44:	681a      	ldr	r2, [r3, #0]
 8012f46:	6042      	str	r2, [r0, #4]
 8012f48:	b102      	cbz	r2, 8012f4c <get_memory+0x18>
 8012f4a:	6010      	str	r0, [r2, #0]
 8012f4c:	2200      	movs	r2, #0
 8012f4e:	6002      	str	r2, [r0, #0]
 8012f50:	6018      	str	r0, [r3, #0]
 8012f52:	4770      	bx	lr

08012f54 <put_memory>:
 8012f54:	680b      	ldr	r3, [r1, #0]
 8012f56:	b10b      	cbz	r3, 8012f5c <put_memory+0x8>
 8012f58:	684a      	ldr	r2, [r1, #4]
 8012f5a:	605a      	str	r2, [r3, #4]
 8012f5c:	684a      	ldr	r2, [r1, #4]
 8012f5e:	b102      	cbz	r2, 8012f62 <put_memory+0xe>
 8012f60:	6013      	str	r3, [r2, #0]
 8012f62:	6803      	ldr	r3, [r0, #0]
 8012f64:	428b      	cmp	r3, r1
 8012f66:	6843      	ldr	r3, [r0, #4]
 8012f68:	bf08      	it	eq
 8012f6a:	6002      	streq	r2, [r0, #0]
 8012f6c:	604b      	str	r3, [r1, #4]
 8012f6e:	b103      	cbz	r3, 8012f72 <put_memory+0x1e>
 8012f70:	6019      	str	r1, [r3, #0]
 8012f72:	2300      	movs	r3, #0
 8012f74:	600b      	str	r3, [r1, #0]
 8012f76:	6041      	str	r1, [r0, #4]
 8012f78:	4770      	bx	lr
 8012f7a:	bf00      	nop

08012f7c <rmw_destroy_client>:
 8012f7c:	b570      	push	{r4, r5, r6, lr}
 8012f7e:	b128      	cbz	r0, 8012f8c <rmw_destroy_client+0x10>
 8012f80:	4604      	mov	r4, r0
 8012f82:	6800      	ldr	r0, [r0, #0]
 8012f84:	460d      	mov	r5, r1
 8012f86:	f7f9 ffe1 	bl	800cf4c <is_uxrce_rmw_identifier_valid>
 8012f8a:	b910      	cbnz	r0, 8012f92 <rmw_destroy_client+0x16>
 8012f8c:	2401      	movs	r4, #1
 8012f8e:	4620      	mov	r0, r4
 8012f90:	bd70      	pop	{r4, r5, r6, pc}
 8012f92:	6863      	ldr	r3, [r4, #4]
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	d0f9      	beq.n	8012f8c <rmw_destroy_client+0x10>
 8012f98:	2d00      	cmp	r5, #0
 8012f9a:	d0f7      	beq.n	8012f8c <rmw_destroy_client+0x10>
 8012f9c:	6828      	ldr	r0, [r5, #0]
 8012f9e:	f7f9 ffd5 	bl	800cf4c <is_uxrce_rmw_identifier_valid>
 8012fa2:	2800      	cmp	r0, #0
 8012fa4:	d0f2      	beq.n	8012f8c <rmw_destroy_client+0x10>
 8012fa6:	686e      	ldr	r6, [r5, #4]
 8012fa8:	2e00      	cmp	r6, #0
 8012faa:	d0ef      	beq.n	8012f8c <rmw_destroy_client+0x10>
 8012fac:	6864      	ldr	r4, [r4, #4]
 8012fae:	6932      	ldr	r2, [r6, #16]
 8012fb0:	6920      	ldr	r0, [r4, #16]
 8012fb2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8012fb6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012fba:	6819      	ldr	r1, [r3, #0]
 8012fbc:	f7fa fbf8 	bl	800d7b0 <uxr_buffer_cancel_data>
 8012fc0:	4602      	mov	r2, r0
 8012fc2:	6920      	ldr	r0, [r4, #16]
 8012fc4:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8012fc8:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8012fcc:	f7f9 ff3e 	bl	800ce4c <run_xrce_session>
 8012fd0:	6920      	ldr	r0, [r4, #16]
 8012fd2:	6932      	ldr	r2, [r6, #16]
 8012fd4:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8012fd8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012fdc:	6819      	ldr	r1, [r3, #0]
 8012fde:	f7fa f97b 	bl	800d2d8 <uxr_buffer_delete_entity>
 8012fe2:	4602      	mov	r2, r0
 8012fe4:	6920      	ldr	r0, [r4, #16]
 8012fe6:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8012fea:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8012fee:	f7f9 ff2d 	bl	800ce4c <run_xrce_session>
 8012ff2:	2800      	cmp	r0, #0
 8012ff4:	4628      	mov	r0, r5
 8012ff6:	bf14      	ite	ne
 8012ff8:	2400      	movne	r4, #0
 8012ffa:	2402      	moveq	r4, #2
 8012ffc:	f7f9 fe0e 	bl	800cc1c <rmw_uxrce_fini_client_memory>
 8013000:	e7c5      	b.n	8012f8e <rmw_destroy_client+0x12>
 8013002:	bf00      	nop

08013004 <rmw_get_implementation_identifier>:
 8013004:	4b01      	ldr	r3, [pc, #4]	@ (801300c <rmw_get_implementation_identifier+0x8>)
 8013006:	6818      	ldr	r0, [r3, #0]
 8013008:	4770      	bx	lr
 801300a:	bf00      	nop
 801300c:	0801a8bc 	.word	0x0801a8bc

08013010 <rmw_create_guard_condition>:
 8013010:	b538      	push	{r3, r4, r5, lr}
 8013012:	4605      	mov	r5, r0
 8013014:	4807      	ldr	r0, [pc, #28]	@ (8013034 <rmw_create_guard_condition+0x24>)
 8013016:	f7ff ff8d 	bl	8012f34 <get_memory>
 801301a:	b148      	cbz	r0, 8013030 <rmw_create_guard_condition+0x20>
 801301c:	6884      	ldr	r4, [r0, #8]
 801301e:	2300      	movs	r3, #0
 8013020:	7423      	strb	r3, [r4, #16]
 8013022:	61e5      	str	r5, [r4, #28]
 8013024:	f7ff ffee 	bl	8013004 <rmw_get_implementation_identifier>
 8013028:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801302c:	f104 0014 	add.w	r0, r4, #20
 8013030:	bd38      	pop	{r3, r4, r5, pc}
 8013032:	bf00      	nop
 8013034:	2001118c 	.word	0x2001118c

08013038 <rmw_destroy_guard_condition>:
 8013038:	b508      	push	{r3, lr}
 801303a:	4b08      	ldr	r3, [pc, #32]	@ (801305c <rmw_destroy_guard_condition+0x24>)
 801303c:	6819      	ldr	r1, [r3, #0]
 801303e:	b911      	cbnz	r1, 8013046 <rmw_destroy_guard_condition+0xe>
 8013040:	e00a      	b.n	8013058 <rmw_destroy_guard_condition+0x20>
 8013042:	6849      	ldr	r1, [r1, #4]
 8013044:	b141      	cbz	r1, 8013058 <rmw_destroy_guard_condition+0x20>
 8013046:	688b      	ldr	r3, [r1, #8]
 8013048:	3314      	adds	r3, #20
 801304a:	4298      	cmp	r0, r3
 801304c:	d1f9      	bne.n	8013042 <rmw_destroy_guard_condition+0xa>
 801304e:	4803      	ldr	r0, [pc, #12]	@ (801305c <rmw_destroy_guard_condition+0x24>)
 8013050:	f7ff ff80 	bl	8012f54 <put_memory>
 8013054:	2000      	movs	r0, #0
 8013056:	bd08      	pop	{r3, pc}
 8013058:	2001      	movs	r0, #1
 801305a:	bd08      	pop	{r3, pc}
 801305c:	2001118c 	.word	0x2001118c

08013060 <rmw_init_options_init>:
 8013060:	b084      	sub	sp, #16
 8013062:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013064:	b083      	sub	sp, #12
 8013066:	ad09      	add	r5, sp, #36	@ 0x24
 8013068:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 801306c:	b130      	cbz	r0, 801307c <rmw_init_options_init+0x1c>
 801306e:	4604      	mov	r4, r0
 8013070:	4628      	mov	r0, r5
 8013072:	f7f8 fc65 	bl	800b940 <rcutils_allocator_is_valid>
 8013076:	b108      	cbz	r0, 801307c <rmw_init_options_init+0x1c>
 8013078:	68a6      	ldr	r6, [r4, #8]
 801307a:	b12e      	cbz	r6, 8013088 <rmw_init_options_init+0x28>
 801307c:	200b      	movs	r0, #11
 801307e:	b003      	add	sp, #12
 8013080:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013084:	b004      	add	sp, #16
 8013086:	4770      	bx	lr
 8013088:	2200      	movs	r2, #0
 801308a:	2300      	movs	r3, #0
 801308c:	e9c4 2300 	strd	r2, r3, [r4]
 8013090:	4b22      	ldr	r3, [pc, #136]	@ (801311c <rmw_init_options_init+0xbc>)
 8013092:	f8df e098 	ldr.w	lr, [pc, #152]	@ 801312c <rmw_init_options_init+0xcc>
 8013096:	681b      	ldr	r3, [r3, #0]
 8013098:	60a3      	str	r3, [r4, #8]
 801309a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801309c:	f104 0c20 	add.w	ip, r4, #32
 80130a0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80130a4:	466f      	mov	r7, sp
 80130a6:	682b      	ldr	r3, [r5, #0]
 80130a8:	f8cc 3000 	str.w	r3, [ip]
 80130ac:	4638      	mov	r0, r7
 80130ae:	f8c4 e01c 	str.w	lr, [r4, #28]
 80130b2:	60e6      	str	r6, [r4, #12]
 80130b4:	f7ff fe40 	bl	8012d38 <rmw_get_default_security_options>
 80130b8:	e897 0003 	ldmia.w	r7, {r0, r1}
 80130bc:	f104 0310 	add.w	r3, r4, #16
 80130c0:	e883 0003 	stmia.w	r3, {r0, r1}
 80130c4:	2203      	movs	r2, #3
 80130c6:	4816      	ldr	r0, [pc, #88]	@ (8013120 <rmw_init_options_init+0xc0>)
 80130c8:	4916      	ldr	r1, [pc, #88]	@ (8013124 <rmw_init_options_init+0xc4>)
 80130ca:	7626      	strb	r6, [r4, #24]
 80130cc:	f7f9 fce6 	bl	800ca9c <rmw_uxrce_init_init_options_impl_memory>
 80130d0:	4813      	ldr	r0, [pc, #76]	@ (8013120 <rmw_init_options_init+0xc0>)
 80130d2:	f7ff ff2f 	bl	8012f34 <get_memory>
 80130d6:	b1f0      	cbz	r0, 8013116 <rmw_init_options_init+0xb6>
 80130d8:	4a13      	ldr	r2, [pc, #76]	@ (8013128 <rmw_init_options_init+0xc8>)
 80130da:	6883      	ldr	r3, [r0, #8]
 80130dc:	6851      	ldr	r1, [r2, #4]
 80130de:	7810      	ldrb	r0, [r2, #0]
 80130e0:	6363      	str	r3, [r4, #52]	@ 0x34
 80130e2:	7418      	strb	r0, [r3, #16]
 80130e4:	6159      	str	r1, [r3, #20]
 80130e6:	68d1      	ldr	r1, [r2, #12]
 80130e8:	61d9      	str	r1, [r3, #28]
 80130ea:	6911      	ldr	r1, [r2, #16]
 80130ec:	6219      	str	r1, [r3, #32]
 80130ee:	6951      	ldr	r1, [r2, #20]
 80130f0:	6892      	ldr	r2, [r2, #8]
 80130f2:	619a      	str	r2, [r3, #24]
 80130f4:	6259      	str	r1, [r3, #36]	@ 0x24
 80130f6:	f7fb fe7b 	bl	800edf0 <uxr_nanos>
 80130fa:	f003 fe3f 	bl	8016d7c <srand>
 80130fe:	f003 fe6b 	bl	8016dd8 <rand>
 8013102:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8013104:	6298      	str	r0, [r3, #40]	@ 0x28
 8013106:	2800      	cmp	r0, #0
 8013108:	d0f9      	beq.n	80130fe <rmw_init_options_init+0x9e>
 801310a:	2000      	movs	r0, #0
 801310c:	b003      	add	sp, #12
 801310e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013112:	b004      	add	sp, #16
 8013114:	4770      	bx	lr
 8013116:	2001      	movs	r0, #1
 8013118:	e7b1      	b.n	801307e <rmw_init_options_init+0x1e>
 801311a:	bf00      	nop
 801311c:	0801a8bc 	.word	0x0801a8bc
 8013120:	2001119c 	.word	0x2001119c
 8013124:	2000ca38 	.word	0x2000ca38
 8013128:	2000c884 	.word	0x2000c884
 801312c:	08019fcc 	.word	0x08019fcc

08013130 <rmw_init_options_copy>:
 8013130:	b570      	push	{r4, r5, r6, lr}
 8013132:	b158      	cbz	r0, 801314c <rmw_init_options_copy+0x1c>
 8013134:	460d      	mov	r5, r1
 8013136:	b149      	cbz	r1, 801314c <rmw_init_options_copy+0x1c>
 8013138:	4604      	mov	r4, r0
 801313a:	6880      	ldr	r0, [r0, #8]
 801313c:	b120      	cbz	r0, 8013148 <rmw_init_options_copy+0x18>
 801313e:	4b1e      	ldr	r3, [pc, #120]	@ (80131b8 <rmw_init_options_copy+0x88>)
 8013140:	6819      	ldr	r1, [r3, #0]
 8013142:	f7ed f865 	bl	8000210 <strcmp>
 8013146:	bb90      	cbnz	r0, 80131ae <rmw_init_options_copy+0x7e>
 8013148:	68ab      	ldr	r3, [r5, #8]
 801314a:	b113      	cbz	r3, 8013152 <rmw_init_options_copy+0x22>
 801314c:	250b      	movs	r5, #11
 801314e:	4628      	mov	r0, r5
 8013150:	bd70      	pop	{r4, r5, r6, pc}
 8013152:	4623      	mov	r3, r4
 8013154:	462a      	mov	r2, r5
 8013156:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 801315a:	f8d3 c000 	ldr.w	ip, [r3]
 801315e:	6858      	ldr	r0, [r3, #4]
 8013160:	6899      	ldr	r1, [r3, #8]
 8013162:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8013166:	f8c2 e00c 	str.w	lr, [r2, #12]
 801316a:	3310      	adds	r3, #16
 801316c:	42b3      	cmp	r3, r6
 801316e:	f8c2 c000 	str.w	ip, [r2]
 8013172:	6050      	str	r0, [r2, #4]
 8013174:	6091      	str	r1, [r2, #8]
 8013176:	f102 0210 	add.w	r2, r2, #16
 801317a:	d1ee      	bne.n	801315a <rmw_init_options_copy+0x2a>
 801317c:	6819      	ldr	r1, [r3, #0]
 801317e:	685b      	ldr	r3, [r3, #4]
 8013180:	480e      	ldr	r0, [pc, #56]	@ (80131bc <rmw_init_options_copy+0x8c>)
 8013182:	6053      	str	r3, [r2, #4]
 8013184:	6011      	str	r1, [r2, #0]
 8013186:	f7ff fed5 	bl	8012f34 <get_memory>
 801318a:	b198      	cbz	r0, 80131b4 <rmw_init_options_copy+0x84>
 801318c:	6883      	ldr	r3, [r0, #8]
 801318e:	636b      	str	r3, [r5, #52]	@ 0x34
 8013190:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8013192:	f102 0c10 	add.w	ip, r2, #16
 8013196:	f103 0410 	add.w	r4, r3, #16
 801319a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801319e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80131a0:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80131a4:	2500      	movs	r5, #0
 80131a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80131aa:	4628      	mov	r0, r5
 80131ac:	bd70      	pop	{r4, r5, r6, pc}
 80131ae:	250c      	movs	r5, #12
 80131b0:	4628      	mov	r0, r5
 80131b2:	bd70      	pop	{r4, r5, r6, pc}
 80131b4:	2501      	movs	r5, #1
 80131b6:	e7ca      	b.n	801314e <rmw_init_options_copy+0x1e>
 80131b8:	0801a8bc 	.word	0x0801a8bc
 80131bc:	2001119c 	.word	0x2001119c

080131c0 <rmw_init_options_fini>:
 80131c0:	2800      	cmp	r0, #0
 80131c2:	d03d      	beq.n	8013240 <rmw_init_options_fini+0x80>
 80131c4:	b510      	push	{r4, lr}
 80131c6:	4604      	mov	r4, r0
 80131c8:	b08e      	sub	sp, #56	@ 0x38
 80131ca:	3020      	adds	r0, #32
 80131cc:	f7f8 fbb8 	bl	800b940 <rcutils_allocator_is_valid>
 80131d0:	b360      	cbz	r0, 801322c <rmw_init_options_fini+0x6c>
 80131d2:	68a0      	ldr	r0, [r4, #8]
 80131d4:	b120      	cbz	r0, 80131e0 <rmw_init_options_fini+0x20>
 80131d6:	4b1c      	ldr	r3, [pc, #112]	@ (8013248 <rmw_init_options_fini+0x88>)
 80131d8:	6819      	ldr	r1, [r3, #0]
 80131da:	f7ed f819 	bl	8000210 <strcmp>
 80131de:	bb68      	cbnz	r0, 801323c <rmw_init_options_fini+0x7c>
 80131e0:	4b1a      	ldr	r3, [pc, #104]	@ (801324c <rmw_init_options_fini+0x8c>)
 80131e2:	6819      	ldr	r1, [r3, #0]
 80131e4:	b331      	cbz	r1, 8013234 <rmw_init_options_fini+0x74>
 80131e6:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80131e8:	e001      	b.n	80131ee <rmw_init_options_fini+0x2e>
 80131ea:	6849      	ldr	r1, [r1, #4]
 80131ec:	b311      	cbz	r1, 8013234 <rmw_init_options_fini+0x74>
 80131ee:	688b      	ldr	r3, [r1, #8]
 80131f0:	429a      	cmp	r2, r3
 80131f2:	d1fa      	bne.n	80131ea <rmw_init_options_fini+0x2a>
 80131f4:	4815      	ldr	r0, [pc, #84]	@ (801324c <rmw_init_options_fini+0x8c>)
 80131f6:	f7ff fead 	bl	8012f54 <put_memory>
 80131fa:	4668      	mov	r0, sp
 80131fc:	f7ff fd8c 	bl	8012d18 <rmw_get_zero_initialized_init_options>
 8013200:	46ee      	mov	lr, sp
 8013202:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013206:	46a4      	mov	ip, r4
 8013208:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801320c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013210:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013214:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013218:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801321c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8013220:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013224:	2300      	movs	r3, #0
 8013226:	4618      	mov	r0, r3
 8013228:	b00e      	add	sp, #56	@ 0x38
 801322a:	bd10      	pop	{r4, pc}
 801322c:	230b      	movs	r3, #11
 801322e:	4618      	mov	r0, r3
 8013230:	b00e      	add	sp, #56	@ 0x38
 8013232:	bd10      	pop	{r4, pc}
 8013234:	2301      	movs	r3, #1
 8013236:	4618      	mov	r0, r3
 8013238:	b00e      	add	sp, #56	@ 0x38
 801323a:	bd10      	pop	{r4, pc}
 801323c:	230c      	movs	r3, #12
 801323e:	e7f2      	b.n	8013226 <rmw_init_options_fini+0x66>
 8013240:	230b      	movs	r3, #11
 8013242:	4618      	mov	r0, r3
 8013244:	4770      	bx	lr
 8013246:	bf00      	nop
 8013248:	0801a8bc 	.word	0x0801a8bc
 801324c:	2001119c 	.word	0x2001119c

08013250 <rmw_init>:
 8013250:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013254:	b083      	sub	sp, #12
 8013256:	2800      	cmp	r0, #0
 8013258:	f000 80d3 	beq.w	8013402 <rmw_init+0x1b2>
 801325c:	460e      	mov	r6, r1
 801325e:	2900      	cmp	r1, #0
 8013260:	f000 80cf 	beq.w	8013402 <rmw_init+0x1b2>
 8013264:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8013266:	4605      	mov	r5, r0
 8013268:	2b00      	cmp	r3, #0
 801326a:	f000 80ca 	beq.w	8013402 <rmw_init+0x1b2>
 801326e:	4b78      	ldr	r3, [pc, #480]	@ (8013450 <rmw_init+0x200>)
 8013270:	6880      	ldr	r0, [r0, #8]
 8013272:	681f      	ldr	r7, [r3, #0]
 8013274:	b128      	cbz	r0, 8013282 <rmw_init+0x32>
 8013276:	4639      	mov	r1, r7
 8013278:	f7ec ffca 	bl	8000210 <strcmp>
 801327c:	2800      	cmp	r0, #0
 801327e:	f040 80ca 	bne.w	8013416 <rmw_init+0x1c6>
 8013282:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013286:	4c73      	ldr	r4, [pc, #460]	@ (8013454 <rmw_init+0x204>)
 8013288:	4973      	ldr	r1, [pc, #460]	@ (8013458 <rmw_init+0x208>)
 801328a:	4874      	ldr	r0, [pc, #464]	@ (801345c <rmw_init+0x20c>)
 801328c:	60b7      	str	r7, [r6, #8]
 801328e:	e9c6 2300 	strd	r2, r3, [r6]
 8013292:	68eb      	ldr	r3, [r5, #12]
 8013294:	64b3      	str	r3, [r6, #72]	@ 0x48
 8013296:	2201      	movs	r2, #1
 8013298:	f7f9 fba0 	bl	800c9dc <rmw_uxrce_init_session_memory>
 801329c:	4620      	mov	r0, r4
 801329e:	4970      	ldr	r1, [pc, #448]	@ (8013460 <rmw_init+0x210>)
 80132a0:	2204      	movs	r2, #4
 80132a2:	f7f9 fbdb 	bl	800ca5c <rmw_uxrce_init_static_input_buffer_memory>
 80132a6:	f04f 0800 	mov.w	r8, #0
 80132aa:	486c      	ldr	r0, [pc, #432]	@ (801345c <rmw_init+0x20c>)
 80132ac:	f884 800d 	strb.w	r8, [r4, #13]
 80132b0:	f7ff fe40 	bl	8012f34 <get_memory>
 80132b4:	2800      	cmp	r0, #0
 80132b6:	f000 80a9 	beq.w	801340c <rmw_init+0x1bc>
 80132ba:	6884      	ldr	r4, [r0, #8]
 80132bc:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 80132be:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 80132c0:	f890 c010 	ldrb.w	ip, [r0, #16]
 80132c4:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 80132c8:	9101      	str	r1, [sp, #4]
 80132ca:	6a00      	ldr	r0, [r0, #32]
 80132cc:	9000      	str	r0, [sp, #0]
 80132ce:	f104 0910 	add.w	r9, r4, #16
 80132d2:	4661      	mov	r1, ip
 80132d4:	4648      	mov	r0, r9
 80132d6:	f001 fe2d 	bl	8014f34 <uxr_set_custom_transport_callbacks>
 80132da:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 80132de:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80132e2:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 80132e6:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 80132ea:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 80132ee:	495d      	ldr	r1, [pc, #372]	@ (8013464 <rmw_init+0x214>)
 80132f0:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 80132f4:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 80132f8:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 80132fc:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 8013300:	4859      	ldr	r0, [pc, #356]	@ (8013468 <rmw_init+0x218>)
 8013302:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 8013306:	2201      	movs	r2, #1
 8013308:	64f4      	str	r4, [r6, #76]	@ 0x4c
 801330a:	f7f9 fb47 	bl	800c99c <rmw_uxrce_init_node_memory>
 801330e:	4957      	ldr	r1, [pc, #348]	@ (801346c <rmw_init+0x21c>)
 8013310:	4857      	ldr	r0, [pc, #348]	@ (8013470 <rmw_init+0x220>)
 8013312:	2205      	movs	r2, #5
 8013314:	f7f9 fb22 	bl	800c95c <rmw_uxrce_init_subscription_memory>
 8013318:	4956      	ldr	r1, [pc, #344]	@ (8013474 <rmw_init+0x224>)
 801331a:	4857      	ldr	r0, [pc, #348]	@ (8013478 <rmw_init+0x228>)
 801331c:	220a      	movs	r2, #10
 801331e:	f7f9 fafd 	bl	800c91c <rmw_uxrce_init_publisher_memory>
 8013322:	4956      	ldr	r1, [pc, #344]	@ (801347c <rmw_init+0x22c>)
 8013324:	4856      	ldr	r0, [pc, #344]	@ (8013480 <rmw_init+0x230>)
 8013326:	2201      	movs	r2, #1
 8013328:	f7f9 fab8 	bl	800c89c <rmw_uxrce_init_service_memory>
 801332c:	4955      	ldr	r1, [pc, #340]	@ (8013484 <rmw_init+0x234>)
 801332e:	4856      	ldr	r0, [pc, #344]	@ (8013488 <rmw_init+0x238>)
 8013330:	2201      	movs	r2, #1
 8013332:	f7f9 fad3 	bl	800c8dc <rmw_uxrce_init_client_memory>
 8013336:	4955      	ldr	r1, [pc, #340]	@ (801348c <rmw_init+0x23c>)
 8013338:	4855      	ldr	r0, [pc, #340]	@ (8013490 <rmw_init+0x240>)
 801333a:	220f      	movs	r2, #15
 801333c:	f7f9 fb6e 	bl	800ca1c <rmw_uxrce_init_topic_memory>
 8013340:	4954      	ldr	r1, [pc, #336]	@ (8013494 <rmw_init+0x244>)
 8013342:	4855      	ldr	r0, [pc, #340]	@ (8013498 <rmw_init+0x248>)
 8013344:	2203      	movs	r2, #3
 8013346:	f7f9 fba9 	bl	800ca9c <rmw_uxrce_init_init_options_impl_memory>
 801334a:	4954      	ldr	r1, [pc, #336]	@ (801349c <rmw_init+0x24c>)
 801334c:	4854      	ldr	r0, [pc, #336]	@ (80134a0 <rmw_init+0x250>)
 801334e:	2204      	movs	r2, #4
 8013350:	f7f9 fbc4 	bl	800cadc <rmw_uxrce_init_wait_set_memory>
 8013354:	4953      	ldr	r1, [pc, #332]	@ (80134a4 <rmw_init+0x254>)
 8013356:	4854      	ldr	r0, [pc, #336]	@ (80134a8 <rmw_init+0x258>)
 8013358:	2204      	movs	r2, #4
 801335a:	f7f9 fbdf 	bl	800cb1c <rmw_uxrce_init_guard_condition_memory>
 801335e:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8013360:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 8013362:	4642      	mov	r2, r8
 8013364:	f000 faa0 	bl	80138a8 <rmw_uxrce_transport_init>
 8013368:	4607      	mov	r7, r0
 801336a:	2800      	cmp	r0, #0
 801336c:	d158      	bne.n	8013420 <rmw_init+0x1d0>
 801336e:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8013370:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 8013374:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8013376:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 801337a:	4628      	mov	r0, r5
 801337c:	f7fa fb9c 	bl	800dab8 <uxr_init_session>
 8013380:	494a      	ldr	r1, [pc, #296]	@ (80134ac <rmw_init+0x25c>)
 8013382:	4622      	mov	r2, r4
 8013384:	4628      	mov	r0, r5
 8013386:	f7fa fbbb 	bl	800db00 <uxr_set_topic_callback>
 801338a:	4949      	ldr	r1, [pc, #292]	@ (80134b0 <rmw_init+0x260>)
 801338c:	463a      	mov	r2, r7
 801338e:	4628      	mov	r0, r5
 8013390:	f7fa fbb2 	bl	800daf8 <uxr_set_status_callback>
 8013394:	4947      	ldr	r1, [pc, #284]	@ (80134b4 <rmw_init+0x264>)
 8013396:	463a      	mov	r2, r7
 8013398:	4628      	mov	r0, r5
 801339a:	f7fa fbb5 	bl	800db08 <uxr_set_request_callback>
 801339e:	4946      	ldr	r1, [pc, #280]	@ (80134b8 <rmw_init+0x268>)
 80133a0:	463a      	mov	r2, r7
 80133a2:	4628      	mov	r0, r5
 80133a4:	f7fa fbb4 	bl	800db10 <uxr_set_reply_callback>
 80133a8:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 80133ac:	2304      	movs	r3, #4
 80133ae:	0092      	lsls	r2, r2, #2
 80133b0:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 80133b4:	4628      	mov	r0, r5
 80133b6:	f7fa fbe9 	bl	800db8c <uxr_create_input_reliable_stream>
 80133ba:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 80133be:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 80133c2:	0092      	lsls	r2, r2, #2
 80133c4:	2304      	movs	r3, #4
 80133c6:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 80133ca:	4628      	mov	r0, r5
 80133cc:	f7fa fbb6 	bl	800db3c <uxr_create_output_reliable_stream>
 80133d0:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 80133d4:	4628      	mov	r0, r5
 80133d6:	f7fa fbd3 	bl	800db80 <uxr_create_input_best_effort_stream>
 80133da:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 80133de:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 80133e2:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 80133e6:	3114      	adds	r1, #20
 80133e8:	4628      	mov	r0, r5
 80133ea:	f7fa fb95 	bl	800db18 <uxr_create_output_best_effort_stream>
 80133ee:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 80133f2:	4628      	mov	r0, r5
 80133f4:	f7fb f920 	bl	800e638 <uxr_create_session>
 80133f8:	b1f8      	cbz	r0, 801343a <rmw_init+0x1ea>
 80133fa:	4638      	mov	r0, r7
 80133fc:	b003      	add	sp, #12
 80133fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013402:	270b      	movs	r7, #11
 8013404:	4638      	mov	r0, r7
 8013406:	b003      	add	sp, #12
 8013408:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801340c:	2701      	movs	r7, #1
 801340e:	4638      	mov	r0, r7
 8013410:	b003      	add	sp, #12
 8013412:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013416:	270c      	movs	r7, #12
 8013418:	4638      	mov	r0, r7
 801341a:	b003      	add	sp, #12
 801341c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013420:	4648      	mov	r0, r9
 8013422:	f001 fdc9 	bl	8014fb8 <uxr_close_custom_transport>
 8013426:	480d      	ldr	r0, [pc, #52]	@ (801345c <rmw_init+0x20c>)
 8013428:	4621      	mov	r1, r4
 801342a:	f7ff fd93 	bl	8012f54 <put_memory>
 801342e:	4638      	mov	r0, r7
 8013430:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 8013434:	b003      	add	sp, #12
 8013436:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801343a:	4648      	mov	r0, r9
 801343c:	f001 fdbc 	bl	8014fb8 <uxr_close_custom_transport>
 8013440:	4806      	ldr	r0, [pc, #24]	@ (801345c <rmw_init+0x20c>)
 8013442:	4621      	mov	r1, r4
 8013444:	f7ff fd86 	bl	8012f54 <put_memory>
 8013448:	64f7      	str	r7, [r6, #76]	@ 0x4c
 801344a:	2701      	movs	r7, #1
 801344c:	e7d5      	b.n	80133fa <rmw_init+0x1aa>
 801344e:	bf00      	nop
 8013450:	0801a8bc 	.word	0x0801a8bc
 8013454:	200111ec 	.word	0x200111ec
 8013458:	2000d498 	.word	0x2000d498
 801345c:	200111dc 	.word	0x200111dc
 8013460:	2000ea40 	.word	0x2000ea40
 8013464:	2000cabc 	.word	0x2000cabc
 8013468:	200111ac 	.word	0x200111ac
 801346c:	20010b40 	.word	0x20010b40
 8013470:	200111fc 	.word	0x200111fc
 8013474:	2000cb60 	.word	0x2000cb60
 8013478:	200111bc 	.word	0x200111bc
 801347c:	2000d3d0 	.word	0x2000d3d0
 8013480:	200111cc 	.word	0x200111cc
 8013484:	2000c8f0 	.word	0x2000c8f0
 8013488:	2000c8dc 	.word	0x2000c8dc
 801348c:	20010f78 	.word	0x20010f78
 8013490:	2001120c 	.word	0x2001120c
 8013494:	2000ca38 	.word	0x2000ca38
 8013498:	2001119c 	.word	0x2001119c
 801349c:	2001111c 	.word	0x2001111c
 80134a0:	2001121c 	.word	0x2001121c
 80134a4:	2000c9b8 	.word	0x2000c9b8
 80134a8:	2001118c 	.word	0x2001118c
 80134ac:	08016891 	.word	0x08016891
 80134b0:	08016889 	.word	0x08016889
 80134b4:	08016929 	.word	0x08016929
 80134b8:	080169c5 	.word	0x080169c5

080134bc <rmw_context_fini>:
 80134bc:	4b17      	ldr	r3, [pc, #92]	@ (801351c <rmw_context_fini+0x60>)
 80134be:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 80134c0:	b570      	push	{r4, r5, r6, lr}
 80134c2:	681c      	ldr	r4, [r3, #0]
 80134c4:	4605      	mov	r5, r0
 80134c6:	b334      	cbz	r4, 8013516 <rmw_context_fini+0x5a>
 80134c8:	2600      	movs	r6, #0
 80134ca:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 80134ce:	6902      	ldr	r2, [r0, #16]
 80134d0:	428a      	cmp	r2, r1
 80134d2:	d018      	beq.n	8013506 <rmw_context_fini+0x4a>
 80134d4:	2c00      	cmp	r4, #0
 80134d6:	d1f8      	bne.n	80134ca <rmw_context_fini+0xe>
 80134d8:	b189      	cbz	r1, 80134fe <rmw_context_fini+0x42>
 80134da:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 80134de:	789b      	ldrb	r3, [r3, #2]
 80134e0:	2b01      	cmp	r3, #1
 80134e2:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 80134e6:	bf14      	ite	ne
 80134e8:	210a      	movne	r1, #10
 80134ea:	2100      	moveq	r1, #0
 80134ec:	f7fb f87c 	bl	800e5e8 <uxr_delete_session_retries>
 80134f0:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 80134f2:	f7f9 fb33 	bl	800cb5c <rmw_uxrce_fini_session_memory>
 80134f6:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 80134f8:	3010      	adds	r0, #16
 80134fa:	f001 fd5d 	bl	8014fb8 <uxr_close_custom_transport>
 80134fe:	2300      	movs	r3, #0
 8013500:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8013502:	4630      	mov	r0, r6
 8013504:	bd70      	pop	{r4, r5, r6, pc}
 8013506:	3018      	adds	r0, #24
 8013508:	f7f8 fdb8 	bl	800c07c <rmw_destroy_node>
 801350c:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801350e:	4606      	mov	r6, r0
 8013510:	2c00      	cmp	r4, #0
 8013512:	d1da      	bne.n	80134ca <rmw_context_fini+0xe>
 8013514:	e7e0      	b.n	80134d8 <rmw_context_fini+0x1c>
 8013516:	4626      	mov	r6, r4
 8013518:	e7de      	b.n	80134d8 <rmw_context_fini+0x1c>
 801351a:	bf00      	nop
 801351c:	200111ac 	.word	0x200111ac

08013520 <create_topic>:
 8013520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013524:	4605      	mov	r5, r0
 8013526:	b084      	sub	sp, #16
 8013528:	4822      	ldr	r0, [pc, #136]	@ (80135b4 <create_topic+0x94>)
 801352a:	460f      	mov	r7, r1
 801352c:	4616      	mov	r6, r2
 801352e:	f7ff fd01 	bl	8012f34 <get_memory>
 8013532:	4604      	mov	r4, r0
 8013534:	2800      	cmp	r0, #0
 8013536:	d039      	beq.n	80135ac <create_topic+0x8c>
 8013538:	692b      	ldr	r3, [r5, #16]
 801353a:	6884      	ldr	r4, [r0, #8]
 801353c:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 80135bc <create_topic+0x9c>
 8013540:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8013544:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8013548:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 801354c:	1c42      	adds	r2, r0, #1
 801354e:	2102      	movs	r1, #2
 8013550:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 8013554:	f7fa f8c2 	bl	800d6dc <uxr_object_id>
 8013558:	223c      	movs	r2, #60	@ 0x3c
 801355a:	6120      	str	r0, [r4, #16]
 801355c:	4641      	mov	r1, r8
 801355e:	4638      	mov	r0, r7
 8013560:	f7f9 fcda 	bl	800cf18 <generate_topic_name>
 8013564:	b1f0      	cbz	r0, 80135a4 <create_topic+0x84>
 8013566:	4f14      	ldr	r7, [pc, #80]	@ (80135b8 <create_topic+0x98>)
 8013568:	4630      	mov	r0, r6
 801356a:	2264      	movs	r2, #100	@ 0x64
 801356c:	4639      	mov	r1, r7
 801356e:	f7f9 fca3 	bl	800ceb8 <generate_type_name>
 8013572:	b1b8      	cbz	r0, 80135a4 <create_topic+0x84>
 8013574:	6928      	ldr	r0, [r5, #16]
 8013576:	2306      	movs	r3, #6
 8013578:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 801357c:	f8cd 8000 	str.w	r8, [sp]
 8013580:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8013584:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013588:	6811      	ldr	r1, [r2, #0]
 801358a:	696b      	ldr	r3, [r5, #20]
 801358c:	6922      	ldr	r2, [r4, #16]
 801358e:	f7f9 ff21 	bl	800d3d4 <uxr_buffer_create_topic_bin>
 8013592:	4602      	mov	r2, r0
 8013594:	6928      	ldr	r0, [r5, #16]
 8013596:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801359a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801359e:	f7f9 fc55 	bl	800ce4c <run_xrce_session>
 80135a2:	b918      	cbnz	r0, 80135ac <create_topic+0x8c>
 80135a4:	4620      	mov	r0, r4
 80135a6:	f7f9 fb4f 	bl	800cc48 <rmw_uxrce_fini_topic_memory>
 80135aa:	2400      	movs	r4, #0
 80135ac:	4620      	mov	r0, r4
 80135ae:	b004      	add	sp, #16
 80135b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80135b4:	2001120c 	.word	0x2001120c
 80135b8:	2001129c 	.word	0x2001129c
 80135bc:	20011260 	.word	0x20011260

080135c0 <destroy_topic>:
 80135c0:	b538      	push	{r3, r4, r5, lr}
 80135c2:	6985      	ldr	r5, [r0, #24]
 80135c4:	b1d5      	cbz	r5, 80135fc <destroy_topic+0x3c>
 80135c6:	4604      	mov	r4, r0
 80135c8:	6928      	ldr	r0, [r5, #16]
 80135ca:	6922      	ldr	r2, [r4, #16]
 80135cc:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80135d0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80135d4:	6819      	ldr	r1, [r3, #0]
 80135d6:	f7f9 fe7f 	bl	800d2d8 <uxr_buffer_delete_entity>
 80135da:	4602      	mov	r2, r0
 80135dc:	6928      	ldr	r0, [r5, #16]
 80135de:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80135e2:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80135e6:	f7f9 fc31 	bl	800ce4c <run_xrce_session>
 80135ea:	2800      	cmp	r0, #0
 80135ec:	4620      	mov	r0, r4
 80135ee:	bf14      	ite	ne
 80135f0:	2400      	movne	r4, #0
 80135f2:	2402      	moveq	r4, #2
 80135f4:	f7f9 fb28 	bl	800cc48 <rmw_uxrce_fini_topic_memory>
 80135f8:	4620      	mov	r0, r4
 80135fa:	bd38      	pop	{r3, r4, r5, pc}
 80135fc:	2401      	movs	r4, #1
 80135fe:	4620      	mov	r0, r4
 8013600:	bd38      	pop	{r3, r4, r5, pc}
 8013602:	bf00      	nop

08013604 <rmw_send_request>:
 8013604:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013608:	4604      	mov	r4, r0
 801360a:	6800      	ldr	r0, [r0, #0]
 801360c:	b08b      	sub	sp, #44	@ 0x2c
 801360e:	460e      	mov	r6, r1
 8013610:	4615      	mov	r5, r2
 8013612:	b128      	cbz	r0, 8013620 <rmw_send_request+0x1c>
 8013614:	4b21      	ldr	r3, [pc, #132]	@ (801369c <rmw_send_request+0x98>)
 8013616:	6819      	ldr	r1, [r3, #0]
 8013618:	f7ec fdfa 	bl	8000210 <strcmp>
 801361c:	2800      	cmp	r0, #0
 801361e:	d139      	bne.n	8013694 <rmw_send_request+0x90>
 8013620:	6864      	ldr	r4, [r4, #4]
 8013622:	6963      	ldr	r3, [r4, #20]
 8013624:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 8013628:	689b      	ldr	r3, [r3, #8]
 801362a:	4798      	blx	r3
 801362c:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8013630:	4630      	mov	r0, r6
 8013632:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013636:	4798      	blx	r3
 8013638:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801363c:	9000      	str	r0, [sp, #0]
 801363e:	6922      	ldr	r2, [r4, #16]
 8013640:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8013642:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8013646:	ab02      	add	r3, sp, #8
 8013648:	f7fb fc72 	bl	800ef30 <uxr_prepare_output_stream>
 801364c:	2700      	movs	r7, #0
 801364e:	6028      	str	r0, [r5, #0]
 8013650:	606f      	str	r7, [r5, #4]
 8013652:	b198      	cbz	r0, 801367c <rmw_send_request+0x78>
 8013654:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8013658:	a902      	add	r1, sp, #8
 801365a:	4630      	mov	r0, r6
 801365c:	4798      	blx	r3
 801365e:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 8013662:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8013666:	2b01      	cmp	r3, #1
 8013668:	d00c      	beq.n	8013684 <rmw_send_request+0x80>
 801366a:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 801366c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013670:	f7fa fe72 	bl	800e358 <uxr_run_session_until_confirm_delivery>
 8013674:	4638      	mov	r0, r7
 8013676:	b00b      	add	sp, #44	@ 0x2c
 8013678:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801367c:	2001      	movs	r0, #1
 801367e:	b00b      	add	sp, #44	@ 0x2c
 8013680:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013684:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013688:	f7fa faa6 	bl	800dbd8 <uxr_flash_output_streams>
 801368c:	4638      	mov	r0, r7
 801368e:	b00b      	add	sp, #44	@ 0x2c
 8013690:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013694:	200c      	movs	r0, #12
 8013696:	b00b      	add	sp, #44	@ 0x2c
 8013698:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801369c:	0801a8bc 	.word	0x0801a8bc

080136a0 <rmw_take_request>:
 80136a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80136a4:	4605      	mov	r5, r0
 80136a6:	6800      	ldr	r0, [r0, #0]
 80136a8:	b089      	sub	sp, #36	@ 0x24
 80136aa:	460c      	mov	r4, r1
 80136ac:	4690      	mov	r8, r2
 80136ae:	461e      	mov	r6, r3
 80136b0:	b128      	cbz	r0, 80136be <rmw_take_request+0x1e>
 80136b2:	4b28      	ldr	r3, [pc, #160]	@ (8013754 <rmw_take_request+0xb4>)
 80136b4:	6819      	ldr	r1, [r3, #0]
 80136b6:	f7ec fdab 	bl	8000210 <strcmp>
 80136ba:	2800      	cmp	r0, #0
 80136bc:	d146      	bne.n	801374c <rmw_take_request+0xac>
 80136be:	b10e      	cbz	r6, 80136c4 <rmw_take_request+0x24>
 80136c0:	2300      	movs	r3, #0
 80136c2:	7033      	strb	r3, [r6, #0]
 80136c4:	f8d5 9004 	ldr.w	r9, [r5, #4]
 80136c8:	f7f9 fb42 	bl	800cd50 <rmw_uxrce_clean_expired_static_input_buffer>
 80136cc:	4648      	mov	r0, r9
 80136ce:	f7f9 fb17 	bl	800cd00 <rmw_uxrce_find_static_input_buffer_by_owner>
 80136d2:	4607      	mov	r7, r0
 80136d4:	b3b0      	cbz	r0, 8013744 <rmw_take_request+0xa4>
 80136d6:	6885      	ldr	r5, [r0, #8]
 80136d8:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 80136dc:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 80136e0:	e9c4 2308 	strd	r2, r3, [r4, #32]
 80136e4:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 80136e8:	7423      	strb	r3, [r4, #16]
 80136ea:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 80136ee:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 80136f2:	74e2      	strb	r2, [r4, #19]
 80136f4:	f8a4 3011 	strh.w	r3, [r4, #17]
 80136f8:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 80136fc:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 8013700:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 8013704:	61e1      	str	r1, [r4, #28]
 8013706:	6162      	str	r2, [r4, #20]
 8013708:	61a3      	str	r3, [r4, #24]
 801370a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801370e:	689b      	ldr	r3, [r3, #8]
 8013710:	4798      	blx	r3
 8013712:	6844      	ldr	r4, [r0, #4]
 8013714:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 8013718:	f105 0110 	add.w	r1, r5, #16
 801371c:	4668      	mov	r0, sp
 801371e:	f7f9 fd13 	bl	800d148 <ucdr_init_buffer>
 8013722:	68e3      	ldr	r3, [r4, #12]
 8013724:	4641      	mov	r1, r8
 8013726:	4668      	mov	r0, sp
 8013728:	4798      	blx	r3
 801372a:	4639      	mov	r1, r7
 801372c:	4604      	mov	r4, r0
 801372e:	480a      	ldr	r0, [pc, #40]	@ (8013758 <rmw_take_request+0xb8>)
 8013730:	f7ff fc10 	bl	8012f54 <put_memory>
 8013734:	b106      	cbz	r6, 8013738 <rmw_take_request+0x98>
 8013736:	7034      	strb	r4, [r6, #0]
 8013738:	f084 0001 	eor.w	r0, r4, #1
 801373c:	b2c0      	uxtb	r0, r0
 801373e:	b009      	add	sp, #36	@ 0x24
 8013740:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013744:	2001      	movs	r0, #1
 8013746:	b009      	add	sp, #36	@ 0x24
 8013748:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801374c:	200c      	movs	r0, #12
 801374e:	b009      	add	sp, #36	@ 0x24
 8013750:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013754:	0801a8bc 	.word	0x0801a8bc
 8013758:	200111ec 	.word	0x200111ec

0801375c <rmw_send_response>:
 801375c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801375e:	4605      	mov	r5, r0
 8013760:	6800      	ldr	r0, [r0, #0]
 8013762:	b091      	sub	sp, #68	@ 0x44
 8013764:	460c      	mov	r4, r1
 8013766:	4616      	mov	r6, r2
 8013768:	b128      	cbz	r0, 8013776 <rmw_send_response+0x1a>
 801376a:	4b29      	ldr	r3, [pc, #164]	@ (8013810 <rmw_send_response+0xb4>)
 801376c:	6819      	ldr	r1, [r3, #0]
 801376e:	f7ec fd4f 	bl	8000210 <strcmp>
 8013772:	2800      	cmp	r0, #0
 8013774:	d141      	bne.n	80137fa <rmw_send_response+0x9e>
 8013776:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 801377a:	9306      	str	r3, [sp, #24]
 801377c:	4623      	mov	r3, r4
 801377e:	9207      	str	r2, [sp, #28]
 8013780:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013784:	686d      	ldr	r5, [r5, #4]
 8013786:	789b      	ldrb	r3, [r3, #2]
 8013788:	68a1      	ldr	r1, [r4, #8]
 801378a:	f88d 2017 	strb.w	r2, [sp, #23]
 801378e:	f88d 3016 	strb.w	r3, [sp, #22]
 8013792:	68e2      	ldr	r2, [r4, #12]
 8013794:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8013798:	6860      	ldr	r0, [r4, #4]
 801379a:	f8ad 3014 	strh.w	r3, [sp, #20]
 801379e:	ab02      	add	r3, sp, #8
 80137a0:	c307      	stmia	r3!, {r0, r1, r2}
 80137a2:	696b      	ldr	r3, [r5, #20]
 80137a4:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 80137a6:	68db      	ldr	r3, [r3, #12]
 80137a8:	4798      	blx	r3
 80137aa:	6844      	ldr	r4, [r0, #4]
 80137ac:	4630      	mov	r0, r6
 80137ae:	6923      	ldr	r3, [r4, #16]
 80137b0:	4798      	blx	r3
 80137b2:	f100 0318 	add.w	r3, r0, #24
 80137b6:	6938      	ldr	r0, [r7, #16]
 80137b8:	9300      	str	r3, [sp, #0]
 80137ba:	692a      	ldr	r2, [r5, #16]
 80137bc:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 80137be:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80137c2:	ab08      	add	r3, sp, #32
 80137c4:	f7fb fbb4 	bl	800ef30 <uxr_prepare_output_stream>
 80137c8:	b910      	cbnz	r0, 80137d0 <rmw_send_response+0x74>
 80137ca:	2001      	movs	r0, #1
 80137cc:	b011      	add	sp, #68	@ 0x44
 80137ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80137d0:	a902      	add	r1, sp, #8
 80137d2:	a808      	add	r0, sp, #32
 80137d4:	f7fc fce4 	bl	80101a0 <uxr_serialize_SampleIdentity>
 80137d8:	68a3      	ldr	r3, [r4, #8]
 80137da:	a908      	add	r1, sp, #32
 80137dc:	4630      	mov	r0, r6
 80137de:	4798      	blx	r3
 80137e0:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 80137e4:	6938      	ldr	r0, [r7, #16]
 80137e6:	2b01      	cmp	r3, #1
 80137e8:	d00a      	beq.n	8013800 <rmw_send_response+0xa4>
 80137ea:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 80137ec:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80137f0:	f7fa fdb2 	bl	800e358 <uxr_run_session_until_confirm_delivery>
 80137f4:	2000      	movs	r0, #0
 80137f6:	b011      	add	sp, #68	@ 0x44
 80137f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80137fa:	200c      	movs	r0, #12
 80137fc:	b011      	add	sp, #68	@ 0x44
 80137fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013800:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013804:	f7fa f9e8 	bl	800dbd8 <uxr_flash_output_streams>
 8013808:	2000      	movs	r0, #0
 801380a:	b011      	add	sp, #68	@ 0x44
 801380c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801380e:	bf00      	nop
 8013810:	0801a8bc 	.word	0x0801a8bc

08013814 <rmw_take_response>:
 8013814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013818:	4604      	mov	r4, r0
 801381a:	6800      	ldr	r0, [r0, #0]
 801381c:	b088      	sub	sp, #32
 801381e:	4688      	mov	r8, r1
 8013820:	4617      	mov	r7, r2
 8013822:	461d      	mov	r5, r3
 8013824:	b120      	cbz	r0, 8013830 <rmw_take_response+0x1c>
 8013826:	4b1e      	ldr	r3, [pc, #120]	@ (80138a0 <rmw_take_response+0x8c>)
 8013828:	6819      	ldr	r1, [r3, #0]
 801382a:	f7ec fcf1 	bl	8000210 <strcmp>
 801382e:	bb78      	cbnz	r0, 8013890 <rmw_take_response+0x7c>
 8013830:	b10d      	cbz	r5, 8013836 <rmw_take_response+0x22>
 8013832:	2300      	movs	r3, #0
 8013834:	702b      	strb	r3, [r5, #0]
 8013836:	6864      	ldr	r4, [r4, #4]
 8013838:	f7f9 fa8a 	bl	800cd50 <rmw_uxrce_clean_expired_static_input_buffer>
 801383c:	4620      	mov	r0, r4
 801383e:	f7f9 fa5f 	bl	800cd00 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013842:	4606      	mov	r6, r0
 8013844:	b340      	cbz	r0, 8013898 <rmw_take_response+0x84>
 8013846:	6963      	ldr	r3, [r4, #20]
 8013848:	6884      	ldr	r4, [r0, #8]
 801384a:	68db      	ldr	r3, [r3, #12]
 801384c:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 8013850:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8013854:	e9c8 0108 	strd	r0, r1, [r8, #32]
 8013858:	4798      	blx	r3
 801385a:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801385e:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 8013862:	f104 0110 	add.w	r1, r4, #16
 8013866:	4668      	mov	r0, sp
 8013868:	f7f9 fc6e 	bl	800d148 <ucdr_init_buffer>
 801386c:	4639      	mov	r1, r7
 801386e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013872:	4668      	mov	r0, sp
 8013874:	4798      	blx	r3
 8013876:	4631      	mov	r1, r6
 8013878:	4604      	mov	r4, r0
 801387a:	480a      	ldr	r0, [pc, #40]	@ (80138a4 <rmw_take_response+0x90>)
 801387c:	f7ff fb6a 	bl	8012f54 <put_memory>
 8013880:	b105      	cbz	r5, 8013884 <rmw_take_response+0x70>
 8013882:	702c      	strb	r4, [r5, #0]
 8013884:	f084 0001 	eor.w	r0, r4, #1
 8013888:	b2c0      	uxtb	r0, r0
 801388a:	b008      	add	sp, #32
 801388c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013890:	200c      	movs	r0, #12
 8013892:	b008      	add	sp, #32
 8013894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013898:	2001      	movs	r0, #1
 801389a:	b008      	add	sp, #32
 801389c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80138a0:	0801a8bc 	.word	0x0801a8bc
 80138a4:	200111ec 	.word	0x200111ec

080138a8 <rmw_uxrce_transport_init>:
 80138a8:	b508      	push	{r3, lr}
 80138aa:	b108      	cbz	r0, 80138b0 <rmw_uxrce_transport_init+0x8>
 80138ac:	f100 0210 	add.w	r2, r0, #16
 80138b0:	b139      	cbz	r1, 80138c2 <rmw_uxrce_transport_init+0x1a>
 80138b2:	6949      	ldr	r1, [r1, #20]
 80138b4:	4610      	mov	r0, r2
 80138b6:	f001 fb4b 	bl	8014f50 <uxr_init_custom_transport>
 80138ba:	f080 0001 	eor.w	r0, r0, #1
 80138be:	b2c0      	uxtb	r0, r0
 80138c0:	bd08      	pop	{r3, pc}
 80138c2:	4b04      	ldr	r3, [pc, #16]	@ (80138d4 <rmw_uxrce_transport_init+0x2c>)
 80138c4:	4610      	mov	r0, r2
 80138c6:	6859      	ldr	r1, [r3, #4]
 80138c8:	f001 fb42 	bl	8014f50 <uxr_init_custom_transport>
 80138cc:	f080 0001 	eor.w	r0, r0, #1
 80138d0:	b2c0      	uxtb	r0, r0
 80138d2:	bd08      	pop	{r3, pc}
 80138d4:	2000c884 	.word	0x2000c884

080138d8 <rmw_wait>:
 80138d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80138dc:	b089      	sub	sp, #36	@ 0x24
 80138de:	4605      	mov	r5, r0
 80138e0:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80138e2:	460e      	mov	r6, r1
 80138e4:	4698      	mov	r8, r3
 80138e6:	4691      	mov	r9, r2
 80138e8:	2a00      	cmp	r2, #0
 80138ea:	f000 810a 	beq.w	8013b02 <rmw_wait+0x22a>
 80138ee:	b16c      	cbz	r4, 801390c <rmw_wait+0x34>
 80138f0:	4bae      	ldr	r3, [pc, #696]	@ (8013bac <rmw_wait+0x2d4>)
 80138f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80138f4:	af04      	add	r7, sp, #16
 80138f6:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 80138fa:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80138fe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8013902:	f7ff fa1d 	bl	8012d40 <rmw_time_equal>
 8013906:	2800      	cmp	r0, #0
 8013908:	f000 8127 	beq.w	8013b5a <rmw_wait+0x282>
 801390c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8013910:	f7f9 fa1e 	bl	800cd50 <rmw_uxrce_clean_expired_static_input_buffer>
 8013914:	4ba6      	ldr	r3, [pc, #664]	@ (8013bb0 <rmw_wait+0x2d8>)
 8013916:	681c      	ldr	r4, [r3, #0]
 8013918:	b14c      	cbz	r4, 801392e <rmw_wait+0x56>
 801391a:	4623      	mov	r3, r4
 801391c:	2100      	movs	r1, #0
 801391e:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8013922:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8013926:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 801392a:	2b00      	cmp	r3, #0
 801392c:	d1f7      	bne.n	801391e <rmw_wait+0x46>
 801392e:	f1b9 0f00 	cmp.w	r9, #0
 8013932:	d011      	beq.n	8013958 <rmw_wait+0x80>
 8013934:	f8d9 1000 	ldr.w	r1, [r9]
 8013938:	b171      	cbz	r1, 8013958 <rmw_wait+0x80>
 801393a:	f8d9 c004 	ldr.w	ip, [r9, #4]
 801393e:	2300      	movs	r3, #0
 8013940:	2001      	movs	r0, #1
 8013942:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8013946:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8013948:	6912      	ldr	r2, [r2, #16]
 801394a:	3301      	adds	r3, #1
 801394c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8013950:	4299      	cmp	r1, r3
 8013952:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8013956:	d1f4      	bne.n	8013942 <rmw_wait+0x6a>
 8013958:	f1b8 0f00 	cmp.w	r8, #0
 801395c:	d011      	beq.n	8013982 <rmw_wait+0xaa>
 801395e:	f8d8 1000 	ldr.w	r1, [r8]
 8013962:	b171      	cbz	r1, 8013982 <rmw_wait+0xaa>
 8013964:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8013968:	2300      	movs	r3, #0
 801396a:	2001      	movs	r0, #1
 801396c:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8013970:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8013972:	6912      	ldr	r2, [r2, #16]
 8013974:	3301      	adds	r3, #1
 8013976:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801397a:	4299      	cmp	r1, r3
 801397c:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8013980:	d1f4      	bne.n	801396c <rmw_wait+0x94>
 8013982:	b185      	cbz	r5, 80139a6 <rmw_wait+0xce>
 8013984:	6829      	ldr	r1, [r5, #0]
 8013986:	b171      	cbz	r1, 80139a6 <rmw_wait+0xce>
 8013988:	f8d5 c004 	ldr.w	ip, [r5, #4]
 801398c:	2300      	movs	r3, #0
 801398e:	2001      	movs	r0, #1
 8013990:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8013994:	6a12      	ldr	r2, [r2, #32]
 8013996:	6912      	ldr	r2, [r2, #16]
 8013998:	3301      	adds	r3, #1
 801399a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801399e:	4299      	cmp	r1, r3
 80139a0:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 80139a4:	d1f4      	bne.n	8013990 <rmw_wait+0xb8>
 80139a6:	b34c      	cbz	r4, 80139fc <rmw_wait+0x124>
 80139a8:	4622      	mov	r2, r4
 80139aa:	2300      	movs	r3, #0
 80139ac:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 80139b0:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 80139b4:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 80139b8:	440b      	add	r3, r1
 80139ba:	b2db      	uxtb	r3, r3
 80139bc:	2a00      	cmp	r2, #0
 80139be:	d1f5      	bne.n	80139ac <rmw_wait+0xd4>
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	f000 8084 	beq.w	8013ace <rmw_wait+0x1f6>
 80139c6:	1c7a      	adds	r2, r7, #1
 80139c8:	d00d      	beq.n	80139e6 <rmw_wait+0x10e>
 80139ca:	ee07 7a90 	vmov	s15, r7
 80139ce:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80139d2:	ee07 3a90 	vmov	s15, r3
 80139d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80139da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80139de:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80139e2:	ee17 7a90 	vmov	r7, s15
 80139e6:	68a0      	ldr	r0, [r4, #8]
 80139e8:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 80139ec:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	f040 8090 	bne.w	8013b16 <rmw_wait+0x23e>
 80139f6:	6864      	ldr	r4, [r4, #4]
 80139f8:	2c00      	cmp	r4, #0
 80139fa:	d1f4      	bne.n	80139e6 <rmw_wait+0x10e>
 80139fc:	f1b9 0f00 	cmp.w	r9, #0
 8013a00:	f000 80bc 	beq.w	8013b7c <rmw_wait+0x2a4>
 8013a04:	f8d9 7000 	ldr.w	r7, [r9]
 8013a08:	2f00      	cmp	r7, #0
 8013a0a:	f000 808e 	beq.w	8013b2a <rmw_wait+0x252>
 8013a0e:	2400      	movs	r4, #0
 8013a10:	4627      	mov	r7, r4
 8013a12:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8013a16:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013a1a:	f7f9 f971 	bl	800cd00 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013a1e:	2800      	cmp	r0, #0
 8013a20:	d05f      	beq.n	8013ae2 <rmw_wait+0x20a>
 8013a22:	f8d9 3000 	ldr.w	r3, [r9]
 8013a26:	3401      	adds	r4, #1
 8013a28:	42a3      	cmp	r3, r4
 8013a2a:	f04f 0701 	mov.w	r7, #1
 8013a2e:	d8f0      	bhi.n	8013a12 <rmw_wait+0x13a>
 8013a30:	f1b8 0f00 	cmp.w	r8, #0
 8013a34:	d012      	beq.n	8013a5c <rmw_wait+0x184>
 8013a36:	f8d8 3000 	ldr.w	r3, [r8]
 8013a3a:	b17b      	cbz	r3, 8013a5c <rmw_wait+0x184>
 8013a3c:	2400      	movs	r4, #0
 8013a3e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013a42:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013a46:	f7f9 f95b 	bl	800cd00 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013a4a:	2800      	cmp	r0, #0
 8013a4c:	d051      	beq.n	8013af2 <rmw_wait+0x21a>
 8013a4e:	f8d8 3000 	ldr.w	r3, [r8]
 8013a52:	3401      	adds	r4, #1
 8013a54:	42a3      	cmp	r3, r4
 8013a56:	f04f 0701 	mov.w	r7, #1
 8013a5a:	d8f0      	bhi.n	8013a3e <rmw_wait+0x166>
 8013a5c:	b1dd      	cbz	r5, 8013a96 <rmw_wait+0x1be>
 8013a5e:	682b      	ldr	r3, [r5, #0]
 8013a60:	b1cb      	cbz	r3, 8013a96 <rmw_wait+0x1be>
 8013a62:	2400      	movs	r4, #0
 8013a64:	686b      	ldr	r3, [r5, #4]
 8013a66:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013a6a:	f7f9 f949 	bl	800cd00 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013a6e:	b158      	cbz	r0, 8013a88 <rmw_wait+0x1b0>
 8013a70:	682b      	ldr	r3, [r5, #0]
 8013a72:	3401      	adds	r4, #1
 8013a74:	42a3      	cmp	r3, r4
 8013a76:	d969      	bls.n	8013b4c <rmw_wait+0x274>
 8013a78:	686b      	ldr	r3, [r5, #4]
 8013a7a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013a7e:	2701      	movs	r7, #1
 8013a80:	f7f9 f93e 	bl	800cd00 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013a84:	2800      	cmp	r0, #0
 8013a86:	d1f3      	bne.n	8013a70 <rmw_wait+0x198>
 8013a88:	e9d5 3200 	ldrd	r3, r2, [r5]
 8013a8c:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8013a90:	3401      	adds	r4, #1
 8013a92:	42a3      	cmp	r3, r4
 8013a94:	d8e6      	bhi.n	8013a64 <rmw_wait+0x18c>
 8013a96:	b1a6      	cbz	r6, 8013ac2 <rmw_wait+0x1ea>
 8013a98:	6834      	ldr	r4, [r6, #0]
 8013a9a:	b194      	cbz	r4, 8013ac2 <rmw_wait+0x1ea>
 8013a9c:	2300      	movs	r3, #0
 8013a9e:	461d      	mov	r5, r3
 8013aa0:	e004      	b.n	8013aac <rmw_wait+0x1d4>
 8013aa2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8013aa6:	3301      	adds	r3, #1
 8013aa8:	42a3      	cmp	r3, r4
 8013aaa:	d00a      	beq.n	8013ac2 <rmw_wait+0x1ea>
 8013aac:	6870      	ldr	r0, [r6, #4]
 8013aae:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8013ab2:	7c0a      	ldrb	r2, [r1, #16]
 8013ab4:	2a00      	cmp	r2, #0
 8013ab6:	d0f4      	beq.n	8013aa2 <rmw_wait+0x1ca>
 8013ab8:	3301      	adds	r3, #1
 8013aba:	42a3      	cmp	r3, r4
 8013abc:	740d      	strb	r5, [r1, #16]
 8013abe:	4617      	mov	r7, r2
 8013ac0:	d1f4      	bne.n	8013aac <rmw_wait+0x1d4>
 8013ac2:	2f00      	cmp	r7, #0
 8013ac4:	d03e      	beq.n	8013b44 <rmw_wait+0x26c>
 8013ac6:	2000      	movs	r0, #0
 8013ac8:	b009      	add	sp, #36	@ 0x24
 8013aca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013ace:	68a0      	ldr	r0, [r4, #8]
 8013ad0:	2100      	movs	r1, #0
 8013ad2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013ad6:	f7fa fc05 	bl	800e2e4 <uxr_run_session_timeout>
 8013ada:	6864      	ldr	r4, [r4, #4]
 8013adc:	2c00      	cmp	r4, #0
 8013ade:	d1f6      	bne.n	8013ace <rmw_wait+0x1f6>
 8013ae0:	e78c      	b.n	80139fc <rmw_wait+0x124>
 8013ae2:	e9d9 3200 	ldrd	r3, r2, [r9]
 8013ae6:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8013aea:	3401      	adds	r4, #1
 8013aec:	42a3      	cmp	r3, r4
 8013aee:	d890      	bhi.n	8013a12 <rmw_wait+0x13a>
 8013af0:	e79e      	b.n	8013a30 <rmw_wait+0x158>
 8013af2:	e9d8 3200 	ldrd	r3, r2, [r8]
 8013af6:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8013afa:	3401      	adds	r4, #1
 8013afc:	429c      	cmp	r4, r3
 8013afe:	d39e      	bcc.n	8013a3e <rmw_wait+0x166>
 8013b00:	e7ac      	b.n	8013a5c <rmw_wait+0x184>
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	f47f aef3 	bne.w	80138ee <rmw_wait+0x16>
 8013b08:	2800      	cmp	r0, #0
 8013b0a:	f47f aef0 	bne.w	80138ee <rmw_wait+0x16>
 8013b0e:	2900      	cmp	r1, #0
 8013b10:	f47f aeed 	bne.w	80138ee <rmw_wait+0x16>
 8013b14:	e7d7      	b.n	8013ac6 <rmw_wait+0x1ee>
 8013b16:	4639      	mov	r1, r7
 8013b18:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013b1c:	f7fa fbfc 	bl	800e318 <uxr_run_session_until_data>
 8013b20:	6864      	ldr	r4, [r4, #4]
 8013b22:	2c00      	cmp	r4, #0
 8013b24:	f47f af5f 	bne.w	80139e6 <rmw_wait+0x10e>
 8013b28:	e768      	b.n	80139fc <rmw_wait+0x124>
 8013b2a:	f1b8 0f00 	cmp.w	r8, #0
 8013b2e:	d032      	beq.n	8013b96 <rmw_wait+0x2be>
 8013b30:	f8d8 3000 	ldr.w	r3, [r8]
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	d181      	bne.n	8013a3c <rmw_wait+0x164>
 8013b38:	461f      	mov	r7, r3
 8013b3a:	2d00      	cmp	r5, #0
 8013b3c:	d18f      	bne.n	8013a5e <rmw_wait+0x186>
 8013b3e:	462f      	mov	r7, r5
 8013b40:	2e00      	cmp	r6, #0
 8013b42:	d1a9      	bne.n	8013a98 <rmw_wait+0x1c0>
 8013b44:	2002      	movs	r0, #2
 8013b46:	b009      	add	sp, #36	@ 0x24
 8013b48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013b4c:	2e00      	cmp	r6, #0
 8013b4e:	d0ba      	beq.n	8013ac6 <rmw_wait+0x1ee>
 8013b50:	6834      	ldr	r4, [r6, #0]
 8013b52:	2701      	movs	r7, #1
 8013b54:	2c00      	cmp	r4, #0
 8013b56:	d1a1      	bne.n	8013a9c <rmw_wait+0x1c4>
 8013b58:	e7b5      	b.n	8013ac6 <rmw_wait+0x1ee>
 8013b5a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8013b5e:	f7ff f943 	bl	8012de8 <rmw_time_total_nsec>
 8013b62:	2300      	movs	r3, #0
 8013b64:	4a13      	ldr	r2, [pc, #76]	@ (8013bb4 <rmw_wait+0x2dc>)
 8013b66:	f7ed f89f 	bl	8000ca8 <__aeabi_uldivmod>
 8013b6a:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8013b6e:	f171 0300 	sbcs.w	r3, r1, #0
 8013b72:	4607      	mov	r7, r0
 8013b74:	bfa8      	it	ge
 8013b76:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 8013b7a:	e6c9      	b.n	8013910 <rmw_wait+0x38>
 8013b7c:	f1b8 0f00 	cmp.w	r8, #0
 8013b80:	d009      	beq.n	8013b96 <rmw_wait+0x2be>
 8013b82:	f8d8 3000 	ldr.w	r3, [r8]
 8013b86:	464f      	mov	r7, r9
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	f47f af57 	bne.w	8013a3c <rmw_wait+0x164>
 8013b8e:	2d00      	cmp	r5, #0
 8013b90:	f47f af65 	bne.w	8013a5e <rmw_wait+0x186>
 8013b94:	e7d3      	b.n	8013b3e <rmw_wait+0x266>
 8013b96:	b17d      	cbz	r5, 8013bb8 <rmw_wait+0x2e0>
 8013b98:	682b      	ldr	r3, [r5, #0]
 8013b9a:	4647      	mov	r7, r8
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	f47f af60 	bne.w	8013a62 <rmw_wait+0x18a>
 8013ba2:	2e00      	cmp	r6, #0
 8013ba4:	f47f af78 	bne.w	8013a98 <rmw_wait+0x1c0>
 8013ba8:	e7cc      	b.n	8013b44 <rmw_wait+0x26c>
 8013baa:	bf00      	nop
 8013bac:	08019f98 	.word	0x08019f98
 8013bb0:	200111dc 	.word	0x200111dc
 8013bb4:	000f4240 	.word	0x000f4240
 8013bb8:	2e00      	cmp	r6, #0
 8013bba:	d0c3      	beq.n	8013b44 <rmw_wait+0x26c>
 8013bbc:	6834      	ldr	r4, [r6, #0]
 8013bbe:	462f      	mov	r7, r5
 8013bc0:	2c00      	cmp	r4, #0
 8013bc2:	f47f af6b 	bne.w	8013a9c <rmw_wait+0x1c4>
 8013bc6:	e7bd      	b.n	8013b44 <rmw_wait+0x26c>

08013bc8 <rmw_create_wait_set>:
 8013bc8:	b508      	push	{r3, lr}
 8013bca:	4803      	ldr	r0, [pc, #12]	@ (8013bd8 <rmw_create_wait_set+0x10>)
 8013bcc:	f7ff f9b2 	bl	8012f34 <get_memory>
 8013bd0:	b108      	cbz	r0, 8013bd6 <rmw_create_wait_set+0xe>
 8013bd2:	6880      	ldr	r0, [r0, #8]
 8013bd4:	3010      	adds	r0, #16
 8013bd6:	bd08      	pop	{r3, pc}
 8013bd8:	2001121c 	.word	0x2001121c

08013bdc <rmw_destroy_wait_set>:
 8013bdc:	b508      	push	{r3, lr}
 8013bde:	4b08      	ldr	r3, [pc, #32]	@ (8013c00 <rmw_destroy_wait_set+0x24>)
 8013be0:	6819      	ldr	r1, [r3, #0]
 8013be2:	b911      	cbnz	r1, 8013bea <rmw_destroy_wait_set+0xe>
 8013be4:	e00a      	b.n	8013bfc <rmw_destroy_wait_set+0x20>
 8013be6:	6849      	ldr	r1, [r1, #4]
 8013be8:	b141      	cbz	r1, 8013bfc <rmw_destroy_wait_set+0x20>
 8013bea:	688b      	ldr	r3, [r1, #8]
 8013bec:	3310      	adds	r3, #16
 8013bee:	4298      	cmp	r0, r3
 8013bf0:	d1f9      	bne.n	8013be6 <rmw_destroy_wait_set+0xa>
 8013bf2:	4803      	ldr	r0, [pc, #12]	@ (8013c00 <rmw_destroy_wait_set+0x24>)
 8013bf4:	f7ff f9ae 	bl	8012f54 <put_memory>
 8013bf8:	2000      	movs	r0, #0
 8013bfa:	bd08      	pop	{r3, pc}
 8013bfc:	2001      	movs	r0, #1
 8013bfe:	bd08      	pop	{r3, pc}
 8013c00:	2001121c 	.word	0x2001121c

08013c04 <rmw_uros_epoch_nanos>:
 8013c04:	4b05      	ldr	r3, [pc, #20]	@ (8013c1c <rmw_uros_epoch_nanos+0x18>)
 8013c06:	681b      	ldr	r3, [r3, #0]
 8013c08:	b123      	cbz	r3, 8013c14 <rmw_uros_epoch_nanos+0x10>
 8013c0a:	6898      	ldr	r0, [r3, #8]
 8013c0c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013c10:	f7f9 bfd8 	b.w	800dbc4 <uxr_epoch_nanos>
 8013c14:	2000      	movs	r0, #0
 8013c16:	2100      	movs	r1, #0
 8013c18:	4770      	bx	lr
 8013c1a:	bf00      	nop
 8013c1c:	200111dc 	.word	0x200111dc

08013c20 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8013c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c24:	6805      	ldr	r5, [r0, #0]
 8013c26:	4604      	mov	r4, r0
 8013c28:	4628      	mov	r0, r5
 8013c2a:	460e      	mov	r6, r1
 8013c2c:	f7ec faf0 	bl	8000210 <strcmp>
 8013c30:	b1c8      	cbz	r0, 8013c66 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 8013c32:	4b11      	ldr	r3, [pc, #68]	@ (8013c78 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 8013c34:	681b      	ldr	r3, [r3, #0]
 8013c36:	429d      	cmp	r5, r3
 8013c38:	d112      	bne.n	8013c60 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8013c3a:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8013c3e:	f8d8 4000 	ldr.w	r4, [r8]
 8013c42:	b16c      	cbz	r4, 8013c60 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8013c44:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8013c48:	2700      	movs	r7, #0
 8013c4a:	3d04      	subs	r5, #4
 8013c4c:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8013c50:	4631      	mov	r1, r6
 8013c52:	f7ec fadd 	bl	8000210 <strcmp>
 8013c56:	00bb      	lsls	r3, r7, #2
 8013c58:	b140      	cbz	r0, 8013c6c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 8013c5a:	3701      	adds	r7, #1
 8013c5c:	42bc      	cmp	r4, r7
 8013c5e:	d1f5      	bne.n	8013c4c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8013c60:	2000      	movs	r0, #0
 8013c62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c66:	4620      	mov	r0, r4
 8013c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c6c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8013c70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013c74:	58d3      	ldr	r3, [r2, r3]
 8013c76:	4718      	bx	r3
 8013c78:	200000b4 	.word	0x200000b4

08013c7c <std_msgs__msg__String__init>:
 8013c7c:	b538      	push	{r3, r4, r5, lr}
 8013c7e:	4604      	mov	r4, r0
 8013c80:	b128      	cbz	r0, 8013c8e <std_msgs__msg__String__init+0x12>
 8013c82:	f002 fee9 	bl	8016a58 <rosidl_runtime_c__String__init>
 8013c86:	4605      	mov	r5, r0
 8013c88:	b120      	cbz	r0, 8013c94 <std_msgs__msg__String__init+0x18>
 8013c8a:	4628      	mov	r0, r5
 8013c8c:	bd38      	pop	{r3, r4, r5, pc}
 8013c8e:	4605      	mov	r5, r0
 8013c90:	4628      	mov	r0, r5
 8013c92:	bd38      	pop	{r3, r4, r5, pc}
 8013c94:	4620      	mov	r0, r4
 8013c96:	f002 fef5 	bl	8016a84 <rosidl_runtime_c__String__fini>
 8013c9a:	4628      	mov	r0, r5
 8013c9c:	bd38      	pop	{r3, r4, r5, pc}
 8013c9e:	bf00      	nop

08013ca0 <std_msgs__msg__String__fini>:
 8013ca0:	b108      	cbz	r0, 8013ca6 <std_msgs__msg__String__fini+0x6>
 8013ca2:	f002 beef 	b.w	8016a84 <rosidl_runtime_c__String__fini>
 8013ca6:	4770      	bx	lr

08013ca8 <ucdr_serialize_endian_array_char>:
 8013ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013cac:	4619      	mov	r1, r3
 8013cae:	461f      	mov	r7, r3
 8013cb0:	4605      	mov	r5, r0
 8013cb2:	4690      	mov	r8, r2
 8013cb4:	f7f9 f9f4 	bl	800d0a0 <ucdr_check_buffer_available_for>
 8013cb8:	b9e0      	cbnz	r0, 8013cf4 <ucdr_serialize_endian_array_char+0x4c>
 8013cba:	463e      	mov	r6, r7
 8013cbc:	e009      	b.n	8013cd2 <ucdr_serialize_endian_array_char+0x2a>
 8013cbe:	68a8      	ldr	r0, [r5, #8]
 8013cc0:	f004 f9ad 	bl	801801e <memcpy>
 8013cc4:	68ab      	ldr	r3, [r5, #8]
 8013cc6:	6928      	ldr	r0, [r5, #16]
 8013cc8:	4423      	add	r3, r4
 8013cca:	4420      	add	r0, r4
 8013ccc:	1b36      	subs	r6, r6, r4
 8013cce:	60ab      	str	r3, [r5, #8]
 8013cd0:	6128      	str	r0, [r5, #16]
 8013cd2:	4631      	mov	r1, r6
 8013cd4:	2201      	movs	r2, #1
 8013cd6:	4628      	mov	r0, r5
 8013cd8:	f7f9 fa6a 	bl	800d1b0 <ucdr_check_final_buffer_behavior_array>
 8013cdc:	1bb9      	subs	r1, r7, r6
 8013cde:	4441      	add	r1, r8
 8013ce0:	4604      	mov	r4, r0
 8013ce2:	4602      	mov	r2, r0
 8013ce4:	2800      	cmp	r0, #0
 8013ce6:	d1ea      	bne.n	8013cbe <ucdr_serialize_endian_array_char+0x16>
 8013ce8:	2301      	movs	r3, #1
 8013cea:	7da8      	ldrb	r0, [r5, #22]
 8013cec:	756b      	strb	r3, [r5, #21]
 8013cee:	4058      	eors	r0, r3
 8013cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013cf4:	463a      	mov	r2, r7
 8013cf6:	68a8      	ldr	r0, [r5, #8]
 8013cf8:	4641      	mov	r1, r8
 8013cfa:	f004 f990 	bl	801801e <memcpy>
 8013cfe:	68aa      	ldr	r2, [r5, #8]
 8013d00:	692b      	ldr	r3, [r5, #16]
 8013d02:	443a      	add	r2, r7
 8013d04:	443b      	add	r3, r7
 8013d06:	60aa      	str	r2, [r5, #8]
 8013d08:	612b      	str	r3, [r5, #16]
 8013d0a:	e7ed      	b.n	8013ce8 <ucdr_serialize_endian_array_char+0x40>

08013d0c <ucdr_deserialize_endian_array_char>:
 8013d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d10:	4619      	mov	r1, r3
 8013d12:	461f      	mov	r7, r3
 8013d14:	4605      	mov	r5, r0
 8013d16:	4690      	mov	r8, r2
 8013d18:	f7f9 f9c2 	bl	800d0a0 <ucdr_check_buffer_available_for>
 8013d1c:	b9e0      	cbnz	r0, 8013d58 <ucdr_deserialize_endian_array_char+0x4c>
 8013d1e:	463e      	mov	r6, r7
 8013d20:	e009      	b.n	8013d36 <ucdr_deserialize_endian_array_char+0x2a>
 8013d22:	68a9      	ldr	r1, [r5, #8]
 8013d24:	f004 f97b 	bl	801801e <memcpy>
 8013d28:	68ab      	ldr	r3, [r5, #8]
 8013d2a:	6928      	ldr	r0, [r5, #16]
 8013d2c:	4423      	add	r3, r4
 8013d2e:	4420      	add	r0, r4
 8013d30:	1b36      	subs	r6, r6, r4
 8013d32:	60ab      	str	r3, [r5, #8]
 8013d34:	6128      	str	r0, [r5, #16]
 8013d36:	2201      	movs	r2, #1
 8013d38:	4631      	mov	r1, r6
 8013d3a:	4628      	mov	r0, r5
 8013d3c:	f7f9 fa38 	bl	800d1b0 <ucdr_check_final_buffer_behavior_array>
 8013d40:	4604      	mov	r4, r0
 8013d42:	1bb8      	subs	r0, r7, r6
 8013d44:	4440      	add	r0, r8
 8013d46:	4622      	mov	r2, r4
 8013d48:	2c00      	cmp	r4, #0
 8013d4a:	d1ea      	bne.n	8013d22 <ucdr_deserialize_endian_array_char+0x16>
 8013d4c:	2301      	movs	r3, #1
 8013d4e:	7da8      	ldrb	r0, [r5, #22]
 8013d50:	756b      	strb	r3, [r5, #21]
 8013d52:	4058      	eors	r0, r3
 8013d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d58:	463a      	mov	r2, r7
 8013d5a:	68a9      	ldr	r1, [r5, #8]
 8013d5c:	4640      	mov	r0, r8
 8013d5e:	f004 f95e 	bl	801801e <memcpy>
 8013d62:	68aa      	ldr	r2, [r5, #8]
 8013d64:	692b      	ldr	r3, [r5, #16]
 8013d66:	443a      	add	r2, r7
 8013d68:	443b      	add	r3, r7
 8013d6a:	60aa      	str	r2, [r5, #8]
 8013d6c:	612b      	str	r3, [r5, #16]
 8013d6e:	e7ed      	b.n	8013d4c <ucdr_deserialize_endian_array_char+0x40>

08013d70 <ucdr_serialize_array_uint8_t>:
 8013d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d74:	4688      	mov	r8, r1
 8013d76:	4611      	mov	r1, r2
 8013d78:	4617      	mov	r7, r2
 8013d7a:	4605      	mov	r5, r0
 8013d7c:	f7f9 f990 	bl	800d0a0 <ucdr_check_buffer_available_for>
 8013d80:	b9e0      	cbnz	r0, 8013dbc <ucdr_serialize_array_uint8_t+0x4c>
 8013d82:	463e      	mov	r6, r7
 8013d84:	e009      	b.n	8013d9a <ucdr_serialize_array_uint8_t+0x2a>
 8013d86:	68a8      	ldr	r0, [r5, #8]
 8013d88:	f004 f949 	bl	801801e <memcpy>
 8013d8c:	68aa      	ldr	r2, [r5, #8]
 8013d8e:	692b      	ldr	r3, [r5, #16]
 8013d90:	4422      	add	r2, r4
 8013d92:	4423      	add	r3, r4
 8013d94:	1b36      	subs	r6, r6, r4
 8013d96:	60aa      	str	r2, [r5, #8]
 8013d98:	612b      	str	r3, [r5, #16]
 8013d9a:	4631      	mov	r1, r6
 8013d9c:	2201      	movs	r2, #1
 8013d9e:	4628      	mov	r0, r5
 8013da0:	f7f9 fa06 	bl	800d1b0 <ucdr_check_final_buffer_behavior_array>
 8013da4:	1bb9      	subs	r1, r7, r6
 8013da6:	4441      	add	r1, r8
 8013da8:	4604      	mov	r4, r0
 8013daa:	4602      	mov	r2, r0
 8013dac:	2800      	cmp	r0, #0
 8013dae:	d1ea      	bne.n	8013d86 <ucdr_serialize_array_uint8_t+0x16>
 8013db0:	2301      	movs	r3, #1
 8013db2:	7da8      	ldrb	r0, [r5, #22]
 8013db4:	756b      	strb	r3, [r5, #21]
 8013db6:	4058      	eors	r0, r3
 8013db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013dbc:	463a      	mov	r2, r7
 8013dbe:	68a8      	ldr	r0, [r5, #8]
 8013dc0:	4641      	mov	r1, r8
 8013dc2:	f004 f92c 	bl	801801e <memcpy>
 8013dc6:	68aa      	ldr	r2, [r5, #8]
 8013dc8:	692b      	ldr	r3, [r5, #16]
 8013dca:	443a      	add	r2, r7
 8013dcc:	443b      	add	r3, r7
 8013dce:	60aa      	str	r2, [r5, #8]
 8013dd0:	612b      	str	r3, [r5, #16]
 8013dd2:	e7ed      	b.n	8013db0 <ucdr_serialize_array_uint8_t+0x40>

08013dd4 <ucdr_serialize_endian_array_uint8_t>:
 8013dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013dd8:	4619      	mov	r1, r3
 8013dda:	461f      	mov	r7, r3
 8013ddc:	4605      	mov	r5, r0
 8013dde:	4690      	mov	r8, r2
 8013de0:	f7f9 f95e 	bl	800d0a0 <ucdr_check_buffer_available_for>
 8013de4:	b9e0      	cbnz	r0, 8013e20 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8013de6:	463e      	mov	r6, r7
 8013de8:	e009      	b.n	8013dfe <ucdr_serialize_endian_array_uint8_t+0x2a>
 8013dea:	68a8      	ldr	r0, [r5, #8]
 8013dec:	f004 f917 	bl	801801e <memcpy>
 8013df0:	68ab      	ldr	r3, [r5, #8]
 8013df2:	6928      	ldr	r0, [r5, #16]
 8013df4:	4423      	add	r3, r4
 8013df6:	4420      	add	r0, r4
 8013df8:	1b36      	subs	r6, r6, r4
 8013dfa:	60ab      	str	r3, [r5, #8]
 8013dfc:	6128      	str	r0, [r5, #16]
 8013dfe:	4631      	mov	r1, r6
 8013e00:	2201      	movs	r2, #1
 8013e02:	4628      	mov	r0, r5
 8013e04:	f7f9 f9d4 	bl	800d1b0 <ucdr_check_final_buffer_behavior_array>
 8013e08:	1bb9      	subs	r1, r7, r6
 8013e0a:	4441      	add	r1, r8
 8013e0c:	4604      	mov	r4, r0
 8013e0e:	4602      	mov	r2, r0
 8013e10:	2800      	cmp	r0, #0
 8013e12:	d1ea      	bne.n	8013dea <ucdr_serialize_endian_array_uint8_t+0x16>
 8013e14:	2301      	movs	r3, #1
 8013e16:	7da8      	ldrb	r0, [r5, #22]
 8013e18:	756b      	strb	r3, [r5, #21]
 8013e1a:	4058      	eors	r0, r3
 8013e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e20:	463a      	mov	r2, r7
 8013e22:	68a8      	ldr	r0, [r5, #8]
 8013e24:	4641      	mov	r1, r8
 8013e26:	f004 f8fa 	bl	801801e <memcpy>
 8013e2a:	68aa      	ldr	r2, [r5, #8]
 8013e2c:	692b      	ldr	r3, [r5, #16]
 8013e2e:	443a      	add	r2, r7
 8013e30:	443b      	add	r3, r7
 8013e32:	60aa      	str	r2, [r5, #8]
 8013e34:	612b      	str	r3, [r5, #16]
 8013e36:	e7ed      	b.n	8013e14 <ucdr_serialize_endian_array_uint8_t+0x40>

08013e38 <ucdr_deserialize_array_uint8_t>:
 8013e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e3c:	4688      	mov	r8, r1
 8013e3e:	4611      	mov	r1, r2
 8013e40:	4617      	mov	r7, r2
 8013e42:	4605      	mov	r5, r0
 8013e44:	f7f9 f92c 	bl	800d0a0 <ucdr_check_buffer_available_for>
 8013e48:	b9e0      	cbnz	r0, 8013e84 <ucdr_deserialize_array_uint8_t+0x4c>
 8013e4a:	463e      	mov	r6, r7
 8013e4c:	e009      	b.n	8013e62 <ucdr_deserialize_array_uint8_t+0x2a>
 8013e4e:	68a9      	ldr	r1, [r5, #8]
 8013e50:	f004 f8e5 	bl	801801e <memcpy>
 8013e54:	68aa      	ldr	r2, [r5, #8]
 8013e56:	692b      	ldr	r3, [r5, #16]
 8013e58:	4422      	add	r2, r4
 8013e5a:	4423      	add	r3, r4
 8013e5c:	1b36      	subs	r6, r6, r4
 8013e5e:	60aa      	str	r2, [r5, #8]
 8013e60:	612b      	str	r3, [r5, #16]
 8013e62:	2201      	movs	r2, #1
 8013e64:	4631      	mov	r1, r6
 8013e66:	4628      	mov	r0, r5
 8013e68:	f7f9 f9a2 	bl	800d1b0 <ucdr_check_final_buffer_behavior_array>
 8013e6c:	4604      	mov	r4, r0
 8013e6e:	1bb8      	subs	r0, r7, r6
 8013e70:	4440      	add	r0, r8
 8013e72:	4622      	mov	r2, r4
 8013e74:	2c00      	cmp	r4, #0
 8013e76:	d1ea      	bne.n	8013e4e <ucdr_deserialize_array_uint8_t+0x16>
 8013e78:	2301      	movs	r3, #1
 8013e7a:	7da8      	ldrb	r0, [r5, #22]
 8013e7c:	756b      	strb	r3, [r5, #21]
 8013e7e:	4058      	eors	r0, r3
 8013e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e84:	463a      	mov	r2, r7
 8013e86:	68a9      	ldr	r1, [r5, #8]
 8013e88:	4640      	mov	r0, r8
 8013e8a:	f004 f8c8 	bl	801801e <memcpy>
 8013e8e:	68aa      	ldr	r2, [r5, #8]
 8013e90:	692b      	ldr	r3, [r5, #16]
 8013e92:	443a      	add	r2, r7
 8013e94:	443b      	add	r3, r7
 8013e96:	60aa      	str	r2, [r5, #8]
 8013e98:	612b      	str	r3, [r5, #16]
 8013e9a:	e7ed      	b.n	8013e78 <ucdr_deserialize_array_uint8_t+0x40>

08013e9c <ucdr_deserialize_endian_array_uint8_t>:
 8013e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ea0:	4619      	mov	r1, r3
 8013ea2:	461f      	mov	r7, r3
 8013ea4:	4605      	mov	r5, r0
 8013ea6:	4690      	mov	r8, r2
 8013ea8:	f7f9 f8fa 	bl	800d0a0 <ucdr_check_buffer_available_for>
 8013eac:	b9e0      	cbnz	r0, 8013ee8 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8013eae:	463e      	mov	r6, r7
 8013eb0:	e009      	b.n	8013ec6 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8013eb2:	68a9      	ldr	r1, [r5, #8]
 8013eb4:	f004 f8b3 	bl	801801e <memcpy>
 8013eb8:	68ab      	ldr	r3, [r5, #8]
 8013eba:	6928      	ldr	r0, [r5, #16]
 8013ebc:	4423      	add	r3, r4
 8013ebe:	4420      	add	r0, r4
 8013ec0:	1b36      	subs	r6, r6, r4
 8013ec2:	60ab      	str	r3, [r5, #8]
 8013ec4:	6128      	str	r0, [r5, #16]
 8013ec6:	2201      	movs	r2, #1
 8013ec8:	4631      	mov	r1, r6
 8013eca:	4628      	mov	r0, r5
 8013ecc:	f7f9 f970 	bl	800d1b0 <ucdr_check_final_buffer_behavior_array>
 8013ed0:	4604      	mov	r4, r0
 8013ed2:	1bb8      	subs	r0, r7, r6
 8013ed4:	4440      	add	r0, r8
 8013ed6:	4622      	mov	r2, r4
 8013ed8:	2c00      	cmp	r4, #0
 8013eda:	d1ea      	bne.n	8013eb2 <ucdr_deserialize_endian_array_uint8_t+0x16>
 8013edc:	2301      	movs	r3, #1
 8013ede:	7da8      	ldrb	r0, [r5, #22]
 8013ee0:	756b      	strb	r3, [r5, #21]
 8013ee2:	4058      	eors	r0, r3
 8013ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ee8:	463a      	mov	r2, r7
 8013eea:	68a9      	ldr	r1, [r5, #8]
 8013eec:	4640      	mov	r0, r8
 8013eee:	f004 f896 	bl	801801e <memcpy>
 8013ef2:	68aa      	ldr	r2, [r5, #8]
 8013ef4:	692b      	ldr	r3, [r5, #16]
 8013ef6:	443a      	add	r2, r7
 8013ef8:	443b      	add	r3, r7
 8013efa:	60aa      	str	r2, [r5, #8]
 8013efc:	612b      	str	r3, [r5, #16]
 8013efe:	e7ed      	b.n	8013edc <ucdr_deserialize_endian_array_uint8_t+0x40>

08013f00 <ucdr_serialize_bool>:
 8013f00:	b538      	push	{r3, r4, r5, lr}
 8013f02:	460d      	mov	r5, r1
 8013f04:	2101      	movs	r1, #1
 8013f06:	4604      	mov	r4, r0
 8013f08:	f7f9 f8d6 	bl	800d0b8 <ucdr_check_final_buffer_behavior>
 8013f0c:	b148      	cbz	r0, 8013f22 <ucdr_serialize_bool+0x22>
 8013f0e:	68a3      	ldr	r3, [r4, #8]
 8013f10:	701d      	strb	r5, [r3, #0]
 8013f12:	68a2      	ldr	r2, [r4, #8]
 8013f14:	6923      	ldr	r3, [r4, #16]
 8013f16:	2101      	movs	r1, #1
 8013f18:	440a      	add	r2, r1
 8013f1a:	440b      	add	r3, r1
 8013f1c:	60a2      	str	r2, [r4, #8]
 8013f1e:	6123      	str	r3, [r4, #16]
 8013f20:	7561      	strb	r1, [r4, #21]
 8013f22:	7da0      	ldrb	r0, [r4, #22]
 8013f24:	f080 0001 	eor.w	r0, r0, #1
 8013f28:	bd38      	pop	{r3, r4, r5, pc}
 8013f2a:	bf00      	nop

08013f2c <ucdr_deserialize_bool>:
 8013f2c:	b538      	push	{r3, r4, r5, lr}
 8013f2e:	460d      	mov	r5, r1
 8013f30:	2101      	movs	r1, #1
 8013f32:	4604      	mov	r4, r0
 8013f34:	f7f9 f8c0 	bl	800d0b8 <ucdr_check_final_buffer_behavior>
 8013f38:	b160      	cbz	r0, 8013f54 <ucdr_deserialize_bool+0x28>
 8013f3a:	68a2      	ldr	r2, [r4, #8]
 8013f3c:	6923      	ldr	r3, [r4, #16]
 8013f3e:	f812 1b01 	ldrb.w	r1, [r2], #1
 8013f42:	3900      	subs	r1, #0
 8013f44:	bf18      	it	ne
 8013f46:	2101      	movne	r1, #1
 8013f48:	7029      	strb	r1, [r5, #0]
 8013f4a:	3301      	adds	r3, #1
 8013f4c:	2101      	movs	r1, #1
 8013f4e:	60a2      	str	r2, [r4, #8]
 8013f50:	6123      	str	r3, [r4, #16]
 8013f52:	7561      	strb	r1, [r4, #21]
 8013f54:	7da0      	ldrb	r0, [r4, #22]
 8013f56:	f080 0001 	eor.w	r0, r0, #1
 8013f5a:	bd38      	pop	{r3, r4, r5, pc}

08013f5c <ucdr_serialize_uint8_t>:
 8013f5c:	b538      	push	{r3, r4, r5, lr}
 8013f5e:	460d      	mov	r5, r1
 8013f60:	2101      	movs	r1, #1
 8013f62:	4604      	mov	r4, r0
 8013f64:	f7f9 f8a8 	bl	800d0b8 <ucdr_check_final_buffer_behavior>
 8013f68:	b148      	cbz	r0, 8013f7e <ucdr_serialize_uint8_t+0x22>
 8013f6a:	68a3      	ldr	r3, [r4, #8]
 8013f6c:	701d      	strb	r5, [r3, #0]
 8013f6e:	68a2      	ldr	r2, [r4, #8]
 8013f70:	6923      	ldr	r3, [r4, #16]
 8013f72:	2101      	movs	r1, #1
 8013f74:	440a      	add	r2, r1
 8013f76:	440b      	add	r3, r1
 8013f78:	60a2      	str	r2, [r4, #8]
 8013f7a:	6123      	str	r3, [r4, #16]
 8013f7c:	7561      	strb	r1, [r4, #21]
 8013f7e:	7da0      	ldrb	r0, [r4, #22]
 8013f80:	f080 0001 	eor.w	r0, r0, #1
 8013f84:	bd38      	pop	{r3, r4, r5, pc}
 8013f86:	bf00      	nop

08013f88 <ucdr_deserialize_uint8_t>:
 8013f88:	b538      	push	{r3, r4, r5, lr}
 8013f8a:	460d      	mov	r5, r1
 8013f8c:	2101      	movs	r1, #1
 8013f8e:	4604      	mov	r4, r0
 8013f90:	f7f9 f892 	bl	800d0b8 <ucdr_check_final_buffer_behavior>
 8013f94:	b150      	cbz	r0, 8013fac <ucdr_deserialize_uint8_t+0x24>
 8013f96:	68a3      	ldr	r3, [r4, #8]
 8013f98:	781b      	ldrb	r3, [r3, #0]
 8013f9a:	702b      	strb	r3, [r5, #0]
 8013f9c:	68a2      	ldr	r2, [r4, #8]
 8013f9e:	6923      	ldr	r3, [r4, #16]
 8013fa0:	2101      	movs	r1, #1
 8013fa2:	440a      	add	r2, r1
 8013fa4:	440b      	add	r3, r1
 8013fa6:	60a2      	str	r2, [r4, #8]
 8013fa8:	6123      	str	r3, [r4, #16]
 8013faa:	7561      	strb	r1, [r4, #21]
 8013fac:	7da0      	ldrb	r0, [r4, #22]
 8013fae:	f080 0001 	eor.w	r0, r0, #1
 8013fb2:	bd38      	pop	{r3, r4, r5, pc}

08013fb4 <ucdr_serialize_uint16_t>:
 8013fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013fb8:	b082      	sub	sp, #8
 8013fba:	460b      	mov	r3, r1
 8013fbc:	2102      	movs	r1, #2
 8013fbe:	4604      	mov	r4, r0
 8013fc0:	f8ad 3006 	strh.w	r3, [sp, #6]
 8013fc4:	f7f9 f8cc 	bl	800d160 <ucdr_buffer_alignment>
 8013fc8:	4601      	mov	r1, r0
 8013fca:	4620      	mov	r0, r4
 8013fcc:	7d67      	ldrb	r7, [r4, #21]
 8013fce:	f7f9 f90b 	bl	800d1e8 <ucdr_advance_buffer>
 8013fd2:	2102      	movs	r1, #2
 8013fd4:	4620      	mov	r0, r4
 8013fd6:	f7f9 f863 	bl	800d0a0 <ucdr_check_buffer_available_for>
 8013fda:	bb78      	cbnz	r0, 801403c <ucdr_serialize_uint16_t+0x88>
 8013fdc:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8013fe0:	42ab      	cmp	r3, r5
 8013fe2:	d926      	bls.n	8014032 <ucdr_serialize_uint16_t+0x7e>
 8013fe4:	1b5e      	subs	r6, r3, r5
 8013fe6:	60a3      	str	r3, [r4, #8]
 8013fe8:	6923      	ldr	r3, [r4, #16]
 8013fea:	f1c6 0802 	rsb	r8, r6, #2
 8013fee:	4433      	add	r3, r6
 8013ff0:	6123      	str	r3, [r4, #16]
 8013ff2:	4641      	mov	r1, r8
 8013ff4:	4620      	mov	r0, r4
 8013ff6:	f7f9 f85f 	bl	800d0b8 <ucdr_check_final_buffer_behavior>
 8013ffa:	2800      	cmp	r0, #0
 8013ffc:	d03b      	beq.n	8014076 <ucdr_serialize_uint16_t+0xc2>
 8013ffe:	7d23      	ldrb	r3, [r4, #20]
 8014000:	2b01      	cmp	r3, #1
 8014002:	d04a      	beq.n	801409a <ucdr_serialize_uint16_t+0xe6>
 8014004:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8014008:	702b      	strb	r3, [r5, #0]
 801400a:	2e00      	cmp	r6, #0
 801400c:	d040      	beq.n	8014090 <ucdr_serialize_uint16_t+0xdc>
 801400e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8014012:	706b      	strb	r3, [r5, #1]
 8014014:	6923      	ldr	r3, [r4, #16]
 8014016:	68a2      	ldr	r2, [r4, #8]
 8014018:	7da0      	ldrb	r0, [r4, #22]
 801401a:	3302      	adds	r3, #2
 801401c:	1b9e      	subs	r6, r3, r6
 801401e:	4442      	add	r2, r8
 8014020:	2302      	movs	r3, #2
 8014022:	f080 0001 	eor.w	r0, r0, #1
 8014026:	60a2      	str	r2, [r4, #8]
 8014028:	6126      	str	r6, [r4, #16]
 801402a:	7563      	strb	r3, [r4, #21]
 801402c:	b002      	add	sp, #8
 801402e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014032:	2102      	movs	r1, #2
 8014034:	4620      	mov	r0, r4
 8014036:	f7f9 f83f 	bl	800d0b8 <ucdr_check_final_buffer_behavior>
 801403a:	b190      	cbz	r0, 8014062 <ucdr_serialize_uint16_t+0xae>
 801403c:	7d23      	ldrb	r3, [r4, #20]
 801403e:	2b01      	cmp	r3, #1
 8014040:	68a3      	ldr	r3, [r4, #8]
 8014042:	d014      	beq.n	801406e <ucdr_serialize_uint16_t+0xba>
 8014044:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8014048:	701a      	strb	r2, [r3, #0]
 801404a:	68a3      	ldr	r3, [r4, #8]
 801404c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8014050:	705a      	strb	r2, [r3, #1]
 8014052:	68a2      	ldr	r2, [r4, #8]
 8014054:	6923      	ldr	r3, [r4, #16]
 8014056:	3202      	adds	r2, #2
 8014058:	3302      	adds	r3, #2
 801405a:	2102      	movs	r1, #2
 801405c:	60a2      	str	r2, [r4, #8]
 801405e:	6123      	str	r3, [r4, #16]
 8014060:	7561      	strb	r1, [r4, #21]
 8014062:	7da0      	ldrb	r0, [r4, #22]
 8014064:	f080 0001 	eor.w	r0, r0, #1
 8014068:	b002      	add	sp, #8
 801406a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801406e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8014072:	801a      	strh	r2, [r3, #0]
 8014074:	e7ed      	b.n	8014052 <ucdr_serialize_uint16_t+0x9e>
 8014076:	68a2      	ldr	r2, [r4, #8]
 8014078:	6923      	ldr	r3, [r4, #16]
 801407a:	7da0      	ldrb	r0, [r4, #22]
 801407c:	7567      	strb	r7, [r4, #21]
 801407e:	1b92      	subs	r2, r2, r6
 8014080:	1b9b      	subs	r3, r3, r6
 8014082:	f080 0001 	eor.w	r0, r0, #1
 8014086:	60a2      	str	r2, [r4, #8]
 8014088:	6123      	str	r3, [r4, #16]
 801408a:	b002      	add	sp, #8
 801408c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014090:	68a3      	ldr	r3, [r4, #8]
 8014092:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8014096:	701a      	strb	r2, [r3, #0]
 8014098:	e7bc      	b.n	8014014 <ucdr_serialize_uint16_t+0x60>
 801409a:	4628      	mov	r0, r5
 801409c:	f10d 0506 	add.w	r5, sp, #6
 80140a0:	4629      	mov	r1, r5
 80140a2:	4632      	mov	r2, r6
 80140a4:	f003 ffbb 	bl	801801e <memcpy>
 80140a8:	68a0      	ldr	r0, [r4, #8]
 80140aa:	4642      	mov	r2, r8
 80140ac:	19a9      	adds	r1, r5, r6
 80140ae:	f003 ffb6 	bl	801801e <memcpy>
 80140b2:	e7af      	b.n	8014014 <ucdr_serialize_uint16_t+0x60>

080140b4 <ucdr_serialize_endian_uint16_t>:
 80140b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80140b8:	b083      	sub	sp, #12
 80140ba:	460d      	mov	r5, r1
 80140bc:	2102      	movs	r1, #2
 80140be:	4604      	mov	r4, r0
 80140c0:	f8ad 2006 	strh.w	r2, [sp, #6]
 80140c4:	f7f9 f84c 	bl	800d160 <ucdr_buffer_alignment>
 80140c8:	4601      	mov	r1, r0
 80140ca:	4620      	mov	r0, r4
 80140cc:	f894 8015 	ldrb.w	r8, [r4, #21]
 80140d0:	f7f9 f88a 	bl	800d1e8 <ucdr_advance_buffer>
 80140d4:	2102      	movs	r1, #2
 80140d6:	4620      	mov	r0, r4
 80140d8:	f7f8 ffe2 	bl	800d0a0 <ucdr_check_buffer_available_for>
 80140dc:	bb70      	cbnz	r0, 801413c <ucdr_serialize_endian_uint16_t+0x88>
 80140de:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80140e2:	42be      	cmp	r6, r7
 80140e4:	d925      	bls.n	8014132 <ucdr_serialize_endian_uint16_t+0x7e>
 80140e6:	6923      	ldr	r3, [r4, #16]
 80140e8:	60a6      	str	r6, [r4, #8]
 80140ea:	1bf6      	subs	r6, r6, r7
 80140ec:	4433      	add	r3, r6
 80140ee:	f1c6 0902 	rsb	r9, r6, #2
 80140f2:	6123      	str	r3, [r4, #16]
 80140f4:	4649      	mov	r1, r9
 80140f6:	4620      	mov	r0, r4
 80140f8:	f7f8 ffde 	bl	800d0b8 <ucdr_check_final_buffer_behavior>
 80140fc:	2800      	cmp	r0, #0
 80140fe:	d039      	beq.n	8014174 <ucdr_serialize_endian_uint16_t+0xc0>
 8014100:	2d01      	cmp	r5, #1
 8014102:	d04a      	beq.n	801419a <ucdr_serialize_endian_uint16_t+0xe6>
 8014104:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8014108:	703b      	strb	r3, [r7, #0]
 801410a:	2e00      	cmp	r6, #0
 801410c:	d040      	beq.n	8014190 <ucdr_serialize_endian_uint16_t+0xdc>
 801410e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8014112:	707b      	strb	r3, [r7, #1]
 8014114:	6923      	ldr	r3, [r4, #16]
 8014116:	68a2      	ldr	r2, [r4, #8]
 8014118:	7da0      	ldrb	r0, [r4, #22]
 801411a:	3302      	adds	r3, #2
 801411c:	444a      	add	r2, r9
 801411e:	1b9b      	subs	r3, r3, r6
 8014120:	2102      	movs	r1, #2
 8014122:	f080 0001 	eor.w	r0, r0, #1
 8014126:	60a2      	str	r2, [r4, #8]
 8014128:	6123      	str	r3, [r4, #16]
 801412a:	7561      	strb	r1, [r4, #21]
 801412c:	b003      	add	sp, #12
 801412e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014132:	2102      	movs	r1, #2
 8014134:	4620      	mov	r0, r4
 8014136:	f7f8 ffbf 	bl	800d0b8 <ucdr_check_final_buffer_behavior>
 801413a:	b188      	cbz	r0, 8014160 <ucdr_serialize_endian_uint16_t+0xac>
 801413c:	2d01      	cmp	r5, #1
 801413e:	68a3      	ldr	r3, [r4, #8]
 8014140:	d014      	beq.n	801416c <ucdr_serialize_endian_uint16_t+0xb8>
 8014142:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8014146:	701a      	strb	r2, [r3, #0]
 8014148:	68a3      	ldr	r3, [r4, #8]
 801414a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801414e:	705a      	strb	r2, [r3, #1]
 8014150:	68a2      	ldr	r2, [r4, #8]
 8014152:	6923      	ldr	r3, [r4, #16]
 8014154:	3202      	adds	r2, #2
 8014156:	3302      	adds	r3, #2
 8014158:	2102      	movs	r1, #2
 801415a:	60a2      	str	r2, [r4, #8]
 801415c:	6123      	str	r3, [r4, #16]
 801415e:	7561      	strb	r1, [r4, #21]
 8014160:	7da0      	ldrb	r0, [r4, #22]
 8014162:	f080 0001 	eor.w	r0, r0, #1
 8014166:	b003      	add	sp, #12
 8014168:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801416c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8014170:	801a      	strh	r2, [r3, #0]
 8014172:	e7ed      	b.n	8014150 <ucdr_serialize_endian_uint16_t+0x9c>
 8014174:	68a2      	ldr	r2, [r4, #8]
 8014176:	6923      	ldr	r3, [r4, #16]
 8014178:	7da0      	ldrb	r0, [r4, #22]
 801417a:	f884 8015 	strb.w	r8, [r4, #21]
 801417e:	1b92      	subs	r2, r2, r6
 8014180:	1b9b      	subs	r3, r3, r6
 8014182:	f080 0001 	eor.w	r0, r0, #1
 8014186:	60a2      	str	r2, [r4, #8]
 8014188:	6123      	str	r3, [r4, #16]
 801418a:	b003      	add	sp, #12
 801418c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014190:	68a3      	ldr	r3, [r4, #8]
 8014192:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8014196:	701a      	strb	r2, [r3, #0]
 8014198:	e7bc      	b.n	8014114 <ucdr_serialize_endian_uint16_t+0x60>
 801419a:	f10d 0506 	add.w	r5, sp, #6
 801419e:	4629      	mov	r1, r5
 80141a0:	4632      	mov	r2, r6
 80141a2:	4638      	mov	r0, r7
 80141a4:	f003 ff3b 	bl	801801e <memcpy>
 80141a8:	68a0      	ldr	r0, [r4, #8]
 80141aa:	464a      	mov	r2, r9
 80141ac:	19a9      	adds	r1, r5, r6
 80141ae:	f003 ff36 	bl	801801e <memcpy>
 80141b2:	e7af      	b.n	8014114 <ucdr_serialize_endian_uint16_t+0x60>

080141b4 <ucdr_deserialize_uint16_t>:
 80141b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80141b8:	460d      	mov	r5, r1
 80141ba:	2102      	movs	r1, #2
 80141bc:	4604      	mov	r4, r0
 80141be:	f7f8 ffcf 	bl	800d160 <ucdr_buffer_alignment>
 80141c2:	4601      	mov	r1, r0
 80141c4:	4620      	mov	r0, r4
 80141c6:	f894 8015 	ldrb.w	r8, [r4, #21]
 80141ca:	f7f9 f80d 	bl	800d1e8 <ucdr_advance_buffer>
 80141ce:	2102      	movs	r1, #2
 80141d0:	4620      	mov	r0, r4
 80141d2:	f7f8 ff65 	bl	800d0a0 <ucdr_check_buffer_available_for>
 80141d6:	bb60      	cbnz	r0, 8014232 <ucdr_deserialize_uint16_t+0x7e>
 80141d8:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80141dc:	42be      	cmp	r6, r7
 80141de:	d923      	bls.n	8014228 <ucdr_deserialize_uint16_t+0x74>
 80141e0:	6923      	ldr	r3, [r4, #16]
 80141e2:	60a6      	str	r6, [r4, #8]
 80141e4:	1bf6      	subs	r6, r6, r7
 80141e6:	4433      	add	r3, r6
 80141e8:	f1c6 0902 	rsb	r9, r6, #2
 80141ec:	6123      	str	r3, [r4, #16]
 80141ee:	4649      	mov	r1, r9
 80141f0:	4620      	mov	r0, r4
 80141f2:	f7f8 ff61 	bl	800d0b8 <ucdr_check_final_buffer_behavior>
 80141f6:	2800      	cmp	r0, #0
 80141f8:	d034      	beq.n	8014264 <ucdr_deserialize_uint16_t+0xb0>
 80141fa:	7d23      	ldrb	r3, [r4, #20]
 80141fc:	2b01      	cmp	r3, #1
 80141fe:	d042      	beq.n	8014286 <ucdr_deserialize_uint16_t+0xd2>
 8014200:	787b      	ldrb	r3, [r7, #1]
 8014202:	702b      	strb	r3, [r5, #0]
 8014204:	2e00      	cmp	r6, #0
 8014206:	d03a      	beq.n	801427e <ucdr_deserialize_uint16_t+0xca>
 8014208:	783b      	ldrb	r3, [r7, #0]
 801420a:	706b      	strb	r3, [r5, #1]
 801420c:	6923      	ldr	r3, [r4, #16]
 801420e:	68a2      	ldr	r2, [r4, #8]
 8014210:	7da0      	ldrb	r0, [r4, #22]
 8014212:	2102      	movs	r1, #2
 8014214:	3302      	adds	r3, #2
 8014216:	444a      	add	r2, r9
 8014218:	1b9b      	subs	r3, r3, r6
 801421a:	7561      	strb	r1, [r4, #21]
 801421c:	60a2      	str	r2, [r4, #8]
 801421e:	6123      	str	r3, [r4, #16]
 8014220:	f080 0001 	eor.w	r0, r0, #1
 8014224:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014228:	2102      	movs	r1, #2
 801422a:	4620      	mov	r0, r4
 801422c:	f7f8 ff44 	bl	800d0b8 <ucdr_check_final_buffer_behavior>
 8014230:	b180      	cbz	r0, 8014254 <ucdr_deserialize_uint16_t+0xa0>
 8014232:	7d23      	ldrb	r3, [r4, #20]
 8014234:	2b01      	cmp	r3, #1
 8014236:	68a3      	ldr	r3, [r4, #8]
 8014238:	d011      	beq.n	801425e <ucdr_deserialize_uint16_t+0xaa>
 801423a:	785b      	ldrb	r3, [r3, #1]
 801423c:	702b      	strb	r3, [r5, #0]
 801423e:	68a3      	ldr	r3, [r4, #8]
 8014240:	781b      	ldrb	r3, [r3, #0]
 8014242:	706b      	strb	r3, [r5, #1]
 8014244:	68a2      	ldr	r2, [r4, #8]
 8014246:	6923      	ldr	r3, [r4, #16]
 8014248:	3202      	adds	r2, #2
 801424a:	3302      	adds	r3, #2
 801424c:	2102      	movs	r1, #2
 801424e:	60a2      	str	r2, [r4, #8]
 8014250:	6123      	str	r3, [r4, #16]
 8014252:	7561      	strb	r1, [r4, #21]
 8014254:	7da0      	ldrb	r0, [r4, #22]
 8014256:	f080 0001 	eor.w	r0, r0, #1
 801425a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801425e:	881b      	ldrh	r3, [r3, #0]
 8014260:	802b      	strh	r3, [r5, #0]
 8014262:	e7ef      	b.n	8014244 <ucdr_deserialize_uint16_t+0x90>
 8014264:	68a2      	ldr	r2, [r4, #8]
 8014266:	6923      	ldr	r3, [r4, #16]
 8014268:	7da0      	ldrb	r0, [r4, #22]
 801426a:	f884 8015 	strb.w	r8, [r4, #21]
 801426e:	1b92      	subs	r2, r2, r6
 8014270:	1b9b      	subs	r3, r3, r6
 8014272:	60a2      	str	r2, [r4, #8]
 8014274:	6123      	str	r3, [r4, #16]
 8014276:	f080 0001 	eor.w	r0, r0, #1
 801427a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801427e:	68a3      	ldr	r3, [r4, #8]
 8014280:	781b      	ldrb	r3, [r3, #0]
 8014282:	706b      	strb	r3, [r5, #1]
 8014284:	e7c2      	b.n	801420c <ucdr_deserialize_uint16_t+0x58>
 8014286:	4639      	mov	r1, r7
 8014288:	4632      	mov	r2, r6
 801428a:	4628      	mov	r0, r5
 801428c:	f003 fec7 	bl	801801e <memcpy>
 8014290:	68a1      	ldr	r1, [r4, #8]
 8014292:	464a      	mov	r2, r9
 8014294:	19a8      	adds	r0, r5, r6
 8014296:	f003 fec2 	bl	801801e <memcpy>
 801429a:	e7b7      	b.n	801420c <ucdr_deserialize_uint16_t+0x58>

0801429c <ucdr_deserialize_endian_uint16_t>:
 801429c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80142a0:	460e      	mov	r6, r1
 80142a2:	2102      	movs	r1, #2
 80142a4:	4604      	mov	r4, r0
 80142a6:	4615      	mov	r5, r2
 80142a8:	f7f8 ff5a 	bl	800d160 <ucdr_buffer_alignment>
 80142ac:	4601      	mov	r1, r0
 80142ae:	4620      	mov	r0, r4
 80142b0:	f894 9015 	ldrb.w	r9, [r4, #21]
 80142b4:	f7f8 ff98 	bl	800d1e8 <ucdr_advance_buffer>
 80142b8:	2102      	movs	r1, #2
 80142ba:	4620      	mov	r0, r4
 80142bc:	f7f8 fef0 	bl	800d0a0 <ucdr_check_buffer_available_for>
 80142c0:	bb70      	cbnz	r0, 8014320 <ucdr_deserialize_endian_uint16_t+0x84>
 80142c2:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 80142c6:	4547      	cmp	r7, r8
 80142c8:	d925      	bls.n	8014316 <ucdr_deserialize_endian_uint16_t+0x7a>
 80142ca:	6923      	ldr	r3, [r4, #16]
 80142cc:	60a7      	str	r7, [r4, #8]
 80142ce:	eba7 0708 	sub.w	r7, r7, r8
 80142d2:	443b      	add	r3, r7
 80142d4:	f1c7 0a02 	rsb	sl, r7, #2
 80142d8:	6123      	str	r3, [r4, #16]
 80142da:	4651      	mov	r1, sl
 80142dc:	4620      	mov	r0, r4
 80142de:	f7f8 feeb 	bl	800d0b8 <ucdr_check_final_buffer_behavior>
 80142e2:	2800      	cmp	r0, #0
 80142e4:	d034      	beq.n	8014350 <ucdr_deserialize_endian_uint16_t+0xb4>
 80142e6:	2e01      	cmp	r6, #1
 80142e8:	d043      	beq.n	8014372 <ucdr_deserialize_endian_uint16_t+0xd6>
 80142ea:	f898 3001 	ldrb.w	r3, [r8, #1]
 80142ee:	702b      	strb	r3, [r5, #0]
 80142f0:	2f00      	cmp	r7, #0
 80142f2:	d03a      	beq.n	801436a <ucdr_deserialize_endian_uint16_t+0xce>
 80142f4:	f898 3000 	ldrb.w	r3, [r8]
 80142f8:	706b      	strb	r3, [r5, #1]
 80142fa:	6923      	ldr	r3, [r4, #16]
 80142fc:	68a2      	ldr	r2, [r4, #8]
 80142fe:	7da0      	ldrb	r0, [r4, #22]
 8014300:	2102      	movs	r1, #2
 8014302:	3302      	adds	r3, #2
 8014304:	4452      	add	r2, sl
 8014306:	1bdb      	subs	r3, r3, r7
 8014308:	7561      	strb	r1, [r4, #21]
 801430a:	60a2      	str	r2, [r4, #8]
 801430c:	6123      	str	r3, [r4, #16]
 801430e:	f080 0001 	eor.w	r0, r0, #1
 8014312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014316:	2102      	movs	r1, #2
 8014318:	4620      	mov	r0, r4
 801431a:	f7f8 fecd 	bl	800d0b8 <ucdr_check_final_buffer_behavior>
 801431e:	b178      	cbz	r0, 8014340 <ucdr_deserialize_endian_uint16_t+0xa4>
 8014320:	2e01      	cmp	r6, #1
 8014322:	68a3      	ldr	r3, [r4, #8]
 8014324:	d011      	beq.n	801434a <ucdr_deserialize_endian_uint16_t+0xae>
 8014326:	785b      	ldrb	r3, [r3, #1]
 8014328:	702b      	strb	r3, [r5, #0]
 801432a:	68a3      	ldr	r3, [r4, #8]
 801432c:	781b      	ldrb	r3, [r3, #0]
 801432e:	706b      	strb	r3, [r5, #1]
 8014330:	68a2      	ldr	r2, [r4, #8]
 8014332:	6923      	ldr	r3, [r4, #16]
 8014334:	3202      	adds	r2, #2
 8014336:	3302      	adds	r3, #2
 8014338:	2102      	movs	r1, #2
 801433a:	60a2      	str	r2, [r4, #8]
 801433c:	6123      	str	r3, [r4, #16]
 801433e:	7561      	strb	r1, [r4, #21]
 8014340:	7da0      	ldrb	r0, [r4, #22]
 8014342:	f080 0001 	eor.w	r0, r0, #1
 8014346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801434a:	881b      	ldrh	r3, [r3, #0]
 801434c:	802b      	strh	r3, [r5, #0]
 801434e:	e7ef      	b.n	8014330 <ucdr_deserialize_endian_uint16_t+0x94>
 8014350:	68a2      	ldr	r2, [r4, #8]
 8014352:	6923      	ldr	r3, [r4, #16]
 8014354:	7da0      	ldrb	r0, [r4, #22]
 8014356:	f884 9015 	strb.w	r9, [r4, #21]
 801435a:	1bd2      	subs	r2, r2, r7
 801435c:	1bdb      	subs	r3, r3, r7
 801435e:	60a2      	str	r2, [r4, #8]
 8014360:	6123      	str	r3, [r4, #16]
 8014362:	f080 0001 	eor.w	r0, r0, #1
 8014366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801436a:	68a3      	ldr	r3, [r4, #8]
 801436c:	781b      	ldrb	r3, [r3, #0]
 801436e:	706b      	strb	r3, [r5, #1]
 8014370:	e7c3      	b.n	80142fa <ucdr_deserialize_endian_uint16_t+0x5e>
 8014372:	4641      	mov	r1, r8
 8014374:	463a      	mov	r2, r7
 8014376:	4628      	mov	r0, r5
 8014378:	f003 fe51 	bl	801801e <memcpy>
 801437c:	68a1      	ldr	r1, [r4, #8]
 801437e:	4652      	mov	r2, sl
 8014380:	19e8      	adds	r0, r5, r7
 8014382:	f003 fe4c 	bl	801801e <memcpy>
 8014386:	e7b8      	b.n	80142fa <ucdr_deserialize_endian_uint16_t+0x5e>

08014388 <ucdr_serialize_uint32_t>:
 8014388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801438c:	b082      	sub	sp, #8
 801438e:	4604      	mov	r4, r0
 8014390:	9101      	str	r1, [sp, #4]
 8014392:	2104      	movs	r1, #4
 8014394:	f7f8 fee4 	bl	800d160 <ucdr_buffer_alignment>
 8014398:	4601      	mov	r1, r0
 801439a:	4620      	mov	r0, r4
 801439c:	7d67      	ldrb	r7, [r4, #21]
 801439e:	f7f8 ff23 	bl	800d1e8 <ucdr_advance_buffer>
 80143a2:	2104      	movs	r1, #4
 80143a4:	4620      	mov	r0, r4
 80143a6:	f7f8 fe7b 	bl	800d0a0 <ucdr_check_buffer_available_for>
 80143aa:	2800      	cmp	r0, #0
 80143ac:	d139      	bne.n	8014422 <ucdr_serialize_uint32_t+0x9a>
 80143ae:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80143b2:	42ab      	cmp	r3, r5
 80143b4:	d930      	bls.n	8014418 <ucdr_serialize_uint32_t+0x90>
 80143b6:	1b5e      	subs	r6, r3, r5
 80143b8:	60a3      	str	r3, [r4, #8]
 80143ba:	6923      	ldr	r3, [r4, #16]
 80143bc:	f1c6 0804 	rsb	r8, r6, #4
 80143c0:	4433      	add	r3, r6
 80143c2:	6123      	str	r3, [r4, #16]
 80143c4:	4641      	mov	r1, r8
 80143c6:	4620      	mov	r0, r4
 80143c8:	f7f8 fe76 	bl	800d0b8 <ucdr_check_final_buffer_behavior>
 80143cc:	2800      	cmp	r0, #0
 80143ce:	d04c      	beq.n	801446a <ucdr_serialize_uint32_t+0xe2>
 80143d0:	7d23      	ldrb	r3, [r4, #20]
 80143d2:	2b01      	cmp	r3, #1
 80143d4:	d063      	beq.n	801449e <ucdr_serialize_uint32_t+0x116>
 80143d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80143da:	702b      	strb	r3, [r5, #0]
 80143dc:	2e00      	cmp	r6, #0
 80143de:	d051      	beq.n	8014484 <ucdr_serialize_uint32_t+0xfc>
 80143e0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80143e4:	706b      	strb	r3, [r5, #1]
 80143e6:	2e01      	cmp	r6, #1
 80143e8:	d050      	beq.n	801448c <ucdr_serialize_uint32_t+0x104>
 80143ea:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80143ee:	70ab      	strb	r3, [r5, #2]
 80143f0:	2e02      	cmp	r6, #2
 80143f2:	d04f      	beq.n	8014494 <ucdr_serialize_uint32_t+0x10c>
 80143f4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80143f8:	70eb      	strb	r3, [r5, #3]
 80143fa:	6923      	ldr	r3, [r4, #16]
 80143fc:	68a2      	ldr	r2, [r4, #8]
 80143fe:	7da0      	ldrb	r0, [r4, #22]
 8014400:	3304      	adds	r3, #4
 8014402:	1b9e      	subs	r6, r3, r6
 8014404:	4442      	add	r2, r8
 8014406:	2304      	movs	r3, #4
 8014408:	f080 0001 	eor.w	r0, r0, #1
 801440c:	60a2      	str	r2, [r4, #8]
 801440e:	6126      	str	r6, [r4, #16]
 8014410:	7563      	strb	r3, [r4, #21]
 8014412:	b002      	add	sp, #8
 8014414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014418:	2104      	movs	r1, #4
 801441a:	4620      	mov	r0, r4
 801441c:	f7f8 fe4c 	bl	800d0b8 <ucdr_check_final_buffer_behavior>
 8014420:	b1d0      	cbz	r0, 8014458 <ucdr_serialize_uint32_t+0xd0>
 8014422:	7d23      	ldrb	r3, [r4, #20]
 8014424:	2b01      	cmp	r3, #1
 8014426:	68a3      	ldr	r3, [r4, #8]
 8014428:	d01c      	beq.n	8014464 <ucdr_serialize_uint32_t+0xdc>
 801442a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801442e:	701a      	strb	r2, [r3, #0]
 8014430:	68a3      	ldr	r3, [r4, #8]
 8014432:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8014436:	705a      	strb	r2, [r3, #1]
 8014438:	68a3      	ldr	r3, [r4, #8]
 801443a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801443e:	709a      	strb	r2, [r3, #2]
 8014440:	68a3      	ldr	r3, [r4, #8]
 8014442:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8014446:	70da      	strb	r2, [r3, #3]
 8014448:	68a2      	ldr	r2, [r4, #8]
 801444a:	6923      	ldr	r3, [r4, #16]
 801444c:	3204      	adds	r2, #4
 801444e:	3304      	adds	r3, #4
 8014450:	2104      	movs	r1, #4
 8014452:	60a2      	str	r2, [r4, #8]
 8014454:	6123      	str	r3, [r4, #16]
 8014456:	7561      	strb	r1, [r4, #21]
 8014458:	7da0      	ldrb	r0, [r4, #22]
 801445a:	f080 0001 	eor.w	r0, r0, #1
 801445e:	b002      	add	sp, #8
 8014460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014464:	9a01      	ldr	r2, [sp, #4]
 8014466:	601a      	str	r2, [r3, #0]
 8014468:	e7ee      	b.n	8014448 <ucdr_serialize_uint32_t+0xc0>
 801446a:	68a2      	ldr	r2, [r4, #8]
 801446c:	6923      	ldr	r3, [r4, #16]
 801446e:	7da0      	ldrb	r0, [r4, #22]
 8014470:	7567      	strb	r7, [r4, #21]
 8014472:	1b92      	subs	r2, r2, r6
 8014474:	1b9b      	subs	r3, r3, r6
 8014476:	f080 0001 	eor.w	r0, r0, #1
 801447a:	60a2      	str	r2, [r4, #8]
 801447c:	6123      	str	r3, [r4, #16]
 801447e:	b002      	add	sp, #8
 8014480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014484:	68a3      	ldr	r3, [r4, #8]
 8014486:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801448a:	701a      	strb	r2, [r3, #0]
 801448c:	68a3      	ldr	r3, [r4, #8]
 801448e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8014492:	701a      	strb	r2, [r3, #0]
 8014494:	68a3      	ldr	r3, [r4, #8]
 8014496:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801449a:	701a      	strb	r2, [r3, #0]
 801449c:	e7ad      	b.n	80143fa <ucdr_serialize_uint32_t+0x72>
 801449e:	4628      	mov	r0, r5
 80144a0:	ad01      	add	r5, sp, #4
 80144a2:	4629      	mov	r1, r5
 80144a4:	4632      	mov	r2, r6
 80144a6:	f003 fdba 	bl	801801e <memcpy>
 80144aa:	68a0      	ldr	r0, [r4, #8]
 80144ac:	4642      	mov	r2, r8
 80144ae:	19a9      	adds	r1, r5, r6
 80144b0:	f003 fdb5 	bl	801801e <memcpy>
 80144b4:	e7a1      	b.n	80143fa <ucdr_serialize_uint32_t+0x72>
 80144b6:	bf00      	nop

080144b8 <ucdr_serialize_endian_uint32_t>:
 80144b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80144bc:	b083      	sub	sp, #12
 80144be:	460d      	mov	r5, r1
 80144c0:	2104      	movs	r1, #4
 80144c2:	4604      	mov	r4, r0
 80144c4:	9201      	str	r2, [sp, #4]
 80144c6:	f7f8 fe4b 	bl	800d160 <ucdr_buffer_alignment>
 80144ca:	4601      	mov	r1, r0
 80144cc:	4620      	mov	r0, r4
 80144ce:	f894 8015 	ldrb.w	r8, [r4, #21]
 80144d2:	f7f8 fe89 	bl	800d1e8 <ucdr_advance_buffer>
 80144d6:	2104      	movs	r1, #4
 80144d8:	4620      	mov	r0, r4
 80144da:	f7f8 fde1 	bl	800d0a0 <ucdr_check_buffer_available_for>
 80144de:	2800      	cmp	r0, #0
 80144e0:	d138      	bne.n	8014554 <ucdr_serialize_endian_uint32_t+0x9c>
 80144e2:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80144e6:	42b7      	cmp	r7, r6
 80144e8:	d92f      	bls.n	801454a <ucdr_serialize_endian_uint32_t+0x92>
 80144ea:	6923      	ldr	r3, [r4, #16]
 80144ec:	60a7      	str	r7, [r4, #8]
 80144ee:	1bbf      	subs	r7, r7, r6
 80144f0:	443b      	add	r3, r7
 80144f2:	f1c7 0904 	rsb	r9, r7, #4
 80144f6:	6123      	str	r3, [r4, #16]
 80144f8:	4649      	mov	r1, r9
 80144fa:	4620      	mov	r0, r4
 80144fc:	f7f8 fddc 	bl	800d0b8 <ucdr_check_final_buffer_behavior>
 8014500:	2800      	cmp	r0, #0
 8014502:	d04a      	beq.n	801459a <ucdr_serialize_endian_uint32_t+0xe2>
 8014504:	2d01      	cmp	r5, #1
 8014506:	d063      	beq.n	80145d0 <ucdr_serialize_endian_uint32_t+0x118>
 8014508:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801450c:	7033      	strb	r3, [r6, #0]
 801450e:	2f00      	cmp	r7, #0
 8014510:	d051      	beq.n	80145b6 <ucdr_serialize_endian_uint32_t+0xfe>
 8014512:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8014516:	7073      	strb	r3, [r6, #1]
 8014518:	2f01      	cmp	r7, #1
 801451a:	d050      	beq.n	80145be <ucdr_serialize_endian_uint32_t+0x106>
 801451c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8014520:	70b3      	strb	r3, [r6, #2]
 8014522:	2f02      	cmp	r7, #2
 8014524:	d04f      	beq.n	80145c6 <ucdr_serialize_endian_uint32_t+0x10e>
 8014526:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801452a:	70f3      	strb	r3, [r6, #3]
 801452c:	6923      	ldr	r3, [r4, #16]
 801452e:	68a2      	ldr	r2, [r4, #8]
 8014530:	7da0      	ldrb	r0, [r4, #22]
 8014532:	3304      	adds	r3, #4
 8014534:	444a      	add	r2, r9
 8014536:	1bdb      	subs	r3, r3, r7
 8014538:	2104      	movs	r1, #4
 801453a:	f080 0001 	eor.w	r0, r0, #1
 801453e:	60a2      	str	r2, [r4, #8]
 8014540:	6123      	str	r3, [r4, #16]
 8014542:	7561      	strb	r1, [r4, #21]
 8014544:	b003      	add	sp, #12
 8014546:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801454a:	2104      	movs	r1, #4
 801454c:	4620      	mov	r0, r4
 801454e:	f7f8 fdb3 	bl	800d0b8 <ucdr_check_final_buffer_behavior>
 8014552:	b1c8      	cbz	r0, 8014588 <ucdr_serialize_endian_uint32_t+0xd0>
 8014554:	2d01      	cmp	r5, #1
 8014556:	68a3      	ldr	r3, [r4, #8]
 8014558:	d01c      	beq.n	8014594 <ucdr_serialize_endian_uint32_t+0xdc>
 801455a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801455e:	701a      	strb	r2, [r3, #0]
 8014560:	68a3      	ldr	r3, [r4, #8]
 8014562:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8014566:	705a      	strb	r2, [r3, #1]
 8014568:	68a3      	ldr	r3, [r4, #8]
 801456a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801456e:	709a      	strb	r2, [r3, #2]
 8014570:	68a3      	ldr	r3, [r4, #8]
 8014572:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8014576:	70da      	strb	r2, [r3, #3]
 8014578:	68a2      	ldr	r2, [r4, #8]
 801457a:	6923      	ldr	r3, [r4, #16]
 801457c:	3204      	adds	r2, #4
 801457e:	3304      	adds	r3, #4
 8014580:	2104      	movs	r1, #4
 8014582:	60a2      	str	r2, [r4, #8]
 8014584:	6123      	str	r3, [r4, #16]
 8014586:	7561      	strb	r1, [r4, #21]
 8014588:	7da0      	ldrb	r0, [r4, #22]
 801458a:	f080 0001 	eor.w	r0, r0, #1
 801458e:	b003      	add	sp, #12
 8014590:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014594:	9a01      	ldr	r2, [sp, #4]
 8014596:	601a      	str	r2, [r3, #0]
 8014598:	e7ee      	b.n	8014578 <ucdr_serialize_endian_uint32_t+0xc0>
 801459a:	68a2      	ldr	r2, [r4, #8]
 801459c:	6923      	ldr	r3, [r4, #16]
 801459e:	7da0      	ldrb	r0, [r4, #22]
 80145a0:	f884 8015 	strb.w	r8, [r4, #21]
 80145a4:	1bd2      	subs	r2, r2, r7
 80145a6:	1bdb      	subs	r3, r3, r7
 80145a8:	f080 0001 	eor.w	r0, r0, #1
 80145ac:	60a2      	str	r2, [r4, #8]
 80145ae:	6123      	str	r3, [r4, #16]
 80145b0:	b003      	add	sp, #12
 80145b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80145b6:	68a3      	ldr	r3, [r4, #8]
 80145b8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80145bc:	701a      	strb	r2, [r3, #0]
 80145be:	68a3      	ldr	r3, [r4, #8]
 80145c0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80145c4:	701a      	strb	r2, [r3, #0]
 80145c6:	68a3      	ldr	r3, [r4, #8]
 80145c8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80145cc:	701a      	strb	r2, [r3, #0]
 80145ce:	e7ad      	b.n	801452c <ucdr_serialize_endian_uint32_t+0x74>
 80145d0:	ad01      	add	r5, sp, #4
 80145d2:	4629      	mov	r1, r5
 80145d4:	463a      	mov	r2, r7
 80145d6:	4630      	mov	r0, r6
 80145d8:	f003 fd21 	bl	801801e <memcpy>
 80145dc:	68a0      	ldr	r0, [r4, #8]
 80145de:	464a      	mov	r2, r9
 80145e0:	19e9      	adds	r1, r5, r7
 80145e2:	f003 fd1c 	bl	801801e <memcpy>
 80145e6:	e7a1      	b.n	801452c <ucdr_serialize_endian_uint32_t+0x74>

080145e8 <ucdr_deserialize_uint32_t>:
 80145e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80145ec:	460d      	mov	r5, r1
 80145ee:	2104      	movs	r1, #4
 80145f0:	4604      	mov	r4, r0
 80145f2:	f7f8 fdb5 	bl	800d160 <ucdr_buffer_alignment>
 80145f6:	4601      	mov	r1, r0
 80145f8:	4620      	mov	r0, r4
 80145fa:	f894 8015 	ldrb.w	r8, [r4, #21]
 80145fe:	f7f8 fdf3 	bl	800d1e8 <ucdr_advance_buffer>
 8014602:	2104      	movs	r1, #4
 8014604:	4620      	mov	r0, r4
 8014606:	f7f8 fd4b 	bl	800d0a0 <ucdr_check_buffer_available_for>
 801460a:	2800      	cmp	r0, #0
 801460c:	d138      	bne.n	8014680 <ucdr_deserialize_uint32_t+0x98>
 801460e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8014612:	42b7      	cmp	r7, r6
 8014614:	d92f      	bls.n	8014676 <ucdr_deserialize_uint32_t+0x8e>
 8014616:	6923      	ldr	r3, [r4, #16]
 8014618:	60a7      	str	r7, [r4, #8]
 801461a:	1bbf      	subs	r7, r7, r6
 801461c:	443b      	add	r3, r7
 801461e:	f1c7 0904 	rsb	r9, r7, #4
 8014622:	6123      	str	r3, [r4, #16]
 8014624:	4649      	mov	r1, r9
 8014626:	4620      	mov	r0, r4
 8014628:	f7f8 fd46 	bl	800d0b8 <ucdr_check_final_buffer_behavior>
 801462c:	2800      	cmp	r0, #0
 801462e:	d046      	beq.n	80146be <ucdr_deserialize_uint32_t+0xd6>
 8014630:	7d23      	ldrb	r3, [r4, #20]
 8014632:	2b01      	cmp	r3, #1
 8014634:	d05c      	beq.n	80146f0 <ucdr_deserialize_uint32_t+0x108>
 8014636:	78f3      	ldrb	r3, [r6, #3]
 8014638:	702b      	strb	r3, [r5, #0]
 801463a:	2f00      	cmp	r7, #0
 801463c:	d04c      	beq.n	80146d8 <ucdr_deserialize_uint32_t+0xf0>
 801463e:	78b3      	ldrb	r3, [r6, #2]
 8014640:	706b      	strb	r3, [r5, #1]
 8014642:	2f01      	cmp	r7, #1
 8014644:	f105 0302 	add.w	r3, r5, #2
 8014648:	d04a      	beq.n	80146e0 <ucdr_deserialize_uint32_t+0xf8>
 801464a:	7873      	ldrb	r3, [r6, #1]
 801464c:	70ab      	strb	r3, [r5, #2]
 801464e:	2f02      	cmp	r7, #2
 8014650:	f105 0303 	add.w	r3, r5, #3
 8014654:	d048      	beq.n	80146e8 <ucdr_deserialize_uint32_t+0x100>
 8014656:	7833      	ldrb	r3, [r6, #0]
 8014658:	70eb      	strb	r3, [r5, #3]
 801465a:	6923      	ldr	r3, [r4, #16]
 801465c:	68a2      	ldr	r2, [r4, #8]
 801465e:	7da0      	ldrb	r0, [r4, #22]
 8014660:	2104      	movs	r1, #4
 8014662:	3304      	adds	r3, #4
 8014664:	444a      	add	r2, r9
 8014666:	1bdb      	subs	r3, r3, r7
 8014668:	7561      	strb	r1, [r4, #21]
 801466a:	60a2      	str	r2, [r4, #8]
 801466c:	6123      	str	r3, [r4, #16]
 801466e:	f080 0001 	eor.w	r0, r0, #1
 8014672:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014676:	2104      	movs	r1, #4
 8014678:	4620      	mov	r0, r4
 801467a:	f7f8 fd1d 	bl	800d0b8 <ucdr_check_final_buffer_behavior>
 801467e:	b1b0      	cbz	r0, 80146ae <ucdr_deserialize_uint32_t+0xc6>
 8014680:	7d23      	ldrb	r3, [r4, #20]
 8014682:	2b01      	cmp	r3, #1
 8014684:	68a3      	ldr	r3, [r4, #8]
 8014686:	d017      	beq.n	80146b8 <ucdr_deserialize_uint32_t+0xd0>
 8014688:	78db      	ldrb	r3, [r3, #3]
 801468a:	702b      	strb	r3, [r5, #0]
 801468c:	68a3      	ldr	r3, [r4, #8]
 801468e:	789b      	ldrb	r3, [r3, #2]
 8014690:	706b      	strb	r3, [r5, #1]
 8014692:	68a3      	ldr	r3, [r4, #8]
 8014694:	785b      	ldrb	r3, [r3, #1]
 8014696:	70ab      	strb	r3, [r5, #2]
 8014698:	68a3      	ldr	r3, [r4, #8]
 801469a:	781b      	ldrb	r3, [r3, #0]
 801469c:	70eb      	strb	r3, [r5, #3]
 801469e:	68a2      	ldr	r2, [r4, #8]
 80146a0:	6923      	ldr	r3, [r4, #16]
 80146a2:	3204      	adds	r2, #4
 80146a4:	3304      	adds	r3, #4
 80146a6:	2104      	movs	r1, #4
 80146a8:	60a2      	str	r2, [r4, #8]
 80146aa:	6123      	str	r3, [r4, #16]
 80146ac:	7561      	strb	r1, [r4, #21]
 80146ae:	7da0      	ldrb	r0, [r4, #22]
 80146b0:	f080 0001 	eor.w	r0, r0, #1
 80146b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80146b8:	681b      	ldr	r3, [r3, #0]
 80146ba:	602b      	str	r3, [r5, #0]
 80146bc:	e7ef      	b.n	801469e <ucdr_deserialize_uint32_t+0xb6>
 80146be:	68a2      	ldr	r2, [r4, #8]
 80146c0:	6923      	ldr	r3, [r4, #16]
 80146c2:	7da0      	ldrb	r0, [r4, #22]
 80146c4:	f884 8015 	strb.w	r8, [r4, #21]
 80146c8:	1bd2      	subs	r2, r2, r7
 80146ca:	1bdb      	subs	r3, r3, r7
 80146cc:	60a2      	str	r2, [r4, #8]
 80146ce:	6123      	str	r3, [r4, #16]
 80146d0:	f080 0001 	eor.w	r0, r0, #1
 80146d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80146d8:	68a3      	ldr	r3, [r4, #8]
 80146da:	789b      	ldrb	r3, [r3, #2]
 80146dc:	706b      	strb	r3, [r5, #1]
 80146de:	1cab      	adds	r3, r5, #2
 80146e0:	68a2      	ldr	r2, [r4, #8]
 80146e2:	7852      	ldrb	r2, [r2, #1]
 80146e4:	f803 2b01 	strb.w	r2, [r3], #1
 80146e8:	68a2      	ldr	r2, [r4, #8]
 80146ea:	7812      	ldrb	r2, [r2, #0]
 80146ec:	701a      	strb	r2, [r3, #0]
 80146ee:	e7b4      	b.n	801465a <ucdr_deserialize_uint32_t+0x72>
 80146f0:	4631      	mov	r1, r6
 80146f2:	463a      	mov	r2, r7
 80146f4:	4628      	mov	r0, r5
 80146f6:	f003 fc92 	bl	801801e <memcpy>
 80146fa:	68a1      	ldr	r1, [r4, #8]
 80146fc:	464a      	mov	r2, r9
 80146fe:	19e8      	adds	r0, r5, r7
 8014700:	f003 fc8d 	bl	801801e <memcpy>
 8014704:	e7a9      	b.n	801465a <ucdr_deserialize_uint32_t+0x72>
 8014706:	bf00      	nop

08014708 <ucdr_deserialize_endian_uint32_t>:
 8014708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801470c:	460e      	mov	r6, r1
 801470e:	2104      	movs	r1, #4
 8014710:	4604      	mov	r4, r0
 8014712:	4615      	mov	r5, r2
 8014714:	f7f8 fd24 	bl	800d160 <ucdr_buffer_alignment>
 8014718:	4601      	mov	r1, r0
 801471a:	4620      	mov	r0, r4
 801471c:	f894 9015 	ldrb.w	r9, [r4, #21]
 8014720:	f7f8 fd62 	bl	800d1e8 <ucdr_advance_buffer>
 8014724:	2104      	movs	r1, #4
 8014726:	4620      	mov	r0, r4
 8014728:	f7f8 fcba 	bl	800d0a0 <ucdr_check_buffer_available_for>
 801472c:	2800      	cmp	r0, #0
 801472e:	d13c      	bne.n	80147aa <ucdr_deserialize_endian_uint32_t+0xa2>
 8014730:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 8014734:	42bb      	cmp	r3, r7
 8014736:	d933      	bls.n	80147a0 <ucdr_deserialize_endian_uint32_t+0x98>
 8014738:	eba3 0807 	sub.w	r8, r3, r7
 801473c:	60a3      	str	r3, [r4, #8]
 801473e:	6923      	ldr	r3, [r4, #16]
 8014740:	f1c8 0a04 	rsb	sl, r8, #4
 8014744:	4443      	add	r3, r8
 8014746:	6123      	str	r3, [r4, #16]
 8014748:	4651      	mov	r1, sl
 801474a:	4620      	mov	r0, r4
 801474c:	f7f8 fcb4 	bl	800d0b8 <ucdr_check_final_buffer_behavior>
 8014750:	2800      	cmp	r0, #0
 8014752:	d048      	beq.n	80147e6 <ucdr_deserialize_endian_uint32_t+0xde>
 8014754:	2e01      	cmp	r6, #1
 8014756:	d061      	beq.n	801481c <ucdr_deserialize_endian_uint32_t+0x114>
 8014758:	78fb      	ldrb	r3, [r7, #3]
 801475a:	702b      	strb	r3, [r5, #0]
 801475c:	f1b8 0f00 	cmp.w	r8, #0
 8014760:	d050      	beq.n	8014804 <ucdr_deserialize_endian_uint32_t+0xfc>
 8014762:	78bb      	ldrb	r3, [r7, #2]
 8014764:	706b      	strb	r3, [r5, #1]
 8014766:	f1b8 0f01 	cmp.w	r8, #1
 801476a:	f105 0302 	add.w	r3, r5, #2
 801476e:	d04d      	beq.n	801480c <ucdr_deserialize_endian_uint32_t+0x104>
 8014770:	787b      	ldrb	r3, [r7, #1]
 8014772:	70ab      	strb	r3, [r5, #2]
 8014774:	f1b8 0f02 	cmp.w	r8, #2
 8014778:	f105 0303 	add.w	r3, r5, #3
 801477c:	d04a      	beq.n	8014814 <ucdr_deserialize_endian_uint32_t+0x10c>
 801477e:	783b      	ldrb	r3, [r7, #0]
 8014780:	70eb      	strb	r3, [r5, #3]
 8014782:	6923      	ldr	r3, [r4, #16]
 8014784:	68a2      	ldr	r2, [r4, #8]
 8014786:	7da0      	ldrb	r0, [r4, #22]
 8014788:	2104      	movs	r1, #4
 801478a:	3304      	adds	r3, #4
 801478c:	4452      	add	r2, sl
 801478e:	eba3 0308 	sub.w	r3, r3, r8
 8014792:	7561      	strb	r1, [r4, #21]
 8014794:	60a2      	str	r2, [r4, #8]
 8014796:	6123      	str	r3, [r4, #16]
 8014798:	f080 0001 	eor.w	r0, r0, #1
 801479c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80147a0:	2104      	movs	r1, #4
 80147a2:	4620      	mov	r0, r4
 80147a4:	f7f8 fc88 	bl	800d0b8 <ucdr_check_final_buffer_behavior>
 80147a8:	b1a8      	cbz	r0, 80147d6 <ucdr_deserialize_endian_uint32_t+0xce>
 80147aa:	2e01      	cmp	r6, #1
 80147ac:	68a3      	ldr	r3, [r4, #8]
 80147ae:	d017      	beq.n	80147e0 <ucdr_deserialize_endian_uint32_t+0xd8>
 80147b0:	78db      	ldrb	r3, [r3, #3]
 80147b2:	702b      	strb	r3, [r5, #0]
 80147b4:	68a3      	ldr	r3, [r4, #8]
 80147b6:	789b      	ldrb	r3, [r3, #2]
 80147b8:	706b      	strb	r3, [r5, #1]
 80147ba:	68a3      	ldr	r3, [r4, #8]
 80147bc:	785b      	ldrb	r3, [r3, #1]
 80147be:	70ab      	strb	r3, [r5, #2]
 80147c0:	68a3      	ldr	r3, [r4, #8]
 80147c2:	781b      	ldrb	r3, [r3, #0]
 80147c4:	70eb      	strb	r3, [r5, #3]
 80147c6:	68a2      	ldr	r2, [r4, #8]
 80147c8:	6923      	ldr	r3, [r4, #16]
 80147ca:	3204      	adds	r2, #4
 80147cc:	3304      	adds	r3, #4
 80147ce:	2104      	movs	r1, #4
 80147d0:	60a2      	str	r2, [r4, #8]
 80147d2:	6123      	str	r3, [r4, #16]
 80147d4:	7561      	strb	r1, [r4, #21]
 80147d6:	7da0      	ldrb	r0, [r4, #22]
 80147d8:	f080 0001 	eor.w	r0, r0, #1
 80147dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80147e0:	681b      	ldr	r3, [r3, #0]
 80147e2:	602b      	str	r3, [r5, #0]
 80147e4:	e7ef      	b.n	80147c6 <ucdr_deserialize_endian_uint32_t+0xbe>
 80147e6:	68a2      	ldr	r2, [r4, #8]
 80147e8:	6923      	ldr	r3, [r4, #16]
 80147ea:	7da0      	ldrb	r0, [r4, #22]
 80147ec:	f884 9015 	strb.w	r9, [r4, #21]
 80147f0:	eba2 0208 	sub.w	r2, r2, r8
 80147f4:	eba3 0308 	sub.w	r3, r3, r8
 80147f8:	60a2      	str	r2, [r4, #8]
 80147fa:	6123      	str	r3, [r4, #16]
 80147fc:	f080 0001 	eor.w	r0, r0, #1
 8014800:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014804:	68a3      	ldr	r3, [r4, #8]
 8014806:	789b      	ldrb	r3, [r3, #2]
 8014808:	706b      	strb	r3, [r5, #1]
 801480a:	1cab      	adds	r3, r5, #2
 801480c:	68a2      	ldr	r2, [r4, #8]
 801480e:	7852      	ldrb	r2, [r2, #1]
 8014810:	f803 2b01 	strb.w	r2, [r3], #1
 8014814:	68a2      	ldr	r2, [r4, #8]
 8014816:	7812      	ldrb	r2, [r2, #0]
 8014818:	701a      	strb	r2, [r3, #0]
 801481a:	e7b2      	b.n	8014782 <ucdr_deserialize_endian_uint32_t+0x7a>
 801481c:	4639      	mov	r1, r7
 801481e:	4642      	mov	r2, r8
 8014820:	4628      	mov	r0, r5
 8014822:	f003 fbfc 	bl	801801e <memcpy>
 8014826:	68a1      	ldr	r1, [r4, #8]
 8014828:	4652      	mov	r2, sl
 801482a:	eb05 0008 	add.w	r0, r5, r8
 801482e:	f003 fbf6 	bl	801801e <memcpy>
 8014832:	e7a6      	b.n	8014782 <ucdr_deserialize_endian_uint32_t+0x7a>

08014834 <ucdr_serialize_uint64_t>:
 8014834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014838:	2108      	movs	r1, #8
 801483a:	b082      	sub	sp, #8
 801483c:	4604      	mov	r4, r0
 801483e:	e9cd 2300 	strd	r2, r3, [sp]
 8014842:	f7f8 fc8d 	bl	800d160 <ucdr_buffer_alignment>
 8014846:	4601      	mov	r1, r0
 8014848:	4620      	mov	r0, r4
 801484a:	7d67      	ldrb	r7, [r4, #21]
 801484c:	f7f8 fccc 	bl	800d1e8 <ucdr_advance_buffer>
 8014850:	2108      	movs	r1, #8
 8014852:	4620      	mov	r0, r4
 8014854:	f7f8 fc24 	bl	800d0a0 <ucdr_check_buffer_available_for>
 8014858:	2800      	cmp	r0, #0
 801485a:	d14e      	bne.n	80148fa <ucdr_serialize_uint64_t+0xc6>
 801485c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8014860:	42ab      	cmp	r3, r5
 8014862:	d945      	bls.n	80148f0 <ucdr_serialize_uint64_t+0xbc>
 8014864:	1b5e      	subs	r6, r3, r5
 8014866:	60a3      	str	r3, [r4, #8]
 8014868:	6923      	ldr	r3, [r4, #16]
 801486a:	f1c6 0808 	rsb	r8, r6, #8
 801486e:	4433      	add	r3, r6
 8014870:	6123      	str	r3, [r4, #16]
 8014872:	4641      	mov	r1, r8
 8014874:	4620      	mov	r0, r4
 8014876:	f7f8 fc1f 	bl	800d0b8 <ucdr_check_final_buffer_behavior>
 801487a:	2800      	cmp	r0, #0
 801487c:	d074      	beq.n	8014968 <ucdr_serialize_uint64_t+0x134>
 801487e:	7d23      	ldrb	r3, [r4, #20]
 8014880:	2b01      	cmp	r3, #1
 8014882:	f000 809b 	beq.w	80149bc <ucdr_serialize_uint64_t+0x188>
 8014886:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801488a:	702b      	strb	r3, [r5, #0]
 801488c:	2e00      	cmp	r6, #0
 801488e:	d078      	beq.n	8014982 <ucdr_serialize_uint64_t+0x14e>
 8014890:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8014894:	706b      	strb	r3, [r5, #1]
 8014896:	2e01      	cmp	r6, #1
 8014898:	d077      	beq.n	801498a <ucdr_serialize_uint64_t+0x156>
 801489a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801489e:	70ab      	strb	r3, [r5, #2]
 80148a0:	2e02      	cmp	r6, #2
 80148a2:	d076      	beq.n	8014992 <ucdr_serialize_uint64_t+0x15e>
 80148a4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80148a8:	70eb      	strb	r3, [r5, #3]
 80148aa:	2e03      	cmp	r6, #3
 80148ac:	d075      	beq.n	801499a <ucdr_serialize_uint64_t+0x166>
 80148ae:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80148b2:	712b      	strb	r3, [r5, #4]
 80148b4:	2e04      	cmp	r6, #4
 80148b6:	d074      	beq.n	80149a2 <ucdr_serialize_uint64_t+0x16e>
 80148b8:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80148bc:	716b      	strb	r3, [r5, #5]
 80148be:	2e05      	cmp	r6, #5
 80148c0:	d073      	beq.n	80149aa <ucdr_serialize_uint64_t+0x176>
 80148c2:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80148c6:	71ab      	strb	r3, [r5, #6]
 80148c8:	2e06      	cmp	r6, #6
 80148ca:	d072      	beq.n	80149b2 <ucdr_serialize_uint64_t+0x17e>
 80148cc:	f89d 3000 	ldrb.w	r3, [sp]
 80148d0:	71eb      	strb	r3, [r5, #7]
 80148d2:	6923      	ldr	r3, [r4, #16]
 80148d4:	68a2      	ldr	r2, [r4, #8]
 80148d6:	7da0      	ldrb	r0, [r4, #22]
 80148d8:	3308      	adds	r3, #8
 80148da:	1b9e      	subs	r6, r3, r6
 80148dc:	4442      	add	r2, r8
 80148de:	2308      	movs	r3, #8
 80148e0:	f080 0001 	eor.w	r0, r0, #1
 80148e4:	60a2      	str	r2, [r4, #8]
 80148e6:	6126      	str	r6, [r4, #16]
 80148e8:	7563      	strb	r3, [r4, #21]
 80148ea:	b002      	add	sp, #8
 80148ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80148f0:	2108      	movs	r1, #8
 80148f2:	4620      	mov	r0, r4
 80148f4:	f7f8 fbe0 	bl	800d0b8 <ucdr_check_final_buffer_behavior>
 80148f8:	b350      	cbz	r0, 8014950 <ucdr_serialize_uint64_t+0x11c>
 80148fa:	7d23      	ldrb	r3, [r4, #20]
 80148fc:	2b01      	cmp	r3, #1
 80148fe:	d02d      	beq.n	801495c <ucdr_serialize_uint64_t+0x128>
 8014900:	68a3      	ldr	r3, [r4, #8]
 8014902:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8014906:	701a      	strb	r2, [r3, #0]
 8014908:	68a3      	ldr	r3, [r4, #8]
 801490a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801490e:	705a      	strb	r2, [r3, #1]
 8014910:	68a3      	ldr	r3, [r4, #8]
 8014912:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8014916:	709a      	strb	r2, [r3, #2]
 8014918:	68a3      	ldr	r3, [r4, #8]
 801491a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801491e:	70da      	strb	r2, [r3, #3]
 8014920:	68a3      	ldr	r3, [r4, #8]
 8014922:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8014926:	711a      	strb	r2, [r3, #4]
 8014928:	68a3      	ldr	r3, [r4, #8]
 801492a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 801492e:	715a      	strb	r2, [r3, #5]
 8014930:	68a3      	ldr	r3, [r4, #8]
 8014932:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8014936:	719a      	strb	r2, [r3, #6]
 8014938:	68a3      	ldr	r3, [r4, #8]
 801493a:	f89d 2000 	ldrb.w	r2, [sp]
 801493e:	71da      	strb	r2, [r3, #7]
 8014940:	68a2      	ldr	r2, [r4, #8]
 8014942:	6923      	ldr	r3, [r4, #16]
 8014944:	3208      	adds	r2, #8
 8014946:	3308      	adds	r3, #8
 8014948:	2108      	movs	r1, #8
 801494a:	60a2      	str	r2, [r4, #8]
 801494c:	6123      	str	r3, [r4, #16]
 801494e:	7561      	strb	r1, [r4, #21]
 8014950:	7da0      	ldrb	r0, [r4, #22]
 8014952:	f080 0001 	eor.w	r0, r0, #1
 8014956:	b002      	add	sp, #8
 8014958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801495c:	466b      	mov	r3, sp
 801495e:	cb03      	ldmia	r3!, {r0, r1}
 8014960:	68a3      	ldr	r3, [r4, #8]
 8014962:	6018      	str	r0, [r3, #0]
 8014964:	6059      	str	r1, [r3, #4]
 8014966:	e7eb      	b.n	8014940 <ucdr_serialize_uint64_t+0x10c>
 8014968:	68a2      	ldr	r2, [r4, #8]
 801496a:	6923      	ldr	r3, [r4, #16]
 801496c:	7da0      	ldrb	r0, [r4, #22]
 801496e:	7567      	strb	r7, [r4, #21]
 8014970:	1b92      	subs	r2, r2, r6
 8014972:	1b9b      	subs	r3, r3, r6
 8014974:	f080 0001 	eor.w	r0, r0, #1
 8014978:	60a2      	str	r2, [r4, #8]
 801497a:	6123      	str	r3, [r4, #16]
 801497c:	b002      	add	sp, #8
 801497e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014982:	68a3      	ldr	r3, [r4, #8]
 8014984:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8014988:	701a      	strb	r2, [r3, #0]
 801498a:	68a3      	ldr	r3, [r4, #8]
 801498c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8014990:	701a      	strb	r2, [r3, #0]
 8014992:	68a3      	ldr	r3, [r4, #8]
 8014994:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8014998:	701a      	strb	r2, [r3, #0]
 801499a:	68a3      	ldr	r3, [r4, #8]
 801499c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80149a0:	701a      	strb	r2, [r3, #0]
 80149a2:	68a3      	ldr	r3, [r4, #8]
 80149a4:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80149a8:	701a      	strb	r2, [r3, #0]
 80149aa:	68a3      	ldr	r3, [r4, #8]
 80149ac:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80149b0:	701a      	strb	r2, [r3, #0]
 80149b2:	68a3      	ldr	r3, [r4, #8]
 80149b4:	f89d 2000 	ldrb.w	r2, [sp]
 80149b8:	701a      	strb	r2, [r3, #0]
 80149ba:	e78a      	b.n	80148d2 <ucdr_serialize_uint64_t+0x9e>
 80149bc:	4628      	mov	r0, r5
 80149be:	466d      	mov	r5, sp
 80149c0:	4629      	mov	r1, r5
 80149c2:	4632      	mov	r2, r6
 80149c4:	f003 fb2b 	bl	801801e <memcpy>
 80149c8:	68a0      	ldr	r0, [r4, #8]
 80149ca:	4642      	mov	r2, r8
 80149cc:	19a9      	adds	r1, r5, r6
 80149ce:	f003 fb26 	bl	801801e <memcpy>
 80149d2:	e77e      	b.n	80148d2 <ucdr_serialize_uint64_t+0x9e>

080149d4 <ucdr_serialize_int16_t>:
 80149d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80149d8:	b082      	sub	sp, #8
 80149da:	460b      	mov	r3, r1
 80149dc:	2102      	movs	r1, #2
 80149de:	4604      	mov	r4, r0
 80149e0:	f8ad 3006 	strh.w	r3, [sp, #6]
 80149e4:	f7f8 fbbc 	bl	800d160 <ucdr_buffer_alignment>
 80149e8:	4601      	mov	r1, r0
 80149ea:	4620      	mov	r0, r4
 80149ec:	7d67      	ldrb	r7, [r4, #21]
 80149ee:	f7f8 fbfb 	bl	800d1e8 <ucdr_advance_buffer>
 80149f2:	2102      	movs	r1, #2
 80149f4:	4620      	mov	r0, r4
 80149f6:	f7f8 fb53 	bl	800d0a0 <ucdr_check_buffer_available_for>
 80149fa:	bb78      	cbnz	r0, 8014a5c <ucdr_serialize_int16_t+0x88>
 80149fc:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8014a00:	42ab      	cmp	r3, r5
 8014a02:	d926      	bls.n	8014a52 <ucdr_serialize_int16_t+0x7e>
 8014a04:	1b5e      	subs	r6, r3, r5
 8014a06:	60a3      	str	r3, [r4, #8]
 8014a08:	6923      	ldr	r3, [r4, #16]
 8014a0a:	f1c6 0802 	rsb	r8, r6, #2
 8014a0e:	4433      	add	r3, r6
 8014a10:	6123      	str	r3, [r4, #16]
 8014a12:	4641      	mov	r1, r8
 8014a14:	4620      	mov	r0, r4
 8014a16:	f7f8 fb4f 	bl	800d0b8 <ucdr_check_final_buffer_behavior>
 8014a1a:	2800      	cmp	r0, #0
 8014a1c:	d03b      	beq.n	8014a96 <ucdr_serialize_int16_t+0xc2>
 8014a1e:	7d23      	ldrb	r3, [r4, #20]
 8014a20:	2b01      	cmp	r3, #1
 8014a22:	d04a      	beq.n	8014aba <ucdr_serialize_int16_t+0xe6>
 8014a24:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8014a28:	702b      	strb	r3, [r5, #0]
 8014a2a:	2e00      	cmp	r6, #0
 8014a2c:	d040      	beq.n	8014ab0 <ucdr_serialize_int16_t+0xdc>
 8014a2e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8014a32:	706b      	strb	r3, [r5, #1]
 8014a34:	6923      	ldr	r3, [r4, #16]
 8014a36:	68a2      	ldr	r2, [r4, #8]
 8014a38:	7da0      	ldrb	r0, [r4, #22]
 8014a3a:	3302      	adds	r3, #2
 8014a3c:	1b9e      	subs	r6, r3, r6
 8014a3e:	4442      	add	r2, r8
 8014a40:	2302      	movs	r3, #2
 8014a42:	f080 0001 	eor.w	r0, r0, #1
 8014a46:	60a2      	str	r2, [r4, #8]
 8014a48:	6126      	str	r6, [r4, #16]
 8014a4a:	7563      	strb	r3, [r4, #21]
 8014a4c:	b002      	add	sp, #8
 8014a4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a52:	2102      	movs	r1, #2
 8014a54:	4620      	mov	r0, r4
 8014a56:	f7f8 fb2f 	bl	800d0b8 <ucdr_check_final_buffer_behavior>
 8014a5a:	b190      	cbz	r0, 8014a82 <ucdr_serialize_int16_t+0xae>
 8014a5c:	7d23      	ldrb	r3, [r4, #20]
 8014a5e:	2b01      	cmp	r3, #1
 8014a60:	68a3      	ldr	r3, [r4, #8]
 8014a62:	d014      	beq.n	8014a8e <ucdr_serialize_int16_t+0xba>
 8014a64:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8014a68:	701a      	strb	r2, [r3, #0]
 8014a6a:	68a3      	ldr	r3, [r4, #8]
 8014a6c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8014a70:	705a      	strb	r2, [r3, #1]
 8014a72:	68a2      	ldr	r2, [r4, #8]
 8014a74:	6923      	ldr	r3, [r4, #16]
 8014a76:	3202      	adds	r2, #2
 8014a78:	3302      	adds	r3, #2
 8014a7a:	2102      	movs	r1, #2
 8014a7c:	60a2      	str	r2, [r4, #8]
 8014a7e:	6123      	str	r3, [r4, #16]
 8014a80:	7561      	strb	r1, [r4, #21]
 8014a82:	7da0      	ldrb	r0, [r4, #22]
 8014a84:	f080 0001 	eor.w	r0, r0, #1
 8014a88:	b002      	add	sp, #8
 8014a8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a8e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8014a92:	801a      	strh	r2, [r3, #0]
 8014a94:	e7ed      	b.n	8014a72 <ucdr_serialize_int16_t+0x9e>
 8014a96:	68a2      	ldr	r2, [r4, #8]
 8014a98:	6923      	ldr	r3, [r4, #16]
 8014a9a:	7da0      	ldrb	r0, [r4, #22]
 8014a9c:	7567      	strb	r7, [r4, #21]
 8014a9e:	1b92      	subs	r2, r2, r6
 8014aa0:	1b9b      	subs	r3, r3, r6
 8014aa2:	f080 0001 	eor.w	r0, r0, #1
 8014aa6:	60a2      	str	r2, [r4, #8]
 8014aa8:	6123      	str	r3, [r4, #16]
 8014aaa:	b002      	add	sp, #8
 8014aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ab0:	68a3      	ldr	r3, [r4, #8]
 8014ab2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8014ab6:	701a      	strb	r2, [r3, #0]
 8014ab8:	e7bc      	b.n	8014a34 <ucdr_serialize_int16_t+0x60>
 8014aba:	4628      	mov	r0, r5
 8014abc:	f10d 0506 	add.w	r5, sp, #6
 8014ac0:	4629      	mov	r1, r5
 8014ac2:	4632      	mov	r2, r6
 8014ac4:	f003 faab 	bl	801801e <memcpy>
 8014ac8:	68a0      	ldr	r0, [r4, #8]
 8014aca:	4642      	mov	r2, r8
 8014acc:	19a9      	adds	r1, r5, r6
 8014ace:	f003 faa6 	bl	801801e <memcpy>
 8014ad2:	e7af      	b.n	8014a34 <ucdr_serialize_int16_t+0x60>

08014ad4 <ucdr_deserialize_int16_t>:
 8014ad4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014ad8:	460d      	mov	r5, r1
 8014ada:	2102      	movs	r1, #2
 8014adc:	4604      	mov	r4, r0
 8014ade:	f7f8 fb3f 	bl	800d160 <ucdr_buffer_alignment>
 8014ae2:	4601      	mov	r1, r0
 8014ae4:	4620      	mov	r0, r4
 8014ae6:	f894 8015 	ldrb.w	r8, [r4, #21]
 8014aea:	f7f8 fb7d 	bl	800d1e8 <ucdr_advance_buffer>
 8014aee:	2102      	movs	r1, #2
 8014af0:	4620      	mov	r0, r4
 8014af2:	f7f8 fad5 	bl	800d0a0 <ucdr_check_buffer_available_for>
 8014af6:	bb60      	cbnz	r0, 8014b52 <ucdr_deserialize_int16_t+0x7e>
 8014af8:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8014afc:	42be      	cmp	r6, r7
 8014afe:	d923      	bls.n	8014b48 <ucdr_deserialize_int16_t+0x74>
 8014b00:	6923      	ldr	r3, [r4, #16]
 8014b02:	60a6      	str	r6, [r4, #8]
 8014b04:	1bf6      	subs	r6, r6, r7
 8014b06:	4433      	add	r3, r6
 8014b08:	f1c6 0902 	rsb	r9, r6, #2
 8014b0c:	6123      	str	r3, [r4, #16]
 8014b0e:	4649      	mov	r1, r9
 8014b10:	4620      	mov	r0, r4
 8014b12:	f7f8 fad1 	bl	800d0b8 <ucdr_check_final_buffer_behavior>
 8014b16:	2800      	cmp	r0, #0
 8014b18:	d034      	beq.n	8014b84 <ucdr_deserialize_int16_t+0xb0>
 8014b1a:	7d23      	ldrb	r3, [r4, #20]
 8014b1c:	2b01      	cmp	r3, #1
 8014b1e:	d042      	beq.n	8014ba6 <ucdr_deserialize_int16_t+0xd2>
 8014b20:	787b      	ldrb	r3, [r7, #1]
 8014b22:	702b      	strb	r3, [r5, #0]
 8014b24:	2e00      	cmp	r6, #0
 8014b26:	d03a      	beq.n	8014b9e <ucdr_deserialize_int16_t+0xca>
 8014b28:	783b      	ldrb	r3, [r7, #0]
 8014b2a:	706b      	strb	r3, [r5, #1]
 8014b2c:	6923      	ldr	r3, [r4, #16]
 8014b2e:	68a2      	ldr	r2, [r4, #8]
 8014b30:	7da0      	ldrb	r0, [r4, #22]
 8014b32:	2102      	movs	r1, #2
 8014b34:	3302      	adds	r3, #2
 8014b36:	444a      	add	r2, r9
 8014b38:	1b9b      	subs	r3, r3, r6
 8014b3a:	7561      	strb	r1, [r4, #21]
 8014b3c:	60a2      	str	r2, [r4, #8]
 8014b3e:	6123      	str	r3, [r4, #16]
 8014b40:	f080 0001 	eor.w	r0, r0, #1
 8014b44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014b48:	2102      	movs	r1, #2
 8014b4a:	4620      	mov	r0, r4
 8014b4c:	f7f8 fab4 	bl	800d0b8 <ucdr_check_final_buffer_behavior>
 8014b50:	b180      	cbz	r0, 8014b74 <ucdr_deserialize_int16_t+0xa0>
 8014b52:	7d23      	ldrb	r3, [r4, #20]
 8014b54:	2b01      	cmp	r3, #1
 8014b56:	68a3      	ldr	r3, [r4, #8]
 8014b58:	d011      	beq.n	8014b7e <ucdr_deserialize_int16_t+0xaa>
 8014b5a:	785b      	ldrb	r3, [r3, #1]
 8014b5c:	702b      	strb	r3, [r5, #0]
 8014b5e:	68a3      	ldr	r3, [r4, #8]
 8014b60:	781b      	ldrb	r3, [r3, #0]
 8014b62:	706b      	strb	r3, [r5, #1]
 8014b64:	68a2      	ldr	r2, [r4, #8]
 8014b66:	6923      	ldr	r3, [r4, #16]
 8014b68:	3202      	adds	r2, #2
 8014b6a:	3302      	adds	r3, #2
 8014b6c:	2102      	movs	r1, #2
 8014b6e:	60a2      	str	r2, [r4, #8]
 8014b70:	6123      	str	r3, [r4, #16]
 8014b72:	7561      	strb	r1, [r4, #21]
 8014b74:	7da0      	ldrb	r0, [r4, #22]
 8014b76:	f080 0001 	eor.w	r0, r0, #1
 8014b7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014b7e:	881b      	ldrh	r3, [r3, #0]
 8014b80:	802b      	strh	r3, [r5, #0]
 8014b82:	e7ef      	b.n	8014b64 <ucdr_deserialize_int16_t+0x90>
 8014b84:	68a2      	ldr	r2, [r4, #8]
 8014b86:	6923      	ldr	r3, [r4, #16]
 8014b88:	7da0      	ldrb	r0, [r4, #22]
 8014b8a:	f884 8015 	strb.w	r8, [r4, #21]
 8014b8e:	1b92      	subs	r2, r2, r6
 8014b90:	1b9b      	subs	r3, r3, r6
 8014b92:	60a2      	str	r2, [r4, #8]
 8014b94:	6123      	str	r3, [r4, #16]
 8014b96:	f080 0001 	eor.w	r0, r0, #1
 8014b9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014b9e:	68a3      	ldr	r3, [r4, #8]
 8014ba0:	781b      	ldrb	r3, [r3, #0]
 8014ba2:	706b      	strb	r3, [r5, #1]
 8014ba4:	e7c2      	b.n	8014b2c <ucdr_deserialize_int16_t+0x58>
 8014ba6:	4639      	mov	r1, r7
 8014ba8:	4632      	mov	r2, r6
 8014baa:	4628      	mov	r0, r5
 8014bac:	f003 fa37 	bl	801801e <memcpy>
 8014bb0:	68a1      	ldr	r1, [r4, #8]
 8014bb2:	464a      	mov	r2, r9
 8014bb4:	19a8      	adds	r0, r5, r6
 8014bb6:	f003 fa32 	bl	801801e <memcpy>
 8014bba:	e7b7      	b.n	8014b2c <ucdr_deserialize_int16_t+0x58>

08014bbc <ucdr_serialize_int32_t>:
 8014bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014bc0:	b082      	sub	sp, #8
 8014bc2:	4604      	mov	r4, r0
 8014bc4:	9101      	str	r1, [sp, #4]
 8014bc6:	2104      	movs	r1, #4
 8014bc8:	f7f8 faca 	bl	800d160 <ucdr_buffer_alignment>
 8014bcc:	4601      	mov	r1, r0
 8014bce:	4620      	mov	r0, r4
 8014bd0:	7d67      	ldrb	r7, [r4, #21]
 8014bd2:	f7f8 fb09 	bl	800d1e8 <ucdr_advance_buffer>
 8014bd6:	2104      	movs	r1, #4
 8014bd8:	4620      	mov	r0, r4
 8014bda:	f7f8 fa61 	bl	800d0a0 <ucdr_check_buffer_available_for>
 8014bde:	2800      	cmp	r0, #0
 8014be0:	d139      	bne.n	8014c56 <ucdr_serialize_int32_t+0x9a>
 8014be2:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8014be6:	42ab      	cmp	r3, r5
 8014be8:	d930      	bls.n	8014c4c <ucdr_serialize_int32_t+0x90>
 8014bea:	1b5e      	subs	r6, r3, r5
 8014bec:	60a3      	str	r3, [r4, #8]
 8014bee:	6923      	ldr	r3, [r4, #16]
 8014bf0:	f1c6 0804 	rsb	r8, r6, #4
 8014bf4:	4433      	add	r3, r6
 8014bf6:	6123      	str	r3, [r4, #16]
 8014bf8:	4641      	mov	r1, r8
 8014bfa:	4620      	mov	r0, r4
 8014bfc:	f7f8 fa5c 	bl	800d0b8 <ucdr_check_final_buffer_behavior>
 8014c00:	2800      	cmp	r0, #0
 8014c02:	d04c      	beq.n	8014c9e <ucdr_serialize_int32_t+0xe2>
 8014c04:	7d23      	ldrb	r3, [r4, #20]
 8014c06:	2b01      	cmp	r3, #1
 8014c08:	d063      	beq.n	8014cd2 <ucdr_serialize_int32_t+0x116>
 8014c0a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8014c0e:	702b      	strb	r3, [r5, #0]
 8014c10:	2e00      	cmp	r6, #0
 8014c12:	d051      	beq.n	8014cb8 <ucdr_serialize_int32_t+0xfc>
 8014c14:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8014c18:	706b      	strb	r3, [r5, #1]
 8014c1a:	2e01      	cmp	r6, #1
 8014c1c:	d050      	beq.n	8014cc0 <ucdr_serialize_int32_t+0x104>
 8014c1e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8014c22:	70ab      	strb	r3, [r5, #2]
 8014c24:	2e02      	cmp	r6, #2
 8014c26:	d04f      	beq.n	8014cc8 <ucdr_serialize_int32_t+0x10c>
 8014c28:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8014c2c:	70eb      	strb	r3, [r5, #3]
 8014c2e:	6923      	ldr	r3, [r4, #16]
 8014c30:	68a2      	ldr	r2, [r4, #8]
 8014c32:	7da0      	ldrb	r0, [r4, #22]
 8014c34:	3304      	adds	r3, #4
 8014c36:	1b9e      	subs	r6, r3, r6
 8014c38:	4442      	add	r2, r8
 8014c3a:	2304      	movs	r3, #4
 8014c3c:	f080 0001 	eor.w	r0, r0, #1
 8014c40:	60a2      	str	r2, [r4, #8]
 8014c42:	6126      	str	r6, [r4, #16]
 8014c44:	7563      	strb	r3, [r4, #21]
 8014c46:	b002      	add	sp, #8
 8014c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c4c:	2104      	movs	r1, #4
 8014c4e:	4620      	mov	r0, r4
 8014c50:	f7f8 fa32 	bl	800d0b8 <ucdr_check_final_buffer_behavior>
 8014c54:	b1d0      	cbz	r0, 8014c8c <ucdr_serialize_int32_t+0xd0>
 8014c56:	7d23      	ldrb	r3, [r4, #20]
 8014c58:	2b01      	cmp	r3, #1
 8014c5a:	68a3      	ldr	r3, [r4, #8]
 8014c5c:	d01c      	beq.n	8014c98 <ucdr_serialize_int32_t+0xdc>
 8014c5e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8014c62:	701a      	strb	r2, [r3, #0]
 8014c64:	68a3      	ldr	r3, [r4, #8]
 8014c66:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8014c6a:	705a      	strb	r2, [r3, #1]
 8014c6c:	68a3      	ldr	r3, [r4, #8]
 8014c6e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8014c72:	709a      	strb	r2, [r3, #2]
 8014c74:	68a3      	ldr	r3, [r4, #8]
 8014c76:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8014c7a:	70da      	strb	r2, [r3, #3]
 8014c7c:	68a2      	ldr	r2, [r4, #8]
 8014c7e:	6923      	ldr	r3, [r4, #16]
 8014c80:	3204      	adds	r2, #4
 8014c82:	3304      	adds	r3, #4
 8014c84:	2104      	movs	r1, #4
 8014c86:	60a2      	str	r2, [r4, #8]
 8014c88:	6123      	str	r3, [r4, #16]
 8014c8a:	7561      	strb	r1, [r4, #21]
 8014c8c:	7da0      	ldrb	r0, [r4, #22]
 8014c8e:	f080 0001 	eor.w	r0, r0, #1
 8014c92:	b002      	add	sp, #8
 8014c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c98:	9a01      	ldr	r2, [sp, #4]
 8014c9a:	601a      	str	r2, [r3, #0]
 8014c9c:	e7ee      	b.n	8014c7c <ucdr_serialize_int32_t+0xc0>
 8014c9e:	68a2      	ldr	r2, [r4, #8]
 8014ca0:	6923      	ldr	r3, [r4, #16]
 8014ca2:	7da0      	ldrb	r0, [r4, #22]
 8014ca4:	7567      	strb	r7, [r4, #21]
 8014ca6:	1b92      	subs	r2, r2, r6
 8014ca8:	1b9b      	subs	r3, r3, r6
 8014caa:	f080 0001 	eor.w	r0, r0, #1
 8014cae:	60a2      	str	r2, [r4, #8]
 8014cb0:	6123      	str	r3, [r4, #16]
 8014cb2:	b002      	add	sp, #8
 8014cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014cb8:	68a3      	ldr	r3, [r4, #8]
 8014cba:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8014cbe:	701a      	strb	r2, [r3, #0]
 8014cc0:	68a3      	ldr	r3, [r4, #8]
 8014cc2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8014cc6:	701a      	strb	r2, [r3, #0]
 8014cc8:	68a3      	ldr	r3, [r4, #8]
 8014cca:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8014cce:	701a      	strb	r2, [r3, #0]
 8014cd0:	e7ad      	b.n	8014c2e <ucdr_serialize_int32_t+0x72>
 8014cd2:	4628      	mov	r0, r5
 8014cd4:	ad01      	add	r5, sp, #4
 8014cd6:	4629      	mov	r1, r5
 8014cd8:	4632      	mov	r2, r6
 8014cda:	f003 f9a0 	bl	801801e <memcpy>
 8014cde:	68a0      	ldr	r0, [r4, #8]
 8014ce0:	4642      	mov	r2, r8
 8014ce2:	19a9      	adds	r1, r5, r6
 8014ce4:	f003 f99b 	bl	801801e <memcpy>
 8014ce8:	e7a1      	b.n	8014c2e <ucdr_serialize_int32_t+0x72>
 8014cea:	bf00      	nop

08014cec <ucdr_deserialize_int32_t>:
 8014cec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014cf0:	460d      	mov	r5, r1
 8014cf2:	2104      	movs	r1, #4
 8014cf4:	4604      	mov	r4, r0
 8014cf6:	f7f8 fa33 	bl	800d160 <ucdr_buffer_alignment>
 8014cfa:	4601      	mov	r1, r0
 8014cfc:	4620      	mov	r0, r4
 8014cfe:	f894 8015 	ldrb.w	r8, [r4, #21]
 8014d02:	f7f8 fa71 	bl	800d1e8 <ucdr_advance_buffer>
 8014d06:	2104      	movs	r1, #4
 8014d08:	4620      	mov	r0, r4
 8014d0a:	f7f8 f9c9 	bl	800d0a0 <ucdr_check_buffer_available_for>
 8014d0e:	2800      	cmp	r0, #0
 8014d10:	d138      	bne.n	8014d84 <ucdr_deserialize_int32_t+0x98>
 8014d12:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8014d16:	42b7      	cmp	r7, r6
 8014d18:	d92f      	bls.n	8014d7a <ucdr_deserialize_int32_t+0x8e>
 8014d1a:	6923      	ldr	r3, [r4, #16]
 8014d1c:	60a7      	str	r7, [r4, #8]
 8014d1e:	1bbf      	subs	r7, r7, r6
 8014d20:	443b      	add	r3, r7
 8014d22:	f1c7 0904 	rsb	r9, r7, #4
 8014d26:	6123      	str	r3, [r4, #16]
 8014d28:	4649      	mov	r1, r9
 8014d2a:	4620      	mov	r0, r4
 8014d2c:	f7f8 f9c4 	bl	800d0b8 <ucdr_check_final_buffer_behavior>
 8014d30:	2800      	cmp	r0, #0
 8014d32:	d046      	beq.n	8014dc2 <ucdr_deserialize_int32_t+0xd6>
 8014d34:	7d23      	ldrb	r3, [r4, #20]
 8014d36:	2b01      	cmp	r3, #1
 8014d38:	d05c      	beq.n	8014df4 <ucdr_deserialize_int32_t+0x108>
 8014d3a:	78f3      	ldrb	r3, [r6, #3]
 8014d3c:	702b      	strb	r3, [r5, #0]
 8014d3e:	2f00      	cmp	r7, #0
 8014d40:	d04c      	beq.n	8014ddc <ucdr_deserialize_int32_t+0xf0>
 8014d42:	78b3      	ldrb	r3, [r6, #2]
 8014d44:	706b      	strb	r3, [r5, #1]
 8014d46:	2f01      	cmp	r7, #1
 8014d48:	f105 0302 	add.w	r3, r5, #2
 8014d4c:	d04a      	beq.n	8014de4 <ucdr_deserialize_int32_t+0xf8>
 8014d4e:	7873      	ldrb	r3, [r6, #1]
 8014d50:	70ab      	strb	r3, [r5, #2]
 8014d52:	2f02      	cmp	r7, #2
 8014d54:	f105 0303 	add.w	r3, r5, #3
 8014d58:	d048      	beq.n	8014dec <ucdr_deserialize_int32_t+0x100>
 8014d5a:	7833      	ldrb	r3, [r6, #0]
 8014d5c:	70eb      	strb	r3, [r5, #3]
 8014d5e:	6923      	ldr	r3, [r4, #16]
 8014d60:	68a2      	ldr	r2, [r4, #8]
 8014d62:	7da0      	ldrb	r0, [r4, #22]
 8014d64:	2104      	movs	r1, #4
 8014d66:	3304      	adds	r3, #4
 8014d68:	444a      	add	r2, r9
 8014d6a:	1bdb      	subs	r3, r3, r7
 8014d6c:	7561      	strb	r1, [r4, #21]
 8014d6e:	60a2      	str	r2, [r4, #8]
 8014d70:	6123      	str	r3, [r4, #16]
 8014d72:	f080 0001 	eor.w	r0, r0, #1
 8014d76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014d7a:	2104      	movs	r1, #4
 8014d7c:	4620      	mov	r0, r4
 8014d7e:	f7f8 f99b 	bl	800d0b8 <ucdr_check_final_buffer_behavior>
 8014d82:	b1b0      	cbz	r0, 8014db2 <ucdr_deserialize_int32_t+0xc6>
 8014d84:	7d23      	ldrb	r3, [r4, #20]
 8014d86:	2b01      	cmp	r3, #1
 8014d88:	68a3      	ldr	r3, [r4, #8]
 8014d8a:	d017      	beq.n	8014dbc <ucdr_deserialize_int32_t+0xd0>
 8014d8c:	78db      	ldrb	r3, [r3, #3]
 8014d8e:	702b      	strb	r3, [r5, #0]
 8014d90:	68a3      	ldr	r3, [r4, #8]
 8014d92:	789b      	ldrb	r3, [r3, #2]
 8014d94:	706b      	strb	r3, [r5, #1]
 8014d96:	68a3      	ldr	r3, [r4, #8]
 8014d98:	785b      	ldrb	r3, [r3, #1]
 8014d9a:	70ab      	strb	r3, [r5, #2]
 8014d9c:	68a3      	ldr	r3, [r4, #8]
 8014d9e:	781b      	ldrb	r3, [r3, #0]
 8014da0:	70eb      	strb	r3, [r5, #3]
 8014da2:	68a2      	ldr	r2, [r4, #8]
 8014da4:	6923      	ldr	r3, [r4, #16]
 8014da6:	3204      	adds	r2, #4
 8014da8:	3304      	adds	r3, #4
 8014daa:	2104      	movs	r1, #4
 8014dac:	60a2      	str	r2, [r4, #8]
 8014dae:	6123      	str	r3, [r4, #16]
 8014db0:	7561      	strb	r1, [r4, #21]
 8014db2:	7da0      	ldrb	r0, [r4, #22]
 8014db4:	f080 0001 	eor.w	r0, r0, #1
 8014db8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014dbc:	681b      	ldr	r3, [r3, #0]
 8014dbe:	602b      	str	r3, [r5, #0]
 8014dc0:	e7ef      	b.n	8014da2 <ucdr_deserialize_int32_t+0xb6>
 8014dc2:	68a2      	ldr	r2, [r4, #8]
 8014dc4:	6923      	ldr	r3, [r4, #16]
 8014dc6:	7da0      	ldrb	r0, [r4, #22]
 8014dc8:	f884 8015 	strb.w	r8, [r4, #21]
 8014dcc:	1bd2      	subs	r2, r2, r7
 8014dce:	1bdb      	subs	r3, r3, r7
 8014dd0:	60a2      	str	r2, [r4, #8]
 8014dd2:	6123      	str	r3, [r4, #16]
 8014dd4:	f080 0001 	eor.w	r0, r0, #1
 8014dd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014ddc:	68a3      	ldr	r3, [r4, #8]
 8014dde:	789b      	ldrb	r3, [r3, #2]
 8014de0:	706b      	strb	r3, [r5, #1]
 8014de2:	1cab      	adds	r3, r5, #2
 8014de4:	68a2      	ldr	r2, [r4, #8]
 8014de6:	7852      	ldrb	r2, [r2, #1]
 8014de8:	f803 2b01 	strb.w	r2, [r3], #1
 8014dec:	68a2      	ldr	r2, [r4, #8]
 8014dee:	7812      	ldrb	r2, [r2, #0]
 8014df0:	701a      	strb	r2, [r3, #0]
 8014df2:	e7b4      	b.n	8014d5e <ucdr_deserialize_int32_t+0x72>
 8014df4:	4631      	mov	r1, r6
 8014df6:	463a      	mov	r2, r7
 8014df8:	4628      	mov	r0, r5
 8014dfa:	f003 f910 	bl	801801e <memcpy>
 8014dfe:	68a1      	ldr	r1, [r4, #8]
 8014e00:	464a      	mov	r2, r9
 8014e02:	19e8      	adds	r0, r5, r7
 8014e04:	f003 f90b 	bl	801801e <memcpy>
 8014e08:	e7a9      	b.n	8014d5e <ucdr_deserialize_int32_t+0x72>
 8014e0a:	bf00      	nop

08014e0c <ucdr_serialize_string>:
 8014e0c:	b510      	push	{r4, lr}
 8014e0e:	b082      	sub	sp, #8
 8014e10:	4604      	mov	r4, r0
 8014e12:	4608      	mov	r0, r1
 8014e14:	9101      	str	r1, [sp, #4]
 8014e16:	f7eb fa5b 	bl	80002d0 <strlen>
 8014e1a:	9901      	ldr	r1, [sp, #4]
 8014e1c:	1c42      	adds	r2, r0, #1
 8014e1e:	4620      	mov	r0, r4
 8014e20:	b002      	add	sp, #8
 8014e22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014e26:	f7f8 b9ff 	b.w	800d228 <ucdr_serialize_sequence_char>
 8014e2a:	bf00      	nop

08014e2c <ucdr_deserialize_string>:
 8014e2c:	b500      	push	{lr}
 8014e2e:	b083      	sub	sp, #12
 8014e30:	ab01      	add	r3, sp, #4
 8014e32:	f7f8 fa0b 	bl	800d24c <ucdr_deserialize_sequence_char>
 8014e36:	b003      	add	sp, #12
 8014e38:	f85d fb04 	ldr.w	pc, [sp], #4

08014e3c <get_custom_error>:
 8014e3c:	4b01      	ldr	r3, [pc, #4]	@ (8014e44 <get_custom_error+0x8>)
 8014e3e:	7818      	ldrb	r0, [r3, #0]
 8014e40:	4770      	bx	lr
 8014e42:	bf00      	nop
 8014e44:	20011300 	.word	0x20011300

08014e48 <recv_custom_msg>:
 8014e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e4c:	4693      	mov	fp, r2
 8014e4e:	b089      	sub	sp, #36	@ 0x24
 8014e50:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 8014e54:	9305      	str	r3, [sp, #20]
 8014e56:	468a      	mov	sl, r1
 8014e58:	2100      	movs	r1, #0
 8014e5a:	4604      	mov	r4, r0
 8014e5c:	f88d 101e 	strb.w	r1, [sp, #30]
 8014e60:	b322      	cbz	r2, 8014eac <recv_custom_msg+0x64>
 8014e62:	f200 2902 	addw	r9, r0, #514	@ 0x202
 8014e66:	f10d 081f 	add.w	r8, sp, #31
 8014e6a:	af05      	add	r7, sp, #20
 8014e6c:	f10d 061e 	add.w	r6, sp, #30
 8014e70:	f44f 7500 	mov.w	r5, #512	@ 0x200
 8014e74:	e002      	b.n	8014e7c <recv_custom_msg+0x34>
 8014e76:	9b05      	ldr	r3, [sp, #20]
 8014e78:	2b00      	cmp	r3, #0
 8014e7a:	dd0f      	ble.n	8014e9c <recv_custom_msg+0x54>
 8014e7c:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 8014e80:	4623      	mov	r3, r4
 8014e82:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8014e86:	e9cd 5600 	strd	r5, r6, [sp]
 8014e8a:	4622      	mov	r2, r4
 8014e8c:	4648      	mov	r0, r9
 8014e8e:	f000 fffd 	bl	8015e8c <uxr_read_framed_msg>
 8014e92:	2800      	cmp	r0, #0
 8014e94:	d0ef      	beq.n	8014e76 <recv_custom_msg+0x2e>
 8014e96:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8014e9a:	b1b3      	cbz	r3, 8014eca <recv_custom_msg+0x82>
 8014e9c:	4b0f      	ldr	r3, [pc, #60]	@ (8014edc <recv_custom_msg+0x94>)
 8014e9e:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8014ea2:	701a      	strb	r2, [r3, #0]
 8014ea4:	2000      	movs	r0, #0
 8014ea6:	b009      	add	sp, #36	@ 0x24
 8014ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014eac:	f10d 021f 	add.w	r2, sp, #31
 8014eb0:	9200      	str	r2, [sp, #0]
 8014eb2:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 8014eb6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014eba:	4601      	mov	r1, r0
 8014ebc:	47a8      	blx	r5
 8014ebe:	2800      	cmp	r0, #0
 8014ec0:	d0ec      	beq.n	8014e9c <recv_custom_msg+0x54>
 8014ec2:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8014ec6:	2b00      	cmp	r3, #0
 8014ec8:	d1e8      	bne.n	8014e9c <recv_custom_msg+0x54>
 8014eca:	f8cb 0000 	str.w	r0, [fp]
 8014ece:	2001      	movs	r0, #1
 8014ed0:	f8ca 4000 	str.w	r4, [sl]
 8014ed4:	b009      	add	sp, #36	@ 0x24
 8014ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014eda:	bf00      	nop
 8014edc:	20011300 	.word	0x20011300

08014ee0 <send_custom_msg>:
 8014ee0:	b530      	push	{r4, r5, lr}
 8014ee2:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 8014ee6:	b087      	sub	sp, #28
 8014ee8:	4615      	mov	r5, r2
 8014eea:	b974      	cbnz	r4, 8014f0a <send_custom_msg+0x2a>
 8014eec:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 8014ef0:	f10d 0317 	add.w	r3, sp, #23
 8014ef4:	47a0      	blx	r4
 8014ef6:	b108      	cbz	r0, 8014efc <send_custom_msg+0x1c>
 8014ef8:	42a8      	cmp	r0, r5
 8014efa:	d015      	beq.n	8014f28 <send_custom_msg+0x48>
 8014efc:	4b0c      	ldr	r3, [pc, #48]	@ (8014f30 <send_custom_msg+0x50>)
 8014efe:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8014f02:	701a      	strb	r2, [r3, #0]
 8014f04:	2000      	movs	r0, #0
 8014f06:	b007      	add	sp, #28
 8014f08:	bd30      	pop	{r4, r5, pc}
 8014f0a:	460b      	mov	r3, r1
 8014f0c:	2200      	movs	r2, #0
 8014f0e:	f10d 0117 	add.w	r1, sp, #23
 8014f12:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8014f16:	4602      	mov	r2, r0
 8014f18:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 8014f1c:	9500      	str	r5, [sp, #0]
 8014f1e:	f200 2002 	addw	r0, r0, #514	@ 0x202
 8014f22:	f000 fdbb 	bl	8015a9c <uxr_write_framed_msg>
 8014f26:	e7e6      	b.n	8014ef6 <send_custom_msg+0x16>
 8014f28:	2001      	movs	r0, #1
 8014f2a:	b007      	add	sp, #28
 8014f2c:	bd30      	pop	{r4, r5, pc}
 8014f2e:	bf00      	nop
 8014f30:	20011300 	.word	0x20011300

08014f34 <uxr_set_custom_transport_callbacks>:
 8014f34:	b410      	push	{r4}
 8014f36:	9c01      	ldr	r4, [sp, #4]
 8014f38:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 8014f3c:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 8014f40:	9b02      	ldr	r3, [sp, #8]
 8014f42:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 8014f46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014f4a:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 8014f4e:	4770      	bx	lr

08014f50 <uxr_init_custom_transport>:
 8014f50:	b538      	push	{r3, r4, r5, lr}
 8014f52:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 8014f56:	b303      	cbz	r3, 8014f9a <uxr_init_custom_transport+0x4a>
 8014f58:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 8014f5c:	4604      	mov	r4, r0
 8014f5e:	b1e2      	cbz	r2, 8014f9a <uxr_init_custom_transport+0x4a>
 8014f60:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 8014f64:	b1ca      	cbz	r2, 8014f9a <uxr_init_custom_transport+0x4a>
 8014f66:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 8014f6a:	b1b2      	cbz	r2, 8014f9a <uxr_init_custom_transport+0x4a>
 8014f6c:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 8014f70:	4798      	blx	r3
 8014f72:	4605      	mov	r5, r0
 8014f74:	b188      	cbz	r0, 8014f9a <uxr_init_custom_transport+0x4a>
 8014f76:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 8014f7a:	b98b      	cbnz	r3, 8014fa0 <uxr_init_custom_transport+0x50>
 8014f7c:	490b      	ldr	r1, [pc, #44]	@ (8014fac <uxr_init_custom_transport+0x5c>)
 8014f7e:	4b0c      	ldr	r3, [pc, #48]	@ (8014fb0 <uxr_init_custom_transport+0x60>)
 8014f80:	4a0c      	ldr	r2, [pc, #48]	@ (8014fb4 <uxr_init_custom_transport+0x64>)
 8014f82:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 8014f86:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8014f8a:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 8014f8e:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 8014f92:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 8014f96:	4628      	mov	r0, r5
 8014f98:	bd38      	pop	{r3, r4, r5, pc}
 8014f9a:	2500      	movs	r5, #0
 8014f9c:	4628      	mov	r0, r5
 8014f9e:	bd38      	pop	{r3, r4, r5, pc}
 8014fa0:	2100      	movs	r1, #0
 8014fa2:	f204 2002 	addw	r0, r4, #514	@ 0x202
 8014fa6:	f000 fd73 	bl	8015a90 <uxr_init_framing_io>
 8014faa:	e7e7      	b.n	8014f7c <uxr_init_custom_transport+0x2c>
 8014fac:	08014ee1 	.word	0x08014ee1
 8014fb0:	08014e49 	.word	0x08014e49
 8014fb4:	08014e3d 	.word	0x08014e3d

08014fb8 <uxr_close_custom_transport>:
 8014fb8:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 8014fbc:	4718      	bx	r3
 8014fbe:	bf00      	nop

08014fc0 <uxr_init_input_best_effort_stream>:
 8014fc0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014fc4:	8003      	strh	r3, [r0, #0]
 8014fc6:	4770      	bx	lr

08014fc8 <uxr_reset_input_best_effort_stream>:
 8014fc8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014fcc:	8003      	strh	r3, [r0, #0]
 8014fce:	4770      	bx	lr

08014fd0 <uxr_receive_best_effort_message>:
 8014fd0:	b538      	push	{r3, r4, r5, lr}
 8014fd2:	4604      	mov	r4, r0
 8014fd4:	8800      	ldrh	r0, [r0, #0]
 8014fd6:	460d      	mov	r5, r1
 8014fd8:	f000 fd42 	bl	8015a60 <uxr_seq_num_cmp>
 8014fdc:	4603      	mov	r3, r0
 8014fde:	2b00      	cmp	r3, #0
 8014fe0:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8014fe4:	bfb8      	it	lt
 8014fe6:	8025      	strhlt	r5, [r4, #0]
 8014fe8:	bd38      	pop	{r3, r4, r5, pc}
 8014fea:	bf00      	nop

08014fec <on_full_input_buffer>:
 8014fec:	b570      	push	{r4, r5, r6, lr}
 8014fee:	4605      	mov	r5, r0
 8014ff0:	460c      	mov	r4, r1
 8014ff2:	682b      	ldr	r3, [r5, #0]
 8014ff4:	6809      	ldr	r1, [r1, #0]
 8014ff6:	8920      	ldrh	r0, [r4, #8]
 8014ff8:	6862      	ldr	r2, [r4, #4]
 8014ffa:	fbb2 f2f0 	udiv	r2, r2, r0
 8014ffe:	eba3 0c01 	sub.w	ip, r3, r1
 8015002:	fbbc fcf2 	udiv	ip, ip, r2
 8015006:	f10c 0c01 	add.w	ip, ip, #1
 801500a:	fa1f f38c 	uxth.w	r3, ip
 801500e:	fbb3 f6f0 	udiv	r6, r3, r0
 8015012:	fb00 3316 	mls	r3, r0, r6, r3
 8015016:	b29b      	uxth	r3, r3
 8015018:	fb02 f303 	mul.w	r3, r2, r3
 801501c:	1d18      	adds	r0, r3, #4
 801501e:	4408      	add	r0, r1
 8015020:	7d26      	ldrb	r6, [r4, #20]
 8015022:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8015026:	b116      	cbz	r6, 801502e <on_full_input_buffer+0x42>
 8015028:	2600      	movs	r6, #0
 801502a:	f840 6c04 	str.w	r6, [r0, #-4]
 801502e:	2a03      	cmp	r2, #3
 8015030:	d801      	bhi.n	8015036 <on_full_input_buffer+0x4a>
 8015032:	2001      	movs	r0, #1
 8015034:	bd70      	pop	{r4, r5, r6, pc}
 8015036:	3308      	adds	r3, #8
 8015038:	4419      	add	r1, r3
 801503a:	4628      	mov	r0, r5
 801503c:	692b      	ldr	r3, [r5, #16]
 801503e:	3a04      	subs	r2, #4
 8015040:	f7f8 f87a 	bl	800d138 <ucdr_init_buffer_origin>
 8015044:	4628      	mov	r0, r5
 8015046:	4903      	ldr	r1, [pc, #12]	@ (8015054 <on_full_input_buffer+0x68>)
 8015048:	4622      	mov	r2, r4
 801504a:	f7f8 f851 	bl	800d0f0 <ucdr_set_on_full_buffer_callback>
 801504e:	2000      	movs	r0, #0
 8015050:	bd70      	pop	{r4, r5, r6, pc}
 8015052:	bf00      	nop
 8015054:	08014fed 	.word	0x08014fed

08015058 <uxr_init_input_reliable_stream>:
 8015058:	b500      	push	{lr}
 801505a:	e9c0 1200 	strd	r1, r2, [r0]
 801505e:	f04f 0e00 	mov.w	lr, #0
 8015062:	9a01      	ldr	r2, [sp, #4]
 8015064:	8103      	strh	r3, [r0, #8]
 8015066:	6102      	str	r2, [r0, #16]
 8015068:	f880 e014 	strb.w	lr, [r0, #20]
 801506c:	b1d3      	cbz	r3, 80150a4 <uxr_init_input_reliable_stream+0x4c>
 801506e:	f8c1 e000 	str.w	lr, [r1]
 8015072:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8015076:	f1bc 0f01 	cmp.w	ip, #1
 801507a:	d913      	bls.n	80150a4 <uxr_init_input_reliable_stream+0x4c>
 801507c:	2301      	movs	r3, #1
 801507e:	fbb3 f1fc 	udiv	r1, r3, ip
 8015082:	fb0c 3111 	mls	r1, ip, r1, r3
 8015086:	b289      	uxth	r1, r1
 8015088:	6842      	ldr	r2, [r0, #4]
 801508a:	fbb2 f2fc 	udiv	r2, r2, ip
 801508e:	fb01 f202 	mul.w	r2, r1, r2
 8015092:	6801      	ldr	r1, [r0, #0]
 8015094:	f841 e002 	str.w	lr, [r1, r2]
 8015098:	3301      	adds	r3, #1
 801509a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801509e:	b29b      	uxth	r3, r3
 80150a0:	459c      	cmp	ip, r3
 80150a2:	d8ec      	bhi.n	801507e <uxr_init_input_reliable_stream+0x26>
 80150a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80150a8:	60c3      	str	r3, [r0, #12]
 80150aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80150ae:	bf00      	nop

080150b0 <uxr_reset_input_reliable_stream>:
 80150b0:	8901      	ldrh	r1, [r0, #8]
 80150b2:	b1e9      	cbz	r1, 80150f0 <uxr_reset_input_reliable_stream+0x40>
 80150b4:	f04f 0c00 	mov.w	ip, #0
 80150b8:	b500      	push	{lr}
 80150ba:	4663      	mov	r3, ip
 80150bc:	46e6      	mov	lr, ip
 80150be:	fbb3 f2f1 	udiv	r2, r3, r1
 80150c2:	fb01 3312 	mls	r3, r1, r2, r3
 80150c6:	b29b      	uxth	r3, r3
 80150c8:	6842      	ldr	r2, [r0, #4]
 80150ca:	fbb2 f2f1 	udiv	r2, r2, r1
 80150ce:	fb02 f303 	mul.w	r3, r2, r3
 80150d2:	6802      	ldr	r2, [r0, #0]
 80150d4:	f842 e003 	str.w	lr, [r2, r3]
 80150d8:	f10c 0c01 	add.w	ip, ip, #1
 80150dc:	8901      	ldrh	r1, [r0, #8]
 80150de:	fa1f f38c 	uxth.w	r3, ip
 80150e2:	4299      	cmp	r1, r3
 80150e4:	d8eb      	bhi.n	80150be <uxr_reset_input_reliable_stream+0xe>
 80150e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80150ea:	60c3      	str	r3, [r0, #12]
 80150ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80150f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80150f4:	60c3      	str	r3, [r0, #12]
 80150f6:	4770      	bx	lr

080150f8 <uxr_receive_reliable_message>:
 80150f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80150fc:	4604      	mov	r4, r0
 80150fe:	460d      	mov	r5, r1
 8015100:	8901      	ldrh	r1, [r0, #8]
 8015102:	8980      	ldrh	r0, [r0, #12]
 8015104:	4690      	mov	r8, r2
 8015106:	461f      	mov	r7, r3
 8015108:	f000 fca2 	bl	8015a50 <uxr_seq_num_add>
 801510c:	4629      	mov	r1, r5
 801510e:	4606      	mov	r6, r0
 8015110:	89a0      	ldrh	r0, [r4, #12]
 8015112:	f000 fca5 	bl	8015a60 <uxr_seq_num_cmp>
 8015116:	2800      	cmp	r0, #0
 8015118:	db0a      	blt.n	8015130 <uxr_receive_reliable_message+0x38>
 801511a:	2600      	movs	r6, #0
 801511c:	89e0      	ldrh	r0, [r4, #14]
 801511e:	4629      	mov	r1, r5
 8015120:	f000 fc9e 	bl	8015a60 <uxr_seq_num_cmp>
 8015124:	2800      	cmp	r0, #0
 8015126:	da00      	bge.n	801512a <uxr_receive_reliable_message+0x32>
 8015128:	81e5      	strh	r5, [r4, #14]
 801512a:	4630      	mov	r0, r6
 801512c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015130:	4630      	mov	r0, r6
 8015132:	4629      	mov	r1, r5
 8015134:	f000 fc94 	bl	8015a60 <uxr_seq_num_cmp>
 8015138:	2800      	cmp	r0, #0
 801513a:	dbee      	blt.n	801511a <uxr_receive_reliable_message+0x22>
 801513c:	6923      	ldr	r3, [r4, #16]
 801513e:	4640      	mov	r0, r8
 8015140:	4798      	blx	r3
 8015142:	2101      	movs	r1, #1
 8015144:	4681      	mov	r9, r0
 8015146:	89a0      	ldrh	r0, [r4, #12]
 8015148:	f000 fc82 	bl	8015a50 <uxr_seq_num_add>
 801514c:	f1b9 0f00 	cmp.w	r9, #0
 8015150:	d101      	bne.n	8015156 <uxr_receive_reliable_message+0x5e>
 8015152:	4285      	cmp	r5, r0
 8015154:	d047      	beq.n	80151e6 <uxr_receive_reliable_message+0xee>
 8015156:	8922      	ldrh	r2, [r4, #8]
 8015158:	fbb5 f0f2 	udiv	r0, r5, r2
 801515c:	fb02 5010 	mls	r0, r2, r0, r5
 8015160:	b280      	uxth	r0, r0
 8015162:	6863      	ldr	r3, [r4, #4]
 8015164:	fbb3 f3f2 	udiv	r3, r3, r2
 8015168:	fb00 f303 	mul.w	r3, r0, r3
 801516c:	6820      	ldr	r0, [r4, #0]
 801516e:	3304      	adds	r3, #4
 8015170:	4418      	add	r0, r3
 8015172:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8015176:	2b00      	cmp	r3, #0
 8015178:	d1cf      	bne.n	801511a <uxr_receive_reliable_message+0x22>
 801517a:	4641      	mov	r1, r8
 801517c:	463a      	mov	r2, r7
 801517e:	f002 ff4e 	bl	801801e <memcpy>
 8015182:	8921      	ldrh	r1, [r4, #8]
 8015184:	fbb5 f2f1 	udiv	r2, r5, r1
 8015188:	fb01 5212 	mls	r2, r1, r2, r5
 801518c:	b292      	uxth	r2, r2
 801518e:	6863      	ldr	r3, [r4, #4]
 8015190:	fbb3 f3f1 	udiv	r3, r3, r1
 8015194:	fb02 f303 	mul.w	r3, r2, r3
 8015198:	6822      	ldr	r2, [r4, #0]
 801519a:	50d7      	str	r7, [r2, r3]
 801519c:	9a08      	ldr	r2, [sp, #32]
 801519e:	2301      	movs	r3, #1
 80151a0:	7013      	strb	r3, [r2, #0]
 80151a2:	f1b9 0f00 	cmp.w	r9, #0
 80151a6:	d0b8      	beq.n	801511a <uxr_receive_reliable_message+0x22>
 80151a8:	89a6      	ldrh	r6, [r4, #12]
 80151aa:	4630      	mov	r0, r6
 80151ac:	2101      	movs	r1, #1
 80151ae:	f000 fc4f 	bl	8015a50 <uxr_seq_num_add>
 80151b2:	8922      	ldrh	r2, [r4, #8]
 80151b4:	6863      	ldr	r3, [r4, #4]
 80151b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80151ba:	4606      	mov	r6, r0
 80151bc:	fbb0 f0f2 	udiv	r0, r0, r2
 80151c0:	fb02 6010 	mls	r0, r2, r0, r6
 80151c4:	b280      	uxth	r0, r0
 80151c6:	fb00 f303 	mul.w	r3, r0, r3
 80151ca:	6820      	ldr	r0, [r4, #0]
 80151cc:	3304      	adds	r3, #4
 80151ce:	4418      	add	r0, r3
 80151d0:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80151d4:	2b00      	cmp	r3, #0
 80151d6:	d0a0      	beq.n	801511a <uxr_receive_reliable_message+0x22>
 80151d8:	6923      	ldr	r3, [r4, #16]
 80151da:	4798      	blx	r3
 80151dc:	2802      	cmp	r0, #2
 80151de:	d008      	beq.n	80151f2 <uxr_receive_reliable_message+0xfa>
 80151e0:	2801      	cmp	r0, #1
 80151e2:	d0e2      	beq.n	80151aa <uxr_receive_reliable_message+0xb2>
 80151e4:	e799      	b.n	801511a <uxr_receive_reliable_message+0x22>
 80151e6:	9b08      	ldr	r3, [sp, #32]
 80151e8:	81a5      	strh	r5, [r4, #12]
 80151ea:	2601      	movs	r6, #1
 80151ec:	f883 9000 	strb.w	r9, [r3]
 80151f0:	e794      	b.n	801511c <uxr_receive_reliable_message+0x24>
 80151f2:	2601      	movs	r6, #1
 80151f4:	e792      	b.n	801511c <uxr_receive_reliable_message+0x24>
 80151f6:	bf00      	nop

080151f8 <uxr_next_input_reliable_buffer_available>:
 80151f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80151fc:	4604      	mov	r4, r0
 80151fe:	460f      	mov	r7, r1
 8015200:	8980      	ldrh	r0, [r0, #12]
 8015202:	2101      	movs	r1, #1
 8015204:	4690      	mov	r8, r2
 8015206:	f000 fc23 	bl	8015a50 <uxr_seq_num_add>
 801520a:	8922      	ldrh	r2, [r4, #8]
 801520c:	fbb0 f6f2 	udiv	r6, r0, r2
 8015210:	fb02 0616 	mls	r6, r2, r6, r0
 8015214:	b2b6      	uxth	r6, r6
 8015216:	6863      	ldr	r3, [r4, #4]
 8015218:	fbb3 f3f2 	udiv	r3, r3, r2
 801521c:	fb06 f303 	mul.w	r3, r6, r3
 8015220:	6826      	ldr	r6, [r4, #0]
 8015222:	3304      	adds	r3, #4
 8015224:	441e      	add	r6, r3
 8015226:	f856 9c04 	ldr.w	r9, [r6, #-4]
 801522a:	f1b9 0f00 	cmp.w	r9, #0
 801522e:	d023      	beq.n	8015278 <uxr_next_input_reliable_buffer_available+0x80>
 8015230:	6923      	ldr	r3, [r4, #16]
 8015232:	4605      	mov	r5, r0
 8015234:	4630      	mov	r0, r6
 8015236:	4798      	blx	r3
 8015238:	4682      	mov	sl, r0
 801523a:	b300      	cbz	r0, 801527e <uxr_next_input_reliable_buffer_available+0x86>
 801523c:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8015240:	2101      	movs	r1, #1
 8015242:	4650      	mov	r0, sl
 8015244:	f000 fc04 	bl	8015a50 <uxr_seq_num_add>
 8015248:	8921      	ldrh	r1, [r4, #8]
 801524a:	fbb0 f2f1 	udiv	r2, r0, r1
 801524e:	4682      	mov	sl, r0
 8015250:	fb01 0212 	mls	r2, r1, r2, r0
 8015254:	e9d4 0300 	ldrd	r0, r3, [r4]
 8015258:	b292      	uxth	r2, r2
 801525a:	fbb3 f3f1 	udiv	r3, r3, r1
 801525e:	fb02 f303 	mul.w	r3, r2, r3
 8015262:	3304      	adds	r3, #4
 8015264:	4418      	add	r0, r3
 8015266:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801526a:	b12b      	cbz	r3, 8015278 <uxr_next_input_reliable_buffer_available+0x80>
 801526c:	6923      	ldr	r3, [r4, #16]
 801526e:	4798      	blx	r3
 8015270:	2802      	cmp	r0, #2
 8015272:	d01b      	beq.n	80152ac <uxr_next_input_reliable_buffer_available+0xb4>
 8015274:	2801      	cmp	r0, #1
 8015276:	d0e3      	beq.n	8015240 <uxr_next_input_reliable_buffer_available+0x48>
 8015278:	2000      	movs	r0, #0
 801527a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801527e:	464a      	mov	r2, r9
 8015280:	4631      	mov	r1, r6
 8015282:	4638      	mov	r0, r7
 8015284:	f7f7 ff60 	bl	800d148 <ucdr_init_buffer>
 8015288:	8921      	ldrh	r1, [r4, #8]
 801528a:	fbb5 f2f1 	udiv	r2, r5, r1
 801528e:	fb01 5212 	mls	r2, r1, r2, r5
 8015292:	b292      	uxth	r2, r2
 8015294:	6863      	ldr	r3, [r4, #4]
 8015296:	fbb3 f3f1 	udiv	r3, r3, r1
 801529a:	fb02 f303 	mul.w	r3, r2, r3
 801529e:	6822      	ldr	r2, [r4, #0]
 80152a0:	f842 a003 	str.w	sl, [r2, r3]
 80152a4:	2001      	movs	r0, #1
 80152a6:	81a5      	strh	r5, [r4, #12]
 80152a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80152ac:	8920      	ldrh	r0, [r4, #8]
 80152ae:	fbb5 f3f0 	udiv	r3, r5, r0
 80152b2:	fb00 5513 	mls	r5, r0, r3, r5
 80152b6:	b2ad      	uxth	r5, r5
 80152b8:	6863      	ldr	r3, [r4, #4]
 80152ba:	fbb3 f3f0 	udiv	r3, r3, r0
 80152be:	fb03 f505 	mul.w	r5, r3, r5
 80152c2:	6823      	ldr	r3, [r4, #0]
 80152c4:	2000      	movs	r0, #0
 80152c6:	5158      	str	r0, [r3, r5]
 80152c8:	eb06 0108 	add.w	r1, r6, r8
 80152cc:	eba9 0208 	sub.w	r2, r9, r8
 80152d0:	4638      	mov	r0, r7
 80152d2:	f7f7 ff39 	bl	800d148 <ucdr_init_buffer>
 80152d6:	4638      	mov	r0, r7
 80152d8:	4903      	ldr	r1, [pc, #12]	@ (80152e8 <uxr_next_input_reliable_buffer_available+0xf0>)
 80152da:	4622      	mov	r2, r4
 80152dc:	f7f7 ff08 	bl	800d0f0 <ucdr_set_on_full_buffer_callback>
 80152e0:	f8a4 a00c 	strh.w	sl, [r4, #12]
 80152e4:	2001      	movs	r0, #1
 80152e6:	e7c8      	b.n	801527a <uxr_next_input_reliable_buffer_available+0x82>
 80152e8:	08014fed 	.word	0x08014fed

080152ec <uxr_process_heartbeat>:
 80152ec:	b538      	push	{r3, r4, r5, lr}
 80152ee:	4611      	mov	r1, r2
 80152f0:	4604      	mov	r4, r0
 80152f2:	89c0      	ldrh	r0, [r0, #14]
 80152f4:	4615      	mov	r5, r2
 80152f6:	f000 fbb3 	bl	8015a60 <uxr_seq_num_cmp>
 80152fa:	2800      	cmp	r0, #0
 80152fc:	bfb8      	it	lt
 80152fe:	81e5      	strhlt	r5, [r4, #14]
 8015300:	bd38      	pop	{r3, r4, r5, pc}
 8015302:	bf00      	nop

08015304 <uxr_compute_acknack>:
 8015304:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015308:	8903      	ldrh	r3, [r0, #8]
 801530a:	8985      	ldrh	r5, [r0, #12]
 801530c:	4604      	mov	r4, r0
 801530e:	460e      	mov	r6, r1
 8015310:	b1d3      	cbz	r3, 8015348 <uxr_compute_acknack+0x44>
 8015312:	4628      	mov	r0, r5
 8015314:	2701      	movs	r7, #1
 8015316:	e003      	b.n	8015320 <uxr_compute_acknack+0x1c>
 8015318:	4567      	cmp	r7, ip
 801531a:	d215      	bcs.n	8015348 <uxr_compute_acknack+0x44>
 801531c:	89a0      	ldrh	r0, [r4, #12]
 801531e:	3701      	adds	r7, #1
 8015320:	b2b9      	uxth	r1, r7
 8015322:	f000 fb95 	bl	8015a50 <uxr_seq_num_add>
 8015326:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801532a:	fbb0 f3fc 	udiv	r3, r0, ip
 801532e:	fb0c 0313 	mls	r3, ip, r3, r0
 8015332:	b29a      	uxth	r2, r3
 8015334:	e9d4 1300 	ldrd	r1, r3, [r4]
 8015338:	fbb3 f3fc 	udiv	r3, r3, ip
 801533c:	fb02 f303 	mul.w	r3, r2, r3
 8015340:	58cb      	ldr	r3, [r1, r3]
 8015342:	2b00      	cmp	r3, #0
 8015344:	d1e8      	bne.n	8015318 <uxr_compute_acknack+0x14>
 8015346:	4605      	mov	r5, r0
 8015348:	8035      	strh	r5, [r6, #0]
 801534a:	2101      	movs	r1, #1
 801534c:	4628      	mov	r0, r5
 801534e:	89e7      	ldrh	r7, [r4, #14]
 8015350:	f000 fb82 	bl	8015a58 <uxr_seq_num_sub>
 8015354:	4601      	mov	r1, r0
 8015356:	4638      	mov	r0, r7
 8015358:	f000 fb7e 	bl	8015a58 <uxr_seq_num_sub>
 801535c:	4605      	mov	r5, r0
 801535e:	b318      	cbz	r0, 80153a8 <uxr_compute_acknack+0xa4>
 8015360:	f04f 0900 	mov.w	r9, #0
 8015364:	464f      	mov	r7, r9
 8015366:	f04f 0801 	mov.w	r8, #1
 801536a:	fa1f f189 	uxth.w	r1, r9
 801536e:	8830      	ldrh	r0, [r6, #0]
 8015370:	f000 fb6e 	bl	8015a50 <uxr_seq_num_add>
 8015374:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8015378:	fbb0 f3fc 	udiv	r3, r0, ip
 801537c:	e9d4 1200 	ldrd	r1, r2, [r4]
 8015380:	fb03 001c 	mls	r0, r3, ip, r0
 8015384:	b283      	uxth	r3, r0
 8015386:	fbb2 f2fc 	udiv	r2, r2, ip
 801538a:	fb02 f303 	mul.w	r3, r2, r3
 801538e:	fa08 f209 	lsl.w	r2, r8, r9
 8015392:	58cb      	ldr	r3, [r1, r3]
 8015394:	f109 0901 	add.w	r9, r9, #1
 8015398:	b90b      	cbnz	r3, 801539e <uxr_compute_acknack+0x9a>
 801539a:	4317      	orrs	r7, r2
 801539c:	b2bf      	uxth	r7, r7
 801539e:	454d      	cmp	r5, r9
 80153a0:	d1e3      	bne.n	801536a <uxr_compute_acknack+0x66>
 80153a2:	4638      	mov	r0, r7
 80153a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80153a8:	4607      	mov	r7, r0
 80153aa:	4638      	mov	r0, r7
 80153ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080153b0 <uxr_init_output_best_effort_stream>:
 80153b0:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 80153b4:	e9c0 3201 	strd	r3, r2, [r0, #4]
 80153b8:	6001      	str	r1, [r0, #0]
 80153ba:	7303      	strb	r3, [r0, #12]
 80153bc:	f8a0 c00e 	strh.w	ip, [r0, #14]
 80153c0:	4770      	bx	lr
 80153c2:	bf00      	nop

080153c4 <uxr_reset_output_best_effort_stream>:
 80153c4:	7b02      	ldrb	r2, [r0, #12]
 80153c6:	6042      	str	r2, [r0, #4]
 80153c8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80153cc:	81c3      	strh	r3, [r0, #14]
 80153ce:	4770      	bx	lr

080153d0 <uxr_prepare_best_effort_buffer_to_write>:
 80153d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80153d2:	4604      	mov	r4, r0
 80153d4:	b083      	sub	sp, #12
 80153d6:	6840      	ldr	r0, [r0, #4]
 80153d8:	460d      	mov	r5, r1
 80153da:	4616      	mov	r6, r2
 80153dc:	f7f9 fce8 	bl	800edb0 <uxr_submessage_padding>
 80153e0:	6863      	ldr	r3, [r4, #4]
 80153e2:	4418      	add	r0, r3
 80153e4:	68a3      	ldr	r3, [r4, #8]
 80153e6:	1942      	adds	r2, r0, r5
 80153e8:	4293      	cmp	r3, r2
 80153ea:	bf2c      	ite	cs
 80153ec:	2701      	movcs	r7, #1
 80153ee:	2700      	movcc	r7, #0
 80153f0:	d202      	bcs.n	80153f8 <uxr_prepare_best_effort_buffer_to_write+0x28>
 80153f2:	4638      	mov	r0, r7
 80153f4:	b003      	add	sp, #12
 80153f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80153f8:	9000      	str	r0, [sp, #0]
 80153fa:	6821      	ldr	r1, [r4, #0]
 80153fc:	4630      	mov	r0, r6
 80153fe:	2300      	movs	r3, #0
 8015400:	f7f7 fe90 	bl	800d124 <ucdr_init_buffer_origin_offset>
 8015404:	6861      	ldr	r1, [r4, #4]
 8015406:	4638      	mov	r0, r7
 8015408:	4429      	add	r1, r5
 801540a:	6061      	str	r1, [r4, #4]
 801540c:	b003      	add	sp, #12
 801540e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015410 <uxr_prepare_best_effort_buffer_to_send>:
 8015410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015414:	4604      	mov	r4, r0
 8015416:	461d      	mov	r5, r3
 8015418:	6840      	ldr	r0, [r0, #4]
 801541a:	7b23      	ldrb	r3, [r4, #12]
 801541c:	4298      	cmp	r0, r3
 801541e:	bf8c      	ite	hi
 8015420:	2601      	movhi	r6, #1
 8015422:	2600      	movls	r6, #0
 8015424:	d802      	bhi.n	801542c <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8015426:	4630      	mov	r0, r6
 8015428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801542c:	4688      	mov	r8, r1
 801542e:	89e0      	ldrh	r0, [r4, #14]
 8015430:	2101      	movs	r1, #1
 8015432:	4617      	mov	r7, r2
 8015434:	f000 fb0c 	bl	8015a50 <uxr_seq_num_add>
 8015438:	6823      	ldr	r3, [r4, #0]
 801543a:	81e0      	strh	r0, [r4, #14]
 801543c:	8028      	strh	r0, [r5, #0]
 801543e:	f8c8 3000 	str.w	r3, [r8]
 8015442:	6863      	ldr	r3, [r4, #4]
 8015444:	603b      	str	r3, [r7, #0]
 8015446:	7b23      	ldrb	r3, [r4, #12]
 8015448:	6063      	str	r3, [r4, #4]
 801544a:	4630      	mov	r0, r6
 801544c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015450 <on_full_output_buffer>:
 8015450:	b538      	push	{r3, r4, r5, lr}
 8015452:	6802      	ldr	r2, [r0, #0]
 8015454:	460c      	mov	r4, r1
 8015456:	6809      	ldr	r1, [r1, #0]
 8015458:	8923      	ldrh	r3, [r4, #8]
 801545a:	eba2 0c01 	sub.w	ip, r2, r1
 801545e:	6862      	ldr	r2, [r4, #4]
 8015460:	fbb2 f2f3 	udiv	r2, r2, r3
 8015464:	fbbc fcf2 	udiv	ip, ip, r2
 8015468:	f10c 0c01 	add.w	ip, ip, #1
 801546c:	fa1f fc8c 	uxth.w	ip, ip
 8015470:	fbbc fef3 	udiv	lr, ip, r3
 8015474:	fb03 c31e 	mls	r3, r3, lr, ip
 8015478:	b29b      	uxth	r3, r3
 801547a:	fb02 f303 	mul.w	r3, r2, r3
 801547e:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8015482:	58ca      	ldr	r2, [r1, r3]
 8015484:	4463      	add	r3, ip
 8015486:	eba2 020c 	sub.w	r2, r2, ip
 801548a:	3308      	adds	r3, #8
 801548c:	4605      	mov	r5, r0
 801548e:	4419      	add	r1, r3
 8015490:	3a04      	subs	r2, #4
 8015492:	6903      	ldr	r3, [r0, #16]
 8015494:	f7f7 fe50 	bl	800d138 <ucdr_init_buffer_origin>
 8015498:	4628      	mov	r0, r5
 801549a:	4903      	ldr	r1, [pc, #12]	@ (80154a8 <on_full_output_buffer+0x58>)
 801549c:	4622      	mov	r2, r4
 801549e:	f7f7 fe27 	bl	800d0f0 <ucdr_set_on_full_buffer_callback>
 80154a2:	2000      	movs	r0, #0
 80154a4:	bd38      	pop	{r3, r4, r5, pc}
 80154a6:	bf00      	nop
 80154a8:	08015451 	.word	0x08015451

080154ac <uxr_init_output_reliable_stream>:
 80154ac:	b410      	push	{r4}
 80154ae:	f89d c004 	ldrb.w	ip, [sp, #4]
 80154b2:	8103      	strh	r3, [r0, #8]
 80154b4:	e9c0 1200 	strd	r1, r2, [r0]
 80154b8:	f880 c00c 	strb.w	ip, [r0, #12]
 80154bc:	b1d3      	cbz	r3, 80154f4 <uxr_init_output_reliable_stream+0x48>
 80154be:	f8c1 c000 	str.w	ip, [r1]
 80154c2:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80154c6:	f1bc 0f01 	cmp.w	ip, #1
 80154ca:	d913      	bls.n	80154f4 <uxr_init_output_reliable_stream+0x48>
 80154cc:	2301      	movs	r3, #1
 80154ce:	fbb3 f1fc 	udiv	r1, r3, ip
 80154d2:	fb0c 3111 	mls	r1, ip, r1, r3
 80154d6:	b289      	uxth	r1, r1
 80154d8:	6842      	ldr	r2, [r0, #4]
 80154da:	6804      	ldr	r4, [r0, #0]
 80154dc:	fbb2 f2fc 	udiv	r2, r2, ip
 80154e0:	fb01 f202 	mul.w	r2, r1, r2
 80154e4:	7b01      	ldrb	r1, [r0, #12]
 80154e6:	50a1      	str	r1, [r4, r2]
 80154e8:	3301      	adds	r3, #1
 80154ea:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80154ee:	b29b      	uxth	r3, r3
 80154f0:	459c      	cmp	ip, r3
 80154f2:	d8ec      	bhi.n	80154ce <uxr_init_output_reliable_stream+0x22>
 80154f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80154f8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80154fc:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8015500:	4905      	ldr	r1, [pc, #20]	@ (8015518 <uxr_init_output_reliable_stream+0x6c>)
 8015502:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015506:	f8c0 100e 	str.w	r1, [r0, #14]
 801550a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801550e:	2300      	movs	r3, #0
 8015510:	8242      	strh	r2, [r0, #18]
 8015512:	8403      	strh	r3, [r0, #32]
 8015514:	4770      	bx	lr
 8015516:	bf00      	nop
 8015518:	ffff0000 	.word	0xffff0000

0801551c <uxr_reset_output_reliable_stream>:
 801551c:	8901      	ldrh	r1, [r0, #8]
 801551e:	b1b1      	cbz	r1, 801554e <uxr_reset_output_reliable_stream+0x32>
 8015520:	f04f 0c00 	mov.w	ip, #0
 8015524:	4663      	mov	r3, ip
 8015526:	fbb3 f2f1 	udiv	r2, r3, r1
 801552a:	fb01 3312 	mls	r3, r1, r2, r3
 801552e:	b29b      	uxth	r3, r3
 8015530:	6842      	ldr	r2, [r0, #4]
 8015532:	fbb2 f2f1 	udiv	r2, r2, r1
 8015536:	6801      	ldr	r1, [r0, #0]
 8015538:	fb02 f303 	mul.w	r3, r2, r3
 801553c:	7b02      	ldrb	r2, [r0, #12]
 801553e:	50ca      	str	r2, [r1, r3]
 8015540:	f10c 0c01 	add.w	ip, ip, #1
 8015544:	8901      	ldrh	r1, [r0, #8]
 8015546:	fa1f f38c 	uxth.w	r3, ip
 801554a:	4299      	cmp	r1, r3
 801554c:	d8eb      	bhi.n	8015526 <uxr_reset_output_reliable_stream+0xa>
 801554e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8015552:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8015556:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801555a:	4904      	ldr	r1, [pc, #16]	@ (801556c <uxr_reset_output_reliable_stream+0x50>)
 801555c:	f8c0 100e 	str.w	r1, [r0, #14]
 8015560:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015564:	2300      	movs	r3, #0
 8015566:	8242      	strh	r2, [r0, #18]
 8015568:	8403      	strh	r3, [r0, #32]
 801556a:	4770      	bx	lr
 801556c:	ffff0000 	.word	0xffff0000

08015570 <uxr_prepare_reliable_buffer_to_write>:
 8015570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015574:	4604      	mov	r4, r0
 8015576:	b091      	sub	sp, #68	@ 0x44
 8015578:	8900      	ldrh	r0, [r0, #8]
 801557a:	89e6      	ldrh	r6, [r4, #14]
 801557c:	6823      	ldr	r3, [r4, #0]
 801557e:	9204      	str	r2, [sp, #16]
 8015580:	fbb6 f2f0 	udiv	r2, r6, r0
 8015584:	fb00 6212 	mls	r2, r0, r2, r6
 8015588:	b292      	uxth	r2, r2
 801558a:	6865      	ldr	r5, [r4, #4]
 801558c:	fbb5 f5f0 	udiv	r5, r5, r0
 8015590:	fb05 3202 	mla	r2, r5, r2, r3
 8015594:	3204      	adds	r2, #4
 8015596:	f852 8c04 	ldr.w	r8, [r2, #-4]
 801559a:	f894 900c 	ldrb.w	r9, [r4, #12]
 801559e:	9203      	str	r2, [sp, #12]
 80155a0:	468b      	mov	fp, r1
 80155a2:	1f2f      	subs	r7, r5, #4
 80155a4:	2800      	cmp	r0, #0
 80155a6:	f000 814c 	beq.w	8015842 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 80155aa:	f04f 0c00 	mov.w	ip, #0
 80155ae:	46e2      	mov	sl, ip
 80155b0:	4661      	mov	r1, ip
 80155b2:	fbb1 f2f0 	udiv	r2, r1, r0
 80155b6:	fb00 1212 	mls	r2, r0, r2, r1
 80155ba:	b292      	uxth	r2, r2
 80155bc:	fb05 f202 	mul.w	r2, r5, r2
 80155c0:	f10c 0c01 	add.w	ip, ip, #1
 80155c4:	589a      	ldr	r2, [r3, r2]
 80155c6:	454a      	cmp	r2, r9
 80155c8:	bf08      	it	eq
 80155ca:	f10a 0a01 	addeq.w	sl, sl, #1
 80155ce:	fa1f f18c 	uxth.w	r1, ip
 80155d2:	bf08      	it	eq
 80155d4:	fa1f fa8a 	uxtheq.w	sl, sl
 80155d8:	4281      	cmp	r1, r0
 80155da:	d3ea      	bcc.n	80155b2 <uxr_prepare_reliable_buffer_to_write+0x42>
 80155dc:	4640      	mov	r0, r8
 80155de:	2104      	movs	r1, #4
 80155e0:	f8cd a014 	str.w	sl, [sp, #20]
 80155e4:	f7f7 fdb4 	bl	800d150 <ucdr_alignment>
 80155e8:	4480      	add	r8, r0
 80155ea:	eb08 020b 	add.w	r2, r8, fp
 80155ee:	42ba      	cmp	r2, r7
 80155f0:	f240 80cd 	bls.w	801578e <uxr_prepare_reliable_buffer_to_write+0x21e>
 80155f4:	7b22      	ldrb	r2, [r4, #12]
 80155f6:	445a      	add	r2, fp
 80155f8:	42ba      	cmp	r2, r7
 80155fa:	f240 80b5 	bls.w	8015768 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 80155fe:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 8015602:	33fc      	adds	r3, #252	@ 0xfc
 8015604:	b2ba      	uxth	r2, r7
 8015606:	4413      	add	r3, r2
 8015608:	b29b      	uxth	r3, r3
 801560a:	fb0a f903 	mul.w	r9, sl, r3
 801560e:	45d9      	cmp	r9, fp
 8015610:	9305      	str	r3, [sp, #20]
 8015612:	9306      	str	r3, [sp, #24]
 8015614:	f0c0 80b7 	bcc.w	8015786 <uxr_prepare_reliable_buffer_to_write+0x216>
 8015618:	f108 0304 	add.w	r3, r8, #4
 801561c:	42bb      	cmp	r3, r7
 801561e:	f080 80db 	bcs.w	80157d8 <uxr_prepare_reliable_buffer_to_write+0x268>
 8015622:	f1a2 0904 	sub.w	r9, r2, #4
 8015626:	eba9 0908 	sub.w	r9, r9, r8
 801562a:	9b05      	ldr	r3, [sp, #20]
 801562c:	fa1f f989 	uxth.w	r9, r9
 8015630:	ebab 0b09 	sub.w	fp, fp, r9
 8015634:	fbbb f2f3 	udiv	r2, fp, r3
 8015638:	fb03 b312 	mls	r3, r3, r2, fp
 801563c:	2b00      	cmp	r3, #0
 801563e:	f000 80c8 	beq.w	80157d2 <uxr_prepare_reliable_buffer_to_write+0x262>
 8015642:	3201      	adds	r2, #1
 8015644:	b292      	uxth	r2, r2
 8015646:	9306      	str	r3, [sp, #24]
 8015648:	4552      	cmp	r2, sl
 801564a:	f200 809c 	bhi.w	8015786 <uxr_prepare_reliable_buffer_to_write+0x216>
 801564e:	f10d 0b20 	add.w	fp, sp, #32
 8015652:	2a00      	cmp	r2, #0
 8015654:	d042      	beq.n	80156dc <uxr_prepare_reliable_buffer_to_write+0x16c>
 8015656:	f8cd 801c 	str.w	r8, [sp, #28]
 801565a:	f04f 0a00 	mov.w	sl, #0
 801565e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8015662:	9505      	str	r5, [sp, #20]
 8015664:	f10d 0b20 	add.w	fp, sp, #32
 8015668:	4615      	mov	r5, r2
 801566a:	e000      	b.n	801566e <uxr_prepare_reliable_buffer_to_write+0xfe>
 801566c:	46c1      	mov	r9, r8
 801566e:	8920      	ldrh	r0, [r4, #8]
 8015670:	fbb6 f2f0 	udiv	r2, r6, r0
 8015674:	fb00 6112 	mls	r1, r0, r2, r6
 8015678:	b28a      	uxth	r2, r1
 801567a:	6863      	ldr	r3, [r4, #4]
 801567c:	fbb3 f1f0 	udiv	r1, r3, r0
 8015680:	6823      	ldr	r3, [r4, #0]
 8015682:	fb02 f101 	mul.w	r1, r2, r1
 8015686:	3104      	adds	r1, #4
 8015688:	4419      	add	r1, r3
 801568a:	4658      	mov	r0, fp
 801568c:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8015690:	9200      	str	r2, [sp, #0]
 8015692:	2300      	movs	r3, #0
 8015694:	463a      	mov	r2, r7
 8015696:	f7f7 fd45 	bl	800d124 <ucdr_init_buffer_origin_offset>
 801569a:	464a      	mov	r2, r9
 801569c:	2300      	movs	r3, #0
 801569e:	210d      	movs	r1, #13
 80156a0:	4658      	mov	r0, fp
 80156a2:	f7f9 fb45 	bl	800ed30 <uxr_buffer_submessage_header>
 80156a6:	8921      	ldrh	r1, [r4, #8]
 80156a8:	fbb6 f2f1 	udiv	r2, r6, r1
 80156ac:	fb01 6212 	mls	r2, r1, r2, r6
 80156b0:	b292      	uxth	r2, r2
 80156b2:	6863      	ldr	r3, [r4, #4]
 80156b4:	fbb3 f3f1 	udiv	r3, r3, r1
 80156b8:	fb02 f303 	mul.w	r3, r2, r3
 80156bc:	6822      	ldr	r2, [r4, #0]
 80156be:	4630      	mov	r0, r6
 80156c0:	50d7      	str	r7, [r2, r3]
 80156c2:	2101      	movs	r1, #1
 80156c4:	f000 f9c4 	bl	8015a50 <uxr_seq_num_add>
 80156c8:	f10a 0a01 	add.w	sl, sl, #1
 80156cc:	fa1f f38a 	uxth.w	r3, sl
 80156d0:	429d      	cmp	r5, r3
 80156d2:	4606      	mov	r6, r0
 80156d4:	d8ca      	bhi.n	801566c <uxr_prepare_reliable_buffer_to_write+0xfc>
 80156d6:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80156da:	9d05      	ldr	r5, [sp, #20]
 80156dc:	8920      	ldrh	r0, [r4, #8]
 80156de:	fbb6 f3f0 	udiv	r3, r6, r0
 80156e2:	fb00 6313 	mls	r3, r0, r3, r6
 80156e6:	b299      	uxth	r1, r3
 80156e8:	6863      	ldr	r3, [r4, #4]
 80156ea:	fbb3 f3f0 	udiv	r3, r3, r0
 80156ee:	fb01 f303 	mul.w	r3, r1, r3
 80156f2:	6821      	ldr	r1, [r4, #0]
 80156f4:	3304      	adds	r3, #4
 80156f6:	4419      	add	r1, r3
 80156f8:	463a      	mov	r2, r7
 80156fa:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80156fe:	9000      	str	r0, [sp, #0]
 8015700:	2300      	movs	r3, #0
 8015702:	4658      	mov	r0, fp
 8015704:	f7f7 fd0e 	bl	800d124 <ucdr_init_buffer_origin_offset>
 8015708:	f8dd 9018 	ldr.w	r9, [sp, #24]
 801570c:	4658      	mov	r0, fp
 801570e:	fa1f f289 	uxth.w	r2, r9
 8015712:	2302      	movs	r3, #2
 8015714:	210d      	movs	r1, #13
 8015716:	f7f9 fb0b 	bl	800ed30 <uxr_buffer_submessage_header>
 801571a:	9b03      	ldr	r3, [sp, #12]
 801571c:	8927      	ldrh	r7, [r4, #8]
 801571e:	7b20      	ldrb	r0, [r4, #12]
 8015720:	f108 0104 	add.w	r1, r8, #4
 8015724:	440b      	add	r3, r1
 8015726:	4619      	mov	r1, r3
 8015728:	fbb6 f3f7 	udiv	r3, r6, r7
 801572c:	fb07 6313 	mls	r3, r7, r3, r6
 8015730:	f1a5 0208 	sub.w	r2, r5, #8
 8015734:	b29d      	uxth	r5, r3
 8015736:	3004      	adds	r0, #4
 8015738:	6863      	ldr	r3, [r4, #4]
 801573a:	fbb3 f3f7 	udiv	r3, r3, r7
 801573e:	fb05 f303 	mul.w	r3, r5, r3
 8015742:	6825      	ldr	r5, [r4, #0]
 8015744:	4448      	add	r0, r9
 8015746:	50e8      	str	r0, [r5, r3]
 8015748:	9d04      	ldr	r5, [sp, #16]
 801574a:	eba2 0208 	sub.w	r2, r2, r8
 801574e:	4628      	mov	r0, r5
 8015750:	f7f7 fcfa 	bl	800d148 <ucdr_init_buffer>
 8015754:	4628      	mov	r0, r5
 8015756:	493c      	ldr	r1, [pc, #240]	@ (8015848 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 8015758:	4622      	mov	r2, r4
 801575a:	f7f7 fcc9 	bl	800d0f0 <ucdr_set_on_full_buffer_callback>
 801575e:	2001      	movs	r0, #1
 8015760:	81e6      	strh	r6, [r4, #14]
 8015762:	b011      	add	sp, #68	@ 0x44
 8015764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015768:	2101      	movs	r1, #1
 801576a:	89e0      	ldrh	r0, [r4, #14]
 801576c:	f000 f970 	bl	8015a50 <uxr_seq_num_add>
 8015770:	8921      	ldrh	r1, [r4, #8]
 8015772:	4605      	mov	r5, r0
 8015774:	8a60      	ldrh	r0, [r4, #18]
 8015776:	f000 f96b 	bl	8015a50 <uxr_seq_num_add>
 801577a:	4601      	mov	r1, r0
 801577c:	4628      	mov	r0, r5
 801577e:	f000 f96f 	bl	8015a60 <uxr_seq_num_cmp>
 8015782:	2800      	cmp	r0, #0
 8015784:	dd42      	ble.n	801580c <uxr_prepare_reliable_buffer_to_write+0x29c>
 8015786:	2000      	movs	r0, #0
 8015788:	b011      	add	sp, #68	@ 0x44
 801578a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801578e:	8921      	ldrh	r1, [r4, #8]
 8015790:	8a60      	ldrh	r0, [r4, #18]
 8015792:	9205      	str	r2, [sp, #20]
 8015794:	f000 f95c 	bl	8015a50 <uxr_seq_num_add>
 8015798:	4601      	mov	r1, r0
 801579a:	4630      	mov	r0, r6
 801579c:	f000 f960 	bl	8015a60 <uxr_seq_num_cmp>
 80157a0:	2800      	cmp	r0, #0
 80157a2:	9a05      	ldr	r2, [sp, #20]
 80157a4:	dcef      	bgt.n	8015786 <uxr_prepare_reliable_buffer_to_write+0x216>
 80157a6:	8927      	ldrh	r7, [r4, #8]
 80157a8:	fbb6 f3f7 	udiv	r3, r6, r7
 80157ac:	fb07 6313 	mls	r3, r7, r3, r6
 80157b0:	b29d      	uxth	r5, r3
 80157b2:	6863      	ldr	r3, [r4, #4]
 80157b4:	6824      	ldr	r4, [r4, #0]
 80157b6:	fbb3 f3f7 	udiv	r3, r3, r7
 80157ba:	fb05 f303 	mul.w	r3, r5, r3
 80157be:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 80157c2:	50e2      	str	r2, [r4, r3]
 80157c4:	2300      	movs	r3, #0
 80157c6:	f8cd 8000 	str.w	r8, [sp]
 80157ca:	f7f7 fcab 	bl	800d124 <ucdr_init_buffer_origin_offset>
 80157ce:	2001      	movs	r0, #1
 80157d0:	e7da      	b.n	8015788 <uxr_prepare_reliable_buffer_to_write+0x218>
 80157d2:	b293      	uxth	r3, r2
 80157d4:	461a      	mov	r2, r3
 80157d6:	e737      	b.n	8015648 <uxr_prepare_reliable_buffer_to_write+0xd8>
 80157d8:	4630      	mov	r0, r6
 80157da:	2101      	movs	r1, #1
 80157dc:	9207      	str	r2, [sp, #28]
 80157de:	f000 f937 	bl	8015a50 <uxr_seq_num_add>
 80157e2:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80157e6:	fbb0 f1fc 	udiv	r1, r0, ip
 80157ea:	fb0c 0111 	mls	r1, ip, r1, r0
 80157ee:	4606      	mov	r6, r0
 80157f0:	b288      	uxth	r0, r1
 80157f2:	6863      	ldr	r3, [r4, #4]
 80157f4:	fbb3 f1fc 	udiv	r1, r3, ip
 80157f8:	6823      	ldr	r3, [r4, #0]
 80157fa:	9a07      	ldr	r2, [sp, #28]
 80157fc:	fb00 f101 	mul.w	r1, r0, r1
 8015800:	3104      	adds	r1, #4
 8015802:	440b      	add	r3, r1
 8015804:	9303      	str	r3, [sp, #12]
 8015806:	f853 8c04 	ldr.w	r8, [r3, #-4]
 801580a:	e70a      	b.n	8015622 <uxr_prepare_reliable_buffer_to_write+0xb2>
 801580c:	8921      	ldrh	r1, [r4, #8]
 801580e:	fbb5 f3f1 	udiv	r3, r5, r1
 8015812:	fb01 5313 	mls	r3, r1, r3, r5
 8015816:	b29a      	uxth	r2, r3
 8015818:	6863      	ldr	r3, [r4, #4]
 801581a:	fbb3 f3f1 	udiv	r3, r3, r1
 801581e:	6821      	ldr	r1, [r4, #0]
 8015820:	9804      	ldr	r0, [sp, #16]
 8015822:	fb02 f303 	mul.w	r3, r2, r3
 8015826:	3304      	adds	r3, #4
 8015828:	7b22      	ldrb	r2, [r4, #12]
 801582a:	4419      	add	r1, r3
 801582c:	445a      	add	r2, fp
 801582e:	f841 2c04 	str.w	r2, [r1, #-4]
 8015832:	7b23      	ldrb	r3, [r4, #12]
 8015834:	9300      	str	r3, [sp, #0]
 8015836:	2300      	movs	r3, #0
 8015838:	f7f7 fc74 	bl	800d124 <ucdr_init_buffer_origin_offset>
 801583c:	81e5      	strh	r5, [r4, #14]
 801583e:	2001      	movs	r0, #1
 8015840:	e7a2      	b.n	8015788 <uxr_prepare_reliable_buffer_to_write+0x218>
 8015842:	4682      	mov	sl, r0
 8015844:	e6ca      	b.n	80155dc <uxr_prepare_reliable_buffer_to_write+0x6c>
 8015846:	bf00      	nop
 8015848:	08015451 	.word	0x08015451

0801584c <uxr_prepare_next_reliable_buffer_to_send>:
 801584c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801584e:	4604      	mov	r4, r0
 8015850:	460f      	mov	r7, r1
 8015852:	8a00      	ldrh	r0, [r0, #16]
 8015854:	2101      	movs	r1, #1
 8015856:	4616      	mov	r6, r2
 8015858:	461d      	mov	r5, r3
 801585a:	f000 f8f9 	bl	8015a50 <uxr_seq_num_add>
 801585e:	8028      	strh	r0, [r5, #0]
 8015860:	8922      	ldrh	r2, [r4, #8]
 8015862:	fbb0 f3f2 	udiv	r3, r0, r2
 8015866:	fb02 0c13 	mls	ip, r2, r3, r0
 801586a:	fa1f fc8c 	uxth.w	ip, ip
 801586e:	6863      	ldr	r3, [r4, #4]
 8015870:	fbb3 f3f2 	udiv	r3, r3, r2
 8015874:	fb0c fc03 	mul.w	ip, ip, r3
 8015878:	6823      	ldr	r3, [r4, #0]
 801587a:	89e1      	ldrh	r1, [r4, #14]
 801587c:	f10c 0c04 	add.w	ip, ip, #4
 8015880:	4463      	add	r3, ip
 8015882:	603b      	str	r3, [r7, #0]
 8015884:	6823      	ldr	r3, [r4, #0]
 8015886:	449c      	add	ip, r3
 8015888:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 801588c:	6033      	str	r3, [r6, #0]
 801588e:	f000 f8e7 	bl	8015a60 <uxr_seq_num_cmp>
 8015892:	2800      	cmp	r0, #0
 8015894:	dd01      	ble.n	801589a <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8015896:	2000      	movs	r0, #0
 8015898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801589a:	7b23      	ldrb	r3, [r4, #12]
 801589c:	6832      	ldr	r2, [r6, #0]
 801589e:	429a      	cmp	r2, r3
 80158a0:	d9f9      	bls.n	8015896 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80158a2:	8a61      	ldrh	r1, [r4, #18]
 80158a4:	8a20      	ldrh	r0, [r4, #16]
 80158a6:	f000 f8d7 	bl	8015a58 <uxr_seq_num_sub>
 80158aa:	8923      	ldrh	r3, [r4, #8]
 80158ac:	4283      	cmp	r3, r0
 80158ae:	d0f2      	beq.n	8015896 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80158b0:	8828      	ldrh	r0, [r5, #0]
 80158b2:	89e3      	ldrh	r3, [r4, #14]
 80158b4:	8220      	strh	r0, [r4, #16]
 80158b6:	4298      	cmp	r0, r3
 80158b8:	d001      	beq.n	80158be <uxr_prepare_next_reliable_buffer_to_send+0x72>
 80158ba:	2001      	movs	r0, #1
 80158bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80158be:	2101      	movs	r1, #1
 80158c0:	f000 f8c6 	bl	8015a50 <uxr_seq_num_add>
 80158c4:	81e0      	strh	r0, [r4, #14]
 80158c6:	2001      	movs	r0, #1
 80158c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80158ca:	bf00      	nop

080158cc <uxr_update_output_stream_heartbeat_timestamp>:
 80158cc:	b570      	push	{r4, r5, r6, lr}
 80158ce:	8a01      	ldrh	r1, [r0, #16]
 80158d0:	4604      	mov	r4, r0
 80158d2:	8a40      	ldrh	r0, [r0, #18]
 80158d4:	4615      	mov	r5, r2
 80158d6:	461e      	mov	r6, r3
 80158d8:	f000 f8c2 	bl	8015a60 <uxr_seq_num_cmp>
 80158dc:	2800      	cmp	r0, #0
 80158de:	db07      	blt.n	80158f0 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 80158e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80158e4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80158e8:	e9c4 2306 	strd	r2, r3, [r4, #24]
 80158ec:	2000      	movs	r0, #0
 80158ee:	bd70      	pop	{r4, r5, r6, pc}
 80158f0:	f894 0020 	ldrb.w	r0, [r4, #32]
 80158f4:	b940      	cbnz	r0, 8015908 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 80158f6:	2301      	movs	r3, #1
 80158f8:	f884 3020 	strb.w	r3, [r4, #32]
 80158fc:	3564      	adds	r5, #100	@ 0x64
 80158fe:	f146 0600 	adc.w	r6, r6, #0
 8015902:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8015906:	bd70      	pop	{r4, r5, r6, pc}
 8015908:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 801590c:	4295      	cmp	r5, r2
 801590e:	eb76 0303 	sbcs.w	r3, r6, r3
 8015912:	bfa5      	ittet	ge
 8015914:	3001      	addge	r0, #1
 8015916:	f884 0020 	strbge.w	r0, [r4, #32]
 801591a:	2000      	movlt	r0, #0
 801591c:	2001      	movge	r0, #1
 801591e:	e7ed      	b.n	80158fc <uxr_update_output_stream_heartbeat_timestamp+0x30>

08015920 <uxr_begin_output_nack_buffer_it>:
 8015920:	8a40      	ldrh	r0, [r0, #18]
 8015922:	4770      	bx	lr

08015924 <uxr_next_reliable_nack_buffer_to_send>:
 8015924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015928:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 801592c:	b082      	sub	sp, #8
 801592e:	f1b8 0f00 	cmp.w	r8, #0
 8015932:	d011      	beq.n	8015958 <uxr_next_reliable_nack_buffer_to_send+0x34>
 8015934:	4604      	mov	r4, r0
 8015936:	8818      	ldrh	r0, [r3, #0]
 8015938:	460e      	mov	r6, r1
 801593a:	4617      	mov	r7, r2
 801593c:	461d      	mov	r5, r3
 801593e:	2101      	movs	r1, #1
 8015940:	f000 f886 	bl	8015a50 <uxr_seq_num_add>
 8015944:	8028      	strh	r0, [r5, #0]
 8015946:	8a21      	ldrh	r1, [r4, #16]
 8015948:	f000 f88a 	bl	8015a60 <uxr_seq_num_cmp>
 801594c:	2800      	cmp	r0, #0
 801594e:	dd07      	ble.n	8015960 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 8015950:	f04f 0800 	mov.w	r8, #0
 8015954:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 8015958:	4640      	mov	r0, r8
 801595a:	b002      	add	sp, #8
 801595c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015960:	8921      	ldrh	r1, [r4, #8]
 8015962:	8828      	ldrh	r0, [r5, #0]
 8015964:	6823      	ldr	r3, [r4, #0]
 8015966:	fbb0 f2f1 	udiv	r2, r0, r1
 801596a:	fb01 0c12 	mls	ip, r1, r2, r0
 801596e:	fa1f f28c 	uxth.w	r2, ip
 8015972:	9301      	str	r3, [sp, #4]
 8015974:	6863      	ldr	r3, [r4, #4]
 8015976:	fbb3 fcf1 	udiv	ip, r3, r1
 801597a:	9b01      	ldr	r3, [sp, #4]
 801597c:	fb02 fc0c 	mul.w	ip, r2, ip
 8015980:	f10c 0c04 	add.w	ip, ip, #4
 8015984:	4463      	add	r3, ip
 8015986:	6033      	str	r3, [r6, #0]
 8015988:	6823      	ldr	r3, [r4, #0]
 801598a:	4463      	add	r3, ip
 801598c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8015990:	603b      	str	r3, [r7, #0]
 8015992:	7b22      	ldrb	r2, [r4, #12]
 8015994:	429a      	cmp	r2, r3
 8015996:	d0d2      	beq.n	801593e <uxr_next_reliable_nack_buffer_to_send+0x1a>
 8015998:	4640      	mov	r0, r8
 801599a:	b002      	add	sp, #8
 801599c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080159a0 <uxr_process_acknack>:
 80159a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80159a2:	4604      	mov	r4, r0
 80159a4:	460e      	mov	r6, r1
 80159a6:	4610      	mov	r0, r2
 80159a8:	2101      	movs	r1, #1
 80159aa:	f000 f855 	bl	8015a58 <uxr_seq_num_sub>
 80159ae:	8a61      	ldrh	r1, [r4, #18]
 80159b0:	f000 f852 	bl	8015a58 <uxr_seq_num_sub>
 80159b4:	b1c0      	cbz	r0, 80159e8 <uxr_process_acknack+0x48>
 80159b6:	4605      	mov	r5, r0
 80159b8:	2700      	movs	r7, #0
 80159ba:	2101      	movs	r1, #1
 80159bc:	8a60      	ldrh	r0, [r4, #18]
 80159be:	f000 f847 	bl	8015a50 <uxr_seq_num_add>
 80159c2:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80159c6:	fbb0 f1fc 	udiv	r1, r0, ip
 80159ca:	e9d4 2300 	ldrd	r2, r3, [r4]
 80159ce:	fb0c 0111 	mls	r1, ip, r1, r0
 80159d2:	b289      	uxth	r1, r1
 80159d4:	3701      	adds	r7, #1
 80159d6:	fbb3 f3fc 	udiv	r3, r3, ip
 80159da:	fb01 f303 	mul.w	r3, r1, r3
 80159de:	42bd      	cmp	r5, r7
 80159e0:	7b21      	ldrb	r1, [r4, #12]
 80159e2:	8260      	strh	r0, [r4, #18]
 80159e4:	50d1      	str	r1, [r2, r3]
 80159e6:	d1e8      	bne.n	80159ba <uxr_process_acknack+0x1a>
 80159e8:	3e00      	subs	r6, #0
 80159ea:	f04f 0300 	mov.w	r3, #0
 80159ee:	bf18      	it	ne
 80159f0:	2601      	movne	r6, #1
 80159f2:	f884 3020 	strb.w	r3, [r4, #32]
 80159f6:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 80159fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080159fc <uxr_is_output_up_to_date>:
 80159fc:	8a01      	ldrh	r1, [r0, #16]
 80159fe:	8a40      	ldrh	r0, [r0, #18]
 8015a00:	b508      	push	{r3, lr}
 8015a02:	f000 f82d 	bl	8015a60 <uxr_seq_num_cmp>
 8015a06:	fab0 f080 	clz	r0, r0
 8015a0a:	0940      	lsrs	r0, r0, #5
 8015a0c:	bd08      	pop	{r3, pc}
 8015a0e:	bf00      	nop

08015a10 <get_available_free_slots>:
 8015a10:	8902      	ldrh	r2, [r0, #8]
 8015a12:	b1da      	cbz	r2, 8015a4c <get_available_free_slots+0x3c>
 8015a14:	b530      	push	{r4, r5, lr}
 8015a16:	2100      	movs	r1, #0
 8015a18:	6843      	ldr	r3, [r0, #4]
 8015a1a:	6805      	ldr	r5, [r0, #0]
 8015a1c:	7b04      	ldrb	r4, [r0, #12]
 8015a1e:	fbb3 fef2 	udiv	lr, r3, r2
 8015a22:	4608      	mov	r0, r1
 8015a24:	460b      	mov	r3, r1
 8015a26:	fbb3 fcf2 	udiv	ip, r3, r2
 8015a2a:	fb02 331c 	mls	r3, r2, ip, r3
 8015a2e:	b29b      	uxth	r3, r3
 8015a30:	fb0e f303 	mul.w	r3, lr, r3
 8015a34:	3101      	adds	r1, #1
 8015a36:	f855 c003 	ldr.w	ip, [r5, r3]
 8015a3a:	4564      	cmp	r4, ip
 8015a3c:	bf08      	it	eq
 8015a3e:	3001      	addeq	r0, #1
 8015a40:	b28b      	uxth	r3, r1
 8015a42:	bf08      	it	eq
 8015a44:	b280      	uxtheq	r0, r0
 8015a46:	4293      	cmp	r3, r2
 8015a48:	d3ed      	bcc.n	8015a26 <get_available_free_slots+0x16>
 8015a4a:	bd30      	pop	{r4, r5, pc}
 8015a4c:	4610      	mov	r0, r2
 8015a4e:	4770      	bx	lr

08015a50 <uxr_seq_num_add>:
 8015a50:	4408      	add	r0, r1
 8015a52:	b280      	uxth	r0, r0
 8015a54:	4770      	bx	lr
 8015a56:	bf00      	nop

08015a58 <uxr_seq_num_sub>:
 8015a58:	1a40      	subs	r0, r0, r1
 8015a5a:	b280      	uxth	r0, r0
 8015a5c:	4770      	bx	lr
 8015a5e:	bf00      	nop

08015a60 <uxr_seq_num_cmp>:
 8015a60:	4288      	cmp	r0, r1
 8015a62:	d011      	beq.n	8015a88 <uxr_seq_num_cmp+0x28>
 8015a64:	d309      	bcc.n	8015a7a <uxr_seq_num_cmp+0x1a>
 8015a66:	4288      	cmp	r0, r1
 8015a68:	d910      	bls.n	8015a8c <uxr_seq_num_cmp+0x2c>
 8015a6a:	1a40      	subs	r0, r0, r1
 8015a6c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8015a70:	bfd4      	ite	le
 8015a72:	2001      	movle	r0, #1
 8015a74:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 8015a78:	4770      	bx	lr
 8015a7a:	1a0b      	subs	r3, r1, r0
 8015a7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8015a80:	daf1      	bge.n	8015a66 <uxr_seq_num_cmp+0x6>
 8015a82:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015a86:	4770      	bx	lr
 8015a88:	2000      	movs	r0, #0
 8015a8a:	4770      	bx	lr
 8015a8c:	2001      	movs	r0, #1
 8015a8e:	4770      	bx	lr

08015a90 <uxr_init_framing_io>:
 8015a90:	2300      	movs	r3, #0
 8015a92:	7041      	strb	r1, [r0, #1]
 8015a94:	7003      	strb	r3, [r0, #0]
 8015a96:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8015a98:	4770      	bx	lr
 8015a9a:	bf00      	nop

08015a9c <uxr_write_framed_msg>:
 8015a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015aa0:	4617      	mov	r7, r2
 8015aa2:	7842      	ldrb	r2, [r0, #1]
 8015aa4:	b083      	sub	sp, #12
 8015aa6:	460e      	mov	r6, r1
 8015aa8:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 8015aac:	469a      	mov	sl, r3
 8015aae:	2901      	cmp	r1, #1
 8015ab0:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 8015ab4:	4604      	mov	r4, r0
 8015ab6:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8015aba:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 8015abe:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 8015ac2:	f240 8137 	bls.w	8015d34 <uxr_write_framed_msg+0x298>
 8015ac6:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8015aca:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 8015ace:	2901      	cmp	r1, #1
 8015ad0:	f04f 0202 	mov.w	r2, #2
 8015ad4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015ad8:	f240 808f 	bls.w	8015bfa <uxr_write_framed_msg+0x15e>
 8015adc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015ade:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 8015ae2:	b2dd      	uxtb	r5, r3
 8015ae4:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8015ae8:	2203      	movs	r2, #3
 8015aea:	2901      	cmp	r1, #1
 8015aec:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015af0:	f240 809a 	bls.w	8015c28 <uxr_write_framed_msg+0x18c>
 8015af4:	18a1      	adds	r1, r4, r2
 8015af6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015af8:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 8015afc:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8015b00:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8015b04:	3201      	adds	r2, #1
 8015b06:	2801      	cmp	r0, #1
 8015b08:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015b0c:	f240 80a0 	bls.w	8015c50 <uxr_write_framed_msg+0x1b4>
 8015b10:	18a0      	adds	r0, r4, r2
 8015b12:	3201      	adds	r2, #1
 8015b14:	b2d2      	uxtb	r2, r2
 8015b16:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8015b1a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015b1e:	2b00      	cmp	r3, #0
 8015b20:	f000 80a9 	beq.w	8015c76 <uxr_write_framed_msg+0x1da>
 8015b24:	f04f 0900 	mov.w	r9, #0
 8015b28:	46c8      	mov	r8, r9
 8015b2a:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8015b2e:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8015b32:	2901      	cmp	r1, #1
 8015b34:	f240 80c3 	bls.w	8015cbe <uxr_write_framed_msg+0x222>
 8015b38:	2a29      	cmp	r2, #41	@ 0x29
 8015b3a:	f200 809f 	bhi.w	8015c7c <uxr_write_framed_msg+0x1e0>
 8015b3e:	18a1      	adds	r1, r4, r2
 8015b40:	3201      	adds	r2, #1
 8015b42:	b2d2      	uxtb	r2, r2
 8015b44:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 8015b48:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015b4c:	ea89 0303 	eor.w	r3, r9, r3
 8015b50:	498c      	ldr	r1, [pc, #560]	@ (8015d84 <uxr_write_framed_msg+0x2e8>)
 8015b52:	b2db      	uxtb	r3, r3
 8015b54:	f108 0801 	add.w	r8, r8, #1
 8015b58:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8015b5c:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 8015b60:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015b62:	4543      	cmp	r3, r8
 8015b64:	d8e1      	bhi.n	8015b2a <uxr_write_framed_msg+0x8e>
 8015b66:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8015b6a:	fa5f f889 	uxtb.w	r8, r9
 8015b6e:	9301      	str	r3, [sp, #4]
 8015b70:	f04f 0900 	mov.w	r9, #0
 8015b74:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 8015b78:	fa5f f18a 	uxtb.w	r1, sl
 8015b7c:	2901      	cmp	r1, #1
 8015b7e:	d921      	bls.n	8015bc4 <uxr_write_framed_msg+0x128>
 8015b80:	2a29      	cmp	r2, #41	@ 0x29
 8015b82:	f240 80af 	bls.w	8015ce4 <uxr_write_framed_msg+0x248>
 8015b86:	2500      	movs	r5, #0
 8015b88:	e000      	b.n	8015b8c <uxr_write_framed_msg+0xf0>
 8015b8a:	b160      	cbz	r0, 8015ba6 <uxr_write_framed_msg+0x10a>
 8015b8c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8015b90:	1b52      	subs	r2, r2, r5
 8015b92:	465b      	mov	r3, fp
 8015b94:	4421      	add	r1, r4
 8015b96:	4638      	mov	r0, r7
 8015b98:	47b0      	blx	r6
 8015b9a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8015b9e:	4405      	add	r5, r0
 8015ba0:	4295      	cmp	r5, r2
 8015ba2:	d3f2      	bcc.n	8015b8a <uxr_write_framed_msg+0xee>
 8015ba4:	d003      	beq.n	8015bae <uxr_write_framed_msg+0x112>
 8015ba6:	2000      	movs	r0, #0
 8015ba8:	b003      	add	sp, #12
 8015baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015bae:	fa5f f18a 	uxtb.w	r1, sl
 8015bb2:	f04f 0300 	mov.w	r3, #0
 8015bb6:	2901      	cmp	r1, #1
 8015bb8:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8015bbc:	f04f 0200 	mov.w	r2, #0
 8015bc0:	f200 8090 	bhi.w	8015ce4 <uxr_write_framed_msg+0x248>
 8015bc4:	1c51      	adds	r1, r2, #1
 8015bc6:	b2c9      	uxtb	r1, r1
 8015bc8:	2929      	cmp	r1, #41	@ 0x29
 8015bca:	d8dc      	bhi.n	8015b86 <uxr_write_framed_msg+0xea>
 8015bcc:	18a5      	adds	r5, r4, r2
 8015bce:	4421      	add	r1, r4
 8015bd0:	3202      	adds	r2, #2
 8015bd2:	f088 0820 	eor.w	r8, r8, #32
 8015bd6:	4648      	mov	r0, r9
 8015bd8:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 8015bdc:	b2d2      	uxtb	r2, r2
 8015bde:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 8015be2:	f04f 0901 	mov.w	r9, #1
 8015be6:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8015bea:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015bee:	2800      	cmp	r0, #0
 8015bf0:	f040 8085 	bne.w	8015cfe <uxr_write_framed_msg+0x262>
 8015bf4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8015bf8:	e7bc      	b.n	8015b74 <uxr_write_framed_msg+0xd8>
 8015bfa:	4611      	mov	r1, r2
 8015bfc:	f04f 0c03 	mov.w	ip, #3
 8015c00:	2204      	movs	r2, #4
 8015c02:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015c04:	4421      	add	r1, r4
 8015c06:	b2dd      	uxtb	r5, r3
 8015c08:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 8015c0c:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 8015c10:	44a4      	add	ip, r4
 8015c12:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8015c16:	f080 0020 	eor.w	r0, r0, #32
 8015c1a:	2901      	cmp	r1, #1
 8015c1c:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 8015c20:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015c24:	f63f af66 	bhi.w	8015af4 <uxr_write_framed_msg+0x58>
 8015c28:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015c2a:	18a0      	adds	r0, r4, r2
 8015c2c:	f085 0520 	eor.w	r5, r5, #32
 8015c30:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8015c34:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8015c38:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 8015c3c:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 8015c40:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8015c44:	3202      	adds	r2, #2
 8015c46:	2801      	cmp	r0, #1
 8015c48:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015c4c:	f63f af60 	bhi.w	8015b10 <uxr_write_framed_msg+0x74>
 8015c50:	1c50      	adds	r0, r2, #1
 8015c52:	18a5      	adds	r5, r4, r2
 8015c54:	fa54 f080 	uxtab	r0, r4, r0
 8015c58:	3202      	adds	r2, #2
 8015c5a:	f081 0120 	eor.w	r1, r1, #32
 8015c5e:	b2d2      	uxtb	r2, r2
 8015c60:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8015c64:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 8015c68:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8015c6c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015c70:	2b00      	cmp	r3, #0
 8015c72:	f47f af57 	bne.w	8015b24 <uxr_write_framed_msg+0x88>
 8015c76:	9301      	str	r3, [sp, #4]
 8015c78:	4698      	mov	r8, r3
 8015c7a:	e779      	b.n	8015b70 <uxr_write_framed_msg+0xd4>
 8015c7c:	2500      	movs	r5, #0
 8015c7e:	e001      	b.n	8015c84 <uxr_write_framed_msg+0x1e8>
 8015c80:	2800      	cmp	r0, #0
 8015c82:	d090      	beq.n	8015ba6 <uxr_write_framed_msg+0x10a>
 8015c84:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8015c88:	1b52      	subs	r2, r2, r5
 8015c8a:	465b      	mov	r3, fp
 8015c8c:	4421      	add	r1, r4
 8015c8e:	4638      	mov	r0, r7
 8015c90:	47b0      	blx	r6
 8015c92:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8015c96:	4405      	add	r5, r0
 8015c98:	4295      	cmp	r5, r2
 8015c9a:	d3f1      	bcc.n	8015c80 <uxr_write_framed_msg+0x1e4>
 8015c9c:	d183      	bne.n	8015ba6 <uxr_write_framed_msg+0x10a>
 8015c9e:	f04f 0300 	mov.w	r3, #0
 8015ca2:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8015ca6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015ca8:	4543      	cmp	r3, r8
 8015caa:	d964      	bls.n	8015d76 <uxr_write_framed_msg+0x2da>
 8015cac:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8015cb0:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8015cb4:	2901      	cmp	r1, #1
 8015cb6:	f04f 0200 	mov.w	r2, #0
 8015cba:	f63f af3d 	bhi.w	8015b38 <uxr_write_framed_msg+0x9c>
 8015cbe:	1c51      	adds	r1, r2, #1
 8015cc0:	b2c9      	uxtb	r1, r1
 8015cc2:	2929      	cmp	r1, #41	@ 0x29
 8015cc4:	d8da      	bhi.n	8015c7c <uxr_write_framed_msg+0x1e0>
 8015cc6:	18a0      	adds	r0, r4, r2
 8015cc8:	4421      	add	r1, r4
 8015cca:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 8015cce:	3202      	adds	r2, #2
 8015cd0:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 8015cd4:	b2d2      	uxtb	r2, r2
 8015cd6:	f083 0020 	eor.w	r0, r3, #32
 8015cda:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 8015cde:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015ce2:	e733      	b.n	8015b4c <uxr_write_framed_msg+0xb0>
 8015ce4:	18a1      	adds	r1, r4, r2
 8015ce6:	3201      	adds	r2, #1
 8015ce8:	4648      	mov	r0, r9
 8015cea:	b2d2      	uxtb	r2, r2
 8015cec:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8015cf0:	f04f 0901 	mov.w	r9, #1
 8015cf4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015cf8:	2800      	cmp	r0, #0
 8015cfa:	f43f af7b 	beq.w	8015bf4 <uxr_write_framed_msg+0x158>
 8015cfe:	2500      	movs	r5, #0
 8015d00:	e002      	b.n	8015d08 <uxr_write_framed_msg+0x26c>
 8015d02:	2800      	cmp	r0, #0
 8015d04:	f43f af4f 	beq.w	8015ba6 <uxr_write_framed_msg+0x10a>
 8015d08:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8015d0c:	1b52      	subs	r2, r2, r5
 8015d0e:	465b      	mov	r3, fp
 8015d10:	4421      	add	r1, r4
 8015d12:	4638      	mov	r0, r7
 8015d14:	47b0      	blx	r6
 8015d16:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8015d1a:	4405      	add	r5, r0
 8015d1c:	4295      	cmp	r5, r2
 8015d1e:	d3f0      	bcc.n	8015d02 <uxr_write_framed_msg+0x266>
 8015d20:	f47f af41 	bne.w	8015ba6 <uxr_write_framed_msg+0x10a>
 8015d24:	2300      	movs	r3, #0
 8015d26:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8015d2a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015d2c:	b298      	uxth	r0, r3
 8015d2e:	b003      	add	sp, #12
 8015d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d34:	217d      	movs	r1, #125	@ 0x7d
 8015d36:	f082 0220 	eor.w	r2, r2, #32
 8015d3a:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 8015d3e:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8015d42:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 8015d46:	2901      	cmp	r1, #1
 8015d48:	f04f 0203 	mov.w	r2, #3
 8015d4c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015d50:	d804      	bhi.n	8015d5c <uxr_write_framed_msg+0x2c0>
 8015d52:	4611      	mov	r1, r2
 8015d54:	f04f 0c04 	mov.w	ip, #4
 8015d58:	2205      	movs	r2, #5
 8015d5a:	e752      	b.n	8015c02 <uxr_write_framed_msg+0x166>
 8015d5c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015d5e:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 8015d62:	b2dd      	uxtb	r5, r3
 8015d64:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8015d68:	2204      	movs	r2, #4
 8015d6a:	2901      	cmp	r1, #1
 8015d6c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015d70:	f63f aec0 	bhi.w	8015af4 <uxr_write_framed_msg+0x58>
 8015d74:	e758      	b.n	8015c28 <uxr_write_framed_msg+0x18c>
 8015d76:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8015d7a:	fa5f f889 	uxtb.w	r8, r9
 8015d7e:	9301      	str	r3, [sp, #4]
 8015d80:	2200      	movs	r2, #0
 8015d82:	e6f5      	b.n	8015b70 <uxr_write_framed_msg+0xd4>
 8015d84:	0801a8d8 	.word	0x0801a8d8

08015d88 <uxr_framing_read_transport>:
 8015d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d8c:	4604      	mov	r4, r0
 8015d8e:	b083      	sub	sp, #12
 8015d90:	461f      	mov	r7, r3
 8015d92:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 8015d96:	4689      	mov	r9, r1
 8015d98:	4692      	mov	sl, r2
 8015d9a:	f7f9 f80f 	bl	800edbc <uxr_millis>
 8015d9e:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8015da2:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 8015da6:	42b3      	cmp	r3, r6
 8015da8:	4680      	mov	r8, r0
 8015daa:	d061      	beq.n	8015e70 <uxr_framing_read_transport+0xe8>
 8015dac:	d81c      	bhi.n	8015de8 <uxr_framing_read_transport+0x60>
 8015dae:	1e75      	subs	r5, r6, #1
 8015db0:	1aed      	subs	r5, r5, r3
 8015db2:	b2ed      	uxtb	r5, r5
 8015db4:	2600      	movs	r6, #0
 8015db6:	455d      	cmp	r5, fp
 8015db8:	d81f      	bhi.n	8015dfa <uxr_framing_read_transport+0x72>
 8015dba:	19ab      	adds	r3, r5, r6
 8015dbc:	455b      	cmp	r3, fp
 8015dbe:	bf84      	itt	hi
 8015dc0:	ebab 0605 	subhi.w	r6, fp, r5
 8015dc4:	b2f6      	uxtbhi	r6, r6
 8015dc6:	b9ed      	cbnz	r5, 8015e04 <uxr_framing_read_transport+0x7c>
 8015dc8:	f04f 0b00 	mov.w	fp, #0
 8015dcc:	f7f8 fff6 	bl	800edbc <uxr_millis>
 8015dd0:	683b      	ldr	r3, [r7, #0]
 8015dd2:	eba0 0808 	sub.w	r8, r0, r8
 8015dd6:	eba3 0308 	sub.w	r3, r3, r8
 8015dda:	4658      	mov	r0, fp
 8015ddc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015de0:	603b      	str	r3, [r7, #0]
 8015de2:	b003      	add	sp, #12
 8015de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015de8:	2e00      	cmp	r6, #0
 8015dea:	d049      	beq.n	8015e80 <uxr_framing_read_transport+0xf8>
 8015dec:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 8015df0:	b2ed      	uxtb	r5, r5
 8015df2:	3e01      	subs	r6, #1
 8015df4:	455d      	cmp	r5, fp
 8015df6:	b2f6      	uxtb	r6, r6
 8015df8:	d9df      	bls.n	8015dba <uxr_framing_read_transport+0x32>
 8015dfa:	fa5f f58b 	uxtb.w	r5, fp
 8015dfe:	2600      	movs	r6, #0
 8015e00:	2d00      	cmp	r5, #0
 8015e02:	d0e1      	beq.n	8015dc8 <uxr_framing_read_transport+0x40>
 8015e04:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8015e08:	3102      	adds	r1, #2
 8015e0a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015e0c:	9300      	str	r3, [sp, #0]
 8015e0e:	683b      	ldr	r3, [r7, #0]
 8015e10:	4421      	add	r1, r4
 8015e12:	462a      	mov	r2, r5
 8015e14:	4650      	mov	r0, sl
 8015e16:	47c8      	blx	r9
 8015e18:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8015e1c:	4a1a      	ldr	r2, [pc, #104]	@ (8015e88 <uxr_framing_read_transport+0x100>)
 8015e1e:	4403      	add	r3, r0
 8015e20:	0859      	lsrs	r1, r3, #1
 8015e22:	fba2 2101 	umull	r2, r1, r2, r1
 8015e26:	0889      	lsrs	r1, r1, #2
 8015e28:	222a      	movs	r2, #42	@ 0x2a
 8015e2a:	fb02 3111 	mls	r1, r2, r1, r3
 8015e2e:	4683      	mov	fp, r0
 8015e30:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 8015e34:	2800      	cmp	r0, #0
 8015e36:	d0c7      	beq.n	8015dc8 <uxr_framing_read_transport+0x40>
 8015e38:	42a8      	cmp	r0, r5
 8015e3a:	d1c7      	bne.n	8015dcc <uxr_framing_read_transport+0x44>
 8015e3c:	2e00      	cmp	r6, #0
 8015e3e:	d0c5      	beq.n	8015dcc <uxr_framing_read_transport+0x44>
 8015e40:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015e42:	9300      	str	r3, [sp, #0]
 8015e44:	3102      	adds	r1, #2
 8015e46:	4632      	mov	r2, r6
 8015e48:	4421      	add	r1, r4
 8015e4a:	2300      	movs	r3, #0
 8015e4c:	4650      	mov	r0, sl
 8015e4e:	47c8      	blx	r9
 8015e50:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8015e54:	4a0c      	ldr	r2, [pc, #48]	@ (8015e88 <uxr_framing_read_transport+0x100>)
 8015e56:	180b      	adds	r3, r1, r0
 8015e58:	0859      	lsrs	r1, r3, #1
 8015e5a:	fba2 1201 	umull	r1, r2, r2, r1
 8015e5e:	0892      	lsrs	r2, r2, #2
 8015e60:	212a      	movs	r1, #42	@ 0x2a
 8015e62:	fb01 3312 	mls	r3, r1, r2, r3
 8015e66:	eb00 0b05 	add.w	fp, r0, r5
 8015e6a:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8015e6e:	e7ad      	b.n	8015dcc <uxr_framing_read_transport+0x44>
 8015e70:	2600      	movs	r6, #0
 8015e72:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 8015e76:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 8015e78:	d9bf      	bls.n	8015dfa <uxr_framing_read_transport+0x72>
 8015e7a:	2102      	movs	r1, #2
 8015e7c:	2529      	movs	r5, #41	@ 0x29
 8015e7e:	e7c4      	b.n	8015e0a <uxr_framing_read_transport+0x82>
 8015e80:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 8015e84:	b2ed      	uxtb	r5, r5
 8015e86:	e796      	b.n	8015db6 <uxr_framing_read_transport+0x2e>
 8015e88:	30c30c31 	.word	0x30c30c31

08015e8c <uxr_read_framed_msg>:
 8015e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e90:	461e      	mov	r6, r3
 8015e92:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8015e96:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8015e9a:	429d      	cmp	r5, r3
 8015e9c:	b083      	sub	sp, #12
 8015e9e:	4604      	mov	r4, r0
 8015ea0:	4688      	mov	r8, r1
 8015ea2:	4691      	mov	r9, r2
 8015ea4:	f000 8188 	beq.w	80161b8 <uxr_read_framed_msg+0x32c>
 8015ea8:	7823      	ldrb	r3, [r4, #0]
 8015eaa:	4dc1      	ldr	r5, [pc, #772]	@ (80161b0 <uxr_read_framed_msg+0x324>)
 8015eac:	4fc1      	ldr	r7, [pc, #772]	@ (80161b4 <uxr_read_framed_msg+0x328>)
 8015eae:	2b07      	cmp	r3, #7
 8015eb0:	d8fd      	bhi.n	8015eae <uxr_read_framed_msg+0x22>
 8015eb2:	e8df f013 	tbh	[pc, r3, lsl #1]
 8015eb6:	0115      	.short	0x0115
 8015eb8:	00d600f6 	.word	0x00d600f6
 8015ebc:	009000b9 	.word	0x009000b9
 8015ec0:	0030004d 	.word	0x0030004d
 8015ec4:	0008      	.short	0x0008
 8015ec6:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8015eca:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8015ece:	4299      	cmp	r1, r3
 8015ed0:	f000 814a 	beq.w	8016168 <uxr_read_framed_msg+0x2dc>
 8015ed4:	18e2      	adds	r2, r4, r3
 8015ed6:	7892      	ldrb	r2, [r2, #2]
 8015ed8:	2a7d      	cmp	r2, #125	@ 0x7d
 8015eda:	f000 8199 	beq.w	8016210 <uxr_read_framed_msg+0x384>
 8015ede:	3301      	adds	r3, #1
 8015ee0:	0858      	lsrs	r0, r3, #1
 8015ee2:	fba5 1000 	umull	r1, r0, r5, r0
 8015ee6:	0880      	lsrs	r0, r0, #2
 8015ee8:	212a      	movs	r1, #42	@ 0x2a
 8015eea:	fb01 3310 	mls	r3, r1, r0, r3
 8015eee:	2a7e      	cmp	r2, #126	@ 0x7e
 8015ef0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8015ef4:	f000 8252 	beq.w	801639c <uxr_read_framed_msg+0x510>
 8015ef8:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8015efa:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 8015efc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8015f00:	b29b      	uxth	r3, r3
 8015f02:	2200      	movs	r2, #0
 8015f04:	4299      	cmp	r1, r3
 8015f06:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8015f08:	7022      	strb	r2, [r4, #0]
 8015f0a:	f000 8179 	beq.w	8016200 <uxr_read_framed_msg+0x374>
 8015f0e:	2000      	movs	r0, #0
 8015f10:	b003      	add	sp, #12
 8015f12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f16:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8015f1a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8015f1e:	4299      	cmp	r1, r3
 8015f20:	f000 8131 	beq.w	8016186 <uxr_read_framed_msg+0x2fa>
 8015f24:	18e2      	adds	r2, r4, r3
 8015f26:	7890      	ldrb	r0, [r2, #2]
 8015f28:	287d      	cmp	r0, #125	@ 0x7d
 8015f2a:	f000 8190 	beq.w	801624e <uxr_read_framed_msg+0x3c2>
 8015f2e:	3301      	adds	r3, #1
 8015f30:	085a      	lsrs	r2, r3, #1
 8015f32:	fba5 1202 	umull	r1, r2, r5, r2
 8015f36:	0892      	lsrs	r2, r2, #2
 8015f38:	212a      	movs	r1, #42	@ 0x2a
 8015f3a:	fb01 3312 	mls	r3, r1, r2, r3
 8015f3e:	287e      	cmp	r0, #126	@ 0x7e
 8015f40:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8015f44:	f000 821a 	beq.w	801637c <uxr_read_framed_msg+0x4f0>
 8015f48:	2307      	movs	r3, #7
 8015f4a:	86a0      	strh	r0, [r4, #52]	@ 0x34
 8015f4c:	7023      	strb	r3, [r4, #0]
 8015f4e:	e7ae      	b.n	8015eae <uxr_read_framed_msg+0x22>
 8015f50:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8015f52:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8015f56:	459e      	cmp	lr, r3
 8015f58:	d938      	bls.n	8015fcc <uxr_read_framed_msg+0x140>
 8015f5a:	ee07 8a90 	vmov	s15, r8
 8015f5e:	212a      	movs	r1, #42	@ 0x2a
 8015f60:	e020      	b.n	8015fa4 <uxr_read_framed_msg+0x118>
 8015f62:	f89b c002 	ldrb.w	ip, [fp, #2]
 8015f66:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 8015f6a:	f000 80d4 	beq.w	8016116 <uxr_read_framed_msg+0x28a>
 8015f6e:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8015f72:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8015f76:	f000 8219 	beq.w	80163ac <uxr_read_framed_msg+0x520>
 8015f7a:	f806 c003 	strb.w	ip, [r6, r3]
 8015f7e:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 8015f82:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8015f84:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8015f88:	ea8a 000c 	eor.w	r0, sl, ip
 8015f8c:	b2c0      	uxtb	r0, r0
 8015f8e:	3301      	adds	r3, #1
 8015f90:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 8015f94:	b29b      	uxth	r3, r3
 8015f96:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 8015f9a:	4573      	cmp	r3, lr
 8015f9c:	8663      	strh	r3, [r4, #50]	@ 0x32
 8015f9e:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8015fa0:	f080 8120 	bcs.w	80161e4 <uxr_read_framed_msg+0x358>
 8015fa4:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 8015fa8:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8015fac:	f100 0c01 	add.w	ip, r0, #1
 8015fb0:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8015fb4:	fba5 8202 	umull	r8, r2, r5, r2
 8015fb8:	0892      	lsrs	r2, r2, #2
 8015fba:	4582      	cmp	sl, r0
 8015fbc:	eb04 0b00 	add.w	fp, r4, r0
 8015fc0:	fb01 c212 	mls	r2, r1, r2, ip
 8015fc4:	d1cd      	bne.n	8015f62 <uxr_read_framed_msg+0xd6>
 8015fc6:	ee17 8a90 	vmov	r8, s15
 8015fca:	459e      	cmp	lr, r3
 8015fcc:	f040 8111 	bne.w	80161f2 <uxr_read_framed_msg+0x366>
 8015fd0:	2306      	movs	r3, #6
 8015fd2:	7023      	strb	r3, [r4, #0]
 8015fd4:	e76b      	b.n	8015eae <uxr_read_framed_msg+0x22>
 8015fd6:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8015fda:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8015fde:	4298      	cmp	r0, r3
 8015fe0:	f000 80c2 	beq.w	8016168 <uxr_read_framed_msg+0x2dc>
 8015fe4:	18e2      	adds	r2, r4, r3
 8015fe6:	7891      	ldrb	r1, [r2, #2]
 8015fe8:	297d      	cmp	r1, #125	@ 0x7d
 8015fea:	f000 814c 	beq.w	8016286 <uxr_read_framed_msg+0x3fa>
 8015fee:	3301      	adds	r3, #1
 8015ff0:	085a      	lsrs	r2, r3, #1
 8015ff2:	fba5 0202 	umull	r0, r2, r5, r2
 8015ff6:	0892      	lsrs	r2, r2, #2
 8015ff8:	202a      	movs	r0, #42	@ 0x2a
 8015ffa:	fb00 3312 	mls	r3, r0, r2, r3
 8015ffe:	297e      	cmp	r1, #126	@ 0x7e
 8016000:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8016004:	f000 81ca 	beq.w	801639c <uxr_read_framed_msg+0x510>
 8016008:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 801600a:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801600e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8016010:	b29b      	uxth	r3, r3
 8016012:	2000      	movs	r0, #0
 8016014:	428b      	cmp	r3, r1
 8016016:	8623      	strh	r3, [r4, #48]	@ 0x30
 8016018:	8660      	strh	r0, [r4, #50]	@ 0x32
 801601a:	86e0      	strh	r0, [r4, #54]	@ 0x36
 801601c:	f240 80df 	bls.w	80161de <uxr_read_framed_msg+0x352>
 8016020:	7020      	strb	r0, [r4, #0]
 8016022:	b003      	add	sp, #12
 8016024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016028:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801602c:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8016030:	4299      	cmp	r1, r3
 8016032:	f000 80a8 	beq.w	8016186 <uxr_read_framed_msg+0x2fa>
 8016036:	18e2      	adds	r2, r4, r3
 8016038:	7890      	ldrb	r0, [r2, #2]
 801603a:	287d      	cmp	r0, #125	@ 0x7d
 801603c:	f000 8164 	beq.w	8016308 <uxr_read_framed_msg+0x47c>
 8016040:	3301      	adds	r3, #1
 8016042:	085a      	lsrs	r2, r3, #1
 8016044:	fba5 1202 	umull	r1, r2, r5, r2
 8016048:	0892      	lsrs	r2, r2, #2
 801604a:	212a      	movs	r1, #42	@ 0x2a
 801604c:	fb01 3312 	mls	r3, r1, r2, r3
 8016050:	287e      	cmp	r0, #126	@ 0x7e
 8016052:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8016056:	f000 8191 	beq.w	801637c <uxr_read_framed_msg+0x4f0>
 801605a:	2304      	movs	r3, #4
 801605c:	8620      	strh	r0, [r4, #48]	@ 0x30
 801605e:	7023      	strb	r3, [r4, #0]
 8016060:	e725      	b.n	8015eae <uxr_read_framed_msg+0x22>
 8016062:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8016066:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801606a:	4290      	cmp	r0, r2
 801606c:	f000 80b3 	beq.w	80161d6 <uxr_read_framed_msg+0x34a>
 8016070:	18a3      	adds	r3, r4, r2
 8016072:	7899      	ldrb	r1, [r3, #2]
 8016074:	297d      	cmp	r1, #125	@ 0x7d
 8016076:	f000 8164 	beq.w	8016342 <uxr_read_framed_msg+0x4b6>
 801607a:	3201      	adds	r2, #1
 801607c:	0850      	lsrs	r0, r2, #1
 801607e:	fba5 3000 	umull	r3, r0, r5, r0
 8016082:	0880      	lsrs	r0, r0, #2
 8016084:	232a      	movs	r3, #42	@ 0x2a
 8016086:	fb03 2210 	mls	r2, r3, r0, r2
 801608a:	297e      	cmp	r1, #126	@ 0x7e
 801608c:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8016090:	f000 8188 	beq.w	80163a4 <uxr_read_framed_msg+0x518>
 8016094:	7863      	ldrb	r3, [r4, #1]
 8016096:	428b      	cmp	r3, r1
 8016098:	bf0c      	ite	eq
 801609a:	2303      	moveq	r3, #3
 801609c:	2300      	movne	r3, #0
 801609e:	7023      	strb	r3, [r4, #0]
 80160a0:	e705      	b.n	8015eae <uxr_read_framed_msg+0x22>
 80160a2:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80160a6:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80160aa:	2200      	movs	r2, #0
 80160ac:	4299      	cmp	r1, r3
 80160ae:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 80160b2:	d06c      	beq.n	801618e <uxr_read_framed_msg+0x302>
 80160b4:	18e2      	adds	r2, r4, r3
 80160b6:	7890      	ldrb	r0, [r2, #2]
 80160b8:	287d      	cmp	r0, #125	@ 0x7d
 80160ba:	f000 8101 	beq.w	80162c0 <uxr_read_framed_msg+0x434>
 80160be:	3301      	adds	r3, #1
 80160c0:	085a      	lsrs	r2, r3, #1
 80160c2:	fba5 1202 	umull	r1, r2, r5, r2
 80160c6:	0892      	lsrs	r2, r2, #2
 80160c8:	212a      	movs	r1, #42	@ 0x2a
 80160ca:	fb01 3312 	mls	r3, r1, r2, r3
 80160ce:	287e      	cmp	r0, #126	@ 0x7e
 80160d0:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 80160d4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80160d8:	d059      	beq.n	801618e <uxr_read_framed_msg+0x302>
 80160da:	2302      	movs	r3, #2
 80160dc:	7023      	strb	r3, [r4, #0]
 80160de:	e6e6      	b.n	8015eae <uxr_read_framed_msg+0x22>
 80160e0:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 80160e4:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80160e8:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 80160ec:	1c51      	adds	r1, r2, #1
 80160ee:	084b      	lsrs	r3, r1, #1
 80160f0:	fba5 c303 	umull	ip, r3, r5, r3
 80160f4:	089b      	lsrs	r3, r3, #2
 80160f6:	fb0e 1313 	mls	r3, lr, r3, r1
 80160fa:	4592      	cmp	sl, r2
 80160fc:	eb04 0002 	add.w	r0, r4, r2
 8016100:	b2da      	uxtb	r2, r3
 8016102:	f43f af04 	beq.w	8015f0e <uxr_read_framed_msg+0x82>
 8016106:	7883      	ldrb	r3, [r0, #2]
 8016108:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801610c:	2b7e      	cmp	r3, #126	@ 0x7e
 801610e:	d1ed      	bne.n	80160ec <uxr_read_framed_msg+0x260>
 8016110:	2301      	movs	r3, #1
 8016112:	7023      	strb	r3, [r4, #0]
 8016114:	e6cb      	b.n	8015eae <uxr_read_framed_msg+0x22>
 8016116:	f100 0c01 	add.w	ip, r0, #1
 801611a:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801611e:	fba5 8202 	umull	r8, r2, r5, r2
 8016122:	0892      	lsrs	r2, r2, #2
 8016124:	fb01 c212 	mls	r2, r1, r2, ip
 8016128:	eb04 0c02 	add.w	ip, r4, r2
 801612c:	b2d2      	uxtb	r2, r2
 801612e:	4592      	cmp	sl, r2
 8016130:	f100 0002 	add.w	r0, r0, #2
 8016134:	f43f af47 	beq.w	8015fc6 <uxr_read_framed_msg+0x13a>
 8016138:	0842      	lsrs	r2, r0, #1
 801613a:	f89c a002 	ldrb.w	sl, [ip, #2]
 801613e:	fba5 8202 	umull	r8, r2, r5, r2
 8016142:	0892      	lsrs	r2, r2, #2
 8016144:	fb01 0012 	mls	r0, r1, r2, r0
 8016148:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 801614c:	f08a 0c20 	eor.w	ip, sl, #32
 8016150:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 8016154:	f47f af11 	bne.w	8015f7a <uxr_read_framed_msg+0xee>
 8016158:	459e      	cmp	lr, r3
 801615a:	ee17 8a90 	vmov	r8, s15
 801615e:	f43f af37 	beq.w	8015fd0 <uxr_read_framed_msg+0x144>
 8016162:	2301      	movs	r3, #1
 8016164:	7023      	strb	r3, [r4, #0]
 8016166:	e6a2      	b.n	8015eae <uxr_read_framed_msg+0x22>
 8016168:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801616a:	9300      	str	r3, [sp, #0]
 801616c:	2301      	movs	r3, #1
 801616e:	9301      	str	r3, [sp, #4]
 8016170:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016172:	464a      	mov	r2, r9
 8016174:	4641      	mov	r1, r8
 8016176:	4620      	mov	r0, r4
 8016178:	f7ff fe06 	bl	8015d88 <uxr_framing_read_transport>
 801617c:	2800      	cmp	r0, #0
 801617e:	f43f aec6 	beq.w	8015f0e <uxr_read_framed_msg+0x82>
 8016182:	7823      	ldrb	r3, [r4, #0]
 8016184:	e693      	b.n	8015eae <uxr_read_framed_msg+0x22>
 8016186:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016188:	9300      	str	r3, [sp, #0]
 801618a:	2302      	movs	r3, #2
 801618c:	e7ef      	b.n	801616e <uxr_read_framed_msg+0x2e2>
 801618e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016190:	9300      	str	r3, [sp, #0]
 8016192:	2304      	movs	r3, #4
 8016194:	9301      	str	r3, [sp, #4]
 8016196:	464a      	mov	r2, r9
 8016198:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801619a:	4641      	mov	r1, r8
 801619c:	4620      	mov	r0, r4
 801619e:	f7ff fdf3 	bl	8015d88 <uxr_framing_read_transport>
 80161a2:	2800      	cmp	r0, #0
 80161a4:	d1ed      	bne.n	8016182 <uxr_read_framed_msg+0x2f6>
 80161a6:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 80161aa:	2b7e      	cmp	r3, #126	@ 0x7e
 80161ac:	d0e9      	beq.n	8016182 <uxr_read_framed_msg+0x2f6>
 80161ae:	e6ae      	b.n	8015f0e <uxr_read_framed_msg+0x82>
 80161b0:	30c30c31 	.word	0x30c30c31
 80161b4:	0801a8d8 	.word	0x0801a8d8
 80161b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80161ba:	9300      	str	r3, [sp, #0]
 80161bc:	2305      	movs	r3, #5
 80161be:	9301      	str	r3, [sp, #4]
 80161c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80161c2:	f7ff fde1 	bl	8015d88 <uxr_framing_read_transport>
 80161c6:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80161ca:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80161ce:	429a      	cmp	r2, r3
 80161d0:	f43f ae9d 	beq.w	8015f0e <uxr_read_framed_msg+0x82>
 80161d4:	e668      	b.n	8015ea8 <uxr_read_framed_msg+0x1c>
 80161d6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80161d8:	9300      	str	r3, [sp, #0]
 80161da:	2303      	movs	r3, #3
 80161dc:	e7c7      	b.n	801616e <uxr_read_framed_msg+0x2e2>
 80161de:	2305      	movs	r3, #5
 80161e0:	7023      	strb	r3, [r4, #0]
 80161e2:	e664      	b.n	8015eae <uxr_read_framed_msg+0x22>
 80161e4:	ee17 8a90 	vmov	r8, s15
 80161e8:	f43f aef2 	beq.w	8015fd0 <uxr_read_framed_msg+0x144>
 80161ec:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 80161f0:	d08e      	beq.n	8016110 <uxr_read_framed_msg+0x284>
 80161f2:	ebae 0303 	sub.w	r3, lr, r3
 80161f6:	3302      	adds	r3, #2
 80161f8:	9301      	str	r3, [sp, #4]
 80161fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80161fc:	9300      	str	r3, [sp, #0]
 80161fe:	e7b7      	b.n	8016170 <uxr_read_framed_msg+0x2e4>
 8016200:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8016202:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8016206:	7013      	strb	r3, [r2, #0]
 8016208:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 801620a:	b003      	add	sp, #12
 801620c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016210:	f103 0c01 	add.w	ip, r3, #1
 8016214:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8016218:	fba5 0202 	umull	r0, r2, r5, r2
 801621c:	0892      	lsrs	r2, r2, #2
 801621e:	202a      	movs	r0, #42	@ 0x2a
 8016220:	fb00 c212 	mls	r2, r0, r2, ip
 8016224:	fa5f fc82 	uxtb.w	ip, r2
 8016228:	4561      	cmp	r1, ip
 801622a:	d09d      	beq.n	8016168 <uxr_read_framed_msg+0x2dc>
 801622c:	3302      	adds	r3, #2
 801622e:	4422      	add	r2, r4
 8016230:	0859      	lsrs	r1, r3, #1
 8016232:	7892      	ldrb	r2, [r2, #2]
 8016234:	fba5 c101 	umull	ip, r1, r5, r1
 8016238:	0889      	lsrs	r1, r1, #2
 801623a:	fb00 3311 	mls	r3, r0, r1, r3
 801623e:	2a7e      	cmp	r2, #126	@ 0x7e
 8016240:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8016244:	f000 80aa 	beq.w	801639c <uxr_read_framed_msg+0x510>
 8016248:	f082 0220 	eor.w	r2, r2, #32
 801624c:	e654      	b.n	8015ef8 <uxr_read_framed_msg+0x6c>
 801624e:	1c58      	adds	r0, r3, #1
 8016250:	0842      	lsrs	r2, r0, #1
 8016252:	fba5 c202 	umull	ip, r2, r5, r2
 8016256:	0892      	lsrs	r2, r2, #2
 8016258:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801625c:	fb0c 0212 	mls	r2, ip, r2, r0
 8016260:	b2d0      	uxtb	r0, r2
 8016262:	4281      	cmp	r1, r0
 8016264:	d08f      	beq.n	8016186 <uxr_read_framed_msg+0x2fa>
 8016266:	4422      	add	r2, r4
 8016268:	3302      	adds	r3, #2
 801626a:	7890      	ldrb	r0, [r2, #2]
 801626c:	085a      	lsrs	r2, r3, #1
 801626e:	fba5 1202 	umull	r1, r2, r5, r2
 8016272:	0892      	lsrs	r2, r2, #2
 8016274:	fb0c 3312 	mls	r3, ip, r2, r3
 8016278:	287e      	cmp	r0, #126	@ 0x7e
 801627a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801627e:	d07d      	beq.n	801637c <uxr_read_framed_msg+0x4f0>
 8016280:	f080 0020 	eor.w	r0, r0, #32
 8016284:	e660      	b.n	8015f48 <uxr_read_framed_msg+0xbc>
 8016286:	1c59      	adds	r1, r3, #1
 8016288:	084a      	lsrs	r2, r1, #1
 801628a:	fba5 c202 	umull	ip, r2, r5, r2
 801628e:	0892      	lsrs	r2, r2, #2
 8016290:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8016294:	fb0c 1212 	mls	r2, ip, r2, r1
 8016298:	b2d1      	uxtb	r1, r2
 801629a:	4288      	cmp	r0, r1
 801629c:	f43f af64 	beq.w	8016168 <uxr_read_framed_msg+0x2dc>
 80162a0:	4422      	add	r2, r4
 80162a2:	3302      	adds	r3, #2
 80162a4:	7891      	ldrb	r1, [r2, #2]
 80162a6:	085a      	lsrs	r2, r3, #1
 80162a8:	fba5 0202 	umull	r0, r2, r5, r2
 80162ac:	0892      	lsrs	r2, r2, #2
 80162ae:	fb0c 3312 	mls	r3, ip, r2, r3
 80162b2:	297e      	cmp	r1, #126	@ 0x7e
 80162b4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80162b8:	d070      	beq.n	801639c <uxr_read_framed_msg+0x510>
 80162ba:	f081 0120 	eor.w	r1, r1, #32
 80162be:	e6a3      	b.n	8016008 <uxr_read_framed_msg+0x17c>
 80162c0:	f103 0c01 	add.w	ip, r3, #1
 80162c4:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80162c8:	fba5 0202 	umull	r0, r2, r5, r2
 80162cc:	0892      	lsrs	r2, r2, #2
 80162ce:	202a      	movs	r0, #42	@ 0x2a
 80162d0:	fb00 c212 	mls	r2, r0, r2, ip
 80162d4:	fa5f fc82 	uxtb.w	ip, r2
 80162d8:	4561      	cmp	r1, ip
 80162da:	f43f af58 	beq.w	801618e <uxr_read_framed_msg+0x302>
 80162de:	4422      	add	r2, r4
 80162e0:	3302      	adds	r3, #2
 80162e2:	7891      	ldrb	r1, [r2, #2]
 80162e4:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 80162e8:	085a      	lsrs	r2, r3, #1
 80162ea:	fba5 c202 	umull	ip, r2, r5, r2
 80162ee:	0892      	lsrs	r2, r2, #2
 80162f0:	fb00 3312 	mls	r3, r0, r2, r3
 80162f4:	297e      	cmp	r1, #126	@ 0x7e
 80162f6:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80162fa:	f43f af48 	beq.w	801618e <uxr_read_framed_msg+0x302>
 80162fe:	f081 0120 	eor.w	r1, r1, #32
 8016302:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8016306:	e6e8      	b.n	80160da <uxr_read_framed_msg+0x24e>
 8016308:	1c58      	adds	r0, r3, #1
 801630a:	0842      	lsrs	r2, r0, #1
 801630c:	fba5 c202 	umull	ip, r2, r5, r2
 8016310:	0892      	lsrs	r2, r2, #2
 8016312:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8016316:	fb0c 0212 	mls	r2, ip, r2, r0
 801631a:	b2d0      	uxtb	r0, r2
 801631c:	4281      	cmp	r1, r0
 801631e:	f43f af32 	beq.w	8016186 <uxr_read_framed_msg+0x2fa>
 8016322:	4422      	add	r2, r4
 8016324:	3302      	adds	r3, #2
 8016326:	7890      	ldrb	r0, [r2, #2]
 8016328:	085a      	lsrs	r2, r3, #1
 801632a:	fba5 1202 	umull	r1, r2, r5, r2
 801632e:	0892      	lsrs	r2, r2, #2
 8016330:	fb0c 3312 	mls	r3, ip, r2, r3
 8016334:	287e      	cmp	r0, #126	@ 0x7e
 8016336:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801633a:	d01f      	beq.n	801637c <uxr_read_framed_msg+0x4f0>
 801633c:	f080 0020 	eor.w	r0, r0, #32
 8016340:	e68b      	b.n	801605a <uxr_read_framed_msg+0x1ce>
 8016342:	1c51      	adds	r1, r2, #1
 8016344:	084b      	lsrs	r3, r1, #1
 8016346:	fba5 c303 	umull	ip, r3, r5, r3
 801634a:	089b      	lsrs	r3, r3, #2
 801634c:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8016350:	fb0c 1313 	mls	r3, ip, r3, r1
 8016354:	b2d9      	uxtb	r1, r3
 8016356:	4288      	cmp	r0, r1
 8016358:	f43f af3d 	beq.w	80161d6 <uxr_read_framed_msg+0x34a>
 801635c:	3202      	adds	r2, #2
 801635e:	4423      	add	r3, r4
 8016360:	0850      	lsrs	r0, r2, #1
 8016362:	789b      	ldrb	r3, [r3, #2]
 8016364:	fba5 1000 	umull	r1, r0, r5, r0
 8016368:	0880      	lsrs	r0, r0, #2
 801636a:	fb0c 2210 	mls	r2, ip, r0, r2
 801636e:	2b7e      	cmp	r3, #126	@ 0x7e
 8016370:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8016374:	d016      	beq.n	80163a4 <uxr_read_framed_msg+0x518>
 8016376:	f083 0120 	eor.w	r1, r3, #32
 801637a:	e68b      	b.n	8016094 <uxr_read_framed_msg+0x208>
 801637c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801637e:	9300      	str	r3, [sp, #0]
 8016380:	2302      	movs	r3, #2
 8016382:	9301      	str	r3, [sp, #4]
 8016384:	464a      	mov	r2, r9
 8016386:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016388:	4641      	mov	r1, r8
 801638a:	4620      	mov	r0, r4
 801638c:	f7ff fcfc 	bl	8015d88 <uxr_framing_read_transport>
 8016390:	2800      	cmp	r0, #0
 8016392:	f47f aef6 	bne.w	8016182 <uxr_read_framed_msg+0x2f6>
 8016396:	2301      	movs	r3, #1
 8016398:	7023      	strb	r3, [r4, #0]
 801639a:	e588      	b.n	8015eae <uxr_read_framed_msg+0x22>
 801639c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801639e:	9300      	str	r3, [sp, #0]
 80163a0:	2301      	movs	r3, #1
 80163a2:	e7ee      	b.n	8016382 <uxr_read_framed_msg+0x4f6>
 80163a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80163a6:	9300      	str	r3, [sp, #0]
 80163a8:	2303      	movs	r3, #3
 80163aa:	e7ea      	b.n	8016382 <uxr_read_framed_msg+0x4f6>
 80163ac:	ee17 8a90 	vmov	r8, s15
 80163b0:	e6ae      	b.n	8016110 <uxr_read_framed_msg+0x284>
 80163b2:	bf00      	nop

080163b4 <rcl_get_default_domain_id>:
 80163b4:	b530      	push	{r4, r5, lr}
 80163b6:	b083      	sub	sp, #12
 80163b8:	2300      	movs	r3, #0
 80163ba:	9300      	str	r3, [sp, #0]
 80163bc:	b1d0      	cbz	r0, 80163f4 <rcl_get_default_domain_id+0x40>
 80163be:	4604      	mov	r4, r0
 80163c0:	4669      	mov	r1, sp
 80163c2:	4815      	ldr	r0, [pc, #84]	@ (8016418 <rcl_get_default_domain_id+0x64>)
 80163c4:	f7f5 faca 	bl	800b95c <rcutils_get_env>
 80163c8:	4602      	mov	r2, r0
 80163ca:	b110      	cbz	r0, 80163d2 <rcl_get_default_domain_id+0x1e>
 80163cc:	2001      	movs	r0, #1
 80163ce:	b003      	add	sp, #12
 80163d0:	bd30      	pop	{r4, r5, pc}
 80163d2:	9b00      	ldr	r3, [sp, #0]
 80163d4:	b18b      	cbz	r3, 80163fa <rcl_get_default_domain_id+0x46>
 80163d6:	7818      	ldrb	r0, [r3, #0]
 80163d8:	2800      	cmp	r0, #0
 80163da:	d0f8      	beq.n	80163ce <rcl_get_default_domain_id+0x1a>
 80163dc:	a901      	add	r1, sp, #4
 80163de:	4618      	mov	r0, r3
 80163e0:	9201      	str	r2, [sp, #4]
 80163e2:	f000 fddb 	bl	8016f9c <strtoul>
 80163e6:	4605      	mov	r5, r0
 80163e8:	b150      	cbz	r0, 8016400 <rcl_get_default_domain_id+0x4c>
 80163ea:	1c43      	adds	r3, r0, #1
 80163ec:	d00d      	beq.n	801640a <rcl_get_default_domain_id+0x56>
 80163ee:	6025      	str	r5, [r4, #0]
 80163f0:	2000      	movs	r0, #0
 80163f2:	e7ec      	b.n	80163ce <rcl_get_default_domain_id+0x1a>
 80163f4:	200b      	movs	r0, #11
 80163f6:	b003      	add	sp, #12
 80163f8:	bd30      	pop	{r4, r5, pc}
 80163fa:	4618      	mov	r0, r3
 80163fc:	b003      	add	sp, #12
 80163fe:	bd30      	pop	{r4, r5, pc}
 8016400:	9b01      	ldr	r3, [sp, #4]
 8016402:	781b      	ldrb	r3, [r3, #0]
 8016404:	2b00      	cmp	r3, #0
 8016406:	d0f2      	beq.n	80163ee <rcl_get_default_domain_id+0x3a>
 8016408:	e7e0      	b.n	80163cc <rcl_get_default_domain_id+0x18>
 801640a:	f001 fdd3 	bl	8017fb4 <__errno>
 801640e:	6803      	ldr	r3, [r0, #0]
 8016410:	2b22      	cmp	r3, #34	@ 0x22
 8016412:	d1ec      	bne.n	80163ee <rcl_get_default_domain_id+0x3a>
 8016414:	e7da      	b.n	80163cc <rcl_get_default_domain_id+0x18>
 8016416:	bf00      	nop
 8016418:	0801aad8 	.word	0x0801aad8

0801641c <rcl_expand_topic_name>:
 801641c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016420:	b08b      	sub	sp, #44	@ 0x2c
 8016422:	9306      	str	r3, [sp, #24]
 8016424:	2800      	cmp	r0, #0
 8016426:	f000 80ad 	beq.w	8016584 <rcl_expand_topic_name+0x168>
 801642a:	460e      	mov	r6, r1
 801642c:	2900      	cmp	r1, #0
 801642e:	f000 80a9 	beq.w	8016584 <rcl_expand_topic_name+0x168>
 8016432:	4617      	mov	r7, r2
 8016434:	2a00      	cmp	r2, #0
 8016436:	f000 80a5 	beq.w	8016584 <rcl_expand_topic_name+0x168>
 801643a:	2b00      	cmp	r3, #0
 801643c:	f000 80a2 	beq.w	8016584 <rcl_expand_topic_name+0x168>
 8016440:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016442:	2b00      	cmp	r3, #0
 8016444:	f000 809e 	beq.w	8016584 <rcl_expand_topic_name+0x168>
 8016448:	2200      	movs	r2, #0
 801644a:	a909      	add	r1, sp, #36	@ 0x24
 801644c:	4680      	mov	r8, r0
 801644e:	f000 f949 	bl	80166e4 <rcl_validate_topic_name>
 8016452:	4604      	mov	r4, r0
 8016454:	2800      	cmp	r0, #0
 8016456:	f040 8096 	bne.w	8016586 <rcl_expand_topic_name+0x16a>
 801645a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801645c:	2b00      	cmp	r3, #0
 801645e:	f040 809a 	bne.w	8016596 <rcl_expand_topic_name+0x17a>
 8016462:	4602      	mov	r2, r0
 8016464:	a909      	add	r1, sp, #36	@ 0x24
 8016466:	4630      	mov	r0, r6
 8016468:	f7f5 fd02 	bl	800be70 <rmw_validate_node_name>
 801646c:	2800      	cmp	r0, #0
 801646e:	f040 808e 	bne.w	801658e <rcl_expand_topic_name+0x172>
 8016472:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016474:	2a00      	cmp	r2, #0
 8016476:	f040 8093 	bne.w	80165a0 <rcl_expand_topic_name+0x184>
 801647a:	a909      	add	r1, sp, #36	@ 0x24
 801647c:	4638      	mov	r0, r7
 801647e:	f7f5 fcd9 	bl	800be34 <rmw_validate_namespace>
 8016482:	2800      	cmp	r0, #0
 8016484:	f040 8083 	bne.w	801658e <rcl_expand_topic_name+0x172>
 8016488:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801648a:	2c00      	cmp	r4, #0
 801648c:	f040 80ed 	bne.w	801666a <rcl_expand_topic_name+0x24e>
 8016490:	217b      	movs	r1, #123	@ 0x7b
 8016492:	4640      	mov	r0, r8
 8016494:	f001 fca8 	bl	8017de8 <strchr>
 8016498:	f898 3000 	ldrb.w	r3, [r8]
 801649c:	2b2f      	cmp	r3, #47	@ 0x2f
 801649e:	4605      	mov	r5, r0
 80164a0:	f000 809e 	beq.w	80165e0 <rcl_expand_topic_name+0x1c4>
 80164a4:	2b7e      	cmp	r3, #126	@ 0x7e
 80164a6:	f040 80a2 	bne.w	80165ee <rcl_expand_topic_name+0x1d2>
 80164aa:	4638      	mov	r0, r7
 80164ac:	f7e9 ff10 	bl	80002d0 <strlen>
 80164b0:	4a82      	ldr	r2, [pc, #520]	@ (80166bc <rcl_expand_topic_name+0x2a0>)
 80164b2:	4b83      	ldr	r3, [pc, #524]	@ (80166c0 <rcl_expand_topic_name+0x2a4>)
 80164b4:	2801      	cmp	r0, #1
 80164b6:	bf18      	it	ne
 80164b8:	4613      	movne	r3, r2
 80164ba:	9302      	str	r3, [sp, #8]
 80164bc:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80164be:	9300      	str	r3, [sp, #0]
 80164c0:	e9cd 7603 	strd	r7, r6, [sp, #12]
 80164c4:	f108 0301 	add.w	r3, r8, #1
 80164c8:	9305      	str	r3, [sp, #20]
 80164ca:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80164ce:	9301      	str	r3, [sp, #4]
 80164d0:	ab14      	add	r3, sp, #80	@ 0x50
 80164d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80164d4:	f7f5 fa8c 	bl	800b9f0 <rcutils_format_string_limit>
 80164d8:	4682      	mov	sl, r0
 80164da:	2800      	cmp	r0, #0
 80164dc:	f000 80c7 	beq.w	801666e <rcl_expand_topic_name+0x252>
 80164e0:	2d00      	cmp	r5, #0
 80164e2:	f000 80a2 	beq.w	801662a <rcl_expand_topic_name+0x20e>
 80164e6:	217b      	movs	r1, #123	@ 0x7b
 80164e8:	f001 fc7e 	bl	8017de8 <strchr>
 80164ec:	46d1      	mov	r9, sl
 80164ee:	4605      	mov	r5, r0
 80164f0:	9407      	str	r4, [sp, #28]
 80164f2:	46d3      	mov	fp, sl
 80164f4:	464c      	mov	r4, r9
 80164f6:	2d00      	cmp	r5, #0
 80164f8:	f000 80be 	beq.w	8016678 <rcl_expand_topic_name+0x25c>
 80164fc:	217d      	movs	r1, #125	@ 0x7d
 80164fe:	4620      	mov	r0, r4
 8016500:	f001 fc72 	bl	8017de8 <strchr>
 8016504:	eba0 0905 	sub.w	r9, r0, r5
 8016508:	f109 0a01 	add.w	sl, r9, #1
 801650c:	486d      	ldr	r0, [pc, #436]	@ (80166c4 <rcl_expand_topic_name+0x2a8>)
 801650e:	4652      	mov	r2, sl
 8016510:	4629      	mov	r1, r5
 8016512:	f001 fc76 	bl	8017e02 <strncmp>
 8016516:	2800      	cmp	r0, #0
 8016518:	d067      	beq.n	80165ea <rcl_expand_topic_name+0x1ce>
 801651a:	486b      	ldr	r0, [pc, #428]	@ (80166c8 <rcl_expand_topic_name+0x2ac>)
 801651c:	4652      	mov	r2, sl
 801651e:	4629      	mov	r1, r5
 8016520:	f001 fc6f 	bl	8017e02 <strncmp>
 8016524:	b130      	cbz	r0, 8016534 <rcl_expand_topic_name+0x118>
 8016526:	4869      	ldr	r0, [pc, #420]	@ (80166cc <rcl_expand_topic_name+0x2b0>)
 8016528:	4652      	mov	r2, sl
 801652a:	4629      	mov	r1, r5
 801652c:	f001 fc69 	bl	8017e02 <strncmp>
 8016530:	2800      	cmp	r0, #0
 8016532:	d137      	bne.n	80165a4 <rcl_expand_topic_name+0x188>
 8016534:	46b9      	mov	r9, r7
 8016536:	ab16      	add	r3, sp, #88	@ 0x58
 8016538:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801653c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016540:	ab14      	add	r3, sp, #80	@ 0x50
 8016542:	4628      	mov	r0, r5
 8016544:	cb0c      	ldmia	r3, {r2, r3}
 8016546:	4651      	mov	r1, sl
 8016548:	f7f5 fb8e 	bl	800bc68 <rcutils_strndup>
 801654c:	4605      	mov	r5, r0
 801654e:	2800      	cmp	r0, #0
 8016550:	f000 809c 	beq.w	801668c <rcl_expand_topic_name+0x270>
 8016554:	464a      	mov	r2, r9
 8016556:	4620      	mov	r0, r4
 8016558:	ab14      	add	r3, sp, #80	@ 0x50
 801655a:	4629      	mov	r1, r5
 801655c:	f7f5 fa82 	bl	800ba64 <rcutils_repl_str>
 8016560:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016562:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016564:	4604      	mov	r4, r0
 8016566:	4628      	mov	r0, r5
 8016568:	4798      	blx	r3
 801656a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801656c:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801656e:	4658      	mov	r0, fp
 8016570:	4798      	blx	r3
 8016572:	2c00      	cmp	r4, #0
 8016574:	d07b      	beq.n	801666e <rcl_expand_topic_name+0x252>
 8016576:	217b      	movs	r1, #123	@ 0x7b
 8016578:	4620      	mov	r0, r4
 801657a:	f001 fc35 	bl	8017de8 <strchr>
 801657e:	46a3      	mov	fp, r4
 8016580:	4605      	mov	r5, r0
 8016582:	e7b8      	b.n	80164f6 <rcl_expand_topic_name+0xda>
 8016584:	240b      	movs	r4, #11
 8016586:	4620      	mov	r0, r4
 8016588:	b00b      	add	sp, #44	@ 0x2c
 801658a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801658e:	f7f9 fee5 	bl	801035c <rcl_convert_rmw_ret_to_rcl_ret>
 8016592:	4604      	mov	r4, r0
 8016594:	e7f7      	b.n	8016586 <rcl_expand_topic_name+0x16a>
 8016596:	2467      	movs	r4, #103	@ 0x67
 8016598:	4620      	mov	r0, r4
 801659a:	b00b      	add	sp, #44	@ 0x2c
 801659c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80165a0:	24c9      	movs	r4, #201	@ 0xc9
 80165a2:	e7f0      	b.n	8016586 <rcl_expand_topic_name+0x16a>
 80165a4:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 80165a8:	9806      	ldr	r0, [sp, #24]
 80165aa:	1c69      	adds	r1, r5, #1
 80165ac:	f7fc fb76 	bl	8012c9c <rcutils_string_map_getn>
 80165b0:	4681      	mov	r9, r0
 80165b2:	2800      	cmp	r0, #0
 80165b4:	d1bf      	bne.n	8016536 <rcl_expand_topic_name+0x11a>
 80165b6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80165b8:	aa16      	add	r2, sp, #88	@ 0x58
 80165ba:	6018      	str	r0, [r3, #0]
 80165bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80165be:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80165c2:	ab14      	add	r3, sp, #80	@ 0x50
 80165c4:	cb0c      	ldmia	r3, {r2, r3}
 80165c6:	4651      	mov	r1, sl
 80165c8:	4628      	mov	r0, r5
 80165ca:	f7f5 fb4d 	bl	800bc68 <rcutils_strndup>
 80165ce:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80165d0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80165d2:	4798      	blx	r3
 80165d4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80165d6:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80165d8:	4658      	mov	r0, fp
 80165da:	2469      	movs	r4, #105	@ 0x69
 80165dc:	4798      	blx	r3
 80165de:	e7d2      	b.n	8016586 <rcl_expand_topic_name+0x16a>
 80165e0:	2800      	cmp	r0, #0
 80165e2:	d05b      	beq.n	801669c <rcl_expand_topic_name+0x280>
 80165e4:	46c1      	mov	r9, r8
 80165e6:	46a2      	mov	sl, r4
 80165e8:	e782      	b.n	80164f0 <rcl_expand_topic_name+0xd4>
 80165ea:	46b1      	mov	r9, r6
 80165ec:	e7a3      	b.n	8016536 <rcl_expand_topic_name+0x11a>
 80165ee:	2800      	cmp	r0, #0
 80165f0:	d1f8      	bne.n	80165e4 <rcl_expand_topic_name+0x1c8>
 80165f2:	4638      	mov	r0, r7
 80165f4:	f7e9 fe6c 	bl	80002d0 <strlen>
 80165f8:	4a35      	ldr	r2, [pc, #212]	@ (80166d0 <rcl_expand_topic_name+0x2b4>)
 80165fa:	4b36      	ldr	r3, [pc, #216]	@ (80166d4 <rcl_expand_topic_name+0x2b8>)
 80165fc:	f8cd 8010 	str.w	r8, [sp, #16]
 8016600:	2801      	cmp	r0, #1
 8016602:	bf18      	it	ne
 8016604:	4613      	movne	r3, r2
 8016606:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801660a:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801660e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8016610:	9703      	str	r7, [sp, #12]
 8016612:	9200      	str	r2, [sp, #0]
 8016614:	ab14      	add	r3, sp, #80	@ 0x50
 8016616:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016618:	f7f5 f9ea 	bl	800b9f0 <rcutils_format_string_limit>
 801661c:	4682      	mov	sl, r0
 801661e:	4653      	mov	r3, sl
 8016620:	b32b      	cbz	r3, 801666e <rcl_expand_topic_name+0x252>
 8016622:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016624:	f8c3 a000 	str.w	sl, [r3]
 8016628:	e7ad      	b.n	8016586 <rcl_expand_topic_name+0x16a>
 801662a:	f89a 3000 	ldrb.w	r3, [sl]
 801662e:	2b2f      	cmp	r3, #47	@ 0x2f
 8016630:	d0f7      	beq.n	8016622 <rcl_expand_topic_name+0x206>
 8016632:	4638      	mov	r0, r7
 8016634:	f7e9 fe4c 	bl	80002d0 <strlen>
 8016638:	4a25      	ldr	r2, [pc, #148]	@ (80166d0 <rcl_expand_topic_name+0x2b4>)
 801663a:	4b26      	ldr	r3, [pc, #152]	@ (80166d4 <rcl_expand_topic_name+0x2b8>)
 801663c:	f8cd a010 	str.w	sl, [sp, #16]
 8016640:	2801      	cmp	r0, #1
 8016642:	bf18      	it	ne
 8016644:	4613      	movne	r3, r2
 8016646:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801664a:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801664e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8016650:	9703      	str	r7, [sp, #12]
 8016652:	9200      	str	r2, [sp, #0]
 8016654:	ab14      	add	r3, sp, #80	@ 0x50
 8016656:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016658:	f7f5 f9ca 	bl	800b9f0 <rcutils_format_string_limit>
 801665c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801665e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016660:	4605      	mov	r5, r0
 8016662:	4650      	mov	r0, sl
 8016664:	4798      	blx	r3
 8016666:	46aa      	mov	sl, r5
 8016668:	e7d9      	b.n	801661e <rcl_expand_topic_name+0x202>
 801666a:	24ca      	movs	r4, #202	@ 0xca
 801666c:	e78b      	b.n	8016586 <rcl_expand_topic_name+0x16a>
 801666e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016670:	2300      	movs	r3, #0
 8016672:	6013      	str	r3, [r2, #0]
 8016674:	240a      	movs	r4, #10
 8016676:	e786      	b.n	8016586 <rcl_expand_topic_name+0x16a>
 8016678:	465b      	mov	r3, fp
 801667a:	9c07      	ldr	r4, [sp, #28]
 801667c:	46da      	mov	sl, fp
 801667e:	2b00      	cmp	r3, #0
 8016680:	d1d3      	bne.n	801662a <rcl_expand_topic_name+0x20e>
 8016682:	f898 3000 	ldrb.w	r3, [r8]
 8016686:	2b2f      	cmp	r3, #47	@ 0x2f
 8016688:	d0cb      	beq.n	8016622 <rcl_expand_topic_name+0x206>
 801668a:	e7b2      	b.n	80165f2 <rcl_expand_topic_name+0x1d6>
 801668c:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 8016690:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016692:	6015      	str	r5, [r2, #0]
 8016694:	4658      	mov	r0, fp
 8016696:	4798      	blx	r3
 8016698:	240a      	movs	r4, #10
 801669a:	e774      	b.n	8016586 <rcl_expand_topic_name+0x16a>
 801669c:	ab17      	add	r3, sp, #92	@ 0x5c
 801669e:	e893 0003 	ldmia.w	r3, {r0, r1}
 80166a2:	e88d 0003 	stmia.w	sp, {r0, r1}
 80166a6:	ab14      	add	r3, sp, #80	@ 0x50
 80166a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80166aa:	4640      	mov	r0, r8
 80166ac:	f7f5 faba 	bl	800bc24 <rcutils_strdup>
 80166b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80166b2:	2800      	cmp	r0, #0
 80166b4:	6018      	str	r0, [r3, #0]
 80166b6:	bf08      	it	eq
 80166b8:	240a      	moveq	r4, #10
 80166ba:	e764      	b.n	8016586 <rcl_expand_topic_name+0x16a>
 80166bc:	0801aae8 	.word	0x0801aae8
 80166c0:	0801a558 	.word	0x0801a558
 80166c4:	0801aaf0 	.word	0x0801aaf0
 80166c8:	0801aaf8 	.word	0x0801aaf8
 80166cc:	0801ab00 	.word	0x0801ab00
 80166d0:	08019fdc 	.word	0x08019fdc
 80166d4:	08019fd4 	.word	0x08019fd4

080166d8 <rcl_get_default_topic_name_substitutions>:
 80166d8:	2800      	cmp	r0, #0
 80166da:	bf0c      	ite	eq
 80166dc:	200b      	moveq	r0, #11
 80166de:	2000      	movne	r0, #0
 80166e0:	4770      	bx	lr
 80166e2:	bf00      	nop

080166e4 <rcl_validate_topic_name>:
 80166e4:	2800      	cmp	r0, #0
 80166e6:	d07a      	beq.n	80167de <rcl_validate_topic_name+0xfa>
 80166e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80166ec:	460e      	mov	r6, r1
 80166ee:	2900      	cmp	r1, #0
 80166f0:	d07c      	beq.n	80167ec <rcl_validate_topic_name+0x108>
 80166f2:	4617      	mov	r7, r2
 80166f4:	4605      	mov	r5, r0
 80166f6:	f7e9 fdeb 	bl	80002d0 <strlen>
 80166fa:	b1b0      	cbz	r0, 801672a <rcl_validate_topic_name+0x46>
 80166fc:	f895 9000 	ldrb.w	r9, [r5]
 8016700:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8016884 <rcl_validate_topic_name+0x1a0>
 8016704:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8016708:	f013 0304 	ands.w	r3, r3, #4
 801670c:	d169      	bne.n	80167e2 <rcl_validate_topic_name+0xfe>
 801670e:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 8016712:	f815 2008 	ldrb.w	r2, [r5, r8]
 8016716:	2a2f      	cmp	r2, #47	@ 0x2f
 8016718:	d10e      	bne.n	8016738 <rcl_validate_topic_name+0x54>
 801671a:	2202      	movs	r2, #2
 801671c:	6032      	str	r2, [r6, #0]
 801671e:	b36f      	cbz	r7, 801677c <rcl_validate_topic_name+0x98>
 8016720:	f8c7 8000 	str.w	r8, [r7]
 8016724:	4618      	mov	r0, r3
 8016726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801672a:	2301      	movs	r3, #1
 801672c:	6033      	str	r3, [r6, #0]
 801672e:	b32f      	cbz	r7, 801677c <rcl_validate_topic_name+0x98>
 8016730:	2000      	movs	r0, #0
 8016732:	6038      	str	r0, [r7, #0]
 8016734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016738:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 801673c:	461c      	mov	r4, r3
 801673e:	4619      	mov	r1, r3
 8016740:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8016744:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8016748:	f1be 0f09 	cmp.w	lr, #9
 801674c:	d919      	bls.n	8016782 <rcl_validate_topic_name+0x9e>
 801674e:	f022 0e20 	bic.w	lr, r2, #32
 8016752:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 8016756:	f1be 0f19 	cmp.w	lr, #25
 801675a:	d912      	bls.n	8016782 <rcl_validate_topic_name+0x9e>
 801675c:	2a5f      	cmp	r2, #95	@ 0x5f
 801675e:	d019      	beq.n	8016794 <rcl_validate_topic_name+0xb0>
 8016760:	2a2f      	cmp	r2, #47	@ 0x2f
 8016762:	d051      	beq.n	8016808 <rcl_validate_topic_name+0x124>
 8016764:	2a7e      	cmp	r2, #126	@ 0x7e
 8016766:	d048      	beq.n	80167fa <rcl_validate_topic_name+0x116>
 8016768:	2a7b      	cmp	r2, #123	@ 0x7b
 801676a:	d054      	beq.n	8016816 <rcl_validate_topic_name+0x132>
 801676c:	2a7d      	cmp	r2, #125	@ 0x7d
 801676e:	d161      	bne.n	8016834 <rcl_validate_topic_name+0x150>
 8016770:	2c00      	cmp	r4, #0
 8016772:	d155      	bne.n	8016820 <rcl_validate_topic_name+0x13c>
 8016774:	2305      	movs	r3, #5
 8016776:	6033      	str	r3, [r6, #0]
 8016778:	b107      	cbz	r7, 801677c <rcl_validate_topic_name+0x98>
 801677a:	6039      	str	r1, [r7, #0]
 801677c:	2000      	movs	r0, #0
 801677e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016782:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8016786:	0752      	lsls	r2, r2, #29
 8016788:	d504      	bpl.n	8016794 <rcl_validate_topic_name+0xb0>
 801678a:	b11c      	cbz	r4, 8016794 <rcl_validate_topic_name+0xb0>
 801678c:	b111      	cbz	r1, 8016794 <rcl_validate_topic_name+0xb0>
 801678e:	1e4a      	subs	r2, r1, #1
 8016790:	429a      	cmp	r2, r3
 8016792:	d02d      	beq.n	80167f0 <rcl_validate_topic_name+0x10c>
 8016794:	3101      	adds	r1, #1
 8016796:	4288      	cmp	r0, r1
 8016798:	d1d2      	bne.n	8016740 <rcl_validate_topic_name+0x5c>
 801679a:	2c00      	cmp	r4, #0
 801679c:	d145      	bne.n	801682a <rcl_validate_topic_name+0x146>
 801679e:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 80167a2:	d04f      	beq.n	8016844 <rcl_validate_topic_name+0x160>
 80167a4:	4620      	mov	r0, r4
 80167a6:	2301      	movs	r3, #1
 80167a8:	e006      	b.n	80167b8 <rcl_validate_topic_name+0xd4>
 80167aa:	428b      	cmp	r3, r1
 80167ac:	f105 0501 	add.w	r5, r5, #1
 80167b0:	f103 0201 	add.w	r2, r3, #1
 80167b4:	d236      	bcs.n	8016824 <rcl_validate_topic_name+0x140>
 80167b6:	4613      	mov	r3, r2
 80167b8:	4580      	cmp	r8, r0
 80167ba:	f100 0001 	add.w	r0, r0, #1
 80167be:	d0f4      	beq.n	80167aa <rcl_validate_topic_name+0xc6>
 80167c0:	782a      	ldrb	r2, [r5, #0]
 80167c2:	2a2f      	cmp	r2, #47	@ 0x2f
 80167c4:	d1f1      	bne.n	80167aa <rcl_validate_topic_name+0xc6>
 80167c6:	786a      	ldrb	r2, [r5, #1]
 80167c8:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80167cc:	0754      	lsls	r4, r2, #29
 80167ce:	d5ec      	bpl.n	80167aa <rcl_validate_topic_name+0xc6>
 80167d0:	2204      	movs	r2, #4
 80167d2:	6032      	str	r2, [r6, #0]
 80167d4:	2f00      	cmp	r7, #0
 80167d6:	d0d1      	beq.n	801677c <rcl_validate_topic_name+0x98>
 80167d8:	603b      	str	r3, [r7, #0]
 80167da:	2000      	movs	r0, #0
 80167dc:	e7aa      	b.n	8016734 <rcl_validate_topic_name+0x50>
 80167de:	200b      	movs	r0, #11
 80167e0:	4770      	bx	lr
 80167e2:	2304      	movs	r3, #4
 80167e4:	6033      	str	r3, [r6, #0]
 80167e6:	2f00      	cmp	r7, #0
 80167e8:	d1a2      	bne.n	8016730 <rcl_validate_topic_name+0x4c>
 80167ea:	e7c7      	b.n	801677c <rcl_validate_topic_name+0x98>
 80167ec:	200b      	movs	r0, #11
 80167ee:	e7a1      	b.n	8016734 <rcl_validate_topic_name+0x50>
 80167f0:	2309      	movs	r3, #9
 80167f2:	6033      	str	r3, [r6, #0]
 80167f4:	2f00      	cmp	r7, #0
 80167f6:	d1c0      	bne.n	801677a <rcl_validate_topic_name+0x96>
 80167f8:	e7c0      	b.n	801677c <rcl_validate_topic_name+0x98>
 80167fa:	2900      	cmp	r1, #0
 80167fc:	d0ca      	beq.n	8016794 <rcl_validate_topic_name+0xb0>
 80167fe:	2306      	movs	r3, #6
 8016800:	6033      	str	r3, [r6, #0]
 8016802:	2f00      	cmp	r7, #0
 8016804:	d1b9      	bne.n	801677a <rcl_validate_topic_name+0x96>
 8016806:	e7b9      	b.n	801677c <rcl_validate_topic_name+0x98>
 8016808:	2c00      	cmp	r4, #0
 801680a:	d0c3      	beq.n	8016794 <rcl_validate_topic_name+0xb0>
 801680c:	2308      	movs	r3, #8
 801680e:	6033      	str	r3, [r6, #0]
 8016810:	2f00      	cmp	r7, #0
 8016812:	d1b2      	bne.n	801677a <rcl_validate_topic_name+0x96>
 8016814:	e7b2      	b.n	801677c <rcl_validate_topic_name+0x98>
 8016816:	2c00      	cmp	r4, #0
 8016818:	d1f8      	bne.n	801680c <rcl_validate_topic_name+0x128>
 801681a:	460b      	mov	r3, r1
 801681c:	2401      	movs	r4, #1
 801681e:	e7b9      	b.n	8016794 <rcl_validate_topic_name+0xb0>
 8016820:	2400      	movs	r4, #0
 8016822:	e7b7      	b.n	8016794 <rcl_validate_topic_name+0xb0>
 8016824:	2000      	movs	r0, #0
 8016826:	6030      	str	r0, [r6, #0]
 8016828:	e784      	b.n	8016734 <rcl_validate_topic_name+0x50>
 801682a:	2205      	movs	r2, #5
 801682c:	6032      	str	r2, [r6, #0]
 801682e:	2f00      	cmp	r7, #0
 8016830:	d1d2      	bne.n	80167d8 <rcl_validate_topic_name+0xf4>
 8016832:	e7a3      	b.n	801677c <rcl_validate_topic_name+0x98>
 8016834:	2c00      	cmp	r4, #0
 8016836:	bf14      	ite	ne
 8016838:	2308      	movne	r3, #8
 801683a:	2303      	moveq	r3, #3
 801683c:	6033      	str	r3, [r6, #0]
 801683e:	2f00      	cmp	r7, #0
 8016840:	d19b      	bne.n	801677a <rcl_validate_topic_name+0x96>
 8016842:	e79b      	b.n	801677c <rcl_validate_topic_name+0x98>
 8016844:	2301      	movs	r3, #1
 8016846:	e00a      	b.n	801685e <rcl_validate_topic_name+0x17a>
 8016848:	2c01      	cmp	r4, #1
 801684a:	d013      	beq.n	8016874 <rcl_validate_topic_name+0x190>
 801684c:	4299      	cmp	r1, r3
 801684e:	f104 0401 	add.w	r4, r4, #1
 8016852:	f105 0501 	add.w	r5, r5, #1
 8016856:	f103 0201 	add.w	r2, r3, #1
 801685a:	d9e3      	bls.n	8016824 <rcl_validate_topic_name+0x140>
 801685c:	4613      	mov	r3, r2
 801685e:	45a0      	cmp	r8, r4
 8016860:	d0f4      	beq.n	801684c <rcl_validate_topic_name+0x168>
 8016862:	782a      	ldrb	r2, [r5, #0]
 8016864:	2a2f      	cmp	r2, #47	@ 0x2f
 8016866:	d1ef      	bne.n	8016848 <rcl_validate_topic_name+0x164>
 8016868:	786a      	ldrb	r2, [r5, #1]
 801686a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801686e:	0752      	lsls	r2, r2, #29
 8016870:	d5ec      	bpl.n	801684c <rcl_validate_topic_name+0x168>
 8016872:	e7ad      	b.n	80167d0 <rcl_validate_topic_name+0xec>
 8016874:	2307      	movs	r3, #7
 8016876:	6033      	str	r3, [r6, #0]
 8016878:	2f00      	cmp	r7, #0
 801687a:	f43f af7f 	beq.w	801677c <rcl_validate_topic_name+0x98>
 801687e:	603c      	str	r4, [r7, #0]
 8016880:	2000      	movs	r0, #0
 8016882:	e757      	b.n	8016734 <rcl_validate_topic_name+0x50>
 8016884:	0801ac6e 	.word	0x0801ac6e

08016888 <on_status>:
 8016888:	b082      	sub	sp, #8
 801688a:	b002      	add	sp, #8
 801688c:	4770      	bx	lr
 801688e:	bf00      	nop

08016890 <on_topic>:
 8016890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016894:	4a22      	ldr	r2, [pc, #136]	@ (8016920 <on_topic+0x90>)
 8016896:	b094      	sub	sp, #80	@ 0x50
 8016898:	6812      	ldr	r2, [r2, #0]
 801689a:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 801689c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 80168a0:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 80168a4:	b3c2      	cbz	r2, 8016918 <on_topic+0x88>
 80168a6:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 80168aa:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 80168ae:	e001      	b.n	80168b4 <on_topic+0x24>
 80168b0:	6852      	ldr	r2, [r2, #4]
 80168b2:	b38a      	cbz	r2, 8016918 <on_topic+0x88>
 80168b4:	6894      	ldr	r4, [r2, #8]
 80168b6:	8aa3      	ldrh	r3, [r4, #20]
 80168b8:	428b      	cmp	r3, r1
 80168ba:	d1f9      	bne.n	80168b0 <on_topic+0x20>
 80168bc:	7da3      	ldrb	r3, [r4, #22]
 80168be:	4283      	cmp	r3, r0
 80168c0:	d1f6      	bne.n	80168b0 <on_topic+0x20>
 80168c2:	2248      	movs	r2, #72	@ 0x48
 80168c4:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80168c8:	4668      	mov	r0, sp
 80168ca:	f001 fba8 	bl	801801e <memcpy>
 80168ce:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 80168d2:	cb0c      	ldmia	r3, {r2, r3}
 80168d4:	4620      	mov	r0, r4
 80168d6:	f7f6 f9c3 	bl	800cc60 <rmw_uxrce_get_static_input_buffer_for_entity>
 80168da:	4607      	mov	r7, r0
 80168dc:	b1e0      	cbz	r0, 8016918 <on_topic+0x88>
 80168de:	f8d0 8008 	ldr.w	r8, [r0, #8]
 80168e2:	4632      	mov	r2, r6
 80168e4:	4628      	mov	r0, r5
 80168e6:	f108 0110 	add.w	r1, r8, #16
 80168ea:	f7fd faa5 	bl	8013e38 <ucdr_deserialize_array_uint8_t>
 80168ee:	b930      	cbnz	r0, 80168fe <on_topic+0x6e>
 80168f0:	480c      	ldr	r0, [pc, #48]	@ (8016924 <on_topic+0x94>)
 80168f2:	4639      	mov	r1, r7
 80168f4:	b014      	add	sp, #80	@ 0x50
 80168f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80168fa:	f7fc bb2b 	b.w	8012f54 <put_memory>
 80168fe:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 8016902:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 8016906:	f7fd f97d 	bl	8013c04 <rmw_uros_epoch_nanos>
 801690a:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 801690e:	2305      	movs	r3, #5
 8016910:	e942 0102 	strd	r0, r1, [r2, #-8]
 8016914:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8016918:	b014      	add	sp, #80	@ 0x50
 801691a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801691e:	bf00      	nop
 8016920:	200111fc 	.word	0x200111fc
 8016924:	200111ec 	.word	0x200111ec

08016928 <on_request>:
 8016928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801692c:	4823      	ldr	r0, [pc, #140]	@ (80169bc <on_request+0x94>)
 801692e:	b094      	sub	sp, #80	@ 0x50
 8016930:	6800      	ldr	r0, [r0, #0]
 8016932:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8016934:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8016938:	9113      	str	r1, [sp, #76]	@ 0x4c
 801693a:	2800      	cmp	r0, #0
 801693c:	d03b      	beq.n	80169b6 <on_request+0x8e>
 801693e:	461d      	mov	r5, r3
 8016940:	e001      	b.n	8016946 <on_request+0x1e>
 8016942:	6840      	ldr	r0, [r0, #4]
 8016944:	b3b8      	cbz	r0, 80169b6 <on_request+0x8e>
 8016946:	6884      	ldr	r4, [r0, #8]
 8016948:	8b21      	ldrh	r1, [r4, #24]
 801694a:	4291      	cmp	r1, r2
 801694c:	d1f9      	bne.n	8016942 <on_request+0x1a>
 801694e:	2248      	movs	r2, #72	@ 0x48
 8016950:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8016954:	4668      	mov	r0, sp
 8016956:	f001 fb62 	bl	801801e <memcpy>
 801695a:	f104 0320 	add.w	r3, r4, #32
 801695e:	cb0c      	ldmia	r3, {r2, r3}
 8016960:	4620      	mov	r0, r4
 8016962:	f7f6 f97d 	bl	800cc60 <rmw_uxrce_get_static_input_buffer_for_entity>
 8016966:	4680      	mov	r8, r0
 8016968:	b328      	cbz	r0, 80169b6 <on_request+0x8e>
 801696a:	4638      	mov	r0, r7
 801696c:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8016970:	4632      	mov	r2, r6
 8016972:	f107 0110 	add.w	r1, r7, #16
 8016976:	f7fd fa5f 	bl	8013e38 <ucdr_deserialize_array_uint8_t>
 801697a:	b930      	cbnz	r0, 801698a <on_request+0x62>
 801697c:	4810      	ldr	r0, [pc, #64]	@ (80169c0 <on_request+0x98>)
 801697e:	4641      	mov	r1, r8
 8016980:	b014      	add	sp, #80	@ 0x50
 8016982:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016986:	f7fc bae5 	b.w	8012f54 <put_memory>
 801698a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801698c:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 8016990:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8016994:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8016998:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801699c:	e895 0003 	ldmia.w	r5, {r0, r1}
 80169a0:	e88c 0003 	stmia.w	ip, {r0, r1}
 80169a4:	f7fd f92e 	bl	8013c04 <rmw_uros_epoch_nanos>
 80169a8:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 80169ac:	2303      	movs	r3, #3
 80169ae:	e942 0102 	strd	r0, r1, [r2, #-8]
 80169b2:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 80169b6:	b014      	add	sp, #80	@ 0x50
 80169b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80169bc:	200111cc 	.word	0x200111cc
 80169c0:	200111ec 	.word	0x200111ec

080169c4 <on_reply>:
 80169c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80169c8:	4821      	ldr	r0, [pc, #132]	@ (8016a50 <on_reply+0x8c>)
 80169ca:	b094      	sub	sp, #80	@ 0x50
 80169cc:	6800      	ldr	r0, [r0, #0]
 80169ce:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 80169d0:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 80169d4:	9113      	str	r1, [sp, #76]	@ 0x4c
 80169d6:	b3b8      	cbz	r0, 8016a48 <on_reply+0x84>
 80169d8:	461d      	mov	r5, r3
 80169da:	e001      	b.n	80169e0 <on_reply+0x1c>
 80169dc:	6840      	ldr	r0, [r0, #4]
 80169de:	b398      	cbz	r0, 8016a48 <on_reply+0x84>
 80169e0:	6884      	ldr	r4, [r0, #8]
 80169e2:	8b21      	ldrh	r1, [r4, #24]
 80169e4:	4291      	cmp	r1, r2
 80169e6:	d1f9      	bne.n	80169dc <on_reply+0x18>
 80169e8:	2248      	movs	r2, #72	@ 0x48
 80169ea:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 80169ee:	4668      	mov	r0, sp
 80169f0:	f001 fb15 	bl	801801e <memcpy>
 80169f4:	f104 0320 	add.w	r3, r4, #32
 80169f8:	cb0c      	ldmia	r3, {r2, r3}
 80169fa:	4620      	mov	r0, r4
 80169fc:	f7f6 f930 	bl	800cc60 <rmw_uxrce_get_static_input_buffer_for_entity>
 8016a00:	4680      	mov	r8, r0
 8016a02:	b308      	cbz	r0, 8016a48 <on_reply+0x84>
 8016a04:	4638      	mov	r0, r7
 8016a06:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8016a0a:	4632      	mov	r2, r6
 8016a0c:	f107 0110 	add.w	r1, r7, #16
 8016a10:	f7fd fa12 	bl	8013e38 <ucdr_deserialize_array_uint8_t>
 8016a14:	b930      	cbnz	r0, 8016a24 <on_reply+0x60>
 8016a16:	480f      	ldr	r0, [pc, #60]	@ (8016a54 <on_reply+0x90>)
 8016a18:	4641      	mov	r1, r8
 8016a1a:	b014      	add	sp, #80	@ 0x50
 8016a1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016a20:	f7fc ba98 	b.w	8012f54 <put_memory>
 8016a24:	2200      	movs	r2, #0
 8016a26:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 8016a2a:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8016a2e:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8016a32:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 8016a36:	f7fd f8e5 	bl	8013c04 <rmw_uros_epoch_nanos>
 8016a3a:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8016a3e:	2304      	movs	r3, #4
 8016a40:	e942 0102 	strd	r0, r1, [r2, #-8]
 8016a44:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8016a48:	b014      	add	sp, #80	@ 0x50
 8016a4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016a4e:	bf00      	nop
 8016a50:	2000c8dc 	.word	0x2000c8dc
 8016a54:	200111ec 	.word	0x200111ec

08016a58 <rosidl_runtime_c__String__init>:
 8016a58:	b510      	push	{r4, lr}
 8016a5a:	4604      	mov	r4, r0
 8016a5c:	b086      	sub	sp, #24
 8016a5e:	b170      	cbz	r0, 8016a7e <rosidl_runtime_c__String__init+0x26>
 8016a60:	a801      	add	r0, sp, #4
 8016a62:	f7f4 ff5f 	bl	800b924 <rcutils_get_default_allocator>
 8016a66:	9b01      	ldr	r3, [sp, #4]
 8016a68:	9905      	ldr	r1, [sp, #20]
 8016a6a:	2001      	movs	r0, #1
 8016a6c:	4798      	blx	r3
 8016a6e:	6020      	str	r0, [r4, #0]
 8016a70:	b128      	cbz	r0, 8016a7e <rosidl_runtime_c__String__init+0x26>
 8016a72:	2100      	movs	r1, #0
 8016a74:	2201      	movs	r2, #1
 8016a76:	7001      	strb	r1, [r0, #0]
 8016a78:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8016a7c:	4610      	mov	r0, r2
 8016a7e:	b006      	add	sp, #24
 8016a80:	bd10      	pop	{r4, pc}
 8016a82:	bf00      	nop

08016a84 <rosidl_runtime_c__String__fini>:
 8016a84:	b320      	cbz	r0, 8016ad0 <rosidl_runtime_c__String__fini+0x4c>
 8016a86:	b510      	push	{r4, lr}
 8016a88:	6803      	ldr	r3, [r0, #0]
 8016a8a:	b086      	sub	sp, #24
 8016a8c:	4604      	mov	r4, r0
 8016a8e:	b173      	cbz	r3, 8016aae <rosidl_runtime_c__String__fini+0x2a>
 8016a90:	6883      	ldr	r3, [r0, #8]
 8016a92:	b1f3      	cbz	r3, 8016ad2 <rosidl_runtime_c__String__fini+0x4e>
 8016a94:	a801      	add	r0, sp, #4
 8016a96:	f7f4 ff45 	bl	800b924 <rcutils_get_default_allocator>
 8016a9a:	9b02      	ldr	r3, [sp, #8]
 8016a9c:	9905      	ldr	r1, [sp, #20]
 8016a9e:	6820      	ldr	r0, [r4, #0]
 8016aa0:	4798      	blx	r3
 8016aa2:	2300      	movs	r3, #0
 8016aa4:	e9c4 3300 	strd	r3, r3, [r4]
 8016aa8:	60a3      	str	r3, [r4, #8]
 8016aaa:	b006      	add	sp, #24
 8016aac:	bd10      	pop	{r4, pc}
 8016aae:	6843      	ldr	r3, [r0, #4]
 8016ab0:	b9db      	cbnz	r3, 8016aea <rosidl_runtime_c__String__fini+0x66>
 8016ab2:	6883      	ldr	r3, [r0, #8]
 8016ab4:	2b00      	cmp	r3, #0
 8016ab6:	d0f8      	beq.n	8016aaa <rosidl_runtime_c__String__fini+0x26>
 8016ab8:	4b12      	ldr	r3, [pc, #72]	@ (8016b04 <rosidl_runtime_c__String__fini+0x80>)
 8016aba:	4813      	ldr	r0, [pc, #76]	@ (8016b08 <rosidl_runtime_c__String__fini+0x84>)
 8016abc:	681b      	ldr	r3, [r3, #0]
 8016abe:	2251      	movs	r2, #81	@ 0x51
 8016ac0:	68db      	ldr	r3, [r3, #12]
 8016ac2:	2101      	movs	r1, #1
 8016ac4:	f000 ffda 	bl	8017a7c <fwrite>
 8016ac8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016acc:	f000 f83e 	bl	8016b4c <exit>
 8016ad0:	4770      	bx	lr
 8016ad2:	4b0c      	ldr	r3, [pc, #48]	@ (8016b04 <rosidl_runtime_c__String__fini+0x80>)
 8016ad4:	480d      	ldr	r0, [pc, #52]	@ (8016b0c <rosidl_runtime_c__String__fini+0x88>)
 8016ad6:	681b      	ldr	r3, [r3, #0]
 8016ad8:	224c      	movs	r2, #76	@ 0x4c
 8016ada:	68db      	ldr	r3, [r3, #12]
 8016adc:	2101      	movs	r1, #1
 8016ade:	f000 ffcd 	bl	8017a7c <fwrite>
 8016ae2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016ae6:	f000 f831 	bl	8016b4c <exit>
 8016aea:	4b06      	ldr	r3, [pc, #24]	@ (8016b04 <rosidl_runtime_c__String__fini+0x80>)
 8016aec:	4808      	ldr	r0, [pc, #32]	@ (8016b10 <rosidl_runtime_c__String__fini+0x8c>)
 8016aee:	681b      	ldr	r3, [r3, #0]
 8016af0:	224e      	movs	r2, #78	@ 0x4e
 8016af2:	68db      	ldr	r3, [r3, #12]
 8016af4:	2101      	movs	r1, #1
 8016af6:	f000 ffc1 	bl	8017a7c <fwrite>
 8016afa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016afe:	f000 f825 	bl	8016b4c <exit>
 8016b02:	bf00      	nop
 8016b04:	200000c8 	.word	0x200000c8
 8016b08:	0801abac 	.word	0x0801abac
 8016b0c:	0801ab0c 	.word	0x0801ab0c
 8016b10:	0801ab5c 	.word	0x0801ab5c

08016b14 <calloc>:
 8016b14:	4b02      	ldr	r3, [pc, #8]	@ (8016b20 <calloc+0xc>)
 8016b16:	460a      	mov	r2, r1
 8016b18:	4601      	mov	r1, r0
 8016b1a:	6818      	ldr	r0, [r3, #0]
 8016b1c:	f000 b802 	b.w	8016b24 <_calloc_r>
 8016b20:	200000c8 	.word	0x200000c8

08016b24 <_calloc_r>:
 8016b24:	b570      	push	{r4, r5, r6, lr}
 8016b26:	fba1 5402 	umull	r5, r4, r1, r2
 8016b2a:	b93c      	cbnz	r4, 8016b3c <_calloc_r+0x18>
 8016b2c:	4629      	mov	r1, r5
 8016b2e:	f000 f899 	bl	8016c64 <_malloc_r>
 8016b32:	4606      	mov	r6, r0
 8016b34:	b928      	cbnz	r0, 8016b42 <_calloc_r+0x1e>
 8016b36:	2600      	movs	r6, #0
 8016b38:	4630      	mov	r0, r6
 8016b3a:	bd70      	pop	{r4, r5, r6, pc}
 8016b3c:	220c      	movs	r2, #12
 8016b3e:	6002      	str	r2, [r0, #0]
 8016b40:	e7f9      	b.n	8016b36 <_calloc_r+0x12>
 8016b42:	462a      	mov	r2, r5
 8016b44:	4621      	mov	r1, r4
 8016b46:	f001 f947 	bl	8017dd8 <memset>
 8016b4a:	e7f5      	b.n	8016b38 <_calloc_r+0x14>

08016b4c <exit>:
 8016b4c:	b508      	push	{r3, lr}
 8016b4e:	4b06      	ldr	r3, [pc, #24]	@ (8016b68 <exit+0x1c>)
 8016b50:	4604      	mov	r4, r0
 8016b52:	b113      	cbz	r3, 8016b5a <exit+0xe>
 8016b54:	2100      	movs	r1, #0
 8016b56:	f3af 8000 	nop.w
 8016b5a:	4b04      	ldr	r3, [pc, #16]	@ (8016b6c <exit+0x20>)
 8016b5c:	681b      	ldr	r3, [r3, #0]
 8016b5e:	b103      	cbz	r3, 8016b62 <exit+0x16>
 8016b60:	4798      	blx	r3
 8016b62:	4620      	mov	r0, r4
 8016b64:	f7ec f8ac 	bl	8002cc0 <_exit>
 8016b68:	00000000 	.word	0x00000000
 8016b6c:	20011444 	.word	0x20011444

08016b70 <getenv>:
 8016b70:	b507      	push	{r0, r1, r2, lr}
 8016b72:	4b04      	ldr	r3, [pc, #16]	@ (8016b84 <getenv+0x14>)
 8016b74:	4601      	mov	r1, r0
 8016b76:	aa01      	add	r2, sp, #4
 8016b78:	6818      	ldr	r0, [r3, #0]
 8016b7a:	f000 f805 	bl	8016b88 <_findenv_r>
 8016b7e:	b003      	add	sp, #12
 8016b80:	f85d fb04 	ldr.w	pc, [sp], #4
 8016b84:	200000c8 	.word	0x200000c8

08016b88 <_findenv_r>:
 8016b88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b8c:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8016bfc <_findenv_r+0x74>
 8016b90:	4606      	mov	r6, r0
 8016b92:	4689      	mov	r9, r1
 8016b94:	4617      	mov	r7, r2
 8016b96:	f002 f8bb 	bl	8018d10 <__env_lock>
 8016b9a:	f8da 4000 	ldr.w	r4, [sl]
 8016b9e:	b134      	cbz	r4, 8016bae <_findenv_r+0x26>
 8016ba0:	464b      	mov	r3, r9
 8016ba2:	4698      	mov	r8, r3
 8016ba4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016ba8:	b13a      	cbz	r2, 8016bba <_findenv_r+0x32>
 8016baa:	2a3d      	cmp	r2, #61	@ 0x3d
 8016bac:	d1f9      	bne.n	8016ba2 <_findenv_r+0x1a>
 8016bae:	4630      	mov	r0, r6
 8016bb0:	f002 f8b4 	bl	8018d1c <__env_unlock>
 8016bb4:	2000      	movs	r0, #0
 8016bb6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016bba:	eba8 0809 	sub.w	r8, r8, r9
 8016bbe:	46a3      	mov	fp, r4
 8016bc0:	f854 0b04 	ldr.w	r0, [r4], #4
 8016bc4:	2800      	cmp	r0, #0
 8016bc6:	d0f2      	beq.n	8016bae <_findenv_r+0x26>
 8016bc8:	4642      	mov	r2, r8
 8016bca:	4649      	mov	r1, r9
 8016bcc:	f001 f919 	bl	8017e02 <strncmp>
 8016bd0:	2800      	cmp	r0, #0
 8016bd2:	d1f4      	bne.n	8016bbe <_findenv_r+0x36>
 8016bd4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8016bd8:	eb03 0508 	add.w	r5, r3, r8
 8016bdc:	f813 3008 	ldrb.w	r3, [r3, r8]
 8016be0:	2b3d      	cmp	r3, #61	@ 0x3d
 8016be2:	d1ec      	bne.n	8016bbe <_findenv_r+0x36>
 8016be4:	f8da 3000 	ldr.w	r3, [sl]
 8016be8:	ebab 0303 	sub.w	r3, fp, r3
 8016bec:	109b      	asrs	r3, r3, #2
 8016bee:	4630      	mov	r0, r6
 8016bf0:	603b      	str	r3, [r7, #0]
 8016bf2:	f002 f893 	bl	8018d1c <__env_unlock>
 8016bf6:	1c68      	adds	r0, r5, #1
 8016bf8:	e7dd      	b.n	8016bb6 <_findenv_r+0x2e>
 8016bfa:	bf00      	nop
 8016bfc:	20000000 	.word	0x20000000

08016c00 <malloc>:
 8016c00:	4b02      	ldr	r3, [pc, #8]	@ (8016c0c <malloc+0xc>)
 8016c02:	4601      	mov	r1, r0
 8016c04:	6818      	ldr	r0, [r3, #0]
 8016c06:	f000 b82d 	b.w	8016c64 <_malloc_r>
 8016c0a:	bf00      	nop
 8016c0c:	200000c8 	.word	0x200000c8

08016c10 <free>:
 8016c10:	4b02      	ldr	r3, [pc, #8]	@ (8016c1c <free+0xc>)
 8016c12:	4601      	mov	r1, r0
 8016c14:	6818      	ldr	r0, [r3, #0]
 8016c16:	f002 b887 	b.w	8018d28 <_free_r>
 8016c1a:	bf00      	nop
 8016c1c:	200000c8 	.word	0x200000c8

08016c20 <sbrk_aligned>:
 8016c20:	b570      	push	{r4, r5, r6, lr}
 8016c22:	4e0f      	ldr	r6, [pc, #60]	@ (8016c60 <sbrk_aligned+0x40>)
 8016c24:	460c      	mov	r4, r1
 8016c26:	6831      	ldr	r1, [r6, #0]
 8016c28:	4605      	mov	r5, r0
 8016c2a:	b911      	cbnz	r1, 8016c32 <sbrk_aligned+0x12>
 8016c2c:	f001 f9a0 	bl	8017f70 <_sbrk_r>
 8016c30:	6030      	str	r0, [r6, #0]
 8016c32:	4621      	mov	r1, r4
 8016c34:	4628      	mov	r0, r5
 8016c36:	f001 f99b 	bl	8017f70 <_sbrk_r>
 8016c3a:	1c43      	adds	r3, r0, #1
 8016c3c:	d103      	bne.n	8016c46 <sbrk_aligned+0x26>
 8016c3e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8016c42:	4620      	mov	r0, r4
 8016c44:	bd70      	pop	{r4, r5, r6, pc}
 8016c46:	1cc4      	adds	r4, r0, #3
 8016c48:	f024 0403 	bic.w	r4, r4, #3
 8016c4c:	42a0      	cmp	r0, r4
 8016c4e:	d0f8      	beq.n	8016c42 <sbrk_aligned+0x22>
 8016c50:	1a21      	subs	r1, r4, r0
 8016c52:	4628      	mov	r0, r5
 8016c54:	f001 f98c 	bl	8017f70 <_sbrk_r>
 8016c58:	3001      	adds	r0, #1
 8016c5a:	d1f2      	bne.n	8016c42 <sbrk_aligned+0x22>
 8016c5c:	e7ef      	b.n	8016c3e <sbrk_aligned+0x1e>
 8016c5e:	bf00      	nop
 8016c60:	20011304 	.word	0x20011304

08016c64 <_malloc_r>:
 8016c64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016c68:	1ccd      	adds	r5, r1, #3
 8016c6a:	f025 0503 	bic.w	r5, r5, #3
 8016c6e:	3508      	adds	r5, #8
 8016c70:	2d0c      	cmp	r5, #12
 8016c72:	bf38      	it	cc
 8016c74:	250c      	movcc	r5, #12
 8016c76:	2d00      	cmp	r5, #0
 8016c78:	4606      	mov	r6, r0
 8016c7a:	db01      	blt.n	8016c80 <_malloc_r+0x1c>
 8016c7c:	42a9      	cmp	r1, r5
 8016c7e:	d904      	bls.n	8016c8a <_malloc_r+0x26>
 8016c80:	230c      	movs	r3, #12
 8016c82:	6033      	str	r3, [r6, #0]
 8016c84:	2000      	movs	r0, #0
 8016c86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016c8a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8016d60 <_malloc_r+0xfc>
 8016c8e:	f000 f869 	bl	8016d64 <__malloc_lock>
 8016c92:	f8d8 3000 	ldr.w	r3, [r8]
 8016c96:	461c      	mov	r4, r3
 8016c98:	bb44      	cbnz	r4, 8016cec <_malloc_r+0x88>
 8016c9a:	4629      	mov	r1, r5
 8016c9c:	4630      	mov	r0, r6
 8016c9e:	f7ff ffbf 	bl	8016c20 <sbrk_aligned>
 8016ca2:	1c43      	adds	r3, r0, #1
 8016ca4:	4604      	mov	r4, r0
 8016ca6:	d158      	bne.n	8016d5a <_malloc_r+0xf6>
 8016ca8:	f8d8 4000 	ldr.w	r4, [r8]
 8016cac:	4627      	mov	r7, r4
 8016cae:	2f00      	cmp	r7, #0
 8016cb0:	d143      	bne.n	8016d3a <_malloc_r+0xd6>
 8016cb2:	2c00      	cmp	r4, #0
 8016cb4:	d04b      	beq.n	8016d4e <_malloc_r+0xea>
 8016cb6:	6823      	ldr	r3, [r4, #0]
 8016cb8:	4639      	mov	r1, r7
 8016cba:	4630      	mov	r0, r6
 8016cbc:	eb04 0903 	add.w	r9, r4, r3
 8016cc0:	f001 f956 	bl	8017f70 <_sbrk_r>
 8016cc4:	4581      	cmp	r9, r0
 8016cc6:	d142      	bne.n	8016d4e <_malloc_r+0xea>
 8016cc8:	6821      	ldr	r1, [r4, #0]
 8016cca:	1a6d      	subs	r5, r5, r1
 8016ccc:	4629      	mov	r1, r5
 8016cce:	4630      	mov	r0, r6
 8016cd0:	f7ff ffa6 	bl	8016c20 <sbrk_aligned>
 8016cd4:	3001      	adds	r0, #1
 8016cd6:	d03a      	beq.n	8016d4e <_malloc_r+0xea>
 8016cd8:	6823      	ldr	r3, [r4, #0]
 8016cda:	442b      	add	r3, r5
 8016cdc:	6023      	str	r3, [r4, #0]
 8016cde:	f8d8 3000 	ldr.w	r3, [r8]
 8016ce2:	685a      	ldr	r2, [r3, #4]
 8016ce4:	bb62      	cbnz	r2, 8016d40 <_malloc_r+0xdc>
 8016ce6:	f8c8 7000 	str.w	r7, [r8]
 8016cea:	e00f      	b.n	8016d0c <_malloc_r+0xa8>
 8016cec:	6822      	ldr	r2, [r4, #0]
 8016cee:	1b52      	subs	r2, r2, r5
 8016cf0:	d420      	bmi.n	8016d34 <_malloc_r+0xd0>
 8016cf2:	2a0b      	cmp	r2, #11
 8016cf4:	d917      	bls.n	8016d26 <_malloc_r+0xc2>
 8016cf6:	1961      	adds	r1, r4, r5
 8016cf8:	42a3      	cmp	r3, r4
 8016cfa:	6025      	str	r5, [r4, #0]
 8016cfc:	bf18      	it	ne
 8016cfe:	6059      	strne	r1, [r3, #4]
 8016d00:	6863      	ldr	r3, [r4, #4]
 8016d02:	bf08      	it	eq
 8016d04:	f8c8 1000 	streq.w	r1, [r8]
 8016d08:	5162      	str	r2, [r4, r5]
 8016d0a:	604b      	str	r3, [r1, #4]
 8016d0c:	4630      	mov	r0, r6
 8016d0e:	f000 f82f 	bl	8016d70 <__malloc_unlock>
 8016d12:	f104 000b 	add.w	r0, r4, #11
 8016d16:	1d23      	adds	r3, r4, #4
 8016d18:	f020 0007 	bic.w	r0, r0, #7
 8016d1c:	1ac2      	subs	r2, r0, r3
 8016d1e:	bf1c      	itt	ne
 8016d20:	1a1b      	subne	r3, r3, r0
 8016d22:	50a3      	strne	r3, [r4, r2]
 8016d24:	e7af      	b.n	8016c86 <_malloc_r+0x22>
 8016d26:	6862      	ldr	r2, [r4, #4]
 8016d28:	42a3      	cmp	r3, r4
 8016d2a:	bf0c      	ite	eq
 8016d2c:	f8c8 2000 	streq.w	r2, [r8]
 8016d30:	605a      	strne	r2, [r3, #4]
 8016d32:	e7eb      	b.n	8016d0c <_malloc_r+0xa8>
 8016d34:	4623      	mov	r3, r4
 8016d36:	6864      	ldr	r4, [r4, #4]
 8016d38:	e7ae      	b.n	8016c98 <_malloc_r+0x34>
 8016d3a:	463c      	mov	r4, r7
 8016d3c:	687f      	ldr	r7, [r7, #4]
 8016d3e:	e7b6      	b.n	8016cae <_malloc_r+0x4a>
 8016d40:	461a      	mov	r2, r3
 8016d42:	685b      	ldr	r3, [r3, #4]
 8016d44:	42a3      	cmp	r3, r4
 8016d46:	d1fb      	bne.n	8016d40 <_malloc_r+0xdc>
 8016d48:	2300      	movs	r3, #0
 8016d4a:	6053      	str	r3, [r2, #4]
 8016d4c:	e7de      	b.n	8016d0c <_malloc_r+0xa8>
 8016d4e:	230c      	movs	r3, #12
 8016d50:	6033      	str	r3, [r6, #0]
 8016d52:	4630      	mov	r0, r6
 8016d54:	f000 f80c 	bl	8016d70 <__malloc_unlock>
 8016d58:	e794      	b.n	8016c84 <_malloc_r+0x20>
 8016d5a:	6005      	str	r5, [r0, #0]
 8016d5c:	e7d6      	b.n	8016d0c <_malloc_r+0xa8>
 8016d5e:	bf00      	nop
 8016d60:	20011308 	.word	0x20011308

08016d64 <__malloc_lock>:
 8016d64:	4801      	ldr	r0, [pc, #4]	@ (8016d6c <__malloc_lock+0x8>)
 8016d66:	f001 b950 	b.w	801800a <__retarget_lock_acquire_recursive>
 8016d6a:	bf00      	nop
 8016d6c:	2001144d 	.word	0x2001144d

08016d70 <__malloc_unlock>:
 8016d70:	4801      	ldr	r0, [pc, #4]	@ (8016d78 <__malloc_unlock+0x8>)
 8016d72:	f001 b94b 	b.w	801800c <__retarget_lock_release_recursive>
 8016d76:	bf00      	nop
 8016d78:	2001144d 	.word	0x2001144d

08016d7c <srand>:
 8016d7c:	b538      	push	{r3, r4, r5, lr}
 8016d7e:	4b10      	ldr	r3, [pc, #64]	@ (8016dc0 <srand+0x44>)
 8016d80:	681d      	ldr	r5, [r3, #0]
 8016d82:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016d84:	4604      	mov	r4, r0
 8016d86:	b9b3      	cbnz	r3, 8016db6 <srand+0x3a>
 8016d88:	2018      	movs	r0, #24
 8016d8a:	f7ff ff39 	bl	8016c00 <malloc>
 8016d8e:	4602      	mov	r2, r0
 8016d90:	6328      	str	r0, [r5, #48]	@ 0x30
 8016d92:	b920      	cbnz	r0, 8016d9e <srand+0x22>
 8016d94:	4b0b      	ldr	r3, [pc, #44]	@ (8016dc4 <srand+0x48>)
 8016d96:	480c      	ldr	r0, [pc, #48]	@ (8016dc8 <srand+0x4c>)
 8016d98:	2146      	movs	r1, #70	@ 0x46
 8016d9a:	f001 f94f 	bl	801803c <__assert_func>
 8016d9e:	490b      	ldr	r1, [pc, #44]	@ (8016dcc <srand+0x50>)
 8016da0:	4b0b      	ldr	r3, [pc, #44]	@ (8016dd0 <srand+0x54>)
 8016da2:	e9c0 1300 	strd	r1, r3, [r0]
 8016da6:	4b0b      	ldr	r3, [pc, #44]	@ (8016dd4 <srand+0x58>)
 8016da8:	6083      	str	r3, [r0, #8]
 8016daa:	230b      	movs	r3, #11
 8016dac:	8183      	strh	r3, [r0, #12]
 8016dae:	2100      	movs	r1, #0
 8016db0:	2001      	movs	r0, #1
 8016db2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8016db6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016db8:	2200      	movs	r2, #0
 8016dba:	611c      	str	r4, [r3, #16]
 8016dbc:	615a      	str	r2, [r3, #20]
 8016dbe:	bd38      	pop	{r3, r4, r5, pc}
 8016dc0:	200000c8 	.word	0x200000c8
 8016dc4:	0801abfe 	.word	0x0801abfe
 8016dc8:	0801ac15 	.word	0x0801ac15
 8016dcc:	abcd330e 	.word	0xabcd330e
 8016dd0:	e66d1234 	.word	0xe66d1234
 8016dd4:	0005deec 	.word	0x0005deec

08016dd8 <rand>:
 8016dd8:	4b16      	ldr	r3, [pc, #88]	@ (8016e34 <rand+0x5c>)
 8016dda:	b510      	push	{r4, lr}
 8016ddc:	681c      	ldr	r4, [r3, #0]
 8016dde:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016de0:	b9b3      	cbnz	r3, 8016e10 <rand+0x38>
 8016de2:	2018      	movs	r0, #24
 8016de4:	f7ff ff0c 	bl	8016c00 <malloc>
 8016de8:	4602      	mov	r2, r0
 8016dea:	6320      	str	r0, [r4, #48]	@ 0x30
 8016dec:	b920      	cbnz	r0, 8016df8 <rand+0x20>
 8016dee:	4b12      	ldr	r3, [pc, #72]	@ (8016e38 <rand+0x60>)
 8016df0:	4812      	ldr	r0, [pc, #72]	@ (8016e3c <rand+0x64>)
 8016df2:	2152      	movs	r1, #82	@ 0x52
 8016df4:	f001 f922 	bl	801803c <__assert_func>
 8016df8:	4911      	ldr	r1, [pc, #68]	@ (8016e40 <rand+0x68>)
 8016dfa:	4b12      	ldr	r3, [pc, #72]	@ (8016e44 <rand+0x6c>)
 8016dfc:	e9c0 1300 	strd	r1, r3, [r0]
 8016e00:	4b11      	ldr	r3, [pc, #68]	@ (8016e48 <rand+0x70>)
 8016e02:	6083      	str	r3, [r0, #8]
 8016e04:	230b      	movs	r3, #11
 8016e06:	8183      	strh	r3, [r0, #12]
 8016e08:	2100      	movs	r1, #0
 8016e0a:	2001      	movs	r0, #1
 8016e0c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8016e10:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8016e12:	480e      	ldr	r0, [pc, #56]	@ (8016e4c <rand+0x74>)
 8016e14:	690b      	ldr	r3, [r1, #16]
 8016e16:	694c      	ldr	r4, [r1, #20]
 8016e18:	4a0d      	ldr	r2, [pc, #52]	@ (8016e50 <rand+0x78>)
 8016e1a:	4358      	muls	r0, r3
 8016e1c:	fb02 0004 	mla	r0, r2, r4, r0
 8016e20:	fba3 3202 	umull	r3, r2, r3, r2
 8016e24:	3301      	adds	r3, #1
 8016e26:	eb40 0002 	adc.w	r0, r0, r2
 8016e2a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8016e2e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8016e32:	bd10      	pop	{r4, pc}
 8016e34:	200000c8 	.word	0x200000c8
 8016e38:	0801abfe 	.word	0x0801abfe
 8016e3c:	0801ac15 	.word	0x0801ac15
 8016e40:	abcd330e 	.word	0xabcd330e
 8016e44:	e66d1234 	.word	0xe66d1234
 8016e48:	0005deec 	.word	0x0005deec
 8016e4c:	5851f42d 	.word	0x5851f42d
 8016e50:	4c957f2d 	.word	0x4c957f2d

08016e54 <realloc>:
 8016e54:	4b02      	ldr	r3, [pc, #8]	@ (8016e60 <realloc+0xc>)
 8016e56:	460a      	mov	r2, r1
 8016e58:	4601      	mov	r1, r0
 8016e5a:	6818      	ldr	r0, [r3, #0]
 8016e5c:	f000 b802 	b.w	8016e64 <_realloc_r>
 8016e60:	200000c8 	.word	0x200000c8

08016e64 <_realloc_r>:
 8016e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e68:	4680      	mov	r8, r0
 8016e6a:	4615      	mov	r5, r2
 8016e6c:	460c      	mov	r4, r1
 8016e6e:	b921      	cbnz	r1, 8016e7a <_realloc_r+0x16>
 8016e70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016e74:	4611      	mov	r1, r2
 8016e76:	f7ff bef5 	b.w	8016c64 <_malloc_r>
 8016e7a:	b92a      	cbnz	r2, 8016e88 <_realloc_r+0x24>
 8016e7c:	f001 ff54 	bl	8018d28 <_free_r>
 8016e80:	2400      	movs	r4, #0
 8016e82:	4620      	mov	r0, r4
 8016e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e88:	f002 fb1a 	bl	80194c0 <_malloc_usable_size_r>
 8016e8c:	4285      	cmp	r5, r0
 8016e8e:	4606      	mov	r6, r0
 8016e90:	d802      	bhi.n	8016e98 <_realloc_r+0x34>
 8016e92:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8016e96:	d8f4      	bhi.n	8016e82 <_realloc_r+0x1e>
 8016e98:	4629      	mov	r1, r5
 8016e9a:	4640      	mov	r0, r8
 8016e9c:	f7ff fee2 	bl	8016c64 <_malloc_r>
 8016ea0:	4607      	mov	r7, r0
 8016ea2:	2800      	cmp	r0, #0
 8016ea4:	d0ec      	beq.n	8016e80 <_realloc_r+0x1c>
 8016ea6:	42b5      	cmp	r5, r6
 8016ea8:	462a      	mov	r2, r5
 8016eaa:	4621      	mov	r1, r4
 8016eac:	bf28      	it	cs
 8016eae:	4632      	movcs	r2, r6
 8016eb0:	f001 f8b5 	bl	801801e <memcpy>
 8016eb4:	4621      	mov	r1, r4
 8016eb6:	4640      	mov	r0, r8
 8016eb8:	f001 ff36 	bl	8018d28 <_free_r>
 8016ebc:	463c      	mov	r4, r7
 8016ebe:	e7e0      	b.n	8016e82 <_realloc_r+0x1e>

08016ec0 <_strtoul_l.constprop.0>:
 8016ec0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016ec4:	4e34      	ldr	r6, [pc, #208]	@ (8016f98 <_strtoul_l.constprop.0+0xd8>)
 8016ec6:	4686      	mov	lr, r0
 8016ec8:	460d      	mov	r5, r1
 8016eca:	4628      	mov	r0, r5
 8016ecc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016ed0:	5d37      	ldrb	r7, [r6, r4]
 8016ed2:	f017 0708 	ands.w	r7, r7, #8
 8016ed6:	d1f8      	bne.n	8016eca <_strtoul_l.constprop.0+0xa>
 8016ed8:	2c2d      	cmp	r4, #45	@ 0x2d
 8016eda:	d12f      	bne.n	8016f3c <_strtoul_l.constprop.0+0x7c>
 8016edc:	782c      	ldrb	r4, [r5, #0]
 8016ede:	2701      	movs	r7, #1
 8016ee0:	1c85      	adds	r5, r0, #2
 8016ee2:	f033 0010 	bics.w	r0, r3, #16
 8016ee6:	d109      	bne.n	8016efc <_strtoul_l.constprop.0+0x3c>
 8016ee8:	2c30      	cmp	r4, #48	@ 0x30
 8016eea:	d12c      	bne.n	8016f46 <_strtoul_l.constprop.0+0x86>
 8016eec:	7828      	ldrb	r0, [r5, #0]
 8016eee:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8016ef2:	2858      	cmp	r0, #88	@ 0x58
 8016ef4:	d127      	bne.n	8016f46 <_strtoul_l.constprop.0+0x86>
 8016ef6:	786c      	ldrb	r4, [r5, #1]
 8016ef8:	2310      	movs	r3, #16
 8016efa:	3502      	adds	r5, #2
 8016efc:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8016f00:	2600      	movs	r6, #0
 8016f02:	fbb8 f8f3 	udiv	r8, r8, r3
 8016f06:	fb03 f908 	mul.w	r9, r3, r8
 8016f0a:	ea6f 0909 	mvn.w	r9, r9
 8016f0e:	4630      	mov	r0, r6
 8016f10:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8016f14:	f1bc 0f09 	cmp.w	ip, #9
 8016f18:	d81c      	bhi.n	8016f54 <_strtoul_l.constprop.0+0x94>
 8016f1a:	4664      	mov	r4, ip
 8016f1c:	42a3      	cmp	r3, r4
 8016f1e:	dd2a      	ble.n	8016f76 <_strtoul_l.constprop.0+0xb6>
 8016f20:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8016f24:	d007      	beq.n	8016f36 <_strtoul_l.constprop.0+0x76>
 8016f26:	4580      	cmp	r8, r0
 8016f28:	d322      	bcc.n	8016f70 <_strtoul_l.constprop.0+0xb0>
 8016f2a:	d101      	bne.n	8016f30 <_strtoul_l.constprop.0+0x70>
 8016f2c:	45a1      	cmp	r9, r4
 8016f2e:	db1f      	blt.n	8016f70 <_strtoul_l.constprop.0+0xb0>
 8016f30:	fb00 4003 	mla	r0, r0, r3, r4
 8016f34:	2601      	movs	r6, #1
 8016f36:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016f3a:	e7e9      	b.n	8016f10 <_strtoul_l.constprop.0+0x50>
 8016f3c:	2c2b      	cmp	r4, #43	@ 0x2b
 8016f3e:	bf04      	itt	eq
 8016f40:	782c      	ldrbeq	r4, [r5, #0]
 8016f42:	1c85      	addeq	r5, r0, #2
 8016f44:	e7cd      	b.n	8016ee2 <_strtoul_l.constprop.0+0x22>
 8016f46:	2b00      	cmp	r3, #0
 8016f48:	d1d8      	bne.n	8016efc <_strtoul_l.constprop.0+0x3c>
 8016f4a:	2c30      	cmp	r4, #48	@ 0x30
 8016f4c:	bf0c      	ite	eq
 8016f4e:	2308      	moveq	r3, #8
 8016f50:	230a      	movne	r3, #10
 8016f52:	e7d3      	b.n	8016efc <_strtoul_l.constprop.0+0x3c>
 8016f54:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8016f58:	f1bc 0f19 	cmp.w	ip, #25
 8016f5c:	d801      	bhi.n	8016f62 <_strtoul_l.constprop.0+0xa2>
 8016f5e:	3c37      	subs	r4, #55	@ 0x37
 8016f60:	e7dc      	b.n	8016f1c <_strtoul_l.constprop.0+0x5c>
 8016f62:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8016f66:	f1bc 0f19 	cmp.w	ip, #25
 8016f6a:	d804      	bhi.n	8016f76 <_strtoul_l.constprop.0+0xb6>
 8016f6c:	3c57      	subs	r4, #87	@ 0x57
 8016f6e:	e7d5      	b.n	8016f1c <_strtoul_l.constprop.0+0x5c>
 8016f70:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8016f74:	e7df      	b.n	8016f36 <_strtoul_l.constprop.0+0x76>
 8016f76:	1c73      	adds	r3, r6, #1
 8016f78:	d106      	bne.n	8016f88 <_strtoul_l.constprop.0+0xc8>
 8016f7a:	2322      	movs	r3, #34	@ 0x22
 8016f7c:	f8ce 3000 	str.w	r3, [lr]
 8016f80:	4630      	mov	r0, r6
 8016f82:	b932      	cbnz	r2, 8016f92 <_strtoul_l.constprop.0+0xd2>
 8016f84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016f88:	b107      	cbz	r7, 8016f8c <_strtoul_l.constprop.0+0xcc>
 8016f8a:	4240      	negs	r0, r0
 8016f8c:	2a00      	cmp	r2, #0
 8016f8e:	d0f9      	beq.n	8016f84 <_strtoul_l.constprop.0+0xc4>
 8016f90:	b106      	cbz	r6, 8016f94 <_strtoul_l.constprop.0+0xd4>
 8016f92:	1e69      	subs	r1, r5, #1
 8016f94:	6011      	str	r1, [r2, #0]
 8016f96:	e7f5      	b.n	8016f84 <_strtoul_l.constprop.0+0xc4>
 8016f98:	0801ac6e 	.word	0x0801ac6e

08016f9c <strtoul>:
 8016f9c:	4613      	mov	r3, r2
 8016f9e:	460a      	mov	r2, r1
 8016fa0:	4601      	mov	r1, r0
 8016fa2:	4802      	ldr	r0, [pc, #8]	@ (8016fac <strtoul+0x10>)
 8016fa4:	6800      	ldr	r0, [r0, #0]
 8016fa6:	f7ff bf8b 	b.w	8016ec0 <_strtoul_l.constprop.0>
 8016faa:	bf00      	nop
 8016fac:	200000c8 	.word	0x200000c8

08016fb0 <__cvt>:
 8016fb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016fb4:	ec57 6b10 	vmov	r6, r7, d0
 8016fb8:	2f00      	cmp	r7, #0
 8016fba:	460c      	mov	r4, r1
 8016fbc:	4619      	mov	r1, r3
 8016fbe:	463b      	mov	r3, r7
 8016fc0:	bfbb      	ittet	lt
 8016fc2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8016fc6:	461f      	movlt	r7, r3
 8016fc8:	2300      	movge	r3, #0
 8016fca:	232d      	movlt	r3, #45	@ 0x2d
 8016fcc:	700b      	strb	r3, [r1, #0]
 8016fce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016fd0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8016fd4:	4691      	mov	r9, r2
 8016fd6:	f023 0820 	bic.w	r8, r3, #32
 8016fda:	bfbc      	itt	lt
 8016fdc:	4632      	movlt	r2, r6
 8016fde:	4616      	movlt	r6, r2
 8016fe0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8016fe4:	d005      	beq.n	8016ff2 <__cvt+0x42>
 8016fe6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8016fea:	d100      	bne.n	8016fee <__cvt+0x3e>
 8016fec:	3401      	adds	r4, #1
 8016fee:	2102      	movs	r1, #2
 8016ff0:	e000      	b.n	8016ff4 <__cvt+0x44>
 8016ff2:	2103      	movs	r1, #3
 8016ff4:	ab03      	add	r3, sp, #12
 8016ff6:	9301      	str	r3, [sp, #4]
 8016ff8:	ab02      	add	r3, sp, #8
 8016ffa:	9300      	str	r3, [sp, #0]
 8016ffc:	ec47 6b10 	vmov	d0, r6, r7
 8017000:	4653      	mov	r3, sl
 8017002:	4622      	mov	r2, r4
 8017004:	f001 f8c0 	bl	8018188 <_dtoa_r>
 8017008:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801700c:	4605      	mov	r5, r0
 801700e:	d119      	bne.n	8017044 <__cvt+0x94>
 8017010:	f019 0f01 	tst.w	r9, #1
 8017014:	d00e      	beq.n	8017034 <__cvt+0x84>
 8017016:	eb00 0904 	add.w	r9, r0, r4
 801701a:	2200      	movs	r2, #0
 801701c:	2300      	movs	r3, #0
 801701e:	4630      	mov	r0, r6
 8017020:	4639      	mov	r1, r7
 8017022:	f7e9 fd81 	bl	8000b28 <__aeabi_dcmpeq>
 8017026:	b108      	cbz	r0, 801702c <__cvt+0x7c>
 8017028:	f8cd 900c 	str.w	r9, [sp, #12]
 801702c:	2230      	movs	r2, #48	@ 0x30
 801702e:	9b03      	ldr	r3, [sp, #12]
 8017030:	454b      	cmp	r3, r9
 8017032:	d31e      	bcc.n	8017072 <__cvt+0xc2>
 8017034:	9b03      	ldr	r3, [sp, #12]
 8017036:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017038:	1b5b      	subs	r3, r3, r5
 801703a:	4628      	mov	r0, r5
 801703c:	6013      	str	r3, [r2, #0]
 801703e:	b004      	add	sp, #16
 8017040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017044:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8017048:	eb00 0904 	add.w	r9, r0, r4
 801704c:	d1e5      	bne.n	801701a <__cvt+0x6a>
 801704e:	7803      	ldrb	r3, [r0, #0]
 8017050:	2b30      	cmp	r3, #48	@ 0x30
 8017052:	d10a      	bne.n	801706a <__cvt+0xba>
 8017054:	2200      	movs	r2, #0
 8017056:	2300      	movs	r3, #0
 8017058:	4630      	mov	r0, r6
 801705a:	4639      	mov	r1, r7
 801705c:	f7e9 fd64 	bl	8000b28 <__aeabi_dcmpeq>
 8017060:	b918      	cbnz	r0, 801706a <__cvt+0xba>
 8017062:	f1c4 0401 	rsb	r4, r4, #1
 8017066:	f8ca 4000 	str.w	r4, [sl]
 801706a:	f8da 3000 	ldr.w	r3, [sl]
 801706e:	4499      	add	r9, r3
 8017070:	e7d3      	b.n	801701a <__cvt+0x6a>
 8017072:	1c59      	adds	r1, r3, #1
 8017074:	9103      	str	r1, [sp, #12]
 8017076:	701a      	strb	r2, [r3, #0]
 8017078:	e7d9      	b.n	801702e <__cvt+0x7e>

0801707a <__exponent>:
 801707a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801707c:	2900      	cmp	r1, #0
 801707e:	bfba      	itte	lt
 8017080:	4249      	neglt	r1, r1
 8017082:	232d      	movlt	r3, #45	@ 0x2d
 8017084:	232b      	movge	r3, #43	@ 0x2b
 8017086:	2909      	cmp	r1, #9
 8017088:	7002      	strb	r2, [r0, #0]
 801708a:	7043      	strb	r3, [r0, #1]
 801708c:	dd29      	ble.n	80170e2 <__exponent+0x68>
 801708e:	f10d 0307 	add.w	r3, sp, #7
 8017092:	461d      	mov	r5, r3
 8017094:	270a      	movs	r7, #10
 8017096:	461a      	mov	r2, r3
 8017098:	fbb1 f6f7 	udiv	r6, r1, r7
 801709c:	fb07 1416 	mls	r4, r7, r6, r1
 80170a0:	3430      	adds	r4, #48	@ 0x30
 80170a2:	f802 4c01 	strb.w	r4, [r2, #-1]
 80170a6:	460c      	mov	r4, r1
 80170a8:	2c63      	cmp	r4, #99	@ 0x63
 80170aa:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80170ae:	4631      	mov	r1, r6
 80170b0:	dcf1      	bgt.n	8017096 <__exponent+0x1c>
 80170b2:	3130      	adds	r1, #48	@ 0x30
 80170b4:	1e94      	subs	r4, r2, #2
 80170b6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80170ba:	1c41      	adds	r1, r0, #1
 80170bc:	4623      	mov	r3, r4
 80170be:	42ab      	cmp	r3, r5
 80170c0:	d30a      	bcc.n	80170d8 <__exponent+0x5e>
 80170c2:	f10d 0309 	add.w	r3, sp, #9
 80170c6:	1a9b      	subs	r3, r3, r2
 80170c8:	42ac      	cmp	r4, r5
 80170ca:	bf88      	it	hi
 80170cc:	2300      	movhi	r3, #0
 80170ce:	3302      	adds	r3, #2
 80170d0:	4403      	add	r3, r0
 80170d2:	1a18      	subs	r0, r3, r0
 80170d4:	b003      	add	sp, #12
 80170d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80170d8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80170dc:	f801 6f01 	strb.w	r6, [r1, #1]!
 80170e0:	e7ed      	b.n	80170be <__exponent+0x44>
 80170e2:	2330      	movs	r3, #48	@ 0x30
 80170e4:	3130      	adds	r1, #48	@ 0x30
 80170e6:	7083      	strb	r3, [r0, #2]
 80170e8:	70c1      	strb	r1, [r0, #3]
 80170ea:	1d03      	adds	r3, r0, #4
 80170ec:	e7f1      	b.n	80170d2 <__exponent+0x58>
	...

080170f0 <_printf_float>:
 80170f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80170f4:	b08d      	sub	sp, #52	@ 0x34
 80170f6:	460c      	mov	r4, r1
 80170f8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80170fc:	4616      	mov	r6, r2
 80170fe:	461f      	mov	r7, r3
 8017100:	4605      	mov	r5, r0
 8017102:	f000 fea7 	bl	8017e54 <_localeconv_r>
 8017106:	6803      	ldr	r3, [r0, #0]
 8017108:	9304      	str	r3, [sp, #16]
 801710a:	4618      	mov	r0, r3
 801710c:	f7e9 f8e0 	bl	80002d0 <strlen>
 8017110:	2300      	movs	r3, #0
 8017112:	930a      	str	r3, [sp, #40]	@ 0x28
 8017114:	f8d8 3000 	ldr.w	r3, [r8]
 8017118:	9005      	str	r0, [sp, #20]
 801711a:	3307      	adds	r3, #7
 801711c:	f023 0307 	bic.w	r3, r3, #7
 8017120:	f103 0208 	add.w	r2, r3, #8
 8017124:	f894 a018 	ldrb.w	sl, [r4, #24]
 8017128:	f8d4 b000 	ldr.w	fp, [r4]
 801712c:	f8c8 2000 	str.w	r2, [r8]
 8017130:	e9d3 8900 	ldrd	r8, r9, [r3]
 8017134:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8017138:	9307      	str	r3, [sp, #28]
 801713a:	f8cd 8018 	str.w	r8, [sp, #24]
 801713e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8017142:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017146:	4b9c      	ldr	r3, [pc, #624]	@ (80173b8 <_printf_float+0x2c8>)
 8017148:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801714c:	f7e9 fd1e 	bl	8000b8c <__aeabi_dcmpun>
 8017150:	bb70      	cbnz	r0, 80171b0 <_printf_float+0xc0>
 8017152:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017156:	4b98      	ldr	r3, [pc, #608]	@ (80173b8 <_printf_float+0x2c8>)
 8017158:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801715c:	f7e9 fcf8 	bl	8000b50 <__aeabi_dcmple>
 8017160:	bb30      	cbnz	r0, 80171b0 <_printf_float+0xc0>
 8017162:	2200      	movs	r2, #0
 8017164:	2300      	movs	r3, #0
 8017166:	4640      	mov	r0, r8
 8017168:	4649      	mov	r1, r9
 801716a:	f7e9 fce7 	bl	8000b3c <__aeabi_dcmplt>
 801716e:	b110      	cbz	r0, 8017176 <_printf_float+0x86>
 8017170:	232d      	movs	r3, #45	@ 0x2d
 8017172:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017176:	4a91      	ldr	r2, [pc, #580]	@ (80173bc <_printf_float+0x2cc>)
 8017178:	4b91      	ldr	r3, [pc, #580]	@ (80173c0 <_printf_float+0x2d0>)
 801717a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801717e:	bf94      	ite	ls
 8017180:	4690      	movls	r8, r2
 8017182:	4698      	movhi	r8, r3
 8017184:	2303      	movs	r3, #3
 8017186:	6123      	str	r3, [r4, #16]
 8017188:	f02b 0304 	bic.w	r3, fp, #4
 801718c:	6023      	str	r3, [r4, #0]
 801718e:	f04f 0900 	mov.w	r9, #0
 8017192:	9700      	str	r7, [sp, #0]
 8017194:	4633      	mov	r3, r6
 8017196:	aa0b      	add	r2, sp, #44	@ 0x2c
 8017198:	4621      	mov	r1, r4
 801719a:	4628      	mov	r0, r5
 801719c:	f000 f9d2 	bl	8017544 <_printf_common>
 80171a0:	3001      	adds	r0, #1
 80171a2:	f040 808d 	bne.w	80172c0 <_printf_float+0x1d0>
 80171a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80171aa:	b00d      	add	sp, #52	@ 0x34
 80171ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80171b0:	4642      	mov	r2, r8
 80171b2:	464b      	mov	r3, r9
 80171b4:	4640      	mov	r0, r8
 80171b6:	4649      	mov	r1, r9
 80171b8:	f7e9 fce8 	bl	8000b8c <__aeabi_dcmpun>
 80171bc:	b140      	cbz	r0, 80171d0 <_printf_float+0xe0>
 80171be:	464b      	mov	r3, r9
 80171c0:	2b00      	cmp	r3, #0
 80171c2:	bfbc      	itt	lt
 80171c4:	232d      	movlt	r3, #45	@ 0x2d
 80171c6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80171ca:	4a7e      	ldr	r2, [pc, #504]	@ (80173c4 <_printf_float+0x2d4>)
 80171cc:	4b7e      	ldr	r3, [pc, #504]	@ (80173c8 <_printf_float+0x2d8>)
 80171ce:	e7d4      	b.n	801717a <_printf_float+0x8a>
 80171d0:	6863      	ldr	r3, [r4, #4]
 80171d2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80171d6:	9206      	str	r2, [sp, #24]
 80171d8:	1c5a      	adds	r2, r3, #1
 80171da:	d13b      	bne.n	8017254 <_printf_float+0x164>
 80171dc:	2306      	movs	r3, #6
 80171de:	6063      	str	r3, [r4, #4]
 80171e0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80171e4:	2300      	movs	r3, #0
 80171e6:	6022      	str	r2, [r4, #0]
 80171e8:	9303      	str	r3, [sp, #12]
 80171ea:	ab0a      	add	r3, sp, #40	@ 0x28
 80171ec:	e9cd a301 	strd	sl, r3, [sp, #4]
 80171f0:	ab09      	add	r3, sp, #36	@ 0x24
 80171f2:	9300      	str	r3, [sp, #0]
 80171f4:	6861      	ldr	r1, [r4, #4]
 80171f6:	ec49 8b10 	vmov	d0, r8, r9
 80171fa:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80171fe:	4628      	mov	r0, r5
 8017200:	f7ff fed6 	bl	8016fb0 <__cvt>
 8017204:	9b06      	ldr	r3, [sp, #24]
 8017206:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8017208:	2b47      	cmp	r3, #71	@ 0x47
 801720a:	4680      	mov	r8, r0
 801720c:	d129      	bne.n	8017262 <_printf_float+0x172>
 801720e:	1cc8      	adds	r0, r1, #3
 8017210:	db02      	blt.n	8017218 <_printf_float+0x128>
 8017212:	6863      	ldr	r3, [r4, #4]
 8017214:	4299      	cmp	r1, r3
 8017216:	dd41      	ble.n	801729c <_printf_float+0x1ac>
 8017218:	f1aa 0a02 	sub.w	sl, sl, #2
 801721c:	fa5f fa8a 	uxtb.w	sl, sl
 8017220:	3901      	subs	r1, #1
 8017222:	4652      	mov	r2, sl
 8017224:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8017228:	9109      	str	r1, [sp, #36]	@ 0x24
 801722a:	f7ff ff26 	bl	801707a <__exponent>
 801722e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8017230:	1813      	adds	r3, r2, r0
 8017232:	2a01      	cmp	r2, #1
 8017234:	4681      	mov	r9, r0
 8017236:	6123      	str	r3, [r4, #16]
 8017238:	dc02      	bgt.n	8017240 <_printf_float+0x150>
 801723a:	6822      	ldr	r2, [r4, #0]
 801723c:	07d2      	lsls	r2, r2, #31
 801723e:	d501      	bpl.n	8017244 <_printf_float+0x154>
 8017240:	3301      	adds	r3, #1
 8017242:	6123      	str	r3, [r4, #16]
 8017244:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8017248:	2b00      	cmp	r3, #0
 801724a:	d0a2      	beq.n	8017192 <_printf_float+0xa2>
 801724c:	232d      	movs	r3, #45	@ 0x2d
 801724e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017252:	e79e      	b.n	8017192 <_printf_float+0xa2>
 8017254:	9a06      	ldr	r2, [sp, #24]
 8017256:	2a47      	cmp	r2, #71	@ 0x47
 8017258:	d1c2      	bne.n	80171e0 <_printf_float+0xf0>
 801725a:	2b00      	cmp	r3, #0
 801725c:	d1c0      	bne.n	80171e0 <_printf_float+0xf0>
 801725e:	2301      	movs	r3, #1
 8017260:	e7bd      	b.n	80171de <_printf_float+0xee>
 8017262:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8017266:	d9db      	bls.n	8017220 <_printf_float+0x130>
 8017268:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801726c:	d118      	bne.n	80172a0 <_printf_float+0x1b0>
 801726e:	2900      	cmp	r1, #0
 8017270:	6863      	ldr	r3, [r4, #4]
 8017272:	dd0b      	ble.n	801728c <_printf_float+0x19c>
 8017274:	6121      	str	r1, [r4, #16]
 8017276:	b913      	cbnz	r3, 801727e <_printf_float+0x18e>
 8017278:	6822      	ldr	r2, [r4, #0]
 801727a:	07d0      	lsls	r0, r2, #31
 801727c:	d502      	bpl.n	8017284 <_printf_float+0x194>
 801727e:	3301      	adds	r3, #1
 8017280:	440b      	add	r3, r1
 8017282:	6123      	str	r3, [r4, #16]
 8017284:	65a1      	str	r1, [r4, #88]	@ 0x58
 8017286:	f04f 0900 	mov.w	r9, #0
 801728a:	e7db      	b.n	8017244 <_printf_float+0x154>
 801728c:	b913      	cbnz	r3, 8017294 <_printf_float+0x1a4>
 801728e:	6822      	ldr	r2, [r4, #0]
 8017290:	07d2      	lsls	r2, r2, #31
 8017292:	d501      	bpl.n	8017298 <_printf_float+0x1a8>
 8017294:	3302      	adds	r3, #2
 8017296:	e7f4      	b.n	8017282 <_printf_float+0x192>
 8017298:	2301      	movs	r3, #1
 801729a:	e7f2      	b.n	8017282 <_printf_float+0x192>
 801729c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80172a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80172a2:	4299      	cmp	r1, r3
 80172a4:	db05      	blt.n	80172b2 <_printf_float+0x1c2>
 80172a6:	6823      	ldr	r3, [r4, #0]
 80172a8:	6121      	str	r1, [r4, #16]
 80172aa:	07d8      	lsls	r0, r3, #31
 80172ac:	d5ea      	bpl.n	8017284 <_printf_float+0x194>
 80172ae:	1c4b      	adds	r3, r1, #1
 80172b0:	e7e7      	b.n	8017282 <_printf_float+0x192>
 80172b2:	2900      	cmp	r1, #0
 80172b4:	bfd4      	ite	le
 80172b6:	f1c1 0202 	rsble	r2, r1, #2
 80172ba:	2201      	movgt	r2, #1
 80172bc:	4413      	add	r3, r2
 80172be:	e7e0      	b.n	8017282 <_printf_float+0x192>
 80172c0:	6823      	ldr	r3, [r4, #0]
 80172c2:	055a      	lsls	r2, r3, #21
 80172c4:	d407      	bmi.n	80172d6 <_printf_float+0x1e6>
 80172c6:	6923      	ldr	r3, [r4, #16]
 80172c8:	4642      	mov	r2, r8
 80172ca:	4631      	mov	r1, r6
 80172cc:	4628      	mov	r0, r5
 80172ce:	47b8      	blx	r7
 80172d0:	3001      	adds	r0, #1
 80172d2:	d12b      	bne.n	801732c <_printf_float+0x23c>
 80172d4:	e767      	b.n	80171a6 <_printf_float+0xb6>
 80172d6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80172da:	f240 80dd 	bls.w	8017498 <_printf_float+0x3a8>
 80172de:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80172e2:	2200      	movs	r2, #0
 80172e4:	2300      	movs	r3, #0
 80172e6:	f7e9 fc1f 	bl	8000b28 <__aeabi_dcmpeq>
 80172ea:	2800      	cmp	r0, #0
 80172ec:	d033      	beq.n	8017356 <_printf_float+0x266>
 80172ee:	4a37      	ldr	r2, [pc, #220]	@ (80173cc <_printf_float+0x2dc>)
 80172f0:	2301      	movs	r3, #1
 80172f2:	4631      	mov	r1, r6
 80172f4:	4628      	mov	r0, r5
 80172f6:	47b8      	blx	r7
 80172f8:	3001      	adds	r0, #1
 80172fa:	f43f af54 	beq.w	80171a6 <_printf_float+0xb6>
 80172fe:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8017302:	4543      	cmp	r3, r8
 8017304:	db02      	blt.n	801730c <_printf_float+0x21c>
 8017306:	6823      	ldr	r3, [r4, #0]
 8017308:	07d8      	lsls	r0, r3, #31
 801730a:	d50f      	bpl.n	801732c <_printf_float+0x23c>
 801730c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017310:	4631      	mov	r1, r6
 8017312:	4628      	mov	r0, r5
 8017314:	47b8      	blx	r7
 8017316:	3001      	adds	r0, #1
 8017318:	f43f af45 	beq.w	80171a6 <_printf_float+0xb6>
 801731c:	f04f 0900 	mov.w	r9, #0
 8017320:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8017324:	f104 0a1a 	add.w	sl, r4, #26
 8017328:	45c8      	cmp	r8, r9
 801732a:	dc09      	bgt.n	8017340 <_printf_float+0x250>
 801732c:	6823      	ldr	r3, [r4, #0]
 801732e:	079b      	lsls	r3, r3, #30
 8017330:	f100 8103 	bmi.w	801753a <_printf_float+0x44a>
 8017334:	68e0      	ldr	r0, [r4, #12]
 8017336:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017338:	4298      	cmp	r0, r3
 801733a:	bfb8      	it	lt
 801733c:	4618      	movlt	r0, r3
 801733e:	e734      	b.n	80171aa <_printf_float+0xba>
 8017340:	2301      	movs	r3, #1
 8017342:	4652      	mov	r2, sl
 8017344:	4631      	mov	r1, r6
 8017346:	4628      	mov	r0, r5
 8017348:	47b8      	blx	r7
 801734a:	3001      	adds	r0, #1
 801734c:	f43f af2b 	beq.w	80171a6 <_printf_float+0xb6>
 8017350:	f109 0901 	add.w	r9, r9, #1
 8017354:	e7e8      	b.n	8017328 <_printf_float+0x238>
 8017356:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017358:	2b00      	cmp	r3, #0
 801735a:	dc39      	bgt.n	80173d0 <_printf_float+0x2e0>
 801735c:	4a1b      	ldr	r2, [pc, #108]	@ (80173cc <_printf_float+0x2dc>)
 801735e:	2301      	movs	r3, #1
 8017360:	4631      	mov	r1, r6
 8017362:	4628      	mov	r0, r5
 8017364:	47b8      	blx	r7
 8017366:	3001      	adds	r0, #1
 8017368:	f43f af1d 	beq.w	80171a6 <_printf_float+0xb6>
 801736c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8017370:	ea59 0303 	orrs.w	r3, r9, r3
 8017374:	d102      	bne.n	801737c <_printf_float+0x28c>
 8017376:	6823      	ldr	r3, [r4, #0]
 8017378:	07d9      	lsls	r1, r3, #31
 801737a:	d5d7      	bpl.n	801732c <_printf_float+0x23c>
 801737c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017380:	4631      	mov	r1, r6
 8017382:	4628      	mov	r0, r5
 8017384:	47b8      	blx	r7
 8017386:	3001      	adds	r0, #1
 8017388:	f43f af0d 	beq.w	80171a6 <_printf_float+0xb6>
 801738c:	f04f 0a00 	mov.w	sl, #0
 8017390:	f104 0b1a 	add.w	fp, r4, #26
 8017394:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017396:	425b      	negs	r3, r3
 8017398:	4553      	cmp	r3, sl
 801739a:	dc01      	bgt.n	80173a0 <_printf_float+0x2b0>
 801739c:	464b      	mov	r3, r9
 801739e:	e793      	b.n	80172c8 <_printf_float+0x1d8>
 80173a0:	2301      	movs	r3, #1
 80173a2:	465a      	mov	r2, fp
 80173a4:	4631      	mov	r1, r6
 80173a6:	4628      	mov	r0, r5
 80173a8:	47b8      	blx	r7
 80173aa:	3001      	adds	r0, #1
 80173ac:	f43f aefb 	beq.w	80171a6 <_printf_float+0xb6>
 80173b0:	f10a 0a01 	add.w	sl, sl, #1
 80173b4:	e7ee      	b.n	8017394 <_printf_float+0x2a4>
 80173b6:	bf00      	nop
 80173b8:	7fefffff 	.word	0x7fefffff
 80173bc:	0801ad6e 	.word	0x0801ad6e
 80173c0:	0801ad72 	.word	0x0801ad72
 80173c4:	0801ad76 	.word	0x0801ad76
 80173c8:	0801ad7a 	.word	0x0801ad7a
 80173cc:	0801ad7e 	.word	0x0801ad7e
 80173d0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80173d2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80173d6:	4553      	cmp	r3, sl
 80173d8:	bfa8      	it	ge
 80173da:	4653      	movge	r3, sl
 80173dc:	2b00      	cmp	r3, #0
 80173de:	4699      	mov	r9, r3
 80173e0:	dc36      	bgt.n	8017450 <_printf_float+0x360>
 80173e2:	f04f 0b00 	mov.w	fp, #0
 80173e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80173ea:	f104 021a 	add.w	r2, r4, #26
 80173ee:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80173f0:	9306      	str	r3, [sp, #24]
 80173f2:	eba3 0309 	sub.w	r3, r3, r9
 80173f6:	455b      	cmp	r3, fp
 80173f8:	dc31      	bgt.n	801745e <_printf_float+0x36e>
 80173fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80173fc:	459a      	cmp	sl, r3
 80173fe:	dc3a      	bgt.n	8017476 <_printf_float+0x386>
 8017400:	6823      	ldr	r3, [r4, #0]
 8017402:	07da      	lsls	r2, r3, #31
 8017404:	d437      	bmi.n	8017476 <_printf_float+0x386>
 8017406:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017408:	ebaa 0903 	sub.w	r9, sl, r3
 801740c:	9b06      	ldr	r3, [sp, #24]
 801740e:	ebaa 0303 	sub.w	r3, sl, r3
 8017412:	4599      	cmp	r9, r3
 8017414:	bfa8      	it	ge
 8017416:	4699      	movge	r9, r3
 8017418:	f1b9 0f00 	cmp.w	r9, #0
 801741c:	dc33      	bgt.n	8017486 <_printf_float+0x396>
 801741e:	f04f 0800 	mov.w	r8, #0
 8017422:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017426:	f104 0b1a 	add.w	fp, r4, #26
 801742a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801742c:	ebaa 0303 	sub.w	r3, sl, r3
 8017430:	eba3 0309 	sub.w	r3, r3, r9
 8017434:	4543      	cmp	r3, r8
 8017436:	f77f af79 	ble.w	801732c <_printf_float+0x23c>
 801743a:	2301      	movs	r3, #1
 801743c:	465a      	mov	r2, fp
 801743e:	4631      	mov	r1, r6
 8017440:	4628      	mov	r0, r5
 8017442:	47b8      	blx	r7
 8017444:	3001      	adds	r0, #1
 8017446:	f43f aeae 	beq.w	80171a6 <_printf_float+0xb6>
 801744a:	f108 0801 	add.w	r8, r8, #1
 801744e:	e7ec      	b.n	801742a <_printf_float+0x33a>
 8017450:	4642      	mov	r2, r8
 8017452:	4631      	mov	r1, r6
 8017454:	4628      	mov	r0, r5
 8017456:	47b8      	blx	r7
 8017458:	3001      	adds	r0, #1
 801745a:	d1c2      	bne.n	80173e2 <_printf_float+0x2f2>
 801745c:	e6a3      	b.n	80171a6 <_printf_float+0xb6>
 801745e:	2301      	movs	r3, #1
 8017460:	4631      	mov	r1, r6
 8017462:	4628      	mov	r0, r5
 8017464:	9206      	str	r2, [sp, #24]
 8017466:	47b8      	blx	r7
 8017468:	3001      	adds	r0, #1
 801746a:	f43f ae9c 	beq.w	80171a6 <_printf_float+0xb6>
 801746e:	9a06      	ldr	r2, [sp, #24]
 8017470:	f10b 0b01 	add.w	fp, fp, #1
 8017474:	e7bb      	b.n	80173ee <_printf_float+0x2fe>
 8017476:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801747a:	4631      	mov	r1, r6
 801747c:	4628      	mov	r0, r5
 801747e:	47b8      	blx	r7
 8017480:	3001      	adds	r0, #1
 8017482:	d1c0      	bne.n	8017406 <_printf_float+0x316>
 8017484:	e68f      	b.n	80171a6 <_printf_float+0xb6>
 8017486:	9a06      	ldr	r2, [sp, #24]
 8017488:	464b      	mov	r3, r9
 801748a:	4442      	add	r2, r8
 801748c:	4631      	mov	r1, r6
 801748e:	4628      	mov	r0, r5
 8017490:	47b8      	blx	r7
 8017492:	3001      	adds	r0, #1
 8017494:	d1c3      	bne.n	801741e <_printf_float+0x32e>
 8017496:	e686      	b.n	80171a6 <_printf_float+0xb6>
 8017498:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801749c:	f1ba 0f01 	cmp.w	sl, #1
 80174a0:	dc01      	bgt.n	80174a6 <_printf_float+0x3b6>
 80174a2:	07db      	lsls	r3, r3, #31
 80174a4:	d536      	bpl.n	8017514 <_printf_float+0x424>
 80174a6:	2301      	movs	r3, #1
 80174a8:	4642      	mov	r2, r8
 80174aa:	4631      	mov	r1, r6
 80174ac:	4628      	mov	r0, r5
 80174ae:	47b8      	blx	r7
 80174b0:	3001      	adds	r0, #1
 80174b2:	f43f ae78 	beq.w	80171a6 <_printf_float+0xb6>
 80174b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80174ba:	4631      	mov	r1, r6
 80174bc:	4628      	mov	r0, r5
 80174be:	47b8      	blx	r7
 80174c0:	3001      	adds	r0, #1
 80174c2:	f43f ae70 	beq.w	80171a6 <_printf_float+0xb6>
 80174c6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80174ca:	2200      	movs	r2, #0
 80174cc:	2300      	movs	r3, #0
 80174ce:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80174d2:	f7e9 fb29 	bl	8000b28 <__aeabi_dcmpeq>
 80174d6:	b9c0      	cbnz	r0, 801750a <_printf_float+0x41a>
 80174d8:	4653      	mov	r3, sl
 80174da:	f108 0201 	add.w	r2, r8, #1
 80174de:	4631      	mov	r1, r6
 80174e0:	4628      	mov	r0, r5
 80174e2:	47b8      	blx	r7
 80174e4:	3001      	adds	r0, #1
 80174e6:	d10c      	bne.n	8017502 <_printf_float+0x412>
 80174e8:	e65d      	b.n	80171a6 <_printf_float+0xb6>
 80174ea:	2301      	movs	r3, #1
 80174ec:	465a      	mov	r2, fp
 80174ee:	4631      	mov	r1, r6
 80174f0:	4628      	mov	r0, r5
 80174f2:	47b8      	blx	r7
 80174f4:	3001      	adds	r0, #1
 80174f6:	f43f ae56 	beq.w	80171a6 <_printf_float+0xb6>
 80174fa:	f108 0801 	add.w	r8, r8, #1
 80174fe:	45d0      	cmp	r8, sl
 8017500:	dbf3      	blt.n	80174ea <_printf_float+0x3fa>
 8017502:	464b      	mov	r3, r9
 8017504:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8017508:	e6df      	b.n	80172ca <_printf_float+0x1da>
 801750a:	f04f 0800 	mov.w	r8, #0
 801750e:	f104 0b1a 	add.w	fp, r4, #26
 8017512:	e7f4      	b.n	80174fe <_printf_float+0x40e>
 8017514:	2301      	movs	r3, #1
 8017516:	4642      	mov	r2, r8
 8017518:	e7e1      	b.n	80174de <_printf_float+0x3ee>
 801751a:	2301      	movs	r3, #1
 801751c:	464a      	mov	r2, r9
 801751e:	4631      	mov	r1, r6
 8017520:	4628      	mov	r0, r5
 8017522:	47b8      	blx	r7
 8017524:	3001      	adds	r0, #1
 8017526:	f43f ae3e 	beq.w	80171a6 <_printf_float+0xb6>
 801752a:	f108 0801 	add.w	r8, r8, #1
 801752e:	68e3      	ldr	r3, [r4, #12]
 8017530:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8017532:	1a5b      	subs	r3, r3, r1
 8017534:	4543      	cmp	r3, r8
 8017536:	dcf0      	bgt.n	801751a <_printf_float+0x42a>
 8017538:	e6fc      	b.n	8017334 <_printf_float+0x244>
 801753a:	f04f 0800 	mov.w	r8, #0
 801753e:	f104 0919 	add.w	r9, r4, #25
 8017542:	e7f4      	b.n	801752e <_printf_float+0x43e>

08017544 <_printf_common>:
 8017544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017548:	4616      	mov	r6, r2
 801754a:	4698      	mov	r8, r3
 801754c:	688a      	ldr	r2, [r1, #8]
 801754e:	690b      	ldr	r3, [r1, #16]
 8017550:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8017554:	4293      	cmp	r3, r2
 8017556:	bfb8      	it	lt
 8017558:	4613      	movlt	r3, r2
 801755a:	6033      	str	r3, [r6, #0]
 801755c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8017560:	4607      	mov	r7, r0
 8017562:	460c      	mov	r4, r1
 8017564:	b10a      	cbz	r2, 801756a <_printf_common+0x26>
 8017566:	3301      	adds	r3, #1
 8017568:	6033      	str	r3, [r6, #0]
 801756a:	6823      	ldr	r3, [r4, #0]
 801756c:	0699      	lsls	r1, r3, #26
 801756e:	bf42      	ittt	mi
 8017570:	6833      	ldrmi	r3, [r6, #0]
 8017572:	3302      	addmi	r3, #2
 8017574:	6033      	strmi	r3, [r6, #0]
 8017576:	6825      	ldr	r5, [r4, #0]
 8017578:	f015 0506 	ands.w	r5, r5, #6
 801757c:	d106      	bne.n	801758c <_printf_common+0x48>
 801757e:	f104 0a19 	add.w	sl, r4, #25
 8017582:	68e3      	ldr	r3, [r4, #12]
 8017584:	6832      	ldr	r2, [r6, #0]
 8017586:	1a9b      	subs	r3, r3, r2
 8017588:	42ab      	cmp	r3, r5
 801758a:	dc26      	bgt.n	80175da <_printf_common+0x96>
 801758c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8017590:	6822      	ldr	r2, [r4, #0]
 8017592:	3b00      	subs	r3, #0
 8017594:	bf18      	it	ne
 8017596:	2301      	movne	r3, #1
 8017598:	0692      	lsls	r2, r2, #26
 801759a:	d42b      	bmi.n	80175f4 <_printf_common+0xb0>
 801759c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80175a0:	4641      	mov	r1, r8
 80175a2:	4638      	mov	r0, r7
 80175a4:	47c8      	blx	r9
 80175a6:	3001      	adds	r0, #1
 80175a8:	d01e      	beq.n	80175e8 <_printf_common+0xa4>
 80175aa:	6823      	ldr	r3, [r4, #0]
 80175ac:	6922      	ldr	r2, [r4, #16]
 80175ae:	f003 0306 	and.w	r3, r3, #6
 80175b2:	2b04      	cmp	r3, #4
 80175b4:	bf02      	ittt	eq
 80175b6:	68e5      	ldreq	r5, [r4, #12]
 80175b8:	6833      	ldreq	r3, [r6, #0]
 80175ba:	1aed      	subeq	r5, r5, r3
 80175bc:	68a3      	ldr	r3, [r4, #8]
 80175be:	bf0c      	ite	eq
 80175c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80175c4:	2500      	movne	r5, #0
 80175c6:	4293      	cmp	r3, r2
 80175c8:	bfc4      	itt	gt
 80175ca:	1a9b      	subgt	r3, r3, r2
 80175cc:	18ed      	addgt	r5, r5, r3
 80175ce:	2600      	movs	r6, #0
 80175d0:	341a      	adds	r4, #26
 80175d2:	42b5      	cmp	r5, r6
 80175d4:	d11a      	bne.n	801760c <_printf_common+0xc8>
 80175d6:	2000      	movs	r0, #0
 80175d8:	e008      	b.n	80175ec <_printf_common+0xa8>
 80175da:	2301      	movs	r3, #1
 80175dc:	4652      	mov	r2, sl
 80175de:	4641      	mov	r1, r8
 80175e0:	4638      	mov	r0, r7
 80175e2:	47c8      	blx	r9
 80175e4:	3001      	adds	r0, #1
 80175e6:	d103      	bne.n	80175f0 <_printf_common+0xac>
 80175e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80175ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80175f0:	3501      	adds	r5, #1
 80175f2:	e7c6      	b.n	8017582 <_printf_common+0x3e>
 80175f4:	18e1      	adds	r1, r4, r3
 80175f6:	1c5a      	adds	r2, r3, #1
 80175f8:	2030      	movs	r0, #48	@ 0x30
 80175fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80175fe:	4422      	add	r2, r4
 8017600:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8017604:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8017608:	3302      	adds	r3, #2
 801760a:	e7c7      	b.n	801759c <_printf_common+0x58>
 801760c:	2301      	movs	r3, #1
 801760e:	4622      	mov	r2, r4
 8017610:	4641      	mov	r1, r8
 8017612:	4638      	mov	r0, r7
 8017614:	47c8      	blx	r9
 8017616:	3001      	adds	r0, #1
 8017618:	d0e6      	beq.n	80175e8 <_printf_common+0xa4>
 801761a:	3601      	adds	r6, #1
 801761c:	e7d9      	b.n	80175d2 <_printf_common+0x8e>
	...

08017620 <_printf_i>:
 8017620:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017624:	7e0f      	ldrb	r7, [r1, #24]
 8017626:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8017628:	2f78      	cmp	r7, #120	@ 0x78
 801762a:	4691      	mov	r9, r2
 801762c:	4680      	mov	r8, r0
 801762e:	460c      	mov	r4, r1
 8017630:	469a      	mov	sl, r3
 8017632:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8017636:	d807      	bhi.n	8017648 <_printf_i+0x28>
 8017638:	2f62      	cmp	r7, #98	@ 0x62
 801763a:	d80a      	bhi.n	8017652 <_printf_i+0x32>
 801763c:	2f00      	cmp	r7, #0
 801763e:	f000 80d2 	beq.w	80177e6 <_printf_i+0x1c6>
 8017642:	2f58      	cmp	r7, #88	@ 0x58
 8017644:	f000 80b9 	beq.w	80177ba <_printf_i+0x19a>
 8017648:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801764c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8017650:	e03a      	b.n	80176c8 <_printf_i+0xa8>
 8017652:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8017656:	2b15      	cmp	r3, #21
 8017658:	d8f6      	bhi.n	8017648 <_printf_i+0x28>
 801765a:	a101      	add	r1, pc, #4	@ (adr r1, 8017660 <_printf_i+0x40>)
 801765c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017660:	080176b9 	.word	0x080176b9
 8017664:	080176cd 	.word	0x080176cd
 8017668:	08017649 	.word	0x08017649
 801766c:	08017649 	.word	0x08017649
 8017670:	08017649 	.word	0x08017649
 8017674:	08017649 	.word	0x08017649
 8017678:	080176cd 	.word	0x080176cd
 801767c:	08017649 	.word	0x08017649
 8017680:	08017649 	.word	0x08017649
 8017684:	08017649 	.word	0x08017649
 8017688:	08017649 	.word	0x08017649
 801768c:	080177cd 	.word	0x080177cd
 8017690:	080176f7 	.word	0x080176f7
 8017694:	08017787 	.word	0x08017787
 8017698:	08017649 	.word	0x08017649
 801769c:	08017649 	.word	0x08017649
 80176a0:	080177ef 	.word	0x080177ef
 80176a4:	08017649 	.word	0x08017649
 80176a8:	080176f7 	.word	0x080176f7
 80176ac:	08017649 	.word	0x08017649
 80176b0:	08017649 	.word	0x08017649
 80176b4:	0801778f 	.word	0x0801778f
 80176b8:	6833      	ldr	r3, [r6, #0]
 80176ba:	1d1a      	adds	r2, r3, #4
 80176bc:	681b      	ldr	r3, [r3, #0]
 80176be:	6032      	str	r2, [r6, #0]
 80176c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80176c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80176c8:	2301      	movs	r3, #1
 80176ca:	e09d      	b.n	8017808 <_printf_i+0x1e8>
 80176cc:	6833      	ldr	r3, [r6, #0]
 80176ce:	6820      	ldr	r0, [r4, #0]
 80176d0:	1d19      	adds	r1, r3, #4
 80176d2:	6031      	str	r1, [r6, #0]
 80176d4:	0606      	lsls	r6, r0, #24
 80176d6:	d501      	bpl.n	80176dc <_printf_i+0xbc>
 80176d8:	681d      	ldr	r5, [r3, #0]
 80176da:	e003      	b.n	80176e4 <_printf_i+0xc4>
 80176dc:	0645      	lsls	r5, r0, #25
 80176de:	d5fb      	bpl.n	80176d8 <_printf_i+0xb8>
 80176e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80176e4:	2d00      	cmp	r5, #0
 80176e6:	da03      	bge.n	80176f0 <_printf_i+0xd0>
 80176e8:	232d      	movs	r3, #45	@ 0x2d
 80176ea:	426d      	negs	r5, r5
 80176ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80176f0:	4859      	ldr	r0, [pc, #356]	@ (8017858 <_printf_i+0x238>)
 80176f2:	230a      	movs	r3, #10
 80176f4:	e011      	b.n	801771a <_printf_i+0xfa>
 80176f6:	6821      	ldr	r1, [r4, #0]
 80176f8:	6833      	ldr	r3, [r6, #0]
 80176fa:	0608      	lsls	r0, r1, #24
 80176fc:	f853 5b04 	ldr.w	r5, [r3], #4
 8017700:	d402      	bmi.n	8017708 <_printf_i+0xe8>
 8017702:	0649      	lsls	r1, r1, #25
 8017704:	bf48      	it	mi
 8017706:	b2ad      	uxthmi	r5, r5
 8017708:	2f6f      	cmp	r7, #111	@ 0x6f
 801770a:	4853      	ldr	r0, [pc, #332]	@ (8017858 <_printf_i+0x238>)
 801770c:	6033      	str	r3, [r6, #0]
 801770e:	bf14      	ite	ne
 8017710:	230a      	movne	r3, #10
 8017712:	2308      	moveq	r3, #8
 8017714:	2100      	movs	r1, #0
 8017716:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801771a:	6866      	ldr	r6, [r4, #4]
 801771c:	60a6      	str	r6, [r4, #8]
 801771e:	2e00      	cmp	r6, #0
 8017720:	bfa2      	ittt	ge
 8017722:	6821      	ldrge	r1, [r4, #0]
 8017724:	f021 0104 	bicge.w	r1, r1, #4
 8017728:	6021      	strge	r1, [r4, #0]
 801772a:	b90d      	cbnz	r5, 8017730 <_printf_i+0x110>
 801772c:	2e00      	cmp	r6, #0
 801772e:	d04b      	beq.n	80177c8 <_printf_i+0x1a8>
 8017730:	4616      	mov	r6, r2
 8017732:	fbb5 f1f3 	udiv	r1, r5, r3
 8017736:	fb03 5711 	mls	r7, r3, r1, r5
 801773a:	5dc7      	ldrb	r7, [r0, r7]
 801773c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017740:	462f      	mov	r7, r5
 8017742:	42bb      	cmp	r3, r7
 8017744:	460d      	mov	r5, r1
 8017746:	d9f4      	bls.n	8017732 <_printf_i+0x112>
 8017748:	2b08      	cmp	r3, #8
 801774a:	d10b      	bne.n	8017764 <_printf_i+0x144>
 801774c:	6823      	ldr	r3, [r4, #0]
 801774e:	07df      	lsls	r7, r3, #31
 8017750:	d508      	bpl.n	8017764 <_printf_i+0x144>
 8017752:	6923      	ldr	r3, [r4, #16]
 8017754:	6861      	ldr	r1, [r4, #4]
 8017756:	4299      	cmp	r1, r3
 8017758:	bfde      	ittt	le
 801775a:	2330      	movle	r3, #48	@ 0x30
 801775c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8017760:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8017764:	1b92      	subs	r2, r2, r6
 8017766:	6122      	str	r2, [r4, #16]
 8017768:	f8cd a000 	str.w	sl, [sp]
 801776c:	464b      	mov	r3, r9
 801776e:	aa03      	add	r2, sp, #12
 8017770:	4621      	mov	r1, r4
 8017772:	4640      	mov	r0, r8
 8017774:	f7ff fee6 	bl	8017544 <_printf_common>
 8017778:	3001      	adds	r0, #1
 801777a:	d14a      	bne.n	8017812 <_printf_i+0x1f2>
 801777c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017780:	b004      	add	sp, #16
 8017782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017786:	6823      	ldr	r3, [r4, #0]
 8017788:	f043 0320 	orr.w	r3, r3, #32
 801778c:	6023      	str	r3, [r4, #0]
 801778e:	4833      	ldr	r0, [pc, #204]	@ (801785c <_printf_i+0x23c>)
 8017790:	2778      	movs	r7, #120	@ 0x78
 8017792:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8017796:	6823      	ldr	r3, [r4, #0]
 8017798:	6831      	ldr	r1, [r6, #0]
 801779a:	061f      	lsls	r7, r3, #24
 801779c:	f851 5b04 	ldr.w	r5, [r1], #4
 80177a0:	d402      	bmi.n	80177a8 <_printf_i+0x188>
 80177a2:	065f      	lsls	r7, r3, #25
 80177a4:	bf48      	it	mi
 80177a6:	b2ad      	uxthmi	r5, r5
 80177a8:	6031      	str	r1, [r6, #0]
 80177aa:	07d9      	lsls	r1, r3, #31
 80177ac:	bf44      	itt	mi
 80177ae:	f043 0320 	orrmi.w	r3, r3, #32
 80177b2:	6023      	strmi	r3, [r4, #0]
 80177b4:	b11d      	cbz	r5, 80177be <_printf_i+0x19e>
 80177b6:	2310      	movs	r3, #16
 80177b8:	e7ac      	b.n	8017714 <_printf_i+0xf4>
 80177ba:	4827      	ldr	r0, [pc, #156]	@ (8017858 <_printf_i+0x238>)
 80177bc:	e7e9      	b.n	8017792 <_printf_i+0x172>
 80177be:	6823      	ldr	r3, [r4, #0]
 80177c0:	f023 0320 	bic.w	r3, r3, #32
 80177c4:	6023      	str	r3, [r4, #0]
 80177c6:	e7f6      	b.n	80177b6 <_printf_i+0x196>
 80177c8:	4616      	mov	r6, r2
 80177ca:	e7bd      	b.n	8017748 <_printf_i+0x128>
 80177cc:	6833      	ldr	r3, [r6, #0]
 80177ce:	6825      	ldr	r5, [r4, #0]
 80177d0:	6961      	ldr	r1, [r4, #20]
 80177d2:	1d18      	adds	r0, r3, #4
 80177d4:	6030      	str	r0, [r6, #0]
 80177d6:	062e      	lsls	r6, r5, #24
 80177d8:	681b      	ldr	r3, [r3, #0]
 80177da:	d501      	bpl.n	80177e0 <_printf_i+0x1c0>
 80177dc:	6019      	str	r1, [r3, #0]
 80177de:	e002      	b.n	80177e6 <_printf_i+0x1c6>
 80177e0:	0668      	lsls	r0, r5, #25
 80177e2:	d5fb      	bpl.n	80177dc <_printf_i+0x1bc>
 80177e4:	8019      	strh	r1, [r3, #0]
 80177e6:	2300      	movs	r3, #0
 80177e8:	6123      	str	r3, [r4, #16]
 80177ea:	4616      	mov	r6, r2
 80177ec:	e7bc      	b.n	8017768 <_printf_i+0x148>
 80177ee:	6833      	ldr	r3, [r6, #0]
 80177f0:	1d1a      	adds	r2, r3, #4
 80177f2:	6032      	str	r2, [r6, #0]
 80177f4:	681e      	ldr	r6, [r3, #0]
 80177f6:	6862      	ldr	r2, [r4, #4]
 80177f8:	2100      	movs	r1, #0
 80177fa:	4630      	mov	r0, r6
 80177fc:	f7e8 fd18 	bl	8000230 <memchr>
 8017800:	b108      	cbz	r0, 8017806 <_printf_i+0x1e6>
 8017802:	1b80      	subs	r0, r0, r6
 8017804:	6060      	str	r0, [r4, #4]
 8017806:	6863      	ldr	r3, [r4, #4]
 8017808:	6123      	str	r3, [r4, #16]
 801780a:	2300      	movs	r3, #0
 801780c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017810:	e7aa      	b.n	8017768 <_printf_i+0x148>
 8017812:	6923      	ldr	r3, [r4, #16]
 8017814:	4632      	mov	r2, r6
 8017816:	4649      	mov	r1, r9
 8017818:	4640      	mov	r0, r8
 801781a:	47d0      	blx	sl
 801781c:	3001      	adds	r0, #1
 801781e:	d0ad      	beq.n	801777c <_printf_i+0x15c>
 8017820:	6823      	ldr	r3, [r4, #0]
 8017822:	079b      	lsls	r3, r3, #30
 8017824:	d413      	bmi.n	801784e <_printf_i+0x22e>
 8017826:	68e0      	ldr	r0, [r4, #12]
 8017828:	9b03      	ldr	r3, [sp, #12]
 801782a:	4298      	cmp	r0, r3
 801782c:	bfb8      	it	lt
 801782e:	4618      	movlt	r0, r3
 8017830:	e7a6      	b.n	8017780 <_printf_i+0x160>
 8017832:	2301      	movs	r3, #1
 8017834:	4632      	mov	r2, r6
 8017836:	4649      	mov	r1, r9
 8017838:	4640      	mov	r0, r8
 801783a:	47d0      	blx	sl
 801783c:	3001      	adds	r0, #1
 801783e:	d09d      	beq.n	801777c <_printf_i+0x15c>
 8017840:	3501      	adds	r5, #1
 8017842:	68e3      	ldr	r3, [r4, #12]
 8017844:	9903      	ldr	r1, [sp, #12]
 8017846:	1a5b      	subs	r3, r3, r1
 8017848:	42ab      	cmp	r3, r5
 801784a:	dcf2      	bgt.n	8017832 <_printf_i+0x212>
 801784c:	e7eb      	b.n	8017826 <_printf_i+0x206>
 801784e:	2500      	movs	r5, #0
 8017850:	f104 0619 	add.w	r6, r4, #25
 8017854:	e7f5      	b.n	8017842 <_printf_i+0x222>
 8017856:	bf00      	nop
 8017858:	0801ad80 	.word	0x0801ad80
 801785c:	0801ad91 	.word	0x0801ad91

08017860 <std>:
 8017860:	2300      	movs	r3, #0
 8017862:	b510      	push	{r4, lr}
 8017864:	4604      	mov	r4, r0
 8017866:	e9c0 3300 	strd	r3, r3, [r0]
 801786a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801786e:	6083      	str	r3, [r0, #8]
 8017870:	8181      	strh	r1, [r0, #12]
 8017872:	6643      	str	r3, [r0, #100]	@ 0x64
 8017874:	81c2      	strh	r2, [r0, #14]
 8017876:	6183      	str	r3, [r0, #24]
 8017878:	4619      	mov	r1, r3
 801787a:	2208      	movs	r2, #8
 801787c:	305c      	adds	r0, #92	@ 0x5c
 801787e:	f000 faab 	bl	8017dd8 <memset>
 8017882:	4b0d      	ldr	r3, [pc, #52]	@ (80178b8 <std+0x58>)
 8017884:	6263      	str	r3, [r4, #36]	@ 0x24
 8017886:	4b0d      	ldr	r3, [pc, #52]	@ (80178bc <std+0x5c>)
 8017888:	62a3      	str	r3, [r4, #40]	@ 0x28
 801788a:	4b0d      	ldr	r3, [pc, #52]	@ (80178c0 <std+0x60>)
 801788c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801788e:	4b0d      	ldr	r3, [pc, #52]	@ (80178c4 <std+0x64>)
 8017890:	6323      	str	r3, [r4, #48]	@ 0x30
 8017892:	4b0d      	ldr	r3, [pc, #52]	@ (80178c8 <std+0x68>)
 8017894:	6224      	str	r4, [r4, #32]
 8017896:	429c      	cmp	r4, r3
 8017898:	d006      	beq.n	80178a8 <std+0x48>
 801789a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801789e:	4294      	cmp	r4, r2
 80178a0:	d002      	beq.n	80178a8 <std+0x48>
 80178a2:	33d0      	adds	r3, #208	@ 0xd0
 80178a4:	429c      	cmp	r4, r3
 80178a6:	d105      	bne.n	80178b4 <std+0x54>
 80178a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80178ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80178b0:	f000 bbaa 	b.w	8018008 <__retarget_lock_init_recursive>
 80178b4:	bd10      	pop	{r4, pc}
 80178b6:	bf00      	nop
 80178b8:	08017b65 	.word	0x08017b65
 80178bc:	08017b87 	.word	0x08017b87
 80178c0:	08017bbf 	.word	0x08017bbf
 80178c4:	08017be3 	.word	0x08017be3
 80178c8:	2001130c 	.word	0x2001130c

080178cc <stdio_exit_handler>:
 80178cc:	4a02      	ldr	r2, [pc, #8]	@ (80178d8 <stdio_exit_handler+0xc>)
 80178ce:	4903      	ldr	r1, [pc, #12]	@ (80178dc <stdio_exit_handler+0x10>)
 80178d0:	4803      	ldr	r0, [pc, #12]	@ (80178e0 <stdio_exit_handler+0x14>)
 80178d2:	f000 b869 	b.w	80179a8 <_fwalk_sglue>
 80178d6:	bf00      	nop
 80178d8:	200000bc 	.word	0x200000bc
 80178dc:	08019b0d 	.word	0x08019b0d
 80178e0:	200000cc 	.word	0x200000cc

080178e4 <cleanup_stdio>:
 80178e4:	6841      	ldr	r1, [r0, #4]
 80178e6:	4b0c      	ldr	r3, [pc, #48]	@ (8017918 <cleanup_stdio+0x34>)
 80178e8:	4299      	cmp	r1, r3
 80178ea:	b510      	push	{r4, lr}
 80178ec:	4604      	mov	r4, r0
 80178ee:	d001      	beq.n	80178f4 <cleanup_stdio+0x10>
 80178f0:	f002 f90c 	bl	8019b0c <_fflush_r>
 80178f4:	68a1      	ldr	r1, [r4, #8]
 80178f6:	4b09      	ldr	r3, [pc, #36]	@ (801791c <cleanup_stdio+0x38>)
 80178f8:	4299      	cmp	r1, r3
 80178fa:	d002      	beq.n	8017902 <cleanup_stdio+0x1e>
 80178fc:	4620      	mov	r0, r4
 80178fe:	f002 f905 	bl	8019b0c <_fflush_r>
 8017902:	68e1      	ldr	r1, [r4, #12]
 8017904:	4b06      	ldr	r3, [pc, #24]	@ (8017920 <cleanup_stdio+0x3c>)
 8017906:	4299      	cmp	r1, r3
 8017908:	d004      	beq.n	8017914 <cleanup_stdio+0x30>
 801790a:	4620      	mov	r0, r4
 801790c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017910:	f002 b8fc 	b.w	8019b0c <_fflush_r>
 8017914:	bd10      	pop	{r4, pc}
 8017916:	bf00      	nop
 8017918:	2001130c 	.word	0x2001130c
 801791c:	20011374 	.word	0x20011374
 8017920:	200113dc 	.word	0x200113dc

08017924 <global_stdio_init.part.0>:
 8017924:	b510      	push	{r4, lr}
 8017926:	4b0b      	ldr	r3, [pc, #44]	@ (8017954 <global_stdio_init.part.0+0x30>)
 8017928:	4c0b      	ldr	r4, [pc, #44]	@ (8017958 <global_stdio_init.part.0+0x34>)
 801792a:	4a0c      	ldr	r2, [pc, #48]	@ (801795c <global_stdio_init.part.0+0x38>)
 801792c:	601a      	str	r2, [r3, #0]
 801792e:	4620      	mov	r0, r4
 8017930:	2200      	movs	r2, #0
 8017932:	2104      	movs	r1, #4
 8017934:	f7ff ff94 	bl	8017860 <std>
 8017938:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801793c:	2201      	movs	r2, #1
 801793e:	2109      	movs	r1, #9
 8017940:	f7ff ff8e 	bl	8017860 <std>
 8017944:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8017948:	2202      	movs	r2, #2
 801794a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801794e:	2112      	movs	r1, #18
 8017950:	f7ff bf86 	b.w	8017860 <std>
 8017954:	20011444 	.word	0x20011444
 8017958:	2001130c 	.word	0x2001130c
 801795c:	080178cd 	.word	0x080178cd

08017960 <__sfp_lock_acquire>:
 8017960:	4801      	ldr	r0, [pc, #4]	@ (8017968 <__sfp_lock_acquire+0x8>)
 8017962:	f000 bb52 	b.w	801800a <__retarget_lock_acquire_recursive>
 8017966:	bf00      	nop
 8017968:	2001144e 	.word	0x2001144e

0801796c <__sfp_lock_release>:
 801796c:	4801      	ldr	r0, [pc, #4]	@ (8017974 <__sfp_lock_release+0x8>)
 801796e:	f000 bb4d 	b.w	801800c <__retarget_lock_release_recursive>
 8017972:	bf00      	nop
 8017974:	2001144e 	.word	0x2001144e

08017978 <__sinit>:
 8017978:	b510      	push	{r4, lr}
 801797a:	4604      	mov	r4, r0
 801797c:	f7ff fff0 	bl	8017960 <__sfp_lock_acquire>
 8017980:	6a23      	ldr	r3, [r4, #32]
 8017982:	b11b      	cbz	r3, 801798c <__sinit+0x14>
 8017984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017988:	f7ff bff0 	b.w	801796c <__sfp_lock_release>
 801798c:	4b04      	ldr	r3, [pc, #16]	@ (80179a0 <__sinit+0x28>)
 801798e:	6223      	str	r3, [r4, #32]
 8017990:	4b04      	ldr	r3, [pc, #16]	@ (80179a4 <__sinit+0x2c>)
 8017992:	681b      	ldr	r3, [r3, #0]
 8017994:	2b00      	cmp	r3, #0
 8017996:	d1f5      	bne.n	8017984 <__sinit+0xc>
 8017998:	f7ff ffc4 	bl	8017924 <global_stdio_init.part.0>
 801799c:	e7f2      	b.n	8017984 <__sinit+0xc>
 801799e:	bf00      	nop
 80179a0:	080178e5 	.word	0x080178e5
 80179a4:	20011444 	.word	0x20011444

080179a8 <_fwalk_sglue>:
 80179a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80179ac:	4607      	mov	r7, r0
 80179ae:	4688      	mov	r8, r1
 80179b0:	4614      	mov	r4, r2
 80179b2:	2600      	movs	r6, #0
 80179b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80179b8:	f1b9 0901 	subs.w	r9, r9, #1
 80179bc:	d505      	bpl.n	80179ca <_fwalk_sglue+0x22>
 80179be:	6824      	ldr	r4, [r4, #0]
 80179c0:	2c00      	cmp	r4, #0
 80179c2:	d1f7      	bne.n	80179b4 <_fwalk_sglue+0xc>
 80179c4:	4630      	mov	r0, r6
 80179c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80179ca:	89ab      	ldrh	r3, [r5, #12]
 80179cc:	2b01      	cmp	r3, #1
 80179ce:	d907      	bls.n	80179e0 <_fwalk_sglue+0x38>
 80179d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80179d4:	3301      	adds	r3, #1
 80179d6:	d003      	beq.n	80179e0 <_fwalk_sglue+0x38>
 80179d8:	4629      	mov	r1, r5
 80179da:	4638      	mov	r0, r7
 80179dc:	47c0      	blx	r8
 80179de:	4306      	orrs	r6, r0
 80179e0:	3568      	adds	r5, #104	@ 0x68
 80179e2:	e7e9      	b.n	80179b8 <_fwalk_sglue+0x10>

080179e4 <_fwrite_r>:
 80179e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80179e8:	9c08      	ldr	r4, [sp, #32]
 80179ea:	468a      	mov	sl, r1
 80179ec:	4690      	mov	r8, r2
 80179ee:	fb02 f903 	mul.w	r9, r2, r3
 80179f2:	4606      	mov	r6, r0
 80179f4:	b118      	cbz	r0, 80179fe <_fwrite_r+0x1a>
 80179f6:	6a03      	ldr	r3, [r0, #32]
 80179f8:	b90b      	cbnz	r3, 80179fe <_fwrite_r+0x1a>
 80179fa:	f7ff ffbd 	bl	8017978 <__sinit>
 80179fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017a00:	07dd      	lsls	r5, r3, #31
 8017a02:	d405      	bmi.n	8017a10 <_fwrite_r+0x2c>
 8017a04:	89a3      	ldrh	r3, [r4, #12]
 8017a06:	0598      	lsls	r0, r3, #22
 8017a08:	d402      	bmi.n	8017a10 <_fwrite_r+0x2c>
 8017a0a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017a0c:	f000 fafd 	bl	801800a <__retarget_lock_acquire_recursive>
 8017a10:	89a3      	ldrh	r3, [r4, #12]
 8017a12:	0719      	lsls	r1, r3, #28
 8017a14:	d516      	bpl.n	8017a44 <_fwrite_r+0x60>
 8017a16:	6923      	ldr	r3, [r4, #16]
 8017a18:	b1a3      	cbz	r3, 8017a44 <_fwrite_r+0x60>
 8017a1a:	2500      	movs	r5, #0
 8017a1c:	454d      	cmp	r5, r9
 8017a1e:	d01f      	beq.n	8017a60 <_fwrite_r+0x7c>
 8017a20:	68a7      	ldr	r7, [r4, #8]
 8017a22:	f81a 1005 	ldrb.w	r1, [sl, r5]
 8017a26:	3f01      	subs	r7, #1
 8017a28:	2f00      	cmp	r7, #0
 8017a2a:	60a7      	str	r7, [r4, #8]
 8017a2c:	da04      	bge.n	8017a38 <_fwrite_r+0x54>
 8017a2e:	69a3      	ldr	r3, [r4, #24]
 8017a30:	429f      	cmp	r7, r3
 8017a32:	db0f      	blt.n	8017a54 <_fwrite_r+0x70>
 8017a34:	290a      	cmp	r1, #10
 8017a36:	d00d      	beq.n	8017a54 <_fwrite_r+0x70>
 8017a38:	6823      	ldr	r3, [r4, #0]
 8017a3a:	1c5a      	adds	r2, r3, #1
 8017a3c:	6022      	str	r2, [r4, #0]
 8017a3e:	7019      	strb	r1, [r3, #0]
 8017a40:	3501      	adds	r5, #1
 8017a42:	e7eb      	b.n	8017a1c <_fwrite_r+0x38>
 8017a44:	4621      	mov	r1, r4
 8017a46:	4630      	mov	r0, r6
 8017a48:	f000 f946 	bl	8017cd8 <__swsetup_r>
 8017a4c:	2800      	cmp	r0, #0
 8017a4e:	d0e4      	beq.n	8017a1a <_fwrite_r+0x36>
 8017a50:	2500      	movs	r5, #0
 8017a52:	e005      	b.n	8017a60 <_fwrite_r+0x7c>
 8017a54:	4622      	mov	r2, r4
 8017a56:	4630      	mov	r0, r6
 8017a58:	f000 f900 	bl	8017c5c <__swbuf_r>
 8017a5c:	3001      	adds	r0, #1
 8017a5e:	d1ef      	bne.n	8017a40 <_fwrite_r+0x5c>
 8017a60:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017a62:	07da      	lsls	r2, r3, #31
 8017a64:	d405      	bmi.n	8017a72 <_fwrite_r+0x8e>
 8017a66:	89a3      	ldrh	r3, [r4, #12]
 8017a68:	059b      	lsls	r3, r3, #22
 8017a6a:	d402      	bmi.n	8017a72 <_fwrite_r+0x8e>
 8017a6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017a6e:	f000 facd 	bl	801800c <__retarget_lock_release_recursive>
 8017a72:	fbb5 f0f8 	udiv	r0, r5, r8
 8017a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08017a7c <fwrite>:
 8017a7c:	b507      	push	{r0, r1, r2, lr}
 8017a7e:	9300      	str	r3, [sp, #0]
 8017a80:	4613      	mov	r3, r2
 8017a82:	460a      	mov	r2, r1
 8017a84:	4601      	mov	r1, r0
 8017a86:	4803      	ldr	r0, [pc, #12]	@ (8017a94 <fwrite+0x18>)
 8017a88:	6800      	ldr	r0, [r0, #0]
 8017a8a:	f7ff ffab 	bl	80179e4 <_fwrite_r>
 8017a8e:	b003      	add	sp, #12
 8017a90:	f85d fb04 	ldr.w	pc, [sp], #4
 8017a94:	200000c8 	.word	0x200000c8

08017a98 <iprintf>:
 8017a98:	b40f      	push	{r0, r1, r2, r3}
 8017a9a:	b507      	push	{r0, r1, r2, lr}
 8017a9c:	4906      	ldr	r1, [pc, #24]	@ (8017ab8 <iprintf+0x20>)
 8017a9e:	ab04      	add	r3, sp, #16
 8017aa0:	6808      	ldr	r0, [r1, #0]
 8017aa2:	f853 2b04 	ldr.w	r2, [r3], #4
 8017aa6:	6881      	ldr	r1, [r0, #8]
 8017aa8:	9301      	str	r3, [sp, #4]
 8017aaa:	f001 fe93 	bl	80197d4 <_vfiprintf_r>
 8017aae:	b003      	add	sp, #12
 8017ab0:	f85d eb04 	ldr.w	lr, [sp], #4
 8017ab4:	b004      	add	sp, #16
 8017ab6:	4770      	bx	lr
 8017ab8:	200000c8 	.word	0x200000c8

08017abc <sniprintf>:
 8017abc:	b40c      	push	{r2, r3}
 8017abe:	b530      	push	{r4, r5, lr}
 8017ac0:	4b17      	ldr	r3, [pc, #92]	@ (8017b20 <sniprintf+0x64>)
 8017ac2:	1e0c      	subs	r4, r1, #0
 8017ac4:	681d      	ldr	r5, [r3, #0]
 8017ac6:	b09d      	sub	sp, #116	@ 0x74
 8017ac8:	da08      	bge.n	8017adc <sniprintf+0x20>
 8017aca:	238b      	movs	r3, #139	@ 0x8b
 8017acc:	602b      	str	r3, [r5, #0]
 8017ace:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017ad2:	b01d      	add	sp, #116	@ 0x74
 8017ad4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017ad8:	b002      	add	sp, #8
 8017ada:	4770      	bx	lr
 8017adc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8017ae0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017ae4:	bf14      	ite	ne
 8017ae6:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8017aea:	4623      	moveq	r3, r4
 8017aec:	9304      	str	r3, [sp, #16]
 8017aee:	9307      	str	r3, [sp, #28]
 8017af0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017af4:	9002      	str	r0, [sp, #8]
 8017af6:	9006      	str	r0, [sp, #24]
 8017af8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017afc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8017afe:	ab21      	add	r3, sp, #132	@ 0x84
 8017b00:	a902      	add	r1, sp, #8
 8017b02:	4628      	mov	r0, r5
 8017b04:	9301      	str	r3, [sp, #4]
 8017b06:	f001 fd3f 	bl	8019588 <_svfiprintf_r>
 8017b0a:	1c43      	adds	r3, r0, #1
 8017b0c:	bfbc      	itt	lt
 8017b0e:	238b      	movlt	r3, #139	@ 0x8b
 8017b10:	602b      	strlt	r3, [r5, #0]
 8017b12:	2c00      	cmp	r4, #0
 8017b14:	d0dd      	beq.n	8017ad2 <sniprintf+0x16>
 8017b16:	9b02      	ldr	r3, [sp, #8]
 8017b18:	2200      	movs	r2, #0
 8017b1a:	701a      	strb	r2, [r3, #0]
 8017b1c:	e7d9      	b.n	8017ad2 <sniprintf+0x16>
 8017b1e:	bf00      	nop
 8017b20:	200000c8 	.word	0x200000c8

08017b24 <siprintf>:
 8017b24:	b40e      	push	{r1, r2, r3}
 8017b26:	b500      	push	{lr}
 8017b28:	b09c      	sub	sp, #112	@ 0x70
 8017b2a:	ab1d      	add	r3, sp, #116	@ 0x74
 8017b2c:	9002      	str	r0, [sp, #8]
 8017b2e:	9006      	str	r0, [sp, #24]
 8017b30:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8017b34:	4809      	ldr	r0, [pc, #36]	@ (8017b5c <siprintf+0x38>)
 8017b36:	9107      	str	r1, [sp, #28]
 8017b38:	9104      	str	r1, [sp, #16]
 8017b3a:	4909      	ldr	r1, [pc, #36]	@ (8017b60 <siprintf+0x3c>)
 8017b3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8017b40:	9105      	str	r1, [sp, #20]
 8017b42:	6800      	ldr	r0, [r0, #0]
 8017b44:	9301      	str	r3, [sp, #4]
 8017b46:	a902      	add	r1, sp, #8
 8017b48:	f001 fd1e 	bl	8019588 <_svfiprintf_r>
 8017b4c:	9b02      	ldr	r3, [sp, #8]
 8017b4e:	2200      	movs	r2, #0
 8017b50:	701a      	strb	r2, [r3, #0]
 8017b52:	b01c      	add	sp, #112	@ 0x70
 8017b54:	f85d eb04 	ldr.w	lr, [sp], #4
 8017b58:	b003      	add	sp, #12
 8017b5a:	4770      	bx	lr
 8017b5c:	200000c8 	.word	0x200000c8
 8017b60:	ffff0208 	.word	0xffff0208

08017b64 <__sread>:
 8017b64:	b510      	push	{r4, lr}
 8017b66:	460c      	mov	r4, r1
 8017b68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017b6c:	f000 f9ee 	bl	8017f4c <_read_r>
 8017b70:	2800      	cmp	r0, #0
 8017b72:	bfab      	itete	ge
 8017b74:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8017b76:	89a3      	ldrhlt	r3, [r4, #12]
 8017b78:	181b      	addge	r3, r3, r0
 8017b7a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8017b7e:	bfac      	ite	ge
 8017b80:	6563      	strge	r3, [r4, #84]	@ 0x54
 8017b82:	81a3      	strhlt	r3, [r4, #12]
 8017b84:	bd10      	pop	{r4, pc}

08017b86 <__swrite>:
 8017b86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017b8a:	461f      	mov	r7, r3
 8017b8c:	898b      	ldrh	r3, [r1, #12]
 8017b8e:	05db      	lsls	r3, r3, #23
 8017b90:	4605      	mov	r5, r0
 8017b92:	460c      	mov	r4, r1
 8017b94:	4616      	mov	r6, r2
 8017b96:	d505      	bpl.n	8017ba4 <__swrite+0x1e>
 8017b98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017b9c:	2302      	movs	r3, #2
 8017b9e:	2200      	movs	r2, #0
 8017ba0:	f000 f9c2 	bl	8017f28 <_lseek_r>
 8017ba4:	89a3      	ldrh	r3, [r4, #12]
 8017ba6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017baa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8017bae:	81a3      	strh	r3, [r4, #12]
 8017bb0:	4632      	mov	r2, r6
 8017bb2:	463b      	mov	r3, r7
 8017bb4:	4628      	mov	r0, r5
 8017bb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017bba:	f000 b9e9 	b.w	8017f90 <_write_r>

08017bbe <__sseek>:
 8017bbe:	b510      	push	{r4, lr}
 8017bc0:	460c      	mov	r4, r1
 8017bc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017bc6:	f000 f9af 	bl	8017f28 <_lseek_r>
 8017bca:	1c43      	adds	r3, r0, #1
 8017bcc:	89a3      	ldrh	r3, [r4, #12]
 8017bce:	bf15      	itete	ne
 8017bd0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8017bd2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8017bd6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8017bda:	81a3      	strheq	r3, [r4, #12]
 8017bdc:	bf18      	it	ne
 8017bde:	81a3      	strhne	r3, [r4, #12]
 8017be0:	bd10      	pop	{r4, pc}

08017be2 <__sclose>:
 8017be2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017be6:	f000 b939 	b.w	8017e5c <_close_r>

08017bea <_vsniprintf_r>:
 8017bea:	b530      	push	{r4, r5, lr}
 8017bec:	4614      	mov	r4, r2
 8017bee:	2c00      	cmp	r4, #0
 8017bf0:	b09b      	sub	sp, #108	@ 0x6c
 8017bf2:	4605      	mov	r5, r0
 8017bf4:	461a      	mov	r2, r3
 8017bf6:	da05      	bge.n	8017c04 <_vsniprintf_r+0x1a>
 8017bf8:	238b      	movs	r3, #139	@ 0x8b
 8017bfa:	6003      	str	r3, [r0, #0]
 8017bfc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017c00:	b01b      	add	sp, #108	@ 0x6c
 8017c02:	bd30      	pop	{r4, r5, pc}
 8017c04:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8017c08:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017c0c:	bf14      	ite	ne
 8017c0e:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8017c12:	4623      	moveq	r3, r4
 8017c14:	9302      	str	r3, [sp, #8]
 8017c16:	9305      	str	r3, [sp, #20]
 8017c18:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017c1c:	9100      	str	r1, [sp, #0]
 8017c1e:	9104      	str	r1, [sp, #16]
 8017c20:	f8ad 300e 	strh.w	r3, [sp, #14]
 8017c24:	4669      	mov	r1, sp
 8017c26:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8017c28:	f001 fcae 	bl	8019588 <_svfiprintf_r>
 8017c2c:	1c43      	adds	r3, r0, #1
 8017c2e:	bfbc      	itt	lt
 8017c30:	238b      	movlt	r3, #139	@ 0x8b
 8017c32:	602b      	strlt	r3, [r5, #0]
 8017c34:	2c00      	cmp	r4, #0
 8017c36:	d0e3      	beq.n	8017c00 <_vsniprintf_r+0x16>
 8017c38:	9b00      	ldr	r3, [sp, #0]
 8017c3a:	2200      	movs	r2, #0
 8017c3c:	701a      	strb	r2, [r3, #0]
 8017c3e:	e7df      	b.n	8017c00 <_vsniprintf_r+0x16>

08017c40 <vsniprintf>:
 8017c40:	b507      	push	{r0, r1, r2, lr}
 8017c42:	9300      	str	r3, [sp, #0]
 8017c44:	4613      	mov	r3, r2
 8017c46:	460a      	mov	r2, r1
 8017c48:	4601      	mov	r1, r0
 8017c4a:	4803      	ldr	r0, [pc, #12]	@ (8017c58 <vsniprintf+0x18>)
 8017c4c:	6800      	ldr	r0, [r0, #0]
 8017c4e:	f7ff ffcc 	bl	8017bea <_vsniprintf_r>
 8017c52:	b003      	add	sp, #12
 8017c54:	f85d fb04 	ldr.w	pc, [sp], #4
 8017c58:	200000c8 	.word	0x200000c8

08017c5c <__swbuf_r>:
 8017c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c5e:	460e      	mov	r6, r1
 8017c60:	4614      	mov	r4, r2
 8017c62:	4605      	mov	r5, r0
 8017c64:	b118      	cbz	r0, 8017c6e <__swbuf_r+0x12>
 8017c66:	6a03      	ldr	r3, [r0, #32]
 8017c68:	b90b      	cbnz	r3, 8017c6e <__swbuf_r+0x12>
 8017c6a:	f7ff fe85 	bl	8017978 <__sinit>
 8017c6e:	69a3      	ldr	r3, [r4, #24]
 8017c70:	60a3      	str	r3, [r4, #8]
 8017c72:	89a3      	ldrh	r3, [r4, #12]
 8017c74:	071a      	lsls	r2, r3, #28
 8017c76:	d501      	bpl.n	8017c7c <__swbuf_r+0x20>
 8017c78:	6923      	ldr	r3, [r4, #16]
 8017c7a:	b943      	cbnz	r3, 8017c8e <__swbuf_r+0x32>
 8017c7c:	4621      	mov	r1, r4
 8017c7e:	4628      	mov	r0, r5
 8017c80:	f000 f82a 	bl	8017cd8 <__swsetup_r>
 8017c84:	b118      	cbz	r0, 8017c8e <__swbuf_r+0x32>
 8017c86:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8017c8a:	4638      	mov	r0, r7
 8017c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017c8e:	6823      	ldr	r3, [r4, #0]
 8017c90:	6922      	ldr	r2, [r4, #16]
 8017c92:	1a98      	subs	r0, r3, r2
 8017c94:	6963      	ldr	r3, [r4, #20]
 8017c96:	b2f6      	uxtb	r6, r6
 8017c98:	4283      	cmp	r3, r0
 8017c9a:	4637      	mov	r7, r6
 8017c9c:	dc05      	bgt.n	8017caa <__swbuf_r+0x4e>
 8017c9e:	4621      	mov	r1, r4
 8017ca0:	4628      	mov	r0, r5
 8017ca2:	f001 ff33 	bl	8019b0c <_fflush_r>
 8017ca6:	2800      	cmp	r0, #0
 8017ca8:	d1ed      	bne.n	8017c86 <__swbuf_r+0x2a>
 8017caa:	68a3      	ldr	r3, [r4, #8]
 8017cac:	3b01      	subs	r3, #1
 8017cae:	60a3      	str	r3, [r4, #8]
 8017cb0:	6823      	ldr	r3, [r4, #0]
 8017cb2:	1c5a      	adds	r2, r3, #1
 8017cb4:	6022      	str	r2, [r4, #0]
 8017cb6:	701e      	strb	r6, [r3, #0]
 8017cb8:	6962      	ldr	r2, [r4, #20]
 8017cba:	1c43      	adds	r3, r0, #1
 8017cbc:	429a      	cmp	r2, r3
 8017cbe:	d004      	beq.n	8017cca <__swbuf_r+0x6e>
 8017cc0:	89a3      	ldrh	r3, [r4, #12]
 8017cc2:	07db      	lsls	r3, r3, #31
 8017cc4:	d5e1      	bpl.n	8017c8a <__swbuf_r+0x2e>
 8017cc6:	2e0a      	cmp	r6, #10
 8017cc8:	d1df      	bne.n	8017c8a <__swbuf_r+0x2e>
 8017cca:	4621      	mov	r1, r4
 8017ccc:	4628      	mov	r0, r5
 8017cce:	f001 ff1d 	bl	8019b0c <_fflush_r>
 8017cd2:	2800      	cmp	r0, #0
 8017cd4:	d0d9      	beq.n	8017c8a <__swbuf_r+0x2e>
 8017cd6:	e7d6      	b.n	8017c86 <__swbuf_r+0x2a>

08017cd8 <__swsetup_r>:
 8017cd8:	b538      	push	{r3, r4, r5, lr}
 8017cda:	4b29      	ldr	r3, [pc, #164]	@ (8017d80 <__swsetup_r+0xa8>)
 8017cdc:	4605      	mov	r5, r0
 8017cde:	6818      	ldr	r0, [r3, #0]
 8017ce0:	460c      	mov	r4, r1
 8017ce2:	b118      	cbz	r0, 8017cec <__swsetup_r+0x14>
 8017ce4:	6a03      	ldr	r3, [r0, #32]
 8017ce6:	b90b      	cbnz	r3, 8017cec <__swsetup_r+0x14>
 8017ce8:	f7ff fe46 	bl	8017978 <__sinit>
 8017cec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017cf0:	0719      	lsls	r1, r3, #28
 8017cf2:	d422      	bmi.n	8017d3a <__swsetup_r+0x62>
 8017cf4:	06da      	lsls	r2, r3, #27
 8017cf6:	d407      	bmi.n	8017d08 <__swsetup_r+0x30>
 8017cf8:	2209      	movs	r2, #9
 8017cfa:	602a      	str	r2, [r5, #0]
 8017cfc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017d00:	81a3      	strh	r3, [r4, #12]
 8017d02:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017d06:	e033      	b.n	8017d70 <__swsetup_r+0x98>
 8017d08:	0758      	lsls	r0, r3, #29
 8017d0a:	d512      	bpl.n	8017d32 <__swsetup_r+0x5a>
 8017d0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017d0e:	b141      	cbz	r1, 8017d22 <__swsetup_r+0x4a>
 8017d10:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017d14:	4299      	cmp	r1, r3
 8017d16:	d002      	beq.n	8017d1e <__swsetup_r+0x46>
 8017d18:	4628      	mov	r0, r5
 8017d1a:	f001 f805 	bl	8018d28 <_free_r>
 8017d1e:	2300      	movs	r3, #0
 8017d20:	6363      	str	r3, [r4, #52]	@ 0x34
 8017d22:	89a3      	ldrh	r3, [r4, #12]
 8017d24:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8017d28:	81a3      	strh	r3, [r4, #12]
 8017d2a:	2300      	movs	r3, #0
 8017d2c:	6063      	str	r3, [r4, #4]
 8017d2e:	6923      	ldr	r3, [r4, #16]
 8017d30:	6023      	str	r3, [r4, #0]
 8017d32:	89a3      	ldrh	r3, [r4, #12]
 8017d34:	f043 0308 	orr.w	r3, r3, #8
 8017d38:	81a3      	strh	r3, [r4, #12]
 8017d3a:	6923      	ldr	r3, [r4, #16]
 8017d3c:	b94b      	cbnz	r3, 8017d52 <__swsetup_r+0x7a>
 8017d3e:	89a3      	ldrh	r3, [r4, #12]
 8017d40:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8017d44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017d48:	d003      	beq.n	8017d52 <__swsetup_r+0x7a>
 8017d4a:	4621      	mov	r1, r4
 8017d4c:	4628      	mov	r0, r5
 8017d4e:	f001 ff3d 	bl	8019bcc <__smakebuf_r>
 8017d52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017d56:	f013 0201 	ands.w	r2, r3, #1
 8017d5a:	d00a      	beq.n	8017d72 <__swsetup_r+0x9a>
 8017d5c:	2200      	movs	r2, #0
 8017d5e:	60a2      	str	r2, [r4, #8]
 8017d60:	6962      	ldr	r2, [r4, #20]
 8017d62:	4252      	negs	r2, r2
 8017d64:	61a2      	str	r2, [r4, #24]
 8017d66:	6922      	ldr	r2, [r4, #16]
 8017d68:	b942      	cbnz	r2, 8017d7c <__swsetup_r+0xa4>
 8017d6a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8017d6e:	d1c5      	bne.n	8017cfc <__swsetup_r+0x24>
 8017d70:	bd38      	pop	{r3, r4, r5, pc}
 8017d72:	0799      	lsls	r1, r3, #30
 8017d74:	bf58      	it	pl
 8017d76:	6962      	ldrpl	r2, [r4, #20]
 8017d78:	60a2      	str	r2, [r4, #8]
 8017d7a:	e7f4      	b.n	8017d66 <__swsetup_r+0x8e>
 8017d7c:	2000      	movs	r0, #0
 8017d7e:	e7f7      	b.n	8017d70 <__swsetup_r+0x98>
 8017d80:	200000c8 	.word	0x200000c8

08017d84 <memcmp>:
 8017d84:	b510      	push	{r4, lr}
 8017d86:	3901      	subs	r1, #1
 8017d88:	4402      	add	r2, r0
 8017d8a:	4290      	cmp	r0, r2
 8017d8c:	d101      	bne.n	8017d92 <memcmp+0xe>
 8017d8e:	2000      	movs	r0, #0
 8017d90:	e005      	b.n	8017d9e <memcmp+0x1a>
 8017d92:	7803      	ldrb	r3, [r0, #0]
 8017d94:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8017d98:	42a3      	cmp	r3, r4
 8017d9a:	d001      	beq.n	8017da0 <memcmp+0x1c>
 8017d9c:	1b18      	subs	r0, r3, r4
 8017d9e:	bd10      	pop	{r4, pc}
 8017da0:	3001      	adds	r0, #1
 8017da2:	e7f2      	b.n	8017d8a <memcmp+0x6>

08017da4 <memmove>:
 8017da4:	4288      	cmp	r0, r1
 8017da6:	b510      	push	{r4, lr}
 8017da8:	eb01 0402 	add.w	r4, r1, r2
 8017dac:	d902      	bls.n	8017db4 <memmove+0x10>
 8017dae:	4284      	cmp	r4, r0
 8017db0:	4623      	mov	r3, r4
 8017db2:	d807      	bhi.n	8017dc4 <memmove+0x20>
 8017db4:	1e43      	subs	r3, r0, #1
 8017db6:	42a1      	cmp	r1, r4
 8017db8:	d008      	beq.n	8017dcc <memmove+0x28>
 8017dba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017dbe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017dc2:	e7f8      	b.n	8017db6 <memmove+0x12>
 8017dc4:	4402      	add	r2, r0
 8017dc6:	4601      	mov	r1, r0
 8017dc8:	428a      	cmp	r2, r1
 8017dca:	d100      	bne.n	8017dce <memmove+0x2a>
 8017dcc:	bd10      	pop	{r4, pc}
 8017dce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017dd2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017dd6:	e7f7      	b.n	8017dc8 <memmove+0x24>

08017dd8 <memset>:
 8017dd8:	4402      	add	r2, r0
 8017dda:	4603      	mov	r3, r0
 8017ddc:	4293      	cmp	r3, r2
 8017dde:	d100      	bne.n	8017de2 <memset+0xa>
 8017de0:	4770      	bx	lr
 8017de2:	f803 1b01 	strb.w	r1, [r3], #1
 8017de6:	e7f9      	b.n	8017ddc <memset+0x4>

08017de8 <strchr>:
 8017de8:	b2c9      	uxtb	r1, r1
 8017dea:	4603      	mov	r3, r0
 8017dec:	4618      	mov	r0, r3
 8017dee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017df2:	b112      	cbz	r2, 8017dfa <strchr+0x12>
 8017df4:	428a      	cmp	r2, r1
 8017df6:	d1f9      	bne.n	8017dec <strchr+0x4>
 8017df8:	4770      	bx	lr
 8017dfa:	2900      	cmp	r1, #0
 8017dfc:	bf18      	it	ne
 8017dfe:	2000      	movne	r0, #0
 8017e00:	4770      	bx	lr

08017e02 <strncmp>:
 8017e02:	b510      	push	{r4, lr}
 8017e04:	b16a      	cbz	r2, 8017e22 <strncmp+0x20>
 8017e06:	3901      	subs	r1, #1
 8017e08:	1884      	adds	r4, r0, r2
 8017e0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017e0e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8017e12:	429a      	cmp	r2, r3
 8017e14:	d103      	bne.n	8017e1e <strncmp+0x1c>
 8017e16:	42a0      	cmp	r0, r4
 8017e18:	d001      	beq.n	8017e1e <strncmp+0x1c>
 8017e1a:	2a00      	cmp	r2, #0
 8017e1c:	d1f5      	bne.n	8017e0a <strncmp+0x8>
 8017e1e:	1ad0      	subs	r0, r2, r3
 8017e20:	bd10      	pop	{r4, pc}
 8017e22:	4610      	mov	r0, r2
 8017e24:	e7fc      	b.n	8017e20 <strncmp+0x1e>

08017e26 <strstr>:
 8017e26:	780a      	ldrb	r2, [r1, #0]
 8017e28:	b570      	push	{r4, r5, r6, lr}
 8017e2a:	b96a      	cbnz	r2, 8017e48 <strstr+0x22>
 8017e2c:	bd70      	pop	{r4, r5, r6, pc}
 8017e2e:	429a      	cmp	r2, r3
 8017e30:	d109      	bne.n	8017e46 <strstr+0x20>
 8017e32:	460c      	mov	r4, r1
 8017e34:	4605      	mov	r5, r0
 8017e36:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8017e3a:	2b00      	cmp	r3, #0
 8017e3c:	d0f6      	beq.n	8017e2c <strstr+0x6>
 8017e3e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8017e42:	429e      	cmp	r6, r3
 8017e44:	d0f7      	beq.n	8017e36 <strstr+0x10>
 8017e46:	3001      	adds	r0, #1
 8017e48:	7803      	ldrb	r3, [r0, #0]
 8017e4a:	2b00      	cmp	r3, #0
 8017e4c:	d1ef      	bne.n	8017e2e <strstr+0x8>
 8017e4e:	4618      	mov	r0, r3
 8017e50:	e7ec      	b.n	8017e2c <strstr+0x6>
	...

08017e54 <_localeconv_r>:
 8017e54:	4800      	ldr	r0, [pc, #0]	@ (8017e58 <_localeconv_r+0x4>)
 8017e56:	4770      	bx	lr
 8017e58:	20000208 	.word	0x20000208

08017e5c <_close_r>:
 8017e5c:	b538      	push	{r3, r4, r5, lr}
 8017e5e:	4d06      	ldr	r5, [pc, #24]	@ (8017e78 <_close_r+0x1c>)
 8017e60:	2300      	movs	r3, #0
 8017e62:	4604      	mov	r4, r0
 8017e64:	4608      	mov	r0, r1
 8017e66:	602b      	str	r3, [r5, #0]
 8017e68:	f7ea ff6e 	bl	8002d48 <_close>
 8017e6c:	1c43      	adds	r3, r0, #1
 8017e6e:	d102      	bne.n	8017e76 <_close_r+0x1a>
 8017e70:	682b      	ldr	r3, [r5, #0]
 8017e72:	b103      	cbz	r3, 8017e76 <_close_r+0x1a>
 8017e74:	6023      	str	r3, [r4, #0]
 8017e76:	bd38      	pop	{r3, r4, r5, pc}
 8017e78:	20011448 	.word	0x20011448

08017e7c <_reclaim_reent>:
 8017e7c:	4b29      	ldr	r3, [pc, #164]	@ (8017f24 <_reclaim_reent+0xa8>)
 8017e7e:	681b      	ldr	r3, [r3, #0]
 8017e80:	4283      	cmp	r3, r0
 8017e82:	b570      	push	{r4, r5, r6, lr}
 8017e84:	4604      	mov	r4, r0
 8017e86:	d04b      	beq.n	8017f20 <_reclaim_reent+0xa4>
 8017e88:	69c3      	ldr	r3, [r0, #28]
 8017e8a:	b1ab      	cbz	r3, 8017eb8 <_reclaim_reent+0x3c>
 8017e8c:	68db      	ldr	r3, [r3, #12]
 8017e8e:	b16b      	cbz	r3, 8017eac <_reclaim_reent+0x30>
 8017e90:	2500      	movs	r5, #0
 8017e92:	69e3      	ldr	r3, [r4, #28]
 8017e94:	68db      	ldr	r3, [r3, #12]
 8017e96:	5959      	ldr	r1, [r3, r5]
 8017e98:	2900      	cmp	r1, #0
 8017e9a:	d13b      	bne.n	8017f14 <_reclaim_reent+0x98>
 8017e9c:	3504      	adds	r5, #4
 8017e9e:	2d80      	cmp	r5, #128	@ 0x80
 8017ea0:	d1f7      	bne.n	8017e92 <_reclaim_reent+0x16>
 8017ea2:	69e3      	ldr	r3, [r4, #28]
 8017ea4:	4620      	mov	r0, r4
 8017ea6:	68d9      	ldr	r1, [r3, #12]
 8017ea8:	f000 ff3e 	bl	8018d28 <_free_r>
 8017eac:	69e3      	ldr	r3, [r4, #28]
 8017eae:	6819      	ldr	r1, [r3, #0]
 8017eb0:	b111      	cbz	r1, 8017eb8 <_reclaim_reent+0x3c>
 8017eb2:	4620      	mov	r0, r4
 8017eb4:	f000 ff38 	bl	8018d28 <_free_r>
 8017eb8:	6961      	ldr	r1, [r4, #20]
 8017eba:	b111      	cbz	r1, 8017ec2 <_reclaim_reent+0x46>
 8017ebc:	4620      	mov	r0, r4
 8017ebe:	f000 ff33 	bl	8018d28 <_free_r>
 8017ec2:	69e1      	ldr	r1, [r4, #28]
 8017ec4:	b111      	cbz	r1, 8017ecc <_reclaim_reent+0x50>
 8017ec6:	4620      	mov	r0, r4
 8017ec8:	f000 ff2e 	bl	8018d28 <_free_r>
 8017ecc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8017ece:	b111      	cbz	r1, 8017ed6 <_reclaim_reent+0x5a>
 8017ed0:	4620      	mov	r0, r4
 8017ed2:	f000 ff29 	bl	8018d28 <_free_r>
 8017ed6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017ed8:	b111      	cbz	r1, 8017ee0 <_reclaim_reent+0x64>
 8017eda:	4620      	mov	r0, r4
 8017edc:	f000 ff24 	bl	8018d28 <_free_r>
 8017ee0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8017ee2:	b111      	cbz	r1, 8017eea <_reclaim_reent+0x6e>
 8017ee4:	4620      	mov	r0, r4
 8017ee6:	f000 ff1f 	bl	8018d28 <_free_r>
 8017eea:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8017eec:	b111      	cbz	r1, 8017ef4 <_reclaim_reent+0x78>
 8017eee:	4620      	mov	r0, r4
 8017ef0:	f000 ff1a 	bl	8018d28 <_free_r>
 8017ef4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8017ef6:	b111      	cbz	r1, 8017efe <_reclaim_reent+0x82>
 8017ef8:	4620      	mov	r0, r4
 8017efa:	f000 ff15 	bl	8018d28 <_free_r>
 8017efe:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8017f00:	b111      	cbz	r1, 8017f08 <_reclaim_reent+0x8c>
 8017f02:	4620      	mov	r0, r4
 8017f04:	f000 ff10 	bl	8018d28 <_free_r>
 8017f08:	6a23      	ldr	r3, [r4, #32]
 8017f0a:	b14b      	cbz	r3, 8017f20 <_reclaim_reent+0xa4>
 8017f0c:	4620      	mov	r0, r4
 8017f0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017f12:	4718      	bx	r3
 8017f14:	680e      	ldr	r6, [r1, #0]
 8017f16:	4620      	mov	r0, r4
 8017f18:	f000 ff06 	bl	8018d28 <_free_r>
 8017f1c:	4631      	mov	r1, r6
 8017f1e:	e7bb      	b.n	8017e98 <_reclaim_reent+0x1c>
 8017f20:	bd70      	pop	{r4, r5, r6, pc}
 8017f22:	bf00      	nop
 8017f24:	200000c8 	.word	0x200000c8

08017f28 <_lseek_r>:
 8017f28:	b538      	push	{r3, r4, r5, lr}
 8017f2a:	4d07      	ldr	r5, [pc, #28]	@ (8017f48 <_lseek_r+0x20>)
 8017f2c:	4604      	mov	r4, r0
 8017f2e:	4608      	mov	r0, r1
 8017f30:	4611      	mov	r1, r2
 8017f32:	2200      	movs	r2, #0
 8017f34:	602a      	str	r2, [r5, #0]
 8017f36:	461a      	mov	r2, r3
 8017f38:	f7ea ff2d 	bl	8002d96 <_lseek>
 8017f3c:	1c43      	adds	r3, r0, #1
 8017f3e:	d102      	bne.n	8017f46 <_lseek_r+0x1e>
 8017f40:	682b      	ldr	r3, [r5, #0]
 8017f42:	b103      	cbz	r3, 8017f46 <_lseek_r+0x1e>
 8017f44:	6023      	str	r3, [r4, #0]
 8017f46:	bd38      	pop	{r3, r4, r5, pc}
 8017f48:	20011448 	.word	0x20011448

08017f4c <_read_r>:
 8017f4c:	b538      	push	{r3, r4, r5, lr}
 8017f4e:	4d07      	ldr	r5, [pc, #28]	@ (8017f6c <_read_r+0x20>)
 8017f50:	4604      	mov	r4, r0
 8017f52:	4608      	mov	r0, r1
 8017f54:	4611      	mov	r1, r2
 8017f56:	2200      	movs	r2, #0
 8017f58:	602a      	str	r2, [r5, #0]
 8017f5a:	461a      	mov	r2, r3
 8017f5c:	f7ea febb 	bl	8002cd6 <_read>
 8017f60:	1c43      	adds	r3, r0, #1
 8017f62:	d102      	bne.n	8017f6a <_read_r+0x1e>
 8017f64:	682b      	ldr	r3, [r5, #0]
 8017f66:	b103      	cbz	r3, 8017f6a <_read_r+0x1e>
 8017f68:	6023      	str	r3, [r4, #0]
 8017f6a:	bd38      	pop	{r3, r4, r5, pc}
 8017f6c:	20011448 	.word	0x20011448

08017f70 <_sbrk_r>:
 8017f70:	b538      	push	{r3, r4, r5, lr}
 8017f72:	4d06      	ldr	r5, [pc, #24]	@ (8017f8c <_sbrk_r+0x1c>)
 8017f74:	2300      	movs	r3, #0
 8017f76:	4604      	mov	r4, r0
 8017f78:	4608      	mov	r0, r1
 8017f7a:	602b      	str	r3, [r5, #0]
 8017f7c:	f7ea ff18 	bl	8002db0 <_sbrk>
 8017f80:	1c43      	adds	r3, r0, #1
 8017f82:	d102      	bne.n	8017f8a <_sbrk_r+0x1a>
 8017f84:	682b      	ldr	r3, [r5, #0]
 8017f86:	b103      	cbz	r3, 8017f8a <_sbrk_r+0x1a>
 8017f88:	6023      	str	r3, [r4, #0]
 8017f8a:	bd38      	pop	{r3, r4, r5, pc}
 8017f8c:	20011448 	.word	0x20011448

08017f90 <_write_r>:
 8017f90:	b538      	push	{r3, r4, r5, lr}
 8017f92:	4d07      	ldr	r5, [pc, #28]	@ (8017fb0 <_write_r+0x20>)
 8017f94:	4604      	mov	r4, r0
 8017f96:	4608      	mov	r0, r1
 8017f98:	4611      	mov	r1, r2
 8017f9a:	2200      	movs	r2, #0
 8017f9c:	602a      	str	r2, [r5, #0]
 8017f9e:	461a      	mov	r2, r3
 8017fa0:	f7ea feb6 	bl	8002d10 <_write>
 8017fa4:	1c43      	adds	r3, r0, #1
 8017fa6:	d102      	bne.n	8017fae <_write_r+0x1e>
 8017fa8:	682b      	ldr	r3, [r5, #0]
 8017faa:	b103      	cbz	r3, 8017fae <_write_r+0x1e>
 8017fac:	6023      	str	r3, [r4, #0]
 8017fae:	bd38      	pop	{r3, r4, r5, pc}
 8017fb0:	20011448 	.word	0x20011448

08017fb4 <__errno>:
 8017fb4:	4b01      	ldr	r3, [pc, #4]	@ (8017fbc <__errno+0x8>)
 8017fb6:	6818      	ldr	r0, [r3, #0]
 8017fb8:	4770      	bx	lr
 8017fba:	bf00      	nop
 8017fbc:	200000c8 	.word	0x200000c8

08017fc0 <__libc_init_array>:
 8017fc0:	b570      	push	{r4, r5, r6, lr}
 8017fc2:	4d0d      	ldr	r5, [pc, #52]	@ (8017ff8 <__libc_init_array+0x38>)
 8017fc4:	4c0d      	ldr	r4, [pc, #52]	@ (8017ffc <__libc_init_array+0x3c>)
 8017fc6:	1b64      	subs	r4, r4, r5
 8017fc8:	10a4      	asrs	r4, r4, #2
 8017fca:	2600      	movs	r6, #0
 8017fcc:	42a6      	cmp	r6, r4
 8017fce:	d109      	bne.n	8017fe4 <__libc_init_array+0x24>
 8017fd0:	4d0b      	ldr	r5, [pc, #44]	@ (8018000 <__libc_init_array+0x40>)
 8017fd2:	4c0c      	ldr	r4, [pc, #48]	@ (8018004 <__libc_init_array+0x44>)
 8017fd4:	f001 fec2 	bl	8019d5c <_init>
 8017fd8:	1b64      	subs	r4, r4, r5
 8017fda:	10a4      	asrs	r4, r4, #2
 8017fdc:	2600      	movs	r6, #0
 8017fde:	42a6      	cmp	r6, r4
 8017fe0:	d105      	bne.n	8017fee <__libc_init_array+0x2e>
 8017fe2:	bd70      	pop	{r4, r5, r6, pc}
 8017fe4:	f855 3b04 	ldr.w	r3, [r5], #4
 8017fe8:	4798      	blx	r3
 8017fea:	3601      	adds	r6, #1
 8017fec:	e7ee      	b.n	8017fcc <__libc_init_array+0xc>
 8017fee:	f855 3b04 	ldr.w	r3, [r5], #4
 8017ff2:	4798      	blx	r3
 8017ff4:	3601      	adds	r6, #1
 8017ff6:	e7f2      	b.n	8017fde <__libc_init_array+0x1e>
 8017ff8:	0801afd4 	.word	0x0801afd4
 8017ffc:	0801afd4 	.word	0x0801afd4
 8018000:	0801afd4 	.word	0x0801afd4
 8018004:	0801afdc 	.word	0x0801afdc

08018008 <__retarget_lock_init_recursive>:
 8018008:	4770      	bx	lr

0801800a <__retarget_lock_acquire_recursive>:
 801800a:	4770      	bx	lr

0801800c <__retarget_lock_release_recursive>:
 801800c:	4770      	bx	lr

0801800e <strcpy>:
 801800e:	4603      	mov	r3, r0
 8018010:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018014:	f803 2b01 	strb.w	r2, [r3], #1
 8018018:	2a00      	cmp	r2, #0
 801801a:	d1f9      	bne.n	8018010 <strcpy+0x2>
 801801c:	4770      	bx	lr

0801801e <memcpy>:
 801801e:	440a      	add	r2, r1
 8018020:	4291      	cmp	r1, r2
 8018022:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8018026:	d100      	bne.n	801802a <memcpy+0xc>
 8018028:	4770      	bx	lr
 801802a:	b510      	push	{r4, lr}
 801802c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018030:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018034:	4291      	cmp	r1, r2
 8018036:	d1f9      	bne.n	801802c <memcpy+0xe>
 8018038:	bd10      	pop	{r4, pc}
	...

0801803c <__assert_func>:
 801803c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801803e:	4614      	mov	r4, r2
 8018040:	461a      	mov	r2, r3
 8018042:	4b09      	ldr	r3, [pc, #36]	@ (8018068 <__assert_func+0x2c>)
 8018044:	681b      	ldr	r3, [r3, #0]
 8018046:	4605      	mov	r5, r0
 8018048:	68d8      	ldr	r0, [r3, #12]
 801804a:	b954      	cbnz	r4, 8018062 <__assert_func+0x26>
 801804c:	4b07      	ldr	r3, [pc, #28]	@ (801806c <__assert_func+0x30>)
 801804e:	461c      	mov	r4, r3
 8018050:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018054:	9100      	str	r1, [sp, #0]
 8018056:	462b      	mov	r3, r5
 8018058:	4905      	ldr	r1, [pc, #20]	@ (8018070 <__assert_func+0x34>)
 801805a:	f001 fd7f 	bl	8019b5c <fiprintf>
 801805e:	f001 fe13 	bl	8019c88 <abort>
 8018062:	4b04      	ldr	r3, [pc, #16]	@ (8018074 <__assert_func+0x38>)
 8018064:	e7f4      	b.n	8018050 <__assert_func+0x14>
 8018066:	bf00      	nop
 8018068:	200000c8 	.word	0x200000c8
 801806c:	0801addd 	.word	0x0801addd
 8018070:	0801adaf 	.word	0x0801adaf
 8018074:	0801ada2 	.word	0x0801ada2

08018078 <quorem>:
 8018078:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801807c:	6903      	ldr	r3, [r0, #16]
 801807e:	690c      	ldr	r4, [r1, #16]
 8018080:	42a3      	cmp	r3, r4
 8018082:	4607      	mov	r7, r0
 8018084:	db7e      	blt.n	8018184 <quorem+0x10c>
 8018086:	3c01      	subs	r4, #1
 8018088:	f101 0814 	add.w	r8, r1, #20
 801808c:	00a3      	lsls	r3, r4, #2
 801808e:	f100 0514 	add.w	r5, r0, #20
 8018092:	9300      	str	r3, [sp, #0]
 8018094:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018098:	9301      	str	r3, [sp, #4]
 801809a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801809e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80180a2:	3301      	adds	r3, #1
 80180a4:	429a      	cmp	r2, r3
 80180a6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80180aa:	fbb2 f6f3 	udiv	r6, r2, r3
 80180ae:	d32e      	bcc.n	801810e <quorem+0x96>
 80180b0:	f04f 0a00 	mov.w	sl, #0
 80180b4:	46c4      	mov	ip, r8
 80180b6:	46ae      	mov	lr, r5
 80180b8:	46d3      	mov	fp, sl
 80180ba:	f85c 3b04 	ldr.w	r3, [ip], #4
 80180be:	b298      	uxth	r0, r3
 80180c0:	fb06 a000 	mla	r0, r6, r0, sl
 80180c4:	0c02      	lsrs	r2, r0, #16
 80180c6:	0c1b      	lsrs	r3, r3, #16
 80180c8:	fb06 2303 	mla	r3, r6, r3, r2
 80180cc:	f8de 2000 	ldr.w	r2, [lr]
 80180d0:	b280      	uxth	r0, r0
 80180d2:	b292      	uxth	r2, r2
 80180d4:	1a12      	subs	r2, r2, r0
 80180d6:	445a      	add	r2, fp
 80180d8:	f8de 0000 	ldr.w	r0, [lr]
 80180dc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80180e0:	b29b      	uxth	r3, r3
 80180e2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80180e6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80180ea:	b292      	uxth	r2, r2
 80180ec:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80180f0:	45e1      	cmp	r9, ip
 80180f2:	f84e 2b04 	str.w	r2, [lr], #4
 80180f6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80180fa:	d2de      	bcs.n	80180ba <quorem+0x42>
 80180fc:	9b00      	ldr	r3, [sp, #0]
 80180fe:	58eb      	ldr	r3, [r5, r3]
 8018100:	b92b      	cbnz	r3, 801810e <quorem+0x96>
 8018102:	9b01      	ldr	r3, [sp, #4]
 8018104:	3b04      	subs	r3, #4
 8018106:	429d      	cmp	r5, r3
 8018108:	461a      	mov	r2, r3
 801810a:	d32f      	bcc.n	801816c <quorem+0xf4>
 801810c:	613c      	str	r4, [r7, #16]
 801810e:	4638      	mov	r0, r7
 8018110:	f001 f8ce 	bl	80192b0 <__mcmp>
 8018114:	2800      	cmp	r0, #0
 8018116:	db25      	blt.n	8018164 <quorem+0xec>
 8018118:	4629      	mov	r1, r5
 801811a:	2000      	movs	r0, #0
 801811c:	f858 2b04 	ldr.w	r2, [r8], #4
 8018120:	f8d1 c000 	ldr.w	ip, [r1]
 8018124:	fa1f fe82 	uxth.w	lr, r2
 8018128:	fa1f f38c 	uxth.w	r3, ip
 801812c:	eba3 030e 	sub.w	r3, r3, lr
 8018130:	4403      	add	r3, r0
 8018132:	0c12      	lsrs	r2, r2, #16
 8018134:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8018138:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801813c:	b29b      	uxth	r3, r3
 801813e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018142:	45c1      	cmp	r9, r8
 8018144:	f841 3b04 	str.w	r3, [r1], #4
 8018148:	ea4f 4022 	mov.w	r0, r2, asr #16
 801814c:	d2e6      	bcs.n	801811c <quorem+0xa4>
 801814e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8018152:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018156:	b922      	cbnz	r2, 8018162 <quorem+0xea>
 8018158:	3b04      	subs	r3, #4
 801815a:	429d      	cmp	r5, r3
 801815c:	461a      	mov	r2, r3
 801815e:	d30b      	bcc.n	8018178 <quorem+0x100>
 8018160:	613c      	str	r4, [r7, #16]
 8018162:	3601      	adds	r6, #1
 8018164:	4630      	mov	r0, r6
 8018166:	b003      	add	sp, #12
 8018168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801816c:	6812      	ldr	r2, [r2, #0]
 801816e:	3b04      	subs	r3, #4
 8018170:	2a00      	cmp	r2, #0
 8018172:	d1cb      	bne.n	801810c <quorem+0x94>
 8018174:	3c01      	subs	r4, #1
 8018176:	e7c6      	b.n	8018106 <quorem+0x8e>
 8018178:	6812      	ldr	r2, [r2, #0]
 801817a:	3b04      	subs	r3, #4
 801817c:	2a00      	cmp	r2, #0
 801817e:	d1ef      	bne.n	8018160 <quorem+0xe8>
 8018180:	3c01      	subs	r4, #1
 8018182:	e7ea      	b.n	801815a <quorem+0xe2>
 8018184:	2000      	movs	r0, #0
 8018186:	e7ee      	b.n	8018166 <quorem+0xee>

08018188 <_dtoa_r>:
 8018188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801818c:	69c7      	ldr	r7, [r0, #28]
 801818e:	b099      	sub	sp, #100	@ 0x64
 8018190:	ed8d 0b02 	vstr	d0, [sp, #8]
 8018194:	ec55 4b10 	vmov	r4, r5, d0
 8018198:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801819a:	9109      	str	r1, [sp, #36]	@ 0x24
 801819c:	4683      	mov	fp, r0
 801819e:	920e      	str	r2, [sp, #56]	@ 0x38
 80181a0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80181a2:	b97f      	cbnz	r7, 80181c4 <_dtoa_r+0x3c>
 80181a4:	2010      	movs	r0, #16
 80181a6:	f7fe fd2b 	bl	8016c00 <malloc>
 80181aa:	4602      	mov	r2, r0
 80181ac:	f8cb 001c 	str.w	r0, [fp, #28]
 80181b0:	b920      	cbnz	r0, 80181bc <_dtoa_r+0x34>
 80181b2:	4ba7      	ldr	r3, [pc, #668]	@ (8018450 <_dtoa_r+0x2c8>)
 80181b4:	21ef      	movs	r1, #239	@ 0xef
 80181b6:	48a7      	ldr	r0, [pc, #668]	@ (8018454 <_dtoa_r+0x2cc>)
 80181b8:	f7ff ff40 	bl	801803c <__assert_func>
 80181bc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80181c0:	6007      	str	r7, [r0, #0]
 80181c2:	60c7      	str	r7, [r0, #12]
 80181c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80181c8:	6819      	ldr	r1, [r3, #0]
 80181ca:	b159      	cbz	r1, 80181e4 <_dtoa_r+0x5c>
 80181cc:	685a      	ldr	r2, [r3, #4]
 80181ce:	604a      	str	r2, [r1, #4]
 80181d0:	2301      	movs	r3, #1
 80181d2:	4093      	lsls	r3, r2
 80181d4:	608b      	str	r3, [r1, #8]
 80181d6:	4658      	mov	r0, fp
 80181d8:	f000 fe30 	bl	8018e3c <_Bfree>
 80181dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80181e0:	2200      	movs	r2, #0
 80181e2:	601a      	str	r2, [r3, #0]
 80181e4:	1e2b      	subs	r3, r5, #0
 80181e6:	bfb9      	ittee	lt
 80181e8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80181ec:	9303      	strlt	r3, [sp, #12]
 80181ee:	2300      	movge	r3, #0
 80181f0:	6033      	strge	r3, [r6, #0]
 80181f2:	9f03      	ldr	r7, [sp, #12]
 80181f4:	4b98      	ldr	r3, [pc, #608]	@ (8018458 <_dtoa_r+0x2d0>)
 80181f6:	bfbc      	itt	lt
 80181f8:	2201      	movlt	r2, #1
 80181fa:	6032      	strlt	r2, [r6, #0]
 80181fc:	43bb      	bics	r3, r7
 80181fe:	d112      	bne.n	8018226 <_dtoa_r+0x9e>
 8018200:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8018202:	f242 730f 	movw	r3, #9999	@ 0x270f
 8018206:	6013      	str	r3, [r2, #0]
 8018208:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801820c:	4323      	orrs	r3, r4
 801820e:	f000 854d 	beq.w	8018cac <_dtoa_r+0xb24>
 8018212:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8018214:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801846c <_dtoa_r+0x2e4>
 8018218:	2b00      	cmp	r3, #0
 801821a:	f000 854f 	beq.w	8018cbc <_dtoa_r+0xb34>
 801821e:	f10a 0303 	add.w	r3, sl, #3
 8018222:	f000 bd49 	b.w	8018cb8 <_dtoa_r+0xb30>
 8018226:	ed9d 7b02 	vldr	d7, [sp, #8]
 801822a:	2200      	movs	r2, #0
 801822c:	ec51 0b17 	vmov	r0, r1, d7
 8018230:	2300      	movs	r3, #0
 8018232:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8018236:	f7e8 fc77 	bl	8000b28 <__aeabi_dcmpeq>
 801823a:	4680      	mov	r8, r0
 801823c:	b158      	cbz	r0, 8018256 <_dtoa_r+0xce>
 801823e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8018240:	2301      	movs	r3, #1
 8018242:	6013      	str	r3, [r2, #0]
 8018244:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8018246:	b113      	cbz	r3, 801824e <_dtoa_r+0xc6>
 8018248:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801824a:	4b84      	ldr	r3, [pc, #528]	@ (801845c <_dtoa_r+0x2d4>)
 801824c:	6013      	str	r3, [r2, #0]
 801824e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8018470 <_dtoa_r+0x2e8>
 8018252:	f000 bd33 	b.w	8018cbc <_dtoa_r+0xb34>
 8018256:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801825a:	aa16      	add	r2, sp, #88	@ 0x58
 801825c:	a917      	add	r1, sp, #92	@ 0x5c
 801825e:	4658      	mov	r0, fp
 8018260:	f001 f8d6 	bl	8019410 <__d2b>
 8018264:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8018268:	4681      	mov	r9, r0
 801826a:	2e00      	cmp	r6, #0
 801826c:	d077      	beq.n	801835e <_dtoa_r+0x1d6>
 801826e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018270:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8018274:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018278:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801827c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8018280:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8018284:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8018288:	4619      	mov	r1, r3
 801828a:	2200      	movs	r2, #0
 801828c:	4b74      	ldr	r3, [pc, #464]	@ (8018460 <_dtoa_r+0x2d8>)
 801828e:	f7e8 f82b 	bl	80002e8 <__aeabi_dsub>
 8018292:	a369      	add	r3, pc, #420	@ (adr r3, 8018438 <_dtoa_r+0x2b0>)
 8018294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018298:	f7e8 f9de 	bl	8000658 <__aeabi_dmul>
 801829c:	a368      	add	r3, pc, #416	@ (adr r3, 8018440 <_dtoa_r+0x2b8>)
 801829e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80182a2:	f7e8 f823 	bl	80002ec <__adddf3>
 80182a6:	4604      	mov	r4, r0
 80182a8:	4630      	mov	r0, r6
 80182aa:	460d      	mov	r5, r1
 80182ac:	f7e8 f96a 	bl	8000584 <__aeabi_i2d>
 80182b0:	a365      	add	r3, pc, #404	@ (adr r3, 8018448 <_dtoa_r+0x2c0>)
 80182b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80182b6:	f7e8 f9cf 	bl	8000658 <__aeabi_dmul>
 80182ba:	4602      	mov	r2, r0
 80182bc:	460b      	mov	r3, r1
 80182be:	4620      	mov	r0, r4
 80182c0:	4629      	mov	r1, r5
 80182c2:	f7e8 f813 	bl	80002ec <__adddf3>
 80182c6:	4604      	mov	r4, r0
 80182c8:	460d      	mov	r5, r1
 80182ca:	f7e8 fc75 	bl	8000bb8 <__aeabi_d2iz>
 80182ce:	2200      	movs	r2, #0
 80182d0:	4607      	mov	r7, r0
 80182d2:	2300      	movs	r3, #0
 80182d4:	4620      	mov	r0, r4
 80182d6:	4629      	mov	r1, r5
 80182d8:	f7e8 fc30 	bl	8000b3c <__aeabi_dcmplt>
 80182dc:	b140      	cbz	r0, 80182f0 <_dtoa_r+0x168>
 80182de:	4638      	mov	r0, r7
 80182e0:	f7e8 f950 	bl	8000584 <__aeabi_i2d>
 80182e4:	4622      	mov	r2, r4
 80182e6:	462b      	mov	r3, r5
 80182e8:	f7e8 fc1e 	bl	8000b28 <__aeabi_dcmpeq>
 80182ec:	b900      	cbnz	r0, 80182f0 <_dtoa_r+0x168>
 80182ee:	3f01      	subs	r7, #1
 80182f0:	2f16      	cmp	r7, #22
 80182f2:	d851      	bhi.n	8018398 <_dtoa_r+0x210>
 80182f4:	4b5b      	ldr	r3, [pc, #364]	@ (8018464 <_dtoa_r+0x2dc>)
 80182f6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80182fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80182fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8018302:	f7e8 fc1b 	bl	8000b3c <__aeabi_dcmplt>
 8018306:	2800      	cmp	r0, #0
 8018308:	d048      	beq.n	801839c <_dtoa_r+0x214>
 801830a:	3f01      	subs	r7, #1
 801830c:	2300      	movs	r3, #0
 801830e:	9312      	str	r3, [sp, #72]	@ 0x48
 8018310:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8018312:	1b9b      	subs	r3, r3, r6
 8018314:	1e5a      	subs	r2, r3, #1
 8018316:	bf44      	itt	mi
 8018318:	f1c3 0801 	rsbmi	r8, r3, #1
 801831c:	2300      	movmi	r3, #0
 801831e:	9208      	str	r2, [sp, #32]
 8018320:	bf54      	ite	pl
 8018322:	f04f 0800 	movpl.w	r8, #0
 8018326:	9308      	strmi	r3, [sp, #32]
 8018328:	2f00      	cmp	r7, #0
 801832a:	db39      	blt.n	80183a0 <_dtoa_r+0x218>
 801832c:	9b08      	ldr	r3, [sp, #32]
 801832e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8018330:	443b      	add	r3, r7
 8018332:	9308      	str	r3, [sp, #32]
 8018334:	2300      	movs	r3, #0
 8018336:	930a      	str	r3, [sp, #40]	@ 0x28
 8018338:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801833a:	2b09      	cmp	r3, #9
 801833c:	d864      	bhi.n	8018408 <_dtoa_r+0x280>
 801833e:	2b05      	cmp	r3, #5
 8018340:	bfc4      	itt	gt
 8018342:	3b04      	subgt	r3, #4
 8018344:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8018346:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018348:	f1a3 0302 	sub.w	r3, r3, #2
 801834c:	bfcc      	ite	gt
 801834e:	2400      	movgt	r4, #0
 8018350:	2401      	movle	r4, #1
 8018352:	2b03      	cmp	r3, #3
 8018354:	d863      	bhi.n	801841e <_dtoa_r+0x296>
 8018356:	e8df f003 	tbb	[pc, r3]
 801835a:	372a      	.short	0x372a
 801835c:	5535      	.short	0x5535
 801835e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8018362:	441e      	add	r6, r3
 8018364:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8018368:	2b20      	cmp	r3, #32
 801836a:	bfc1      	itttt	gt
 801836c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8018370:	409f      	lslgt	r7, r3
 8018372:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8018376:	fa24 f303 	lsrgt.w	r3, r4, r3
 801837a:	bfd6      	itet	le
 801837c:	f1c3 0320 	rsble	r3, r3, #32
 8018380:	ea47 0003 	orrgt.w	r0, r7, r3
 8018384:	fa04 f003 	lslle.w	r0, r4, r3
 8018388:	f7e8 f8ec 	bl	8000564 <__aeabi_ui2d>
 801838c:	2201      	movs	r2, #1
 801838e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8018392:	3e01      	subs	r6, #1
 8018394:	9214      	str	r2, [sp, #80]	@ 0x50
 8018396:	e777      	b.n	8018288 <_dtoa_r+0x100>
 8018398:	2301      	movs	r3, #1
 801839a:	e7b8      	b.n	801830e <_dtoa_r+0x186>
 801839c:	9012      	str	r0, [sp, #72]	@ 0x48
 801839e:	e7b7      	b.n	8018310 <_dtoa_r+0x188>
 80183a0:	427b      	negs	r3, r7
 80183a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80183a4:	2300      	movs	r3, #0
 80183a6:	eba8 0807 	sub.w	r8, r8, r7
 80183aa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80183ac:	e7c4      	b.n	8018338 <_dtoa_r+0x1b0>
 80183ae:	2300      	movs	r3, #0
 80183b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80183b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80183b4:	2b00      	cmp	r3, #0
 80183b6:	dc35      	bgt.n	8018424 <_dtoa_r+0x29c>
 80183b8:	2301      	movs	r3, #1
 80183ba:	9300      	str	r3, [sp, #0]
 80183bc:	9307      	str	r3, [sp, #28]
 80183be:	461a      	mov	r2, r3
 80183c0:	920e      	str	r2, [sp, #56]	@ 0x38
 80183c2:	e00b      	b.n	80183dc <_dtoa_r+0x254>
 80183c4:	2301      	movs	r3, #1
 80183c6:	e7f3      	b.n	80183b0 <_dtoa_r+0x228>
 80183c8:	2300      	movs	r3, #0
 80183ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 80183cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80183ce:	18fb      	adds	r3, r7, r3
 80183d0:	9300      	str	r3, [sp, #0]
 80183d2:	3301      	adds	r3, #1
 80183d4:	2b01      	cmp	r3, #1
 80183d6:	9307      	str	r3, [sp, #28]
 80183d8:	bfb8      	it	lt
 80183da:	2301      	movlt	r3, #1
 80183dc:	f8db 001c 	ldr.w	r0, [fp, #28]
 80183e0:	2100      	movs	r1, #0
 80183e2:	2204      	movs	r2, #4
 80183e4:	f102 0514 	add.w	r5, r2, #20
 80183e8:	429d      	cmp	r5, r3
 80183ea:	d91f      	bls.n	801842c <_dtoa_r+0x2a4>
 80183ec:	6041      	str	r1, [r0, #4]
 80183ee:	4658      	mov	r0, fp
 80183f0:	f000 fce4 	bl	8018dbc <_Balloc>
 80183f4:	4682      	mov	sl, r0
 80183f6:	2800      	cmp	r0, #0
 80183f8:	d13c      	bne.n	8018474 <_dtoa_r+0x2ec>
 80183fa:	4b1b      	ldr	r3, [pc, #108]	@ (8018468 <_dtoa_r+0x2e0>)
 80183fc:	4602      	mov	r2, r0
 80183fe:	f240 11af 	movw	r1, #431	@ 0x1af
 8018402:	e6d8      	b.n	80181b6 <_dtoa_r+0x2e>
 8018404:	2301      	movs	r3, #1
 8018406:	e7e0      	b.n	80183ca <_dtoa_r+0x242>
 8018408:	2401      	movs	r4, #1
 801840a:	2300      	movs	r3, #0
 801840c:	9309      	str	r3, [sp, #36]	@ 0x24
 801840e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8018410:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018414:	9300      	str	r3, [sp, #0]
 8018416:	9307      	str	r3, [sp, #28]
 8018418:	2200      	movs	r2, #0
 801841a:	2312      	movs	r3, #18
 801841c:	e7d0      	b.n	80183c0 <_dtoa_r+0x238>
 801841e:	2301      	movs	r3, #1
 8018420:	930b      	str	r3, [sp, #44]	@ 0x2c
 8018422:	e7f5      	b.n	8018410 <_dtoa_r+0x288>
 8018424:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018426:	9300      	str	r3, [sp, #0]
 8018428:	9307      	str	r3, [sp, #28]
 801842a:	e7d7      	b.n	80183dc <_dtoa_r+0x254>
 801842c:	3101      	adds	r1, #1
 801842e:	0052      	lsls	r2, r2, #1
 8018430:	e7d8      	b.n	80183e4 <_dtoa_r+0x25c>
 8018432:	bf00      	nop
 8018434:	f3af 8000 	nop.w
 8018438:	636f4361 	.word	0x636f4361
 801843c:	3fd287a7 	.word	0x3fd287a7
 8018440:	8b60c8b3 	.word	0x8b60c8b3
 8018444:	3fc68a28 	.word	0x3fc68a28
 8018448:	509f79fb 	.word	0x509f79fb
 801844c:	3fd34413 	.word	0x3fd34413
 8018450:	0801abfe 	.word	0x0801abfe
 8018454:	0801adeb 	.word	0x0801adeb
 8018458:	7ff00000 	.word	0x7ff00000
 801845c:	0801ad7f 	.word	0x0801ad7f
 8018460:	3ff80000 	.word	0x3ff80000
 8018464:	0801aee8 	.word	0x0801aee8
 8018468:	0801ae43 	.word	0x0801ae43
 801846c:	0801ade7 	.word	0x0801ade7
 8018470:	0801ad7e 	.word	0x0801ad7e
 8018474:	f8db 301c 	ldr.w	r3, [fp, #28]
 8018478:	6018      	str	r0, [r3, #0]
 801847a:	9b07      	ldr	r3, [sp, #28]
 801847c:	2b0e      	cmp	r3, #14
 801847e:	f200 80a4 	bhi.w	80185ca <_dtoa_r+0x442>
 8018482:	2c00      	cmp	r4, #0
 8018484:	f000 80a1 	beq.w	80185ca <_dtoa_r+0x442>
 8018488:	2f00      	cmp	r7, #0
 801848a:	dd33      	ble.n	80184f4 <_dtoa_r+0x36c>
 801848c:	4bad      	ldr	r3, [pc, #692]	@ (8018744 <_dtoa_r+0x5bc>)
 801848e:	f007 020f 	and.w	r2, r7, #15
 8018492:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018496:	ed93 7b00 	vldr	d7, [r3]
 801849a:	05f8      	lsls	r0, r7, #23
 801849c:	ed8d 7b04 	vstr	d7, [sp, #16]
 80184a0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80184a4:	d516      	bpl.n	80184d4 <_dtoa_r+0x34c>
 80184a6:	4ba8      	ldr	r3, [pc, #672]	@ (8018748 <_dtoa_r+0x5c0>)
 80184a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80184ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80184b0:	f7e8 f9fc 	bl	80008ac <__aeabi_ddiv>
 80184b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80184b8:	f004 040f 	and.w	r4, r4, #15
 80184bc:	2603      	movs	r6, #3
 80184be:	4da2      	ldr	r5, [pc, #648]	@ (8018748 <_dtoa_r+0x5c0>)
 80184c0:	b954      	cbnz	r4, 80184d8 <_dtoa_r+0x350>
 80184c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80184c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80184ca:	f7e8 f9ef 	bl	80008ac <__aeabi_ddiv>
 80184ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80184d2:	e028      	b.n	8018526 <_dtoa_r+0x39e>
 80184d4:	2602      	movs	r6, #2
 80184d6:	e7f2      	b.n	80184be <_dtoa_r+0x336>
 80184d8:	07e1      	lsls	r1, r4, #31
 80184da:	d508      	bpl.n	80184ee <_dtoa_r+0x366>
 80184dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80184e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80184e4:	f7e8 f8b8 	bl	8000658 <__aeabi_dmul>
 80184e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80184ec:	3601      	adds	r6, #1
 80184ee:	1064      	asrs	r4, r4, #1
 80184f0:	3508      	adds	r5, #8
 80184f2:	e7e5      	b.n	80184c0 <_dtoa_r+0x338>
 80184f4:	f000 80d2 	beq.w	801869c <_dtoa_r+0x514>
 80184f8:	427c      	negs	r4, r7
 80184fa:	4b92      	ldr	r3, [pc, #584]	@ (8018744 <_dtoa_r+0x5bc>)
 80184fc:	4d92      	ldr	r5, [pc, #584]	@ (8018748 <_dtoa_r+0x5c0>)
 80184fe:	f004 020f 	and.w	r2, r4, #15
 8018502:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018506:	e9d3 2300 	ldrd	r2, r3, [r3]
 801850a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801850e:	f7e8 f8a3 	bl	8000658 <__aeabi_dmul>
 8018512:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018516:	1124      	asrs	r4, r4, #4
 8018518:	2300      	movs	r3, #0
 801851a:	2602      	movs	r6, #2
 801851c:	2c00      	cmp	r4, #0
 801851e:	f040 80b2 	bne.w	8018686 <_dtoa_r+0x4fe>
 8018522:	2b00      	cmp	r3, #0
 8018524:	d1d3      	bne.n	80184ce <_dtoa_r+0x346>
 8018526:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8018528:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801852c:	2b00      	cmp	r3, #0
 801852e:	f000 80b7 	beq.w	80186a0 <_dtoa_r+0x518>
 8018532:	4b86      	ldr	r3, [pc, #536]	@ (801874c <_dtoa_r+0x5c4>)
 8018534:	2200      	movs	r2, #0
 8018536:	4620      	mov	r0, r4
 8018538:	4629      	mov	r1, r5
 801853a:	f7e8 faff 	bl	8000b3c <__aeabi_dcmplt>
 801853e:	2800      	cmp	r0, #0
 8018540:	f000 80ae 	beq.w	80186a0 <_dtoa_r+0x518>
 8018544:	9b07      	ldr	r3, [sp, #28]
 8018546:	2b00      	cmp	r3, #0
 8018548:	f000 80aa 	beq.w	80186a0 <_dtoa_r+0x518>
 801854c:	9b00      	ldr	r3, [sp, #0]
 801854e:	2b00      	cmp	r3, #0
 8018550:	dd37      	ble.n	80185c2 <_dtoa_r+0x43a>
 8018552:	1e7b      	subs	r3, r7, #1
 8018554:	9304      	str	r3, [sp, #16]
 8018556:	4620      	mov	r0, r4
 8018558:	4b7d      	ldr	r3, [pc, #500]	@ (8018750 <_dtoa_r+0x5c8>)
 801855a:	2200      	movs	r2, #0
 801855c:	4629      	mov	r1, r5
 801855e:	f7e8 f87b 	bl	8000658 <__aeabi_dmul>
 8018562:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018566:	9c00      	ldr	r4, [sp, #0]
 8018568:	3601      	adds	r6, #1
 801856a:	4630      	mov	r0, r6
 801856c:	f7e8 f80a 	bl	8000584 <__aeabi_i2d>
 8018570:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018574:	f7e8 f870 	bl	8000658 <__aeabi_dmul>
 8018578:	4b76      	ldr	r3, [pc, #472]	@ (8018754 <_dtoa_r+0x5cc>)
 801857a:	2200      	movs	r2, #0
 801857c:	f7e7 feb6 	bl	80002ec <__adddf3>
 8018580:	4605      	mov	r5, r0
 8018582:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8018586:	2c00      	cmp	r4, #0
 8018588:	f040 808d 	bne.w	80186a6 <_dtoa_r+0x51e>
 801858c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018590:	4b71      	ldr	r3, [pc, #452]	@ (8018758 <_dtoa_r+0x5d0>)
 8018592:	2200      	movs	r2, #0
 8018594:	f7e7 fea8 	bl	80002e8 <__aeabi_dsub>
 8018598:	4602      	mov	r2, r0
 801859a:	460b      	mov	r3, r1
 801859c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80185a0:	462a      	mov	r2, r5
 80185a2:	4633      	mov	r3, r6
 80185a4:	f7e8 fae8 	bl	8000b78 <__aeabi_dcmpgt>
 80185a8:	2800      	cmp	r0, #0
 80185aa:	f040 828b 	bne.w	8018ac4 <_dtoa_r+0x93c>
 80185ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80185b2:	462a      	mov	r2, r5
 80185b4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80185b8:	f7e8 fac0 	bl	8000b3c <__aeabi_dcmplt>
 80185bc:	2800      	cmp	r0, #0
 80185be:	f040 8128 	bne.w	8018812 <_dtoa_r+0x68a>
 80185c2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80185c6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80185ca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80185cc:	2b00      	cmp	r3, #0
 80185ce:	f2c0 815a 	blt.w	8018886 <_dtoa_r+0x6fe>
 80185d2:	2f0e      	cmp	r7, #14
 80185d4:	f300 8157 	bgt.w	8018886 <_dtoa_r+0x6fe>
 80185d8:	4b5a      	ldr	r3, [pc, #360]	@ (8018744 <_dtoa_r+0x5bc>)
 80185da:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80185de:	ed93 7b00 	vldr	d7, [r3]
 80185e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80185e4:	2b00      	cmp	r3, #0
 80185e6:	ed8d 7b00 	vstr	d7, [sp]
 80185ea:	da03      	bge.n	80185f4 <_dtoa_r+0x46c>
 80185ec:	9b07      	ldr	r3, [sp, #28]
 80185ee:	2b00      	cmp	r3, #0
 80185f0:	f340 8101 	ble.w	80187f6 <_dtoa_r+0x66e>
 80185f4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80185f8:	4656      	mov	r6, sl
 80185fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80185fe:	4620      	mov	r0, r4
 8018600:	4629      	mov	r1, r5
 8018602:	f7e8 f953 	bl	80008ac <__aeabi_ddiv>
 8018606:	f7e8 fad7 	bl	8000bb8 <__aeabi_d2iz>
 801860a:	4680      	mov	r8, r0
 801860c:	f7e7 ffba 	bl	8000584 <__aeabi_i2d>
 8018610:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018614:	f7e8 f820 	bl	8000658 <__aeabi_dmul>
 8018618:	4602      	mov	r2, r0
 801861a:	460b      	mov	r3, r1
 801861c:	4620      	mov	r0, r4
 801861e:	4629      	mov	r1, r5
 8018620:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8018624:	f7e7 fe60 	bl	80002e8 <__aeabi_dsub>
 8018628:	f806 4b01 	strb.w	r4, [r6], #1
 801862c:	9d07      	ldr	r5, [sp, #28]
 801862e:	eba6 040a 	sub.w	r4, r6, sl
 8018632:	42a5      	cmp	r5, r4
 8018634:	4602      	mov	r2, r0
 8018636:	460b      	mov	r3, r1
 8018638:	f040 8117 	bne.w	801886a <_dtoa_r+0x6e2>
 801863c:	f7e7 fe56 	bl	80002ec <__adddf3>
 8018640:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018644:	4604      	mov	r4, r0
 8018646:	460d      	mov	r5, r1
 8018648:	f7e8 fa96 	bl	8000b78 <__aeabi_dcmpgt>
 801864c:	2800      	cmp	r0, #0
 801864e:	f040 80f9 	bne.w	8018844 <_dtoa_r+0x6bc>
 8018652:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018656:	4620      	mov	r0, r4
 8018658:	4629      	mov	r1, r5
 801865a:	f7e8 fa65 	bl	8000b28 <__aeabi_dcmpeq>
 801865e:	b118      	cbz	r0, 8018668 <_dtoa_r+0x4e0>
 8018660:	f018 0f01 	tst.w	r8, #1
 8018664:	f040 80ee 	bne.w	8018844 <_dtoa_r+0x6bc>
 8018668:	4649      	mov	r1, r9
 801866a:	4658      	mov	r0, fp
 801866c:	f000 fbe6 	bl	8018e3c <_Bfree>
 8018670:	2300      	movs	r3, #0
 8018672:	7033      	strb	r3, [r6, #0]
 8018674:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8018676:	3701      	adds	r7, #1
 8018678:	601f      	str	r7, [r3, #0]
 801867a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801867c:	2b00      	cmp	r3, #0
 801867e:	f000 831d 	beq.w	8018cbc <_dtoa_r+0xb34>
 8018682:	601e      	str	r6, [r3, #0]
 8018684:	e31a      	b.n	8018cbc <_dtoa_r+0xb34>
 8018686:	07e2      	lsls	r2, r4, #31
 8018688:	d505      	bpl.n	8018696 <_dtoa_r+0x50e>
 801868a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801868e:	f7e7 ffe3 	bl	8000658 <__aeabi_dmul>
 8018692:	3601      	adds	r6, #1
 8018694:	2301      	movs	r3, #1
 8018696:	1064      	asrs	r4, r4, #1
 8018698:	3508      	adds	r5, #8
 801869a:	e73f      	b.n	801851c <_dtoa_r+0x394>
 801869c:	2602      	movs	r6, #2
 801869e:	e742      	b.n	8018526 <_dtoa_r+0x39e>
 80186a0:	9c07      	ldr	r4, [sp, #28]
 80186a2:	9704      	str	r7, [sp, #16]
 80186a4:	e761      	b.n	801856a <_dtoa_r+0x3e2>
 80186a6:	4b27      	ldr	r3, [pc, #156]	@ (8018744 <_dtoa_r+0x5bc>)
 80186a8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80186aa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80186ae:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80186b2:	4454      	add	r4, sl
 80186b4:	2900      	cmp	r1, #0
 80186b6:	d053      	beq.n	8018760 <_dtoa_r+0x5d8>
 80186b8:	4928      	ldr	r1, [pc, #160]	@ (801875c <_dtoa_r+0x5d4>)
 80186ba:	2000      	movs	r0, #0
 80186bc:	f7e8 f8f6 	bl	80008ac <__aeabi_ddiv>
 80186c0:	4633      	mov	r3, r6
 80186c2:	462a      	mov	r2, r5
 80186c4:	f7e7 fe10 	bl	80002e8 <__aeabi_dsub>
 80186c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80186cc:	4656      	mov	r6, sl
 80186ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80186d2:	f7e8 fa71 	bl	8000bb8 <__aeabi_d2iz>
 80186d6:	4605      	mov	r5, r0
 80186d8:	f7e7 ff54 	bl	8000584 <__aeabi_i2d>
 80186dc:	4602      	mov	r2, r0
 80186de:	460b      	mov	r3, r1
 80186e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80186e4:	f7e7 fe00 	bl	80002e8 <__aeabi_dsub>
 80186e8:	3530      	adds	r5, #48	@ 0x30
 80186ea:	4602      	mov	r2, r0
 80186ec:	460b      	mov	r3, r1
 80186ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80186f2:	f806 5b01 	strb.w	r5, [r6], #1
 80186f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80186fa:	f7e8 fa1f 	bl	8000b3c <__aeabi_dcmplt>
 80186fe:	2800      	cmp	r0, #0
 8018700:	d171      	bne.n	80187e6 <_dtoa_r+0x65e>
 8018702:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018706:	4911      	ldr	r1, [pc, #68]	@ (801874c <_dtoa_r+0x5c4>)
 8018708:	2000      	movs	r0, #0
 801870a:	f7e7 fded 	bl	80002e8 <__aeabi_dsub>
 801870e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8018712:	f7e8 fa13 	bl	8000b3c <__aeabi_dcmplt>
 8018716:	2800      	cmp	r0, #0
 8018718:	f040 8095 	bne.w	8018846 <_dtoa_r+0x6be>
 801871c:	42a6      	cmp	r6, r4
 801871e:	f43f af50 	beq.w	80185c2 <_dtoa_r+0x43a>
 8018722:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8018726:	4b0a      	ldr	r3, [pc, #40]	@ (8018750 <_dtoa_r+0x5c8>)
 8018728:	2200      	movs	r2, #0
 801872a:	f7e7 ff95 	bl	8000658 <__aeabi_dmul>
 801872e:	4b08      	ldr	r3, [pc, #32]	@ (8018750 <_dtoa_r+0x5c8>)
 8018730:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8018734:	2200      	movs	r2, #0
 8018736:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801873a:	f7e7 ff8d 	bl	8000658 <__aeabi_dmul>
 801873e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018742:	e7c4      	b.n	80186ce <_dtoa_r+0x546>
 8018744:	0801aee8 	.word	0x0801aee8
 8018748:	0801aec0 	.word	0x0801aec0
 801874c:	3ff00000 	.word	0x3ff00000
 8018750:	40240000 	.word	0x40240000
 8018754:	401c0000 	.word	0x401c0000
 8018758:	40140000 	.word	0x40140000
 801875c:	3fe00000 	.word	0x3fe00000
 8018760:	4631      	mov	r1, r6
 8018762:	4628      	mov	r0, r5
 8018764:	f7e7 ff78 	bl	8000658 <__aeabi_dmul>
 8018768:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801876c:	9415      	str	r4, [sp, #84]	@ 0x54
 801876e:	4656      	mov	r6, sl
 8018770:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018774:	f7e8 fa20 	bl	8000bb8 <__aeabi_d2iz>
 8018778:	4605      	mov	r5, r0
 801877a:	f7e7 ff03 	bl	8000584 <__aeabi_i2d>
 801877e:	4602      	mov	r2, r0
 8018780:	460b      	mov	r3, r1
 8018782:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018786:	f7e7 fdaf 	bl	80002e8 <__aeabi_dsub>
 801878a:	3530      	adds	r5, #48	@ 0x30
 801878c:	f806 5b01 	strb.w	r5, [r6], #1
 8018790:	4602      	mov	r2, r0
 8018792:	460b      	mov	r3, r1
 8018794:	42a6      	cmp	r6, r4
 8018796:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801879a:	f04f 0200 	mov.w	r2, #0
 801879e:	d124      	bne.n	80187ea <_dtoa_r+0x662>
 80187a0:	4bac      	ldr	r3, [pc, #688]	@ (8018a54 <_dtoa_r+0x8cc>)
 80187a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80187a6:	f7e7 fda1 	bl	80002ec <__adddf3>
 80187aa:	4602      	mov	r2, r0
 80187ac:	460b      	mov	r3, r1
 80187ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80187b2:	f7e8 f9e1 	bl	8000b78 <__aeabi_dcmpgt>
 80187b6:	2800      	cmp	r0, #0
 80187b8:	d145      	bne.n	8018846 <_dtoa_r+0x6be>
 80187ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80187be:	49a5      	ldr	r1, [pc, #660]	@ (8018a54 <_dtoa_r+0x8cc>)
 80187c0:	2000      	movs	r0, #0
 80187c2:	f7e7 fd91 	bl	80002e8 <__aeabi_dsub>
 80187c6:	4602      	mov	r2, r0
 80187c8:	460b      	mov	r3, r1
 80187ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80187ce:	f7e8 f9b5 	bl	8000b3c <__aeabi_dcmplt>
 80187d2:	2800      	cmp	r0, #0
 80187d4:	f43f aef5 	beq.w	80185c2 <_dtoa_r+0x43a>
 80187d8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80187da:	1e73      	subs	r3, r6, #1
 80187dc:	9315      	str	r3, [sp, #84]	@ 0x54
 80187de:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80187e2:	2b30      	cmp	r3, #48	@ 0x30
 80187e4:	d0f8      	beq.n	80187d8 <_dtoa_r+0x650>
 80187e6:	9f04      	ldr	r7, [sp, #16]
 80187e8:	e73e      	b.n	8018668 <_dtoa_r+0x4e0>
 80187ea:	4b9b      	ldr	r3, [pc, #620]	@ (8018a58 <_dtoa_r+0x8d0>)
 80187ec:	f7e7 ff34 	bl	8000658 <__aeabi_dmul>
 80187f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80187f4:	e7bc      	b.n	8018770 <_dtoa_r+0x5e8>
 80187f6:	d10c      	bne.n	8018812 <_dtoa_r+0x68a>
 80187f8:	4b98      	ldr	r3, [pc, #608]	@ (8018a5c <_dtoa_r+0x8d4>)
 80187fa:	2200      	movs	r2, #0
 80187fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018800:	f7e7 ff2a 	bl	8000658 <__aeabi_dmul>
 8018804:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018808:	f7e8 f9ac 	bl	8000b64 <__aeabi_dcmpge>
 801880c:	2800      	cmp	r0, #0
 801880e:	f000 8157 	beq.w	8018ac0 <_dtoa_r+0x938>
 8018812:	2400      	movs	r4, #0
 8018814:	4625      	mov	r5, r4
 8018816:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018818:	43db      	mvns	r3, r3
 801881a:	9304      	str	r3, [sp, #16]
 801881c:	4656      	mov	r6, sl
 801881e:	2700      	movs	r7, #0
 8018820:	4621      	mov	r1, r4
 8018822:	4658      	mov	r0, fp
 8018824:	f000 fb0a 	bl	8018e3c <_Bfree>
 8018828:	2d00      	cmp	r5, #0
 801882a:	d0dc      	beq.n	80187e6 <_dtoa_r+0x65e>
 801882c:	b12f      	cbz	r7, 801883a <_dtoa_r+0x6b2>
 801882e:	42af      	cmp	r7, r5
 8018830:	d003      	beq.n	801883a <_dtoa_r+0x6b2>
 8018832:	4639      	mov	r1, r7
 8018834:	4658      	mov	r0, fp
 8018836:	f000 fb01 	bl	8018e3c <_Bfree>
 801883a:	4629      	mov	r1, r5
 801883c:	4658      	mov	r0, fp
 801883e:	f000 fafd 	bl	8018e3c <_Bfree>
 8018842:	e7d0      	b.n	80187e6 <_dtoa_r+0x65e>
 8018844:	9704      	str	r7, [sp, #16]
 8018846:	4633      	mov	r3, r6
 8018848:	461e      	mov	r6, r3
 801884a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801884e:	2a39      	cmp	r2, #57	@ 0x39
 8018850:	d107      	bne.n	8018862 <_dtoa_r+0x6da>
 8018852:	459a      	cmp	sl, r3
 8018854:	d1f8      	bne.n	8018848 <_dtoa_r+0x6c0>
 8018856:	9a04      	ldr	r2, [sp, #16]
 8018858:	3201      	adds	r2, #1
 801885a:	9204      	str	r2, [sp, #16]
 801885c:	2230      	movs	r2, #48	@ 0x30
 801885e:	f88a 2000 	strb.w	r2, [sl]
 8018862:	781a      	ldrb	r2, [r3, #0]
 8018864:	3201      	adds	r2, #1
 8018866:	701a      	strb	r2, [r3, #0]
 8018868:	e7bd      	b.n	80187e6 <_dtoa_r+0x65e>
 801886a:	4b7b      	ldr	r3, [pc, #492]	@ (8018a58 <_dtoa_r+0x8d0>)
 801886c:	2200      	movs	r2, #0
 801886e:	f7e7 fef3 	bl	8000658 <__aeabi_dmul>
 8018872:	2200      	movs	r2, #0
 8018874:	2300      	movs	r3, #0
 8018876:	4604      	mov	r4, r0
 8018878:	460d      	mov	r5, r1
 801887a:	f7e8 f955 	bl	8000b28 <__aeabi_dcmpeq>
 801887e:	2800      	cmp	r0, #0
 8018880:	f43f aebb 	beq.w	80185fa <_dtoa_r+0x472>
 8018884:	e6f0      	b.n	8018668 <_dtoa_r+0x4e0>
 8018886:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8018888:	2a00      	cmp	r2, #0
 801888a:	f000 80db 	beq.w	8018a44 <_dtoa_r+0x8bc>
 801888e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018890:	2a01      	cmp	r2, #1
 8018892:	f300 80bf 	bgt.w	8018a14 <_dtoa_r+0x88c>
 8018896:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8018898:	2a00      	cmp	r2, #0
 801889a:	f000 80b7 	beq.w	8018a0c <_dtoa_r+0x884>
 801889e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80188a2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80188a4:	4646      	mov	r6, r8
 80188a6:	9a08      	ldr	r2, [sp, #32]
 80188a8:	2101      	movs	r1, #1
 80188aa:	441a      	add	r2, r3
 80188ac:	4658      	mov	r0, fp
 80188ae:	4498      	add	r8, r3
 80188b0:	9208      	str	r2, [sp, #32]
 80188b2:	f000 fb77 	bl	8018fa4 <__i2b>
 80188b6:	4605      	mov	r5, r0
 80188b8:	b15e      	cbz	r6, 80188d2 <_dtoa_r+0x74a>
 80188ba:	9b08      	ldr	r3, [sp, #32]
 80188bc:	2b00      	cmp	r3, #0
 80188be:	dd08      	ble.n	80188d2 <_dtoa_r+0x74a>
 80188c0:	42b3      	cmp	r3, r6
 80188c2:	9a08      	ldr	r2, [sp, #32]
 80188c4:	bfa8      	it	ge
 80188c6:	4633      	movge	r3, r6
 80188c8:	eba8 0803 	sub.w	r8, r8, r3
 80188cc:	1af6      	subs	r6, r6, r3
 80188ce:	1ad3      	subs	r3, r2, r3
 80188d0:	9308      	str	r3, [sp, #32]
 80188d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80188d4:	b1f3      	cbz	r3, 8018914 <_dtoa_r+0x78c>
 80188d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80188d8:	2b00      	cmp	r3, #0
 80188da:	f000 80b7 	beq.w	8018a4c <_dtoa_r+0x8c4>
 80188de:	b18c      	cbz	r4, 8018904 <_dtoa_r+0x77c>
 80188e0:	4629      	mov	r1, r5
 80188e2:	4622      	mov	r2, r4
 80188e4:	4658      	mov	r0, fp
 80188e6:	f000 fc1d 	bl	8019124 <__pow5mult>
 80188ea:	464a      	mov	r2, r9
 80188ec:	4601      	mov	r1, r0
 80188ee:	4605      	mov	r5, r0
 80188f0:	4658      	mov	r0, fp
 80188f2:	f000 fb6d 	bl	8018fd0 <__multiply>
 80188f6:	4649      	mov	r1, r9
 80188f8:	9004      	str	r0, [sp, #16]
 80188fa:	4658      	mov	r0, fp
 80188fc:	f000 fa9e 	bl	8018e3c <_Bfree>
 8018900:	9b04      	ldr	r3, [sp, #16]
 8018902:	4699      	mov	r9, r3
 8018904:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018906:	1b1a      	subs	r2, r3, r4
 8018908:	d004      	beq.n	8018914 <_dtoa_r+0x78c>
 801890a:	4649      	mov	r1, r9
 801890c:	4658      	mov	r0, fp
 801890e:	f000 fc09 	bl	8019124 <__pow5mult>
 8018912:	4681      	mov	r9, r0
 8018914:	2101      	movs	r1, #1
 8018916:	4658      	mov	r0, fp
 8018918:	f000 fb44 	bl	8018fa4 <__i2b>
 801891c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801891e:	4604      	mov	r4, r0
 8018920:	2b00      	cmp	r3, #0
 8018922:	f000 81cf 	beq.w	8018cc4 <_dtoa_r+0xb3c>
 8018926:	461a      	mov	r2, r3
 8018928:	4601      	mov	r1, r0
 801892a:	4658      	mov	r0, fp
 801892c:	f000 fbfa 	bl	8019124 <__pow5mult>
 8018930:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018932:	2b01      	cmp	r3, #1
 8018934:	4604      	mov	r4, r0
 8018936:	f300 8095 	bgt.w	8018a64 <_dtoa_r+0x8dc>
 801893a:	9b02      	ldr	r3, [sp, #8]
 801893c:	2b00      	cmp	r3, #0
 801893e:	f040 8087 	bne.w	8018a50 <_dtoa_r+0x8c8>
 8018942:	9b03      	ldr	r3, [sp, #12]
 8018944:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018948:	2b00      	cmp	r3, #0
 801894a:	f040 8089 	bne.w	8018a60 <_dtoa_r+0x8d8>
 801894e:	9b03      	ldr	r3, [sp, #12]
 8018950:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8018954:	0d1b      	lsrs	r3, r3, #20
 8018956:	051b      	lsls	r3, r3, #20
 8018958:	b12b      	cbz	r3, 8018966 <_dtoa_r+0x7de>
 801895a:	9b08      	ldr	r3, [sp, #32]
 801895c:	3301      	adds	r3, #1
 801895e:	9308      	str	r3, [sp, #32]
 8018960:	f108 0801 	add.w	r8, r8, #1
 8018964:	2301      	movs	r3, #1
 8018966:	930a      	str	r3, [sp, #40]	@ 0x28
 8018968:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801896a:	2b00      	cmp	r3, #0
 801896c:	f000 81b0 	beq.w	8018cd0 <_dtoa_r+0xb48>
 8018970:	6923      	ldr	r3, [r4, #16]
 8018972:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8018976:	6918      	ldr	r0, [r3, #16]
 8018978:	f000 fac8 	bl	8018f0c <__hi0bits>
 801897c:	f1c0 0020 	rsb	r0, r0, #32
 8018980:	9b08      	ldr	r3, [sp, #32]
 8018982:	4418      	add	r0, r3
 8018984:	f010 001f 	ands.w	r0, r0, #31
 8018988:	d077      	beq.n	8018a7a <_dtoa_r+0x8f2>
 801898a:	f1c0 0320 	rsb	r3, r0, #32
 801898e:	2b04      	cmp	r3, #4
 8018990:	dd6b      	ble.n	8018a6a <_dtoa_r+0x8e2>
 8018992:	9b08      	ldr	r3, [sp, #32]
 8018994:	f1c0 001c 	rsb	r0, r0, #28
 8018998:	4403      	add	r3, r0
 801899a:	4480      	add	r8, r0
 801899c:	4406      	add	r6, r0
 801899e:	9308      	str	r3, [sp, #32]
 80189a0:	f1b8 0f00 	cmp.w	r8, #0
 80189a4:	dd05      	ble.n	80189b2 <_dtoa_r+0x82a>
 80189a6:	4649      	mov	r1, r9
 80189a8:	4642      	mov	r2, r8
 80189aa:	4658      	mov	r0, fp
 80189ac:	f000 fc14 	bl	80191d8 <__lshift>
 80189b0:	4681      	mov	r9, r0
 80189b2:	9b08      	ldr	r3, [sp, #32]
 80189b4:	2b00      	cmp	r3, #0
 80189b6:	dd05      	ble.n	80189c4 <_dtoa_r+0x83c>
 80189b8:	4621      	mov	r1, r4
 80189ba:	461a      	mov	r2, r3
 80189bc:	4658      	mov	r0, fp
 80189be:	f000 fc0b 	bl	80191d8 <__lshift>
 80189c2:	4604      	mov	r4, r0
 80189c4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80189c6:	2b00      	cmp	r3, #0
 80189c8:	d059      	beq.n	8018a7e <_dtoa_r+0x8f6>
 80189ca:	4621      	mov	r1, r4
 80189cc:	4648      	mov	r0, r9
 80189ce:	f000 fc6f 	bl	80192b0 <__mcmp>
 80189d2:	2800      	cmp	r0, #0
 80189d4:	da53      	bge.n	8018a7e <_dtoa_r+0x8f6>
 80189d6:	1e7b      	subs	r3, r7, #1
 80189d8:	9304      	str	r3, [sp, #16]
 80189da:	4649      	mov	r1, r9
 80189dc:	2300      	movs	r3, #0
 80189de:	220a      	movs	r2, #10
 80189e0:	4658      	mov	r0, fp
 80189e2:	f000 fa4d 	bl	8018e80 <__multadd>
 80189e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80189e8:	4681      	mov	r9, r0
 80189ea:	2b00      	cmp	r3, #0
 80189ec:	f000 8172 	beq.w	8018cd4 <_dtoa_r+0xb4c>
 80189f0:	2300      	movs	r3, #0
 80189f2:	4629      	mov	r1, r5
 80189f4:	220a      	movs	r2, #10
 80189f6:	4658      	mov	r0, fp
 80189f8:	f000 fa42 	bl	8018e80 <__multadd>
 80189fc:	9b00      	ldr	r3, [sp, #0]
 80189fe:	2b00      	cmp	r3, #0
 8018a00:	4605      	mov	r5, r0
 8018a02:	dc67      	bgt.n	8018ad4 <_dtoa_r+0x94c>
 8018a04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018a06:	2b02      	cmp	r3, #2
 8018a08:	dc41      	bgt.n	8018a8e <_dtoa_r+0x906>
 8018a0a:	e063      	b.n	8018ad4 <_dtoa_r+0x94c>
 8018a0c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8018a0e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8018a12:	e746      	b.n	80188a2 <_dtoa_r+0x71a>
 8018a14:	9b07      	ldr	r3, [sp, #28]
 8018a16:	1e5c      	subs	r4, r3, #1
 8018a18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018a1a:	42a3      	cmp	r3, r4
 8018a1c:	bfbf      	itttt	lt
 8018a1e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8018a20:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8018a22:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8018a24:	1ae3      	sublt	r3, r4, r3
 8018a26:	bfb4      	ite	lt
 8018a28:	18d2      	addlt	r2, r2, r3
 8018a2a:	1b1c      	subge	r4, r3, r4
 8018a2c:	9b07      	ldr	r3, [sp, #28]
 8018a2e:	bfbc      	itt	lt
 8018a30:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8018a32:	2400      	movlt	r4, #0
 8018a34:	2b00      	cmp	r3, #0
 8018a36:	bfb5      	itete	lt
 8018a38:	eba8 0603 	sublt.w	r6, r8, r3
 8018a3c:	9b07      	ldrge	r3, [sp, #28]
 8018a3e:	2300      	movlt	r3, #0
 8018a40:	4646      	movge	r6, r8
 8018a42:	e730      	b.n	80188a6 <_dtoa_r+0x71e>
 8018a44:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8018a46:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8018a48:	4646      	mov	r6, r8
 8018a4a:	e735      	b.n	80188b8 <_dtoa_r+0x730>
 8018a4c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018a4e:	e75c      	b.n	801890a <_dtoa_r+0x782>
 8018a50:	2300      	movs	r3, #0
 8018a52:	e788      	b.n	8018966 <_dtoa_r+0x7de>
 8018a54:	3fe00000 	.word	0x3fe00000
 8018a58:	40240000 	.word	0x40240000
 8018a5c:	40140000 	.word	0x40140000
 8018a60:	9b02      	ldr	r3, [sp, #8]
 8018a62:	e780      	b.n	8018966 <_dtoa_r+0x7de>
 8018a64:	2300      	movs	r3, #0
 8018a66:	930a      	str	r3, [sp, #40]	@ 0x28
 8018a68:	e782      	b.n	8018970 <_dtoa_r+0x7e8>
 8018a6a:	d099      	beq.n	80189a0 <_dtoa_r+0x818>
 8018a6c:	9a08      	ldr	r2, [sp, #32]
 8018a6e:	331c      	adds	r3, #28
 8018a70:	441a      	add	r2, r3
 8018a72:	4498      	add	r8, r3
 8018a74:	441e      	add	r6, r3
 8018a76:	9208      	str	r2, [sp, #32]
 8018a78:	e792      	b.n	80189a0 <_dtoa_r+0x818>
 8018a7a:	4603      	mov	r3, r0
 8018a7c:	e7f6      	b.n	8018a6c <_dtoa_r+0x8e4>
 8018a7e:	9b07      	ldr	r3, [sp, #28]
 8018a80:	9704      	str	r7, [sp, #16]
 8018a82:	2b00      	cmp	r3, #0
 8018a84:	dc20      	bgt.n	8018ac8 <_dtoa_r+0x940>
 8018a86:	9300      	str	r3, [sp, #0]
 8018a88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018a8a:	2b02      	cmp	r3, #2
 8018a8c:	dd1e      	ble.n	8018acc <_dtoa_r+0x944>
 8018a8e:	9b00      	ldr	r3, [sp, #0]
 8018a90:	2b00      	cmp	r3, #0
 8018a92:	f47f aec0 	bne.w	8018816 <_dtoa_r+0x68e>
 8018a96:	4621      	mov	r1, r4
 8018a98:	2205      	movs	r2, #5
 8018a9a:	4658      	mov	r0, fp
 8018a9c:	f000 f9f0 	bl	8018e80 <__multadd>
 8018aa0:	4601      	mov	r1, r0
 8018aa2:	4604      	mov	r4, r0
 8018aa4:	4648      	mov	r0, r9
 8018aa6:	f000 fc03 	bl	80192b0 <__mcmp>
 8018aaa:	2800      	cmp	r0, #0
 8018aac:	f77f aeb3 	ble.w	8018816 <_dtoa_r+0x68e>
 8018ab0:	4656      	mov	r6, sl
 8018ab2:	2331      	movs	r3, #49	@ 0x31
 8018ab4:	f806 3b01 	strb.w	r3, [r6], #1
 8018ab8:	9b04      	ldr	r3, [sp, #16]
 8018aba:	3301      	adds	r3, #1
 8018abc:	9304      	str	r3, [sp, #16]
 8018abe:	e6ae      	b.n	801881e <_dtoa_r+0x696>
 8018ac0:	9c07      	ldr	r4, [sp, #28]
 8018ac2:	9704      	str	r7, [sp, #16]
 8018ac4:	4625      	mov	r5, r4
 8018ac6:	e7f3      	b.n	8018ab0 <_dtoa_r+0x928>
 8018ac8:	9b07      	ldr	r3, [sp, #28]
 8018aca:	9300      	str	r3, [sp, #0]
 8018acc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018ace:	2b00      	cmp	r3, #0
 8018ad0:	f000 8104 	beq.w	8018cdc <_dtoa_r+0xb54>
 8018ad4:	2e00      	cmp	r6, #0
 8018ad6:	dd05      	ble.n	8018ae4 <_dtoa_r+0x95c>
 8018ad8:	4629      	mov	r1, r5
 8018ada:	4632      	mov	r2, r6
 8018adc:	4658      	mov	r0, fp
 8018ade:	f000 fb7b 	bl	80191d8 <__lshift>
 8018ae2:	4605      	mov	r5, r0
 8018ae4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018ae6:	2b00      	cmp	r3, #0
 8018ae8:	d05a      	beq.n	8018ba0 <_dtoa_r+0xa18>
 8018aea:	6869      	ldr	r1, [r5, #4]
 8018aec:	4658      	mov	r0, fp
 8018aee:	f000 f965 	bl	8018dbc <_Balloc>
 8018af2:	4606      	mov	r6, r0
 8018af4:	b928      	cbnz	r0, 8018b02 <_dtoa_r+0x97a>
 8018af6:	4b84      	ldr	r3, [pc, #528]	@ (8018d08 <_dtoa_r+0xb80>)
 8018af8:	4602      	mov	r2, r0
 8018afa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8018afe:	f7ff bb5a 	b.w	80181b6 <_dtoa_r+0x2e>
 8018b02:	692a      	ldr	r2, [r5, #16]
 8018b04:	3202      	adds	r2, #2
 8018b06:	0092      	lsls	r2, r2, #2
 8018b08:	f105 010c 	add.w	r1, r5, #12
 8018b0c:	300c      	adds	r0, #12
 8018b0e:	f7ff fa86 	bl	801801e <memcpy>
 8018b12:	2201      	movs	r2, #1
 8018b14:	4631      	mov	r1, r6
 8018b16:	4658      	mov	r0, fp
 8018b18:	f000 fb5e 	bl	80191d8 <__lshift>
 8018b1c:	f10a 0301 	add.w	r3, sl, #1
 8018b20:	9307      	str	r3, [sp, #28]
 8018b22:	9b00      	ldr	r3, [sp, #0]
 8018b24:	4453      	add	r3, sl
 8018b26:	930b      	str	r3, [sp, #44]	@ 0x2c
 8018b28:	9b02      	ldr	r3, [sp, #8]
 8018b2a:	f003 0301 	and.w	r3, r3, #1
 8018b2e:	462f      	mov	r7, r5
 8018b30:	930a      	str	r3, [sp, #40]	@ 0x28
 8018b32:	4605      	mov	r5, r0
 8018b34:	9b07      	ldr	r3, [sp, #28]
 8018b36:	4621      	mov	r1, r4
 8018b38:	3b01      	subs	r3, #1
 8018b3a:	4648      	mov	r0, r9
 8018b3c:	9300      	str	r3, [sp, #0]
 8018b3e:	f7ff fa9b 	bl	8018078 <quorem>
 8018b42:	4639      	mov	r1, r7
 8018b44:	9002      	str	r0, [sp, #8]
 8018b46:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8018b4a:	4648      	mov	r0, r9
 8018b4c:	f000 fbb0 	bl	80192b0 <__mcmp>
 8018b50:	462a      	mov	r2, r5
 8018b52:	9008      	str	r0, [sp, #32]
 8018b54:	4621      	mov	r1, r4
 8018b56:	4658      	mov	r0, fp
 8018b58:	f000 fbc6 	bl	80192e8 <__mdiff>
 8018b5c:	68c2      	ldr	r2, [r0, #12]
 8018b5e:	4606      	mov	r6, r0
 8018b60:	bb02      	cbnz	r2, 8018ba4 <_dtoa_r+0xa1c>
 8018b62:	4601      	mov	r1, r0
 8018b64:	4648      	mov	r0, r9
 8018b66:	f000 fba3 	bl	80192b0 <__mcmp>
 8018b6a:	4602      	mov	r2, r0
 8018b6c:	4631      	mov	r1, r6
 8018b6e:	4658      	mov	r0, fp
 8018b70:	920e      	str	r2, [sp, #56]	@ 0x38
 8018b72:	f000 f963 	bl	8018e3c <_Bfree>
 8018b76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018b78:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018b7a:	9e07      	ldr	r6, [sp, #28]
 8018b7c:	ea43 0102 	orr.w	r1, r3, r2
 8018b80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018b82:	4319      	orrs	r1, r3
 8018b84:	d110      	bne.n	8018ba8 <_dtoa_r+0xa20>
 8018b86:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8018b8a:	d029      	beq.n	8018be0 <_dtoa_r+0xa58>
 8018b8c:	9b08      	ldr	r3, [sp, #32]
 8018b8e:	2b00      	cmp	r3, #0
 8018b90:	dd02      	ble.n	8018b98 <_dtoa_r+0xa10>
 8018b92:	9b02      	ldr	r3, [sp, #8]
 8018b94:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8018b98:	9b00      	ldr	r3, [sp, #0]
 8018b9a:	f883 8000 	strb.w	r8, [r3]
 8018b9e:	e63f      	b.n	8018820 <_dtoa_r+0x698>
 8018ba0:	4628      	mov	r0, r5
 8018ba2:	e7bb      	b.n	8018b1c <_dtoa_r+0x994>
 8018ba4:	2201      	movs	r2, #1
 8018ba6:	e7e1      	b.n	8018b6c <_dtoa_r+0x9e4>
 8018ba8:	9b08      	ldr	r3, [sp, #32]
 8018baa:	2b00      	cmp	r3, #0
 8018bac:	db04      	blt.n	8018bb8 <_dtoa_r+0xa30>
 8018bae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8018bb0:	430b      	orrs	r3, r1
 8018bb2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8018bb4:	430b      	orrs	r3, r1
 8018bb6:	d120      	bne.n	8018bfa <_dtoa_r+0xa72>
 8018bb8:	2a00      	cmp	r2, #0
 8018bba:	dded      	ble.n	8018b98 <_dtoa_r+0xa10>
 8018bbc:	4649      	mov	r1, r9
 8018bbe:	2201      	movs	r2, #1
 8018bc0:	4658      	mov	r0, fp
 8018bc2:	f000 fb09 	bl	80191d8 <__lshift>
 8018bc6:	4621      	mov	r1, r4
 8018bc8:	4681      	mov	r9, r0
 8018bca:	f000 fb71 	bl	80192b0 <__mcmp>
 8018bce:	2800      	cmp	r0, #0
 8018bd0:	dc03      	bgt.n	8018bda <_dtoa_r+0xa52>
 8018bd2:	d1e1      	bne.n	8018b98 <_dtoa_r+0xa10>
 8018bd4:	f018 0f01 	tst.w	r8, #1
 8018bd8:	d0de      	beq.n	8018b98 <_dtoa_r+0xa10>
 8018bda:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8018bde:	d1d8      	bne.n	8018b92 <_dtoa_r+0xa0a>
 8018be0:	9a00      	ldr	r2, [sp, #0]
 8018be2:	2339      	movs	r3, #57	@ 0x39
 8018be4:	7013      	strb	r3, [r2, #0]
 8018be6:	4633      	mov	r3, r6
 8018be8:	461e      	mov	r6, r3
 8018bea:	3b01      	subs	r3, #1
 8018bec:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8018bf0:	2a39      	cmp	r2, #57	@ 0x39
 8018bf2:	d052      	beq.n	8018c9a <_dtoa_r+0xb12>
 8018bf4:	3201      	adds	r2, #1
 8018bf6:	701a      	strb	r2, [r3, #0]
 8018bf8:	e612      	b.n	8018820 <_dtoa_r+0x698>
 8018bfa:	2a00      	cmp	r2, #0
 8018bfc:	dd07      	ble.n	8018c0e <_dtoa_r+0xa86>
 8018bfe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8018c02:	d0ed      	beq.n	8018be0 <_dtoa_r+0xa58>
 8018c04:	9a00      	ldr	r2, [sp, #0]
 8018c06:	f108 0301 	add.w	r3, r8, #1
 8018c0a:	7013      	strb	r3, [r2, #0]
 8018c0c:	e608      	b.n	8018820 <_dtoa_r+0x698>
 8018c0e:	9b07      	ldr	r3, [sp, #28]
 8018c10:	9a07      	ldr	r2, [sp, #28]
 8018c12:	f803 8c01 	strb.w	r8, [r3, #-1]
 8018c16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018c18:	4293      	cmp	r3, r2
 8018c1a:	d028      	beq.n	8018c6e <_dtoa_r+0xae6>
 8018c1c:	4649      	mov	r1, r9
 8018c1e:	2300      	movs	r3, #0
 8018c20:	220a      	movs	r2, #10
 8018c22:	4658      	mov	r0, fp
 8018c24:	f000 f92c 	bl	8018e80 <__multadd>
 8018c28:	42af      	cmp	r7, r5
 8018c2a:	4681      	mov	r9, r0
 8018c2c:	f04f 0300 	mov.w	r3, #0
 8018c30:	f04f 020a 	mov.w	r2, #10
 8018c34:	4639      	mov	r1, r7
 8018c36:	4658      	mov	r0, fp
 8018c38:	d107      	bne.n	8018c4a <_dtoa_r+0xac2>
 8018c3a:	f000 f921 	bl	8018e80 <__multadd>
 8018c3e:	4607      	mov	r7, r0
 8018c40:	4605      	mov	r5, r0
 8018c42:	9b07      	ldr	r3, [sp, #28]
 8018c44:	3301      	adds	r3, #1
 8018c46:	9307      	str	r3, [sp, #28]
 8018c48:	e774      	b.n	8018b34 <_dtoa_r+0x9ac>
 8018c4a:	f000 f919 	bl	8018e80 <__multadd>
 8018c4e:	4629      	mov	r1, r5
 8018c50:	4607      	mov	r7, r0
 8018c52:	2300      	movs	r3, #0
 8018c54:	220a      	movs	r2, #10
 8018c56:	4658      	mov	r0, fp
 8018c58:	f000 f912 	bl	8018e80 <__multadd>
 8018c5c:	4605      	mov	r5, r0
 8018c5e:	e7f0      	b.n	8018c42 <_dtoa_r+0xaba>
 8018c60:	9b00      	ldr	r3, [sp, #0]
 8018c62:	2b00      	cmp	r3, #0
 8018c64:	bfcc      	ite	gt
 8018c66:	461e      	movgt	r6, r3
 8018c68:	2601      	movle	r6, #1
 8018c6a:	4456      	add	r6, sl
 8018c6c:	2700      	movs	r7, #0
 8018c6e:	4649      	mov	r1, r9
 8018c70:	2201      	movs	r2, #1
 8018c72:	4658      	mov	r0, fp
 8018c74:	f000 fab0 	bl	80191d8 <__lshift>
 8018c78:	4621      	mov	r1, r4
 8018c7a:	4681      	mov	r9, r0
 8018c7c:	f000 fb18 	bl	80192b0 <__mcmp>
 8018c80:	2800      	cmp	r0, #0
 8018c82:	dcb0      	bgt.n	8018be6 <_dtoa_r+0xa5e>
 8018c84:	d102      	bne.n	8018c8c <_dtoa_r+0xb04>
 8018c86:	f018 0f01 	tst.w	r8, #1
 8018c8a:	d1ac      	bne.n	8018be6 <_dtoa_r+0xa5e>
 8018c8c:	4633      	mov	r3, r6
 8018c8e:	461e      	mov	r6, r3
 8018c90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018c94:	2a30      	cmp	r2, #48	@ 0x30
 8018c96:	d0fa      	beq.n	8018c8e <_dtoa_r+0xb06>
 8018c98:	e5c2      	b.n	8018820 <_dtoa_r+0x698>
 8018c9a:	459a      	cmp	sl, r3
 8018c9c:	d1a4      	bne.n	8018be8 <_dtoa_r+0xa60>
 8018c9e:	9b04      	ldr	r3, [sp, #16]
 8018ca0:	3301      	adds	r3, #1
 8018ca2:	9304      	str	r3, [sp, #16]
 8018ca4:	2331      	movs	r3, #49	@ 0x31
 8018ca6:	f88a 3000 	strb.w	r3, [sl]
 8018caa:	e5b9      	b.n	8018820 <_dtoa_r+0x698>
 8018cac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8018cae:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8018d0c <_dtoa_r+0xb84>
 8018cb2:	b11b      	cbz	r3, 8018cbc <_dtoa_r+0xb34>
 8018cb4:	f10a 0308 	add.w	r3, sl, #8
 8018cb8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8018cba:	6013      	str	r3, [r2, #0]
 8018cbc:	4650      	mov	r0, sl
 8018cbe:	b019      	add	sp, #100	@ 0x64
 8018cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018cc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018cc6:	2b01      	cmp	r3, #1
 8018cc8:	f77f ae37 	ble.w	801893a <_dtoa_r+0x7b2>
 8018ccc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018cce:	930a      	str	r3, [sp, #40]	@ 0x28
 8018cd0:	2001      	movs	r0, #1
 8018cd2:	e655      	b.n	8018980 <_dtoa_r+0x7f8>
 8018cd4:	9b00      	ldr	r3, [sp, #0]
 8018cd6:	2b00      	cmp	r3, #0
 8018cd8:	f77f aed6 	ble.w	8018a88 <_dtoa_r+0x900>
 8018cdc:	4656      	mov	r6, sl
 8018cde:	4621      	mov	r1, r4
 8018ce0:	4648      	mov	r0, r9
 8018ce2:	f7ff f9c9 	bl	8018078 <quorem>
 8018ce6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8018cea:	f806 8b01 	strb.w	r8, [r6], #1
 8018cee:	9b00      	ldr	r3, [sp, #0]
 8018cf0:	eba6 020a 	sub.w	r2, r6, sl
 8018cf4:	4293      	cmp	r3, r2
 8018cf6:	ddb3      	ble.n	8018c60 <_dtoa_r+0xad8>
 8018cf8:	4649      	mov	r1, r9
 8018cfa:	2300      	movs	r3, #0
 8018cfc:	220a      	movs	r2, #10
 8018cfe:	4658      	mov	r0, fp
 8018d00:	f000 f8be 	bl	8018e80 <__multadd>
 8018d04:	4681      	mov	r9, r0
 8018d06:	e7ea      	b.n	8018cde <_dtoa_r+0xb56>
 8018d08:	0801ae43 	.word	0x0801ae43
 8018d0c:	0801adde 	.word	0x0801adde

08018d10 <__env_lock>:
 8018d10:	4801      	ldr	r0, [pc, #4]	@ (8018d18 <__env_lock+0x8>)
 8018d12:	f7ff b97a 	b.w	801800a <__retarget_lock_acquire_recursive>
 8018d16:	bf00      	nop
 8018d18:	2001144c 	.word	0x2001144c

08018d1c <__env_unlock>:
 8018d1c:	4801      	ldr	r0, [pc, #4]	@ (8018d24 <__env_unlock+0x8>)
 8018d1e:	f7ff b975 	b.w	801800c <__retarget_lock_release_recursive>
 8018d22:	bf00      	nop
 8018d24:	2001144c 	.word	0x2001144c

08018d28 <_free_r>:
 8018d28:	b538      	push	{r3, r4, r5, lr}
 8018d2a:	4605      	mov	r5, r0
 8018d2c:	2900      	cmp	r1, #0
 8018d2e:	d041      	beq.n	8018db4 <_free_r+0x8c>
 8018d30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018d34:	1f0c      	subs	r4, r1, #4
 8018d36:	2b00      	cmp	r3, #0
 8018d38:	bfb8      	it	lt
 8018d3a:	18e4      	addlt	r4, r4, r3
 8018d3c:	f7fe f812 	bl	8016d64 <__malloc_lock>
 8018d40:	4a1d      	ldr	r2, [pc, #116]	@ (8018db8 <_free_r+0x90>)
 8018d42:	6813      	ldr	r3, [r2, #0]
 8018d44:	b933      	cbnz	r3, 8018d54 <_free_r+0x2c>
 8018d46:	6063      	str	r3, [r4, #4]
 8018d48:	6014      	str	r4, [r2, #0]
 8018d4a:	4628      	mov	r0, r5
 8018d4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018d50:	f7fe b80e 	b.w	8016d70 <__malloc_unlock>
 8018d54:	42a3      	cmp	r3, r4
 8018d56:	d908      	bls.n	8018d6a <_free_r+0x42>
 8018d58:	6820      	ldr	r0, [r4, #0]
 8018d5a:	1821      	adds	r1, r4, r0
 8018d5c:	428b      	cmp	r3, r1
 8018d5e:	bf01      	itttt	eq
 8018d60:	6819      	ldreq	r1, [r3, #0]
 8018d62:	685b      	ldreq	r3, [r3, #4]
 8018d64:	1809      	addeq	r1, r1, r0
 8018d66:	6021      	streq	r1, [r4, #0]
 8018d68:	e7ed      	b.n	8018d46 <_free_r+0x1e>
 8018d6a:	461a      	mov	r2, r3
 8018d6c:	685b      	ldr	r3, [r3, #4]
 8018d6e:	b10b      	cbz	r3, 8018d74 <_free_r+0x4c>
 8018d70:	42a3      	cmp	r3, r4
 8018d72:	d9fa      	bls.n	8018d6a <_free_r+0x42>
 8018d74:	6811      	ldr	r1, [r2, #0]
 8018d76:	1850      	adds	r0, r2, r1
 8018d78:	42a0      	cmp	r0, r4
 8018d7a:	d10b      	bne.n	8018d94 <_free_r+0x6c>
 8018d7c:	6820      	ldr	r0, [r4, #0]
 8018d7e:	4401      	add	r1, r0
 8018d80:	1850      	adds	r0, r2, r1
 8018d82:	4283      	cmp	r3, r0
 8018d84:	6011      	str	r1, [r2, #0]
 8018d86:	d1e0      	bne.n	8018d4a <_free_r+0x22>
 8018d88:	6818      	ldr	r0, [r3, #0]
 8018d8a:	685b      	ldr	r3, [r3, #4]
 8018d8c:	6053      	str	r3, [r2, #4]
 8018d8e:	4408      	add	r0, r1
 8018d90:	6010      	str	r0, [r2, #0]
 8018d92:	e7da      	b.n	8018d4a <_free_r+0x22>
 8018d94:	d902      	bls.n	8018d9c <_free_r+0x74>
 8018d96:	230c      	movs	r3, #12
 8018d98:	602b      	str	r3, [r5, #0]
 8018d9a:	e7d6      	b.n	8018d4a <_free_r+0x22>
 8018d9c:	6820      	ldr	r0, [r4, #0]
 8018d9e:	1821      	adds	r1, r4, r0
 8018da0:	428b      	cmp	r3, r1
 8018da2:	bf04      	itt	eq
 8018da4:	6819      	ldreq	r1, [r3, #0]
 8018da6:	685b      	ldreq	r3, [r3, #4]
 8018da8:	6063      	str	r3, [r4, #4]
 8018daa:	bf04      	itt	eq
 8018dac:	1809      	addeq	r1, r1, r0
 8018dae:	6021      	streq	r1, [r4, #0]
 8018db0:	6054      	str	r4, [r2, #4]
 8018db2:	e7ca      	b.n	8018d4a <_free_r+0x22>
 8018db4:	bd38      	pop	{r3, r4, r5, pc}
 8018db6:	bf00      	nop
 8018db8:	20011308 	.word	0x20011308

08018dbc <_Balloc>:
 8018dbc:	b570      	push	{r4, r5, r6, lr}
 8018dbe:	69c6      	ldr	r6, [r0, #28]
 8018dc0:	4604      	mov	r4, r0
 8018dc2:	460d      	mov	r5, r1
 8018dc4:	b976      	cbnz	r6, 8018de4 <_Balloc+0x28>
 8018dc6:	2010      	movs	r0, #16
 8018dc8:	f7fd ff1a 	bl	8016c00 <malloc>
 8018dcc:	4602      	mov	r2, r0
 8018dce:	61e0      	str	r0, [r4, #28]
 8018dd0:	b920      	cbnz	r0, 8018ddc <_Balloc+0x20>
 8018dd2:	4b18      	ldr	r3, [pc, #96]	@ (8018e34 <_Balloc+0x78>)
 8018dd4:	4818      	ldr	r0, [pc, #96]	@ (8018e38 <_Balloc+0x7c>)
 8018dd6:	216b      	movs	r1, #107	@ 0x6b
 8018dd8:	f7ff f930 	bl	801803c <__assert_func>
 8018ddc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018de0:	6006      	str	r6, [r0, #0]
 8018de2:	60c6      	str	r6, [r0, #12]
 8018de4:	69e6      	ldr	r6, [r4, #28]
 8018de6:	68f3      	ldr	r3, [r6, #12]
 8018de8:	b183      	cbz	r3, 8018e0c <_Balloc+0x50>
 8018dea:	69e3      	ldr	r3, [r4, #28]
 8018dec:	68db      	ldr	r3, [r3, #12]
 8018dee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8018df2:	b9b8      	cbnz	r0, 8018e24 <_Balloc+0x68>
 8018df4:	2101      	movs	r1, #1
 8018df6:	fa01 f605 	lsl.w	r6, r1, r5
 8018dfa:	1d72      	adds	r2, r6, #5
 8018dfc:	0092      	lsls	r2, r2, #2
 8018dfe:	4620      	mov	r0, r4
 8018e00:	f7fd fe90 	bl	8016b24 <_calloc_r>
 8018e04:	b160      	cbz	r0, 8018e20 <_Balloc+0x64>
 8018e06:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8018e0a:	e00e      	b.n	8018e2a <_Balloc+0x6e>
 8018e0c:	2221      	movs	r2, #33	@ 0x21
 8018e0e:	2104      	movs	r1, #4
 8018e10:	4620      	mov	r0, r4
 8018e12:	f7fd fe87 	bl	8016b24 <_calloc_r>
 8018e16:	69e3      	ldr	r3, [r4, #28]
 8018e18:	60f0      	str	r0, [r6, #12]
 8018e1a:	68db      	ldr	r3, [r3, #12]
 8018e1c:	2b00      	cmp	r3, #0
 8018e1e:	d1e4      	bne.n	8018dea <_Balloc+0x2e>
 8018e20:	2000      	movs	r0, #0
 8018e22:	bd70      	pop	{r4, r5, r6, pc}
 8018e24:	6802      	ldr	r2, [r0, #0]
 8018e26:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018e2a:	2300      	movs	r3, #0
 8018e2c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018e30:	e7f7      	b.n	8018e22 <_Balloc+0x66>
 8018e32:	bf00      	nop
 8018e34:	0801abfe 	.word	0x0801abfe
 8018e38:	0801ae54 	.word	0x0801ae54

08018e3c <_Bfree>:
 8018e3c:	b570      	push	{r4, r5, r6, lr}
 8018e3e:	69c6      	ldr	r6, [r0, #28]
 8018e40:	4605      	mov	r5, r0
 8018e42:	460c      	mov	r4, r1
 8018e44:	b976      	cbnz	r6, 8018e64 <_Bfree+0x28>
 8018e46:	2010      	movs	r0, #16
 8018e48:	f7fd feda 	bl	8016c00 <malloc>
 8018e4c:	4602      	mov	r2, r0
 8018e4e:	61e8      	str	r0, [r5, #28]
 8018e50:	b920      	cbnz	r0, 8018e5c <_Bfree+0x20>
 8018e52:	4b09      	ldr	r3, [pc, #36]	@ (8018e78 <_Bfree+0x3c>)
 8018e54:	4809      	ldr	r0, [pc, #36]	@ (8018e7c <_Bfree+0x40>)
 8018e56:	218f      	movs	r1, #143	@ 0x8f
 8018e58:	f7ff f8f0 	bl	801803c <__assert_func>
 8018e5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018e60:	6006      	str	r6, [r0, #0]
 8018e62:	60c6      	str	r6, [r0, #12]
 8018e64:	b13c      	cbz	r4, 8018e76 <_Bfree+0x3a>
 8018e66:	69eb      	ldr	r3, [r5, #28]
 8018e68:	6862      	ldr	r2, [r4, #4]
 8018e6a:	68db      	ldr	r3, [r3, #12]
 8018e6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018e70:	6021      	str	r1, [r4, #0]
 8018e72:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8018e76:	bd70      	pop	{r4, r5, r6, pc}
 8018e78:	0801abfe 	.word	0x0801abfe
 8018e7c:	0801ae54 	.word	0x0801ae54

08018e80 <__multadd>:
 8018e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018e84:	690d      	ldr	r5, [r1, #16]
 8018e86:	4607      	mov	r7, r0
 8018e88:	460c      	mov	r4, r1
 8018e8a:	461e      	mov	r6, r3
 8018e8c:	f101 0c14 	add.w	ip, r1, #20
 8018e90:	2000      	movs	r0, #0
 8018e92:	f8dc 3000 	ldr.w	r3, [ip]
 8018e96:	b299      	uxth	r1, r3
 8018e98:	fb02 6101 	mla	r1, r2, r1, r6
 8018e9c:	0c1e      	lsrs	r6, r3, #16
 8018e9e:	0c0b      	lsrs	r3, r1, #16
 8018ea0:	fb02 3306 	mla	r3, r2, r6, r3
 8018ea4:	b289      	uxth	r1, r1
 8018ea6:	3001      	adds	r0, #1
 8018ea8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8018eac:	4285      	cmp	r5, r0
 8018eae:	f84c 1b04 	str.w	r1, [ip], #4
 8018eb2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8018eb6:	dcec      	bgt.n	8018e92 <__multadd+0x12>
 8018eb8:	b30e      	cbz	r6, 8018efe <__multadd+0x7e>
 8018eba:	68a3      	ldr	r3, [r4, #8]
 8018ebc:	42ab      	cmp	r3, r5
 8018ebe:	dc19      	bgt.n	8018ef4 <__multadd+0x74>
 8018ec0:	6861      	ldr	r1, [r4, #4]
 8018ec2:	4638      	mov	r0, r7
 8018ec4:	3101      	adds	r1, #1
 8018ec6:	f7ff ff79 	bl	8018dbc <_Balloc>
 8018eca:	4680      	mov	r8, r0
 8018ecc:	b928      	cbnz	r0, 8018eda <__multadd+0x5a>
 8018ece:	4602      	mov	r2, r0
 8018ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8018f04 <__multadd+0x84>)
 8018ed2:	480d      	ldr	r0, [pc, #52]	@ (8018f08 <__multadd+0x88>)
 8018ed4:	21ba      	movs	r1, #186	@ 0xba
 8018ed6:	f7ff f8b1 	bl	801803c <__assert_func>
 8018eda:	6922      	ldr	r2, [r4, #16]
 8018edc:	3202      	adds	r2, #2
 8018ede:	f104 010c 	add.w	r1, r4, #12
 8018ee2:	0092      	lsls	r2, r2, #2
 8018ee4:	300c      	adds	r0, #12
 8018ee6:	f7ff f89a 	bl	801801e <memcpy>
 8018eea:	4621      	mov	r1, r4
 8018eec:	4638      	mov	r0, r7
 8018eee:	f7ff ffa5 	bl	8018e3c <_Bfree>
 8018ef2:	4644      	mov	r4, r8
 8018ef4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8018ef8:	3501      	adds	r5, #1
 8018efa:	615e      	str	r6, [r3, #20]
 8018efc:	6125      	str	r5, [r4, #16]
 8018efe:	4620      	mov	r0, r4
 8018f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018f04:	0801ae43 	.word	0x0801ae43
 8018f08:	0801ae54 	.word	0x0801ae54

08018f0c <__hi0bits>:
 8018f0c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8018f10:	4603      	mov	r3, r0
 8018f12:	bf36      	itet	cc
 8018f14:	0403      	lslcc	r3, r0, #16
 8018f16:	2000      	movcs	r0, #0
 8018f18:	2010      	movcc	r0, #16
 8018f1a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8018f1e:	bf3c      	itt	cc
 8018f20:	021b      	lslcc	r3, r3, #8
 8018f22:	3008      	addcc	r0, #8
 8018f24:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8018f28:	bf3c      	itt	cc
 8018f2a:	011b      	lslcc	r3, r3, #4
 8018f2c:	3004      	addcc	r0, #4
 8018f2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8018f32:	bf3c      	itt	cc
 8018f34:	009b      	lslcc	r3, r3, #2
 8018f36:	3002      	addcc	r0, #2
 8018f38:	2b00      	cmp	r3, #0
 8018f3a:	db05      	blt.n	8018f48 <__hi0bits+0x3c>
 8018f3c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8018f40:	f100 0001 	add.w	r0, r0, #1
 8018f44:	bf08      	it	eq
 8018f46:	2020      	moveq	r0, #32
 8018f48:	4770      	bx	lr

08018f4a <__lo0bits>:
 8018f4a:	6803      	ldr	r3, [r0, #0]
 8018f4c:	4602      	mov	r2, r0
 8018f4e:	f013 0007 	ands.w	r0, r3, #7
 8018f52:	d00b      	beq.n	8018f6c <__lo0bits+0x22>
 8018f54:	07d9      	lsls	r1, r3, #31
 8018f56:	d421      	bmi.n	8018f9c <__lo0bits+0x52>
 8018f58:	0798      	lsls	r0, r3, #30
 8018f5a:	bf49      	itett	mi
 8018f5c:	085b      	lsrmi	r3, r3, #1
 8018f5e:	089b      	lsrpl	r3, r3, #2
 8018f60:	2001      	movmi	r0, #1
 8018f62:	6013      	strmi	r3, [r2, #0]
 8018f64:	bf5c      	itt	pl
 8018f66:	6013      	strpl	r3, [r2, #0]
 8018f68:	2002      	movpl	r0, #2
 8018f6a:	4770      	bx	lr
 8018f6c:	b299      	uxth	r1, r3
 8018f6e:	b909      	cbnz	r1, 8018f74 <__lo0bits+0x2a>
 8018f70:	0c1b      	lsrs	r3, r3, #16
 8018f72:	2010      	movs	r0, #16
 8018f74:	b2d9      	uxtb	r1, r3
 8018f76:	b909      	cbnz	r1, 8018f7c <__lo0bits+0x32>
 8018f78:	3008      	adds	r0, #8
 8018f7a:	0a1b      	lsrs	r3, r3, #8
 8018f7c:	0719      	lsls	r1, r3, #28
 8018f7e:	bf04      	itt	eq
 8018f80:	091b      	lsreq	r3, r3, #4
 8018f82:	3004      	addeq	r0, #4
 8018f84:	0799      	lsls	r1, r3, #30
 8018f86:	bf04      	itt	eq
 8018f88:	089b      	lsreq	r3, r3, #2
 8018f8a:	3002      	addeq	r0, #2
 8018f8c:	07d9      	lsls	r1, r3, #31
 8018f8e:	d403      	bmi.n	8018f98 <__lo0bits+0x4e>
 8018f90:	085b      	lsrs	r3, r3, #1
 8018f92:	f100 0001 	add.w	r0, r0, #1
 8018f96:	d003      	beq.n	8018fa0 <__lo0bits+0x56>
 8018f98:	6013      	str	r3, [r2, #0]
 8018f9a:	4770      	bx	lr
 8018f9c:	2000      	movs	r0, #0
 8018f9e:	4770      	bx	lr
 8018fa0:	2020      	movs	r0, #32
 8018fa2:	4770      	bx	lr

08018fa4 <__i2b>:
 8018fa4:	b510      	push	{r4, lr}
 8018fa6:	460c      	mov	r4, r1
 8018fa8:	2101      	movs	r1, #1
 8018faa:	f7ff ff07 	bl	8018dbc <_Balloc>
 8018fae:	4602      	mov	r2, r0
 8018fb0:	b928      	cbnz	r0, 8018fbe <__i2b+0x1a>
 8018fb2:	4b05      	ldr	r3, [pc, #20]	@ (8018fc8 <__i2b+0x24>)
 8018fb4:	4805      	ldr	r0, [pc, #20]	@ (8018fcc <__i2b+0x28>)
 8018fb6:	f240 1145 	movw	r1, #325	@ 0x145
 8018fba:	f7ff f83f 	bl	801803c <__assert_func>
 8018fbe:	2301      	movs	r3, #1
 8018fc0:	6144      	str	r4, [r0, #20]
 8018fc2:	6103      	str	r3, [r0, #16]
 8018fc4:	bd10      	pop	{r4, pc}
 8018fc6:	bf00      	nop
 8018fc8:	0801ae43 	.word	0x0801ae43
 8018fcc:	0801ae54 	.word	0x0801ae54

08018fd0 <__multiply>:
 8018fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018fd4:	4614      	mov	r4, r2
 8018fd6:	690a      	ldr	r2, [r1, #16]
 8018fd8:	6923      	ldr	r3, [r4, #16]
 8018fda:	429a      	cmp	r2, r3
 8018fdc:	bfa8      	it	ge
 8018fde:	4623      	movge	r3, r4
 8018fe0:	460f      	mov	r7, r1
 8018fe2:	bfa4      	itt	ge
 8018fe4:	460c      	movge	r4, r1
 8018fe6:	461f      	movge	r7, r3
 8018fe8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8018fec:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8018ff0:	68a3      	ldr	r3, [r4, #8]
 8018ff2:	6861      	ldr	r1, [r4, #4]
 8018ff4:	eb0a 0609 	add.w	r6, sl, r9
 8018ff8:	42b3      	cmp	r3, r6
 8018ffa:	b085      	sub	sp, #20
 8018ffc:	bfb8      	it	lt
 8018ffe:	3101      	addlt	r1, #1
 8019000:	f7ff fedc 	bl	8018dbc <_Balloc>
 8019004:	b930      	cbnz	r0, 8019014 <__multiply+0x44>
 8019006:	4602      	mov	r2, r0
 8019008:	4b44      	ldr	r3, [pc, #272]	@ (801911c <__multiply+0x14c>)
 801900a:	4845      	ldr	r0, [pc, #276]	@ (8019120 <__multiply+0x150>)
 801900c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8019010:	f7ff f814 	bl	801803c <__assert_func>
 8019014:	f100 0514 	add.w	r5, r0, #20
 8019018:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801901c:	462b      	mov	r3, r5
 801901e:	2200      	movs	r2, #0
 8019020:	4543      	cmp	r3, r8
 8019022:	d321      	bcc.n	8019068 <__multiply+0x98>
 8019024:	f107 0114 	add.w	r1, r7, #20
 8019028:	f104 0214 	add.w	r2, r4, #20
 801902c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8019030:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8019034:	9302      	str	r3, [sp, #8]
 8019036:	1b13      	subs	r3, r2, r4
 8019038:	3b15      	subs	r3, #21
 801903a:	f023 0303 	bic.w	r3, r3, #3
 801903e:	3304      	adds	r3, #4
 8019040:	f104 0715 	add.w	r7, r4, #21
 8019044:	42ba      	cmp	r2, r7
 8019046:	bf38      	it	cc
 8019048:	2304      	movcc	r3, #4
 801904a:	9301      	str	r3, [sp, #4]
 801904c:	9b02      	ldr	r3, [sp, #8]
 801904e:	9103      	str	r1, [sp, #12]
 8019050:	428b      	cmp	r3, r1
 8019052:	d80c      	bhi.n	801906e <__multiply+0x9e>
 8019054:	2e00      	cmp	r6, #0
 8019056:	dd03      	ble.n	8019060 <__multiply+0x90>
 8019058:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801905c:	2b00      	cmp	r3, #0
 801905e:	d05b      	beq.n	8019118 <__multiply+0x148>
 8019060:	6106      	str	r6, [r0, #16]
 8019062:	b005      	add	sp, #20
 8019064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019068:	f843 2b04 	str.w	r2, [r3], #4
 801906c:	e7d8      	b.n	8019020 <__multiply+0x50>
 801906e:	f8b1 a000 	ldrh.w	sl, [r1]
 8019072:	f1ba 0f00 	cmp.w	sl, #0
 8019076:	d024      	beq.n	80190c2 <__multiply+0xf2>
 8019078:	f104 0e14 	add.w	lr, r4, #20
 801907c:	46a9      	mov	r9, r5
 801907e:	f04f 0c00 	mov.w	ip, #0
 8019082:	f85e 7b04 	ldr.w	r7, [lr], #4
 8019086:	f8d9 3000 	ldr.w	r3, [r9]
 801908a:	fa1f fb87 	uxth.w	fp, r7
 801908e:	b29b      	uxth	r3, r3
 8019090:	fb0a 330b 	mla	r3, sl, fp, r3
 8019094:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8019098:	f8d9 7000 	ldr.w	r7, [r9]
 801909c:	4463      	add	r3, ip
 801909e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80190a2:	fb0a c70b 	mla	r7, sl, fp, ip
 80190a6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80190aa:	b29b      	uxth	r3, r3
 80190ac:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80190b0:	4572      	cmp	r2, lr
 80190b2:	f849 3b04 	str.w	r3, [r9], #4
 80190b6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80190ba:	d8e2      	bhi.n	8019082 <__multiply+0xb2>
 80190bc:	9b01      	ldr	r3, [sp, #4]
 80190be:	f845 c003 	str.w	ip, [r5, r3]
 80190c2:	9b03      	ldr	r3, [sp, #12]
 80190c4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80190c8:	3104      	adds	r1, #4
 80190ca:	f1b9 0f00 	cmp.w	r9, #0
 80190ce:	d021      	beq.n	8019114 <__multiply+0x144>
 80190d0:	682b      	ldr	r3, [r5, #0]
 80190d2:	f104 0c14 	add.w	ip, r4, #20
 80190d6:	46ae      	mov	lr, r5
 80190d8:	f04f 0a00 	mov.w	sl, #0
 80190dc:	f8bc b000 	ldrh.w	fp, [ip]
 80190e0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80190e4:	fb09 770b 	mla	r7, r9, fp, r7
 80190e8:	4457      	add	r7, sl
 80190ea:	b29b      	uxth	r3, r3
 80190ec:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80190f0:	f84e 3b04 	str.w	r3, [lr], #4
 80190f4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80190f8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80190fc:	f8be 3000 	ldrh.w	r3, [lr]
 8019100:	fb09 330a 	mla	r3, r9, sl, r3
 8019104:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8019108:	4562      	cmp	r2, ip
 801910a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801910e:	d8e5      	bhi.n	80190dc <__multiply+0x10c>
 8019110:	9f01      	ldr	r7, [sp, #4]
 8019112:	51eb      	str	r3, [r5, r7]
 8019114:	3504      	adds	r5, #4
 8019116:	e799      	b.n	801904c <__multiply+0x7c>
 8019118:	3e01      	subs	r6, #1
 801911a:	e79b      	b.n	8019054 <__multiply+0x84>
 801911c:	0801ae43 	.word	0x0801ae43
 8019120:	0801ae54 	.word	0x0801ae54

08019124 <__pow5mult>:
 8019124:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019128:	4615      	mov	r5, r2
 801912a:	f012 0203 	ands.w	r2, r2, #3
 801912e:	4607      	mov	r7, r0
 8019130:	460e      	mov	r6, r1
 8019132:	d007      	beq.n	8019144 <__pow5mult+0x20>
 8019134:	4c25      	ldr	r4, [pc, #148]	@ (80191cc <__pow5mult+0xa8>)
 8019136:	3a01      	subs	r2, #1
 8019138:	2300      	movs	r3, #0
 801913a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801913e:	f7ff fe9f 	bl	8018e80 <__multadd>
 8019142:	4606      	mov	r6, r0
 8019144:	10ad      	asrs	r5, r5, #2
 8019146:	d03d      	beq.n	80191c4 <__pow5mult+0xa0>
 8019148:	69fc      	ldr	r4, [r7, #28]
 801914a:	b97c      	cbnz	r4, 801916c <__pow5mult+0x48>
 801914c:	2010      	movs	r0, #16
 801914e:	f7fd fd57 	bl	8016c00 <malloc>
 8019152:	4602      	mov	r2, r0
 8019154:	61f8      	str	r0, [r7, #28]
 8019156:	b928      	cbnz	r0, 8019164 <__pow5mult+0x40>
 8019158:	4b1d      	ldr	r3, [pc, #116]	@ (80191d0 <__pow5mult+0xac>)
 801915a:	481e      	ldr	r0, [pc, #120]	@ (80191d4 <__pow5mult+0xb0>)
 801915c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8019160:	f7fe ff6c 	bl	801803c <__assert_func>
 8019164:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8019168:	6004      	str	r4, [r0, #0]
 801916a:	60c4      	str	r4, [r0, #12]
 801916c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8019170:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8019174:	b94c      	cbnz	r4, 801918a <__pow5mult+0x66>
 8019176:	f240 2171 	movw	r1, #625	@ 0x271
 801917a:	4638      	mov	r0, r7
 801917c:	f7ff ff12 	bl	8018fa4 <__i2b>
 8019180:	2300      	movs	r3, #0
 8019182:	f8c8 0008 	str.w	r0, [r8, #8]
 8019186:	4604      	mov	r4, r0
 8019188:	6003      	str	r3, [r0, #0]
 801918a:	f04f 0900 	mov.w	r9, #0
 801918e:	07eb      	lsls	r3, r5, #31
 8019190:	d50a      	bpl.n	80191a8 <__pow5mult+0x84>
 8019192:	4631      	mov	r1, r6
 8019194:	4622      	mov	r2, r4
 8019196:	4638      	mov	r0, r7
 8019198:	f7ff ff1a 	bl	8018fd0 <__multiply>
 801919c:	4631      	mov	r1, r6
 801919e:	4680      	mov	r8, r0
 80191a0:	4638      	mov	r0, r7
 80191a2:	f7ff fe4b 	bl	8018e3c <_Bfree>
 80191a6:	4646      	mov	r6, r8
 80191a8:	106d      	asrs	r5, r5, #1
 80191aa:	d00b      	beq.n	80191c4 <__pow5mult+0xa0>
 80191ac:	6820      	ldr	r0, [r4, #0]
 80191ae:	b938      	cbnz	r0, 80191c0 <__pow5mult+0x9c>
 80191b0:	4622      	mov	r2, r4
 80191b2:	4621      	mov	r1, r4
 80191b4:	4638      	mov	r0, r7
 80191b6:	f7ff ff0b 	bl	8018fd0 <__multiply>
 80191ba:	6020      	str	r0, [r4, #0]
 80191bc:	f8c0 9000 	str.w	r9, [r0]
 80191c0:	4604      	mov	r4, r0
 80191c2:	e7e4      	b.n	801918e <__pow5mult+0x6a>
 80191c4:	4630      	mov	r0, r6
 80191c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80191ca:	bf00      	nop
 80191cc:	0801aeb0 	.word	0x0801aeb0
 80191d0:	0801abfe 	.word	0x0801abfe
 80191d4:	0801ae54 	.word	0x0801ae54

080191d8 <__lshift>:
 80191d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80191dc:	460c      	mov	r4, r1
 80191de:	6849      	ldr	r1, [r1, #4]
 80191e0:	6923      	ldr	r3, [r4, #16]
 80191e2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80191e6:	68a3      	ldr	r3, [r4, #8]
 80191e8:	4607      	mov	r7, r0
 80191ea:	4691      	mov	r9, r2
 80191ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80191f0:	f108 0601 	add.w	r6, r8, #1
 80191f4:	42b3      	cmp	r3, r6
 80191f6:	db0b      	blt.n	8019210 <__lshift+0x38>
 80191f8:	4638      	mov	r0, r7
 80191fa:	f7ff fddf 	bl	8018dbc <_Balloc>
 80191fe:	4605      	mov	r5, r0
 8019200:	b948      	cbnz	r0, 8019216 <__lshift+0x3e>
 8019202:	4602      	mov	r2, r0
 8019204:	4b28      	ldr	r3, [pc, #160]	@ (80192a8 <__lshift+0xd0>)
 8019206:	4829      	ldr	r0, [pc, #164]	@ (80192ac <__lshift+0xd4>)
 8019208:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801920c:	f7fe ff16 	bl	801803c <__assert_func>
 8019210:	3101      	adds	r1, #1
 8019212:	005b      	lsls	r3, r3, #1
 8019214:	e7ee      	b.n	80191f4 <__lshift+0x1c>
 8019216:	2300      	movs	r3, #0
 8019218:	f100 0114 	add.w	r1, r0, #20
 801921c:	f100 0210 	add.w	r2, r0, #16
 8019220:	4618      	mov	r0, r3
 8019222:	4553      	cmp	r3, sl
 8019224:	db33      	blt.n	801928e <__lshift+0xb6>
 8019226:	6920      	ldr	r0, [r4, #16]
 8019228:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801922c:	f104 0314 	add.w	r3, r4, #20
 8019230:	f019 091f 	ands.w	r9, r9, #31
 8019234:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8019238:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801923c:	d02b      	beq.n	8019296 <__lshift+0xbe>
 801923e:	f1c9 0e20 	rsb	lr, r9, #32
 8019242:	468a      	mov	sl, r1
 8019244:	2200      	movs	r2, #0
 8019246:	6818      	ldr	r0, [r3, #0]
 8019248:	fa00 f009 	lsl.w	r0, r0, r9
 801924c:	4310      	orrs	r0, r2
 801924e:	f84a 0b04 	str.w	r0, [sl], #4
 8019252:	f853 2b04 	ldr.w	r2, [r3], #4
 8019256:	459c      	cmp	ip, r3
 8019258:	fa22 f20e 	lsr.w	r2, r2, lr
 801925c:	d8f3      	bhi.n	8019246 <__lshift+0x6e>
 801925e:	ebac 0304 	sub.w	r3, ip, r4
 8019262:	3b15      	subs	r3, #21
 8019264:	f023 0303 	bic.w	r3, r3, #3
 8019268:	3304      	adds	r3, #4
 801926a:	f104 0015 	add.w	r0, r4, #21
 801926e:	4584      	cmp	ip, r0
 8019270:	bf38      	it	cc
 8019272:	2304      	movcc	r3, #4
 8019274:	50ca      	str	r2, [r1, r3]
 8019276:	b10a      	cbz	r2, 801927c <__lshift+0xa4>
 8019278:	f108 0602 	add.w	r6, r8, #2
 801927c:	3e01      	subs	r6, #1
 801927e:	4638      	mov	r0, r7
 8019280:	612e      	str	r6, [r5, #16]
 8019282:	4621      	mov	r1, r4
 8019284:	f7ff fdda 	bl	8018e3c <_Bfree>
 8019288:	4628      	mov	r0, r5
 801928a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801928e:	f842 0f04 	str.w	r0, [r2, #4]!
 8019292:	3301      	adds	r3, #1
 8019294:	e7c5      	b.n	8019222 <__lshift+0x4a>
 8019296:	3904      	subs	r1, #4
 8019298:	f853 2b04 	ldr.w	r2, [r3], #4
 801929c:	f841 2f04 	str.w	r2, [r1, #4]!
 80192a0:	459c      	cmp	ip, r3
 80192a2:	d8f9      	bhi.n	8019298 <__lshift+0xc0>
 80192a4:	e7ea      	b.n	801927c <__lshift+0xa4>
 80192a6:	bf00      	nop
 80192a8:	0801ae43 	.word	0x0801ae43
 80192ac:	0801ae54 	.word	0x0801ae54

080192b0 <__mcmp>:
 80192b0:	690a      	ldr	r2, [r1, #16]
 80192b2:	4603      	mov	r3, r0
 80192b4:	6900      	ldr	r0, [r0, #16]
 80192b6:	1a80      	subs	r0, r0, r2
 80192b8:	b530      	push	{r4, r5, lr}
 80192ba:	d10e      	bne.n	80192da <__mcmp+0x2a>
 80192bc:	3314      	adds	r3, #20
 80192be:	3114      	adds	r1, #20
 80192c0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80192c4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80192c8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80192cc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80192d0:	4295      	cmp	r5, r2
 80192d2:	d003      	beq.n	80192dc <__mcmp+0x2c>
 80192d4:	d205      	bcs.n	80192e2 <__mcmp+0x32>
 80192d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80192da:	bd30      	pop	{r4, r5, pc}
 80192dc:	42a3      	cmp	r3, r4
 80192de:	d3f3      	bcc.n	80192c8 <__mcmp+0x18>
 80192e0:	e7fb      	b.n	80192da <__mcmp+0x2a>
 80192e2:	2001      	movs	r0, #1
 80192e4:	e7f9      	b.n	80192da <__mcmp+0x2a>
	...

080192e8 <__mdiff>:
 80192e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80192ec:	4689      	mov	r9, r1
 80192ee:	4606      	mov	r6, r0
 80192f0:	4611      	mov	r1, r2
 80192f2:	4648      	mov	r0, r9
 80192f4:	4614      	mov	r4, r2
 80192f6:	f7ff ffdb 	bl	80192b0 <__mcmp>
 80192fa:	1e05      	subs	r5, r0, #0
 80192fc:	d112      	bne.n	8019324 <__mdiff+0x3c>
 80192fe:	4629      	mov	r1, r5
 8019300:	4630      	mov	r0, r6
 8019302:	f7ff fd5b 	bl	8018dbc <_Balloc>
 8019306:	4602      	mov	r2, r0
 8019308:	b928      	cbnz	r0, 8019316 <__mdiff+0x2e>
 801930a:	4b3f      	ldr	r3, [pc, #252]	@ (8019408 <__mdiff+0x120>)
 801930c:	f240 2137 	movw	r1, #567	@ 0x237
 8019310:	483e      	ldr	r0, [pc, #248]	@ (801940c <__mdiff+0x124>)
 8019312:	f7fe fe93 	bl	801803c <__assert_func>
 8019316:	2301      	movs	r3, #1
 8019318:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801931c:	4610      	mov	r0, r2
 801931e:	b003      	add	sp, #12
 8019320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019324:	bfbc      	itt	lt
 8019326:	464b      	movlt	r3, r9
 8019328:	46a1      	movlt	r9, r4
 801932a:	4630      	mov	r0, r6
 801932c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8019330:	bfba      	itte	lt
 8019332:	461c      	movlt	r4, r3
 8019334:	2501      	movlt	r5, #1
 8019336:	2500      	movge	r5, #0
 8019338:	f7ff fd40 	bl	8018dbc <_Balloc>
 801933c:	4602      	mov	r2, r0
 801933e:	b918      	cbnz	r0, 8019348 <__mdiff+0x60>
 8019340:	4b31      	ldr	r3, [pc, #196]	@ (8019408 <__mdiff+0x120>)
 8019342:	f240 2145 	movw	r1, #581	@ 0x245
 8019346:	e7e3      	b.n	8019310 <__mdiff+0x28>
 8019348:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801934c:	6926      	ldr	r6, [r4, #16]
 801934e:	60c5      	str	r5, [r0, #12]
 8019350:	f109 0310 	add.w	r3, r9, #16
 8019354:	f109 0514 	add.w	r5, r9, #20
 8019358:	f104 0e14 	add.w	lr, r4, #20
 801935c:	f100 0b14 	add.w	fp, r0, #20
 8019360:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8019364:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8019368:	9301      	str	r3, [sp, #4]
 801936a:	46d9      	mov	r9, fp
 801936c:	f04f 0c00 	mov.w	ip, #0
 8019370:	9b01      	ldr	r3, [sp, #4]
 8019372:	f85e 0b04 	ldr.w	r0, [lr], #4
 8019376:	f853 af04 	ldr.w	sl, [r3, #4]!
 801937a:	9301      	str	r3, [sp, #4]
 801937c:	fa1f f38a 	uxth.w	r3, sl
 8019380:	4619      	mov	r1, r3
 8019382:	b283      	uxth	r3, r0
 8019384:	1acb      	subs	r3, r1, r3
 8019386:	0c00      	lsrs	r0, r0, #16
 8019388:	4463      	add	r3, ip
 801938a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801938e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8019392:	b29b      	uxth	r3, r3
 8019394:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8019398:	4576      	cmp	r6, lr
 801939a:	f849 3b04 	str.w	r3, [r9], #4
 801939e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80193a2:	d8e5      	bhi.n	8019370 <__mdiff+0x88>
 80193a4:	1b33      	subs	r3, r6, r4
 80193a6:	3b15      	subs	r3, #21
 80193a8:	f023 0303 	bic.w	r3, r3, #3
 80193ac:	3415      	adds	r4, #21
 80193ae:	3304      	adds	r3, #4
 80193b0:	42a6      	cmp	r6, r4
 80193b2:	bf38      	it	cc
 80193b4:	2304      	movcc	r3, #4
 80193b6:	441d      	add	r5, r3
 80193b8:	445b      	add	r3, fp
 80193ba:	461e      	mov	r6, r3
 80193bc:	462c      	mov	r4, r5
 80193be:	4544      	cmp	r4, r8
 80193c0:	d30e      	bcc.n	80193e0 <__mdiff+0xf8>
 80193c2:	f108 0103 	add.w	r1, r8, #3
 80193c6:	1b49      	subs	r1, r1, r5
 80193c8:	f021 0103 	bic.w	r1, r1, #3
 80193cc:	3d03      	subs	r5, #3
 80193ce:	45a8      	cmp	r8, r5
 80193d0:	bf38      	it	cc
 80193d2:	2100      	movcc	r1, #0
 80193d4:	440b      	add	r3, r1
 80193d6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80193da:	b191      	cbz	r1, 8019402 <__mdiff+0x11a>
 80193dc:	6117      	str	r7, [r2, #16]
 80193de:	e79d      	b.n	801931c <__mdiff+0x34>
 80193e0:	f854 1b04 	ldr.w	r1, [r4], #4
 80193e4:	46e6      	mov	lr, ip
 80193e6:	0c08      	lsrs	r0, r1, #16
 80193e8:	fa1c fc81 	uxtah	ip, ip, r1
 80193ec:	4471      	add	r1, lr
 80193ee:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80193f2:	b289      	uxth	r1, r1
 80193f4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80193f8:	f846 1b04 	str.w	r1, [r6], #4
 80193fc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8019400:	e7dd      	b.n	80193be <__mdiff+0xd6>
 8019402:	3f01      	subs	r7, #1
 8019404:	e7e7      	b.n	80193d6 <__mdiff+0xee>
 8019406:	bf00      	nop
 8019408:	0801ae43 	.word	0x0801ae43
 801940c:	0801ae54 	.word	0x0801ae54

08019410 <__d2b>:
 8019410:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8019414:	460f      	mov	r7, r1
 8019416:	2101      	movs	r1, #1
 8019418:	ec59 8b10 	vmov	r8, r9, d0
 801941c:	4616      	mov	r6, r2
 801941e:	f7ff fccd 	bl	8018dbc <_Balloc>
 8019422:	4604      	mov	r4, r0
 8019424:	b930      	cbnz	r0, 8019434 <__d2b+0x24>
 8019426:	4602      	mov	r2, r0
 8019428:	4b23      	ldr	r3, [pc, #140]	@ (80194b8 <__d2b+0xa8>)
 801942a:	4824      	ldr	r0, [pc, #144]	@ (80194bc <__d2b+0xac>)
 801942c:	f240 310f 	movw	r1, #783	@ 0x30f
 8019430:	f7fe fe04 	bl	801803c <__assert_func>
 8019434:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8019438:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801943c:	b10d      	cbz	r5, 8019442 <__d2b+0x32>
 801943e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8019442:	9301      	str	r3, [sp, #4]
 8019444:	f1b8 0300 	subs.w	r3, r8, #0
 8019448:	d023      	beq.n	8019492 <__d2b+0x82>
 801944a:	4668      	mov	r0, sp
 801944c:	9300      	str	r3, [sp, #0]
 801944e:	f7ff fd7c 	bl	8018f4a <__lo0bits>
 8019452:	e9dd 1200 	ldrd	r1, r2, [sp]
 8019456:	b1d0      	cbz	r0, 801948e <__d2b+0x7e>
 8019458:	f1c0 0320 	rsb	r3, r0, #32
 801945c:	fa02 f303 	lsl.w	r3, r2, r3
 8019460:	430b      	orrs	r3, r1
 8019462:	40c2      	lsrs	r2, r0
 8019464:	6163      	str	r3, [r4, #20]
 8019466:	9201      	str	r2, [sp, #4]
 8019468:	9b01      	ldr	r3, [sp, #4]
 801946a:	61a3      	str	r3, [r4, #24]
 801946c:	2b00      	cmp	r3, #0
 801946e:	bf0c      	ite	eq
 8019470:	2201      	moveq	r2, #1
 8019472:	2202      	movne	r2, #2
 8019474:	6122      	str	r2, [r4, #16]
 8019476:	b1a5      	cbz	r5, 80194a2 <__d2b+0x92>
 8019478:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801947c:	4405      	add	r5, r0
 801947e:	603d      	str	r5, [r7, #0]
 8019480:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8019484:	6030      	str	r0, [r6, #0]
 8019486:	4620      	mov	r0, r4
 8019488:	b003      	add	sp, #12
 801948a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801948e:	6161      	str	r1, [r4, #20]
 8019490:	e7ea      	b.n	8019468 <__d2b+0x58>
 8019492:	a801      	add	r0, sp, #4
 8019494:	f7ff fd59 	bl	8018f4a <__lo0bits>
 8019498:	9b01      	ldr	r3, [sp, #4]
 801949a:	6163      	str	r3, [r4, #20]
 801949c:	3020      	adds	r0, #32
 801949e:	2201      	movs	r2, #1
 80194a0:	e7e8      	b.n	8019474 <__d2b+0x64>
 80194a2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80194a6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80194aa:	6038      	str	r0, [r7, #0]
 80194ac:	6918      	ldr	r0, [r3, #16]
 80194ae:	f7ff fd2d 	bl	8018f0c <__hi0bits>
 80194b2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80194b6:	e7e5      	b.n	8019484 <__d2b+0x74>
 80194b8:	0801ae43 	.word	0x0801ae43
 80194bc:	0801ae54 	.word	0x0801ae54

080194c0 <_malloc_usable_size_r>:
 80194c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80194c4:	1f18      	subs	r0, r3, #4
 80194c6:	2b00      	cmp	r3, #0
 80194c8:	bfbc      	itt	lt
 80194ca:	580b      	ldrlt	r3, [r1, r0]
 80194cc:	18c0      	addlt	r0, r0, r3
 80194ce:	4770      	bx	lr

080194d0 <__ssputs_r>:
 80194d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80194d4:	688e      	ldr	r6, [r1, #8]
 80194d6:	461f      	mov	r7, r3
 80194d8:	42be      	cmp	r6, r7
 80194da:	680b      	ldr	r3, [r1, #0]
 80194dc:	4682      	mov	sl, r0
 80194de:	460c      	mov	r4, r1
 80194e0:	4690      	mov	r8, r2
 80194e2:	d82d      	bhi.n	8019540 <__ssputs_r+0x70>
 80194e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80194e8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80194ec:	d026      	beq.n	801953c <__ssputs_r+0x6c>
 80194ee:	6965      	ldr	r5, [r4, #20]
 80194f0:	6909      	ldr	r1, [r1, #16]
 80194f2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80194f6:	eba3 0901 	sub.w	r9, r3, r1
 80194fa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80194fe:	1c7b      	adds	r3, r7, #1
 8019500:	444b      	add	r3, r9
 8019502:	106d      	asrs	r5, r5, #1
 8019504:	429d      	cmp	r5, r3
 8019506:	bf38      	it	cc
 8019508:	461d      	movcc	r5, r3
 801950a:	0553      	lsls	r3, r2, #21
 801950c:	d527      	bpl.n	801955e <__ssputs_r+0x8e>
 801950e:	4629      	mov	r1, r5
 8019510:	f7fd fba8 	bl	8016c64 <_malloc_r>
 8019514:	4606      	mov	r6, r0
 8019516:	b360      	cbz	r0, 8019572 <__ssputs_r+0xa2>
 8019518:	6921      	ldr	r1, [r4, #16]
 801951a:	464a      	mov	r2, r9
 801951c:	f7fe fd7f 	bl	801801e <memcpy>
 8019520:	89a3      	ldrh	r3, [r4, #12]
 8019522:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8019526:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801952a:	81a3      	strh	r3, [r4, #12]
 801952c:	6126      	str	r6, [r4, #16]
 801952e:	6165      	str	r5, [r4, #20]
 8019530:	444e      	add	r6, r9
 8019532:	eba5 0509 	sub.w	r5, r5, r9
 8019536:	6026      	str	r6, [r4, #0]
 8019538:	60a5      	str	r5, [r4, #8]
 801953a:	463e      	mov	r6, r7
 801953c:	42be      	cmp	r6, r7
 801953e:	d900      	bls.n	8019542 <__ssputs_r+0x72>
 8019540:	463e      	mov	r6, r7
 8019542:	6820      	ldr	r0, [r4, #0]
 8019544:	4632      	mov	r2, r6
 8019546:	4641      	mov	r1, r8
 8019548:	f7fe fc2c 	bl	8017da4 <memmove>
 801954c:	68a3      	ldr	r3, [r4, #8]
 801954e:	1b9b      	subs	r3, r3, r6
 8019550:	60a3      	str	r3, [r4, #8]
 8019552:	6823      	ldr	r3, [r4, #0]
 8019554:	4433      	add	r3, r6
 8019556:	6023      	str	r3, [r4, #0]
 8019558:	2000      	movs	r0, #0
 801955a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801955e:	462a      	mov	r2, r5
 8019560:	f7fd fc80 	bl	8016e64 <_realloc_r>
 8019564:	4606      	mov	r6, r0
 8019566:	2800      	cmp	r0, #0
 8019568:	d1e0      	bne.n	801952c <__ssputs_r+0x5c>
 801956a:	6921      	ldr	r1, [r4, #16]
 801956c:	4650      	mov	r0, sl
 801956e:	f7ff fbdb 	bl	8018d28 <_free_r>
 8019572:	230c      	movs	r3, #12
 8019574:	f8ca 3000 	str.w	r3, [sl]
 8019578:	89a3      	ldrh	r3, [r4, #12]
 801957a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801957e:	81a3      	strh	r3, [r4, #12]
 8019580:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019584:	e7e9      	b.n	801955a <__ssputs_r+0x8a>
	...

08019588 <_svfiprintf_r>:
 8019588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801958c:	4698      	mov	r8, r3
 801958e:	898b      	ldrh	r3, [r1, #12]
 8019590:	061b      	lsls	r3, r3, #24
 8019592:	b09d      	sub	sp, #116	@ 0x74
 8019594:	4607      	mov	r7, r0
 8019596:	460d      	mov	r5, r1
 8019598:	4614      	mov	r4, r2
 801959a:	d510      	bpl.n	80195be <_svfiprintf_r+0x36>
 801959c:	690b      	ldr	r3, [r1, #16]
 801959e:	b973      	cbnz	r3, 80195be <_svfiprintf_r+0x36>
 80195a0:	2140      	movs	r1, #64	@ 0x40
 80195a2:	f7fd fb5f 	bl	8016c64 <_malloc_r>
 80195a6:	6028      	str	r0, [r5, #0]
 80195a8:	6128      	str	r0, [r5, #16]
 80195aa:	b930      	cbnz	r0, 80195ba <_svfiprintf_r+0x32>
 80195ac:	230c      	movs	r3, #12
 80195ae:	603b      	str	r3, [r7, #0]
 80195b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80195b4:	b01d      	add	sp, #116	@ 0x74
 80195b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80195ba:	2340      	movs	r3, #64	@ 0x40
 80195bc:	616b      	str	r3, [r5, #20]
 80195be:	2300      	movs	r3, #0
 80195c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80195c2:	2320      	movs	r3, #32
 80195c4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80195c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80195cc:	2330      	movs	r3, #48	@ 0x30
 80195ce:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801976c <_svfiprintf_r+0x1e4>
 80195d2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80195d6:	f04f 0901 	mov.w	r9, #1
 80195da:	4623      	mov	r3, r4
 80195dc:	469a      	mov	sl, r3
 80195de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80195e2:	b10a      	cbz	r2, 80195e8 <_svfiprintf_r+0x60>
 80195e4:	2a25      	cmp	r2, #37	@ 0x25
 80195e6:	d1f9      	bne.n	80195dc <_svfiprintf_r+0x54>
 80195e8:	ebba 0b04 	subs.w	fp, sl, r4
 80195ec:	d00b      	beq.n	8019606 <_svfiprintf_r+0x7e>
 80195ee:	465b      	mov	r3, fp
 80195f0:	4622      	mov	r2, r4
 80195f2:	4629      	mov	r1, r5
 80195f4:	4638      	mov	r0, r7
 80195f6:	f7ff ff6b 	bl	80194d0 <__ssputs_r>
 80195fa:	3001      	adds	r0, #1
 80195fc:	f000 80a7 	beq.w	801974e <_svfiprintf_r+0x1c6>
 8019600:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019602:	445a      	add	r2, fp
 8019604:	9209      	str	r2, [sp, #36]	@ 0x24
 8019606:	f89a 3000 	ldrb.w	r3, [sl]
 801960a:	2b00      	cmp	r3, #0
 801960c:	f000 809f 	beq.w	801974e <_svfiprintf_r+0x1c6>
 8019610:	2300      	movs	r3, #0
 8019612:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8019616:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801961a:	f10a 0a01 	add.w	sl, sl, #1
 801961e:	9304      	str	r3, [sp, #16]
 8019620:	9307      	str	r3, [sp, #28]
 8019622:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8019626:	931a      	str	r3, [sp, #104]	@ 0x68
 8019628:	4654      	mov	r4, sl
 801962a:	2205      	movs	r2, #5
 801962c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019630:	484e      	ldr	r0, [pc, #312]	@ (801976c <_svfiprintf_r+0x1e4>)
 8019632:	f7e6 fdfd 	bl	8000230 <memchr>
 8019636:	9a04      	ldr	r2, [sp, #16]
 8019638:	b9d8      	cbnz	r0, 8019672 <_svfiprintf_r+0xea>
 801963a:	06d0      	lsls	r0, r2, #27
 801963c:	bf44      	itt	mi
 801963e:	2320      	movmi	r3, #32
 8019640:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019644:	0711      	lsls	r1, r2, #28
 8019646:	bf44      	itt	mi
 8019648:	232b      	movmi	r3, #43	@ 0x2b
 801964a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801964e:	f89a 3000 	ldrb.w	r3, [sl]
 8019652:	2b2a      	cmp	r3, #42	@ 0x2a
 8019654:	d015      	beq.n	8019682 <_svfiprintf_r+0xfa>
 8019656:	9a07      	ldr	r2, [sp, #28]
 8019658:	4654      	mov	r4, sl
 801965a:	2000      	movs	r0, #0
 801965c:	f04f 0c0a 	mov.w	ip, #10
 8019660:	4621      	mov	r1, r4
 8019662:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019666:	3b30      	subs	r3, #48	@ 0x30
 8019668:	2b09      	cmp	r3, #9
 801966a:	d94b      	bls.n	8019704 <_svfiprintf_r+0x17c>
 801966c:	b1b0      	cbz	r0, 801969c <_svfiprintf_r+0x114>
 801966e:	9207      	str	r2, [sp, #28]
 8019670:	e014      	b.n	801969c <_svfiprintf_r+0x114>
 8019672:	eba0 0308 	sub.w	r3, r0, r8
 8019676:	fa09 f303 	lsl.w	r3, r9, r3
 801967a:	4313      	orrs	r3, r2
 801967c:	9304      	str	r3, [sp, #16]
 801967e:	46a2      	mov	sl, r4
 8019680:	e7d2      	b.n	8019628 <_svfiprintf_r+0xa0>
 8019682:	9b03      	ldr	r3, [sp, #12]
 8019684:	1d19      	adds	r1, r3, #4
 8019686:	681b      	ldr	r3, [r3, #0]
 8019688:	9103      	str	r1, [sp, #12]
 801968a:	2b00      	cmp	r3, #0
 801968c:	bfbb      	ittet	lt
 801968e:	425b      	neglt	r3, r3
 8019690:	f042 0202 	orrlt.w	r2, r2, #2
 8019694:	9307      	strge	r3, [sp, #28]
 8019696:	9307      	strlt	r3, [sp, #28]
 8019698:	bfb8      	it	lt
 801969a:	9204      	strlt	r2, [sp, #16]
 801969c:	7823      	ldrb	r3, [r4, #0]
 801969e:	2b2e      	cmp	r3, #46	@ 0x2e
 80196a0:	d10a      	bne.n	80196b8 <_svfiprintf_r+0x130>
 80196a2:	7863      	ldrb	r3, [r4, #1]
 80196a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80196a6:	d132      	bne.n	801970e <_svfiprintf_r+0x186>
 80196a8:	9b03      	ldr	r3, [sp, #12]
 80196aa:	1d1a      	adds	r2, r3, #4
 80196ac:	681b      	ldr	r3, [r3, #0]
 80196ae:	9203      	str	r2, [sp, #12]
 80196b0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80196b4:	3402      	adds	r4, #2
 80196b6:	9305      	str	r3, [sp, #20]
 80196b8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801977c <_svfiprintf_r+0x1f4>
 80196bc:	7821      	ldrb	r1, [r4, #0]
 80196be:	2203      	movs	r2, #3
 80196c0:	4650      	mov	r0, sl
 80196c2:	f7e6 fdb5 	bl	8000230 <memchr>
 80196c6:	b138      	cbz	r0, 80196d8 <_svfiprintf_r+0x150>
 80196c8:	9b04      	ldr	r3, [sp, #16]
 80196ca:	eba0 000a 	sub.w	r0, r0, sl
 80196ce:	2240      	movs	r2, #64	@ 0x40
 80196d0:	4082      	lsls	r2, r0
 80196d2:	4313      	orrs	r3, r2
 80196d4:	3401      	adds	r4, #1
 80196d6:	9304      	str	r3, [sp, #16]
 80196d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80196dc:	4824      	ldr	r0, [pc, #144]	@ (8019770 <_svfiprintf_r+0x1e8>)
 80196de:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80196e2:	2206      	movs	r2, #6
 80196e4:	f7e6 fda4 	bl	8000230 <memchr>
 80196e8:	2800      	cmp	r0, #0
 80196ea:	d036      	beq.n	801975a <_svfiprintf_r+0x1d2>
 80196ec:	4b21      	ldr	r3, [pc, #132]	@ (8019774 <_svfiprintf_r+0x1ec>)
 80196ee:	bb1b      	cbnz	r3, 8019738 <_svfiprintf_r+0x1b0>
 80196f0:	9b03      	ldr	r3, [sp, #12]
 80196f2:	3307      	adds	r3, #7
 80196f4:	f023 0307 	bic.w	r3, r3, #7
 80196f8:	3308      	adds	r3, #8
 80196fa:	9303      	str	r3, [sp, #12]
 80196fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80196fe:	4433      	add	r3, r6
 8019700:	9309      	str	r3, [sp, #36]	@ 0x24
 8019702:	e76a      	b.n	80195da <_svfiprintf_r+0x52>
 8019704:	fb0c 3202 	mla	r2, ip, r2, r3
 8019708:	460c      	mov	r4, r1
 801970a:	2001      	movs	r0, #1
 801970c:	e7a8      	b.n	8019660 <_svfiprintf_r+0xd8>
 801970e:	2300      	movs	r3, #0
 8019710:	3401      	adds	r4, #1
 8019712:	9305      	str	r3, [sp, #20]
 8019714:	4619      	mov	r1, r3
 8019716:	f04f 0c0a 	mov.w	ip, #10
 801971a:	4620      	mov	r0, r4
 801971c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019720:	3a30      	subs	r2, #48	@ 0x30
 8019722:	2a09      	cmp	r2, #9
 8019724:	d903      	bls.n	801972e <_svfiprintf_r+0x1a6>
 8019726:	2b00      	cmp	r3, #0
 8019728:	d0c6      	beq.n	80196b8 <_svfiprintf_r+0x130>
 801972a:	9105      	str	r1, [sp, #20]
 801972c:	e7c4      	b.n	80196b8 <_svfiprintf_r+0x130>
 801972e:	fb0c 2101 	mla	r1, ip, r1, r2
 8019732:	4604      	mov	r4, r0
 8019734:	2301      	movs	r3, #1
 8019736:	e7f0      	b.n	801971a <_svfiprintf_r+0x192>
 8019738:	ab03      	add	r3, sp, #12
 801973a:	9300      	str	r3, [sp, #0]
 801973c:	462a      	mov	r2, r5
 801973e:	4b0e      	ldr	r3, [pc, #56]	@ (8019778 <_svfiprintf_r+0x1f0>)
 8019740:	a904      	add	r1, sp, #16
 8019742:	4638      	mov	r0, r7
 8019744:	f7fd fcd4 	bl	80170f0 <_printf_float>
 8019748:	1c42      	adds	r2, r0, #1
 801974a:	4606      	mov	r6, r0
 801974c:	d1d6      	bne.n	80196fc <_svfiprintf_r+0x174>
 801974e:	89ab      	ldrh	r3, [r5, #12]
 8019750:	065b      	lsls	r3, r3, #25
 8019752:	f53f af2d 	bmi.w	80195b0 <_svfiprintf_r+0x28>
 8019756:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019758:	e72c      	b.n	80195b4 <_svfiprintf_r+0x2c>
 801975a:	ab03      	add	r3, sp, #12
 801975c:	9300      	str	r3, [sp, #0]
 801975e:	462a      	mov	r2, r5
 8019760:	4b05      	ldr	r3, [pc, #20]	@ (8019778 <_svfiprintf_r+0x1f0>)
 8019762:	a904      	add	r1, sp, #16
 8019764:	4638      	mov	r0, r7
 8019766:	f7fd ff5b 	bl	8017620 <_printf_i>
 801976a:	e7ed      	b.n	8019748 <_svfiprintf_r+0x1c0>
 801976c:	0801afb0 	.word	0x0801afb0
 8019770:	0801afba 	.word	0x0801afba
 8019774:	080170f1 	.word	0x080170f1
 8019778:	080194d1 	.word	0x080194d1
 801977c:	0801afb6 	.word	0x0801afb6

08019780 <__sfputc_r>:
 8019780:	6893      	ldr	r3, [r2, #8]
 8019782:	3b01      	subs	r3, #1
 8019784:	2b00      	cmp	r3, #0
 8019786:	b410      	push	{r4}
 8019788:	6093      	str	r3, [r2, #8]
 801978a:	da08      	bge.n	801979e <__sfputc_r+0x1e>
 801978c:	6994      	ldr	r4, [r2, #24]
 801978e:	42a3      	cmp	r3, r4
 8019790:	db01      	blt.n	8019796 <__sfputc_r+0x16>
 8019792:	290a      	cmp	r1, #10
 8019794:	d103      	bne.n	801979e <__sfputc_r+0x1e>
 8019796:	f85d 4b04 	ldr.w	r4, [sp], #4
 801979a:	f7fe ba5f 	b.w	8017c5c <__swbuf_r>
 801979e:	6813      	ldr	r3, [r2, #0]
 80197a0:	1c58      	adds	r0, r3, #1
 80197a2:	6010      	str	r0, [r2, #0]
 80197a4:	7019      	strb	r1, [r3, #0]
 80197a6:	4608      	mov	r0, r1
 80197a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80197ac:	4770      	bx	lr

080197ae <__sfputs_r>:
 80197ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80197b0:	4606      	mov	r6, r0
 80197b2:	460f      	mov	r7, r1
 80197b4:	4614      	mov	r4, r2
 80197b6:	18d5      	adds	r5, r2, r3
 80197b8:	42ac      	cmp	r4, r5
 80197ba:	d101      	bne.n	80197c0 <__sfputs_r+0x12>
 80197bc:	2000      	movs	r0, #0
 80197be:	e007      	b.n	80197d0 <__sfputs_r+0x22>
 80197c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80197c4:	463a      	mov	r2, r7
 80197c6:	4630      	mov	r0, r6
 80197c8:	f7ff ffda 	bl	8019780 <__sfputc_r>
 80197cc:	1c43      	adds	r3, r0, #1
 80197ce:	d1f3      	bne.n	80197b8 <__sfputs_r+0xa>
 80197d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080197d4 <_vfiprintf_r>:
 80197d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80197d8:	460d      	mov	r5, r1
 80197da:	b09d      	sub	sp, #116	@ 0x74
 80197dc:	4614      	mov	r4, r2
 80197de:	4698      	mov	r8, r3
 80197e0:	4606      	mov	r6, r0
 80197e2:	b118      	cbz	r0, 80197ec <_vfiprintf_r+0x18>
 80197e4:	6a03      	ldr	r3, [r0, #32]
 80197e6:	b90b      	cbnz	r3, 80197ec <_vfiprintf_r+0x18>
 80197e8:	f7fe f8c6 	bl	8017978 <__sinit>
 80197ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80197ee:	07d9      	lsls	r1, r3, #31
 80197f0:	d405      	bmi.n	80197fe <_vfiprintf_r+0x2a>
 80197f2:	89ab      	ldrh	r3, [r5, #12]
 80197f4:	059a      	lsls	r2, r3, #22
 80197f6:	d402      	bmi.n	80197fe <_vfiprintf_r+0x2a>
 80197f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80197fa:	f7fe fc06 	bl	801800a <__retarget_lock_acquire_recursive>
 80197fe:	89ab      	ldrh	r3, [r5, #12]
 8019800:	071b      	lsls	r3, r3, #28
 8019802:	d501      	bpl.n	8019808 <_vfiprintf_r+0x34>
 8019804:	692b      	ldr	r3, [r5, #16]
 8019806:	b99b      	cbnz	r3, 8019830 <_vfiprintf_r+0x5c>
 8019808:	4629      	mov	r1, r5
 801980a:	4630      	mov	r0, r6
 801980c:	f7fe fa64 	bl	8017cd8 <__swsetup_r>
 8019810:	b170      	cbz	r0, 8019830 <_vfiprintf_r+0x5c>
 8019812:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019814:	07dc      	lsls	r4, r3, #31
 8019816:	d504      	bpl.n	8019822 <_vfiprintf_r+0x4e>
 8019818:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801981c:	b01d      	add	sp, #116	@ 0x74
 801981e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019822:	89ab      	ldrh	r3, [r5, #12]
 8019824:	0598      	lsls	r0, r3, #22
 8019826:	d4f7      	bmi.n	8019818 <_vfiprintf_r+0x44>
 8019828:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801982a:	f7fe fbef 	bl	801800c <__retarget_lock_release_recursive>
 801982e:	e7f3      	b.n	8019818 <_vfiprintf_r+0x44>
 8019830:	2300      	movs	r3, #0
 8019832:	9309      	str	r3, [sp, #36]	@ 0x24
 8019834:	2320      	movs	r3, #32
 8019836:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801983a:	f8cd 800c 	str.w	r8, [sp, #12]
 801983e:	2330      	movs	r3, #48	@ 0x30
 8019840:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80199f0 <_vfiprintf_r+0x21c>
 8019844:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8019848:	f04f 0901 	mov.w	r9, #1
 801984c:	4623      	mov	r3, r4
 801984e:	469a      	mov	sl, r3
 8019850:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019854:	b10a      	cbz	r2, 801985a <_vfiprintf_r+0x86>
 8019856:	2a25      	cmp	r2, #37	@ 0x25
 8019858:	d1f9      	bne.n	801984e <_vfiprintf_r+0x7a>
 801985a:	ebba 0b04 	subs.w	fp, sl, r4
 801985e:	d00b      	beq.n	8019878 <_vfiprintf_r+0xa4>
 8019860:	465b      	mov	r3, fp
 8019862:	4622      	mov	r2, r4
 8019864:	4629      	mov	r1, r5
 8019866:	4630      	mov	r0, r6
 8019868:	f7ff ffa1 	bl	80197ae <__sfputs_r>
 801986c:	3001      	adds	r0, #1
 801986e:	f000 80a7 	beq.w	80199c0 <_vfiprintf_r+0x1ec>
 8019872:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019874:	445a      	add	r2, fp
 8019876:	9209      	str	r2, [sp, #36]	@ 0x24
 8019878:	f89a 3000 	ldrb.w	r3, [sl]
 801987c:	2b00      	cmp	r3, #0
 801987e:	f000 809f 	beq.w	80199c0 <_vfiprintf_r+0x1ec>
 8019882:	2300      	movs	r3, #0
 8019884:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8019888:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801988c:	f10a 0a01 	add.w	sl, sl, #1
 8019890:	9304      	str	r3, [sp, #16]
 8019892:	9307      	str	r3, [sp, #28]
 8019894:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8019898:	931a      	str	r3, [sp, #104]	@ 0x68
 801989a:	4654      	mov	r4, sl
 801989c:	2205      	movs	r2, #5
 801989e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80198a2:	4853      	ldr	r0, [pc, #332]	@ (80199f0 <_vfiprintf_r+0x21c>)
 80198a4:	f7e6 fcc4 	bl	8000230 <memchr>
 80198a8:	9a04      	ldr	r2, [sp, #16]
 80198aa:	b9d8      	cbnz	r0, 80198e4 <_vfiprintf_r+0x110>
 80198ac:	06d1      	lsls	r1, r2, #27
 80198ae:	bf44      	itt	mi
 80198b0:	2320      	movmi	r3, #32
 80198b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80198b6:	0713      	lsls	r3, r2, #28
 80198b8:	bf44      	itt	mi
 80198ba:	232b      	movmi	r3, #43	@ 0x2b
 80198bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80198c0:	f89a 3000 	ldrb.w	r3, [sl]
 80198c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80198c6:	d015      	beq.n	80198f4 <_vfiprintf_r+0x120>
 80198c8:	9a07      	ldr	r2, [sp, #28]
 80198ca:	4654      	mov	r4, sl
 80198cc:	2000      	movs	r0, #0
 80198ce:	f04f 0c0a 	mov.w	ip, #10
 80198d2:	4621      	mov	r1, r4
 80198d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80198d8:	3b30      	subs	r3, #48	@ 0x30
 80198da:	2b09      	cmp	r3, #9
 80198dc:	d94b      	bls.n	8019976 <_vfiprintf_r+0x1a2>
 80198de:	b1b0      	cbz	r0, 801990e <_vfiprintf_r+0x13a>
 80198e0:	9207      	str	r2, [sp, #28]
 80198e2:	e014      	b.n	801990e <_vfiprintf_r+0x13a>
 80198e4:	eba0 0308 	sub.w	r3, r0, r8
 80198e8:	fa09 f303 	lsl.w	r3, r9, r3
 80198ec:	4313      	orrs	r3, r2
 80198ee:	9304      	str	r3, [sp, #16]
 80198f0:	46a2      	mov	sl, r4
 80198f2:	e7d2      	b.n	801989a <_vfiprintf_r+0xc6>
 80198f4:	9b03      	ldr	r3, [sp, #12]
 80198f6:	1d19      	adds	r1, r3, #4
 80198f8:	681b      	ldr	r3, [r3, #0]
 80198fa:	9103      	str	r1, [sp, #12]
 80198fc:	2b00      	cmp	r3, #0
 80198fe:	bfbb      	ittet	lt
 8019900:	425b      	neglt	r3, r3
 8019902:	f042 0202 	orrlt.w	r2, r2, #2
 8019906:	9307      	strge	r3, [sp, #28]
 8019908:	9307      	strlt	r3, [sp, #28]
 801990a:	bfb8      	it	lt
 801990c:	9204      	strlt	r2, [sp, #16]
 801990e:	7823      	ldrb	r3, [r4, #0]
 8019910:	2b2e      	cmp	r3, #46	@ 0x2e
 8019912:	d10a      	bne.n	801992a <_vfiprintf_r+0x156>
 8019914:	7863      	ldrb	r3, [r4, #1]
 8019916:	2b2a      	cmp	r3, #42	@ 0x2a
 8019918:	d132      	bne.n	8019980 <_vfiprintf_r+0x1ac>
 801991a:	9b03      	ldr	r3, [sp, #12]
 801991c:	1d1a      	adds	r2, r3, #4
 801991e:	681b      	ldr	r3, [r3, #0]
 8019920:	9203      	str	r2, [sp, #12]
 8019922:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8019926:	3402      	adds	r4, #2
 8019928:	9305      	str	r3, [sp, #20]
 801992a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8019a00 <_vfiprintf_r+0x22c>
 801992e:	7821      	ldrb	r1, [r4, #0]
 8019930:	2203      	movs	r2, #3
 8019932:	4650      	mov	r0, sl
 8019934:	f7e6 fc7c 	bl	8000230 <memchr>
 8019938:	b138      	cbz	r0, 801994a <_vfiprintf_r+0x176>
 801993a:	9b04      	ldr	r3, [sp, #16]
 801993c:	eba0 000a 	sub.w	r0, r0, sl
 8019940:	2240      	movs	r2, #64	@ 0x40
 8019942:	4082      	lsls	r2, r0
 8019944:	4313      	orrs	r3, r2
 8019946:	3401      	adds	r4, #1
 8019948:	9304      	str	r3, [sp, #16]
 801994a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801994e:	4829      	ldr	r0, [pc, #164]	@ (80199f4 <_vfiprintf_r+0x220>)
 8019950:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8019954:	2206      	movs	r2, #6
 8019956:	f7e6 fc6b 	bl	8000230 <memchr>
 801995a:	2800      	cmp	r0, #0
 801995c:	d03f      	beq.n	80199de <_vfiprintf_r+0x20a>
 801995e:	4b26      	ldr	r3, [pc, #152]	@ (80199f8 <_vfiprintf_r+0x224>)
 8019960:	bb1b      	cbnz	r3, 80199aa <_vfiprintf_r+0x1d6>
 8019962:	9b03      	ldr	r3, [sp, #12]
 8019964:	3307      	adds	r3, #7
 8019966:	f023 0307 	bic.w	r3, r3, #7
 801996a:	3308      	adds	r3, #8
 801996c:	9303      	str	r3, [sp, #12]
 801996e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019970:	443b      	add	r3, r7
 8019972:	9309      	str	r3, [sp, #36]	@ 0x24
 8019974:	e76a      	b.n	801984c <_vfiprintf_r+0x78>
 8019976:	fb0c 3202 	mla	r2, ip, r2, r3
 801997a:	460c      	mov	r4, r1
 801997c:	2001      	movs	r0, #1
 801997e:	e7a8      	b.n	80198d2 <_vfiprintf_r+0xfe>
 8019980:	2300      	movs	r3, #0
 8019982:	3401      	adds	r4, #1
 8019984:	9305      	str	r3, [sp, #20]
 8019986:	4619      	mov	r1, r3
 8019988:	f04f 0c0a 	mov.w	ip, #10
 801998c:	4620      	mov	r0, r4
 801998e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019992:	3a30      	subs	r2, #48	@ 0x30
 8019994:	2a09      	cmp	r2, #9
 8019996:	d903      	bls.n	80199a0 <_vfiprintf_r+0x1cc>
 8019998:	2b00      	cmp	r3, #0
 801999a:	d0c6      	beq.n	801992a <_vfiprintf_r+0x156>
 801999c:	9105      	str	r1, [sp, #20]
 801999e:	e7c4      	b.n	801992a <_vfiprintf_r+0x156>
 80199a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80199a4:	4604      	mov	r4, r0
 80199a6:	2301      	movs	r3, #1
 80199a8:	e7f0      	b.n	801998c <_vfiprintf_r+0x1b8>
 80199aa:	ab03      	add	r3, sp, #12
 80199ac:	9300      	str	r3, [sp, #0]
 80199ae:	462a      	mov	r2, r5
 80199b0:	4b12      	ldr	r3, [pc, #72]	@ (80199fc <_vfiprintf_r+0x228>)
 80199b2:	a904      	add	r1, sp, #16
 80199b4:	4630      	mov	r0, r6
 80199b6:	f7fd fb9b 	bl	80170f0 <_printf_float>
 80199ba:	4607      	mov	r7, r0
 80199bc:	1c78      	adds	r0, r7, #1
 80199be:	d1d6      	bne.n	801996e <_vfiprintf_r+0x19a>
 80199c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80199c2:	07d9      	lsls	r1, r3, #31
 80199c4:	d405      	bmi.n	80199d2 <_vfiprintf_r+0x1fe>
 80199c6:	89ab      	ldrh	r3, [r5, #12]
 80199c8:	059a      	lsls	r2, r3, #22
 80199ca:	d402      	bmi.n	80199d2 <_vfiprintf_r+0x1fe>
 80199cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80199ce:	f7fe fb1d 	bl	801800c <__retarget_lock_release_recursive>
 80199d2:	89ab      	ldrh	r3, [r5, #12]
 80199d4:	065b      	lsls	r3, r3, #25
 80199d6:	f53f af1f 	bmi.w	8019818 <_vfiprintf_r+0x44>
 80199da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80199dc:	e71e      	b.n	801981c <_vfiprintf_r+0x48>
 80199de:	ab03      	add	r3, sp, #12
 80199e0:	9300      	str	r3, [sp, #0]
 80199e2:	462a      	mov	r2, r5
 80199e4:	4b05      	ldr	r3, [pc, #20]	@ (80199fc <_vfiprintf_r+0x228>)
 80199e6:	a904      	add	r1, sp, #16
 80199e8:	4630      	mov	r0, r6
 80199ea:	f7fd fe19 	bl	8017620 <_printf_i>
 80199ee:	e7e4      	b.n	80199ba <_vfiprintf_r+0x1e6>
 80199f0:	0801afb0 	.word	0x0801afb0
 80199f4:	0801afba 	.word	0x0801afba
 80199f8:	080170f1 	.word	0x080170f1
 80199fc:	080197af 	.word	0x080197af
 8019a00:	0801afb6 	.word	0x0801afb6

08019a04 <__sflush_r>:
 8019a04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8019a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019a0c:	0716      	lsls	r6, r2, #28
 8019a0e:	4605      	mov	r5, r0
 8019a10:	460c      	mov	r4, r1
 8019a12:	d454      	bmi.n	8019abe <__sflush_r+0xba>
 8019a14:	684b      	ldr	r3, [r1, #4]
 8019a16:	2b00      	cmp	r3, #0
 8019a18:	dc02      	bgt.n	8019a20 <__sflush_r+0x1c>
 8019a1a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8019a1c:	2b00      	cmp	r3, #0
 8019a1e:	dd48      	ble.n	8019ab2 <__sflush_r+0xae>
 8019a20:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8019a22:	2e00      	cmp	r6, #0
 8019a24:	d045      	beq.n	8019ab2 <__sflush_r+0xae>
 8019a26:	2300      	movs	r3, #0
 8019a28:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8019a2c:	682f      	ldr	r7, [r5, #0]
 8019a2e:	6a21      	ldr	r1, [r4, #32]
 8019a30:	602b      	str	r3, [r5, #0]
 8019a32:	d030      	beq.n	8019a96 <__sflush_r+0x92>
 8019a34:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8019a36:	89a3      	ldrh	r3, [r4, #12]
 8019a38:	0759      	lsls	r1, r3, #29
 8019a3a:	d505      	bpl.n	8019a48 <__sflush_r+0x44>
 8019a3c:	6863      	ldr	r3, [r4, #4]
 8019a3e:	1ad2      	subs	r2, r2, r3
 8019a40:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8019a42:	b10b      	cbz	r3, 8019a48 <__sflush_r+0x44>
 8019a44:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8019a46:	1ad2      	subs	r2, r2, r3
 8019a48:	2300      	movs	r3, #0
 8019a4a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8019a4c:	6a21      	ldr	r1, [r4, #32]
 8019a4e:	4628      	mov	r0, r5
 8019a50:	47b0      	blx	r6
 8019a52:	1c43      	adds	r3, r0, #1
 8019a54:	89a3      	ldrh	r3, [r4, #12]
 8019a56:	d106      	bne.n	8019a66 <__sflush_r+0x62>
 8019a58:	6829      	ldr	r1, [r5, #0]
 8019a5a:	291d      	cmp	r1, #29
 8019a5c:	d82b      	bhi.n	8019ab6 <__sflush_r+0xb2>
 8019a5e:	4a2a      	ldr	r2, [pc, #168]	@ (8019b08 <__sflush_r+0x104>)
 8019a60:	410a      	asrs	r2, r1
 8019a62:	07d6      	lsls	r6, r2, #31
 8019a64:	d427      	bmi.n	8019ab6 <__sflush_r+0xb2>
 8019a66:	2200      	movs	r2, #0
 8019a68:	6062      	str	r2, [r4, #4]
 8019a6a:	04d9      	lsls	r1, r3, #19
 8019a6c:	6922      	ldr	r2, [r4, #16]
 8019a6e:	6022      	str	r2, [r4, #0]
 8019a70:	d504      	bpl.n	8019a7c <__sflush_r+0x78>
 8019a72:	1c42      	adds	r2, r0, #1
 8019a74:	d101      	bne.n	8019a7a <__sflush_r+0x76>
 8019a76:	682b      	ldr	r3, [r5, #0]
 8019a78:	b903      	cbnz	r3, 8019a7c <__sflush_r+0x78>
 8019a7a:	6560      	str	r0, [r4, #84]	@ 0x54
 8019a7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019a7e:	602f      	str	r7, [r5, #0]
 8019a80:	b1b9      	cbz	r1, 8019ab2 <__sflush_r+0xae>
 8019a82:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8019a86:	4299      	cmp	r1, r3
 8019a88:	d002      	beq.n	8019a90 <__sflush_r+0x8c>
 8019a8a:	4628      	mov	r0, r5
 8019a8c:	f7ff f94c 	bl	8018d28 <_free_r>
 8019a90:	2300      	movs	r3, #0
 8019a92:	6363      	str	r3, [r4, #52]	@ 0x34
 8019a94:	e00d      	b.n	8019ab2 <__sflush_r+0xae>
 8019a96:	2301      	movs	r3, #1
 8019a98:	4628      	mov	r0, r5
 8019a9a:	47b0      	blx	r6
 8019a9c:	4602      	mov	r2, r0
 8019a9e:	1c50      	adds	r0, r2, #1
 8019aa0:	d1c9      	bne.n	8019a36 <__sflush_r+0x32>
 8019aa2:	682b      	ldr	r3, [r5, #0]
 8019aa4:	2b00      	cmp	r3, #0
 8019aa6:	d0c6      	beq.n	8019a36 <__sflush_r+0x32>
 8019aa8:	2b1d      	cmp	r3, #29
 8019aaa:	d001      	beq.n	8019ab0 <__sflush_r+0xac>
 8019aac:	2b16      	cmp	r3, #22
 8019aae:	d11e      	bne.n	8019aee <__sflush_r+0xea>
 8019ab0:	602f      	str	r7, [r5, #0]
 8019ab2:	2000      	movs	r0, #0
 8019ab4:	e022      	b.n	8019afc <__sflush_r+0xf8>
 8019ab6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019aba:	b21b      	sxth	r3, r3
 8019abc:	e01b      	b.n	8019af6 <__sflush_r+0xf2>
 8019abe:	690f      	ldr	r7, [r1, #16]
 8019ac0:	2f00      	cmp	r7, #0
 8019ac2:	d0f6      	beq.n	8019ab2 <__sflush_r+0xae>
 8019ac4:	0793      	lsls	r3, r2, #30
 8019ac6:	680e      	ldr	r6, [r1, #0]
 8019ac8:	bf08      	it	eq
 8019aca:	694b      	ldreq	r3, [r1, #20]
 8019acc:	600f      	str	r7, [r1, #0]
 8019ace:	bf18      	it	ne
 8019ad0:	2300      	movne	r3, #0
 8019ad2:	eba6 0807 	sub.w	r8, r6, r7
 8019ad6:	608b      	str	r3, [r1, #8]
 8019ad8:	f1b8 0f00 	cmp.w	r8, #0
 8019adc:	dde9      	ble.n	8019ab2 <__sflush_r+0xae>
 8019ade:	6a21      	ldr	r1, [r4, #32]
 8019ae0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8019ae2:	4643      	mov	r3, r8
 8019ae4:	463a      	mov	r2, r7
 8019ae6:	4628      	mov	r0, r5
 8019ae8:	47b0      	blx	r6
 8019aea:	2800      	cmp	r0, #0
 8019aec:	dc08      	bgt.n	8019b00 <__sflush_r+0xfc>
 8019aee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019af2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019af6:	81a3      	strh	r3, [r4, #12]
 8019af8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019b00:	4407      	add	r7, r0
 8019b02:	eba8 0800 	sub.w	r8, r8, r0
 8019b06:	e7e7      	b.n	8019ad8 <__sflush_r+0xd4>
 8019b08:	dfbffffe 	.word	0xdfbffffe

08019b0c <_fflush_r>:
 8019b0c:	b538      	push	{r3, r4, r5, lr}
 8019b0e:	690b      	ldr	r3, [r1, #16]
 8019b10:	4605      	mov	r5, r0
 8019b12:	460c      	mov	r4, r1
 8019b14:	b913      	cbnz	r3, 8019b1c <_fflush_r+0x10>
 8019b16:	2500      	movs	r5, #0
 8019b18:	4628      	mov	r0, r5
 8019b1a:	bd38      	pop	{r3, r4, r5, pc}
 8019b1c:	b118      	cbz	r0, 8019b26 <_fflush_r+0x1a>
 8019b1e:	6a03      	ldr	r3, [r0, #32]
 8019b20:	b90b      	cbnz	r3, 8019b26 <_fflush_r+0x1a>
 8019b22:	f7fd ff29 	bl	8017978 <__sinit>
 8019b26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019b2a:	2b00      	cmp	r3, #0
 8019b2c:	d0f3      	beq.n	8019b16 <_fflush_r+0xa>
 8019b2e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8019b30:	07d0      	lsls	r0, r2, #31
 8019b32:	d404      	bmi.n	8019b3e <_fflush_r+0x32>
 8019b34:	0599      	lsls	r1, r3, #22
 8019b36:	d402      	bmi.n	8019b3e <_fflush_r+0x32>
 8019b38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019b3a:	f7fe fa66 	bl	801800a <__retarget_lock_acquire_recursive>
 8019b3e:	4628      	mov	r0, r5
 8019b40:	4621      	mov	r1, r4
 8019b42:	f7ff ff5f 	bl	8019a04 <__sflush_r>
 8019b46:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8019b48:	07da      	lsls	r2, r3, #31
 8019b4a:	4605      	mov	r5, r0
 8019b4c:	d4e4      	bmi.n	8019b18 <_fflush_r+0xc>
 8019b4e:	89a3      	ldrh	r3, [r4, #12]
 8019b50:	059b      	lsls	r3, r3, #22
 8019b52:	d4e1      	bmi.n	8019b18 <_fflush_r+0xc>
 8019b54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019b56:	f7fe fa59 	bl	801800c <__retarget_lock_release_recursive>
 8019b5a:	e7dd      	b.n	8019b18 <_fflush_r+0xc>

08019b5c <fiprintf>:
 8019b5c:	b40e      	push	{r1, r2, r3}
 8019b5e:	b503      	push	{r0, r1, lr}
 8019b60:	4601      	mov	r1, r0
 8019b62:	ab03      	add	r3, sp, #12
 8019b64:	4805      	ldr	r0, [pc, #20]	@ (8019b7c <fiprintf+0x20>)
 8019b66:	f853 2b04 	ldr.w	r2, [r3], #4
 8019b6a:	6800      	ldr	r0, [r0, #0]
 8019b6c:	9301      	str	r3, [sp, #4]
 8019b6e:	f7ff fe31 	bl	80197d4 <_vfiprintf_r>
 8019b72:	b002      	add	sp, #8
 8019b74:	f85d eb04 	ldr.w	lr, [sp], #4
 8019b78:	b003      	add	sp, #12
 8019b7a:	4770      	bx	lr
 8019b7c:	200000c8 	.word	0x200000c8

08019b80 <__swhatbuf_r>:
 8019b80:	b570      	push	{r4, r5, r6, lr}
 8019b82:	460c      	mov	r4, r1
 8019b84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019b88:	2900      	cmp	r1, #0
 8019b8a:	b096      	sub	sp, #88	@ 0x58
 8019b8c:	4615      	mov	r5, r2
 8019b8e:	461e      	mov	r6, r3
 8019b90:	da0d      	bge.n	8019bae <__swhatbuf_r+0x2e>
 8019b92:	89a3      	ldrh	r3, [r4, #12]
 8019b94:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8019b98:	f04f 0100 	mov.w	r1, #0
 8019b9c:	bf14      	ite	ne
 8019b9e:	2340      	movne	r3, #64	@ 0x40
 8019ba0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8019ba4:	2000      	movs	r0, #0
 8019ba6:	6031      	str	r1, [r6, #0]
 8019ba8:	602b      	str	r3, [r5, #0]
 8019baa:	b016      	add	sp, #88	@ 0x58
 8019bac:	bd70      	pop	{r4, r5, r6, pc}
 8019bae:	466a      	mov	r2, sp
 8019bb0:	f000 f848 	bl	8019c44 <_fstat_r>
 8019bb4:	2800      	cmp	r0, #0
 8019bb6:	dbec      	blt.n	8019b92 <__swhatbuf_r+0x12>
 8019bb8:	9901      	ldr	r1, [sp, #4]
 8019bba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8019bbe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8019bc2:	4259      	negs	r1, r3
 8019bc4:	4159      	adcs	r1, r3
 8019bc6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8019bca:	e7eb      	b.n	8019ba4 <__swhatbuf_r+0x24>

08019bcc <__smakebuf_r>:
 8019bcc:	898b      	ldrh	r3, [r1, #12]
 8019bce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019bd0:	079d      	lsls	r5, r3, #30
 8019bd2:	4606      	mov	r6, r0
 8019bd4:	460c      	mov	r4, r1
 8019bd6:	d507      	bpl.n	8019be8 <__smakebuf_r+0x1c>
 8019bd8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8019bdc:	6023      	str	r3, [r4, #0]
 8019bde:	6123      	str	r3, [r4, #16]
 8019be0:	2301      	movs	r3, #1
 8019be2:	6163      	str	r3, [r4, #20]
 8019be4:	b003      	add	sp, #12
 8019be6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019be8:	ab01      	add	r3, sp, #4
 8019bea:	466a      	mov	r2, sp
 8019bec:	f7ff ffc8 	bl	8019b80 <__swhatbuf_r>
 8019bf0:	9f00      	ldr	r7, [sp, #0]
 8019bf2:	4605      	mov	r5, r0
 8019bf4:	4639      	mov	r1, r7
 8019bf6:	4630      	mov	r0, r6
 8019bf8:	f7fd f834 	bl	8016c64 <_malloc_r>
 8019bfc:	b948      	cbnz	r0, 8019c12 <__smakebuf_r+0x46>
 8019bfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019c02:	059a      	lsls	r2, r3, #22
 8019c04:	d4ee      	bmi.n	8019be4 <__smakebuf_r+0x18>
 8019c06:	f023 0303 	bic.w	r3, r3, #3
 8019c0a:	f043 0302 	orr.w	r3, r3, #2
 8019c0e:	81a3      	strh	r3, [r4, #12]
 8019c10:	e7e2      	b.n	8019bd8 <__smakebuf_r+0xc>
 8019c12:	89a3      	ldrh	r3, [r4, #12]
 8019c14:	6020      	str	r0, [r4, #0]
 8019c16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019c1a:	81a3      	strh	r3, [r4, #12]
 8019c1c:	9b01      	ldr	r3, [sp, #4]
 8019c1e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8019c22:	b15b      	cbz	r3, 8019c3c <__smakebuf_r+0x70>
 8019c24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019c28:	4630      	mov	r0, r6
 8019c2a:	f000 f81d 	bl	8019c68 <_isatty_r>
 8019c2e:	b128      	cbz	r0, 8019c3c <__smakebuf_r+0x70>
 8019c30:	89a3      	ldrh	r3, [r4, #12]
 8019c32:	f023 0303 	bic.w	r3, r3, #3
 8019c36:	f043 0301 	orr.w	r3, r3, #1
 8019c3a:	81a3      	strh	r3, [r4, #12]
 8019c3c:	89a3      	ldrh	r3, [r4, #12]
 8019c3e:	431d      	orrs	r5, r3
 8019c40:	81a5      	strh	r5, [r4, #12]
 8019c42:	e7cf      	b.n	8019be4 <__smakebuf_r+0x18>

08019c44 <_fstat_r>:
 8019c44:	b538      	push	{r3, r4, r5, lr}
 8019c46:	4d07      	ldr	r5, [pc, #28]	@ (8019c64 <_fstat_r+0x20>)
 8019c48:	2300      	movs	r3, #0
 8019c4a:	4604      	mov	r4, r0
 8019c4c:	4608      	mov	r0, r1
 8019c4e:	4611      	mov	r1, r2
 8019c50:	602b      	str	r3, [r5, #0]
 8019c52:	f7e9 f885 	bl	8002d60 <_fstat>
 8019c56:	1c43      	adds	r3, r0, #1
 8019c58:	d102      	bne.n	8019c60 <_fstat_r+0x1c>
 8019c5a:	682b      	ldr	r3, [r5, #0]
 8019c5c:	b103      	cbz	r3, 8019c60 <_fstat_r+0x1c>
 8019c5e:	6023      	str	r3, [r4, #0]
 8019c60:	bd38      	pop	{r3, r4, r5, pc}
 8019c62:	bf00      	nop
 8019c64:	20011448 	.word	0x20011448

08019c68 <_isatty_r>:
 8019c68:	b538      	push	{r3, r4, r5, lr}
 8019c6a:	4d06      	ldr	r5, [pc, #24]	@ (8019c84 <_isatty_r+0x1c>)
 8019c6c:	2300      	movs	r3, #0
 8019c6e:	4604      	mov	r4, r0
 8019c70:	4608      	mov	r0, r1
 8019c72:	602b      	str	r3, [r5, #0]
 8019c74:	f7e9 f884 	bl	8002d80 <_isatty>
 8019c78:	1c43      	adds	r3, r0, #1
 8019c7a:	d102      	bne.n	8019c82 <_isatty_r+0x1a>
 8019c7c:	682b      	ldr	r3, [r5, #0]
 8019c7e:	b103      	cbz	r3, 8019c82 <_isatty_r+0x1a>
 8019c80:	6023      	str	r3, [r4, #0]
 8019c82:	bd38      	pop	{r3, r4, r5, pc}
 8019c84:	20011448 	.word	0x20011448

08019c88 <abort>:
 8019c88:	b508      	push	{r3, lr}
 8019c8a:	2006      	movs	r0, #6
 8019c8c:	f000 f84a 	bl	8019d24 <raise>
 8019c90:	2001      	movs	r0, #1
 8019c92:	f7e9 f815 	bl	8002cc0 <_exit>

08019c96 <__ascii_mbtowc>:
 8019c96:	b082      	sub	sp, #8
 8019c98:	b901      	cbnz	r1, 8019c9c <__ascii_mbtowc+0x6>
 8019c9a:	a901      	add	r1, sp, #4
 8019c9c:	b142      	cbz	r2, 8019cb0 <__ascii_mbtowc+0x1a>
 8019c9e:	b14b      	cbz	r3, 8019cb4 <__ascii_mbtowc+0x1e>
 8019ca0:	7813      	ldrb	r3, [r2, #0]
 8019ca2:	600b      	str	r3, [r1, #0]
 8019ca4:	7812      	ldrb	r2, [r2, #0]
 8019ca6:	1e10      	subs	r0, r2, #0
 8019ca8:	bf18      	it	ne
 8019caa:	2001      	movne	r0, #1
 8019cac:	b002      	add	sp, #8
 8019cae:	4770      	bx	lr
 8019cb0:	4610      	mov	r0, r2
 8019cb2:	e7fb      	b.n	8019cac <__ascii_mbtowc+0x16>
 8019cb4:	f06f 0001 	mvn.w	r0, #1
 8019cb8:	e7f8      	b.n	8019cac <__ascii_mbtowc+0x16>

08019cba <__ascii_wctomb>:
 8019cba:	4603      	mov	r3, r0
 8019cbc:	4608      	mov	r0, r1
 8019cbe:	b141      	cbz	r1, 8019cd2 <__ascii_wctomb+0x18>
 8019cc0:	2aff      	cmp	r2, #255	@ 0xff
 8019cc2:	d904      	bls.n	8019cce <__ascii_wctomb+0x14>
 8019cc4:	228a      	movs	r2, #138	@ 0x8a
 8019cc6:	601a      	str	r2, [r3, #0]
 8019cc8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019ccc:	4770      	bx	lr
 8019cce:	700a      	strb	r2, [r1, #0]
 8019cd0:	2001      	movs	r0, #1
 8019cd2:	4770      	bx	lr

08019cd4 <_raise_r>:
 8019cd4:	291f      	cmp	r1, #31
 8019cd6:	b538      	push	{r3, r4, r5, lr}
 8019cd8:	4605      	mov	r5, r0
 8019cda:	460c      	mov	r4, r1
 8019cdc:	d904      	bls.n	8019ce8 <_raise_r+0x14>
 8019cde:	2316      	movs	r3, #22
 8019ce0:	6003      	str	r3, [r0, #0]
 8019ce2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019ce6:	bd38      	pop	{r3, r4, r5, pc}
 8019ce8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8019cea:	b112      	cbz	r2, 8019cf2 <_raise_r+0x1e>
 8019cec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019cf0:	b94b      	cbnz	r3, 8019d06 <_raise_r+0x32>
 8019cf2:	4628      	mov	r0, r5
 8019cf4:	f000 f830 	bl	8019d58 <_getpid_r>
 8019cf8:	4622      	mov	r2, r4
 8019cfa:	4601      	mov	r1, r0
 8019cfc:	4628      	mov	r0, r5
 8019cfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019d02:	f000 b817 	b.w	8019d34 <_kill_r>
 8019d06:	2b01      	cmp	r3, #1
 8019d08:	d00a      	beq.n	8019d20 <_raise_r+0x4c>
 8019d0a:	1c59      	adds	r1, r3, #1
 8019d0c:	d103      	bne.n	8019d16 <_raise_r+0x42>
 8019d0e:	2316      	movs	r3, #22
 8019d10:	6003      	str	r3, [r0, #0]
 8019d12:	2001      	movs	r0, #1
 8019d14:	e7e7      	b.n	8019ce6 <_raise_r+0x12>
 8019d16:	2100      	movs	r1, #0
 8019d18:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8019d1c:	4620      	mov	r0, r4
 8019d1e:	4798      	blx	r3
 8019d20:	2000      	movs	r0, #0
 8019d22:	e7e0      	b.n	8019ce6 <_raise_r+0x12>

08019d24 <raise>:
 8019d24:	4b02      	ldr	r3, [pc, #8]	@ (8019d30 <raise+0xc>)
 8019d26:	4601      	mov	r1, r0
 8019d28:	6818      	ldr	r0, [r3, #0]
 8019d2a:	f7ff bfd3 	b.w	8019cd4 <_raise_r>
 8019d2e:	bf00      	nop
 8019d30:	200000c8 	.word	0x200000c8

08019d34 <_kill_r>:
 8019d34:	b538      	push	{r3, r4, r5, lr}
 8019d36:	4d07      	ldr	r5, [pc, #28]	@ (8019d54 <_kill_r+0x20>)
 8019d38:	2300      	movs	r3, #0
 8019d3a:	4604      	mov	r4, r0
 8019d3c:	4608      	mov	r0, r1
 8019d3e:	4611      	mov	r1, r2
 8019d40:	602b      	str	r3, [r5, #0]
 8019d42:	f7e8 ffad 	bl	8002ca0 <_kill>
 8019d46:	1c43      	adds	r3, r0, #1
 8019d48:	d102      	bne.n	8019d50 <_kill_r+0x1c>
 8019d4a:	682b      	ldr	r3, [r5, #0]
 8019d4c:	b103      	cbz	r3, 8019d50 <_kill_r+0x1c>
 8019d4e:	6023      	str	r3, [r4, #0]
 8019d50:	bd38      	pop	{r3, r4, r5, pc}
 8019d52:	bf00      	nop
 8019d54:	20011448 	.word	0x20011448

08019d58 <_getpid_r>:
 8019d58:	f7e8 bf9a 	b.w	8002c90 <_getpid>

08019d5c <_init>:
 8019d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019d5e:	bf00      	nop
 8019d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019d62:	bc08      	pop	{r3}
 8019d64:	469e      	mov	lr, r3
 8019d66:	4770      	bx	lr

08019d68 <_fini>:
 8019d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019d6a:	bf00      	nop
 8019d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019d6e:	bc08      	pop	{r3}
 8019d70:	469e      	mov	lr, r3
 8019d72:	4770      	bx	lr
