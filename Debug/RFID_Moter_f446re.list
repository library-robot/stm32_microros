
RFID_Moter_f446re.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019b94  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001254  08019d68  08019d68  0001ad68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801afbc  0801afbc  0001c284  2**0
                  CONTENTS
  4 .ARM          00000008  0801afbc  0801afbc  0001bfbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801afc4  0801afc4  0001c284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801afc4  0801afc4  0001bfc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801afcc  0801afcc  0001bfcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000284  20000000  0801afd0  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000111c8  20000288  0801b254  0001c288  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20011450  0801b254  0001c450  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001c284  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e999  00000000  00000000  0001c2b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004f21  00000000  00000000  0003ac4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001850  00000000  00000000  0003fb70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001298  00000000  00000000  000413c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029929  00000000  00000000  00042658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021038  00000000  00000000  0006bf81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e878f  00000000  00000000  0008cfb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  00175748  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007718  00000000  00000000  001757c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0017ced8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000288 	.word	0x20000288
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08019d4c 	.word	0x08019d4c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000028c 	.word	0x2000028c
 800020c:	08019d4c 	.word	0x08019d4c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_ldivmod>:
 8000c08:	b97b      	cbnz	r3, 8000c2a <__aeabi_ldivmod+0x22>
 8000c0a:	b972      	cbnz	r2, 8000c2a <__aeabi_ldivmod+0x22>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bfbe      	ittt	lt
 8000c10:	2000      	movlt	r0, #0
 8000c12:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c16:	e006      	blt.n	8000c26 <__aeabi_ldivmod+0x1e>
 8000c18:	bf08      	it	eq
 8000c1a:	2800      	cmpeq	r0, #0
 8000c1c:	bf1c      	itt	ne
 8000c1e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c22:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c26:	f000 b9b5 	b.w	8000f94 <__aeabi_idiv0>
 8000c2a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c2e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c32:	2900      	cmp	r1, #0
 8000c34:	db09      	blt.n	8000c4a <__aeabi_ldivmod+0x42>
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	db1a      	blt.n	8000c70 <__aeabi_ldivmod+0x68>
 8000c3a:	f000 f84d 	bl	8000cd8 <__udivmoddi4>
 8000c3e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c46:	b004      	add	sp, #16
 8000c48:	4770      	bx	lr
 8000c4a:	4240      	negs	r0, r0
 8000c4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	db1b      	blt.n	8000c8c <__aeabi_ldivmod+0x84>
 8000c54:	f000 f840 	bl	8000cd8 <__udivmoddi4>
 8000c58:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c60:	b004      	add	sp, #16
 8000c62:	4240      	negs	r0, r0
 8000c64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c68:	4252      	negs	r2, r2
 8000c6a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c6e:	4770      	bx	lr
 8000c70:	4252      	negs	r2, r2
 8000c72:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c76:	f000 f82f 	bl	8000cd8 <__udivmoddi4>
 8000c7a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c82:	b004      	add	sp, #16
 8000c84:	4240      	negs	r0, r0
 8000c86:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c8a:	4770      	bx	lr
 8000c8c:	4252      	negs	r2, r2
 8000c8e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c92:	f000 f821 	bl	8000cd8 <__udivmoddi4>
 8000c96:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c9e:	b004      	add	sp, #16
 8000ca0:	4252      	negs	r2, r2
 8000ca2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cbc:	f000 b96a 	b.w	8000f94 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9d08      	ldr	r5, [sp, #32]
 8000cde:	460c      	mov	r4, r1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d14e      	bne.n	8000d82 <__udivmoddi4+0xaa>
 8000ce4:	4694      	mov	ip, r2
 8000ce6:	458c      	cmp	ip, r1
 8000ce8:	4686      	mov	lr, r0
 8000cea:	fab2 f282 	clz	r2, r2
 8000cee:	d962      	bls.n	8000db6 <__udivmoddi4+0xde>
 8000cf0:	b14a      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf2:	f1c2 0320 	rsb	r3, r2, #32
 8000cf6:	4091      	lsls	r1, r2
 8000cf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d00:	4319      	orrs	r1, r3
 8000d02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0a:	fa1f f68c 	uxth.w	r6, ip
 8000d0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d16:	fb07 1114 	mls	r1, r7, r4, r1
 8000d1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1e:	fb04 f106 	mul.w	r1, r4, r6
 8000d22:	4299      	cmp	r1, r3
 8000d24:	d90a      	bls.n	8000d3c <__udivmoddi4+0x64>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d2e:	f080 8112 	bcs.w	8000f56 <__udivmoddi4+0x27e>
 8000d32:	4299      	cmp	r1, r3
 8000d34:	f240 810f 	bls.w	8000f56 <__udivmoddi4+0x27e>
 8000d38:	3c02      	subs	r4, #2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	1a59      	subs	r1, r3, r1
 8000d3e:	fa1f f38e 	uxth.w	r3, lr
 8000d42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d46:	fb07 1110 	mls	r1, r7, r0, r1
 8000d4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4e:	fb00 f606 	mul.w	r6, r0, r6
 8000d52:	429e      	cmp	r6, r3
 8000d54:	d90a      	bls.n	8000d6c <__udivmoddi4+0x94>
 8000d56:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d5e:	f080 80fc 	bcs.w	8000f5a <__udivmoddi4+0x282>
 8000d62:	429e      	cmp	r6, r3
 8000d64:	f240 80f9 	bls.w	8000f5a <__udivmoddi4+0x282>
 8000d68:	4463      	add	r3, ip
 8000d6a:	3802      	subs	r0, #2
 8000d6c:	1b9b      	subs	r3, r3, r6
 8000d6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d72:	2100      	movs	r1, #0
 8000d74:	b11d      	cbz	r5, 8000d7e <__udivmoddi4+0xa6>
 8000d76:	40d3      	lsrs	r3, r2
 8000d78:	2200      	movs	r2, #0
 8000d7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d905      	bls.n	8000d92 <__udivmoddi4+0xba>
 8000d86:	b10d      	cbz	r5, 8000d8c <__udivmoddi4+0xb4>
 8000d88:	e9c5 0100 	strd	r0, r1, [r5]
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	4608      	mov	r0, r1
 8000d90:	e7f5      	b.n	8000d7e <__udivmoddi4+0xa6>
 8000d92:	fab3 f183 	clz	r1, r3
 8000d96:	2900      	cmp	r1, #0
 8000d98:	d146      	bne.n	8000e28 <__udivmoddi4+0x150>
 8000d9a:	42a3      	cmp	r3, r4
 8000d9c:	d302      	bcc.n	8000da4 <__udivmoddi4+0xcc>
 8000d9e:	4290      	cmp	r0, r2
 8000da0:	f0c0 80f0 	bcc.w	8000f84 <__udivmoddi4+0x2ac>
 8000da4:	1a86      	subs	r6, r0, r2
 8000da6:	eb64 0303 	sbc.w	r3, r4, r3
 8000daa:	2001      	movs	r0, #1
 8000dac:	2d00      	cmp	r5, #0
 8000dae:	d0e6      	beq.n	8000d7e <__udivmoddi4+0xa6>
 8000db0:	e9c5 6300 	strd	r6, r3, [r5]
 8000db4:	e7e3      	b.n	8000d7e <__udivmoddi4+0xa6>
 8000db6:	2a00      	cmp	r2, #0
 8000db8:	f040 8090 	bne.w	8000edc <__udivmoddi4+0x204>
 8000dbc:	eba1 040c 	sub.w	r4, r1, ip
 8000dc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dc4:	fa1f f78c 	uxth.w	r7, ip
 8000dc8:	2101      	movs	r1, #1
 8000dca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dda:	fb07 f006 	mul.w	r0, r7, r6
 8000dde:	4298      	cmp	r0, r3
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x11c>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x11a>
 8000dec:	4298      	cmp	r0, r3
 8000dee:	f200 80cd 	bhi.w	8000f8c <__udivmoddi4+0x2b4>
 8000df2:	4626      	mov	r6, r4
 8000df4:	1a1c      	subs	r4, r3, r0
 8000df6:	fa1f f38e 	uxth.w	r3, lr
 8000dfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000e02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e06:	fb00 f707 	mul.w	r7, r0, r7
 8000e0a:	429f      	cmp	r7, r3
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x148>
 8000e0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e12:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e16:	d202      	bcs.n	8000e1e <__udivmoddi4+0x146>
 8000e18:	429f      	cmp	r7, r3
 8000e1a:	f200 80b0 	bhi.w	8000f7e <__udivmoddi4+0x2a6>
 8000e1e:	4620      	mov	r0, r4
 8000e20:	1bdb      	subs	r3, r3, r7
 8000e22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e26:	e7a5      	b.n	8000d74 <__udivmoddi4+0x9c>
 8000e28:	f1c1 0620 	rsb	r6, r1, #32
 8000e2c:	408b      	lsls	r3, r1
 8000e2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e32:	431f      	orrs	r7, r3
 8000e34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e38:	fa04 f301 	lsl.w	r3, r4, r1
 8000e3c:	ea43 030c 	orr.w	r3, r3, ip
 8000e40:	40f4      	lsrs	r4, r6
 8000e42:	fa00 f801 	lsl.w	r8, r0, r1
 8000e46:	0c38      	lsrs	r0, r7, #16
 8000e48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e50:	fa1f fc87 	uxth.w	ip, r7
 8000e54:	fb00 441e 	mls	r4, r0, lr, r4
 8000e58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e60:	45a1      	cmp	r9, r4
 8000e62:	fa02 f201 	lsl.w	r2, r2, r1
 8000e66:	d90a      	bls.n	8000e7e <__udivmoddi4+0x1a6>
 8000e68:	193c      	adds	r4, r7, r4
 8000e6a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e6e:	f080 8084 	bcs.w	8000f7a <__udivmoddi4+0x2a2>
 8000e72:	45a1      	cmp	r9, r4
 8000e74:	f240 8081 	bls.w	8000f7a <__udivmoddi4+0x2a2>
 8000e78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e7c:	443c      	add	r4, r7
 8000e7e:	eba4 0409 	sub.w	r4, r4, r9
 8000e82:	fa1f f983 	uxth.w	r9, r3
 8000e86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e96:	45a4      	cmp	ip, r4
 8000e98:	d907      	bls.n	8000eaa <__udivmoddi4+0x1d2>
 8000e9a:	193c      	adds	r4, r7, r4
 8000e9c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000ea0:	d267      	bcs.n	8000f72 <__udivmoddi4+0x29a>
 8000ea2:	45a4      	cmp	ip, r4
 8000ea4:	d965      	bls.n	8000f72 <__udivmoddi4+0x29a>
 8000ea6:	3b02      	subs	r3, #2
 8000ea8:	443c      	add	r4, r7
 8000eaa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000eae:	fba0 9302 	umull	r9, r3, r0, r2
 8000eb2:	eba4 040c 	sub.w	r4, r4, ip
 8000eb6:	429c      	cmp	r4, r3
 8000eb8:	46ce      	mov	lr, r9
 8000eba:	469c      	mov	ip, r3
 8000ebc:	d351      	bcc.n	8000f62 <__udivmoddi4+0x28a>
 8000ebe:	d04e      	beq.n	8000f5e <__udivmoddi4+0x286>
 8000ec0:	b155      	cbz	r5, 8000ed8 <__udivmoddi4+0x200>
 8000ec2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ec6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eca:	fa04 f606 	lsl.w	r6, r4, r6
 8000ece:	40cb      	lsrs	r3, r1
 8000ed0:	431e      	orrs	r6, r3
 8000ed2:	40cc      	lsrs	r4, r1
 8000ed4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ed8:	2100      	movs	r1, #0
 8000eda:	e750      	b.n	8000d7e <__udivmoddi4+0xa6>
 8000edc:	f1c2 0320 	rsb	r3, r2, #32
 8000ee0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ee4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ee8:	fa24 f303 	lsr.w	r3, r4, r3
 8000eec:	4094      	lsls	r4, r2
 8000eee:	430c      	orrs	r4, r1
 8000ef0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ef4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ef8:	fa1f f78c 	uxth.w	r7, ip
 8000efc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f00:	fb08 3110 	mls	r1, r8, r0, r3
 8000f04:	0c23      	lsrs	r3, r4, #16
 8000f06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f0a:	fb00 f107 	mul.w	r1, r0, r7
 8000f0e:	4299      	cmp	r1, r3
 8000f10:	d908      	bls.n	8000f24 <__udivmoddi4+0x24c>
 8000f12:	eb1c 0303 	adds.w	r3, ip, r3
 8000f16:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f1a:	d22c      	bcs.n	8000f76 <__udivmoddi4+0x29e>
 8000f1c:	4299      	cmp	r1, r3
 8000f1e:	d92a      	bls.n	8000f76 <__udivmoddi4+0x29e>
 8000f20:	3802      	subs	r0, #2
 8000f22:	4463      	add	r3, ip
 8000f24:	1a5b      	subs	r3, r3, r1
 8000f26:	b2a4      	uxth	r4, r4
 8000f28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f34:	fb01 f307 	mul.w	r3, r1, r7
 8000f38:	42a3      	cmp	r3, r4
 8000f3a:	d908      	bls.n	8000f4e <__udivmoddi4+0x276>
 8000f3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f40:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f44:	d213      	bcs.n	8000f6e <__udivmoddi4+0x296>
 8000f46:	42a3      	cmp	r3, r4
 8000f48:	d911      	bls.n	8000f6e <__udivmoddi4+0x296>
 8000f4a:	3902      	subs	r1, #2
 8000f4c:	4464      	add	r4, ip
 8000f4e:	1ae4      	subs	r4, r4, r3
 8000f50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f54:	e739      	b.n	8000dca <__udivmoddi4+0xf2>
 8000f56:	4604      	mov	r4, r0
 8000f58:	e6f0      	b.n	8000d3c <__udivmoddi4+0x64>
 8000f5a:	4608      	mov	r0, r1
 8000f5c:	e706      	b.n	8000d6c <__udivmoddi4+0x94>
 8000f5e:	45c8      	cmp	r8, r9
 8000f60:	d2ae      	bcs.n	8000ec0 <__udivmoddi4+0x1e8>
 8000f62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f6a:	3801      	subs	r0, #1
 8000f6c:	e7a8      	b.n	8000ec0 <__udivmoddi4+0x1e8>
 8000f6e:	4631      	mov	r1, r6
 8000f70:	e7ed      	b.n	8000f4e <__udivmoddi4+0x276>
 8000f72:	4603      	mov	r3, r0
 8000f74:	e799      	b.n	8000eaa <__udivmoddi4+0x1d2>
 8000f76:	4630      	mov	r0, r6
 8000f78:	e7d4      	b.n	8000f24 <__udivmoddi4+0x24c>
 8000f7a:	46d6      	mov	lr, sl
 8000f7c:	e77f      	b.n	8000e7e <__udivmoddi4+0x1a6>
 8000f7e:	4463      	add	r3, ip
 8000f80:	3802      	subs	r0, #2
 8000f82:	e74d      	b.n	8000e20 <__udivmoddi4+0x148>
 8000f84:	4606      	mov	r6, r0
 8000f86:	4623      	mov	r3, r4
 8000f88:	4608      	mov	r0, r1
 8000f8a:	e70f      	b.n	8000dac <__udivmoddi4+0xd4>
 8000f8c:	3e02      	subs	r6, #2
 8000f8e:	4463      	add	r3, ip
 8000f90:	e730      	b.n	8000df4 <__udivmoddi4+0x11c>
 8000f92:	bf00      	nop

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08a      	sub	sp, #40	@ 0x28
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000fa4:	f007 ff4a 	bl	8008e3c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000fa8:	4b5a      	ldr	r3, [pc, #360]	@ (8001114 <pvPortMallocMicroROS+0x17c>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d101      	bne.n	8000fb4 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000fb0:	f000 f986 	bl	80012c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000fb4:	4b58      	ldr	r3, [pc, #352]	@ (8001118 <pvPortMallocMicroROS+0x180>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	f040 8090 	bne.w	80010e2 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d01e      	beq.n	8001006 <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8000fc8:	2208      	movs	r2, #8
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4413      	add	r3, r2
 8000fce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f003 0307 	and.w	r3, r3, #7
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d015      	beq.n	8001006 <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	f023 0307 	bic.w	r3, r3, #7
 8000fe0:	3308      	adds	r3, #8
 8000fe2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f003 0307 	and.w	r3, r3, #7
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d00b      	beq.n	8001006 <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000ff2:	f383 8811 	msr	BASEPRI, r3
 8000ff6:	f3bf 8f6f 	isb	sy
 8000ffa:	f3bf 8f4f 	dsb	sy
 8000ffe:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001000:	bf00      	nop
 8001002:	bf00      	nop
 8001004:	e7fd      	b.n	8001002 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d06a      	beq.n	80010e2 <pvPortMallocMicroROS+0x14a>
 800100c:	4b43      	ldr	r3, [pc, #268]	@ (800111c <pvPortMallocMicroROS+0x184>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	429a      	cmp	r2, r3
 8001014:	d865      	bhi.n	80010e2 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001016:	4b42      	ldr	r3, [pc, #264]	@ (8001120 <pvPortMallocMicroROS+0x188>)
 8001018:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800101a:	4b41      	ldr	r3, [pc, #260]	@ (8001120 <pvPortMallocMicroROS+0x188>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001020:	e004      	b.n	800102c <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8001022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001024:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800102c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	429a      	cmp	r2, r3
 8001034:	d903      	bls.n	800103e <pvPortMallocMicroROS+0xa6>
 8001036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d1f1      	bne.n	8001022 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800103e:	4b35      	ldr	r3, [pc, #212]	@ (8001114 <pvPortMallocMicroROS+0x17c>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001044:	429a      	cmp	r2, r3
 8001046:	d04c      	beq.n	80010e2 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001048:	6a3b      	ldr	r3, [r7, #32]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2208      	movs	r2, #8
 800104e:	4413      	add	r3, r2
 8001050:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	6a3b      	ldr	r3, [r7, #32]
 8001058:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800105a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800105c:	685a      	ldr	r2, [r3, #4]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	1ad2      	subs	r2, r2, r3
 8001062:	2308      	movs	r3, #8
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	429a      	cmp	r2, r3
 8001068:	d920      	bls.n	80010ac <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800106a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	4413      	add	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	f003 0307 	and.w	r3, r3, #7
 8001078:	2b00      	cmp	r3, #0
 800107a:	d00b      	beq.n	8001094 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 800107c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001080:	f383 8811 	msr	BASEPRI, r3
 8001084:	f3bf 8f6f 	isb	sy
 8001088:	f3bf 8f4f 	dsb	sy
 800108c:	613b      	str	r3, [r7, #16]
}
 800108e:	bf00      	nop
 8001090:	bf00      	nop
 8001092:	e7fd      	b.n	8001090 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001096:	685a      	ldr	r2, [r3, #4]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	1ad2      	subs	r2, r2, r3
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80010a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80010a6:	69b8      	ldr	r0, [r7, #24]
 80010a8:	f000 f96c 	bl	8001384 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80010ac:	4b1b      	ldr	r3, [pc, #108]	@ (800111c <pvPortMallocMicroROS+0x184>)
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	4a19      	ldr	r2, [pc, #100]	@ (800111c <pvPortMallocMicroROS+0x184>)
 80010b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80010ba:	4b18      	ldr	r3, [pc, #96]	@ (800111c <pvPortMallocMicroROS+0x184>)
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	4b19      	ldr	r3, [pc, #100]	@ (8001124 <pvPortMallocMicroROS+0x18c>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	429a      	cmp	r2, r3
 80010c4:	d203      	bcs.n	80010ce <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80010c6:	4b15      	ldr	r3, [pc, #84]	@ (800111c <pvPortMallocMicroROS+0x184>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a16      	ldr	r2, [pc, #88]	@ (8001124 <pvPortMallocMicroROS+0x18c>)
 80010cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80010ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d0:	685a      	ldr	r2, [r3, #4]
 80010d2:	4b11      	ldr	r3, [pc, #68]	@ (8001118 <pvPortMallocMicroROS+0x180>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	431a      	orrs	r2, r3
 80010d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80010dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80010e2:	f007 feb9 	bl	8008e58 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	f003 0307 	and.w	r3, r3, #7
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d00b      	beq.n	8001108 <pvPortMallocMicroROS+0x170>
	__asm volatile
 80010f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80010f4:	f383 8811 	msr	BASEPRI, r3
 80010f8:	f3bf 8f6f 	isb	sy
 80010fc:	f3bf 8f4f 	dsb	sy
 8001100:	60fb      	str	r3, [r7, #12]
}
 8001102:	bf00      	nop
 8001104:	bf00      	nop
 8001106:	e7fd      	b.n	8001104 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8001108:	69fb      	ldr	r3, [r7, #28]
}
 800110a:	4618      	mov	r0, r3
 800110c:	3728      	adds	r7, #40	@ 0x28
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20003eac 	.word	0x20003eac
 8001118:	20003eb8 	.word	0x20003eb8
 800111c:	20003eb0 	.word	0x20003eb0
 8001120:	20003ea4 	.word	0x20003ea4
 8001124:	20003eb4 	.word	0x20003eb4

08001128 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d04a      	beq.n	80011d0 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800113a:	2308      	movs	r3, #8
 800113c:	425b      	negs	r3, r3
 800113e:	697a      	ldr	r2, [r7, #20]
 8001140:	4413      	add	r3, r2
 8001142:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	685a      	ldr	r2, [r3, #4]
 800114c:	4b22      	ldr	r3, [pc, #136]	@ (80011d8 <vPortFreeMicroROS+0xb0>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4013      	ands	r3, r2
 8001152:	2b00      	cmp	r3, #0
 8001154:	d10b      	bne.n	800116e <vPortFreeMicroROS+0x46>
	__asm volatile
 8001156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800115a:	f383 8811 	msr	BASEPRI, r3
 800115e:	f3bf 8f6f 	isb	sy
 8001162:	f3bf 8f4f 	dsb	sy
 8001166:	60fb      	str	r3, [r7, #12]
}
 8001168:	bf00      	nop
 800116a:	bf00      	nop
 800116c:	e7fd      	b.n	800116a <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d00b      	beq.n	800118e <vPortFreeMicroROS+0x66>
	__asm volatile
 8001176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800117a:	f383 8811 	msr	BASEPRI, r3
 800117e:	f3bf 8f6f 	isb	sy
 8001182:	f3bf 8f4f 	dsb	sy
 8001186:	60bb      	str	r3, [r7, #8]
}
 8001188:	bf00      	nop
 800118a:	bf00      	nop
 800118c:	e7fd      	b.n	800118a <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	685a      	ldr	r2, [r3, #4]
 8001192:	4b11      	ldr	r3, [pc, #68]	@ (80011d8 <vPortFreeMicroROS+0xb0>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4013      	ands	r3, r2
 8001198:	2b00      	cmp	r3, #0
 800119a:	d019      	beq.n	80011d0 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d115      	bne.n	80011d0 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	685a      	ldr	r2, [r3, #4]
 80011a8:	4b0b      	ldr	r3, [pc, #44]	@ (80011d8 <vPortFreeMicroROS+0xb0>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	43db      	mvns	r3, r3
 80011ae:	401a      	ands	r2, r3
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80011b4:	f007 fe42 	bl	8008e3c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	685a      	ldr	r2, [r3, #4]
 80011bc:	4b07      	ldr	r3, [pc, #28]	@ (80011dc <vPortFreeMicroROS+0xb4>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4413      	add	r3, r2
 80011c2:	4a06      	ldr	r2, [pc, #24]	@ (80011dc <vPortFreeMicroROS+0xb4>)
 80011c4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80011c6:	6938      	ldr	r0, [r7, #16]
 80011c8:	f000 f8dc 	bl	8001384 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80011cc:	f007 fe44 	bl	8008e58 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80011d0:	bf00      	nop
 80011d2:	3718      	adds	r7, #24
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20003eb8 	.word	0x20003eb8
 80011dc:	20003eb0 	.word	0x20003eb0

080011e0 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 80011e0:	b480      	push	{r7}
 80011e2:	b087      	sub	sp, #28
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 80011ec:	2308      	movs	r3, #8
 80011ee:	425b      	negs	r3, r3
 80011f0:	697a      	ldr	r2, [r7, #20]
 80011f2:	4413      	add	r3, r2
 80011f4:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	685a      	ldr	r2, [r3, #4]
 80011fe:	4b06      	ldr	r3, [pc, #24]	@ (8001218 <getBlockSize+0x38>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	43db      	mvns	r3, r3
 8001204:	4013      	ands	r3, r2
 8001206:	60fb      	str	r3, [r7, #12]

	return count;
 8001208:	68fb      	ldr	r3, [r7, #12]
}
 800120a:	4618      	mov	r0, r3
 800120c:	371c      	adds	r7, #28
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	20003eb8 	.word	0x20003eb8

0800121c <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001226:	f007 fe09 	bl	8008e3c <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 800122a:	6838      	ldr	r0, [r7, #0]
 800122c:	f7ff feb4 	bl	8000f98 <pvPortMallocMicroROS>
 8001230:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d017      	beq.n	8001268 <pvPortReallocMicroROS+0x4c>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d014      	beq.n	8001268 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f7ff ffce 	bl	80011e0 <getBlockSize>
 8001244:	4603      	mov	r3, r0
 8001246:	2208      	movs	r2, #8
 8001248:	1a9b      	subs	r3, r3, r2
 800124a:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 800124c:	683a      	ldr	r2, [r7, #0]
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	429a      	cmp	r2, r3
 8001252:	d201      	bcs.n	8001258 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8001258:	68fa      	ldr	r2, [r7, #12]
 800125a:	6879      	ldr	r1, [r7, #4]
 800125c:	68b8      	ldr	r0, [r7, #8]
 800125e:	f016 fed6 	bl	801800e <memcpy>

		vPortFreeMicroROS(pv);
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f7ff ff60 	bl	8001128 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8001268:	f007 fdf6 	bl	8008e58 <xTaskResumeAll>

	return newmem;
 800126c:	68bb      	ldr	r3, [r7, #8]
}
 800126e:	4618      	mov	r0, r3
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b086      	sub	sp, #24
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
 800127e:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001280:	f007 fddc 	bl	8008e3c <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	fb02 f303 	mul.w	r3, r2, r3
 800128c:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 800128e:	6978      	ldr	r0, [r7, #20]
 8001290:	f7ff fe82 	bl	8000f98 <pvPortMallocMicroROS>
 8001294:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	613b      	str	r3, [r7, #16]

  	while(count--)
 800129a:	e004      	b.n	80012a6 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	1c5a      	adds	r2, r3, #1
 80012a0:	613a      	str	r2, [r7, #16]
 80012a2:	2200      	movs	r2, #0
 80012a4:	701a      	strb	r2, [r3, #0]
  	while(count--)
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	1e5a      	subs	r2, r3, #1
 80012aa:	617a      	str	r2, [r7, #20]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d1f5      	bne.n	800129c <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 80012b0:	f007 fdd2 	bl	8008e58 <xTaskResumeAll>
  	return mem;
 80012b4:	68fb      	ldr	r3, [r7, #12]
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3718      	adds	r7, #24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
	...

080012c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80012c0:	b480      	push	{r7}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80012c6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80012ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80012cc:	4b27      	ldr	r3, [pc, #156]	@ (800136c <prvHeapInit+0xac>)
 80012ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	f003 0307 	and.w	r3, r3, #7
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d00c      	beq.n	80012f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	3307      	adds	r3, #7
 80012de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	f023 0307 	bic.w	r3, r3, #7
 80012e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80012e8:	68ba      	ldr	r2, [r7, #8]
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	4a1f      	ldr	r2, [pc, #124]	@ (800136c <prvHeapInit+0xac>)
 80012f0:	4413      	add	r3, r2
 80012f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80012f8:	4a1d      	ldr	r2, [pc, #116]	@ (8001370 <prvHeapInit+0xb0>)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80012fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001370 <prvHeapInit+0xb0>)
 8001300:	2200      	movs	r2, #0
 8001302:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	68ba      	ldr	r2, [r7, #8]
 8001308:	4413      	add	r3, r2
 800130a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800130c:	2208      	movs	r2, #8
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	1a9b      	subs	r3, r3, r2
 8001312:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	f023 0307 	bic.w	r3, r3, #7
 800131a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	4a15      	ldr	r2, [pc, #84]	@ (8001374 <prvHeapInit+0xb4>)
 8001320:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001322:	4b14      	ldr	r3, [pc, #80]	@ (8001374 <prvHeapInit+0xb4>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2200      	movs	r2, #0
 8001328:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800132a:	4b12      	ldr	r3, [pc, #72]	@ (8001374 <prvHeapInit+0xb4>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	68fa      	ldr	r2, [r7, #12]
 800133a:	1ad2      	subs	r2, r2, r3
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001340:	4b0c      	ldr	r3, [pc, #48]	@ (8001374 <prvHeapInit+0xb4>)
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	4a0a      	ldr	r2, [pc, #40]	@ (8001378 <prvHeapInit+0xb8>)
 800134e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	4a09      	ldr	r2, [pc, #36]	@ (800137c <prvHeapInit+0xbc>)
 8001356:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001358:	4b09      	ldr	r3, [pc, #36]	@ (8001380 <prvHeapInit+0xc0>)
 800135a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800135e:	601a      	str	r2, [r3, #0]
}
 8001360:	bf00      	nop
 8001362:	3714      	adds	r7, #20
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	200002a4 	.word	0x200002a4
 8001370:	20003ea4 	.word	0x20003ea4
 8001374:	20003eac 	.word	0x20003eac
 8001378:	20003eb4 	.word	0x20003eb4
 800137c:	20003eb0 	.word	0x20003eb0
 8001380:	20003eb8 	.word	0x20003eb8

08001384 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001384:	b480      	push	{r7}
 8001386:	b085      	sub	sp, #20
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800138c:	4b28      	ldr	r3, [pc, #160]	@ (8001430 <prvInsertBlockIntoFreeList+0xac>)
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	e002      	b.n	8001398 <prvInsertBlockIntoFreeList+0x14>
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	429a      	cmp	r2, r3
 80013a0:	d8f7      	bhi.n	8001392 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	68ba      	ldr	r2, [r7, #8]
 80013ac:	4413      	add	r3, r2
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d108      	bne.n	80013c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	685a      	ldr	r2, [r3, #4]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	441a      	add	r2, r3
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	68ba      	ldr	r2, [r7, #8]
 80013d0:	441a      	add	r2, r3
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	429a      	cmp	r2, r3
 80013d8:	d118      	bne.n	800140c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	4b15      	ldr	r3, [pc, #84]	@ (8001434 <prvInsertBlockIntoFreeList+0xb0>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d00d      	beq.n	8001402 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	685a      	ldr	r2, [r3, #4]
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	441a      	add	r2, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	e008      	b.n	8001414 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001402:	4b0c      	ldr	r3, [pc, #48]	@ (8001434 <prvInsertBlockIntoFreeList+0xb0>)
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	e003      	b.n	8001414 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001414:	68fa      	ldr	r2, [r7, #12]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	429a      	cmp	r2, r3
 800141a:	d002      	beq.n	8001422 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001422:	bf00      	nop
 8001424:	3714      	adds	r7, #20
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	20003ea4 	.word	0x20003ea4
 8001434:	20003eac 	.word	0x20003eac

08001438 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	607b      	str	r3, [r7, #4]
 8001442:	4b23      	ldr	r3, [pc, #140]	@ (80014d0 <MX_DMA_Init+0x98>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001446:	4a22      	ldr	r2, [pc, #136]	@ (80014d0 <MX_DMA_Init+0x98>)
 8001448:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800144c:	6313      	str	r3, [r2, #48]	@ 0x30
 800144e:	4b20      	ldr	r3, [pc, #128]	@ (80014d0 <MX_DMA_Init+0x98>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001452:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001456:	607b      	str	r3, [r7, #4]
 8001458:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	603b      	str	r3, [r7, #0]
 800145e:	4b1c      	ldr	r3, [pc, #112]	@ (80014d0 <MX_DMA_Init+0x98>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001462:	4a1b      	ldr	r2, [pc, #108]	@ (80014d0 <MX_DMA_Init+0x98>)
 8001464:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001468:	6313      	str	r3, [r2, #48]	@ 0x30
 800146a:	4b19      	ldr	r3, [pc, #100]	@ (80014d0 <MX_DMA_Init+0x98>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001472:	603b      	str	r3, [r7, #0]
 8001474:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001476:	2200      	movs	r2, #0
 8001478:	2105      	movs	r1, #5
 800147a:	200b      	movs	r0, #11
 800147c:	f002 fd00 	bl	8003e80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001480:	200b      	movs	r0, #11
 8001482:	f002 fd19 	bl	8003eb8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001486:	2200      	movs	r2, #0
 8001488:	2105      	movs	r1, #5
 800148a:	2010      	movs	r0, #16
 800148c:	f002 fcf8 	bl	8003e80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001490:	2010      	movs	r0, #16
 8001492:	f002 fd11 	bl	8003eb8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8001496:	2200      	movs	r2, #0
 8001498:	2105      	movs	r1, #5
 800149a:	2039      	movs	r0, #57	@ 0x39
 800149c:	f002 fcf0 	bl	8003e80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80014a0:	2039      	movs	r0, #57	@ 0x39
 80014a2:	f002 fd09 	bl	8003eb8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 80014a6:	2200      	movs	r2, #0
 80014a8:	2105      	movs	r1, #5
 80014aa:	2044      	movs	r0, #68	@ 0x44
 80014ac:	f002 fce8 	bl	8003e80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80014b0:	2044      	movs	r0, #68	@ 0x44
 80014b2:	f002 fd01 	bl	8003eb8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 80014b6:	2200      	movs	r2, #0
 80014b8:	2105      	movs	r1, #5
 80014ba:	2045      	movs	r0, #69	@ 0x45
 80014bc:	f002 fce0 	bl	8003e80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80014c0:	2045      	movs	r0, #69	@ 0x45
 80014c2:	f002 fcf9 	bl	8003eb8 <HAL_NVIC_EnableIRQ>

}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40023800 	.word	0x40023800

080014d4 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80014e2:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 80014e4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80014e8:	4904      	ldr	r1, [pc, #16]	@ (80014fc <cubemx_transport_open+0x28>)
 80014ea:	68f8      	ldr	r0, [r7, #12]
 80014ec:	f005 fd66 	bl	8006fbc <HAL_UART_Receive_DMA>
    return true;
 80014f0:	2301      	movs	r3, #1
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3710      	adds	r7, #16
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	20003ebc 	.word	0x20003ebc

08001500 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800150e:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8001510:	68f8      	ldr	r0, [r7, #12]
 8001512:	f005 fd78 	bl	8007006 <HAL_UART_DMAStop>
    return true;
 8001516:	2301      	movs	r3, #1
}
 8001518:	4618      	mov	r0, r3
 800151a:	3710      	adds	r7, #16
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}

08001520 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8001520:	b580      	push	{r7, lr}
 8001522:	b086      	sub	sp, #24
 8001524:	af00      	add	r7, sp, #0
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	60b9      	str	r1, [r7, #8]
 800152a:	607a      	str	r2, [r7, #4]
 800152c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001534:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800153c:	b2db      	uxtb	r3, r3
 800153e:	2b20      	cmp	r3, #32
 8001540:	d11c      	bne.n	800157c <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	b29b      	uxth	r3, r3
 8001546:	461a      	mov	r2, r3
 8001548:	68b9      	ldr	r1, [r7, #8]
 800154a:	6978      	ldr	r0, [r7, #20]
 800154c:	f005 fcc6 	bl	8006edc <HAL_UART_Transmit_DMA>
 8001550:	4603      	mov	r3, r0
 8001552:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001554:	e002      	b.n	800155c <cubemx_transport_write+0x3c>
            osDelay(1);
 8001556:	2001      	movs	r0, #1
 8001558:	f006 ffa7 	bl	80084aa <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 800155c:	7cfb      	ldrb	r3, [r7, #19]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d105      	bne.n	800156e <cubemx_transport_write+0x4e>
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001568:	b2db      	uxtb	r3, r3
 800156a:	2b20      	cmp	r3, #32
 800156c:	d1f3      	bne.n	8001556 <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 800156e:	7cfb      	ldrb	r3, [r7, #19]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d101      	bne.n	8001578 <cubemx_transport_write+0x58>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	e002      	b.n	800157e <cubemx_transport_write+0x5e>
 8001578:	2300      	movs	r3, #0
 800157a:	e000      	b.n	800157e <cubemx_transport_write+0x5e>
    }else{
        return 0;
 800157c:	2300      	movs	r3, #0
    }
}
 800157e:	4618      	mov	r0, r3
 8001580:	3718      	adds	r7, #24
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
	...

08001588 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8001588:	b580      	push	{r7, lr}
 800158a:	b088      	sub	sp, #32
 800158c:	af00      	add	r7, sp, #0
 800158e:	60f8      	str	r0, [r7, #12]
 8001590:	60b9      	str	r1, [r7, #8]
 8001592:	607a      	str	r2, [r7, #4]
 8001594:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800159c:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 800159e:	2300      	movs	r3, #0
 80015a0:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015a2:	b672      	cpsid	i
}
 80015a4:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80015b2:	4a1c      	ldr	r2, [pc, #112]	@ (8001624 <cubemx_transport_read+0x9c>)
 80015b4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80015b6:	b662      	cpsie	i
}
 80015b8:	bf00      	nop
        __enable_irq();
        ms_used++;
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	3301      	adds	r3, #1
 80015be:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 80015c0:	2001      	movs	r0, #1
 80015c2:	f006 ff72 	bl	80084aa <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 80015c6:	4b18      	ldr	r3, [pc, #96]	@ (8001628 <cubemx_transport_read+0xa0>)
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	4b16      	ldr	r3, [pc, #88]	@ (8001624 <cubemx_transport_read+0x9c>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d103      	bne.n	80015da <cubemx_transport_read+0x52>
 80015d2:	69fa      	ldr	r2, [r7, #28]
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	dbe3      	blt.n	80015a2 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80015da:	2300      	movs	r3, #0
 80015dc:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80015de:	e011      	b.n	8001604 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 80015e0:	4b11      	ldr	r3, [pc, #68]	@ (8001628 <cubemx_transport_read+0xa0>)
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	68b9      	ldr	r1, [r7, #8]
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	440b      	add	r3, r1
 80015ea:	4910      	ldr	r1, [pc, #64]	@ (800162c <cubemx_transport_read+0xa4>)
 80015ec:	5c8a      	ldrb	r2, [r1, r2]
 80015ee:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80015f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001628 <cubemx_transport_read+0xa0>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	3301      	adds	r3, #1
 80015f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015fa:	4a0b      	ldr	r2, [pc, #44]	@ (8001628 <cubemx_transport_read+0xa0>)
 80015fc:	6013      	str	r3, [r2, #0]
        wrote++;
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	3301      	adds	r3, #1
 8001602:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001604:	4b08      	ldr	r3, [pc, #32]	@ (8001628 <cubemx_transport_read+0xa0>)
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	4b06      	ldr	r3, [pc, #24]	@ (8001624 <cubemx_transport_read+0x9c>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	429a      	cmp	r2, r3
 800160e:	d003      	beq.n	8001618 <cubemx_transport_read+0x90>
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	429a      	cmp	r2, r3
 8001616:	d3e3      	bcc.n	80015e0 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8001618:	69bb      	ldr	r3, [r7, #24]
}
 800161a:	4618      	mov	r0, r3
 800161c:	3720      	adds	r7, #32
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	200046c0 	.word	0x200046c0
 8001628:	200046bc 	.word	0x200046bc
 800162c:	20003ebc 	.word	0x20003ebc

08001630 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001630:	b480      	push	{r7}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	4a07      	ldr	r2, [pc, #28]	@ (800165c <vApplicationGetIdleTaskMemory+0x2c>)
 8001640:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	4a06      	ldr	r2, [pc, #24]	@ (8001660 <vApplicationGetIdleTaskMemory+0x30>)
 8001646:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2280      	movs	r2, #128	@ 0x80
 800164c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800164e:	bf00      	nop
 8001650:	3714      	adds	r7, #20
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	20007684 	.word	0x20007684
 8001660:	20007724 	.word	0x20007724

08001664 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001664:	b5b0      	push	{r4, r5, r7, lr}
 8001666:	b0b2      	sub	sp, #200	@ 0xc8
 8001668:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800166a:	4b43      	ldr	r3, [pc, #268]	@ (8001778 <MX_FREERTOS_Init+0x114>)
 800166c:	f107 04ac 	add.w	r4, r7, #172	@ 0xac
 8001670:	461d      	mov	r5, r3
 8001672:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001674:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001676:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800167a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800167e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001682:	2100      	movs	r1, #0
 8001684:	4618      	mov	r0, r3
 8001686:	f006 fec4 	bl	8008412 <osThreadCreate>
 800168a:	4603      	mov	r3, r0
 800168c:	4a3b      	ldr	r2, [pc, #236]	@ (800177c <MX_FREERTOS_Init+0x118>)
 800168e:	6013      	str	r3, [r2, #0]

  /* definition and creation of rfidExecuteTask */
  osThreadDef(rfidExecuteTask, StartRfidExecuteTask, osPriorityNormal, 0, 128);
 8001690:	4b3b      	ldr	r3, [pc, #236]	@ (8001780 <MX_FREERTOS_Init+0x11c>)
 8001692:	f107 0490 	add.w	r4, r7, #144	@ 0x90
 8001696:	461d      	mov	r5, r3
 8001698:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800169a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800169c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  rfidExecuteTaskHandle = osThreadCreate(osThread(rfidExecuteTask), NULL);
 80016a4:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80016a8:	2100      	movs	r1, #0
 80016aa:	4618      	mov	r0, r3
 80016ac:	f006 feb1 	bl	8008412 <osThreadCreate>
 80016b0:	4603      	mov	r3, r0
 80016b2:	4a34      	ldr	r2, [pc, #208]	@ (8001784 <MX_FREERTOS_Init+0x120>)
 80016b4:	6013      	str	r3, [r2, #0]

  /* definition and creation of tagNumTransmitT */
  osThreadDef(tagNumTransmitT, StartTagNumTransmitTask, osPriorityNormal, 0, 128);
 80016b6:	4b34      	ldr	r3, [pc, #208]	@ (8001788 <MX_FREERTOS_Init+0x124>)
 80016b8:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 80016bc:	461d      	mov	r5, r3
 80016be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tagNumTransmitTHandle = osThreadCreate(osThread(tagNumTransmitT), NULL);
 80016ca:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80016ce:	2100      	movs	r1, #0
 80016d0:	4618      	mov	r0, r3
 80016d2:	f006 fe9e 	bl	8008412 <osThreadCreate>
 80016d6:	4603      	mov	r3, r0
 80016d8:	4a2c      	ldr	r2, [pc, #176]	@ (800178c <MX_FREERTOS_Init+0x128>)
 80016da:	6013      	str	r3, [r2, #0]

  /* definition and creation of rc522_read */
  osThreadDef(rc522_read, rc522_readTask, osPriorityNormal, 0, 128);
 80016dc:	4b2c      	ldr	r3, [pc, #176]	@ (8001790 <MX_FREERTOS_Init+0x12c>)
 80016de:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 80016e2:	461d      	mov	r5, r3
 80016e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  rc522_readHandle = osThreadCreate(osThread(rc522_read), NULL);
 80016f0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80016f4:	2100      	movs	r1, #0
 80016f6:	4618      	mov	r0, r3
 80016f8:	f006 fe8b 	bl	8008412 <osThreadCreate>
 80016fc:	4603      	mov	r3, r0
 80016fe:	4a25      	ldr	r2, [pc, #148]	@ (8001794 <MX_FREERTOS_Init+0x130>)
 8001700:	6013      	str	r3, [r2, #0]

  /* definition and creation of motorTask */
  osThreadDef(motorTask, controlmotor, osPriorityLow, 0, 128);
 8001702:	4b25      	ldr	r3, [pc, #148]	@ (8001798 <MX_FREERTOS_Init+0x134>)
 8001704:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8001708:	461d      	mov	r5, r3
 800170a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800170c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800170e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001712:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  motorTaskHandle = osThreadCreate(osThread(motorTask), NULL);
 8001716:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800171a:	2100      	movs	r1, #0
 800171c:	4618      	mov	r0, r3
 800171e:	f006 fe78 	bl	8008412 <osThreadCreate>
 8001722:	4603      	mov	r3, r0
 8001724:	4a1d      	ldr	r2, [pc, #116]	@ (800179c <MX_FREERTOS_Init+0x138>)
 8001726:	6013      	str	r3, [r2, #0]

  /* definition and creation of transmitTask2 */
  osThreadDef(transmitTask2, StarttransmitTask2, osPriorityNormal, 0, 128);
 8001728:	4b1d      	ldr	r3, [pc, #116]	@ (80017a0 <MX_FREERTOS_Init+0x13c>)
 800172a:	f107 0420 	add.w	r4, r7, #32
 800172e:	461d      	mov	r5, r3
 8001730:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001732:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001734:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001738:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  transmitTask2Handle = osThreadCreate(osThread(transmitTask2), NULL);
 800173c:	f107 0320 	add.w	r3, r7, #32
 8001740:	2100      	movs	r1, #0
 8001742:	4618      	mov	r0, r3
 8001744:	f006 fe65 	bl	8008412 <osThreadCreate>
 8001748:	4603      	mov	r3, r0
 800174a:	4a16      	ldr	r2, [pc, #88]	@ (80017a4 <MX_FREERTOS_Init+0x140>)
 800174c:	6013      	str	r3, [r2, #0]

  /* definition and creation of RosTask */
  osThreadStaticDef(RosTask, StartRosTask, osPriorityLow, 0, 3000, RosTaskBuffer, &RosTaskControlBlock);
 800174e:	4b16      	ldr	r3, [pc, #88]	@ (80017a8 <MX_FREERTOS_Init+0x144>)
 8001750:	1d3c      	adds	r4, r7, #4
 8001752:	461d      	mov	r5, r3
 8001754:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001756:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001758:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800175c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  RosTaskHandle = osThreadCreate(osThread(RosTask), NULL);
 8001760:	1d3b      	adds	r3, r7, #4
 8001762:	2100      	movs	r1, #0
 8001764:	4618      	mov	r0, r3
 8001766:	f006 fe54 	bl	8008412 <osThreadCreate>
 800176a:	4603      	mov	r3, r0
 800176c:	4a0f      	ldr	r2, [pc, #60]	@ (80017ac <MX_FREERTOS_Init+0x148>)
 800176e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001770:	bf00      	nop
 8001772:	37c8      	adds	r7, #200	@ 0xc8
 8001774:	46bd      	mov	sp, r7
 8001776:	bdb0      	pop	{r4, r5, r7, pc}
 8001778:	08019d74 	.word	0x08019d74
 800177c:	200046e8 	.word	0x200046e8
 8001780:	08019da0 	.word	0x08019da0
 8001784:	200046ec 	.word	0x200046ec
 8001788:	08019dcc 	.word	0x08019dcc
 800178c:	200046f0 	.word	0x200046f0
 8001790:	08019df4 	.word	0x08019df4
 8001794:	200046f4 	.word	0x200046f4
 8001798:	08019e1c 	.word	0x08019e1c
 800179c:	200046f8 	.word	0x200046f8
 80017a0:	08019e48 	.word	0x08019e48
 80017a4:	200046fc 	.word	0x200046fc
 80017a8:	08019e6c 	.word	0x08019e6c
 80017ac:	20004700 	.word	0x20004700

080017b0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	read_rfid_number();
 80017b8:	f001 fc6a 	bl	8003090 <read_rfid_number>
	read_rfid_number5();
 80017bc:	f001 fd5a 	bl	8003274 <read_rfid_number5>
	read_command();
 80017c0:	f001 fe60 	bl	8003484 <read_command>
    osDelay(1);
 80017c4:	2001      	movs	r0, #1
 80017c6:	f006 fe70 	bl	80084aa <osDelay>
	read_rfid_number();
 80017ca:	bf00      	nop
 80017cc:	e7f4      	b.n	80017b8 <StartDefaultTask+0x8>
	...

080017d0 <StartRfidExecuteTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRfidExecuteTask */
void StartRfidExecuteTask(void const * argument)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRfidExecuteTask */
	  uint8_t read_tag_single_time[] = {0xBB, 0x00, 0x22, 0x00, 0x00, 0x22, 0x7E};
 80017d8:	4a12      	ldr	r2, [pc, #72]	@ (8001824 <StartRfidExecuteTask+0x54>)
 80017da:	f107 0308 	add.w	r3, r7, #8
 80017de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017e2:	6018      	str	r0, [r3, #0]
 80017e4:	3304      	adds	r3, #4
 80017e6:	8019      	strh	r1, [r3, #0]
 80017e8:	3302      	adds	r3, #2
 80017ea:	0c0a      	lsrs	r2, r1, #16
 80017ec:	701a      	strb	r2, [r3, #0]
	  vTaskSuspend(rfidExecuteTaskHandle);
 80017ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001828 <StartRfidExecuteTask+0x58>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f007 f994 	bl	8008b20 <vTaskSuspend>
	  /* Infinite loop */
	  for(;;)
	  {
		HAL_UART_Transmit(&huart1, read_tag_single_time, sizeof(read_tag_single_time), HAL_MAX_DELAY);
 80017f8:	f107 0108 	add.w	r1, r7, #8
 80017fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001800:	2207      	movs	r2, #7
 8001802:	480a      	ldr	r0, [pc, #40]	@ (800182c <StartRfidExecuteTask+0x5c>)
 8001804:	f005 fade 	bl	8006dc4 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart5, read_tag_single_time, sizeof(read_tag_single_time), HAL_MAX_DELAY);
 8001808:	f107 0108 	add.w	r1, r7, #8
 800180c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001810:	2207      	movs	r2, #7
 8001812:	4807      	ldr	r0, [pc, #28]	@ (8001830 <StartRfidExecuteTask+0x60>)
 8001814:	f005 fad6 	bl	8006dc4 <HAL_UART_Transmit>
		//vTaskResume(defaultTaskHandle);
	    osDelay(300);
 8001818:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800181c:	f006 fe45 	bl	80084aa <osDelay>
		HAL_UART_Transmit(&huart1, read_tag_single_time, sizeof(read_tag_single_time), HAL_MAX_DELAY);
 8001820:	bf00      	nop
 8001822:	e7e9      	b.n	80017f8 <StartRfidExecuteTask+0x28>
 8001824:	08019e88 	.word	0x08019e88
 8001828:	200046ec 	.word	0x200046ec
 800182c:	20008730 	.word	0x20008730
 8001830:	200086e8 	.word	0x200086e8

08001834 <StartTagNumTransmitTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTagNumTransmitTask */
void StartTagNumTransmitTask(void const * argument)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b088      	sub	sp, #32
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  osEvent event;
  osEvent event2;
  for(;;)
  {
	event = osSignalWait(transmitSignal, 100);
 800183c:	f107 0314 	add.w	r3, r7, #20
 8001840:	2264      	movs	r2, #100	@ 0x64
 8001842:	2101      	movs	r1, #1
 8001844:	4618      	mov	r0, r3
 8001846:	f006 fe85 	bl	8008554 <osSignalWait>
	if(event.value.signals == transmitSignal){
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	2b01      	cmp	r3, #1
 800184e:	d101      	bne.n	8001854 <StartTagNumTransmitTask+0x20>
		transmitData();
 8001850:	f001 fc78 	bl	8003144 <transmitData>
		}
	event2 = osSignalWait(transmitSignal5, 100);
 8001854:	f107 0308 	add.w	r3, r7, #8
 8001858:	2264      	movs	r2, #100	@ 0x64
 800185a:	2105      	movs	r1, #5
 800185c:	4618      	mov	r0, r3
 800185e:	f006 fe79 	bl	8008554 <osSignalWait>
	if(event.value.signals == transmitSignal5){
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	2b05      	cmp	r3, #5
 8001866:	d101      	bne.n	800186c <StartTagNumTransmitTask+0x38>
		transmitData5();
 8001868:	f001 fd5e 	bl	8003328 <transmitData5>
	}
	osDelay(1);
 800186c:	2001      	movs	r0, #1
 800186e:	f006 fe1c 	bl	80084aa <osDelay>
	event = osSignalWait(transmitSignal, 100);
 8001872:	e7e3      	b.n	800183c <StartTagNumTransmitTask+0x8>

08001874 <rc522_readTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_rc522_readTask */
void rc522_readTask(void const * argument)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b088      	sub	sp, #32
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN rc522_readTask */
  uint8_t status,cardstr[16] = {0,};
 800187c:	2300      	movs	r3, #0
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	f107 0310 	add.w	r3, r7, #16
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	609a      	str	r2, [r3, #8]

  /* Infinite loop */
  for(;;)
  {

	if(MFRC522_Request(PICC_REQIDL, cardstr) == MI_OK){
 800188c:	f107 030c 	add.w	r3, r7, #12
 8001890:	4619      	mov	r1, r3
 8001892:	2026      	movs	r0, #38	@ 0x26
 8001894:	f000 ff21 	bl	80026da <MFRC522_Request>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d111      	bne.n	80018c2 <rc522_readTask+0x4e>
		status = MFRC522_Anticoll(cardstr);
 800189e:	f107 030c 	add.w	r3, r7, #12
 80018a2:	4618      	mov	r0, r3
 80018a4:	f000 ff3e 	bl	8002724 <MFRC522_Anticoll>
 80018a8:	4603      	mov	r3, r0
 80018aa:	77fb      	strb	r3, [r7, #31]
		if(status == MI_OK){
 80018ac:	7ffb      	ldrb	r3, [r7, #31]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d107      	bne.n	80018c2 <rc522_readTask+0x4e>
			HAL_UART_Transmit(&huart2, cardstr, 5, 500);
 80018b2:	f107 010c 	add.w	r1, r7, #12
 80018b6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80018ba:	2205      	movs	r2, #5
 80018bc:	4803      	ldr	r0, [pc, #12]	@ (80018cc <rc522_readTask+0x58>)
 80018be:	f005 fa81 	bl	8006dc4 <HAL_UART_Transmit>
		}
	}
	osDelay(300);
 80018c2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80018c6:	f006 fdf0 	bl	80084aa <osDelay>
	if(MFRC522_Request(PICC_REQIDL, cardstr) == MI_OK){
 80018ca:	e7df      	b.n	800188c <rc522_readTask+0x18>
 80018cc:	20008778 	.word	0x20008778

080018d0 <controlmotor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_controlmotor */
void controlmotor(void const * argument)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN controlmotor */
  /* Infinite loop */
	vTaskSuspend(motorTaskHandle);
 80018d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001904 <controlmotor+0x34>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4618      	mov	r0, r3
 80018de:	f007 f91f 	bl	8008b20 <vTaskSuspend>
  /* Infinite loop */
  for(;;)
  {
	  if(motor_status == 0){
 80018e2:	4b09      	ldr	r3, [pc, #36]	@ (8001908 <controlmotor+0x38>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d102      	bne.n	80018f0 <controlmotor+0x20>
		  scan_motor_up();
 80018ea:	f000 ff59 	bl	80027a0 <scan_motor_up>
 80018ee:	e005      	b.n	80018fc <controlmotor+0x2c>
	  }else if(motor_status == 1){
 80018f0:	4b05      	ldr	r3, [pc, #20]	@ (8001908 <controlmotor+0x38>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d101      	bne.n	80018fc <controlmotor+0x2c>
		  scan_motor_down();
 80018f8:	f000 ff82 	bl	8002800 <scan_motor_down>
	  }
	  osDelay(100);
 80018fc:	2064      	movs	r0, #100	@ 0x64
 80018fe:	f006 fdd4 	bl	80084aa <osDelay>
	  if(motor_status == 0){
 8001902:	e7ee      	b.n	80018e2 <controlmotor+0x12>
 8001904:	200046f8 	.word	0x200046f8
 8001908:	200046e4 	.word	0x200046e4

0800190c <StarttransmitTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StarttransmitTask2 */
void StarttransmitTask2(void const * argument)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StarttransmitTask2 */
	osEvent event;
  /* Infinite loop */
	  for(;;)
	  {
		  event = osSignalWait(transmitSignal2, 100);
 8001914:	f107 030c 	add.w	r3, r7, #12
 8001918:	2264      	movs	r2, #100	@ 0x64
 800191a:	2102      	movs	r1, #2
 800191c:	4618      	mov	r0, r3
 800191e:	f006 fe19 	bl	8008554 <osSignalWait>
		  if(event.value.signals == transmitSignal2){
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	2b02      	cmp	r3, #2
 8001926:	d101      	bne.n	800192c <StarttransmitTask2+0x20>
			  transmitCommand();
 8001928:	f001 fdde 	bl	80034e8 <transmitCommand>
		  }
		  osDelay(1);
 800192c:	2001      	movs	r0, #1
 800192e:	f006 fdbc 	bl	80084aa <osDelay>
		  event = osSignalWait(transmitSignal2, 100);
 8001932:	e7ef      	b.n	8001914 <StarttransmitTask2+0x8>

08001934 <subscription_str_callback>:
#define ARRAY_LEN 200
#define RCCHECK(fn) { rcl_ret_t temp_rc = fn; if((temp_rc != RCL_RET_OK)){printf("Failed status on line %d: %d. Aborting.\n",__LINE__,(int)temp_rc); return 1;}}
#define RCSOFTCHECK(fn) { rcl_ret_t temp_rc = fn; if((temp_rc != RCL_RET_OK)){printf("Failed status on line %d: %d. Continuing.\n",__LINE__,(int)temp_rc);}}

void subscription_str_callback(const void * msgin)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b09c      	sub	sp, #112	@ 0x70
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  std_msgs__msg__String * msg = (std_msgs__msg__String *)msgin;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  pub_str_msg = *msg;
 8001940:	4b1e      	ldr	r3, [pc, #120]	@ (80019bc <subscription_str_callback+0x88>)
 8001942:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001944:	ca07      	ldmia	r2, {r0, r1, r2}
 8001946:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  char str[100];
  strcpy(str, msg->data.data);
 800194a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	f107 0308 	add.w	r3, r7, #8
 8001952:	4611      	mov	r1, r2
 8001954:	4618      	mov	r0, r3
 8001956:	f016 fb52 	bl	8017ffe <strcpy>
  if(!strcmp(str,"scan")){
 800195a:	f107 0308 	add.w	r3, r7, #8
 800195e:	4918      	ldr	r1, [pc, #96]	@ (80019c0 <subscription_str_callback+0x8c>)
 8001960:	4618      	mov	r0, r3
 8001962:	f7fe fc55 	bl	8000210 <strcmp>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d112      	bne.n	8001992 <subscription_str_callback+0x5e>
	  sprintf(pub_str_msg.data.data, "launch", str);
 800196c:	4b13      	ldr	r3, [pc, #76]	@ (80019bc <subscription_str_callback+0x88>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f107 0208 	add.w	r2, r7, #8
 8001974:	4913      	ldr	r1, [pc, #76]	@ (80019c4 <subscription_str_callback+0x90>)
 8001976:	4618      	mov	r0, r3
 8001978:	f016 f8cc 	bl	8017b14 <siprintf>
	  vTaskResume(motorTaskHandle);
 800197c:	4b12      	ldr	r3, [pc, #72]	@ (80019c8 <subscription_str_callback+0x94>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4618      	mov	r0, r3
 8001982:	f007 f993 	bl	8008cac <vTaskResume>
	  vTaskResume(rfidExecuteTaskHandle);
 8001986:	4b11      	ldr	r3, [pc, #68]	@ (80019cc <subscription_str_callback+0x98>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4618      	mov	r0, r3
 800198c:	f007 f98e 	bl	8008cac <vTaskResume>
 8001990:	e007      	b.n	80019a2 <subscription_str_callback+0x6e>
  }else{
	  sprintf(pub_str_msg.data.data, "F446RE heard: %s", str);
 8001992:	4b0a      	ldr	r3, [pc, #40]	@ (80019bc <subscription_str_callback+0x88>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f107 0208 	add.w	r2, r7, #8
 800199a:	490d      	ldr	r1, [pc, #52]	@ (80019d0 <subscription_str_callback+0x9c>)
 800199c:	4618      	mov	r0, r3
 800199e:	f016 f8b9 	bl	8017b14 <siprintf>
  }
  //sprintf(pub_str_msg.data.data, "F446RE heard: %s", str);
  pub_str_msg.data.size = strlen(pub_str_msg.data.data);
 80019a2:	4b06      	ldr	r3, [pc, #24]	@ (80019bc <subscription_str_callback+0x88>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7fe fc92 	bl	80002d0 <strlen>
 80019ac:	4603      	mov	r3, r0
 80019ae:	4a03      	ldr	r2, [pc, #12]	@ (80019bc <subscription_str_callback+0x88>)
 80019b0:	6053      	str	r3, [r2, #4]
  //rcl_publish(&publisher_string_scan, &pub_str_msg, NULL);
  //Publisher_state();
  //debug_led();
}
 80019b2:	bf00      	nop
 80019b4:	3770      	adds	r7, #112	@ 0x70
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	200046cc 	.word	0x200046cc
 80019c0:	08019e90 	.word	0x08019e90
 80019c4:	08019e98 	.word	0x08019e98
 80019c8:	200046f8 	.word	0x200046f8
 80019cc:	200046ec 	.word	0x200046ec
 80019d0:	08019ea0 	.word	0x08019ea0

080019d4 <StartRosTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRosTask */
void StartRosTask(void const * argument)
{
 80019d4:	b5b0      	push	{r4, r5, r7, lr}
 80019d6:	f5ad 7d56 	sub.w	sp, sp, #856	@ 0x358
 80019da:	af02      	add	r7, sp, #8
 80019dc:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 80019e0:	f5a3 734d 	sub.w	r3, r3, #820	@ 0x334
 80019e4:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartRosTask */
	  // micro-ROS configuration
	  char test_array[ARRAY_LEN];
	  memset(test_array,'z',ARRAY_LEN);
 80019e6:	f507 7317 	add.w	r3, r7, #604	@ 0x25c
 80019ea:	22c8      	movs	r2, #200	@ 0xc8
 80019ec:	217a      	movs	r1, #122	@ 0x7a
 80019ee:	4618      	mov	r0, r3
 80019f0:	f016 f9ea 	bl	8017dc8 <memset>

	  rmw_uros_set_custom_transport(
 80019f4:	4bcb      	ldr	r3, [pc, #812]	@ (8001d24 <StartRosTask+0x350>)
 80019f6:	9301      	str	r3, [sp, #4]
 80019f8:	4bcb      	ldr	r3, [pc, #812]	@ (8001d28 <StartRosTask+0x354>)
 80019fa:	9300      	str	r3, [sp, #0]
 80019fc:	4bcb      	ldr	r3, [pc, #812]	@ (8001d2c <StartRosTask+0x358>)
 80019fe:	4acc      	ldr	r2, [pc, #816]	@ (8001d30 <StartRosTask+0x35c>)
 8001a00:	49cc      	ldr	r1, [pc, #816]	@ (8001d34 <StartRosTask+0x360>)
 8001a02:	2001      	movs	r0, #1
 8001a04:	f00a fa8a 	bl	800bf1c <rmw_uros_set_custom_transport>
	    cubemx_transport_open,
	    cubemx_transport_close,
	    cubemx_transport_write,
	    cubemx_transport_read);

	  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001a08:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 8001a0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001a10:	4618      	mov	r0, r3
 8001a12:	f009 ff53 	bl	800b8bc <rcutils_get_zero_initialized_allocator>
	  freeRTOS_allocator.allocate = microros_allocate;
 8001a16:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 8001a1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001a1e:	4ac6      	ldr	r2, [pc, #792]	@ (8001d38 <StartRosTask+0x364>)
 8001a20:	601a      	str	r2, [r3, #0]
	  freeRTOS_allocator.deallocate = microros_deallocate;
 8001a22:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 8001a26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001a2a:	4ac4      	ldr	r2, [pc, #784]	@ (8001d3c <StartRosTask+0x368>)
 8001a2c:	605a      	str	r2, [r3, #4]
	  freeRTOS_allocator.reallocate = microros_reallocate;
 8001a2e:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 8001a32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001a36:	4ac2      	ldr	r2, [pc, #776]	@ (8001d40 <StartRosTask+0x36c>)
 8001a38:	609a      	str	r2, [r3, #8]
	  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8001a3a:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 8001a3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001a42:	4ac0      	ldr	r2, [pc, #768]	@ (8001d44 <StartRosTask+0x370>)
 8001a44:	60da      	str	r2, [r3, #12]

	  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8001a46:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f009 ff44 	bl	800b8d8 <rcutils_set_default_allocator>
 8001a50:	4603      	mov	r3, r0
 8001a52:	f083 0301 	eor.w	r3, r3, #1
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d004      	beq.n	8001a66 <StartRosTask+0x92>
	    printf("Error on default allocators (line %d)\n", __LINE__);
 8001a5c:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8001a60:	48b9      	ldr	r0, [pc, #740]	@ (8001d48 <StartRosTask+0x374>)
 8001a62:	f016 f811 	bl	8017a88 <iprintf>
	  sensor_msgs__msg__Imu sub_imu_msg;
	  rclc_support_t support;
	  rcl_allocator_t allocator;
	  rcl_node_t node;

	  allocator = rcl_get_default_allocator();
 8001a66:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 8001a6a:	f5a3 7428 	sub.w	r4, r3, #672	@ 0x2a0
 8001a6e:	463b      	mov	r3, r7
 8001a70:	4618      	mov	r0, r3
 8001a72:	f009 ff4f 	bl	800b914 <rcutils_get_default_allocator>
 8001a76:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 8001a7a:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8001a7e:	461d      	mov	r5, r3
 8001a80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a84:	682b      	ldr	r3, [r5, #0]
 8001a86:	6023      	str	r3, [r4, #0]

	  // create init_options
	  RCCHECK(rclc_support_init(&support, 0, NULL, &allocator));
 8001a88:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8001a8c:	f107 00c4 	add.w	r0, r7, #196	@ 0xc4
 8001a90:	2200      	movs	r2, #0
 8001a92:	2100      	movs	r1, #0
 8001a94:	f009 fe1c 	bl	800b6d0 <rclc_support_init>
 8001a98:	f8c7 034c 	str.w	r0, [r7, #844]	@ 0x34c
 8001a9c:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d007      	beq.n	8001ab4 <StartRosTask+0xe0>
 8001aa4:	f8d7 234c 	ldr.w	r2, [r7, #844]	@ 0x34c
 8001aa8:	f240 11a1 	movw	r1, #417	@ 0x1a1
 8001aac:	48a7      	ldr	r0, [pc, #668]	@ (8001d4c <StartRosTask+0x378>)
 8001aae:	f015 ffeb 	bl	8017a88 <iprintf>
 8001ab2:	e132      	b.n	8001d1a <StartRosTask+0x346>

	  // create node
	  RCCHECK(rclc_node_init_default(&node, "f446re_node", "", &support));
 8001ab4:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8001ab8:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 8001abc:	4aa4      	ldr	r2, [pc, #656]	@ (8001d50 <StartRosTask+0x37c>)
 8001abe:	49a5      	ldr	r1, [pc, #660]	@ (8001d54 <StartRosTask+0x380>)
 8001ac0:	f009 fe50 	bl	800b764 <rclc_node_init_default>
 8001ac4:	f8c7 0348 	str.w	r0, [r7, #840]	@ 0x348
 8001ac8:	f8d7 3348 	ldr.w	r3, [r7, #840]	@ 0x348
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d007      	beq.n	8001ae0 <StartRosTask+0x10c>
 8001ad0:	f8d7 2348 	ldr.w	r2, [r7, #840]	@ 0x348
 8001ad4:	f44f 71d2 	mov.w	r1, #420	@ 0x1a4
 8001ad8:	489c      	ldr	r0, [pc, #624]	@ (8001d4c <StartRosTask+0x378>)
 8001ada:	f015 ffd5 	bl	8017a88 <iprintf>
 8001ade:	e11c      	b.n	8001d1a <StartRosTask+0x346>

	  // create publisher
	  RCCHECK(rclc_publisher_init_best_effort(
 8001ae0:	f00b fa46 	bl	800cf70 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 8001aea:	4b9b      	ldr	r3, [pc, #620]	@ (8001d58 <StartRosTask+0x384>)
 8001aec:	489b      	ldr	r0, [pc, #620]	@ (8001d5c <StartRosTask+0x388>)
 8001aee:	f009 fe75 	bl	800b7dc <rclc_publisher_init_best_effort>
 8001af2:	f8c7 0344 	str.w	r0, [r7, #836]	@ 0x344
 8001af6:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d007      	beq.n	8001b0e <StartRosTask+0x13a>
 8001afe:	f8d7 2344 	ldr.w	r2, [r7, #836]	@ 0x344
 8001b02:	f240 11a7 	movw	r1, #423	@ 0x1a7
 8001b06:	4891      	ldr	r0, [pc, #580]	@ (8001d4c <StartRosTask+0x378>)
 8001b08:	f015 ffbe 	bl	8017a88 <iprintf>
 8001b0c:	e105      	b.n	8001d1a <StartRosTask+0x346>
	    &publisher_string_scan,
	    &node,
	    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, String),
	    "/f446re_scan_status"));

	  RCCHECK(rclc_publisher_init_best_effort(
 8001b0e:	f00b fa2f 	bl	800cf70 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>
 8001b12:	4602      	mov	r2, r0
 8001b14:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 8001b18:	4b91      	ldr	r3, [pc, #580]	@ (8001d60 <StartRosTask+0x38c>)
 8001b1a:	4892      	ldr	r0, [pc, #584]	@ (8001d64 <StartRosTask+0x390>)
 8001b1c:	f009 fe5e 	bl	800b7dc <rclc_publisher_init_best_effort>
 8001b20:	f8c7 0340 	str.w	r0, [r7, #832]	@ 0x340
 8001b24:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d007      	beq.n	8001b3c <StartRosTask+0x168>
 8001b2c:	f8d7 2340 	ldr.w	r2, [r7, #832]	@ 0x340
 8001b30:	f240 11ad 	movw	r1, #429	@ 0x1ad
 8001b34:	4885      	ldr	r0, [pc, #532]	@ (8001d4c <StartRosTask+0x378>)
 8001b36:	f015 ffa7 	bl	8017a88 <iprintf>
 8001b3a:	e0ee      	b.n	8001d1a <StartRosTask+0x346>
	    &node,
	    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, String),
	    "/f446re_nav_pos"));

	  // create subscriber
	  RCCHECK(rclc_subscription_init_default(
 8001b3c:	f00b fa18 	bl	800cf70 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>
 8001b40:	4602      	mov	r2, r0
 8001b42:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 8001b46:	f507 7011 	add.w	r0, r7, #580	@ 0x244
 8001b4a:	4b87      	ldr	r3, [pc, #540]	@ (8001d68 <StartRosTask+0x394>)
 8001b4c:	f009 fe7a 	bl	800b844 <rclc_subscription_init_default>
 8001b50:	f8c7 033c 	str.w	r0, [r7, #828]	@ 0x33c
 8001b54:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d007      	beq.n	8001b6c <StartRosTask+0x198>
 8001b5c:	f8d7 233c 	ldr.w	r2, [r7, #828]	@ 0x33c
 8001b60:	f44f 71da 	mov.w	r1, #436	@ 0x1b4
 8001b64:	4879      	ldr	r0, [pc, #484]	@ (8001d4c <StartRosTask+0x378>)
 8001b66:	f015 ff8f 	bl	8017a88 <iprintf>
 8001b6a:	e0d6      	b.n	8001d1a <StartRosTask+0x346>
	    &node,
	    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, String),
	    "/f446re_scan_oper"));

	  // create executor
	  rclc_executor_t executor = rclc_executor_get_zero_initialized_executor();
 8001b6c:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 8001b70:	f5a3 734c 	sub.w	r3, r3, #816	@ 0x330
 8001b74:	4618      	mov	r0, r3
 8001b76:	f009 fad1 	bl	800b11c <rclc_executor_get_zero_initialized_executor>
	  RCCHECK(rclc_executor_init(&executor, &support.context, 2, &allocator));
 8001b7a:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8001b7e:	f107 01c4 	add.w	r1, r7, #196	@ 0xc4
 8001b82:	f107 0020 	add.w	r0, r7, #32
 8001b86:	2202      	movs	r2, #2
 8001b88:	f009 fad2 	bl	800b130 <rclc_executor_init>
 8001b8c:	f8c7 0338 	str.w	r0, [r7, #824]	@ 0x338
 8001b90:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d007      	beq.n	8001ba8 <StartRosTask+0x1d4>
 8001b98:	f8d7 2338 	ldr.w	r2, [r7, #824]	@ 0x338
 8001b9c:	f44f 71de 	mov.w	r1, #444	@ 0x1bc
 8001ba0:	486a      	ldr	r0, [pc, #424]	@ (8001d4c <StartRosTask+0x378>)
 8001ba2:	f015 ff71 	bl	8017a88 <iprintf>
 8001ba6:	e0b8      	b.n	8001d1a <StartRosTask+0x346>
	  RCCHECK(rclc_executor_add_subscription(&executor, &subscriber_oper, &sub_str_msg, &subscription_str_callback, ON_NEW_DATA));
 8001ba8:	f507 720e 	add.w	r2, r7, #568	@ 0x238
 8001bac:	f507 7111 	add.w	r1, r7, #580	@ 0x244
 8001bb0:	f107 0020 	add.w	r0, r7, #32
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	9300      	str	r3, [sp, #0]
 8001bb8:	4b6c      	ldr	r3, [pc, #432]	@ (8001d6c <StartRosTask+0x398>)
 8001bba:	f009 fb29 	bl	800b210 <rclc_executor_add_subscription>
 8001bbe:	f8c7 0334 	str.w	r0, [r7, #820]	@ 0x334
 8001bc2:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d007      	beq.n	8001bda <StartRosTask+0x206>
 8001bca:	f8d7 2334 	ldr.w	r2, [r7, #820]	@ 0x334
 8001bce:	f240 11bd 	movw	r1, #445	@ 0x1bd
 8001bd2:	485e      	ldr	r0, [pc, #376]	@ (8001d4c <StartRosTask+0x378>)
 8001bd4:	f015 ff58 	bl	8017a88 <iprintf>
 8001bd8:	e09f      	b.n	8001d1a <StartRosTask+0x346>

	  // initialize message memory
	  pub_str_msg.data.data = (char * ) malloc(ARRAY_LEN * sizeof(char));
 8001bda:	20c8      	movs	r0, #200	@ 0xc8
 8001bdc:	f015 f808 	bl	8016bf0 <malloc>
 8001be0:	4603      	mov	r3, r0
 8001be2:	461a      	mov	r2, r3
 8001be4:	4b62      	ldr	r3, [pc, #392]	@ (8001d70 <StartRosTask+0x39c>)
 8001be6:	601a      	str	r2, [r3, #0]
	  pub_str_msg.data.size = 0;
 8001be8:	4b61      	ldr	r3, [pc, #388]	@ (8001d70 <StartRosTask+0x39c>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	605a      	str	r2, [r3, #4]
	  pub_str_msg.data.capacity = ARRAY_LEN;
 8001bee:	4b60      	ldr	r3, [pc, #384]	@ (8001d70 <StartRosTask+0x39c>)
 8001bf0:	22c8      	movs	r2, #200	@ 0xc8
 8001bf2:	609a      	str	r2, [r3, #8]

	  pub_str_pos.data.data = (char * ) malloc(ARRAY_LEN * sizeof(char));
 8001bf4:	20c8      	movs	r0, #200	@ 0xc8
 8001bf6:	f014 fffb 	bl	8016bf0 <malloc>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	4b5d      	ldr	r3, [pc, #372]	@ (8001d74 <StartRosTask+0x3a0>)
 8001c00:	601a      	str	r2, [r3, #0]
	  pub_str_pos.data.size = 0;
 8001c02:	4b5c      	ldr	r3, [pc, #368]	@ (8001d74 <StartRosTask+0x3a0>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	605a      	str	r2, [r3, #4]
	  pub_str_pos.data.capacity = ARRAY_LEN;
 8001c08:	4b5a      	ldr	r3, [pc, #360]	@ (8001d74 <StartRosTask+0x3a0>)
 8001c0a:	22c8      	movs	r2, #200	@ 0xc8
 8001c0c:	609a      	str	r2, [r3, #8]

	  sub_str_msg.data.data = (char * ) malloc(ARRAY_LEN * sizeof(char));
 8001c0e:	20c8      	movs	r0, #200	@ 0xc8
 8001c10:	f014 ffee 	bl	8016bf0 <malloc>
 8001c14:	4603      	mov	r3, r0
 8001c16:	461a      	mov	r2, r3
 8001c18:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 8001c1c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001c20:	601a      	str	r2, [r3, #0]
	  sub_str_msg.data.size = 0;
 8001c22:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 8001c26:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	605a      	str	r2, [r3, #4]
	  sub_str_msg.data.capacity = ARRAY_LEN;
 8001c2e:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 8001c32:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001c36:	22c8      	movs	r2, #200	@ 0xc8
 8001c38:	609a      	str	r2, [r3, #8]

	  sub_imu_msg.header.frame_id.capacity = 100;
 8001c3a:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 8001c3e:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8001c42:	2264      	movs	r2, #100	@ 0x64
 8001c44:	611a      	str	r2, [r3, #16]
	  sub_imu_msg.header.frame_id.data =(char * ) malloc(100 * sizeof(char));
 8001c46:	2064      	movs	r0, #100	@ 0x64
 8001c48:	f014 ffd2 	bl	8016bf0 <malloc>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	461a      	mov	r2, r3
 8001c50:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 8001c54:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8001c58:	609a      	str	r2, [r3, #8]
	  sub_imu_msg.header.frame_id.size = 0;
 8001c5a:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 8001c5e:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8001c62:	2200      	movs	r2, #0
 8001c64:	60da      	str	r2, [r3, #12]

	  // execute subscriber
	  rclc_executor_spin(&executor);
 8001c66:	f107 0320 	add.w	r3, r7, #32
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f009 fcf0 	bl	800b650 <rclc_executor_spin>
	  // cleaning Up
	  RCCHECK(rcl_publisher_fini(&publisher_string_scan, &node));
 8001c70:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8001c74:	4619      	mov	r1, r3
 8001c76:	4839      	ldr	r0, [pc, #228]	@ (8001d5c <StartRosTask+0x388>)
 8001c78:	f008 fcd0 	bl	800a61c <rcl_publisher_fini>
 8001c7c:	f8c7 0330 	str.w	r0, [r7, #816]	@ 0x330
 8001c80:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d007      	beq.n	8001c98 <StartRosTask+0x2c4>
 8001c88:	f8d7 2330 	ldr.w	r2, [r7, #816]	@ 0x330
 8001c8c:	f240 11d3 	movw	r1, #467	@ 0x1d3
 8001c90:	482e      	ldr	r0, [pc, #184]	@ (8001d4c <StartRosTask+0x378>)
 8001c92:	f015 fef9 	bl	8017a88 <iprintf>
 8001c96:	e040      	b.n	8001d1a <StartRosTask+0x346>
	  RCCHECK(rcl_publisher_fini(&publisher_string_pos, &node));
 8001c98:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4831      	ldr	r0, [pc, #196]	@ (8001d64 <StartRosTask+0x390>)
 8001ca0:	f008 fcbc 	bl	800a61c <rcl_publisher_fini>
 8001ca4:	f8c7 032c 	str.w	r0, [r7, #812]	@ 0x32c
 8001ca8:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d007      	beq.n	8001cc0 <StartRosTask+0x2ec>
 8001cb0:	f8d7 232c 	ldr.w	r2, [r7, #812]	@ 0x32c
 8001cb4:	f44f 71ea 	mov.w	r1, #468	@ 0x1d4
 8001cb8:	4824      	ldr	r0, [pc, #144]	@ (8001d4c <StartRosTask+0x378>)
 8001cba:	f015 fee5 	bl	8017a88 <iprintf>
 8001cbe:	e02c      	b.n	8001d1a <StartRosTask+0x346>
	  RCCHECK(rcl_subscription_fini(&subscriber_oper, &node));
 8001cc0:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 8001cc4:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 8001cc8:	4611      	mov	r1, r2
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f008 fdf4 	bl	800a8b8 <rcl_subscription_fini>
 8001cd0:	f8c7 0328 	str.w	r0, [r7, #808]	@ 0x328
 8001cd4:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d007      	beq.n	8001cec <StartRosTask+0x318>
 8001cdc:	f8d7 2328 	ldr.w	r2, [r7, #808]	@ 0x328
 8001ce0:	f240 11d5 	movw	r1, #469	@ 0x1d5
 8001ce4:	4819      	ldr	r0, [pc, #100]	@ (8001d4c <StartRosTask+0x378>)
 8001ce6:	f015 fecf 	bl	8017a88 <iprintf>
 8001cea:	e016      	b.n	8001d1a <StartRosTask+0x346>
	  RCCHECK(rcl_node_fini(&node));
 8001cec:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f008 fb71 	bl	800a3d8 <rcl_node_fini>
 8001cf6:	f8c7 0324 	str.w	r0, [r7, #804]	@ 0x324
 8001cfa:	f8d7 3324 	ldr.w	r3, [r7, #804]	@ 0x324
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d007      	beq.n	8001d12 <StartRosTask+0x33e>
 8001d02:	f8d7 2324 	ldr.w	r2, [r7, #804]	@ 0x324
 8001d06:	f44f 71eb 	mov.w	r1, #470	@ 0x1d6
 8001d0a:	4810      	ldr	r0, [pc, #64]	@ (8001d4c <StartRosTask+0x378>)
 8001d0c:	f015 febc 	bl	8017a88 <iprintf>
 8001d10:	e003      	b.n	8001d1a <StartRosTask+0x346>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001d12:	2001      	movs	r0, #1
 8001d14:	f006 fbc9 	bl	80084aa <osDelay>
 8001d18:	e7fb      	b.n	8001d12 <StartRosTask+0x33e>
  }
  /* USER CODE END StartRosTask */
}
 8001d1a:	f507 7754 	add.w	r7, r7, #848	@ 0x350
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bdb0      	pop	{r4, r5, r7, pc}
 8001d22:	bf00      	nop
 8001d24:	08001589 	.word	0x08001589
 8001d28:	08001521 	.word	0x08001521
 8001d2c:	08001501 	.word	0x08001501
 8001d30:	080014d5 	.word	0x080014d5
 8001d34:	20008808 	.word	0x20008808
 8001d38:	080020c1 	.word	0x080020c1
 8001d3c:	08002105 	.word	0x08002105
 8001d40:	0800213d 	.word	0x0800213d
 8001d44:	080021a9 	.word	0x080021a9
 8001d48:	08019eb4 	.word	0x08019eb4
 8001d4c:	08019edc 	.word	0x08019edc
 8001d50:	08019f08 	.word	0x08019f08
 8001d54:	08019f0c 	.word	0x08019f0c
 8001d58:	08019f18 	.word	0x08019f18
 8001d5c:	200046c4 	.word	0x200046c4
 8001d60:	08019f2c 	.word	0x08019f2c
 8001d64:	200046c8 	.word	0x200046c8
 8001d68:	08019f3c 	.word	0x08019f3c
 8001d6c:	08001935 	.word	0x08001935
 8001d70:	200046cc 	.word	0x200046cc
 8001d74:	200046d8 	.word	0x200046d8

08001d78 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b08a      	sub	sp, #40	@ 0x28
 8001d7c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d7e:	f107 0314 	add.w	r3, r7, #20
 8001d82:	2200      	movs	r2, #0
 8001d84:	601a      	str	r2, [r3, #0]
 8001d86:	605a      	str	r2, [r3, #4]
 8001d88:	609a      	str	r2, [r3, #8]
 8001d8a:	60da      	str	r2, [r3, #12]
 8001d8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	613b      	str	r3, [r7, #16]
 8001d92:	4b4a      	ldr	r3, [pc, #296]	@ (8001ebc <MX_GPIO_Init+0x144>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d96:	4a49      	ldr	r2, [pc, #292]	@ (8001ebc <MX_GPIO_Init+0x144>)
 8001d98:	f043 0304 	orr.w	r3, r3, #4
 8001d9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d9e:	4b47      	ldr	r3, [pc, #284]	@ (8001ebc <MX_GPIO_Init+0x144>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da2:	f003 0304 	and.w	r3, r3, #4
 8001da6:	613b      	str	r3, [r7, #16]
 8001da8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001daa:	2300      	movs	r3, #0
 8001dac:	60fb      	str	r3, [r7, #12]
 8001dae:	4b43      	ldr	r3, [pc, #268]	@ (8001ebc <MX_GPIO_Init+0x144>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db2:	4a42      	ldr	r2, [pc, #264]	@ (8001ebc <MX_GPIO_Init+0x144>)
 8001db4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001db8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dba:	4b40      	ldr	r3, [pc, #256]	@ (8001ebc <MX_GPIO_Init+0x144>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60bb      	str	r3, [r7, #8]
 8001dca:	4b3c      	ldr	r3, [pc, #240]	@ (8001ebc <MX_GPIO_Init+0x144>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dce:	4a3b      	ldr	r2, [pc, #236]	@ (8001ebc <MX_GPIO_Init+0x144>)
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dd6:	4b39      	ldr	r3, [pc, #228]	@ (8001ebc <MX_GPIO_Init+0x144>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	60bb      	str	r3, [r7, #8]
 8001de0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de2:	2300      	movs	r3, #0
 8001de4:	607b      	str	r3, [r7, #4]
 8001de6:	4b35      	ldr	r3, [pc, #212]	@ (8001ebc <MX_GPIO_Init+0x144>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dea:	4a34      	ldr	r2, [pc, #208]	@ (8001ebc <MX_GPIO_Init+0x144>)
 8001dec:	f043 0302 	orr.w	r3, r3, #2
 8001df0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001df2:	4b32      	ldr	r3, [pc, #200]	@ (8001ebc <MX_GPIO_Init+0x144>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	607b      	str	r3, [r7, #4]
 8001dfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dfe:	2300      	movs	r3, #0
 8001e00:	603b      	str	r3, [r7, #0]
 8001e02:	4b2e      	ldr	r3, [pc, #184]	@ (8001ebc <MX_GPIO_Init+0x144>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e06:	4a2d      	ldr	r2, [pc, #180]	@ (8001ebc <MX_GPIO_Init+0x144>)
 8001e08:	f043 0308 	orr.w	r3, r3, #8
 8001e0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e0e:	4b2b      	ldr	r3, [pc, #172]	@ (8001ebc <MX_GPIO_Init+0x144>)
 8001e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e12:	f003 0308 	and.w	r3, r3, #8
 8001e16:	603b      	str	r3, [r7, #0]
 8001e18:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Direction0_Pin|Direction1_Pin|LD2_Pin|RC522_CS_Pin, GPIO_PIN_RESET);
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	2163      	movs	r1, #99	@ 0x63
 8001e1e:	4828      	ldr	r0, [pc, #160]	@ (8001ec0 <MX_GPIO_Init+0x148>)
 8001e20:	f002 fdee 	bl	8004a00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001e24:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e2a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001e2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e30:	2300      	movs	r3, #0
 8001e32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e34:	f107 0314 	add.w	r3, r7, #20
 8001e38:	4619      	mov	r1, r3
 8001e3a:	4822      	ldr	r0, [pc, #136]	@ (8001ec4 <MX_GPIO_Init+0x14c>)
 8001e3c:	f002 fc4c 	bl	80046d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = Direction0_Pin|Direction1_Pin;
 8001e40:	2303      	movs	r3, #3
 8001e42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e44:	2301      	movs	r3, #1
 8001e46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e50:	f107 0314 	add.w	r3, r7, #20
 8001e54:	4619      	mov	r1, r3
 8001e56:	481a      	ldr	r0, [pc, #104]	@ (8001ec0 <MX_GPIO_Init+0x148>)
 8001e58:	f002 fc3e 	bl	80046d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|RC522_CS_Pin;
 8001e5c:	2360      	movs	r3, #96	@ 0x60
 8001e5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e60:	2301      	movs	r3, #1
 8001e62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e64:	2300      	movs	r3, #0
 8001e66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e6c:	f107 0314 	add.w	r3, r7, #20
 8001e70:	4619      	mov	r1, r3
 8001e72:	4813      	ldr	r0, [pc, #76]	@ (8001ec0 <MX_GPIO_Init+0x148>)
 8001e74:	f002 fc30 	bl	80046d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Limit_switch_up_Pin|Limit_switch_down_Pin;
 8001e78:	2330      	movs	r3, #48	@ 0x30
 8001e7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e7c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001e80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e82:	2301      	movs	r3, #1
 8001e84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e86:	f107 0314 	add.w	r3, r7, #20
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	480e      	ldr	r0, [pc, #56]	@ (8001ec8 <MX_GPIO_Init+0x150>)
 8001e8e:	f002 fc23 	bl	80046d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8001e92:	2200      	movs	r2, #0
 8001e94:	2105      	movs	r1, #5
 8001e96:	200a      	movs	r0, #10
 8001e98:	f001 fff2 	bl	8003e80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001e9c:	200a      	movs	r0, #10
 8001e9e:	f002 f80b 	bl	8003eb8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	2105      	movs	r1, #5
 8001ea6:	2017      	movs	r0, #23
 8001ea8:	f001 ffea 	bl	8003e80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001eac:	2017      	movs	r0, #23
 8001eae:	f002 f803 	bl	8003eb8 <HAL_NVIC_EnableIRQ>

}
 8001eb2:	bf00      	nop
 8001eb4:	3728      	adds	r7, #40	@ 0x28
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	40023800 	.word	0x40023800
 8001ec0:	40020000 	.word	0x40020000
 8001ec4:	40020800 	.word	0x40020800
 8001ec8:	40020400 	.word	0x40020400

08001ecc <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 0 */
extern SPI_HandleTypeDef hspi2;
uint8_t rc522_rx_buf[100];
uint8_t cardstr[17];

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	80fb      	strh	r3, [r7, #6]
	static uint32_t before_tick1 = 0;
	static uint32_t before_tick2 = 0;

	if(GPIO_Pin == Limit_switch_up_Pin){
 8001ed6:	88fb      	ldrh	r3, [r7, #6]
 8001ed8:	2b10      	cmp	r3, #16
 8001eda:	d111      	bne.n	8001f00 <HAL_GPIO_EXTI_Callback+0x34>
		if(HAL_GetTick() - before_tick1 >= 300){
 8001edc:	f001 ff0c 	bl	8003cf8 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	4b13      	ldr	r3, [pc, #76]	@ (8001f30 <HAL_GPIO_EXTI_Callback+0x64>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001eec:	d31c      	bcc.n	8001f28 <HAL_GPIO_EXTI_Callback+0x5c>
			before_tick1 = HAL_GetTick();
 8001eee:	f001 ff03 	bl	8003cf8 <HAL_GetTick>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	4a0e      	ldr	r2, [pc, #56]	@ (8001f30 <HAL_GPIO_EXTI_Callback+0x64>)
 8001ef6:	6013      	str	r3, [r2, #0]
			limit_switch_up = 1;
 8001ef8:	4b0e      	ldr	r3, [pc, #56]	@ (8001f34 <HAL_GPIO_EXTI_Callback+0x68>)
 8001efa:	2201      	movs	r2, #1
 8001efc:	601a      	str	r2, [r3, #0]
		if(HAL_GetTick() - before_tick2 >= 300){
			before_tick2 = HAL_GetTick();
			limit_switch_down = 1;
		}
	}
}
 8001efe:	e013      	b.n	8001f28 <HAL_GPIO_EXTI_Callback+0x5c>
	}else if(GPIO_Pin == Limit_switch_down_Pin){
 8001f00:	88fb      	ldrh	r3, [r7, #6]
 8001f02:	2b20      	cmp	r3, #32
 8001f04:	d110      	bne.n	8001f28 <HAL_GPIO_EXTI_Callback+0x5c>
		if(HAL_GetTick() - before_tick2 >= 300){
 8001f06:	f001 fef7 	bl	8003cf8 <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f38 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001f16:	d307      	bcc.n	8001f28 <HAL_GPIO_EXTI_Callback+0x5c>
			before_tick2 = HAL_GetTick();
 8001f18:	f001 feee 	bl	8003cf8 <HAL_GetTick>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	4a06      	ldr	r2, [pc, #24]	@ (8001f38 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001f20:	6013      	str	r3, [r2, #0]
			limit_switch_down = 1;
 8001f22:	4b06      	ldr	r3, [pc, #24]	@ (8001f3c <HAL_GPIO_EXTI_Callback+0x70>)
 8001f24:	2201      	movs	r2, #1
 8001f26:	601a      	str	r2, [r3, #0]
}
 8001f28:	bf00      	nop
 8001f2a:	3708      	adds	r7, #8
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	20007924 	.word	0x20007924
 8001f34:	20007934 	.word	0x20007934
 8001f38:	20007928 	.word	0x20007928
 8001f3c:	20007938 	.word	0x20007938

08001f40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f44:	f001 fea2 	bl	8003c8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f48:	f000 f830 	bl	8001fac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f4c:	f7ff ff14 	bl	8001d78 <MX_GPIO_Init>
  MX_DMA_Init();
 8001f50:	f7ff fa72 	bl	8001438 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001f54:	f001 fb4a 	bl	80035ec <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001f58:	f001 fb1e 	bl	8003598 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001f5c:	f001 fb70 	bl	8003640 <MX_USART3_UART_Init>
  MX_SPI2_Init();
 8001f60:	f000 fca4 	bl	80028ac <MX_SPI2_Init>
  MX_USART6_UART_Init();
 8001f64:	f001 fb96 	bl	8003694 <MX_USART6_UART_Init>
  MX_UART5_Init();
 8001f68:	f001 faec 	bl	8003544 <MX_UART5_Init>
  MX_TIM2_Init();
 8001f6c:	f000 ff62 	bl	8002e34 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  uart_init();
 8001f70:	f001 f810 	bl	8002f94 <uart_init>
  uart2_init();
 8001f74:	f001 fa1a 	bl	80033ac <uart2_init>
  MFRC522_Init();
 8001f78:	f000 fab8 	bl	80024ec <MFRC522_Init>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001f7c:	2104      	movs	r1, #4
 8001f7e:	4809      	ldr	r0, [pc, #36]	@ (8001fa4 <main+0x64>)
 8001f80:	f004 f91c 	bl	80061bc <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(Direction0_GPIO_Port, Direction0_Pin, GPIO_PIN_SET);
 8001f84:	2201      	movs	r2, #1
 8001f86:	2101      	movs	r1, #1
 8001f88:	4807      	ldr	r0, [pc, #28]	@ (8001fa8 <main+0x68>)
 8001f8a:	f002 fd39 	bl	8004a00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Direction1_GPIO_Port, Direction1_Pin, GPIO_PIN_RESET);
 8001f8e:	2200      	movs	r2, #0
 8001f90:	2102      	movs	r1, #2
 8001f92:	4805      	ldr	r0, [pc, #20]	@ (8001fa8 <main+0x68>)
 8001f94:	f002 fd34 	bl	8004a00 <HAL_GPIO_WritePin>
//  HAL_SPI_Receive_IT(&hspi2,rc522_rx_buf,sizeof(rc522_rx_buf));

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001f98:	f7ff fb64 	bl	8001664 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001f9c:	f006 fa32 	bl	8008404 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001fa0:	bf00      	nop
 8001fa2:	e7fd      	b.n	8001fa0 <main+0x60>
 8001fa4:	200079e4 	.word	0x200079e4
 8001fa8:	40020000 	.word	0x40020000

08001fac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b094      	sub	sp, #80	@ 0x50
 8001fb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fb2:	f107 031c 	add.w	r3, r7, #28
 8001fb6:	2234      	movs	r2, #52	@ 0x34
 8001fb8:	2100      	movs	r1, #0
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f015 ff04 	bl	8017dc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fc0:	f107 0308 	add.w	r3, r7, #8
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	605a      	str	r2, [r3, #4]
 8001fca:	609a      	str	r2, [r3, #8]
 8001fcc:	60da      	str	r2, [r3, #12]
 8001fce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	607b      	str	r3, [r7, #4]
 8001fd4:	4b2c      	ldr	r3, [pc, #176]	@ (8002088 <SystemClock_Config+0xdc>)
 8001fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd8:	4a2b      	ldr	r2, [pc, #172]	@ (8002088 <SystemClock_Config+0xdc>)
 8001fda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fde:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fe0:	4b29      	ldr	r3, [pc, #164]	@ (8002088 <SystemClock_Config+0xdc>)
 8001fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fe8:	607b      	str	r3, [r7, #4]
 8001fea:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fec:	2300      	movs	r3, #0
 8001fee:	603b      	str	r3, [r7, #0]
 8001ff0:	4b26      	ldr	r3, [pc, #152]	@ (800208c <SystemClock_Config+0xe0>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a25      	ldr	r2, [pc, #148]	@ (800208c <SystemClock_Config+0xe0>)
 8001ff6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001ffa:	6013      	str	r3, [r2, #0]
 8001ffc:	4b23      	ldr	r3, [pc, #140]	@ (800208c <SystemClock_Config+0xe0>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002004:	603b      	str	r3, [r7, #0]
 8002006:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002008:	2301      	movs	r3, #1
 800200a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800200c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002010:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002012:	2302      	movs	r3, #2
 8002014:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002016:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800201a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800201c:	2304      	movs	r3, #4
 800201e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002020:	23b4      	movs	r3, #180	@ 0xb4
 8002022:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002024:	2302      	movs	r3, #2
 8002026:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002028:	2302      	movs	r3, #2
 800202a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800202c:	2302      	movs	r3, #2
 800202e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002030:	f107 031c 	add.w	r3, r7, #28
 8002034:	4618      	mov	r0, r3
 8002036:	f003 f8e1 	bl	80051fc <HAL_RCC_OscConfig>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002040:	f000 f838 	bl	80020b4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002044:	f002 fd0e 	bl	8004a64 <HAL_PWREx_EnableOverDrive>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800204e:	f000 f831 	bl	80020b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002052:	230f      	movs	r3, #15
 8002054:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002056:	2302      	movs	r3, #2
 8002058:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800205a:	2300      	movs	r3, #0
 800205c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800205e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002062:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002064:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002068:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800206a:	f107 0308 	add.w	r3, r7, #8
 800206e:	2105      	movs	r1, #5
 8002070:	4618      	mov	r0, r3
 8002072:	f002 fd47 	bl	8004b04 <HAL_RCC_ClockConfig>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800207c:	f000 f81a 	bl	80020b4 <Error_Handler>
  }
}
 8002080:	bf00      	nop
 8002082:	3750      	adds	r7, #80	@ 0x50
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	40023800 	.word	0x40023800
 800208c:	40007000 	.word	0x40007000

08002090 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a04      	ldr	r2, [pc, #16]	@ (80020b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d101      	bne.n	80020a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80020a2:	f001 fe15 	bl	8003cd0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80020a6:	bf00      	nop
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	40000800 	.word	0x40000800

080020b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80020b8:	b672      	cpsid	i
}
 80020ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020bc:	bf00      	nop
 80020be:	e7fd      	b.n	80020bc <Error_Handler+0x8>

080020c0 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80020ca:	4b0c      	ldr	r3, [pc, #48]	@ (80020fc <microros_allocate+0x3c>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	461a      	mov	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4413      	add	r3, r2
 80020d4:	461a      	mov	r2, r3
 80020d6:	4b09      	ldr	r3, [pc, #36]	@ (80020fc <microros_allocate+0x3c>)
 80020d8:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80020da:	4b09      	ldr	r3, [pc, #36]	@ (8002100 <microros_allocate+0x40>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	461a      	mov	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	4413      	add	r3, r2
 80020e4:	461a      	mov	r2, r3
 80020e6:	4b06      	ldr	r3, [pc, #24]	@ (8002100 <microros_allocate+0x40>)
 80020e8:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f7fe ff54 	bl	8000f98 <pvPortMallocMicroROS>
 80020f0:	4603      	mov	r3, r0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	2000792c 	.word	0x2000792c
 8002100:	20007930 	.word	0x20007930

08002104 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d00c      	beq.n	800212e <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f7ff f863 	bl	80011e0 <getBlockSize>
 800211a:	4603      	mov	r3, r0
 800211c:	4a06      	ldr	r2, [pc, #24]	@ (8002138 <microros_deallocate+0x34>)
 800211e:	6812      	ldr	r2, [r2, #0]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	461a      	mov	r2, r3
 8002124:	4b04      	ldr	r3, [pc, #16]	@ (8002138 <microros_deallocate+0x34>)
 8002126:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f7fe fffd 	bl	8001128 <vPortFreeMicroROS>
  }
}
 800212e:	bf00      	nop
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	20007930 	.word	0x20007930

0800213c <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002148:	4b15      	ldr	r3, [pc, #84]	@ (80021a0 <microros_reallocate+0x64>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	461a      	mov	r2, r3
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	4413      	add	r3, r2
 8002152:	461a      	mov	r2, r3
 8002154:	4b12      	ldr	r3, [pc, #72]	@ (80021a0 <microros_reallocate+0x64>)
 8002156:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002158:	4b12      	ldr	r3, [pc, #72]	@ (80021a4 <microros_reallocate+0x68>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	461a      	mov	r2, r3
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	4413      	add	r3, r2
 8002162:	461a      	mov	r2, r3
 8002164:	4b0f      	ldr	r3, [pc, #60]	@ (80021a4 <microros_reallocate+0x68>)
 8002166:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d104      	bne.n	8002178 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 800216e:	68b8      	ldr	r0, [r7, #8]
 8002170:	f7fe ff12 	bl	8000f98 <pvPortMallocMicroROS>
 8002174:	4603      	mov	r3, r0
 8002176:	e00e      	b.n	8002196 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8002178:	68f8      	ldr	r0, [r7, #12]
 800217a:	f7ff f831 	bl	80011e0 <getBlockSize>
 800217e:	4603      	mov	r3, r0
 8002180:	4a08      	ldr	r2, [pc, #32]	@ (80021a4 <microros_reallocate+0x68>)
 8002182:	6812      	ldr	r2, [r2, #0]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	461a      	mov	r2, r3
 8002188:	4b06      	ldr	r3, [pc, #24]	@ (80021a4 <microros_reallocate+0x68>)
 800218a:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 800218c:	68b9      	ldr	r1, [r7, #8]
 800218e:	68f8      	ldr	r0, [r7, #12]
 8002190:	f7ff f844 	bl	800121c <pvPortReallocMicroROS>
 8002194:	4603      	mov	r3, r0
  }
}
 8002196:	4618      	mov	r0, r3
 8002198:	3710      	adds	r7, #16
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	2000792c 	.word	0x2000792c
 80021a4:	20007930 	.word	0x20007930

080021a8 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	60b9      	str	r1, [r7, #8]
 80021b2:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	68ba      	ldr	r2, [r7, #8]
 80021b8:	fb02 f303 	mul.w	r3, r2, r3
 80021bc:	4a0c      	ldr	r2, [pc, #48]	@ (80021f0 <microros_zero_allocate+0x48>)
 80021be:	6812      	ldr	r2, [r2, #0]
 80021c0:	4413      	add	r3, r2
 80021c2:	461a      	mov	r2, r3
 80021c4:	4b0a      	ldr	r3, [pc, #40]	@ (80021f0 <microros_zero_allocate+0x48>)
 80021c6:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	68ba      	ldr	r2, [r7, #8]
 80021cc:	fb02 f303 	mul.w	r3, r2, r3
 80021d0:	4a08      	ldr	r2, [pc, #32]	@ (80021f4 <microros_zero_allocate+0x4c>)
 80021d2:	6812      	ldr	r2, [r2, #0]
 80021d4:	4413      	add	r3, r2
 80021d6:	461a      	mov	r2, r3
 80021d8:	4b06      	ldr	r3, [pc, #24]	@ (80021f4 <microros_zero_allocate+0x4c>)
 80021da:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 80021dc:	68b9      	ldr	r1, [r7, #8]
 80021de:	68f8      	ldr	r0, [r7, #12]
 80021e0:	f7ff f849 	bl	8001276 <pvPortCallocMicroROS>
 80021e4:	4603      	mov	r3, r0
 80021e6:	4618      	mov	r0, r3
 80021e8:	3710      	adds	r7, #16
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	2000792c 	.word	0x2000792c
 80021f4:	20007930 	.word	0x20007930

080021f8 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 80021f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80021fc:	b086      	sub	sp, #24
 80021fe:	af00      	add	r7, sp, #0
 8002200:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002204:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8002206:	2300      	movs	r3, #0
 8002208:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 800220a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800220e:	a320      	add	r3, pc, #128	@ (adr r3, 8002290 <UTILS_NanosecondsToTimespec+0x98>)
 8002210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002214:	f7fe fcf8 	bl	8000c08 <__aeabi_ldivmod>
 8002218:	4602      	mov	r2, r0
 800221a:	460b      	mov	r3, r1
 800221c:	6879      	ldr	r1, [r7, #4]
 800221e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8002222:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002226:	a31a      	add	r3, pc, #104	@ (adr r3, 8002290 <UTILS_NanosecondsToTimespec+0x98>)
 8002228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800222c:	f7fe fcec 	bl	8000c08 <__aeabi_ldivmod>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	2b00      	cmp	r3, #0
 800223a:	da20      	bge.n	800227e <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	4a11      	ldr	r2, [pc, #68]	@ (8002288 <UTILS_NanosecondsToTimespec+0x90>)
 8002242:	fb82 1203 	smull	r1, r2, r2, r3
 8002246:	1712      	asrs	r2, r2, #28
 8002248:	17db      	asrs	r3, r3, #31
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	3301      	adds	r3, #1
 800224e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002256:	6979      	ldr	r1, [r7, #20]
 8002258:	17c8      	asrs	r0, r1, #31
 800225a:	460c      	mov	r4, r1
 800225c:	4605      	mov	r5, r0
 800225e:	ebb2 0804 	subs.w	r8, r2, r4
 8002262:	eb63 0905 	sbc.w	r9, r3, r5
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689a      	ldr	r2, [r3, #8]
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	4906      	ldr	r1, [pc, #24]	@ (800228c <UTILS_NanosecondsToTimespec+0x94>)
 8002274:	fb01 f303 	mul.w	r3, r1, r3
 8002278:	441a      	add	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	609a      	str	r2, [r3, #8]
    }
}
 800227e:	bf00      	nop
 8002280:	3718      	adds	r7, #24
 8002282:	46bd      	mov	sp, r7
 8002284:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002288:	44b82fa1 	.word	0x44b82fa1
 800228c:	3b9aca00 	.word	0x3b9aca00
 8002290:	3b9aca00 	.word	0x3b9aca00
 8002294:	00000000 	.word	0x00000000

08002298 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8002298:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800229c:	b08e      	sub	sp, #56	@ 0x38
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6278      	str	r0, [r7, #36]	@ 0x24
 80022a2:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80022a4:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80022a8:	2300      	movs	r3, #0
 80022aa:	6013      	str	r3, [r2, #0]
 80022ac:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80022ae:	f04f 0200 	mov.w	r2, #0
 80022b2:	f04f 0300 	mov.w	r3, #0
 80022b6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 80022ba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80022be:	4618      	mov	r0, r3
 80022c0:	f006 ff86 	bl	80091d0 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 80022c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022c6:	17da      	asrs	r2, r3, #31
 80022c8:	61bb      	str	r3, [r7, #24]
 80022ca:	61fa      	str	r2, [r7, #28]
 80022cc:	f04f 0200 	mov.w	r2, #0
 80022d0:	f04f 0300 	mov.w	r3, #0
 80022d4:	69b9      	ldr	r1, [r7, #24]
 80022d6:	000b      	movs	r3, r1
 80022d8:	2200      	movs	r2, #0
 80022da:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 80022de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022e0:	2200      	movs	r2, #0
 80022e2:	461c      	mov	r4, r3
 80022e4:	4615      	mov	r5, r2
 80022e6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80022ea:	1911      	adds	r1, r2, r4
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	416b      	adcs	r3, r5
 80022f0:	60fb      	str	r3, [r7, #12]
 80022f2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80022f6:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 80022fa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80022fe:	4602      	mov	r2, r0
 8002300:	460b      	mov	r3, r1
 8002302:	f04f 0400 	mov.w	r4, #0
 8002306:	f04f 0500 	mov.w	r5, #0
 800230a:	015d      	lsls	r5, r3, #5
 800230c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002310:	0154      	lsls	r4, r2, #5
 8002312:	4622      	mov	r2, r4
 8002314:	462b      	mov	r3, r5
 8002316:	ebb2 0800 	subs.w	r8, r2, r0
 800231a:	eb63 0901 	sbc.w	r9, r3, r1
 800231e:	f04f 0200 	mov.w	r2, #0
 8002322:	f04f 0300 	mov.w	r3, #0
 8002326:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800232a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800232e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8002332:	4690      	mov	r8, r2
 8002334:	4699      	mov	r9, r3
 8002336:	eb18 0a00 	adds.w	sl, r8, r0
 800233a:	eb49 0b01 	adc.w	fp, r9, r1
 800233e:	f04f 0200 	mov.w	r2, #0
 8002342:	f04f 0300 	mov.w	r3, #0
 8002346:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800234a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800234e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002352:	ebb2 040a 	subs.w	r4, r2, sl
 8002356:	603c      	str	r4, [r7, #0]
 8002358:	eb63 030b 	sbc.w	r3, r3, fp
 800235c:	607b      	str	r3, [r7, #4]
 800235e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002362:	4623      	mov	r3, r4
 8002364:	181b      	adds	r3, r3, r0
 8002366:	613b      	str	r3, [r7, #16]
 8002368:	462b      	mov	r3, r5
 800236a:	eb41 0303 	adc.w	r3, r1, r3
 800236e:	617b      	str	r3, [r7, #20]
 8002370:	6a3a      	ldr	r2, [r7, #32]
 8002372:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002376:	f7ff ff3f 	bl	80021f8 <UTILS_NanosecondsToTimespec>

    return 0;
 800237a:	2300      	movs	r3, #0
 800237c:	4618      	mov	r0, r3
 800237e:	3738      	adds	r7, #56	@ 0x38
 8002380:	46bd      	mov	sp, r7
 8002382:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002388 <RC522_SPI_Transfer>:
 * Description: A common function used by Write_MFRC522 and Read_MFRC522
 * Input Parameters: data - the value to be written
 * Returns: a byte of data read from the module
 */
uint8_t RC522_SPI_Transfer(uchar data)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b086      	sub	sp, #24
 800238c:	af02      	add	r7, sp, #8
 800238e:	4603      	mov	r3, r0
 8002390:	71fb      	strb	r3, [r7, #7]
	uchar rx_data;
	HAL_SPI_TransmitReceive(HSPI_INSTANCE,&data,&rx_data,1,100);
 8002392:	f107 020f 	add.w	r2, r7, #15
 8002396:	1df9      	adds	r1, r7, #7
 8002398:	2364      	movs	r3, #100	@ 0x64
 800239a:	9300      	str	r3, [sp, #0]
 800239c:	2301      	movs	r3, #1
 800239e:	4804      	ldr	r0, [pc, #16]	@ (80023b0 <RC522_SPI_Transfer+0x28>)
 80023a0:	f003 fa53 	bl	800584a <HAL_SPI_TransmitReceive>

	return rx_data;
 80023a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3710      	adds	r7, #16
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	2000793c 	.word	0x2000793c

080023b4 <Write_MFRC522>:
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parameters: addr - register address; val - the value to be written
 * Return value: None
 */
void Write_MFRC522(uchar addr, uchar val)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	4603      	mov	r3, r0
 80023bc:	460a      	mov	r2, r1
 80023be:	71fb      	strb	r3, [r7, #7]
 80023c0:	4613      	mov	r3, r2
 80023c2:	71bb      	strb	r3, [r7, #6]
	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 80023c4:	2200      	movs	r2, #0
 80023c6:	2140      	movs	r1, #64	@ 0x40
 80023c8:	480c      	ldr	r0, [pc, #48]	@ (80023fc <Write_MFRC522+0x48>)
 80023ca:	f002 fb19 	bl	8004a00 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and clear the MSb to indicate a write
	  // - bottom 8 bits are the data bits being sent for that address, we send them
	RC522_SPI_Transfer((addr<<1)&0x7E);
 80023ce:	79fb      	ldrb	r3, [r7, #7]
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	4618      	mov	r0, r3
 80023dc:	f7ff ffd4 	bl	8002388 <RC522_SPI_Transfer>
	RC522_SPI_Transfer(val);
 80023e0:	79bb      	ldrb	r3, [r7, #6]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7ff ffd0 	bl	8002388 <RC522_SPI_Transfer>

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 80023e8:	2201      	movs	r2, #1
 80023ea:	2140      	movs	r1, #64	@ 0x40
 80023ec:	4803      	ldr	r0, [pc, #12]	@ (80023fc <Write_MFRC522+0x48>)
 80023ee:	f002 fb07 	bl	8004a00 <HAL_GPIO_WritePin>
}
 80023f2:	bf00      	nop
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	40020000 	.word	0x40020000

08002400 <Read_MFRC522>:
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the module
 */
uchar Read_MFRC522(uchar addr)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	4603      	mov	r3, r0
 8002408:	71fb      	strb	r3, [r7, #7]
	uchar val;

	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 800240a:	2200      	movs	r2, #0
 800240c:	2140      	movs	r1, #64	@ 0x40
 800240e:	480f      	ldr	r0, [pc, #60]	@ (800244c <Read_MFRC522+0x4c>)
 8002410:	f002 faf6 	bl	8004a00 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and set the MSb to indicate a read
	  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
	RC522_SPI_Transfer(((addr<<1)&0x7E) | 0x80);
 8002414:	79fb      	ldrb	r3, [r7, #7]
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	b25b      	sxtb	r3, r3
 800241a:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 800241e:	b25b      	sxtb	r3, r3
 8002420:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002424:	b25b      	sxtb	r3, r3
 8002426:	b2db      	uxtb	r3, r3
 8002428:	4618      	mov	r0, r3
 800242a:	f7ff ffad 	bl	8002388 <RC522_SPI_Transfer>
	val = RC522_SPI_Transfer(0x00);
 800242e:	2000      	movs	r0, #0
 8002430:	f7ff ffaa 	bl	8002388 <RC522_SPI_Transfer>
 8002434:	4603      	mov	r3, r0
 8002436:	73fb      	strb	r3, [r7, #15]

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8002438:	2201      	movs	r2, #1
 800243a:	2140      	movs	r1, #64	@ 0x40
 800243c:	4803      	ldr	r0, [pc, #12]	@ (800244c <Read_MFRC522+0x4c>)
 800243e:	f002 fadf 	bl	8004a00 <HAL_GPIO_WritePin>

	return val;
 8002442:	7bfb      	ldrb	r3, [r7, #15]

}
 8002444:	4618      	mov	r0, r3
 8002446:	3710      	adds	r7, #16
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	40020000 	.word	0x40020000

08002450 <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(uchar reg, uchar mask)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	4603      	mov	r3, r0
 8002458:	460a      	mov	r2, r1
 800245a:	71fb      	strb	r3, [r7, #7]
 800245c:	4613      	mov	r3, r2
 800245e:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 8002460:	79fb      	ldrb	r3, [r7, #7]
 8002462:	4618      	mov	r0, r3
 8002464:	f7ff ffcc 	bl	8002400 <Read_MFRC522>
 8002468:	4603      	mov	r3, r0
 800246a:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 800246c:	7bfa      	ldrb	r2, [r7, #15]
 800246e:	79bb      	ldrb	r3, [r7, #6]
 8002470:	4313      	orrs	r3, r2
 8002472:	b2da      	uxtb	r2, r3
 8002474:	79fb      	ldrb	r3, [r7, #7]
 8002476:	4611      	mov	r1, r2
 8002478:	4618      	mov	r0, r3
 800247a:	f7ff ff9b 	bl	80023b4 <Write_MFRC522>
}
 800247e:	bf00      	nop
 8002480:	3710      	adds	r7, #16
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(uchar reg, uchar mask)
{
 8002486:	b580      	push	{r7, lr}
 8002488:	b084      	sub	sp, #16
 800248a:	af00      	add	r7, sp, #0
 800248c:	4603      	mov	r3, r0
 800248e:	460a      	mov	r2, r1
 8002490:	71fb      	strb	r3, [r7, #7]
 8002492:	4613      	mov	r3, r2
 8002494:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 8002496:	79fb      	ldrb	r3, [r7, #7]
 8002498:	4618      	mov	r0, r3
 800249a:	f7ff ffb1 	bl	8002400 <Read_MFRC522>
 800249e:	4603      	mov	r3, r0
 80024a0:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 80024a2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80024a6:	43db      	mvns	r3, r3
 80024a8:	b25a      	sxtb	r2, r3
 80024aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024ae:	4013      	ands	r3, r2
 80024b0:	b25b      	sxtb	r3, r3
 80024b2:	b2da      	uxtb	r2, r3
 80024b4:	79fb      	ldrb	r3, [r7, #7]
 80024b6:	4611      	mov	r1, r2
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7ff ff7b 	bl	80023b4 <Write_MFRC522>
}
 80024be:	bf00      	nop
 80024c0:	3710      	adds	r7, #16
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 80024c6:	b580      	push	{r7, lr}
 80024c8:	af00      	add	r7, sp, #0

	Read_MFRC522(TxControlReg);
 80024ca:	2014      	movs	r0, #20
 80024cc:	f7ff ff98 	bl	8002400 <Read_MFRC522>
	SetBitMask(TxControlReg, 0x03);
 80024d0:	2103      	movs	r1, #3
 80024d2:	2014      	movs	r0, #20
 80024d4:	f7ff ffbc 	bl	8002450 <SetBitMask>
}
 80024d8:	bf00      	nop
 80024da:	bd80      	pop	{r7, pc}

080024dc <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
    Write_MFRC522(CommandReg, PCD_RESETPHASE);
 80024e0:	210f      	movs	r1, #15
 80024e2:	2001      	movs	r0, #1
 80024e4:	f7ff ff66 	bl	80023b4 <Write_MFRC522>
}
 80024e8:	bf00      	nop
 80024ea:	bd80      	pop	{r7, pc}

080024ec <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 80024f0:	2201      	movs	r2, #1
 80024f2:	2140      	movs	r1, #64	@ 0x40
 80024f4:	4812      	ldr	r0, [pc, #72]	@ (8002540 <MFRC522_Init+0x54>)
 80024f6:	f002 fa83 	bl	8004a00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MFRC522_RST_PORT,MFRC522_RST_PIN,GPIO_PIN_SET);
 80024fa:	2201      	movs	r2, #1
 80024fc:	2101      	movs	r1, #1
 80024fe:	4811      	ldr	r0, [pc, #68]	@ (8002544 <MFRC522_Init+0x58>)
 8002500:	f002 fa7e 	bl	8004a00 <HAL_GPIO_WritePin>
	MFRC522_Reset();
 8002504:	f7ff ffea 	bl	80024dc <MFRC522_Reset>

	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_MFRC522(TModeReg, 0x8D);		//Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 8002508:	218d      	movs	r1, #141	@ 0x8d
 800250a:	202a      	movs	r0, #42	@ 0x2a
 800250c:	f7ff ff52 	bl	80023b4 <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E);	//TModeReg[3..0] + TPrescalerReg
 8002510:	213e      	movs	r1, #62	@ 0x3e
 8002512:	202b      	movs	r0, #43	@ 0x2b
 8002514:	f7ff ff4e 	bl	80023b4 <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);
 8002518:	211e      	movs	r1, #30
 800251a:	202d      	movs	r0, #45	@ 0x2d
 800251c:	f7ff ff4a 	bl	80023b4 <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 8002520:	2100      	movs	r1, #0
 8002522:	202c      	movs	r0, #44	@ 0x2c
 8002524:	f7ff ff46 	bl	80023b4 <Write_MFRC522>

	Write_MFRC522(TxAutoReg, 0x40);		// force 100% ASK modulation
 8002528:	2140      	movs	r1, #64	@ 0x40
 800252a:	2015      	movs	r0, #21
 800252c:	f7ff ff42 	bl	80023b4 <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);		// CRC Initial value 0x6363
 8002530:	213d      	movs	r1, #61	@ 0x3d
 8002532:	2011      	movs	r0, #17
 8002534:	f7ff ff3e 	bl	80023b4 <Write_MFRC522>

	AntennaOn();
 8002538:	f7ff ffc5 	bl	80024c6 <AntennaOn>
}
 800253c:	bf00      	nop
 800253e:	bd80      	pop	{r7, pc}
 8002540:	40020000 	.word	0x40020000
 8002544:	40020400 	.word	0x40020400

08002548 <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
uchar MFRC522_ToCard(uchar command, uchar *sendData, uchar sendLen, uchar *backData, uint *backLen)
{
 8002548:	b590      	push	{r4, r7, lr}
 800254a:	b089      	sub	sp, #36	@ 0x24
 800254c:	af00      	add	r7, sp, #0
 800254e:	60b9      	str	r1, [r7, #8]
 8002550:	607b      	str	r3, [r7, #4]
 8002552:	4603      	mov	r3, r0
 8002554:	73fb      	strb	r3, [r7, #15]
 8002556:	4613      	mov	r3, r2
 8002558:	73bb      	strb	r3, [r7, #14]
    uchar status = MI_ERR;
 800255a:	2302      	movs	r3, #2
 800255c:	77fb      	strb	r3, [r7, #31]
    uchar irqEn = 0x00;
 800255e:	2300      	movs	r3, #0
 8002560:	77bb      	strb	r3, [r7, #30]
    uchar waitIRq = 0x00;
 8002562:	2300      	movs	r3, #0
 8002564:	777b      	strb	r3, [r7, #29]
    uchar lastBits;
    uchar n;
    uint i;

    switch (command)
 8002566:	7bfb      	ldrb	r3, [r7, #15]
 8002568:	2b0c      	cmp	r3, #12
 800256a:	d006      	beq.n	800257a <MFRC522_ToCard+0x32>
 800256c:	2b0e      	cmp	r3, #14
 800256e:	d109      	bne.n	8002584 <MFRC522_ToCard+0x3c>
    {
        case PCD_AUTHENT:		// Certification cards close
		{
			irqEn = 0x12;
 8002570:	2312      	movs	r3, #18
 8002572:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x10;
 8002574:	2310      	movs	r3, #16
 8002576:	777b      	strb	r3, [r7, #29]
			break;
 8002578:	e005      	b.n	8002586 <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE:	// Transmit FIFO data
		{
			irqEn = 0x77;
 800257a:	2377      	movs	r3, #119	@ 0x77
 800257c:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x30;
 800257e:	2330      	movs	r3, #48	@ 0x30
 8002580:	777b      	strb	r3, [r7, #29]
			break;
 8002582:	e000      	b.n	8002586 <MFRC522_ToCard+0x3e>
		}
		default:
			break;
 8002584:	bf00      	nop
    }

    Write_MFRC522(CommIEnReg, irqEn|0x80);	// Interrupt request
 8002586:	7fbb      	ldrb	r3, [r7, #30]
 8002588:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800258c:	b2db      	uxtb	r3, r3
 800258e:	4619      	mov	r1, r3
 8002590:	2002      	movs	r0, #2
 8002592:	f7ff ff0f 	bl	80023b4 <Write_MFRC522>
    ClearBitMask(CommIrqReg, 0x80);			// Clear all interrupt request bit
 8002596:	2180      	movs	r1, #128	@ 0x80
 8002598:	2004      	movs	r0, #4
 800259a:	f7ff ff74 	bl	8002486 <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);			// FlushBuffer=1, FIFO Initialization
 800259e:	2180      	movs	r1, #128	@ 0x80
 80025a0:	200a      	movs	r0, #10
 80025a2:	f7ff ff55 	bl	8002450 <SetBitMask>

	Write_MFRC522(CommandReg, PCD_IDLE);	// NO action; Cancel the current command
 80025a6:	2100      	movs	r1, #0
 80025a8:	2001      	movs	r0, #1
 80025aa:	f7ff ff03 	bl	80023b4 <Write_MFRC522>

	// Writing data to the FIFO
    for (i=0; i<sendLen; i++)
 80025ae:	2300      	movs	r3, #0
 80025b0:	61bb      	str	r3, [r7, #24]
 80025b2:	e00a      	b.n	80025ca <MFRC522_ToCard+0x82>
    {
		Write_MFRC522(FIFODataReg, sendData[i]);
 80025b4:	68ba      	ldr	r2, [r7, #8]
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	4413      	add	r3, r2
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	4619      	mov	r1, r3
 80025be:	2009      	movs	r0, #9
 80025c0:	f7ff fef8 	bl	80023b4 <Write_MFRC522>
    for (i=0; i<sendLen; i++)
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	3301      	adds	r3, #1
 80025c8:	61bb      	str	r3, [r7, #24]
 80025ca:	7bbb      	ldrb	r3, [r7, #14]
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d3f0      	bcc.n	80025b4 <MFRC522_ToCard+0x6c>
	}

    // Execute the command
	Write_MFRC522(CommandReg, command);
 80025d2:	7bfb      	ldrb	r3, [r7, #15]
 80025d4:	4619      	mov	r1, r3
 80025d6:	2001      	movs	r0, #1
 80025d8:	f7ff feec 	bl	80023b4 <Write_MFRC522>
    if (command == PCD_TRANSCEIVE)
 80025dc:	7bfb      	ldrb	r3, [r7, #15]
 80025de:	2b0c      	cmp	r3, #12
 80025e0:	d103      	bne.n	80025ea <MFRC522_ToCard+0xa2>
    {
		SetBitMask(BitFramingReg, 0x80);		// StartSend=1,transmission of data starts
 80025e2:	2180      	movs	r1, #128	@ 0x80
 80025e4:	200d      	movs	r0, #13
 80025e6:	f7ff ff33 	bl	8002450 <SetBitMask>
	}

    // Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 80025ea:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80025ee:	61bb      	str	r3, [r7, #24]
    do
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = Read_MFRC522(CommIrqReg);
 80025f0:	2004      	movs	r0, #4
 80025f2:	f7ff ff05 	bl	8002400 <Read_MFRC522>
 80025f6:	4603      	mov	r3, r0
 80025f8:	773b      	strb	r3, [r7, #28]
        i--;
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	3b01      	subs	r3, #1
 80025fe:	61bb      	str	r3, [r7, #24]
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d00a      	beq.n	800261c <MFRC522_ToCard+0xd4>
 8002606:	7f3b      	ldrb	r3, [r7, #28]
 8002608:	f003 0301 	and.w	r3, r3, #1
 800260c:	2b00      	cmp	r3, #0
 800260e:	d105      	bne.n	800261c <MFRC522_ToCard+0xd4>
 8002610:	7f3a      	ldrb	r2, [r7, #28]
 8002612:	7f7b      	ldrb	r3, [r7, #29]
 8002614:	4013      	ands	r3, r2
 8002616:	b2db      	uxtb	r3, r3
 8002618:	2b00      	cmp	r3, #0
 800261a:	d0e9      	beq.n	80025f0 <MFRC522_ToCard+0xa8>

    ClearBitMask(BitFramingReg, 0x80);			//StartSend=0
 800261c:	2180      	movs	r1, #128	@ 0x80
 800261e:	200d      	movs	r0, #13
 8002620:	f7ff ff31 	bl	8002486 <ClearBitMask>

    if (i != 0)
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d052      	beq.n	80026d0 <MFRC522_ToCard+0x188>
    {
        if(!(Read_MFRC522(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 800262a:	2006      	movs	r0, #6
 800262c:	f7ff fee8 	bl	8002400 <Read_MFRC522>
 8002630:	4603      	mov	r3, r0
 8002632:	f003 031b 	and.w	r3, r3, #27
 8002636:	2b00      	cmp	r3, #0
 8002638:	d148      	bne.n	80026cc <MFRC522_ToCard+0x184>
        {
            status = MI_OK;
 800263a:	2300      	movs	r3, #0
 800263c:	77fb      	strb	r3, [r7, #31]
            if (n & irqEn & 0x01)
 800263e:	7f3a      	ldrb	r2, [r7, #28]
 8002640:	7fbb      	ldrb	r3, [r7, #30]
 8002642:	4013      	ands	r3, r2
 8002644:	b2db      	uxtb	r3, r3
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <MFRC522_ToCard+0x10a>
            {
				status = MI_NOTAGERR;
 800264e:	2301      	movs	r3, #1
 8002650:	77fb      	strb	r3, [r7, #31]
			}

            if (command == PCD_TRANSCEIVE)
 8002652:	7bfb      	ldrb	r3, [r7, #15]
 8002654:	2b0c      	cmp	r3, #12
 8002656:	d13b      	bne.n	80026d0 <MFRC522_ToCard+0x188>
            {
               	n = Read_MFRC522(FIFOLevelReg);
 8002658:	200a      	movs	r0, #10
 800265a:	f7ff fed1 	bl	8002400 <Read_MFRC522>
 800265e:	4603      	mov	r3, r0
 8002660:	773b      	strb	r3, [r7, #28]
              	lastBits = Read_MFRC522(ControlReg) & 0x07;
 8002662:	200c      	movs	r0, #12
 8002664:	f7ff fecc 	bl	8002400 <Read_MFRC522>
 8002668:	4603      	mov	r3, r0
 800266a:	f003 0307 	and.w	r3, r3, #7
 800266e:	75fb      	strb	r3, [r7, #23]
                if (lastBits)
 8002670:	7dfb      	ldrb	r3, [r7, #23]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d008      	beq.n	8002688 <MFRC522_ToCard+0x140>
                {
					*backLen = (n-1)*8 + lastBits;
 8002676:	7f3b      	ldrb	r3, [r7, #28]
 8002678:	3b01      	subs	r3, #1
 800267a:	00da      	lsls	r2, r3, #3
 800267c:	7dfb      	ldrb	r3, [r7, #23]
 800267e:	4413      	add	r3, r2
 8002680:	461a      	mov	r2, r3
 8002682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002684:	601a      	str	r2, [r3, #0]
 8002686:	e004      	b.n	8002692 <MFRC522_ToCard+0x14a>
				}
                else
                {
					*backLen = n*8;
 8002688:	7f3b      	ldrb	r3, [r7, #28]
 800268a:	00db      	lsls	r3, r3, #3
 800268c:	461a      	mov	r2, r3
 800268e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002690:	601a      	str	r2, [r3, #0]
				}

                if (n == 0)
 8002692:	7f3b      	ldrb	r3, [r7, #28]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d101      	bne.n	800269c <MFRC522_ToCard+0x154>
                {
					n = 1;
 8002698:	2301      	movs	r3, #1
 800269a:	773b      	strb	r3, [r7, #28]
				}
                if (n > MAX_LEN)
 800269c:	7f3b      	ldrb	r3, [r7, #28]
 800269e:	2b10      	cmp	r3, #16
 80026a0:	d901      	bls.n	80026a6 <MFRC522_ToCard+0x15e>
                {
					n = MAX_LEN;
 80026a2:	2310      	movs	r3, #16
 80026a4:	773b      	strb	r3, [r7, #28]
				}

                // Reading the received data in FIFO
                for (i=0; i<n; i++)
 80026a6:	2300      	movs	r3, #0
 80026a8:	61bb      	str	r3, [r7, #24]
 80026aa:	e00a      	b.n	80026c2 <MFRC522_ToCard+0x17a>
                {
					backData[i] = Read_MFRC522(FIFODataReg);
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	18d4      	adds	r4, r2, r3
 80026b2:	2009      	movs	r0, #9
 80026b4:	f7ff fea4 	bl	8002400 <Read_MFRC522>
 80026b8:	4603      	mov	r3, r0
 80026ba:	7023      	strb	r3, [r4, #0]
                for (i=0; i<n; i++)
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	3301      	adds	r3, #1
 80026c0:	61bb      	str	r3, [r7, #24]
 80026c2:	7f3b      	ldrb	r3, [r7, #28]
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d3f0      	bcc.n	80026ac <MFRC522_ToCard+0x164>
 80026ca:	e001      	b.n	80026d0 <MFRC522_ToCard+0x188>
				}
            }
        }
        else
        {
			status = MI_ERR;
 80026cc:	2302      	movs	r3, #2
 80026ce:	77fb      	strb	r3, [r7, #31]
    }

    //SetBitMask(ControlReg,0x80);           //timer stops
    //Write_MFRC522(CommandReg, PCD_IDLE);

    return status;
 80026d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3724      	adds	r7, #36	@ 0x24
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd90      	pop	{r4, r7, pc}

080026da <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Request(uchar reqMode, uchar *TagType)
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	b086      	sub	sp, #24
 80026de:	af02      	add	r7, sp, #8
 80026e0:	4603      	mov	r3, r0
 80026e2:	6039      	str	r1, [r7, #0]
 80026e4:	71fb      	strb	r3, [r7, #7]
	uchar status;
	uint backBits;			 // The received data bits

	Write_MFRC522(BitFramingReg, 0x07);		//TxLastBists = BitFramingReg[2..0]
 80026e6:	2107      	movs	r1, #7
 80026e8:	200d      	movs	r0, #13
 80026ea:	f7ff fe63 	bl	80023b4 <Write_MFRC522>

	TagType[0] = reqMode;
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	79fa      	ldrb	r2, [r7, #7]
 80026f2:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 80026f4:	f107 0308 	add.w	r3, r7, #8
 80026f8:	9300      	str	r3, [sp, #0]
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	2201      	movs	r2, #1
 80026fe:	6839      	ldr	r1, [r7, #0]
 8002700:	200c      	movs	r0, #12
 8002702:	f7ff ff21 	bl	8002548 <MFRC522_ToCard>
 8002706:	4603      	mov	r3, r0
 8002708:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (backBits != 0x10))
 800270a:	7bfb      	ldrb	r3, [r7, #15]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d102      	bne.n	8002716 <MFRC522_Request+0x3c>
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	2b10      	cmp	r3, #16
 8002714:	d001      	beq.n	800271a <MFRC522_Request+0x40>
	{
		status = MI_ERR;
 8002716:	2302      	movs	r3, #2
 8002718:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 800271a:	7bfb      	ldrb	r3, [r7, #15]
}
 800271c:	4618      	mov	r0, r3
 800271e:	3710      	adds	r7, #16
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Anticoll(uchar *serNum)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b086      	sub	sp, #24
 8002728:	af02      	add	r7, sp, #8
 800272a:	6078      	str	r0, [r7, #4]
    uchar status;
    uchar i;
	uchar serNumCheck=0;
 800272c:	2300      	movs	r3, #0
 800272e:	737b      	strb	r3, [r7, #13]
    uint unLen;

	Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8002730:	2100      	movs	r1, #0
 8002732:	200d      	movs	r0, #13
 8002734:	f7ff fe3e 	bl	80023b4 <Write_MFRC522>

    serNum[0] = PICC_ANTICOLL;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2293      	movs	r2, #147	@ 0x93
 800273c:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	3301      	adds	r3, #1
 8002742:	2220      	movs	r2, #32
 8002744:	701a      	strb	r2, [r3, #0]
    status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8002746:	f107 0308 	add.w	r3, r7, #8
 800274a:	9300      	str	r3, [sp, #0]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2202      	movs	r2, #2
 8002750:	6879      	ldr	r1, [r7, #4]
 8002752:	200c      	movs	r0, #12
 8002754:	f7ff fef8 	bl	8002548 <MFRC522_ToCard>
 8002758:	4603      	mov	r3, r0
 800275a:	73fb      	strb	r3, [r7, #15]

    if (status == MI_OK)
 800275c:	7bfb      	ldrb	r3, [r7, #15]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d118      	bne.n	8002794 <MFRC522_Anticoll+0x70>
	{
    	 //Check card serial number
		for (i=0; i<4; i++)
 8002762:	2300      	movs	r3, #0
 8002764:	73bb      	strb	r3, [r7, #14]
 8002766:	e009      	b.n	800277c <MFRC522_Anticoll+0x58>
		{
		 	serNumCheck ^= serNum[i];
 8002768:	7bbb      	ldrb	r3, [r7, #14]
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	4413      	add	r3, r2
 800276e:	781a      	ldrb	r2, [r3, #0]
 8002770:	7b7b      	ldrb	r3, [r7, #13]
 8002772:	4053      	eors	r3, r2
 8002774:	737b      	strb	r3, [r7, #13]
		for (i=0; i<4; i++)
 8002776:	7bbb      	ldrb	r3, [r7, #14]
 8002778:	3301      	adds	r3, #1
 800277a:	73bb      	strb	r3, [r7, #14]
 800277c:	7bbb      	ldrb	r3, [r7, #14]
 800277e:	2b03      	cmp	r3, #3
 8002780:	d9f2      	bls.n	8002768 <MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i])
 8002782:	7bbb      	ldrb	r3, [r7, #14]
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	4413      	add	r3, r2
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	7b7a      	ldrb	r2, [r7, #13]
 800278c:	429a      	cmp	r2, r3
 800278e:	d001      	beq.n	8002794 <MFRC522_Anticoll+0x70>
		{
			status = MI_ERR;
 8002790:	2302      	movs	r3, #2
 8002792:	73fb      	strb	r3, [r7, #15]
		}
    }

    return status;
 8002794:	7bfb      	ldrb	r3, [r7, #15]
}
 8002796:	4618      	mov	r0, r3
 8002798:	3710      	adds	r7, #16
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
	...

080027a0 <scan_motor_up>:

extern int motor_status;
extern osThreadId motorTaskHandle;
extern osThreadId rfidExecuteTaskHandle;

void scan_motor_up(){
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
	if(limit_switch_up){
 80027a4:	4b12      	ldr	r3, [pc, #72]	@ (80027f0 <scan_motor_up+0x50>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d016      	beq.n	80027da <scan_motor_up+0x3a>
		TIM2->CCR2 = 0;
 80027ac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80027b0:	2200      	movs	r2, #0
 80027b2:	639a      	str	r2, [r3, #56]	@ 0x38
		motor_status = 1;
 80027b4:	4b0f      	ldr	r3, [pc, #60]	@ (80027f4 <scan_motor_up+0x54>)
 80027b6:	2201      	movs	r2, #1
 80027b8:	601a      	str	r2, [r3, #0]
		limit_switch_up = 0;
 80027ba:	4b0d      	ldr	r3, [pc, #52]	@ (80027f0 <scan_motor_up+0x50>)
 80027bc:	2200      	movs	r2, #0
 80027be:	601a      	str	r2, [r3, #0]
		Publisher_state();
 80027c0:	f001 fa10 	bl	8003be4 <Publisher_state>
		vTaskSuspend(rfidExecuteTaskHandle);
 80027c4:	4b0c      	ldr	r3, [pc, #48]	@ (80027f8 <scan_motor_up+0x58>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f006 f9a9 	bl	8008b20 <vTaskSuspend>
		vTaskSuspend(motorTaskHandle);
 80027ce:	4b0b      	ldr	r3, [pc, #44]	@ (80027fc <scan_motor_up+0x5c>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f006 f9a4 	bl	8008b20 <vTaskSuspend>
	}else{
		change_motor_direction(1);
		TIM2->CCR2 = 400;
	}
}
 80027d8:	e007      	b.n	80027ea <scan_motor_up+0x4a>
		change_motor_direction(1);
 80027da:	2001      	movs	r0, #1
 80027dc:	f000 f840 	bl	8002860 <change_motor_direction>
		TIM2->CCR2 = 400;
 80027e0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80027e4:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80027e8:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80027ea:	bf00      	nop
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	20007934 	.word	0x20007934
 80027f4:	200046e4 	.word	0x200046e4
 80027f8:	200046ec 	.word	0x200046ec
 80027fc:	200046f8 	.word	0x200046f8

08002800 <scan_motor_down>:

void scan_motor_down(){
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
	if(limit_switch_down){
 8002804:	4b12      	ldr	r3, [pc, #72]	@ (8002850 <scan_motor_down+0x50>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d016      	beq.n	800283a <scan_motor_down+0x3a>
		TIM2->CCR2 = 0;
 800280c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002810:	2200      	movs	r2, #0
 8002812:	639a      	str	r2, [r3, #56]	@ 0x38
		motor_status = 0;
 8002814:	4b0f      	ldr	r3, [pc, #60]	@ (8002854 <scan_motor_down+0x54>)
 8002816:	2200      	movs	r2, #0
 8002818:	601a      	str	r2, [r3, #0]
		limit_switch_down = 0;
 800281a:	4b0d      	ldr	r3, [pc, #52]	@ (8002850 <scan_motor_down+0x50>)
 800281c:	2200      	movs	r2, #0
 800281e:	601a      	str	r2, [r3, #0]
		Publisher_state();
 8002820:	f001 f9e0 	bl	8003be4 <Publisher_state>
		vTaskSuspend(rfidExecuteTaskHandle);
 8002824:	4b0c      	ldr	r3, [pc, #48]	@ (8002858 <scan_motor_down+0x58>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4618      	mov	r0, r3
 800282a:	f006 f979 	bl	8008b20 <vTaskSuspend>
		vTaskSuspend(motorTaskHandle);
 800282e:	4b0b      	ldr	r3, [pc, #44]	@ (800285c <scan_motor_down+0x5c>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4618      	mov	r0, r3
 8002834:	f006 f974 	bl	8008b20 <vTaskSuspend>
	}else{
		change_motor_direction(0);
		TIM2->CCR2 = 400;
	}
}
 8002838:	e007      	b.n	800284a <scan_motor_down+0x4a>
		change_motor_direction(0);
 800283a:	2000      	movs	r0, #0
 800283c:	f000 f810 	bl	8002860 <change_motor_direction>
		TIM2->CCR2 = 400;
 8002840:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002844:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8002848:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800284a:	bf00      	nop
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	20007938 	.word	0x20007938
 8002854:	200046e4 	.word	0x200046e4
 8002858:	200046ec 	.word	0x200046ec
 800285c:	200046f8 	.word	0x200046f8

08002860 <change_motor_direction>:

/* 1:반시계 0:시계*/
void change_motor_direction(int direction){
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
	if(direction == 1){
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d10a      	bne.n	8002884 <change_motor_direction+0x24>
		HAL_GPIO_WritePin(Direction0_GPIO_Port, Direction0_Pin, GPIO_PIN_SET);
 800286e:	2201      	movs	r2, #1
 8002870:	2101      	movs	r1, #1
 8002872:	480d      	ldr	r0, [pc, #52]	@ (80028a8 <change_motor_direction+0x48>)
 8002874:	f002 f8c4 	bl	8004a00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Direction1_GPIO_Port, Direction1_Pin, GPIO_PIN_RESET);
 8002878:	2200      	movs	r2, #0
 800287a:	2102      	movs	r1, #2
 800287c:	480a      	ldr	r0, [pc, #40]	@ (80028a8 <change_motor_direction+0x48>)
 800287e:	f002 f8bf 	bl	8004a00 <HAL_GPIO_WritePin>
	}else if(direction == 0){
		HAL_GPIO_WritePin(Direction0_GPIO_Port, Direction0_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(Direction1_GPIO_Port, Direction1_Pin, GPIO_PIN_SET);
	}
}
 8002882:	e00c      	b.n	800289e <change_motor_direction+0x3e>
	}else if(direction == 0){
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d109      	bne.n	800289e <change_motor_direction+0x3e>
		HAL_GPIO_WritePin(Direction0_GPIO_Port, Direction0_Pin, GPIO_PIN_RESET);
 800288a:	2200      	movs	r2, #0
 800288c:	2101      	movs	r1, #1
 800288e:	4806      	ldr	r0, [pc, #24]	@ (80028a8 <change_motor_direction+0x48>)
 8002890:	f002 f8b6 	bl	8004a00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Direction1_GPIO_Port, Direction1_Pin, GPIO_PIN_SET);
 8002894:	2201      	movs	r2, #1
 8002896:	2102      	movs	r1, #2
 8002898:	4803      	ldr	r0, [pc, #12]	@ (80028a8 <change_motor_direction+0x48>)
 800289a:	f002 f8b1 	bl	8004a00 <HAL_GPIO_WritePin>
}
 800289e:	bf00      	nop
 80028a0:	3708      	adds	r7, #8
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	40020000 	.word	0x40020000

080028ac <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80028b0:	4b17      	ldr	r3, [pc, #92]	@ (8002910 <MX_SPI2_Init+0x64>)
 80028b2:	4a18      	ldr	r2, [pc, #96]	@ (8002914 <MX_SPI2_Init+0x68>)
 80028b4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80028b6:	4b16      	ldr	r3, [pc, #88]	@ (8002910 <MX_SPI2_Init+0x64>)
 80028b8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80028bc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80028be:	4b14      	ldr	r3, [pc, #80]	@ (8002910 <MX_SPI2_Init+0x64>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80028c4:	4b12      	ldr	r3, [pc, #72]	@ (8002910 <MX_SPI2_Init+0x64>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80028ca:	4b11      	ldr	r3, [pc, #68]	@ (8002910 <MX_SPI2_Init+0x64>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80028d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002910 <MX_SPI2_Init+0x64>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80028d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002910 <MX_SPI2_Init+0x64>)
 80028d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028dc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80028de:	4b0c      	ldr	r3, [pc, #48]	@ (8002910 <MX_SPI2_Init+0x64>)
 80028e0:	2210      	movs	r2, #16
 80028e2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80028e4:	4b0a      	ldr	r3, [pc, #40]	@ (8002910 <MX_SPI2_Init+0x64>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80028ea:	4b09      	ldr	r3, [pc, #36]	@ (8002910 <MX_SPI2_Init+0x64>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028f0:	4b07      	ldr	r3, [pc, #28]	@ (8002910 <MX_SPI2_Init+0x64>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80028f6:	4b06      	ldr	r3, [pc, #24]	@ (8002910 <MX_SPI2_Init+0x64>)
 80028f8:	220a      	movs	r2, #10
 80028fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80028fc:	4804      	ldr	r0, [pc, #16]	@ (8002910 <MX_SPI2_Init+0x64>)
 80028fe:	f002 ff1b 	bl	8005738 <HAL_SPI_Init>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d001      	beq.n	800290c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002908:	f7ff fbd4 	bl	80020b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800290c:	bf00      	nop
 800290e:	bd80      	pop	{r7, pc}
 8002910:	2000793c 	.word	0x2000793c
 8002914:	40003800 	.word	0x40003800

08002918 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b08a      	sub	sp, #40	@ 0x28
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002920:	f107 0314 	add.w	r3, r7, #20
 8002924:	2200      	movs	r2, #0
 8002926:	601a      	str	r2, [r3, #0]
 8002928:	605a      	str	r2, [r3, #4]
 800292a:	609a      	str	r2, [r3, #8]
 800292c:	60da      	str	r2, [r3, #12]
 800292e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a34      	ldr	r2, [pc, #208]	@ (8002a08 <HAL_SPI_MspInit+0xf0>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d162      	bne.n	8002a00 <HAL_SPI_MspInit+0xe8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800293a:	2300      	movs	r3, #0
 800293c:	613b      	str	r3, [r7, #16]
 800293e:	4b33      	ldr	r3, [pc, #204]	@ (8002a0c <HAL_SPI_MspInit+0xf4>)
 8002940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002942:	4a32      	ldr	r2, [pc, #200]	@ (8002a0c <HAL_SPI_MspInit+0xf4>)
 8002944:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002948:	6413      	str	r3, [r2, #64]	@ 0x40
 800294a:	4b30      	ldr	r3, [pc, #192]	@ (8002a0c <HAL_SPI_MspInit+0xf4>)
 800294c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800294e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002952:	613b      	str	r3, [r7, #16]
 8002954:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002956:	2300      	movs	r3, #0
 8002958:	60fb      	str	r3, [r7, #12]
 800295a:	4b2c      	ldr	r3, [pc, #176]	@ (8002a0c <HAL_SPI_MspInit+0xf4>)
 800295c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800295e:	4a2b      	ldr	r2, [pc, #172]	@ (8002a0c <HAL_SPI_MspInit+0xf4>)
 8002960:	f043 0304 	orr.w	r3, r3, #4
 8002964:	6313      	str	r3, [r2, #48]	@ 0x30
 8002966:	4b29      	ldr	r3, [pc, #164]	@ (8002a0c <HAL_SPI_MspInit+0xf4>)
 8002968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800296a:	f003 0304 	and.w	r3, r3, #4
 800296e:	60fb      	str	r3, [r7, #12]
 8002970:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002972:	2300      	movs	r3, #0
 8002974:	60bb      	str	r3, [r7, #8]
 8002976:	4b25      	ldr	r3, [pc, #148]	@ (8002a0c <HAL_SPI_MspInit+0xf4>)
 8002978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800297a:	4a24      	ldr	r2, [pc, #144]	@ (8002a0c <HAL_SPI_MspInit+0xf4>)
 800297c:	f043 0302 	orr.w	r3, r3, #2
 8002980:	6313      	str	r3, [r2, #48]	@ 0x30
 8002982:	4b22      	ldr	r3, [pc, #136]	@ (8002a0c <HAL_SPI_MspInit+0xf4>)
 8002984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	60bb      	str	r3, [r7, #8]
 800298c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800298e:	2302      	movs	r3, #2
 8002990:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002992:	2302      	movs	r3, #2
 8002994:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002996:	2300      	movs	r3, #0
 8002998:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800299a:	2303      	movs	r3, #3
 800299c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 800299e:	2307      	movs	r3, #7
 80029a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029a2:	f107 0314 	add.w	r3, r7, #20
 80029a6:	4619      	mov	r1, r3
 80029a8:	4819      	ldr	r0, [pc, #100]	@ (8002a10 <HAL_SPI_MspInit+0xf8>)
 80029aa:	f001 fe95 	bl	80046d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80029ae:	2304      	movs	r3, #4
 80029b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b2:	2302      	movs	r3, #2
 80029b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b6:	2300      	movs	r3, #0
 80029b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ba:	2303      	movs	r3, #3
 80029bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80029be:	2305      	movs	r3, #5
 80029c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029c2:	f107 0314 	add.w	r3, r7, #20
 80029c6:	4619      	mov	r1, r3
 80029c8:	4811      	ldr	r0, [pc, #68]	@ (8002a10 <HAL_SPI_MspInit+0xf8>)
 80029ca:	f001 fe85 	bl	80046d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80029ce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80029d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d4:	2302      	movs	r3, #2
 80029d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d8:	2300      	movs	r3, #0
 80029da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029dc:	2303      	movs	r3, #3
 80029de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80029e0:	2305      	movs	r3, #5
 80029e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029e4:	f107 0314 	add.w	r3, r7, #20
 80029e8:	4619      	mov	r1, r3
 80029ea:	480a      	ldr	r0, [pc, #40]	@ (8002a14 <HAL_SPI_MspInit+0xfc>)
 80029ec:	f001 fe74 	bl	80046d8 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 80029f0:	2200      	movs	r2, #0
 80029f2:	2105      	movs	r1, #5
 80029f4:	2024      	movs	r0, #36	@ 0x24
 80029f6:	f001 fa43 	bl	8003e80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80029fa:	2024      	movs	r0, #36	@ 0x24
 80029fc:	f001 fa5c 	bl	8003eb8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002a00:	bf00      	nop
 8002a02:	3728      	adds	r7, #40	@ 0x28
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	40003800 	.word	0x40003800
 8002a0c:	40023800 	.word	0x40023800
 8002a10:	40020800 	.word	0x40020800
 8002a14:	40020400 	.word	0x40020400

08002a18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a1e:	2300      	movs	r3, #0
 8002a20:	607b      	str	r3, [r7, #4]
 8002a22:	4b12      	ldr	r3, [pc, #72]	@ (8002a6c <HAL_MspInit+0x54>)
 8002a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a26:	4a11      	ldr	r2, [pc, #68]	@ (8002a6c <HAL_MspInit+0x54>)
 8002a28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a2e:	4b0f      	ldr	r3, [pc, #60]	@ (8002a6c <HAL_MspInit+0x54>)
 8002a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a36:	607b      	str	r3, [r7, #4]
 8002a38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	603b      	str	r3, [r7, #0]
 8002a3e:	4b0b      	ldr	r3, [pc, #44]	@ (8002a6c <HAL_MspInit+0x54>)
 8002a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a42:	4a0a      	ldr	r2, [pc, #40]	@ (8002a6c <HAL_MspInit+0x54>)
 8002a44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a48:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a4a:	4b08      	ldr	r3, [pc, #32]	@ (8002a6c <HAL_MspInit+0x54>)
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a52:	603b      	str	r3, [r7, #0]
 8002a54:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002a56:	2200      	movs	r2, #0
 8002a58:	210f      	movs	r1, #15
 8002a5a:	f06f 0001 	mvn.w	r0, #1
 8002a5e:	f001 fa0f 	bl	8003e80 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a62:	bf00      	nop
 8002a64:	3708      	adds	r7, #8
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	40023800 	.word	0x40023800

08002a70 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b08e      	sub	sp, #56	@ 0x38
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8002a80:	2300      	movs	r3, #0
 8002a82:	60fb      	str	r3, [r7, #12]
 8002a84:	4b33      	ldr	r3, [pc, #204]	@ (8002b54 <HAL_InitTick+0xe4>)
 8002a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a88:	4a32      	ldr	r2, [pc, #200]	@ (8002b54 <HAL_InitTick+0xe4>)
 8002a8a:	f043 0304 	orr.w	r3, r3, #4
 8002a8e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a90:	4b30      	ldr	r3, [pc, #192]	@ (8002b54 <HAL_InitTick+0xe4>)
 8002a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a94:	f003 0304 	and.w	r3, r3, #4
 8002a98:	60fb      	str	r3, [r7, #12]
 8002a9a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002a9c:	f107 0210 	add.w	r2, r7, #16
 8002aa0:	f107 0314 	add.w	r3, r7, #20
 8002aa4:	4611      	mov	r1, r2
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f002 f946 	bl	8004d38 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002aac:	6a3b      	ldr	r3, [r7, #32]
 8002aae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d103      	bne.n	8002abe <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002ab6:	f002 f917 	bl	8004ce8 <HAL_RCC_GetPCLK1Freq>
 8002aba:	6378      	str	r0, [r7, #52]	@ 0x34
 8002abc:	e004      	b.n	8002ac8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002abe:	f002 f913 	bl	8004ce8 <HAL_RCC_GetPCLK1Freq>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002ac8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002aca:	4a23      	ldr	r2, [pc, #140]	@ (8002b58 <HAL_InitTick+0xe8>)
 8002acc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad0:	0c9b      	lsrs	r3, r3, #18
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8002ad6:	4b21      	ldr	r3, [pc, #132]	@ (8002b5c <HAL_InitTick+0xec>)
 8002ad8:	4a21      	ldr	r2, [pc, #132]	@ (8002b60 <HAL_InitTick+0xf0>)
 8002ada:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8002adc:	4b1f      	ldr	r3, [pc, #124]	@ (8002b5c <HAL_InitTick+0xec>)
 8002ade:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002ae2:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8002ae4:	4a1d      	ldr	r2, [pc, #116]	@ (8002b5c <HAL_InitTick+0xec>)
 8002ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ae8:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8002aea:	4b1c      	ldr	r3, [pc, #112]	@ (8002b5c <HAL_InitTick+0xec>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002af0:	4b1a      	ldr	r3, [pc, #104]	@ (8002b5c <HAL_InitTick+0xec>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002af6:	4b19      	ldr	r3, [pc, #100]	@ (8002b5c <HAL_InitTick+0xec>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8002afc:	4817      	ldr	r0, [pc, #92]	@ (8002b5c <HAL_InitTick+0xec>)
 8002afe:	f003 fa43 	bl	8005f88 <HAL_TIM_Base_Init>
 8002b02:	4603      	mov	r3, r0
 8002b04:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002b08:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d11b      	bne.n	8002b48 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8002b10:	4812      	ldr	r0, [pc, #72]	@ (8002b5c <HAL_InitTick+0xec>)
 8002b12:	f003 fa93 	bl	800603c <HAL_TIM_Base_Start_IT>
 8002b16:	4603      	mov	r3, r0
 8002b18:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002b1c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d111      	bne.n	8002b48 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002b24:	201e      	movs	r0, #30
 8002b26:	f001 f9c7 	bl	8003eb8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2b0f      	cmp	r3, #15
 8002b2e:	d808      	bhi.n	8002b42 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8002b30:	2200      	movs	r2, #0
 8002b32:	6879      	ldr	r1, [r7, #4]
 8002b34:	201e      	movs	r0, #30
 8002b36:	f001 f9a3 	bl	8003e80 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002b3a:	4a0a      	ldr	r2, [pc, #40]	@ (8002b64 <HAL_InitTick+0xf4>)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6013      	str	r3, [r2, #0]
 8002b40:	e002      	b.n	8002b48 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002b48:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3738      	adds	r7, #56	@ 0x38
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	40023800 	.word	0x40023800
 8002b58:	431bde83 	.word	0x431bde83
 8002b5c:	20007994 	.word	0x20007994
 8002b60:	40000800 	.word	0x40000800
 8002b64:	20000010 	.word	0x20000010

08002b68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002b6c:	bf00      	nop
 8002b6e:	e7fd      	b.n	8002b6c <NMI_Handler+0x4>

08002b70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b74:	bf00      	nop
 8002b76:	e7fd      	b.n	8002b74 <HardFault_Handler+0x4>

08002b78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b7c:	bf00      	nop
 8002b7e:	e7fd      	b.n	8002b7c <MemManage_Handler+0x4>

08002b80 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b84:	bf00      	nop
 8002b86:	e7fd      	b.n	8002b84 <BusFault_Handler+0x4>

08002b88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b8c:	bf00      	nop
 8002b8e:	e7fd      	b.n	8002b8c <UsageFault_Handler+0x4>

08002b90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b94:	bf00      	nop
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr

08002b9e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Limit_switch_up_Pin);
 8002ba2:	2010      	movs	r0, #16
 8002ba4:	f001 ff46 	bl	8004a34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002ba8:	bf00      	nop
 8002baa:	bd80      	pop	{r7, pc}

08002bac <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8002bb0:	4802      	ldr	r0, [pc, #8]	@ (8002bbc <DMA1_Stream0_IRQHandler+0x10>)
 8002bb2:	f001 fb27 	bl	8004204 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002bb6:	bf00      	nop
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	20008850 	.word	0x20008850

08002bc0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002bc4:	4802      	ldr	r0, [pc, #8]	@ (8002bd0 <DMA1_Stream5_IRQHandler+0x10>)
 8002bc6:	f001 fb1d 	bl	8004204 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002bca:	bf00      	nop
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	20008910 	.word	0x20008910

08002bd4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Limit_switch_down_Pin);
 8002bd8:	2020      	movs	r0, #32
 8002bda:	f001 ff2b 	bl	8004a34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002bde:	bf00      	nop
 8002be0:	bd80      	pop	{r7, pc}
	...

08002be4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002be8:	4802      	ldr	r0, [pc, #8]	@ (8002bf4 <TIM4_IRQHandler+0x10>)
 8002bea:	f003 fbaf 	bl	800634c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002bee:	bf00      	nop
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	20007994 	.word	0x20007994

08002bf8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002bfc:	4802      	ldr	r0, [pc, #8]	@ (8002c08 <SPI2_IRQHandler+0x10>)
 8002bfe:	f002 ffd5 	bl	8005bac <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002c02:	bf00      	nop
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	2000793c 	.word	0x2000793c

08002c0c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002c10:	4802      	ldr	r0, [pc, #8]	@ (8002c1c <USART1_IRQHandler+0x10>)
 8002c12:	f004 fa77 	bl	8007104 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002c16:	bf00      	nop
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	20008730 	.word	0x20008730

08002c20 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002c24:	4802      	ldr	r0, [pc, #8]	@ (8002c30 <USART3_IRQHandler+0x10>)
 8002c26:	f004 fa6d 	bl	8007104 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002c2a:	bf00      	nop
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	200087c0 	.word	0x200087c0

08002c34 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8002c38:	4802      	ldr	r0, [pc, #8]	@ (8002c44 <DMA2_Stream1_IRQHandler+0x10>)
 8002c3a:	f001 fae3 	bl	8004204 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002c3e:	bf00      	nop
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	20008970 	.word	0x20008970

08002c48 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002c4c:	4802      	ldr	r0, [pc, #8]	@ (8002c58 <DMA2_Stream5_IRQHandler+0x10>)
 8002c4e:	f001 fad9 	bl	8004204 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8002c52:	bf00      	nop
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	200088b0 	.word	0x200088b0

08002c5c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8002c60:	4802      	ldr	r0, [pc, #8]	@ (8002c6c <DMA2_Stream6_IRQHandler+0x10>)
 8002c62:	f001 facf 	bl	8004204 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8002c66:	bf00      	nop
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	200089d0 	.word	0x200089d0

08002c70 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002c74:	4802      	ldr	r0, [pc, #8]	@ (8002c80 <USART6_IRQHandler+0x10>)
 8002c76:	f004 fa45 	bl	8007104 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002c7a:	bf00      	nop
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	20008808 	.word	0x20008808

08002c84 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  return 1;
 8002c88:	2301      	movs	r3, #1
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <_kill>:

int _kill(int pid, int sig)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002c9e:	f015 f981 	bl	8017fa4 <__errno>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2216      	movs	r2, #22
 8002ca6:	601a      	str	r2, [r3, #0]
  return -1;
 8002ca8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3708      	adds	r7, #8
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <_exit>:

void _exit (int status)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002cbc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f7ff ffe7 	bl	8002c94 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002cc6:	bf00      	nop
 8002cc8:	e7fd      	b.n	8002cc6 <_exit+0x12>

08002cca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b086      	sub	sp, #24
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	60f8      	str	r0, [r7, #12]
 8002cd2:	60b9      	str	r1, [r7, #8]
 8002cd4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	617b      	str	r3, [r7, #20]
 8002cda:	e00a      	b.n	8002cf2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002cdc:	f3af 8000 	nop.w
 8002ce0:	4601      	mov	r1, r0
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	1c5a      	adds	r2, r3, #1
 8002ce6:	60ba      	str	r2, [r7, #8]
 8002ce8:	b2ca      	uxtb	r2, r1
 8002cea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	3301      	adds	r3, #1
 8002cf0:	617b      	str	r3, [r7, #20]
 8002cf2:	697a      	ldr	r2, [r7, #20]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	dbf0      	blt.n	8002cdc <_read+0x12>
  }

  return len;
 8002cfa:	687b      	ldr	r3, [r7, #4]
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3718      	adds	r7, #24
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b086      	sub	sp, #24
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d10:	2300      	movs	r3, #0
 8002d12:	617b      	str	r3, [r7, #20]
 8002d14:	e009      	b.n	8002d2a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	1c5a      	adds	r2, r3, #1
 8002d1a:	60ba      	str	r2, [r7, #8]
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	3301      	adds	r3, #1
 8002d28:	617b      	str	r3, [r7, #20]
 8002d2a:	697a      	ldr	r2, [r7, #20]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	dbf1      	blt.n	8002d16 <_write+0x12>
  }
  return len;
 8002d32:	687b      	ldr	r3, [r7, #4]
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3718      	adds	r7, #24
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <_close>:

int _close(int file)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002d44:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002d64:	605a      	str	r2, [r3, #4]
  return 0;
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <_isatty>:

int _isatty(int file)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002d7c:	2301      	movs	r3, #1
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr

08002d8a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	b085      	sub	sp, #20
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	60f8      	str	r0, [r7, #12]
 8002d92:	60b9      	str	r1, [r7, #8]
 8002d94:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002d96:	2300      	movs	r3, #0
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3714      	adds	r7, #20
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b086      	sub	sp, #24
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002dac:	4a14      	ldr	r2, [pc, #80]	@ (8002e00 <_sbrk+0x5c>)
 8002dae:	4b15      	ldr	r3, [pc, #84]	@ (8002e04 <_sbrk+0x60>)
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002db8:	4b13      	ldr	r3, [pc, #76]	@ (8002e08 <_sbrk+0x64>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d102      	bne.n	8002dc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002dc0:	4b11      	ldr	r3, [pc, #68]	@ (8002e08 <_sbrk+0x64>)
 8002dc2:	4a12      	ldr	r2, [pc, #72]	@ (8002e0c <_sbrk+0x68>)
 8002dc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002dc6:	4b10      	ldr	r3, [pc, #64]	@ (8002e08 <_sbrk+0x64>)
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4413      	add	r3, r2
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d207      	bcs.n	8002de4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002dd4:	f015 f8e6 	bl	8017fa4 <__errno>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	220c      	movs	r2, #12
 8002ddc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002dde:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002de2:	e009      	b.n	8002df8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002de4:	4b08      	ldr	r3, [pc, #32]	@ (8002e08 <_sbrk+0x64>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002dea:	4b07      	ldr	r3, [pc, #28]	@ (8002e08 <_sbrk+0x64>)
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4413      	add	r3, r2
 8002df2:	4a05      	ldr	r2, [pc, #20]	@ (8002e08 <_sbrk+0x64>)
 8002df4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002df6:	68fb      	ldr	r3, [r7, #12]
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3718      	adds	r7, #24
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	20020000 	.word	0x20020000
 8002e04:	00000400 	.word	0x00000400
 8002e08:	200079e0 	.word	0x200079e0
 8002e0c:	20011450 	.word	0x20011450

08002e10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e10:	b480      	push	{r7}
 8002e12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e14:	4b06      	ldr	r3, [pc, #24]	@ (8002e30 <SystemInit+0x20>)
 8002e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e1a:	4a05      	ldr	r2, [pc, #20]	@ (8002e30 <SystemInit+0x20>)
 8002e1c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002e20:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e24:	bf00      	nop
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	e000ed00 	.word	0xe000ed00

08002e34 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b08a      	sub	sp, #40	@ 0x28
 8002e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e3a:	f107 0320 	add.w	r3, r7, #32
 8002e3e:	2200      	movs	r2, #0
 8002e40:	601a      	str	r2, [r3, #0]
 8002e42:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e44:	1d3b      	adds	r3, r7, #4
 8002e46:	2200      	movs	r2, #0
 8002e48:	601a      	str	r2, [r3, #0]
 8002e4a:	605a      	str	r2, [r3, #4]
 8002e4c:	609a      	str	r2, [r3, #8]
 8002e4e:	60da      	str	r2, [r3, #12]
 8002e50:	611a      	str	r2, [r3, #16]
 8002e52:	615a      	str	r2, [r3, #20]
 8002e54:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002e56:	4b22      	ldr	r3, [pc, #136]	@ (8002ee0 <MX_TIM2_Init+0xac>)
 8002e58:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002e5c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 8002e5e:	4b20      	ldr	r3, [pc, #128]	@ (8002ee0 <MX_TIM2_Init+0xac>)
 8002e60:	2259      	movs	r2, #89	@ 0x59
 8002e62:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e64:	4b1e      	ldr	r3, [pc, #120]	@ (8002ee0 <MX_TIM2_Init+0xac>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8002e6a:	4b1d      	ldr	r3, [pc, #116]	@ (8002ee0 <MX_TIM2_Init+0xac>)
 8002e6c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002e70:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e72:	4b1b      	ldr	r3, [pc, #108]	@ (8002ee0 <MX_TIM2_Init+0xac>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e78:	4b19      	ldr	r3, [pc, #100]	@ (8002ee0 <MX_TIM2_Init+0xac>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002e7e:	4818      	ldr	r0, [pc, #96]	@ (8002ee0 <MX_TIM2_Init+0xac>)
 8002e80:	f003 f94c 	bl	800611c <HAL_TIM_PWM_Init>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8002e8a:	f7ff f913 	bl	80020b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e92:	2300      	movs	r3, #0
 8002e94:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e96:	f107 0320 	add.w	r3, r7, #32
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	4810      	ldr	r0, [pc, #64]	@ (8002ee0 <MX_TIM2_Init+0xac>)
 8002e9e:	f003 feb1 	bl	8006c04 <HAL_TIMEx_MasterConfigSynchronization>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d001      	beq.n	8002eac <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002ea8:	f7ff f904 	bl	80020b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002eac:	2360      	movs	r3, #96	@ 0x60
 8002eae:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ebc:	1d3b      	adds	r3, r7, #4
 8002ebe:	2204      	movs	r2, #4
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	4807      	ldr	r0, [pc, #28]	@ (8002ee0 <MX_TIM2_Init+0xac>)
 8002ec4:	f003 fb32 	bl	800652c <HAL_TIM_PWM_ConfigChannel>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8002ece:	f7ff f8f1 	bl	80020b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002ed2:	4803      	ldr	r0, [pc, #12]	@ (8002ee0 <MX_TIM2_Init+0xac>)
 8002ed4:	f000 f826 	bl	8002f24 <HAL_TIM_MspPostInit>

}
 8002ed8:	bf00      	nop
 8002eda:	3728      	adds	r7, #40	@ 0x28
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	200079e4 	.word	0x200079e4

08002ee4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b085      	sub	sp, #20
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ef4:	d10d      	bne.n	8002f12 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	60fb      	str	r3, [r7, #12]
 8002efa:	4b09      	ldr	r3, [pc, #36]	@ (8002f20 <HAL_TIM_PWM_MspInit+0x3c>)
 8002efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002efe:	4a08      	ldr	r2, [pc, #32]	@ (8002f20 <HAL_TIM_PWM_MspInit+0x3c>)
 8002f00:	f043 0301 	orr.w	r3, r3, #1
 8002f04:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f06:	4b06      	ldr	r3, [pc, #24]	@ (8002f20 <HAL_TIM_PWM_MspInit+0x3c>)
 8002f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f0a:	f003 0301 	and.w	r3, r3, #1
 8002f0e:	60fb      	str	r3, [r7, #12]
 8002f10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002f12:	bf00      	nop
 8002f14:	3714      	adds	r7, #20
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	40023800 	.word	0x40023800

08002f24 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b088      	sub	sp, #32
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f2c:	f107 030c 	add.w	r3, r7, #12
 8002f30:	2200      	movs	r2, #0
 8002f32:	601a      	str	r2, [r3, #0]
 8002f34:	605a      	str	r2, [r3, #4]
 8002f36:	609a      	str	r2, [r3, #8]
 8002f38:	60da      	str	r2, [r3, #12]
 8002f3a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f44:	d11e      	bne.n	8002f84 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f46:	2300      	movs	r3, #0
 8002f48:	60bb      	str	r3, [r7, #8]
 8002f4a:	4b10      	ldr	r3, [pc, #64]	@ (8002f8c <HAL_TIM_MspPostInit+0x68>)
 8002f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f4e:	4a0f      	ldr	r2, [pc, #60]	@ (8002f8c <HAL_TIM_MspPostInit+0x68>)
 8002f50:	f043 0302 	orr.w	r3, r3, #2
 8002f54:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f56:	4b0d      	ldr	r3, [pc, #52]	@ (8002f8c <HAL_TIM_MspPostInit+0x68>)
 8002f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	60bb      	str	r3, [r7, #8]
 8002f60:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB9     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002f62:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f66:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f68:	2302      	movs	r3, #2
 8002f6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f70:	2300      	movs	r3, #0
 8002f72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002f74:	2301      	movs	r3, #1
 8002f76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f78:	f107 030c 	add.w	r3, r7, #12
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	4804      	ldr	r0, [pc, #16]	@ (8002f90 <HAL_TIM_MspPostInit+0x6c>)
 8002f80:	f001 fbaa 	bl	80046d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002f84:	bf00      	nop
 8002f86:	3720      	adds	r7, #32
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	40023800 	.word	0x40023800
 8002f90:	40020400 	.word	0x40020400

08002f94 <uart_init>:

queue8_t uart_queue;
queue8_t uart5_queue;
queue8_t uart2_queue;

void uart_init(){
 8002f94:	b580      	push	{r7, lr}
 8002f96:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&huart1, uart_queue.buf, QUEUE_BUF_MAX) ;
 8002f98:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002f9c:	490d      	ldr	r1, [pc, #52]	@ (8002fd4 <uart_init+0x40>)
 8002f9e:	480e      	ldr	r0, [pc, #56]	@ (8002fd8 <uart_init+0x44>)
 8002fa0:	f004 f80c 	bl	8006fbc <HAL_UART_Receive_DMA>
	uart_queue.q_in_index = 0;
 8002fa4:	4b0b      	ldr	r3, [pc, #44]	@ (8002fd4 <uart_init+0x40>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
	uart_queue.q_out_index = 0;
 8002fac:	4b09      	ldr	r3, [pc, #36]	@ (8002fd4 <uart_init+0x40>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102

	HAL_UART_Receive_DMA(&huart5, uart5_queue.buf, QUEUE_BUF_MAX);
 8002fb4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002fb8:	4908      	ldr	r1, [pc, #32]	@ (8002fdc <uart_init+0x48>)
 8002fba:	4809      	ldr	r0, [pc, #36]	@ (8002fe0 <uart_init+0x4c>)
 8002fbc:	f003 fffe 	bl	8006fbc <HAL_UART_Receive_DMA>
	uart5_queue.q_in_index = 0;
 8002fc0:	4b06      	ldr	r3, [pc, #24]	@ (8002fdc <uart_init+0x48>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
	uart5_queue.q_out_index = 0;
 8002fc8:	4b04      	ldr	r3, [pc, #16]	@ (8002fdc <uart_init+0x48>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
}
 8002fd0:	bf00      	nop
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	20007a2c 	.word	0x20007a2c
 8002fd8:	20008730 	.word	0x20008730
 8002fdc:	20007b30 	.word	0x20007b30
 8002fe0:	200086e8 	.word	0x200086e8

08002fe4 <uart_available>:

uint32_t uart_available(void){
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
	uint32_t ret = 0;
 8002fea:	2300      	movs	r3, #0
 8002fec:	607b      	str	r3, [r7, #4]
	uart_queue.q_in_index = (QUEUE_BUF_MAX - huart1.hdmarx->Instance->NDTR) % QUEUE_BUF_MAX; //원형 큐
 8002fee:	4b11      	ldr	r3, [pc, #68]	@ (8003034 <uart_available+0x50>)
 8002ff0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	b29a      	uxth	r2, r3
 8003002:	4b0d      	ldr	r3, [pc, #52]	@ (8003038 <uart_available+0x54>)
 8003004:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
//	hdmarx->Instance->CNDTR
	ret = (QUEUE_BUF_MAX + uart_queue.q_in_index - uart_queue.q_out_index) % QUEUE_BUF_MAX; // 버퍼 데이터 개수
 8003008:	4b0b      	ldr	r3, [pc, #44]	@ (8003038 <uart_available+0x54>)
 800300a:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 800300e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003012:	4a09      	ldr	r2, [pc, #36]	@ (8003038 <uart_available+0x54>)
 8003014:	f8b2 2102 	ldrh.w	r2, [r2, #258]	@ 0x102
 8003018:	1a9b      	subs	r3, r3, r2
 800301a:	425a      	negs	r2, r3
 800301c:	b2db      	uxtb	r3, r3
 800301e:	b2d2      	uxtb	r2, r2
 8003020:	bf58      	it	pl
 8003022:	4253      	negpl	r3, r2
 8003024:	607b      	str	r3, [r7, #4]

	return ret;
 8003026:	687b      	ldr	r3, [r7, #4]
}
 8003028:	4618      	mov	r0, r3
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr
 8003034:	20008730 	.word	0x20008730
 8003038:	20007a2c 	.word	0x20007a2c

0800303c <uart_q8_read>:

uint8_t uart_q8_read(void){
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
	uint8_t ret =0;
 8003042:	2300      	movs	r3, #0
 8003044:	71fb      	strb	r3, [r7, #7]
	if(uart_queue.q_out_index != uart_queue.q_in_index){
 8003046:	4b11      	ldr	r3, [pc, #68]	@ (800308c <uart_q8_read+0x50>)
 8003048:	f8b3 2102 	ldrh.w	r2, [r3, #258]	@ 0x102
 800304c:	4b0f      	ldr	r3, [pc, #60]	@ (800308c <uart_q8_read+0x50>)
 800304e:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 8003052:	429a      	cmp	r2, r3
 8003054:	d013      	beq.n	800307e <uart_q8_read+0x42>
		ret = uart_queue.buf[uart_queue.q_out_index];
 8003056:	4b0d      	ldr	r3, [pc, #52]	@ (800308c <uart_q8_read+0x50>)
 8003058:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 800305c:	461a      	mov	r2, r3
 800305e:	4b0b      	ldr	r3, [pc, #44]	@ (800308c <uart_q8_read+0x50>)
 8003060:	5c9b      	ldrb	r3, [r3, r2]
 8003062:	71fb      	strb	r3, [r7, #7]
		uart_queue.q_out_index = (uart_queue.q_out_index +1) % QUEUE_BUF_MAX;
 8003064:	4b09      	ldr	r3, [pc, #36]	@ (800308c <uart_q8_read+0x50>)
 8003066:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 800306a:	3301      	adds	r3, #1
 800306c:	425a      	negs	r2, r3
 800306e:	b2db      	uxtb	r3, r3
 8003070:	b2d2      	uxtb	r2, r2
 8003072:	bf58      	it	pl
 8003074:	4253      	negpl	r3, r2
 8003076:	b29a      	uxth	r2, r3
 8003078:	4b04      	ldr	r3, [pc, #16]	@ (800308c <uart_q8_read+0x50>)
 800307a:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
	}

	return ret;
 800307e:	79fb      	ldrb	r3, [r7, #7]
}
 8003080:	4618      	mov	r0, r3
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr
 800308c:	20007a2c 	.word	0x20007a2c

08003090 <read_rfid_number>:

uint8_t rfid_number[READ_BOOK_MAX_SIZE][12] = {0,}; //파싱한 rfid 번호 저장
uint8_t recive_data[24] = {0,}; //RFID 태그 한개에서 receive 한 data 저장
uint8_t book_num = 0;  //책 순서
uint8_t book_byte_num = 0; //책 태그의 바이트 순서
void read_rfid_number(){
 8003090:	b590      	push	{r4, r7, lr}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
	uint8_t i;
	if(uart_available()){ // 데이터 있으면
 8003096:	f7ff ffa5 	bl	8002fe4 <uart_available>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d042      	beq.n	8003126 <read_rfid_number+0x96>
		uint8_t read_byte =  uart_q8_read(); // 버퍼에서 1byte 읽고
 80030a0:	f7ff ffcc 	bl	800303c <uart_q8_read>
 80030a4:	4603      	mov	r3, r0
 80030a6:	71bb      	strb	r3, [r7, #6]
		recive_data[book_byte_num++] = read_byte;
 80030a8:	4b21      	ldr	r3, [pc, #132]	@ (8003130 <read_rfid_number+0xa0>)
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	1c5a      	adds	r2, r3, #1
 80030ae:	b2d1      	uxtb	r1, r2
 80030b0:	4a1f      	ldr	r2, [pc, #124]	@ (8003130 <read_rfid_number+0xa0>)
 80030b2:	7011      	strb	r1, [r2, #0]
 80030b4:	4619      	mov	r1, r3
 80030b6:	4a1f      	ldr	r2, [pc, #124]	@ (8003134 <read_rfid_number+0xa4>)
 80030b8:	79bb      	ldrb	r3, [r7, #6]
 80030ba:	5453      	strb	r3, [r2, r1]
		if(read_byte == 0x7E) { // 마지막 데이터이면
 80030bc:	79bb      	ldrb	r3, [r7, #6]
 80030be:	2b7e      	cmp	r3, #126	@ 0x7e
 80030c0:	d126      	bne.n	8003110 <read_rfid_number+0x80>
			if(recive_data[1] != 0x01){ //인식이 된 경우 8~19 12byte rfid number
 80030c2:	4b1c      	ldr	r3, [pc, #112]	@ (8003134 <read_rfid_number+0xa4>)
 80030c4:	785b      	ldrb	r3, [r3, #1]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d01f      	beq.n	800310a <read_rfid_number+0x7a>
				for( i=8; i<=19; i ++)
 80030ca:	2308      	movs	r3, #8
 80030cc:	71fb      	strb	r3, [r7, #7]
 80030ce:	e013      	b.n	80030f8 <read_rfid_number+0x68>
					rfid_number[book_num][i-8] = recive_data[i];
 80030d0:	79fb      	ldrb	r3, [r7, #7]
 80030d2:	4a19      	ldr	r2, [pc, #100]	@ (8003138 <read_rfid_number+0xa8>)
 80030d4:	7812      	ldrb	r2, [r2, #0]
 80030d6:	4610      	mov	r0, r2
 80030d8:	79fa      	ldrb	r2, [r7, #7]
 80030da:	3a08      	subs	r2, #8
 80030dc:	4915      	ldr	r1, [pc, #84]	@ (8003134 <read_rfid_number+0xa4>)
 80030de:	5ccc      	ldrb	r4, [r1, r3]
 80030e0:	4916      	ldr	r1, [pc, #88]	@ (800313c <read_rfid_number+0xac>)
 80030e2:	4603      	mov	r3, r0
 80030e4:	005b      	lsls	r3, r3, #1
 80030e6:	4403      	add	r3, r0
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	440b      	add	r3, r1
 80030ec:	4413      	add	r3, r2
 80030ee:	4622      	mov	r2, r4
 80030f0:	701a      	strb	r2, [r3, #0]
				for( i=8; i<=19; i ++)
 80030f2:	79fb      	ldrb	r3, [r7, #7]
 80030f4:	3301      	adds	r3, #1
 80030f6:	71fb      	strb	r3, [r7, #7]
 80030f8:	79fb      	ldrb	r3, [r7, #7]
 80030fa:	2b13      	cmp	r3, #19
 80030fc:	d9e8      	bls.n	80030d0 <read_rfid_number+0x40>
				book_num ++;
 80030fe:	4b0e      	ldr	r3, [pc, #56]	@ (8003138 <read_rfid_number+0xa8>)
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	3301      	adds	r3, #1
 8003104:	b2da      	uxtb	r2, r3
 8003106:	4b0c      	ldr	r3, [pc, #48]	@ (8003138 <read_rfid_number+0xa8>)
 8003108:	701a      	strb	r2, [r3, #0]
			}
			book_byte_num = 0;
 800310a:	4b09      	ldr	r3, [pc, #36]	@ (8003130 <read_rfid_number+0xa0>)
 800310c:	2200      	movs	r2, #0
 800310e:	701a      	strb	r2, [r3, #0]
		}
		if(!uart_available()){ //다 읽었으면
 8003110:	f7ff ff68 	bl	8002fe4 <uart_available>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d105      	bne.n	8003126 <read_rfid_number+0x96>
			osSignalSet(tagNumTransmitTHandle, transmitSignal); //전송 이벤트 생성
 800311a:	4b09      	ldr	r3, [pc, #36]	@ (8003140 <read_rfid_number+0xb0>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2101      	movs	r1, #1
 8003120:	4618      	mov	r0, r3
 8003122:	f005 f9d7 	bl	80084d4 <osSignalSet>
			//vTaskSuspend(defaultTaskHandle);
			}
		}
}
 8003126:	bf00      	nop
 8003128:	370c      	adds	r7, #12
 800312a:	46bd      	mov	sp, r7
 800312c:	bd90      	pop	{r4, r7, pc}
 800312e:	bf00      	nop
 8003130:	20008201 	.word	0x20008201
 8003134:	200081e8 	.word	0x200081e8
 8003138:	20008200 	.word	0x20008200
 800313c:	20007d38 	.word	0x20007d38
 8003140:	200046f0 	.word	0x200046f0

08003144 <transmitData>:

void transmitData(){
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
	int i=0;
 800314a:	2300      	movs	r3, #0
 800314c:	607b      	str	r3, [r7, #4]
	while(rfid_number[i][0] != 0){
 800314e:	e01c      	b.n	800318a <transmitData+0x46>
		//computer
		HAL_UART_Transmit(&huart2, rfid_number[i], sizeof(rfid_number[i]), 500);
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	4613      	mov	r3, r2
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	4413      	add	r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	4a17      	ldr	r2, [pc, #92]	@ (80031b8 <transmitData+0x74>)
 800315c:	1899      	adds	r1, r3, r2
 800315e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003162:	220c      	movs	r2, #12
 8003164:	4815      	ldr	r0, [pc, #84]	@ (80031bc <transmitData+0x78>)
 8003166:	f003 fe2d 	bl	8006dc4 <HAL_UART_Transmit>
		//esp32
		HAL_UART_Transmit(&huart3, rfid_number[i], sizeof(rfid_number[i]), 500);
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	4613      	mov	r3, r2
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	4413      	add	r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	4a10      	ldr	r2, [pc, #64]	@ (80031b8 <transmitData+0x74>)
 8003176:	1899      	adds	r1, r3, r2
 8003178:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800317c:	220c      	movs	r2, #12
 800317e:	4810      	ldr	r0, [pc, #64]	@ (80031c0 <transmitData+0x7c>)
 8003180:	f003 fe20 	bl	8006dc4 <HAL_UART_Transmit>
		i++;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	3301      	adds	r3, #1
 8003188:	607b      	str	r3, [r7, #4]
	while(rfid_number[i][0] != 0){
 800318a:	490b      	ldr	r1, [pc, #44]	@ (80031b8 <transmitData+0x74>)
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	4613      	mov	r3, r2
 8003190:	005b      	lsls	r3, r3, #1
 8003192:	4413      	add	r3, r2
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	440b      	add	r3, r1
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d1d8      	bne.n	8003150 <transmitData+0xc>
		}
	memset(rfid_number,0,sizeof(rfid_number));
 800319e:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 80031a2:	2100      	movs	r1, #0
 80031a4:	4804      	ldr	r0, [pc, #16]	@ (80031b8 <transmitData+0x74>)
 80031a6:	f014 fe0f 	bl	8017dc8 <memset>
	book_num =0;
 80031aa:	4b06      	ldr	r3, [pc, #24]	@ (80031c4 <transmitData+0x80>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	701a      	strb	r2, [r3, #0]

}
 80031b0:	bf00      	nop
 80031b2:	3708      	adds	r7, #8
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	20007d38 	.word	0x20007d38
 80031bc:	20008778 	.word	0x20008778
 80031c0:	200087c0 	.word	0x200087c0
 80031c4:	20008200 	.word	0x20008200

080031c8 <uart5_available>:

uint32_t uart5_available(void){
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
	uint32_t ret = 0;
 80031ce:	2300      	movs	r3, #0
 80031d0:	607b      	str	r3, [r7, #4]
	uart5_queue.q_in_index = (QUEUE_BUF_MAX - huart5.hdmarx->Instance->NDTR) % QUEUE_BUF_MAX; //원형 큐
 80031d2:	4b11      	ldr	r3, [pc, #68]	@ (8003218 <uart5_available+0x50>)
 80031d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	b29b      	uxth	r3, r3
 80031dc:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	b29a      	uxth	r2, r3
 80031e6:	4b0d      	ldr	r3, [pc, #52]	@ (800321c <uart5_available+0x54>)
 80031e8:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
//	hdmarx->Instance->CNDTR
	ret = (QUEUE_BUF_MAX + uart5_queue.q_in_index - uart5_queue.q_out_index) % QUEUE_BUF_MAX; // 버퍼 데이터 개수
 80031ec:	4b0b      	ldr	r3, [pc, #44]	@ (800321c <uart5_available+0x54>)
 80031ee:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 80031f2:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80031f6:	4a09      	ldr	r2, [pc, #36]	@ (800321c <uart5_available+0x54>)
 80031f8:	f8b2 2102 	ldrh.w	r2, [r2, #258]	@ 0x102
 80031fc:	1a9b      	subs	r3, r3, r2
 80031fe:	425a      	negs	r2, r3
 8003200:	b2db      	uxtb	r3, r3
 8003202:	b2d2      	uxtb	r2, r2
 8003204:	bf58      	it	pl
 8003206:	4253      	negpl	r3, r2
 8003208:	607b      	str	r3, [r7, #4]

	return ret;
 800320a:	687b      	ldr	r3, [r7, #4]
}
 800320c:	4618      	mov	r0, r3
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr
 8003218:	200086e8 	.word	0x200086e8
 800321c:	20007b30 	.word	0x20007b30

08003220 <uart5_q8_read>:

uint8_t uart5_q8_read(void){
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
	uint8_t ret =0;
 8003226:	2300      	movs	r3, #0
 8003228:	71fb      	strb	r3, [r7, #7]
	if(uart5_queue.q_out_index != uart5_queue.q_in_index){
 800322a:	4b11      	ldr	r3, [pc, #68]	@ (8003270 <uart5_q8_read+0x50>)
 800322c:	f8b3 2102 	ldrh.w	r2, [r3, #258]	@ 0x102
 8003230:	4b0f      	ldr	r3, [pc, #60]	@ (8003270 <uart5_q8_read+0x50>)
 8003232:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 8003236:	429a      	cmp	r2, r3
 8003238:	d013      	beq.n	8003262 <uart5_q8_read+0x42>
		ret = uart5_queue.buf[uart5_queue.q_out_index];
 800323a:	4b0d      	ldr	r3, [pc, #52]	@ (8003270 <uart5_q8_read+0x50>)
 800323c:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 8003240:	461a      	mov	r2, r3
 8003242:	4b0b      	ldr	r3, [pc, #44]	@ (8003270 <uart5_q8_read+0x50>)
 8003244:	5c9b      	ldrb	r3, [r3, r2]
 8003246:	71fb      	strb	r3, [r7, #7]
		uart5_queue.q_out_index = (uart5_queue.q_out_index +1) % QUEUE_BUF_MAX;
 8003248:	4b09      	ldr	r3, [pc, #36]	@ (8003270 <uart5_q8_read+0x50>)
 800324a:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 800324e:	3301      	adds	r3, #1
 8003250:	425a      	negs	r2, r3
 8003252:	b2db      	uxtb	r3, r3
 8003254:	b2d2      	uxtb	r2, r2
 8003256:	bf58      	it	pl
 8003258:	4253      	negpl	r3, r2
 800325a:	b29a      	uxth	r2, r3
 800325c:	4b04      	ldr	r3, [pc, #16]	@ (8003270 <uart5_q8_read+0x50>)
 800325e:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
	}

	return ret;
 8003262:	79fb      	ldrb	r3, [r7, #7]
}
 8003264:	4618      	mov	r0, r3
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr
 8003270:	20007b30 	.word	0x20007b30

08003274 <read_rfid_number5>:

uint8_t rfid_number2[READ_BOOK_MAX_SIZE][12] = {0,}; //파싱한 rfid 번호 저장
uint8_t recive_data2[24] = {0,}; //RFID 태그 한개에서 receive 한 data 저장
uint8_t book_num2 = 0;  //책 순서
uint8_t book_byte_num2 = 0; //책 태그의 바이트 순서
void read_rfid_number5(){
 8003274:	b590      	push	{r4, r7, lr}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
	uint8_t i;
	if(uart5_available()){ // 데이터 있으면
 800327a:	f7ff ffa5 	bl	80031c8 <uart5_available>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d042      	beq.n	800330a <read_rfid_number5+0x96>
		uint8_t read_byte =  uart5_q8_read(); // 버퍼에서 1byte 읽고
 8003284:	f7ff ffcc 	bl	8003220 <uart5_q8_read>
 8003288:	4603      	mov	r3, r0
 800328a:	71bb      	strb	r3, [r7, #6]
		recive_data2[book_byte_num2++] = read_byte;
 800328c:	4b21      	ldr	r3, [pc, #132]	@ (8003314 <read_rfid_number5+0xa0>)
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	1c5a      	adds	r2, r3, #1
 8003292:	b2d1      	uxtb	r1, r2
 8003294:	4a1f      	ldr	r2, [pc, #124]	@ (8003314 <read_rfid_number5+0xa0>)
 8003296:	7011      	strb	r1, [r2, #0]
 8003298:	4619      	mov	r1, r3
 800329a:	4a1f      	ldr	r2, [pc, #124]	@ (8003318 <read_rfid_number5+0xa4>)
 800329c:	79bb      	ldrb	r3, [r7, #6]
 800329e:	5453      	strb	r3, [r2, r1]
		if(read_byte == 0x7E) { // 마지막 데이터이면
 80032a0:	79bb      	ldrb	r3, [r7, #6]
 80032a2:	2b7e      	cmp	r3, #126	@ 0x7e
 80032a4:	d126      	bne.n	80032f4 <read_rfid_number5+0x80>
			if(recive_data2[1] != 0x01){ //인식이 된 경우 8~19 12byte rfid number
 80032a6:	4b1c      	ldr	r3, [pc, #112]	@ (8003318 <read_rfid_number5+0xa4>)
 80032a8:	785b      	ldrb	r3, [r3, #1]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d01f      	beq.n	80032ee <read_rfid_number5+0x7a>
				for( i=8; i<=19; i ++)
 80032ae:	2308      	movs	r3, #8
 80032b0:	71fb      	strb	r3, [r7, #7]
 80032b2:	e013      	b.n	80032dc <read_rfid_number5+0x68>
					rfid_number2[book_num2][i-8] = recive_data2[i];
 80032b4:	79fb      	ldrb	r3, [r7, #7]
 80032b6:	4a19      	ldr	r2, [pc, #100]	@ (800331c <read_rfid_number5+0xa8>)
 80032b8:	7812      	ldrb	r2, [r2, #0]
 80032ba:	4610      	mov	r0, r2
 80032bc:	79fa      	ldrb	r2, [r7, #7]
 80032be:	3a08      	subs	r2, #8
 80032c0:	4915      	ldr	r1, [pc, #84]	@ (8003318 <read_rfid_number5+0xa4>)
 80032c2:	5ccc      	ldrb	r4, [r1, r3]
 80032c4:	4916      	ldr	r1, [pc, #88]	@ (8003320 <read_rfid_number5+0xac>)
 80032c6:	4603      	mov	r3, r0
 80032c8:	005b      	lsls	r3, r3, #1
 80032ca:	4403      	add	r3, r0
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	440b      	add	r3, r1
 80032d0:	4413      	add	r3, r2
 80032d2:	4622      	mov	r2, r4
 80032d4:	701a      	strb	r2, [r3, #0]
				for( i=8; i<=19; i ++)
 80032d6:	79fb      	ldrb	r3, [r7, #7]
 80032d8:	3301      	adds	r3, #1
 80032da:	71fb      	strb	r3, [r7, #7]
 80032dc:	79fb      	ldrb	r3, [r7, #7]
 80032de:	2b13      	cmp	r3, #19
 80032e0:	d9e8      	bls.n	80032b4 <read_rfid_number5+0x40>
				book_num2 ++;
 80032e2:	4b0e      	ldr	r3, [pc, #56]	@ (800331c <read_rfid_number5+0xa8>)
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	3301      	adds	r3, #1
 80032e8:	b2da      	uxtb	r2, r3
 80032ea:	4b0c      	ldr	r3, [pc, #48]	@ (800331c <read_rfid_number5+0xa8>)
 80032ec:	701a      	strb	r2, [r3, #0]
			}
			book_byte_num2 = 0;
 80032ee:	4b09      	ldr	r3, [pc, #36]	@ (8003314 <read_rfid_number5+0xa0>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	701a      	strb	r2, [r3, #0]
		}
		if(!uart5_available()){ //다 읽었으면
 80032f4:	f7ff ff68 	bl	80031c8 <uart5_available>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d105      	bne.n	800330a <read_rfid_number5+0x96>
			osSignalSet(tagNumTransmitTHandle, transmitSignal5); //전송 이벤트 생성
 80032fe:	4b09      	ldr	r3, [pc, #36]	@ (8003324 <read_rfid_number5+0xb0>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2105      	movs	r1, #5
 8003304:	4618      	mov	r0, r3
 8003306:	f005 f8e5 	bl	80084d4 <osSignalSet>
			//vTaskSuspend(defaultTaskHandle);
			}
		}
}
 800330a:	bf00      	nop
 800330c:	370c      	adds	r7, #12
 800330e:	46bd      	mov	sp, r7
 8003310:	bd90      	pop	{r4, r7, pc}
 8003312:	bf00      	nop
 8003314:	200086cd 	.word	0x200086cd
 8003318:	200086b4 	.word	0x200086b4
 800331c:	200086cc 	.word	0x200086cc
 8003320:	20008204 	.word	0x20008204
 8003324:	200046f0 	.word	0x200046f0

08003328 <transmitData5>:

void transmitData5(){
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
	int i=0;
 800332e:	2300      	movs	r3, #0
 8003330:	607b      	str	r3, [r7, #4]
	while(rfid_number2[i][0] != 0){
 8003332:	e01c      	b.n	800336e <transmitData5+0x46>
		//computer
		HAL_UART_Transmit(&huart2, rfid_number2[i], sizeof(rfid_number2[i]), 500);
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	4613      	mov	r3, r2
 8003338:	005b      	lsls	r3, r3, #1
 800333a:	4413      	add	r3, r2
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	4a17      	ldr	r2, [pc, #92]	@ (800339c <transmitData5+0x74>)
 8003340:	1899      	adds	r1, r3, r2
 8003342:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003346:	220c      	movs	r2, #12
 8003348:	4815      	ldr	r0, [pc, #84]	@ (80033a0 <transmitData5+0x78>)
 800334a:	f003 fd3b 	bl	8006dc4 <HAL_UART_Transmit>
		//esp32
		HAL_UART_Transmit(&huart3, rfid_number2[i], sizeof(rfid_number2[i]), 500);
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	4613      	mov	r3, r2
 8003352:	005b      	lsls	r3, r3, #1
 8003354:	4413      	add	r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	4a10      	ldr	r2, [pc, #64]	@ (800339c <transmitData5+0x74>)
 800335a:	1899      	adds	r1, r3, r2
 800335c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003360:	220c      	movs	r2, #12
 8003362:	4810      	ldr	r0, [pc, #64]	@ (80033a4 <transmitData5+0x7c>)
 8003364:	f003 fd2e 	bl	8006dc4 <HAL_UART_Transmit>
		i++;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	3301      	adds	r3, #1
 800336c:	607b      	str	r3, [r7, #4]
	while(rfid_number2[i][0] != 0){
 800336e:	490b      	ldr	r1, [pc, #44]	@ (800339c <transmitData5+0x74>)
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	4613      	mov	r3, r2
 8003374:	005b      	lsls	r3, r3, #1
 8003376:	4413      	add	r3, r2
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	440b      	add	r3, r1
 800337c:	781b      	ldrb	r3, [r3, #0]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1d8      	bne.n	8003334 <transmitData5+0xc>
		}
	memset(rfid_number2,0,sizeof(rfid_number2));
 8003382:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 8003386:	2100      	movs	r1, #0
 8003388:	4804      	ldr	r0, [pc, #16]	@ (800339c <transmitData5+0x74>)
 800338a:	f014 fd1d 	bl	8017dc8 <memset>
	book_num2 =0;
 800338e:	4b06      	ldr	r3, [pc, #24]	@ (80033a8 <transmitData5+0x80>)
 8003390:	2200      	movs	r2, #0
 8003392:	701a      	strb	r2, [r3, #0]

}
 8003394:	bf00      	nop
 8003396:	3708      	adds	r7, #8
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	20008204 	.word	0x20008204
 80033a0:	20008778 	.word	0x20008778
 80033a4:	200087c0 	.word	0x200087c0
 80033a8:	200086cc 	.word	0x200086cc

080033ac <uart2_init>:
//	}
//}

//------------------------------------------------------

void uart2_init(){
 80033ac:	b580      	push	{r7, lr}
 80033ae:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&huart2, uart2_queue.buf, QUEUE_BUF_MAX);
 80033b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80033b4:	4906      	ldr	r1, [pc, #24]	@ (80033d0 <uart2_init+0x24>)
 80033b6:	4807      	ldr	r0, [pc, #28]	@ (80033d4 <uart2_init+0x28>)
 80033b8:	f003 fe00 	bl	8006fbc <HAL_UART_Receive_DMA>
	uart2_queue.q_in_index = 0;
 80033bc:	4b04      	ldr	r3, [pc, #16]	@ (80033d0 <uart2_init+0x24>)
 80033be:	2200      	movs	r2, #0
 80033c0:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
	uart2_queue.q_out_index = 0;
 80033c4:	4b02      	ldr	r3, [pc, #8]	@ (80033d0 <uart2_init+0x24>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
}
 80033cc:	bf00      	nop
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	20007c34 	.word	0x20007c34
 80033d4:	20008778 	.word	0x20008778

080033d8 <uart2_available>:



uint32_t uart2_available(void){
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
	uint32_t ret = 0;
 80033de:	2300      	movs	r3, #0
 80033e0:	607b      	str	r3, [r7, #4]
	uart2_queue.q_in_index = (QUEUE_BUF_MAX - huart2.hdmarx->Instance->NDTR) % QUEUE_BUF_MAX; //원형 큐
 80033e2:	4b11      	ldr	r3, [pc, #68]	@ (8003428 <uart2_available+0x50>)
 80033e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	b29a      	uxth	r2, r3
 80033f6:	4b0d      	ldr	r3, [pc, #52]	@ (800342c <uart2_available+0x54>)
 80033f8:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
	ret = (QUEUE_BUF_MAX + uart2_queue.q_in_index - uart2_queue.q_out_index) % QUEUE_BUF_MAX; // 버퍼 데이터 개수
 80033fc:	4b0b      	ldr	r3, [pc, #44]	@ (800342c <uart2_available+0x54>)
 80033fe:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 8003402:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003406:	4a09      	ldr	r2, [pc, #36]	@ (800342c <uart2_available+0x54>)
 8003408:	f8b2 2102 	ldrh.w	r2, [r2, #258]	@ 0x102
 800340c:	1a9b      	subs	r3, r3, r2
 800340e:	425a      	negs	r2, r3
 8003410:	b2db      	uxtb	r3, r3
 8003412:	b2d2      	uxtb	r2, r2
 8003414:	bf58      	it	pl
 8003416:	4253      	negpl	r3, r2
 8003418:	607b      	str	r3, [r7, #4]

	return ret;
 800341a:	687b      	ldr	r3, [r7, #4]
}
 800341c:	4618      	mov	r0, r3
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr
 8003428:	20008778 	.word	0x20008778
 800342c:	20007c34 	.word	0x20007c34

08003430 <uart2_q8_read>:


uint8_t uart2_q8_read(void){
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
	uint8_t ret =0;
 8003436:	2300      	movs	r3, #0
 8003438:	71fb      	strb	r3, [r7, #7]
	if(uart2_queue.q_out_index != uart2_queue.q_in_index){
 800343a:	4b11      	ldr	r3, [pc, #68]	@ (8003480 <uart2_q8_read+0x50>)
 800343c:	f8b3 2102 	ldrh.w	r2, [r3, #258]	@ 0x102
 8003440:	4b0f      	ldr	r3, [pc, #60]	@ (8003480 <uart2_q8_read+0x50>)
 8003442:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 8003446:	429a      	cmp	r2, r3
 8003448:	d013      	beq.n	8003472 <uart2_q8_read+0x42>
		ret = uart2_queue.buf[uart2_queue.q_out_index];
 800344a:	4b0d      	ldr	r3, [pc, #52]	@ (8003480 <uart2_q8_read+0x50>)
 800344c:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 8003450:	461a      	mov	r2, r3
 8003452:	4b0b      	ldr	r3, [pc, #44]	@ (8003480 <uart2_q8_read+0x50>)
 8003454:	5c9b      	ldrb	r3, [r3, r2]
 8003456:	71fb      	strb	r3, [r7, #7]
		uart2_queue.q_out_index = (uart2_queue.q_out_index +1) % QUEUE_BUF_MAX;
 8003458:	4b09      	ldr	r3, [pc, #36]	@ (8003480 <uart2_q8_read+0x50>)
 800345a:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 800345e:	3301      	adds	r3, #1
 8003460:	425a      	negs	r2, r3
 8003462:	b2db      	uxtb	r3, r3
 8003464:	b2d2      	uxtb	r2, r2
 8003466:	bf58      	it	pl
 8003468:	4253      	negpl	r3, r2
 800346a:	b29a      	uxth	r2, r3
 800346c:	4b04      	ldr	r3, [pc, #16]	@ (8003480 <uart2_q8_read+0x50>)
 800346e:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
	}

	return ret;
 8003472:	79fb      	ldrb	r3, [r7, #7]
}
 8003474:	4618      	mov	r0, r3
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr
 8003480:	20007c34 	.word	0x20007c34

08003484 <read_command>:

uint8_t scan_command[20] = {0,}; //파싱한 rfid 번호 저장
uint8_t command_byte_num = 0; //책 태그의 바이트 순서
void read_command(){
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
	if(uart2_available()){ // 데이터 있으면
 800348a:	f7ff ffa5 	bl	80033d8 <uart2_available>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d01e      	beq.n	80034d2 <read_command+0x4e>
		uint8_t read_byte =  uart2_q8_read(); // 버퍼에서 1byte 읽고
 8003494:	f7ff ffcc 	bl	8003430 <uart2_q8_read>
 8003498:	4603      	mov	r3, r0
 800349a:	71fb      	strb	r3, [r7, #7]
		scan_command[command_byte_num++] = read_byte;
 800349c:	4b0f      	ldr	r3, [pc, #60]	@ (80034dc <read_command+0x58>)
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	1c5a      	adds	r2, r3, #1
 80034a2:	b2d1      	uxtb	r1, r2
 80034a4:	4a0d      	ldr	r2, [pc, #52]	@ (80034dc <read_command+0x58>)
 80034a6:	7011      	strb	r1, [r2, #0]
 80034a8:	4619      	mov	r1, r3
 80034aa:	4a0d      	ldr	r2, [pc, #52]	@ (80034e0 <read_command+0x5c>)
 80034ac:	79fb      	ldrb	r3, [r7, #7]
 80034ae:	5453      	strb	r3, [r2, r1]
		if(read_byte == 0x0A) { // 마지막 데이터이면
 80034b0:	79fb      	ldrb	r3, [r7, #7]
 80034b2:	2b0a      	cmp	r3, #10
 80034b4:	d102      	bne.n	80034bc <read_command+0x38>
			command_byte_num = 0;
 80034b6:	4b09      	ldr	r3, [pc, #36]	@ (80034dc <read_command+0x58>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	701a      	strb	r2, [r3, #0]
		}
		if(!uart2_available()){ //다 읽었으면
 80034bc:	f7ff ff8c 	bl	80033d8 <uart2_available>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d105      	bne.n	80034d2 <read_command+0x4e>
			osSignalSet(transmitTask2Handle, transmitSignal2); //전송 이벤트 생성
 80034c6:	4b07      	ldr	r3, [pc, #28]	@ (80034e4 <read_command+0x60>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2102      	movs	r1, #2
 80034cc:	4618      	mov	r0, r3
 80034ce:	f005 f801 	bl	80084d4 <osSignalSet>
		}
	}
}
 80034d2:	bf00      	nop
 80034d4:	3708      	adds	r7, #8
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	200086e4 	.word	0x200086e4
 80034e0:	200086d0 	.word	0x200086d0
 80034e4:	200046fc 	.word	0x200046fc

080034e8 <transmitCommand>:

char motor_command1[] = "scan\n";
char motor_command2[] = "stop\n";

void transmitCommand(){
 80034e8:	b580      	push	{r7, lr}
 80034ea:	af00      	add	r7, sp, #0
//	int i=0;
//	while(scan_command[i] != 10){
//		HAL_UART_Transmit(&huart2, scan_command[i], sizeof(scan_command[i]), 1);
//		i++;
//	}
	if(!(strchr(scan_command,motor_command1))){
 80034ec:	4b0f      	ldr	r3, [pc, #60]	@ (800352c <transmitCommand+0x44>)
 80034ee:	4619      	mov	r1, r3
 80034f0:	480f      	ldr	r0, [pc, #60]	@ (8003530 <transmitCommand+0x48>)
 80034f2:	f014 fc71 	bl	8017dd8 <strchr>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d10f      	bne.n	800351c <transmitCommand+0x34>
		HAL_UART_Transmit(&huart2, "ok\r\n", sizeof("ok\r\n"), 1);
 80034fc:	2301      	movs	r3, #1
 80034fe:	2205      	movs	r2, #5
 8003500:	490c      	ldr	r1, [pc, #48]	@ (8003534 <transmitCommand+0x4c>)
 8003502:	480d      	ldr	r0, [pc, #52]	@ (8003538 <transmitCommand+0x50>)
 8003504:	f003 fc5e 	bl	8006dc4 <HAL_UART_Transmit>
		vTaskResume(motorTaskHandle);
 8003508:	4b0c      	ldr	r3, [pc, #48]	@ (800353c <transmitCommand+0x54>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4618      	mov	r0, r3
 800350e:	f005 fbcd 	bl	8008cac <vTaskResume>
		vTaskResume(rfidExecuteTaskHandle);
 8003512:	4b0b      	ldr	r3, [pc, #44]	@ (8003540 <transmitCommand+0x58>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4618      	mov	r0, r3
 8003518:	f005 fbc8 	bl	8008cac <vTaskResume>
	}
//	}else if(!(strchr(scan_command,motor_command2))){
//		HAL_UART_Transmit(&huart2, "ok\r\n", sizeof("ok\r\n"), 1);
//		vTaskSuspend(rfidExecuteHandle);
//	}
	memset(scan_command,0,sizeof(scan_command));
 800351c:	2214      	movs	r2, #20
 800351e:	2100      	movs	r1, #0
 8003520:	4803      	ldr	r0, [pc, #12]	@ (8003530 <transmitCommand+0x48>)
 8003522:	f014 fc51 	bl	8017dc8 <memset>
}
 8003526:	bf00      	nop
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	20000008 	.word	0x20000008
 8003530:	200086d0 	.word	0x200086d0
 8003534:	08019f50 	.word	0x08019f50
 8003538:	20008778 	.word	0x20008778
 800353c:	200046f8 	.word	0x200046f8
 8003540:	200046ec 	.word	0x200046ec

08003544 <MX_UART5_Init>:
DMA_HandleTypeDef hdma_usart6_rx;
DMA_HandleTypeDef hdma_usart6_tx;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8003548:	4b11      	ldr	r3, [pc, #68]	@ (8003590 <MX_UART5_Init+0x4c>)
 800354a:	4a12      	ldr	r2, [pc, #72]	@ (8003594 <MX_UART5_Init+0x50>)
 800354c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800354e:	4b10      	ldr	r3, [pc, #64]	@ (8003590 <MX_UART5_Init+0x4c>)
 8003550:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003554:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8003556:	4b0e      	ldr	r3, [pc, #56]	@ (8003590 <MX_UART5_Init+0x4c>)
 8003558:	2200      	movs	r2, #0
 800355a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800355c:	4b0c      	ldr	r3, [pc, #48]	@ (8003590 <MX_UART5_Init+0x4c>)
 800355e:	2200      	movs	r2, #0
 8003560:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8003562:	4b0b      	ldr	r3, [pc, #44]	@ (8003590 <MX_UART5_Init+0x4c>)
 8003564:	2200      	movs	r2, #0
 8003566:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003568:	4b09      	ldr	r3, [pc, #36]	@ (8003590 <MX_UART5_Init+0x4c>)
 800356a:	220c      	movs	r2, #12
 800356c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800356e:	4b08      	ldr	r3, [pc, #32]	@ (8003590 <MX_UART5_Init+0x4c>)
 8003570:	2200      	movs	r2, #0
 8003572:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8003574:	4b06      	ldr	r3, [pc, #24]	@ (8003590 <MX_UART5_Init+0x4c>)
 8003576:	2200      	movs	r2, #0
 8003578:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800357a:	4805      	ldr	r0, [pc, #20]	@ (8003590 <MX_UART5_Init+0x4c>)
 800357c:	f003 fbd2 	bl	8006d24 <HAL_UART_Init>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d001      	beq.n	800358a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8003586:	f7fe fd95 	bl	80020b4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800358a:	bf00      	nop
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	200086e8 	.word	0x200086e8
 8003594:	40005000 	.word	0x40005000

08003598 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800359c:	4b11      	ldr	r3, [pc, #68]	@ (80035e4 <MX_USART1_UART_Init+0x4c>)
 800359e:	4a12      	ldr	r2, [pc, #72]	@ (80035e8 <MX_USART1_UART_Init+0x50>)
 80035a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80035a2:	4b10      	ldr	r3, [pc, #64]	@ (80035e4 <MX_USART1_UART_Init+0x4c>)
 80035a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80035a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80035aa:	4b0e      	ldr	r3, [pc, #56]	@ (80035e4 <MX_USART1_UART_Init+0x4c>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80035b0:	4b0c      	ldr	r3, [pc, #48]	@ (80035e4 <MX_USART1_UART_Init+0x4c>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80035b6:	4b0b      	ldr	r3, [pc, #44]	@ (80035e4 <MX_USART1_UART_Init+0x4c>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80035bc:	4b09      	ldr	r3, [pc, #36]	@ (80035e4 <MX_USART1_UART_Init+0x4c>)
 80035be:	220c      	movs	r2, #12
 80035c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80035c2:	4b08      	ldr	r3, [pc, #32]	@ (80035e4 <MX_USART1_UART_Init+0x4c>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80035c8:	4b06      	ldr	r3, [pc, #24]	@ (80035e4 <MX_USART1_UART_Init+0x4c>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80035ce:	4805      	ldr	r0, [pc, #20]	@ (80035e4 <MX_USART1_UART_Init+0x4c>)
 80035d0:	f003 fba8 	bl	8006d24 <HAL_UART_Init>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d001      	beq.n	80035de <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80035da:	f7fe fd6b 	bl	80020b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80035de:	bf00      	nop
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	20008730 	.word	0x20008730
 80035e8:	40011000 	.word	0x40011000

080035ec <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80035f0:	4b11      	ldr	r3, [pc, #68]	@ (8003638 <MX_USART2_UART_Init+0x4c>)
 80035f2:	4a12      	ldr	r2, [pc, #72]	@ (800363c <MX_USART2_UART_Init+0x50>)
 80035f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80035f6:	4b10      	ldr	r3, [pc, #64]	@ (8003638 <MX_USART2_UART_Init+0x4c>)
 80035f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80035fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80035fe:	4b0e      	ldr	r3, [pc, #56]	@ (8003638 <MX_USART2_UART_Init+0x4c>)
 8003600:	2200      	movs	r2, #0
 8003602:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003604:	4b0c      	ldr	r3, [pc, #48]	@ (8003638 <MX_USART2_UART_Init+0x4c>)
 8003606:	2200      	movs	r2, #0
 8003608:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800360a:	4b0b      	ldr	r3, [pc, #44]	@ (8003638 <MX_USART2_UART_Init+0x4c>)
 800360c:	2200      	movs	r2, #0
 800360e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003610:	4b09      	ldr	r3, [pc, #36]	@ (8003638 <MX_USART2_UART_Init+0x4c>)
 8003612:	220c      	movs	r2, #12
 8003614:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003616:	4b08      	ldr	r3, [pc, #32]	@ (8003638 <MX_USART2_UART_Init+0x4c>)
 8003618:	2200      	movs	r2, #0
 800361a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800361c:	4b06      	ldr	r3, [pc, #24]	@ (8003638 <MX_USART2_UART_Init+0x4c>)
 800361e:	2200      	movs	r2, #0
 8003620:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003622:	4805      	ldr	r0, [pc, #20]	@ (8003638 <MX_USART2_UART_Init+0x4c>)
 8003624:	f003 fb7e 	bl	8006d24 <HAL_UART_Init>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d001      	beq.n	8003632 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800362e:	f7fe fd41 	bl	80020b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003632:	bf00      	nop
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	20008778 	.word	0x20008778
 800363c:	40004400 	.word	0x40004400

08003640 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003644:	4b11      	ldr	r3, [pc, #68]	@ (800368c <MX_USART3_UART_Init+0x4c>)
 8003646:	4a12      	ldr	r2, [pc, #72]	@ (8003690 <MX_USART3_UART_Init+0x50>)
 8003648:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800364a:	4b10      	ldr	r3, [pc, #64]	@ (800368c <MX_USART3_UART_Init+0x4c>)
 800364c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003650:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003652:	4b0e      	ldr	r3, [pc, #56]	@ (800368c <MX_USART3_UART_Init+0x4c>)
 8003654:	2200      	movs	r2, #0
 8003656:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003658:	4b0c      	ldr	r3, [pc, #48]	@ (800368c <MX_USART3_UART_Init+0x4c>)
 800365a:	2200      	movs	r2, #0
 800365c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800365e:	4b0b      	ldr	r3, [pc, #44]	@ (800368c <MX_USART3_UART_Init+0x4c>)
 8003660:	2200      	movs	r2, #0
 8003662:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003664:	4b09      	ldr	r3, [pc, #36]	@ (800368c <MX_USART3_UART_Init+0x4c>)
 8003666:	220c      	movs	r2, #12
 8003668:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800366a:	4b08      	ldr	r3, [pc, #32]	@ (800368c <MX_USART3_UART_Init+0x4c>)
 800366c:	2200      	movs	r2, #0
 800366e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003670:	4b06      	ldr	r3, [pc, #24]	@ (800368c <MX_USART3_UART_Init+0x4c>)
 8003672:	2200      	movs	r2, #0
 8003674:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003676:	4805      	ldr	r0, [pc, #20]	@ (800368c <MX_USART3_UART_Init+0x4c>)
 8003678:	f003 fb54 	bl	8006d24 <HAL_UART_Init>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d001      	beq.n	8003686 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003682:	f7fe fd17 	bl	80020b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003686:	bf00      	nop
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	200087c0 	.word	0x200087c0
 8003690:	40004800 	.word	0x40004800

08003694 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003698:	4b11      	ldr	r3, [pc, #68]	@ (80036e0 <MX_USART6_UART_Init+0x4c>)
 800369a:	4a12      	ldr	r2, [pc, #72]	@ (80036e4 <MX_USART6_UART_Init+0x50>)
 800369c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800369e:	4b10      	ldr	r3, [pc, #64]	@ (80036e0 <MX_USART6_UART_Init+0x4c>)
 80036a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80036a4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80036a6:	4b0e      	ldr	r3, [pc, #56]	@ (80036e0 <MX_USART6_UART_Init+0x4c>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80036ac:	4b0c      	ldr	r3, [pc, #48]	@ (80036e0 <MX_USART6_UART_Init+0x4c>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80036b2:	4b0b      	ldr	r3, [pc, #44]	@ (80036e0 <MX_USART6_UART_Init+0x4c>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80036b8:	4b09      	ldr	r3, [pc, #36]	@ (80036e0 <MX_USART6_UART_Init+0x4c>)
 80036ba:	220c      	movs	r2, #12
 80036bc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80036be:	4b08      	ldr	r3, [pc, #32]	@ (80036e0 <MX_USART6_UART_Init+0x4c>)
 80036c0:	2200      	movs	r2, #0
 80036c2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80036c4:	4b06      	ldr	r3, [pc, #24]	@ (80036e0 <MX_USART6_UART_Init+0x4c>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80036ca:	4805      	ldr	r0, [pc, #20]	@ (80036e0 <MX_USART6_UART_Init+0x4c>)
 80036cc:	f003 fb2a 	bl	8006d24 <HAL_UART_Init>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d001      	beq.n	80036da <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80036d6:	f7fe fced 	bl	80020b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80036da:	bf00      	nop
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	20008808 	.word	0x20008808
 80036e4:	40011400 	.word	0x40011400

080036e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b094      	sub	sp, #80	@ 0x50
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036f0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80036f4:	2200      	movs	r2, #0
 80036f6:	601a      	str	r2, [r3, #0]
 80036f8:	605a      	str	r2, [r3, #4]
 80036fa:	609a      	str	r2, [r3, #8]
 80036fc:	60da      	str	r2, [r3, #12]
 80036fe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a73      	ldr	r2, [pc, #460]	@ (80038d4 <HAL_UART_MspInit+0x1ec>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d17a      	bne.n	8003800 <HAL_UART_MspInit+0x118>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800370a:	2300      	movs	r3, #0
 800370c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800370e:	4b72      	ldr	r3, [pc, #456]	@ (80038d8 <HAL_UART_MspInit+0x1f0>)
 8003710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003712:	4a71      	ldr	r2, [pc, #452]	@ (80038d8 <HAL_UART_MspInit+0x1f0>)
 8003714:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003718:	6413      	str	r3, [r2, #64]	@ 0x40
 800371a:	4b6f      	ldr	r3, [pc, #444]	@ (80038d8 <HAL_UART_MspInit+0x1f0>)
 800371c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800371e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003722:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003726:	2300      	movs	r3, #0
 8003728:	637b      	str	r3, [r7, #52]	@ 0x34
 800372a:	4b6b      	ldr	r3, [pc, #428]	@ (80038d8 <HAL_UART_MspInit+0x1f0>)
 800372c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800372e:	4a6a      	ldr	r2, [pc, #424]	@ (80038d8 <HAL_UART_MspInit+0x1f0>)
 8003730:	f043 0304 	orr.w	r3, r3, #4
 8003734:	6313      	str	r3, [r2, #48]	@ 0x30
 8003736:	4b68      	ldr	r3, [pc, #416]	@ (80038d8 <HAL_UART_MspInit+0x1f0>)
 8003738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800373a:	f003 0304 	and.w	r3, r3, #4
 800373e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003740:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003742:	2300      	movs	r3, #0
 8003744:	633b      	str	r3, [r7, #48]	@ 0x30
 8003746:	4b64      	ldr	r3, [pc, #400]	@ (80038d8 <HAL_UART_MspInit+0x1f0>)
 8003748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800374a:	4a63      	ldr	r2, [pc, #396]	@ (80038d8 <HAL_UART_MspInit+0x1f0>)
 800374c:	f043 0308 	orr.w	r3, r3, #8
 8003750:	6313      	str	r3, [r2, #48]	@ 0x30
 8003752:	4b61      	ldr	r3, [pc, #388]	@ (80038d8 <HAL_UART_MspInit+0x1f0>)
 8003754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003756:	f003 0308 	and.w	r3, r3, #8
 800375a:	633b      	str	r3, [r7, #48]	@ 0x30
 800375c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = UHF02_TX_Pin;
 800375e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003762:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003764:	2302      	movs	r3, #2
 8003766:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003768:	2300      	movs	r3, #0
 800376a:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800376c:	2303      	movs	r3, #3
 800376e:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003770:	2308      	movs	r3, #8
 8003772:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(UHF02_TX_GPIO_Port, &GPIO_InitStruct);
 8003774:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003778:	4619      	mov	r1, r3
 800377a:	4858      	ldr	r0, [pc, #352]	@ (80038dc <HAL_UART_MspInit+0x1f4>)
 800377c:	f000 ffac 	bl	80046d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = UHF02_RX_Pin;
 8003780:	2304      	movs	r3, #4
 8003782:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003784:	2302      	movs	r3, #2
 8003786:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003788:	2300      	movs	r3, #0
 800378a:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800378c:	2303      	movs	r3, #3
 800378e:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003790:	2308      	movs	r3, #8
 8003792:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(UHF02_RX_GPIO_Port, &GPIO_InitStruct);
 8003794:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003798:	4619      	mov	r1, r3
 800379a:	4851      	ldr	r0, [pc, #324]	@ (80038e0 <HAL_UART_MspInit+0x1f8>)
 800379c:	f000 ff9c 	bl	80046d8 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 80037a0:	4b50      	ldr	r3, [pc, #320]	@ (80038e4 <HAL_UART_MspInit+0x1fc>)
 80037a2:	4a51      	ldr	r2, [pc, #324]	@ (80038e8 <HAL_UART_MspInit+0x200>)
 80037a4:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 80037a6:	4b4f      	ldr	r3, [pc, #316]	@ (80038e4 <HAL_UART_MspInit+0x1fc>)
 80037a8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80037ac:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80037ae:	4b4d      	ldr	r3, [pc, #308]	@ (80038e4 <HAL_UART_MspInit+0x1fc>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80037b4:	4b4b      	ldr	r3, [pc, #300]	@ (80038e4 <HAL_UART_MspInit+0x1fc>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80037ba:	4b4a      	ldr	r3, [pc, #296]	@ (80038e4 <HAL_UART_MspInit+0x1fc>)
 80037bc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80037c0:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80037c2:	4b48      	ldr	r3, [pc, #288]	@ (80038e4 <HAL_UART_MspInit+0x1fc>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80037c8:	4b46      	ldr	r3, [pc, #280]	@ (80038e4 <HAL_UART_MspInit+0x1fc>)
 80037ca:	2200      	movs	r2, #0
 80037cc:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 80037ce:	4b45      	ldr	r3, [pc, #276]	@ (80038e4 <HAL_UART_MspInit+0x1fc>)
 80037d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80037d4:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 80037d6:	4b43      	ldr	r3, [pc, #268]	@ (80038e4 <HAL_UART_MspInit+0x1fc>)
 80037d8:	2200      	movs	r2, #0
 80037da:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80037dc:	4b41      	ldr	r3, [pc, #260]	@ (80038e4 <HAL_UART_MspInit+0x1fc>)
 80037de:	2200      	movs	r2, #0
 80037e0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 80037e2:	4840      	ldr	r0, [pc, #256]	@ (80038e4 <HAL_UART_MspInit+0x1fc>)
 80037e4:	f000 fb76 	bl	8003ed4 <HAL_DMA_Init>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d001      	beq.n	80037f2 <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 80037ee:	f7fe fc61 	bl	80020b4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a3b      	ldr	r2, [pc, #236]	@ (80038e4 <HAL_UART_MspInit+0x1fc>)
 80037f6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80037f8:	4a3a      	ldr	r2, [pc, #232]	@ (80038e4 <HAL_UART_MspInit+0x1fc>)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80037fe:	e1df      	b.n	8003bc0 <HAL_UART_MspInit+0x4d8>
  else if(uartHandle->Instance==USART1)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a39      	ldr	r2, [pc, #228]	@ (80038ec <HAL_UART_MspInit+0x204>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d178      	bne.n	80038fc <HAL_UART_MspInit+0x214>
    __HAL_RCC_USART1_CLK_ENABLE();
 800380a:	2300      	movs	r3, #0
 800380c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800380e:	4b32      	ldr	r3, [pc, #200]	@ (80038d8 <HAL_UART_MspInit+0x1f0>)
 8003810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003812:	4a31      	ldr	r2, [pc, #196]	@ (80038d8 <HAL_UART_MspInit+0x1f0>)
 8003814:	f043 0310 	orr.w	r3, r3, #16
 8003818:	6453      	str	r3, [r2, #68]	@ 0x44
 800381a:	4b2f      	ldr	r3, [pc, #188]	@ (80038d8 <HAL_UART_MspInit+0x1f0>)
 800381c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800381e:	f003 0310 	and.w	r3, r3, #16
 8003822:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003826:	2300      	movs	r3, #0
 8003828:	62bb      	str	r3, [r7, #40]	@ 0x28
 800382a:	4b2b      	ldr	r3, [pc, #172]	@ (80038d8 <HAL_UART_MspInit+0x1f0>)
 800382c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800382e:	4a2a      	ldr	r2, [pc, #168]	@ (80038d8 <HAL_UART_MspInit+0x1f0>)
 8003830:	f043 0301 	orr.w	r3, r3, #1
 8003834:	6313      	str	r3, [r2, #48]	@ 0x30
 8003836:	4b28      	ldr	r3, [pc, #160]	@ (80038d8 <HAL_UART_MspInit+0x1f0>)
 8003838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800383a:	f003 0301 	and.w	r3, r3, #1
 800383e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = UHF01_TX_Pin|UHF01_RX_Pin;
 8003842:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003846:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003848:	2302      	movs	r3, #2
 800384a:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800384c:	2300      	movs	r3, #0
 800384e:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003850:	2303      	movs	r3, #3
 8003852:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003854:	2307      	movs	r3, #7
 8003856:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003858:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800385c:	4619      	mov	r1, r3
 800385e:	4824      	ldr	r0, [pc, #144]	@ (80038f0 <HAL_UART_MspInit+0x208>)
 8003860:	f000 ff3a 	bl	80046d8 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream5;
 8003864:	4b23      	ldr	r3, [pc, #140]	@ (80038f4 <HAL_UART_MspInit+0x20c>)
 8003866:	4a24      	ldr	r2, [pc, #144]	@ (80038f8 <HAL_UART_MspInit+0x210>)
 8003868:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800386a:	4b22      	ldr	r3, [pc, #136]	@ (80038f4 <HAL_UART_MspInit+0x20c>)
 800386c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003870:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003872:	4b20      	ldr	r3, [pc, #128]	@ (80038f4 <HAL_UART_MspInit+0x20c>)
 8003874:	2200      	movs	r2, #0
 8003876:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003878:	4b1e      	ldr	r3, [pc, #120]	@ (80038f4 <HAL_UART_MspInit+0x20c>)
 800387a:	2200      	movs	r2, #0
 800387c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800387e:	4b1d      	ldr	r3, [pc, #116]	@ (80038f4 <HAL_UART_MspInit+0x20c>)
 8003880:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003884:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003886:	4b1b      	ldr	r3, [pc, #108]	@ (80038f4 <HAL_UART_MspInit+0x20c>)
 8003888:	2200      	movs	r2, #0
 800388a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800388c:	4b19      	ldr	r3, [pc, #100]	@ (80038f4 <HAL_UART_MspInit+0x20c>)
 800388e:	2200      	movs	r2, #0
 8003890:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003892:	4b18      	ldr	r3, [pc, #96]	@ (80038f4 <HAL_UART_MspInit+0x20c>)
 8003894:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003898:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800389a:	4b16      	ldr	r3, [pc, #88]	@ (80038f4 <HAL_UART_MspInit+0x20c>)
 800389c:	2200      	movs	r2, #0
 800389e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80038a0:	4b14      	ldr	r3, [pc, #80]	@ (80038f4 <HAL_UART_MspInit+0x20c>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80038a6:	4813      	ldr	r0, [pc, #76]	@ (80038f4 <HAL_UART_MspInit+0x20c>)
 80038a8:	f000 fb14 	bl	8003ed4 <HAL_DMA_Init>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d001      	beq.n	80038b6 <HAL_UART_MspInit+0x1ce>
      Error_Handler();
 80038b2:	f7fe fbff 	bl	80020b4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a0e      	ldr	r2, [pc, #56]	@ (80038f4 <HAL_UART_MspInit+0x20c>)
 80038ba:	63da      	str	r2, [r3, #60]	@ 0x3c
 80038bc:	4a0d      	ldr	r2, [pc, #52]	@ (80038f4 <HAL_UART_MspInit+0x20c>)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80038c2:	2200      	movs	r2, #0
 80038c4:	2105      	movs	r1, #5
 80038c6:	2025      	movs	r0, #37	@ 0x25
 80038c8:	f000 fada 	bl	8003e80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80038cc:	2025      	movs	r0, #37	@ 0x25
 80038ce:	f000 faf3 	bl	8003eb8 <HAL_NVIC_EnableIRQ>
}
 80038d2:	e175      	b.n	8003bc0 <HAL_UART_MspInit+0x4d8>
 80038d4:	40005000 	.word	0x40005000
 80038d8:	40023800 	.word	0x40023800
 80038dc:	40020800 	.word	0x40020800
 80038e0:	40020c00 	.word	0x40020c00
 80038e4:	20008850 	.word	0x20008850
 80038e8:	40026010 	.word	0x40026010
 80038ec:	40011000 	.word	0x40011000
 80038f0:	40020000 	.word	0x40020000
 80038f4:	200088b0 	.word	0x200088b0
 80038f8:	40026488 	.word	0x40026488
  else if(uartHandle->Instance==USART2)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a5b      	ldr	r2, [pc, #364]	@ (8003a70 <HAL_UART_MspInit+0x388>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d15a      	bne.n	80039bc <HAL_UART_MspInit+0x2d4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003906:	2300      	movs	r3, #0
 8003908:	627b      	str	r3, [r7, #36]	@ 0x24
 800390a:	4b5a      	ldr	r3, [pc, #360]	@ (8003a74 <HAL_UART_MspInit+0x38c>)
 800390c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800390e:	4a59      	ldr	r2, [pc, #356]	@ (8003a74 <HAL_UART_MspInit+0x38c>)
 8003910:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003914:	6413      	str	r3, [r2, #64]	@ 0x40
 8003916:	4b57      	ldr	r3, [pc, #348]	@ (8003a74 <HAL_UART_MspInit+0x38c>)
 8003918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800391a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800391e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003922:	2300      	movs	r3, #0
 8003924:	623b      	str	r3, [r7, #32]
 8003926:	4b53      	ldr	r3, [pc, #332]	@ (8003a74 <HAL_UART_MspInit+0x38c>)
 8003928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800392a:	4a52      	ldr	r2, [pc, #328]	@ (8003a74 <HAL_UART_MspInit+0x38c>)
 800392c:	f043 0301 	orr.w	r3, r3, #1
 8003930:	6313      	str	r3, [r2, #48]	@ 0x30
 8003932:	4b50      	ldr	r3, [pc, #320]	@ (8003a74 <HAL_UART_MspInit+0x38c>)
 8003934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	623b      	str	r3, [r7, #32]
 800393c:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = com_TX_Pin|com_RX_Pin;
 800393e:	230c      	movs	r3, #12
 8003940:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003942:	2302      	movs	r3, #2
 8003944:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003946:	2300      	movs	r3, #0
 8003948:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800394a:	2303      	movs	r3, #3
 800394c:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800394e:	2307      	movs	r3, #7
 8003950:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003952:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003956:	4619      	mov	r1, r3
 8003958:	4847      	ldr	r0, [pc, #284]	@ (8003a78 <HAL_UART_MspInit+0x390>)
 800395a:	f000 febd 	bl	80046d8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800395e:	4b47      	ldr	r3, [pc, #284]	@ (8003a7c <HAL_UART_MspInit+0x394>)
 8003960:	4a47      	ldr	r2, [pc, #284]	@ (8003a80 <HAL_UART_MspInit+0x398>)
 8003962:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003964:	4b45      	ldr	r3, [pc, #276]	@ (8003a7c <HAL_UART_MspInit+0x394>)
 8003966:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800396a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800396c:	4b43      	ldr	r3, [pc, #268]	@ (8003a7c <HAL_UART_MspInit+0x394>)
 800396e:	2200      	movs	r2, #0
 8003970:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003972:	4b42      	ldr	r3, [pc, #264]	@ (8003a7c <HAL_UART_MspInit+0x394>)
 8003974:	2200      	movs	r2, #0
 8003976:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003978:	4b40      	ldr	r3, [pc, #256]	@ (8003a7c <HAL_UART_MspInit+0x394>)
 800397a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800397e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003980:	4b3e      	ldr	r3, [pc, #248]	@ (8003a7c <HAL_UART_MspInit+0x394>)
 8003982:	2200      	movs	r2, #0
 8003984:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003986:	4b3d      	ldr	r3, [pc, #244]	@ (8003a7c <HAL_UART_MspInit+0x394>)
 8003988:	2200      	movs	r2, #0
 800398a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800398c:	4b3b      	ldr	r3, [pc, #236]	@ (8003a7c <HAL_UART_MspInit+0x394>)
 800398e:	2200      	movs	r2, #0
 8003990:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003992:	4b3a      	ldr	r3, [pc, #232]	@ (8003a7c <HAL_UART_MspInit+0x394>)
 8003994:	2200      	movs	r2, #0
 8003996:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003998:	4b38      	ldr	r3, [pc, #224]	@ (8003a7c <HAL_UART_MspInit+0x394>)
 800399a:	2200      	movs	r2, #0
 800399c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800399e:	4837      	ldr	r0, [pc, #220]	@ (8003a7c <HAL_UART_MspInit+0x394>)
 80039a0:	f000 fa98 	bl	8003ed4 <HAL_DMA_Init>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d001      	beq.n	80039ae <HAL_UART_MspInit+0x2c6>
      Error_Handler();
 80039aa:	f7fe fb83 	bl	80020b4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a32      	ldr	r2, [pc, #200]	@ (8003a7c <HAL_UART_MspInit+0x394>)
 80039b2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80039b4:	4a31      	ldr	r2, [pc, #196]	@ (8003a7c <HAL_UART_MspInit+0x394>)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80039ba:	e101      	b.n	8003bc0 <HAL_UART_MspInit+0x4d8>
  else if(uartHandle->Instance==USART3)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a30      	ldr	r2, [pc, #192]	@ (8003a84 <HAL_UART_MspInit+0x39c>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d164      	bne.n	8003a90 <HAL_UART_MspInit+0x3a8>
    __HAL_RCC_USART3_CLK_ENABLE();
 80039c6:	2300      	movs	r3, #0
 80039c8:	61fb      	str	r3, [r7, #28]
 80039ca:	4b2a      	ldr	r3, [pc, #168]	@ (8003a74 <HAL_UART_MspInit+0x38c>)
 80039cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ce:	4a29      	ldr	r2, [pc, #164]	@ (8003a74 <HAL_UART_MspInit+0x38c>)
 80039d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80039d6:	4b27      	ldr	r3, [pc, #156]	@ (8003a74 <HAL_UART_MspInit+0x38c>)
 80039d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80039de:	61fb      	str	r3, [r7, #28]
 80039e0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80039e2:	2300      	movs	r3, #0
 80039e4:	61bb      	str	r3, [r7, #24]
 80039e6:	4b23      	ldr	r3, [pc, #140]	@ (8003a74 <HAL_UART_MspInit+0x38c>)
 80039e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ea:	4a22      	ldr	r2, [pc, #136]	@ (8003a74 <HAL_UART_MspInit+0x38c>)
 80039ec:	f043 0304 	orr.w	r3, r3, #4
 80039f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80039f2:	4b20      	ldr	r3, [pc, #128]	@ (8003a74 <HAL_UART_MspInit+0x38c>)
 80039f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039f6:	f003 0304 	and.w	r3, r3, #4
 80039fa:	61bb      	str	r3, [r7, #24]
 80039fc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039fe:	2300      	movs	r3, #0
 8003a00:	617b      	str	r3, [r7, #20]
 8003a02:	4b1c      	ldr	r3, [pc, #112]	@ (8003a74 <HAL_UART_MspInit+0x38c>)
 8003a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a06:	4a1b      	ldr	r2, [pc, #108]	@ (8003a74 <HAL_UART_MspInit+0x38c>)
 8003a08:	f043 0302 	orr.w	r3, r3, #2
 8003a0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a0e:	4b19      	ldr	r3, [pc, #100]	@ (8003a74 <HAL_UART_MspInit+0x38c>)
 8003a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a12:	f003 0302 	and.w	r3, r3, #2
 8003a16:	617b      	str	r3, [r7, #20]
 8003a18:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = esp32_RX_Pin;
 8003a1a:	2320      	movs	r3, #32
 8003a1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a1e:	2302      	movs	r3, #2
 8003a20:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a22:	2300      	movs	r3, #0
 8003a24:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a26:	2303      	movs	r3, #3
 8003a28:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003a2a:	2307      	movs	r3, #7
 8003a2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(esp32_RX_GPIO_Port, &GPIO_InitStruct);
 8003a2e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003a32:	4619      	mov	r1, r3
 8003a34:	4814      	ldr	r0, [pc, #80]	@ (8003a88 <HAL_UART_MspInit+0x3a0>)
 8003a36:	f000 fe4f 	bl	80046d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = esp32_TX_Pin;
 8003a3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003a3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a40:	2302      	movs	r3, #2
 8003a42:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a44:	2300      	movs	r3, #0
 8003a46:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003a4c:	2307      	movs	r3, #7
 8003a4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(esp32_TX_GPIO_Port, &GPIO_InitStruct);
 8003a50:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003a54:	4619      	mov	r1, r3
 8003a56:	480d      	ldr	r0, [pc, #52]	@ (8003a8c <HAL_UART_MspInit+0x3a4>)
 8003a58:	f000 fe3e 	bl	80046d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	2105      	movs	r1, #5
 8003a60:	2027      	movs	r0, #39	@ 0x27
 8003a62:	f000 fa0d 	bl	8003e80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003a66:	2027      	movs	r0, #39	@ 0x27
 8003a68:	f000 fa26 	bl	8003eb8 <HAL_NVIC_EnableIRQ>
}
 8003a6c:	e0a8      	b.n	8003bc0 <HAL_UART_MspInit+0x4d8>
 8003a6e:	bf00      	nop
 8003a70:	40004400 	.word	0x40004400
 8003a74:	40023800 	.word	0x40023800
 8003a78:	40020000 	.word	0x40020000
 8003a7c:	20008910 	.word	0x20008910
 8003a80:	40026088 	.word	0x40026088
 8003a84:	40004800 	.word	0x40004800
 8003a88:	40020800 	.word	0x40020800
 8003a8c:	40020400 	.word	0x40020400
  else if(uartHandle->Instance==USART6)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a4c      	ldr	r2, [pc, #304]	@ (8003bc8 <HAL_UART_MspInit+0x4e0>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	f040 8092 	bne.w	8003bc0 <HAL_UART_MspInit+0x4d8>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	613b      	str	r3, [r7, #16]
 8003aa0:	4b4a      	ldr	r3, [pc, #296]	@ (8003bcc <HAL_UART_MspInit+0x4e4>)
 8003aa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aa4:	4a49      	ldr	r2, [pc, #292]	@ (8003bcc <HAL_UART_MspInit+0x4e4>)
 8003aa6:	f043 0320 	orr.w	r3, r3, #32
 8003aaa:	6453      	str	r3, [r2, #68]	@ 0x44
 8003aac:	4b47      	ldr	r3, [pc, #284]	@ (8003bcc <HAL_UART_MspInit+0x4e4>)
 8003aae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ab0:	f003 0320 	and.w	r3, r3, #32
 8003ab4:	613b      	str	r3, [r7, #16]
 8003ab6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ab8:	2300      	movs	r3, #0
 8003aba:	60fb      	str	r3, [r7, #12]
 8003abc:	4b43      	ldr	r3, [pc, #268]	@ (8003bcc <HAL_UART_MspInit+0x4e4>)
 8003abe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ac0:	4a42      	ldr	r2, [pc, #264]	@ (8003bcc <HAL_UART_MspInit+0x4e4>)
 8003ac2:	f043 0304 	orr.w	r3, r3, #4
 8003ac6:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ac8:	4b40      	ldr	r3, [pc, #256]	@ (8003bcc <HAL_UART_MspInit+0x4e4>)
 8003aca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003acc:	f003 0304 	and.w	r3, r3, #4
 8003ad0:	60fb      	str	r3, [r7, #12]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Micro_ROS_TX_Pin|Micro_ROS_RX_Pin;
 8003ad4:	23c0      	movs	r3, #192	@ 0xc0
 8003ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ad8:	2302      	movs	r3, #2
 8003ada:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003adc:	2300      	movs	r3, #0
 8003ade:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003ae4:	2308      	movs	r3, #8
 8003ae6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ae8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003aec:	4619      	mov	r1, r3
 8003aee:	4838      	ldr	r0, [pc, #224]	@ (8003bd0 <HAL_UART_MspInit+0x4e8>)
 8003af0:	f000 fdf2 	bl	80046d8 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8003af4:	4b37      	ldr	r3, [pc, #220]	@ (8003bd4 <HAL_UART_MspInit+0x4ec>)
 8003af6:	4a38      	ldr	r2, [pc, #224]	@ (8003bd8 <HAL_UART_MspInit+0x4f0>)
 8003af8:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8003afa:	4b36      	ldr	r3, [pc, #216]	@ (8003bd4 <HAL_UART_MspInit+0x4ec>)
 8003afc:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8003b00:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b02:	4b34      	ldr	r3, [pc, #208]	@ (8003bd4 <HAL_UART_MspInit+0x4ec>)
 8003b04:	2200      	movs	r2, #0
 8003b06:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b08:	4b32      	ldr	r3, [pc, #200]	@ (8003bd4 <HAL_UART_MspInit+0x4ec>)
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003b0e:	4b31      	ldr	r3, [pc, #196]	@ (8003bd4 <HAL_UART_MspInit+0x4ec>)
 8003b10:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003b14:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b16:	4b2f      	ldr	r3, [pc, #188]	@ (8003bd4 <HAL_UART_MspInit+0x4ec>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b1c:	4b2d      	ldr	r3, [pc, #180]	@ (8003bd4 <HAL_UART_MspInit+0x4ec>)
 8003b1e:	2200      	movs	r2, #0
 8003b20:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8003b22:	4b2c      	ldr	r3, [pc, #176]	@ (8003bd4 <HAL_UART_MspInit+0x4ec>)
 8003b24:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003b28:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003b2a:	4b2a      	ldr	r3, [pc, #168]	@ (8003bd4 <HAL_UART_MspInit+0x4ec>)
 8003b2c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003b30:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b32:	4b28      	ldr	r3, [pc, #160]	@ (8003bd4 <HAL_UART_MspInit+0x4ec>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8003b38:	4826      	ldr	r0, [pc, #152]	@ (8003bd4 <HAL_UART_MspInit+0x4ec>)
 8003b3a:	f000 f9cb 	bl	8003ed4 <HAL_DMA_Init>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d001      	beq.n	8003b48 <HAL_UART_MspInit+0x460>
      Error_Handler();
 8003b44:	f7fe fab6 	bl	80020b4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a22      	ldr	r2, [pc, #136]	@ (8003bd4 <HAL_UART_MspInit+0x4ec>)
 8003b4c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003b4e:	4a21      	ldr	r2, [pc, #132]	@ (8003bd4 <HAL_UART_MspInit+0x4ec>)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8003b54:	4b21      	ldr	r3, [pc, #132]	@ (8003bdc <HAL_UART_MspInit+0x4f4>)
 8003b56:	4a22      	ldr	r2, [pc, #136]	@ (8003be0 <HAL_UART_MspInit+0x4f8>)
 8003b58:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8003b5a:	4b20      	ldr	r3, [pc, #128]	@ (8003bdc <HAL_UART_MspInit+0x4f4>)
 8003b5c:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8003b60:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003b62:	4b1e      	ldr	r3, [pc, #120]	@ (8003bdc <HAL_UART_MspInit+0x4f4>)
 8003b64:	2240      	movs	r2, #64	@ 0x40
 8003b66:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b68:	4b1c      	ldr	r3, [pc, #112]	@ (8003bdc <HAL_UART_MspInit+0x4f4>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003b6e:	4b1b      	ldr	r3, [pc, #108]	@ (8003bdc <HAL_UART_MspInit+0x4f4>)
 8003b70:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003b74:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b76:	4b19      	ldr	r3, [pc, #100]	@ (8003bdc <HAL_UART_MspInit+0x4f4>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b7c:	4b17      	ldr	r3, [pc, #92]	@ (8003bdc <HAL_UART_MspInit+0x4f4>)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8003b82:	4b16      	ldr	r3, [pc, #88]	@ (8003bdc <HAL_UART_MspInit+0x4f4>)
 8003b84:	2200      	movs	r2, #0
 8003b86:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003b88:	4b14      	ldr	r3, [pc, #80]	@ (8003bdc <HAL_UART_MspInit+0x4f4>)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b8e:	4b13      	ldr	r3, [pc, #76]	@ (8003bdc <HAL_UART_MspInit+0x4f4>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8003b94:	4811      	ldr	r0, [pc, #68]	@ (8003bdc <HAL_UART_MspInit+0x4f4>)
 8003b96:	f000 f99d 	bl	8003ed4 <HAL_DMA_Init>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d001      	beq.n	8003ba4 <HAL_UART_MspInit+0x4bc>
      Error_Handler();
 8003ba0:	f7fe fa88 	bl	80020b4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4a0d      	ldr	r2, [pc, #52]	@ (8003bdc <HAL_UART_MspInit+0x4f4>)
 8003ba8:	639a      	str	r2, [r3, #56]	@ 0x38
 8003baa:	4a0c      	ldr	r2, [pc, #48]	@ (8003bdc <HAL_UART_MspInit+0x4f4>)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	2105      	movs	r1, #5
 8003bb4:	2047      	movs	r0, #71	@ 0x47
 8003bb6:	f000 f963 	bl	8003e80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003bba:	2047      	movs	r0, #71	@ 0x47
 8003bbc:	f000 f97c 	bl	8003eb8 <HAL_NVIC_EnableIRQ>
}
 8003bc0:	bf00      	nop
 8003bc2:	3750      	adds	r7, #80	@ 0x50
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	40011400 	.word	0x40011400
 8003bcc:	40023800 	.word	0x40023800
 8003bd0:	40020800 	.word	0x40020800
 8003bd4:	20008970 	.word	0x20008970
 8003bd8:	40026428 	.word	0x40026428
 8003bdc:	200089d0 	.word	0x200089d0
 8003be0:	400264a0 	.word	0x400264a0

08003be4 <Publisher_state>:

extern rcl_publisher_t publisher_string_scan;
extern rcl_publisher_t publisher_string_pos;
extern UART_HandleTypeDef huart2;

void Publisher_state(){
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b088      	sub	sp, #32
 8003be8:	af00      	add	r7, sp, #0
	std_msgs__msg__String msg;
	char str[20] = "finish";
 8003bea:	4a11      	ldr	r2, [pc, #68]	@ (8003c30 <Publisher_state+0x4c>)
 8003bec:	463b      	mov	r3, r7
 8003bee:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003bf2:	6018      	str	r0, [r3, #0]
 8003bf4:	3304      	adds	r3, #4
 8003bf6:	8019      	strh	r1, [r3, #0]
 8003bf8:	3302      	adds	r3, #2
 8003bfa:	0c0a      	lsrs	r2, r1, #16
 8003bfc:	701a      	strb	r2, [r3, #0]
 8003bfe:	1dfb      	adds	r3, r7, #7
 8003c00:	2200      	movs	r2, #0
 8003c02:	601a      	str	r2, [r3, #0]
 8003c04:	605a      	str	r2, [r3, #4]
 8003c06:	609a      	str	r2, [r3, #8]
 8003c08:	731a      	strb	r2, [r3, #12]
	msg.data.data = str;
 8003c0a:	463b      	mov	r3, r7
 8003c0c:	617b      	str	r3, [r7, #20]
	msg.data.size = strlen(str);
 8003c0e:	463b      	mov	r3, r7
 8003c10:	4618      	mov	r0, r3
 8003c12:	f7fc fb5d 	bl	80002d0 <strlen>
 8003c16:	4603      	mov	r3, r0
 8003c18:	61bb      	str	r3, [r7, #24]
	rcl_publish(&publisher_string_scan, &msg, NULL);
 8003c1a:	f107 0314 	add.w	r3, r7, #20
 8003c1e:	2200      	movs	r2, #0
 8003c20:	4619      	mov	r1, r3
 8003c22:	4804      	ldr	r0, [pc, #16]	@ (8003c34 <Publisher_state+0x50>)
 8003c24:	f006 fd54 	bl	800a6d0 <rcl_publish>
}
 8003c28:	bf00      	nop
 8003c2a:	3720      	adds	r7, #32
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	08019f58 	.word	0x08019f58
 8003c34:	200046c4 	.word	0x200046c4

08003c38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003c38:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003c70 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003c3c:	f7ff f8e8 	bl	8002e10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003c40:	480c      	ldr	r0, [pc, #48]	@ (8003c74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003c42:	490d      	ldr	r1, [pc, #52]	@ (8003c78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003c44:	4a0d      	ldr	r2, [pc, #52]	@ (8003c7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003c46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c48:	e002      	b.n	8003c50 <LoopCopyDataInit>

08003c4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c4e:	3304      	adds	r3, #4

08003c50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c54:	d3f9      	bcc.n	8003c4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c56:	4a0a      	ldr	r2, [pc, #40]	@ (8003c80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003c58:	4c0a      	ldr	r4, [pc, #40]	@ (8003c84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003c5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c5c:	e001      	b.n	8003c62 <LoopFillZerobss>

08003c5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c60:	3204      	adds	r2, #4

08003c62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c64:	d3fb      	bcc.n	8003c5e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003c66:	f014 f9a3 	bl	8017fb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c6a:	f7fe f969 	bl	8001f40 <main>
  bx  lr    
 8003c6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003c70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003c74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c78:	20000284 	.word	0x20000284
  ldr r2, =_sidata
 8003c7c:	0801afd0 	.word	0x0801afd0
  ldr r2, =_sbss
 8003c80:	20000288 	.word	0x20000288
  ldr r4, =_ebss
 8003c84:	20011450 	.word	0x20011450

08003c88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c88:	e7fe      	b.n	8003c88 <ADC_IRQHandler>
	...

08003c8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003c90:	4b0e      	ldr	r3, [pc, #56]	@ (8003ccc <HAL_Init+0x40>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a0d      	ldr	r2, [pc, #52]	@ (8003ccc <HAL_Init+0x40>)
 8003c96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003c9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8003ccc <HAL_Init+0x40>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a0a      	ldr	r2, [pc, #40]	@ (8003ccc <HAL_Init+0x40>)
 8003ca2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003ca6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ca8:	4b08      	ldr	r3, [pc, #32]	@ (8003ccc <HAL_Init+0x40>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a07      	ldr	r2, [pc, #28]	@ (8003ccc <HAL_Init+0x40>)
 8003cae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003cb4:	2003      	movs	r0, #3
 8003cb6:	f000 f8d8 	bl	8003e6a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003cba:	200f      	movs	r0, #15
 8003cbc:	f7fe fed8 	bl	8002a70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003cc0:	f7fe feaa 	bl	8002a18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	40023c00 	.word	0x40023c00

08003cd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003cd4:	4b06      	ldr	r3, [pc, #24]	@ (8003cf0 <HAL_IncTick+0x20>)
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	461a      	mov	r2, r3
 8003cda:	4b06      	ldr	r3, [pc, #24]	@ (8003cf4 <HAL_IncTick+0x24>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4413      	add	r3, r2
 8003ce0:	4a04      	ldr	r2, [pc, #16]	@ (8003cf4 <HAL_IncTick+0x24>)
 8003ce2:	6013      	str	r3, [r2, #0]
}
 8003ce4:	bf00      	nop
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	20000014 	.word	0x20000014
 8003cf4:	20008a30 	.word	0x20008a30

08003cf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	af00      	add	r7, sp, #0
  return uwTick;
 8003cfc:	4b03      	ldr	r3, [pc, #12]	@ (8003d0c <HAL_GetTick+0x14>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	20008a30 	.word	0x20008a30

08003d10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b085      	sub	sp, #20
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f003 0307 	and.w	r3, r3, #7
 8003d1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d20:	4b0c      	ldr	r3, [pc, #48]	@ (8003d54 <__NVIC_SetPriorityGrouping+0x44>)
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d26:	68ba      	ldr	r2, [r7, #8]
 8003d28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003d3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d42:	4a04      	ldr	r2, [pc, #16]	@ (8003d54 <__NVIC_SetPriorityGrouping+0x44>)
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	60d3      	str	r3, [r2, #12]
}
 8003d48:	bf00      	nop
 8003d4a:	3714      	adds	r7, #20
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr
 8003d54:	e000ed00 	.word	0xe000ed00

08003d58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d5c:	4b04      	ldr	r3, [pc, #16]	@ (8003d70 <__NVIC_GetPriorityGrouping+0x18>)
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	0a1b      	lsrs	r3, r3, #8
 8003d62:	f003 0307 	and.w	r3, r3, #7
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr
 8003d70:	e000ed00 	.word	0xe000ed00

08003d74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	db0b      	blt.n	8003d9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d86:	79fb      	ldrb	r3, [r7, #7]
 8003d88:	f003 021f 	and.w	r2, r3, #31
 8003d8c:	4907      	ldr	r1, [pc, #28]	@ (8003dac <__NVIC_EnableIRQ+0x38>)
 8003d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d92:	095b      	lsrs	r3, r3, #5
 8003d94:	2001      	movs	r0, #1
 8003d96:	fa00 f202 	lsl.w	r2, r0, r2
 8003d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d9e:	bf00      	nop
 8003da0:	370c      	adds	r7, #12
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	e000e100 	.word	0xe000e100

08003db0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	4603      	mov	r3, r0
 8003db8:	6039      	str	r1, [r7, #0]
 8003dba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	db0a      	blt.n	8003dda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	b2da      	uxtb	r2, r3
 8003dc8:	490c      	ldr	r1, [pc, #48]	@ (8003dfc <__NVIC_SetPriority+0x4c>)
 8003dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dce:	0112      	lsls	r2, r2, #4
 8003dd0:	b2d2      	uxtb	r2, r2
 8003dd2:	440b      	add	r3, r1
 8003dd4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003dd8:	e00a      	b.n	8003df0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	b2da      	uxtb	r2, r3
 8003dde:	4908      	ldr	r1, [pc, #32]	@ (8003e00 <__NVIC_SetPriority+0x50>)
 8003de0:	79fb      	ldrb	r3, [r7, #7]
 8003de2:	f003 030f 	and.w	r3, r3, #15
 8003de6:	3b04      	subs	r3, #4
 8003de8:	0112      	lsls	r2, r2, #4
 8003dea:	b2d2      	uxtb	r2, r2
 8003dec:	440b      	add	r3, r1
 8003dee:	761a      	strb	r2, [r3, #24]
}
 8003df0:	bf00      	nop
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr
 8003dfc:	e000e100 	.word	0xe000e100
 8003e00:	e000ed00 	.word	0xe000ed00

08003e04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b089      	sub	sp, #36	@ 0x24
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f003 0307 	and.w	r3, r3, #7
 8003e16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	f1c3 0307 	rsb	r3, r3, #7
 8003e1e:	2b04      	cmp	r3, #4
 8003e20:	bf28      	it	cs
 8003e22:	2304      	movcs	r3, #4
 8003e24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	3304      	adds	r3, #4
 8003e2a:	2b06      	cmp	r3, #6
 8003e2c:	d902      	bls.n	8003e34 <NVIC_EncodePriority+0x30>
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	3b03      	subs	r3, #3
 8003e32:	e000      	b.n	8003e36 <NVIC_EncodePriority+0x32>
 8003e34:	2300      	movs	r3, #0
 8003e36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e38:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e42:	43da      	mvns	r2, r3
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	401a      	ands	r2, r3
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e4c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	fa01 f303 	lsl.w	r3, r1, r3
 8003e56:	43d9      	mvns	r1, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e5c:	4313      	orrs	r3, r2
         );
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3724      	adds	r7, #36	@ 0x24
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr

08003e6a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e6a:	b580      	push	{r7, lr}
 8003e6c:	b082      	sub	sp, #8
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f7ff ff4c 	bl	8003d10 <__NVIC_SetPriorityGrouping>
}
 8003e78:	bf00      	nop
 8003e7a:	3708      	adds	r7, #8
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b086      	sub	sp, #24
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	4603      	mov	r3, r0
 8003e88:	60b9      	str	r1, [r7, #8]
 8003e8a:	607a      	str	r2, [r7, #4]
 8003e8c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e92:	f7ff ff61 	bl	8003d58 <__NVIC_GetPriorityGrouping>
 8003e96:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	68b9      	ldr	r1, [r7, #8]
 8003e9c:	6978      	ldr	r0, [r7, #20]
 8003e9e:	f7ff ffb1 	bl	8003e04 <NVIC_EncodePriority>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ea8:	4611      	mov	r1, r2
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f7ff ff80 	bl	8003db0 <__NVIC_SetPriority>
}
 8003eb0:	bf00      	nop
 8003eb2:	3718      	adds	r7, #24
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7ff ff54 	bl	8003d74 <__NVIC_EnableIRQ>
}
 8003ecc:	bf00      	nop
 8003ece:	3708      	adds	r7, #8
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b086      	sub	sp, #24
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003edc:	2300      	movs	r3, #0
 8003ede:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003ee0:	f7ff ff0a 	bl	8003cf8 <HAL_GetTick>
 8003ee4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d101      	bne.n	8003ef0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e099      	b.n	8004024 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2202      	movs	r2, #2
 8003ef4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f022 0201 	bic.w	r2, r2, #1
 8003f0e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f10:	e00f      	b.n	8003f32 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f12:	f7ff fef1 	bl	8003cf8 <HAL_GetTick>
 8003f16:	4602      	mov	r2, r0
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	2b05      	cmp	r3, #5
 8003f1e:	d908      	bls.n	8003f32 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2220      	movs	r2, #32
 8003f24:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2203      	movs	r2, #3
 8003f2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e078      	b.n	8004024 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0301 	and.w	r3, r3, #1
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d1e8      	bne.n	8003f12 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003f48:	697a      	ldr	r2, [r7, #20]
 8003f4a:	4b38      	ldr	r3, [pc, #224]	@ (800402c <HAL_DMA_Init+0x158>)
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685a      	ldr	r2, [r3, #4]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	691b      	ldr	r3, [r3, #16]
 8003f64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	699b      	ldr	r3, [r3, #24]
 8003f70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f76:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a1b      	ldr	r3, [r3, #32]
 8003f7c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f7e:	697a      	ldr	r2, [r7, #20]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f88:	2b04      	cmp	r3, #4
 8003f8a:	d107      	bne.n	8003f9c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f94:	4313      	orrs	r3, r2
 8003f96:	697a      	ldr	r2, [r7, #20]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	697a      	ldr	r2, [r7, #20]
 8003fa2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	f023 0307 	bic.w	r3, r3, #7
 8003fb2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb8:	697a      	ldr	r2, [r7, #20]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc2:	2b04      	cmp	r3, #4
 8003fc4:	d117      	bne.n	8003ff6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fca:	697a      	ldr	r2, [r7, #20]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00e      	beq.n	8003ff6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 fb01 	bl	80045e0 <DMA_CheckFifoParam>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d008      	beq.n	8003ff6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2240      	movs	r2, #64	@ 0x40
 8003fe8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2201      	movs	r2, #1
 8003fee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e016      	b.n	8004024 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	697a      	ldr	r2, [r7, #20]
 8003ffc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 fab8 	bl	8004574 <DMA_CalcBaseAndBitshift>
 8004004:	4603      	mov	r3, r0
 8004006:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800400c:	223f      	movs	r2, #63	@ 0x3f
 800400e:	409a      	lsls	r2, r3
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2201      	movs	r2, #1
 800401e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004022:	2300      	movs	r3, #0
}
 8004024:	4618      	mov	r0, r3
 8004026:	3718      	adds	r7, #24
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}
 800402c:	f010803f 	.word	0xf010803f

08004030 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b086      	sub	sp, #24
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	607a      	str	r2, [r7, #4]
 800403c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800403e:	2300      	movs	r3, #0
 8004040:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004046:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800404e:	2b01      	cmp	r3, #1
 8004050:	d101      	bne.n	8004056 <HAL_DMA_Start_IT+0x26>
 8004052:	2302      	movs	r3, #2
 8004054:	e040      	b.n	80040d8 <HAL_DMA_Start_IT+0xa8>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2201      	movs	r2, #1
 800405a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004064:	b2db      	uxtb	r3, r3
 8004066:	2b01      	cmp	r3, #1
 8004068:	d12f      	bne.n	80040ca <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2202      	movs	r2, #2
 800406e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2200      	movs	r2, #0
 8004076:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	68b9      	ldr	r1, [r7, #8]
 800407e:	68f8      	ldr	r0, [r7, #12]
 8004080:	f000 fa4a 	bl	8004518 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004088:	223f      	movs	r2, #63	@ 0x3f
 800408a:	409a      	lsls	r2, r3
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f042 0216 	orr.w	r2, r2, #22
 800409e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d007      	beq.n	80040b8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f042 0208 	orr.w	r2, r2, #8
 80040b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f042 0201 	orr.w	r2, r2, #1
 80040c6:	601a      	str	r2, [r3, #0]
 80040c8:	e005      	b.n	80040d6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80040d2:	2302      	movs	r3, #2
 80040d4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80040d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3718      	adds	r7, #24
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040ec:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80040ee:	f7ff fe03 	bl	8003cf8 <HAL_GetTick>
 80040f2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d008      	beq.n	8004112 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2280      	movs	r2, #128	@ 0x80
 8004104:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e052      	b.n	80041b8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f022 0216 	bic.w	r2, r2, #22
 8004120:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	695a      	ldr	r2, [r3, #20]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004130:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004136:	2b00      	cmp	r3, #0
 8004138:	d103      	bne.n	8004142 <HAL_DMA_Abort+0x62>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800413e:	2b00      	cmp	r3, #0
 8004140:	d007      	beq.n	8004152 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f022 0208 	bic.w	r2, r2, #8
 8004150:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f022 0201 	bic.w	r2, r2, #1
 8004160:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004162:	e013      	b.n	800418c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004164:	f7ff fdc8 	bl	8003cf8 <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	2b05      	cmp	r3, #5
 8004170:	d90c      	bls.n	800418c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2220      	movs	r2, #32
 8004176:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2203      	movs	r2, #3
 800417c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e015      	b.n	80041b8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0301 	and.w	r3, r3, #1
 8004196:	2b00      	cmp	r3, #0
 8004198:	d1e4      	bne.n	8004164 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800419e:	223f      	movs	r2, #63	@ 0x3f
 80041a0:	409a      	lsls	r2, r3
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2201      	movs	r2, #1
 80041aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80041b6:	2300      	movs	r3, #0
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3710      	adds	r7, #16
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}

080041c0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d004      	beq.n	80041de <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2280      	movs	r2, #128	@ 0x80
 80041d8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e00c      	b.n	80041f8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2205      	movs	r2, #5
 80041e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f022 0201 	bic.w	r2, r2, #1
 80041f4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	370c      	adds	r7, #12
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b086      	sub	sp, #24
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800420c:	2300      	movs	r3, #0
 800420e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004210:	4b8e      	ldr	r3, [pc, #568]	@ (800444c <HAL_DMA_IRQHandler+0x248>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a8e      	ldr	r2, [pc, #568]	@ (8004450 <HAL_DMA_IRQHandler+0x24c>)
 8004216:	fba2 2303 	umull	r2, r3, r2, r3
 800421a:	0a9b      	lsrs	r3, r3, #10
 800421c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004222:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800422e:	2208      	movs	r2, #8
 8004230:	409a      	lsls	r2, r3
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	4013      	ands	r3, r2
 8004236:	2b00      	cmp	r3, #0
 8004238:	d01a      	beq.n	8004270 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0304 	and.w	r3, r3, #4
 8004244:	2b00      	cmp	r3, #0
 8004246:	d013      	beq.n	8004270 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f022 0204 	bic.w	r2, r2, #4
 8004256:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800425c:	2208      	movs	r2, #8
 800425e:	409a      	lsls	r2, r3
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004268:	f043 0201 	orr.w	r2, r3, #1
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004274:	2201      	movs	r2, #1
 8004276:	409a      	lsls	r2, r3
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	4013      	ands	r3, r2
 800427c:	2b00      	cmp	r3, #0
 800427e:	d012      	beq.n	80042a6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	695b      	ldr	r3, [r3, #20]
 8004286:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00b      	beq.n	80042a6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004292:	2201      	movs	r2, #1
 8004294:	409a      	lsls	r2, r3
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800429e:	f043 0202 	orr.w	r2, r3, #2
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042aa:	2204      	movs	r2, #4
 80042ac:	409a      	lsls	r2, r3
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	4013      	ands	r3, r2
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d012      	beq.n	80042dc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 0302 	and.w	r3, r3, #2
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d00b      	beq.n	80042dc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042c8:	2204      	movs	r2, #4
 80042ca:	409a      	lsls	r2, r3
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042d4:	f043 0204 	orr.w	r2, r3, #4
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042e0:	2210      	movs	r2, #16
 80042e2:	409a      	lsls	r2, r3
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	4013      	ands	r3, r2
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d043      	beq.n	8004374 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0308 	and.w	r3, r3, #8
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d03c      	beq.n	8004374 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042fe:	2210      	movs	r2, #16
 8004300:	409a      	lsls	r2, r3
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d018      	beq.n	8004346 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d108      	bne.n	8004334 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004326:	2b00      	cmp	r3, #0
 8004328:	d024      	beq.n	8004374 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	4798      	blx	r3
 8004332:	e01f      	b.n	8004374 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004338:	2b00      	cmp	r3, #0
 800433a:	d01b      	beq.n	8004374 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	4798      	blx	r3
 8004344:	e016      	b.n	8004374 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004350:	2b00      	cmp	r3, #0
 8004352:	d107      	bne.n	8004364 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f022 0208 	bic.w	r2, r2, #8
 8004362:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004368:	2b00      	cmp	r3, #0
 800436a:	d003      	beq.n	8004374 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004378:	2220      	movs	r2, #32
 800437a:	409a      	lsls	r2, r3
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	4013      	ands	r3, r2
 8004380:	2b00      	cmp	r3, #0
 8004382:	f000 808f 	beq.w	80044a4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0310 	and.w	r3, r3, #16
 8004390:	2b00      	cmp	r3, #0
 8004392:	f000 8087 	beq.w	80044a4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800439a:	2220      	movs	r2, #32
 800439c:	409a      	lsls	r2, r3
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	2b05      	cmp	r3, #5
 80043ac:	d136      	bne.n	800441c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f022 0216 	bic.w	r2, r2, #22
 80043bc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	695a      	ldr	r2, [r3, #20]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80043cc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d103      	bne.n	80043de <HAL_DMA_IRQHandler+0x1da>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d007      	beq.n	80043ee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f022 0208 	bic.w	r2, r2, #8
 80043ec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043f2:	223f      	movs	r2, #63	@ 0x3f
 80043f4:	409a      	lsls	r2, r3
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2201      	movs	r2, #1
 80043fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800440e:	2b00      	cmp	r3, #0
 8004410:	d07e      	beq.n	8004510 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	4798      	blx	r3
        }
        return;
 800441a:	e079      	b.n	8004510 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d01d      	beq.n	8004466 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d10d      	bne.n	8004454 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800443c:	2b00      	cmp	r3, #0
 800443e:	d031      	beq.n	80044a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	4798      	blx	r3
 8004448:	e02c      	b.n	80044a4 <HAL_DMA_IRQHandler+0x2a0>
 800444a:	bf00      	nop
 800444c:	20000004 	.word	0x20000004
 8004450:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004458:	2b00      	cmp	r3, #0
 800445a:	d023      	beq.n	80044a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	4798      	blx	r3
 8004464:	e01e      	b.n	80044a4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004470:	2b00      	cmp	r3, #0
 8004472:	d10f      	bne.n	8004494 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f022 0210 	bic.w	r2, r2, #16
 8004482:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004498:	2b00      	cmp	r3, #0
 800449a:	d003      	beq.n	80044a4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d032      	beq.n	8004512 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044b0:	f003 0301 	and.w	r3, r3, #1
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d022      	beq.n	80044fe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2205      	movs	r2, #5
 80044bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f022 0201 	bic.w	r2, r2, #1
 80044ce:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	3301      	adds	r3, #1
 80044d4:	60bb      	str	r3, [r7, #8]
 80044d6:	697a      	ldr	r2, [r7, #20]
 80044d8:	429a      	cmp	r2, r3
 80044da:	d307      	bcc.n	80044ec <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0301 	and.w	r3, r3, #1
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d1f2      	bne.n	80044d0 <HAL_DMA_IRQHandler+0x2cc>
 80044ea:	e000      	b.n	80044ee <HAL_DMA_IRQHandler+0x2ea>
          break;
 80044ec:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2201      	movs	r2, #1
 80044f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004502:	2b00      	cmp	r3, #0
 8004504:	d005      	beq.n	8004512 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	4798      	blx	r3
 800450e:	e000      	b.n	8004512 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004510:	bf00      	nop
    }
  }
}
 8004512:	3718      	adds	r7, #24
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004518:	b480      	push	{r7}
 800451a:	b085      	sub	sp, #20
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	607a      	str	r2, [r7, #4]
 8004524:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004534:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	683a      	ldr	r2, [r7, #0]
 800453c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	2b40      	cmp	r3, #64	@ 0x40
 8004544:	d108      	bne.n	8004558 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	68ba      	ldr	r2, [r7, #8]
 8004554:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004556:	e007      	b.n	8004568 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68ba      	ldr	r2, [r7, #8]
 800455e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	60da      	str	r2, [r3, #12]
}
 8004568:	bf00      	nop
 800456a:	3714      	adds	r7, #20
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr

08004574 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004574:	b480      	push	{r7}
 8004576:	b085      	sub	sp, #20
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	b2db      	uxtb	r3, r3
 8004582:	3b10      	subs	r3, #16
 8004584:	4a14      	ldr	r2, [pc, #80]	@ (80045d8 <DMA_CalcBaseAndBitshift+0x64>)
 8004586:	fba2 2303 	umull	r2, r3, r2, r3
 800458a:	091b      	lsrs	r3, r3, #4
 800458c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800458e:	4a13      	ldr	r2, [pc, #76]	@ (80045dc <DMA_CalcBaseAndBitshift+0x68>)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	4413      	add	r3, r2
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	461a      	mov	r2, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2b03      	cmp	r3, #3
 80045a0:	d909      	bls.n	80045b6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80045aa:	f023 0303 	bic.w	r3, r3, #3
 80045ae:	1d1a      	adds	r2, r3, #4
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	659a      	str	r2, [r3, #88]	@ 0x58
 80045b4:	e007      	b.n	80045c6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80045be:	f023 0303 	bic.w	r3, r3, #3
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3714      	adds	r7, #20
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr
 80045d6:	bf00      	nop
 80045d8:	aaaaaaab 	.word	0xaaaaaaab
 80045dc:	08019fb0 	.word	0x08019fb0

080045e0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b085      	sub	sp, #20
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045e8:	2300      	movs	r3, #0
 80045ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045f0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d11f      	bne.n	800463a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	2b03      	cmp	r3, #3
 80045fe:	d856      	bhi.n	80046ae <DMA_CheckFifoParam+0xce>
 8004600:	a201      	add	r2, pc, #4	@ (adr r2, 8004608 <DMA_CheckFifoParam+0x28>)
 8004602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004606:	bf00      	nop
 8004608:	08004619 	.word	0x08004619
 800460c:	0800462b 	.word	0x0800462b
 8004610:	08004619 	.word	0x08004619
 8004614:	080046af 	.word	0x080046af
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800461c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d046      	beq.n	80046b2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004628:	e043      	b.n	80046b2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800462e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004632:	d140      	bne.n	80046b6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004638:	e03d      	b.n	80046b6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004642:	d121      	bne.n	8004688 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	2b03      	cmp	r3, #3
 8004648:	d837      	bhi.n	80046ba <DMA_CheckFifoParam+0xda>
 800464a:	a201      	add	r2, pc, #4	@ (adr r2, 8004650 <DMA_CheckFifoParam+0x70>)
 800464c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004650:	08004661 	.word	0x08004661
 8004654:	08004667 	.word	0x08004667
 8004658:	08004661 	.word	0x08004661
 800465c:	08004679 	.word	0x08004679
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	73fb      	strb	r3, [r7, #15]
      break;
 8004664:	e030      	b.n	80046c8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800466a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d025      	beq.n	80046be <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004676:	e022      	b.n	80046be <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800467c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004680:	d11f      	bne.n	80046c2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004686:	e01c      	b.n	80046c2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	2b02      	cmp	r3, #2
 800468c:	d903      	bls.n	8004696 <DMA_CheckFifoParam+0xb6>
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	2b03      	cmp	r3, #3
 8004692:	d003      	beq.n	800469c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004694:	e018      	b.n	80046c8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	73fb      	strb	r3, [r7, #15]
      break;
 800469a:	e015      	b.n	80046c8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d00e      	beq.n	80046c6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	73fb      	strb	r3, [r7, #15]
      break;
 80046ac:	e00b      	b.n	80046c6 <DMA_CheckFifoParam+0xe6>
      break;
 80046ae:	bf00      	nop
 80046b0:	e00a      	b.n	80046c8 <DMA_CheckFifoParam+0xe8>
      break;
 80046b2:	bf00      	nop
 80046b4:	e008      	b.n	80046c8 <DMA_CheckFifoParam+0xe8>
      break;
 80046b6:	bf00      	nop
 80046b8:	e006      	b.n	80046c8 <DMA_CheckFifoParam+0xe8>
      break;
 80046ba:	bf00      	nop
 80046bc:	e004      	b.n	80046c8 <DMA_CheckFifoParam+0xe8>
      break;
 80046be:	bf00      	nop
 80046c0:	e002      	b.n	80046c8 <DMA_CheckFifoParam+0xe8>
      break;   
 80046c2:	bf00      	nop
 80046c4:	e000      	b.n	80046c8 <DMA_CheckFifoParam+0xe8>
      break;
 80046c6:	bf00      	nop
    }
  } 
  
  return status; 
 80046c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3714      	adds	r7, #20
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr
 80046d6:	bf00      	nop

080046d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046d8:	b480      	push	{r7}
 80046da:	b089      	sub	sp, #36	@ 0x24
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80046e2:	2300      	movs	r3, #0
 80046e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80046e6:	2300      	movs	r3, #0
 80046e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80046ea:	2300      	movs	r3, #0
 80046ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046ee:	2300      	movs	r3, #0
 80046f0:	61fb      	str	r3, [r7, #28]
 80046f2:	e165      	b.n	80049c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80046f4:	2201      	movs	r2, #1
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	fa02 f303 	lsl.w	r3, r2, r3
 80046fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	697a      	ldr	r2, [r7, #20]
 8004704:	4013      	ands	r3, r2
 8004706:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004708:	693a      	ldr	r2, [r7, #16]
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	429a      	cmp	r2, r3
 800470e:	f040 8154 	bne.w	80049ba <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f003 0303 	and.w	r3, r3, #3
 800471a:	2b01      	cmp	r3, #1
 800471c:	d005      	beq.n	800472a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004726:	2b02      	cmp	r3, #2
 8004728:	d130      	bne.n	800478c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	005b      	lsls	r3, r3, #1
 8004734:	2203      	movs	r2, #3
 8004736:	fa02 f303 	lsl.w	r3, r2, r3
 800473a:	43db      	mvns	r3, r3
 800473c:	69ba      	ldr	r2, [r7, #24]
 800473e:	4013      	ands	r3, r2
 8004740:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	68da      	ldr	r2, [r3, #12]
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	005b      	lsls	r3, r3, #1
 800474a:	fa02 f303 	lsl.w	r3, r2, r3
 800474e:	69ba      	ldr	r2, [r7, #24]
 8004750:	4313      	orrs	r3, r2
 8004752:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	69ba      	ldr	r2, [r7, #24]
 8004758:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004760:	2201      	movs	r2, #1
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	fa02 f303 	lsl.w	r3, r2, r3
 8004768:	43db      	mvns	r3, r3
 800476a:	69ba      	ldr	r2, [r7, #24]
 800476c:	4013      	ands	r3, r2
 800476e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	091b      	lsrs	r3, r3, #4
 8004776:	f003 0201 	and.w	r2, r3, #1
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	fa02 f303 	lsl.w	r3, r2, r3
 8004780:	69ba      	ldr	r2, [r7, #24]
 8004782:	4313      	orrs	r3, r2
 8004784:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	69ba      	ldr	r2, [r7, #24]
 800478a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f003 0303 	and.w	r3, r3, #3
 8004794:	2b03      	cmp	r3, #3
 8004796:	d017      	beq.n	80047c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	005b      	lsls	r3, r3, #1
 80047a2:	2203      	movs	r2, #3
 80047a4:	fa02 f303 	lsl.w	r3, r2, r3
 80047a8:	43db      	mvns	r3, r3
 80047aa:	69ba      	ldr	r2, [r7, #24]
 80047ac:	4013      	ands	r3, r2
 80047ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	689a      	ldr	r2, [r3, #8]
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	005b      	lsls	r3, r3, #1
 80047b8:	fa02 f303 	lsl.w	r3, r2, r3
 80047bc:	69ba      	ldr	r2, [r7, #24]
 80047be:	4313      	orrs	r3, r2
 80047c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	69ba      	ldr	r2, [r7, #24]
 80047c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	f003 0303 	and.w	r3, r3, #3
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	d123      	bne.n	800481c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	08da      	lsrs	r2, r3, #3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	3208      	adds	r2, #8
 80047dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	f003 0307 	and.w	r3, r3, #7
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	220f      	movs	r2, #15
 80047ec:	fa02 f303 	lsl.w	r3, r2, r3
 80047f0:	43db      	mvns	r3, r3
 80047f2:	69ba      	ldr	r2, [r7, #24]
 80047f4:	4013      	ands	r3, r2
 80047f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	691a      	ldr	r2, [r3, #16]
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	f003 0307 	and.w	r3, r3, #7
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	fa02 f303 	lsl.w	r3, r2, r3
 8004808:	69ba      	ldr	r2, [r7, #24]
 800480a:	4313      	orrs	r3, r2
 800480c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	08da      	lsrs	r2, r3, #3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	3208      	adds	r2, #8
 8004816:	69b9      	ldr	r1, [r7, #24]
 8004818:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	005b      	lsls	r3, r3, #1
 8004826:	2203      	movs	r2, #3
 8004828:	fa02 f303 	lsl.w	r3, r2, r3
 800482c:	43db      	mvns	r3, r3
 800482e:	69ba      	ldr	r2, [r7, #24]
 8004830:	4013      	ands	r3, r2
 8004832:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f003 0203 	and.w	r2, r3, #3
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	005b      	lsls	r3, r3, #1
 8004840:	fa02 f303 	lsl.w	r3, r2, r3
 8004844:	69ba      	ldr	r2, [r7, #24]
 8004846:	4313      	orrs	r3, r2
 8004848:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	69ba      	ldr	r2, [r7, #24]
 800484e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004858:	2b00      	cmp	r3, #0
 800485a:	f000 80ae 	beq.w	80049ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800485e:	2300      	movs	r3, #0
 8004860:	60fb      	str	r3, [r7, #12]
 8004862:	4b5d      	ldr	r3, [pc, #372]	@ (80049d8 <HAL_GPIO_Init+0x300>)
 8004864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004866:	4a5c      	ldr	r2, [pc, #368]	@ (80049d8 <HAL_GPIO_Init+0x300>)
 8004868:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800486c:	6453      	str	r3, [r2, #68]	@ 0x44
 800486e:	4b5a      	ldr	r3, [pc, #360]	@ (80049d8 <HAL_GPIO_Init+0x300>)
 8004870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004872:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004876:	60fb      	str	r3, [r7, #12]
 8004878:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800487a:	4a58      	ldr	r2, [pc, #352]	@ (80049dc <HAL_GPIO_Init+0x304>)
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	089b      	lsrs	r3, r3, #2
 8004880:	3302      	adds	r3, #2
 8004882:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004886:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	f003 0303 	and.w	r3, r3, #3
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	220f      	movs	r2, #15
 8004892:	fa02 f303 	lsl.w	r3, r2, r3
 8004896:	43db      	mvns	r3, r3
 8004898:	69ba      	ldr	r2, [r7, #24]
 800489a:	4013      	ands	r3, r2
 800489c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a4f      	ldr	r2, [pc, #316]	@ (80049e0 <HAL_GPIO_Init+0x308>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d025      	beq.n	80048f2 <HAL_GPIO_Init+0x21a>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a4e      	ldr	r2, [pc, #312]	@ (80049e4 <HAL_GPIO_Init+0x30c>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d01f      	beq.n	80048ee <HAL_GPIO_Init+0x216>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a4d      	ldr	r2, [pc, #308]	@ (80049e8 <HAL_GPIO_Init+0x310>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d019      	beq.n	80048ea <HAL_GPIO_Init+0x212>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a4c      	ldr	r2, [pc, #304]	@ (80049ec <HAL_GPIO_Init+0x314>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d013      	beq.n	80048e6 <HAL_GPIO_Init+0x20e>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a4b      	ldr	r2, [pc, #300]	@ (80049f0 <HAL_GPIO_Init+0x318>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d00d      	beq.n	80048e2 <HAL_GPIO_Init+0x20a>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a4a      	ldr	r2, [pc, #296]	@ (80049f4 <HAL_GPIO_Init+0x31c>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d007      	beq.n	80048de <HAL_GPIO_Init+0x206>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a49      	ldr	r2, [pc, #292]	@ (80049f8 <HAL_GPIO_Init+0x320>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d101      	bne.n	80048da <HAL_GPIO_Init+0x202>
 80048d6:	2306      	movs	r3, #6
 80048d8:	e00c      	b.n	80048f4 <HAL_GPIO_Init+0x21c>
 80048da:	2307      	movs	r3, #7
 80048dc:	e00a      	b.n	80048f4 <HAL_GPIO_Init+0x21c>
 80048de:	2305      	movs	r3, #5
 80048e0:	e008      	b.n	80048f4 <HAL_GPIO_Init+0x21c>
 80048e2:	2304      	movs	r3, #4
 80048e4:	e006      	b.n	80048f4 <HAL_GPIO_Init+0x21c>
 80048e6:	2303      	movs	r3, #3
 80048e8:	e004      	b.n	80048f4 <HAL_GPIO_Init+0x21c>
 80048ea:	2302      	movs	r3, #2
 80048ec:	e002      	b.n	80048f4 <HAL_GPIO_Init+0x21c>
 80048ee:	2301      	movs	r3, #1
 80048f0:	e000      	b.n	80048f4 <HAL_GPIO_Init+0x21c>
 80048f2:	2300      	movs	r3, #0
 80048f4:	69fa      	ldr	r2, [r7, #28]
 80048f6:	f002 0203 	and.w	r2, r2, #3
 80048fa:	0092      	lsls	r2, r2, #2
 80048fc:	4093      	lsls	r3, r2
 80048fe:	69ba      	ldr	r2, [r7, #24]
 8004900:	4313      	orrs	r3, r2
 8004902:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004904:	4935      	ldr	r1, [pc, #212]	@ (80049dc <HAL_GPIO_Init+0x304>)
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	089b      	lsrs	r3, r3, #2
 800490a:	3302      	adds	r3, #2
 800490c:	69ba      	ldr	r2, [r7, #24]
 800490e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004912:	4b3a      	ldr	r3, [pc, #232]	@ (80049fc <HAL_GPIO_Init+0x324>)
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	43db      	mvns	r3, r3
 800491c:	69ba      	ldr	r2, [r7, #24]
 800491e:	4013      	ands	r3, r2
 8004920:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d003      	beq.n	8004936 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800492e:	69ba      	ldr	r2, [r7, #24]
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	4313      	orrs	r3, r2
 8004934:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004936:	4a31      	ldr	r2, [pc, #196]	@ (80049fc <HAL_GPIO_Init+0x324>)
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800493c:	4b2f      	ldr	r3, [pc, #188]	@ (80049fc <HAL_GPIO_Init+0x324>)
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	43db      	mvns	r3, r3
 8004946:	69ba      	ldr	r2, [r7, #24]
 8004948:	4013      	ands	r3, r2
 800494a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004954:	2b00      	cmp	r3, #0
 8004956:	d003      	beq.n	8004960 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004958:	69ba      	ldr	r2, [r7, #24]
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	4313      	orrs	r3, r2
 800495e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004960:	4a26      	ldr	r2, [pc, #152]	@ (80049fc <HAL_GPIO_Init+0x324>)
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004966:	4b25      	ldr	r3, [pc, #148]	@ (80049fc <HAL_GPIO_Init+0x324>)
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	43db      	mvns	r3, r3
 8004970:	69ba      	ldr	r2, [r7, #24]
 8004972:	4013      	ands	r3, r2
 8004974:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d003      	beq.n	800498a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004982:	69ba      	ldr	r2, [r7, #24]
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	4313      	orrs	r3, r2
 8004988:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800498a:	4a1c      	ldr	r2, [pc, #112]	@ (80049fc <HAL_GPIO_Init+0x324>)
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004990:	4b1a      	ldr	r3, [pc, #104]	@ (80049fc <HAL_GPIO_Init+0x324>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	43db      	mvns	r3, r3
 800499a:	69ba      	ldr	r2, [r7, #24]
 800499c:	4013      	ands	r3, r2
 800499e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d003      	beq.n	80049b4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80049ac:	69ba      	ldr	r2, [r7, #24]
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80049b4:	4a11      	ldr	r2, [pc, #68]	@ (80049fc <HAL_GPIO_Init+0x324>)
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	3301      	adds	r3, #1
 80049be:	61fb      	str	r3, [r7, #28]
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	2b0f      	cmp	r3, #15
 80049c4:	f67f ae96 	bls.w	80046f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80049c8:	bf00      	nop
 80049ca:	bf00      	nop
 80049cc:	3724      	adds	r7, #36	@ 0x24
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr
 80049d6:	bf00      	nop
 80049d8:	40023800 	.word	0x40023800
 80049dc:	40013800 	.word	0x40013800
 80049e0:	40020000 	.word	0x40020000
 80049e4:	40020400 	.word	0x40020400
 80049e8:	40020800 	.word	0x40020800
 80049ec:	40020c00 	.word	0x40020c00
 80049f0:	40021000 	.word	0x40021000
 80049f4:	40021400 	.word	0x40021400
 80049f8:	40021800 	.word	0x40021800
 80049fc:	40013c00 	.word	0x40013c00

08004a00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	460b      	mov	r3, r1
 8004a0a:	807b      	strh	r3, [r7, #2]
 8004a0c:	4613      	mov	r3, r2
 8004a0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a10:	787b      	ldrb	r3, [r7, #1]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d003      	beq.n	8004a1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a16:	887a      	ldrh	r2, [r7, #2]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004a1c:	e003      	b.n	8004a26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a1e:	887b      	ldrh	r3, [r7, #2]
 8004a20:	041a      	lsls	r2, r3, #16
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	619a      	str	r2, [r3, #24]
}
 8004a26:	bf00      	nop
 8004a28:	370c      	adds	r7, #12
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr
	...

08004a34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b082      	sub	sp, #8
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004a3e:	4b08      	ldr	r3, [pc, #32]	@ (8004a60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a40:	695a      	ldr	r2, [r3, #20]
 8004a42:	88fb      	ldrh	r3, [r7, #6]
 8004a44:	4013      	ands	r3, r2
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d006      	beq.n	8004a58 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004a4a:	4a05      	ldr	r2, [pc, #20]	@ (8004a60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a4c:	88fb      	ldrh	r3, [r7, #6]
 8004a4e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004a50:	88fb      	ldrh	r3, [r7, #6]
 8004a52:	4618      	mov	r0, r3
 8004a54:	f7fd fa3a 	bl	8001ecc <HAL_GPIO_EXTI_Callback>
  }
}
 8004a58:	bf00      	nop
 8004a5a:	3708      	adds	r7, #8
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	40013c00 	.word	0x40013c00

08004a64 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b082      	sub	sp, #8
 8004a68:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004a6e:	2300      	movs	r3, #0
 8004a70:	603b      	str	r3, [r7, #0]
 8004a72:	4b20      	ldr	r3, [pc, #128]	@ (8004af4 <HAL_PWREx_EnableOverDrive+0x90>)
 8004a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a76:	4a1f      	ldr	r2, [pc, #124]	@ (8004af4 <HAL_PWREx_EnableOverDrive+0x90>)
 8004a78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004a7e:	4b1d      	ldr	r3, [pc, #116]	@ (8004af4 <HAL_PWREx_EnableOverDrive+0x90>)
 8004a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a86:	603b      	str	r3, [r7, #0]
 8004a88:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004a8a:	4b1b      	ldr	r3, [pc, #108]	@ (8004af8 <HAL_PWREx_EnableOverDrive+0x94>)
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a90:	f7ff f932 	bl	8003cf8 <HAL_GetTick>
 8004a94:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004a96:	e009      	b.n	8004aac <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004a98:	f7ff f92e 	bl	8003cf8 <HAL_GetTick>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004aa6:	d901      	bls.n	8004aac <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e01f      	b.n	8004aec <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004aac:	4b13      	ldr	r3, [pc, #76]	@ (8004afc <HAL_PWREx_EnableOverDrive+0x98>)
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ab4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ab8:	d1ee      	bne.n	8004a98 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004aba:	4b11      	ldr	r3, [pc, #68]	@ (8004b00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004abc:	2201      	movs	r2, #1
 8004abe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ac0:	f7ff f91a 	bl	8003cf8 <HAL_GetTick>
 8004ac4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004ac6:	e009      	b.n	8004adc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004ac8:	f7ff f916 	bl	8003cf8 <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004ad6:	d901      	bls.n	8004adc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004ad8:	2303      	movs	r3, #3
 8004ada:	e007      	b.n	8004aec <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004adc:	4b07      	ldr	r3, [pc, #28]	@ (8004afc <HAL_PWREx_EnableOverDrive+0x98>)
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ae4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ae8:	d1ee      	bne.n	8004ac8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004aea:	2300      	movs	r3, #0
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3708      	adds	r7, #8
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}
 8004af4:	40023800 	.word	0x40023800
 8004af8:	420e0040 	.word	0x420e0040
 8004afc:	40007000 	.word	0x40007000
 8004b00:	420e0044 	.word	0x420e0044

08004b04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b084      	sub	sp, #16
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d101      	bne.n	8004b18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e0cc      	b.n	8004cb2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b18:	4b68      	ldr	r3, [pc, #416]	@ (8004cbc <HAL_RCC_ClockConfig+0x1b8>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 030f 	and.w	r3, r3, #15
 8004b20:	683a      	ldr	r2, [r7, #0]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d90c      	bls.n	8004b40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b26:	4b65      	ldr	r3, [pc, #404]	@ (8004cbc <HAL_RCC_ClockConfig+0x1b8>)
 8004b28:	683a      	ldr	r2, [r7, #0]
 8004b2a:	b2d2      	uxtb	r2, r2
 8004b2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b2e:	4b63      	ldr	r3, [pc, #396]	@ (8004cbc <HAL_RCC_ClockConfig+0x1b8>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 030f 	and.w	r3, r3, #15
 8004b36:	683a      	ldr	r2, [r7, #0]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d001      	beq.n	8004b40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e0b8      	b.n	8004cb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0302 	and.w	r3, r3, #2
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d020      	beq.n	8004b8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0304 	and.w	r3, r3, #4
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d005      	beq.n	8004b64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b58:	4b59      	ldr	r3, [pc, #356]	@ (8004cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	4a58      	ldr	r2, [pc, #352]	@ (8004cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b5e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004b62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0308 	and.w	r3, r3, #8
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d005      	beq.n	8004b7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b70:	4b53      	ldr	r3, [pc, #332]	@ (8004cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	4a52      	ldr	r2, [pc, #328]	@ (8004cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b76:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004b7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b7c:	4b50      	ldr	r3, [pc, #320]	@ (8004cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	494d      	ldr	r1, [pc, #308]	@ (8004cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0301 	and.w	r3, r3, #1
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d044      	beq.n	8004c24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d107      	bne.n	8004bb2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ba2:	4b47      	ldr	r3, [pc, #284]	@ (8004cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d119      	bne.n	8004be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e07f      	b.n	8004cb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d003      	beq.n	8004bc2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bbe:	2b03      	cmp	r3, #3
 8004bc0:	d107      	bne.n	8004bd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bc2:	4b3f      	ldr	r3, [pc, #252]	@ (8004cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d109      	bne.n	8004be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e06f      	b.n	8004cb2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bd2:	4b3b      	ldr	r3, [pc, #236]	@ (8004cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 0302 	and.w	r3, r3, #2
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d101      	bne.n	8004be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e067      	b.n	8004cb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004be2:	4b37      	ldr	r3, [pc, #220]	@ (8004cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	f023 0203 	bic.w	r2, r3, #3
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	4934      	ldr	r1, [pc, #208]	@ (8004cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004bf4:	f7ff f880 	bl	8003cf8 <HAL_GetTick>
 8004bf8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bfa:	e00a      	b.n	8004c12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bfc:	f7ff f87c 	bl	8003cf8 <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d901      	bls.n	8004c12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e04f      	b.n	8004cb2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c12:	4b2b      	ldr	r3, [pc, #172]	@ (8004cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	f003 020c 	and.w	r2, r3, #12
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d1eb      	bne.n	8004bfc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c24:	4b25      	ldr	r3, [pc, #148]	@ (8004cbc <HAL_RCC_ClockConfig+0x1b8>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 030f 	and.w	r3, r3, #15
 8004c2c:	683a      	ldr	r2, [r7, #0]
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d20c      	bcs.n	8004c4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c32:	4b22      	ldr	r3, [pc, #136]	@ (8004cbc <HAL_RCC_ClockConfig+0x1b8>)
 8004c34:	683a      	ldr	r2, [r7, #0]
 8004c36:	b2d2      	uxtb	r2, r2
 8004c38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c3a:	4b20      	ldr	r3, [pc, #128]	@ (8004cbc <HAL_RCC_ClockConfig+0x1b8>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 030f 	and.w	r3, r3, #15
 8004c42:	683a      	ldr	r2, [r7, #0]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d001      	beq.n	8004c4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e032      	b.n	8004cb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 0304 	and.w	r3, r3, #4
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d008      	beq.n	8004c6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c58:	4b19      	ldr	r3, [pc, #100]	@ (8004cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	4916      	ldr	r1, [pc, #88]	@ (8004cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c66:	4313      	orrs	r3, r2
 8004c68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0308 	and.w	r3, r3, #8
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d009      	beq.n	8004c8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c76:	4b12      	ldr	r3, [pc, #72]	@ (8004cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	00db      	lsls	r3, r3, #3
 8004c84:	490e      	ldr	r1, [pc, #56]	@ (8004cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c86:	4313      	orrs	r3, r2
 8004c88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c8a:	f000 f887 	bl	8004d9c <HAL_RCC_GetSysClockFreq>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	4b0b      	ldr	r3, [pc, #44]	@ (8004cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	091b      	lsrs	r3, r3, #4
 8004c96:	f003 030f 	and.w	r3, r3, #15
 8004c9a:	490a      	ldr	r1, [pc, #40]	@ (8004cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c9c:	5ccb      	ldrb	r3, [r1, r3]
 8004c9e:	fa22 f303 	lsr.w	r3, r2, r3
 8004ca2:	4a09      	ldr	r2, [pc, #36]	@ (8004cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8004ca4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004ca6:	4b09      	ldr	r3, [pc, #36]	@ (8004ccc <HAL_RCC_ClockConfig+0x1c8>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4618      	mov	r0, r3
 8004cac:	f7fd fee0 	bl	8002a70 <HAL_InitTick>

  return HAL_OK;
 8004cb0:	2300      	movs	r3, #0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3710      	adds	r7, #16
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	40023c00 	.word	0x40023c00
 8004cc0:	40023800 	.word	0x40023800
 8004cc4:	08019f98 	.word	0x08019f98
 8004cc8:	20000004 	.word	0x20000004
 8004ccc:	20000010 	.word	0x20000010

08004cd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cd4:	4b03      	ldr	r3, [pc, #12]	@ (8004ce4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop
 8004ce4:	20000004 	.word	0x20000004

08004ce8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004cec:	f7ff fff0 	bl	8004cd0 <HAL_RCC_GetHCLKFreq>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	4b05      	ldr	r3, [pc, #20]	@ (8004d08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	0a9b      	lsrs	r3, r3, #10
 8004cf8:	f003 0307 	and.w	r3, r3, #7
 8004cfc:	4903      	ldr	r1, [pc, #12]	@ (8004d0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cfe:	5ccb      	ldrb	r3, [r1, r3]
 8004d00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	40023800 	.word	0x40023800
 8004d0c:	08019fa8 	.word	0x08019fa8

08004d10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004d14:	f7ff ffdc 	bl	8004cd0 <HAL_RCC_GetHCLKFreq>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	4b05      	ldr	r3, [pc, #20]	@ (8004d30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	0b5b      	lsrs	r3, r3, #13
 8004d20:	f003 0307 	and.w	r3, r3, #7
 8004d24:	4903      	ldr	r1, [pc, #12]	@ (8004d34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d26:	5ccb      	ldrb	r3, [r1, r3]
 8004d28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	40023800 	.word	0x40023800
 8004d34:	08019fa8 	.word	0x08019fa8

08004d38 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b083      	sub	sp, #12
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	220f      	movs	r2, #15
 8004d46:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004d48:	4b12      	ldr	r3, [pc, #72]	@ (8004d94 <HAL_RCC_GetClockConfig+0x5c>)
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	f003 0203 	and.w	r2, r3, #3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004d54:	4b0f      	ldr	r3, [pc, #60]	@ (8004d94 <HAL_RCC_GetClockConfig+0x5c>)
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004d60:	4b0c      	ldr	r3, [pc, #48]	@ (8004d94 <HAL_RCC_GetClockConfig+0x5c>)
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004d6c:	4b09      	ldr	r3, [pc, #36]	@ (8004d94 <HAL_RCC_GetClockConfig+0x5c>)
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	08db      	lsrs	r3, r3, #3
 8004d72:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004d7a:	4b07      	ldr	r3, [pc, #28]	@ (8004d98 <HAL_RCC_GetClockConfig+0x60>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 020f 	and.w	r2, r3, #15
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	601a      	str	r2, [r3, #0]
}
 8004d86:	bf00      	nop
 8004d88:	370c      	adds	r7, #12
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr
 8004d92:	bf00      	nop
 8004d94:	40023800 	.word	0x40023800
 8004d98:	40023c00 	.word	0x40023c00

08004d9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004da0:	b0ae      	sub	sp, #184	@ 0xb8
 8004da2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004da4:	2300      	movs	r3, #0
 8004da6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8004daa:	2300      	movs	r3, #0
 8004dac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004db0:	2300      	movs	r3, #0
 8004db2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004db6:	2300      	movs	r3, #0
 8004db8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004dc2:	4bcb      	ldr	r3, [pc, #812]	@ (80050f0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	f003 030c 	and.w	r3, r3, #12
 8004dca:	2b0c      	cmp	r3, #12
 8004dcc:	f200 8206 	bhi.w	80051dc <HAL_RCC_GetSysClockFreq+0x440>
 8004dd0:	a201      	add	r2, pc, #4	@ (adr r2, 8004dd8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dd6:	bf00      	nop
 8004dd8:	08004e0d 	.word	0x08004e0d
 8004ddc:	080051dd 	.word	0x080051dd
 8004de0:	080051dd 	.word	0x080051dd
 8004de4:	080051dd 	.word	0x080051dd
 8004de8:	08004e15 	.word	0x08004e15
 8004dec:	080051dd 	.word	0x080051dd
 8004df0:	080051dd 	.word	0x080051dd
 8004df4:	080051dd 	.word	0x080051dd
 8004df8:	08004e1d 	.word	0x08004e1d
 8004dfc:	080051dd 	.word	0x080051dd
 8004e00:	080051dd 	.word	0x080051dd
 8004e04:	080051dd 	.word	0x080051dd
 8004e08:	0800500d 	.word	0x0800500d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e0c:	4bb9      	ldr	r3, [pc, #740]	@ (80050f4 <HAL_RCC_GetSysClockFreq+0x358>)
 8004e0e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8004e12:	e1e7      	b.n	80051e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e14:	4bb8      	ldr	r3, [pc, #736]	@ (80050f8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004e16:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004e1a:	e1e3      	b.n	80051e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e1c:	4bb4      	ldr	r3, [pc, #720]	@ (80050f0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e24:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e28:	4bb1      	ldr	r3, [pc, #708]	@ (80050f0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d071      	beq.n	8004f18 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e34:	4bae      	ldr	r3, [pc, #696]	@ (80050f0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	099b      	lsrs	r3, r3, #6
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004e40:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004e44:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004e48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e4c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004e50:	2300      	movs	r3, #0
 8004e52:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004e56:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004e5a:	4622      	mov	r2, r4
 8004e5c:	462b      	mov	r3, r5
 8004e5e:	f04f 0000 	mov.w	r0, #0
 8004e62:	f04f 0100 	mov.w	r1, #0
 8004e66:	0159      	lsls	r1, r3, #5
 8004e68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e6c:	0150      	lsls	r0, r2, #5
 8004e6e:	4602      	mov	r2, r0
 8004e70:	460b      	mov	r3, r1
 8004e72:	4621      	mov	r1, r4
 8004e74:	1a51      	subs	r1, r2, r1
 8004e76:	6439      	str	r1, [r7, #64]	@ 0x40
 8004e78:	4629      	mov	r1, r5
 8004e7a:	eb63 0301 	sbc.w	r3, r3, r1
 8004e7e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e80:	f04f 0200 	mov.w	r2, #0
 8004e84:	f04f 0300 	mov.w	r3, #0
 8004e88:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004e8c:	4649      	mov	r1, r9
 8004e8e:	018b      	lsls	r3, r1, #6
 8004e90:	4641      	mov	r1, r8
 8004e92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e96:	4641      	mov	r1, r8
 8004e98:	018a      	lsls	r2, r1, #6
 8004e9a:	4641      	mov	r1, r8
 8004e9c:	1a51      	subs	r1, r2, r1
 8004e9e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004ea0:	4649      	mov	r1, r9
 8004ea2:	eb63 0301 	sbc.w	r3, r3, r1
 8004ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ea8:	f04f 0200 	mov.w	r2, #0
 8004eac:	f04f 0300 	mov.w	r3, #0
 8004eb0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004eb4:	4649      	mov	r1, r9
 8004eb6:	00cb      	lsls	r3, r1, #3
 8004eb8:	4641      	mov	r1, r8
 8004eba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ebe:	4641      	mov	r1, r8
 8004ec0:	00ca      	lsls	r2, r1, #3
 8004ec2:	4610      	mov	r0, r2
 8004ec4:	4619      	mov	r1, r3
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	4622      	mov	r2, r4
 8004eca:	189b      	adds	r3, r3, r2
 8004ecc:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ece:	462b      	mov	r3, r5
 8004ed0:	460a      	mov	r2, r1
 8004ed2:	eb42 0303 	adc.w	r3, r2, r3
 8004ed6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ed8:	f04f 0200 	mov.w	r2, #0
 8004edc:	f04f 0300 	mov.w	r3, #0
 8004ee0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004ee4:	4629      	mov	r1, r5
 8004ee6:	024b      	lsls	r3, r1, #9
 8004ee8:	4621      	mov	r1, r4
 8004eea:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004eee:	4621      	mov	r1, r4
 8004ef0:	024a      	lsls	r2, r1, #9
 8004ef2:	4610      	mov	r0, r2
 8004ef4:	4619      	mov	r1, r3
 8004ef6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004efa:	2200      	movs	r2, #0
 8004efc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004f00:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004f04:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004f08:	f7fb fece 	bl	8000ca8 <__aeabi_uldivmod>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	460b      	mov	r3, r1
 8004f10:	4613      	mov	r3, r2
 8004f12:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004f16:	e067      	b.n	8004fe8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f18:	4b75      	ldr	r3, [pc, #468]	@ (80050f0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	099b      	lsrs	r3, r3, #6
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004f24:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004f28:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004f2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f30:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004f32:	2300      	movs	r3, #0
 8004f34:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004f36:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004f3a:	4622      	mov	r2, r4
 8004f3c:	462b      	mov	r3, r5
 8004f3e:	f04f 0000 	mov.w	r0, #0
 8004f42:	f04f 0100 	mov.w	r1, #0
 8004f46:	0159      	lsls	r1, r3, #5
 8004f48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f4c:	0150      	lsls	r0, r2, #5
 8004f4e:	4602      	mov	r2, r0
 8004f50:	460b      	mov	r3, r1
 8004f52:	4621      	mov	r1, r4
 8004f54:	1a51      	subs	r1, r2, r1
 8004f56:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004f58:	4629      	mov	r1, r5
 8004f5a:	eb63 0301 	sbc.w	r3, r3, r1
 8004f5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f60:	f04f 0200 	mov.w	r2, #0
 8004f64:	f04f 0300 	mov.w	r3, #0
 8004f68:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004f6c:	4649      	mov	r1, r9
 8004f6e:	018b      	lsls	r3, r1, #6
 8004f70:	4641      	mov	r1, r8
 8004f72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f76:	4641      	mov	r1, r8
 8004f78:	018a      	lsls	r2, r1, #6
 8004f7a:	4641      	mov	r1, r8
 8004f7c:	ebb2 0a01 	subs.w	sl, r2, r1
 8004f80:	4649      	mov	r1, r9
 8004f82:	eb63 0b01 	sbc.w	fp, r3, r1
 8004f86:	f04f 0200 	mov.w	r2, #0
 8004f8a:	f04f 0300 	mov.w	r3, #0
 8004f8e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004f92:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004f96:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f9a:	4692      	mov	sl, r2
 8004f9c:	469b      	mov	fp, r3
 8004f9e:	4623      	mov	r3, r4
 8004fa0:	eb1a 0303 	adds.w	r3, sl, r3
 8004fa4:	623b      	str	r3, [r7, #32]
 8004fa6:	462b      	mov	r3, r5
 8004fa8:	eb4b 0303 	adc.w	r3, fp, r3
 8004fac:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fae:	f04f 0200 	mov.w	r2, #0
 8004fb2:	f04f 0300 	mov.w	r3, #0
 8004fb6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004fba:	4629      	mov	r1, r5
 8004fbc:	028b      	lsls	r3, r1, #10
 8004fbe:	4621      	mov	r1, r4
 8004fc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004fc4:	4621      	mov	r1, r4
 8004fc6:	028a      	lsls	r2, r1, #10
 8004fc8:	4610      	mov	r0, r2
 8004fca:	4619      	mov	r1, r3
 8004fcc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	673b      	str	r3, [r7, #112]	@ 0x70
 8004fd4:	677a      	str	r2, [r7, #116]	@ 0x74
 8004fd6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004fda:	f7fb fe65 	bl	8000ca8 <__aeabi_uldivmod>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	4613      	mov	r3, r2
 8004fe4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004fe8:	4b41      	ldr	r3, [pc, #260]	@ (80050f0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	0c1b      	lsrs	r3, r3, #16
 8004fee:	f003 0303 	and.w	r3, r3, #3
 8004ff2:	3301      	adds	r3, #1
 8004ff4:	005b      	lsls	r3, r3, #1
 8004ff6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8004ffa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004ffe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005002:	fbb2 f3f3 	udiv	r3, r2, r3
 8005006:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800500a:	e0eb      	b.n	80051e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800500c:	4b38      	ldr	r3, [pc, #224]	@ (80050f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005014:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005018:	4b35      	ldr	r3, [pc, #212]	@ (80050f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005020:	2b00      	cmp	r3, #0
 8005022:	d06b      	beq.n	80050fc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005024:	4b32      	ldr	r3, [pc, #200]	@ (80050f0 <HAL_RCC_GetSysClockFreq+0x354>)
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	099b      	lsrs	r3, r3, #6
 800502a:	2200      	movs	r2, #0
 800502c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800502e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005030:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005032:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005036:	663b      	str	r3, [r7, #96]	@ 0x60
 8005038:	2300      	movs	r3, #0
 800503a:	667b      	str	r3, [r7, #100]	@ 0x64
 800503c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8005040:	4622      	mov	r2, r4
 8005042:	462b      	mov	r3, r5
 8005044:	f04f 0000 	mov.w	r0, #0
 8005048:	f04f 0100 	mov.w	r1, #0
 800504c:	0159      	lsls	r1, r3, #5
 800504e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005052:	0150      	lsls	r0, r2, #5
 8005054:	4602      	mov	r2, r0
 8005056:	460b      	mov	r3, r1
 8005058:	4621      	mov	r1, r4
 800505a:	1a51      	subs	r1, r2, r1
 800505c:	61b9      	str	r1, [r7, #24]
 800505e:	4629      	mov	r1, r5
 8005060:	eb63 0301 	sbc.w	r3, r3, r1
 8005064:	61fb      	str	r3, [r7, #28]
 8005066:	f04f 0200 	mov.w	r2, #0
 800506a:	f04f 0300 	mov.w	r3, #0
 800506e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005072:	4659      	mov	r1, fp
 8005074:	018b      	lsls	r3, r1, #6
 8005076:	4651      	mov	r1, sl
 8005078:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800507c:	4651      	mov	r1, sl
 800507e:	018a      	lsls	r2, r1, #6
 8005080:	4651      	mov	r1, sl
 8005082:	ebb2 0801 	subs.w	r8, r2, r1
 8005086:	4659      	mov	r1, fp
 8005088:	eb63 0901 	sbc.w	r9, r3, r1
 800508c:	f04f 0200 	mov.w	r2, #0
 8005090:	f04f 0300 	mov.w	r3, #0
 8005094:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005098:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800509c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80050a0:	4690      	mov	r8, r2
 80050a2:	4699      	mov	r9, r3
 80050a4:	4623      	mov	r3, r4
 80050a6:	eb18 0303 	adds.w	r3, r8, r3
 80050aa:	613b      	str	r3, [r7, #16]
 80050ac:	462b      	mov	r3, r5
 80050ae:	eb49 0303 	adc.w	r3, r9, r3
 80050b2:	617b      	str	r3, [r7, #20]
 80050b4:	f04f 0200 	mov.w	r2, #0
 80050b8:	f04f 0300 	mov.w	r3, #0
 80050bc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80050c0:	4629      	mov	r1, r5
 80050c2:	024b      	lsls	r3, r1, #9
 80050c4:	4621      	mov	r1, r4
 80050c6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80050ca:	4621      	mov	r1, r4
 80050cc:	024a      	lsls	r2, r1, #9
 80050ce:	4610      	mov	r0, r2
 80050d0:	4619      	mov	r1, r3
 80050d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80050d6:	2200      	movs	r2, #0
 80050d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80050da:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80050dc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80050e0:	f7fb fde2 	bl	8000ca8 <__aeabi_uldivmod>
 80050e4:	4602      	mov	r2, r0
 80050e6:	460b      	mov	r3, r1
 80050e8:	4613      	mov	r3, r2
 80050ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80050ee:	e065      	b.n	80051bc <HAL_RCC_GetSysClockFreq+0x420>
 80050f0:	40023800 	.word	0x40023800
 80050f4:	00f42400 	.word	0x00f42400
 80050f8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050fc:	4b3d      	ldr	r3, [pc, #244]	@ (80051f4 <HAL_RCC_GetSysClockFreq+0x458>)
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	099b      	lsrs	r3, r3, #6
 8005102:	2200      	movs	r2, #0
 8005104:	4618      	mov	r0, r3
 8005106:	4611      	mov	r1, r2
 8005108:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800510c:	653b      	str	r3, [r7, #80]	@ 0x50
 800510e:	2300      	movs	r3, #0
 8005110:	657b      	str	r3, [r7, #84]	@ 0x54
 8005112:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8005116:	4642      	mov	r2, r8
 8005118:	464b      	mov	r3, r9
 800511a:	f04f 0000 	mov.w	r0, #0
 800511e:	f04f 0100 	mov.w	r1, #0
 8005122:	0159      	lsls	r1, r3, #5
 8005124:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005128:	0150      	lsls	r0, r2, #5
 800512a:	4602      	mov	r2, r0
 800512c:	460b      	mov	r3, r1
 800512e:	4641      	mov	r1, r8
 8005130:	1a51      	subs	r1, r2, r1
 8005132:	60b9      	str	r1, [r7, #8]
 8005134:	4649      	mov	r1, r9
 8005136:	eb63 0301 	sbc.w	r3, r3, r1
 800513a:	60fb      	str	r3, [r7, #12]
 800513c:	f04f 0200 	mov.w	r2, #0
 8005140:	f04f 0300 	mov.w	r3, #0
 8005144:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005148:	4659      	mov	r1, fp
 800514a:	018b      	lsls	r3, r1, #6
 800514c:	4651      	mov	r1, sl
 800514e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005152:	4651      	mov	r1, sl
 8005154:	018a      	lsls	r2, r1, #6
 8005156:	4651      	mov	r1, sl
 8005158:	1a54      	subs	r4, r2, r1
 800515a:	4659      	mov	r1, fp
 800515c:	eb63 0501 	sbc.w	r5, r3, r1
 8005160:	f04f 0200 	mov.w	r2, #0
 8005164:	f04f 0300 	mov.w	r3, #0
 8005168:	00eb      	lsls	r3, r5, #3
 800516a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800516e:	00e2      	lsls	r2, r4, #3
 8005170:	4614      	mov	r4, r2
 8005172:	461d      	mov	r5, r3
 8005174:	4643      	mov	r3, r8
 8005176:	18e3      	adds	r3, r4, r3
 8005178:	603b      	str	r3, [r7, #0]
 800517a:	464b      	mov	r3, r9
 800517c:	eb45 0303 	adc.w	r3, r5, r3
 8005180:	607b      	str	r3, [r7, #4]
 8005182:	f04f 0200 	mov.w	r2, #0
 8005186:	f04f 0300 	mov.w	r3, #0
 800518a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800518e:	4629      	mov	r1, r5
 8005190:	028b      	lsls	r3, r1, #10
 8005192:	4621      	mov	r1, r4
 8005194:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005198:	4621      	mov	r1, r4
 800519a:	028a      	lsls	r2, r1, #10
 800519c:	4610      	mov	r0, r2
 800519e:	4619      	mov	r1, r3
 80051a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80051a4:	2200      	movs	r2, #0
 80051a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80051a8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80051aa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80051ae:	f7fb fd7b 	bl	8000ca8 <__aeabi_uldivmod>
 80051b2:	4602      	mov	r2, r0
 80051b4:	460b      	mov	r3, r1
 80051b6:	4613      	mov	r3, r2
 80051b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80051bc:	4b0d      	ldr	r3, [pc, #52]	@ (80051f4 <HAL_RCC_GetSysClockFreq+0x458>)
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	0f1b      	lsrs	r3, r3, #28
 80051c2:	f003 0307 	and.w	r3, r3, #7
 80051c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 80051ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80051ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80051d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80051d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80051da:	e003      	b.n	80051e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80051dc:	4b06      	ldr	r3, [pc, #24]	@ (80051f8 <HAL_RCC_GetSysClockFreq+0x45c>)
 80051de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80051e2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051e4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	37b8      	adds	r7, #184	@ 0xb8
 80051ec:	46bd      	mov	sp, r7
 80051ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051f2:	bf00      	nop
 80051f4:	40023800 	.word	0x40023800
 80051f8:	00f42400 	.word	0x00f42400

080051fc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b086      	sub	sp, #24
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d101      	bne.n	800520e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e28d      	b.n	800572a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 0301 	and.w	r3, r3, #1
 8005216:	2b00      	cmp	r3, #0
 8005218:	f000 8083 	beq.w	8005322 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800521c:	4b94      	ldr	r3, [pc, #592]	@ (8005470 <HAL_RCC_OscConfig+0x274>)
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	f003 030c 	and.w	r3, r3, #12
 8005224:	2b04      	cmp	r3, #4
 8005226:	d019      	beq.n	800525c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005228:	4b91      	ldr	r3, [pc, #580]	@ (8005470 <HAL_RCC_OscConfig+0x274>)
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005230:	2b08      	cmp	r3, #8
 8005232:	d106      	bne.n	8005242 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005234:	4b8e      	ldr	r3, [pc, #568]	@ (8005470 <HAL_RCC_OscConfig+0x274>)
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800523c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005240:	d00c      	beq.n	800525c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005242:	4b8b      	ldr	r3, [pc, #556]	@ (8005470 <HAL_RCC_OscConfig+0x274>)
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800524a:	2b0c      	cmp	r3, #12
 800524c:	d112      	bne.n	8005274 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800524e:	4b88      	ldr	r3, [pc, #544]	@ (8005470 <HAL_RCC_OscConfig+0x274>)
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005256:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800525a:	d10b      	bne.n	8005274 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800525c:	4b84      	ldr	r3, [pc, #528]	@ (8005470 <HAL_RCC_OscConfig+0x274>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005264:	2b00      	cmp	r3, #0
 8005266:	d05b      	beq.n	8005320 <HAL_RCC_OscConfig+0x124>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d157      	bne.n	8005320 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	e25a      	b.n	800572a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800527c:	d106      	bne.n	800528c <HAL_RCC_OscConfig+0x90>
 800527e:	4b7c      	ldr	r3, [pc, #496]	@ (8005470 <HAL_RCC_OscConfig+0x274>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a7b      	ldr	r2, [pc, #492]	@ (8005470 <HAL_RCC_OscConfig+0x274>)
 8005284:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005288:	6013      	str	r3, [r2, #0]
 800528a:	e01d      	b.n	80052c8 <HAL_RCC_OscConfig+0xcc>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005294:	d10c      	bne.n	80052b0 <HAL_RCC_OscConfig+0xb4>
 8005296:	4b76      	ldr	r3, [pc, #472]	@ (8005470 <HAL_RCC_OscConfig+0x274>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a75      	ldr	r2, [pc, #468]	@ (8005470 <HAL_RCC_OscConfig+0x274>)
 800529c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80052a0:	6013      	str	r3, [r2, #0]
 80052a2:	4b73      	ldr	r3, [pc, #460]	@ (8005470 <HAL_RCC_OscConfig+0x274>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a72      	ldr	r2, [pc, #456]	@ (8005470 <HAL_RCC_OscConfig+0x274>)
 80052a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052ac:	6013      	str	r3, [r2, #0]
 80052ae:	e00b      	b.n	80052c8 <HAL_RCC_OscConfig+0xcc>
 80052b0:	4b6f      	ldr	r3, [pc, #444]	@ (8005470 <HAL_RCC_OscConfig+0x274>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a6e      	ldr	r2, [pc, #440]	@ (8005470 <HAL_RCC_OscConfig+0x274>)
 80052b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052ba:	6013      	str	r3, [r2, #0]
 80052bc:	4b6c      	ldr	r3, [pc, #432]	@ (8005470 <HAL_RCC_OscConfig+0x274>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a6b      	ldr	r2, [pc, #428]	@ (8005470 <HAL_RCC_OscConfig+0x274>)
 80052c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80052c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d013      	beq.n	80052f8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052d0:	f7fe fd12 	bl	8003cf8 <HAL_GetTick>
 80052d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052d6:	e008      	b.n	80052ea <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052d8:	f7fe fd0e 	bl	8003cf8 <HAL_GetTick>
 80052dc:	4602      	mov	r2, r0
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	2b64      	cmp	r3, #100	@ 0x64
 80052e4:	d901      	bls.n	80052ea <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80052e6:	2303      	movs	r3, #3
 80052e8:	e21f      	b.n	800572a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052ea:	4b61      	ldr	r3, [pc, #388]	@ (8005470 <HAL_RCC_OscConfig+0x274>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d0f0      	beq.n	80052d8 <HAL_RCC_OscConfig+0xdc>
 80052f6:	e014      	b.n	8005322 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052f8:	f7fe fcfe 	bl	8003cf8 <HAL_GetTick>
 80052fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052fe:	e008      	b.n	8005312 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005300:	f7fe fcfa 	bl	8003cf8 <HAL_GetTick>
 8005304:	4602      	mov	r2, r0
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	2b64      	cmp	r3, #100	@ 0x64
 800530c:	d901      	bls.n	8005312 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	e20b      	b.n	800572a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005312:	4b57      	ldr	r3, [pc, #348]	@ (8005470 <HAL_RCC_OscConfig+0x274>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d1f0      	bne.n	8005300 <HAL_RCC_OscConfig+0x104>
 800531e:	e000      	b.n	8005322 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005320:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 0302 	and.w	r3, r3, #2
 800532a:	2b00      	cmp	r3, #0
 800532c:	d06f      	beq.n	800540e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800532e:	4b50      	ldr	r3, [pc, #320]	@ (8005470 <HAL_RCC_OscConfig+0x274>)
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	f003 030c 	and.w	r3, r3, #12
 8005336:	2b00      	cmp	r3, #0
 8005338:	d017      	beq.n	800536a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800533a:	4b4d      	ldr	r3, [pc, #308]	@ (8005470 <HAL_RCC_OscConfig+0x274>)
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005342:	2b08      	cmp	r3, #8
 8005344:	d105      	bne.n	8005352 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005346:	4b4a      	ldr	r3, [pc, #296]	@ (8005470 <HAL_RCC_OscConfig+0x274>)
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00b      	beq.n	800536a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005352:	4b47      	ldr	r3, [pc, #284]	@ (8005470 <HAL_RCC_OscConfig+0x274>)
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800535a:	2b0c      	cmp	r3, #12
 800535c:	d11c      	bne.n	8005398 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800535e:	4b44      	ldr	r3, [pc, #272]	@ (8005470 <HAL_RCC_OscConfig+0x274>)
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005366:	2b00      	cmp	r3, #0
 8005368:	d116      	bne.n	8005398 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800536a:	4b41      	ldr	r3, [pc, #260]	@ (8005470 <HAL_RCC_OscConfig+0x274>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 0302 	and.w	r3, r3, #2
 8005372:	2b00      	cmp	r3, #0
 8005374:	d005      	beq.n	8005382 <HAL_RCC_OscConfig+0x186>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	2b01      	cmp	r3, #1
 800537c:	d001      	beq.n	8005382 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e1d3      	b.n	800572a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005382:	4b3b      	ldr	r3, [pc, #236]	@ (8005470 <HAL_RCC_OscConfig+0x274>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	00db      	lsls	r3, r3, #3
 8005390:	4937      	ldr	r1, [pc, #220]	@ (8005470 <HAL_RCC_OscConfig+0x274>)
 8005392:	4313      	orrs	r3, r2
 8005394:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005396:	e03a      	b.n	800540e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d020      	beq.n	80053e2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053a0:	4b34      	ldr	r3, [pc, #208]	@ (8005474 <HAL_RCC_OscConfig+0x278>)
 80053a2:	2201      	movs	r2, #1
 80053a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053a6:	f7fe fca7 	bl	8003cf8 <HAL_GetTick>
 80053aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053ac:	e008      	b.n	80053c0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053ae:	f7fe fca3 	bl	8003cf8 <HAL_GetTick>
 80053b2:	4602      	mov	r2, r0
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	1ad3      	subs	r3, r2, r3
 80053b8:	2b02      	cmp	r3, #2
 80053ba:	d901      	bls.n	80053c0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80053bc:	2303      	movs	r3, #3
 80053be:	e1b4      	b.n	800572a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053c0:	4b2b      	ldr	r3, [pc, #172]	@ (8005470 <HAL_RCC_OscConfig+0x274>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 0302 	and.w	r3, r3, #2
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d0f0      	beq.n	80053ae <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053cc:	4b28      	ldr	r3, [pc, #160]	@ (8005470 <HAL_RCC_OscConfig+0x274>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	691b      	ldr	r3, [r3, #16]
 80053d8:	00db      	lsls	r3, r3, #3
 80053da:	4925      	ldr	r1, [pc, #148]	@ (8005470 <HAL_RCC_OscConfig+0x274>)
 80053dc:	4313      	orrs	r3, r2
 80053de:	600b      	str	r3, [r1, #0]
 80053e0:	e015      	b.n	800540e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053e2:	4b24      	ldr	r3, [pc, #144]	@ (8005474 <HAL_RCC_OscConfig+0x278>)
 80053e4:	2200      	movs	r2, #0
 80053e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053e8:	f7fe fc86 	bl	8003cf8 <HAL_GetTick>
 80053ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053ee:	e008      	b.n	8005402 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053f0:	f7fe fc82 	bl	8003cf8 <HAL_GetTick>
 80053f4:	4602      	mov	r2, r0
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	2b02      	cmp	r3, #2
 80053fc:	d901      	bls.n	8005402 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80053fe:	2303      	movs	r3, #3
 8005400:	e193      	b.n	800572a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005402:	4b1b      	ldr	r3, [pc, #108]	@ (8005470 <HAL_RCC_OscConfig+0x274>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 0302 	and.w	r3, r3, #2
 800540a:	2b00      	cmp	r3, #0
 800540c:	d1f0      	bne.n	80053f0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 0308 	and.w	r3, r3, #8
 8005416:	2b00      	cmp	r3, #0
 8005418:	d036      	beq.n	8005488 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	695b      	ldr	r3, [r3, #20]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d016      	beq.n	8005450 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005422:	4b15      	ldr	r3, [pc, #84]	@ (8005478 <HAL_RCC_OscConfig+0x27c>)
 8005424:	2201      	movs	r2, #1
 8005426:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005428:	f7fe fc66 	bl	8003cf8 <HAL_GetTick>
 800542c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800542e:	e008      	b.n	8005442 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005430:	f7fe fc62 	bl	8003cf8 <HAL_GetTick>
 8005434:	4602      	mov	r2, r0
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	2b02      	cmp	r3, #2
 800543c:	d901      	bls.n	8005442 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800543e:	2303      	movs	r3, #3
 8005440:	e173      	b.n	800572a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005442:	4b0b      	ldr	r3, [pc, #44]	@ (8005470 <HAL_RCC_OscConfig+0x274>)
 8005444:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005446:	f003 0302 	and.w	r3, r3, #2
 800544a:	2b00      	cmp	r3, #0
 800544c:	d0f0      	beq.n	8005430 <HAL_RCC_OscConfig+0x234>
 800544e:	e01b      	b.n	8005488 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005450:	4b09      	ldr	r3, [pc, #36]	@ (8005478 <HAL_RCC_OscConfig+0x27c>)
 8005452:	2200      	movs	r2, #0
 8005454:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005456:	f7fe fc4f 	bl	8003cf8 <HAL_GetTick>
 800545a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800545c:	e00e      	b.n	800547c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800545e:	f7fe fc4b 	bl	8003cf8 <HAL_GetTick>
 8005462:	4602      	mov	r2, r0
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	1ad3      	subs	r3, r2, r3
 8005468:	2b02      	cmp	r3, #2
 800546a:	d907      	bls.n	800547c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800546c:	2303      	movs	r3, #3
 800546e:	e15c      	b.n	800572a <HAL_RCC_OscConfig+0x52e>
 8005470:	40023800 	.word	0x40023800
 8005474:	42470000 	.word	0x42470000
 8005478:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800547c:	4b8a      	ldr	r3, [pc, #552]	@ (80056a8 <HAL_RCC_OscConfig+0x4ac>)
 800547e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005480:	f003 0302 	and.w	r3, r3, #2
 8005484:	2b00      	cmp	r3, #0
 8005486:	d1ea      	bne.n	800545e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f003 0304 	and.w	r3, r3, #4
 8005490:	2b00      	cmp	r3, #0
 8005492:	f000 8097 	beq.w	80055c4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005496:	2300      	movs	r3, #0
 8005498:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800549a:	4b83      	ldr	r3, [pc, #524]	@ (80056a8 <HAL_RCC_OscConfig+0x4ac>)
 800549c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800549e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d10f      	bne.n	80054c6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054a6:	2300      	movs	r3, #0
 80054a8:	60bb      	str	r3, [r7, #8]
 80054aa:	4b7f      	ldr	r3, [pc, #508]	@ (80056a8 <HAL_RCC_OscConfig+0x4ac>)
 80054ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ae:	4a7e      	ldr	r2, [pc, #504]	@ (80056a8 <HAL_RCC_OscConfig+0x4ac>)
 80054b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80054b6:	4b7c      	ldr	r3, [pc, #496]	@ (80056a8 <HAL_RCC_OscConfig+0x4ac>)
 80054b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054be:	60bb      	str	r3, [r7, #8]
 80054c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054c2:	2301      	movs	r3, #1
 80054c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054c6:	4b79      	ldr	r3, [pc, #484]	@ (80056ac <HAL_RCC_OscConfig+0x4b0>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d118      	bne.n	8005504 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054d2:	4b76      	ldr	r3, [pc, #472]	@ (80056ac <HAL_RCC_OscConfig+0x4b0>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a75      	ldr	r2, [pc, #468]	@ (80056ac <HAL_RCC_OscConfig+0x4b0>)
 80054d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054de:	f7fe fc0b 	bl	8003cf8 <HAL_GetTick>
 80054e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054e4:	e008      	b.n	80054f8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054e6:	f7fe fc07 	bl	8003cf8 <HAL_GetTick>
 80054ea:	4602      	mov	r2, r0
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	2b02      	cmp	r3, #2
 80054f2:	d901      	bls.n	80054f8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80054f4:	2303      	movs	r3, #3
 80054f6:	e118      	b.n	800572a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054f8:	4b6c      	ldr	r3, [pc, #432]	@ (80056ac <HAL_RCC_OscConfig+0x4b0>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005500:	2b00      	cmp	r3, #0
 8005502:	d0f0      	beq.n	80054e6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	2b01      	cmp	r3, #1
 800550a:	d106      	bne.n	800551a <HAL_RCC_OscConfig+0x31e>
 800550c:	4b66      	ldr	r3, [pc, #408]	@ (80056a8 <HAL_RCC_OscConfig+0x4ac>)
 800550e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005510:	4a65      	ldr	r2, [pc, #404]	@ (80056a8 <HAL_RCC_OscConfig+0x4ac>)
 8005512:	f043 0301 	orr.w	r3, r3, #1
 8005516:	6713      	str	r3, [r2, #112]	@ 0x70
 8005518:	e01c      	b.n	8005554 <HAL_RCC_OscConfig+0x358>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	2b05      	cmp	r3, #5
 8005520:	d10c      	bne.n	800553c <HAL_RCC_OscConfig+0x340>
 8005522:	4b61      	ldr	r3, [pc, #388]	@ (80056a8 <HAL_RCC_OscConfig+0x4ac>)
 8005524:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005526:	4a60      	ldr	r2, [pc, #384]	@ (80056a8 <HAL_RCC_OscConfig+0x4ac>)
 8005528:	f043 0304 	orr.w	r3, r3, #4
 800552c:	6713      	str	r3, [r2, #112]	@ 0x70
 800552e:	4b5e      	ldr	r3, [pc, #376]	@ (80056a8 <HAL_RCC_OscConfig+0x4ac>)
 8005530:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005532:	4a5d      	ldr	r2, [pc, #372]	@ (80056a8 <HAL_RCC_OscConfig+0x4ac>)
 8005534:	f043 0301 	orr.w	r3, r3, #1
 8005538:	6713      	str	r3, [r2, #112]	@ 0x70
 800553a:	e00b      	b.n	8005554 <HAL_RCC_OscConfig+0x358>
 800553c:	4b5a      	ldr	r3, [pc, #360]	@ (80056a8 <HAL_RCC_OscConfig+0x4ac>)
 800553e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005540:	4a59      	ldr	r2, [pc, #356]	@ (80056a8 <HAL_RCC_OscConfig+0x4ac>)
 8005542:	f023 0301 	bic.w	r3, r3, #1
 8005546:	6713      	str	r3, [r2, #112]	@ 0x70
 8005548:	4b57      	ldr	r3, [pc, #348]	@ (80056a8 <HAL_RCC_OscConfig+0x4ac>)
 800554a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800554c:	4a56      	ldr	r2, [pc, #344]	@ (80056a8 <HAL_RCC_OscConfig+0x4ac>)
 800554e:	f023 0304 	bic.w	r3, r3, #4
 8005552:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d015      	beq.n	8005588 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800555c:	f7fe fbcc 	bl	8003cf8 <HAL_GetTick>
 8005560:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005562:	e00a      	b.n	800557a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005564:	f7fe fbc8 	bl	8003cf8 <HAL_GetTick>
 8005568:	4602      	mov	r2, r0
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005572:	4293      	cmp	r3, r2
 8005574:	d901      	bls.n	800557a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005576:	2303      	movs	r3, #3
 8005578:	e0d7      	b.n	800572a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800557a:	4b4b      	ldr	r3, [pc, #300]	@ (80056a8 <HAL_RCC_OscConfig+0x4ac>)
 800557c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800557e:	f003 0302 	and.w	r3, r3, #2
 8005582:	2b00      	cmp	r3, #0
 8005584:	d0ee      	beq.n	8005564 <HAL_RCC_OscConfig+0x368>
 8005586:	e014      	b.n	80055b2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005588:	f7fe fbb6 	bl	8003cf8 <HAL_GetTick>
 800558c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800558e:	e00a      	b.n	80055a6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005590:	f7fe fbb2 	bl	8003cf8 <HAL_GetTick>
 8005594:	4602      	mov	r2, r0
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800559e:	4293      	cmp	r3, r2
 80055a0:	d901      	bls.n	80055a6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80055a2:	2303      	movs	r3, #3
 80055a4:	e0c1      	b.n	800572a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055a6:	4b40      	ldr	r3, [pc, #256]	@ (80056a8 <HAL_RCC_OscConfig+0x4ac>)
 80055a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055aa:	f003 0302 	and.w	r3, r3, #2
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d1ee      	bne.n	8005590 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80055b2:	7dfb      	ldrb	r3, [r7, #23]
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d105      	bne.n	80055c4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055b8:	4b3b      	ldr	r3, [pc, #236]	@ (80056a8 <HAL_RCC_OscConfig+0x4ac>)
 80055ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055bc:	4a3a      	ldr	r2, [pc, #232]	@ (80056a8 <HAL_RCC_OscConfig+0x4ac>)
 80055be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055c2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	699b      	ldr	r3, [r3, #24]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	f000 80ad 	beq.w	8005728 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80055ce:	4b36      	ldr	r3, [pc, #216]	@ (80056a8 <HAL_RCC_OscConfig+0x4ac>)
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	f003 030c 	and.w	r3, r3, #12
 80055d6:	2b08      	cmp	r3, #8
 80055d8:	d060      	beq.n	800569c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	699b      	ldr	r3, [r3, #24]
 80055de:	2b02      	cmp	r3, #2
 80055e0:	d145      	bne.n	800566e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055e2:	4b33      	ldr	r3, [pc, #204]	@ (80056b0 <HAL_RCC_OscConfig+0x4b4>)
 80055e4:	2200      	movs	r2, #0
 80055e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055e8:	f7fe fb86 	bl	8003cf8 <HAL_GetTick>
 80055ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055ee:	e008      	b.n	8005602 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055f0:	f7fe fb82 	bl	8003cf8 <HAL_GetTick>
 80055f4:	4602      	mov	r2, r0
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	2b02      	cmp	r3, #2
 80055fc:	d901      	bls.n	8005602 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80055fe:	2303      	movs	r3, #3
 8005600:	e093      	b.n	800572a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005602:	4b29      	ldr	r3, [pc, #164]	@ (80056a8 <HAL_RCC_OscConfig+0x4ac>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800560a:	2b00      	cmp	r3, #0
 800560c:	d1f0      	bne.n	80055f0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	69da      	ldr	r2, [r3, #28]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a1b      	ldr	r3, [r3, #32]
 8005616:	431a      	orrs	r2, r3
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800561c:	019b      	lsls	r3, r3, #6
 800561e:	431a      	orrs	r2, r3
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005624:	085b      	lsrs	r3, r3, #1
 8005626:	3b01      	subs	r3, #1
 8005628:	041b      	lsls	r3, r3, #16
 800562a:	431a      	orrs	r2, r3
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005630:	061b      	lsls	r3, r3, #24
 8005632:	431a      	orrs	r2, r3
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005638:	071b      	lsls	r3, r3, #28
 800563a:	491b      	ldr	r1, [pc, #108]	@ (80056a8 <HAL_RCC_OscConfig+0x4ac>)
 800563c:	4313      	orrs	r3, r2
 800563e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005640:	4b1b      	ldr	r3, [pc, #108]	@ (80056b0 <HAL_RCC_OscConfig+0x4b4>)
 8005642:	2201      	movs	r2, #1
 8005644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005646:	f7fe fb57 	bl	8003cf8 <HAL_GetTick>
 800564a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800564c:	e008      	b.n	8005660 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800564e:	f7fe fb53 	bl	8003cf8 <HAL_GetTick>
 8005652:	4602      	mov	r2, r0
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	1ad3      	subs	r3, r2, r3
 8005658:	2b02      	cmp	r3, #2
 800565a:	d901      	bls.n	8005660 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800565c:	2303      	movs	r3, #3
 800565e:	e064      	b.n	800572a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005660:	4b11      	ldr	r3, [pc, #68]	@ (80056a8 <HAL_RCC_OscConfig+0x4ac>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005668:	2b00      	cmp	r3, #0
 800566a:	d0f0      	beq.n	800564e <HAL_RCC_OscConfig+0x452>
 800566c:	e05c      	b.n	8005728 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800566e:	4b10      	ldr	r3, [pc, #64]	@ (80056b0 <HAL_RCC_OscConfig+0x4b4>)
 8005670:	2200      	movs	r2, #0
 8005672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005674:	f7fe fb40 	bl	8003cf8 <HAL_GetTick>
 8005678:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800567a:	e008      	b.n	800568e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800567c:	f7fe fb3c 	bl	8003cf8 <HAL_GetTick>
 8005680:	4602      	mov	r2, r0
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	1ad3      	subs	r3, r2, r3
 8005686:	2b02      	cmp	r3, #2
 8005688:	d901      	bls.n	800568e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800568a:	2303      	movs	r3, #3
 800568c:	e04d      	b.n	800572a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800568e:	4b06      	ldr	r3, [pc, #24]	@ (80056a8 <HAL_RCC_OscConfig+0x4ac>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005696:	2b00      	cmp	r3, #0
 8005698:	d1f0      	bne.n	800567c <HAL_RCC_OscConfig+0x480>
 800569a:	e045      	b.n	8005728 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	699b      	ldr	r3, [r3, #24]
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d107      	bne.n	80056b4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	e040      	b.n	800572a <HAL_RCC_OscConfig+0x52e>
 80056a8:	40023800 	.word	0x40023800
 80056ac:	40007000 	.word	0x40007000
 80056b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80056b4:	4b1f      	ldr	r3, [pc, #124]	@ (8005734 <HAL_RCC_OscConfig+0x538>)
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	699b      	ldr	r3, [r3, #24]
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d030      	beq.n	8005724 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d129      	bne.n	8005724 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056da:	429a      	cmp	r2, r3
 80056dc:	d122      	bne.n	8005724 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80056e4:	4013      	ands	r3, r2
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80056ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d119      	bne.n	8005724 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056fa:	085b      	lsrs	r3, r3, #1
 80056fc:	3b01      	subs	r3, #1
 80056fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005700:	429a      	cmp	r2, r3
 8005702:	d10f      	bne.n	8005724 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800570e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005710:	429a      	cmp	r2, r3
 8005712:	d107      	bne.n	8005724 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800571e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005720:	429a      	cmp	r2, r3
 8005722:	d001      	beq.n	8005728 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	e000      	b.n	800572a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005728:	2300      	movs	r3, #0
}
 800572a:	4618      	mov	r0, r3
 800572c:	3718      	adds	r7, #24
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	40023800 	.word	0x40023800

08005738 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b082      	sub	sp, #8
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d101      	bne.n	800574a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e07b      	b.n	8005842 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800574e:	2b00      	cmp	r3, #0
 8005750:	d108      	bne.n	8005764 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800575a:	d009      	beq.n	8005770 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2200      	movs	r2, #0
 8005760:	61da      	str	r2, [r3, #28]
 8005762:	e005      	b.n	8005770 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2200      	movs	r2, #0
 8005774:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800577c:	b2db      	uxtb	r3, r3
 800577e:	2b00      	cmp	r3, #0
 8005780:	d106      	bne.n	8005790 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f7fd f8c4 	bl	8002918 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2202      	movs	r2, #2
 8005794:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80057a6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80057b8:	431a      	orrs	r2, r3
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	68db      	ldr	r3, [r3, #12]
 80057be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80057c2:	431a      	orrs	r2, r3
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	691b      	ldr	r3, [r3, #16]
 80057c8:	f003 0302 	and.w	r3, r3, #2
 80057cc:	431a      	orrs	r2, r3
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	695b      	ldr	r3, [r3, #20]
 80057d2:	f003 0301 	and.w	r3, r3, #1
 80057d6:	431a      	orrs	r2, r3
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	699b      	ldr	r3, [r3, #24]
 80057dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80057e0:	431a      	orrs	r2, r3
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	69db      	ldr	r3, [r3, #28]
 80057e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80057ea:	431a      	orrs	r2, r3
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6a1b      	ldr	r3, [r3, #32]
 80057f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057f4:	ea42 0103 	orr.w	r1, r2, r3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057fc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	430a      	orrs	r2, r1
 8005806:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	699b      	ldr	r3, [r3, #24]
 800580c:	0c1b      	lsrs	r3, r3, #16
 800580e:	f003 0104 	and.w	r1, r3, #4
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005816:	f003 0210 	and.w	r2, r3, #16
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	430a      	orrs	r2, r1
 8005820:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	69da      	ldr	r2, [r3, #28]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005830:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2201      	movs	r2, #1
 800583c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005840:	2300      	movs	r3, #0
}
 8005842:	4618      	mov	r0, r3
 8005844:	3708      	adds	r7, #8
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}

0800584a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800584a:	b580      	push	{r7, lr}
 800584c:	b08c      	sub	sp, #48	@ 0x30
 800584e:	af00      	add	r7, sp, #0
 8005850:	60f8      	str	r0, [r7, #12]
 8005852:	60b9      	str	r1, [r7, #8]
 8005854:	607a      	str	r2, [r7, #4]
 8005856:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005858:	2301      	movs	r3, #1
 800585a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800585c:	2300      	movs	r3, #0
 800585e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005868:	2b01      	cmp	r3, #1
 800586a:	d101      	bne.n	8005870 <HAL_SPI_TransmitReceive+0x26>
 800586c:	2302      	movs	r3, #2
 800586e:	e198      	b.n	8005ba2 <HAL_SPI_TransmitReceive+0x358>
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005878:	f7fe fa3e 	bl	8003cf8 <HAL_GetTick>
 800587c:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005884:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800588e:	887b      	ldrh	r3, [r7, #2]
 8005890:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005892:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005896:	2b01      	cmp	r3, #1
 8005898:	d00f      	beq.n	80058ba <HAL_SPI_TransmitReceive+0x70>
 800589a:	69fb      	ldr	r3, [r7, #28]
 800589c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80058a0:	d107      	bne.n	80058b2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d103      	bne.n	80058b2 <HAL_SPI_TransmitReceive+0x68>
 80058aa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80058ae:	2b04      	cmp	r3, #4
 80058b0:	d003      	beq.n	80058ba <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80058b2:	2302      	movs	r3, #2
 80058b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80058b8:	e16d      	b.n	8005b96 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d005      	beq.n	80058cc <HAL_SPI_TransmitReceive+0x82>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d002      	beq.n	80058cc <HAL_SPI_TransmitReceive+0x82>
 80058c6:	887b      	ldrh	r3, [r7, #2]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d103      	bne.n	80058d4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80058d2:	e160      	b.n	8005b96 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	2b04      	cmp	r3, #4
 80058de:	d003      	beq.n	80058e8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2205      	movs	r2, #5
 80058e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2200      	movs	r2, #0
 80058ec:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	887a      	ldrh	r2, [r7, #2]
 80058f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	887a      	ldrh	r2, [r7, #2]
 80058fe:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	68ba      	ldr	r2, [r7, #8]
 8005904:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	887a      	ldrh	r2, [r7, #2]
 800590a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	887a      	ldrh	r2, [r7, #2]
 8005910:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2200      	movs	r2, #0
 8005916:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2200      	movs	r2, #0
 800591c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005928:	2b40      	cmp	r3, #64	@ 0x40
 800592a:	d007      	beq.n	800593c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800593a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005944:	d17c      	bne.n	8005a40 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d002      	beq.n	8005954 <HAL_SPI_TransmitReceive+0x10a>
 800594e:	8b7b      	ldrh	r3, [r7, #26]
 8005950:	2b01      	cmp	r3, #1
 8005952:	d16a      	bne.n	8005a2a <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005958:	881a      	ldrh	r2, [r3, #0]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005964:	1c9a      	adds	r2, r3, #2
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800596e:	b29b      	uxth	r3, r3
 8005970:	3b01      	subs	r3, #1
 8005972:	b29a      	uxth	r2, r3
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005978:	e057      	b.n	8005a2a <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	f003 0302 	and.w	r3, r3, #2
 8005984:	2b02      	cmp	r3, #2
 8005986:	d11b      	bne.n	80059c0 <HAL_SPI_TransmitReceive+0x176>
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800598c:	b29b      	uxth	r3, r3
 800598e:	2b00      	cmp	r3, #0
 8005990:	d016      	beq.n	80059c0 <HAL_SPI_TransmitReceive+0x176>
 8005992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005994:	2b01      	cmp	r3, #1
 8005996:	d113      	bne.n	80059c0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800599c:	881a      	ldrh	r2, [r3, #0]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059a8:	1c9a      	adds	r2, r3, #2
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	3b01      	subs	r3, #1
 80059b6:	b29a      	uxth	r2, r3
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80059bc:	2300      	movs	r3, #0
 80059be:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	f003 0301 	and.w	r3, r3, #1
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d119      	bne.n	8005a02 <HAL_SPI_TransmitReceive+0x1b8>
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d014      	beq.n	8005a02 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	68da      	ldr	r2, [r3, #12]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059e2:	b292      	uxth	r2, r2
 80059e4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059ea:	1c9a      	adds	r2, r3, #2
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	3b01      	subs	r3, #1
 80059f8:	b29a      	uxth	r2, r3
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80059fe:	2301      	movs	r3, #1
 8005a00:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005a02:	f7fe f979 	bl	8003cf8 <HAL_GetTick>
 8005a06:	4602      	mov	r2, r0
 8005a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a0a:	1ad3      	subs	r3, r2, r3
 8005a0c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d80b      	bhi.n	8005a2a <HAL_SPI_TransmitReceive+0x1e0>
 8005a12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a14:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a18:	d007      	beq.n	8005a2a <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8005a1a:	2303      	movs	r3, #3
 8005a1c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2201      	movs	r2, #1
 8005a24:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8005a28:	e0b5      	b.n	8005b96 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d1a2      	bne.n	800597a <HAL_SPI_TransmitReceive+0x130>
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d19d      	bne.n	800597a <HAL_SPI_TransmitReceive+0x130>
 8005a3e:	e080      	b.n	8005b42 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d002      	beq.n	8005a4e <HAL_SPI_TransmitReceive+0x204>
 8005a48:	8b7b      	ldrh	r3, [r7, #26]
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d16f      	bne.n	8005b2e <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	330c      	adds	r3, #12
 8005a58:	7812      	ldrb	r2, [r2, #0]
 8005a5a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a60:	1c5a      	adds	r2, r3, #1
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	3b01      	subs	r3, #1
 8005a6e:	b29a      	uxth	r2, r3
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a74:	e05b      	b.n	8005b2e <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	f003 0302 	and.w	r3, r3, #2
 8005a80:	2b02      	cmp	r3, #2
 8005a82:	d11c      	bne.n	8005abe <HAL_SPI_TransmitReceive+0x274>
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d017      	beq.n	8005abe <HAL_SPI_TransmitReceive+0x274>
 8005a8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d114      	bne.n	8005abe <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	330c      	adds	r3, #12
 8005a9e:	7812      	ldrb	r2, [r2, #0]
 8005aa0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aa6:	1c5a      	adds	r2, r3, #1
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	3b01      	subs	r3, #1
 8005ab4:	b29a      	uxth	r2, r3
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005aba:	2300      	movs	r3, #0
 8005abc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	f003 0301 	and.w	r3, r3, #1
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d119      	bne.n	8005b00 <HAL_SPI_TransmitReceive+0x2b6>
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d014      	beq.n	8005b00 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	68da      	ldr	r2, [r3, #12]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ae0:	b2d2      	uxtb	r2, r2
 8005ae2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ae8:	1c5a      	adds	r2, r3, #1
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	3b01      	subs	r3, #1
 8005af6:	b29a      	uxth	r2, r3
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005afc:	2301      	movs	r3, #1
 8005afe:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005b00:	f7fe f8fa 	bl	8003cf8 <HAL_GetTick>
 8005b04:	4602      	mov	r2, r0
 8005b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d803      	bhi.n	8005b18 <HAL_SPI_TransmitReceive+0x2ce>
 8005b10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b12:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005b16:	d102      	bne.n	8005b1e <HAL_SPI_TransmitReceive+0x2d4>
 8005b18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d107      	bne.n	8005b2e <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8005b1e:	2303      	movs	r3, #3
 8005b20:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8005b2c:	e033      	b.n	8005b96 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d19e      	bne.n	8005a76 <HAL_SPI_TransmitReceive+0x22c>
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d199      	bne.n	8005a76 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b44:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005b46:	68f8      	ldr	r0, [r7, #12]
 8005b48:	f000 f9ca 	bl	8005ee0 <SPI_EndRxTxTransaction>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d006      	beq.n	8005b60 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2220      	movs	r2, #32
 8005b5c:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8005b5e:	e01a      	b.n	8005b96 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d10a      	bne.n	8005b7e <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b68:	2300      	movs	r3, #0
 8005b6a:	617b      	str	r3, [r7, #20]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	617b      	str	r3, [r7, #20]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	617b      	str	r3, [r7, #20]
 8005b7c:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d003      	beq.n	8005b8e <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b8c:	e003      	b.n	8005b96 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2201      	movs	r2, #1
 8005b92:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005b9e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3730      	adds	r7, #48	@ 0x30
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
	...

08005bac <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b088      	sub	sp, #32
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d10e      	bne.n	8005bec <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005bce:	69bb      	ldr	r3, [r7, #24]
 8005bd0:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d009      	beq.n	8005bec <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005bd8:	69fb      	ldr	r3, [r7, #28]
 8005bda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d004      	beq.n	8005bec <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	4798      	blx	r3
    return;
 8005bea:	e0ce      	b.n	8005d8a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005bec:	69bb      	ldr	r3, [r7, #24]
 8005bee:	f003 0302 	and.w	r3, r3, #2
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d009      	beq.n	8005c0a <HAL_SPI_IRQHandler+0x5e>
 8005bf6:	69fb      	ldr	r3, [r7, #28]
 8005bf8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d004      	beq.n	8005c0a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	4798      	blx	r3
    return;
 8005c08:	e0bf      	b.n	8005d8a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	f003 0320 	and.w	r3, r3, #32
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d10a      	bne.n	8005c2a <HAL_SPI_IRQHandler+0x7e>
 8005c14:	69bb      	ldr	r3, [r7, #24]
 8005c16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d105      	bne.n	8005c2a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005c1e:	69bb      	ldr	r3, [r7, #24]
 8005c20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	f000 80b0 	beq.w	8005d8a <HAL_SPI_IRQHandler+0x1de>
 8005c2a:	69fb      	ldr	r3, [r7, #28]
 8005c2c:	f003 0320 	and.w	r3, r3, #32
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	f000 80aa 	beq.w	8005d8a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005c36:	69bb      	ldr	r3, [r7, #24]
 8005c38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d023      	beq.n	8005c88 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	2b03      	cmp	r3, #3
 8005c4a:	d011      	beq.n	8005c70 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c50:	f043 0204 	orr.w	r2, r3, #4
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c58:	2300      	movs	r3, #0
 8005c5a:	617b      	str	r3, [r7, #20]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	68db      	ldr	r3, [r3, #12]
 8005c62:	617b      	str	r3, [r7, #20]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	617b      	str	r3, [r7, #20]
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	e00b      	b.n	8005c88 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c70:	2300      	movs	r3, #0
 8005c72:	613b      	str	r3, [r7, #16]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	613b      	str	r3, [r7, #16]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	613b      	str	r3, [r7, #16]
 8005c84:	693b      	ldr	r3, [r7, #16]
        return;
 8005c86:	e080      	b.n	8005d8a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005c88:	69bb      	ldr	r3, [r7, #24]
 8005c8a:	f003 0320 	and.w	r3, r3, #32
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d014      	beq.n	8005cbc <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c96:	f043 0201 	orr.w	r2, r3, #1
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	60fb      	str	r3, [r7, #12]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	60fb      	str	r3, [r7, #12]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005cb8:	601a      	str	r2, [r3, #0]
 8005cba:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005cbc:	69bb      	ldr	r3, [r7, #24]
 8005cbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d00c      	beq.n	8005ce0 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cca:	f043 0208 	orr.w	r2, r3, #8
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	60bb      	str	r3, [r7, #8]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	60bb      	str	r3, [r7, #8]
 8005cde:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d04f      	beq.n	8005d88 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	685a      	ldr	r2, [r3, #4]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005cf6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	f003 0302 	and.w	r3, r3, #2
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d104      	bne.n	8005d14 <HAL_SPI_IRQHandler+0x168>
 8005d0a:	69fb      	ldr	r3, [r7, #28]
 8005d0c:	f003 0301 	and.w	r3, r3, #1
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d034      	beq.n	8005d7e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	685a      	ldr	r2, [r3, #4]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f022 0203 	bic.w	r2, r2, #3
 8005d22:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d011      	beq.n	8005d50 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d30:	4a17      	ldr	r2, [pc, #92]	@ (8005d90 <HAL_SPI_IRQHandler+0x1e4>)
 8005d32:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f7fe fa41 	bl	80041c0 <HAL_DMA_Abort_IT>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d005      	beq.n	8005d50 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d48:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d016      	beq.n	8005d86 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d5c:	4a0c      	ldr	r2, [pc, #48]	@ (8005d90 <HAL_SPI_IRQHandler+0x1e4>)
 8005d5e:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d64:	4618      	mov	r0, r3
 8005d66:	f7fe fa2b 	bl	80041c0 <HAL_DMA_Abort_IT>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d00a      	beq.n	8005d86 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d74:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8005d7c:	e003      	b.n	8005d86 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 f808 	bl	8005d94 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005d84:	e000      	b.n	8005d88 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8005d86:	bf00      	nop
    return;
 8005d88:	bf00      	nop
  }
}
 8005d8a:	3720      	adds	r7, #32
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}
 8005d90:	08005da9 	.word	0x08005da9

08005d94 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b083      	sub	sp, #12
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005d9c:	bf00      	nop
 8005d9e:	370c      	adds	r7, #12
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr

08005da8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005db4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2200      	movs	r2, #0
 8005dba:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005dc2:	68f8      	ldr	r0, [r7, #12]
 8005dc4:	f7ff ffe6 	bl	8005d94 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005dc8:	bf00      	nop
 8005dca:	3710      	adds	r7, #16
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}

08005dd0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b088      	sub	sp, #32
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	60b9      	str	r1, [r7, #8]
 8005dda:	603b      	str	r3, [r7, #0]
 8005ddc:	4613      	mov	r3, r2
 8005dde:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005de0:	f7fd ff8a 	bl	8003cf8 <HAL_GetTick>
 8005de4:	4602      	mov	r2, r0
 8005de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005de8:	1a9b      	subs	r3, r3, r2
 8005dea:	683a      	ldr	r2, [r7, #0]
 8005dec:	4413      	add	r3, r2
 8005dee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005df0:	f7fd ff82 	bl	8003cf8 <HAL_GetTick>
 8005df4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005df6:	4b39      	ldr	r3, [pc, #228]	@ (8005edc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	015b      	lsls	r3, r3, #5
 8005dfc:	0d1b      	lsrs	r3, r3, #20
 8005dfe:	69fa      	ldr	r2, [r7, #28]
 8005e00:	fb02 f303 	mul.w	r3, r2, r3
 8005e04:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e06:	e054      	b.n	8005eb2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e0e:	d050      	beq.n	8005eb2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005e10:	f7fd ff72 	bl	8003cf8 <HAL_GetTick>
 8005e14:	4602      	mov	r2, r0
 8005e16:	69bb      	ldr	r3, [r7, #24]
 8005e18:	1ad3      	subs	r3, r2, r3
 8005e1a:	69fa      	ldr	r2, [r7, #28]
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d902      	bls.n	8005e26 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005e20:	69fb      	ldr	r3, [r7, #28]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d13d      	bne.n	8005ea2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	685a      	ldr	r2, [r3, #4]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005e34:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e3e:	d111      	bne.n	8005e64 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e48:	d004      	beq.n	8005e54 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e52:	d107      	bne.n	8005e64 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e62:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e6c:	d10f      	bne.n	8005e8e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005e7c:	601a      	str	r2, [r3, #0]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005e8c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2201      	movs	r2, #1
 8005e92:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	e017      	b.n	8005ed2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d101      	bne.n	8005eac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	3b01      	subs	r3, #1
 8005eb0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	689a      	ldr	r2, [r3, #8]
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	4013      	ands	r3, r2
 8005ebc:	68ba      	ldr	r2, [r7, #8]
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	bf0c      	ite	eq
 8005ec2:	2301      	moveq	r3, #1
 8005ec4:	2300      	movne	r3, #0
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	461a      	mov	r2, r3
 8005eca:	79fb      	ldrb	r3, [r7, #7]
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d19b      	bne.n	8005e08 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005ed0:	2300      	movs	r3, #0
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3720      	adds	r7, #32
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	bf00      	nop
 8005edc:	20000004 	.word	0x20000004

08005ee0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b088      	sub	sp, #32
 8005ee4:	af02      	add	r7, sp, #8
 8005ee6:	60f8      	str	r0, [r7, #12]
 8005ee8:	60b9      	str	r1, [r7, #8]
 8005eea:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	9300      	str	r3, [sp, #0]
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	2102      	movs	r1, #2
 8005ef6:	68f8      	ldr	r0, [r7, #12]
 8005ef8:	f7ff ff6a 	bl	8005dd0 <SPI_WaitFlagStateUntilTimeout>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d007      	beq.n	8005f12 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f06:	f043 0220 	orr.w	r2, r3, #32
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005f0e:	2303      	movs	r3, #3
 8005f10:	e032      	b.n	8005f78 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005f12:	4b1b      	ldr	r3, [pc, #108]	@ (8005f80 <SPI_EndRxTxTransaction+0xa0>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a1b      	ldr	r2, [pc, #108]	@ (8005f84 <SPI_EndRxTxTransaction+0xa4>)
 8005f18:	fba2 2303 	umull	r2, r3, r2, r3
 8005f1c:	0d5b      	lsrs	r3, r3, #21
 8005f1e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005f22:	fb02 f303 	mul.w	r3, r2, r3
 8005f26:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f30:	d112      	bne.n	8005f58 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	9300      	str	r3, [sp, #0]
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	2180      	movs	r1, #128	@ 0x80
 8005f3c:	68f8      	ldr	r0, [r7, #12]
 8005f3e:	f7ff ff47 	bl	8005dd0 <SPI_WaitFlagStateUntilTimeout>
 8005f42:	4603      	mov	r3, r0
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d016      	beq.n	8005f76 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f4c:	f043 0220 	orr.w	r2, r3, #32
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005f54:	2303      	movs	r3, #3
 8005f56:	e00f      	b.n	8005f78 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d00a      	beq.n	8005f74 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	3b01      	subs	r3, #1
 8005f62:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f6e:	2b80      	cmp	r3, #128	@ 0x80
 8005f70:	d0f2      	beq.n	8005f58 <SPI_EndRxTxTransaction+0x78>
 8005f72:	e000      	b.n	8005f76 <SPI_EndRxTxTransaction+0x96>
        break;
 8005f74:	bf00      	nop
  }

  return HAL_OK;
 8005f76:	2300      	movs	r3, #0
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3718      	adds	r7, #24
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}
 8005f80:	20000004 	.word	0x20000004
 8005f84:	165e9f81 	.word	0x165e9f81

08005f88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b082      	sub	sp, #8
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d101      	bne.n	8005f9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	e041      	b.n	800601e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d106      	bne.n	8005fb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 f839 	bl	8006026 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2202      	movs	r2, #2
 8005fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	3304      	adds	r3, #4
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	4610      	mov	r0, r2
 8005fc8:	f000 fb9a 	bl	8006700 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2201      	movs	r2, #1
 8006000:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2201      	movs	r2, #1
 8006018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800601c:	2300      	movs	r3, #0
}
 800601e:	4618      	mov	r0, r3
 8006020:	3708      	adds	r7, #8
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}

08006026 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006026:	b480      	push	{r7}
 8006028:	b083      	sub	sp, #12
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800602e:	bf00      	nop
 8006030:	370c      	adds	r7, #12
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr
	...

0800603c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800603c:	b480      	push	{r7}
 800603e:	b085      	sub	sp, #20
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800604a:	b2db      	uxtb	r3, r3
 800604c:	2b01      	cmp	r3, #1
 800604e:	d001      	beq.n	8006054 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	e04e      	b.n	80060f2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2202      	movs	r2, #2
 8006058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	68da      	ldr	r2, [r3, #12]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f042 0201 	orr.w	r2, r2, #1
 800606a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a23      	ldr	r2, [pc, #140]	@ (8006100 <HAL_TIM_Base_Start_IT+0xc4>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d022      	beq.n	80060bc <HAL_TIM_Base_Start_IT+0x80>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800607e:	d01d      	beq.n	80060bc <HAL_TIM_Base_Start_IT+0x80>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a1f      	ldr	r2, [pc, #124]	@ (8006104 <HAL_TIM_Base_Start_IT+0xc8>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d018      	beq.n	80060bc <HAL_TIM_Base_Start_IT+0x80>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a1e      	ldr	r2, [pc, #120]	@ (8006108 <HAL_TIM_Base_Start_IT+0xcc>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d013      	beq.n	80060bc <HAL_TIM_Base_Start_IT+0x80>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a1c      	ldr	r2, [pc, #112]	@ (800610c <HAL_TIM_Base_Start_IT+0xd0>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d00e      	beq.n	80060bc <HAL_TIM_Base_Start_IT+0x80>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a1b      	ldr	r2, [pc, #108]	@ (8006110 <HAL_TIM_Base_Start_IT+0xd4>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d009      	beq.n	80060bc <HAL_TIM_Base_Start_IT+0x80>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a19      	ldr	r2, [pc, #100]	@ (8006114 <HAL_TIM_Base_Start_IT+0xd8>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d004      	beq.n	80060bc <HAL_TIM_Base_Start_IT+0x80>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a18      	ldr	r2, [pc, #96]	@ (8006118 <HAL_TIM_Base_Start_IT+0xdc>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d111      	bne.n	80060e0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	f003 0307 	and.w	r3, r3, #7
 80060c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2b06      	cmp	r3, #6
 80060cc:	d010      	beq.n	80060f0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f042 0201 	orr.w	r2, r2, #1
 80060dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060de:	e007      	b.n	80060f0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f042 0201 	orr.w	r2, r2, #1
 80060ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80060f0:	2300      	movs	r3, #0
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3714      	adds	r7, #20
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr
 80060fe:	bf00      	nop
 8006100:	40010000 	.word	0x40010000
 8006104:	40000400 	.word	0x40000400
 8006108:	40000800 	.word	0x40000800
 800610c:	40000c00 	.word	0x40000c00
 8006110:	40010400 	.word	0x40010400
 8006114:	40014000 	.word	0x40014000
 8006118:	40001800 	.word	0x40001800

0800611c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b082      	sub	sp, #8
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d101      	bne.n	800612e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	e041      	b.n	80061b2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006134:	b2db      	uxtb	r3, r3
 8006136:	2b00      	cmp	r3, #0
 8006138:	d106      	bne.n	8006148 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f7fc fece 	bl	8002ee4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2202      	movs	r2, #2
 800614c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	3304      	adds	r3, #4
 8006158:	4619      	mov	r1, r3
 800615a:	4610      	mov	r0, r2
 800615c:	f000 fad0 	bl	8006700 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2201      	movs	r2, #1
 8006164:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2201      	movs	r2, #1
 800617c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80061b0:	2300      	movs	r3, #0
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3708      	adds	r7, #8
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
	...

080061bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b084      	sub	sp, #16
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d109      	bne.n	80061e0 <HAL_TIM_PWM_Start+0x24>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	bf14      	ite	ne
 80061d8:	2301      	movne	r3, #1
 80061da:	2300      	moveq	r3, #0
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	e022      	b.n	8006226 <HAL_TIM_PWM_Start+0x6a>
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	2b04      	cmp	r3, #4
 80061e4:	d109      	bne.n	80061fa <HAL_TIM_PWM_Start+0x3e>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	bf14      	ite	ne
 80061f2:	2301      	movne	r3, #1
 80061f4:	2300      	moveq	r3, #0
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	e015      	b.n	8006226 <HAL_TIM_PWM_Start+0x6a>
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	2b08      	cmp	r3, #8
 80061fe:	d109      	bne.n	8006214 <HAL_TIM_PWM_Start+0x58>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006206:	b2db      	uxtb	r3, r3
 8006208:	2b01      	cmp	r3, #1
 800620a:	bf14      	ite	ne
 800620c:	2301      	movne	r3, #1
 800620e:	2300      	moveq	r3, #0
 8006210:	b2db      	uxtb	r3, r3
 8006212:	e008      	b.n	8006226 <HAL_TIM_PWM_Start+0x6a>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800621a:	b2db      	uxtb	r3, r3
 800621c:	2b01      	cmp	r3, #1
 800621e:	bf14      	ite	ne
 8006220:	2301      	movne	r3, #1
 8006222:	2300      	moveq	r3, #0
 8006224:	b2db      	uxtb	r3, r3
 8006226:	2b00      	cmp	r3, #0
 8006228:	d001      	beq.n	800622e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	e07c      	b.n	8006328 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d104      	bne.n	800623e <HAL_TIM_PWM_Start+0x82>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2202      	movs	r2, #2
 8006238:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800623c:	e013      	b.n	8006266 <HAL_TIM_PWM_Start+0xaa>
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	2b04      	cmp	r3, #4
 8006242:	d104      	bne.n	800624e <HAL_TIM_PWM_Start+0x92>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2202      	movs	r2, #2
 8006248:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800624c:	e00b      	b.n	8006266 <HAL_TIM_PWM_Start+0xaa>
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	2b08      	cmp	r3, #8
 8006252:	d104      	bne.n	800625e <HAL_TIM_PWM_Start+0xa2>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2202      	movs	r2, #2
 8006258:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800625c:	e003      	b.n	8006266 <HAL_TIM_PWM_Start+0xaa>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2202      	movs	r2, #2
 8006262:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	2201      	movs	r2, #1
 800626c:	6839      	ldr	r1, [r7, #0]
 800626e:	4618      	mov	r0, r3
 8006270:	f000 fca2 	bl	8006bb8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a2d      	ldr	r2, [pc, #180]	@ (8006330 <HAL_TIM_PWM_Start+0x174>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d004      	beq.n	8006288 <HAL_TIM_PWM_Start+0xcc>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a2c      	ldr	r2, [pc, #176]	@ (8006334 <HAL_TIM_PWM_Start+0x178>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d101      	bne.n	800628c <HAL_TIM_PWM_Start+0xd0>
 8006288:	2301      	movs	r3, #1
 800628a:	e000      	b.n	800628e <HAL_TIM_PWM_Start+0xd2>
 800628c:	2300      	movs	r3, #0
 800628e:	2b00      	cmp	r3, #0
 8006290:	d007      	beq.n	80062a2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80062a0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a22      	ldr	r2, [pc, #136]	@ (8006330 <HAL_TIM_PWM_Start+0x174>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d022      	beq.n	80062f2 <HAL_TIM_PWM_Start+0x136>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062b4:	d01d      	beq.n	80062f2 <HAL_TIM_PWM_Start+0x136>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a1f      	ldr	r2, [pc, #124]	@ (8006338 <HAL_TIM_PWM_Start+0x17c>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d018      	beq.n	80062f2 <HAL_TIM_PWM_Start+0x136>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a1d      	ldr	r2, [pc, #116]	@ (800633c <HAL_TIM_PWM_Start+0x180>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d013      	beq.n	80062f2 <HAL_TIM_PWM_Start+0x136>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a1c      	ldr	r2, [pc, #112]	@ (8006340 <HAL_TIM_PWM_Start+0x184>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d00e      	beq.n	80062f2 <HAL_TIM_PWM_Start+0x136>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a16      	ldr	r2, [pc, #88]	@ (8006334 <HAL_TIM_PWM_Start+0x178>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d009      	beq.n	80062f2 <HAL_TIM_PWM_Start+0x136>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a18      	ldr	r2, [pc, #96]	@ (8006344 <HAL_TIM_PWM_Start+0x188>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d004      	beq.n	80062f2 <HAL_TIM_PWM_Start+0x136>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a16      	ldr	r2, [pc, #88]	@ (8006348 <HAL_TIM_PWM_Start+0x18c>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d111      	bne.n	8006316 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	f003 0307 	and.w	r3, r3, #7
 80062fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2b06      	cmp	r3, #6
 8006302:	d010      	beq.n	8006326 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f042 0201 	orr.w	r2, r2, #1
 8006312:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006314:	e007      	b.n	8006326 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f042 0201 	orr.w	r2, r2, #1
 8006324:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006326:	2300      	movs	r3, #0
}
 8006328:	4618      	mov	r0, r3
 800632a:	3710      	adds	r7, #16
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}
 8006330:	40010000 	.word	0x40010000
 8006334:	40010400 	.word	0x40010400
 8006338:	40000400 	.word	0x40000400
 800633c:	40000800 	.word	0x40000800
 8006340:	40000c00 	.word	0x40000c00
 8006344:	40014000 	.word	0x40014000
 8006348:	40001800 	.word	0x40001800

0800634c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b084      	sub	sp, #16
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	68db      	ldr	r3, [r3, #12]
 800635a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	691b      	ldr	r3, [r3, #16]
 8006362:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	f003 0302 	and.w	r3, r3, #2
 800636a:	2b00      	cmp	r3, #0
 800636c:	d020      	beq.n	80063b0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f003 0302 	and.w	r3, r3, #2
 8006374:	2b00      	cmp	r3, #0
 8006376:	d01b      	beq.n	80063b0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f06f 0202 	mvn.w	r2, #2
 8006380:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2201      	movs	r2, #1
 8006386:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	699b      	ldr	r3, [r3, #24]
 800638e:	f003 0303 	and.w	r3, r3, #3
 8006392:	2b00      	cmp	r3, #0
 8006394:	d003      	beq.n	800639e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 f994 	bl	80066c4 <HAL_TIM_IC_CaptureCallback>
 800639c:	e005      	b.n	80063aa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f000 f986 	bl	80066b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f000 f997 	bl	80066d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	f003 0304 	and.w	r3, r3, #4
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d020      	beq.n	80063fc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f003 0304 	and.w	r3, r3, #4
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d01b      	beq.n	80063fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f06f 0204 	mvn.w	r2, #4
 80063cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2202      	movs	r2, #2
 80063d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	699b      	ldr	r3, [r3, #24]
 80063da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d003      	beq.n	80063ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 f96e 	bl	80066c4 <HAL_TIM_IC_CaptureCallback>
 80063e8:	e005      	b.n	80063f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 f960 	bl	80066b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f000 f971 	bl	80066d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2200      	movs	r2, #0
 80063fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	f003 0308 	and.w	r3, r3, #8
 8006402:	2b00      	cmp	r3, #0
 8006404:	d020      	beq.n	8006448 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f003 0308 	and.w	r3, r3, #8
 800640c:	2b00      	cmp	r3, #0
 800640e:	d01b      	beq.n	8006448 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f06f 0208 	mvn.w	r2, #8
 8006418:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2204      	movs	r2, #4
 800641e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	69db      	ldr	r3, [r3, #28]
 8006426:	f003 0303 	and.w	r3, r3, #3
 800642a:	2b00      	cmp	r3, #0
 800642c:	d003      	beq.n	8006436 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 f948 	bl	80066c4 <HAL_TIM_IC_CaptureCallback>
 8006434:	e005      	b.n	8006442 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 f93a 	bl	80066b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f000 f94b 	bl	80066d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2200      	movs	r2, #0
 8006446:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	f003 0310 	and.w	r3, r3, #16
 800644e:	2b00      	cmp	r3, #0
 8006450:	d020      	beq.n	8006494 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f003 0310 	and.w	r3, r3, #16
 8006458:	2b00      	cmp	r3, #0
 800645a:	d01b      	beq.n	8006494 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f06f 0210 	mvn.w	r2, #16
 8006464:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2208      	movs	r2, #8
 800646a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	69db      	ldr	r3, [r3, #28]
 8006472:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006476:	2b00      	cmp	r3, #0
 8006478:	d003      	beq.n	8006482 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f000 f922 	bl	80066c4 <HAL_TIM_IC_CaptureCallback>
 8006480:	e005      	b.n	800648e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f000 f914 	bl	80066b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f000 f925 	bl	80066d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2200      	movs	r2, #0
 8006492:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	f003 0301 	and.w	r3, r3, #1
 800649a:	2b00      	cmp	r3, #0
 800649c:	d00c      	beq.n	80064b8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f003 0301 	and.w	r3, r3, #1
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d007      	beq.n	80064b8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f06f 0201 	mvn.w	r2, #1
 80064b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f7fb fdec 	bl	8002090 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d00c      	beq.n	80064dc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d007      	beq.n	80064dc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80064d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f000 fc1a 	bl	8006d10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d00c      	beq.n	8006500 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d007      	beq.n	8006500 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80064f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 f8f6 	bl	80066ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	f003 0320 	and.w	r3, r3, #32
 8006506:	2b00      	cmp	r3, #0
 8006508:	d00c      	beq.n	8006524 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f003 0320 	and.w	r3, r3, #32
 8006510:	2b00      	cmp	r3, #0
 8006512:	d007      	beq.n	8006524 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f06f 0220 	mvn.w	r2, #32
 800651c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 fbec 	bl	8006cfc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006524:	bf00      	nop
 8006526:	3710      	adds	r7, #16
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}

0800652c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b086      	sub	sp, #24
 8006530:	af00      	add	r7, sp, #0
 8006532:	60f8      	str	r0, [r7, #12]
 8006534:	60b9      	str	r1, [r7, #8]
 8006536:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006538:	2300      	movs	r3, #0
 800653a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006542:	2b01      	cmp	r3, #1
 8006544:	d101      	bne.n	800654a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006546:	2302      	movs	r3, #2
 8006548:	e0ae      	b.n	80066a8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2201      	movs	r2, #1
 800654e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2b0c      	cmp	r3, #12
 8006556:	f200 809f 	bhi.w	8006698 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800655a:	a201      	add	r2, pc, #4	@ (adr r2, 8006560 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800655c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006560:	08006595 	.word	0x08006595
 8006564:	08006699 	.word	0x08006699
 8006568:	08006699 	.word	0x08006699
 800656c:	08006699 	.word	0x08006699
 8006570:	080065d5 	.word	0x080065d5
 8006574:	08006699 	.word	0x08006699
 8006578:	08006699 	.word	0x08006699
 800657c:	08006699 	.word	0x08006699
 8006580:	08006617 	.word	0x08006617
 8006584:	08006699 	.word	0x08006699
 8006588:	08006699 	.word	0x08006699
 800658c:	08006699 	.word	0x08006699
 8006590:	08006657 	.word	0x08006657
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	68b9      	ldr	r1, [r7, #8]
 800659a:	4618      	mov	r0, r3
 800659c:	f000 f95c 	bl	8006858 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	699a      	ldr	r2, [r3, #24]
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f042 0208 	orr.w	r2, r2, #8
 80065ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	699a      	ldr	r2, [r3, #24]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f022 0204 	bic.w	r2, r2, #4
 80065be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	6999      	ldr	r1, [r3, #24]
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	691a      	ldr	r2, [r3, #16]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	430a      	orrs	r2, r1
 80065d0:	619a      	str	r2, [r3, #24]
      break;
 80065d2:	e064      	b.n	800669e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	68b9      	ldr	r1, [r7, #8]
 80065da:	4618      	mov	r0, r3
 80065dc:	f000 f9ac 	bl	8006938 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	699a      	ldr	r2, [r3, #24]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80065ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	699a      	ldr	r2, [r3, #24]
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80065fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	6999      	ldr	r1, [r3, #24]
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	691b      	ldr	r3, [r3, #16]
 800660a:	021a      	lsls	r2, r3, #8
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	430a      	orrs	r2, r1
 8006612:	619a      	str	r2, [r3, #24]
      break;
 8006614:	e043      	b.n	800669e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	68b9      	ldr	r1, [r7, #8]
 800661c:	4618      	mov	r0, r3
 800661e:	f000 fa01 	bl	8006a24 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	69da      	ldr	r2, [r3, #28]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f042 0208 	orr.w	r2, r2, #8
 8006630:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	69da      	ldr	r2, [r3, #28]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f022 0204 	bic.w	r2, r2, #4
 8006640:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	69d9      	ldr	r1, [r3, #28]
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	691a      	ldr	r2, [r3, #16]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	430a      	orrs	r2, r1
 8006652:	61da      	str	r2, [r3, #28]
      break;
 8006654:	e023      	b.n	800669e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	68b9      	ldr	r1, [r7, #8]
 800665c:	4618      	mov	r0, r3
 800665e:	f000 fa55 	bl	8006b0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	69da      	ldr	r2, [r3, #28]
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006670:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	69da      	ldr	r2, [r3, #28]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006680:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	69d9      	ldr	r1, [r3, #28]
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	691b      	ldr	r3, [r3, #16]
 800668c:	021a      	lsls	r2, r3, #8
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	430a      	orrs	r2, r1
 8006694:	61da      	str	r2, [r3, #28]
      break;
 8006696:	e002      	b.n	800669e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006698:	2301      	movs	r3, #1
 800669a:	75fb      	strb	r3, [r7, #23]
      break;
 800669c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2200      	movs	r2, #0
 80066a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80066a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3718      	adds	r7, #24
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}

080066b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b083      	sub	sp, #12
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80066b8:	bf00      	nop
 80066ba:	370c      	adds	r7, #12
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr

080066c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b083      	sub	sp, #12
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80066cc:	bf00      	nop
 80066ce:	370c      	adds	r7, #12
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr

080066d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80066e0:	bf00      	nop
 80066e2:	370c      	adds	r7, #12
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80066f4:	bf00      	nop
 80066f6:	370c      	adds	r7, #12
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr

08006700 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006700:	b480      	push	{r7}
 8006702:	b085      	sub	sp, #20
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	4a46      	ldr	r2, [pc, #280]	@ (800682c <TIM_Base_SetConfig+0x12c>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d013      	beq.n	8006740 <TIM_Base_SetConfig+0x40>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800671e:	d00f      	beq.n	8006740 <TIM_Base_SetConfig+0x40>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	4a43      	ldr	r2, [pc, #268]	@ (8006830 <TIM_Base_SetConfig+0x130>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d00b      	beq.n	8006740 <TIM_Base_SetConfig+0x40>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	4a42      	ldr	r2, [pc, #264]	@ (8006834 <TIM_Base_SetConfig+0x134>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d007      	beq.n	8006740 <TIM_Base_SetConfig+0x40>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	4a41      	ldr	r2, [pc, #260]	@ (8006838 <TIM_Base_SetConfig+0x138>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d003      	beq.n	8006740 <TIM_Base_SetConfig+0x40>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	4a40      	ldr	r2, [pc, #256]	@ (800683c <TIM_Base_SetConfig+0x13c>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d108      	bne.n	8006752 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006746:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	68fa      	ldr	r2, [r7, #12]
 800674e:	4313      	orrs	r3, r2
 8006750:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	4a35      	ldr	r2, [pc, #212]	@ (800682c <TIM_Base_SetConfig+0x12c>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d02b      	beq.n	80067b2 <TIM_Base_SetConfig+0xb2>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006760:	d027      	beq.n	80067b2 <TIM_Base_SetConfig+0xb2>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4a32      	ldr	r2, [pc, #200]	@ (8006830 <TIM_Base_SetConfig+0x130>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d023      	beq.n	80067b2 <TIM_Base_SetConfig+0xb2>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4a31      	ldr	r2, [pc, #196]	@ (8006834 <TIM_Base_SetConfig+0x134>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d01f      	beq.n	80067b2 <TIM_Base_SetConfig+0xb2>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a30      	ldr	r2, [pc, #192]	@ (8006838 <TIM_Base_SetConfig+0x138>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d01b      	beq.n	80067b2 <TIM_Base_SetConfig+0xb2>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4a2f      	ldr	r2, [pc, #188]	@ (800683c <TIM_Base_SetConfig+0x13c>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d017      	beq.n	80067b2 <TIM_Base_SetConfig+0xb2>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4a2e      	ldr	r2, [pc, #184]	@ (8006840 <TIM_Base_SetConfig+0x140>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d013      	beq.n	80067b2 <TIM_Base_SetConfig+0xb2>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a2d      	ldr	r2, [pc, #180]	@ (8006844 <TIM_Base_SetConfig+0x144>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d00f      	beq.n	80067b2 <TIM_Base_SetConfig+0xb2>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	4a2c      	ldr	r2, [pc, #176]	@ (8006848 <TIM_Base_SetConfig+0x148>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d00b      	beq.n	80067b2 <TIM_Base_SetConfig+0xb2>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	4a2b      	ldr	r2, [pc, #172]	@ (800684c <TIM_Base_SetConfig+0x14c>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d007      	beq.n	80067b2 <TIM_Base_SetConfig+0xb2>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4a2a      	ldr	r2, [pc, #168]	@ (8006850 <TIM_Base_SetConfig+0x150>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d003      	beq.n	80067b2 <TIM_Base_SetConfig+0xb2>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4a29      	ldr	r2, [pc, #164]	@ (8006854 <TIM_Base_SetConfig+0x154>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d108      	bne.n	80067c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80067b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	68db      	ldr	r3, [r3, #12]
 80067be:	68fa      	ldr	r2, [r7, #12]
 80067c0:	4313      	orrs	r3, r2
 80067c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	695b      	ldr	r3, [r3, #20]
 80067ce:	4313      	orrs	r3, r2
 80067d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	68fa      	ldr	r2, [r7, #12]
 80067d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	689a      	ldr	r2, [r3, #8]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4a10      	ldr	r2, [pc, #64]	@ (800682c <TIM_Base_SetConfig+0x12c>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d003      	beq.n	80067f8 <TIM_Base_SetConfig+0xf8>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	4a12      	ldr	r2, [pc, #72]	@ (800683c <TIM_Base_SetConfig+0x13c>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d103      	bne.n	8006800 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	691a      	ldr	r2, [r3, #16]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2201      	movs	r2, #1
 8006804:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	691b      	ldr	r3, [r3, #16]
 800680a:	f003 0301 	and.w	r3, r3, #1
 800680e:	2b01      	cmp	r3, #1
 8006810:	d105      	bne.n	800681e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	691b      	ldr	r3, [r3, #16]
 8006816:	f023 0201 	bic.w	r2, r3, #1
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	611a      	str	r2, [r3, #16]
  }
}
 800681e:	bf00      	nop
 8006820:	3714      	adds	r7, #20
 8006822:	46bd      	mov	sp, r7
 8006824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006828:	4770      	bx	lr
 800682a:	bf00      	nop
 800682c:	40010000 	.word	0x40010000
 8006830:	40000400 	.word	0x40000400
 8006834:	40000800 	.word	0x40000800
 8006838:	40000c00 	.word	0x40000c00
 800683c:	40010400 	.word	0x40010400
 8006840:	40014000 	.word	0x40014000
 8006844:	40014400 	.word	0x40014400
 8006848:	40014800 	.word	0x40014800
 800684c:	40001800 	.word	0x40001800
 8006850:	40001c00 	.word	0x40001c00
 8006854:	40002000 	.word	0x40002000

08006858 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006858:	b480      	push	{r7}
 800685a:	b087      	sub	sp, #28
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6a1b      	ldr	r3, [r3, #32]
 8006866:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6a1b      	ldr	r3, [r3, #32]
 800686c:	f023 0201 	bic.w	r2, r3, #1
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	699b      	ldr	r3, [r3, #24]
 800687e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006886:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f023 0303 	bic.w	r3, r3, #3
 800688e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	68fa      	ldr	r2, [r7, #12]
 8006896:	4313      	orrs	r3, r2
 8006898:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	f023 0302 	bic.w	r3, r3, #2
 80068a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	697a      	ldr	r2, [r7, #20]
 80068a8:	4313      	orrs	r3, r2
 80068aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	4a20      	ldr	r2, [pc, #128]	@ (8006930 <TIM_OC1_SetConfig+0xd8>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d003      	beq.n	80068bc <TIM_OC1_SetConfig+0x64>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	4a1f      	ldr	r2, [pc, #124]	@ (8006934 <TIM_OC1_SetConfig+0xdc>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d10c      	bne.n	80068d6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	f023 0308 	bic.w	r3, r3, #8
 80068c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	68db      	ldr	r3, [r3, #12]
 80068c8:	697a      	ldr	r2, [r7, #20]
 80068ca:	4313      	orrs	r3, r2
 80068cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	f023 0304 	bic.w	r3, r3, #4
 80068d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	4a15      	ldr	r2, [pc, #84]	@ (8006930 <TIM_OC1_SetConfig+0xd8>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d003      	beq.n	80068e6 <TIM_OC1_SetConfig+0x8e>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	4a14      	ldr	r2, [pc, #80]	@ (8006934 <TIM_OC1_SetConfig+0xdc>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d111      	bne.n	800690a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80068ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80068f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	695b      	ldr	r3, [r3, #20]
 80068fa:	693a      	ldr	r2, [r7, #16]
 80068fc:	4313      	orrs	r3, r2
 80068fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	699b      	ldr	r3, [r3, #24]
 8006904:	693a      	ldr	r2, [r7, #16]
 8006906:	4313      	orrs	r3, r2
 8006908:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	693a      	ldr	r2, [r7, #16]
 800690e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	68fa      	ldr	r2, [r7, #12]
 8006914:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	685a      	ldr	r2, [r3, #4]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	697a      	ldr	r2, [r7, #20]
 8006922:	621a      	str	r2, [r3, #32]
}
 8006924:	bf00      	nop
 8006926:	371c      	adds	r7, #28
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr
 8006930:	40010000 	.word	0x40010000
 8006934:	40010400 	.word	0x40010400

08006938 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006938:	b480      	push	{r7}
 800693a:	b087      	sub	sp, #28
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6a1b      	ldr	r3, [r3, #32]
 8006946:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6a1b      	ldr	r3, [r3, #32]
 800694c:	f023 0210 	bic.w	r2, r3, #16
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	699b      	ldr	r3, [r3, #24]
 800695e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006966:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800696e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	021b      	lsls	r3, r3, #8
 8006976:	68fa      	ldr	r2, [r7, #12]
 8006978:	4313      	orrs	r3, r2
 800697a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	f023 0320 	bic.w	r3, r3, #32
 8006982:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	011b      	lsls	r3, r3, #4
 800698a:	697a      	ldr	r2, [r7, #20]
 800698c:	4313      	orrs	r3, r2
 800698e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	4a22      	ldr	r2, [pc, #136]	@ (8006a1c <TIM_OC2_SetConfig+0xe4>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d003      	beq.n	80069a0 <TIM_OC2_SetConfig+0x68>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	4a21      	ldr	r2, [pc, #132]	@ (8006a20 <TIM_OC2_SetConfig+0xe8>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d10d      	bne.n	80069bc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80069a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	68db      	ldr	r3, [r3, #12]
 80069ac:	011b      	lsls	r3, r3, #4
 80069ae:	697a      	ldr	r2, [r7, #20]
 80069b0:	4313      	orrs	r3, r2
 80069b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80069ba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	4a17      	ldr	r2, [pc, #92]	@ (8006a1c <TIM_OC2_SetConfig+0xe4>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d003      	beq.n	80069cc <TIM_OC2_SetConfig+0x94>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	4a16      	ldr	r2, [pc, #88]	@ (8006a20 <TIM_OC2_SetConfig+0xe8>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d113      	bne.n	80069f4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80069d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80069da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	695b      	ldr	r3, [r3, #20]
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	693a      	ldr	r2, [r7, #16]
 80069e4:	4313      	orrs	r3, r2
 80069e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	699b      	ldr	r3, [r3, #24]
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	693a      	ldr	r2, [r7, #16]
 80069f0:	4313      	orrs	r3, r2
 80069f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	693a      	ldr	r2, [r7, #16]
 80069f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	68fa      	ldr	r2, [r7, #12]
 80069fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	685a      	ldr	r2, [r3, #4]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	697a      	ldr	r2, [r7, #20]
 8006a0c:	621a      	str	r2, [r3, #32]
}
 8006a0e:	bf00      	nop
 8006a10:	371c      	adds	r7, #28
 8006a12:	46bd      	mov	sp, r7
 8006a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a18:	4770      	bx	lr
 8006a1a:	bf00      	nop
 8006a1c:	40010000 	.word	0x40010000
 8006a20:	40010400 	.word	0x40010400

08006a24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b087      	sub	sp, #28
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6a1b      	ldr	r3, [r3, #32]
 8006a32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6a1b      	ldr	r3, [r3, #32]
 8006a38:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	69db      	ldr	r3, [r3, #28]
 8006a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f023 0303 	bic.w	r3, r3, #3
 8006a5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	68fa      	ldr	r2, [r7, #12]
 8006a62:	4313      	orrs	r3, r2
 8006a64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006a6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	021b      	lsls	r3, r3, #8
 8006a74:	697a      	ldr	r2, [r7, #20]
 8006a76:	4313      	orrs	r3, r2
 8006a78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	4a21      	ldr	r2, [pc, #132]	@ (8006b04 <TIM_OC3_SetConfig+0xe0>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d003      	beq.n	8006a8a <TIM_OC3_SetConfig+0x66>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	4a20      	ldr	r2, [pc, #128]	@ (8006b08 <TIM_OC3_SetConfig+0xe4>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d10d      	bne.n	8006aa6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006a90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	68db      	ldr	r3, [r3, #12]
 8006a96:	021b      	lsls	r3, r3, #8
 8006a98:	697a      	ldr	r2, [r7, #20]
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006aa4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	4a16      	ldr	r2, [pc, #88]	@ (8006b04 <TIM_OC3_SetConfig+0xe0>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d003      	beq.n	8006ab6 <TIM_OC3_SetConfig+0x92>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	4a15      	ldr	r2, [pc, #84]	@ (8006b08 <TIM_OC3_SetConfig+0xe4>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d113      	bne.n	8006ade <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006abc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006ac4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	695b      	ldr	r3, [r3, #20]
 8006aca:	011b      	lsls	r3, r3, #4
 8006acc:	693a      	ldr	r2, [r7, #16]
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	699b      	ldr	r3, [r3, #24]
 8006ad6:	011b      	lsls	r3, r3, #4
 8006ad8:	693a      	ldr	r2, [r7, #16]
 8006ada:	4313      	orrs	r3, r2
 8006adc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	693a      	ldr	r2, [r7, #16]
 8006ae2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	68fa      	ldr	r2, [r7, #12]
 8006ae8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	685a      	ldr	r2, [r3, #4]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	697a      	ldr	r2, [r7, #20]
 8006af6:	621a      	str	r2, [r3, #32]
}
 8006af8:	bf00      	nop
 8006afa:	371c      	adds	r7, #28
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr
 8006b04:	40010000 	.word	0x40010000
 8006b08:	40010400 	.word	0x40010400

08006b0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b087      	sub	sp, #28
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6a1b      	ldr	r3, [r3, #32]
 8006b1a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6a1b      	ldr	r3, [r3, #32]
 8006b20:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	69db      	ldr	r3, [r3, #28]
 8006b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	021b      	lsls	r3, r3, #8
 8006b4a:	68fa      	ldr	r2, [r7, #12]
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006b56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	031b      	lsls	r3, r3, #12
 8006b5e:	693a      	ldr	r2, [r7, #16]
 8006b60:	4313      	orrs	r3, r2
 8006b62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	4a12      	ldr	r2, [pc, #72]	@ (8006bb0 <TIM_OC4_SetConfig+0xa4>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d003      	beq.n	8006b74 <TIM_OC4_SetConfig+0x68>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	4a11      	ldr	r2, [pc, #68]	@ (8006bb4 <TIM_OC4_SetConfig+0xa8>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d109      	bne.n	8006b88 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006b7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	695b      	ldr	r3, [r3, #20]
 8006b80:	019b      	lsls	r3, r3, #6
 8006b82:	697a      	ldr	r2, [r7, #20]
 8006b84:	4313      	orrs	r3, r2
 8006b86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	697a      	ldr	r2, [r7, #20]
 8006b8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	68fa      	ldr	r2, [r7, #12]
 8006b92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	685a      	ldr	r2, [r3, #4]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	693a      	ldr	r2, [r7, #16]
 8006ba0:	621a      	str	r2, [r3, #32]
}
 8006ba2:	bf00      	nop
 8006ba4:	371c      	adds	r7, #28
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr
 8006bae:	bf00      	nop
 8006bb0:	40010000 	.word	0x40010000
 8006bb4:	40010400 	.word	0x40010400

08006bb8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b087      	sub	sp, #28
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	60f8      	str	r0, [r7, #12]
 8006bc0:	60b9      	str	r1, [r7, #8]
 8006bc2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	f003 031f 	and.w	r3, r3, #31
 8006bca:	2201      	movs	r2, #1
 8006bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8006bd0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	6a1a      	ldr	r2, [r3, #32]
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	43db      	mvns	r3, r3
 8006bda:	401a      	ands	r2, r3
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	6a1a      	ldr	r2, [r3, #32]
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	f003 031f 	and.w	r3, r3, #31
 8006bea:	6879      	ldr	r1, [r7, #4]
 8006bec:	fa01 f303 	lsl.w	r3, r1, r3
 8006bf0:	431a      	orrs	r2, r3
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	621a      	str	r2, [r3, #32]
}
 8006bf6:	bf00      	nop
 8006bf8:	371c      	adds	r7, #28
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr
	...

08006c04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b085      	sub	sp, #20
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d101      	bne.n	8006c1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c18:	2302      	movs	r3, #2
 8006c1a:	e05a      	b.n	8006cd2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2201      	movs	r2, #1
 8006c20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2202      	movs	r2, #2
 8006c28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	68fa      	ldr	r2, [r7, #12]
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	68fa      	ldr	r2, [r7, #12]
 8006c54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a21      	ldr	r2, [pc, #132]	@ (8006ce0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d022      	beq.n	8006ca6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c68:	d01d      	beq.n	8006ca6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a1d      	ldr	r2, [pc, #116]	@ (8006ce4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d018      	beq.n	8006ca6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a1b      	ldr	r2, [pc, #108]	@ (8006ce8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d013      	beq.n	8006ca6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a1a      	ldr	r2, [pc, #104]	@ (8006cec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d00e      	beq.n	8006ca6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a18      	ldr	r2, [pc, #96]	@ (8006cf0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d009      	beq.n	8006ca6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a17      	ldr	r2, [pc, #92]	@ (8006cf4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d004      	beq.n	8006ca6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a15      	ldr	r2, [pc, #84]	@ (8006cf8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d10c      	bne.n	8006cc0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006cac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	68ba      	ldr	r2, [r7, #8]
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	68ba      	ldr	r2, [r7, #8]
 8006cbe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006cd0:	2300      	movs	r3, #0
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3714      	adds	r7, #20
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr
 8006cde:	bf00      	nop
 8006ce0:	40010000 	.word	0x40010000
 8006ce4:	40000400 	.word	0x40000400
 8006ce8:	40000800 	.word	0x40000800
 8006cec:	40000c00 	.word	0x40000c00
 8006cf0:	40010400 	.word	0x40010400
 8006cf4:	40014000 	.word	0x40014000
 8006cf8:	40001800 	.word	0x40001800

08006cfc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b083      	sub	sp, #12
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d04:	bf00      	nop
 8006d06:	370c      	adds	r7, #12
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr

08006d10 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b083      	sub	sp, #12
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d18:	bf00      	nop
 8006d1a:	370c      	adds	r7, #12
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr

08006d24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b082      	sub	sp, #8
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d101      	bne.n	8006d36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d32:	2301      	movs	r3, #1
 8006d34:	e042      	b.n	8006dbc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d3c:	b2db      	uxtb	r3, r3
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d106      	bne.n	8006d50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f7fc fccc 	bl	80036e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2224      	movs	r2, #36	@ 0x24
 8006d54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	68da      	ldr	r2, [r3, #12]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006d66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f001 f8ad 	bl	8007ec8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	691a      	ldr	r2, [r3, #16]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006d7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	695a      	ldr	r2, [r3, #20]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006d8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	68da      	ldr	r2, [r3, #12]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006d9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2200      	movs	r2, #0
 8006da2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2220      	movs	r2, #32
 8006da8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2220      	movs	r2, #32
 8006db0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2200      	movs	r2, #0
 8006db8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006dba:	2300      	movs	r3, #0
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3708      	adds	r7, #8
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}

08006dc4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b08a      	sub	sp, #40	@ 0x28
 8006dc8:	af02      	add	r7, sp, #8
 8006dca:	60f8      	str	r0, [r7, #12]
 8006dcc:	60b9      	str	r1, [r7, #8]
 8006dce:	603b      	str	r3, [r7, #0]
 8006dd0:	4613      	mov	r3, r2
 8006dd2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006dde:	b2db      	uxtb	r3, r3
 8006de0:	2b20      	cmp	r3, #32
 8006de2:	d175      	bne.n	8006ed0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d002      	beq.n	8006df0 <HAL_UART_Transmit+0x2c>
 8006dea:	88fb      	ldrh	r3, [r7, #6]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d101      	bne.n	8006df4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006df0:	2301      	movs	r3, #1
 8006df2:	e06e      	b.n	8006ed2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2200      	movs	r2, #0
 8006df8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2221      	movs	r2, #33	@ 0x21
 8006dfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006e02:	f7fc ff79 	bl	8003cf8 <HAL_GetTick>
 8006e06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	88fa      	ldrh	r2, [r7, #6]
 8006e0c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	88fa      	ldrh	r2, [r7, #6]
 8006e12:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e1c:	d108      	bne.n	8006e30 <HAL_UART_Transmit+0x6c>
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	691b      	ldr	r3, [r3, #16]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d104      	bne.n	8006e30 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006e26:	2300      	movs	r3, #0
 8006e28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	61bb      	str	r3, [r7, #24]
 8006e2e:	e003      	b.n	8006e38 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e34:	2300      	movs	r3, #0
 8006e36:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006e38:	e02e      	b.n	8006e98 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	9300      	str	r3, [sp, #0]
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	2200      	movs	r2, #0
 8006e42:	2180      	movs	r1, #128	@ 0x80
 8006e44:	68f8      	ldr	r0, [r7, #12]
 8006e46:	f000 fd86 	bl	8007956 <UART_WaitOnFlagUntilTimeout>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d005      	beq.n	8006e5c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2220      	movs	r2, #32
 8006e54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006e58:	2303      	movs	r3, #3
 8006e5a:	e03a      	b.n	8006ed2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006e5c:	69fb      	ldr	r3, [r7, #28]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d10b      	bne.n	8006e7a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006e62:	69bb      	ldr	r3, [r7, #24]
 8006e64:	881b      	ldrh	r3, [r3, #0]
 8006e66:	461a      	mov	r2, r3
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e70:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006e72:	69bb      	ldr	r3, [r7, #24]
 8006e74:	3302      	adds	r3, #2
 8006e76:	61bb      	str	r3, [r7, #24]
 8006e78:	e007      	b.n	8006e8a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006e7a:	69fb      	ldr	r3, [r7, #28]
 8006e7c:	781a      	ldrb	r2, [r3, #0]
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006e84:	69fb      	ldr	r3, [r7, #28]
 8006e86:	3301      	adds	r3, #1
 8006e88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	3b01      	subs	r3, #1
 8006e92:	b29a      	uxth	r2, r3
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d1cb      	bne.n	8006e3a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	9300      	str	r3, [sp, #0]
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	2140      	movs	r1, #64	@ 0x40
 8006eac:	68f8      	ldr	r0, [r7, #12]
 8006eae:	f000 fd52 	bl	8007956 <UART_WaitOnFlagUntilTimeout>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d005      	beq.n	8006ec4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2220      	movs	r2, #32
 8006ebc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006ec0:	2303      	movs	r3, #3
 8006ec2:	e006      	b.n	8006ed2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2220      	movs	r2, #32
 8006ec8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	e000      	b.n	8006ed2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006ed0:	2302      	movs	r3, #2
  }
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3720      	adds	r7, #32
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
	...

08006edc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b08c      	sub	sp, #48	@ 0x30
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	60b9      	str	r1, [r7, #8]
 8006ee6:	4613      	mov	r3, r2
 8006ee8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ef0:	b2db      	uxtb	r3, r3
 8006ef2:	2b20      	cmp	r3, #32
 8006ef4:	d156      	bne.n	8006fa4 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d002      	beq.n	8006f02 <HAL_UART_Transmit_DMA+0x26>
 8006efc:	88fb      	ldrh	r3, [r7, #6]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d101      	bne.n	8006f06 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006f02:	2301      	movs	r3, #1
 8006f04:	e04f      	b.n	8006fa6 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8006f06:	68ba      	ldr	r2, [r7, #8]
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	88fa      	ldrh	r2, [r7, #6]
 8006f10:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	88fa      	ldrh	r2, [r7, #6]
 8006f16:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2221      	movs	r2, #33	@ 0x21
 8006f22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f2a:	4a21      	ldr	r2, [pc, #132]	@ (8006fb0 <HAL_UART_Transmit_DMA+0xd4>)
 8006f2c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f32:	4a20      	ldr	r2, [pc, #128]	@ (8006fb4 <HAL_UART_Transmit_DMA+0xd8>)
 8006f34:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f3a:	4a1f      	ldr	r2, [pc, #124]	@ (8006fb8 <HAL_UART_Transmit_DMA+0xdc>)
 8006f3c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f42:	2200      	movs	r2, #0
 8006f44:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8006f46:	f107 0308 	add.w	r3, r7, #8
 8006f4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006f50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f52:	6819      	ldr	r1, [r3, #0]
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	3304      	adds	r3, #4
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	88fb      	ldrh	r3, [r7, #6]
 8006f5e:	f7fd f867 	bl	8004030 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006f6a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	3314      	adds	r3, #20
 8006f72:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f74:	69bb      	ldr	r3, [r7, #24]
 8006f76:	e853 3f00 	ldrex	r3, [r3]
 8006f7a:	617b      	str	r3, [r7, #20]
   return(result);
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f82:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	3314      	adds	r3, #20
 8006f8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006f8c:	627a      	str	r2, [r7, #36]	@ 0x24
 8006f8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f90:	6a39      	ldr	r1, [r7, #32]
 8006f92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f94:	e841 2300 	strex	r3, r2, [r1]
 8006f98:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f9a:	69fb      	ldr	r3, [r7, #28]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d1e5      	bne.n	8006f6c <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	e000      	b.n	8006fa6 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8006fa4:	2302      	movs	r3, #2
  }
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3730      	adds	r7, #48	@ 0x30
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop
 8006fb0:	080076a5 	.word	0x080076a5
 8006fb4:	0800773f 	.word	0x0800773f
 8006fb8:	080078c3 	.word	0x080078c3

08006fbc <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b084      	sub	sp, #16
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	60f8      	str	r0, [r7, #12]
 8006fc4:	60b9      	str	r1, [r7, #8]
 8006fc6:	4613      	mov	r3, r2
 8006fc8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006fd0:	b2db      	uxtb	r3, r3
 8006fd2:	2b20      	cmp	r3, #32
 8006fd4:	d112      	bne.n	8006ffc <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d002      	beq.n	8006fe2 <HAL_UART_Receive_DMA+0x26>
 8006fdc:	88fb      	ldrh	r3, [r7, #6]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d101      	bne.n	8006fe6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e00b      	b.n	8006ffe <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006fec:	88fb      	ldrh	r3, [r7, #6]
 8006fee:	461a      	mov	r2, r3
 8006ff0:	68b9      	ldr	r1, [r7, #8]
 8006ff2:	68f8      	ldr	r0, [r7, #12]
 8006ff4:	f000 fd08 	bl	8007a08 <UART_Start_Receive_DMA>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	e000      	b.n	8006ffe <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006ffc:	2302      	movs	r3, #2
  }
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3710      	adds	r7, #16
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}

08007006 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8007006:	b580      	push	{r7, lr}
 8007008:	b090      	sub	sp, #64	@ 0x40
 800700a:	af00      	add	r7, sp, #0
 800700c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800700e:	2300      	movs	r3, #0
 8007010:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	695b      	ldr	r3, [r3, #20]
 8007018:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800701c:	2b80      	cmp	r3, #128	@ 0x80
 800701e:	bf0c      	ite	eq
 8007020:	2301      	moveq	r3, #1
 8007022:	2300      	movne	r3, #0
 8007024:	b2db      	uxtb	r3, r3
 8007026:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800702e:	b2db      	uxtb	r3, r3
 8007030:	2b21      	cmp	r3, #33	@ 0x21
 8007032:	d128      	bne.n	8007086 <HAL_UART_DMAStop+0x80>
 8007034:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007036:	2b00      	cmp	r3, #0
 8007038:	d025      	beq.n	8007086 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	3314      	adds	r3, #20
 8007040:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007044:	e853 3f00 	ldrex	r3, [r3]
 8007048:	623b      	str	r3, [r7, #32]
   return(result);
 800704a:	6a3b      	ldr	r3, [r7, #32]
 800704c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007050:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	3314      	adds	r3, #20
 8007058:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800705a:	633a      	str	r2, [r7, #48]	@ 0x30
 800705c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800705e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007060:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007062:	e841 2300 	strex	r3, r2, [r1]
 8007066:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800706a:	2b00      	cmp	r3, #0
 800706c:	d1e5      	bne.n	800703a <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007072:	2b00      	cmp	r3, #0
 8007074:	d004      	beq.n	8007080 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800707a:	4618      	mov	r0, r3
 800707c:	f7fd f830 	bl	80040e0 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f000 fd5b 	bl	8007b3c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	695b      	ldr	r3, [r3, #20]
 800708c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007090:	2b40      	cmp	r3, #64	@ 0x40
 8007092:	bf0c      	ite	eq
 8007094:	2301      	moveq	r3, #1
 8007096:	2300      	movne	r3, #0
 8007098:	b2db      	uxtb	r3, r3
 800709a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80070a2:	b2db      	uxtb	r3, r3
 80070a4:	2b22      	cmp	r3, #34	@ 0x22
 80070a6:	d128      	bne.n	80070fa <HAL_UART_DMAStop+0xf4>
 80070a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d025      	beq.n	80070fa <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	3314      	adds	r3, #20
 80070b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	e853 3f00 	ldrex	r3, [r3]
 80070bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80070c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	3314      	adds	r3, #20
 80070cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80070ce:	61fa      	str	r2, [r7, #28]
 80070d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d2:	69b9      	ldr	r1, [r7, #24]
 80070d4:	69fa      	ldr	r2, [r7, #28]
 80070d6:	e841 2300 	strex	r3, r2, [r1]
 80070da:	617b      	str	r3, [r7, #20]
   return(result);
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d1e5      	bne.n	80070ae <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d004      	beq.n	80070f4 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070ee:	4618      	mov	r0, r3
 80070f0:	f7fc fff6 	bl	80040e0 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f000 fd49 	bl	8007b8c <UART_EndRxTransfer>
  }

  return HAL_OK;
 80070fa:	2300      	movs	r3, #0
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3740      	adds	r7, #64	@ 0x40
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}

08007104 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b0ba      	sub	sp, #232	@ 0xe8
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	68db      	ldr	r3, [r3, #12]
 800711c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	695b      	ldr	r3, [r3, #20]
 8007126:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800712a:	2300      	movs	r3, #0
 800712c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007130:	2300      	movs	r3, #0
 8007132:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007136:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800713a:	f003 030f 	and.w	r3, r3, #15
 800713e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007142:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007146:	2b00      	cmp	r3, #0
 8007148:	d10f      	bne.n	800716a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800714a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800714e:	f003 0320 	and.w	r3, r3, #32
 8007152:	2b00      	cmp	r3, #0
 8007154:	d009      	beq.n	800716a <HAL_UART_IRQHandler+0x66>
 8007156:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800715a:	f003 0320 	and.w	r3, r3, #32
 800715e:	2b00      	cmp	r3, #0
 8007160:	d003      	beq.n	800716a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f000 fdf1 	bl	8007d4a <UART_Receive_IT>
      return;
 8007168:	e25b      	b.n	8007622 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800716a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800716e:	2b00      	cmp	r3, #0
 8007170:	f000 80de 	beq.w	8007330 <HAL_UART_IRQHandler+0x22c>
 8007174:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007178:	f003 0301 	and.w	r3, r3, #1
 800717c:	2b00      	cmp	r3, #0
 800717e:	d106      	bne.n	800718e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007180:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007184:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007188:	2b00      	cmp	r3, #0
 800718a:	f000 80d1 	beq.w	8007330 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800718e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007192:	f003 0301 	and.w	r3, r3, #1
 8007196:	2b00      	cmp	r3, #0
 8007198:	d00b      	beq.n	80071b2 <HAL_UART_IRQHandler+0xae>
 800719a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800719e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d005      	beq.n	80071b2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071aa:	f043 0201 	orr.w	r2, r3, #1
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80071b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071b6:	f003 0304 	and.w	r3, r3, #4
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d00b      	beq.n	80071d6 <HAL_UART_IRQHandler+0xd2>
 80071be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80071c2:	f003 0301 	and.w	r3, r3, #1
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d005      	beq.n	80071d6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071ce:	f043 0202 	orr.w	r2, r3, #2
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80071d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071da:	f003 0302 	and.w	r3, r3, #2
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d00b      	beq.n	80071fa <HAL_UART_IRQHandler+0xf6>
 80071e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80071e6:	f003 0301 	and.w	r3, r3, #1
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d005      	beq.n	80071fa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071f2:	f043 0204 	orr.w	r2, r3, #4
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80071fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071fe:	f003 0308 	and.w	r3, r3, #8
 8007202:	2b00      	cmp	r3, #0
 8007204:	d011      	beq.n	800722a <HAL_UART_IRQHandler+0x126>
 8007206:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800720a:	f003 0320 	and.w	r3, r3, #32
 800720e:	2b00      	cmp	r3, #0
 8007210:	d105      	bne.n	800721e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007212:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007216:	f003 0301 	and.w	r3, r3, #1
 800721a:	2b00      	cmp	r3, #0
 800721c:	d005      	beq.n	800722a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007222:	f043 0208 	orr.w	r2, r3, #8
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800722e:	2b00      	cmp	r3, #0
 8007230:	f000 81f2 	beq.w	8007618 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007234:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007238:	f003 0320 	and.w	r3, r3, #32
 800723c:	2b00      	cmp	r3, #0
 800723e:	d008      	beq.n	8007252 <HAL_UART_IRQHandler+0x14e>
 8007240:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007244:	f003 0320 	and.w	r3, r3, #32
 8007248:	2b00      	cmp	r3, #0
 800724a:	d002      	beq.n	8007252 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f000 fd7c 	bl	8007d4a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	695b      	ldr	r3, [r3, #20]
 8007258:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800725c:	2b40      	cmp	r3, #64	@ 0x40
 800725e:	bf0c      	ite	eq
 8007260:	2301      	moveq	r3, #1
 8007262:	2300      	movne	r3, #0
 8007264:	b2db      	uxtb	r3, r3
 8007266:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800726e:	f003 0308 	and.w	r3, r3, #8
 8007272:	2b00      	cmp	r3, #0
 8007274:	d103      	bne.n	800727e <HAL_UART_IRQHandler+0x17a>
 8007276:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800727a:	2b00      	cmp	r3, #0
 800727c:	d04f      	beq.n	800731e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f000 fc84 	bl	8007b8c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	695b      	ldr	r3, [r3, #20]
 800728a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800728e:	2b40      	cmp	r3, #64	@ 0x40
 8007290:	d141      	bne.n	8007316 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	3314      	adds	r3, #20
 8007298:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800729c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80072a0:	e853 3f00 	ldrex	r3, [r3]
 80072a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80072a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80072ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80072b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	3314      	adds	r3, #20
 80072ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80072be:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80072c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80072ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80072ce:	e841 2300 	strex	r3, r2, [r1]
 80072d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80072d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d1d9      	bne.n	8007292 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d013      	beq.n	800730e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072ea:	4a7e      	ldr	r2, [pc, #504]	@ (80074e4 <HAL_UART_IRQHandler+0x3e0>)
 80072ec:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072f2:	4618      	mov	r0, r3
 80072f4:	f7fc ff64 	bl	80041c0 <HAL_DMA_Abort_IT>
 80072f8:	4603      	mov	r3, r0
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d016      	beq.n	800732c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007302:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007304:	687a      	ldr	r2, [r7, #4]
 8007306:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007308:	4610      	mov	r0, r2
 800730a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800730c:	e00e      	b.n	800732c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 f9b2 	bl	8007678 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007314:	e00a      	b.n	800732c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f000 f9ae 	bl	8007678 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800731c:	e006      	b.n	800732c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 f9aa 	bl	8007678 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2200      	movs	r2, #0
 8007328:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800732a:	e175      	b.n	8007618 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800732c:	bf00      	nop
    return;
 800732e:	e173      	b.n	8007618 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007334:	2b01      	cmp	r3, #1
 8007336:	f040 814f 	bne.w	80075d8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800733a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800733e:	f003 0310 	and.w	r3, r3, #16
 8007342:	2b00      	cmp	r3, #0
 8007344:	f000 8148 	beq.w	80075d8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007348:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800734c:	f003 0310 	and.w	r3, r3, #16
 8007350:	2b00      	cmp	r3, #0
 8007352:	f000 8141 	beq.w	80075d8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007356:	2300      	movs	r3, #0
 8007358:	60bb      	str	r3, [r7, #8]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	60bb      	str	r3, [r7, #8]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	60bb      	str	r3, [r7, #8]
 800736a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	695b      	ldr	r3, [r3, #20]
 8007372:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007376:	2b40      	cmp	r3, #64	@ 0x40
 8007378:	f040 80b6 	bne.w	80074e8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007388:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800738c:	2b00      	cmp	r3, #0
 800738e:	f000 8145 	beq.w	800761c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007396:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800739a:	429a      	cmp	r2, r3
 800739c:	f080 813e 	bcs.w	800761c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80073a6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073ac:	69db      	ldr	r3, [r3, #28]
 80073ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80073b2:	f000 8088 	beq.w	80074c6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	330c      	adds	r3, #12
 80073bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80073c4:	e853 3f00 	ldrex	r3, [r3]
 80073c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80073cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80073d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80073d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	330c      	adds	r3, #12
 80073de:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80073e2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80073e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80073ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80073f2:	e841 2300 	strex	r3, r2, [r1]
 80073f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80073fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d1d9      	bne.n	80073b6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	3314      	adds	r3, #20
 8007408:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800740a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800740c:	e853 3f00 	ldrex	r3, [r3]
 8007410:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007412:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007414:	f023 0301 	bic.w	r3, r3, #1
 8007418:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	3314      	adds	r3, #20
 8007422:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007426:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800742a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800742c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800742e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007432:	e841 2300 	strex	r3, r2, [r1]
 8007436:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007438:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800743a:	2b00      	cmp	r3, #0
 800743c:	d1e1      	bne.n	8007402 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	3314      	adds	r3, #20
 8007444:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007446:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007448:	e853 3f00 	ldrex	r3, [r3]
 800744c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800744e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007450:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007454:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	3314      	adds	r3, #20
 800745e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007462:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007464:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007466:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007468:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800746a:	e841 2300 	strex	r3, r2, [r1]
 800746e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007470:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007472:	2b00      	cmp	r3, #0
 8007474:	d1e3      	bne.n	800743e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2220      	movs	r2, #32
 800747a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2200      	movs	r2, #0
 8007482:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	330c      	adds	r3, #12
 800748a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800748c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800748e:	e853 3f00 	ldrex	r3, [r3]
 8007492:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007494:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007496:	f023 0310 	bic.w	r3, r3, #16
 800749a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	330c      	adds	r3, #12
 80074a4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80074a8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80074aa:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80074ae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80074b0:	e841 2300 	strex	r3, r2, [r1]
 80074b4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80074b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d1e3      	bne.n	8007484 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074c0:	4618      	mov	r0, r3
 80074c2:	f7fc fe0d 	bl	80040e0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2202      	movs	r2, #2
 80074ca:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	1ad3      	subs	r3, r2, r3
 80074d8:	b29b      	uxth	r3, r3
 80074da:	4619      	mov	r1, r3
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f000 f8d5 	bl	800768c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80074e2:	e09b      	b.n	800761c <HAL_UART_IRQHandler+0x518>
 80074e4:	08007c53 	.word	0x08007c53
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80074f0:	b29b      	uxth	r3, r3
 80074f2:	1ad3      	subs	r3, r2, r3
 80074f4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	2b00      	cmp	r3, #0
 8007500:	f000 808e 	beq.w	8007620 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007504:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007508:	2b00      	cmp	r3, #0
 800750a:	f000 8089 	beq.w	8007620 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	330c      	adds	r3, #12
 8007514:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007518:	e853 3f00 	ldrex	r3, [r3]
 800751c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800751e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007520:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007524:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	330c      	adds	r3, #12
 800752e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007532:	647a      	str	r2, [r7, #68]	@ 0x44
 8007534:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007536:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007538:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800753a:	e841 2300 	strex	r3, r2, [r1]
 800753e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007540:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007542:	2b00      	cmp	r3, #0
 8007544:	d1e3      	bne.n	800750e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	3314      	adds	r3, #20
 800754c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800754e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007550:	e853 3f00 	ldrex	r3, [r3]
 8007554:	623b      	str	r3, [r7, #32]
   return(result);
 8007556:	6a3b      	ldr	r3, [r7, #32]
 8007558:	f023 0301 	bic.w	r3, r3, #1
 800755c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	3314      	adds	r3, #20
 8007566:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800756a:	633a      	str	r2, [r7, #48]	@ 0x30
 800756c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800756e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007570:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007572:	e841 2300 	strex	r3, r2, [r1]
 8007576:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800757a:	2b00      	cmp	r3, #0
 800757c:	d1e3      	bne.n	8007546 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2220      	movs	r2, #32
 8007582:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2200      	movs	r2, #0
 800758a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	330c      	adds	r3, #12
 8007592:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	e853 3f00 	ldrex	r3, [r3]
 800759a:	60fb      	str	r3, [r7, #12]
   return(result);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f023 0310 	bic.w	r3, r3, #16
 80075a2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	330c      	adds	r3, #12
 80075ac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80075b0:	61fa      	str	r2, [r7, #28]
 80075b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b4:	69b9      	ldr	r1, [r7, #24]
 80075b6:	69fa      	ldr	r2, [r7, #28]
 80075b8:	e841 2300 	strex	r3, r2, [r1]
 80075bc:	617b      	str	r3, [r7, #20]
   return(result);
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d1e3      	bne.n	800758c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2202      	movs	r2, #2
 80075c8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80075ca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80075ce:	4619      	mov	r1, r3
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f000 f85b 	bl	800768c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80075d6:	e023      	b.n	8007620 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80075d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d009      	beq.n	80075f8 <HAL_UART_IRQHandler+0x4f4>
 80075e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d003      	beq.n	80075f8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f000 fb42 	bl	8007c7a <UART_Transmit_IT>
    return;
 80075f6:	e014      	b.n	8007622 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80075f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007600:	2b00      	cmp	r3, #0
 8007602:	d00e      	beq.n	8007622 <HAL_UART_IRQHandler+0x51e>
 8007604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007608:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800760c:	2b00      	cmp	r3, #0
 800760e:	d008      	beq.n	8007622 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f000 fb82 	bl	8007d1a <UART_EndTransmit_IT>
    return;
 8007616:	e004      	b.n	8007622 <HAL_UART_IRQHandler+0x51e>
    return;
 8007618:	bf00      	nop
 800761a:	e002      	b.n	8007622 <HAL_UART_IRQHandler+0x51e>
      return;
 800761c:	bf00      	nop
 800761e:	e000      	b.n	8007622 <HAL_UART_IRQHandler+0x51e>
      return;
 8007620:	bf00      	nop
  }
}
 8007622:	37e8      	adds	r7, #232	@ 0xe8
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}

08007628 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007628:	b480      	push	{r7}
 800762a:	b083      	sub	sp, #12
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007630:	bf00      	nop
 8007632:	370c      	adds	r7, #12
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr

0800763c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800763c:	b480      	push	{r7}
 800763e:	b083      	sub	sp, #12
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007644:	bf00      	nop
 8007646:	370c      	adds	r7, #12
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr

08007650 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007650:	b480      	push	{r7}
 8007652:	b083      	sub	sp, #12
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007658:	bf00      	nop
 800765a:	370c      	adds	r7, #12
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr

08007664 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007664:	b480      	push	{r7}
 8007666:	b083      	sub	sp, #12
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800766c:	bf00      	nop
 800766e:	370c      	adds	r7, #12
 8007670:	46bd      	mov	sp, r7
 8007672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007676:	4770      	bx	lr

08007678 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007678:	b480      	push	{r7}
 800767a:	b083      	sub	sp, #12
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007680:	bf00      	nop
 8007682:	370c      	adds	r7, #12
 8007684:	46bd      	mov	sp, r7
 8007686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768a:	4770      	bx	lr

0800768c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800768c:	b480      	push	{r7}
 800768e:	b083      	sub	sp, #12
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	460b      	mov	r3, r1
 8007696:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007698:	bf00      	nop
 800769a:	370c      	adds	r7, #12
 800769c:	46bd      	mov	sp, r7
 800769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a2:	4770      	bx	lr

080076a4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b090      	sub	sp, #64	@ 0x40
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d137      	bne.n	8007730 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80076c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076c2:	2200      	movs	r2, #0
 80076c4:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80076c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	3314      	adds	r3, #20
 80076cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076d0:	e853 3f00 	ldrex	r3, [r3]
 80076d4:	623b      	str	r3, [r7, #32]
   return(result);
 80076d6:	6a3b      	ldr	r3, [r7, #32]
 80076d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80076dc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80076de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	3314      	adds	r3, #20
 80076e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80076e6:	633a      	str	r2, [r7, #48]	@ 0x30
 80076e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80076ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076ee:	e841 2300 	strex	r3, r2, [r1]
 80076f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80076f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d1e5      	bne.n	80076c6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80076fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	330c      	adds	r3, #12
 8007700:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	e853 3f00 	ldrex	r3, [r3]
 8007708:	60fb      	str	r3, [r7, #12]
   return(result);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007710:	637b      	str	r3, [r7, #52]	@ 0x34
 8007712:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	330c      	adds	r3, #12
 8007718:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800771a:	61fa      	str	r2, [r7, #28]
 800771c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800771e:	69b9      	ldr	r1, [r7, #24]
 8007720:	69fa      	ldr	r2, [r7, #28]
 8007722:	e841 2300 	strex	r3, r2, [r1]
 8007726:	617b      	str	r3, [r7, #20]
   return(result);
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d1e5      	bne.n	80076fa <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800772e:	e002      	b.n	8007736 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007730:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8007732:	f7ff ff79 	bl	8007628 <HAL_UART_TxCpltCallback>
}
 8007736:	bf00      	nop
 8007738:	3740      	adds	r7, #64	@ 0x40
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}

0800773e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800773e:	b580      	push	{r7, lr}
 8007740:	b084      	sub	sp, #16
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800774a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800774c:	68f8      	ldr	r0, [r7, #12]
 800774e:	f7ff ff75 	bl	800763c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007752:	bf00      	nop
 8007754:	3710      	adds	r7, #16
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}

0800775a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800775a:	b580      	push	{r7, lr}
 800775c:	b09c      	sub	sp, #112	@ 0x70
 800775e:	af00      	add	r7, sp, #0
 8007760:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007766:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007772:	2b00      	cmp	r3, #0
 8007774:	d172      	bne.n	800785c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007776:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007778:	2200      	movs	r2, #0
 800777a:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800777c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	330c      	adds	r3, #12
 8007782:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007784:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007786:	e853 3f00 	ldrex	r3, [r3]
 800778a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800778c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800778e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007792:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007794:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	330c      	adds	r3, #12
 800779a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800779c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800779e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077a0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80077a2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80077a4:	e841 2300 	strex	r3, r2, [r1]
 80077a8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80077aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d1e5      	bne.n	800777c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	3314      	adds	r3, #20
 80077b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077ba:	e853 3f00 	ldrex	r3, [r3]
 80077be:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80077c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077c2:	f023 0301 	bic.w	r3, r3, #1
 80077c6:	667b      	str	r3, [r7, #100]	@ 0x64
 80077c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	3314      	adds	r3, #20
 80077ce:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80077d0:	647a      	str	r2, [r7, #68]	@ 0x44
 80077d2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80077d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80077d8:	e841 2300 	strex	r3, r2, [r1]
 80077dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80077de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d1e5      	bne.n	80077b0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	3314      	adds	r3, #20
 80077ea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ee:	e853 3f00 	ldrex	r3, [r3]
 80077f2:	623b      	str	r3, [r7, #32]
   return(result);
 80077f4:	6a3b      	ldr	r3, [r7, #32]
 80077f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80077fa:	663b      	str	r3, [r7, #96]	@ 0x60
 80077fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	3314      	adds	r3, #20
 8007802:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007804:	633a      	str	r2, [r7, #48]	@ 0x30
 8007806:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007808:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800780a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800780c:	e841 2300 	strex	r3, r2, [r1]
 8007810:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007814:	2b00      	cmp	r3, #0
 8007816:	d1e5      	bne.n	80077e4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007818:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800781a:	2220      	movs	r2, #32
 800781c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007820:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007824:	2b01      	cmp	r3, #1
 8007826:	d119      	bne.n	800785c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007828:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	330c      	adds	r3, #12
 800782e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	e853 3f00 	ldrex	r3, [r3]
 8007836:	60fb      	str	r3, [r7, #12]
   return(result);
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f023 0310 	bic.w	r3, r3, #16
 800783e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007840:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	330c      	adds	r3, #12
 8007846:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007848:	61fa      	str	r2, [r7, #28]
 800784a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800784c:	69b9      	ldr	r1, [r7, #24]
 800784e:	69fa      	ldr	r2, [r7, #28]
 8007850:	e841 2300 	strex	r3, r2, [r1]
 8007854:	617b      	str	r3, [r7, #20]
   return(result);
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d1e5      	bne.n	8007828 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800785c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800785e:	2200      	movs	r2, #0
 8007860:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007862:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007866:	2b01      	cmp	r3, #1
 8007868:	d106      	bne.n	8007878 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800786a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800786c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800786e:	4619      	mov	r1, r3
 8007870:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007872:	f7ff ff0b 	bl	800768c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007876:	e002      	b.n	800787e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007878:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800787a:	f7ff fee9 	bl	8007650 <HAL_UART_RxCpltCallback>
}
 800787e:	bf00      	nop
 8007880:	3770      	adds	r7, #112	@ 0x70
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}

08007886 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007886:	b580      	push	{r7, lr}
 8007888:	b084      	sub	sp, #16
 800788a:	af00      	add	r7, sp, #0
 800788c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007892:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2201      	movs	r2, #1
 8007898:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800789e:	2b01      	cmp	r3, #1
 80078a0:	d108      	bne.n	80078b4 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80078a6:	085b      	lsrs	r3, r3, #1
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	4619      	mov	r1, r3
 80078ac:	68f8      	ldr	r0, [r7, #12]
 80078ae:	f7ff feed 	bl	800768c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80078b2:	e002      	b.n	80078ba <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80078b4:	68f8      	ldr	r0, [r7, #12]
 80078b6:	f7ff fed5 	bl	8007664 <HAL_UART_RxHalfCpltCallback>
}
 80078ba:	bf00      	nop
 80078bc:	3710      	adds	r7, #16
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}

080078c2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80078c2:	b580      	push	{r7, lr}
 80078c4:	b084      	sub	sp, #16
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80078ca:	2300      	movs	r3, #0
 80078cc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078d2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	695b      	ldr	r3, [r3, #20]
 80078da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078de:	2b80      	cmp	r3, #128	@ 0x80
 80078e0:	bf0c      	ite	eq
 80078e2:	2301      	moveq	r3, #1
 80078e4:	2300      	movne	r3, #0
 80078e6:	b2db      	uxtb	r3, r3
 80078e8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	2b21      	cmp	r3, #33	@ 0x21
 80078f4:	d108      	bne.n	8007908 <UART_DMAError+0x46>
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d005      	beq.n	8007908 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	2200      	movs	r2, #0
 8007900:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8007902:	68b8      	ldr	r0, [r7, #8]
 8007904:	f000 f91a 	bl	8007b3c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	695b      	ldr	r3, [r3, #20]
 800790e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007912:	2b40      	cmp	r3, #64	@ 0x40
 8007914:	bf0c      	ite	eq
 8007916:	2301      	moveq	r3, #1
 8007918:	2300      	movne	r3, #0
 800791a:	b2db      	uxtb	r3, r3
 800791c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007924:	b2db      	uxtb	r3, r3
 8007926:	2b22      	cmp	r3, #34	@ 0x22
 8007928:	d108      	bne.n	800793c <UART_DMAError+0x7a>
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d005      	beq.n	800793c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	2200      	movs	r2, #0
 8007934:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8007936:	68b8      	ldr	r0, [r7, #8]
 8007938:	f000 f928 	bl	8007b8c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007940:	f043 0210 	orr.w	r2, r3, #16
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007948:	68b8      	ldr	r0, [r7, #8]
 800794a:	f7ff fe95 	bl	8007678 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800794e:	bf00      	nop
 8007950:	3710      	adds	r7, #16
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}

08007956 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007956:	b580      	push	{r7, lr}
 8007958:	b086      	sub	sp, #24
 800795a:	af00      	add	r7, sp, #0
 800795c:	60f8      	str	r0, [r7, #12]
 800795e:	60b9      	str	r1, [r7, #8]
 8007960:	603b      	str	r3, [r7, #0]
 8007962:	4613      	mov	r3, r2
 8007964:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007966:	e03b      	b.n	80079e0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007968:	6a3b      	ldr	r3, [r7, #32]
 800796a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800796e:	d037      	beq.n	80079e0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007970:	f7fc f9c2 	bl	8003cf8 <HAL_GetTick>
 8007974:	4602      	mov	r2, r0
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	1ad3      	subs	r3, r2, r3
 800797a:	6a3a      	ldr	r2, [r7, #32]
 800797c:	429a      	cmp	r2, r3
 800797e:	d302      	bcc.n	8007986 <UART_WaitOnFlagUntilTimeout+0x30>
 8007980:	6a3b      	ldr	r3, [r7, #32]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d101      	bne.n	800798a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007986:	2303      	movs	r3, #3
 8007988:	e03a      	b.n	8007a00 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	68db      	ldr	r3, [r3, #12]
 8007990:	f003 0304 	and.w	r3, r3, #4
 8007994:	2b00      	cmp	r3, #0
 8007996:	d023      	beq.n	80079e0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	2b80      	cmp	r3, #128	@ 0x80
 800799c:	d020      	beq.n	80079e0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	2b40      	cmp	r3, #64	@ 0x40
 80079a2:	d01d      	beq.n	80079e0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f003 0308 	and.w	r3, r3, #8
 80079ae:	2b08      	cmp	r3, #8
 80079b0:	d116      	bne.n	80079e0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80079b2:	2300      	movs	r3, #0
 80079b4:	617b      	str	r3, [r7, #20]
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	617b      	str	r3, [r7, #20]
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	617b      	str	r3, [r7, #20]
 80079c6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80079c8:	68f8      	ldr	r0, [r7, #12]
 80079ca:	f000 f8df 	bl	8007b8c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2208      	movs	r2, #8
 80079d2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2200      	movs	r2, #0
 80079d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80079dc:	2301      	movs	r3, #1
 80079de:	e00f      	b.n	8007a00 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	681a      	ldr	r2, [r3, #0]
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	4013      	ands	r3, r2
 80079ea:	68ba      	ldr	r2, [r7, #8]
 80079ec:	429a      	cmp	r2, r3
 80079ee:	bf0c      	ite	eq
 80079f0:	2301      	moveq	r3, #1
 80079f2:	2300      	movne	r3, #0
 80079f4:	b2db      	uxtb	r3, r3
 80079f6:	461a      	mov	r2, r3
 80079f8:	79fb      	ldrb	r3, [r7, #7]
 80079fa:	429a      	cmp	r2, r3
 80079fc:	d0b4      	beq.n	8007968 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80079fe:	2300      	movs	r3, #0
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	3718      	adds	r7, #24
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}

08007a08 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b098      	sub	sp, #96	@ 0x60
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	60f8      	str	r0, [r7, #12]
 8007a10:	60b9      	str	r1, [r7, #8]
 8007a12:	4613      	mov	r3, r2
 8007a14:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007a16:	68ba      	ldr	r2, [r7, #8]
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	88fa      	ldrh	r2, [r7, #6]
 8007a20:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2200      	movs	r2, #0
 8007a26:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	2222      	movs	r2, #34	@ 0x22
 8007a2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a34:	4a3e      	ldr	r2, [pc, #248]	@ (8007b30 <UART_Start_Receive_DMA+0x128>)
 8007a36:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a3c:	4a3d      	ldr	r2, [pc, #244]	@ (8007b34 <UART_Start_Receive_DMA+0x12c>)
 8007a3e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a44:	4a3c      	ldr	r2, [pc, #240]	@ (8007b38 <UART_Start_Receive_DMA+0x130>)
 8007a46:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007a50:	f107 0308 	add.w	r3, r7, #8
 8007a54:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	3304      	adds	r3, #4
 8007a60:	4619      	mov	r1, r3
 8007a62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a64:	681a      	ldr	r2, [r3, #0]
 8007a66:	88fb      	ldrh	r3, [r7, #6]
 8007a68:	f7fc fae2 	bl	8004030 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	613b      	str	r3, [r7, #16]
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	613b      	str	r3, [r7, #16]
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	613b      	str	r3, [r7, #16]
 8007a80:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	691b      	ldr	r3, [r3, #16]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d019      	beq.n	8007abe <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	330c      	adds	r3, #12
 8007a90:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a94:	e853 3f00 	ldrex	r3, [r3]
 8007a98:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007a9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007aa0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	330c      	adds	r3, #12
 8007aa8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007aaa:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8007aac:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aae:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007ab0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007ab2:	e841 2300 	strex	r3, r2, [r1]
 8007ab6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007ab8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d1e5      	bne.n	8007a8a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	3314      	adds	r3, #20
 8007ac4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ac8:	e853 3f00 	ldrex	r3, [r3]
 8007acc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ad0:	f043 0301 	orr.w	r3, r3, #1
 8007ad4:	657b      	str	r3, [r7, #84]	@ 0x54
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	3314      	adds	r3, #20
 8007adc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007ade:	63ba      	str	r2, [r7, #56]	@ 0x38
 8007ae0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007ae4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007ae6:	e841 2300 	strex	r3, r2, [r1]
 8007aea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d1e5      	bne.n	8007abe <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	3314      	adds	r3, #20
 8007af8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007afa:	69bb      	ldr	r3, [r7, #24]
 8007afc:	e853 3f00 	ldrex	r3, [r3]
 8007b00:	617b      	str	r3, [r7, #20]
   return(result);
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b08:	653b      	str	r3, [r7, #80]	@ 0x50
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	3314      	adds	r3, #20
 8007b10:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007b12:	627a      	str	r2, [r7, #36]	@ 0x24
 8007b14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b16:	6a39      	ldr	r1, [r7, #32]
 8007b18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b1a:	e841 2300 	strex	r3, r2, [r1]
 8007b1e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b20:	69fb      	ldr	r3, [r7, #28]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d1e5      	bne.n	8007af2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8007b26:	2300      	movs	r3, #0
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3760      	adds	r7, #96	@ 0x60
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}
 8007b30:	0800775b 	.word	0x0800775b
 8007b34:	08007887 	.word	0x08007887
 8007b38:	080078c3 	.word	0x080078c3

08007b3c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b089      	sub	sp, #36	@ 0x24
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	330c      	adds	r3, #12
 8007b4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	e853 3f00 	ldrex	r3, [r3]
 8007b52:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007b5a:	61fb      	str	r3, [r7, #28]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	330c      	adds	r3, #12
 8007b62:	69fa      	ldr	r2, [r7, #28]
 8007b64:	61ba      	str	r2, [r7, #24]
 8007b66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b68:	6979      	ldr	r1, [r7, #20]
 8007b6a:	69ba      	ldr	r2, [r7, #24]
 8007b6c:	e841 2300 	strex	r3, r2, [r1]
 8007b70:	613b      	str	r3, [r7, #16]
   return(result);
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d1e5      	bne.n	8007b44 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2220      	movs	r2, #32
 8007b7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8007b80:	bf00      	nop
 8007b82:	3724      	adds	r7, #36	@ 0x24
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr

08007b8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b095      	sub	sp, #84	@ 0x54
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	330c      	adds	r3, #12
 8007b9a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b9e:	e853 3f00 	ldrex	r3, [r3]
 8007ba2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ba6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007baa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	330c      	adds	r3, #12
 8007bb2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007bb4:	643a      	str	r2, [r7, #64]	@ 0x40
 8007bb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bb8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007bba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007bbc:	e841 2300 	strex	r3, r2, [r1]
 8007bc0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d1e5      	bne.n	8007b94 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	3314      	adds	r3, #20
 8007bce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd0:	6a3b      	ldr	r3, [r7, #32]
 8007bd2:	e853 3f00 	ldrex	r3, [r3]
 8007bd6:	61fb      	str	r3, [r7, #28]
   return(result);
 8007bd8:	69fb      	ldr	r3, [r7, #28]
 8007bda:	f023 0301 	bic.w	r3, r3, #1
 8007bde:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	3314      	adds	r3, #20
 8007be6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007be8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007bea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007bee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007bf0:	e841 2300 	strex	r3, r2, [r1]
 8007bf4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d1e5      	bne.n	8007bc8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d119      	bne.n	8007c38 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	330c      	adds	r3, #12
 8007c0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	e853 3f00 	ldrex	r3, [r3]
 8007c12:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	f023 0310 	bic.w	r3, r3, #16
 8007c1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	330c      	adds	r3, #12
 8007c22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007c24:	61ba      	str	r2, [r7, #24]
 8007c26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c28:	6979      	ldr	r1, [r7, #20]
 8007c2a:	69ba      	ldr	r2, [r7, #24]
 8007c2c:	e841 2300 	strex	r3, r2, [r1]
 8007c30:	613b      	str	r3, [r7, #16]
   return(result);
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d1e5      	bne.n	8007c04 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2220      	movs	r2, #32
 8007c3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2200      	movs	r2, #0
 8007c44:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007c46:	bf00      	nop
 8007c48:	3754      	adds	r7, #84	@ 0x54
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c50:	4770      	bx	lr

08007c52 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007c52:	b580      	push	{r7, lr}
 8007c54:	b084      	sub	sp, #16
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c5e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	2200      	movs	r2, #0
 8007c64:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007c6c:	68f8      	ldr	r0, [r7, #12]
 8007c6e:	f7ff fd03 	bl	8007678 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c72:	bf00      	nop
 8007c74:	3710      	adds	r7, #16
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}

08007c7a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007c7a:	b480      	push	{r7}
 8007c7c:	b085      	sub	sp, #20
 8007c7e:	af00      	add	r7, sp, #0
 8007c80:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c88:	b2db      	uxtb	r3, r3
 8007c8a:	2b21      	cmp	r3, #33	@ 0x21
 8007c8c:	d13e      	bne.n	8007d0c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	689b      	ldr	r3, [r3, #8]
 8007c92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c96:	d114      	bne.n	8007cc2 <UART_Transmit_IT+0x48>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	691b      	ldr	r3, [r3, #16]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d110      	bne.n	8007cc2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6a1b      	ldr	r3, [r3, #32]
 8007ca4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	881b      	ldrh	r3, [r3, #0]
 8007caa:	461a      	mov	r2, r3
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007cb4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6a1b      	ldr	r3, [r3, #32]
 8007cba:	1c9a      	adds	r2, r3, #2
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	621a      	str	r2, [r3, #32]
 8007cc0:	e008      	b.n	8007cd4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6a1b      	ldr	r3, [r3, #32]
 8007cc6:	1c59      	adds	r1, r3, #1
 8007cc8:	687a      	ldr	r2, [r7, #4]
 8007cca:	6211      	str	r1, [r2, #32]
 8007ccc:	781a      	ldrb	r2, [r3, #0]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007cd8:	b29b      	uxth	r3, r3
 8007cda:	3b01      	subs	r3, #1
 8007cdc:	b29b      	uxth	r3, r3
 8007cde:	687a      	ldr	r2, [r7, #4]
 8007ce0:	4619      	mov	r1, r3
 8007ce2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d10f      	bne.n	8007d08 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	68da      	ldr	r2, [r3, #12]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007cf6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	68da      	ldr	r2, [r3, #12]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007d06:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	e000      	b.n	8007d0e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007d0c:	2302      	movs	r3, #2
  }
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3714      	adds	r7, #20
 8007d12:	46bd      	mov	sp, r7
 8007d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d18:	4770      	bx	lr

08007d1a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007d1a:	b580      	push	{r7, lr}
 8007d1c:	b082      	sub	sp, #8
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	68da      	ldr	r2, [r3, #12]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007d30:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2220      	movs	r2, #32
 8007d36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f7ff fc74 	bl	8007628 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007d40:	2300      	movs	r3, #0
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3708      	adds	r7, #8
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}

08007d4a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007d4a:	b580      	push	{r7, lr}
 8007d4c:	b08c      	sub	sp, #48	@ 0x30
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007d58:	b2db      	uxtb	r3, r3
 8007d5a:	2b22      	cmp	r3, #34	@ 0x22
 8007d5c:	f040 80ae 	bne.w	8007ebc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	689b      	ldr	r3, [r3, #8]
 8007d64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d68:	d117      	bne.n	8007d9a <UART_Receive_IT+0x50>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	691b      	ldr	r3, [r3, #16]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d113      	bne.n	8007d9a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007d72:	2300      	movs	r3, #0
 8007d74:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d7a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	b29b      	uxth	r3, r3
 8007d84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d88:	b29a      	uxth	r2, r3
 8007d8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d8c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d92:	1c9a      	adds	r2, r3, #2
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	629a      	str	r2, [r3, #40]	@ 0x28
 8007d98:	e026      	b.n	8007de8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007da0:	2300      	movs	r3, #0
 8007da2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	689b      	ldr	r3, [r3, #8]
 8007da8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007dac:	d007      	beq.n	8007dbe <UART_Receive_IT+0x74>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	689b      	ldr	r3, [r3, #8]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d10a      	bne.n	8007dcc <UART_Receive_IT+0x82>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	691b      	ldr	r3, [r3, #16]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d106      	bne.n	8007dcc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	b2da      	uxtb	r2, r3
 8007dc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dc8:	701a      	strb	r2, [r3, #0]
 8007dca:	e008      	b.n	8007dde <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	685b      	ldr	r3, [r3, #4]
 8007dd2:	b2db      	uxtb	r3, r3
 8007dd4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007dd8:	b2da      	uxtb	r2, r3
 8007dda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ddc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007de2:	1c5a      	adds	r2, r3, #1
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007dec:	b29b      	uxth	r3, r3
 8007dee:	3b01      	subs	r3, #1
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	687a      	ldr	r2, [r7, #4]
 8007df4:	4619      	mov	r1, r3
 8007df6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d15d      	bne.n	8007eb8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	68da      	ldr	r2, [r3, #12]
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f022 0220 	bic.w	r2, r2, #32
 8007e0a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	68da      	ldr	r2, [r3, #12]
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007e1a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	695a      	ldr	r2, [r3, #20]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f022 0201 	bic.w	r2, r2, #1
 8007e2a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2220      	movs	r2, #32
 8007e30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2200      	movs	r2, #0
 8007e38:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e3e:	2b01      	cmp	r3, #1
 8007e40:	d135      	bne.n	8007eae <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2200      	movs	r2, #0
 8007e46:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	330c      	adds	r3, #12
 8007e4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	e853 3f00 	ldrex	r3, [r3]
 8007e56:	613b      	str	r3, [r7, #16]
   return(result);
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	f023 0310 	bic.w	r3, r3, #16
 8007e5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	330c      	adds	r3, #12
 8007e66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e68:	623a      	str	r2, [r7, #32]
 8007e6a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e6c:	69f9      	ldr	r1, [r7, #28]
 8007e6e:	6a3a      	ldr	r2, [r7, #32]
 8007e70:	e841 2300 	strex	r3, r2, [r1]
 8007e74:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e76:	69bb      	ldr	r3, [r7, #24]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d1e5      	bne.n	8007e48 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f003 0310 	and.w	r3, r3, #16
 8007e86:	2b10      	cmp	r3, #16
 8007e88:	d10a      	bne.n	8007ea0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	60fb      	str	r3, [r7, #12]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	60fb      	str	r3, [r7, #12]
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	685b      	ldr	r3, [r3, #4]
 8007e9c:	60fb      	str	r3, [r7, #12]
 8007e9e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007ea4:	4619      	mov	r1, r3
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f7ff fbf0 	bl	800768c <HAL_UARTEx_RxEventCallback>
 8007eac:	e002      	b.n	8007eb4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f7ff fbce 	bl	8007650 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	e002      	b.n	8007ebe <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	e000      	b.n	8007ebe <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007ebc:	2302      	movs	r3, #2
  }
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3730      	adds	r7, #48	@ 0x30
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}
	...

08007ec8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ec8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ecc:	b0c0      	sub	sp, #256	@ 0x100
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	691b      	ldr	r3, [r3, #16]
 8007edc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ee4:	68d9      	ldr	r1, [r3, #12]
 8007ee6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007eea:	681a      	ldr	r2, [r3, #0]
 8007eec:	ea40 0301 	orr.w	r3, r0, r1
 8007ef0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ef6:	689a      	ldr	r2, [r3, #8]
 8007ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007efc:	691b      	ldr	r3, [r3, #16]
 8007efe:	431a      	orrs	r2, r3
 8007f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f04:	695b      	ldr	r3, [r3, #20]
 8007f06:	431a      	orrs	r2, r3
 8007f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f0c:	69db      	ldr	r3, [r3, #28]
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	68db      	ldr	r3, [r3, #12]
 8007f1c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007f20:	f021 010c 	bic.w	r1, r1, #12
 8007f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f28:	681a      	ldr	r2, [r3, #0]
 8007f2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007f2e:	430b      	orrs	r3, r1
 8007f30:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007f32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	695b      	ldr	r3, [r3, #20]
 8007f3a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007f3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f42:	6999      	ldr	r1, [r3, #24]
 8007f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f48:	681a      	ldr	r2, [r3, #0]
 8007f4a:	ea40 0301 	orr.w	r3, r0, r1
 8007f4e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f54:	681a      	ldr	r2, [r3, #0]
 8007f56:	4b8f      	ldr	r3, [pc, #572]	@ (8008194 <UART_SetConfig+0x2cc>)
 8007f58:	429a      	cmp	r2, r3
 8007f5a:	d005      	beq.n	8007f68 <UART_SetConfig+0xa0>
 8007f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f60:	681a      	ldr	r2, [r3, #0]
 8007f62:	4b8d      	ldr	r3, [pc, #564]	@ (8008198 <UART_SetConfig+0x2d0>)
 8007f64:	429a      	cmp	r2, r3
 8007f66:	d104      	bne.n	8007f72 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007f68:	f7fc fed2 	bl	8004d10 <HAL_RCC_GetPCLK2Freq>
 8007f6c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007f70:	e003      	b.n	8007f7a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007f72:	f7fc feb9 	bl	8004ce8 <HAL_RCC_GetPCLK1Freq>
 8007f76:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f7e:	69db      	ldr	r3, [r3, #28]
 8007f80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f84:	f040 810c 	bne.w	80081a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007f88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007f92:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007f96:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007f9a:	4622      	mov	r2, r4
 8007f9c:	462b      	mov	r3, r5
 8007f9e:	1891      	adds	r1, r2, r2
 8007fa0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007fa2:	415b      	adcs	r3, r3
 8007fa4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007fa6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007faa:	4621      	mov	r1, r4
 8007fac:	eb12 0801 	adds.w	r8, r2, r1
 8007fb0:	4629      	mov	r1, r5
 8007fb2:	eb43 0901 	adc.w	r9, r3, r1
 8007fb6:	f04f 0200 	mov.w	r2, #0
 8007fba:	f04f 0300 	mov.w	r3, #0
 8007fbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007fc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007fc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007fca:	4690      	mov	r8, r2
 8007fcc:	4699      	mov	r9, r3
 8007fce:	4623      	mov	r3, r4
 8007fd0:	eb18 0303 	adds.w	r3, r8, r3
 8007fd4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007fd8:	462b      	mov	r3, r5
 8007fda:	eb49 0303 	adc.w	r3, r9, r3
 8007fde:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fe6:	685b      	ldr	r3, [r3, #4]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007fee:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007ff2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007ff6:	460b      	mov	r3, r1
 8007ff8:	18db      	adds	r3, r3, r3
 8007ffa:	653b      	str	r3, [r7, #80]	@ 0x50
 8007ffc:	4613      	mov	r3, r2
 8007ffe:	eb42 0303 	adc.w	r3, r2, r3
 8008002:	657b      	str	r3, [r7, #84]	@ 0x54
 8008004:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008008:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800800c:	f7f8 fe4c 	bl	8000ca8 <__aeabi_uldivmod>
 8008010:	4602      	mov	r2, r0
 8008012:	460b      	mov	r3, r1
 8008014:	4b61      	ldr	r3, [pc, #388]	@ (800819c <UART_SetConfig+0x2d4>)
 8008016:	fba3 2302 	umull	r2, r3, r3, r2
 800801a:	095b      	lsrs	r3, r3, #5
 800801c:	011c      	lsls	r4, r3, #4
 800801e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008022:	2200      	movs	r2, #0
 8008024:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008028:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800802c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008030:	4642      	mov	r2, r8
 8008032:	464b      	mov	r3, r9
 8008034:	1891      	adds	r1, r2, r2
 8008036:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008038:	415b      	adcs	r3, r3
 800803a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800803c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008040:	4641      	mov	r1, r8
 8008042:	eb12 0a01 	adds.w	sl, r2, r1
 8008046:	4649      	mov	r1, r9
 8008048:	eb43 0b01 	adc.w	fp, r3, r1
 800804c:	f04f 0200 	mov.w	r2, #0
 8008050:	f04f 0300 	mov.w	r3, #0
 8008054:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008058:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800805c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008060:	4692      	mov	sl, r2
 8008062:	469b      	mov	fp, r3
 8008064:	4643      	mov	r3, r8
 8008066:	eb1a 0303 	adds.w	r3, sl, r3
 800806a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800806e:	464b      	mov	r3, r9
 8008070:	eb4b 0303 	adc.w	r3, fp, r3
 8008074:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	2200      	movs	r2, #0
 8008080:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008084:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008088:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800808c:	460b      	mov	r3, r1
 800808e:	18db      	adds	r3, r3, r3
 8008090:	643b      	str	r3, [r7, #64]	@ 0x40
 8008092:	4613      	mov	r3, r2
 8008094:	eb42 0303 	adc.w	r3, r2, r3
 8008098:	647b      	str	r3, [r7, #68]	@ 0x44
 800809a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800809e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80080a2:	f7f8 fe01 	bl	8000ca8 <__aeabi_uldivmod>
 80080a6:	4602      	mov	r2, r0
 80080a8:	460b      	mov	r3, r1
 80080aa:	4611      	mov	r1, r2
 80080ac:	4b3b      	ldr	r3, [pc, #236]	@ (800819c <UART_SetConfig+0x2d4>)
 80080ae:	fba3 2301 	umull	r2, r3, r3, r1
 80080b2:	095b      	lsrs	r3, r3, #5
 80080b4:	2264      	movs	r2, #100	@ 0x64
 80080b6:	fb02 f303 	mul.w	r3, r2, r3
 80080ba:	1acb      	subs	r3, r1, r3
 80080bc:	00db      	lsls	r3, r3, #3
 80080be:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80080c2:	4b36      	ldr	r3, [pc, #216]	@ (800819c <UART_SetConfig+0x2d4>)
 80080c4:	fba3 2302 	umull	r2, r3, r3, r2
 80080c8:	095b      	lsrs	r3, r3, #5
 80080ca:	005b      	lsls	r3, r3, #1
 80080cc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80080d0:	441c      	add	r4, r3
 80080d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80080d6:	2200      	movs	r2, #0
 80080d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80080dc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80080e0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80080e4:	4642      	mov	r2, r8
 80080e6:	464b      	mov	r3, r9
 80080e8:	1891      	adds	r1, r2, r2
 80080ea:	63b9      	str	r1, [r7, #56]	@ 0x38
 80080ec:	415b      	adcs	r3, r3
 80080ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80080f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80080f4:	4641      	mov	r1, r8
 80080f6:	1851      	adds	r1, r2, r1
 80080f8:	6339      	str	r1, [r7, #48]	@ 0x30
 80080fa:	4649      	mov	r1, r9
 80080fc:	414b      	adcs	r3, r1
 80080fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8008100:	f04f 0200 	mov.w	r2, #0
 8008104:	f04f 0300 	mov.w	r3, #0
 8008108:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800810c:	4659      	mov	r1, fp
 800810e:	00cb      	lsls	r3, r1, #3
 8008110:	4651      	mov	r1, sl
 8008112:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008116:	4651      	mov	r1, sl
 8008118:	00ca      	lsls	r2, r1, #3
 800811a:	4610      	mov	r0, r2
 800811c:	4619      	mov	r1, r3
 800811e:	4603      	mov	r3, r0
 8008120:	4642      	mov	r2, r8
 8008122:	189b      	adds	r3, r3, r2
 8008124:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008128:	464b      	mov	r3, r9
 800812a:	460a      	mov	r2, r1
 800812c:	eb42 0303 	adc.w	r3, r2, r3
 8008130:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008138:	685b      	ldr	r3, [r3, #4]
 800813a:	2200      	movs	r2, #0
 800813c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008140:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008144:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008148:	460b      	mov	r3, r1
 800814a:	18db      	adds	r3, r3, r3
 800814c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800814e:	4613      	mov	r3, r2
 8008150:	eb42 0303 	adc.w	r3, r2, r3
 8008154:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008156:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800815a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800815e:	f7f8 fda3 	bl	8000ca8 <__aeabi_uldivmod>
 8008162:	4602      	mov	r2, r0
 8008164:	460b      	mov	r3, r1
 8008166:	4b0d      	ldr	r3, [pc, #52]	@ (800819c <UART_SetConfig+0x2d4>)
 8008168:	fba3 1302 	umull	r1, r3, r3, r2
 800816c:	095b      	lsrs	r3, r3, #5
 800816e:	2164      	movs	r1, #100	@ 0x64
 8008170:	fb01 f303 	mul.w	r3, r1, r3
 8008174:	1ad3      	subs	r3, r2, r3
 8008176:	00db      	lsls	r3, r3, #3
 8008178:	3332      	adds	r3, #50	@ 0x32
 800817a:	4a08      	ldr	r2, [pc, #32]	@ (800819c <UART_SetConfig+0x2d4>)
 800817c:	fba2 2303 	umull	r2, r3, r2, r3
 8008180:	095b      	lsrs	r3, r3, #5
 8008182:	f003 0207 	and.w	r2, r3, #7
 8008186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	4422      	add	r2, r4
 800818e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008190:	e106      	b.n	80083a0 <UART_SetConfig+0x4d8>
 8008192:	bf00      	nop
 8008194:	40011000 	.word	0x40011000
 8008198:	40011400 	.word	0x40011400
 800819c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80081a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80081a4:	2200      	movs	r2, #0
 80081a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80081aa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80081ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80081b2:	4642      	mov	r2, r8
 80081b4:	464b      	mov	r3, r9
 80081b6:	1891      	adds	r1, r2, r2
 80081b8:	6239      	str	r1, [r7, #32]
 80081ba:	415b      	adcs	r3, r3
 80081bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80081be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80081c2:	4641      	mov	r1, r8
 80081c4:	1854      	adds	r4, r2, r1
 80081c6:	4649      	mov	r1, r9
 80081c8:	eb43 0501 	adc.w	r5, r3, r1
 80081cc:	f04f 0200 	mov.w	r2, #0
 80081d0:	f04f 0300 	mov.w	r3, #0
 80081d4:	00eb      	lsls	r3, r5, #3
 80081d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80081da:	00e2      	lsls	r2, r4, #3
 80081dc:	4614      	mov	r4, r2
 80081de:	461d      	mov	r5, r3
 80081e0:	4643      	mov	r3, r8
 80081e2:	18e3      	adds	r3, r4, r3
 80081e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80081e8:	464b      	mov	r3, r9
 80081ea:	eb45 0303 	adc.w	r3, r5, r3
 80081ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80081f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	2200      	movs	r2, #0
 80081fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80081fe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008202:	f04f 0200 	mov.w	r2, #0
 8008206:	f04f 0300 	mov.w	r3, #0
 800820a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800820e:	4629      	mov	r1, r5
 8008210:	008b      	lsls	r3, r1, #2
 8008212:	4621      	mov	r1, r4
 8008214:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008218:	4621      	mov	r1, r4
 800821a:	008a      	lsls	r2, r1, #2
 800821c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008220:	f7f8 fd42 	bl	8000ca8 <__aeabi_uldivmod>
 8008224:	4602      	mov	r2, r0
 8008226:	460b      	mov	r3, r1
 8008228:	4b60      	ldr	r3, [pc, #384]	@ (80083ac <UART_SetConfig+0x4e4>)
 800822a:	fba3 2302 	umull	r2, r3, r3, r2
 800822e:	095b      	lsrs	r3, r3, #5
 8008230:	011c      	lsls	r4, r3, #4
 8008232:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008236:	2200      	movs	r2, #0
 8008238:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800823c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008240:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008244:	4642      	mov	r2, r8
 8008246:	464b      	mov	r3, r9
 8008248:	1891      	adds	r1, r2, r2
 800824a:	61b9      	str	r1, [r7, #24]
 800824c:	415b      	adcs	r3, r3
 800824e:	61fb      	str	r3, [r7, #28]
 8008250:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008254:	4641      	mov	r1, r8
 8008256:	1851      	adds	r1, r2, r1
 8008258:	6139      	str	r1, [r7, #16]
 800825a:	4649      	mov	r1, r9
 800825c:	414b      	adcs	r3, r1
 800825e:	617b      	str	r3, [r7, #20]
 8008260:	f04f 0200 	mov.w	r2, #0
 8008264:	f04f 0300 	mov.w	r3, #0
 8008268:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800826c:	4659      	mov	r1, fp
 800826e:	00cb      	lsls	r3, r1, #3
 8008270:	4651      	mov	r1, sl
 8008272:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008276:	4651      	mov	r1, sl
 8008278:	00ca      	lsls	r2, r1, #3
 800827a:	4610      	mov	r0, r2
 800827c:	4619      	mov	r1, r3
 800827e:	4603      	mov	r3, r0
 8008280:	4642      	mov	r2, r8
 8008282:	189b      	adds	r3, r3, r2
 8008284:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008288:	464b      	mov	r3, r9
 800828a:	460a      	mov	r2, r1
 800828c:	eb42 0303 	adc.w	r3, r2, r3
 8008290:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	2200      	movs	r2, #0
 800829c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800829e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80082a0:	f04f 0200 	mov.w	r2, #0
 80082a4:	f04f 0300 	mov.w	r3, #0
 80082a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80082ac:	4649      	mov	r1, r9
 80082ae:	008b      	lsls	r3, r1, #2
 80082b0:	4641      	mov	r1, r8
 80082b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80082b6:	4641      	mov	r1, r8
 80082b8:	008a      	lsls	r2, r1, #2
 80082ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80082be:	f7f8 fcf3 	bl	8000ca8 <__aeabi_uldivmod>
 80082c2:	4602      	mov	r2, r0
 80082c4:	460b      	mov	r3, r1
 80082c6:	4611      	mov	r1, r2
 80082c8:	4b38      	ldr	r3, [pc, #224]	@ (80083ac <UART_SetConfig+0x4e4>)
 80082ca:	fba3 2301 	umull	r2, r3, r3, r1
 80082ce:	095b      	lsrs	r3, r3, #5
 80082d0:	2264      	movs	r2, #100	@ 0x64
 80082d2:	fb02 f303 	mul.w	r3, r2, r3
 80082d6:	1acb      	subs	r3, r1, r3
 80082d8:	011b      	lsls	r3, r3, #4
 80082da:	3332      	adds	r3, #50	@ 0x32
 80082dc:	4a33      	ldr	r2, [pc, #204]	@ (80083ac <UART_SetConfig+0x4e4>)
 80082de:	fba2 2303 	umull	r2, r3, r2, r3
 80082e2:	095b      	lsrs	r3, r3, #5
 80082e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80082e8:	441c      	add	r4, r3
 80082ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80082ee:	2200      	movs	r2, #0
 80082f0:	673b      	str	r3, [r7, #112]	@ 0x70
 80082f2:	677a      	str	r2, [r7, #116]	@ 0x74
 80082f4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80082f8:	4642      	mov	r2, r8
 80082fa:	464b      	mov	r3, r9
 80082fc:	1891      	adds	r1, r2, r2
 80082fe:	60b9      	str	r1, [r7, #8]
 8008300:	415b      	adcs	r3, r3
 8008302:	60fb      	str	r3, [r7, #12]
 8008304:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008308:	4641      	mov	r1, r8
 800830a:	1851      	adds	r1, r2, r1
 800830c:	6039      	str	r1, [r7, #0]
 800830e:	4649      	mov	r1, r9
 8008310:	414b      	adcs	r3, r1
 8008312:	607b      	str	r3, [r7, #4]
 8008314:	f04f 0200 	mov.w	r2, #0
 8008318:	f04f 0300 	mov.w	r3, #0
 800831c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008320:	4659      	mov	r1, fp
 8008322:	00cb      	lsls	r3, r1, #3
 8008324:	4651      	mov	r1, sl
 8008326:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800832a:	4651      	mov	r1, sl
 800832c:	00ca      	lsls	r2, r1, #3
 800832e:	4610      	mov	r0, r2
 8008330:	4619      	mov	r1, r3
 8008332:	4603      	mov	r3, r0
 8008334:	4642      	mov	r2, r8
 8008336:	189b      	adds	r3, r3, r2
 8008338:	66bb      	str	r3, [r7, #104]	@ 0x68
 800833a:	464b      	mov	r3, r9
 800833c:	460a      	mov	r2, r1
 800833e:	eb42 0303 	adc.w	r3, r2, r3
 8008342:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008348:	685b      	ldr	r3, [r3, #4]
 800834a:	2200      	movs	r2, #0
 800834c:	663b      	str	r3, [r7, #96]	@ 0x60
 800834e:	667a      	str	r2, [r7, #100]	@ 0x64
 8008350:	f04f 0200 	mov.w	r2, #0
 8008354:	f04f 0300 	mov.w	r3, #0
 8008358:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800835c:	4649      	mov	r1, r9
 800835e:	008b      	lsls	r3, r1, #2
 8008360:	4641      	mov	r1, r8
 8008362:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008366:	4641      	mov	r1, r8
 8008368:	008a      	lsls	r2, r1, #2
 800836a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800836e:	f7f8 fc9b 	bl	8000ca8 <__aeabi_uldivmod>
 8008372:	4602      	mov	r2, r0
 8008374:	460b      	mov	r3, r1
 8008376:	4b0d      	ldr	r3, [pc, #52]	@ (80083ac <UART_SetConfig+0x4e4>)
 8008378:	fba3 1302 	umull	r1, r3, r3, r2
 800837c:	095b      	lsrs	r3, r3, #5
 800837e:	2164      	movs	r1, #100	@ 0x64
 8008380:	fb01 f303 	mul.w	r3, r1, r3
 8008384:	1ad3      	subs	r3, r2, r3
 8008386:	011b      	lsls	r3, r3, #4
 8008388:	3332      	adds	r3, #50	@ 0x32
 800838a:	4a08      	ldr	r2, [pc, #32]	@ (80083ac <UART_SetConfig+0x4e4>)
 800838c:	fba2 2303 	umull	r2, r3, r2, r3
 8008390:	095b      	lsrs	r3, r3, #5
 8008392:	f003 020f 	and.w	r2, r3, #15
 8008396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4422      	add	r2, r4
 800839e:	609a      	str	r2, [r3, #8]
}
 80083a0:	bf00      	nop
 80083a2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80083a6:	46bd      	mov	sp, r7
 80083a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80083ac:	51eb851f 	.word	0x51eb851f

080083b0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b085      	sub	sp, #20
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	4603      	mov	r3, r0
 80083b8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80083ba:	2300      	movs	r3, #0
 80083bc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80083be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80083c2:	2b84      	cmp	r3, #132	@ 0x84
 80083c4:	d005      	beq.n	80083d2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80083c6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	4413      	add	r3, r2
 80083ce:	3303      	adds	r3, #3
 80083d0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80083d2:	68fb      	ldr	r3, [r7, #12]
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3714      	adds	r7, #20
 80083d8:	46bd      	mov	sp, r7
 80083da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083de:	4770      	bx	lr

080083e0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80083e0:	b480      	push	{r7}
 80083e2:	b083      	sub	sp, #12
 80083e4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80083e6:	f3ef 8305 	mrs	r3, IPSR
 80083ea:	607b      	str	r3, [r7, #4]
  return(result);
 80083ec:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	bf14      	ite	ne
 80083f2:	2301      	movne	r3, #1
 80083f4:	2300      	moveq	r3, #0
 80083f6:	b2db      	uxtb	r3, r3
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	370c      	adds	r7, #12
 80083fc:	46bd      	mov	sp, r7
 80083fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008402:	4770      	bx	lr

08008404 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008408:	f000 fcae 	bl	8008d68 <vTaskStartScheduler>
  
  return osOK;
 800840c:	2300      	movs	r3, #0
}
 800840e:	4618      	mov	r0, r3
 8008410:	bd80      	pop	{r7, pc}

08008412 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008412:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008414:	b089      	sub	sp, #36	@ 0x24
 8008416:	af04      	add	r7, sp, #16
 8008418:	6078      	str	r0, [r7, #4]
 800841a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	695b      	ldr	r3, [r3, #20]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d020      	beq.n	8008466 <osThreadCreate+0x54>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	699b      	ldr	r3, [r3, #24]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d01c      	beq.n	8008466 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	685c      	ldr	r4, [r3, #4]
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	691e      	ldr	r6, [r3, #16]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800843e:	4618      	mov	r0, r3
 8008440:	f7ff ffb6 	bl	80083b0 <makeFreeRtosPriority>
 8008444:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	695b      	ldr	r3, [r3, #20]
 800844a:	687a      	ldr	r2, [r7, #4]
 800844c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800844e:	9202      	str	r2, [sp, #8]
 8008450:	9301      	str	r3, [sp, #4]
 8008452:	9100      	str	r1, [sp, #0]
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	4632      	mov	r2, r6
 8008458:	4629      	mov	r1, r5
 800845a:	4620      	mov	r0, r4
 800845c:	f000 f97a 	bl	8008754 <xTaskCreateStatic>
 8008460:	4603      	mov	r3, r0
 8008462:	60fb      	str	r3, [r7, #12]
 8008464:	e01c      	b.n	80084a0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	685c      	ldr	r4, [r3, #4]
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008472:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800847a:	4618      	mov	r0, r3
 800847c:	f7ff ff98 	bl	80083b0 <makeFreeRtosPriority>
 8008480:	4602      	mov	r2, r0
 8008482:	f107 030c 	add.w	r3, r7, #12
 8008486:	9301      	str	r3, [sp, #4]
 8008488:	9200      	str	r2, [sp, #0]
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	4632      	mov	r2, r6
 800848e:	4629      	mov	r1, r5
 8008490:	4620      	mov	r0, r4
 8008492:	f000 f9bf 	bl	8008814 <xTaskCreate>
 8008496:	4603      	mov	r3, r0
 8008498:	2b01      	cmp	r3, #1
 800849a:	d001      	beq.n	80084a0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800849c:	2300      	movs	r3, #0
 800849e:	e000      	b.n	80084a2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80084a0:	68fb      	ldr	r3, [r7, #12]
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3714      	adds	r7, #20
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080084aa <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80084aa:	b580      	push	{r7, lr}
 80084ac:	b084      	sub	sp, #16
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d001      	beq.n	80084c0 <osDelay+0x16>
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	e000      	b.n	80084c2 <osDelay+0x18>
 80084c0:	2301      	movs	r3, #1
 80084c2:	4618      	mov	r0, r3
 80084c4:	f000 faf6 	bl	8008ab4 <vTaskDelay>
  
  return osOK;
 80084c8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	3710      	adds	r7, #16
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}
	...

080084d4 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b086      	sub	sp, #24
 80084d8:	af02      	add	r7, sp, #8
 80084da:	6078      	str	r0, [r7, #4]
 80084dc:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80084de:	2300      	movs	r3, #0
 80084e0:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 80084e2:	2300      	movs	r3, #0
 80084e4:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 80084e6:	f7ff ff7b 	bl	80083e0 <inHandlerMode>
 80084ea:	4603      	mov	r3, r0
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d01c      	beq.n	800852a <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 80084f0:	6839      	ldr	r1, [r7, #0]
 80084f2:	f107 0208 	add.w	r2, r7, #8
 80084f6:	f107 030c 	add.w	r3, r7, #12
 80084fa:	9300      	str	r3, [sp, #0]
 80084fc:	4613      	mov	r3, r2
 80084fe:	2201      	movs	r2, #1
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f001 f88b 	bl	800961c <xTaskGenericNotifyFromISR>
 8008506:	4603      	mov	r3, r0
 8008508:	2b01      	cmp	r3, #1
 800850a:	d002      	beq.n	8008512 <osSignalSet+0x3e>
      return 0x80000000;
 800850c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008510:	e019      	b.n	8008546 <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d015      	beq.n	8008544 <osSignalSet+0x70>
 8008518:	4b0d      	ldr	r3, [pc, #52]	@ (8008550 <osSignalSet+0x7c>)
 800851a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800851e:	601a      	str	r2, [r3, #0]
 8008520:	f3bf 8f4f 	dsb	sy
 8008524:	f3bf 8f6f 	isb	sy
 8008528:	e00c      	b.n	8008544 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 800852a:	6839      	ldr	r1, [r7, #0]
 800852c:	f107 0308 	add.w	r3, r7, #8
 8008530:	2201      	movs	r2, #1
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f000 ffb0 	bl	8009498 <xTaskGenericNotify>
 8008538:	4603      	mov	r3, r0
 800853a:	2b01      	cmp	r3, #1
 800853c:	d002      	beq.n	8008544 <osSignalSet+0x70>
    return 0x80000000;
 800853e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008542:	e000      	b.n	8008546 <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 8008544:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 8008546:	4618      	mov	r0, r3
 8008548:	3710      	adds	r7, #16
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}
 800854e:	bf00      	nop
 8008550:	e000ed04 	.word	0xe000ed04

08008554 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8008554:	b590      	push	{r4, r7, lr}
 8008556:	b089      	sub	sp, #36	@ 0x24
 8008558:	af00      	add	r7, sp, #0
 800855a:	60f8      	str	r0, [r7, #12]
 800855c:	60b9      	str	r1, [r7, #8]
 800855e:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8008560:	2300      	movs	r3, #0
 8008562:	617b      	str	r3, [r7, #20]
  ticks = 0;
 8008564:	2300      	movs	r3, #0
 8008566:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800856e:	d103      	bne.n	8008578 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 8008570:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008574:	61fb      	str	r3, [r7, #28]
 8008576:	e009      	b.n	800858c <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d006      	beq.n	800858c <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 8008582:	69fb      	ldr	r3, [r7, #28]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d101      	bne.n	800858c <osSignalWait+0x38>
      ticks = 1;
 8008588:	2301      	movs	r3, #1
 800858a:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 800858c:	f7ff ff28 	bl	80083e0 <inHandlerMode>
 8008590:	4603      	mov	r3, r0
 8008592:	2b00      	cmp	r3, #0
 8008594:	d002      	beq.n	800859c <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 8008596:	2382      	movs	r3, #130	@ 0x82
 8008598:	613b      	str	r3, [r7, #16]
 800859a:	e01b      	b.n	80085d4 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 800859c:	68b9      	ldr	r1, [r7, #8]
 800859e:	f107 0310 	add.w	r3, r7, #16
 80085a2:	1d1a      	adds	r2, r3, #4
 80085a4:	69fb      	ldr	r3, [r7, #28]
 80085a6:	2000      	movs	r0, #0
 80085a8:	f000 ff16 	bl	80093d8 <xTaskNotifyWait>
 80085ac:	4603      	mov	r3, r0
 80085ae:	2b01      	cmp	r3, #1
 80085b0:	d008      	beq.n	80085c4 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 80085b2:	69fb      	ldr	r3, [r7, #28]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d102      	bne.n	80085be <osSignalWait+0x6a>
 80085b8:	2300      	movs	r3, #0
 80085ba:	613b      	str	r3, [r7, #16]
 80085bc:	e00a      	b.n	80085d4 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 80085be:	2340      	movs	r3, #64	@ 0x40
 80085c0:	613b      	str	r3, [r7, #16]
 80085c2:	e007      	b.n	80085d4 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	da02      	bge.n	80085d0 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 80085ca:	2386      	movs	r3, #134	@ 0x86
 80085cc:	613b      	str	r3, [r7, #16]
 80085ce:	e001      	b.n	80085d4 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 80085d0:	2308      	movs	r3, #8
 80085d2:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	461c      	mov	r4, r3
 80085d8:	f107 0310 	add.w	r3, r7, #16
 80085dc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80085e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80085e4:	68f8      	ldr	r0, [r7, #12]
 80085e6:	3724      	adds	r7, #36	@ 0x24
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd90      	pop	{r4, r7, pc}

080085ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80085ec:	b480      	push	{r7}
 80085ee:	b083      	sub	sp, #12
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f103 0208 	add.w	r2, r3, #8
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008604:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f103 0208 	add.w	r2, r3, #8
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f103 0208 	add.w	r2, r3, #8
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2200      	movs	r2, #0
 800861e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008620:	bf00      	nop
 8008622:	370c      	adds	r7, #12
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr

0800862c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800862c:	b480      	push	{r7}
 800862e:	b083      	sub	sp, #12
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2200      	movs	r2, #0
 8008638:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800863a:	bf00      	nop
 800863c:	370c      	adds	r7, #12
 800863e:	46bd      	mov	sp, r7
 8008640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008644:	4770      	bx	lr

08008646 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008646:	b480      	push	{r7}
 8008648:	b085      	sub	sp, #20
 800864a:	af00      	add	r7, sp, #0
 800864c:	6078      	str	r0, [r7, #4]
 800864e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	68fa      	ldr	r2, [r7, #12]
 800865a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	689a      	ldr	r2, [r3, #8]
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	689b      	ldr	r3, [r3, #8]
 8008668:	683a      	ldr	r2, [r7, #0]
 800866a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	683a      	ldr	r2, [r7, #0]
 8008670:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	687a      	ldr	r2, [r7, #4]
 8008676:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	1c5a      	adds	r2, r3, #1
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	601a      	str	r2, [r3, #0]
}
 8008682:	bf00      	nop
 8008684:	3714      	adds	r7, #20
 8008686:	46bd      	mov	sp, r7
 8008688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868c:	4770      	bx	lr

0800868e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800868e:	b480      	push	{r7}
 8008690:	b085      	sub	sp, #20
 8008692:	af00      	add	r7, sp, #0
 8008694:	6078      	str	r0, [r7, #4]
 8008696:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80086a4:	d103      	bne.n	80086ae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	691b      	ldr	r3, [r3, #16]
 80086aa:	60fb      	str	r3, [r7, #12]
 80086ac:	e00c      	b.n	80086c8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	3308      	adds	r3, #8
 80086b2:	60fb      	str	r3, [r7, #12]
 80086b4:	e002      	b.n	80086bc <vListInsert+0x2e>
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	685b      	ldr	r3, [r3, #4]
 80086ba:	60fb      	str	r3, [r7, #12]
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	685b      	ldr	r3, [r3, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	68ba      	ldr	r2, [r7, #8]
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d2f6      	bcs.n	80086b6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	685a      	ldr	r2, [r3, #4]
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	683a      	ldr	r2, [r7, #0]
 80086d6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	68fa      	ldr	r2, [r7, #12]
 80086dc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	683a      	ldr	r2, [r7, #0]
 80086e2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	687a      	ldr	r2, [r7, #4]
 80086e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	1c5a      	adds	r2, r3, #1
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	601a      	str	r2, [r3, #0]
}
 80086f4:	bf00      	nop
 80086f6:	3714      	adds	r7, #20
 80086f8:	46bd      	mov	sp, r7
 80086fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fe:	4770      	bx	lr

08008700 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008700:	b480      	push	{r7}
 8008702:	b085      	sub	sp, #20
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	691b      	ldr	r3, [r3, #16]
 800870c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	685b      	ldr	r3, [r3, #4]
 8008712:	687a      	ldr	r2, [r7, #4]
 8008714:	6892      	ldr	r2, [r2, #8]
 8008716:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	689b      	ldr	r3, [r3, #8]
 800871c:	687a      	ldr	r2, [r7, #4]
 800871e:	6852      	ldr	r2, [r2, #4]
 8008720:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	685b      	ldr	r3, [r3, #4]
 8008726:	687a      	ldr	r2, [r7, #4]
 8008728:	429a      	cmp	r2, r3
 800872a:	d103      	bne.n	8008734 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	689a      	ldr	r2, [r3, #8]
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2200      	movs	r2, #0
 8008738:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	1e5a      	subs	r2, r3, #1
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
}
 8008748:	4618      	mov	r0, r3
 800874a:	3714      	adds	r7, #20
 800874c:	46bd      	mov	sp, r7
 800874e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008752:	4770      	bx	lr

08008754 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008754:	b580      	push	{r7, lr}
 8008756:	b08e      	sub	sp, #56	@ 0x38
 8008758:	af04      	add	r7, sp, #16
 800875a:	60f8      	str	r0, [r7, #12]
 800875c:	60b9      	str	r1, [r7, #8]
 800875e:	607a      	str	r2, [r7, #4]
 8008760:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008762:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008764:	2b00      	cmp	r3, #0
 8008766:	d10b      	bne.n	8008780 <xTaskCreateStatic+0x2c>
	__asm volatile
 8008768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800876c:	f383 8811 	msr	BASEPRI, r3
 8008770:	f3bf 8f6f 	isb	sy
 8008774:	f3bf 8f4f 	dsb	sy
 8008778:	623b      	str	r3, [r7, #32]
}
 800877a:	bf00      	nop
 800877c:	bf00      	nop
 800877e:	e7fd      	b.n	800877c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008782:	2b00      	cmp	r3, #0
 8008784:	d10b      	bne.n	800879e <xTaskCreateStatic+0x4a>
	__asm volatile
 8008786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800878a:	f383 8811 	msr	BASEPRI, r3
 800878e:	f3bf 8f6f 	isb	sy
 8008792:	f3bf 8f4f 	dsb	sy
 8008796:	61fb      	str	r3, [r7, #28]
}
 8008798:	bf00      	nop
 800879a:	bf00      	nop
 800879c:	e7fd      	b.n	800879a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800879e:	23a0      	movs	r3, #160	@ 0xa0
 80087a0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80087a2:	693b      	ldr	r3, [r7, #16]
 80087a4:	2ba0      	cmp	r3, #160	@ 0xa0
 80087a6:	d00b      	beq.n	80087c0 <xTaskCreateStatic+0x6c>
	__asm volatile
 80087a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087ac:	f383 8811 	msr	BASEPRI, r3
 80087b0:	f3bf 8f6f 	isb	sy
 80087b4:	f3bf 8f4f 	dsb	sy
 80087b8:	61bb      	str	r3, [r7, #24]
}
 80087ba:	bf00      	nop
 80087bc:	bf00      	nop
 80087be:	e7fd      	b.n	80087bc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80087c0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80087c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d01e      	beq.n	8008806 <xTaskCreateStatic+0xb2>
 80087c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d01b      	beq.n	8008806 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80087ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087d0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80087d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80087d6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80087d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087da:	2202      	movs	r2, #2
 80087dc:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80087e0:	2300      	movs	r3, #0
 80087e2:	9303      	str	r3, [sp, #12]
 80087e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087e6:	9302      	str	r3, [sp, #8]
 80087e8:	f107 0314 	add.w	r3, r7, #20
 80087ec:	9301      	str	r3, [sp, #4]
 80087ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087f0:	9300      	str	r3, [sp, #0]
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	687a      	ldr	r2, [r7, #4]
 80087f6:	68b9      	ldr	r1, [r7, #8]
 80087f8:	68f8      	ldr	r0, [r7, #12]
 80087fa:	f000 f851 	bl	80088a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80087fe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008800:	f000 f8ee 	bl	80089e0 <prvAddNewTaskToReadyList>
 8008804:	e001      	b.n	800880a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008806:	2300      	movs	r3, #0
 8008808:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800880a:	697b      	ldr	r3, [r7, #20]
	}
 800880c:	4618      	mov	r0, r3
 800880e:	3728      	adds	r7, #40	@ 0x28
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}

08008814 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008814:	b580      	push	{r7, lr}
 8008816:	b08c      	sub	sp, #48	@ 0x30
 8008818:	af04      	add	r7, sp, #16
 800881a:	60f8      	str	r0, [r7, #12]
 800881c:	60b9      	str	r1, [r7, #8]
 800881e:	603b      	str	r3, [r7, #0]
 8008820:	4613      	mov	r3, r2
 8008822:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008824:	88fb      	ldrh	r3, [r7, #6]
 8008826:	009b      	lsls	r3, r3, #2
 8008828:	4618      	mov	r0, r3
 800882a:	f001 fa97 	bl	8009d5c <pvPortMalloc>
 800882e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008830:	697b      	ldr	r3, [r7, #20]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d00e      	beq.n	8008854 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008836:	20a0      	movs	r0, #160	@ 0xa0
 8008838:	f001 fa90 	bl	8009d5c <pvPortMalloc>
 800883c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800883e:	69fb      	ldr	r3, [r7, #28]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d003      	beq.n	800884c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008844:	69fb      	ldr	r3, [r7, #28]
 8008846:	697a      	ldr	r2, [r7, #20]
 8008848:	631a      	str	r2, [r3, #48]	@ 0x30
 800884a:	e005      	b.n	8008858 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800884c:	6978      	ldr	r0, [r7, #20]
 800884e:	f001 fb53 	bl	8009ef8 <vPortFree>
 8008852:	e001      	b.n	8008858 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008854:	2300      	movs	r3, #0
 8008856:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008858:	69fb      	ldr	r3, [r7, #28]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d017      	beq.n	800888e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800885e:	69fb      	ldr	r3, [r7, #28]
 8008860:	2200      	movs	r2, #0
 8008862:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008866:	88fa      	ldrh	r2, [r7, #6]
 8008868:	2300      	movs	r3, #0
 800886a:	9303      	str	r3, [sp, #12]
 800886c:	69fb      	ldr	r3, [r7, #28]
 800886e:	9302      	str	r3, [sp, #8]
 8008870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008872:	9301      	str	r3, [sp, #4]
 8008874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008876:	9300      	str	r3, [sp, #0]
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	68b9      	ldr	r1, [r7, #8]
 800887c:	68f8      	ldr	r0, [r7, #12]
 800887e:	f000 f80f 	bl	80088a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008882:	69f8      	ldr	r0, [r7, #28]
 8008884:	f000 f8ac 	bl	80089e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008888:	2301      	movs	r3, #1
 800888a:	61bb      	str	r3, [r7, #24]
 800888c:	e002      	b.n	8008894 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800888e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008892:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008894:	69bb      	ldr	r3, [r7, #24]
	}
 8008896:	4618      	mov	r0, r3
 8008898:	3720      	adds	r7, #32
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}
	...

080088a0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b088      	sub	sp, #32
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	60f8      	str	r0, [r7, #12]
 80088a8:	60b9      	str	r1, [r7, #8]
 80088aa:	607a      	str	r2, [r7, #4]
 80088ac:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80088ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80088b8:	3b01      	subs	r3, #1
 80088ba:	009b      	lsls	r3, r3, #2
 80088bc:	4413      	add	r3, r2
 80088be:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80088c0:	69bb      	ldr	r3, [r7, #24]
 80088c2:	f023 0307 	bic.w	r3, r3, #7
 80088c6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80088c8:	69bb      	ldr	r3, [r7, #24]
 80088ca:	f003 0307 	and.w	r3, r3, #7
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d00b      	beq.n	80088ea <prvInitialiseNewTask+0x4a>
	__asm volatile
 80088d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088d6:	f383 8811 	msr	BASEPRI, r3
 80088da:	f3bf 8f6f 	isb	sy
 80088de:	f3bf 8f4f 	dsb	sy
 80088e2:	617b      	str	r3, [r7, #20]
}
 80088e4:	bf00      	nop
 80088e6:	bf00      	nop
 80088e8:	e7fd      	b.n	80088e6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d01f      	beq.n	8008930 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80088f0:	2300      	movs	r3, #0
 80088f2:	61fb      	str	r3, [r7, #28]
 80088f4:	e012      	b.n	800891c <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80088f6:	68ba      	ldr	r2, [r7, #8]
 80088f8:	69fb      	ldr	r3, [r7, #28]
 80088fa:	4413      	add	r3, r2
 80088fc:	7819      	ldrb	r1, [r3, #0]
 80088fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008900:	69fb      	ldr	r3, [r7, #28]
 8008902:	4413      	add	r3, r2
 8008904:	3334      	adds	r3, #52	@ 0x34
 8008906:	460a      	mov	r2, r1
 8008908:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800890a:	68ba      	ldr	r2, [r7, #8]
 800890c:	69fb      	ldr	r3, [r7, #28]
 800890e:	4413      	add	r3, r2
 8008910:	781b      	ldrb	r3, [r3, #0]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d006      	beq.n	8008924 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008916:	69fb      	ldr	r3, [r7, #28]
 8008918:	3301      	adds	r3, #1
 800891a:	61fb      	str	r3, [r7, #28]
 800891c:	69fb      	ldr	r3, [r7, #28]
 800891e:	2b0f      	cmp	r3, #15
 8008920:	d9e9      	bls.n	80088f6 <prvInitialiseNewTask+0x56>
 8008922:	e000      	b.n	8008926 <prvInitialiseNewTask+0x86>
			{
				break;
 8008924:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008928:	2200      	movs	r2, #0
 800892a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800892e:	e003      	b.n	8008938 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008932:	2200      	movs	r2, #0
 8008934:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800893a:	2b06      	cmp	r3, #6
 800893c:	d901      	bls.n	8008942 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800893e:	2306      	movs	r3, #6
 8008940:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008944:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008946:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800894a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800894c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800894e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008950:	2200      	movs	r2, #0
 8008952:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008956:	3304      	adds	r3, #4
 8008958:	4618      	mov	r0, r3
 800895a:	f7ff fe67 	bl	800862c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800895e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008960:	3318      	adds	r3, #24
 8008962:	4618      	mov	r0, r3
 8008964:	f7ff fe62 	bl	800862c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800896a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800896c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800896e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008970:	f1c3 0207 	rsb	r2, r3, #7
 8008974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008976:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800897a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800897c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800897e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008980:	2200      	movs	r2, #0
 8008982:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008988:	2200      	movs	r2, #0
 800898a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800898e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008990:	334c      	adds	r3, #76	@ 0x4c
 8008992:	224c      	movs	r2, #76	@ 0x4c
 8008994:	2100      	movs	r1, #0
 8008996:	4618      	mov	r0, r3
 8008998:	f00f fa16 	bl	8017dc8 <memset>
 800899c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800899e:	4a0d      	ldr	r2, [pc, #52]	@ (80089d4 <prvInitialiseNewTask+0x134>)
 80089a0:	651a      	str	r2, [r3, #80]	@ 0x50
 80089a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089a4:	4a0c      	ldr	r2, [pc, #48]	@ (80089d8 <prvInitialiseNewTask+0x138>)
 80089a6:	655a      	str	r2, [r3, #84]	@ 0x54
 80089a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089aa:	4a0c      	ldr	r2, [pc, #48]	@ (80089dc <prvInitialiseNewTask+0x13c>)
 80089ac:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80089ae:	683a      	ldr	r2, [r7, #0]
 80089b0:	68f9      	ldr	r1, [r7, #12]
 80089b2:	69b8      	ldr	r0, [r7, #24]
 80089b4:	f000 ff7e 	bl	80098b4 <pxPortInitialiseStack>
 80089b8:	4602      	mov	r2, r0
 80089ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089bc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80089be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d002      	beq.n	80089ca <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80089c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80089c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80089ca:	bf00      	nop
 80089cc:	3720      	adds	r7, #32
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}
 80089d2:	bf00      	nop
 80089d4:	2001130c 	.word	0x2001130c
 80089d8:	20011374 	.word	0x20011374
 80089dc:	200113dc 	.word	0x200113dc

080089e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b082      	sub	sp, #8
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80089e8:	f001 f896 	bl	8009b18 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80089ec:	4b2a      	ldr	r3, [pc, #168]	@ (8008a98 <prvAddNewTaskToReadyList+0xb8>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	3301      	adds	r3, #1
 80089f2:	4a29      	ldr	r2, [pc, #164]	@ (8008a98 <prvAddNewTaskToReadyList+0xb8>)
 80089f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80089f6:	4b29      	ldr	r3, [pc, #164]	@ (8008a9c <prvAddNewTaskToReadyList+0xbc>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d109      	bne.n	8008a12 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80089fe:	4a27      	ldr	r2, [pc, #156]	@ (8008a9c <prvAddNewTaskToReadyList+0xbc>)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008a04:	4b24      	ldr	r3, [pc, #144]	@ (8008a98 <prvAddNewTaskToReadyList+0xb8>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	2b01      	cmp	r3, #1
 8008a0a:	d110      	bne.n	8008a2e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008a0c:	f000 fc20 	bl	8009250 <prvInitialiseTaskLists>
 8008a10:	e00d      	b.n	8008a2e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008a12:	4b23      	ldr	r3, [pc, #140]	@ (8008aa0 <prvAddNewTaskToReadyList+0xc0>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d109      	bne.n	8008a2e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008a1a:	4b20      	ldr	r3, [pc, #128]	@ (8008a9c <prvAddNewTaskToReadyList+0xbc>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a24:	429a      	cmp	r2, r3
 8008a26:	d802      	bhi.n	8008a2e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008a28:	4a1c      	ldr	r2, [pc, #112]	@ (8008a9c <prvAddNewTaskToReadyList+0xbc>)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008a2e:	4b1d      	ldr	r3, [pc, #116]	@ (8008aa4 <prvAddNewTaskToReadyList+0xc4>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	3301      	adds	r3, #1
 8008a34:	4a1b      	ldr	r2, [pc, #108]	@ (8008aa4 <prvAddNewTaskToReadyList+0xc4>)
 8008a36:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a3c:	2201      	movs	r2, #1
 8008a3e:	409a      	lsls	r2, r3
 8008a40:	4b19      	ldr	r3, [pc, #100]	@ (8008aa8 <prvAddNewTaskToReadyList+0xc8>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4313      	orrs	r3, r2
 8008a46:	4a18      	ldr	r2, [pc, #96]	@ (8008aa8 <prvAddNewTaskToReadyList+0xc8>)
 8008a48:	6013      	str	r3, [r2, #0]
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a4e:	4613      	mov	r3, r2
 8008a50:	009b      	lsls	r3, r3, #2
 8008a52:	4413      	add	r3, r2
 8008a54:	009b      	lsls	r3, r3, #2
 8008a56:	4a15      	ldr	r2, [pc, #84]	@ (8008aac <prvAddNewTaskToReadyList+0xcc>)
 8008a58:	441a      	add	r2, r3
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	3304      	adds	r3, #4
 8008a5e:	4619      	mov	r1, r3
 8008a60:	4610      	mov	r0, r2
 8008a62:	f7ff fdf0 	bl	8008646 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008a66:	f001 f889 	bl	8009b7c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008a6a:	4b0d      	ldr	r3, [pc, #52]	@ (8008aa0 <prvAddNewTaskToReadyList+0xc0>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d00e      	beq.n	8008a90 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008a72:	4b0a      	ldr	r3, [pc, #40]	@ (8008a9c <prvAddNewTaskToReadyList+0xbc>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a7c:	429a      	cmp	r2, r3
 8008a7e:	d207      	bcs.n	8008a90 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008a80:	4b0b      	ldr	r3, [pc, #44]	@ (8008ab0 <prvAddNewTaskToReadyList+0xd0>)
 8008a82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a86:	601a      	str	r2, [r3, #0]
 8008a88:	f3bf 8f4f 	dsb	sy
 8008a8c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008a90:	bf00      	nop
 8008a92:	3708      	adds	r7, #8
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}
 8008a98:	20008b34 	.word	0x20008b34
 8008a9c:	20008a34 	.word	0x20008a34
 8008aa0:	20008b40 	.word	0x20008b40
 8008aa4:	20008b50 	.word	0x20008b50
 8008aa8:	20008b3c 	.word	0x20008b3c
 8008aac:	20008a38 	.word	0x20008a38
 8008ab0:	e000ed04 	.word	0xe000ed04

08008ab4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b084      	sub	sp, #16
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008abc:	2300      	movs	r3, #0
 8008abe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d018      	beq.n	8008af8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008ac6:	4b14      	ldr	r3, [pc, #80]	@ (8008b18 <vTaskDelay+0x64>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d00b      	beq.n	8008ae6 <vTaskDelay+0x32>
	__asm volatile
 8008ace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ad2:	f383 8811 	msr	BASEPRI, r3
 8008ad6:	f3bf 8f6f 	isb	sy
 8008ada:	f3bf 8f4f 	dsb	sy
 8008ade:	60bb      	str	r3, [r7, #8]
}
 8008ae0:	bf00      	nop
 8008ae2:	bf00      	nop
 8008ae4:	e7fd      	b.n	8008ae2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008ae6:	f000 f9a9 	bl	8008e3c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008aea:	2100      	movs	r1, #0
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f000 fe7b 	bl	80097e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008af2:	f000 f9b1 	bl	8008e58 <xTaskResumeAll>
 8008af6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d107      	bne.n	8008b0e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008afe:	4b07      	ldr	r3, [pc, #28]	@ (8008b1c <vTaskDelay+0x68>)
 8008b00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b04:	601a      	str	r2, [r3, #0]
 8008b06:	f3bf 8f4f 	dsb	sy
 8008b0a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008b0e:	bf00      	nop
 8008b10:	3710      	adds	r7, #16
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}
 8008b16:	bf00      	nop
 8008b18:	20008b5c 	.word	0x20008b5c
 8008b1c:	e000ed04 	.word	0xe000ed04

08008b20 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b084      	sub	sp, #16
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8008b28:	f000 fff6 	bl	8009b18 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d102      	bne.n	8008b38 <vTaskSuspend+0x18>
 8008b32:	4b3d      	ldr	r3, [pc, #244]	@ (8008c28 <vTaskSuspend+0x108>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	e000      	b.n	8008b3a <vTaskSuspend+0x1a>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	3304      	adds	r3, #4
 8008b40:	4618      	mov	r0, r3
 8008b42:	f7ff fddd 	bl	8008700 <uxListRemove>
 8008b46:	4603      	mov	r3, r0
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d115      	bne.n	8008b78 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b50:	4936      	ldr	r1, [pc, #216]	@ (8008c2c <vTaskSuspend+0x10c>)
 8008b52:	4613      	mov	r3, r2
 8008b54:	009b      	lsls	r3, r3, #2
 8008b56:	4413      	add	r3, r2
 8008b58:	009b      	lsls	r3, r3, #2
 8008b5a:	440b      	add	r3, r1
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d10a      	bne.n	8008b78 <vTaskSuspend+0x58>
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b66:	2201      	movs	r2, #1
 8008b68:	fa02 f303 	lsl.w	r3, r2, r3
 8008b6c:	43da      	mvns	r2, r3
 8008b6e:	4b30      	ldr	r3, [pc, #192]	@ (8008c30 <vTaskSuspend+0x110>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	4013      	ands	r3, r2
 8008b74:	4a2e      	ldr	r2, [pc, #184]	@ (8008c30 <vTaskSuspend+0x110>)
 8008b76:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d004      	beq.n	8008b8a <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	3318      	adds	r3, #24
 8008b84:	4618      	mov	r0, r3
 8008b86:	f7ff fdbb 	bl	8008700 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	3304      	adds	r3, #4
 8008b8e:	4619      	mov	r1, r3
 8008b90:	4828      	ldr	r0, [pc, #160]	@ (8008c34 <vTaskSuspend+0x114>)
 8008b92:	f7ff fd58 	bl	8008646 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8008b9c:	b2db      	uxtb	r3, r3
 8008b9e:	2b01      	cmp	r3, #1
 8008ba0:	d103      	bne.n	8008baa <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8008baa:	f000 ffe7 	bl	8009b7c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8008bae:	4b22      	ldr	r3, [pc, #136]	@ (8008c38 <vTaskSuspend+0x118>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d005      	beq.n	8008bc2 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8008bb6:	f000 ffaf 	bl	8009b18 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8008bba:	f000 fbed 	bl	8009398 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8008bbe:	f000 ffdd 	bl	8009b7c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8008bc2:	4b19      	ldr	r3, [pc, #100]	@ (8008c28 <vTaskSuspend+0x108>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	68fa      	ldr	r2, [r7, #12]
 8008bc8:	429a      	cmp	r2, r3
 8008bca:	d128      	bne.n	8008c1e <vTaskSuspend+0xfe>
		{
			if( xSchedulerRunning != pdFALSE )
 8008bcc:	4b1a      	ldr	r3, [pc, #104]	@ (8008c38 <vTaskSuspend+0x118>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d018      	beq.n	8008c06 <vTaskSuspend+0xe6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8008bd4:	4b19      	ldr	r3, [pc, #100]	@ (8008c3c <vTaskSuspend+0x11c>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d00b      	beq.n	8008bf4 <vTaskSuspend+0xd4>
	__asm volatile
 8008bdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008be0:	f383 8811 	msr	BASEPRI, r3
 8008be4:	f3bf 8f6f 	isb	sy
 8008be8:	f3bf 8f4f 	dsb	sy
 8008bec:	60bb      	str	r3, [r7, #8]
}
 8008bee:	bf00      	nop
 8008bf0:	bf00      	nop
 8008bf2:	e7fd      	b.n	8008bf0 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8008bf4:	4b12      	ldr	r3, [pc, #72]	@ (8008c40 <vTaskSuspend+0x120>)
 8008bf6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008bfa:	601a      	str	r2, [r3, #0]
 8008bfc:	f3bf 8f4f 	dsb	sy
 8008c00:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008c04:	e00b      	b.n	8008c1e <vTaskSuspend+0xfe>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8008c06:	4b0b      	ldr	r3, [pc, #44]	@ (8008c34 <vTaskSuspend+0x114>)
 8008c08:	681a      	ldr	r2, [r3, #0]
 8008c0a:	4b0e      	ldr	r3, [pc, #56]	@ (8008c44 <vTaskSuspend+0x124>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	429a      	cmp	r2, r3
 8008c10:	d103      	bne.n	8008c1a <vTaskSuspend+0xfa>
					pxCurrentTCB = NULL;
 8008c12:	4b05      	ldr	r3, [pc, #20]	@ (8008c28 <vTaskSuspend+0x108>)
 8008c14:	2200      	movs	r2, #0
 8008c16:	601a      	str	r2, [r3, #0]
	}
 8008c18:	e001      	b.n	8008c1e <vTaskSuspend+0xfe>
					vTaskSwitchContext();
 8008c1a:	f000 fa75 	bl	8009108 <vTaskSwitchContext>
	}
 8008c1e:	bf00      	nop
 8008c20:	3710      	adds	r7, #16
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}
 8008c26:	bf00      	nop
 8008c28:	20008a34 	.word	0x20008a34
 8008c2c:	20008a38 	.word	0x20008a38
 8008c30:	20008b3c 	.word	0x20008b3c
 8008c34:	20008b20 	.word	0x20008b20
 8008c38:	20008b40 	.word	0x20008b40
 8008c3c:	20008b5c 	.word	0x20008b5c
 8008c40:	e000ed04 	.word	0xe000ed04
 8008c44:	20008b34 	.word	0x20008b34

08008c48 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8008c48:	b480      	push	{r7}
 8008c4a:	b087      	sub	sp, #28
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8008c50:	2300      	movs	r3, #0
 8008c52:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d10b      	bne.n	8008c76 <prvTaskIsTaskSuspended+0x2e>
	__asm volatile
 8008c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c62:	f383 8811 	msr	BASEPRI, r3
 8008c66:	f3bf 8f6f 	isb	sy
 8008c6a:	f3bf 8f4f 	dsb	sy
 8008c6e:	60fb      	str	r3, [r7, #12]
}
 8008c70:	bf00      	nop
 8008c72:	bf00      	nop
 8008c74:	e7fd      	b.n	8008c72 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	695b      	ldr	r3, [r3, #20]
 8008c7a:	4a0a      	ldr	r2, [pc, #40]	@ (8008ca4 <prvTaskIsTaskSuspended+0x5c>)
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	d10a      	bne.n	8008c96 <prvTaskIsTaskSuspended+0x4e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c84:	4a08      	ldr	r2, [pc, #32]	@ (8008ca8 <prvTaskIsTaskSuspended+0x60>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d005      	beq.n	8008c96 <prvTaskIsTaskSuspended+0x4e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d101      	bne.n	8008c96 <prvTaskIsTaskSuspended+0x4e>
				{
					xReturn = pdTRUE;
 8008c92:	2301      	movs	r3, #1
 8008c94:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008c96:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8008c98:	4618      	mov	r0, r3
 8008c9a:	371c      	adds	r7, #28
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca2:	4770      	bx	lr
 8008ca4:	20008b20 	.word	0x20008b20
 8008ca8:	20008af4 	.word	0x20008af4

08008cac <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b084      	sub	sp, #16
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d10b      	bne.n	8008cd6 <vTaskResume+0x2a>
	__asm volatile
 8008cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cc2:	f383 8811 	msr	BASEPRI, r3
 8008cc6:	f3bf 8f6f 	isb	sy
 8008cca:	f3bf 8f4f 	dsb	sy
 8008cce:	60bb      	str	r3, [r7, #8]
}
 8008cd0:	bf00      	nop
 8008cd2:	bf00      	nop
 8008cd4:	e7fd      	b.n	8008cd2 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8008cd6:	4b20      	ldr	r3, [pc, #128]	@ (8008d58 <vTaskResume+0xac>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	68fa      	ldr	r2, [r7, #12]
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	d037      	beq.n	8008d50 <vTaskResume+0xa4>
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d034      	beq.n	8008d50 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 8008ce6:	f000 ff17 	bl	8009b18 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8008cea:	68f8      	ldr	r0, [r7, #12]
 8008cec:	f7ff ffac 	bl	8008c48 <prvTaskIsTaskSuspended>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d02a      	beq.n	8008d4c <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	3304      	adds	r3, #4
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f7ff fd00 	bl	8008700 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d04:	2201      	movs	r2, #1
 8008d06:	409a      	lsls	r2, r3
 8008d08:	4b14      	ldr	r3, [pc, #80]	@ (8008d5c <vTaskResume+0xb0>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	4313      	orrs	r3, r2
 8008d0e:	4a13      	ldr	r2, [pc, #76]	@ (8008d5c <vTaskResume+0xb0>)
 8008d10:	6013      	str	r3, [r2, #0]
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d16:	4613      	mov	r3, r2
 8008d18:	009b      	lsls	r3, r3, #2
 8008d1a:	4413      	add	r3, r2
 8008d1c:	009b      	lsls	r3, r3, #2
 8008d1e:	4a10      	ldr	r2, [pc, #64]	@ (8008d60 <vTaskResume+0xb4>)
 8008d20:	441a      	add	r2, r3
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	3304      	adds	r3, #4
 8008d26:	4619      	mov	r1, r3
 8008d28:	4610      	mov	r0, r2
 8008d2a:	f7ff fc8c 	bl	8008646 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d32:	4b09      	ldr	r3, [pc, #36]	@ (8008d58 <vTaskResume+0xac>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d38:	429a      	cmp	r2, r3
 8008d3a:	d307      	bcc.n	8008d4c <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8008d3c:	4b09      	ldr	r3, [pc, #36]	@ (8008d64 <vTaskResume+0xb8>)
 8008d3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d42:	601a      	str	r2, [r3, #0]
 8008d44:	f3bf 8f4f 	dsb	sy
 8008d48:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8008d4c:	f000 ff16 	bl	8009b7c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008d50:	bf00      	nop
 8008d52:	3710      	adds	r7, #16
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}
 8008d58:	20008a34 	.word	0x20008a34
 8008d5c:	20008b3c 	.word	0x20008b3c
 8008d60:	20008a38 	.word	0x20008a38
 8008d64:	e000ed04 	.word	0xe000ed04

08008d68 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b08a      	sub	sp, #40	@ 0x28
 8008d6c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008d72:	2300      	movs	r3, #0
 8008d74:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008d76:	463a      	mov	r2, r7
 8008d78:	1d39      	adds	r1, r7, #4
 8008d7a:	f107 0308 	add.w	r3, r7, #8
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f7f8 fc56 	bl	8001630 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008d84:	6839      	ldr	r1, [r7, #0]
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	68ba      	ldr	r2, [r7, #8]
 8008d8a:	9202      	str	r2, [sp, #8]
 8008d8c:	9301      	str	r3, [sp, #4]
 8008d8e:	2300      	movs	r3, #0
 8008d90:	9300      	str	r3, [sp, #0]
 8008d92:	2300      	movs	r3, #0
 8008d94:	460a      	mov	r2, r1
 8008d96:	4921      	ldr	r1, [pc, #132]	@ (8008e1c <vTaskStartScheduler+0xb4>)
 8008d98:	4821      	ldr	r0, [pc, #132]	@ (8008e20 <vTaskStartScheduler+0xb8>)
 8008d9a:	f7ff fcdb 	bl	8008754 <xTaskCreateStatic>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	4a20      	ldr	r2, [pc, #128]	@ (8008e24 <vTaskStartScheduler+0xbc>)
 8008da2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008da4:	4b1f      	ldr	r3, [pc, #124]	@ (8008e24 <vTaskStartScheduler+0xbc>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d002      	beq.n	8008db2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008dac:	2301      	movs	r3, #1
 8008dae:	617b      	str	r3, [r7, #20]
 8008db0:	e001      	b.n	8008db6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008db2:	2300      	movs	r3, #0
 8008db4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	2b01      	cmp	r3, #1
 8008dba:	d11b      	bne.n	8008df4 <vTaskStartScheduler+0x8c>
	__asm volatile
 8008dbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dc0:	f383 8811 	msr	BASEPRI, r3
 8008dc4:	f3bf 8f6f 	isb	sy
 8008dc8:	f3bf 8f4f 	dsb	sy
 8008dcc:	613b      	str	r3, [r7, #16]
}
 8008dce:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008dd0:	4b15      	ldr	r3, [pc, #84]	@ (8008e28 <vTaskStartScheduler+0xc0>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	334c      	adds	r3, #76	@ 0x4c
 8008dd6:	4a15      	ldr	r2, [pc, #84]	@ (8008e2c <vTaskStartScheduler+0xc4>)
 8008dd8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008dda:	4b15      	ldr	r3, [pc, #84]	@ (8008e30 <vTaskStartScheduler+0xc8>)
 8008ddc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008de0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008de2:	4b14      	ldr	r3, [pc, #80]	@ (8008e34 <vTaskStartScheduler+0xcc>)
 8008de4:	2201      	movs	r2, #1
 8008de6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008de8:	4b13      	ldr	r3, [pc, #76]	@ (8008e38 <vTaskStartScheduler+0xd0>)
 8008dea:	2200      	movs	r2, #0
 8008dec:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008dee:	f000 fdef 	bl	80099d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008df2:	e00f      	b.n	8008e14 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008df4:	697b      	ldr	r3, [r7, #20]
 8008df6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008dfa:	d10b      	bne.n	8008e14 <vTaskStartScheduler+0xac>
	__asm volatile
 8008dfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e00:	f383 8811 	msr	BASEPRI, r3
 8008e04:	f3bf 8f6f 	isb	sy
 8008e08:	f3bf 8f4f 	dsb	sy
 8008e0c:	60fb      	str	r3, [r7, #12]
}
 8008e0e:	bf00      	nop
 8008e10:	bf00      	nop
 8008e12:	e7fd      	b.n	8008e10 <vTaskStartScheduler+0xa8>
}
 8008e14:	bf00      	nop
 8008e16:	3718      	adds	r7, #24
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}
 8008e1c:	08019f74 	.word	0x08019f74
 8008e20:	08009221 	.word	0x08009221
 8008e24:	20008b58 	.word	0x20008b58
 8008e28:	20008a34 	.word	0x20008a34
 8008e2c:	200000c8 	.word	0x200000c8
 8008e30:	20008b54 	.word	0x20008b54
 8008e34:	20008b40 	.word	0x20008b40
 8008e38:	20008b38 	.word	0x20008b38

08008e3c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008e40:	4b04      	ldr	r3, [pc, #16]	@ (8008e54 <vTaskSuspendAll+0x18>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	3301      	adds	r3, #1
 8008e46:	4a03      	ldr	r2, [pc, #12]	@ (8008e54 <vTaskSuspendAll+0x18>)
 8008e48:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008e4a:	bf00      	nop
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e52:	4770      	bx	lr
 8008e54:	20008b5c 	.word	0x20008b5c

08008e58 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b084      	sub	sp, #16
 8008e5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008e62:	2300      	movs	r3, #0
 8008e64:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008e66:	4b42      	ldr	r3, [pc, #264]	@ (8008f70 <xTaskResumeAll+0x118>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d10b      	bne.n	8008e86 <xTaskResumeAll+0x2e>
	__asm volatile
 8008e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e72:	f383 8811 	msr	BASEPRI, r3
 8008e76:	f3bf 8f6f 	isb	sy
 8008e7a:	f3bf 8f4f 	dsb	sy
 8008e7e:	603b      	str	r3, [r7, #0]
}
 8008e80:	bf00      	nop
 8008e82:	bf00      	nop
 8008e84:	e7fd      	b.n	8008e82 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008e86:	f000 fe47 	bl	8009b18 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008e8a:	4b39      	ldr	r3, [pc, #228]	@ (8008f70 <xTaskResumeAll+0x118>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	3b01      	subs	r3, #1
 8008e90:	4a37      	ldr	r2, [pc, #220]	@ (8008f70 <xTaskResumeAll+0x118>)
 8008e92:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e94:	4b36      	ldr	r3, [pc, #216]	@ (8008f70 <xTaskResumeAll+0x118>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d161      	bne.n	8008f60 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008e9c:	4b35      	ldr	r3, [pc, #212]	@ (8008f74 <xTaskResumeAll+0x11c>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d05d      	beq.n	8008f60 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008ea4:	e02e      	b.n	8008f04 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ea6:	4b34      	ldr	r3, [pc, #208]	@ (8008f78 <xTaskResumeAll+0x120>)
 8008ea8:	68db      	ldr	r3, [r3, #12]
 8008eaa:	68db      	ldr	r3, [r3, #12]
 8008eac:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	3318      	adds	r3, #24
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f7ff fc24 	bl	8008700 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	3304      	adds	r3, #4
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f7ff fc1f 	bl	8008700 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ec6:	2201      	movs	r2, #1
 8008ec8:	409a      	lsls	r2, r3
 8008eca:	4b2c      	ldr	r3, [pc, #176]	@ (8008f7c <xTaskResumeAll+0x124>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	4313      	orrs	r3, r2
 8008ed0:	4a2a      	ldr	r2, [pc, #168]	@ (8008f7c <xTaskResumeAll+0x124>)
 8008ed2:	6013      	str	r3, [r2, #0]
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ed8:	4613      	mov	r3, r2
 8008eda:	009b      	lsls	r3, r3, #2
 8008edc:	4413      	add	r3, r2
 8008ede:	009b      	lsls	r3, r3, #2
 8008ee0:	4a27      	ldr	r2, [pc, #156]	@ (8008f80 <xTaskResumeAll+0x128>)
 8008ee2:	441a      	add	r2, r3
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	3304      	adds	r3, #4
 8008ee8:	4619      	mov	r1, r3
 8008eea:	4610      	mov	r0, r2
 8008eec:	f7ff fbab 	bl	8008646 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ef4:	4b23      	ldr	r3, [pc, #140]	@ (8008f84 <xTaskResumeAll+0x12c>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008efa:	429a      	cmp	r2, r3
 8008efc:	d302      	bcc.n	8008f04 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008efe:	4b22      	ldr	r3, [pc, #136]	@ (8008f88 <xTaskResumeAll+0x130>)
 8008f00:	2201      	movs	r2, #1
 8008f02:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008f04:	4b1c      	ldr	r3, [pc, #112]	@ (8008f78 <xTaskResumeAll+0x120>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d1cc      	bne.n	8008ea6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d001      	beq.n	8008f16 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008f12:	f000 fa41 	bl	8009398 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008f16:	4b1d      	ldr	r3, [pc, #116]	@ (8008f8c <xTaskResumeAll+0x134>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d010      	beq.n	8008f44 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008f22:	f000 f837 	bl	8008f94 <xTaskIncrementTick>
 8008f26:	4603      	mov	r3, r0
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d002      	beq.n	8008f32 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008f2c:	4b16      	ldr	r3, [pc, #88]	@ (8008f88 <xTaskResumeAll+0x130>)
 8008f2e:	2201      	movs	r2, #1
 8008f30:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	3b01      	subs	r3, #1
 8008f36:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d1f1      	bne.n	8008f22 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008f3e:	4b13      	ldr	r3, [pc, #76]	@ (8008f8c <xTaskResumeAll+0x134>)
 8008f40:	2200      	movs	r2, #0
 8008f42:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008f44:	4b10      	ldr	r3, [pc, #64]	@ (8008f88 <xTaskResumeAll+0x130>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d009      	beq.n	8008f60 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008f50:	4b0f      	ldr	r3, [pc, #60]	@ (8008f90 <xTaskResumeAll+0x138>)
 8008f52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f56:	601a      	str	r2, [r3, #0]
 8008f58:	f3bf 8f4f 	dsb	sy
 8008f5c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008f60:	f000 fe0c 	bl	8009b7c <vPortExitCritical>

	return xAlreadyYielded;
 8008f64:	68bb      	ldr	r3, [r7, #8]
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	3710      	adds	r7, #16
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}
 8008f6e:	bf00      	nop
 8008f70:	20008b5c 	.word	0x20008b5c
 8008f74:	20008b34 	.word	0x20008b34
 8008f78:	20008af4 	.word	0x20008af4
 8008f7c:	20008b3c 	.word	0x20008b3c
 8008f80:	20008a38 	.word	0x20008a38
 8008f84:	20008a34 	.word	0x20008a34
 8008f88:	20008b48 	.word	0x20008b48
 8008f8c:	20008b44 	.word	0x20008b44
 8008f90:	e000ed04 	.word	0xe000ed04

08008f94 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b086      	sub	sp, #24
 8008f98:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f9e:	4b4f      	ldr	r3, [pc, #316]	@ (80090dc <xTaskIncrementTick+0x148>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	f040 808f 	bne.w	80090c6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008fa8:	4b4d      	ldr	r3, [pc, #308]	@ (80090e0 <xTaskIncrementTick+0x14c>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	3301      	adds	r3, #1
 8008fae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008fb0:	4a4b      	ldr	r2, [pc, #300]	@ (80090e0 <xTaskIncrementTick+0x14c>)
 8008fb2:	693b      	ldr	r3, [r7, #16]
 8008fb4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008fb6:	693b      	ldr	r3, [r7, #16]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d121      	bne.n	8009000 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008fbc:	4b49      	ldr	r3, [pc, #292]	@ (80090e4 <xTaskIncrementTick+0x150>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d00b      	beq.n	8008fde <xTaskIncrementTick+0x4a>
	__asm volatile
 8008fc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fca:	f383 8811 	msr	BASEPRI, r3
 8008fce:	f3bf 8f6f 	isb	sy
 8008fd2:	f3bf 8f4f 	dsb	sy
 8008fd6:	603b      	str	r3, [r7, #0]
}
 8008fd8:	bf00      	nop
 8008fda:	bf00      	nop
 8008fdc:	e7fd      	b.n	8008fda <xTaskIncrementTick+0x46>
 8008fde:	4b41      	ldr	r3, [pc, #260]	@ (80090e4 <xTaskIncrementTick+0x150>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	60fb      	str	r3, [r7, #12]
 8008fe4:	4b40      	ldr	r3, [pc, #256]	@ (80090e8 <xTaskIncrementTick+0x154>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	4a3e      	ldr	r2, [pc, #248]	@ (80090e4 <xTaskIncrementTick+0x150>)
 8008fea:	6013      	str	r3, [r2, #0]
 8008fec:	4a3e      	ldr	r2, [pc, #248]	@ (80090e8 <xTaskIncrementTick+0x154>)
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	6013      	str	r3, [r2, #0]
 8008ff2:	4b3e      	ldr	r3, [pc, #248]	@ (80090ec <xTaskIncrementTick+0x158>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	3301      	adds	r3, #1
 8008ff8:	4a3c      	ldr	r2, [pc, #240]	@ (80090ec <xTaskIncrementTick+0x158>)
 8008ffa:	6013      	str	r3, [r2, #0]
 8008ffc:	f000 f9cc 	bl	8009398 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009000:	4b3b      	ldr	r3, [pc, #236]	@ (80090f0 <xTaskIncrementTick+0x15c>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	693a      	ldr	r2, [r7, #16]
 8009006:	429a      	cmp	r2, r3
 8009008:	d348      	bcc.n	800909c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800900a:	4b36      	ldr	r3, [pc, #216]	@ (80090e4 <xTaskIncrementTick+0x150>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d104      	bne.n	800901e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009014:	4b36      	ldr	r3, [pc, #216]	@ (80090f0 <xTaskIncrementTick+0x15c>)
 8009016:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800901a:	601a      	str	r2, [r3, #0]
					break;
 800901c:	e03e      	b.n	800909c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800901e:	4b31      	ldr	r3, [pc, #196]	@ (80090e4 <xTaskIncrementTick+0x150>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	68db      	ldr	r3, [r3, #12]
 8009024:	68db      	ldr	r3, [r3, #12]
 8009026:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	685b      	ldr	r3, [r3, #4]
 800902c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800902e:	693a      	ldr	r2, [r7, #16]
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	429a      	cmp	r2, r3
 8009034:	d203      	bcs.n	800903e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009036:	4a2e      	ldr	r2, [pc, #184]	@ (80090f0 <xTaskIncrementTick+0x15c>)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800903c:	e02e      	b.n	800909c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	3304      	adds	r3, #4
 8009042:	4618      	mov	r0, r3
 8009044:	f7ff fb5c 	bl	8008700 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800904c:	2b00      	cmp	r3, #0
 800904e:	d004      	beq.n	800905a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	3318      	adds	r3, #24
 8009054:	4618      	mov	r0, r3
 8009056:	f7ff fb53 	bl	8008700 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800905e:	2201      	movs	r2, #1
 8009060:	409a      	lsls	r2, r3
 8009062:	4b24      	ldr	r3, [pc, #144]	@ (80090f4 <xTaskIncrementTick+0x160>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	4313      	orrs	r3, r2
 8009068:	4a22      	ldr	r2, [pc, #136]	@ (80090f4 <xTaskIncrementTick+0x160>)
 800906a:	6013      	str	r3, [r2, #0]
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009070:	4613      	mov	r3, r2
 8009072:	009b      	lsls	r3, r3, #2
 8009074:	4413      	add	r3, r2
 8009076:	009b      	lsls	r3, r3, #2
 8009078:	4a1f      	ldr	r2, [pc, #124]	@ (80090f8 <xTaskIncrementTick+0x164>)
 800907a:	441a      	add	r2, r3
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	3304      	adds	r3, #4
 8009080:	4619      	mov	r1, r3
 8009082:	4610      	mov	r0, r2
 8009084:	f7ff fadf 	bl	8008646 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800908c:	4b1b      	ldr	r3, [pc, #108]	@ (80090fc <xTaskIncrementTick+0x168>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009092:	429a      	cmp	r2, r3
 8009094:	d3b9      	bcc.n	800900a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009096:	2301      	movs	r3, #1
 8009098:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800909a:	e7b6      	b.n	800900a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800909c:	4b17      	ldr	r3, [pc, #92]	@ (80090fc <xTaskIncrementTick+0x168>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090a2:	4915      	ldr	r1, [pc, #84]	@ (80090f8 <xTaskIncrementTick+0x164>)
 80090a4:	4613      	mov	r3, r2
 80090a6:	009b      	lsls	r3, r3, #2
 80090a8:	4413      	add	r3, r2
 80090aa:	009b      	lsls	r3, r3, #2
 80090ac:	440b      	add	r3, r1
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	2b01      	cmp	r3, #1
 80090b2:	d901      	bls.n	80090b8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80090b4:	2301      	movs	r3, #1
 80090b6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80090b8:	4b11      	ldr	r3, [pc, #68]	@ (8009100 <xTaskIncrementTick+0x16c>)
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d007      	beq.n	80090d0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80090c0:	2301      	movs	r3, #1
 80090c2:	617b      	str	r3, [r7, #20]
 80090c4:	e004      	b.n	80090d0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80090c6:	4b0f      	ldr	r3, [pc, #60]	@ (8009104 <xTaskIncrementTick+0x170>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	3301      	adds	r3, #1
 80090cc:	4a0d      	ldr	r2, [pc, #52]	@ (8009104 <xTaskIncrementTick+0x170>)
 80090ce:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80090d0:	697b      	ldr	r3, [r7, #20]
}
 80090d2:	4618      	mov	r0, r3
 80090d4:	3718      	adds	r7, #24
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bd80      	pop	{r7, pc}
 80090da:	bf00      	nop
 80090dc:	20008b5c 	.word	0x20008b5c
 80090e0:	20008b38 	.word	0x20008b38
 80090e4:	20008aec 	.word	0x20008aec
 80090e8:	20008af0 	.word	0x20008af0
 80090ec:	20008b4c 	.word	0x20008b4c
 80090f0:	20008b54 	.word	0x20008b54
 80090f4:	20008b3c 	.word	0x20008b3c
 80090f8:	20008a38 	.word	0x20008a38
 80090fc:	20008a34 	.word	0x20008a34
 8009100:	20008b48 	.word	0x20008b48
 8009104:	20008b44 	.word	0x20008b44

08009108 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009108:	b480      	push	{r7}
 800910a:	b087      	sub	sp, #28
 800910c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800910e:	4b2a      	ldr	r3, [pc, #168]	@ (80091b8 <vTaskSwitchContext+0xb0>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d003      	beq.n	800911e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009116:	4b29      	ldr	r3, [pc, #164]	@ (80091bc <vTaskSwitchContext+0xb4>)
 8009118:	2201      	movs	r2, #1
 800911a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800911c:	e045      	b.n	80091aa <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800911e:	4b27      	ldr	r3, [pc, #156]	@ (80091bc <vTaskSwitchContext+0xb4>)
 8009120:	2200      	movs	r2, #0
 8009122:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009124:	4b26      	ldr	r3, [pc, #152]	@ (80091c0 <vTaskSwitchContext+0xb8>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	fab3 f383 	clz	r3, r3
 8009130:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009132:	7afb      	ldrb	r3, [r7, #11]
 8009134:	f1c3 031f 	rsb	r3, r3, #31
 8009138:	617b      	str	r3, [r7, #20]
 800913a:	4922      	ldr	r1, [pc, #136]	@ (80091c4 <vTaskSwitchContext+0xbc>)
 800913c:	697a      	ldr	r2, [r7, #20]
 800913e:	4613      	mov	r3, r2
 8009140:	009b      	lsls	r3, r3, #2
 8009142:	4413      	add	r3, r2
 8009144:	009b      	lsls	r3, r3, #2
 8009146:	440b      	add	r3, r1
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d10b      	bne.n	8009166 <vTaskSwitchContext+0x5e>
	__asm volatile
 800914e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009152:	f383 8811 	msr	BASEPRI, r3
 8009156:	f3bf 8f6f 	isb	sy
 800915a:	f3bf 8f4f 	dsb	sy
 800915e:	607b      	str	r3, [r7, #4]
}
 8009160:	bf00      	nop
 8009162:	bf00      	nop
 8009164:	e7fd      	b.n	8009162 <vTaskSwitchContext+0x5a>
 8009166:	697a      	ldr	r2, [r7, #20]
 8009168:	4613      	mov	r3, r2
 800916a:	009b      	lsls	r3, r3, #2
 800916c:	4413      	add	r3, r2
 800916e:	009b      	lsls	r3, r3, #2
 8009170:	4a14      	ldr	r2, [pc, #80]	@ (80091c4 <vTaskSwitchContext+0xbc>)
 8009172:	4413      	add	r3, r2
 8009174:	613b      	str	r3, [r7, #16]
 8009176:	693b      	ldr	r3, [r7, #16]
 8009178:	685b      	ldr	r3, [r3, #4]
 800917a:	685a      	ldr	r2, [r3, #4]
 800917c:	693b      	ldr	r3, [r7, #16]
 800917e:	605a      	str	r2, [r3, #4]
 8009180:	693b      	ldr	r3, [r7, #16]
 8009182:	685a      	ldr	r2, [r3, #4]
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	3308      	adds	r3, #8
 8009188:	429a      	cmp	r2, r3
 800918a:	d104      	bne.n	8009196 <vTaskSwitchContext+0x8e>
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	685b      	ldr	r3, [r3, #4]
 8009190:	685a      	ldr	r2, [r3, #4]
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	605a      	str	r2, [r3, #4]
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	685b      	ldr	r3, [r3, #4]
 800919a:	68db      	ldr	r3, [r3, #12]
 800919c:	4a0a      	ldr	r2, [pc, #40]	@ (80091c8 <vTaskSwitchContext+0xc0>)
 800919e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80091a0:	4b09      	ldr	r3, [pc, #36]	@ (80091c8 <vTaskSwitchContext+0xc0>)
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	334c      	adds	r3, #76	@ 0x4c
 80091a6:	4a09      	ldr	r2, [pc, #36]	@ (80091cc <vTaskSwitchContext+0xc4>)
 80091a8:	6013      	str	r3, [r2, #0]
}
 80091aa:	bf00      	nop
 80091ac:	371c      	adds	r7, #28
 80091ae:	46bd      	mov	sp, r7
 80091b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b4:	4770      	bx	lr
 80091b6:	bf00      	nop
 80091b8:	20008b5c 	.word	0x20008b5c
 80091bc:	20008b48 	.word	0x20008b48
 80091c0:	20008b3c 	.word	0x20008b3c
 80091c4:	20008a38 	.word	0x20008a38
 80091c8:	20008a34 	.word	0x20008a34
 80091cc:	200000c8 	.word	0x200000c8

080091d0 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b084      	sub	sp, #16
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d10b      	bne.n	80091f6 <vTaskSetTimeOutState+0x26>
	__asm volatile
 80091de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091e2:	f383 8811 	msr	BASEPRI, r3
 80091e6:	f3bf 8f6f 	isb	sy
 80091ea:	f3bf 8f4f 	dsb	sy
 80091ee:	60fb      	str	r3, [r7, #12]
}
 80091f0:	bf00      	nop
 80091f2:	bf00      	nop
 80091f4:	e7fd      	b.n	80091f2 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 80091f6:	f000 fc8f 	bl	8009b18 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 80091fa:	4b07      	ldr	r3, [pc, #28]	@ (8009218 <vTaskSetTimeOutState+0x48>)
 80091fc:	681a      	ldr	r2, [r3, #0]
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8009202:	4b06      	ldr	r3, [pc, #24]	@ (800921c <vTaskSetTimeOutState+0x4c>)
 8009204:	681a      	ldr	r2, [r3, #0]
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800920a:	f000 fcb7 	bl	8009b7c <vPortExitCritical>
}
 800920e:	bf00      	nop
 8009210:	3710      	adds	r7, #16
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}
 8009216:	bf00      	nop
 8009218:	20008b4c 	.word	0x20008b4c
 800921c:	20008b38 	.word	0x20008b38

08009220 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b082      	sub	sp, #8
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009228:	f000 f852 	bl	80092d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800922c:	4b06      	ldr	r3, [pc, #24]	@ (8009248 <prvIdleTask+0x28>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	2b01      	cmp	r3, #1
 8009232:	d9f9      	bls.n	8009228 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009234:	4b05      	ldr	r3, [pc, #20]	@ (800924c <prvIdleTask+0x2c>)
 8009236:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800923a:	601a      	str	r2, [r3, #0]
 800923c:	f3bf 8f4f 	dsb	sy
 8009240:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009244:	e7f0      	b.n	8009228 <prvIdleTask+0x8>
 8009246:	bf00      	nop
 8009248:	20008a38 	.word	0x20008a38
 800924c:	e000ed04 	.word	0xe000ed04

08009250 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b082      	sub	sp, #8
 8009254:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009256:	2300      	movs	r3, #0
 8009258:	607b      	str	r3, [r7, #4]
 800925a:	e00c      	b.n	8009276 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800925c:	687a      	ldr	r2, [r7, #4]
 800925e:	4613      	mov	r3, r2
 8009260:	009b      	lsls	r3, r3, #2
 8009262:	4413      	add	r3, r2
 8009264:	009b      	lsls	r3, r3, #2
 8009266:	4a12      	ldr	r2, [pc, #72]	@ (80092b0 <prvInitialiseTaskLists+0x60>)
 8009268:	4413      	add	r3, r2
 800926a:	4618      	mov	r0, r3
 800926c:	f7ff f9be 	bl	80085ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	3301      	adds	r3, #1
 8009274:	607b      	str	r3, [r7, #4]
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2b06      	cmp	r3, #6
 800927a:	d9ef      	bls.n	800925c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800927c:	480d      	ldr	r0, [pc, #52]	@ (80092b4 <prvInitialiseTaskLists+0x64>)
 800927e:	f7ff f9b5 	bl	80085ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009282:	480d      	ldr	r0, [pc, #52]	@ (80092b8 <prvInitialiseTaskLists+0x68>)
 8009284:	f7ff f9b2 	bl	80085ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009288:	480c      	ldr	r0, [pc, #48]	@ (80092bc <prvInitialiseTaskLists+0x6c>)
 800928a:	f7ff f9af 	bl	80085ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800928e:	480c      	ldr	r0, [pc, #48]	@ (80092c0 <prvInitialiseTaskLists+0x70>)
 8009290:	f7ff f9ac 	bl	80085ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009294:	480b      	ldr	r0, [pc, #44]	@ (80092c4 <prvInitialiseTaskLists+0x74>)
 8009296:	f7ff f9a9 	bl	80085ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800929a:	4b0b      	ldr	r3, [pc, #44]	@ (80092c8 <prvInitialiseTaskLists+0x78>)
 800929c:	4a05      	ldr	r2, [pc, #20]	@ (80092b4 <prvInitialiseTaskLists+0x64>)
 800929e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80092a0:	4b0a      	ldr	r3, [pc, #40]	@ (80092cc <prvInitialiseTaskLists+0x7c>)
 80092a2:	4a05      	ldr	r2, [pc, #20]	@ (80092b8 <prvInitialiseTaskLists+0x68>)
 80092a4:	601a      	str	r2, [r3, #0]
}
 80092a6:	bf00      	nop
 80092a8:	3708      	adds	r7, #8
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}
 80092ae:	bf00      	nop
 80092b0:	20008a38 	.word	0x20008a38
 80092b4:	20008ac4 	.word	0x20008ac4
 80092b8:	20008ad8 	.word	0x20008ad8
 80092bc:	20008af4 	.word	0x20008af4
 80092c0:	20008b08 	.word	0x20008b08
 80092c4:	20008b20 	.word	0x20008b20
 80092c8:	20008aec 	.word	0x20008aec
 80092cc:	20008af0 	.word	0x20008af0

080092d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b082      	sub	sp, #8
 80092d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80092d6:	e019      	b.n	800930c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80092d8:	f000 fc1e 	bl	8009b18 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092dc:	4b10      	ldr	r3, [pc, #64]	@ (8009320 <prvCheckTasksWaitingTermination+0x50>)
 80092de:	68db      	ldr	r3, [r3, #12]
 80092e0:	68db      	ldr	r3, [r3, #12]
 80092e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	3304      	adds	r3, #4
 80092e8:	4618      	mov	r0, r3
 80092ea:	f7ff fa09 	bl	8008700 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80092ee:	4b0d      	ldr	r3, [pc, #52]	@ (8009324 <prvCheckTasksWaitingTermination+0x54>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	3b01      	subs	r3, #1
 80092f4:	4a0b      	ldr	r2, [pc, #44]	@ (8009324 <prvCheckTasksWaitingTermination+0x54>)
 80092f6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80092f8:	4b0b      	ldr	r3, [pc, #44]	@ (8009328 <prvCheckTasksWaitingTermination+0x58>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	3b01      	subs	r3, #1
 80092fe:	4a0a      	ldr	r2, [pc, #40]	@ (8009328 <prvCheckTasksWaitingTermination+0x58>)
 8009300:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009302:	f000 fc3b 	bl	8009b7c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	f000 f810 	bl	800932c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800930c:	4b06      	ldr	r3, [pc, #24]	@ (8009328 <prvCheckTasksWaitingTermination+0x58>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d1e1      	bne.n	80092d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009314:	bf00      	nop
 8009316:	bf00      	nop
 8009318:	3708      	adds	r7, #8
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}
 800931e:	bf00      	nop
 8009320:	20008b08 	.word	0x20008b08
 8009324:	20008b34 	.word	0x20008b34
 8009328:	20008b1c 	.word	0x20008b1c

0800932c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800932c:	b580      	push	{r7, lr}
 800932e:	b084      	sub	sp, #16
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	334c      	adds	r3, #76	@ 0x4c
 8009338:	4618      	mov	r0, r3
 800933a:	f00e fd97 	bl	8017e6c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8009344:	2b00      	cmp	r3, #0
 8009346:	d108      	bne.n	800935a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800934c:	4618      	mov	r0, r3
 800934e:	f000 fdd3 	bl	8009ef8 <vPortFree>
				vPortFree( pxTCB );
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f000 fdd0 	bl	8009ef8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009358:	e019      	b.n	800938e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8009360:	2b01      	cmp	r3, #1
 8009362:	d103      	bne.n	800936c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	f000 fdc7 	bl	8009ef8 <vPortFree>
	}
 800936a:	e010      	b.n	800938e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8009372:	2b02      	cmp	r3, #2
 8009374:	d00b      	beq.n	800938e <prvDeleteTCB+0x62>
	__asm volatile
 8009376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800937a:	f383 8811 	msr	BASEPRI, r3
 800937e:	f3bf 8f6f 	isb	sy
 8009382:	f3bf 8f4f 	dsb	sy
 8009386:	60fb      	str	r3, [r7, #12]
}
 8009388:	bf00      	nop
 800938a:	bf00      	nop
 800938c:	e7fd      	b.n	800938a <prvDeleteTCB+0x5e>
	}
 800938e:	bf00      	nop
 8009390:	3710      	adds	r7, #16
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}
	...

08009398 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009398:	b480      	push	{r7}
 800939a:	b083      	sub	sp, #12
 800939c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800939e:	4b0c      	ldr	r3, [pc, #48]	@ (80093d0 <prvResetNextTaskUnblockTime+0x38>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d104      	bne.n	80093b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80093a8:	4b0a      	ldr	r3, [pc, #40]	@ (80093d4 <prvResetNextTaskUnblockTime+0x3c>)
 80093aa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80093ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80093b0:	e008      	b.n	80093c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093b2:	4b07      	ldr	r3, [pc, #28]	@ (80093d0 <prvResetNextTaskUnblockTime+0x38>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	68db      	ldr	r3, [r3, #12]
 80093b8:	68db      	ldr	r3, [r3, #12]
 80093ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	685b      	ldr	r3, [r3, #4]
 80093c0:	4a04      	ldr	r2, [pc, #16]	@ (80093d4 <prvResetNextTaskUnblockTime+0x3c>)
 80093c2:	6013      	str	r3, [r2, #0]
}
 80093c4:	bf00      	nop
 80093c6:	370c      	adds	r7, #12
 80093c8:	46bd      	mov	sp, r7
 80093ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ce:	4770      	bx	lr
 80093d0:	20008aec 	.word	0x20008aec
 80093d4:	20008b54 	.word	0x20008b54

080093d8 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b086      	sub	sp, #24
 80093dc:	af00      	add	r7, sp, #0
 80093de:	60f8      	str	r0, [r7, #12]
 80093e0:	60b9      	str	r1, [r7, #8]
 80093e2:	607a      	str	r2, [r7, #4]
 80093e4:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80093e6:	f000 fb97 	bl	8009b18 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80093ea:	4b29      	ldr	r3, [pc, #164]	@ (8009490 <xTaskNotifyWait+0xb8>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 80093f2:	b2db      	uxtb	r3, r3
 80093f4:	2b02      	cmp	r3, #2
 80093f6:	d01c      	beq.n	8009432 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80093f8:	4b25      	ldr	r3, [pc, #148]	@ (8009490 <xTaskNotifyWait+0xb8>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 8009400:	68fa      	ldr	r2, [r7, #12]
 8009402:	43d2      	mvns	r2, r2
 8009404:	400a      	ands	r2, r1
 8009406:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800940a:	4b21      	ldr	r3, [pc, #132]	@ (8009490 <xTaskNotifyWait+0xb8>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	2201      	movs	r2, #1
 8009410:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d00b      	beq.n	8009432 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800941a:	2101      	movs	r1, #1
 800941c:	6838      	ldr	r0, [r7, #0]
 800941e:	f000 f9e3 	bl	80097e8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8009422:	4b1c      	ldr	r3, [pc, #112]	@ (8009494 <xTaskNotifyWait+0xbc>)
 8009424:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009428:	601a      	str	r2, [r3, #0]
 800942a:	f3bf 8f4f 	dsb	sy
 800942e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009432:	f000 fba3 	bl	8009b7c <vPortExitCritical>

		taskENTER_CRITICAL();
 8009436:	f000 fb6f 	bl	8009b18 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d005      	beq.n	800944c <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8009440:	4b13      	ldr	r3, [pc, #76]	@ (8009490 <xTaskNotifyWait+0xb8>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800944c:	4b10      	ldr	r3, [pc, #64]	@ (8009490 <xTaskNotifyWait+0xb8>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8009454:	b2db      	uxtb	r3, r3
 8009456:	2b02      	cmp	r3, #2
 8009458:	d002      	beq.n	8009460 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800945a:	2300      	movs	r3, #0
 800945c:	617b      	str	r3, [r7, #20]
 800945e:	e00a      	b.n	8009476 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8009460:	4b0b      	ldr	r3, [pc, #44]	@ (8009490 <xTaskNotifyWait+0xb8>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 8009468:	68ba      	ldr	r2, [r7, #8]
 800946a:	43d2      	mvns	r2, r2
 800946c:	400a      	ands	r2, r1
 800946e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
				xReturn = pdTRUE;
 8009472:	2301      	movs	r3, #1
 8009474:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009476:	4b06      	ldr	r3, [pc, #24]	@ (8009490 <xTaskNotifyWait+0xb8>)
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	2200      	movs	r2, #0
 800947c:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
		}
		taskEXIT_CRITICAL();
 8009480:	f000 fb7c 	bl	8009b7c <vPortExitCritical>

		return xReturn;
 8009484:	697b      	ldr	r3, [r7, #20]
	}
 8009486:	4618      	mov	r0, r3
 8009488:	3718      	adds	r7, #24
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}
 800948e:	bf00      	nop
 8009490:	20008a34 	.word	0x20008a34
 8009494:	e000ed04 	.word	0xe000ed04

08009498 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8009498:	b580      	push	{r7, lr}
 800949a:	b08a      	sub	sp, #40	@ 0x28
 800949c:	af00      	add	r7, sp, #0
 800949e:	60f8      	str	r0, [r7, #12]
 80094a0:	60b9      	str	r1, [r7, #8]
 80094a2:	603b      	str	r3, [r7, #0]
 80094a4:	4613      	mov	r3, r2
 80094a6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80094a8:	2301      	movs	r3, #1
 80094aa:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d10b      	bne.n	80094ca <xTaskGenericNotify+0x32>
	__asm volatile
 80094b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094b6:	f383 8811 	msr	BASEPRI, r3
 80094ba:	f3bf 8f6f 	isb	sy
 80094be:	f3bf 8f4f 	dsb	sy
 80094c2:	61bb      	str	r3, [r7, #24]
}
 80094c4:	bf00      	nop
 80094c6:	bf00      	nop
 80094c8:	e7fd      	b.n	80094c6 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80094ce:	f000 fb23 	bl	8009b18 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d004      	beq.n	80094e2 <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80094d8:	6a3b      	ldr	r3, [r7, #32]
 80094da:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80094e2:	6a3b      	ldr	r3, [r7, #32]
 80094e4:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 80094e8:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80094ea:	6a3b      	ldr	r3, [r7, #32]
 80094ec:	2202      	movs	r2, #2
 80094ee:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

			switch( eAction )
 80094f2:	79fb      	ldrb	r3, [r7, #7]
 80094f4:	2b04      	cmp	r3, #4
 80094f6:	d82e      	bhi.n	8009556 <xTaskGenericNotify+0xbe>
 80094f8:	a201      	add	r2, pc, #4	@ (adr r2, 8009500 <xTaskGenericNotify+0x68>)
 80094fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094fe:	bf00      	nop
 8009500:	0800957b 	.word	0x0800957b
 8009504:	08009515 	.word	0x08009515
 8009508:	08009527 	.word	0x08009527
 800950c:	08009537 	.word	0x08009537
 8009510:	08009541 	.word	0x08009541
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8009514:	6a3b      	ldr	r3, [r7, #32]
 8009516:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	431a      	orrs	r2, r3
 800951e:	6a3b      	ldr	r3, [r7, #32]
 8009520:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8009524:	e02c      	b.n	8009580 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8009526:	6a3b      	ldr	r3, [r7, #32]
 8009528:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800952c:	1c5a      	adds	r2, r3, #1
 800952e:	6a3b      	ldr	r3, [r7, #32]
 8009530:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8009534:	e024      	b.n	8009580 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8009536:	6a3b      	ldr	r3, [r7, #32]
 8009538:	68ba      	ldr	r2, [r7, #8]
 800953a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 800953e:	e01f      	b.n	8009580 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009540:	7ffb      	ldrb	r3, [r7, #31]
 8009542:	2b02      	cmp	r3, #2
 8009544:	d004      	beq.n	8009550 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8009546:	6a3b      	ldr	r3, [r7, #32]
 8009548:	68ba      	ldr	r2, [r7, #8]
 800954a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800954e:	e017      	b.n	8009580 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 8009550:	2300      	movs	r3, #0
 8009552:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8009554:	e014      	b.n	8009580 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8009556:	6a3b      	ldr	r3, [r7, #32]
 8009558:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800955c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009560:	d00d      	beq.n	800957e <xTaskGenericNotify+0xe6>
	__asm volatile
 8009562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009566:	f383 8811 	msr	BASEPRI, r3
 800956a:	f3bf 8f6f 	isb	sy
 800956e:	f3bf 8f4f 	dsb	sy
 8009572:	617b      	str	r3, [r7, #20]
}
 8009574:	bf00      	nop
 8009576:	bf00      	nop
 8009578:	e7fd      	b.n	8009576 <xTaskGenericNotify+0xde>
					break;
 800957a:	bf00      	nop
 800957c:	e000      	b.n	8009580 <xTaskGenericNotify+0xe8>

					break;
 800957e:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009580:	7ffb      	ldrb	r3, [r7, #31]
 8009582:	2b01      	cmp	r3, #1
 8009584:	d13a      	bne.n	80095fc <xTaskGenericNotify+0x164>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009586:	6a3b      	ldr	r3, [r7, #32]
 8009588:	3304      	adds	r3, #4
 800958a:	4618      	mov	r0, r3
 800958c:	f7ff f8b8 	bl	8008700 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8009590:	6a3b      	ldr	r3, [r7, #32]
 8009592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009594:	2201      	movs	r2, #1
 8009596:	409a      	lsls	r2, r3
 8009598:	4b1c      	ldr	r3, [pc, #112]	@ (800960c <xTaskGenericNotify+0x174>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	4313      	orrs	r3, r2
 800959e:	4a1b      	ldr	r2, [pc, #108]	@ (800960c <xTaskGenericNotify+0x174>)
 80095a0:	6013      	str	r3, [r2, #0]
 80095a2:	6a3b      	ldr	r3, [r7, #32]
 80095a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095a6:	4613      	mov	r3, r2
 80095a8:	009b      	lsls	r3, r3, #2
 80095aa:	4413      	add	r3, r2
 80095ac:	009b      	lsls	r3, r3, #2
 80095ae:	4a18      	ldr	r2, [pc, #96]	@ (8009610 <xTaskGenericNotify+0x178>)
 80095b0:	441a      	add	r2, r3
 80095b2:	6a3b      	ldr	r3, [r7, #32]
 80095b4:	3304      	adds	r3, #4
 80095b6:	4619      	mov	r1, r3
 80095b8:	4610      	mov	r0, r2
 80095ba:	f7ff f844 	bl	8008646 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80095be:	6a3b      	ldr	r3, [r7, #32]
 80095c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d00b      	beq.n	80095de <xTaskGenericNotify+0x146>
	__asm volatile
 80095c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095ca:	f383 8811 	msr	BASEPRI, r3
 80095ce:	f3bf 8f6f 	isb	sy
 80095d2:	f3bf 8f4f 	dsb	sy
 80095d6:	613b      	str	r3, [r7, #16]
}
 80095d8:	bf00      	nop
 80095da:	bf00      	nop
 80095dc:	e7fd      	b.n	80095da <xTaskGenericNotify+0x142>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80095de:	6a3b      	ldr	r3, [r7, #32]
 80095e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095e2:	4b0c      	ldr	r3, [pc, #48]	@ (8009614 <xTaskGenericNotify+0x17c>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095e8:	429a      	cmp	r2, r3
 80095ea:	d907      	bls.n	80095fc <xTaskGenericNotify+0x164>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80095ec:	4b0a      	ldr	r3, [pc, #40]	@ (8009618 <xTaskGenericNotify+0x180>)
 80095ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80095f2:	601a      	str	r2, [r3, #0]
 80095f4:	f3bf 8f4f 	dsb	sy
 80095f8:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80095fc:	f000 fabe 	bl	8009b7c <vPortExitCritical>

		return xReturn;
 8009600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8009602:	4618      	mov	r0, r3
 8009604:	3728      	adds	r7, #40	@ 0x28
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}
 800960a:	bf00      	nop
 800960c:	20008b3c 	.word	0x20008b3c
 8009610:	20008a38 	.word	0x20008a38
 8009614:	20008a34 	.word	0x20008a34
 8009618:	e000ed04 	.word	0xe000ed04

0800961c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800961c:	b580      	push	{r7, lr}
 800961e:	b08e      	sub	sp, #56	@ 0x38
 8009620:	af00      	add	r7, sp, #0
 8009622:	60f8      	str	r0, [r7, #12]
 8009624:	60b9      	str	r1, [r7, #8]
 8009626:	603b      	str	r3, [r7, #0]
 8009628:	4613      	mov	r3, r2
 800962a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800962c:	2301      	movs	r3, #1
 800962e:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d10b      	bne.n	800964e <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 8009636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800963a:	f383 8811 	msr	BASEPRI, r3
 800963e:	f3bf 8f6f 	isb	sy
 8009642:	f3bf 8f4f 	dsb	sy
 8009646:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009648:	bf00      	nop
 800964a:	bf00      	nop
 800964c:	e7fd      	b.n	800964a <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800964e:	f000 fb43 	bl	8009cd8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	633b      	str	r3, [r7, #48]	@ 0x30

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009656:	f3ef 8211 	mrs	r2, BASEPRI
 800965a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800965e:	f383 8811 	msr	BASEPRI, r3
 8009662:	f3bf 8f6f 	isb	sy
 8009666:	f3bf 8f4f 	dsb	sy
 800966a:	623a      	str	r2, [r7, #32]
 800966c:	61fb      	str	r3, [r7, #28]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800966e:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009670:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d004      	beq.n	8009682 <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800967a:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009684:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8009688:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800968c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800968e:	2202      	movs	r2, #2
 8009690:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

			switch( eAction )
 8009694:	79fb      	ldrb	r3, [r7, #7]
 8009696:	2b04      	cmp	r3, #4
 8009698:	d82e      	bhi.n	80096f8 <xTaskGenericNotifyFromISR+0xdc>
 800969a:	a201      	add	r2, pc, #4	@ (adr r2, 80096a0 <xTaskGenericNotifyFromISR+0x84>)
 800969c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096a0:	0800971d 	.word	0x0800971d
 80096a4:	080096b5 	.word	0x080096b5
 80096a8:	080096c7 	.word	0x080096c7
 80096ac:	080096d7 	.word	0x080096d7
 80096b0:	080096e1 	.word	0x080096e1
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80096b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096b6:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	431a      	orrs	r2, r3
 80096be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096c0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 80096c4:	e02d      	b.n	8009722 <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80096c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80096cc:	1c5a      	adds	r2, r3, #1
 80096ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096d0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 80096d4:	e025      	b.n	8009722 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80096d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096d8:	68ba      	ldr	r2, [r7, #8]
 80096da:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 80096de:	e020      	b.n	8009722 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80096e0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80096e4:	2b02      	cmp	r3, #2
 80096e6:	d004      	beq.n	80096f2 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80096e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096ea:	68ba      	ldr	r2, [r7, #8]
 80096ec:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80096f0:	e017      	b.n	8009722 <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 80096f2:	2300      	movs	r3, #0
 80096f4:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 80096f6:	e014      	b.n	8009722 <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80096f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80096fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009702:	d00d      	beq.n	8009720 <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 8009704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009708:	f383 8811 	msr	BASEPRI, r3
 800970c:	f3bf 8f6f 	isb	sy
 8009710:	f3bf 8f4f 	dsb	sy
 8009714:	61bb      	str	r3, [r7, #24]
}
 8009716:	bf00      	nop
 8009718:	bf00      	nop
 800971a:	e7fd      	b.n	8009718 <xTaskGenericNotifyFromISR+0xfc>
					break;
 800971c:	bf00      	nop
 800971e:	e000      	b.n	8009722 <xTaskGenericNotifyFromISR+0x106>
					break;
 8009720:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009722:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009726:	2b01      	cmp	r3, #1
 8009728:	d146      	bne.n	80097b8 <xTaskGenericNotifyFromISR+0x19c>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800972a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800972c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800972e:	2b00      	cmp	r3, #0
 8009730:	d00b      	beq.n	800974a <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 8009732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009736:	f383 8811 	msr	BASEPRI, r3
 800973a:	f3bf 8f6f 	isb	sy
 800973e:	f3bf 8f4f 	dsb	sy
 8009742:	617b      	str	r3, [r7, #20]
}
 8009744:	bf00      	nop
 8009746:	bf00      	nop
 8009748:	e7fd      	b.n	8009746 <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800974a:	4b21      	ldr	r3, [pc, #132]	@ (80097d0 <xTaskGenericNotifyFromISR+0x1b4>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d11c      	bne.n	800978c <xTaskGenericNotifyFromISR+0x170>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009754:	3304      	adds	r3, #4
 8009756:	4618      	mov	r0, r3
 8009758:	f7fe ffd2 	bl	8008700 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800975c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800975e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009760:	2201      	movs	r2, #1
 8009762:	409a      	lsls	r2, r3
 8009764:	4b1b      	ldr	r3, [pc, #108]	@ (80097d4 <xTaskGenericNotifyFromISR+0x1b8>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	4313      	orrs	r3, r2
 800976a:	4a1a      	ldr	r2, [pc, #104]	@ (80097d4 <xTaskGenericNotifyFromISR+0x1b8>)
 800976c:	6013      	str	r3, [r2, #0]
 800976e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009770:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009772:	4613      	mov	r3, r2
 8009774:	009b      	lsls	r3, r3, #2
 8009776:	4413      	add	r3, r2
 8009778:	009b      	lsls	r3, r3, #2
 800977a:	4a17      	ldr	r2, [pc, #92]	@ (80097d8 <xTaskGenericNotifyFromISR+0x1bc>)
 800977c:	441a      	add	r2, r3
 800977e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009780:	3304      	adds	r3, #4
 8009782:	4619      	mov	r1, r3
 8009784:	4610      	mov	r0, r2
 8009786:	f7fe ff5e 	bl	8008646 <vListInsertEnd>
 800978a:	e005      	b.n	8009798 <xTaskGenericNotifyFromISR+0x17c>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800978c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800978e:	3318      	adds	r3, #24
 8009790:	4619      	mov	r1, r3
 8009792:	4812      	ldr	r0, [pc, #72]	@ (80097dc <xTaskGenericNotifyFromISR+0x1c0>)
 8009794:	f7fe ff57 	bl	8008646 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800979a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800979c:	4b10      	ldr	r3, [pc, #64]	@ (80097e0 <xTaskGenericNotifyFromISR+0x1c4>)
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097a2:	429a      	cmp	r2, r3
 80097a4:	d908      	bls.n	80097b8 <xTaskGenericNotifyFromISR+0x19c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80097a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d002      	beq.n	80097b2 <xTaskGenericNotifyFromISR+0x196>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80097ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80097ae:	2201      	movs	r2, #1
 80097b0:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80097b2:	4b0c      	ldr	r3, [pc, #48]	@ (80097e4 <xTaskGenericNotifyFromISR+0x1c8>)
 80097b4:	2201      	movs	r2, #1
 80097b6:	601a      	str	r2, [r3, #0]
 80097b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097ba:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80097bc:	693b      	ldr	r3, [r7, #16]
 80097be:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80097c2:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80097c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 80097c6:	4618      	mov	r0, r3
 80097c8:	3738      	adds	r7, #56	@ 0x38
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd80      	pop	{r7, pc}
 80097ce:	bf00      	nop
 80097d0:	20008b5c 	.word	0x20008b5c
 80097d4:	20008b3c 	.word	0x20008b3c
 80097d8:	20008a38 	.word	0x20008a38
 80097dc:	20008af4 	.word	0x20008af4
 80097e0:	20008a34 	.word	0x20008a34
 80097e4:	20008b48 	.word	0x20008b48

080097e8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b084      	sub	sp, #16
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
 80097f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80097f2:	4b29      	ldr	r3, [pc, #164]	@ (8009898 <prvAddCurrentTaskToDelayedList+0xb0>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80097f8:	4b28      	ldr	r3, [pc, #160]	@ (800989c <prvAddCurrentTaskToDelayedList+0xb4>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	3304      	adds	r3, #4
 80097fe:	4618      	mov	r0, r3
 8009800:	f7fe ff7e 	bl	8008700 <uxListRemove>
 8009804:	4603      	mov	r3, r0
 8009806:	2b00      	cmp	r3, #0
 8009808:	d10b      	bne.n	8009822 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800980a:	4b24      	ldr	r3, [pc, #144]	@ (800989c <prvAddCurrentTaskToDelayedList+0xb4>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009810:	2201      	movs	r2, #1
 8009812:	fa02 f303 	lsl.w	r3, r2, r3
 8009816:	43da      	mvns	r2, r3
 8009818:	4b21      	ldr	r3, [pc, #132]	@ (80098a0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	4013      	ands	r3, r2
 800981e:	4a20      	ldr	r2, [pc, #128]	@ (80098a0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009820:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009828:	d10a      	bne.n	8009840 <prvAddCurrentTaskToDelayedList+0x58>
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d007      	beq.n	8009840 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009830:	4b1a      	ldr	r3, [pc, #104]	@ (800989c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	3304      	adds	r3, #4
 8009836:	4619      	mov	r1, r3
 8009838:	481a      	ldr	r0, [pc, #104]	@ (80098a4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800983a:	f7fe ff04 	bl	8008646 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800983e:	e026      	b.n	800988e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009840:	68fa      	ldr	r2, [r7, #12]
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	4413      	add	r3, r2
 8009846:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009848:	4b14      	ldr	r3, [pc, #80]	@ (800989c <prvAddCurrentTaskToDelayedList+0xb4>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	68ba      	ldr	r2, [r7, #8]
 800984e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009850:	68ba      	ldr	r2, [r7, #8]
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	429a      	cmp	r2, r3
 8009856:	d209      	bcs.n	800986c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009858:	4b13      	ldr	r3, [pc, #76]	@ (80098a8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800985a:	681a      	ldr	r2, [r3, #0]
 800985c:	4b0f      	ldr	r3, [pc, #60]	@ (800989c <prvAddCurrentTaskToDelayedList+0xb4>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	3304      	adds	r3, #4
 8009862:	4619      	mov	r1, r3
 8009864:	4610      	mov	r0, r2
 8009866:	f7fe ff12 	bl	800868e <vListInsert>
}
 800986a:	e010      	b.n	800988e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800986c:	4b0f      	ldr	r3, [pc, #60]	@ (80098ac <prvAddCurrentTaskToDelayedList+0xc4>)
 800986e:	681a      	ldr	r2, [r3, #0]
 8009870:	4b0a      	ldr	r3, [pc, #40]	@ (800989c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	3304      	adds	r3, #4
 8009876:	4619      	mov	r1, r3
 8009878:	4610      	mov	r0, r2
 800987a:	f7fe ff08 	bl	800868e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800987e:	4b0c      	ldr	r3, [pc, #48]	@ (80098b0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	68ba      	ldr	r2, [r7, #8]
 8009884:	429a      	cmp	r2, r3
 8009886:	d202      	bcs.n	800988e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009888:	4a09      	ldr	r2, [pc, #36]	@ (80098b0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	6013      	str	r3, [r2, #0]
}
 800988e:	bf00      	nop
 8009890:	3710      	adds	r7, #16
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}
 8009896:	bf00      	nop
 8009898:	20008b38 	.word	0x20008b38
 800989c:	20008a34 	.word	0x20008a34
 80098a0:	20008b3c 	.word	0x20008b3c
 80098a4:	20008b20 	.word	0x20008b20
 80098a8:	20008af0 	.word	0x20008af0
 80098ac:	20008aec 	.word	0x20008aec
 80098b0:	20008b54 	.word	0x20008b54

080098b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80098b4:	b480      	push	{r7}
 80098b6:	b085      	sub	sp, #20
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	60f8      	str	r0, [r7, #12]
 80098bc:	60b9      	str	r1, [r7, #8]
 80098be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	3b04      	subs	r3, #4
 80098c4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80098cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	3b04      	subs	r3, #4
 80098d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	f023 0201 	bic.w	r2, r3, #1
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	3b04      	subs	r3, #4
 80098e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80098e4:	4a0c      	ldr	r2, [pc, #48]	@ (8009918 <pxPortInitialiseStack+0x64>)
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	3b14      	subs	r3, #20
 80098ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80098f0:	687a      	ldr	r2, [r7, #4]
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	3b04      	subs	r3, #4
 80098fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	f06f 0202 	mvn.w	r2, #2
 8009902:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	3b20      	subs	r3, #32
 8009908:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800990a:	68fb      	ldr	r3, [r7, #12]
}
 800990c:	4618      	mov	r0, r3
 800990e:	3714      	adds	r7, #20
 8009910:	46bd      	mov	sp, r7
 8009912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009916:	4770      	bx	lr
 8009918:	0800991d 	.word	0x0800991d

0800991c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800991c:	b480      	push	{r7}
 800991e:	b085      	sub	sp, #20
 8009920:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009922:	2300      	movs	r3, #0
 8009924:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009926:	4b13      	ldr	r3, [pc, #76]	@ (8009974 <prvTaskExitError+0x58>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800992e:	d00b      	beq.n	8009948 <prvTaskExitError+0x2c>
	__asm volatile
 8009930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009934:	f383 8811 	msr	BASEPRI, r3
 8009938:	f3bf 8f6f 	isb	sy
 800993c:	f3bf 8f4f 	dsb	sy
 8009940:	60fb      	str	r3, [r7, #12]
}
 8009942:	bf00      	nop
 8009944:	bf00      	nop
 8009946:	e7fd      	b.n	8009944 <prvTaskExitError+0x28>
	__asm volatile
 8009948:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800994c:	f383 8811 	msr	BASEPRI, r3
 8009950:	f3bf 8f6f 	isb	sy
 8009954:	f3bf 8f4f 	dsb	sy
 8009958:	60bb      	str	r3, [r7, #8]
}
 800995a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800995c:	bf00      	nop
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d0fc      	beq.n	800995e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009964:	bf00      	nop
 8009966:	bf00      	nop
 8009968:	3714      	adds	r7, #20
 800996a:	46bd      	mov	sp, r7
 800996c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009970:	4770      	bx	lr
 8009972:	bf00      	nop
 8009974:	20000018 	.word	0x20000018
	...

08009980 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009980:	4b07      	ldr	r3, [pc, #28]	@ (80099a0 <pxCurrentTCBConst2>)
 8009982:	6819      	ldr	r1, [r3, #0]
 8009984:	6808      	ldr	r0, [r1, #0]
 8009986:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800998a:	f380 8809 	msr	PSP, r0
 800998e:	f3bf 8f6f 	isb	sy
 8009992:	f04f 0000 	mov.w	r0, #0
 8009996:	f380 8811 	msr	BASEPRI, r0
 800999a:	4770      	bx	lr
 800999c:	f3af 8000 	nop.w

080099a0 <pxCurrentTCBConst2>:
 80099a0:	20008a34 	.word	0x20008a34
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80099a4:	bf00      	nop
 80099a6:	bf00      	nop

080099a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80099a8:	4808      	ldr	r0, [pc, #32]	@ (80099cc <prvPortStartFirstTask+0x24>)
 80099aa:	6800      	ldr	r0, [r0, #0]
 80099ac:	6800      	ldr	r0, [r0, #0]
 80099ae:	f380 8808 	msr	MSP, r0
 80099b2:	f04f 0000 	mov.w	r0, #0
 80099b6:	f380 8814 	msr	CONTROL, r0
 80099ba:	b662      	cpsie	i
 80099bc:	b661      	cpsie	f
 80099be:	f3bf 8f4f 	dsb	sy
 80099c2:	f3bf 8f6f 	isb	sy
 80099c6:	df00      	svc	0
 80099c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80099ca:	bf00      	nop
 80099cc:	e000ed08 	.word	0xe000ed08

080099d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b086      	sub	sp, #24
 80099d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80099d6:	4b47      	ldr	r3, [pc, #284]	@ (8009af4 <xPortStartScheduler+0x124>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	4a47      	ldr	r2, [pc, #284]	@ (8009af8 <xPortStartScheduler+0x128>)
 80099dc:	4293      	cmp	r3, r2
 80099de:	d10b      	bne.n	80099f8 <xPortStartScheduler+0x28>
	__asm volatile
 80099e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099e4:	f383 8811 	msr	BASEPRI, r3
 80099e8:	f3bf 8f6f 	isb	sy
 80099ec:	f3bf 8f4f 	dsb	sy
 80099f0:	613b      	str	r3, [r7, #16]
}
 80099f2:	bf00      	nop
 80099f4:	bf00      	nop
 80099f6:	e7fd      	b.n	80099f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80099f8:	4b3e      	ldr	r3, [pc, #248]	@ (8009af4 <xPortStartScheduler+0x124>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	4a3f      	ldr	r2, [pc, #252]	@ (8009afc <xPortStartScheduler+0x12c>)
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d10b      	bne.n	8009a1a <xPortStartScheduler+0x4a>
	__asm volatile
 8009a02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a06:	f383 8811 	msr	BASEPRI, r3
 8009a0a:	f3bf 8f6f 	isb	sy
 8009a0e:	f3bf 8f4f 	dsb	sy
 8009a12:	60fb      	str	r3, [r7, #12]
}
 8009a14:	bf00      	nop
 8009a16:	bf00      	nop
 8009a18:	e7fd      	b.n	8009a16 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009a1a:	4b39      	ldr	r3, [pc, #228]	@ (8009b00 <xPortStartScheduler+0x130>)
 8009a1c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	781b      	ldrb	r3, [r3, #0]
 8009a22:	b2db      	uxtb	r3, r3
 8009a24:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009a26:	697b      	ldr	r3, [r7, #20]
 8009a28:	22ff      	movs	r2, #255	@ 0xff
 8009a2a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009a2c:	697b      	ldr	r3, [r7, #20]
 8009a2e:	781b      	ldrb	r3, [r3, #0]
 8009a30:	b2db      	uxtb	r3, r3
 8009a32:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009a34:	78fb      	ldrb	r3, [r7, #3]
 8009a36:	b2db      	uxtb	r3, r3
 8009a38:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009a3c:	b2da      	uxtb	r2, r3
 8009a3e:	4b31      	ldr	r3, [pc, #196]	@ (8009b04 <xPortStartScheduler+0x134>)
 8009a40:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009a42:	4b31      	ldr	r3, [pc, #196]	@ (8009b08 <xPortStartScheduler+0x138>)
 8009a44:	2207      	movs	r2, #7
 8009a46:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009a48:	e009      	b.n	8009a5e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8009a4a:	4b2f      	ldr	r3, [pc, #188]	@ (8009b08 <xPortStartScheduler+0x138>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	3b01      	subs	r3, #1
 8009a50:	4a2d      	ldr	r2, [pc, #180]	@ (8009b08 <xPortStartScheduler+0x138>)
 8009a52:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009a54:	78fb      	ldrb	r3, [r7, #3]
 8009a56:	b2db      	uxtb	r3, r3
 8009a58:	005b      	lsls	r3, r3, #1
 8009a5a:	b2db      	uxtb	r3, r3
 8009a5c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009a5e:	78fb      	ldrb	r3, [r7, #3]
 8009a60:	b2db      	uxtb	r3, r3
 8009a62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a66:	2b80      	cmp	r3, #128	@ 0x80
 8009a68:	d0ef      	beq.n	8009a4a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009a6a:	4b27      	ldr	r3, [pc, #156]	@ (8009b08 <xPortStartScheduler+0x138>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	f1c3 0307 	rsb	r3, r3, #7
 8009a72:	2b04      	cmp	r3, #4
 8009a74:	d00b      	beq.n	8009a8e <xPortStartScheduler+0xbe>
	__asm volatile
 8009a76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a7a:	f383 8811 	msr	BASEPRI, r3
 8009a7e:	f3bf 8f6f 	isb	sy
 8009a82:	f3bf 8f4f 	dsb	sy
 8009a86:	60bb      	str	r3, [r7, #8]
}
 8009a88:	bf00      	nop
 8009a8a:	bf00      	nop
 8009a8c:	e7fd      	b.n	8009a8a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009a8e:	4b1e      	ldr	r3, [pc, #120]	@ (8009b08 <xPortStartScheduler+0x138>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	021b      	lsls	r3, r3, #8
 8009a94:	4a1c      	ldr	r2, [pc, #112]	@ (8009b08 <xPortStartScheduler+0x138>)
 8009a96:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009a98:	4b1b      	ldr	r3, [pc, #108]	@ (8009b08 <xPortStartScheduler+0x138>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009aa0:	4a19      	ldr	r2, [pc, #100]	@ (8009b08 <xPortStartScheduler+0x138>)
 8009aa2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	b2da      	uxtb	r2, r3
 8009aa8:	697b      	ldr	r3, [r7, #20]
 8009aaa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009aac:	4b17      	ldr	r3, [pc, #92]	@ (8009b0c <xPortStartScheduler+0x13c>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	4a16      	ldr	r2, [pc, #88]	@ (8009b0c <xPortStartScheduler+0x13c>)
 8009ab2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009ab6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009ab8:	4b14      	ldr	r3, [pc, #80]	@ (8009b0c <xPortStartScheduler+0x13c>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	4a13      	ldr	r2, [pc, #76]	@ (8009b0c <xPortStartScheduler+0x13c>)
 8009abe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009ac2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009ac4:	f000 f8da 	bl	8009c7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009ac8:	4b11      	ldr	r3, [pc, #68]	@ (8009b10 <xPortStartScheduler+0x140>)
 8009aca:	2200      	movs	r2, #0
 8009acc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009ace:	f000 f8f9 	bl	8009cc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009ad2:	4b10      	ldr	r3, [pc, #64]	@ (8009b14 <xPortStartScheduler+0x144>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	4a0f      	ldr	r2, [pc, #60]	@ (8009b14 <xPortStartScheduler+0x144>)
 8009ad8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009adc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009ade:	f7ff ff63 	bl	80099a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009ae2:	f7ff fb11 	bl	8009108 <vTaskSwitchContext>
	prvTaskExitError();
 8009ae6:	f7ff ff19 	bl	800991c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009aea:	2300      	movs	r3, #0
}
 8009aec:	4618      	mov	r0, r3
 8009aee:	3718      	adds	r7, #24
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bd80      	pop	{r7, pc}
 8009af4:	e000ed00 	.word	0xe000ed00
 8009af8:	410fc271 	.word	0x410fc271
 8009afc:	410fc270 	.word	0x410fc270
 8009b00:	e000e400 	.word	0xe000e400
 8009b04:	20008b60 	.word	0x20008b60
 8009b08:	20008b64 	.word	0x20008b64
 8009b0c:	e000ed20 	.word	0xe000ed20
 8009b10:	20000018 	.word	0x20000018
 8009b14:	e000ef34 	.word	0xe000ef34

08009b18 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009b18:	b480      	push	{r7}
 8009b1a:	b083      	sub	sp, #12
 8009b1c:	af00      	add	r7, sp, #0
	__asm volatile
 8009b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b22:	f383 8811 	msr	BASEPRI, r3
 8009b26:	f3bf 8f6f 	isb	sy
 8009b2a:	f3bf 8f4f 	dsb	sy
 8009b2e:	607b      	str	r3, [r7, #4]
}
 8009b30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009b32:	4b10      	ldr	r3, [pc, #64]	@ (8009b74 <vPortEnterCritical+0x5c>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	3301      	adds	r3, #1
 8009b38:	4a0e      	ldr	r2, [pc, #56]	@ (8009b74 <vPortEnterCritical+0x5c>)
 8009b3a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009b3c:	4b0d      	ldr	r3, [pc, #52]	@ (8009b74 <vPortEnterCritical+0x5c>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	2b01      	cmp	r3, #1
 8009b42:	d110      	bne.n	8009b66 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009b44:	4b0c      	ldr	r3, [pc, #48]	@ (8009b78 <vPortEnterCritical+0x60>)
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	b2db      	uxtb	r3, r3
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d00b      	beq.n	8009b66 <vPortEnterCritical+0x4e>
	__asm volatile
 8009b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b52:	f383 8811 	msr	BASEPRI, r3
 8009b56:	f3bf 8f6f 	isb	sy
 8009b5a:	f3bf 8f4f 	dsb	sy
 8009b5e:	603b      	str	r3, [r7, #0]
}
 8009b60:	bf00      	nop
 8009b62:	bf00      	nop
 8009b64:	e7fd      	b.n	8009b62 <vPortEnterCritical+0x4a>
	}
}
 8009b66:	bf00      	nop
 8009b68:	370c      	adds	r7, #12
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b70:	4770      	bx	lr
 8009b72:	bf00      	nop
 8009b74:	20000018 	.word	0x20000018
 8009b78:	e000ed04 	.word	0xe000ed04

08009b7c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009b7c:	b480      	push	{r7}
 8009b7e:	b083      	sub	sp, #12
 8009b80:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009b82:	4b12      	ldr	r3, [pc, #72]	@ (8009bcc <vPortExitCritical+0x50>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d10b      	bne.n	8009ba2 <vPortExitCritical+0x26>
	__asm volatile
 8009b8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b8e:	f383 8811 	msr	BASEPRI, r3
 8009b92:	f3bf 8f6f 	isb	sy
 8009b96:	f3bf 8f4f 	dsb	sy
 8009b9a:	607b      	str	r3, [r7, #4]
}
 8009b9c:	bf00      	nop
 8009b9e:	bf00      	nop
 8009ba0:	e7fd      	b.n	8009b9e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8009bcc <vPortExitCritical+0x50>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	3b01      	subs	r3, #1
 8009ba8:	4a08      	ldr	r2, [pc, #32]	@ (8009bcc <vPortExitCritical+0x50>)
 8009baa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009bac:	4b07      	ldr	r3, [pc, #28]	@ (8009bcc <vPortExitCritical+0x50>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d105      	bne.n	8009bc0 <vPortExitCritical+0x44>
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	f383 8811 	msr	BASEPRI, r3
}
 8009bbe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009bc0:	bf00      	nop
 8009bc2:	370c      	adds	r7, #12
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bca:	4770      	bx	lr
 8009bcc:	20000018 	.word	0x20000018

08009bd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009bd0:	f3ef 8009 	mrs	r0, PSP
 8009bd4:	f3bf 8f6f 	isb	sy
 8009bd8:	4b15      	ldr	r3, [pc, #84]	@ (8009c30 <pxCurrentTCBConst>)
 8009bda:	681a      	ldr	r2, [r3, #0]
 8009bdc:	f01e 0f10 	tst.w	lr, #16
 8009be0:	bf08      	it	eq
 8009be2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009be6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bea:	6010      	str	r0, [r2, #0]
 8009bec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009bf0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009bf4:	f380 8811 	msr	BASEPRI, r0
 8009bf8:	f3bf 8f4f 	dsb	sy
 8009bfc:	f3bf 8f6f 	isb	sy
 8009c00:	f7ff fa82 	bl	8009108 <vTaskSwitchContext>
 8009c04:	f04f 0000 	mov.w	r0, #0
 8009c08:	f380 8811 	msr	BASEPRI, r0
 8009c0c:	bc09      	pop	{r0, r3}
 8009c0e:	6819      	ldr	r1, [r3, #0]
 8009c10:	6808      	ldr	r0, [r1, #0]
 8009c12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c16:	f01e 0f10 	tst.w	lr, #16
 8009c1a:	bf08      	it	eq
 8009c1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009c20:	f380 8809 	msr	PSP, r0
 8009c24:	f3bf 8f6f 	isb	sy
 8009c28:	4770      	bx	lr
 8009c2a:	bf00      	nop
 8009c2c:	f3af 8000 	nop.w

08009c30 <pxCurrentTCBConst>:
 8009c30:	20008a34 	.word	0x20008a34
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009c34:	bf00      	nop
 8009c36:	bf00      	nop

08009c38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b082      	sub	sp, #8
 8009c3c:	af00      	add	r7, sp, #0
	__asm volatile
 8009c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c42:	f383 8811 	msr	BASEPRI, r3
 8009c46:	f3bf 8f6f 	isb	sy
 8009c4a:	f3bf 8f4f 	dsb	sy
 8009c4e:	607b      	str	r3, [r7, #4]
}
 8009c50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009c52:	f7ff f99f 	bl	8008f94 <xTaskIncrementTick>
 8009c56:	4603      	mov	r3, r0
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d003      	beq.n	8009c64 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009c5c:	4b06      	ldr	r3, [pc, #24]	@ (8009c78 <SysTick_Handler+0x40>)
 8009c5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c62:	601a      	str	r2, [r3, #0]
 8009c64:	2300      	movs	r3, #0
 8009c66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	f383 8811 	msr	BASEPRI, r3
}
 8009c6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009c70:	bf00      	nop
 8009c72:	3708      	adds	r7, #8
 8009c74:	46bd      	mov	sp, r7
 8009c76:	bd80      	pop	{r7, pc}
 8009c78:	e000ed04 	.word	0xe000ed04

08009c7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009c80:	4b0b      	ldr	r3, [pc, #44]	@ (8009cb0 <vPortSetupTimerInterrupt+0x34>)
 8009c82:	2200      	movs	r2, #0
 8009c84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009c86:	4b0b      	ldr	r3, [pc, #44]	@ (8009cb4 <vPortSetupTimerInterrupt+0x38>)
 8009c88:	2200      	movs	r2, #0
 8009c8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009c8c:	4b0a      	ldr	r3, [pc, #40]	@ (8009cb8 <vPortSetupTimerInterrupt+0x3c>)
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	4a0a      	ldr	r2, [pc, #40]	@ (8009cbc <vPortSetupTimerInterrupt+0x40>)
 8009c92:	fba2 2303 	umull	r2, r3, r2, r3
 8009c96:	099b      	lsrs	r3, r3, #6
 8009c98:	4a09      	ldr	r2, [pc, #36]	@ (8009cc0 <vPortSetupTimerInterrupt+0x44>)
 8009c9a:	3b01      	subs	r3, #1
 8009c9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009c9e:	4b04      	ldr	r3, [pc, #16]	@ (8009cb0 <vPortSetupTimerInterrupt+0x34>)
 8009ca0:	2207      	movs	r2, #7
 8009ca2:	601a      	str	r2, [r3, #0]
}
 8009ca4:	bf00      	nop
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cac:	4770      	bx	lr
 8009cae:	bf00      	nop
 8009cb0:	e000e010 	.word	0xe000e010
 8009cb4:	e000e018 	.word	0xe000e018
 8009cb8:	20000004 	.word	0x20000004
 8009cbc:	10624dd3 	.word	0x10624dd3
 8009cc0:	e000e014 	.word	0xe000e014

08009cc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009cc4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009cd4 <vPortEnableVFP+0x10>
 8009cc8:	6801      	ldr	r1, [r0, #0]
 8009cca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009cce:	6001      	str	r1, [r0, #0]
 8009cd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009cd2:	bf00      	nop
 8009cd4:	e000ed88 	.word	0xe000ed88

08009cd8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009cd8:	b480      	push	{r7}
 8009cda:	b085      	sub	sp, #20
 8009cdc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009cde:	f3ef 8305 	mrs	r3, IPSR
 8009ce2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	2b0f      	cmp	r3, #15
 8009ce8:	d915      	bls.n	8009d16 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009cea:	4a18      	ldr	r2, [pc, #96]	@ (8009d4c <vPortValidateInterruptPriority+0x74>)
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	4413      	add	r3, r2
 8009cf0:	781b      	ldrb	r3, [r3, #0]
 8009cf2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009cf4:	4b16      	ldr	r3, [pc, #88]	@ (8009d50 <vPortValidateInterruptPriority+0x78>)
 8009cf6:	781b      	ldrb	r3, [r3, #0]
 8009cf8:	7afa      	ldrb	r2, [r7, #11]
 8009cfa:	429a      	cmp	r2, r3
 8009cfc:	d20b      	bcs.n	8009d16 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8009cfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d02:	f383 8811 	msr	BASEPRI, r3
 8009d06:	f3bf 8f6f 	isb	sy
 8009d0a:	f3bf 8f4f 	dsb	sy
 8009d0e:	607b      	str	r3, [r7, #4]
}
 8009d10:	bf00      	nop
 8009d12:	bf00      	nop
 8009d14:	e7fd      	b.n	8009d12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009d16:	4b0f      	ldr	r3, [pc, #60]	@ (8009d54 <vPortValidateInterruptPriority+0x7c>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009d1e:	4b0e      	ldr	r3, [pc, #56]	@ (8009d58 <vPortValidateInterruptPriority+0x80>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	429a      	cmp	r2, r3
 8009d24:	d90b      	bls.n	8009d3e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009d26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d2a:	f383 8811 	msr	BASEPRI, r3
 8009d2e:	f3bf 8f6f 	isb	sy
 8009d32:	f3bf 8f4f 	dsb	sy
 8009d36:	603b      	str	r3, [r7, #0]
}
 8009d38:	bf00      	nop
 8009d3a:	bf00      	nop
 8009d3c:	e7fd      	b.n	8009d3a <vPortValidateInterruptPriority+0x62>
	}
 8009d3e:	bf00      	nop
 8009d40:	3714      	adds	r7, #20
 8009d42:	46bd      	mov	sp, r7
 8009d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d48:	4770      	bx	lr
 8009d4a:	bf00      	nop
 8009d4c:	e000e3f0 	.word	0xe000e3f0
 8009d50:	20008b60 	.word	0x20008b60
 8009d54:	e000ed0c 	.word	0xe000ed0c
 8009d58:	20008b64 	.word	0x20008b64

08009d5c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b08a      	sub	sp, #40	@ 0x28
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009d64:	2300      	movs	r3, #0
 8009d66:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009d68:	f7ff f868 	bl	8008e3c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009d6c:	4b5c      	ldr	r3, [pc, #368]	@ (8009ee0 <pvPortMalloc+0x184>)
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d101      	bne.n	8009d78 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009d74:	f000 f924 	bl	8009fc0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009d78:	4b5a      	ldr	r3, [pc, #360]	@ (8009ee4 <pvPortMalloc+0x188>)
 8009d7a:	681a      	ldr	r2, [r3, #0]
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	4013      	ands	r3, r2
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	f040 8095 	bne.w	8009eb0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d01e      	beq.n	8009dca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009d8c:	2208      	movs	r2, #8
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	4413      	add	r3, r2
 8009d92:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f003 0307 	and.w	r3, r3, #7
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d015      	beq.n	8009dca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f023 0307 	bic.w	r3, r3, #7
 8009da4:	3308      	adds	r3, #8
 8009da6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f003 0307 	and.w	r3, r3, #7
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d00b      	beq.n	8009dca <pvPortMalloc+0x6e>
	__asm volatile
 8009db2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009db6:	f383 8811 	msr	BASEPRI, r3
 8009dba:	f3bf 8f6f 	isb	sy
 8009dbe:	f3bf 8f4f 	dsb	sy
 8009dc2:	617b      	str	r3, [r7, #20]
}
 8009dc4:	bf00      	nop
 8009dc6:	bf00      	nop
 8009dc8:	e7fd      	b.n	8009dc6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d06f      	beq.n	8009eb0 <pvPortMalloc+0x154>
 8009dd0:	4b45      	ldr	r3, [pc, #276]	@ (8009ee8 <pvPortMalloc+0x18c>)
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	687a      	ldr	r2, [r7, #4]
 8009dd6:	429a      	cmp	r2, r3
 8009dd8:	d86a      	bhi.n	8009eb0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009dda:	4b44      	ldr	r3, [pc, #272]	@ (8009eec <pvPortMalloc+0x190>)
 8009ddc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009dde:	4b43      	ldr	r3, [pc, #268]	@ (8009eec <pvPortMalloc+0x190>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009de4:	e004      	b.n	8009df0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009de8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009df2:	685b      	ldr	r3, [r3, #4]
 8009df4:	687a      	ldr	r2, [r7, #4]
 8009df6:	429a      	cmp	r2, r3
 8009df8:	d903      	bls.n	8009e02 <pvPortMalloc+0xa6>
 8009dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d1f1      	bne.n	8009de6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009e02:	4b37      	ldr	r3, [pc, #220]	@ (8009ee0 <pvPortMalloc+0x184>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e08:	429a      	cmp	r2, r3
 8009e0a:	d051      	beq.n	8009eb0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009e0c:	6a3b      	ldr	r3, [r7, #32]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	2208      	movs	r2, #8
 8009e12:	4413      	add	r3, r2
 8009e14:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e18:	681a      	ldr	r2, [r3, #0]
 8009e1a:	6a3b      	ldr	r3, [r7, #32]
 8009e1c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e20:	685a      	ldr	r2, [r3, #4]
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	1ad2      	subs	r2, r2, r3
 8009e26:	2308      	movs	r3, #8
 8009e28:	005b      	lsls	r3, r3, #1
 8009e2a:	429a      	cmp	r2, r3
 8009e2c:	d920      	bls.n	8009e70 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009e2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	4413      	add	r3, r2
 8009e34:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e36:	69bb      	ldr	r3, [r7, #24]
 8009e38:	f003 0307 	and.w	r3, r3, #7
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d00b      	beq.n	8009e58 <pvPortMalloc+0xfc>
	__asm volatile
 8009e40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e44:	f383 8811 	msr	BASEPRI, r3
 8009e48:	f3bf 8f6f 	isb	sy
 8009e4c:	f3bf 8f4f 	dsb	sy
 8009e50:	613b      	str	r3, [r7, #16]
}
 8009e52:	bf00      	nop
 8009e54:	bf00      	nop
 8009e56:	e7fd      	b.n	8009e54 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e5a:	685a      	ldr	r2, [r3, #4]
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	1ad2      	subs	r2, r2, r3
 8009e60:	69bb      	ldr	r3, [r7, #24]
 8009e62:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e66:	687a      	ldr	r2, [r7, #4]
 8009e68:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009e6a:	69b8      	ldr	r0, [r7, #24]
 8009e6c:	f000 f90a 	bl	800a084 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009e70:	4b1d      	ldr	r3, [pc, #116]	@ (8009ee8 <pvPortMalloc+0x18c>)
 8009e72:	681a      	ldr	r2, [r3, #0]
 8009e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e76:	685b      	ldr	r3, [r3, #4]
 8009e78:	1ad3      	subs	r3, r2, r3
 8009e7a:	4a1b      	ldr	r2, [pc, #108]	@ (8009ee8 <pvPortMalloc+0x18c>)
 8009e7c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009e7e:	4b1a      	ldr	r3, [pc, #104]	@ (8009ee8 <pvPortMalloc+0x18c>)
 8009e80:	681a      	ldr	r2, [r3, #0]
 8009e82:	4b1b      	ldr	r3, [pc, #108]	@ (8009ef0 <pvPortMalloc+0x194>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	429a      	cmp	r2, r3
 8009e88:	d203      	bcs.n	8009e92 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009e8a:	4b17      	ldr	r3, [pc, #92]	@ (8009ee8 <pvPortMalloc+0x18c>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	4a18      	ldr	r2, [pc, #96]	@ (8009ef0 <pvPortMalloc+0x194>)
 8009e90:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e94:	685a      	ldr	r2, [r3, #4]
 8009e96:	4b13      	ldr	r3, [pc, #76]	@ (8009ee4 <pvPortMalloc+0x188>)
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	431a      	orrs	r2, r3
 8009e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e9e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009ea6:	4b13      	ldr	r3, [pc, #76]	@ (8009ef4 <pvPortMalloc+0x198>)
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	3301      	adds	r3, #1
 8009eac:	4a11      	ldr	r2, [pc, #68]	@ (8009ef4 <pvPortMalloc+0x198>)
 8009eae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009eb0:	f7fe ffd2 	bl	8008e58 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009eb4:	69fb      	ldr	r3, [r7, #28]
 8009eb6:	f003 0307 	and.w	r3, r3, #7
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d00b      	beq.n	8009ed6 <pvPortMalloc+0x17a>
	__asm volatile
 8009ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ec2:	f383 8811 	msr	BASEPRI, r3
 8009ec6:	f3bf 8f6f 	isb	sy
 8009eca:	f3bf 8f4f 	dsb	sy
 8009ece:	60fb      	str	r3, [r7, #12]
}
 8009ed0:	bf00      	nop
 8009ed2:	bf00      	nop
 8009ed4:	e7fd      	b.n	8009ed2 <pvPortMalloc+0x176>
	return pvReturn;
 8009ed6:	69fb      	ldr	r3, [r7, #28]
}
 8009ed8:	4618      	mov	r0, r3
 8009eda:	3728      	adds	r7, #40	@ 0x28
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bd80      	pop	{r7, pc}
 8009ee0:	2000c770 	.word	0x2000c770
 8009ee4:	2000c784 	.word	0x2000c784
 8009ee8:	2000c774 	.word	0x2000c774
 8009eec:	2000c768 	.word	0x2000c768
 8009ef0:	2000c778 	.word	0x2000c778
 8009ef4:	2000c77c 	.word	0x2000c77c

08009ef8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b086      	sub	sp, #24
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d04f      	beq.n	8009faa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009f0a:	2308      	movs	r3, #8
 8009f0c:	425b      	negs	r3, r3
 8009f0e:	697a      	ldr	r2, [r7, #20]
 8009f10:	4413      	add	r3, r2
 8009f12:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009f14:	697b      	ldr	r3, [r7, #20]
 8009f16:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009f18:	693b      	ldr	r3, [r7, #16]
 8009f1a:	685a      	ldr	r2, [r3, #4]
 8009f1c:	4b25      	ldr	r3, [pc, #148]	@ (8009fb4 <vPortFree+0xbc>)
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	4013      	ands	r3, r2
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d10b      	bne.n	8009f3e <vPortFree+0x46>
	__asm volatile
 8009f26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f2a:	f383 8811 	msr	BASEPRI, r3
 8009f2e:	f3bf 8f6f 	isb	sy
 8009f32:	f3bf 8f4f 	dsb	sy
 8009f36:	60fb      	str	r3, [r7, #12]
}
 8009f38:	bf00      	nop
 8009f3a:	bf00      	nop
 8009f3c:	e7fd      	b.n	8009f3a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009f3e:	693b      	ldr	r3, [r7, #16]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d00b      	beq.n	8009f5e <vPortFree+0x66>
	__asm volatile
 8009f46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f4a:	f383 8811 	msr	BASEPRI, r3
 8009f4e:	f3bf 8f6f 	isb	sy
 8009f52:	f3bf 8f4f 	dsb	sy
 8009f56:	60bb      	str	r3, [r7, #8]
}
 8009f58:	bf00      	nop
 8009f5a:	bf00      	nop
 8009f5c:	e7fd      	b.n	8009f5a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009f5e:	693b      	ldr	r3, [r7, #16]
 8009f60:	685a      	ldr	r2, [r3, #4]
 8009f62:	4b14      	ldr	r3, [pc, #80]	@ (8009fb4 <vPortFree+0xbc>)
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	4013      	ands	r3, r2
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d01e      	beq.n	8009faa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009f6c:	693b      	ldr	r3, [r7, #16]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d11a      	bne.n	8009faa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009f74:	693b      	ldr	r3, [r7, #16]
 8009f76:	685a      	ldr	r2, [r3, #4]
 8009f78:	4b0e      	ldr	r3, [pc, #56]	@ (8009fb4 <vPortFree+0xbc>)
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	43db      	mvns	r3, r3
 8009f7e:	401a      	ands	r2, r3
 8009f80:	693b      	ldr	r3, [r7, #16]
 8009f82:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009f84:	f7fe ff5a 	bl	8008e3c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009f88:	693b      	ldr	r3, [r7, #16]
 8009f8a:	685a      	ldr	r2, [r3, #4]
 8009f8c:	4b0a      	ldr	r3, [pc, #40]	@ (8009fb8 <vPortFree+0xc0>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	4413      	add	r3, r2
 8009f92:	4a09      	ldr	r2, [pc, #36]	@ (8009fb8 <vPortFree+0xc0>)
 8009f94:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009f96:	6938      	ldr	r0, [r7, #16]
 8009f98:	f000 f874 	bl	800a084 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009f9c:	4b07      	ldr	r3, [pc, #28]	@ (8009fbc <vPortFree+0xc4>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	3301      	adds	r3, #1
 8009fa2:	4a06      	ldr	r2, [pc, #24]	@ (8009fbc <vPortFree+0xc4>)
 8009fa4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009fa6:	f7fe ff57 	bl	8008e58 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009faa:	bf00      	nop
 8009fac:	3718      	adds	r7, #24
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bd80      	pop	{r7, pc}
 8009fb2:	bf00      	nop
 8009fb4:	2000c784 	.word	0x2000c784
 8009fb8:	2000c774 	.word	0x2000c774
 8009fbc:	2000c780 	.word	0x2000c780

08009fc0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009fc0:	b480      	push	{r7}
 8009fc2:	b085      	sub	sp, #20
 8009fc4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009fc6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8009fca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009fcc:	4b27      	ldr	r3, [pc, #156]	@ (800a06c <prvHeapInit+0xac>)
 8009fce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	f003 0307 	and.w	r3, r3, #7
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d00c      	beq.n	8009ff4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	3307      	adds	r3, #7
 8009fde:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	f023 0307 	bic.w	r3, r3, #7
 8009fe6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009fe8:	68ba      	ldr	r2, [r7, #8]
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	1ad3      	subs	r3, r2, r3
 8009fee:	4a1f      	ldr	r2, [pc, #124]	@ (800a06c <prvHeapInit+0xac>)
 8009ff0:	4413      	add	r3, r2
 8009ff2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009ff8:	4a1d      	ldr	r2, [pc, #116]	@ (800a070 <prvHeapInit+0xb0>)
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009ffe:	4b1c      	ldr	r3, [pc, #112]	@ (800a070 <prvHeapInit+0xb0>)
 800a000:	2200      	movs	r2, #0
 800a002:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	68ba      	ldr	r2, [r7, #8]
 800a008:	4413      	add	r3, r2
 800a00a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a00c:	2208      	movs	r2, #8
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	1a9b      	subs	r3, r3, r2
 800a012:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	f023 0307 	bic.w	r3, r3, #7
 800a01a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	4a15      	ldr	r2, [pc, #84]	@ (800a074 <prvHeapInit+0xb4>)
 800a020:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a022:	4b14      	ldr	r3, [pc, #80]	@ (800a074 <prvHeapInit+0xb4>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	2200      	movs	r2, #0
 800a028:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a02a:	4b12      	ldr	r3, [pc, #72]	@ (800a074 <prvHeapInit+0xb4>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	2200      	movs	r2, #0
 800a030:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	68fa      	ldr	r2, [r7, #12]
 800a03a:	1ad2      	subs	r2, r2, r3
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a040:	4b0c      	ldr	r3, [pc, #48]	@ (800a074 <prvHeapInit+0xb4>)
 800a042:	681a      	ldr	r2, [r3, #0]
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	685b      	ldr	r3, [r3, #4]
 800a04c:	4a0a      	ldr	r2, [pc, #40]	@ (800a078 <prvHeapInit+0xb8>)
 800a04e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	685b      	ldr	r3, [r3, #4]
 800a054:	4a09      	ldr	r2, [pc, #36]	@ (800a07c <prvHeapInit+0xbc>)
 800a056:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a058:	4b09      	ldr	r3, [pc, #36]	@ (800a080 <prvHeapInit+0xc0>)
 800a05a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a05e:	601a      	str	r2, [r3, #0]
}
 800a060:	bf00      	nop
 800a062:	3714      	adds	r7, #20
 800a064:	46bd      	mov	sp, r7
 800a066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06a:	4770      	bx	lr
 800a06c:	20008b68 	.word	0x20008b68
 800a070:	2000c768 	.word	0x2000c768
 800a074:	2000c770 	.word	0x2000c770
 800a078:	2000c778 	.word	0x2000c778
 800a07c:	2000c774 	.word	0x2000c774
 800a080:	2000c784 	.word	0x2000c784

0800a084 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a084:	b480      	push	{r7}
 800a086:	b085      	sub	sp, #20
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a08c:	4b28      	ldr	r3, [pc, #160]	@ (800a130 <prvInsertBlockIntoFreeList+0xac>)
 800a08e:	60fb      	str	r3, [r7, #12]
 800a090:	e002      	b.n	800a098 <prvInsertBlockIntoFreeList+0x14>
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	60fb      	str	r3, [r7, #12]
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	687a      	ldr	r2, [r7, #4]
 800a09e:	429a      	cmp	r2, r3
 800a0a0:	d8f7      	bhi.n	800a092 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	685b      	ldr	r3, [r3, #4]
 800a0aa:	68ba      	ldr	r2, [r7, #8]
 800a0ac:	4413      	add	r3, r2
 800a0ae:	687a      	ldr	r2, [r7, #4]
 800a0b0:	429a      	cmp	r2, r3
 800a0b2:	d108      	bne.n	800a0c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	685a      	ldr	r2, [r3, #4]
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	685b      	ldr	r3, [r3, #4]
 800a0bc:	441a      	add	r2, r3
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	685b      	ldr	r3, [r3, #4]
 800a0ce:	68ba      	ldr	r2, [r7, #8]
 800a0d0:	441a      	add	r2, r3
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	429a      	cmp	r2, r3
 800a0d8:	d118      	bne.n	800a10c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	681a      	ldr	r2, [r3, #0]
 800a0de:	4b15      	ldr	r3, [pc, #84]	@ (800a134 <prvInsertBlockIntoFreeList+0xb0>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	429a      	cmp	r2, r3
 800a0e4:	d00d      	beq.n	800a102 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	685a      	ldr	r2, [r3, #4]
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	685b      	ldr	r3, [r3, #4]
 800a0f0:	441a      	add	r2, r3
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	681a      	ldr	r2, [r3, #0]
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	601a      	str	r2, [r3, #0]
 800a100:	e008      	b.n	800a114 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a102:	4b0c      	ldr	r3, [pc, #48]	@ (800a134 <prvInsertBlockIntoFreeList+0xb0>)
 800a104:	681a      	ldr	r2, [r3, #0]
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	601a      	str	r2, [r3, #0]
 800a10a:	e003      	b.n	800a114 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	681a      	ldr	r2, [r3, #0]
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a114:	68fa      	ldr	r2, [r7, #12]
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	429a      	cmp	r2, r3
 800a11a:	d002      	beq.n	800a122 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	687a      	ldr	r2, [r7, #4]
 800a120:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a122:	bf00      	nop
 800a124:	3714      	adds	r7, #20
 800a126:	46bd      	mov	sp, r7
 800a128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12c:	4770      	bx	lr
 800a12e:	bf00      	nop
 800a130:	2000c768 	.word	0x2000c768
 800a134:	2000c770 	.word	0x2000c770

0800a138 <rcl_get_zero_initialized_node>:
 800a138:	4a03      	ldr	r2, [pc, #12]	@ (800a148 <rcl_get_zero_initialized_node+0x10>)
 800a13a:	4603      	mov	r3, r0
 800a13c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a140:	e883 0003 	stmia.w	r3, {r0, r1}
 800a144:	4618      	mov	r0, r3
 800a146:	4770      	bx	lr
 800a148:	08019fd4 	.word	0x08019fd4

0800a14c <rcl_node_init>:
 800a14c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a150:	b0a9      	sub	sp, #164	@ 0xa4
 800a152:	4604      	mov	r4, r0
 800a154:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 800a158:	a823      	add	r0, sp, #140	@ 0x8c
 800a15a:	460e      	mov	r6, r1
 800a15c:	4615      	mov	r5, r2
 800a15e:	461f      	mov	r7, r3
 800a160:	f006 fa08 	bl	8010574 <rcl_guard_condition_get_default_options>
 800a164:	f1b8 0f00 	cmp.w	r8, #0
 800a168:	f000 80e6 	beq.w	800a338 <rcl_node_init+0x1ec>
 800a16c:	4640      	mov	r0, r8
 800a16e:	f001 fbdf 	bl	800b930 <rcutils_allocator_is_valid>
 800a172:	2800      	cmp	r0, #0
 800a174:	f000 80e0 	beq.w	800a338 <rcl_node_init+0x1ec>
 800a178:	2e00      	cmp	r6, #0
 800a17a:	f000 80dd 	beq.w	800a338 <rcl_node_init+0x1ec>
 800a17e:	2d00      	cmp	r5, #0
 800a180:	f000 80da 	beq.w	800a338 <rcl_node_init+0x1ec>
 800a184:	2c00      	cmp	r4, #0
 800a186:	f000 80d7 	beq.w	800a338 <rcl_node_init+0x1ec>
 800a18a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800a18e:	f1b9 0f00 	cmp.w	r9, #0
 800a192:	f040 80fd 	bne.w	800a390 <rcl_node_init+0x244>
 800a196:	2f00      	cmp	r7, #0
 800a198:	f000 80ce 	beq.w	800a338 <rcl_node_init+0x1ec>
 800a19c:	4638      	mov	r0, r7
 800a19e:	f006 f8f3 	bl	8010388 <rcl_context_is_valid>
 800a1a2:	4682      	mov	sl, r0
 800a1a4:	2800      	cmp	r0, #0
 800a1a6:	f000 80cd 	beq.w	800a344 <rcl_node_init+0x1f8>
 800a1aa:	464a      	mov	r2, r9
 800a1ac:	a922      	add	r1, sp, #136	@ 0x88
 800a1ae:	4630      	mov	r0, r6
 800a1b0:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 800a1b4:	f001 fe54 	bl	800be60 <rmw_validate_node_name>
 800a1b8:	4681      	mov	r9, r0
 800a1ba:	2800      	cmp	r0, #0
 800a1bc:	f040 80be 	bne.w	800a33c <rcl_node_init+0x1f0>
 800a1c0:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800a1c2:	2800      	cmp	r0, #0
 800a1c4:	f040 80f0 	bne.w	800a3a8 <rcl_node_init+0x25c>
 800a1c8:	4628      	mov	r0, r5
 800a1ca:	f7f6 f881 	bl	80002d0 <strlen>
 800a1ce:	2800      	cmp	r0, #0
 800a1d0:	f040 80bb 	bne.w	800a34a <rcl_node_init+0x1fe>
 800a1d4:	4d7c      	ldr	r5, [pc, #496]	@ (800a3c8 <rcl_node_init+0x27c>)
 800a1d6:	a922      	add	r1, sp, #136	@ 0x88
 800a1d8:	2200      	movs	r2, #0
 800a1da:	4628      	mov	r0, r5
 800a1dc:	f001 fe22 	bl	800be24 <rmw_validate_namespace>
 800a1e0:	4681      	mov	r9, r0
 800a1e2:	2800      	cmp	r0, #0
 800a1e4:	f040 80aa 	bne.w	800a33c <rcl_node_init+0x1f0>
 800a1e8:	4682      	mov	sl, r0
 800a1ea:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800a1ec:	2800      	cmp	r0, #0
 800a1ee:	f040 80e0 	bne.w	800a3b2 <rcl_node_init+0x266>
 800a1f2:	f8d8 3000 	ldr.w	r3, [r8]
 800a1f6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800a1fa:	2078      	movs	r0, #120	@ 0x78
 800a1fc:	4798      	blx	r3
 800a1fe:	4681      	mov	r9, r0
 800a200:	6060      	str	r0, [r4, #4]
 800a202:	2800      	cmp	r0, #0
 800a204:	f000 80ca 	beq.w	800a39c <rcl_node_init+0x250>
 800a208:	2200      	movs	r2, #0
 800a20a:	2300      	movs	r3, #0
 800a20c:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 800a210:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 800a214:	a808      	add	r0, sp, #32
 800a216:	f000 f939 	bl	800a48c <rcl_node_get_default_options>
 800a21a:	a908      	add	r1, sp, #32
 800a21c:	4648      	mov	r0, r9
 800a21e:	2268      	movs	r2, #104	@ 0x68
 800a220:	f00d fef5 	bl	801800e <memcpy>
 800a224:	6861      	ldr	r1, [r4, #4]
 800a226:	6027      	str	r7, [r4, #0]
 800a228:	4640      	mov	r0, r8
 800a22a:	f000 f93d 	bl	800a4a8 <rcl_node_options_copy>
 800a22e:	2800      	cmp	r0, #0
 800a230:	d158      	bne.n	800a2e4 <rcl_node_init+0x198>
 800a232:	4628      	mov	r0, r5
 800a234:	f7f6 f84c 	bl	80002d0 <strlen>
 800a238:	4428      	add	r0, r5
 800a23a:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800a23e:	e9cd 5603 	strd	r5, r6, [sp, #12]
 800a242:	2b2f      	cmp	r3, #47	@ 0x2f
 800a244:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800a248:	9300      	str	r3, [sp, #0]
 800a24a:	bf0c      	ite	eq
 800a24c:	4b5f      	ldreq	r3, [pc, #380]	@ (800a3cc <rcl_node_init+0x280>)
 800a24e:	4b60      	ldrne	r3, [pc, #384]	@ (800a3d0 <rcl_node_init+0x284>)
 800a250:	9302      	str	r3, [sp, #8]
 800a252:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a256:	9301      	str	r3, [sp, #4]
 800a258:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800a25c:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800a260:	f001 fbbe 	bl	800b9e0 <rcutils_format_string_limit>
 800a264:	6823      	ldr	r3, [r4, #0]
 800a266:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 800a26a:	6818      	ldr	r0, [r3, #0]
 800a26c:	4631      	mov	r1, r6
 800a26e:	3028      	adds	r0, #40	@ 0x28
 800a270:	462a      	mov	r2, r5
 800a272:	6866      	ldr	r6, [r4, #4]
 800a274:	f001 fee2 	bl	800c03c <rmw_create_node>
 800a278:	6863      	ldr	r3, [r4, #4]
 800a27a:	66b0      	str	r0, [r6, #104]	@ 0x68
 800a27c:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800a27e:	2800      	cmp	r0, #0
 800a280:	d032      	beq.n	800a2e8 <rcl_node_init+0x19c>
 800a282:	f001 ff6f 	bl	800c164 <rmw_node_get_graph_guard_condition>
 800a286:	4681      	mov	r9, r0
 800a288:	b360      	cbz	r0, 800a2e4 <rcl_node_init+0x198>
 800a28a:	f8d8 3000 	ldr.w	r3, [r8]
 800a28e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800a292:	6866      	ldr	r6, [r4, #4]
 800a294:	2008      	movs	r0, #8
 800a296:	4798      	blx	r3
 800a298:	6863      	ldr	r3, [r4, #4]
 800a29a:	66f0      	str	r0, [r6, #108]	@ 0x6c
 800a29c:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 800a2a0:	f1bb 0f00 	cmp.w	fp, #0
 800a2a4:	d020      	beq.n	800a2e8 <rcl_node_init+0x19c>
 800a2a6:	a806      	add	r0, sp, #24
 800a2a8:	f006 f8d4 	bl	8010454 <rcl_get_zero_initialized_guard_condition>
 800a2ac:	a806      	add	r0, sp, #24
 800a2ae:	c803      	ldmia	r0, {r0, r1}
 800a2b0:	6863      	ldr	r3, [r4, #4]
 800a2b2:	46c4      	mov	ip, r8
 800a2b4:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 800a2b8:	e88b 0003 	stmia.w	fp, {r0, r1}
 800a2bc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a2c0:	ae23      	add	r6, sp, #140	@ 0x8c
 800a2c2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a2c4:	f8dc 3000 	ldr.w	r3, [ip]
 800a2c8:	6033      	str	r3, [r6, #0]
 800a2ca:	ab28      	add	r3, sp, #160	@ 0xa0
 800a2cc:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800a2d0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800a2d4:	4649      	mov	r1, r9
 800a2d6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a2d8:	463a      	mov	r2, r7
 800a2da:	4670      	mov	r0, lr
 800a2dc:	f006 f8c4 	bl	8010468 <rcl_guard_condition_init_from_rmw>
 800a2e0:	4681      	mov	r9, r0
 800a2e2:	b328      	cbz	r0, 800a330 <rcl_node_init+0x1e4>
 800a2e4:	6863      	ldr	r3, [r4, #4]
 800a2e6:	b1f3      	cbz	r3, 800a326 <rcl_node_init+0x1da>
 800a2e8:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800a2ea:	b128      	cbz	r0, 800a2f8 <rcl_node_init+0x1ac>
 800a2ec:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a2f0:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800a2f4:	4798      	blx	r3
 800a2f6:	6863      	ldr	r3, [r4, #4]
 800a2f8:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800a2fa:	b110      	cbz	r0, 800a302 <rcl_node_init+0x1b6>
 800a2fc:	f001 feb6 	bl	800c06c <rmw_destroy_node>
 800a300:	6863      	ldr	r3, [r4, #4]
 800a302:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800a304:	b148      	cbz	r0, 800a31a <rcl_node_init+0x1ce>
 800a306:	f006 f90f 	bl	8010528 <rcl_guard_condition_fini>
 800a30a:	6863      	ldr	r3, [r4, #4]
 800a30c:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800a310:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800a312:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a316:	4798      	blx	r3
 800a318:	6863      	ldr	r3, [r4, #4]
 800a31a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800a31e:	4618      	mov	r0, r3
 800a320:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a324:	4798      	blx	r3
 800a326:	2300      	movs	r3, #0
 800a328:	e9c4 3300 	strd	r3, r3, [r4]
 800a32c:	f04f 0901 	mov.w	r9, #1
 800a330:	f1ba 0f00 	cmp.w	sl, #0
 800a334:	d125      	bne.n	800a382 <rcl_node_init+0x236>
 800a336:	e001      	b.n	800a33c <rcl_node_init+0x1f0>
 800a338:	f04f 090b 	mov.w	r9, #11
 800a33c:	4648      	mov	r0, r9
 800a33e:	b029      	add	sp, #164	@ 0xa4
 800a340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a344:	f04f 0965 	mov.w	r9, #101	@ 0x65
 800a348:	e7f8      	b.n	800a33c <rcl_node_init+0x1f0>
 800a34a:	782b      	ldrb	r3, [r5, #0]
 800a34c:	2b2f      	cmp	r3, #47	@ 0x2f
 800a34e:	f43f af42 	beq.w	800a1d6 <rcl_node_init+0x8a>
 800a352:	9503      	str	r5, [sp, #12]
 800a354:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800a358:	9300      	str	r3, [sp, #0]
 800a35a:	4b1e      	ldr	r3, [pc, #120]	@ (800a3d4 <rcl_node_init+0x288>)
 800a35c:	9302      	str	r3, [sp, #8]
 800a35e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a362:	9301      	str	r3, [sp, #4]
 800a364:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800a368:	f001 fb3a 	bl	800b9e0 <rcutils_format_string_limit>
 800a36c:	4605      	mov	r5, r0
 800a36e:	b340      	cbz	r0, 800a3c2 <rcl_node_init+0x276>
 800a370:	2200      	movs	r2, #0
 800a372:	a922      	add	r1, sp, #136	@ 0x88
 800a374:	9222      	str	r2, [sp, #136]	@ 0x88
 800a376:	f001 fd55 	bl	800be24 <rmw_validate_namespace>
 800a37a:	4681      	mov	r9, r0
 800a37c:	2800      	cmp	r0, #0
 800a37e:	f43f af34 	beq.w	800a1ea <rcl_node_init+0x9e>
 800a382:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a386:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800a38a:	4628      	mov	r0, r5
 800a38c:	4798      	blx	r3
 800a38e:	e7d5      	b.n	800a33c <rcl_node_init+0x1f0>
 800a390:	f04f 0964 	mov.w	r9, #100	@ 0x64
 800a394:	4648      	mov	r0, r9
 800a396:	b029      	add	sp, #164	@ 0xa4
 800a398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a39c:	f04f 090a 	mov.w	r9, #10
 800a3a0:	f1ba 0f00 	cmp.w	sl, #0
 800a3a4:	d1ed      	bne.n	800a382 <rcl_node_init+0x236>
 800a3a6:	e7c9      	b.n	800a33c <rcl_node_init+0x1f0>
 800a3a8:	f001 fdac 	bl	800bf04 <rmw_node_name_validation_result_string>
 800a3ac:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 800a3b0:	e7c4      	b.n	800a33c <rcl_node_init+0x1f0>
 800a3b2:	f001 fd49 	bl	800be48 <rmw_namespace_validation_result_string>
 800a3b6:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 800a3ba:	f1ba 0f00 	cmp.w	sl, #0
 800a3be:	d1e0      	bne.n	800a382 <rcl_node_init+0x236>
 800a3c0:	e7bc      	b.n	800a33c <rcl_node_init+0x1f0>
 800a3c2:	f04f 090a 	mov.w	r9, #10
 800a3c6:	e7b9      	b.n	800a33c <rcl_node_init+0x1f0>
 800a3c8:	08019fbc 	.word	0x08019fbc
 800a3cc:	08019fc4 	.word	0x08019fc4
 800a3d0:	08019fcc 	.word	0x08019fcc
 800a3d4:	08019fc0 	.word	0x08019fc0

0800a3d8 <rcl_node_fini>:
 800a3d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3da:	b320      	cbz	r0, 800a426 <rcl_node_fini+0x4e>
 800a3dc:	6845      	ldr	r5, [r0, #4]
 800a3de:	4604      	mov	r4, r0
 800a3e0:	b1fd      	cbz	r5, 800a422 <rcl_node_fini+0x4a>
 800a3e2:	6ea8      	ldr	r0, [r5, #104]	@ 0x68
 800a3e4:	686f      	ldr	r7, [r5, #4]
 800a3e6:	692e      	ldr	r6, [r5, #16]
 800a3e8:	f001 fe40 	bl	800c06c <rmw_destroy_node>
 800a3ec:	6863      	ldr	r3, [r4, #4]
 800a3ee:	4605      	mov	r5, r0
 800a3f0:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800a3f2:	f006 f899 	bl	8010528 <rcl_guard_condition_fini>
 800a3f6:	ea55 0300 	orrs.w	r3, r5, r0
 800a3fa:	6863      	ldr	r3, [r4, #4]
 800a3fc:	4631      	mov	r1, r6
 800a3fe:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800a400:	bf14      	ite	ne
 800a402:	2501      	movne	r5, #1
 800a404:	2500      	moveq	r5, #0
 800a406:	47b8      	blx	r7
 800a408:	6863      	ldr	r3, [r4, #4]
 800a40a:	4631      	mov	r1, r6
 800a40c:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800a40e:	47b8      	blx	r7
 800a410:	6863      	ldr	r3, [r4, #4]
 800a412:	4631      	mov	r1, r6
 800a414:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800a416:	47b8      	blx	r7
 800a418:	6860      	ldr	r0, [r4, #4]
 800a41a:	4631      	mov	r1, r6
 800a41c:	47b8      	blx	r7
 800a41e:	2300      	movs	r3, #0
 800a420:	6063      	str	r3, [r4, #4]
 800a422:	4628      	mov	r0, r5
 800a424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a426:	25c8      	movs	r5, #200	@ 0xc8
 800a428:	4628      	mov	r0, r5
 800a42a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a42c <rcl_node_is_valid_except_context>:
 800a42c:	b128      	cbz	r0, 800a43a <rcl_node_is_valid_except_context+0xe>
 800a42e:	6840      	ldr	r0, [r0, #4]
 800a430:	b118      	cbz	r0, 800a43a <rcl_node_is_valid_except_context+0xe>
 800a432:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800a434:	3800      	subs	r0, #0
 800a436:	bf18      	it	ne
 800a438:	2001      	movne	r0, #1
 800a43a:	4770      	bx	lr

0800a43c <rcl_node_is_valid>:
 800a43c:	b130      	cbz	r0, 800a44c <rcl_node_is_valid+0x10>
 800a43e:	6843      	ldr	r3, [r0, #4]
 800a440:	b123      	cbz	r3, 800a44c <rcl_node_is_valid+0x10>
 800a442:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a444:	b113      	cbz	r3, 800a44c <rcl_node_is_valid+0x10>
 800a446:	6800      	ldr	r0, [r0, #0]
 800a448:	f005 bf9e 	b.w	8010388 <rcl_context_is_valid>
 800a44c:	2000      	movs	r0, #0
 800a44e:	4770      	bx	lr

0800a450 <rcl_node_get_name>:
 800a450:	b120      	cbz	r0, 800a45c <rcl_node_get_name+0xc>
 800a452:	6840      	ldr	r0, [r0, #4]
 800a454:	b110      	cbz	r0, 800a45c <rcl_node_get_name+0xc>
 800a456:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800a458:	b100      	cbz	r0, 800a45c <rcl_node_get_name+0xc>
 800a45a:	6880      	ldr	r0, [r0, #8]
 800a45c:	4770      	bx	lr
 800a45e:	bf00      	nop

0800a460 <rcl_node_get_namespace>:
 800a460:	b120      	cbz	r0, 800a46c <rcl_node_get_namespace+0xc>
 800a462:	6840      	ldr	r0, [r0, #4]
 800a464:	b110      	cbz	r0, 800a46c <rcl_node_get_namespace+0xc>
 800a466:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800a468:	b100      	cbz	r0, 800a46c <rcl_node_get_namespace+0xc>
 800a46a:	68c0      	ldr	r0, [r0, #12]
 800a46c:	4770      	bx	lr
 800a46e:	bf00      	nop

0800a470 <rcl_node_get_options>:
 800a470:	b128      	cbz	r0, 800a47e <rcl_node_get_options+0xe>
 800a472:	6840      	ldr	r0, [r0, #4]
 800a474:	b118      	cbz	r0, 800a47e <rcl_node_get_options+0xe>
 800a476:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 800a478:	2b00      	cmp	r3, #0
 800a47a:	bf08      	it	eq
 800a47c:	2000      	moveq	r0, #0
 800a47e:	4770      	bx	lr

0800a480 <rcl_node_get_rmw_handle>:
 800a480:	b110      	cbz	r0, 800a488 <rcl_node_get_rmw_handle+0x8>
 800a482:	6840      	ldr	r0, [r0, #4]
 800a484:	b100      	cbz	r0, 800a488 <rcl_node_get_rmw_handle+0x8>
 800a486:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800a488:	4770      	bx	lr
 800a48a:	bf00      	nop

0800a48c <rcl_node_get_default_options>:
 800a48c:	b510      	push	{r4, lr}
 800a48e:	2268      	movs	r2, #104	@ 0x68
 800a490:	4604      	mov	r4, r0
 800a492:	2100      	movs	r1, #0
 800a494:	f00d fc98 	bl	8017dc8 <memset>
 800a498:	4620      	mov	r0, r4
 800a49a:	f001 fa3b 	bl	800b914 <rcutils_get_default_allocator>
 800a49e:	2301      	movs	r3, #1
 800a4a0:	7523      	strb	r3, [r4, #20]
 800a4a2:	4620      	mov	r0, r4
 800a4a4:	bd10      	pop	{r4, pc}
 800a4a6:	bf00      	nop

0800a4a8 <rcl_node_options_copy>:
 800a4a8:	b1d0      	cbz	r0, 800a4e0 <rcl_node_options_copy+0x38>
 800a4aa:	b570      	push	{r4, r5, r6, lr}
 800a4ac:	460c      	mov	r4, r1
 800a4ae:	b1a9      	cbz	r1, 800a4dc <rcl_node_options_copy+0x34>
 800a4b0:	4288      	cmp	r0, r1
 800a4b2:	4684      	mov	ip, r0
 800a4b4:	d012      	beq.n	800a4dc <rcl_node_options_copy+0x34>
 800a4b6:	4605      	mov	r5, r0
 800a4b8:	8a86      	ldrh	r6, [r0, #20]
 800a4ba:	468e      	mov	lr, r1
 800a4bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a4be:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a4c2:	682b      	ldr	r3, [r5, #0]
 800a4c4:	f8ce 3000 	str.w	r3, [lr]
 800a4c8:	f10c 0118 	add.w	r1, ip, #24
 800a4cc:	2250      	movs	r2, #80	@ 0x50
 800a4ce:	82a6      	strh	r6, [r4, #20]
 800a4d0:	f104 0018 	add.w	r0, r4, #24
 800a4d4:	f00d fd9b 	bl	801800e <memcpy>
 800a4d8:	2000      	movs	r0, #0
 800a4da:	bd70      	pop	{r4, r5, r6, pc}
 800a4dc:	200b      	movs	r0, #11
 800a4de:	bd70      	pop	{r4, r5, r6, pc}
 800a4e0:	200b      	movs	r0, #11
 800a4e2:	4770      	bx	lr

0800a4e4 <rcl_get_zero_initialized_publisher>:
 800a4e4:	4b01      	ldr	r3, [pc, #4]	@ (800a4ec <rcl_get_zero_initialized_publisher+0x8>)
 800a4e6:	6818      	ldr	r0, [r3, #0]
 800a4e8:	4770      	bx	lr
 800a4ea:	bf00      	nop
 800a4ec:	08019fdc 	.word	0x08019fdc

0800a4f0 <rcl_publisher_init>:
 800a4f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4f4:	b088      	sub	sp, #32
 800a4f6:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800a4f8:	2d00      	cmp	r5, #0
 800a4fa:	d069      	beq.n	800a5d0 <rcl_publisher_init+0xe0>
 800a4fc:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800a500:	4604      	mov	r4, r0
 800a502:	4648      	mov	r0, r9
 800a504:	460e      	mov	r6, r1
 800a506:	4690      	mov	r8, r2
 800a508:	461f      	mov	r7, r3
 800a50a:	f001 fa11 	bl	800b930 <rcutils_allocator_is_valid>
 800a50e:	2800      	cmp	r0, #0
 800a510:	d05e      	beq.n	800a5d0 <rcl_publisher_init+0xe0>
 800a512:	2c00      	cmp	r4, #0
 800a514:	d05c      	beq.n	800a5d0 <rcl_publisher_init+0xe0>
 800a516:	f8d4 a000 	ldr.w	sl, [r4]
 800a51a:	f1ba 0f00 	cmp.w	sl, #0
 800a51e:	d004      	beq.n	800a52a <rcl_publisher_init+0x3a>
 800a520:	2764      	movs	r7, #100	@ 0x64
 800a522:	4638      	mov	r0, r7
 800a524:	b008      	add	sp, #32
 800a526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a52a:	4630      	mov	r0, r6
 800a52c:	f7ff ff86 	bl	800a43c <rcl_node_is_valid>
 800a530:	2800      	cmp	r0, #0
 800a532:	d052      	beq.n	800a5da <rcl_publisher_init+0xea>
 800a534:	f1b8 0f00 	cmp.w	r8, #0
 800a538:	d04a      	beq.n	800a5d0 <rcl_publisher_init+0xe0>
 800a53a:	2f00      	cmp	r7, #0
 800a53c:	d048      	beq.n	800a5d0 <rcl_publisher_init+0xe0>
 800a53e:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800a542:	aa07      	add	r2, sp, #28
 800a544:	9205      	str	r2, [sp, #20]
 800a546:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800a54a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a54e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800a552:	f8cd a01c 	str.w	sl, [sp, #28]
 800a556:	4639      	mov	r1, r7
 800a558:	e899 000c 	ldmia.w	r9, {r2, r3}
 800a55c:	4630      	mov	r0, r6
 800a55e:	f006 fa4f 	bl	8010a00 <rcl_node_resolve_name>
 800a562:	4607      	mov	r7, r0
 800a564:	2800      	cmp	r0, #0
 800a566:	d14f      	bne.n	800a608 <rcl_publisher_init+0x118>
 800a568:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800a56a:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800a56c:	20c8      	movs	r0, #200	@ 0xc8
 800a56e:	4798      	blx	r3
 800a570:	6020      	str	r0, [r4, #0]
 800a572:	2800      	cmp	r0, #0
 800a574:	d04e      	beq.n	800a614 <rcl_publisher_init+0x124>
 800a576:	4630      	mov	r0, r6
 800a578:	f7ff ff82 	bl	800a480 <rcl_node_get_rmw_handle>
 800a57c:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800a580:	9300      	str	r3, [sp, #0]
 800a582:	9a07      	ldr	r2, [sp, #28]
 800a584:	6827      	ldr	r7, [r4, #0]
 800a586:	462b      	mov	r3, r5
 800a588:	4641      	mov	r1, r8
 800a58a:	f001 fe55 	bl	800c238 <rmw_create_publisher>
 800a58e:	6823      	ldr	r3, [r4, #0]
 800a590:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800a594:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800a598:	b370      	cbz	r0, 800a5f8 <rcl_publisher_init+0x108>
 800a59a:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800a59e:	f001 ff29 	bl	800c3f4 <rmw_publisher_get_actual_qos>
 800a5a2:	6823      	ldr	r3, [r4, #0]
 800a5a4:	4607      	mov	r7, r0
 800a5a6:	b9d0      	cbnz	r0, 800a5de <rcl_publisher_init+0xee>
 800a5a8:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800a5ac:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800a5b0:	4629      	mov	r1, r5
 800a5b2:	2270      	movs	r2, #112	@ 0x70
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	f00d fd2a 	bl	801800e <memcpy>
 800a5ba:	6832      	ldr	r2, [r6, #0]
 800a5bc:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800a5c0:	9807      	ldr	r0, [sp, #28]
 800a5c2:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800a5c4:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800a5c6:	4798      	blx	r3
 800a5c8:	4638      	mov	r0, r7
 800a5ca:	b008      	add	sp, #32
 800a5cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5d0:	270b      	movs	r7, #11
 800a5d2:	4638      	mov	r0, r7
 800a5d4:	b008      	add	sp, #32
 800a5d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5da:	27c8      	movs	r7, #200	@ 0xc8
 800a5dc:	e7a1      	b.n	800a522 <rcl_publisher_init+0x32>
 800a5de:	b18b      	cbz	r3, 800a604 <rcl_publisher_init+0x114>
 800a5e0:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800a5e4:	b142      	cbz	r2, 800a5f8 <rcl_publisher_init+0x108>
 800a5e6:	4630      	mov	r0, r6
 800a5e8:	f7ff ff4a 	bl	800a480 <rcl_node_get_rmw_handle>
 800a5ec:	6823      	ldr	r3, [r4, #0]
 800a5ee:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800a5f2:	f001 ff0f 	bl	800c414 <rmw_destroy_publisher>
 800a5f6:	6823      	ldr	r3, [r4, #0]
 800a5f8:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800a5fa:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	4790      	blx	r2
 800a600:	2300      	movs	r3, #0
 800a602:	6023      	str	r3, [r4, #0]
 800a604:	2701      	movs	r7, #1
 800a606:	e7db      	b.n	800a5c0 <rcl_publisher_init+0xd0>
 800a608:	2867      	cmp	r0, #103	@ 0x67
 800a60a:	d0d9      	beq.n	800a5c0 <rcl_publisher_init+0xd0>
 800a60c:	2869      	cmp	r0, #105	@ 0x69
 800a60e:	d003      	beq.n	800a618 <rcl_publisher_init+0x128>
 800a610:	280a      	cmp	r0, #10
 800a612:	d1f7      	bne.n	800a604 <rcl_publisher_init+0x114>
 800a614:	270a      	movs	r7, #10
 800a616:	e7d3      	b.n	800a5c0 <rcl_publisher_init+0xd0>
 800a618:	2767      	movs	r7, #103	@ 0x67
 800a61a:	e7d1      	b.n	800a5c0 <rcl_publisher_init+0xd0>

0800a61c <rcl_publisher_fini>:
 800a61c:	b570      	push	{r4, r5, r6, lr}
 800a61e:	b300      	cbz	r0, 800a662 <rcl_publisher_fini+0x46>
 800a620:	4604      	mov	r4, r0
 800a622:	4608      	mov	r0, r1
 800a624:	460d      	mov	r5, r1
 800a626:	f7ff ff01 	bl	800a42c <rcl_node_is_valid_except_context>
 800a62a:	b1f0      	cbz	r0, 800a66a <rcl_publisher_fini+0x4e>
 800a62c:	6823      	ldr	r3, [r4, #0]
 800a62e:	b1ab      	cbz	r3, 800a65c <rcl_publisher_fini+0x40>
 800a630:	4628      	mov	r0, r5
 800a632:	6d5e      	ldr	r6, [r3, #84]	@ 0x54
 800a634:	6e1d      	ldr	r5, [r3, #96]	@ 0x60
 800a636:	f7ff ff23 	bl	800a480 <rcl_node_get_rmw_handle>
 800a63a:	b1c8      	cbz	r0, 800a670 <rcl_publisher_fini+0x54>
 800a63c:	6823      	ldr	r3, [r4, #0]
 800a63e:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800a642:	f001 fee7 	bl	800c414 <rmw_destroy_publisher>
 800a646:	4603      	mov	r3, r0
 800a648:	4629      	mov	r1, r5
 800a64a:	6820      	ldr	r0, [r4, #0]
 800a64c:	1e1d      	subs	r5, r3, #0
 800a64e:	bf18      	it	ne
 800a650:	2501      	movne	r5, #1
 800a652:	47b0      	blx	r6
 800a654:	2300      	movs	r3, #0
 800a656:	6023      	str	r3, [r4, #0]
 800a658:	4628      	mov	r0, r5
 800a65a:	bd70      	pop	{r4, r5, r6, pc}
 800a65c:	461d      	mov	r5, r3
 800a65e:	4628      	mov	r0, r5
 800a660:	bd70      	pop	{r4, r5, r6, pc}
 800a662:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 800a666:	4628      	mov	r0, r5
 800a668:	bd70      	pop	{r4, r5, r6, pc}
 800a66a:	25c8      	movs	r5, #200	@ 0xc8
 800a66c:	4628      	mov	r0, r5
 800a66e:	bd70      	pop	{r4, r5, r6, pc}
 800a670:	250b      	movs	r5, #11
 800a672:	e7f1      	b.n	800a658 <rcl_publisher_fini+0x3c>

0800a674 <rcl_publisher_get_default_options>:
 800a674:	b570      	push	{r4, r5, r6, lr}
 800a676:	4d14      	ldr	r5, [pc, #80]	@ (800a6c8 <rcl_publisher_get_default_options+0x54>)
 800a678:	4914      	ldr	r1, [pc, #80]	@ (800a6cc <rcl_publisher_get_default_options+0x58>)
 800a67a:	b088      	sub	sp, #32
 800a67c:	4604      	mov	r4, r0
 800a67e:	2250      	movs	r2, #80	@ 0x50
 800a680:	4628      	mov	r0, r5
 800a682:	f00d fcc4 	bl	801800e <memcpy>
 800a686:	a802      	add	r0, sp, #8
 800a688:	f001 f944 	bl	800b914 <rcutils_get_default_allocator>
 800a68c:	f10d 0c08 	add.w	ip, sp, #8
 800a690:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a694:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800a698:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a69c:	466e      	mov	r6, sp
 800a69e:	f8dc 3000 	ldr.w	r3, [ip]
 800a6a2:	f8ce 3000 	str.w	r3, [lr]
 800a6a6:	4630      	mov	r0, r6
 800a6a8:	f001 fb42 	bl	800bd30 <rmw_get_default_publisher_options>
 800a6ac:	e896 0003 	ldmia.w	r6, {r0, r1}
 800a6b0:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800a6b4:	e883 0003 	stmia.w	r3, {r0, r1}
 800a6b8:	2270      	movs	r2, #112	@ 0x70
 800a6ba:	4629      	mov	r1, r5
 800a6bc:	4620      	mov	r0, r4
 800a6be:	f00d fca6 	bl	801800e <memcpy>
 800a6c2:	4620      	mov	r0, r4
 800a6c4:	b008      	add	sp, #32
 800a6c6:	bd70      	pop	{r4, r5, r6, pc}
 800a6c8:	2000c788 	.word	0x2000c788
 800a6cc:	08019fe0 	.word	0x08019fe0

0800a6d0 <rcl_publish>:
 800a6d0:	b1f8      	cbz	r0, 800a712 <rcl_publish+0x42>
 800a6d2:	6803      	ldr	r3, [r0, #0]
 800a6d4:	b570      	push	{r4, r5, r6, lr}
 800a6d6:	4604      	mov	r4, r0
 800a6d8:	b1b3      	cbz	r3, 800a708 <rcl_publish+0x38>
 800a6da:	4616      	mov	r6, r2
 800a6dc:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800a6e0:	b192      	cbz	r2, 800a708 <rcl_publish+0x38>
 800a6e2:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800a6e6:	460d      	mov	r5, r1
 800a6e8:	f005 fe4e 	bl	8010388 <rcl_context_is_valid>
 800a6ec:	b160      	cbz	r0, 800a708 <rcl_publish+0x38>
 800a6ee:	6823      	ldr	r3, [r4, #0]
 800a6f0:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800a6f4:	b140      	cbz	r0, 800a708 <rcl_publish+0x38>
 800a6f6:	b155      	cbz	r5, 800a70e <rcl_publish+0x3e>
 800a6f8:	4632      	mov	r2, r6
 800a6fa:	4629      	mov	r1, r5
 800a6fc:	f001 fd3c 	bl	800c178 <rmw_publish>
 800a700:	3800      	subs	r0, #0
 800a702:	bf18      	it	ne
 800a704:	2001      	movne	r0, #1
 800a706:	bd70      	pop	{r4, r5, r6, pc}
 800a708:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800a70c:	bd70      	pop	{r4, r5, r6, pc}
 800a70e:	200b      	movs	r0, #11
 800a710:	bd70      	pop	{r4, r5, r6, pc}
 800a712:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800a716:	4770      	bx	lr

0800a718 <rcl_publisher_is_valid>:
 800a718:	b1a0      	cbz	r0, 800a744 <rcl_publisher_is_valid+0x2c>
 800a71a:	6803      	ldr	r3, [r0, #0]
 800a71c:	b510      	push	{r4, lr}
 800a71e:	4604      	mov	r4, r0
 800a720:	b173      	cbz	r3, 800a740 <rcl_publisher_is_valid+0x28>
 800a722:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800a726:	b15a      	cbz	r2, 800a740 <rcl_publisher_is_valid+0x28>
 800a728:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800a72c:	f005 fe2c 	bl	8010388 <rcl_context_is_valid>
 800a730:	b130      	cbz	r0, 800a740 <rcl_publisher_is_valid+0x28>
 800a732:	6823      	ldr	r3, [r4, #0]
 800a734:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800a738:	3800      	subs	r0, #0
 800a73a:	bf18      	it	ne
 800a73c:	2001      	movne	r0, #1
 800a73e:	bd10      	pop	{r4, pc}
 800a740:	2000      	movs	r0, #0
 800a742:	bd10      	pop	{r4, pc}
 800a744:	2000      	movs	r0, #0
 800a746:	4770      	bx	lr

0800a748 <rcl_publisher_is_valid_except_context>:
 800a748:	b130      	cbz	r0, 800a758 <rcl_publisher_is_valid_except_context+0x10>
 800a74a:	6800      	ldr	r0, [r0, #0]
 800a74c:	b120      	cbz	r0, 800a758 <rcl_publisher_is_valid_except_context+0x10>
 800a74e:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800a752:	3800      	subs	r0, #0
 800a754:	bf18      	it	ne
 800a756:	2001      	movne	r0, #1
 800a758:	4770      	bx	lr
 800a75a:	bf00      	nop

0800a75c <rcl_get_zero_initialized_subscription>:
 800a75c:	4b01      	ldr	r3, [pc, #4]	@ (800a764 <rcl_get_zero_initialized_subscription+0x8>)
 800a75e:	6818      	ldr	r0, [r3, #0]
 800a760:	4770      	bx	lr
 800a762:	bf00      	nop
 800a764:	0801a030 	.word	0x0801a030

0800a768 <rcl_subscription_init>:
 800a768:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a76c:	b089      	sub	sp, #36	@ 0x24
 800a76e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800a770:	b1d6      	cbz	r6, 800a7a8 <rcl_subscription_init+0x40>
 800a772:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 800a776:	4604      	mov	r4, r0
 800a778:	4648      	mov	r0, r9
 800a77a:	460d      	mov	r5, r1
 800a77c:	4690      	mov	r8, r2
 800a77e:	461f      	mov	r7, r3
 800a780:	f001 f8d6 	bl	800b930 <rcutils_allocator_is_valid>
 800a784:	b180      	cbz	r0, 800a7a8 <rcl_subscription_init+0x40>
 800a786:	b17c      	cbz	r4, 800a7a8 <rcl_subscription_init+0x40>
 800a788:	4628      	mov	r0, r5
 800a78a:	f7ff fe57 	bl	800a43c <rcl_node_is_valid>
 800a78e:	2800      	cmp	r0, #0
 800a790:	d054      	beq.n	800a83c <rcl_subscription_init+0xd4>
 800a792:	f1b8 0f00 	cmp.w	r8, #0
 800a796:	d007      	beq.n	800a7a8 <rcl_subscription_init+0x40>
 800a798:	b137      	cbz	r7, 800a7a8 <rcl_subscription_init+0x40>
 800a79a:	6823      	ldr	r3, [r4, #0]
 800a79c:	b14b      	cbz	r3, 800a7b2 <rcl_subscription_init+0x4a>
 800a79e:	2764      	movs	r7, #100	@ 0x64
 800a7a0:	4638      	mov	r0, r7
 800a7a2:	b009      	add	sp, #36	@ 0x24
 800a7a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a7a8:	270b      	movs	r7, #11
 800a7aa:	4638      	mov	r0, r7
 800a7ac:	b009      	add	sp, #36	@ 0x24
 800a7ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a7b2:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800a7b6:	aa07      	add	r2, sp, #28
 800a7b8:	9205      	str	r2, [sp, #20]
 800a7ba:	9307      	str	r3, [sp, #28]
 800a7bc:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 800a7c0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a7c4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800a7c8:	4639      	mov	r1, r7
 800a7ca:	e899 000c 	ldmia.w	r9, {r2, r3}
 800a7ce:	4628      	mov	r0, r5
 800a7d0:	f006 f916 	bl	8010a00 <rcl_node_resolve_name>
 800a7d4:	4607      	mov	r7, r0
 800a7d6:	2800      	cmp	r0, #0
 800a7d8:	d15f      	bne.n	800a89a <rcl_subscription_init+0x132>
 800a7da:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	@ 0x5c
 800a7de:	21c8      	movs	r1, #200	@ 0xc8
 800a7e0:	2001      	movs	r0, #1
 800a7e2:	4798      	blx	r3
 800a7e4:	6020      	str	r0, [r4, #0]
 800a7e6:	2800      	cmp	r0, #0
 800a7e8:	d05d      	beq.n	800a8a6 <rcl_subscription_init+0x13e>
 800a7ea:	4628      	mov	r0, r5
 800a7ec:	f7ff fe48 	bl	800a480 <rcl_node_get_rmw_handle>
 800a7f0:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 800a7f4:	9300      	str	r3, [sp, #0]
 800a7f6:	9a07      	ldr	r2, [sp, #28]
 800a7f8:	6827      	ldr	r7, [r4, #0]
 800a7fa:	4641      	mov	r1, r8
 800a7fc:	4633      	mov	r3, r6
 800a7fe:	f001 fe9f 	bl	800c540 <rmw_create_subscription>
 800a802:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
 800a806:	6827      	ldr	r7, [r4, #0]
 800a808:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 800a80c:	b348      	cbz	r0, 800a862 <rcl_subscription_init+0xfa>
 800a80e:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 800a812:	f001 ff77 	bl	800c704 <rmw_subscription_get_actual_qos>
 800a816:	4607      	mov	r7, r0
 800a818:	b9a8      	cbnz	r0, 800a846 <rcl_subscription_init+0xde>
 800a81a:	6820      	ldr	r0, [r4, #0]
 800a81c:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 800a820:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 800a824:	2270      	movs	r2, #112	@ 0x70
 800a826:	4631      	mov	r1, r6
 800a828:	f00d fbf1 	bl	801800e <memcpy>
 800a82c:	9807      	ldr	r0, [sp, #28]
 800a82e:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800a830:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800a832:	4798      	blx	r3
 800a834:	4638      	mov	r0, r7
 800a836:	b009      	add	sp, #36	@ 0x24
 800a838:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a83c:	27c8      	movs	r7, #200	@ 0xc8
 800a83e:	4638      	mov	r0, r7
 800a840:	b009      	add	sp, #36	@ 0x24
 800a842:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a846:	6827      	ldr	r7, [r4, #0]
 800a848:	b32f      	cbz	r7, 800a896 <rcl_subscription_init+0x12e>
 800a84a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a84e:	b14b      	cbz	r3, 800a864 <rcl_subscription_init+0xfc>
 800a850:	4628      	mov	r0, r5
 800a852:	f7ff fe15 	bl	800a480 <rcl_node_get_rmw_handle>
 800a856:	6823      	ldr	r3, [r4, #0]
 800a858:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800a85c:	f001 ff62 	bl	800c724 <rmw_destroy_subscription>
 800a860:	6827      	ldr	r7, [r4, #0]
 800a862:	b197      	cbz	r7, 800a88a <rcl_subscription_init+0x122>
 800a864:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 800a868:	4628      	mov	r0, r5
 800a86a:	f001 f861 	bl	800b930 <rcutils_allocator_is_valid>
 800a86e:	b158      	cbz	r0, 800a888 <rcl_subscription_init+0x120>
 800a870:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a872:	b148      	cbz	r0, 800a888 <rcl_subscription_init+0x120>
 800a874:	4629      	mov	r1, r5
 800a876:	f001 fa5f 	bl	800bd38 <rmw_subscription_content_filter_options_fini>
 800a87a:	4605      	mov	r5, r0
 800a87c:	b9b8      	cbnz	r0, 800a8ae <rcl_subscription_init+0x146>
 800a87e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a880:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800a882:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a884:	4798      	blx	r3
 800a886:	66fd      	str	r5, [r7, #108]	@ 0x6c
 800a888:	6827      	ldr	r7, [r4, #0]
 800a88a:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800a88c:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800a88e:	4638      	mov	r0, r7
 800a890:	4798      	blx	r3
 800a892:	2300      	movs	r3, #0
 800a894:	6023      	str	r3, [r4, #0]
 800a896:	2701      	movs	r7, #1
 800a898:	e7c8      	b.n	800a82c <rcl_subscription_init+0xc4>
 800a89a:	2867      	cmp	r0, #103	@ 0x67
 800a89c:	d0c6      	beq.n	800a82c <rcl_subscription_init+0xc4>
 800a89e:	2869      	cmp	r0, #105	@ 0x69
 800a8a0:	d003      	beq.n	800a8aa <rcl_subscription_init+0x142>
 800a8a2:	280a      	cmp	r0, #10
 800a8a4:	d1f7      	bne.n	800a896 <rcl_subscription_init+0x12e>
 800a8a6:	270a      	movs	r7, #10
 800a8a8:	e7c0      	b.n	800a82c <rcl_subscription_init+0xc4>
 800a8aa:	2767      	movs	r7, #103	@ 0x67
 800a8ac:	e7be      	b.n	800a82c <rcl_subscription_init+0xc4>
 800a8ae:	f005 fd4d 	bl	801034c <rcl_convert_rmw_ret_to_rcl_ret>
 800a8b2:	6827      	ldr	r7, [r4, #0]
 800a8b4:	e7e9      	b.n	800a88a <rcl_subscription_init+0x122>
 800a8b6:	bf00      	nop

0800a8b8 <rcl_subscription_fini>:
 800a8b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8bc:	2800      	cmp	r0, #0
 800a8be:	d039      	beq.n	800a934 <rcl_subscription_fini+0x7c>
 800a8c0:	4604      	mov	r4, r0
 800a8c2:	4608      	mov	r0, r1
 800a8c4:	460d      	mov	r5, r1
 800a8c6:	f7ff fdb1 	bl	800a42c <rcl_node_is_valid_except_context>
 800a8ca:	2800      	cmp	r0, #0
 800a8cc:	d037      	beq.n	800a93e <rcl_subscription_fini+0x86>
 800a8ce:	6823      	ldr	r3, [r4, #0]
 800a8d0:	b363      	cbz	r3, 800a92c <rcl_subscription_fini+0x74>
 800a8d2:	4628      	mov	r0, r5
 800a8d4:	6d5f      	ldr	r7, [r3, #84]	@ 0x54
 800a8d6:	f8d3 8060 	ldr.w	r8, [r3, #96]	@ 0x60
 800a8da:	f7ff fdd1 	bl	800a480 <rcl_node_get_rmw_handle>
 800a8de:	b390      	cbz	r0, 800a946 <rcl_subscription_fini+0x8e>
 800a8e0:	6823      	ldr	r3, [r4, #0]
 800a8e2:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800a8e6:	f001 ff1d 	bl	800c724 <rmw_destroy_subscription>
 800a8ea:	6826      	ldr	r6, [r4, #0]
 800a8ec:	1e05      	subs	r5, r0, #0
 800a8ee:	bf18      	it	ne
 800a8f0:	2501      	movne	r5, #1
 800a8f2:	b37e      	cbz	r6, 800a954 <rcl_subscription_fini+0x9c>
 800a8f4:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 800a8f8:	4648      	mov	r0, r9
 800a8fa:	f001 f819 	bl	800b930 <rcutils_allocator_is_valid>
 800a8fe:	b358      	cbz	r0, 800a958 <rcl_subscription_fini+0xa0>
 800a900:	6ef0      	ldr	r0, [r6, #108]	@ 0x6c
 800a902:	b150      	cbz	r0, 800a91a <rcl_subscription_fini+0x62>
 800a904:	4649      	mov	r1, r9
 800a906:	f001 fa17 	bl	800bd38 <rmw_subscription_content_filter_options_fini>
 800a90a:	4681      	mov	r9, r0
 800a90c:	b9e8      	cbnz	r0, 800a94a <rcl_subscription_fini+0x92>
 800a90e:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800a910:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800a912:	6ef0      	ldr	r0, [r6, #108]	@ 0x6c
 800a914:	4798      	blx	r3
 800a916:	f8c6 906c 	str.w	r9, [r6, #108]	@ 0x6c
 800a91a:	6826      	ldr	r6, [r4, #0]
 800a91c:	4630      	mov	r0, r6
 800a91e:	4641      	mov	r1, r8
 800a920:	47b8      	blx	r7
 800a922:	2300      	movs	r3, #0
 800a924:	6023      	str	r3, [r4, #0]
 800a926:	4628      	mov	r0, r5
 800a928:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a92c:	461d      	mov	r5, r3
 800a92e:	4628      	mov	r0, r5
 800a930:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a934:	f44f 75c8 	mov.w	r5, #400	@ 0x190
 800a938:	4628      	mov	r0, r5
 800a93a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a93e:	25c8      	movs	r5, #200	@ 0xc8
 800a940:	4628      	mov	r0, r5
 800a942:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a946:	250b      	movs	r5, #11
 800a948:	e7f1      	b.n	800a92e <rcl_subscription_fini+0x76>
 800a94a:	f005 fcff 	bl	801034c <rcl_convert_rmw_ret_to_rcl_ret>
 800a94e:	6826      	ldr	r6, [r4, #0]
 800a950:	2800      	cmp	r0, #0
 800a952:	d0e3      	beq.n	800a91c <rcl_subscription_fini+0x64>
 800a954:	2501      	movs	r5, #1
 800a956:	e7e1      	b.n	800a91c <rcl_subscription_fini+0x64>
 800a958:	6826      	ldr	r6, [r4, #0]
 800a95a:	2501      	movs	r5, #1
 800a95c:	e7de      	b.n	800a91c <rcl_subscription_fini+0x64>
 800a95e:	bf00      	nop

0800a960 <rcl_subscription_get_default_options>:
 800a960:	b570      	push	{r4, r5, r6, lr}
 800a962:	4d14      	ldr	r5, [pc, #80]	@ (800a9b4 <rcl_subscription_get_default_options+0x54>)
 800a964:	4914      	ldr	r1, [pc, #80]	@ (800a9b8 <rcl_subscription_get_default_options+0x58>)
 800a966:	b08a      	sub	sp, #40	@ 0x28
 800a968:	4604      	mov	r4, r0
 800a96a:	2250      	movs	r2, #80	@ 0x50
 800a96c:	4628      	mov	r0, r5
 800a96e:	f00d fb4e 	bl	801800e <memcpy>
 800a972:	a804      	add	r0, sp, #16
 800a974:	f000 ffce 	bl	800b914 <rcutils_get_default_allocator>
 800a978:	f10d 0c10 	add.w	ip, sp, #16
 800a97c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a980:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800a984:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a988:	466e      	mov	r6, sp
 800a98a:	f8dc 3000 	ldr.w	r3, [ip]
 800a98e:	f8ce 3000 	str.w	r3, [lr]
 800a992:	4630      	mov	r0, r6
 800a994:	f001 f9ea 	bl	800bd6c <rmw_get_default_subscription_options>
 800a998:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800a99c:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800a9a0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a9a4:	2270      	movs	r2, #112	@ 0x70
 800a9a6:	4629      	mov	r1, r5
 800a9a8:	4620      	mov	r0, r4
 800a9aa:	f00d fb30 	bl	801800e <memcpy>
 800a9ae:	4620      	mov	r0, r4
 800a9b0:	b00a      	add	sp, #40	@ 0x28
 800a9b2:	bd70      	pop	{r4, r5, r6, pc}
 800a9b4:	2000c7f8 	.word	0x2000c7f8
 800a9b8:	0801a038 	.word	0x0801a038

0800a9bc <rcl_take>:
 800a9bc:	2800      	cmp	r0, #0
 800a9be:	d04a      	beq.n	800aa56 <rcl_take+0x9a>
 800a9c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9c4:	4604      	mov	r4, r0
 800a9c6:	6800      	ldr	r0, [r0, #0]
 800a9c8:	b0a4      	sub	sp, #144	@ 0x90
 800a9ca:	2800      	cmp	r0, #0
 800a9cc:	d03b      	beq.n	800aa46 <rcl_take+0x8a>
 800a9ce:	461f      	mov	r7, r3
 800a9d0:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d036      	beq.n	800aa46 <rcl_take+0x8a>
 800a9d8:	460e      	mov	r6, r1
 800a9da:	2900      	cmp	r1, #0
 800a9dc:	d039      	beq.n	800aa52 <rcl_take+0x96>
 800a9de:	4615      	mov	r5, r2
 800a9e0:	2a00      	cmp	r2, #0
 800a9e2:	d03c      	beq.n	800aa5e <rcl_take+0xa2>
 800a9e4:	a802      	add	r0, sp, #8
 800a9e6:	f001 f9c7 	bl	800bd78 <rmw_get_zero_initialized_message_info>
 800a9ea:	f10d 0c08 	add.w	ip, sp, #8
 800a9ee:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a9f2:	46ae      	mov	lr, r5
 800a9f4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a9f8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a9fc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800aa00:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800aa04:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800aa08:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 800aa0c:	f04f 0800 	mov.w	r8, #0
 800aa10:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 800aa14:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 800aa18:	6822      	ldr	r2, [r4, #0]
 800aa1a:	462b      	mov	r3, r5
 800aa1c:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 800aa20:	9700      	str	r7, [sp, #0]
 800aa22:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 800aa26:	4631      	mov	r1, r6
 800aa28:	f001 fedc 	bl	800c7e4 <rmw_take_with_info>
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	b9c0      	cbnz	r0, 800aa62 <rcl_take+0xa6>
 800aa30:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 800aa34:	f240 1291 	movw	r2, #401	@ 0x191
 800aa38:	2900      	cmp	r1, #0
 800aa3a:	bf08      	it	eq
 800aa3c:	4613      	moveq	r3, r2
 800aa3e:	4618      	mov	r0, r3
 800aa40:	b024      	add	sp, #144	@ 0x90
 800aa42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa46:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	b024      	add	sp, #144	@ 0x90
 800aa4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa52:	230b      	movs	r3, #11
 800aa54:	e7f3      	b.n	800aa3e <rcl_take+0x82>
 800aa56:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	4770      	bx	lr
 800aa5e:	ad14      	add	r5, sp, #80	@ 0x50
 800aa60:	e7c0      	b.n	800a9e4 <rcl_take+0x28>
 800aa62:	f005 fc73 	bl	801034c <rcl_convert_rmw_ret_to_rcl_ret>
 800aa66:	4603      	mov	r3, r0
 800aa68:	e7e9      	b.n	800aa3e <rcl_take+0x82>
 800aa6a:	bf00      	nop

0800aa6c <rcl_subscription_get_rmw_handle>:
 800aa6c:	b118      	cbz	r0, 800aa76 <rcl_subscription_get_rmw_handle+0xa>
 800aa6e:	6800      	ldr	r0, [r0, #0]
 800aa70:	b108      	cbz	r0, 800aa76 <rcl_subscription_get_rmw_handle+0xa>
 800aa72:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 800aa76:	4770      	bx	lr

0800aa78 <rcl_subscription_is_valid>:
 800aa78:	b130      	cbz	r0, 800aa88 <rcl_subscription_is_valid+0x10>
 800aa7a:	6800      	ldr	r0, [r0, #0]
 800aa7c:	b120      	cbz	r0, 800aa88 <rcl_subscription_is_valid+0x10>
 800aa7e:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 800aa82:	3800      	subs	r0, #0
 800aa84:	bf18      	it	ne
 800aa86:	2001      	movne	r0, #1
 800aa88:	4770      	bx	lr
 800aa8a:	bf00      	nop

0800aa8c <_rclc_check_for_new_data>:
 800aa8c:	2800      	cmp	r0, #0
 800aa8e:	d046      	beq.n	800ab1e <_rclc_check_for_new_data+0x92>
 800aa90:	b510      	push	{r4, lr}
 800aa92:	7802      	ldrb	r2, [r0, #0]
 800aa94:	b084      	sub	sp, #16
 800aa96:	4603      	mov	r3, r0
 800aa98:	2a0a      	cmp	r2, #10
 800aa9a:	d842      	bhi.n	800ab22 <_rclc_check_for_new_data+0x96>
 800aa9c:	e8df f002 	tbb	[pc, r2]
 800aaa0:	14181212 	.word	0x14181212
 800aaa4:	06060614 	.word	0x06060614
 800aaa8:	2e1a      	.short	0x2e1a
 800aaaa:	16          	.byte	0x16
 800aaab:	00          	.byte	0x00
 800aaac:	6a0a      	ldr	r2, [r1, #32]
 800aaae:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800aab0:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800aab4:	2000      	movs	r0, #0
 800aab6:	1a12      	subs	r2, r2, r0
 800aab8:	bf18      	it	ne
 800aaba:	2201      	movne	r2, #1
 800aabc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800aac0:	b004      	add	sp, #16
 800aac2:	bd10      	pop	{r4, pc}
 800aac4:	680a      	ldr	r2, [r1, #0]
 800aac6:	e7f2      	b.n	800aaae <_rclc_check_for_new_data+0x22>
 800aac8:	698a      	ldr	r2, [r1, #24]
 800aaca:	e7f0      	b.n	800aaae <_rclc_check_for_new_data+0x22>
 800aacc:	688a      	ldr	r2, [r1, #8]
 800aace:	e7ee      	b.n	800aaae <_rclc_check_for_new_data+0x22>
 800aad0:	690a      	ldr	r2, [r1, #16]
 800aad2:	e7ec      	b.n	800aaae <_rclc_check_for_new_data+0x22>
 800aad4:	685c      	ldr	r4, [r3, #4]
 800aad6:	4608      	mov	r0, r1
 800aad8:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800aadc:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800aae0:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800aae4:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800aae8:	9300      	str	r3, [sp, #0]
 800aaea:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800aaee:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800aaf2:	f104 0110 	add.w	r1, r4, #16
 800aaf6:	f007 fb0b 	bl	8012110 <rcl_action_client_wait_set_get_entities_ready>
 800aafa:	e7e1      	b.n	800aac0 <_rclc_check_for_new_data+0x34>
 800aafc:	685c      	ldr	r4, [r3, #4]
 800aafe:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800ab02:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800ab06:	e9cd 3200 	strd	r3, r2, [sp]
 800ab0a:	4608      	mov	r0, r1
 800ab0c:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800ab10:	f104 0220 	add.w	r2, r4, #32
 800ab14:	f104 0110 	add.w	r1, r4, #16
 800ab18:	f007 fd12 	bl	8012540 <rcl_action_server_wait_set_get_entities_ready>
 800ab1c:	e7d0      	b.n	800aac0 <_rclc_check_for_new_data+0x34>
 800ab1e:	200b      	movs	r0, #11
 800ab20:	4770      	bx	lr
 800ab22:	2001      	movs	r0, #1
 800ab24:	e7cc      	b.n	800aac0 <_rclc_check_for_new_data+0x34>
 800ab26:	bf00      	nop

0800ab28 <_rclc_take_new_data>:
 800ab28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab2a:	b09b      	sub	sp, #108	@ 0x6c
 800ab2c:	2800      	cmp	r0, #0
 800ab2e:	f000 8088 	beq.w	800ac42 <_rclc_take_new_data+0x11a>
 800ab32:	7803      	ldrb	r3, [r0, #0]
 800ab34:	4604      	mov	r4, r0
 800ab36:	2b0a      	cmp	r3, #10
 800ab38:	f200 8167 	bhi.w	800ae0a <_rclc_take_new_data+0x2e2>
 800ab3c:	e8df f003 	tbb	[pc, r3]
 800ab40:	44152d2d 	.word	0x44152d2d
 800ab44:	19191944 	.word	0x19191944
 800ab48:	065a      	.short	0x065a
 800ab4a:	15          	.byte	0x15
 800ab4b:	00          	.byte	0x00
 800ab4c:	6840      	ldr	r0, [r0, #4]
 800ab4e:	f890 3020 	ldrb.w	r3, [r0, #32]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	f040 80b2 	bne.w	800acbc <_rclc_take_new_data+0x194>
 800ab58:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	f040 80e4 	bne.w	800ad2a <_rclc_take_new_data+0x202>
 800ab62:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d16f      	bne.n	800ac4a <_rclc_take_new_data+0x122>
 800ab6a:	2500      	movs	r5, #0
 800ab6c:	4628      	mov	r0, r5
 800ab6e:	b01b      	add	sp, #108	@ 0x6c
 800ab70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab72:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800ab74:	6a0b      	ldr	r3, [r1, #32]
 800ab76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d0f5      	beq.n	800ab6a <_rclc_take_new_data+0x42>
 800ab7e:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800ab82:	f104 0110 	add.w	r1, r4, #16
 800ab86:	f006 f8e5 	bl	8010d54 <rcl_take_request>
 800ab8a:	4605      	mov	r5, r0
 800ab8c:	2800      	cmp	r0, #0
 800ab8e:	d0ec      	beq.n	800ab6a <_rclc_take_new_data+0x42>
 800ab90:	f240 2359 	movw	r3, #601	@ 0x259
 800ab94:	4298      	cmp	r0, r3
 800ab96:	d013      	beq.n	800abc0 <_rclc_take_new_data+0x98>
 800ab98:	e029      	b.n	800abee <_rclc_take_new_data+0xc6>
 800ab9a:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800ab9c:	680b      	ldr	r3, [r1, #0]
 800ab9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d0e1      	beq.n	800ab6a <_rclc_take_new_data+0x42>
 800aba6:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800abaa:	2300      	movs	r3, #0
 800abac:	aa0a      	add	r2, sp, #40	@ 0x28
 800abae:	f7ff ff05 	bl	800a9bc <rcl_take>
 800abb2:	4605      	mov	r5, r0
 800abb4:	2800      	cmp	r0, #0
 800abb6:	d0d9      	beq.n	800ab6c <_rclc_take_new_data+0x44>
 800abb8:	f240 1391 	movw	r3, #401	@ 0x191
 800abbc:	4298      	cmp	r0, r3
 800abbe:	d116      	bne.n	800abee <_rclc_take_new_data+0xc6>
 800abc0:	2300      	movs	r3, #0
 800abc2:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800abc6:	e7d1      	b.n	800ab6c <_rclc_take_new_data+0x44>
 800abc8:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800abca:	698b      	ldr	r3, [r1, #24]
 800abcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d0ca      	beq.n	800ab6a <_rclc_take_new_data+0x42>
 800abd4:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800abd8:	f104 0110 	add.w	r1, r4, #16
 800abdc:	f005 fb64 	bl	80102a8 <rcl_take_response>
 800abe0:	4605      	mov	r5, r0
 800abe2:	2800      	cmp	r0, #0
 800abe4:	d0c1      	beq.n	800ab6a <_rclc_take_new_data+0x42>
 800abe6:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800abea:	4298      	cmp	r0, r3
 800abec:	d0be      	beq.n	800ab6c <_rclc_take_new_data+0x44>
 800abee:	f000 fedb 	bl	800b9a8 <rcutils_reset_error>
 800abf2:	e7bb      	b.n	800ab6c <_rclc_take_new_data+0x44>
 800abf4:	6840      	ldr	r0, [r0, #4]
 800abf6:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d17d      	bne.n	800acfa <_rclc_take_new_data+0x1d2>
 800abfe:	69c3      	ldr	r3, [r0, #28]
 800ac00:	b11b      	cbz	r3, 800ac0a <_rclc_take_new_data+0xe2>
 800ac02:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d144      	bne.n	800ac94 <_rclc_take_new_data+0x16c>
 800ac0a:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	f040 80ac 	bne.w	800ad6c <_rclc_take_new_data+0x244>
 800ac14:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d0a6      	beq.n	800ab6a <_rclc_take_new_data+0x42>
 800ac1c:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800ac1e:	a90a      	add	r1, sp, #40	@ 0x28
 800ac20:	3010      	adds	r0, #16
 800ac22:	f007 f94d 	bl	8011ec0 <rcl_action_take_result_response>
 800ac26:	4605      	mov	r5, r0
 800ac28:	2800      	cmp	r0, #0
 800ac2a:	d1e0      	bne.n	800abee <_rclc_take_new_data+0xc6>
 800ac2c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ac30:	6860      	ldr	r0, [r4, #4]
 800ac32:	f007 fda9 	bl	8012788 <rclc_action_find_handle_by_result_request_sequence_number>
 800ac36:	2800      	cmp	r0, #0
 800ac38:	d098      	beq.n	800ab6c <_rclc_take_new_data+0x44>
 800ac3a:	2301      	movs	r3, #1
 800ac3c:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800ac40:	e794      	b.n	800ab6c <_rclc_take_new_data+0x44>
 800ac42:	250b      	movs	r5, #11
 800ac44:	4628      	mov	r0, r5
 800ac46:	b01b      	add	sp, #108	@ 0x6c
 800ac48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac4a:	ae04      	add	r6, sp, #16
 800ac4c:	aa0a      	add	r2, sp, #40	@ 0x28
 800ac4e:	3010      	adds	r0, #16
 800ac50:	4631      	mov	r1, r6
 800ac52:	f007 fba9 	bl	80123a8 <rcl_action_take_cancel_request>
 800ac56:	4605      	mov	r5, r0
 800ac58:	2800      	cmp	r0, #0
 800ac5a:	d1c8      	bne.n	800abee <_rclc_take_new_data+0xc6>
 800ac5c:	6860      	ldr	r0, [r4, #4]
 800ac5e:	a90a      	add	r1, sp, #40	@ 0x28
 800ac60:	f007 fd50 	bl	8012704 <rclc_action_find_goal_handle_by_uuid>
 800ac64:	4607      	mov	r7, r0
 800ac66:	2800      	cmp	r0, #0
 800ac68:	f000 80bb 	beq.w	800ade2 <_rclc_take_new_data+0x2ba>
 800ac6c:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800ac70:	2101      	movs	r1, #1
 800ac72:	f007 fcd1 	bl	8012618 <rcl_action_transition_goal_state>
 800ac76:	2803      	cmp	r0, #3
 800ac78:	4684      	mov	ip, r0
 800ac7a:	f040 80a7 	bne.w	800adcc <_rclc_take_new_data+0x2a4>
 800ac7e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800ac80:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800ac84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ac86:	e896 0003 	ldmia.w	r6, {r0, r1}
 800ac8a:	e884 0003 	stmia.w	r4, {r0, r1}
 800ac8e:	f887 c008 	strb.w	ip, [r7, #8]
 800ac92:	e76b      	b.n	800ab6c <_rclc_take_new_data+0x44>
 800ac94:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800ac96:	3010      	adds	r0, #16
 800ac98:	f007 f992 	bl	8011fc0 <rcl_action_take_feedback>
 800ac9c:	4605      	mov	r5, r0
 800ac9e:	2800      	cmp	r0, #0
 800aca0:	d1a5      	bne.n	800abee <_rclc_take_new_data+0xc6>
 800aca2:	6860      	ldr	r0, [r4, #4]
 800aca4:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800aca6:	f007 fd2d 	bl	8012704 <rclc_action_find_goal_handle_by_uuid>
 800acaa:	4603      	mov	r3, r0
 800acac:	2800      	cmp	r0, #0
 800acae:	f000 80a3 	beq.w	800adf8 <_rclc_take_new_data+0x2d0>
 800acb2:	2201      	movs	r2, #1
 800acb4:	6860      	ldr	r0, [r4, #4]
 800acb6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800acba:	e7a6      	b.n	800ac0a <_rclc_take_new_data+0xe2>
 800acbc:	f007 fcfc 	bl	80126b8 <rclc_action_take_goal_handle>
 800acc0:	4606      	mov	r6, r0
 800acc2:	6860      	ldr	r0, [r4, #4]
 800acc4:	2e00      	cmp	r6, #0
 800acc6:	f43f af47 	beq.w	800ab58 <_rclc_take_new_data+0x30>
 800acca:	6070      	str	r0, [r6, #4]
 800accc:	69f2      	ldr	r2, [r6, #28]
 800acce:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800acd2:	3010      	adds	r0, #16
 800acd4:	f007 fab0 	bl	8012238 <rcl_action_take_goal_request>
 800acd8:	4605      	mov	r5, r0
 800acda:	2800      	cmp	r0, #0
 800acdc:	f040 808e 	bne.w	800adfc <_rclc_take_new_data+0x2d4>
 800ace0:	69f7      	ldr	r7, [r6, #28]
 800ace2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ace4:	7235      	strb	r5, [r6, #8]
 800ace6:	f8c6 0009 	str.w	r0, [r6, #9]
 800acea:	f8c6 100d 	str.w	r1, [r6, #13]
 800acee:	6860      	ldr	r0, [r4, #4]
 800acf0:	f8c6 2011 	str.w	r2, [r6, #17]
 800acf4:	f8c6 3015 	str.w	r3, [r6, #21]
 800acf8:	e72e      	b.n	800ab58 <_rclc_take_new_data+0x30>
 800acfa:	aa04      	add	r2, sp, #16
 800acfc:	a90a      	add	r1, sp, #40	@ 0x28
 800acfe:	3010      	adds	r0, #16
 800ad00:	f007 f866 	bl	8011dd0 <rcl_action_take_goal_response>
 800ad04:	4605      	mov	r5, r0
 800ad06:	2800      	cmp	r0, #0
 800ad08:	f47f af71 	bne.w	800abee <_rclc_take_new_data+0xc6>
 800ad0c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ad10:	6860      	ldr	r0, [r4, #4]
 800ad12:	f007 fd27 	bl	8012764 <rclc_action_find_handle_by_goal_request_sequence_number>
 800ad16:	b130      	cbz	r0, 800ad26 <_rclc_take_new_data+0x1fe>
 800ad18:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800ad1c:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800ad20:	2201      	movs	r2, #1
 800ad22:	f880 2020 	strb.w	r2, [r0, #32]
 800ad26:	6860      	ldr	r0, [r4, #4]
 800ad28:	e769      	b.n	800abfe <_rclc_take_new_data+0xd6>
 800ad2a:	aa04      	add	r2, sp, #16
 800ad2c:	3010      	adds	r0, #16
 800ad2e:	a90a      	add	r1, sp, #40	@ 0x28
 800ad30:	f007 fafa 	bl	8012328 <rcl_action_take_result_request>
 800ad34:	4605      	mov	r5, r0
 800ad36:	2800      	cmp	r0, #0
 800ad38:	f47f af59 	bne.w	800abee <_rclc_take_new_data+0xc6>
 800ad3c:	6860      	ldr	r0, [r4, #4]
 800ad3e:	a904      	add	r1, sp, #16
 800ad40:	f007 fce0 	bl	8012704 <rclc_action_find_goal_handle_by_uuid>
 800ad44:	4607      	mov	r7, r0
 800ad46:	b160      	cbz	r0, 800ad62 <_rclc_take_new_data+0x23a>
 800ad48:	ad0a      	add	r5, sp, #40	@ 0x28
 800ad4a:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800ad4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ad50:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800ad52:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ad56:	f04f 0c02 	mov.w	ip, #2
 800ad5a:	e886 0003 	stmia.w	r6, {r0, r1}
 800ad5e:	f887 c008 	strb.w	ip, [r7, #8]
 800ad62:	6860      	ldr	r0, [r4, #4]
 800ad64:	2300      	movs	r3, #0
 800ad66:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800ad6a:	e6fa      	b.n	800ab62 <_rclc_take_new_data+0x3a>
 800ad6c:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800ad70:	a90a      	add	r1, sp, #40	@ 0x28
 800ad72:	3010      	adds	r0, #16
 800ad74:	f007 f8e4 	bl	8011f40 <rcl_action_take_cancel_response>
 800ad78:	4605      	mov	r5, r0
 800ad7a:	2800      	cmp	r0, #0
 800ad7c:	f47f af37 	bne.w	800abee <_rclc_take_new_data+0xc6>
 800ad80:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ad84:	6860      	ldr	r0, [r4, #4]
 800ad86:	f007 fd11 	bl	80127ac <rclc_action_find_handle_by_cancel_request_sequence_number>
 800ad8a:	4606      	mov	r6, r0
 800ad8c:	6860      	ldr	r0, [r4, #4]
 800ad8e:	2e00      	cmp	r6, #0
 800ad90:	f43f af40 	beq.w	800ac14 <_rclc_take_new_data+0xec>
 800ad94:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800ad96:	2701      	movs	r7, #1
 800ad98:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	f43f af3a 	beq.w	800ac14 <_rclc_take_new_data+0xec>
 800ada0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800ada2:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800ada6:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800adaa:	f007 fcab 	bl	8012704 <rclc_action_find_goal_handle_by_uuid>
 800adae:	b138      	cbz	r0, 800adc0 <_rclc_take_new_data+0x298>
 800adb0:	6860      	ldr	r0, [r4, #4]
 800adb2:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800adb4:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800adb8:	3501      	adds	r5, #1
 800adba:	42ab      	cmp	r3, r5
 800adbc:	d8f0      	bhi.n	800ada0 <_rclc_take_new_data+0x278>
 800adbe:	e729      	b.n	800ac14 <_rclc_take_new_data+0xec>
 800adc0:	6860      	ldr	r0, [r4, #4]
 800adc2:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800adc4:	3501      	adds	r5, #1
 800adc6:	42ab      	cmp	r3, r5
 800adc8:	d8ea      	bhi.n	800ada0 <_rclc_take_new_data+0x278>
 800adca:	e723      	b.n	800ac14 <_rclc_take_new_data+0xec>
 800adcc:	ab06      	add	r3, sp, #24
 800adce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800add0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800add4:	2103      	movs	r1, #3
 800add6:	e896 000c 	ldmia.w	r6, {r2, r3}
 800adda:	6860      	ldr	r0, [r4, #4]
 800addc:	f007 fd5c 	bl	8012898 <rclc_action_server_goal_cancel_reject>
 800ade0:	e6c4      	b.n	800ab6c <_rclc_take_new_data+0x44>
 800ade2:	ab06      	add	r3, sp, #24
 800ade4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ade6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800adea:	2102      	movs	r1, #2
 800adec:	e896 000c 	ldmia.w	r6, {r2, r3}
 800adf0:	6860      	ldr	r0, [r4, #4]
 800adf2:	f007 fd51 	bl	8012898 <rclc_action_server_goal_cancel_reject>
 800adf6:	e6b9      	b.n	800ab6c <_rclc_take_new_data+0x44>
 800adf8:	6860      	ldr	r0, [r4, #4]
 800adfa:	e706      	b.n	800ac0a <_rclc_take_new_data+0xe2>
 800adfc:	6860      	ldr	r0, [r4, #4]
 800adfe:	4631      	mov	r1, r6
 800ae00:	f007 fc6a 	bl	80126d8 <rclc_action_remove_used_goal_handle>
 800ae04:	f000 fdd0 	bl	800b9a8 <rcutils_reset_error>
 800ae08:	e6b0      	b.n	800ab6c <_rclc_take_new_data+0x44>
 800ae0a:	2501      	movs	r5, #1
 800ae0c:	e6ae      	b.n	800ab6c <_rclc_take_new_data+0x44>
 800ae0e:	bf00      	nop

0800ae10 <_rclc_execute.part.0>:
 800ae10:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae12:	7803      	ldrb	r3, [r0, #0]
 800ae14:	b087      	sub	sp, #28
 800ae16:	4604      	mov	r4, r0
 800ae18:	2b0a      	cmp	r3, #10
 800ae1a:	f200 8136 	bhi.w	800b08a <_rclc_execute.part.0+0x27a>
 800ae1e:	e8df f003 	tbb	[pc, r3]
 800ae22:	435e      	.short	0x435e
 800ae24:	06a1664f 	.word	0x06a1664f
 800ae28:	6c1e0606 	.word	0x6c1e0606
 800ae2c:	59          	.byte	0x59
 800ae2d:	00          	.byte	0x00
 800ae2e:	2b06      	cmp	r3, #6
 800ae30:	f000 8122 	beq.w	800b078 <_rclc_execute.part.0+0x268>
 800ae34:	2b07      	cmp	r3, #7
 800ae36:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800ae38:	f040 8118 	bne.w	800b06c <_rclc_execute.part.0+0x25c>
 800ae3c:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800ae40:	6880      	ldr	r0, [r0, #8]
 800ae42:	4798      	blx	r3
 800ae44:	f104 0110 	add.w	r1, r4, #16
 800ae48:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800ae4a:	6860      	ldr	r0, [r4, #4]
 800ae4c:	f005 ffc2 	bl	8010dd4 <rcl_send_response>
 800ae50:	2800      	cmp	r0, #0
 800ae52:	d033      	beq.n	800aebc <_rclc_execute.part.0+0xac>
 800ae54:	9005      	str	r0, [sp, #20]
 800ae56:	f000 fda7 	bl	800b9a8 <rcutils_reset_error>
 800ae5a:	9805      	ldr	r0, [sp, #20]
 800ae5c:	e02e      	b.n	800aebc <_rclc_execute.part.0+0xac>
 800ae5e:	6840      	ldr	r0, [r0, #4]
 800ae60:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	f000 8086 	beq.w	800af76 <_rclc_execute.part.0+0x166>
 800ae6a:	2600      	movs	r6, #0
 800ae6c:	2701      	movs	r7, #1
 800ae6e:	e004      	b.n	800ae7a <_rclc_execute.part.0+0x6a>
 800ae70:	f007 fbfc 	bl	801266c <rclc_action_send_result_request>
 800ae74:	b998      	cbnz	r0, 800ae9e <_rclc_execute.part.0+0x8e>
 800ae76:	722f      	strb	r7, [r5, #8]
 800ae78:	6860      	ldr	r0, [r4, #4]
 800ae7a:	f007 fca9 	bl	80127d0 <rclc_action_find_first_handle_with_goal_response>
 800ae7e:	4605      	mov	r5, r0
 800ae80:	2800      	cmp	r0, #0
 800ae82:	d077      	beq.n	800af74 <_rclc_execute.part.0+0x164>
 800ae84:	6863      	ldr	r3, [r4, #4]
 800ae86:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800ae88:	699b      	ldr	r3, [r3, #24]
 800ae8a:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800ae8e:	f885 6020 	strb.w	r6, [r5, #32]
 800ae92:	4798      	blx	r3
 800ae94:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800ae98:	4628      	mov	r0, r5
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d1e8      	bne.n	800ae70 <_rclc_execute.part.0+0x60>
 800ae9e:	6860      	ldr	r0, [r4, #4]
 800aea0:	4629      	mov	r1, r5
 800aea2:	f007 fc19 	bl	80126d8 <rclc_action_remove_used_goal_handle>
 800aea6:	e7e7      	b.n	800ae78 <_rclc_execute.part.0+0x68>
 800aea8:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800aeac:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 800aeb0:	2d00      	cmp	r5, #0
 800aeb2:	f000 80c9 	beq.w	800b048 <_rclc_execute.part.0+0x238>
 800aeb6:	6880      	ldr	r0, [r0, #8]
 800aeb8:	4798      	blx	r3
 800aeba:	2000      	movs	r0, #0
 800aebc:	b007      	add	sp, #28
 800aebe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aec0:	6840      	ldr	r0, [r0, #4]
 800aec2:	f006 f845 	bl	8010f50 <rcl_timer_call>
 800aec6:	f240 3321 	movw	r3, #801	@ 0x321
 800aeca:	4298      	cmp	r0, r3
 800aecc:	d004      	beq.n	800aed8 <_rclc_execute.part.0+0xc8>
 800aece:	2800      	cmp	r0, #0
 800aed0:	d0f4      	beq.n	800aebc <_rclc_execute.part.0+0xac>
 800aed2:	e7bf      	b.n	800ae54 <_rclc_execute.part.0+0x44>
 800aed4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800aed6:	4798      	blx	r3
 800aed8:	2000      	movs	r0, #0
 800aeda:	b007      	add	sp, #28
 800aedc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aede:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800aee2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800aee4:	b925      	cbnz	r5, 800aef0 <_rclc_execute.part.0+0xe0>
 800aee6:	4628      	mov	r0, r5
 800aee8:	4798      	blx	r3
 800aeea:	4628      	mov	r0, r5
 800aeec:	e7e6      	b.n	800aebc <_rclc_execute.part.0+0xac>
 800aeee:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800aef0:	68a0      	ldr	r0, [r4, #8]
 800aef2:	4798      	blx	r3
 800aef4:	2000      	movs	r0, #0
 800aef6:	b007      	add	sp, #28
 800aef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aefa:	6840      	ldr	r0, [r0, #4]
 800aefc:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800af00:	bb3b      	cbnz	r3, 800af52 <_rclc_execute.part.0+0x142>
 800af02:	f890 3020 	ldrb.w	r3, [r0, #32]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d07b      	beq.n	800b002 <_rclc_execute.part.0+0x1f2>
 800af0a:	f640 0634 	movw	r6, #2100	@ 0x834
 800af0e:	2701      	movs	r7, #1
 800af10:	e007      	b.n	800af22 <_rclc_execute.part.0+0x112>
 800af12:	4628      	mov	r0, r5
 800af14:	f007 fc74 	bl	8012800 <rclc_action_server_response_goal_request>
 800af18:	6860      	ldr	r0, [r4, #4]
 800af1a:	4629      	mov	r1, r5
 800af1c:	f007 fbdc 	bl	80126d8 <rclc_action_remove_used_goal_handle>
 800af20:	6860      	ldr	r0, [r4, #4]
 800af22:	2100      	movs	r1, #0
 800af24:	f007 fc06 	bl	8012734 <rclc_action_find_first_handle_by_status>
 800af28:	4605      	mov	r5, r0
 800af2a:	2800      	cmp	r0, #0
 800af2c:	d066      	beq.n	800affc <_rclc_execute.part.0+0x1ec>
 800af2e:	6863      	ldr	r3, [r4, #4]
 800af30:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800af32:	699b      	ldr	r3, [r3, #24]
 800af34:	4798      	blx	r3
 800af36:	42b0      	cmp	r0, r6
 800af38:	f04f 0100 	mov.w	r1, #0
 800af3c:	d1e9      	bne.n	800af12 <_rclc_execute.part.0+0x102>
 800af3e:	2101      	movs	r1, #1
 800af40:	4628      	mov	r0, r5
 800af42:	f007 fc5d 	bl	8012800 <rclc_action_server_response_goal_request>
 800af46:	722f      	strb	r7, [r5, #8]
 800af48:	e7ea      	b.n	800af20 <_rclc_execute.part.0+0x110>
 800af4a:	6848      	ldr	r0, [r1, #4]
 800af4c:	f007 fbc4 	bl	80126d8 <rclc_action_remove_used_goal_handle>
 800af50:	6860      	ldr	r0, [r4, #4]
 800af52:	f007 fbfb 	bl	801274c <rclc_action_find_first_terminated_handle>
 800af56:	4601      	mov	r1, r0
 800af58:	2800      	cmp	r0, #0
 800af5a:	d1f6      	bne.n	800af4a <_rclc_execute.part.0+0x13a>
 800af5c:	6860      	ldr	r0, [r4, #4]
 800af5e:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800af62:	e7ce      	b.n	800af02 <_rclc_execute.part.0+0xf2>
 800af64:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800af66:	6880      	ldr	r0, [r0, #8]
 800af68:	f104 0110 	add.w	r1, r4, #16
 800af6c:	4798      	blx	r3
 800af6e:	2000      	movs	r0, #0
 800af70:	b007      	add	sp, #28
 800af72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af74:	6860      	ldr	r0, [r4, #4]
 800af76:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800af7a:	b18b      	cbz	r3, 800afa0 <_rclc_execute.part.0+0x190>
 800af7c:	68c5      	ldr	r5, [r0, #12]
 800af7e:	b32d      	cbz	r5, 800afcc <_rclc_execute.part.0+0x1bc>
 800af80:	2600      	movs	r6, #0
 800af82:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800af86:	b143      	cbz	r3, 800af9a <_rclc_execute.part.0+0x18a>
 800af88:	69c3      	ldr	r3, [r0, #28]
 800af8a:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800af8e:	b123      	cbz	r3, 800af9a <_rclc_execute.part.0+0x18a>
 800af90:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800af92:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800af94:	4628      	mov	r0, r5
 800af96:	4798      	blx	r3
 800af98:	6860      	ldr	r0, [r4, #4]
 800af9a:	682d      	ldr	r5, [r5, #0]
 800af9c:	2d00      	cmp	r5, #0
 800af9e:	d1f0      	bne.n	800af82 <_rclc_execute.part.0+0x172>
 800afa0:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800afa4:	b193      	cbz	r3, 800afcc <_rclc_execute.part.0+0x1bc>
 800afa6:	68c5      	ldr	r5, [r0, #12]
 800afa8:	b185      	cbz	r5, 800afcc <_rclc_execute.part.0+0x1bc>
 800afaa:	2600      	movs	r6, #0
 800afac:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800afb0:	b14b      	cbz	r3, 800afc6 <_rclc_execute.part.0+0x1b6>
 800afb2:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800afb4:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800afb8:	b12b      	cbz	r3, 800afc6 <_rclc_execute.part.0+0x1b6>
 800afba:	4628      	mov	r0, r5
 800afbc:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800afc0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800afc2:	4798      	blx	r3
 800afc4:	6860      	ldr	r0, [r4, #4]
 800afc6:	682d      	ldr	r5, [r5, #0]
 800afc8:	2d00      	cmp	r5, #0
 800afca:	d1ef      	bne.n	800afac <_rclc_execute.part.0+0x19c>
 800afcc:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d081      	beq.n	800aed8 <_rclc_execute.part.0+0xc8>
 800afd4:	2700      	movs	r7, #0
 800afd6:	e00b      	b.n	800aff0 <_rclc_execute.part.0+0x1e0>
 800afd8:	6863      	ldr	r3, [r4, #4]
 800afda:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800afdc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800afde:	6a1e      	ldr	r6, [r3, #32]
 800afe0:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800afe4:	47b0      	blx	r6
 800afe6:	6860      	ldr	r0, [r4, #4]
 800afe8:	4629      	mov	r1, r5
 800afea:	f007 fb75 	bl	80126d8 <rclc_action_remove_used_goal_handle>
 800afee:	6860      	ldr	r0, [r4, #4]
 800aff0:	f007 fbfa 	bl	80127e8 <rclc_action_find_first_handle_with_result_response>
 800aff4:	4605      	mov	r5, r0
 800aff6:	2800      	cmp	r0, #0
 800aff8:	d1ee      	bne.n	800afd8 <_rclc_execute.part.0+0x1c8>
 800affa:	e76d      	b.n	800aed8 <_rclc_execute.part.0+0xc8>
 800affc:	6860      	ldr	r0, [r4, #4]
 800affe:	f880 5020 	strb.w	r5, [r0, #32]
 800b002:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800b006:	2b00      	cmp	r3, #0
 800b008:	f43f af66 	beq.w	800aed8 <_rclc_execute.part.0+0xc8>
 800b00c:	68c5      	ldr	r5, [r0, #12]
 800b00e:	b1b5      	cbz	r5, 800b03e <_rclc_execute.part.0+0x22e>
 800b010:	2602      	movs	r6, #2
 800b012:	e001      	b.n	800b018 <_rclc_execute.part.0+0x208>
 800b014:	682d      	ldr	r5, [r5, #0]
 800b016:	b195      	cbz	r5, 800b03e <_rclc_execute.part.0+0x22e>
 800b018:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800b01c:	2b03      	cmp	r3, #3
 800b01e:	d1f9      	bne.n	800b014 <_rclc_execute.part.0+0x204>
 800b020:	69c3      	ldr	r3, [r0, #28]
 800b022:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800b024:	4628      	mov	r0, r5
 800b026:	4798      	blx	r3
 800b028:	4603      	mov	r3, r0
 800b02a:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800b02e:	4628      	mov	r0, r5
 800b030:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800b034:	b163      	cbz	r3, 800b050 <_rclc_execute.part.0+0x240>
 800b036:	f007 fc03 	bl	8012840 <rclc_action_server_goal_cancel_accept>
 800b03a:	6860      	ldr	r0, [r4, #4]
 800b03c:	e7ea      	b.n	800b014 <_rclc_execute.part.0+0x204>
 800b03e:	2300      	movs	r3, #0
 800b040:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800b044:	4618      	mov	r0, r3
 800b046:	e739      	b.n	800aebc <_rclc_execute.part.0+0xac>
 800b048:	4628      	mov	r0, r5
 800b04a:	4798      	blx	r3
 800b04c:	4628      	mov	r0, r5
 800b04e:	e735      	b.n	800aebc <_rclc_execute.part.0+0xac>
 800b050:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800b052:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800b056:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800b05a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b05e:	6860      	ldr	r0, [r4, #4]
 800b060:	2101      	movs	r1, #1
 800b062:	f007 fc19 	bl	8012898 <rclc_action_server_goal_cancel_reject>
 800b066:	722e      	strb	r6, [r5, #8]
 800b068:	6860      	ldr	r0, [r4, #4]
 800b06a:	e7d3      	b.n	800b014 <_rclc_execute.part.0+0x204>
 800b06c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800b06e:	6880      	ldr	r0, [r0, #8]
 800b070:	4798      	blx	r3
 800b072:	f104 0110 	add.w	r1, r4, #16
 800b076:	e6e7      	b.n	800ae48 <_rclc_execute.part.0+0x38>
 800b078:	f100 0110 	add.w	r1, r0, #16
 800b07c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800b07e:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800b080:	6880      	ldr	r0, [r0, #8]
 800b082:	9105      	str	r1, [sp, #20]
 800b084:	4798      	blx	r3
 800b086:	9905      	ldr	r1, [sp, #20]
 800b088:	e6de      	b.n	800ae48 <_rclc_execute.part.0+0x38>
 800b08a:	2001      	movs	r0, #1
 800b08c:	e716      	b.n	800aebc <_rclc_execute.part.0+0xac>
 800b08e:	bf00      	nop

0800b090 <rclc_executor_trigger_any>:
 800b090:	2800      	cmp	r0, #0
 800b092:	d03f      	beq.n	800b114 <rclc_executor_trigger_any+0x84>
 800b094:	2900      	cmp	r1, #0
 800b096:	d03e      	beq.n	800b116 <rclc_executor_trigger_any+0x86>
 800b098:	4603      	mov	r3, r0
 800b09a:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800b09e:	2200      	movs	r2, #0
 800b0a0:	2800      	cmp	r0, #0
 800b0a2:	d037      	beq.n	800b114 <rclc_executor_trigger_any+0x84>
 800b0a4:	b430      	push	{r4, r5}
 800b0a6:	f893 c000 	ldrb.w	ip, [r3]
 800b0aa:	f1bc 0f08 	cmp.w	ip, #8
 800b0ae:	d11e      	bne.n	800b0ee <rclc_executor_trigger_any+0x5e>
 800b0b0:	685c      	ldr	r4, [r3, #4]
 800b0b2:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800b0b4:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800b0b8:	d105      	bne.n	800b0c6 <rclc_executor_trigger_any+0x36>
 800b0ba:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800b0be:	b910      	cbnz	r0, 800b0c6 <rclc_executor_trigger_any+0x36>
 800b0c0:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800b0c4:	b128      	cbz	r0, 800b0d2 <rclc_executor_trigger_any+0x42>
 800b0c6:	bc30      	pop	{r4, r5}
 800b0c8:	4770      	bx	lr
 800b0ca:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800b0ce:	2800      	cmp	r0, #0
 800b0d0:	d1f9      	bne.n	800b0c6 <rclc_executor_trigger_any+0x36>
 800b0d2:	3201      	adds	r2, #1
 800b0d4:	4291      	cmp	r1, r2
 800b0d6:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800b0da:	d018      	beq.n	800b10e <rclc_executor_trigger_any+0x7e>
 800b0dc:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800b0e0:	2800      	cmp	r0, #0
 800b0e2:	d0f0      	beq.n	800b0c6 <rclc_executor_trigger_any+0x36>
 800b0e4:	f893 c000 	ldrb.w	ip, [r3]
 800b0e8:	f1bc 0f08 	cmp.w	ip, #8
 800b0ec:	d0e0      	beq.n	800b0b0 <rclc_executor_trigger_any+0x20>
 800b0ee:	f1bc 0f09 	cmp.w	ip, #9
 800b0f2:	d1ea      	bne.n	800b0ca <rclc_executor_trigger_any+0x3a>
 800b0f4:	685c      	ldr	r4, [r3, #4]
 800b0f6:	6a25      	ldr	r5, [r4, #32]
 800b0f8:	2d00      	cmp	r5, #0
 800b0fa:	d1e4      	bne.n	800b0c6 <rclc_executor_trigger_any+0x36>
 800b0fc:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800b100:	2800      	cmp	r0, #0
 800b102:	d1e0      	bne.n	800b0c6 <rclc_executor_trigger_any+0x36>
 800b104:	3201      	adds	r2, #1
 800b106:	4291      	cmp	r1, r2
 800b108:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800b10c:	d1e6      	bne.n	800b0dc <rclc_executor_trigger_any+0x4c>
 800b10e:	2000      	movs	r0, #0
 800b110:	bc30      	pop	{r4, r5}
 800b112:	4770      	bx	lr
 800b114:	4770      	bx	lr
 800b116:	4608      	mov	r0, r1
 800b118:	4770      	bx	lr
 800b11a:	bf00      	nop

0800b11c <rclc_executor_get_zero_initialized_executor>:
 800b11c:	b510      	push	{r4, lr}
 800b11e:	4903      	ldr	r1, [pc, #12]	@ (800b12c <rclc_executor_get_zero_initialized_executor+0x10>)
 800b120:	4604      	mov	r4, r0
 800b122:	2288      	movs	r2, #136	@ 0x88
 800b124:	f00c ff73 	bl	801800e <memcpy>
 800b128:	4620      	mov	r0, r4
 800b12a:	bd10      	pop	{r4, pc}
 800b12c:	0801a088 	.word	0x0801a088

0800b130 <rclc_executor_init>:
 800b130:	2800      	cmp	r0, #0
 800b132:	d05f      	beq.n	800b1f4 <rclc_executor_init+0xc4>
 800b134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b138:	460c      	mov	r4, r1
 800b13a:	b0b0      	sub	sp, #192	@ 0xc0
 800b13c:	2900      	cmp	r1, #0
 800b13e:	d051      	beq.n	800b1e4 <rclc_executor_init+0xb4>
 800b140:	4605      	mov	r5, r0
 800b142:	4618      	mov	r0, r3
 800b144:	4616      	mov	r6, r2
 800b146:	461f      	mov	r7, r3
 800b148:	f000 fbf2 	bl	800b930 <rcutils_allocator_is_valid>
 800b14c:	2800      	cmp	r0, #0
 800b14e:	d049      	beq.n	800b1e4 <rclc_executor_init+0xb4>
 800b150:	2e00      	cmp	r6, #0
 800b152:	d047      	beq.n	800b1e4 <rclc_executor_init+0xb4>
 800b154:	492c      	ldr	r1, [pc, #176]	@ (800b208 <rclc_executor_init+0xd8>)
 800b156:	2288      	movs	r2, #136	@ 0x88
 800b158:	a80e      	add	r0, sp, #56	@ 0x38
 800b15a:	f00c ff58 	bl	801800e <memcpy>
 800b15e:	a90e      	add	r1, sp, #56	@ 0x38
 800b160:	2288      	movs	r2, #136	@ 0x88
 800b162:	4628      	mov	r0, r5
 800b164:	f00c ff53 	bl	801800e <memcpy>
 800b168:	602c      	str	r4, [r5, #0]
 800b16a:	4668      	mov	r0, sp
 800b16c:	60ae      	str	r6, [r5, #8]
 800b16e:	466c      	mov	r4, sp
 800b170:	f006 f860 	bl	8011234 <rcl_get_zero_initialized_wait_set>
 800b174:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b176:	f105 0c14 	add.w	ip, r5, #20
 800b17a:	f8d7 8000 	ldr.w	r8, [r7]
 800b17e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b182:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b184:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b188:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b18a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b18e:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800b200 <rclc_executor_init+0xd0>
 800b192:	6823      	ldr	r3, [r4, #0]
 800b194:	f8cc 3000 	str.w	r3, [ip]
 800b198:	6939      	ldr	r1, [r7, #16]
 800b19a:	612f      	str	r7, [r5, #16]
 800b19c:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 800b1a0:	01b0      	lsls	r0, r6, #6
 800b1a2:	47c0      	blx	r8
 800b1a4:	6068      	str	r0, [r5, #4]
 800b1a6:	b338      	cbz	r0, 800b1f8 <rclc_executor_init+0xc8>
 800b1a8:	2400      	movs	r4, #0
 800b1aa:	e000      	b.n	800b1ae <rclc_executor_init+0x7e>
 800b1ac:	6868      	ldr	r0, [r5, #4]
 800b1ae:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800b1b2:	4631      	mov	r1, r6
 800b1b4:	3401      	adds	r4, #1
 800b1b6:	f000 fa73 	bl	800b6a0 <rclc_executor_handle_init>
 800b1ba:	42a6      	cmp	r6, r4
 800b1bc:	d1f6      	bne.n	800b1ac <rclc_executor_init+0x7c>
 800b1be:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800b1c2:	f000 fa63 	bl	800b68c <rclc_executor_handle_counters_zero_init>
 800b1c6:	4a11      	ldr	r2, [pc, #68]	@ (800b20c <rclc_executor_init+0xdc>)
 800b1c8:	686b      	ldr	r3, [r5, #4]
 800b1ca:	2000      	movs	r0, #0
 800b1cc:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 800b1d0:	b163      	cbz	r3, 800b1ec <rclc_executor_init+0xbc>
 800b1d2:	692b      	ldr	r3, [r5, #16]
 800b1d4:	b153      	cbz	r3, 800b1ec <rclc_executor_init+0xbc>
 800b1d6:	68ab      	ldr	r3, [r5, #8]
 800b1d8:	b143      	cbz	r3, 800b1ec <rclc_executor_init+0xbc>
 800b1da:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 800b1de:	b030      	add	sp, #192	@ 0xc0
 800b1e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1e4:	200b      	movs	r0, #11
 800b1e6:	b030      	add	sp, #192	@ 0xc0
 800b1e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	b030      	add	sp, #192	@ 0xc0
 800b1f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1f4:	200b      	movs	r0, #11
 800b1f6:	4770      	bx	lr
 800b1f8:	200a      	movs	r0, #10
 800b1fa:	e7f4      	b.n	800b1e6 <rclc_executor_init+0xb6>
 800b1fc:	f3af 8000 	nop.w
 800b200:	3b9aca00 	.word	0x3b9aca00
 800b204:	00000000 	.word	0x00000000
 800b208:	0801a088 	.word	0x0801a088
 800b20c:	0800b091 	.word	0x0800b091

0800b210 <rclc_executor_add_subscription>:
 800b210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b212:	f89d e018 	ldrb.w	lr, [sp, #24]
 800b216:	b338      	cbz	r0, 800b268 <rclc_executor_add_subscription+0x58>
 800b218:	b331      	cbz	r1, 800b268 <rclc_executor_add_subscription+0x58>
 800b21a:	b32a      	cbz	r2, 800b268 <rclc_executor_add_subscription+0x58>
 800b21c:	b323      	cbz	r3, 800b268 <rclc_executor_add_subscription+0x58>
 800b21e:	4604      	mov	r4, r0
 800b220:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
 800b224:	42a8      	cmp	r0, r5
 800b226:	d301      	bcc.n	800b22c <rclc_executor_add_subscription+0x1c>
 800b228:	2001      	movs	r0, #1
 800b22a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b22c:	6866      	ldr	r6, [r4, #4]
 800b22e:	0187      	lsls	r7, r0, #6
 800b230:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 800b234:	2500      	movs	r5, #0
 800b236:	55f5      	strb	r5, [r6, r7]
 800b238:	3001      	adds	r0, #1
 800b23a:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 800b23e:	f8cc 502c 	str.w	r5, [ip, #44]	@ 0x2c
 800b242:	2301      	movs	r3, #1
 800b244:	f104 0514 	add.w	r5, r4, #20
 800b248:	e9cc 1201 	strd	r1, r2, [ip, #4]
 800b24c:	f88c e001 	strb.w	lr, [ip, #1]
 800b250:	f8ac 3038 	strh.w	r3, [ip, #56]	@ 0x38
 800b254:	60e0      	str	r0, [r4, #12]
 800b256:	4628      	mov	r0, r5
 800b258:	f006 f800 	bl	801125c <rcl_wait_set_is_valid>
 800b25c:	b930      	cbnz	r0, 800b26c <rclc_executor_add_subscription+0x5c>
 800b25e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800b260:	3301      	adds	r3, #1
 800b262:	2000      	movs	r0, #0
 800b264:	64a3      	str	r3, [r4, #72]	@ 0x48
 800b266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b268:	200b      	movs	r0, #11
 800b26a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b26c:	4628      	mov	r0, r5
 800b26e:	f005 fffb 	bl	8011268 <rcl_wait_set_fini>
 800b272:	2800      	cmp	r0, #0
 800b274:	d0f3      	beq.n	800b25e <rclc_executor_add_subscription+0x4e>
 800b276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b278 <rclc_executor_prepare>:
 800b278:	2800      	cmp	r0, #0
 800b27a:	d044      	beq.n	800b306 <rclc_executor_prepare+0x8e>
 800b27c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b27e:	f100 0514 	add.w	r5, r0, #20
 800b282:	b09b      	sub	sp, #108	@ 0x6c
 800b284:	4604      	mov	r4, r0
 800b286:	4628      	mov	r0, r5
 800b288:	f005 ffe8 	bl	801125c <rcl_wait_set_is_valid>
 800b28c:	b110      	cbz	r0, 800b294 <rclc_executor_prepare+0x1c>
 800b28e:	2000      	movs	r0, #0
 800b290:	b01b      	add	sp, #108	@ 0x6c
 800b292:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b294:	4628      	mov	r0, r5
 800b296:	f005 ffe7 	bl	8011268 <rcl_wait_set_fini>
 800b29a:	2800      	cmp	r0, #0
 800b29c:	d130      	bne.n	800b300 <rclc_executor_prepare+0x88>
 800b29e:	a80c      	add	r0, sp, #48	@ 0x30
 800b2a0:	f005 ffc8 	bl	8011234 <rcl_get_zero_initialized_wait_set>
 800b2a4:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800b2a8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b2ac:	46ae      	mov	lr, r5
 800b2ae:	6927      	ldr	r7, [r4, #16]
 800b2b0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800b2b4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b2b8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800b2bc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b2c0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800b2c4:	f8dc 3000 	ldr.w	r3, [ip]
 800b2c8:	f8ce 3000 	str.w	r3, [lr]
 800b2cc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800b2ce:	ae04      	add	r6, sp, #16
 800b2d0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800b2d2:	683b      	ldr	r3, [r7, #0]
 800b2d4:	6822      	ldr	r2, [r4, #0]
 800b2d6:	6033      	str	r3, [r6, #0]
 800b2d8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b2da:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800b2dc:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800b2e0:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 800b2e4:	e9cd 2100 	strd	r2, r1, [sp]
 800b2e8:	4628      	mov	r0, r5
 800b2ea:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800b2ec:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800b2ee:	f006 fab9 	bl	8011864 <rcl_wait_set_init>
 800b2f2:	2800      	cmp	r0, #0
 800b2f4:	d0cc      	beq.n	800b290 <rclc_executor_prepare+0x18>
 800b2f6:	900b      	str	r0, [sp, #44]	@ 0x2c
 800b2f8:	f000 fb56 	bl	800b9a8 <rcutils_reset_error>
 800b2fc:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800b2fe:	e7c7      	b.n	800b290 <rclc_executor_prepare+0x18>
 800b300:	f000 fb52 	bl	800b9a8 <rcutils_reset_error>
 800b304:	e7cb      	b.n	800b29e <rclc_executor_prepare+0x26>
 800b306:	200b      	movs	r0, #11
 800b308:	4770      	bx	lr
 800b30a:	bf00      	nop

0800b30c <rclc_executor_spin_some.part.0>:
 800b30c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b310:	f100 0614 	add.w	r6, r0, #20
 800b314:	b083      	sub	sp, #12
 800b316:	4691      	mov	r9, r2
 800b318:	4698      	mov	r8, r3
 800b31a:	4605      	mov	r5, r0
 800b31c:	f7ff ffac 	bl	800b278 <rclc_executor_prepare>
 800b320:	4630      	mov	r0, r6
 800b322:	f006 f86d 	bl	8011400 <rcl_wait_set_clear>
 800b326:	4607      	mov	r7, r0
 800b328:	2800      	cmp	r0, #0
 800b32a:	f040 80ed 	bne.w	800b508 <rclc_executor_spin_some.part.0+0x1fc>
 800b32e:	68ab      	ldr	r3, [r5, #8]
 800b330:	4604      	mov	r4, r0
 800b332:	b303      	cbz	r3, 800b376 <rclc_executor_spin_some.part.0+0x6a>
 800b334:	6869      	ldr	r1, [r5, #4]
 800b336:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800b33a:	01a2      	lsls	r2, r4, #6
 800b33c:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800b340:	b1cb      	cbz	r3, 800b376 <rclc_executor_spin_some.part.0+0x6a>
 800b342:	5c8b      	ldrb	r3, [r1, r2]
 800b344:	2b0a      	cmp	r3, #10
 800b346:	f200 80d8 	bhi.w	800b4fa <rclc_executor_spin_some.part.0+0x1ee>
 800b34a:	e8df f003 	tbb	[pc, r3]
 800b34e:	9c9c      	.short	0x9c9c
 800b350:	068c8ca7 	.word	0x068c8ca7
 800b354:	bdc90606 	.word	0xbdc90606
 800b358:	b2          	.byte	0xb2
 800b359:	00          	.byte	0x00
 800b35a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b35e:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b362:	4630      	mov	r0, r6
 800b364:	f006 fb94 	bl	8011a90 <rcl_wait_set_add_service>
 800b368:	2800      	cmp	r0, #0
 800b36a:	f040 8086 	bne.w	800b47a <rclc_executor_spin_some.part.0+0x16e>
 800b36e:	68ab      	ldr	r3, [r5, #8]
 800b370:	3401      	adds	r4, #1
 800b372:	429c      	cmp	r4, r3
 800b374:	d3de      	bcc.n	800b334 <rclc_executor_spin_some.part.0+0x28>
 800b376:	4643      	mov	r3, r8
 800b378:	464a      	mov	r2, r9
 800b37a:	4630      	mov	r0, r6
 800b37c:	f006 fbb4 	bl	8011ae8 <rcl_wait>
 800b380:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 800b384:	2b00      	cmp	r3, #0
 800b386:	f000 80c7 	beq.w	800b518 <rclc_executor_spin_some.part.0+0x20c>
 800b38a:	2b01      	cmp	r3, #1
 800b38c:	f040 80b5 	bne.w	800b4fa <rclc_executor_spin_some.part.0+0x1ee>
 800b390:	68ab      	ldr	r3, [r5, #8]
 800b392:	2b00      	cmp	r3, #0
 800b394:	f000 8159 	beq.w	800b64a <rclc_executor_spin_some.part.0+0x33e>
 800b398:	2400      	movs	r4, #0
 800b39a:	46a0      	mov	r8, r4
 800b39c:	f240 1991 	movw	r9, #401	@ 0x191
 800b3a0:	e00a      	b.n	800b3b8 <rclc_executor_spin_some.part.0+0xac>
 800b3a2:	f7ff fb73 	bl	800aa8c <_rclc_check_for_new_data>
 800b3a6:	4604      	mov	r4, r0
 800b3a8:	b110      	cbz	r0, 800b3b0 <rclc_executor_spin_some.part.0+0xa4>
 800b3aa:	4548      	cmp	r0, r9
 800b3ac:	f040 80b2 	bne.w	800b514 <rclc_executor_spin_some.part.0+0x208>
 800b3b0:	68ab      	ldr	r3, [r5, #8]
 800b3b2:	4598      	cmp	r8, r3
 800b3b4:	f080 8126 	bcs.w	800b604 <rclc_executor_spin_some.part.0+0x2f8>
 800b3b8:	686a      	ldr	r2, [r5, #4]
 800b3ba:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800b3be:	4631      	mov	r1, r6
 800b3c0:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800b3c4:	f108 0801 	add.w	r8, r8, #1
 800b3c8:	f1bc 0f00 	cmp.w	ip, #0
 800b3cc:	d1e9      	bne.n	800b3a2 <rclc_executor_spin_some.part.0+0x96>
 800b3ce:	4619      	mov	r1, r3
 800b3d0:	4610      	mov	r0, r2
 800b3d2:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800b3d6:	4798      	blx	r3
 800b3d8:	2800      	cmp	r0, #0
 800b3da:	f000 809b 	beq.w	800b514 <rclc_executor_spin_some.part.0+0x208>
 800b3de:	68ab      	ldr	r3, [r5, #8]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	f000 8097 	beq.w	800b514 <rclc_executor_spin_some.part.0+0x208>
 800b3e6:	f04f 0800 	mov.w	r8, #0
 800b3ea:	f240 1991 	movw	r9, #401	@ 0x191
 800b3ee:	e009      	b.n	800b404 <rclc_executor_spin_some.part.0+0xf8>
 800b3f0:	f7ff fb9a 	bl	800ab28 <_rclc_take_new_data>
 800b3f4:	4604      	mov	r4, r0
 800b3f6:	b110      	cbz	r0, 800b3fe <rclc_executor_spin_some.part.0+0xf2>
 800b3f8:	4548      	cmp	r0, r9
 800b3fa:	f040 808b 	bne.w	800b514 <rclc_executor_spin_some.part.0+0x208>
 800b3fe:	68ab      	ldr	r3, [r5, #8]
 800b400:	4598      	cmp	r8, r3
 800b402:	d209      	bcs.n	800b418 <rclc_executor_spin_some.part.0+0x10c>
 800b404:	6868      	ldr	r0, [r5, #4]
 800b406:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800b40a:	4631      	mov	r1, r6
 800b40c:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800b410:	f108 0801 	add.w	r8, r8, #1
 800b414:	2a00      	cmp	r2, #0
 800b416:	d1eb      	bne.n	800b3f0 <rclc_executor_spin_some.part.0+0xe4>
 800b418:	2600      	movs	r6, #0
 800b41a:	b97b      	cbnz	r3, 800b43c <rclc_executor_spin_some.part.0+0x130>
 800b41c:	e07a      	b.n	800b514 <rclc_executor_spin_some.part.0+0x208>
 800b41e:	f812 200c 	ldrb.w	r2, [r2, ip]
 800b422:	2a08      	cmp	r2, #8
 800b424:	f000 80fd 	beq.w	800b622 <rclc_executor_spin_some.part.0+0x316>
 800b428:	2a09      	cmp	r2, #9
 800b42a:	f000 80ef 	beq.w	800b60c <rclc_executor_spin_some.part.0+0x300>
 800b42e:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800b432:	b98a      	cbnz	r2, 800b458 <rclc_executor_spin_some.part.0+0x14c>
 800b434:	3601      	adds	r6, #1
 800b436:	429e      	cmp	r6, r3
 800b438:	d262      	bcs.n	800b500 <rclc_executor_spin_some.part.0+0x1f4>
 800b43a:	2400      	movs	r4, #0
 800b43c:	686a      	ldr	r2, [r5, #4]
 800b43e:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800b442:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800b446:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800b44a:	2900      	cmp	r1, #0
 800b44c:	d062      	beq.n	800b514 <rclc_executor_spin_some.part.0+0x208>
 800b44e:	7841      	ldrb	r1, [r0, #1]
 800b450:	2900      	cmp	r1, #0
 800b452:	d0e4      	beq.n	800b41e <rclc_executor_spin_some.part.0+0x112>
 800b454:	2901      	cmp	r1, #1
 800b456:	d1ed      	bne.n	800b434 <rclc_executor_spin_some.part.0+0x128>
 800b458:	f7ff fcda 	bl	800ae10 <_rclc_execute.part.0>
 800b45c:	2800      	cmp	r0, #0
 800b45e:	f040 80b6 	bne.w	800b5ce <rclc_executor_spin_some.part.0+0x2c2>
 800b462:	68ab      	ldr	r3, [r5, #8]
 800b464:	e7e6      	b.n	800b434 <rclc_executor_spin_some.part.0+0x128>
 800b466:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b46a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b46e:	4630      	mov	r0, r6
 800b470:	f006 fae2 	bl	8011a38 <rcl_wait_set_add_client>
 800b474:	2800      	cmp	r0, #0
 800b476:	f43f af7a 	beq.w	800b36e <rclc_executor_spin_some.part.0+0x62>
 800b47a:	9001      	str	r0, [sp, #4]
 800b47c:	f000 fa94 	bl	800b9a8 <rcutils_reset_error>
 800b480:	9801      	ldr	r0, [sp, #4]
 800b482:	4607      	mov	r7, r0
 800b484:	e03c      	b.n	800b500 <rclc_executor_spin_some.part.0+0x1f4>
 800b486:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b48a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b48e:	4630      	mov	r0, r6
 800b490:	f005 ff8a 	bl	80113a8 <rcl_wait_set_add_subscription>
 800b494:	2800      	cmp	r0, #0
 800b496:	f43f af6a 	beq.w	800b36e <rclc_executor_spin_some.part.0+0x62>
 800b49a:	e7ee      	b.n	800b47a <rclc_executor_spin_some.part.0+0x16e>
 800b49c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b4a0:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b4a4:	4630      	mov	r0, r6
 800b4a6:	f006 fa97 	bl	80119d8 <rcl_wait_set_add_timer>
 800b4aa:	2800      	cmp	r0, #0
 800b4ac:	f43f af5f 	beq.w	800b36e <rclc_executor_spin_some.part.0+0x62>
 800b4b0:	e7e3      	b.n	800b47a <rclc_executor_spin_some.part.0+0x16e>
 800b4b2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b4b6:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b4ba:	4630      	mov	r0, r6
 800b4bc:	f006 fa60 	bl	8011980 <rcl_wait_set_add_guard_condition>
 800b4c0:	2800      	cmp	r0, #0
 800b4c2:	f43f af54 	beq.w	800b36e <rclc_executor_spin_some.part.0+0x62>
 800b4c6:	e7d8      	b.n	800b47a <rclc_executor_spin_some.part.0+0x16e>
 800b4c8:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b4cc:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b4d0:	3110      	adds	r1, #16
 800b4d2:	4630      	mov	r0, r6
 800b4d4:	f006 ffe0 	bl	8012498 <rcl_action_wait_set_add_action_server>
 800b4d8:	2800      	cmp	r0, #0
 800b4da:	f43f af48 	beq.w	800b36e <rclc_executor_spin_some.part.0+0x62>
 800b4de:	e7cc      	b.n	800b47a <rclc_executor_spin_some.part.0+0x16e>
 800b4e0:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b4e4:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b4e8:	3110      	adds	r1, #16
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	4630      	mov	r0, r6
 800b4ee:	f006 fdab 	bl	8012048 <rcl_action_wait_set_add_action_client>
 800b4f2:	2800      	cmp	r0, #0
 800b4f4:	f43f af3b 	beq.w	800b36e <rclc_executor_spin_some.part.0+0x62>
 800b4f8:	e7bf      	b.n	800b47a <rclc_executor_spin_some.part.0+0x16e>
 800b4fa:	f000 fa55 	bl	800b9a8 <rcutils_reset_error>
 800b4fe:	2701      	movs	r7, #1
 800b500:	4638      	mov	r0, r7
 800b502:	b003      	add	sp, #12
 800b504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b508:	f000 fa4e 	bl	800b9a8 <rcutils_reset_error>
 800b50c:	4638      	mov	r0, r7
 800b50e:	b003      	add	sp, #12
 800b510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b514:	4627      	mov	r7, r4
 800b516:	e7f3      	b.n	800b500 <rclc_executor_spin_some.part.0+0x1f4>
 800b518:	68ab      	ldr	r3, [r5, #8]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	f000 8092 	beq.w	800b644 <rclc_executor_spin_some.part.0+0x338>
 800b520:	2400      	movs	r4, #0
 800b522:	46a0      	mov	r8, r4
 800b524:	f240 1991 	movw	r9, #401	@ 0x191
 800b528:	e008      	b.n	800b53c <rclc_executor_spin_some.part.0+0x230>
 800b52a:	f7ff faaf 	bl	800aa8c <_rclc_check_for_new_data>
 800b52e:	4604      	mov	r4, r0
 800b530:	b108      	cbz	r0, 800b536 <rclc_executor_spin_some.part.0+0x22a>
 800b532:	4548      	cmp	r0, r9
 800b534:	d1ee      	bne.n	800b514 <rclc_executor_spin_some.part.0+0x208>
 800b536:	68ab      	ldr	r3, [r5, #8]
 800b538:	4598      	cmp	r8, r3
 800b53a:	d265      	bcs.n	800b608 <rclc_executor_spin_some.part.0+0x2fc>
 800b53c:	686a      	ldr	r2, [r5, #4]
 800b53e:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800b542:	4631      	mov	r1, r6
 800b544:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800b548:	f108 0801 	add.w	r8, r8, #1
 800b54c:	f1bc 0f00 	cmp.w	ip, #0
 800b550:	d1eb      	bne.n	800b52a <rclc_executor_spin_some.part.0+0x21e>
 800b552:	4619      	mov	r1, r3
 800b554:	4610      	mov	r0, r2
 800b556:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800b55a:	4798      	blx	r3
 800b55c:	2800      	cmp	r0, #0
 800b55e:	d0d9      	beq.n	800b514 <rclc_executor_spin_some.part.0+0x208>
 800b560:	68ab      	ldr	r3, [r5, #8]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d0d6      	beq.n	800b514 <rclc_executor_spin_some.part.0+0x208>
 800b566:	f04f 0800 	mov.w	r8, #0
 800b56a:	f240 1991 	movw	r9, #401	@ 0x191
 800b56e:	f240 2a59 	movw	sl, #601	@ 0x259
 800b572:	e00e      	b.n	800b592 <rclc_executor_spin_some.part.0+0x286>
 800b574:	f813 300b 	ldrb.w	r3, [r3, fp]
 800b578:	2b08      	cmp	r3, #8
 800b57a:	d033      	beq.n	800b5e4 <rclc_executor_spin_some.part.0+0x2d8>
 800b57c:	2b09      	cmp	r3, #9
 800b57e:	d028      	beq.n	800b5d2 <rclc_executor_spin_some.part.0+0x2c6>
 800b580:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800b584:	b9fb      	cbnz	r3, 800b5c6 <rclc_executor_spin_some.part.0+0x2ba>
 800b586:	68ab      	ldr	r3, [r5, #8]
 800b588:	f108 0801 	add.w	r8, r8, #1
 800b58c:	4598      	cmp	r8, r3
 800b58e:	d2b7      	bcs.n	800b500 <rclc_executor_spin_some.part.0+0x1f4>
 800b590:	2400      	movs	r4, #0
 800b592:	6868      	ldr	r0, [r5, #4]
 800b594:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800b598:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800b59c:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d0b7      	beq.n	800b514 <rclc_executor_spin_some.part.0+0x208>
 800b5a4:	4631      	mov	r1, r6
 800b5a6:	f7ff fabf 	bl	800ab28 <_rclc_take_new_data>
 800b5aa:	b118      	cbz	r0, 800b5b4 <rclc_executor_spin_some.part.0+0x2a8>
 800b5ac:	4548      	cmp	r0, r9
 800b5ae:	d001      	beq.n	800b5b4 <rclc_executor_spin_some.part.0+0x2a8>
 800b5b0:	4550      	cmp	r0, sl
 800b5b2:	d10c      	bne.n	800b5ce <rclc_executor_spin_some.part.0+0x2c2>
 800b5b4:	686b      	ldr	r3, [r5, #4]
 800b5b6:	eb13 000b 	adds.w	r0, r3, fp
 800b5ba:	d021      	beq.n	800b600 <rclc_executor_spin_some.part.0+0x2f4>
 800b5bc:	7842      	ldrb	r2, [r0, #1]
 800b5be:	2a00      	cmp	r2, #0
 800b5c0:	d0d8      	beq.n	800b574 <rclc_executor_spin_some.part.0+0x268>
 800b5c2:	2a01      	cmp	r2, #1
 800b5c4:	d1df      	bne.n	800b586 <rclc_executor_spin_some.part.0+0x27a>
 800b5c6:	f7ff fc23 	bl	800ae10 <_rclc_execute.part.0>
 800b5ca:	2800      	cmp	r0, #0
 800b5cc:	d0db      	beq.n	800b586 <rclc_executor_spin_some.part.0+0x27a>
 800b5ce:	4607      	mov	r7, r0
 800b5d0:	e796      	b.n	800b500 <rclc_executor_spin_some.part.0+0x1f4>
 800b5d2:	6843      	ldr	r3, [r0, #4]
 800b5d4:	6a1a      	ldr	r2, [r3, #32]
 800b5d6:	2a00      	cmp	r2, #0
 800b5d8:	d1f5      	bne.n	800b5c6 <rclc_executor_spin_some.part.0+0x2ba>
 800b5da:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d0d1      	beq.n	800b586 <rclc_executor_spin_some.part.0+0x27a>
 800b5e2:	e7f0      	b.n	800b5c6 <rclc_executor_spin_some.part.0+0x2ba>
 800b5e4:	6843      	ldr	r3, [r0, #4]
 800b5e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b5e8:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800b5ec:	d1eb      	bne.n	800b5c6 <rclc_executor_spin_some.part.0+0x2ba>
 800b5ee:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800b5f2:	2a00      	cmp	r2, #0
 800b5f4:	d1e7      	bne.n	800b5c6 <rclc_executor_spin_some.part.0+0x2ba>
 800b5f6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d0c3      	beq.n	800b586 <rclc_executor_spin_some.part.0+0x27a>
 800b5fe:	e7e2      	b.n	800b5c6 <rclc_executor_spin_some.part.0+0x2ba>
 800b600:	270b      	movs	r7, #11
 800b602:	e77d      	b.n	800b500 <rclc_executor_spin_some.part.0+0x1f4>
 800b604:	686a      	ldr	r2, [r5, #4]
 800b606:	e6e2      	b.n	800b3ce <rclc_executor_spin_some.part.0+0xc2>
 800b608:	686a      	ldr	r2, [r5, #4]
 800b60a:	e7a2      	b.n	800b552 <rclc_executor_spin_some.part.0+0x246>
 800b60c:	6842      	ldr	r2, [r0, #4]
 800b60e:	6a11      	ldr	r1, [r2, #32]
 800b610:	2900      	cmp	r1, #0
 800b612:	f47f af21 	bne.w	800b458 <rclc_executor_spin_some.part.0+0x14c>
 800b616:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800b61a:	2a00      	cmp	r2, #0
 800b61c:	f43f af0a 	beq.w	800b434 <rclc_executor_spin_some.part.0+0x128>
 800b620:	e71a      	b.n	800b458 <rclc_executor_spin_some.part.0+0x14c>
 800b622:	6842      	ldr	r2, [r0, #4]
 800b624:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800b626:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800b62a:	f47f af15 	bne.w	800b458 <rclc_executor_spin_some.part.0+0x14c>
 800b62e:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800b632:	2900      	cmp	r1, #0
 800b634:	f47f af10 	bne.w	800b458 <rclc_executor_spin_some.part.0+0x14c>
 800b638:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800b63c:	2a00      	cmp	r2, #0
 800b63e:	f43f aef9 	beq.w	800b434 <rclc_executor_spin_some.part.0+0x128>
 800b642:	e709      	b.n	800b458 <rclc_executor_spin_some.part.0+0x14c>
 800b644:	686a      	ldr	r2, [r5, #4]
 800b646:	461c      	mov	r4, r3
 800b648:	e783      	b.n	800b552 <rclc_executor_spin_some.part.0+0x246>
 800b64a:	686a      	ldr	r2, [r5, #4]
 800b64c:	461c      	mov	r4, r3
 800b64e:	e6be      	b.n	800b3ce <rclc_executor_spin_some.part.0+0xc2>

0800b650 <rclc_executor_spin>:
 800b650:	b1d0      	cbz	r0, 800b688 <rclc_executor_spin+0x38>
 800b652:	b510      	push	{r4, lr}
 800b654:	4604      	mov	r4, r0
 800b656:	b082      	sub	sp, #8
 800b658:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	@ 0x68
 800b65c:	6820      	ldr	r0, [r4, #0]
 800b65e:	e9cd 2300 	strd	r2, r3, [sp]
 800b662:	f004 fe91 	bl	8010388 <rcl_context_is_valid>
 800b666:	4601      	mov	r1, r0
 800b668:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b66c:	4620      	mov	r0, r4
 800b66e:	b131      	cbz	r1, 800b67e <rclc_executor_spin+0x2e>
 800b670:	f7ff fe4c 	bl	800b30c <rclc_executor_spin_some.part.0>
 800b674:	f030 0302 	bics.w	r3, r0, #2
 800b678:	d0ee      	beq.n	800b658 <rclc_executor_spin+0x8>
 800b67a:	b002      	add	sp, #8
 800b67c:	bd10      	pop	{r4, pc}
 800b67e:	f000 f993 	bl	800b9a8 <rcutils_reset_error>
 800b682:	2001      	movs	r0, #1
 800b684:	b002      	add	sp, #8
 800b686:	bd10      	pop	{r4, pc}
 800b688:	200b      	movs	r0, #11
 800b68a:	4770      	bx	lr

0800b68c <rclc_executor_handle_counters_zero_init>:
 800b68c:	b130      	cbz	r0, 800b69c <rclc_executor_handle_counters_zero_init+0x10>
 800b68e:	b508      	push	{r3, lr}
 800b690:	2220      	movs	r2, #32
 800b692:	2100      	movs	r1, #0
 800b694:	f00c fb98 	bl	8017dc8 <memset>
 800b698:	2000      	movs	r0, #0
 800b69a:	bd08      	pop	{r3, pc}
 800b69c:	200b      	movs	r0, #11
 800b69e:	4770      	bx	lr

0800b6a0 <rclc_executor_handle_init>:
 800b6a0:	b168      	cbz	r0, 800b6be <rclc_executor_handle_init+0x1e>
 800b6a2:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 800b6c8 <rclc_executor_handle_init+0x28>
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	220b      	movs	r2, #11
 800b6aa:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 800b6ae:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800b6b2:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800b6b6:	8002      	strh	r2, [r0, #0]
 800b6b8:	8703      	strh	r3, [r0, #56]	@ 0x38
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	4770      	bx	lr
 800b6be:	200b      	movs	r0, #11
 800b6c0:	4770      	bx	lr
 800b6c2:	bf00      	nop
 800b6c4:	f3af 8000 	nop.w
	...

0800b6d0 <rclc_support_init>:
 800b6d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6d4:	b086      	sub	sp, #24
 800b6d6:	b3b8      	cbz	r0, 800b748 <rclc_support_init+0x78>
 800b6d8:	461c      	mov	r4, r3
 800b6da:	b3ab      	cbz	r3, 800b748 <rclc_support_init+0x78>
 800b6dc:	460f      	mov	r7, r1
 800b6de:	4690      	mov	r8, r2
 800b6e0:	4606      	mov	r6, r0
 800b6e2:	f005 f86d 	bl	80107c0 <rcl_get_zero_initialized_init_options>
 800b6e6:	f104 030c 	add.w	r3, r4, #12
 800b6ea:	9005      	str	r0, [sp, #20]
 800b6ec:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b6f0:	e88d 0003 	stmia.w	sp, {r0, r1}
 800b6f4:	a805      	add	r0, sp, #20
 800b6f6:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800b6fa:	f005 f863 	bl	80107c4 <rcl_init_options_init>
 800b6fe:	4605      	mov	r5, r0
 800b700:	b9e0      	cbnz	r0, 800b73c <rclc_support_init+0x6c>
 800b702:	ad02      	add	r5, sp, #8
 800b704:	4628      	mov	r0, r5
 800b706:	f004 fe35 	bl	8010374 <rcl_get_zero_initialized_context>
 800b70a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b70e:	4633      	mov	r3, r6
 800b710:	e886 0003 	stmia.w	r6, {r0, r1}
 800b714:	aa05      	add	r2, sp, #20
 800b716:	4641      	mov	r1, r8
 800b718:	4638      	mov	r0, r7
 800b71a:	f004 ff4d 	bl	80105b8 <rcl_init>
 800b71e:	4605      	mov	r5, r0
 800b720:	b9b8      	cbnz	r0, 800b752 <rclc_support_init+0x82>
 800b722:	60b4      	str	r4, [r6, #8]
 800b724:	4622      	mov	r2, r4
 800b726:	f106 010c 	add.w	r1, r6, #12
 800b72a:	2003      	movs	r0, #3
 800b72c:	f005 fb8c 	bl	8010e48 <rcl_clock_init>
 800b730:	4605      	mov	r5, r0
 800b732:	b970      	cbnz	r0, 800b752 <rclc_support_init+0x82>
 800b734:	a805      	add	r0, sp, #20
 800b736:	f005 f8ab 	bl	8010890 <rcl_init_options_fini>
 800b73a:	b108      	cbz	r0, 800b740 <rclc_support_init+0x70>
 800b73c:	f000 f934 	bl	800b9a8 <rcutils_reset_error>
 800b740:	4628      	mov	r0, r5
 800b742:	b006      	add	sp, #24
 800b744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b748:	250b      	movs	r5, #11
 800b74a:	4628      	mov	r0, r5
 800b74c:	b006      	add	sp, #24
 800b74e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b752:	f000 f929 	bl	800b9a8 <rcutils_reset_error>
 800b756:	a805      	add	r0, sp, #20
 800b758:	f005 f89a 	bl	8010890 <rcl_init_options_fini>
 800b75c:	2800      	cmp	r0, #0
 800b75e:	d0ef      	beq.n	800b740 <rclc_support_init+0x70>
 800b760:	e7ec      	b.n	800b73c <rclc_support_init+0x6c>
 800b762:	bf00      	nop

0800b764 <rclc_node_init_default>:
 800b764:	b3b8      	cbz	r0, 800b7d6 <rclc_node_init_default+0x72>
 800b766:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b76a:	460d      	mov	r5, r1
 800b76c:	b0a1      	sub	sp, #132	@ 0x84
 800b76e:	b329      	cbz	r1, 800b7bc <rclc_node_init_default+0x58>
 800b770:	4616      	mov	r6, r2
 800b772:	b31a      	cbz	r2, 800b7bc <rclc_node_init_default+0x58>
 800b774:	461f      	mov	r7, r3
 800b776:	b30b      	cbz	r3, 800b7bc <rclc_node_init_default+0x58>
 800b778:	f10d 0810 	add.w	r8, sp, #16
 800b77c:	4604      	mov	r4, r0
 800b77e:	4640      	mov	r0, r8
 800b780:	f7fe fcda 	bl	800a138 <rcl_get_zero_initialized_node>
 800b784:	e898 0003 	ldmia.w	r8, {r0, r1}
 800b788:	f10d 0918 	add.w	r9, sp, #24
 800b78c:	e884 0003 	stmia.w	r4, {r0, r1}
 800b790:	4648      	mov	r0, r9
 800b792:	f7fe fe7b 	bl	800a48c <rcl_node_get_default_options>
 800b796:	4640      	mov	r0, r8
 800b798:	f7fe fcce 	bl	800a138 <rcl_get_zero_initialized_node>
 800b79c:	f8cd 9000 	str.w	r9, [sp]
 800b7a0:	e898 0003 	ldmia.w	r8, {r0, r1}
 800b7a4:	463b      	mov	r3, r7
 800b7a6:	e884 0003 	stmia.w	r4, {r0, r1}
 800b7aa:	4632      	mov	r2, r6
 800b7ac:	4629      	mov	r1, r5
 800b7ae:	4620      	mov	r0, r4
 800b7b0:	f7fe fccc 	bl	800a14c <rcl_node_init>
 800b7b4:	b930      	cbnz	r0, 800b7c4 <rclc_node_init_default+0x60>
 800b7b6:	b021      	add	sp, #132	@ 0x84
 800b7b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b7bc:	200b      	movs	r0, #11
 800b7be:	b021      	add	sp, #132	@ 0x84
 800b7c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b7c4:	9003      	str	r0, [sp, #12]
 800b7c6:	f000 f8ef 	bl	800b9a8 <rcutils_reset_error>
 800b7ca:	f000 f8ed 	bl	800b9a8 <rcutils_reset_error>
 800b7ce:	9803      	ldr	r0, [sp, #12]
 800b7d0:	b021      	add	sp, #132	@ 0x84
 800b7d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b7d6:	200b      	movs	r0, #11
 800b7d8:	4770      	bx	lr
 800b7da:	bf00      	nop

0800b7dc <rclc_publisher_init_best_effort>:
 800b7dc:	b368      	cbz	r0, 800b83a <rclc_publisher_init_best_effort+0x5e>
 800b7de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7e2:	460d      	mov	r5, r1
 800b7e4:	b0a0      	sub	sp, #128	@ 0x80
 800b7e6:	b321      	cbz	r1, 800b832 <rclc_publisher_init_best_effort+0x56>
 800b7e8:	4616      	mov	r6, r2
 800b7ea:	b312      	cbz	r2, 800b832 <rclc_publisher_init_best_effort+0x56>
 800b7ec:	461f      	mov	r7, r3
 800b7ee:	b303      	cbz	r3, 800b832 <rclc_publisher_init_best_effort+0x56>
 800b7f0:	4604      	mov	r4, r0
 800b7f2:	f7fe fe77 	bl	800a4e4 <rcl_get_zero_initialized_publisher>
 800b7f6:	f10d 0810 	add.w	r8, sp, #16
 800b7fa:	6020      	str	r0, [r4, #0]
 800b7fc:	4640      	mov	r0, r8
 800b7fe:	f7fe ff39 	bl	800a674 <rcl_publisher_get_default_options>
 800b802:	490f      	ldr	r1, [pc, #60]	@ (800b840 <rclc_publisher_init_best_effort+0x64>)
 800b804:	2250      	movs	r2, #80	@ 0x50
 800b806:	4640      	mov	r0, r8
 800b808:	f00c fc01 	bl	801800e <memcpy>
 800b80c:	f8cd 8000 	str.w	r8, [sp]
 800b810:	463b      	mov	r3, r7
 800b812:	4632      	mov	r2, r6
 800b814:	4629      	mov	r1, r5
 800b816:	4620      	mov	r0, r4
 800b818:	f7fe fe6a 	bl	800a4f0 <rcl_publisher_init>
 800b81c:	b910      	cbnz	r0, 800b824 <rclc_publisher_init_best_effort+0x48>
 800b81e:	b020      	add	sp, #128	@ 0x80
 800b820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b824:	9003      	str	r0, [sp, #12]
 800b826:	f000 f8bf 	bl	800b9a8 <rcutils_reset_error>
 800b82a:	9803      	ldr	r0, [sp, #12]
 800b82c:	b020      	add	sp, #128	@ 0x80
 800b82e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b832:	200b      	movs	r0, #11
 800b834:	b020      	add	sp, #128	@ 0x80
 800b836:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b83a:	200b      	movs	r0, #11
 800b83c:	4770      	bx	lr
 800b83e:	bf00      	nop
 800b840:	0801a110 	.word	0x0801a110

0800b844 <rclc_subscription_init_default>:
 800b844:	b368      	cbz	r0, 800b8a2 <rclc_subscription_init_default+0x5e>
 800b846:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b84a:	460d      	mov	r5, r1
 800b84c:	b0a0      	sub	sp, #128	@ 0x80
 800b84e:	b321      	cbz	r1, 800b89a <rclc_subscription_init_default+0x56>
 800b850:	4616      	mov	r6, r2
 800b852:	b312      	cbz	r2, 800b89a <rclc_subscription_init_default+0x56>
 800b854:	461f      	mov	r7, r3
 800b856:	b303      	cbz	r3, 800b89a <rclc_subscription_init_default+0x56>
 800b858:	4604      	mov	r4, r0
 800b85a:	f7fe ff7f 	bl	800a75c <rcl_get_zero_initialized_subscription>
 800b85e:	f10d 0810 	add.w	r8, sp, #16
 800b862:	6020      	str	r0, [r4, #0]
 800b864:	4640      	mov	r0, r8
 800b866:	f7ff f87b 	bl	800a960 <rcl_subscription_get_default_options>
 800b86a:	490f      	ldr	r1, [pc, #60]	@ (800b8a8 <rclc_subscription_init_default+0x64>)
 800b86c:	2250      	movs	r2, #80	@ 0x50
 800b86e:	4640      	mov	r0, r8
 800b870:	f00c fbcd 	bl	801800e <memcpy>
 800b874:	f8cd 8000 	str.w	r8, [sp]
 800b878:	463b      	mov	r3, r7
 800b87a:	4632      	mov	r2, r6
 800b87c:	4629      	mov	r1, r5
 800b87e:	4620      	mov	r0, r4
 800b880:	f7fe ff72 	bl	800a768 <rcl_subscription_init>
 800b884:	b910      	cbnz	r0, 800b88c <rclc_subscription_init_default+0x48>
 800b886:	b020      	add	sp, #128	@ 0x80
 800b888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b88c:	9003      	str	r0, [sp, #12]
 800b88e:	f000 f88b 	bl	800b9a8 <rcutils_reset_error>
 800b892:	9803      	ldr	r0, [sp, #12]
 800b894:	b020      	add	sp, #128	@ 0x80
 800b896:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b89a:	200b      	movs	r0, #11
 800b89c:	b020      	add	sp, #128	@ 0x80
 800b89e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8a2:	200b      	movs	r0, #11
 800b8a4:	4770      	bx	lr
 800b8a6:	bf00      	nop
 800b8a8:	0801a160 	.word	0x0801a160

0800b8ac <__default_zero_allocate>:
 800b8ac:	f00b b92a 	b.w	8016b04 <calloc>

0800b8b0 <__default_reallocate>:
 800b8b0:	f00b bac8 	b.w	8016e44 <realloc>

0800b8b4 <__default_deallocate>:
 800b8b4:	f00b b9a4 	b.w	8016c00 <free>

0800b8b8 <__default_allocate>:
 800b8b8:	f00b b99a 	b.w	8016bf0 <malloc>

0800b8bc <rcutils_get_zero_initialized_allocator>:
 800b8bc:	b510      	push	{r4, lr}
 800b8be:	4c05      	ldr	r4, [pc, #20]	@ (800b8d4 <rcutils_get_zero_initialized_allocator+0x18>)
 800b8c0:	4686      	mov	lr, r0
 800b8c2:	4684      	mov	ip, r0
 800b8c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b8c6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b8ca:	6823      	ldr	r3, [r4, #0]
 800b8cc:	f8cc 3000 	str.w	r3, [ip]
 800b8d0:	4670      	mov	r0, lr
 800b8d2:	bd10      	pop	{r4, pc}
 800b8d4:	0801a1b0 	.word	0x0801a1b0

0800b8d8 <rcutils_set_default_allocator>:
 800b8d8:	b1a8      	cbz	r0, 800b906 <rcutils_set_default_allocator+0x2e>
 800b8da:	6802      	ldr	r2, [r0, #0]
 800b8dc:	b1a2      	cbz	r2, 800b908 <rcutils_set_default_allocator+0x30>
 800b8de:	6841      	ldr	r1, [r0, #4]
 800b8e0:	b1a1      	cbz	r1, 800b90c <rcutils_set_default_allocator+0x34>
 800b8e2:	b410      	push	{r4}
 800b8e4:	68c4      	ldr	r4, [r0, #12]
 800b8e6:	b164      	cbz	r4, 800b902 <rcutils_set_default_allocator+0x2a>
 800b8e8:	6880      	ldr	r0, [r0, #8]
 800b8ea:	b138      	cbz	r0, 800b8fc <rcutils_set_default_allocator+0x24>
 800b8ec:	4b08      	ldr	r3, [pc, #32]	@ (800b910 <rcutils_set_default_allocator+0x38>)
 800b8ee:	601a      	str	r2, [r3, #0]
 800b8f0:	2200      	movs	r2, #0
 800b8f2:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800b8f6:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800b8fa:	2001      	movs	r0, #1
 800b8fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b900:	4770      	bx	lr
 800b902:	4620      	mov	r0, r4
 800b904:	e7fa      	b.n	800b8fc <rcutils_set_default_allocator+0x24>
 800b906:	4770      	bx	lr
 800b908:	4610      	mov	r0, r2
 800b90a:	4770      	bx	lr
 800b90c:	4608      	mov	r0, r1
 800b90e:	4770      	bx	lr
 800b910:	2000001c 	.word	0x2000001c

0800b914 <rcutils_get_default_allocator>:
 800b914:	b510      	push	{r4, lr}
 800b916:	4c05      	ldr	r4, [pc, #20]	@ (800b92c <rcutils_get_default_allocator+0x18>)
 800b918:	4686      	mov	lr, r0
 800b91a:	4684      	mov	ip, r0
 800b91c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b91e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b922:	6823      	ldr	r3, [r4, #0]
 800b924:	f8cc 3000 	str.w	r3, [ip]
 800b928:	4670      	mov	r0, lr
 800b92a:	bd10      	pop	{r4, pc}
 800b92c:	2000001c 	.word	0x2000001c

0800b930 <rcutils_allocator_is_valid>:
 800b930:	b158      	cbz	r0, 800b94a <rcutils_allocator_is_valid+0x1a>
 800b932:	6803      	ldr	r3, [r0, #0]
 800b934:	b143      	cbz	r3, 800b948 <rcutils_allocator_is_valid+0x18>
 800b936:	6843      	ldr	r3, [r0, #4]
 800b938:	b133      	cbz	r3, 800b948 <rcutils_allocator_is_valid+0x18>
 800b93a:	68c3      	ldr	r3, [r0, #12]
 800b93c:	b123      	cbz	r3, 800b948 <rcutils_allocator_is_valid+0x18>
 800b93e:	6880      	ldr	r0, [r0, #8]
 800b940:	3800      	subs	r0, #0
 800b942:	bf18      	it	ne
 800b944:	2001      	movne	r0, #1
 800b946:	4770      	bx	lr
 800b948:	4618      	mov	r0, r3
 800b94a:	4770      	bx	lr

0800b94c <rcutils_get_env>:
 800b94c:	b168      	cbz	r0, 800b96a <rcutils_get_env+0x1e>
 800b94e:	b510      	push	{r4, lr}
 800b950:	460c      	mov	r4, r1
 800b952:	b129      	cbz	r1, 800b960 <rcutils_get_env+0x14>
 800b954:	f00b f904 	bl	8016b60 <getenv>
 800b958:	b120      	cbz	r0, 800b964 <rcutils_get_env+0x18>
 800b95a:	6020      	str	r0, [r4, #0]
 800b95c:	2000      	movs	r0, #0
 800b95e:	bd10      	pop	{r4, pc}
 800b960:	4803      	ldr	r0, [pc, #12]	@ (800b970 <rcutils_get_env+0x24>)
 800b962:	bd10      	pop	{r4, pc}
 800b964:	4b03      	ldr	r3, [pc, #12]	@ (800b974 <rcutils_get_env+0x28>)
 800b966:	6023      	str	r3, [r4, #0]
 800b968:	bd10      	pop	{r4, pc}
 800b96a:	4803      	ldr	r0, [pc, #12]	@ (800b978 <rcutils_get_env+0x2c>)
 800b96c:	4770      	bx	lr
 800b96e:	bf00      	nop
 800b970:	0801a1e0 	.word	0x0801a1e0
 800b974:	0801ab48 	.word	0x0801ab48
 800b978:	0801a1c4 	.word	0x0801a1c4

0800b97c <rcutils_get_error_string>:
 800b97c:	4b06      	ldr	r3, [pc, #24]	@ (800b998 <rcutils_get_error_string+0x1c>)
 800b97e:	781b      	ldrb	r3, [r3, #0]
 800b980:	b13b      	cbz	r3, 800b992 <rcutils_get_error_string+0x16>
 800b982:	4b06      	ldr	r3, [pc, #24]	@ (800b99c <rcutils_get_error_string+0x20>)
 800b984:	781a      	ldrb	r2, [r3, #0]
 800b986:	b90a      	cbnz	r2, 800b98c <rcutils_get_error_string+0x10>
 800b988:	2201      	movs	r2, #1
 800b98a:	701a      	strb	r2, [r3, #0]
 800b98c:	4b04      	ldr	r3, [pc, #16]	@ (800b9a0 <rcutils_get_error_string+0x24>)
 800b98e:	7818      	ldrb	r0, [r3, #0]
 800b990:	4770      	bx	lr
 800b992:	4b04      	ldr	r3, [pc, #16]	@ (800b9a4 <rcutils_get_error_string+0x28>)
 800b994:	7818      	ldrb	r0, [r3, #0]
 800b996:	4770      	bx	lr
 800b998:	2000c868 	.word	0x2000c868
 800b99c:	2000c881 	.word	0x2000c881
 800b9a0:	2000c880 	.word	0x2000c880
 800b9a4:	0801a1fc 	.word	0x0801a1fc

0800b9a8 <rcutils_reset_error>:
 800b9a8:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800b9c8 <rcutils_reset_error+0x20>
 800b9ac:	4a08      	ldr	r2, [pc, #32]	@ (800b9d0 <rcutils_reset_error+0x28>)
 800b9ae:	4809      	ldr	r0, [pc, #36]	@ (800b9d4 <rcutils_reset_error+0x2c>)
 800b9b0:	4909      	ldr	r1, [pc, #36]	@ (800b9d8 <rcutils_reset_error+0x30>)
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	8013      	strh	r3, [r2, #0]
 800b9b6:	ed82 7b02 	vstr	d7, [r2, #8]
 800b9ba:	4a08      	ldr	r2, [pc, #32]	@ (800b9dc <rcutils_reset_error+0x34>)
 800b9bc:	7003      	strb	r3, [r0, #0]
 800b9be:	700b      	strb	r3, [r1, #0]
 800b9c0:	7013      	strb	r3, [r2, #0]
 800b9c2:	4770      	bx	lr
 800b9c4:	f3af 8000 	nop.w
	...
 800b9d0:	2000c870 	.word	0x2000c870
 800b9d4:	2000c881 	.word	0x2000c881
 800b9d8:	2000c880 	.word	0x2000c880
 800b9dc:	2000c868 	.word	0x2000c868

0800b9e0 <rcutils_format_string_limit>:
 800b9e0:	b40f      	push	{r0, r1, r2, r3}
 800b9e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b9e4:	b083      	sub	sp, #12
 800b9e6:	ac08      	add	r4, sp, #32
 800b9e8:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 800b9ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b9ee:	b34e      	cbz	r6, 800ba44 <rcutils_format_string_limit+0x64>
 800b9f0:	a808      	add	r0, sp, #32
 800b9f2:	f7ff ff9d 	bl	800b930 <rcutils_allocator_is_valid>
 800b9f6:	b328      	cbz	r0, 800ba44 <rcutils_format_string_limit+0x64>
 800b9f8:	2100      	movs	r1, #0
 800b9fa:	ab0f      	add	r3, sp, #60	@ 0x3c
 800b9fc:	4632      	mov	r2, r6
 800b9fe:	4608      	mov	r0, r1
 800ba00:	e9cd 3300 	strd	r3, r3, [sp]
 800ba04:	f000 f8f4 	bl	800bbf0 <rcutils_vsnprintf>
 800ba08:	1c43      	adds	r3, r0, #1
 800ba0a:	4605      	mov	r5, r0
 800ba0c:	d01a      	beq.n	800ba44 <rcutils_format_string_limit+0x64>
 800ba0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ba10:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ba12:	1c47      	adds	r7, r0, #1
 800ba14:	429f      	cmp	r7, r3
 800ba16:	bf84      	itt	hi
 800ba18:	461f      	movhi	r7, r3
 800ba1a:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 800ba1e:	4638      	mov	r0, r7
 800ba20:	9b08      	ldr	r3, [sp, #32]
 800ba22:	4798      	blx	r3
 800ba24:	4604      	mov	r4, r0
 800ba26:	b168      	cbz	r0, 800ba44 <rcutils_format_string_limit+0x64>
 800ba28:	9b01      	ldr	r3, [sp, #4]
 800ba2a:	4632      	mov	r2, r6
 800ba2c:	4639      	mov	r1, r7
 800ba2e:	f000 f8df 	bl	800bbf0 <rcutils_vsnprintf>
 800ba32:	2800      	cmp	r0, #0
 800ba34:	db02      	blt.n	800ba3c <rcutils_format_string_limit+0x5c>
 800ba36:	2300      	movs	r3, #0
 800ba38:	5563      	strb	r3, [r4, r5]
 800ba3a:	e004      	b.n	800ba46 <rcutils_format_string_limit+0x66>
 800ba3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba3e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ba40:	4620      	mov	r0, r4
 800ba42:	4798      	blx	r3
 800ba44:	2400      	movs	r4, #0
 800ba46:	4620      	mov	r0, r4
 800ba48:	b003      	add	sp, #12
 800ba4a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ba4e:	b004      	add	sp, #16
 800ba50:	4770      	bx	lr
 800ba52:	bf00      	nop

0800ba54 <rcutils_repl_str>:
 800ba54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba58:	ed2d 8b02 	vpush	{d8}
 800ba5c:	b087      	sub	sp, #28
 800ba5e:	4680      	mov	r8, r0
 800ba60:	4608      	mov	r0, r1
 800ba62:	f8cd 8004 	str.w	r8, [sp, #4]
 800ba66:	ee08 2a10 	vmov	s16, r2
 800ba6a:	468a      	mov	sl, r1
 800ba6c:	4699      	mov	r9, r3
 800ba6e:	f7f4 fc2f 	bl	80002d0 <strlen>
 800ba72:	2600      	movs	r6, #0
 800ba74:	4647      	mov	r7, r8
 800ba76:	9002      	str	r0, [sp, #8]
 800ba78:	46b3      	mov	fp, r6
 800ba7a:	2510      	movs	r5, #16
 800ba7c:	46b0      	mov	r8, r6
 800ba7e:	e01d      	b.n	800babc <rcutils_repl_str+0x68>
 800ba80:	f10b 0b01 	add.w	fp, fp, #1
 800ba84:	455e      	cmp	r6, fp
 800ba86:	d211      	bcs.n	800baac <rcutils_repl_str+0x58>
 800ba88:	442e      	add	r6, r5
 800ba8a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800ba8e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800ba92:	00b1      	lsls	r1, r6, #2
 800ba94:	4798      	blx	r3
 800ba96:	2800      	cmp	r0, #0
 800ba98:	f000 8088 	beq.w	800bbac <rcutils_repl_str+0x158>
 800ba9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800baa0:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 800baa4:	4680      	mov	r8, r0
 800baa6:	bf28      	it	cs
 800baa8:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 800baac:	9a01      	ldr	r2, [sp, #4]
 800baae:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 800bab2:	1aa2      	subs	r2, r4, r2
 800bab4:	f843 2c04 	str.w	r2, [r3, #-4]
 800bab8:	9b02      	ldr	r3, [sp, #8]
 800baba:	18e7      	adds	r7, r4, r3
 800babc:	4651      	mov	r1, sl
 800babe:	4638      	mov	r0, r7
 800bac0:	f00c f9a9 	bl	8017e16 <strstr>
 800bac4:	4604      	mov	r4, r0
 800bac6:	4640      	mov	r0, r8
 800bac8:	2c00      	cmp	r4, #0
 800baca:	d1d9      	bne.n	800ba80 <rcutils_repl_str+0x2c>
 800bacc:	46b8      	mov	r8, r7
 800bace:	4607      	mov	r7, r0
 800bad0:	4640      	mov	r0, r8
 800bad2:	f7f4 fbfd 	bl	80002d0 <strlen>
 800bad6:	9b01      	ldr	r3, [sp, #4]
 800bad8:	eba8 0303 	sub.w	r3, r8, r3
 800badc:	181c      	adds	r4, r3, r0
 800bade:	9404      	str	r4, [sp, #16]
 800bae0:	f1bb 0f00 	cmp.w	fp, #0
 800bae4:	d04a      	beq.n	800bb7c <rcutils_repl_str+0x128>
 800bae6:	ee18 0a10 	vmov	r0, s16
 800baea:	f7f4 fbf1 	bl	80002d0 <strlen>
 800baee:	9b02      	ldr	r3, [sp, #8]
 800baf0:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800baf4:	1ac3      	subs	r3, r0, r3
 800baf6:	fb0b 4303 	mla	r3, fp, r3, r4
 800bafa:	461a      	mov	r2, r3
 800bafc:	9305      	str	r3, [sp, #20]
 800bafe:	4606      	mov	r6, r0
 800bb00:	f8d9 3000 	ldr.w	r3, [r9]
 800bb04:	1c50      	adds	r0, r2, #1
 800bb06:	4798      	blx	r3
 800bb08:	9003      	str	r0, [sp, #12]
 800bb0a:	2800      	cmp	r0, #0
 800bb0c:	d04f      	beq.n	800bbae <rcutils_repl_str+0x15a>
 800bb0e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800bb12:	683a      	ldr	r2, [r7, #0]
 800bb14:	4641      	mov	r1, r8
 800bb16:	f00c fa7a 	bl	801800e <memcpy>
 800bb1a:	683d      	ldr	r5, [r7, #0]
 800bb1c:	9b03      	ldr	r3, [sp, #12]
 800bb1e:	9701      	str	r7, [sp, #4]
 800bb20:	46ba      	mov	sl, r7
 800bb22:	441d      	add	r5, r3
 800bb24:	9f02      	ldr	r7, [sp, #8]
 800bb26:	f8cd 9008 	str.w	r9, [sp, #8]
 800bb2a:	2401      	movs	r4, #1
 800bb2c:	46d1      	mov	r9, sl
 800bb2e:	ee18 aa10 	vmov	sl, s16
 800bb32:	e00a      	b.n	800bb4a <rcutils_repl_str+0xf6>
 800bb34:	f8d9 5000 	ldr.w	r5, [r9]
 800bb38:	1aaa      	subs	r2, r5, r2
 800bb3a:	1885      	adds	r5, r0, r2
 800bb3c:	f00c fa67 	bl	801800e <memcpy>
 800bb40:	45a3      	cmp	fp, r4
 800bb42:	f104 0201 	add.w	r2, r4, #1
 800bb46:	d935      	bls.n	800bbb4 <rcutils_repl_str+0x160>
 800bb48:	4614      	mov	r4, r2
 800bb4a:	4632      	mov	r2, r6
 800bb4c:	4651      	mov	r1, sl
 800bb4e:	4628      	mov	r0, r5
 800bb50:	f00c fa5d 	bl	801800e <memcpy>
 800bb54:	f859 2b04 	ldr.w	r2, [r9], #4
 800bb58:	45a3      	cmp	fp, r4
 800bb5a:	443a      	add	r2, r7
 800bb5c:	eb05 0006 	add.w	r0, r5, r6
 800bb60:	eb08 0102 	add.w	r1, r8, r2
 800bb64:	d1e6      	bne.n	800bb34 <rcutils_repl_str+0xe0>
 800bb66:	9b04      	ldr	r3, [sp, #16]
 800bb68:	1a9a      	subs	r2, r3, r2
 800bb6a:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 800bb6e:	f00c fa4e 	bl	801800e <memcpy>
 800bb72:	9a03      	ldr	r2, [sp, #12]
 800bb74:	9905      	ldr	r1, [sp, #20]
 800bb76:	2300      	movs	r3, #0
 800bb78:	5453      	strb	r3, [r2, r1]
 800bb7a:	e00b      	b.n	800bb94 <rcutils_repl_str+0x140>
 800bb7c:	4620      	mov	r0, r4
 800bb7e:	f8d9 3000 	ldr.w	r3, [r9]
 800bb82:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800bb86:	3001      	adds	r0, #1
 800bb88:	4798      	blx	r3
 800bb8a:	9003      	str	r0, [sp, #12]
 800bb8c:	b110      	cbz	r0, 800bb94 <rcutils_repl_str+0x140>
 800bb8e:	9901      	ldr	r1, [sp, #4]
 800bb90:	f00c fa35 	bl	8017ffe <strcpy>
 800bb94:	4638      	mov	r0, r7
 800bb96:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800bb9a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800bb9e:	4798      	blx	r3
 800bba0:	9803      	ldr	r0, [sp, #12]
 800bba2:	b007      	add	sp, #28
 800bba4:	ecbd 8b02 	vpop	{d8}
 800bba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbac:	4647      	mov	r7, r8
 800bbae:	2300      	movs	r3, #0
 800bbb0:	9303      	str	r3, [sp, #12]
 800bbb2:	e7ef      	b.n	800bb94 <rcutils_repl_str+0x140>
 800bbb4:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 800bbb8:	e7db      	b.n	800bb72 <rcutils_repl_str+0x11e>
 800bbba:	bf00      	nop

0800bbbc <rcutils_snprintf>:
 800bbbc:	b40c      	push	{r2, r3}
 800bbbe:	b530      	push	{r4, r5, lr}
 800bbc0:	b083      	sub	sp, #12
 800bbc2:	ab06      	add	r3, sp, #24
 800bbc4:	f853 2b04 	ldr.w	r2, [r3], #4
 800bbc8:	9301      	str	r3, [sp, #4]
 800bbca:	b152      	cbz	r2, 800bbe2 <rcutils_snprintf+0x26>
 800bbcc:	b138      	cbz	r0, 800bbde <rcutils_snprintf+0x22>
 800bbce:	b141      	cbz	r1, 800bbe2 <rcutils_snprintf+0x26>
 800bbd0:	f00c f82e 	bl	8017c30 <vsniprintf>
 800bbd4:	b003      	add	sp, #12
 800bbd6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bbda:	b002      	add	sp, #8
 800bbdc:	4770      	bx	lr
 800bbde:	2900      	cmp	r1, #0
 800bbe0:	d0f6      	beq.n	800bbd0 <rcutils_snprintf+0x14>
 800bbe2:	f00c f9df 	bl	8017fa4 <__errno>
 800bbe6:	2316      	movs	r3, #22
 800bbe8:	6003      	str	r3, [r0, #0]
 800bbea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bbee:	e7f1      	b.n	800bbd4 <rcutils_snprintf+0x18>

0800bbf0 <rcutils_vsnprintf>:
 800bbf0:	b570      	push	{r4, r5, r6, lr}
 800bbf2:	b13a      	cbz	r2, 800bc04 <rcutils_vsnprintf+0x14>
 800bbf4:	b120      	cbz	r0, 800bc00 <rcutils_vsnprintf+0x10>
 800bbf6:	b129      	cbz	r1, 800bc04 <rcutils_vsnprintf+0x14>
 800bbf8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bbfc:	f00c b818 	b.w	8017c30 <vsniprintf>
 800bc00:	2900      	cmp	r1, #0
 800bc02:	d0f9      	beq.n	800bbf8 <rcutils_vsnprintf+0x8>
 800bc04:	f00c f9ce 	bl	8017fa4 <__errno>
 800bc08:	2316      	movs	r3, #22
 800bc0a:	6003      	str	r3, [r0, #0]
 800bc0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bc10:	bd70      	pop	{r4, r5, r6, pc}
 800bc12:	bf00      	nop

0800bc14 <rcutils_strdup>:
 800bc14:	b084      	sub	sp, #16
 800bc16:	b570      	push	{r4, r5, r6, lr}
 800bc18:	b082      	sub	sp, #8
 800bc1a:	ac07      	add	r4, sp, #28
 800bc1c:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 800bc20:	4605      	mov	r5, r0
 800bc22:	b1b0      	cbz	r0, 800bc52 <rcutils_strdup+0x3e>
 800bc24:	f7f4 fb54 	bl	80002d0 <strlen>
 800bc28:	1c42      	adds	r2, r0, #1
 800bc2a:	9b07      	ldr	r3, [sp, #28]
 800bc2c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bc2e:	9201      	str	r2, [sp, #4]
 800bc30:	4606      	mov	r6, r0
 800bc32:	4610      	mov	r0, r2
 800bc34:	4798      	blx	r3
 800bc36:	4604      	mov	r4, r0
 800bc38:	b128      	cbz	r0, 800bc46 <rcutils_strdup+0x32>
 800bc3a:	9a01      	ldr	r2, [sp, #4]
 800bc3c:	4629      	mov	r1, r5
 800bc3e:	f00c f9e6 	bl	801800e <memcpy>
 800bc42:	2300      	movs	r3, #0
 800bc44:	55a3      	strb	r3, [r4, r6]
 800bc46:	4620      	mov	r0, r4
 800bc48:	b002      	add	sp, #8
 800bc4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bc4e:	b004      	add	sp, #16
 800bc50:	4770      	bx	lr
 800bc52:	4604      	mov	r4, r0
 800bc54:	e7f7      	b.n	800bc46 <rcutils_strdup+0x32>
 800bc56:	bf00      	nop

0800bc58 <rcutils_strndup>:
 800bc58:	b082      	sub	sp, #8
 800bc5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc5c:	ac06      	add	r4, sp, #24
 800bc5e:	e884 000c 	stmia.w	r4, {r2, r3}
 800bc62:	4605      	mov	r5, r0
 800bc64:	b188      	cbz	r0, 800bc8a <rcutils_strndup+0x32>
 800bc66:	1c4f      	adds	r7, r1, #1
 800bc68:	460e      	mov	r6, r1
 800bc6a:	4638      	mov	r0, r7
 800bc6c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bc6e:	4790      	blx	r2
 800bc70:	4604      	mov	r4, r0
 800bc72:	b128      	cbz	r0, 800bc80 <rcutils_strndup+0x28>
 800bc74:	463a      	mov	r2, r7
 800bc76:	4629      	mov	r1, r5
 800bc78:	f00c f9c9 	bl	801800e <memcpy>
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	55a3      	strb	r3, [r4, r6]
 800bc80:	4620      	mov	r0, r4
 800bc82:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bc86:	b002      	add	sp, #8
 800bc88:	4770      	bx	lr
 800bc8a:	4604      	mov	r4, r0
 800bc8c:	e7f8      	b.n	800bc80 <rcutils_strndup+0x28>
 800bc8e:	bf00      	nop

0800bc90 <rcutils_system_time_now>:
 800bc90:	b308      	cbz	r0, 800bcd6 <rcutils_system_time_now+0x46>
 800bc92:	b570      	push	{r4, r5, r6, lr}
 800bc94:	b084      	sub	sp, #16
 800bc96:	4604      	mov	r4, r0
 800bc98:	4669      	mov	r1, sp
 800bc9a:	2001      	movs	r0, #1
 800bc9c:	f7f6 fafc 	bl	8002298 <clock_gettime>
 800bca0:	e9dd 3500 	ldrd	r3, r5, [sp]
 800bca4:	2d00      	cmp	r5, #0
 800bca6:	db13      	blt.n	800bcd0 <rcutils_system_time_now+0x40>
 800bca8:	9902      	ldr	r1, [sp, #8]
 800bcaa:	2900      	cmp	r1, #0
 800bcac:	db0d      	blt.n	800bcca <rcutils_system_time_now+0x3a>
 800bcae:	4e0b      	ldr	r6, [pc, #44]	@ (800bcdc <rcutils_system_time_now+0x4c>)
 800bcb0:	fba3 3206 	umull	r3, r2, r3, r6
 800bcb4:	185b      	adds	r3, r3, r1
 800bcb6:	fb06 2205 	mla	r2, r6, r5, r2
 800bcba:	f04f 0000 	mov.w	r0, #0
 800bcbe:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800bcc2:	e9c4 3200 	strd	r3, r2, [r4]
 800bcc6:	b004      	add	sp, #16
 800bcc8:	bd70      	pop	{r4, r5, r6, pc}
 800bcca:	ea53 0205 	orrs.w	r2, r3, r5
 800bcce:	d1ee      	bne.n	800bcae <rcutils_system_time_now+0x1e>
 800bcd0:	2002      	movs	r0, #2
 800bcd2:	b004      	add	sp, #16
 800bcd4:	bd70      	pop	{r4, r5, r6, pc}
 800bcd6:	200b      	movs	r0, #11
 800bcd8:	4770      	bx	lr
 800bcda:	bf00      	nop
 800bcdc:	3b9aca00 	.word	0x3b9aca00

0800bce0 <rcutils_steady_time_now>:
 800bce0:	b308      	cbz	r0, 800bd26 <rcutils_steady_time_now+0x46>
 800bce2:	b570      	push	{r4, r5, r6, lr}
 800bce4:	b084      	sub	sp, #16
 800bce6:	4604      	mov	r4, r0
 800bce8:	4669      	mov	r1, sp
 800bcea:	2000      	movs	r0, #0
 800bcec:	f7f6 fad4 	bl	8002298 <clock_gettime>
 800bcf0:	e9dd 3500 	ldrd	r3, r5, [sp]
 800bcf4:	2d00      	cmp	r5, #0
 800bcf6:	db13      	blt.n	800bd20 <rcutils_steady_time_now+0x40>
 800bcf8:	9902      	ldr	r1, [sp, #8]
 800bcfa:	2900      	cmp	r1, #0
 800bcfc:	db0d      	blt.n	800bd1a <rcutils_steady_time_now+0x3a>
 800bcfe:	4e0b      	ldr	r6, [pc, #44]	@ (800bd2c <rcutils_steady_time_now+0x4c>)
 800bd00:	fba3 3206 	umull	r3, r2, r3, r6
 800bd04:	185b      	adds	r3, r3, r1
 800bd06:	fb06 2205 	mla	r2, r6, r5, r2
 800bd0a:	f04f 0000 	mov.w	r0, #0
 800bd0e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800bd12:	e9c4 3200 	strd	r3, r2, [r4]
 800bd16:	b004      	add	sp, #16
 800bd18:	bd70      	pop	{r4, r5, r6, pc}
 800bd1a:	ea53 0205 	orrs.w	r2, r3, r5
 800bd1e:	d1ee      	bne.n	800bcfe <rcutils_steady_time_now+0x1e>
 800bd20:	2002      	movs	r0, #2
 800bd22:	b004      	add	sp, #16
 800bd24:	bd70      	pop	{r4, r5, r6, pc}
 800bd26:	200b      	movs	r0, #11
 800bd28:	4770      	bx	lr
 800bd2a:	bf00      	nop
 800bd2c:	3b9aca00 	.word	0x3b9aca00

0800bd30 <rmw_get_default_publisher_options>:
 800bd30:	2200      	movs	r2, #0
 800bd32:	6002      	str	r2, [r0, #0]
 800bd34:	7102      	strb	r2, [r0, #4]
 800bd36:	4770      	bx	lr

0800bd38 <rmw_subscription_content_filter_options_fini>:
 800bd38:	b1b0      	cbz	r0, 800bd68 <rmw_subscription_content_filter_options_fini+0x30>
 800bd3a:	b538      	push	{r3, r4, r5, lr}
 800bd3c:	4604      	mov	r4, r0
 800bd3e:	4608      	mov	r0, r1
 800bd40:	460d      	mov	r5, r1
 800bd42:	f7ff fdf5 	bl	800b930 <rcutils_allocator_is_valid>
 800bd46:	b168      	cbz	r0, 800bd64 <rmw_subscription_content_filter_options_fini+0x2c>
 800bd48:	6820      	ldr	r0, [r4, #0]
 800bd4a:	b120      	cbz	r0, 800bd56 <rmw_subscription_content_filter_options_fini+0x1e>
 800bd4c:	686b      	ldr	r3, [r5, #4]
 800bd4e:	6929      	ldr	r1, [r5, #16]
 800bd50:	4798      	blx	r3
 800bd52:	2300      	movs	r3, #0
 800bd54:	6023      	str	r3, [r4, #0]
 800bd56:	1d20      	adds	r0, r4, #4
 800bd58:	f006 fe72 	bl	8012a40 <rcutils_string_array_fini>
 800bd5c:	3800      	subs	r0, #0
 800bd5e:	bf18      	it	ne
 800bd60:	2001      	movne	r0, #1
 800bd62:	bd38      	pop	{r3, r4, r5, pc}
 800bd64:	200b      	movs	r0, #11
 800bd66:	bd38      	pop	{r3, r4, r5, pc}
 800bd68:	200b      	movs	r0, #11
 800bd6a:	4770      	bx	lr

0800bd6c <rmw_get_default_subscription_options>:
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	e9c0 2200 	strd	r2, r2, [r0]
 800bd72:	6082      	str	r2, [r0, #8]
 800bd74:	4770      	bx	lr
 800bd76:	bf00      	nop

0800bd78 <rmw_get_zero_initialized_message_info>:
 800bd78:	b510      	push	{r4, lr}
 800bd7a:	2240      	movs	r2, #64	@ 0x40
 800bd7c:	4604      	mov	r4, r0
 800bd7e:	2100      	movs	r1, #0
 800bd80:	f00c f822 	bl	8017dc8 <memset>
 800bd84:	4620      	mov	r0, r4
 800bd86:	bd10      	pop	{r4, pc}

0800bd88 <rmw_validate_namespace_with_size>:
 800bd88:	b340      	cbz	r0, 800bddc <rmw_validate_namespace_with_size+0x54>
 800bd8a:	b570      	push	{r4, r5, r6, lr}
 800bd8c:	4614      	mov	r4, r2
 800bd8e:	b0c2      	sub	sp, #264	@ 0x108
 800bd90:	b332      	cbz	r2, 800bde0 <rmw_validate_namespace_with_size+0x58>
 800bd92:	2901      	cmp	r1, #1
 800bd94:	460d      	mov	r5, r1
 800bd96:	461e      	mov	r6, r3
 800bd98:	d102      	bne.n	800bda0 <rmw_validate_namespace_with_size+0x18>
 800bd9a:	7803      	ldrb	r3, [r0, #0]
 800bd9c:	2b2f      	cmp	r3, #47	@ 0x2f
 800bd9e:	d012      	beq.n	800bdc6 <rmw_validate_namespace_with_size+0x3e>
 800bda0:	aa01      	add	r2, sp, #4
 800bda2:	4669      	mov	r1, sp
 800bda4:	f007 f848 	bl	8012e38 <rmw_validate_full_topic_name>
 800bda8:	b978      	cbnz	r0, 800bdca <rmw_validate_namespace_with_size+0x42>
 800bdaa:	9b00      	ldr	r3, [sp, #0]
 800bdac:	b14b      	cbz	r3, 800bdc2 <rmw_validate_namespace_with_size+0x3a>
 800bdae:	2b07      	cmp	r3, #7
 800bdb0:	d007      	beq.n	800bdc2 <rmw_validate_namespace_with_size+0x3a>
 800bdb2:	1e5a      	subs	r2, r3, #1
 800bdb4:	2a05      	cmp	r2, #5
 800bdb6:	d82b      	bhi.n	800be10 <rmw_validate_namespace_with_size+0x88>
 800bdb8:	e8df f002 	tbb	[pc, r2]
 800bdbc:	1e212427 	.word	0x1e212427
 800bdc0:	141b      	.short	0x141b
 800bdc2:	2df5      	cmp	r5, #245	@ 0xf5
 800bdc4:	d803      	bhi.n	800bdce <rmw_validate_namespace_with_size+0x46>
 800bdc6:	2000      	movs	r0, #0
 800bdc8:	6020      	str	r0, [r4, #0]
 800bdca:	b042      	add	sp, #264	@ 0x108
 800bdcc:	bd70      	pop	{r4, r5, r6, pc}
 800bdce:	2307      	movs	r3, #7
 800bdd0:	6023      	str	r3, [r4, #0]
 800bdd2:	2e00      	cmp	r6, #0
 800bdd4:	d0f9      	beq.n	800bdca <rmw_validate_namespace_with_size+0x42>
 800bdd6:	23f4      	movs	r3, #244	@ 0xf4
 800bdd8:	6033      	str	r3, [r6, #0]
 800bdda:	e7f6      	b.n	800bdca <rmw_validate_namespace_with_size+0x42>
 800bddc:	200b      	movs	r0, #11
 800bdde:	4770      	bx	lr
 800bde0:	200b      	movs	r0, #11
 800bde2:	e7f2      	b.n	800bdca <rmw_validate_namespace_with_size+0x42>
 800bde4:	2306      	movs	r3, #6
 800bde6:	6023      	str	r3, [r4, #0]
 800bde8:	2e00      	cmp	r6, #0
 800bdea:	d0ee      	beq.n	800bdca <rmw_validate_namespace_with_size+0x42>
 800bdec:	9b01      	ldr	r3, [sp, #4]
 800bdee:	6033      	str	r3, [r6, #0]
 800bdf0:	e7eb      	b.n	800bdca <rmw_validate_namespace_with_size+0x42>
 800bdf2:	2305      	movs	r3, #5
 800bdf4:	6023      	str	r3, [r4, #0]
 800bdf6:	e7f7      	b.n	800bde8 <rmw_validate_namespace_with_size+0x60>
 800bdf8:	2304      	movs	r3, #4
 800bdfa:	6023      	str	r3, [r4, #0]
 800bdfc:	e7f4      	b.n	800bde8 <rmw_validate_namespace_with_size+0x60>
 800bdfe:	2303      	movs	r3, #3
 800be00:	6023      	str	r3, [r4, #0]
 800be02:	e7f1      	b.n	800bde8 <rmw_validate_namespace_with_size+0x60>
 800be04:	2302      	movs	r3, #2
 800be06:	6023      	str	r3, [r4, #0]
 800be08:	e7ee      	b.n	800bde8 <rmw_validate_namespace_with_size+0x60>
 800be0a:	2301      	movs	r3, #1
 800be0c:	6023      	str	r3, [r4, #0]
 800be0e:	e7eb      	b.n	800bde8 <rmw_validate_namespace_with_size+0x60>
 800be10:	4a03      	ldr	r2, [pc, #12]	@ (800be20 <rmw_validate_namespace_with_size+0x98>)
 800be12:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800be16:	a802      	add	r0, sp, #8
 800be18:	f7ff fed0 	bl	800bbbc <rcutils_snprintf>
 800be1c:	2001      	movs	r0, #1
 800be1e:	e7d4      	b.n	800bdca <rmw_validate_namespace_with_size+0x42>
 800be20:	0801a200 	.word	0x0801a200

0800be24 <rmw_validate_namespace>:
 800be24:	b168      	cbz	r0, 800be42 <rmw_validate_namespace+0x1e>
 800be26:	b570      	push	{r4, r5, r6, lr}
 800be28:	460d      	mov	r5, r1
 800be2a:	4616      	mov	r6, r2
 800be2c:	4604      	mov	r4, r0
 800be2e:	f7f4 fa4f 	bl	80002d0 <strlen>
 800be32:	4633      	mov	r3, r6
 800be34:	4601      	mov	r1, r0
 800be36:	462a      	mov	r2, r5
 800be38:	4620      	mov	r0, r4
 800be3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800be3e:	f7ff bfa3 	b.w	800bd88 <rmw_validate_namespace_with_size>
 800be42:	200b      	movs	r0, #11
 800be44:	4770      	bx	lr
 800be46:	bf00      	nop

0800be48 <rmw_namespace_validation_result_string>:
 800be48:	2807      	cmp	r0, #7
 800be4a:	bf9a      	itte	ls
 800be4c:	4b02      	ldrls	r3, [pc, #8]	@ (800be58 <rmw_namespace_validation_result_string+0x10>)
 800be4e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800be52:	4802      	ldrhi	r0, [pc, #8]	@ (800be5c <rmw_namespace_validation_result_string+0x14>)
 800be54:	4770      	bx	lr
 800be56:	bf00      	nop
 800be58:	0801a3f8 	.word	0x0801a3f8
 800be5c:	0801a250 	.word	0x0801a250

0800be60 <rmw_validate_node_name>:
 800be60:	2800      	cmp	r0, #0
 800be62:	d03b      	beq.n	800bedc <rmw_validate_node_name+0x7c>
 800be64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be68:	460d      	mov	r5, r1
 800be6a:	2900      	cmp	r1, #0
 800be6c:	d038      	beq.n	800bee0 <rmw_validate_node_name+0x80>
 800be6e:	4616      	mov	r6, r2
 800be70:	4604      	mov	r4, r0
 800be72:	f7f4 fa2d 	bl	80002d0 <strlen>
 800be76:	b1e0      	cbz	r0, 800beb2 <rmw_validate_node_name+0x52>
 800be78:	1e63      	subs	r3, r4, #1
 800be7a:	eb03 0800 	add.w	r8, r3, r0
 800be7e:	f1c4 0101 	rsb	r1, r4, #1
 800be82:	18cf      	adds	r7, r1, r3
 800be84:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 800be88:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 800be8c:	f02e 0c20 	bic.w	ip, lr, #32
 800be90:	2a09      	cmp	r2, #9
 800be92:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 800be96:	d914      	bls.n	800bec2 <rmw_validate_node_name+0x62>
 800be98:	f1bc 0f19 	cmp.w	ip, #25
 800be9c:	d911      	bls.n	800bec2 <rmw_validate_node_name+0x62>
 800be9e:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 800bea2:	d00e      	beq.n	800bec2 <rmw_validate_node_name+0x62>
 800bea4:	2302      	movs	r3, #2
 800bea6:	602b      	str	r3, [r5, #0]
 800bea8:	b106      	cbz	r6, 800beac <rmw_validate_node_name+0x4c>
 800beaa:	6037      	str	r7, [r6, #0]
 800beac:	2000      	movs	r0, #0
 800beae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800beb2:	2301      	movs	r3, #1
 800beb4:	602b      	str	r3, [r5, #0]
 800beb6:	2e00      	cmp	r6, #0
 800beb8:	d0f8      	beq.n	800beac <rmw_validate_node_name+0x4c>
 800beba:	2000      	movs	r0, #0
 800bebc:	6030      	str	r0, [r6, #0]
 800bebe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bec2:	4543      	cmp	r3, r8
 800bec4:	d1dd      	bne.n	800be82 <rmw_validate_node_name+0x22>
 800bec6:	7822      	ldrb	r2, [r4, #0]
 800bec8:	4b0d      	ldr	r3, [pc, #52]	@ (800bf00 <rmw_validate_node_name+0xa0>)
 800beca:	5cd3      	ldrb	r3, [r2, r3]
 800becc:	f013 0304 	ands.w	r3, r3, #4
 800bed0:	d110      	bne.n	800bef4 <rmw_validate_node_name+0x94>
 800bed2:	28ff      	cmp	r0, #255	@ 0xff
 800bed4:	d806      	bhi.n	800bee4 <rmw_validate_node_name+0x84>
 800bed6:	602b      	str	r3, [r5, #0]
 800bed8:	4618      	mov	r0, r3
 800beda:	e7e8      	b.n	800beae <rmw_validate_node_name+0x4e>
 800bedc:	200b      	movs	r0, #11
 800bede:	4770      	bx	lr
 800bee0:	200b      	movs	r0, #11
 800bee2:	e7e4      	b.n	800beae <rmw_validate_node_name+0x4e>
 800bee4:	2204      	movs	r2, #4
 800bee6:	602a      	str	r2, [r5, #0]
 800bee8:	2e00      	cmp	r6, #0
 800beea:	d0df      	beq.n	800beac <rmw_validate_node_name+0x4c>
 800beec:	22fe      	movs	r2, #254	@ 0xfe
 800beee:	6032      	str	r2, [r6, #0]
 800bef0:	4618      	mov	r0, r3
 800bef2:	e7dc      	b.n	800beae <rmw_validate_node_name+0x4e>
 800bef4:	2303      	movs	r3, #3
 800bef6:	602b      	str	r3, [r5, #0]
 800bef8:	2e00      	cmp	r6, #0
 800befa:	d1de      	bne.n	800beba <rmw_validate_node_name+0x5a>
 800befc:	e7d6      	b.n	800beac <rmw_validate_node_name+0x4c>
 800befe:	bf00      	nop
 800bf00:	0801ac5e 	.word	0x0801ac5e

0800bf04 <rmw_node_name_validation_result_string>:
 800bf04:	2804      	cmp	r0, #4
 800bf06:	bf9a      	itte	ls
 800bf08:	4b02      	ldrls	r3, [pc, #8]	@ (800bf14 <rmw_node_name_validation_result_string+0x10>)
 800bf0a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800bf0e:	4802      	ldrhi	r0, [pc, #8]	@ (800bf18 <rmw_node_name_validation_result_string+0x14>)
 800bf10:	4770      	bx	lr
 800bf12:	bf00      	nop
 800bf14:	0801a504 	.word	0x0801a504
 800bf18:	0801a418 	.word	0x0801a418

0800bf1c <rmw_uros_set_custom_transport>:
 800bf1c:	b470      	push	{r4, r5, r6}
 800bf1e:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800bf22:	b162      	cbz	r2, 800bf3e <rmw_uros_set_custom_transport+0x22>
 800bf24:	b15b      	cbz	r3, 800bf3e <rmw_uros_set_custom_transport+0x22>
 800bf26:	b155      	cbz	r5, 800bf3e <rmw_uros_set_custom_transport+0x22>
 800bf28:	b14e      	cbz	r6, 800bf3e <rmw_uros_set_custom_transport+0x22>
 800bf2a:	4c06      	ldr	r4, [pc, #24]	@ (800bf44 <rmw_uros_set_custom_transport+0x28>)
 800bf2c:	7020      	strb	r0, [r4, #0]
 800bf2e:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800bf32:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800bf36:	6166      	str	r6, [r4, #20]
 800bf38:	2000      	movs	r0, #0
 800bf3a:	bc70      	pop	{r4, r5, r6}
 800bf3c:	4770      	bx	lr
 800bf3e:	200b      	movs	r0, #11
 800bf40:	bc70      	pop	{r4, r5, r6}
 800bf42:	4770      	bx	lr
 800bf44:	2000c884 	.word	0x2000c884

0800bf48 <create_node>:
 800bf48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bf4c:	b083      	sub	sp, #12
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d05f      	beq.n	800c012 <create_node+0xca>
 800bf52:	4606      	mov	r6, r0
 800bf54:	4835      	ldr	r0, [pc, #212]	@ (800c02c <create_node+0xe4>)
 800bf56:	460f      	mov	r7, r1
 800bf58:	4690      	mov	r8, r2
 800bf5a:	461d      	mov	r5, r3
 800bf5c:	f006 ffe2 	bl	8012f24 <get_memory>
 800bf60:	2800      	cmp	r0, #0
 800bf62:	d056      	beq.n	800c012 <create_node+0xca>
 800bf64:	6884      	ldr	r4, [r0, #8]
 800bf66:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800bf68:	6123      	str	r3, [r4, #16]
 800bf6a:	f007 f843 	bl	8012ff4 <rmw_get_implementation_identifier>
 800bf6e:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 800bf72:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800bf76:	f8c4 9020 	str.w	r9, [r4, #32]
 800bf7a:	4630      	mov	r0, r6
 800bf7c:	f7f4 f9a8 	bl	80002d0 <strlen>
 800bf80:	1c42      	adds	r2, r0, #1
 800bf82:	2a3c      	cmp	r2, #60	@ 0x3c
 800bf84:	f104 0518 	add.w	r5, r4, #24
 800bf88:	d840      	bhi.n	800c00c <create_node+0xc4>
 800bf8a:	4648      	mov	r0, r9
 800bf8c:	4631      	mov	r1, r6
 800bf8e:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 800bf92:	f00c f83c 	bl	801800e <memcpy>
 800bf96:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 800bf9a:	4638      	mov	r0, r7
 800bf9c:	f7f4 f998 	bl	80002d0 <strlen>
 800bfa0:	1c42      	adds	r2, r0, #1
 800bfa2:	2a3c      	cmp	r2, #60	@ 0x3c
 800bfa4:	d832      	bhi.n	800c00c <create_node+0xc4>
 800bfa6:	4639      	mov	r1, r7
 800bfa8:	4648      	mov	r0, r9
 800bfaa:	f00c f830 	bl	801800e <memcpy>
 800bfae:	6923      	ldr	r3, [r4, #16]
 800bfb0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bfb4:	2101      	movs	r1, #1
 800bfb6:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 800bfba:	1842      	adds	r2, r0, r1
 800bfbc:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 800bfc0:	f001 fb84 	bl	800d6cc <uxr_object_id>
 800bfc4:	6160      	str	r0, [r4, #20]
 800bfc6:	783b      	ldrb	r3, [r7, #0]
 800bfc8:	2b2f      	cmp	r3, #47	@ 0x2f
 800bfca:	d127      	bne.n	800c01c <create_node+0xd4>
 800bfcc:	787b      	ldrb	r3, [r7, #1]
 800bfce:	bb2b      	cbnz	r3, 800c01c <create_node+0xd4>
 800bfd0:	4a17      	ldr	r2, [pc, #92]	@ (800c030 <create_node+0xe8>)
 800bfd2:	4818      	ldr	r0, [pc, #96]	@ (800c034 <create_node+0xec>)
 800bfd4:	4633      	mov	r3, r6
 800bfd6:	213c      	movs	r1, #60	@ 0x3c
 800bfd8:	f00b fd68 	bl	8017aac <sniprintf>
 800bfdc:	6920      	ldr	r0, [r4, #16]
 800bfde:	4915      	ldr	r1, [pc, #84]	@ (800c034 <create_node+0xec>)
 800bfe0:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800bfe4:	9100      	str	r1, [sp, #0]
 800bfe6:	2106      	movs	r1, #6
 800bfe8:	9101      	str	r1, [sp, #4]
 800bfea:	6811      	ldr	r1, [r2, #0]
 800bfec:	6962      	ldr	r2, [r4, #20]
 800bfee:	fa1f f388 	uxth.w	r3, r8
 800bff2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800bff6:	f001 f9b3 	bl	800d360 <uxr_buffer_create_participant_bin>
 800bffa:	4602      	mov	r2, r0
 800bffc:	6920      	ldr	r0, [r4, #16]
 800bffe:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800c002:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800c006:	f000 ff19 	bl	800ce3c <run_xrce_session>
 800c00a:	b918      	cbnz	r0, 800c014 <create_node+0xcc>
 800c00c:	4628      	mov	r0, r5
 800c00e:	f000 fda3 	bl	800cb58 <rmw_uxrce_fini_node_memory>
 800c012:	2500      	movs	r5, #0
 800c014:	4628      	mov	r0, r5
 800c016:	b003      	add	sp, #12
 800c018:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c01c:	4a06      	ldr	r2, [pc, #24]	@ (800c038 <create_node+0xf0>)
 800c01e:	9600      	str	r6, [sp, #0]
 800c020:	463b      	mov	r3, r7
 800c022:	213c      	movs	r1, #60	@ 0x3c
 800c024:	4803      	ldr	r0, [pc, #12]	@ (800c034 <create_node+0xec>)
 800c026:	f00b fd41 	bl	8017aac <sniprintf>
 800c02a:	e7d7      	b.n	800bfdc <create_node+0x94>
 800c02c:	200111ac 	.word	0x200111ac
 800c030:	0801a54c 	.word	0x0801a54c
 800c034:	2000c8a0 	.word	0x2000c8a0
 800c038:	08019fcc 	.word	0x08019fcc

0800c03c <rmw_create_node>:
 800c03c:	b199      	cbz	r1, 800c066 <rmw_create_node+0x2a>
 800c03e:	780b      	ldrb	r3, [r1, #0]
 800c040:	468c      	mov	ip, r1
 800c042:	b183      	cbz	r3, 800c066 <rmw_create_node+0x2a>
 800c044:	b410      	push	{r4}
 800c046:	4614      	mov	r4, r2
 800c048:	b14a      	cbz	r2, 800c05e <rmw_create_node+0x22>
 800c04a:	7813      	ldrb	r3, [r2, #0]
 800c04c:	b13b      	cbz	r3, 800c05e <rmw_create_node+0x22>
 800c04e:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 800c050:	4603      	mov	r3, r0
 800c052:	4621      	mov	r1, r4
 800c054:	4660      	mov	r0, ip
 800c056:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c05a:	f7ff bf75 	b.w	800bf48 <create_node>
 800c05e:	2000      	movs	r0, #0
 800c060:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c064:	4770      	bx	lr
 800c066:	2000      	movs	r0, #0
 800c068:	4770      	bx	lr
 800c06a:	bf00      	nop

0800c06c <rmw_destroy_node>:
 800c06c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c06e:	b328      	cbz	r0, 800c0bc <rmw_destroy_node+0x50>
 800c070:	4607      	mov	r7, r0
 800c072:	6800      	ldr	r0, [r0, #0]
 800c074:	b120      	cbz	r0, 800c080 <rmw_destroy_node+0x14>
 800c076:	4b36      	ldr	r3, [pc, #216]	@ (800c150 <rmw_destroy_node+0xe4>)
 800c078:	6819      	ldr	r1, [r3, #0]
 800c07a:	f7f4 f8c9 	bl	8000210 <strcmp>
 800c07e:	b9e8      	cbnz	r0, 800c0bc <rmw_destroy_node+0x50>
 800c080:	687d      	ldr	r5, [r7, #4]
 800c082:	b1dd      	cbz	r5, 800c0bc <rmw_destroy_node+0x50>
 800c084:	4b33      	ldr	r3, [pc, #204]	@ (800c154 <rmw_destroy_node+0xe8>)
 800c086:	681c      	ldr	r4, [r3, #0]
 800c088:	2c00      	cmp	r4, #0
 800c08a:	d05f      	beq.n	800c14c <rmw_destroy_node+0xe0>
 800c08c:	2600      	movs	r6, #0
 800c08e:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800c092:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 800c096:	429d      	cmp	r5, r3
 800c098:	d013      	beq.n	800c0c2 <rmw_destroy_node+0x56>
 800c09a:	2c00      	cmp	r4, #0
 800c09c:	d1f7      	bne.n	800c08e <rmw_destroy_node+0x22>
 800c09e:	4b2e      	ldr	r3, [pc, #184]	@ (800c158 <rmw_destroy_node+0xec>)
 800c0a0:	681c      	ldr	r4, [r3, #0]
 800c0a2:	b1c4      	cbz	r4, 800c0d6 <rmw_destroy_node+0x6a>
 800c0a4:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800c0a8:	6a0b      	ldr	r3, [r1, #32]
 800c0aa:	429d      	cmp	r5, r3
 800c0ac:	d1f9      	bne.n	800c0a2 <rmw_destroy_node+0x36>
 800c0ae:	317c      	adds	r1, #124	@ 0x7c
 800c0b0:	4638      	mov	r0, r7
 800c0b2:	f000 fb37 	bl	800c724 <rmw_destroy_subscription>
 800c0b6:	2801      	cmp	r0, #1
 800c0b8:	4606      	mov	r6, r0
 800c0ba:	d1f2      	bne.n	800c0a2 <rmw_destroy_node+0x36>
 800c0bc:	2601      	movs	r6, #1
 800c0be:	4630      	mov	r0, r6
 800c0c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0c2:	3184      	adds	r1, #132	@ 0x84
 800c0c4:	4638      	mov	r0, r7
 800c0c6:	f000 f9a5 	bl	800c414 <rmw_destroy_publisher>
 800c0ca:	2801      	cmp	r0, #1
 800c0cc:	4606      	mov	r6, r0
 800c0ce:	d0f5      	beq.n	800c0bc <rmw_destroy_node+0x50>
 800c0d0:	2c00      	cmp	r4, #0
 800c0d2:	d1dc      	bne.n	800c08e <rmw_destroy_node+0x22>
 800c0d4:	e7e3      	b.n	800c09e <rmw_destroy_node+0x32>
 800c0d6:	4b21      	ldr	r3, [pc, #132]	@ (800c15c <rmw_destroy_node+0xf0>)
 800c0d8:	681c      	ldr	r4, [r3, #0]
 800c0da:	b16c      	cbz	r4, 800c0f8 <rmw_destroy_node+0x8c>
 800c0dc:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800c0e0:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800c0e2:	429d      	cmp	r5, r3
 800c0e4:	d1f9      	bne.n	800c0da <rmw_destroy_node+0x6e>
 800c0e6:	317c      	adds	r1, #124	@ 0x7c
 800c0e8:	4638      	mov	r0, r7
 800c0ea:	f000 f9e5 	bl	800c4b8 <rmw_destroy_service>
 800c0ee:	2801      	cmp	r0, #1
 800c0f0:	4606      	mov	r6, r0
 800c0f2:	d0e3      	beq.n	800c0bc <rmw_destroy_node+0x50>
 800c0f4:	2c00      	cmp	r4, #0
 800c0f6:	d1f1      	bne.n	800c0dc <rmw_destroy_node+0x70>
 800c0f8:	4b19      	ldr	r3, [pc, #100]	@ (800c160 <rmw_destroy_node+0xf4>)
 800c0fa:	681c      	ldr	r4, [r3, #0]
 800c0fc:	b16c      	cbz	r4, 800c11a <rmw_destroy_node+0xae>
 800c0fe:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800c102:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800c104:	429d      	cmp	r5, r3
 800c106:	d1f9      	bne.n	800c0fc <rmw_destroy_node+0x90>
 800c108:	317c      	adds	r1, #124	@ 0x7c
 800c10a:	4638      	mov	r0, r7
 800c10c:	f006 ff2e 	bl	8012f6c <rmw_destroy_client>
 800c110:	2801      	cmp	r0, #1
 800c112:	4606      	mov	r6, r0
 800c114:	d0d2      	beq.n	800c0bc <rmw_destroy_node+0x50>
 800c116:	2c00      	cmp	r4, #0
 800c118:	d1f1      	bne.n	800c0fe <rmw_destroy_node+0x92>
 800c11a:	6928      	ldr	r0, [r5, #16]
 800c11c:	696a      	ldr	r2, [r5, #20]
 800c11e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800c122:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c126:	6819      	ldr	r1, [r3, #0]
 800c128:	f001 f8ce 	bl	800d2c8 <uxr_buffer_delete_entity>
 800c12c:	4602      	mov	r2, r0
 800c12e:	6928      	ldr	r0, [r5, #16]
 800c130:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800c134:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800c138:	f000 fe80 	bl	800ce3c <run_xrce_session>
 800c13c:	2800      	cmp	r0, #0
 800c13e:	bf08      	it	eq
 800c140:	2602      	moveq	r6, #2
 800c142:	4638      	mov	r0, r7
 800c144:	f000 fd08 	bl	800cb58 <rmw_uxrce_fini_node_memory>
 800c148:	4630      	mov	r0, r6
 800c14a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c14c:	4626      	mov	r6, r4
 800c14e:	e7a6      	b.n	800c09e <rmw_destroy_node+0x32>
 800c150:	0801a8ac 	.word	0x0801a8ac
 800c154:	200111bc 	.word	0x200111bc
 800c158:	200111fc 	.word	0x200111fc
 800c15c:	200111cc 	.word	0x200111cc
 800c160:	2000c8dc 	.word	0x2000c8dc

0800c164 <rmw_node_get_graph_guard_condition>:
 800c164:	6843      	ldr	r3, [r0, #4]
 800c166:	6918      	ldr	r0, [r3, #16]
 800c168:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 800c16c:	4770      	bx	lr
 800c16e:	bf00      	nop

0800c170 <flush_session>:
 800c170:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800c172:	f002 b8e9 	b.w	800e348 <uxr_run_session_until_confirm_delivery>
 800c176:	bf00      	nop

0800c178 <rmw_publish>:
 800c178:	2800      	cmp	r0, #0
 800c17a:	d053      	beq.n	800c224 <rmw_publish+0xac>
 800c17c:	b570      	push	{r4, r5, r6, lr}
 800c17e:	460d      	mov	r5, r1
 800c180:	b08e      	sub	sp, #56	@ 0x38
 800c182:	2900      	cmp	r1, #0
 800c184:	d04b      	beq.n	800c21e <rmw_publish+0xa6>
 800c186:	4604      	mov	r4, r0
 800c188:	6800      	ldr	r0, [r0, #0]
 800c18a:	f000 fed7 	bl	800cf3c <is_uxrce_rmw_identifier_valid>
 800c18e:	2800      	cmp	r0, #0
 800c190:	d045      	beq.n	800c21e <rmw_publish+0xa6>
 800c192:	6866      	ldr	r6, [r4, #4]
 800c194:	2e00      	cmp	r6, #0
 800c196:	d042      	beq.n	800c21e <rmw_publish+0xa6>
 800c198:	69b4      	ldr	r4, [r6, #24]
 800c19a:	4628      	mov	r0, r5
 800c19c:	6923      	ldr	r3, [r4, #16]
 800c19e:	4798      	blx	r3
 800c1a0:	69f3      	ldr	r3, [r6, #28]
 800c1a2:	9005      	str	r0, [sp, #20]
 800c1a4:	b113      	cbz	r3, 800c1ac <rmw_publish+0x34>
 800c1a6:	a805      	add	r0, sp, #20
 800c1a8:	4798      	blx	r3
 800c1aa:	9805      	ldr	r0, [sp, #20]
 800c1ac:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800c1b0:	691b      	ldr	r3, [r3, #16]
 800c1b2:	9000      	str	r0, [sp, #0]
 800c1b4:	6972      	ldr	r2, [r6, #20]
 800c1b6:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800c1b8:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800c1bc:	ab06      	add	r3, sp, #24
 800c1be:	f002 feaf 	bl	800ef20 <uxr_prepare_output_stream>
 800c1c2:	b1d8      	cbz	r0, 800c1fc <rmw_publish+0x84>
 800c1c4:	68a3      	ldr	r3, [r4, #8]
 800c1c6:	a906      	add	r1, sp, #24
 800c1c8:	4628      	mov	r0, r5
 800c1ca:	4798      	blx	r3
 800c1cc:	6a33      	ldr	r3, [r6, #32]
 800c1ce:	4604      	mov	r4, r0
 800c1d0:	b10b      	cbz	r3, 800c1d6 <rmw_publish+0x5e>
 800c1d2:	a806      	add	r0, sp, #24
 800c1d4:	4798      	blx	r3
 800c1d6:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800c1da:	2b01      	cmp	r3, #1
 800c1dc:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800c1e0:	d022      	beq.n	800c228 <rmw_publish+0xb0>
 800c1e2:	6918      	ldr	r0, [r3, #16]
 800c1e4:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800c1e6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c1ea:	f002 f8ad 	bl	800e348 <uxr_run_session_until_confirm_delivery>
 800c1ee:	4020      	ands	r0, r4
 800c1f0:	b2c4      	uxtb	r4, r0
 800c1f2:	f084 0001 	eor.w	r0, r4, #1
 800c1f6:	b2c0      	uxtb	r0, r0
 800c1f8:	b00e      	add	sp, #56	@ 0x38
 800c1fa:	bd70      	pop	{r4, r5, r6, pc}
 800c1fc:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800c200:	6918      	ldr	r0, [r3, #16]
 800c202:	9b05      	ldr	r3, [sp, #20]
 800c204:	9300      	str	r3, [sp, #0]
 800c206:	4b0b      	ldr	r3, [pc, #44]	@ (800c234 <rmw_publish+0xbc>)
 800c208:	9301      	str	r3, [sp, #4]
 800c20a:	9602      	str	r6, [sp, #8]
 800c20c:	6972      	ldr	r2, [r6, #20]
 800c20e:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800c210:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c214:	ab06      	add	r3, sp, #24
 800c216:	f002 feb3 	bl	800ef80 <uxr_prepare_output_stream_fragmented>
 800c21a:	2800      	cmp	r0, #0
 800c21c:	d1d2      	bne.n	800c1c4 <rmw_publish+0x4c>
 800c21e:	2001      	movs	r0, #1
 800c220:	b00e      	add	sp, #56	@ 0x38
 800c222:	bd70      	pop	{r4, r5, r6, pc}
 800c224:	2001      	movs	r0, #1
 800c226:	4770      	bx	lr
 800c228:	6918      	ldr	r0, [r3, #16]
 800c22a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c22e:	f001 fccb 	bl	800dbc8 <uxr_flash_output_streams>
 800c232:	e7de      	b.n	800c1f2 <rmw_publish+0x7a>
 800c234:	0800c171 	.word	0x0800c171

0800c238 <rmw_create_publisher>:
 800c238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c23c:	b087      	sub	sp, #28
 800c23e:	2800      	cmp	r0, #0
 800c240:	f000 80cc 	beq.w	800c3dc <rmw_create_publisher+0x1a4>
 800c244:	460e      	mov	r6, r1
 800c246:	2900      	cmp	r1, #0
 800c248:	f000 80c8 	beq.w	800c3dc <rmw_create_publisher+0x1a4>
 800c24c:	4604      	mov	r4, r0
 800c24e:	6800      	ldr	r0, [r0, #0]
 800c250:	4615      	mov	r5, r2
 800c252:	4698      	mov	r8, r3
 800c254:	f000 fe72 	bl	800cf3c <is_uxrce_rmw_identifier_valid>
 800c258:	2800      	cmp	r0, #0
 800c25a:	f000 80bf 	beq.w	800c3dc <rmw_create_publisher+0x1a4>
 800c25e:	2d00      	cmp	r5, #0
 800c260:	f000 80bc 	beq.w	800c3dc <rmw_create_publisher+0x1a4>
 800c264:	782b      	ldrb	r3, [r5, #0]
 800c266:	2b00      	cmp	r3, #0
 800c268:	f000 80b8 	beq.w	800c3dc <rmw_create_publisher+0x1a4>
 800c26c:	f1b8 0f00 	cmp.w	r8, #0
 800c270:	f000 80b4 	beq.w	800c3dc <rmw_create_publisher+0x1a4>
 800c274:	485c      	ldr	r0, [pc, #368]	@ (800c3e8 <rmw_create_publisher+0x1b0>)
 800c276:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800c27a:	f006 fe53 	bl	8012f24 <get_memory>
 800c27e:	2800      	cmp	r0, #0
 800c280:	f000 80ac 	beq.w	800c3dc <rmw_create_publisher+0x1a4>
 800c284:	6884      	ldr	r4, [r0, #8]
 800c286:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800c28a:	f006 feb3 	bl	8012ff4 <rmw_get_implementation_identifier>
 800c28e:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800c292:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800c296:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800c29a:	4628      	mov	r0, r5
 800c29c:	f7f4 f818 	bl	80002d0 <strlen>
 800c2a0:	3001      	adds	r0, #1
 800c2a2:	283c      	cmp	r0, #60	@ 0x3c
 800c2a4:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 800c2a8:	f200 8091 	bhi.w	800c3ce <rmw_create_publisher+0x196>
 800c2ac:	4a4f      	ldr	r2, [pc, #316]	@ (800c3ec <rmw_create_publisher+0x1b4>)
 800c2ae:	462b      	mov	r3, r5
 800c2b0:	213c      	movs	r1, #60	@ 0x3c
 800c2b2:	4650      	mov	r0, sl
 800c2b4:	f00b fbfa 	bl	8017aac <sniprintf>
 800c2b8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c2bc:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800c2be:	4641      	mov	r1, r8
 800c2c0:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800c2c4:	2250      	movs	r2, #80	@ 0x50
 800c2c6:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800c2ca:	f00b fea0 	bl	801800e <memcpy>
 800c2ce:	f898 3008 	ldrb.w	r3, [r8, #8]
 800c2d2:	4947      	ldr	r1, [pc, #284]	@ (800c3f0 <rmw_create_publisher+0x1b8>)
 800c2d4:	2b02      	cmp	r3, #2
 800c2d6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c2da:	bf0c      	ite	eq
 800c2dc:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800c2e0:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800c2e4:	67a3      	str	r3, [r4, #120]	@ 0x78
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800c2ec:	4630      	mov	r0, r6
 800c2ee:	f000 fe33 	bl	800cf58 <get_message_typesupport_handle>
 800c2f2:	2800      	cmp	r0, #0
 800c2f4:	d06b      	beq.n	800c3ce <rmw_create_publisher+0x196>
 800c2f6:	6842      	ldr	r2, [r0, #4]
 800c2f8:	61a2      	str	r2, [r4, #24]
 800c2fa:	2a00      	cmp	r2, #0
 800c2fc:	d067      	beq.n	800c3ce <rmw_create_publisher+0x196>
 800c2fe:	4629      	mov	r1, r5
 800c300:	4643      	mov	r3, r8
 800c302:	4648      	mov	r0, r9
 800c304:	f007 f904 	bl	8013510 <create_topic>
 800c308:	6260      	str	r0, [r4, #36]	@ 0x24
 800c30a:	2800      	cmp	r0, #0
 800c30c:	d063      	beq.n	800c3d6 <rmw_create_publisher+0x19e>
 800c30e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c312:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c316:	2103      	movs	r1, #3
 800c318:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800c31c:	1c42      	adds	r2, r0, #1
 800c31e:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800c322:	f001 f9d3 	bl	800d6cc <uxr_object_id>
 800c326:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800c32a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c32e:	6120      	str	r0, [r4, #16]
 800c330:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800c334:	6910      	ldr	r0, [r2, #16]
 800c336:	2506      	movs	r5, #6
 800c338:	9500      	str	r5, [sp, #0]
 800c33a:	6819      	ldr	r1, [r3, #0]
 800c33c:	6922      	ldr	r2, [r4, #16]
 800c33e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800c342:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c346:	f001 f873 	bl	800d430 <uxr_buffer_create_publisher_bin>
 800c34a:	4602      	mov	r2, r0
 800c34c:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800c350:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800c354:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800c358:	f000 fd70 	bl	800ce3c <run_xrce_session>
 800c35c:	b3b8      	cbz	r0, 800c3ce <rmw_create_publisher+0x196>
 800c35e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c362:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c366:	2105      	movs	r1, #5
 800c368:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800c36c:	1c42      	adds	r2, r0, #1
 800c36e:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800c372:	f001 f9ab 	bl	800d6cc <uxr_object_id>
 800c376:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800c37a:	6160      	str	r0, [r4, #20]
 800c37c:	691e      	ldr	r6, [r3, #16]
 800c37e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c382:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800c386:	f10d 0a10 	add.w	sl, sp, #16
 800c38a:	4641      	mov	r1, r8
 800c38c:	4650      	mov	r0, sl
 800c38e:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 800c392:	f000 fd6f 	bl	800ce74 <convert_qos_profile>
 800c396:	9503      	str	r5, [sp, #12]
 800c398:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800c39c:	9001      	str	r0, [sp, #4]
 800c39e:	f8ad 1008 	strh.w	r1, [sp, #8]
 800c3a2:	f8db 3010 	ldr.w	r3, [fp, #16]
 800c3a6:	9300      	str	r3, [sp, #0]
 800c3a8:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800c3ac:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800c3b0:	f8d8 1000 	ldr.w	r1, [r8]
 800c3b4:	4630      	mov	r0, r6
 800c3b6:	f001 f89b 	bl	800d4f0 <uxr_buffer_create_datawriter_bin>
 800c3ba:	4602      	mov	r2, r0
 800c3bc:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800c3c0:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800c3c4:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800c3c8:	f000 fd38 	bl	800ce3c <run_xrce_session>
 800c3cc:	b938      	cbnz	r0, 800c3de <rmw_create_publisher+0x1a6>
 800c3ce:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800c3d0:	b108      	cbz	r0, 800c3d6 <rmw_create_publisher+0x19e>
 800c3d2:	f000 fc31 	bl	800cc38 <rmw_uxrce_fini_topic_memory>
 800c3d6:	4638      	mov	r0, r7
 800c3d8:	f000 fbd6 	bl	800cb88 <rmw_uxrce_fini_publisher_memory>
 800c3dc:	2700      	movs	r7, #0
 800c3de:	4638      	mov	r0, r7
 800c3e0:	b007      	add	sp, #28
 800c3e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3e6:	bf00      	nop
 800c3e8:	200111bc 	.word	0x200111bc
 800c3ec:	0801a54c 	.word	0x0801a54c
 800c3f0:	0801a518 	.word	0x0801a518

0800c3f4 <rmw_publisher_get_actual_qos>:
 800c3f4:	b150      	cbz	r0, 800c40c <rmw_publisher_get_actual_qos+0x18>
 800c3f6:	b508      	push	{r3, lr}
 800c3f8:	460b      	mov	r3, r1
 800c3fa:	b149      	cbz	r1, 800c410 <rmw_publisher_get_actual_qos+0x1c>
 800c3fc:	6841      	ldr	r1, [r0, #4]
 800c3fe:	2250      	movs	r2, #80	@ 0x50
 800c400:	3128      	adds	r1, #40	@ 0x28
 800c402:	4618      	mov	r0, r3
 800c404:	f00b fe03 	bl	801800e <memcpy>
 800c408:	2000      	movs	r0, #0
 800c40a:	bd08      	pop	{r3, pc}
 800c40c:	200b      	movs	r0, #11
 800c40e:	4770      	bx	lr
 800c410:	200b      	movs	r0, #11
 800c412:	bd08      	pop	{r3, pc}

0800c414 <rmw_destroy_publisher>:
 800c414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c416:	b128      	cbz	r0, 800c424 <rmw_destroy_publisher+0x10>
 800c418:	4604      	mov	r4, r0
 800c41a:	6800      	ldr	r0, [r0, #0]
 800c41c:	460d      	mov	r5, r1
 800c41e:	f000 fd8d 	bl	800cf3c <is_uxrce_rmw_identifier_valid>
 800c422:	b910      	cbnz	r0, 800c42a <rmw_destroy_publisher+0x16>
 800c424:	2401      	movs	r4, #1
 800c426:	4620      	mov	r0, r4
 800c428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c42a:	6863      	ldr	r3, [r4, #4]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d0f9      	beq.n	800c424 <rmw_destroy_publisher+0x10>
 800c430:	2d00      	cmp	r5, #0
 800c432:	d0f7      	beq.n	800c424 <rmw_destroy_publisher+0x10>
 800c434:	6828      	ldr	r0, [r5, #0]
 800c436:	f000 fd81 	bl	800cf3c <is_uxrce_rmw_identifier_valid>
 800c43a:	2800      	cmp	r0, #0
 800c43c:	d0f2      	beq.n	800c424 <rmw_destroy_publisher+0x10>
 800c43e:	686c      	ldr	r4, [r5, #4]
 800c440:	2c00      	cmp	r4, #0
 800c442:	d0ef      	beq.n	800c424 <rmw_destroy_publisher+0x10>
 800c444:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800c446:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800c44a:	f007 f8b1 	bl	80135b0 <destroy_topic>
 800c44e:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800c452:	6962      	ldr	r2, [r4, #20]
 800c454:	6918      	ldr	r0, [r3, #16]
 800c456:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800c45a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c45e:	6819      	ldr	r1, [r3, #0]
 800c460:	f000 ff32 	bl	800d2c8 <uxr_buffer_delete_entity>
 800c464:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800c468:	6922      	ldr	r2, [r4, #16]
 800c46a:	691b      	ldr	r3, [r3, #16]
 800c46c:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800c470:	4604      	mov	r4, r0
 800c472:	6809      	ldr	r1, [r1, #0]
 800c474:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800c478:	f000 ff26 	bl	800d2c8 <uxr_buffer_delete_entity>
 800c47c:	693e      	ldr	r6, [r7, #16]
 800c47e:	4622      	mov	r2, r4
 800c480:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800c484:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800c488:	4604      	mov	r4, r0
 800c48a:	4630      	mov	r0, r6
 800c48c:	f000 fcd6 	bl	800ce3c <run_xrce_session>
 800c490:	693e      	ldr	r6, [r7, #16]
 800c492:	4622      	mov	r2, r4
 800c494:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800c498:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800c49c:	4604      	mov	r4, r0
 800c49e:	4630      	mov	r0, r6
 800c4a0:	f000 fccc 	bl	800ce3c <run_xrce_session>
 800c4a4:	b12c      	cbz	r4, 800c4b2 <rmw_destroy_publisher+0x9e>
 800c4a6:	b120      	cbz	r0, 800c4b2 <rmw_destroy_publisher+0x9e>
 800c4a8:	2400      	movs	r4, #0
 800c4aa:	4628      	mov	r0, r5
 800c4ac:	f000 fb6c 	bl	800cb88 <rmw_uxrce_fini_publisher_memory>
 800c4b0:	e7b9      	b.n	800c426 <rmw_destroy_publisher+0x12>
 800c4b2:	2402      	movs	r4, #2
 800c4b4:	e7f9      	b.n	800c4aa <rmw_destroy_publisher+0x96>
 800c4b6:	bf00      	nop

0800c4b8 <rmw_destroy_service>:
 800c4b8:	b570      	push	{r4, r5, r6, lr}
 800c4ba:	b128      	cbz	r0, 800c4c8 <rmw_destroy_service+0x10>
 800c4bc:	4604      	mov	r4, r0
 800c4be:	6800      	ldr	r0, [r0, #0]
 800c4c0:	460d      	mov	r5, r1
 800c4c2:	f000 fd3b 	bl	800cf3c <is_uxrce_rmw_identifier_valid>
 800c4c6:	b910      	cbnz	r0, 800c4ce <rmw_destroy_service+0x16>
 800c4c8:	2401      	movs	r4, #1
 800c4ca:	4620      	mov	r0, r4
 800c4cc:	bd70      	pop	{r4, r5, r6, pc}
 800c4ce:	6863      	ldr	r3, [r4, #4]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d0f9      	beq.n	800c4c8 <rmw_destroy_service+0x10>
 800c4d4:	2d00      	cmp	r5, #0
 800c4d6:	d0f7      	beq.n	800c4c8 <rmw_destroy_service+0x10>
 800c4d8:	6828      	ldr	r0, [r5, #0]
 800c4da:	f000 fd2f 	bl	800cf3c <is_uxrce_rmw_identifier_valid>
 800c4de:	2800      	cmp	r0, #0
 800c4e0:	d0f2      	beq.n	800c4c8 <rmw_destroy_service+0x10>
 800c4e2:	686e      	ldr	r6, [r5, #4]
 800c4e4:	2e00      	cmp	r6, #0
 800c4e6:	d0ef      	beq.n	800c4c8 <rmw_destroy_service+0x10>
 800c4e8:	6864      	ldr	r4, [r4, #4]
 800c4ea:	6932      	ldr	r2, [r6, #16]
 800c4ec:	6920      	ldr	r0, [r4, #16]
 800c4ee:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800c4f2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c4f6:	6819      	ldr	r1, [r3, #0]
 800c4f8:	f001 f952 	bl	800d7a0 <uxr_buffer_cancel_data>
 800c4fc:	4602      	mov	r2, r0
 800c4fe:	6920      	ldr	r0, [r4, #16]
 800c500:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800c504:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800c508:	f000 fc98 	bl	800ce3c <run_xrce_session>
 800c50c:	6920      	ldr	r0, [r4, #16]
 800c50e:	6932      	ldr	r2, [r6, #16]
 800c510:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800c514:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c518:	6819      	ldr	r1, [r3, #0]
 800c51a:	f000 fed5 	bl	800d2c8 <uxr_buffer_delete_entity>
 800c51e:	4602      	mov	r2, r0
 800c520:	6920      	ldr	r0, [r4, #16]
 800c522:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800c526:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800c52a:	f000 fc87 	bl	800ce3c <run_xrce_session>
 800c52e:	2800      	cmp	r0, #0
 800c530:	4628      	mov	r0, r5
 800c532:	bf14      	ite	ne
 800c534:	2400      	movne	r4, #0
 800c536:	2402      	moveq	r4, #2
 800c538:	f000 fb52 	bl	800cbe0 <rmw_uxrce_fini_service_memory>
 800c53c:	e7c5      	b.n	800c4ca <rmw_destroy_service+0x12>
 800c53e:	bf00      	nop

0800c540 <rmw_create_subscription>:
 800c540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c544:	b08d      	sub	sp, #52	@ 0x34
 800c546:	2800      	cmp	r0, #0
 800c548:	f000 80d1 	beq.w	800c6ee <rmw_create_subscription+0x1ae>
 800c54c:	460e      	mov	r6, r1
 800c54e:	2900      	cmp	r1, #0
 800c550:	f000 80cd 	beq.w	800c6ee <rmw_create_subscription+0x1ae>
 800c554:	4604      	mov	r4, r0
 800c556:	6800      	ldr	r0, [r0, #0]
 800c558:	4615      	mov	r5, r2
 800c55a:	4698      	mov	r8, r3
 800c55c:	f000 fcee 	bl	800cf3c <is_uxrce_rmw_identifier_valid>
 800c560:	2800      	cmp	r0, #0
 800c562:	f000 80c4 	beq.w	800c6ee <rmw_create_subscription+0x1ae>
 800c566:	2d00      	cmp	r5, #0
 800c568:	f000 80c1 	beq.w	800c6ee <rmw_create_subscription+0x1ae>
 800c56c:	782b      	ldrb	r3, [r5, #0]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	f000 80bd 	beq.w	800c6ee <rmw_create_subscription+0x1ae>
 800c574:	f1b8 0f00 	cmp.w	r8, #0
 800c578:	f000 80b9 	beq.w	800c6ee <rmw_create_subscription+0x1ae>
 800c57c:	485e      	ldr	r0, [pc, #376]	@ (800c6f8 <rmw_create_subscription+0x1b8>)
 800c57e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800c582:	f006 fccf 	bl	8012f24 <get_memory>
 800c586:	4604      	mov	r4, r0
 800c588:	2800      	cmp	r0, #0
 800c58a:	f000 80b1 	beq.w	800c6f0 <rmw_create_subscription+0x1b0>
 800c58e:	6887      	ldr	r7, [r0, #8]
 800c590:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 800c594:	f006 fd2e 	bl	8012ff4 <rmw_get_implementation_identifier>
 800c598:	f107 0a98 	add.w	sl, r7, #152	@ 0x98
 800c59c:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800c59e:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 800c5a2:	4628      	mov	r0, r5
 800c5a4:	f7f3 fe94 	bl	80002d0 <strlen>
 800c5a8:	3001      	adds	r0, #1
 800c5aa:	283c      	cmp	r0, #60	@ 0x3c
 800c5ac:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 800c5b0:	f200 8096 	bhi.w	800c6e0 <rmw_create_subscription+0x1a0>
 800c5b4:	4a51      	ldr	r2, [pc, #324]	@ (800c6fc <rmw_create_subscription+0x1bc>)
 800c5b6:	462b      	mov	r3, r5
 800c5b8:	213c      	movs	r1, #60	@ 0x3c
 800c5ba:	4650      	mov	r0, sl
 800c5bc:	f00b fa76 	bl	8017aac <sniprintf>
 800c5c0:	4641      	mov	r1, r8
 800c5c2:	f8c7 9020 	str.w	r9, [r7, #32]
 800c5c6:	2250      	movs	r2, #80	@ 0x50
 800c5c8:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800c5cc:	f00b fd1f 	bl	801800e <memcpy>
 800c5d0:	494b      	ldr	r1, [pc, #300]	@ (800c700 <rmw_create_subscription+0x1c0>)
 800c5d2:	4630      	mov	r0, r6
 800c5d4:	f000 fcc0 	bl	800cf58 <get_message_typesupport_handle>
 800c5d8:	2800      	cmp	r0, #0
 800c5da:	f000 8081 	beq.w	800c6e0 <rmw_create_subscription+0x1a0>
 800c5de:	6842      	ldr	r2, [r0, #4]
 800c5e0:	61ba      	str	r2, [r7, #24]
 800c5e2:	2a00      	cmp	r2, #0
 800c5e4:	d07c      	beq.n	800c6e0 <rmw_create_subscription+0x1a0>
 800c5e6:	4629      	mov	r1, r5
 800c5e8:	4643      	mov	r3, r8
 800c5ea:	4648      	mov	r0, r9
 800c5ec:	f006 ff90 	bl	8013510 <create_topic>
 800c5f0:	61f8      	str	r0, [r7, #28]
 800c5f2:	2800      	cmp	r0, #0
 800c5f4:	d078      	beq.n	800c6e8 <rmw_create_subscription+0x1a8>
 800c5f6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c5fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c5fe:	2104      	movs	r1, #4
 800c600:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 800c604:	1c42      	adds	r2, r0, #1
 800c606:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 800c60a:	f001 f85f 	bl	800d6cc <uxr_object_id>
 800c60e:	6138      	str	r0, [r7, #16]
 800c610:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800c614:	2506      	movs	r5, #6
 800c616:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 800c61a:	9500      	str	r5, [sp, #0]
 800c61c:	6819      	ldr	r1, [r3, #0]
 800c61e:	693a      	ldr	r2, [r7, #16]
 800c620:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800c624:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c628:	f000 ff32 	bl	800d490 <uxr_buffer_create_subscriber_bin>
 800c62c:	4602      	mov	r2, r0
 800c62e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800c632:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800c636:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800c63a:	f000 fbff 	bl	800ce3c <run_xrce_session>
 800c63e:	2800      	cmp	r0, #0
 800c640:	d04e      	beq.n	800c6e0 <rmw_create_subscription+0x1a0>
 800c642:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c646:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c64a:	4629      	mov	r1, r5
 800c64c:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 800c650:	1c42      	adds	r2, r0, #1
 800c652:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 800c656:	f001 f839 	bl	800d6cc <uxr_object_id>
 800c65a:	ae08      	add	r6, sp, #32
 800c65c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c660:	69fb      	ldr	r3, [r7, #28]
 800c662:	6178      	str	r0, [r7, #20]
 800c664:	4641      	mov	r1, r8
 800c666:	4630      	mov	r0, r6
 800c668:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 800c66c:	9305      	str	r3, [sp, #20]
 800c66e:	f000 fc01 	bl	800ce74 <convert_qos_profile>
 800c672:	9503      	str	r5, [sp, #12]
 800c674:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c678:	9b05      	ldr	r3, [sp, #20]
 800c67a:	9001      	str	r0, [sp, #4]
 800c67c:	f8ad 1008 	strh.w	r1, [sp, #8]
 800c680:	691b      	ldr	r3, [r3, #16]
 800c682:	9300      	str	r3, [sp, #0]
 800c684:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 800c688:	f8db 1000 	ldr.w	r1, [fp]
 800c68c:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 800c690:	f000 ffa4 	bl	800d5dc <uxr_buffer_create_datareader_bin>
 800c694:	4602      	mov	r2, r0
 800c696:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800c69a:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800c69e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800c6a2:	f000 fbcb 	bl	800ce3c <run_xrce_session>
 800c6a6:	b1d8      	cbz	r0, 800c6e0 <rmw_create_subscription+0x1a0>
 800c6a8:	f898 3008 	ldrb.w	r3, [r8, #8]
 800c6ac:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800c6b0:	2b02      	cmp	r3, #2
 800c6b2:	bf0c      	ite	eq
 800c6b4:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 800c6b8:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 800c6bc:	9307      	str	r3, [sp, #28]
 800c6be:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 800c6c8:	ab0a      	add	r3, sp, #40	@ 0x28
 800c6ca:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800c6ce:	9300      	str	r3, [sp, #0]
 800c6d0:	697a      	ldr	r2, [r7, #20]
 800c6d2:	9b07      	ldr	r3, [sp, #28]
 800c6d4:	6809      	ldr	r1, [r1, #0]
 800c6d6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c6da:	f001 f827 	bl	800d72c <uxr_buffer_request_data>
 800c6de:	e007      	b.n	800c6f0 <rmw_create_subscription+0x1b0>
 800c6e0:	69f8      	ldr	r0, [r7, #28]
 800c6e2:	b108      	cbz	r0, 800c6e8 <rmw_create_subscription+0x1a8>
 800c6e4:	f000 faa8 	bl	800cc38 <rmw_uxrce_fini_topic_memory>
 800c6e8:	4620      	mov	r0, r4
 800c6ea:	f000 fa63 	bl	800cbb4 <rmw_uxrce_fini_subscription_memory>
 800c6ee:	2400      	movs	r4, #0
 800c6f0:	4620      	mov	r0, r4
 800c6f2:	b00d      	add	sp, #52	@ 0x34
 800c6f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6f8:	200111fc 	.word	0x200111fc
 800c6fc:	0801a54c 	.word	0x0801a54c
 800c700:	0801a518 	.word	0x0801a518

0800c704 <rmw_subscription_get_actual_qos>:
 800c704:	b150      	cbz	r0, 800c71c <rmw_subscription_get_actual_qos+0x18>
 800c706:	b508      	push	{r3, lr}
 800c708:	460b      	mov	r3, r1
 800c70a:	b149      	cbz	r1, 800c720 <rmw_subscription_get_actual_qos+0x1c>
 800c70c:	6841      	ldr	r1, [r0, #4]
 800c70e:	2250      	movs	r2, #80	@ 0x50
 800c710:	3128      	adds	r1, #40	@ 0x28
 800c712:	4618      	mov	r0, r3
 800c714:	f00b fc7b 	bl	801800e <memcpy>
 800c718:	2000      	movs	r0, #0
 800c71a:	bd08      	pop	{r3, pc}
 800c71c:	200b      	movs	r0, #11
 800c71e:	4770      	bx	lr
 800c720:	200b      	movs	r0, #11
 800c722:	bd08      	pop	{r3, pc}

0800c724 <rmw_destroy_subscription>:
 800c724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c726:	b128      	cbz	r0, 800c734 <rmw_destroy_subscription+0x10>
 800c728:	4604      	mov	r4, r0
 800c72a:	6800      	ldr	r0, [r0, #0]
 800c72c:	460d      	mov	r5, r1
 800c72e:	f000 fc05 	bl	800cf3c <is_uxrce_rmw_identifier_valid>
 800c732:	b910      	cbnz	r0, 800c73a <rmw_destroy_subscription+0x16>
 800c734:	2401      	movs	r4, #1
 800c736:	4620      	mov	r0, r4
 800c738:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c73a:	6863      	ldr	r3, [r4, #4]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d0f9      	beq.n	800c734 <rmw_destroy_subscription+0x10>
 800c740:	2d00      	cmp	r5, #0
 800c742:	d0f7      	beq.n	800c734 <rmw_destroy_subscription+0x10>
 800c744:	6828      	ldr	r0, [r5, #0]
 800c746:	f000 fbf9 	bl	800cf3c <is_uxrce_rmw_identifier_valid>
 800c74a:	2800      	cmp	r0, #0
 800c74c:	d0f2      	beq.n	800c734 <rmw_destroy_subscription+0x10>
 800c74e:	686c      	ldr	r4, [r5, #4]
 800c750:	2c00      	cmp	r4, #0
 800c752:	d0ef      	beq.n	800c734 <rmw_destroy_subscription+0x10>
 800c754:	6a26      	ldr	r6, [r4, #32]
 800c756:	6962      	ldr	r2, [r4, #20]
 800c758:	6930      	ldr	r0, [r6, #16]
 800c75a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800c75e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c762:	6819      	ldr	r1, [r3, #0]
 800c764:	f001 f81c 	bl	800d7a0 <uxr_buffer_cancel_data>
 800c768:	4602      	mov	r2, r0
 800c76a:	6930      	ldr	r0, [r6, #16]
 800c76c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800c770:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800c774:	f000 fb62 	bl	800ce3c <run_xrce_session>
 800c778:	69e0      	ldr	r0, [r4, #28]
 800c77a:	f006 ff19 	bl	80135b0 <destroy_topic>
 800c77e:	6a23      	ldr	r3, [r4, #32]
 800c780:	6962      	ldr	r2, [r4, #20]
 800c782:	6918      	ldr	r0, [r3, #16]
 800c784:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800c788:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c78c:	6819      	ldr	r1, [r3, #0]
 800c78e:	f000 fd9b 	bl	800d2c8 <uxr_buffer_delete_entity>
 800c792:	6a23      	ldr	r3, [r4, #32]
 800c794:	6922      	ldr	r2, [r4, #16]
 800c796:	691b      	ldr	r3, [r3, #16]
 800c798:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800c79c:	4604      	mov	r4, r0
 800c79e:	6809      	ldr	r1, [r1, #0]
 800c7a0:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800c7a4:	f000 fd90 	bl	800d2c8 <uxr_buffer_delete_entity>
 800c7a8:	6937      	ldr	r7, [r6, #16]
 800c7aa:	4622      	mov	r2, r4
 800c7ac:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 800c7b0:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 800c7b4:	4604      	mov	r4, r0
 800c7b6:	4638      	mov	r0, r7
 800c7b8:	f000 fb40 	bl	800ce3c <run_xrce_session>
 800c7bc:	6936      	ldr	r6, [r6, #16]
 800c7be:	4622      	mov	r2, r4
 800c7c0:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800c7c4:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800c7c8:	4604      	mov	r4, r0
 800c7ca:	4630      	mov	r0, r6
 800c7cc:	f000 fb36 	bl	800ce3c <run_xrce_session>
 800c7d0:	b12c      	cbz	r4, 800c7de <rmw_destroy_subscription+0xba>
 800c7d2:	b120      	cbz	r0, 800c7de <rmw_destroy_subscription+0xba>
 800c7d4:	2400      	movs	r4, #0
 800c7d6:	4628      	mov	r0, r5
 800c7d8:	f000 f9ec 	bl	800cbb4 <rmw_uxrce_fini_subscription_memory>
 800c7dc:	e7ab      	b.n	800c736 <rmw_destroy_subscription+0x12>
 800c7de:	2402      	movs	r4, #2
 800c7e0:	e7f9      	b.n	800c7d6 <rmw_destroy_subscription+0xb2>
 800c7e2:	bf00      	nop

0800c7e4 <rmw_take_with_info>:
 800c7e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c7e6:	4604      	mov	r4, r0
 800c7e8:	6800      	ldr	r0, [r0, #0]
 800c7ea:	b089      	sub	sp, #36	@ 0x24
 800c7ec:	460f      	mov	r7, r1
 800c7ee:	4615      	mov	r5, r2
 800c7f0:	b128      	cbz	r0, 800c7fe <rmw_take_with_info+0x1a>
 800c7f2:	4b24      	ldr	r3, [pc, #144]	@ (800c884 <rmw_take_with_info+0xa0>)
 800c7f4:	6819      	ldr	r1, [r3, #0]
 800c7f6:	f7f3 fd0b 	bl	8000210 <strcmp>
 800c7fa:	2800      	cmp	r0, #0
 800c7fc:	d13e      	bne.n	800c87c <rmw_take_with_info+0x98>
 800c7fe:	b305      	cbz	r5, 800c842 <rmw_take_with_info+0x5e>
 800c800:	6864      	ldr	r4, [r4, #4]
 800c802:	2300      	movs	r3, #0
 800c804:	702b      	strb	r3, [r5, #0]
 800c806:	f000 fa9b 	bl	800cd40 <rmw_uxrce_clean_expired_static_input_buffer>
 800c80a:	4620      	mov	r0, r4
 800c80c:	f000 fa70 	bl	800ccf0 <rmw_uxrce_find_static_input_buffer_by_owner>
 800c810:	4606      	mov	r6, r0
 800c812:	b1f0      	cbz	r0, 800c852 <rmw_take_with_info+0x6e>
 800c814:	6881      	ldr	r1, [r0, #8]
 800c816:	4668      	mov	r0, sp
 800c818:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 800c81c:	3110      	adds	r1, #16
 800c81e:	f000 fc8b 	bl	800d138 <ucdr_init_buffer>
 800c822:	69a3      	ldr	r3, [r4, #24]
 800c824:	4639      	mov	r1, r7
 800c826:	68db      	ldr	r3, [r3, #12]
 800c828:	4668      	mov	r0, sp
 800c82a:	4798      	blx	r3
 800c82c:	4631      	mov	r1, r6
 800c82e:	4604      	mov	r4, r0
 800c830:	4815      	ldr	r0, [pc, #84]	@ (800c888 <rmw_take_with_info+0xa4>)
 800c832:	f006 fb87 	bl	8012f44 <put_memory>
 800c836:	702c      	strb	r4, [r5, #0]
 800c838:	f084 0001 	eor.w	r0, r4, #1
 800c83c:	b2c0      	uxtb	r0, r0
 800c83e:	b009      	add	sp, #36	@ 0x24
 800c840:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c842:	6864      	ldr	r4, [r4, #4]
 800c844:	f000 fa7c 	bl	800cd40 <rmw_uxrce_clean_expired_static_input_buffer>
 800c848:	4620      	mov	r0, r4
 800c84a:	f000 fa51 	bl	800ccf0 <rmw_uxrce_find_static_input_buffer_by_owner>
 800c84e:	4605      	mov	r5, r0
 800c850:	b910      	cbnz	r0, 800c858 <rmw_take_with_info+0x74>
 800c852:	2001      	movs	r0, #1
 800c854:	b009      	add	sp, #36	@ 0x24
 800c856:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c858:	68a9      	ldr	r1, [r5, #8]
 800c85a:	4668      	mov	r0, sp
 800c85c:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 800c860:	3110      	adds	r1, #16
 800c862:	f000 fc69 	bl	800d138 <ucdr_init_buffer>
 800c866:	69a3      	ldr	r3, [r4, #24]
 800c868:	4639      	mov	r1, r7
 800c86a:	68db      	ldr	r3, [r3, #12]
 800c86c:	4668      	mov	r0, sp
 800c86e:	4798      	blx	r3
 800c870:	4629      	mov	r1, r5
 800c872:	4604      	mov	r4, r0
 800c874:	4804      	ldr	r0, [pc, #16]	@ (800c888 <rmw_take_with_info+0xa4>)
 800c876:	f006 fb65 	bl	8012f44 <put_memory>
 800c87a:	e7dd      	b.n	800c838 <rmw_take_with_info+0x54>
 800c87c:	200c      	movs	r0, #12
 800c87e:	b009      	add	sp, #36	@ 0x24
 800c880:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c882:	bf00      	nop
 800c884:	0801a8ac 	.word	0x0801a8ac
 800c888:	200111ec 	.word	0x200111ec

0800c88c <rmw_uxrce_init_service_memory>:
 800c88c:	b1e2      	cbz	r2, 800c8c8 <rmw_uxrce_init_service_memory+0x3c>
 800c88e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c892:	7b05      	ldrb	r5, [r0, #12]
 800c894:	4606      	mov	r6, r0
 800c896:	b9ad      	cbnz	r5, 800c8c4 <rmw_uxrce_init_service_memory+0x38>
 800c898:	23c8      	movs	r3, #200	@ 0xc8
 800c89a:	e9c0 5500 	strd	r5, r5, [r0]
 800c89e:	6083      	str	r3, [r0, #8]
 800c8a0:	f240 1301 	movw	r3, #257	@ 0x101
 800c8a4:	4617      	mov	r7, r2
 800c8a6:	8183      	strh	r3, [r0, #12]
 800c8a8:	460c      	mov	r4, r1
 800c8aa:	46a8      	mov	r8, r5
 800c8ac:	4621      	mov	r1, r4
 800c8ae:	4630      	mov	r0, r6
 800c8b0:	3501      	adds	r5, #1
 800c8b2:	f006 fb47 	bl	8012f44 <put_memory>
 800c8b6:	42af      	cmp	r7, r5
 800c8b8:	60a4      	str	r4, [r4, #8]
 800c8ba:	f884 800c 	strb.w	r8, [r4, #12]
 800c8be:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800c8c2:	d1f3      	bne.n	800c8ac <rmw_uxrce_init_service_memory+0x20>
 800c8c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8c8:	4770      	bx	lr
 800c8ca:	bf00      	nop

0800c8cc <rmw_uxrce_init_client_memory>:
 800c8cc:	b1e2      	cbz	r2, 800c908 <rmw_uxrce_init_client_memory+0x3c>
 800c8ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8d2:	7b05      	ldrb	r5, [r0, #12]
 800c8d4:	4606      	mov	r6, r0
 800c8d6:	b9ad      	cbnz	r5, 800c904 <rmw_uxrce_init_client_memory+0x38>
 800c8d8:	23c8      	movs	r3, #200	@ 0xc8
 800c8da:	e9c0 5500 	strd	r5, r5, [r0]
 800c8de:	6083      	str	r3, [r0, #8]
 800c8e0:	f240 1301 	movw	r3, #257	@ 0x101
 800c8e4:	4617      	mov	r7, r2
 800c8e6:	8183      	strh	r3, [r0, #12]
 800c8e8:	460c      	mov	r4, r1
 800c8ea:	46a8      	mov	r8, r5
 800c8ec:	4621      	mov	r1, r4
 800c8ee:	4630      	mov	r0, r6
 800c8f0:	3501      	adds	r5, #1
 800c8f2:	f006 fb27 	bl	8012f44 <put_memory>
 800c8f6:	42af      	cmp	r7, r5
 800c8f8:	60a4      	str	r4, [r4, #8]
 800c8fa:	f884 800c 	strb.w	r8, [r4, #12]
 800c8fe:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800c902:	d1f3      	bne.n	800c8ec <rmw_uxrce_init_client_memory+0x20>
 800c904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c908:	4770      	bx	lr
 800c90a:	bf00      	nop

0800c90c <rmw_uxrce_init_publisher_memory>:
 800c90c:	b1e2      	cbz	r2, 800c948 <rmw_uxrce_init_publisher_memory+0x3c>
 800c90e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c912:	7b05      	ldrb	r5, [r0, #12]
 800c914:	4606      	mov	r6, r0
 800c916:	b9ad      	cbnz	r5, 800c944 <rmw_uxrce_init_publisher_memory+0x38>
 800c918:	23d8      	movs	r3, #216	@ 0xd8
 800c91a:	e9c0 5500 	strd	r5, r5, [r0]
 800c91e:	6083      	str	r3, [r0, #8]
 800c920:	f240 1301 	movw	r3, #257	@ 0x101
 800c924:	4617      	mov	r7, r2
 800c926:	8183      	strh	r3, [r0, #12]
 800c928:	460c      	mov	r4, r1
 800c92a:	46a8      	mov	r8, r5
 800c92c:	4621      	mov	r1, r4
 800c92e:	4630      	mov	r0, r6
 800c930:	3501      	adds	r5, #1
 800c932:	f006 fb07 	bl	8012f44 <put_memory>
 800c936:	42af      	cmp	r7, r5
 800c938:	60a4      	str	r4, [r4, #8]
 800c93a:	f884 800c 	strb.w	r8, [r4, #12]
 800c93e:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800c942:	d1f3      	bne.n	800c92c <rmw_uxrce_init_publisher_memory+0x20>
 800c944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c948:	4770      	bx	lr
 800c94a:	bf00      	nop

0800c94c <rmw_uxrce_init_subscription_memory>:
 800c94c:	b1e2      	cbz	r2, 800c988 <rmw_uxrce_init_subscription_memory+0x3c>
 800c94e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c952:	7b05      	ldrb	r5, [r0, #12]
 800c954:	4606      	mov	r6, r0
 800c956:	b9ad      	cbnz	r5, 800c984 <rmw_uxrce_init_subscription_memory+0x38>
 800c958:	23d8      	movs	r3, #216	@ 0xd8
 800c95a:	e9c0 5500 	strd	r5, r5, [r0]
 800c95e:	6083      	str	r3, [r0, #8]
 800c960:	f240 1301 	movw	r3, #257	@ 0x101
 800c964:	4617      	mov	r7, r2
 800c966:	8183      	strh	r3, [r0, #12]
 800c968:	460c      	mov	r4, r1
 800c96a:	46a8      	mov	r8, r5
 800c96c:	4621      	mov	r1, r4
 800c96e:	4630      	mov	r0, r6
 800c970:	3501      	adds	r5, #1
 800c972:	f006 fae7 	bl	8012f44 <put_memory>
 800c976:	42af      	cmp	r7, r5
 800c978:	60a4      	str	r4, [r4, #8]
 800c97a:	f884 800c 	strb.w	r8, [r4, #12]
 800c97e:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800c982:	d1f3      	bne.n	800c96c <rmw_uxrce_init_subscription_memory+0x20>
 800c984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c988:	4770      	bx	lr
 800c98a:	bf00      	nop

0800c98c <rmw_uxrce_init_node_memory>:
 800c98c:	b1e2      	cbz	r2, 800c9c8 <rmw_uxrce_init_node_memory+0x3c>
 800c98e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c992:	7b05      	ldrb	r5, [r0, #12]
 800c994:	4606      	mov	r6, r0
 800c996:	b9ad      	cbnz	r5, 800c9c4 <rmw_uxrce_init_node_memory+0x38>
 800c998:	23a4      	movs	r3, #164	@ 0xa4
 800c99a:	e9c0 5500 	strd	r5, r5, [r0]
 800c99e:	6083      	str	r3, [r0, #8]
 800c9a0:	f240 1301 	movw	r3, #257	@ 0x101
 800c9a4:	4617      	mov	r7, r2
 800c9a6:	8183      	strh	r3, [r0, #12]
 800c9a8:	460c      	mov	r4, r1
 800c9aa:	46a8      	mov	r8, r5
 800c9ac:	4621      	mov	r1, r4
 800c9ae:	4630      	mov	r0, r6
 800c9b0:	3501      	adds	r5, #1
 800c9b2:	f006 fac7 	bl	8012f44 <put_memory>
 800c9b6:	42af      	cmp	r7, r5
 800c9b8:	60a4      	str	r4, [r4, #8]
 800c9ba:	f884 800c 	strb.w	r8, [r4, #12]
 800c9be:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800c9c2:	d1f3      	bne.n	800c9ac <rmw_uxrce_init_node_memory+0x20>
 800c9c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9c8:	4770      	bx	lr
 800c9ca:	bf00      	nop

0800c9cc <rmw_uxrce_init_session_memory>:
 800c9cc:	b1ea      	cbz	r2, 800ca0a <rmw_uxrce_init_session_memory+0x3e>
 800c9ce:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c9d2:	7b05      	ldrb	r5, [r0, #12]
 800c9d4:	4606      	mov	r6, r0
 800c9d6:	b9b5      	cbnz	r5, 800ca06 <rmw_uxrce_init_session_memory+0x3a>
 800c9d8:	e9c0 5500 	strd	r5, r5, [r0]
 800c9dc:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800c9e0:	f240 1301 	movw	r3, #257	@ 0x101
 800c9e4:	4617      	mov	r7, r2
 800c9e6:	f8c0 8008 	str.w	r8, [r0, #8]
 800c9ea:	460c      	mov	r4, r1
 800c9ec:	8183      	strh	r3, [r0, #12]
 800c9ee:	46a9      	mov	r9, r5
 800c9f0:	4621      	mov	r1, r4
 800c9f2:	4630      	mov	r0, r6
 800c9f4:	3501      	adds	r5, #1
 800c9f6:	f006 faa5 	bl	8012f44 <put_memory>
 800c9fa:	42af      	cmp	r7, r5
 800c9fc:	60a4      	str	r4, [r4, #8]
 800c9fe:	f884 900c 	strb.w	r9, [r4, #12]
 800ca02:	4444      	add	r4, r8
 800ca04:	d1f4      	bne.n	800c9f0 <rmw_uxrce_init_session_memory+0x24>
 800ca06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca0a:	4770      	bx	lr

0800ca0c <rmw_uxrce_init_topic_memory>:
 800ca0c:	b1e2      	cbz	r2, 800ca48 <rmw_uxrce_init_topic_memory+0x3c>
 800ca0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca12:	7b05      	ldrb	r5, [r0, #12]
 800ca14:	4606      	mov	r6, r0
 800ca16:	b9ad      	cbnz	r5, 800ca44 <rmw_uxrce_init_topic_memory+0x38>
 800ca18:	231c      	movs	r3, #28
 800ca1a:	e9c0 5500 	strd	r5, r5, [r0]
 800ca1e:	6083      	str	r3, [r0, #8]
 800ca20:	f240 1301 	movw	r3, #257	@ 0x101
 800ca24:	4617      	mov	r7, r2
 800ca26:	8183      	strh	r3, [r0, #12]
 800ca28:	460c      	mov	r4, r1
 800ca2a:	46a8      	mov	r8, r5
 800ca2c:	4621      	mov	r1, r4
 800ca2e:	4630      	mov	r0, r6
 800ca30:	3501      	adds	r5, #1
 800ca32:	f006 fa87 	bl	8012f44 <put_memory>
 800ca36:	42af      	cmp	r7, r5
 800ca38:	60a4      	str	r4, [r4, #8]
 800ca3a:	f884 800c 	strb.w	r8, [r4, #12]
 800ca3e:	f104 041c 	add.w	r4, r4, #28
 800ca42:	d1f3      	bne.n	800ca2c <rmw_uxrce_init_topic_memory+0x20>
 800ca44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca48:	4770      	bx	lr
 800ca4a:	bf00      	nop

0800ca4c <rmw_uxrce_init_static_input_buffer_memory>:
 800ca4c:	b1ea      	cbz	r2, 800ca8a <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800ca4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca52:	7b05      	ldrb	r5, [r0, #12]
 800ca54:	4606      	mov	r6, r0
 800ca56:	b9b5      	cbnz	r5, 800ca86 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800ca58:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800ca5c:	e9c0 5500 	strd	r5, r5, [r0]
 800ca60:	6083      	str	r3, [r0, #8]
 800ca62:	f240 1301 	movw	r3, #257	@ 0x101
 800ca66:	4617      	mov	r7, r2
 800ca68:	8183      	strh	r3, [r0, #12]
 800ca6a:	460c      	mov	r4, r1
 800ca6c:	46a8      	mov	r8, r5
 800ca6e:	4621      	mov	r1, r4
 800ca70:	4630      	mov	r0, r6
 800ca72:	3501      	adds	r5, #1
 800ca74:	f006 fa66 	bl	8012f44 <put_memory>
 800ca78:	42af      	cmp	r7, r5
 800ca7a:	60a4      	str	r4, [r4, #8]
 800ca7c:	f884 800c 	strb.w	r8, [r4, #12]
 800ca80:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800ca84:	d1f3      	bne.n	800ca6e <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800ca86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca8a:	4770      	bx	lr

0800ca8c <rmw_uxrce_init_init_options_impl_memory>:
 800ca8c:	b1e2      	cbz	r2, 800cac8 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800ca8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca92:	7b05      	ldrb	r5, [r0, #12]
 800ca94:	4606      	mov	r6, r0
 800ca96:	b9ad      	cbnz	r5, 800cac4 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800ca98:	232c      	movs	r3, #44	@ 0x2c
 800ca9a:	e9c0 5500 	strd	r5, r5, [r0]
 800ca9e:	6083      	str	r3, [r0, #8]
 800caa0:	f240 1301 	movw	r3, #257	@ 0x101
 800caa4:	4617      	mov	r7, r2
 800caa6:	8183      	strh	r3, [r0, #12]
 800caa8:	460c      	mov	r4, r1
 800caaa:	46a8      	mov	r8, r5
 800caac:	4621      	mov	r1, r4
 800caae:	4630      	mov	r0, r6
 800cab0:	3501      	adds	r5, #1
 800cab2:	f006 fa47 	bl	8012f44 <put_memory>
 800cab6:	42af      	cmp	r7, r5
 800cab8:	60a4      	str	r4, [r4, #8]
 800caba:	f884 800c 	strb.w	r8, [r4, #12]
 800cabe:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800cac2:	d1f3      	bne.n	800caac <rmw_uxrce_init_init_options_impl_memory+0x20>
 800cac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cac8:	4770      	bx	lr
 800caca:	bf00      	nop

0800cacc <rmw_uxrce_init_wait_set_memory>:
 800cacc:	b1e2      	cbz	r2, 800cb08 <rmw_uxrce_init_wait_set_memory+0x3c>
 800cace:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cad2:	7b05      	ldrb	r5, [r0, #12]
 800cad4:	4606      	mov	r6, r0
 800cad6:	b9ad      	cbnz	r5, 800cb04 <rmw_uxrce_init_wait_set_memory+0x38>
 800cad8:	231c      	movs	r3, #28
 800cada:	e9c0 5500 	strd	r5, r5, [r0]
 800cade:	6083      	str	r3, [r0, #8]
 800cae0:	f240 1301 	movw	r3, #257	@ 0x101
 800cae4:	4617      	mov	r7, r2
 800cae6:	8183      	strh	r3, [r0, #12]
 800cae8:	460c      	mov	r4, r1
 800caea:	46a8      	mov	r8, r5
 800caec:	4621      	mov	r1, r4
 800caee:	4630      	mov	r0, r6
 800caf0:	3501      	adds	r5, #1
 800caf2:	f006 fa27 	bl	8012f44 <put_memory>
 800caf6:	42af      	cmp	r7, r5
 800caf8:	60a4      	str	r4, [r4, #8]
 800cafa:	f884 800c 	strb.w	r8, [r4, #12]
 800cafe:	f104 041c 	add.w	r4, r4, #28
 800cb02:	d1f3      	bne.n	800caec <rmw_uxrce_init_wait_set_memory+0x20>
 800cb04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb08:	4770      	bx	lr
 800cb0a:	bf00      	nop

0800cb0c <rmw_uxrce_init_guard_condition_memory>:
 800cb0c:	b1e2      	cbz	r2, 800cb48 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800cb0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb12:	7b05      	ldrb	r5, [r0, #12]
 800cb14:	4606      	mov	r6, r0
 800cb16:	b9ad      	cbnz	r5, 800cb44 <rmw_uxrce_init_guard_condition_memory+0x38>
 800cb18:	2320      	movs	r3, #32
 800cb1a:	e9c0 5500 	strd	r5, r5, [r0]
 800cb1e:	6083      	str	r3, [r0, #8]
 800cb20:	f240 1301 	movw	r3, #257	@ 0x101
 800cb24:	4617      	mov	r7, r2
 800cb26:	8183      	strh	r3, [r0, #12]
 800cb28:	460c      	mov	r4, r1
 800cb2a:	46a8      	mov	r8, r5
 800cb2c:	4621      	mov	r1, r4
 800cb2e:	4630      	mov	r0, r6
 800cb30:	3501      	adds	r5, #1
 800cb32:	f006 fa07 	bl	8012f44 <put_memory>
 800cb36:	42af      	cmp	r7, r5
 800cb38:	60a4      	str	r4, [r4, #8]
 800cb3a:	f884 800c 	strb.w	r8, [r4, #12]
 800cb3e:	f104 0420 	add.w	r4, r4, #32
 800cb42:	d1f3      	bne.n	800cb2c <rmw_uxrce_init_guard_condition_memory+0x20>
 800cb44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb48:	4770      	bx	lr
 800cb4a:	bf00      	nop

0800cb4c <rmw_uxrce_fini_session_memory>:
 800cb4c:	4601      	mov	r1, r0
 800cb4e:	4801      	ldr	r0, [pc, #4]	@ (800cb54 <rmw_uxrce_fini_session_memory+0x8>)
 800cb50:	f006 b9f8 	b.w	8012f44 <put_memory>
 800cb54:	200111dc 	.word	0x200111dc

0800cb58 <rmw_uxrce_fini_node_memory>:
 800cb58:	b538      	push	{r3, r4, r5, lr}
 800cb5a:	4604      	mov	r4, r0
 800cb5c:	6800      	ldr	r0, [r0, #0]
 800cb5e:	b128      	cbz	r0, 800cb6c <rmw_uxrce_fini_node_memory+0x14>
 800cb60:	4b07      	ldr	r3, [pc, #28]	@ (800cb80 <rmw_uxrce_fini_node_memory+0x28>)
 800cb62:	6819      	ldr	r1, [r3, #0]
 800cb64:	f7f3 fb54 	bl	8000210 <strcmp>
 800cb68:	b940      	cbnz	r0, 800cb7c <rmw_uxrce_fini_node_memory+0x24>
 800cb6a:	6020      	str	r0, [r4, #0]
 800cb6c:	6861      	ldr	r1, [r4, #4]
 800cb6e:	b129      	cbz	r1, 800cb7c <rmw_uxrce_fini_node_memory+0x24>
 800cb70:	2500      	movs	r5, #0
 800cb72:	4804      	ldr	r0, [pc, #16]	@ (800cb84 <rmw_uxrce_fini_node_memory+0x2c>)
 800cb74:	610d      	str	r5, [r1, #16]
 800cb76:	f006 f9e5 	bl	8012f44 <put_memory>
 800cb7a:	6065      	str	r5, [r4, #4]
 800cb7c:	bd38      	pop	{r3, r4, r5, pc}
 800cb7e:	bf00      	nop
 800cb80:	0801a8ac 	.word	0x0801a8ac
 800cb84:	200111ac 	.word	0x200111ac

0800cb88 <rmw_uxrce_fini_publisher_memory>:
 800cb88:	b510      	push	{r4, lr}
 800cb8a:	4604      	mov	r4, r0
 800cb8c:	6800      	ldr	r0, [r0, #0]
 800cb8e:	b128      	cbz	r0, 800cb9c <rmw_uxrce_fini_publisher_memory+0x14>
 800cb90:	4b06      	ldr	r3, [pc, #24]	@ (800cbac <rmw_uxrce_fini_publisher_memory+0x24>)
 800cb92:	6819      	ldr	r1, [r3, #0]
 800cb94:	f7f3 fb3c 	bl	8000210 <strcmp>
 800cb98:	b938      	cbnz	r0, 800cbaa <rmw_uxrce_fini_publisher_memory+0x22>
 800cb9a:	6020      	str	r0, [r4, #0]
 800cb9c:	6861      	ldr	r1, [r4, #4]
 800cb9e:	b121      	cbz	r1, 800cbaa <rmw_uxrce_fini_publisher_memory+0x22>
 800cba0:	4803      	ldr	r0, [pc, #12]	@ (800cbb0 <rmw_uxrce_fini_publisher_memory+0x28>)
 800cba2:	f006 f9cf 	bl	8012f44 <put_memory>
 800cba6:	2300      	movs	r3, #0
 800cba8:	6063      	str	r3, [r4, #4]
 800cbaa:	bd10      	pop	{r4, pc}
 800cbac:	0801a8ac 	.word	0x0801a8ac
 800cbb0:	200111bc 	.word	0x200111bc

0800cbb4 <rmw_uxrce_fini_subscription_memory>:
 800cbb4:	b510      	push	{r4, lr}
 800cbb6:	4604      	mov	r4, r0
 800cbb8:	6800      	ldr	r0, [r0, #0]
 800cbba:	b128      	cbz	r0, 800cbc8 <rmw_uxrce_fini_subscription_memory+0x14>
 800cbbc:	4b06      	ldr	r3, [pc, #24]	@ (800cbd8 <rmw_uxrce_fini_subscription_memory+0x24>)
 800cbbe:	6819      	ldr	r1, [r3, #0]
 800cbc0:	f7f3 fb26 	bl	8000210 <strcmp>
 800cbc4:	b938      	cbnz	r0, 800cbd6 <rmw_uxrce_fini_subscription_memory+0x22>
 800cbc6:	6020      	str	r0, [r4, #0]
 800cbc8:	6861      	ldr	r1, [r4, #4]
 800cbca:	b121      	cbz	r1, 800cbd6 <rmw_uxrce_fini_subscription_memory+0x22>
 800cbcc:	4803      	ldr	r0, [pc, #12]	@ (800cbdc <rmw_uxrce_fini_subscription_memory+0x28>)
 800cbce:	f006 f9b9 	bl	8012f44 <put_memory>
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	6063      	str	r3, [r4, #4]
 800cbd6:	bd10      	pop	{r4, pc}
 800cbd8:	0801a8ac 	.word	0x0801a8ac
 800cbdc:	200111fc 	.word	0x200111fc

0800cbe0 <rmw_uxrce_fini_service_memory>:
 800cbe0:	b510      	push	{r4, lr}
 800cbe2:	4604      	mov	r4, r0
 800cbe4:	6800      	ldr	r0, [r0, #0]
 800cbe6:	b128      	cbz	r0, 800cbf4 <rmw_uxrce_fini_service_memory+0x14>
 800cbe8:	4b06      	ldr	r3, [pc, #24]	@ (800cc04 <rmw_uxrce_fini_service_memory+0x24>)
 800cbea:	6819      	ldr	r1, [r3, #0]
 800cbec:	f7f3 fb10 	bl	8000210 <strcmp>
 800cbf0:	b938      	cbnz	r0, 800cc02 <rmw_uxrce_fini_service_memory+0x22>
 800cbf2:	6020      	str	r0, [r4, #0]
 800cbf4:	6861      	ldr	r1, [r4, #4]
 800cbf6:	b121      	cbz	r1, 800cc02 <rmw_uxrce_fini_service_memory+0x22>
 800cbf8:	4803      	ldr	r0, [pc, #12]	@ (800cc08 <rmw_uxrce_fini_service_memory+0x28>)
 800cbfa:	f006 f9a3 	bl	8012f44 <put_memory>
 800cbfe:	2300      	movs	r3, #0
 800cc00:	6063      	str	r3, [r4, #4]
 800cc02:	bd10      	pop	{r4, pc}
 800cc04:	0801a8ac 	.word	0x0801a8ac
 800cc08:	200111cc 	.word	0x200111cc

0800cc0c <rmw_uxrce_fini_client_memory>:
 800cc0c:	b510      	push	{r4, lr}
 800cc0e:	4604      	mov	r4, r0
 800cc10:	6800      	ldr	r0, [r0, #0]
 800cc12:	b128      	cbz	r0, 800cc20 <rmw_uxrce_fini_client_memory+0x14>
 800cc14:	4b06      	ldr	r3, [pc, #24]	@ (800cc30 <rmw_uxrce_fini_client_memory+0x24>)
 800cc16:	6819      	ldr	r1, [r3, #0]
 800cc18:	f7f3 fafa 	bl	8000210 <strcmp>
 800cc1c:	b938      	cbnz	r0, 800cc2e <rmw_uxrce_fini_client_memory+0x22>
 800cc1e:	6020      	str	r0, [r4, #0]
 800cc20:	6861      	ldr	r1, [r4, #4]
 800cc22:	b121      	cbz	r1, 800cc2e <rmw_uxrce_fini_client_memory+0x22>
 800cc24:	4803      	ldr	r0, [pc, #12]	@ (800cc34 <rmw_uxrce_fini_client_memory+0x28>)
 800cc26:	f006 f98d 	bl	8012f44 <put_memory>
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	6063      	str	r3, [r4, #4]
 800cc2e:	bd10      	pop	{r4, pc}
 800cc30:	0801a8ac 	.word	0x0801a8ac
 800cc34:	2000c8dc 	.word	0x2000c8dc

0800cc38 <rmw_uxrce_fini_topic_memory>:
 800cc38:	b510      	push	{r4, lr}
 800cc3a:	4604      	mov	r4, r0
 800cc3c:	4621      	mov	r1, r4
 800cc3e:	4803      	ldr	r0, [pc, #12]	@ (800cc4c <rmw_uxrce_fini_topic_memory+0x14>)
 800cc40:	f006 f980 	bl	8012f44 <put_memory>
 800cc44:	2300      	movs	r3, #0
 800cc46:	61a3      	str	r3, [r4, #24]
 800cc48:	bd10      	pop	{r4, pc}
 800cc4a:	bf00      	nop
 800cc4c:	2001120c 	.word	0x2001120c

0800cc50 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800cc50:	b082      	sub	sp, #8
 800cc52:	b530      	push	{r4, r5, lr}
 800cc54:	4925      	ldr	r1, [pc, #148]	@ (800ccec <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800cc56:	680d      	ldr	r5, [r1, #0]
 800cc58:	ac03      	add	r4, sp, #12
 800cc5a:	e884 000c 	stmia.w	r4, {r2, r3}
 800cc5e:	461c      	mov	r4, r3
 800cc60:	2d00      	cmp	r5, #0
 800cc62:	d041      	beq.n	800cce8 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800cc64:	462b      	mov	r3, r5
 800cc66:	2100      	movs	r1, #0
 800cc68:	689a      	ldr	r2, [r3, #8]
 800cc6a:	685b      	ldr	r3, [r3, #4]
 800cc6c:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800cc70:	4290      	cmp	r0, r2
 800cc72:	bf08      	it	eq
 800cc74:	3101      	addeq	r1, #1
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d1f6      	bne.n	800cc68 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800cc7a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800cc7e:	2b02      	cmp	r3, #2
 800cc80:	d029      	beq.n	800ccd6 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800cc82:	d907      	bls.n	800cc94 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800cc84:	2b03      	cmp	r3, #3
 800cc86:	d005      	beq.n	800cc94 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800cc88:	2100      	movs	r1, #0
 800cc8a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cc8e:	4608      	mov	r0, r1
 800cc90:	b002      	add	sp, #8
 800cc92:	4770      	bx	lr
 800cc94:	b314      	cbz	r4, 800ccdc <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800cc96:	428c      	cmp	r4, r1
 800cc98:	d820      	bhi.n	800ccdc <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800cc9a:	2d00      	cmp	r5, #0
 800cc9c:	d0f4      	beq.n	800cc88 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800cc9e:	2100      	movs	r1, #0
 800cca0:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800cca4:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800cca8:	e002      	b.n	800ccb0 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800ccaa:	686d      	ldr	r5, [r5, #4]
 800ccac:	2d00      	cmp	r5, #0
 800ccae:	d0ec      	beq.n	800cc8a <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800ccb0:	68ab      	ldr	r3, [r5, #8]
 800ccb2:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800ccb6:	4290      	cmp	r0, r2
 800ccb8:	d1f7      	bne.n	800ccaa <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800ccba:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800ccbe:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800ccc2:	4562      	cmp	r2, ip
 800ccc4:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800ccc8:	eb73 0e04 	sbcs.w	lr, r3, r4
 800cccc:	daed      	bge.n	800ccaa <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800ccce:	4694      	mov	ip, r2
 800ccd0:	461c      	mov	r4, r3
 800ccd2:	4629      	mov	r1, r5
 800ccd4:	e7e9      	b.n	800ccaa <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800ccd6:	b10c      	cbz	r4, 800ccdc <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800ccd8:	428c      	cmp	r4, r1
 800ccda:	d9d5      	bls.n	800cc88 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800ccdc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cce0:	4802      	ldr	r0, [pc, #8]	@ (800ccec <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800cce2:	b002      	add	sp, #8
 800cce4:	f006 b91e 	b.w	8012f24 <get_memory>
 800cce8:	4629      	mov	r1, r5
 800ccea:	e7c6      	b.n	800cc7a <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800ccec:	200111ec 	.word	0x200111ec

0800ccf0 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800ccf0:	4b11      	ldr	r3, [pc, #68]	@ (800cd38 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	b530      	push	{r4, r5, lr}
 800ccf6:	b1e3      	cbz	r3, 800cd32 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800ccf8:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 800ccfc:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 800cd00:	2400      	movs	r4, #0
 800cd02:	e001      	b.n	800cd08 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800cd04:	685b      	ldr	r3, [r3, #4]
 800cd06:	b193      	cbz	r3, 800cd2e <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800cd08:	689a      	ldr	r2, [r3, #8]
 800cd0a:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800cd0e:	4288      	cmp	r0, r1
 800cd10:	d1f8      	bne.n	800cd04 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800cd12:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800cd16:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800cd1a:	4571      	cmp	r1, lr
 800cd1c:	eb72 050c 	sbcs.w	r5, r2, ip
 800cd20:	daf0      	bge.n	800cd04 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800cd22:	461c      	mov	r4, r3
 800cd24:	685b      	ldr	r3, [r3, #4]
 800cd26:	468e      	mov	lr, r1
 800cd28:	4694      	mov	ip, r2
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d1ec      	bne.n	800cd08 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800cd2e:	4620      	mov	r0, r4
 800cd30:	bd30      	pop	{r4, r5, pc}
 800cd32:	461c      	mov	r4, r3
 800cd34:	4620      	mov	r0, r4
 800cd36:	bd30      	pop	{r4, r5, pc}
 800cd38:	200111ec 	.word	0x200111ec
 800cd3c:	00000000 	.word	0x00000000

0800cd40 <rmw_uxrce_clean_expired_static_input_buffer>:
 800cd40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd44:	4b3c      	ldr	r3, [pc, #240]	@ (800ce38 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800cd46:	ed2d 8b06 	vpush	{d8-d10}
 800cd4a:	681f      	ldr	r7, [r3, #0]
 800cd4c:	b08d      	sub	sp, #52	@ 0x34
 800cd4e:	f006 ff51 	bl	8013bf4 <rmw_uros_epoch_nanos>
 800cd52:	2f00      	cmp	r7, #0
 800cd54:	d05d      	beq.n	800ce12 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800cd56:	46b8      	mov	r8, r7
 800cd58:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 800ce20 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800cd5c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800cd60:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800cd64:	2b04      	cmp	r3, #4
 800cd66:	ed9f ab30 	vldr	d10, [pc, #192]	@ 800ce28 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800cd6a:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 800ce30 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800cd6e:	4681      	mov	r9, r0
 800cd70:	468a      	mov	sl, r1
 800cd72:	ac04      	add	r4, sp, #16
 800cd74:	d03f      	beq.n	800cdf6 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800cd76:	2b05      	cmp	r3, #5
 800cd78:	d044      	beq.n	800ce04 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800cd7a:	2b03      	cmp	r3, #3
 800cd7c:	d03b      	beq.n	800cdf6 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800cd7e:	ed8d 8b04 	vstr	d8, [sp, #16]
 800cd82:	ed8d ab06 	vstr	d10, [sp, #24]
 800cd86:	ed8d 8b08 	vstr	d8, [sp, #32]
 800cd8a:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800cd8e:	ab08      	add	r3, sp, #32
 800cd90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800cd92:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800cd96:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800cd9a:	f005 ffc9 	bl	8012d30 <rmw_time_equal>
 800cd9e:	b118      	cbz	r0, 800cda8 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800cda0:	ed8d 9b04 	vstr	d9, [sp, #16]
 800cda4:	ed8d 8b06 	vstr	d8, [sp, #24]
 800cda8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800cdac:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 800cdb0:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 800cdb4:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800cdb8:	f006 f80e 	bl	8012dd8 <rmw_time_total_nsec>
 800cdbc:	1830      	adds	r0, r6, r0
 800cdbe:	eb47 0101 	adc.w	r1, r7, r1
 800cdc2:	4548      	cmp	r0, r9
 800cdc4:	eb71 030a 	sbcs.w	r3, r1, sl
 800cdc8:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800cdcc:	db05      	blt.n	800cdda <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800cdce:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800cdd2:	4591      	cmp	r9, r2
 800cdd4:	eb7a 0303 	sbcs.w	r3, sl, r3
 800cdd8:	da03      	bge.n	800cde2 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800cdda:	4817      	ldr	r0, [pc, #92]	@ (800ce38 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800cddc:	4641      	mov	r1, r8
 800cdde:	f006 f8b1 	bl	8012f44 <put_memory>
 800cde2:	f1bb 0f00 	cmp.w	fp, #0
 800cde6:	d014      	beq.n	800ce12 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800cde8:	46d8      	mov	r8, fp
 800cdea:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800cdee:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800cdf2:	2b04      	cmp	r3, #4
 800cdf4:	d1bf      	bne.n	800cd76 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800cdf6:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800cdfa:	3340      	adds	r3, #64	@ 0x40
 800cdfc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800cdfe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ce02:	e7c0      	b.n	800cd86 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800ce04:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800ce08:	3348      	adds	r3, #72	@ 0x48
 800ce0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ce0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ce10:	e7b9      	b.n	800cd86 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800ce12:	b00d      	add	sp, #52	@ 0x34
 800ce14:	ecbd 8b06 	vpop	{d8-d10}
 800ce18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce1c:	f3af 8000 	nop.w
	...
 800ce28:	00000001 	.word	0x00000001
 800ce2c:	00000000 	.word	0x00000000
 800ce30:	0000001e 	.word	0x0000001e
 800ce34:	00000000 	.word	0x00000000
 800ce38:	200111ec 	.word	0x200111ec

0800ce3c <run_xrce_session>:
 800ce3c:	b510      	push	{r4, lr}
 800ce3e:	788c      	ldrb	r4, [r1, #2]
 800ce40:	b086      	sub	sp, #24
 800ce42:	2c01      	cmp	r4, #1
 800ce44:	f8ad 200e 	strh.w	r2, [sp, #14]
 800ce48:	d00c      	beq.n	800ce64 <run_xrce_session+0x28>
 800ce4a:	4619      	mov	r1, r3
 800ce4c:	2301      	movs	r3, #1
 800ce4e:	9300      	str	r3, [sp, #0]
 800ce50:	f10d 020e 	add.w	r2, sp, #14
 800ce54:	f10d 0317 	add.w	r3, sp, #23
 800ce58:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ce5c:	f001 fa9a 	bl	800e394 <uxr_run_session_until_all_status>
 800ce60:	b006      	add	sp, #24
 800ce62:	bd10      	pop	{r4, pc}
 800ce64:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ce68:	f000 feae 	bl	800dbc8 <uxr_flash_output_streams>
 800ce6c:	4620      	mov	r0, r4
 800ce6e:	b006      	add	sp, #24
 800ce70:	bd10      	pop	{r4, pc}
 800ce72:	bf00      	nop

0800ce74 <convert_qos_profile>:
 800ce74:	7a4a      	ldrb	r2, [r1, #9]
 800ce76:	f891 c008 	ldrb.w	ip, [r1, #8]
 800ce7a:	2a02      	cmp	r2, #2
 800ce7c:	bf18      	it	ne
 800ce7e:	2200      	movne	r2, #0
 800ce80:	7002      	strb	r2, [r0, #0]
 800ce82:	780a      	ldrb	r2, [r1, #0]
 800ce84:	8889      	ldrh	r1, [r1, #4]
 800ce86:	8081      	strh	r1, [r0, #4]
 800ce88:	f1ac 0c02 	sub.w	ip, ip, #2
 800ce8c:	f1a2 0202 	sub.w	r2, r2, #2
 800ce90:	fabc fc8c 	clz	ip, ip
 800ce94:	fab2 f282 	clz	r2, r2
 800ce98:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800ce9c:	0952      	lsrs	r2, r2, #5
 800ce9e:	f880 c001 	strb.w	ip, [r0, #1]
 800cea2:	7082      	strb	r2, [r0, #2]
 800cea4:	4770      	bx	lr
 800cea6:	bf00      	nop

0800cea8 <generate_type_name>:
 800cea8:	b530      	push	{r4, r5, lr}
 800ceaa:	2300      	movs	r3, #0
 800ceac:	700b      	strb	r3, [r1, #0]
 800ceae:	6803      	ldr	r3, [r0, #0]
 800ceb0:	b087      	sub	sp, #28
 800ceb2:	4614      	mov	r4, r2
 800ceb4:	b1d3      	cbz	r3, 800ceec <generate_type_name+0x44>
 800ceb6:	4a0f      	ldr	r2, [pc, #60]	@ (800cef4 <generate_type_name+0x4c>)
 800ceb8:	4615      	mov	r5, r2
 800ceba:	9203      	str	r2, [sp, #12]
 800cebc:	9500      	str	r5, [sp, #0]
 800cebe:	6842      	ldr	r2, [r0, #4]
 800cec0:	480d      	ldr	r0, [pc, #52]	@ (800cef8 <generate_type_name+0x50>)
 800cec2:	9001      	str	r0, [sp, #4]
 800cec4:	4608      	mov	r0, r1
 800cec6:	490d      	ldr	r1, [pc, #52]	@ (800cefc <generate_type_name+0x54>)
 800cec8:	9204      	str	r2, [sp, #16]
 800ceca:	9105      	str	r1, [sp, #20]
 800cecc:	9102      	str	r1, [sp, #8]
 800cece:	4a0c      	ldr	r2, [pc, #48]	@ (800cf00 <generate_type_name+0x58>)
 800ced0:	4621      	mov	r1, r4
 800ced2:	f00a fdeb 	bl	8017aac <sniprintf>
 800ced6:	2800      	cmp	r0, #0
 800ced8:	db05      	blt.n	800cee6 <generate_type_name+0x3e>
 800ceda:	4284      	cmp	r4, r0
 800cedc:	bfd4      	ite	le
 800cede:	2000      	movle	r0, #0
 800cee0:	2001      	movgt	r0, #1
 800cee2:	b007      	add	sp, #28
 800cee4:	bd30      	pop	{r4, r5, pc}
 800cee6:	2000      	movs	r0, #0
 800cee8:	b007      	add	sp, #28
 800ceea:	bd30      	pop	{r4, r5, pc}
 800ceec:	4b05      	ldr	r3, [pc, #20]	@ (800cf04 <generate_type_name+0x5c>)
 800ceee:	4a01      	ldr	r2, [pc, #4]	@ (800cef4 <generate_type_name+0x4c>)
 800cef0:	461d      	mov	r5, r3
 800cef2:	e7e2      	b.n	800ceba <generate_type_name+0x12>
 800cef4:	0801a53c 	.word	0x0801a53c
 800cef8:	0801a554 	.word	0x0801a554
 800cefc:	0801a550 	.word	0x0801a550
 800cf00:	0801a540 	.word	0x0801a540
 800cf04:	0801ab48 	.word	0x0801ab48

0800cf08 <generate_topic_name>:
 800cf08:	b510      	push	{r4, lr}
 800cf0a:	b082      	sub	sp, #8
 800cf0c:	4614      	mov	r4, r2
 800cf0e:	9000      	str	r0, [sp, #0]
 800cf10:	4b08      	ldr	r3, [pc, #32]	@ (800cf34 <generate_topic_name+0x2c>)
 800cf12:	4a09      	ldr	r2, [pc, #36]	@ (800cf38 <generate_topic_name+0x30>)
 800cf14:	4608      	mov	r0, r1
 800cf16:	4621      	mov	r1, r4
 800cf18:	f00a fdc8 	bl	8017aac <sniprintf>
 800cf1c:	2800      	cmp	r0, #0
 800cf1e:	db05      	blt.n	800cf2c <generate_topic_name+0x24>
 800cf20:	4284      	cmp	r4, r0
 800cf22:	bfd4      	ite	le
 800cf24:	2000      	movle	r0, #0
 800cf26:	2001      	movgt	r0, #1
 800cf28:	b002      	add	sp, #8
 800cf2a:	bd10      	pop	{r4, pc}
 800cf2c:	2000      	movs	r0, #0
 800cf2e:	b002      	add	sp, #8
 800cf30:	bd10      	pop	{r4, pc}
 800cf32:	bf00      	nop
 800cf34:	0801a558 	.word	0x0801a558
 800cf38:	08019fc4 	.word	0x08019fc4

0800cf3c <is_uxrce_rmw_identifier_valid>:
 800cf3c:	b510      	push	{r4, lr}
 800cf3e:	4604      	mov	r4, r0
 800cf40:	b140      	cbz	r0, 800cf54 <is_uxrce_rmw_identifier_valid+0x18>
 800cf42:	f006 f857 	bl	8012ff4 <rmw_get_implementation_identifier>
 800cf46:	4601      	mov	r1, r0
 800cf48:	4620      	mov	r0, r4
 800cf4a:	f7f3 f961 	bl	8000210 <strcmp>
 800cf4e:	fab0 f080 	clz	r0, r0
 800cf52:	0940      	lsrs	r0, r0, #5
 800cf54:	bd10      	pop	{r4, pc}
 800cf56:	bf00      	nop

0800cf58 <get_message_typesupport_handle>:
 800cf58:	6883      	ldr	r3, [r0, #8]
 800cf5a:	4718      	bx	r3

0800cf5c <get_message_typesupport_handle_function>:
 800cf5c:	b510      	push	{r4, lr}
 800cf5e:	4604      	mov	r4, r0
 800cf60:	6800      	ldr	r0, [r0, #0]
 800cf62:	f7f3 f955 	bl	8000210 <strcmp>
 800cf66:	2800      	cmp	r0, #0
 800cf68:	bf0c      	ite	eq
 800cf6a:	4620      	moveq	r0, r4
 800cf6c:	2000      	movne	r0, #0
 800cf6e:	bd10      	pop	{r4, pc}

0800cf70 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>:
 800cf70:	4b04      	ldr	r3, [pc, #16]	@ (800cf84 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 800cf72:	681a      	ldr	r2, [r3, #0]
 800cf74:	b10a      	cbz	r2, 800cf7a <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0xa>
 800cf76:	4803      	ldr	r0, [pc, #12]	@ (800cf84 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 800cf78:	4770      	bx	lr
 800cf7a:	4a03      	ldr	r2, [pc, #12]	@ (800cf88 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x18>)
 800cf7c:	4801      	ldr	r0, [pc, #4]	@ (800cf84 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 800cf7e:	6812      	ldr	r2, [r2, #0]
 800cf80:	601a      	str	r2, [r3, #0]
 800cf82:	4770      	bx	lr
 800cf84:	20000038 	.word	0x20000038
 800cf88:	200000b4 	.word	0x200000b4

0800cf8c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>:
 800cf8c:	4a02      	ldr	r2, [pc, #8]	@ (800cf98 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0xc>)
 800cf8e:	4b03      	ldr	r3, [pc, #12]	@ (800cf9c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x10>)
 800cf90:	6812      	ldr	r2, [r2, #0]
 800cf92:	601a      	str	r2, [r3, #0]
 800cf94:	4770      	bx	lr
 800cf96:	bf00      	nop
 800cf98:	200000b4 	.word	0x200000b4
 800cf9c:	20000038 	.word	0x20000038

0800cfa0 <std_msgs__msg__String__rosidl_typesupport_introspection_c__String_init_function>:
 800cfa0:	f006 be64 	b.w	8013c6c <std_msgs__msg__String__init>

0800cfa4 <std_msgs__msg__String__rosidl_typesupport_introspection_c__String_fini_function>:
 800cfa4:	f006 be74 	b.w	8013c90 <std_msgs__msg__String__fini>

0800cfa8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String>:
 800cfa8:	4b04      	ldr	r3, [pc, #16]	@ (800cfbc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 800cfaa:	681a      	ldr	r2, [r3, #0]
 800cfac:	b10a      	cbz	r2, 800cfb2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0xa>
 800cfae:	4803      	ldr	r0, [pc, #12]	@ (800cfbc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 800cfb0:	4770      	bx	lr
 800cfb2:	4a03      	ldr	r2, [pc, #12]	@ (800cfc0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x18>)
 800cfb4:	4801      	ldr	r0, [pc, #4]	@ (800cfbc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 800cfb6:	6812      	ldr	r2, [r2, #0]
 800cfb8:	601a      	str	r2, [r3, #0]
 800cfba:	4770      	bx	lr
 800cfbc:	20000080 	.word	0x20000080
 800cfc0:	200000b8 	.word	0x200000b8

0800cfc4 <_String__max_serialized_size>:
 800cfc4:	2000      	movs	r0, #0
 800cfc6:	4770      	bx	lr

0800cfc8 <_String__cdr_serialize>:
 800cfc8:	b1c0      	cbz	r0, 800cffc <_String__cdr_serialize+0x34>
 800cfca:	b570      	push	{r4, r5, r6, lr}
 800cfcc:	6806      	ldr	r6, [r0, #0]
 800cfce:	460d      	mov	r5, r1
 800cfd0:	4604      	mov	r4, r0
 800cfd2:	b156      	cbz	r6, 800cfea <_String__cdr_serialize+0x22>
 800cfd4:	4630      	mov	r0, r6
 800cfd6:	f7f3 f97b 	bl	80002d0 <strlen>
 800cfda:	4631      	mov	r1, r6
 800cfdc:	6060      	str	r0, [r4, #4]
 800cfde:	1c42      	adds	r2, r0, #1
 800cfe0:	4628      	mov	r0, r5
 800cfe2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cfe6:	f000 b917 	b.w	800d218 <ucdr_serialize_sequence_char>
 800cfea:	4630      	mov	r0, r6
 800cfec:	6060      	str	r0, [r4, #4]
 800cfee:	4632      	mov	r2, r6
 800cff0:	4631      	mov	r1, r6
 800cff2:	4628      	mov	r0, r5
 800cff4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cff8:	f000 b90e 	b.w	800d218 <ucdr_serialize_sequence_char>
 800cffc:	4770      	bx	lr
 800cffe:	bf00      	nop

0800d000 <get_serialized_size_std_msgs__msg__String>:
 800d000:	b510      	push	{r4, lr}
 800d002:	4604      	mov	r4, r0
 800d004:	b138      	cbz	r0, 800d016 <get_serialized_size_std_msgs__msg__String+0x16>
 800d006:	460b      	mov	r3, r1
 800d008:	4618      	mov	r0, r3
 800d00a:	2104      	movs	r1, #4
 800d00c:	f000 f898 	bl	800d140 <ucdr_alignment>
 800d010:	6863      	ldr	r3, [r4, #4]
 800d012:	3305      	adds	r3, #5
 800d014:	4418      	add	r0, r3
 800d016:	bd10      	pop	{r4, pc}

0800d018 <_String__cdr_deserialize>:
 800d018:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d01a:	460c      	mov	r4, r1
 800d01c:	b083      	sub	sp, #12
 800d01e:	b1a1      	cbz	r1, 800d04a <_String__cdr_deserialize+0x32>
 800d020:	688f      	ldr	r7, [r1, #8]
 800d022:	6809      	ldr	r1, [r1, #0]
 800d024:	ab01      	add	r3, sp, #4
 800d026:	463a      	mov	r2, r7
 800d028:	4606      	mov	r6, r0
 800d02a:	f000 f907 	bl	800d23c <ucdr_deserialize_sequence_char>
 800d02e:	9b01      	ldr	r3, [sp, #4]
 800d030:	4605      	mov	r5, r0
 800d032:	b920      	cbnz	r0, 800d03e <_String__cdr_deserialize+0x26>
 800d034:	429f      	cmp	r7, r3
 800d036:	d30c      	bcc.n	800d052 <_String__cdr_deserialize+0x3a>
 800d038:	4628      	mov	r0, r5
 800d03a:	b003      	add	sp, #12
 800d03c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d03e:	b103      	cbz	r3, 800d042 <_String__cdr_deserialize+0x2a>
 800d040:	3b01      	subs	r3, #1
 800d042:	4628      	mov	r0, r5
 800d044:	6063      	str	r3, [r4, #4]
 800d046:	b003      	add	sp, #12
 800d048:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d04a:	460d      	mov	r5, r1
 800d04c:	4628      	mov	r0, r5
 800d04e:	b003      	add	sp, #12
 800d050:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d052:	2101      	movs	r1, #1
 800d054:	75b0      	strb	r0, [r6, #22]
 800d056:	7571      	strb	r1, [r6, #21]
 800d058:	4630      	mov	r0, r6
 800d05a:	6065      	str	r5, [r4, #4]
 800d05c:	f000 f886 	bl	800d16c <ucdr_align_to>
 800d060:	4630      	mov	r0, r6
 800d062:	9901      	ldr	r1, [sp, #4]
 800d064:	f000 f8b8 	bl	800d1d8 <ucdr_advance_buffer>
 800d068:	4628      	mov	r0, r5
 800d06a:	b003      	add	sp, #12
 800d06c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d06e:	bf00      	nop

0800d070 <_String__get_serialized_size>:
 800d070:	b510      	push	{r4, lr}
 800d072:	4604      	mov	r4, r0
 800d074:	b130      	cbz	r0, 800d084 <_String__get_serialized_size+0x14>
 800d076:	2104      	movs	r1, #4
 800d078:	2000      	movs	r0, #0
 800d07a:	f000 f861 	bl	800d140 <ucdr_alignment>
 800d07e:	6863      	ldr	r3, [r4, #4]
 800d080:	3305      	adds	r3, #5
 800d082:	4418      	add	r0, r3
 800d084:	bd10      	pop	{r4, pc}
 800d086:	bf00      	nop

0800d088 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__String>:
 800d088:	4800      	ldr	r0, [pc, #0]	@ (800d08c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__String+0x4>)
 800d08a:	4770      	bx	lr
 800d08c:	2000008c 	.word	0x2000008c

0800d090 <ucdr_check_buffer_available_for>:
 800d090:	7d83      	ldrb	r3, [r0, #22]
 800d092:	b93b      	cbnz	r3, 800d0a4 <ucdr_check_buffer_available_for+0x14>
 800d094:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800d098:	4419      	add	r1, r3
 800d09a:	4288      	cmp	r0, r1
 800d09c:	bf34      	ite	cc
 800d09e:	2000      	movcc	r0, #0
 800d0a0:	2001      	movcs	r0, #1
 800d0a2:	4770      	bx	lr
 800d0a4:	2000      	movs	r0, #0
 800d0a6:	4770      	bx	lr

0800d0a8 <ucdr_check_final_buffer_behavior>:
 800d0a8:	7d83      	ldrb	r3, [r0, #22]
 800d0aa:	b943      	cbnz	r3, 800d0be <ucdr_check_final_buffer_behavior+0x16>
 800d0ac:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800d0b0:	4291      	cmp	r1, r2
 800d0b2:	b510      	push	{r4, lr}
 800d0b4:	4604      	mov	r4, r0
 800d0b6:	d205      	bcs.n	800d0c4 <ucdr_check_final_buffer_behavior+0x1c>
 800d0b8:	2301      	movs	r3, #1
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	bd10      	pop	{r4, pc}
 800d0be:	2300      	movs	r3, #0
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	4770      	bx	lr
 800d0c4:	6982      	ldr	r2, [r0, #24]
 800d0c6:	b13a      	cbz	r2, 800d0d8 <ucdr_check_final_buffer_behavior+0x30>
 800d0c8:	69c1      	ldr	r1, [r0, #28]
 800d0ca:	4790      	blx	r2
 800d0cc:	f080 0301 	eor.w	r3, r0, #1
 800d0d0:	b2db      	uxtb	r3, r3
 800d0d2:	75a0      	strb	r0, [r4, #22]
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	bd10      	pop	{r4, pc}
 800d0d8:	2001      	movs	r0, #1
 800d0da:	75a0      	strb	r0, [r4, #22]
 800d0dc:	e7fa      	b.n	800d0d4 <ucdr_check_final_buffer_behavior+0x2c>
 800d0de:	bf00      	nop

0800d0e0 <ucdr_set_on_full_buffer_callback>:
 800d0e0:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800d0e4:	4770      	bx	lr
 800d0e6:	bf00      	nop

0800d0e8 <ucdr_init_buffer_origin_offset_endian>:
 800d0e8:	b410      	push	{r4}
 800d0ea:	9c01      	ldr	r4, [sp, #4]
 800d0ec:	6001      	str	r1, [r0, #0]
 800d0ee:	440a      	add	r2, r1
 800d0f0:	6042      	str	r2, [r0, #4]
 800d0f2:	190a      	adds	r2, r1, r4
 800d0f4:	441c      	add	r4, r3
 800d0f6:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800d0fa:	6082      	str	r2, [r0, #8]
 800d0fc:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800d100:	7503      	strb	r3, [r0, #20]
 800d102:	2200      	movs	r2, #0
 800d104:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800d108:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d10c:	7542      	strb	r2, [r0, #21]
 800d10e:	7582      	strb	r2, [r0, #22]
 800d110:	4770      	bx	lr
 800d112:	bf00      	nop

0800d114 <ucdr_init_buffer_origin_offset>:
 800d114:	b510      	push	{r4, lr}
 800d116:	b082      	sub	sp, #8
 800d118:	9c04      	ldr	r4, [sp, #16]
 800d11a:	9400      	str	r4, [sp, #0]
 800d11c:	2401      	movs	r4, #1
 800d11e:	9401      	str	r4, [sp, #4]
 800d120:	f7ff ffe2 	bl	800d0e8 <ucdr_init_buffer_origin_offset_endian>
 800d124:	b002      	add	sp, #8
 800d126:	bd10      	pop	{r4, pc}

0800d128 <ucdr_init_buffer_origin>:
 800d128:	b510      	push	{r4, lr}
 800d12a:	b082      	sub	sp, #8
 800d12c:	2400      	movs	r4, #0
 800d12e:	9400      	str	r4, [sp, #0]
 800d130:	f7ff fff0 	bl	800d114 <ucdr_init_buffer_origin_offset>
 800d134:	b002      	add	sp, #8
 800d136:	bd10      	pop	{r4, pc}

0800d138 <ucdr_init_buffer>:
 800d138:	2300      	movs	r3, #0
 800d13a:	f7ff bff5 	b.w	800d128 <ucdr_init_buffer_origin>
 800d13e:	bf00      	nop

0800d140 <ucdr_alignment>:
 800d140:	fbb0 f3f1 	udiv	r3, r0, r1
 800d144:	fb03 0011 	mls	r0, r3, r1, r0
 800d148:	1a08      	subs	r0, r1, r0
 800d14a:	3901      	subs	r1, #1
 800d14c:	4008      	ands	r0, r1
 800d14e:	4770      	bx	lr

0800d150 <ucdr_buffer_alignment>:
 800d150:	7d43      	ldrb	r3, [r0, #21]
 800d152:	428b      	cmp	r3, r1
 800d154:	d208      	bcs.n	800d168 <ucdr_buffer_alignment+0x18>
 800d156:	6900      	ldr	r0, [r0, #16]
 800d158:	fbb0 f3f1 	udiv	r3, r0, r1
 800d15c:	fb01 0013 	mls	r0, r1, r3, r0
 800d160:	1a08      	subs	r0, r1, r0
 800d162:	3901      	subs	r1, #1
 800d164:	4008      	ands	r0, r1
 800d166:	4770      	bx	lr
 800d168:	2000      	movs	r0, #0
 800d16a:	4770      	bx	lr

0800d16c <ucdr_align_to>:
 800d16c:	b538      	push	{r3, r4, r5, lr}
 800d16e:	4604      	mov	r4, r0
 800d170:	460d      	mov	r5, r1
 800d172:	f7ff ffed 	bl	800d150 <ucdr_buffer_alignment>
 800d176:	68a3      	ldr	r3, [r4, #8]
 800d178:	6921      	ldr	r1, [r4, #16]
 800d17a:	7565      	strb	r5, [r4, #21]
 800d17c:	181a      	adds	r2, r3, r0
 800d17e:	6863      	ldr	r3, [r4, #4]
 800d180:	4293      	cmp	r3, r2
 800d182:	4408      	add	r0, r1
 800d184:	bf28      	it	cs
 800d186:	4613      	movcs	r3, r2
 800d188:	6120      	str	r0, [r4, #16]
 800d18a:	60a3      	str	r3, [r4, #8]
 800d18c:	bd38      	pop	{r3, r4, r5, pc}
 800d18e:	bf00      	nop

0800d190 <ucdr_buffer_length>:
 800d190:	6882      	ldr	r2, [r0, #8]
 800d192:	6800      	ldr	r0, [r0, #0]
 800d194:	1a10      	subs	r0, r2, r0
 800d196:	4770      	bx	lr

0800d198 <ucdr_buffer_remaining>:
 800d198:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800d19c:	1a10      	subs	r0, r2, r0
 800d19e:	4770      	bx	lr

0800d1a0 <ucdr_check_final_buffer_behavior_array>:
 800d1a0:	b538      	push	{r3, r4, r5, lr}
 800d1a2:	7d83      	ldrb	r3, [r0, #22]
 800d1a4:	b963      	cbnz	r3, 800d1c0 <ucdr_check_final_buffer_behavior_array+0x20>
 800d1a6:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800d1aa:	429a      	cmp	r2, r3
 800d1ac:	4604      	mov	r4, r0
 800d1ae:	460d      	mov	r5, r1
 800d1b0:	d308      	bcc.n	800d1c4 <ucdr_check_final_buffer_behavior_array+0x24>
 800d1b2:	b139      	cbz	r1, 800d1c4 <ucdr_check_final_buffer_behavior_array+0x24>
 800d1b4:	6983      	ldr	r3, [r0, #24]
 800d1b6:	b163      	cbz	r3, 800d1d2 <ucdr_check_final_buffer_behavior_array+0x32>
 800d1b8:	69c1      	ldr	r1, [r0, #28]
 800d1ba:	4798      	blx	r3
 800d1bc:	75a0      	strb	r0, [r4, #22]
 800d1be:	b108      	cbz	r0, 800d1c4 <ucdr_check_final_buffer_behavior_array+0x24>
 800d1c0:	2000      	movs	r0, #0
 800d1c2:	bd38      	pop	{r3, r4, r5, pc}
 800d1c4:	4620      	mov	r0, r4
 800d1c6:	f7ff ffe7 	bl	800d198 <ucdr_buffer_remaining>
 800d1ca:	42a8      	cmp	r0, r5
 800d1cc:	bf28      	it	cs
 800d1ce:	4628      	movcs	r0, r5
 800d1d0:	bd38      	pop	{r3, r4, r5, pc}
 800d1d2:	2301      	movs	r3, #1
 800d1d4:	7583      	strb	r3, [r0, #22]
 800d1d6:	e7f3      	b.n	800d1c0 <ucdr_check_final_buffer_behavior_array+0x20>

0800d1d8 <ucdr_advance_buffer>:
 800d1d8:	b538      	push	{r3, r4, r5, lr}
 800d1da:	4604      	mov	r4, r0
 800d1dc:	460d      	mov	r5, r1
 800d1de:	f7ff ff57 	bl	800d090 <ucdr_check_buffer_available_for>
 800d1e2:	b178      	cbz	r0, 800d204 <ucdr_advance_buffer+0x2c>
 800d1e4:	6923      	ldr	r3, [r4, #16]
 800d1e6:	68a2      	ldr	r2, [r4, #8]
 800d1e8:	442b      	add	r3, r5
 800d1ea:	6123      	str	r3, [r4, #16]
 800d1ec:	2301      	movs	r3, #1
 800d1ee:	442a      	add	r2, r5
 800d1f0:	7563      	strb	r3, [r4, #21]
 800d1f2:	60a2      	str	r2, [r4, #8]
 800d1f4:	bd38      	pop	{r3, r4, r5, pc}
 800d1f6:	68a2      	ldr	r2, [r4, #8]
 800d1f8:	6923      	ldr	r3, [r4, #16]
 800d1fa:	4402      	add	r2, r0
 800d1fc:	4403      	add	r3, r0
 800d1fe:	1a2d      	subs	r5, r5, r0
 800d200:	60a2      	str	r2, [r4, #8]
 800d202:	6123      	str	r3, [r4, #16]
 800d204:	4629      	mov	r1, r5
 800d206:	2201      	movs	r2, #1
 800d208:	4620      	mov	r0, r4
 800d20a:	f7ff ffc9 	bl	800d1a0 <ucdr_check_final_buffer_behavior_array>
 800d20e:	2800      	cmp	r0, #0
 800d210:	d1f1      	bne.n	800d1f6 <ucdr_advance_buffer+0x1e>
 800d212:	2301      	movs	r3, #1
 800d214:	7563      	strb	r3, [r4, #21]
 800d216:	bd38      	pop	{r3, r4, r5, pc}

0800d218 <ucdr_serialize_sequence_char>:
 800d218:	b570      	push	{r4, r5, r6, lr}
 800d21a:	4615      	mov	r5, r2
 800d21c:	460e      	mov	r6, r1
 800d21e:	7d01      	ldrb	r1, [r0, #20]
 800d220:	4604      	mov	r4, r0
 800d222:	f007 f941 	bl	80144a8 <ucdr_serialize_endian_uint32_t>
 800d226:	b90d      	cbnz	r5, 800d22c <ucdr_serialize_sequence_char+0x14>
 800d228:	2001      	movs	r0, #1
 800d22a:	bd70      	pop	{r4, r5, r6, pc}
 800d22c:	7d21      	ldrb	r1, [r4, #20]
 800d22e:	462b      	mov	r3, r5
 800d230:	4632      	mov	r2, r6
 800d232:	4620      	mov	r0, r4
 800d234:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d238:	f006 bd2e 	b.w	8013c98 <ucdr_serialize_endian_array_char>

0800d23c <ucdr_deserialize_sequence_char>:
 800d23c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d240:	461d      	mov	r5, r3
 800d242:	4616      	mov	r6, r2
 800d244:	460f      	mov	r7, r1
 800d246:	461a      	mov	r2, r3
 800d248:	7d01      	ldrb	r1, [r0, #20]
 800d24a:	4604      	mov	r4, r0
 800d24c:	f007 fa54 	bl	80146f8 <ucdr_deserialize_endian_uint32_t>
 800d250:	682b      	ldr	r3, [r5, #0]
 800d252:	429e      	cmp	r6, r3
 800d254:	bf3c      	itt	cc
 800d256:	2201      	movcc	r2, #1
 800d258:	75a2      	strbcc	r2, [r4, #22]
 800d25a:	b913      	cbnz	r3, 800d262 <ucdr_deserialize_sequence_char+0x26>
 800d25c:	2001      	movs	r0, #1
 800d25e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d262:	7d21      	ldrb	r1, [r4, #20]
 800d264:	463a      	mov	r2, r7
 800d266:	4620      	mov	r0, r4
 800d268:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d26c:	f006 bd46 	b.w	8013cfc <ucdr_deserialize_endian_array_char>

0800d270 <ucdr_serialize_sequence_uint8_t>:
 800d270:	b570      	push	{r4, r5, r6, lr}
 800d272:	4615      	mov	r5, r2
 800d274:	460e      	mov	r6, r1
 800d276:	7d01      	ldrb	r1, [r0, #20]
 800d278:	4604      	mov	r4, r0
 800d27a:	f007 f915 	bl	80144a8 <ucdr_serialize_endian_uint32_t>
 800d27e:	b90d      	cbnz	r5, 800d284 <ucdr_serialize_sequence_uint8_t+0x14>
 800d280:	2001      	movs	r0, #1
 800d282:	bd70      	pop	{r4, r5, r6, pc}
 800d284:	7d21      	ldrb	r1, [r4, #20]
 800d286:	462b      	mov	r3, r5
 800d288:	4632      	mov	r2, r6
 800d28a:	4620      	mov	r0, r4
 800d28c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d290:	f006 bd98 	b.w	8013dc4 <ucdr_serialize_endian_array_uint8_t>

0800d294 <ucdr_deserialize_sequence_uint8_t>:
 800d294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d298:	461d      	mov	r5, r3
 800d29a:	4616      	mov	r6, r2
 800d29c:	460f      	mov	r7, r1
 800d29e:	461a      	mov	r2, r3
 800d2a0:	7d01      	ldrb	r1, [r0, #20]
 800d2a2:	4604      	mov	r4, r0
 800d2a4:	f007 fa28 	bl	80146f8 <ucdr_deserialize_endian_uint32_t>
 800d2a8:	682b      	ldr	r3, [r5, #0]
 800d2aa:	429e      	cmp	r6, r3
 800d2ac:	bf3c      	itt	cc
 800d2ae:	2201      	movcc	r2, #1
 800d2b0:	75a2      	strbcc	r2, [r4, #22]
 800d2b2:	b913      	cbnz	r3, 800d2ba <ucdr_deserialize_sequence_uint8_t+0x26>
 800d2b4:	2001      	movs	r0, #1
 800d2b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2ba:	7d21      	ldrb	r1, [r4, #20]
 800d2bc:	463a      	mov	r2, r7
 800d2be:	4620      	mov	r0, r4
 800d2c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d2c4:	f006 bde2 	b.w	8013e8c <ucdr_deserialize_endian_array_uint8_t>

0800d2c8 <uxr_buffer_delete_entity>:
 800d2c8:	b510      	push	{r4, lr}
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	b08e      	sub	sp, #56	@ 0x38
 800d2ce:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800d2d2:	2303      	movs	r3, #3
 800d2d4:	9300      	str	r3, [sp, #0]
 800d2d6:	2204      	movs	r2, #4
 800d2d8:	ab06      	add	r3, sp, #24
 800d2da:	4604      	mov	r4, r0
 800d2dc:	9103      	str	r1, [sp, #12]
 800d2de:	f001 fa81 	bl	800e7e4 <uxr_prepare_stream_to_write_submessage>
 800d2e2:	b918      	cbnz	r0, 800d2ec <uxr_buffer_delete_entity+0x24>
 800d2e4:	4604      	mov	r4, r0
 800d2e6:	4620      	mov	r0, r4
 800d2e8:	b00e      	add	sp, #56	@ 0x38
 800d2ea:	bd10      	pop	{r4, pc}
 800d2ec:	9902      	ldr	r1, [sp, #8]
 800d2ee:	aa05      	add	r2, sp, #20
 800d2f0:	4620      	mov	r0, r4
 800d2f2:	f001 fbad 	bl	800ea50 <uxr_init_base_object_request>
 800d2f6:	a905      	add	r1, sp, #20
 800d2f8:	4604      	mov	r4, r0
 800d2fa:	a806      	add	r0, sp, #24
 800d2fc:	f002 fdfe 	bl	800fefc <uxr_serialize_DELETE_Payload>
 800d300:	4620      	mov	r0, r4
 800d302:	b00e      	add	sp, #56	@ 0x38
 800d304:	bd10      	pop	{r4, pc}
 800d306:	bf00      	nop

0800d308 <uxr_common_create_entity>:
 800d308:	b510      	push	{r4, lr}
 800d30a:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800d30e:	b08c      	sub	sp, #48	@ 0x30
 800d310:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800d314:	f1bc 0f01 	cmp.w	ip, #1
 800d318:	bf0c      	ite	eq
 800d31a:	f003 0201 	andeq.w	r2, r3, #1
 800d31e:	2200      	movne	r2, #0
 800d320:	330e      	adds	r3, #14
 800d322:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800d326:	9101      	str	r1, [sp, #4]
 800d328:	441a      	add	r2, r3
 800d32a:	2301      	movs	r3, #1
 800d32c:	9300      	str	r3, [sp, #0]
 800d32e:	9903      	ldr	r1, [sp, #12]
 800d330:	ab04      	add	r3, sp, #16
 800d332:	b292      	uxth	r2, r2
 800d334:	4604      	mov	r4, r0
 800d336:	f001 fa55 	bl	800e7e4 <uxr_prepare_stream_to_write_submessage>
 800d33a:	b918      	cbnz	r0, 800d344 <uxr_common_create_entity+0x3c>
 800d33c:	4604      	mov	r4, r0
 800d33e:	4620      	mov	r0, r4
 800d340:	b00c      	add	sp, #48	@ 0x30
 800d342:	bd10      	pop	{r4, pc}
 800d344:	9902      	ldr	r1, [sp, #8]
 800d346:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d348:	4620      	mov	r0, r4
 800d34a:	f001 fb81 	bl	800ea50 <uxr_init_base_object_request>
 800d34e:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d350:	4604      	mov	r4, r0
 800d352:	a804      	add	r0, sp, #16
 800d354:	f002 fd2e 	bl	800fdb4 <uxr_serialize_CREATE_Payload>
 800d358:	4620      	mov	r0, r4
 800d35a:	b00c      	add	sp, #48	@ 0x30
 800d35c:	bd10      	pop	{r4, pc}
 800d35e:	bf00      	nop

0800d360 <uxr_buffer_create_participant_bin>:
 800d360:	b570      	push	{r4, r5, r6, lr}
 800d362:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800d366:	ac11      	add	r4, sp, #68	@ 0x44
 800d368:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 800d36c:	2303      	movs	r3, #3
 800d36e:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800d372:	7223      	strb	r3, [r4, #8]
 800d374:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 800d376:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 800d37a:	2201      	movs	r2, #1
 800d37c:	2100      	movs	r1, #0
 800d37e:	4605      	mov	r5, r0
 800d380:	7122      	strb	r2, [r4, #4]
 800d382:	f88d 1014 	strb.w	r1, [sp, #20]
 800d386:	b1cb      	cbz	r3, 800d3bc <uxr_buffer_create_participant_bin+0x5c>
 800d388:	f88d 201c 	strb.w	r2, [sp, #28]
 800d38c:	9308      	str	r3, [sp, #32]
 800d38e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d392:	a915      	add	r1, sp, #84	@ 0x54
 800d394:	a809      	add	r0, sp, #36	@ 0x24
 800d396:	f7ff fecf 	bl	800d138 <ucdr_init_buffer>
 800d39a:	a905      	add	r1, sp, #20
 800d39c:	a809      	add	r0, sp, #36	@ 0x24
 800d39e:	f002 f8eb 	bl	800f578 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800d3a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d3a4:	9600      	str	r6, [sp, #0]
 800d3a6:	9401      	str	r4, [sp, #4]
 800d3a8:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800d3ac:	60e3      	str	r3, [r4, #12]
 800d3ae:	4628      	mov	r0, r5
 800d3b0:	b29b      	uxth	r3, r3
 800d3b2:	f7ff ffa9 	bl	800d308 <uxr_common_create_entity>
 800d3b6:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 800d3ba:	bd70      	pop	{r4, r5, r6, pc}
 800d3bc:	f88d 301c 	strb.w	r3, [sp, #28]
 800d3c0:	e7e5      	b.n	800d38e <uxr_buffer_create_participant_bin+0x2e>
 800d3c2:	bf00      	nop

0800d3c4 <uxr_buffer_create_topic_bin>:
 800d3c4:	b570      	push	{r4, r5, r6, lr}
 800d3c6:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 800d3ca:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800d3ce:	9105      	str	r1, [sp, #20]
 800d3d0:	4605      	mov	r5, r0
 800d3d2:	a997      	add	r1, sp, #604	@ 0x25c
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	2302      	movs	r3, #2
 800d3d8:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 800d3dc:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 800d3e0:	f000 f996 	bl	800d710 <uxr_object_id_to_raw>
 800d3e4:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 800d3e6:	9306      	str	r3, [sp, #24]
 800d3e8:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 800d3ea:	930a      	str	r3, [sp, #40]	@ 0x28
 800d3ec:	2303      	movs	r3, #3
 800d3ee:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800d3f2:	2301      	movs	r3, #1
 800d3f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d3f8:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800d3fc:	a917      	add	r1, sp, #92	@ 0x5c
 800d3fe:	2300      	movs	r3, #0
 800d400:	a80b      	add	r0, sp, #44	@ 0x2c
 800d402:	f88d 301c 	strb.w	r3, [sp, #28]
 800d406:	f7ff fe97 	bl	800d138 <ucdr_init_buffer>
 800d40a:	a906      	add	r1, sp, #24
 800d40c:	a80b      	add	r0, sp, #44	@ 0x2c
 800d40e:	f002 f8d5 	bl	800f5bc <uxr_serialize_OBJK_Topic_Binary>
 800d412:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d414:	9316      	str	r3, [sp, #88]	@ 0x58
 800d416:	ac13      	add	r4, sp, #76	@ 0x4c
 800d418:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800d41c:	9600      	str	r6, [sp, #0]
 800d41e:	9401      	str	r4, [sp, #4]
 800d420:	b29b      	uxth	r3, r3
 800d422:	4628      	mov	r0, r5
 800d424:	f7ff ff70 	bl	800d308 <uxr_common_create_entity>
 800d428:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 800d42c:	bd70      	pop	{r4, r5, r6, pc}
 800d42e:	bf00      	nop

0800d430 <uxr_buffer_create_publisher_bin>:
 800d430:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d432:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 800d436:	4605      	mov	r5, r0
 800d438:	9105      	str	r1, [sp, #20]
 800d43a:	4618      	mov	r0, r3
 800d43c:	2603      	movs	r6, #3
 800d43e:	a992      	add	r1, sp, #584	@ 0x248
 800d440:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800d444:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 800d448:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 800d44c:	f000 f960 	bl	800d710 <uxr_object_id_to_raw>
 800d450:	2300      	movs	r3, #0
 800d452:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d456:	a912      	add	r1, sp, #72	@ 0x48
 800d458:	a806      	add	r0, sp, #24
 800d45a:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800d45e:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800d462:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 800d466:	f7ff fe67 	bl	800d138 <ucdr_init_buffer>
 800d46a:	a993      	add	r1, sp, #588	@ 0x24c
 800d46c:	a806      	add	r0, sp, #24
 800d46e:	f002 f959 	bl	800f724 <uxr_serialize_OBJK_Publisher_Binary>
 800d472:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d474:	9311      	str	r3, [sp, #68]	@ 0x44
 800d476:	ac0e      	add	r4, sp, #56	@ 0x38
 800d478:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800d47c:	9700      	str	r7, [sp, #0]
 800d47e:	9401      	str	r4, [sp, #4]
 800d480:	b29b      	uxth	r3, r3
 800d482:	4628      	mov	r0, r5
 800d484:	f7ff ff40 	bl	800d308 <uxr_common_create_entity>
 800d488:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 800d48c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d48e:	bf00      	nop

0800d490 <uxr_buffer_create_subscriber_bin>:
 800d490:	b570      	push	{r4, r5, r6, lr}
 800d492:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 800d496:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800d49a:	9105      	str	r1, [sp, #20]
 800d49c:	4605      	mov	r5, r0
 800d49e:	a992      	add	r1, sp, #584	@ 0x248
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	2304      	movs	r3, #4
 800d4a4:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 800d4a8:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 800d4ac:	f000 f930 	bl	800d710 <uxr_object_id_to_raw>
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d4b6:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800d4ba:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800d4be:	a912      	add	r1, sp, #72	@ 0x48
 800d4c0:	2303      	movs	r3, #3
 800d4c2:	a806      	add	r0, sp, #24
 800d4c4:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 800d4c8:	f7ff fe36 	bl	800d138 <ucdr_init_buffer>
 800d4cc:	a993      	add	r1, sp, #588	@ 0x24c
 800d4ce:	a806      	add	r0, sp, #24
 800d4d0:	f002 f9d8 	bl	800f884 <uxr_serialize_OBJK_Subscriber_Binary>
 800d4d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d4d6:	9311      	str	r3, [sp, #68]	@ 0x44
 800d4d8:	ac0e      	add	r4, sp, #56	@ 0x38
 800d4da:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800d4de:	9600      	str	r6, [sp, #0]
 800d4e0:	9401      	str	r4, [sp, #4]
 800d4e2:	b29b      	uxth	r3, r3
 800d4e4:	4628      	mov	r0, r5
 800d4e6:	f7ff ff0f 	bl	800d308 <uxr_common_create_entity>
 800d4ea:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 800d4ee:	bd70      	pop	{r4, r5, r6, pc}

0800d4f0 <uxr_buffer_create_datawriter_bin>:
 800d4f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4f4:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800d4f8:	ac1d      	add	r4, sp, #116	@ 0x74
 800d4fa:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800d4fe:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 800d502:	9105      	str	r1, [sp, #20]
 800d504:	4606      	mov	r6, r0
 800d506:	a9a1      	add	r1, sp, #644	@ 0x284
 800d508:	4618      	mov	r0, r3
 800d50a:	2305      	movs	r3, #5
 800d50c:	7123      	strb	r3, [r4, #4]
 800d50e:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 800d512:	2703      	movs	r7, #3
 800d514:	f000 f8fc 	bl	800d710 <uxr_object_id_to_raw>
 800d518:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 800d51a:	7227      	strb	r7, [r4, #8]
 800d51c:	a90e      	add	r1, sp, #56	@ 0x38
 800d51e:	f000 f8f7 	bl	800d710 <uxr_object_id_to_raw>
 800d522:	2300      	movs	r3, #0
 800d524:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800d528:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 800d52c:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800d530:	3d00      	subs	r5, #0
 800d532:	bf18      	it	ne
 800d534:	2501      	movne	r5, #1
 800d536:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800d53a:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800d53e:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800d542:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800d546:	2301      	movs	r3, #1
 800d548:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800d54c:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800d550:	bb8a      	cbnz	r2, 800d5b6 <uxr_buffer_create_datawriter_bin+0xc6>
 800d552:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800d556:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800d55a:	f04f 0c13 	mov.w	ip, #19
 800d55e:	250b      	movs	r5, #11
 800d560:	2221      	movs	r2, #33	@ 0x21
 800d562:	2111      	movs	r1, #17
 800d564:	2009      	movs	r0, #9
 800d566:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 800d56a:	b923      	cbnz	r3, 800d576 <uxr_buffer_create_datawriter_bin+0x86>
 800d56c:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800d570:	4672      	mov	r2, lr
 800d572:	4661      	mov	r1, ip
 800d574:	4628      	mov	r0, r5
 800d576:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 800d57a:	2b01      	cmp	r3, #1
 800d57c:	d025      	beq.n	800d5ca <uxr_buffer_create_datawriter_bin+0xda>
 800d57e:	2b03      	cmp	r3, #3
 800d580:	d029      	beq.n	800d5d6 <uxr_buffer_create_datawriter_bin+0xe6>
 800d582:	b32b      	cbz	r3, 800d5d0 <uxr_buffer_create_datawriter_bin+0xe0>
 800d584:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d588:	a921      	add	r1, sp, #132	@ 0x84
 800d58a:	a806      	add	r0, sp, #24
 800d58c:	f7ff fdd4 	bl	800d138 <ucdr_init_buffer>
 800d590:	a90e      	add	r1, sp, #56	@ 0x38
 800d592:	a806      	add	r0, sp, #24
 800d594:	f002 fa28 	bl	800f9e8 <uxr_serialize_OBJK_DataWriter_Binary>
 800d598:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d59a:	f8cd 8000 	str.w	r8, [sp]
 800d59e:	9401      	str	r4, [sp, #4]
 800d5a0:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800d5a4:	60e3      	str	r3, [r4, #12]
 800d5a6:	4630      	mov	r0, r6
 800d5a8:	b29b      	uxth	r3, r3
 800d5aa:	f7ff fead 	bl	800d308 <uxr_common_create_entity>
 800d5ae:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800d5b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5b6:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800d5ba:	f04f 0c12 	mov.w	ip, #18
 800d5be:	250a      	movs	r5, #10
 800d5c0:	2220      	movs	r2, #32
 800d5c2:	2110      	movs	r1, #16
 800d5c4:	2008      	movs	r0, #8
 800d5c6:	2702      	movs	r7, #2
 800d5c8:	e7cd      	b.n	800d566 <uxr_buffer_create_datawriter_bin+0x76>
 800d5ca:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800d5ce:	e7d9      	b.n	800d584 <uxr_buffer_create_datawriter_bin+0x94>
 800d5d0:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800d5d4:	e7d6      	b.n	800d584 <uxr_buffer_create_datawriter_bin+0x94>
 800d5d6:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800d5da:	e7d3      	b.n	800d584 <uxr_buffer_create_datawriter_bin+0x94>

0800d5dc <uxr_buffer_create_datareader_bin>:
 800d5dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5e0:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800d5e4:	ac1f      	add	r4, sp, #124	@ 0x7c
 800d5e6:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800d5ea:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 800d5ee:	9105      	str	r1, [sp, #20]
 800d5f0:	4606      	mov	r6, r0
 800d5f2:	a9a3      	add	r1, sp, #652	@ 0x28c
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	2306      	movs	r3, #6
 800d5f8:	7123      	strb	r3, [r4, #4]
 800d5fa:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 800d5fe:	2703      	movs	r7, #3
 800d600:	f000 f886 	bl	800d710 <uxr_object_id_to_raw>
 800d604:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 800d606:	7227      	strb	r7, [r4, #8]
 800d608:	a90e      	add	r1, sp, #56	@ 0x38
 800d60a:	f000 f881 	bl	800d710 <uxr_object_id_to_raw>
 800d60e:	2300      	movs	r3, #0
 800d610:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800d614:	f89d 22ad 	ldrb.w	r2, [sp, #685]	@ 0x2ad
 800d618:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 800d61c:	3d00      	subs	r5, #0
 800d61e:	bf18      	it	ne
 800d620:	2501      	movne	r5, #1
 800d622:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800d626:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800d62a:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800d62e:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800d632:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800d636:	2301      	movs	r3, #1
 800d638:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800d63c:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800d640:	bb8a      	cbnz	r2, 800d6a6 <uxr_buffer_create_datareader_bin+0xca>
 800d642:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800d646:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800d64a:	f04f 0c13 	mov.w	ip, #19
 800d64e:	250b      	movs	r5, #11
 800d650:	2221      	movs	r2, #33	@ 0x21
 800d652:	2111      	movs	r1, #17
 800d654:	2009      	movs	r0, #9
 800d656:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 800d65a:	b923      	cbnz	r3, 800d666 <uxr_buffer_create_datareader_bin+0x8a>
 800d65c:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800d660:	4672      	mov	r2, lr
 800d662:	4661      	mov	r1, ip
 800d664:	4628      	mov	r0, r5
 800d666:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 800d66a:	2b01      	cmp	r3, #1
 800d66c:	d025      	beq.n	800d6ba <uxr_buffer_create_datareader_bin+0xde>
 800d66e:	2b03      	cmp	r3, #3
 800d670:	d029      	beq.n	800d6c6 <uxr_buffer_create_datareader_bin+0xea>
 800d672:	b32b      	cbz	r3, 800d6c0 <uxr_buffer_create_datareader_bin+0xe4>
 800d674:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d678:	a923      	add	r1, sp, #140	@ 0x8c
 800d67a:	a806      	add	r0, sp, #24
 800d67c:	f7ff fd5c 	bl	800d138 <ucdr_init_buffer>
 800d680:	a90e      	add	r1, sp, #56	@ 0x38
 800d682:	a806      	add	r0, sp, #24
 800d684:	f002 f974 	bl	800f970 <uxr_serialize_OBJK_DataReader_Binary>
 800d688:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d68a:	f8cd 8000 	str.w	r8, [sp]
 800d68e:	9401      	str	r4, [sp, #4]
 800d690:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800d694:	60e3      	str	r3, [r4, #12]
 800d696:	4630      	mov	r0, r6
 800d698:	b29b      	uxth	r3, r3
 800d69a:	f7ff fe35 	bl	800d308 <uxr_common_create_entity>
 800d69e:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800d6a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6a6:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800d6aa:	f04f 0c12 	mov.w	ip, #18
 800d6ae:	250a      	movs	r5, #10
 800d6b0:	2220      	movs	r2, #32
 800d6b2:	2110      	movs	r1, #16
 800d6b4:	2008      	movs	r0, #8
 800d6b6:	2702      	movs	r7, #2
 800d6b8:	e7cd      	b.n	800d656 <uxr_buffer_create_datareader_bin+0x7a>
 800d6ba:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800d6be:	e7d9      	b.n	800d674 <uxr_buffer_create_datareader_bin+0x98>
 800d6c0:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800d6c4:	e7d6      	b.n	800d674 <uxr_buffer_create_datareader_bin+0x98>
 800d6c6:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800d6ca:	e7d3      	b.n	800d674 <uxr_buffer_create_datareader_bin+0x98>

0800d6cc <uxr_object_id>:
 800d6cc:	b082      	sub	sp, #8
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	f88d 1006 	strb.w	r1, [sp, #6]
 800d6d4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d6d8:	f360 030f 	bfi	r3, r0, #0, #16
 800d6dc:	f362 431f 	bfi	r3, r2, #16, #16
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	b002      	add	sp, #8
 800d6e4:	4770      	bx	lr
 800d6e6:	bf00      	nop

0800d6e8 <uxr_object_id_from_raw>:
 800d6e8:	7843      	ldrb	r3, [r0, #1]
 800d6ea:	7801      	ldrb	r1, [r0, #0]
 800d6ec:	b082      	sub	sp, #8
 800d6ee:	f003 020f 	and.w	r2, r3, #15
 800d6f2:	f88d 2006 	strb.w	r2, [sp, #6]
 800d6f6:	091b      	lsrs	r3, r3, #4
 800d6f8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d6fc:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800d700:	2000      	movs	r0, #0
 800d702:	f363 000f 	bfi	r0, r3, #0, #16
 800d706:	f362 401f 	bfi	r0, r2, #16, #16
 800d70a:	b002      	add	sp, #8
 800d70c:	4770      	bx	lr
 800d70e:	bf00      	nop

0800d710 <uxr_object_id_to_raw>:
 800d710:	4602      	mov	r2, r0
 800d712:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800d716:	b082      	sub	sp, #8
 800d718:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800d71c:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800d720:	f881 c000 	strb.w	ip, [r1]
 800d724:	7048      	strb	r0, [r1, #1]
 800d726:	b002      	add	sp, #8
 800d728:	4770      	bx	lr
 800d72a:	bf00      	nop

0800d72c <uxr_buffer_request_data>:
 800d72c:	b530      	push	{r4, r5, lr}
 800d72e:	b095      	sub	sp, #84	@ 0x54
 800d730:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800d734:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 800d736:	9303      	str	r3, [sp, #12]
 800d738:	2200      	movs	r2, #0
 800d73a:	2d00      	cmp	r5, #0
 800d73c:	bf14      	ite	ne
 800d73e:	2101      	movne	r1, #1
 800d740:	4611      	moveq	r1, r2
 800d742:	4604      	mov	r4, r0
 800d744:	f88d 301c 	strb.w	r3, [sp, #28]
 800d748:	f88d 201d 	strb.w	r2, [sp, #29]
 800d74c:	f88d 201e 	strb.w	r2, [sp, #30]
 800d750:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 800d754:	d021      	beq.n	800d79a <uxr_buffer_request_data+0x6e>
 800d756:	682a      	ldr	r2, [r5, #0]
 800d758:	686b      	ldr	r3, [r5, #4]
 800d75a:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 800d75e:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 800d762:	2210      	movs	r2, #16
 800d764:	2308      	movs	r3, #8
 800d766:	2100      	movs	r1, #0
 800d768:	e9cd 3100 	strd	r3, r1, [sp]
 800d76c:	4620      	mov	r0, r4
 800d76e:	9905      	ldr	r1, [sp, #20]
 800d770:	ab0c      	add	r3, sp, #48	@ 0x30
 800d772:	f001 f837 	bl	800e7e4 <uxr_prepare_stream_to_write_submessage>
 800d776:	b918      	cbnz	r0, 800d780 <uxr_buffer_request_data+0x54>
 800d778:	4604      	mov	r4, r0
 800d77a:	4620      	mov	r0, r4
 800d77c:	b015      	add	sp, #84	@ 0x54
 800d77e:	bd30      	pop	{r4, r5, pc}
 800d780:	9904      	ldr	r1, [sp, #16]
 800d782:	aa06      	add	r2, sp, #24
 800d784:	4620      	mov	r0, r4
 800d786:	f001 f963 	bl	800ea50 <uxr_init_base_object_request>
 800d78a:	a906      	add	r1, sp, #24
 800d78c:	4604      	mov	r4, r0
 800d78e:	a80c      	add	r0, sp, #48	@ 0x30
 800d790:	f002 fc5e 	bl	8010050 <uxr_serialize_READ_DATA_Payload>
 800d794:	4620      	mov	r0, r4
 800d796:	b015      	add	sp, #84	@ 0x54
 800d798:	bd30      	pop	{r4, r5, pc}
 800d79a:	2208      	movs	r2, #8
 800d79c:	e7e2      	b.n	800d764 <uxr_buffer_request_data+0x38>
 800d79e:	bf00      	nop

0800d7a0 <uxr_buffer_cancel_data>:
 800d7a0:	b510      	push	{r4, lr}
 800d7a2:	b094      	sub	sp, #80	@ 0x50
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	9202      	str	r2, [sp, #8]
 800d7a8:	9205      	str	r2, [sp, #20]
 800d7aa:	9301      	str	r3, [sp, #4]
 800d7ac:	2201      	movs	r2, #1
 800d7ae:	f8ad 301c 	strh.w	r3, [sp, #28]
 800d7b2:	f88d 301e 	strb.w	r3, [sp, #30]
 800d7b6:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 800d7ba:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 800d7be:	2308      	movs	r3, #8
 800d7c0:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 800d7c4:	9300      	str	r3, [sp, #0]
 800d7c6:	2210      	movs	r2, #16
 800d7c8:	ab0c      	add	r3, sp, #48	@ 0x30
 800d7ca:	4604      	mov	r4, r0
 800d7cc:	9103      	str	r1, [sp, #12]
 800d7ce:	f001 f809 	bl	800e7e4 <uxr_prepare_stream_to_write_submessage>
 800d7d2:	b918      	cbnz	r0, 800d7dc <uxr_buffer_cancel_data+0x3c>
 800d7d4:	4604      	mov	r4, r0
 800d7d6:	4620      	mov	r0, r4
 800d7d8:	b014      	add	sp, #80	@ 0x50
 800d7da:	bd10      	pop	{r4, pc}
 800d7dc:	9905      	ldr	r1, [sp, #20]
 800d7de:	aa06      	add	r2, sp, #24
 800d7e0:	4620      	mov	r0, r4
 800d7e2:	f001 f935 	bl	800ea50 <uxr_init_base_object_request>
 800d7e6:	a906      	add	r1, sp, #24
 800d7e8:	4604      	mov	r4, r0
 800d7ea:	a80c      	add	r0, sp, #48	@ 0x30
 800d7ec:	f002 fc30 	bl	8010050 <uxr_serialize_READ_DATA_Payload>
 800d7f0:	4620      	mov	r0, r4
 800d7f2:	b014      	add	sp, #80	@ 0x50
 800d7f4:	bd10      	pop	{r4, pc}
 800d7f6:	bf00      	nop

0800d7f8 <read_submessage_format>:
 800d7f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d7fc:	b095      	sub	sp, #84	@ 0x54
 800d7fe:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 800d802:	b113      	cbz	r3, 800d80a <read_submessage_format+0x12>
 800d804:	b015      	add	sp, #84	@ 0x54
 800d806:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d80a:	460c      	mov	r4, r1
 800d80c:	4615      	mov	r5, r2
 800d80e:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800d812:	4607      	mov	r7, r0
 800d814:	981c      	ldr	r0, [sp, #112]	@ 0x70
 800d816:	9004      	str	r0, [sp, #16]
 800d818:	981d      	ldr	r0, [sp, #116]	@ 0x74
 800d81a:	9005      	str	r0, [sp, #20]
 800d81c:	1a52      	subs	r2, r2, r1
 800d81e:	a80c      	add	r0, sp, #48	@ 0x30
 800d820:	4699      	mov	r9, r3
 800d822:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 800d826:	f7ff fc87 	bl	800d138 <ucdr_init_buffer>
 800d82a:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800d82e:	a80c      	add	r0, sp, #48	@ 0x30
 800d830:	f7ff fc56 	bl	800d0e0 <ucdr_set_on_full_buffer_callback>
 800d834:	69e2      	ldr	r2, [r4, #28]
 800d836:	b19a      	cbz	r2, 800d860 <read_submessage_format+0x68>
 800d838:	f1b8 0f07 	cmp.w	r8, #7
 800d83c:	f882 9014 	strb.w	r9, [r2, #20]
 800d840:	d040      	beq.n	800d8c4 <read_submessage_format+0xcc>
 800d842:	f1b8 0f08 	cmp.w	r8, #8
 800d846:	d02e      	beq.n	800d8a6 <read_submessage_format+0xae>
 800d848:	f1b8 0f06 	cmp.w	r8, #6
 800d84c:	d011      	beq.n	800d872 <read_submessage_format+0x7a>
 800d84e:	2301      	movs	r3, #1
 800d850:	7513      	strb	r3, [r2, #20]
 800d852:	4629      	mov	r1, r5
 800d854:	4620      	mov	r0, r4
 800d856:	f7ff fcbf 	bl	800d1d8 <ucdr_advance_buffer>
 800d85a:	b015      	add	sp, #84	@ 0x54
 800d85c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d860:	f1b8 0f07 	cmp.w	r8, #7
 800d864:	d02e      	beq.n	800d8c4 <read_submessage_format+0xcc>
 800d866:	f1b8 0f08 	cmp.w	r8, #8
 800d86a:	d01c      	beq.n	800d8a6 <read_submessage_format+0xae>
 800d86c:	f1b8 0f06 	cmp.w	r8, #6
 800d870:	d1ef      	bne.n	800d852 <read_submessage_format+0x5a>
 800d872:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 800d876:	f1b8 0f00 	cmp.w	r8, #0
 800d87a:	d011      	beq.n	800d8a0 <read_submessage_format+0xa8>
 800d87c:	ab0c      	add	r3, sp, #48	@ 0x30
 800d87e:	e9cd 3500 	strd	r3, r5, [sp]
 800d882:	2306      	movs	r3, #6
 800d884:	f88d 3016 	strb.w	r3, [sp, #22]
 800d888:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d88c:	9302      	str	r3, [sp, #8]
 800d88e:	4632      	mov	r2, r6
 800d890:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 800d894:	4638      	mov	r0, r7
 800d896:	47c0      	blx	r8
 800d898:	2301      	movs	r3, #1
 800d89a:	69e2      	ldr	r2, [r4, #28]
 800d89c:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800d8a0:	2a00      	cmp	r2, #0
 800d8a2:	d1d4      	bne.n	800d84e <read_submessage_format+0x56>
 800d8a4:	e7d5      	b.n	800d852 <read_submessage_format+0x5a>
 800d8a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d0f8      	beq.n	800d8a0 <read_submessage_format+0xa8>
 800d8ae:	a906      	add	r1, sp, #24
 800d8b0:	a80c      	add	r0, sp, #48	@ 0x30
 800d8b2:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800d8b6:	f002 fc91 	bl	80101dc <uxr_deserialize_SampleIdentity>
 800d8ba:	b9a0      	cbnz	r0, 800d8e6 <read_submessage_format+0xee>
 800d8bc:	69e2      	ldr	r2, [r4, #28]
 800d8be:	2a00      	cmp	r2, #0
 800d8c0:	d1c5      	bne.n	800d84e <read_submessage_format+0x56>
 800d8c2:	e7c6      	b.n	800d852 <read_submessage_format+0x5a>
 800d8c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d8c8:	b13b      	cbz	r3, 800d8da <read_submessage_format+0xe2>
 800d8ca:	a906      	add	r1, sp, #24
 800d8cc:	a80c      	add	r0, sp, #48	@ 0x30
 800d8ce:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800d8d2:	f002 f957 	bl	800fb84 <uxr_deserialize_BaseObjectRequest>
 800d8d6:	bb60      	cbnz	r0, 800d932 <read_submessage_format+0x13a>
 800d8d8:	69e2      	ldr	r2, [r4, #28]
 800d8da:	68a3      	ldr	r3, [r4, #8]
 800d8dc:	442b      	add	r3, r5
 800d8de:	60a3      	str	r3, [r4, #8]
 800d8e0:	2a00      	cmp	r2, #0
 800d8e2:	d1b4      	bne.n	800d84e <read_submessage_format+0x56>
 800d8e4:	e7b5      	b.n	800d852 <read_submessage_format+0x5a>
 800d8e6:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800d8ea:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d8ec:	1a52      	subs	r2, r2, r1
 800d8ee:	eba8 0803 	sub.w	r8, r8, r3
 800d8f2:	a80c      	add	r0, sp, #48	@ 0x30
 800d8f4:	f7ff fc20 	bl	800d138 <ucdr_init_buffer>
 800d8f8:	44a8      	add	r8, r5
 800d8fa:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800d8fe:	a80c      	add	r0, sp, #48	@ 0x30
 800d900:	f7ff fbee 	bl	800d0e0 <ucdr_set_on_full_buffer_callback>
 800d904:	fa1f f888 	uxth.w	r8, r8
 800d908:	ab0c      	add	r3, sp, #48	@ 0x30
 800d90a:	9300      	str	r3, [sp, #0]
 800d90c:	f8cd 8004 	str.w	r8, [sp, #4]
 800d910:	2108      	movs	r1, #8
 800d912:	f88d 1016 	strb.w	r1, [sp, #22]
 800d916:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 800d91a:	9102      	str	r1, [sp, #8]
 800d91c:	ab06      	add	r3, sp, #24
 800d91e:	4632      	mov	r2, r6
 800d920:	9905      	ldr	r1, [sp, #20]
 800d922:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 800d926:	4638      	mov	r0, r7
 800d928:	47b0      	blx	r6
 800d92a:	2301      	movs	r3, #1
 800d92c:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800d930:	e7c4      	b.n	800d8bc <read_submessage_format+0xc4>
 800d932:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800d936:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d938:	1a52      	subs	r2, r2, r1
 800d93a:	a80c      	add	r0, sp, #48	@ 0x30
 800d93c:	eba8 0803 	sub.w	r8, r8, r3
 800d940:	f7ff fbfa 	bl	800d138 <ucdr_init_buffer>
 800d944:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800d948:	a80c      	add	r0, sp, #48	@ 0x30
 800d94a:	f7ff fbc9 	bl	800d0e0 <ucdr_set_on_full_buffer_callback>
 800d94e:	ab0c      	add	r3, sp, #48	@ 0x30
 800d950:	9300      	str	r3, [sp, #0]
 800d952:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800d956:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800d95a:	44a8      	add	r8, r5
 800d95c:	fa1f f888 	uxth.w	r8, r8
 800d960:	f8cd 8004 	str.w	r8, [sp, #4]
 800d964:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800d968:	2107      	movs	r1, #7
 800d96a:	f88d 1016 	strb.w	r1, [sp, #22]
 800d96e:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 800d972:	9102      	str	r1, [sp, #8]
 800d974:	4632      	mov	r2, r6
 800d976:	b29b      	uxth	r3, r3
 800d978:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 800d97c:	9905      	ldr	r1, [sp, #20]
 800d97e:	4638      	mov	r0, r7
 800d980:	47b0      	blx	r6
 800d982:	2301      	movs	r3, #1
 800d984:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800d988:	e7a6      	b.n	800d8d8 <read_submessage_format+0xe0>
 800d98a:	bf00      	nop

0800d98c <on_get_fragmentation_info>:
 800d98c:	b500      	push	{lr}
 800d98e:	b08b      	sub	sp, #44	@ 0x2c
 800d990:	4601      	mov	r1, r0
 800d992:	2204      	movs	r2, #4
 800d994:	a802      	add	r0, sp, #8
 800d996:	f7ff fbcf 	bl	800d138 <ucdr_init_buffer>
 800d99a:	f10d 0305 	add.w	r3, sp, #5
 800d99e:	f10d 0206 	add.w	r2, sp, #6
 800d9a2:	a901      	add	r1, sp, #4
 800d9a4:	a802      	add	r0, sp, #8
 800d9a6:	f001 f9d5 	bl	800ed54 <uxr_read_submessage_header>
 800d9aa:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d9ae:	2b0d      	cmp	r3, #13
 800d9b0:	d003      	beq.n	800d9ba <on_get_fragmentation_info+0x2e>
 800d9b2:	2000      	movs	r0, #0
 800d9b4:	b00b      	add	sp, #44	@ 0x2c
 800d9b6:	f85d fb04 	ldr.w	pc, [sp], #4
 800d9ba:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d9be:	f013 0f02 	tst.w	r3, #2
 800d9c2:	bf14      	ite	ne
 800d9c4:	2002      	movne	r0, #2
 800d9c6:	2001      	moveq	r0, #1
 800d9c8:	b00b      	add	sp, #44	@ 0x2c
 800d9ca:	f85d fb04 	ldr.w	pc, [sp], #4
 800d9ce:	bf00      	nop

0800d9d0 <read_submessage_get_info>:
 800d9d0:	b570      	push	{r4, r5, r6, lr}
 800d9d2:	2500      	movs	r5, #0
 800d9d4:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 800d9d8:	4604      	mov	r4, r0
 800d9da:	f44f 7224 	mov.w	r2, #656	@ 0x290
 800d9de:	460e      	mov	r6, r1
 800d9e0:	a810      	add	r0, sp, #64	@ 0x40
 800d9e2:	4629      	mov	r1, r5
 800d9e4:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800d9e8:	f00a f9ee 	bl	8017dc8 <memset>
 800d9ec:	a903      	add	r1, sp, #12
 800d9ee:	4630      	mov	r0, r6
 800d9f0:	f002 fa70 	bl	800fed4 <uxr_deserialize_GET_INFO_Payload>
 800d9f4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800d9f8:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800d9fc:	4620      	mov	r0, r4
 800d9fe:	f001 f81f 	bl	800ea40 <uxr_session_header_offset>
 800da02:	462b      	mov	r3, r5
 800da04:	9000      	str	r0, [sp, #0]
 800da06:	220c      	movs	r2, #12
 800da08:	a905      	add	r1, sp, #20
 800da0a:	a808      	add	r0, sp, #32
 800da0c:	f7ff fb82 	bl	800d114 <ucdr_init_buffer_origin_offset>
 800da10:	a910      	add	r1, sp, #64	@ 0x40
 800da12:	a808      	add	r0, sp, #32
 800da14:	f002 fad0 	bl	800ffb8 <uxr_serialize_INFO_Payload>
 800da18:	9b08      	ldr	r3, [sp, #32]
 800da1a:	462a      	mov	r2, r5
 800da1c:	4629      	mov	r1, r5
 800da1e:	4620      	mov	r0, r4
 800da20:	f000 ffb8 	bl	800e994 <uxr_stamp_session_header>
 800da24:	a808      	add	r0, sp, #32
 800da26:	f7ff fbb3 	bl	800d190 <ucdr_buffer_length>
 800da2a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800da2c:	4602      	mov	r2, r0
 800da2e:	a905      	add	r1, sp, #20
 800da30:	e9d3 0400 	ldrd	r0, r4, [r3]
 800da34:	47a0      	blx	r4
 800da36:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 800da3a:	bd70      	pop	{r4, r5, r6, pc}

0800da3c <write_submessage_acknack.isra.0>:
 800da3c:	b570      	push	{r4, r5, r6, lr}
 800da3e:	b092      	sub	sp, #72	@ 0x48
 800da40:	4605      	mov	r5, r0
 800da42:	460e      	mov	r6, r1
 800da44:	4614      	mov	r4, r2
 800da46:	f000 fffb 	bl	800ea40 <uxr_session_header_offset>
 800da4a:	a905      	add	r1, sp, #20
 800da4c:	9000      	str	r0, [sp, #0]
 800da4e:	2300      	movs	r3, #0
 800da50:	a80a      	add	r0, sp, #40	@ 0x28
 800da52:	2211      	movs	r2, #17
 800da54:	f7ff fb5e 	bl	800d114 <ucdr_init_buffer_origin_offset>
 800da58:	2218      	movs	r2, #24
 800da5a:	fb02 5404 	mla	r4, r2, r4, r5
 800da5e:	2300      	movs	r3, #0
 800da60:	2205      	movs	r2, #5
 800da62:	3450      	adds	r4, #80	@ 0x50
 800da64:	210a      	movs	r1, #10
 800da66:	a80a      	add	r0, sp, #40	@ 0x28
 800da68:	f001 f95a 	bl	800ed20 <uxr_buffer_submessage_header>
 800da6c:	a903      	add	r1, sp, #12
 800da6e:	4620      	mov	r0, r4
 800da70:	f007 fc40 	bl	80152f4 <uxr_compute_acknack>
 800da74:	ba40      	rev16	r0, r0
 800da76:	f8ad 000e 	strh.w	r0, [sp, #14]
 800da7a:	a903      	add	r1, sp, #12
 800da7c:	a80a      	add	r0, sp, #40	@ 0x28
 800da7e:	f88d 6010 	strb.w	r6, [sp, #16]
 800da82:	f002 fb09 	bl	8010098 <uxr_serialize_ACKNACK_Payload>
 800da86:	2200      	movs	r2, #0
 800da88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800da8a:	4611      	mov	r1, r2
 800da8c:	4628      	mov	r0, r5
 800da8e:	f000 ff81 	bl	800e994 <uxr_stamp_session_header>
 800da92:	a80a      	add	r0, sp, #40	@ 0x28
 800da94:	f7ff fb7c 	bl	800d190 <ucdr_buffer_length>
 800da98:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800da9a:	4602      	mov	r2, r0
 800da9c:	a905      	add	r1, sp, #20
 800da9e:	e9d3 0400 	ldrd	r0, r4, [r3]
 800daa2:	47a0      	blx	r4
 800daa4:	b012      	add	sp, #72	@ 0x48
 800daa6:	bd70      	pop	{r4, r5, r6, pc}

0800daa8 <uxr_init_session>:
 800daa8:	b510      	push	{r4, lr}
 800daaa:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800dae0 <uxr_init_session+0x38>
 800daae:	2300      	movs	r3, #0
 800dab0:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 800dab4:	4604      	mov	r4, r0
 800dab6:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 800daba:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 800dabe:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 800dac2:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 800dac6:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 800daca:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 800dace:	2181      	movs	r1, #129	@ 0x81
 800dad0:	f000 fecc 	bl	800e86c <uxr_init_session_info>
 800dad4:	f104 0008 	add.w	r0, r4, #8
 800dad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dadc:	f001 b83c 	b.w	800eb58 <uxr_init_stream_storage>
	...

0800dae8 <uxr_set_status_callback>:
 800dae8:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 800daec:	4770      	bx	lr
 800daee:	bf00      	nop

0800daf0 <uxr_set_topic_callback>:
 800daf0:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 800daf4:	4770      	bx	lr
 800daf6:	bf00      	nop

0800daf8 <uxr_set_request_callback>:
 800daf8:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 800dafc:	4770      	bx	lr
 800dafe:	bf00      	nop

0800db00 <uxr_set_reply_callback>:
 800db00:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 800db04:	4770      	bx	lr
 800db06:	bf00      	nop

0800db08 <uxr_create_output_best_effort_stream>:
 800db08:	b510      	push	{r4, lr}
 800db0a:	b084      	sub	sp, #16
 800db0c:	e9cd 2100 	strd	r2, r1, [sp]
 800db10:	4604      	mov	r4, r0
 800db12:	f000 ff95 	bl	800ea40 <uxr_session_header_offset>
 800db16:	e9dd 2100 	ldrd	r2, r1, [sp]
 800db1a:	4603      	mov	r3, r0
 800db1c:	f104 0008 	add.w	r0, r4, #8
 800db20:	b004      	add	sp, #16
 800db22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800db26:	f001 b861 	b.w	800ebec <uxr_add_output_best_effort_buffer>
 800db2a:	bf00      	nop

0800db2c <uxr_create_output_reliable_stream>:
 800db2c:	b510      	push	{r4, lr}
 800db2e:	b088      	sub	sp, #32
 800db30:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800db34:	4604      	mov	r4, r0
 800db36:	9303      	str	r3, [sp, #12]
 800db38:	f000 ff82 	bl	800ea40 <uxr_session_header_offset>
 800db3c:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800db40:	9000      	str	r0, [sp, #0]
 800db42:	9905      	ldr	r1, [sp, #20]
 800db44:	f104 0008 	add.w	r0, r4, #8
 800db48:	f001 f864 	bl	800ec14 <uxr_add_output_reliable_buffer>
 800db4c:	2200      	movs	r2, #0
 800db4e:	b2c3      	uxtb	r3, r0
 800db50:	f363 0207 	bfi	r2, r3, #0, #8
 800db54:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800db58:	f363 220f 	bfi	r2, r3, #8, #8
 800db5c:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800db60:	f363 4217 	bfi	r2, r3, #16, #8
 800db64:	0e03      	lsrs	r3, r0, #24
 800db66:	f363 621f 	bfi	r2, r3, #24, #8
 800db6a:	4610      	mov	r0, r2
 800db6c:	b008      	add	sp, #32
 800db6e:	bd10      	pop	{r4, pc}

0800db70 <uxr_create_input_best_effort_stream>:
 800db70:	b082      	sub	sp, #8
 800db72:	3008      	adds	r0, #8
 800db74:	b002      	add	sp, #8
 800db76:	f001 b867 	b.w	800ec48 <uxr_add_input_best_effort_buffer>
 800db7a:	bf00      	nop

0800db7c <uxr_create_input_reliable_stream>:
 800db7c:	b510      	push	{r4, lr}
 800db7e:	b084      	sub	sp, #16
 800db80:	4c0b      	ldr	r4, [pc, #44]	@ (800dbb0 <uxr_create_input_reliable_stream+0x34>)
 800db82:	9400      	str	r4, [sp, #0]
 800db84:	3008      	adds	r0, #8
 800db86:	f001 f875 	bl	800ec74 <uxr_add_input_reliable_buffer>
 800db8a:	2200      	movs	r2, #0
 800db8c:	b2c3      	uxtb	r3, r0
 800db8e:	f363 0207 	bfi	r2, r3, #0, #8
 800db92:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800db96:	f363 220f 	bfi	r2, r3, #8, #8
 800db9a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800db9e:	f363 4217 	bfi	r2, r3, #16, #8
 800dba2:	0e03      	lsrs	r3, r0, #24
 800dba4:	f363 621f 	bfi	r2, r3, #24, #8
 800dba8:	4610      	mov	r0, r2
 800dbaa:	b004      	add	sp, #16
 800dbac:	bd10      	pop	{r4, pc}
 800dbae:	bf00      	nop
 800dbb0:	0800d98d 	.word	0x0800d98d

0800dbb4 <uxr_epoch_nanos>:
 800dbb4:	b510      	push	{r4, lr}
 800dbb6:	4604      	mov	r4, r0
 800dbb8:	f001 f912 	bl	800ede0 <uxr_nanos>
 800dbbc:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 800dbc0:	1ac0      	subs	r0, r0, r3
 800dbc2:	eb61 0102 	sbc.w	r1, r1, r2
 800dbc6:	bd10      	pop	{r4, pc}

0800dbc8 <uxr_flash_output_streams>:
 800dbc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dbcc:	7e03      	ldrb	r3, [r0, #24]
 800dbce:	b084      	sub	sp, #16
 800dbd0:	4604      	mov	r4, r0
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d035      	beq.n	800dc42 <uxr_flash_output_streams+0x7a>
 800dbd6:	f04f 0900 	mov.w	r9, #0
 800dbda:	4648      	mov	r0, r9
 800dbdc:	f10d 0802 	add.w	r8, sp, #2
 800dbe0:	af03      	add	r7, sp, #12
 800dbe2:	ae02      	add	r6, sp, #8
 800dbe4:	e006      	b.n	800dbf4 <uxr_flash_output_streams+0x2c>
 800dbe6:	7e23      	ldrb	r3, [r4, #24]
 800dbe8:	f109 0901 	add.w	r9, r9, #1
 800dbec:	fa5f f089 	uxtb.w	r0, r9
 800dbf0:	4283      	cmp	r3, r0
 800dbf2:	d926      	bls.n	800dc42 <uxr_flash_output_streams+0x7a>
 800dbf4:	2201      	movs	r2, #1
 800dbf6:	4611      	mov	r1, r2
 800dbf8:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800dbfc:	f000 ff58 	bl	800eab0 <uxr_stream_id>
 800dc00:	3508      	adds	r5, #8
 800dc02:	4684      	mov	ip, r0
 800dc04:	4643      	mov	r3, r8
 800dc06:	463a      	mov	r2, r7
 800dc08:	4631      	mov	r1, r6
 800dc0a:	4628      	mov	r0, r5
 800dc0c:	f8cd c004 	str.w	ip, [sp, #4]
 800dc10:	f007 fbf6 	bl	8015400 <uxr_prepare_best_effort_buffer_to_send>
 800dc14:	2800      	cmp	r0, #0
 800dc16:	d0e6      	beq.n	800dbe6 <uxr_flash_output_streams+0x1e>
 800dc18:	9b02      	ldr	r3, [sp, #8]
 800dc1a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800dc1e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800dc22:	4620      	mov	r0, r4
 800dc24:	f000 feb6 	bl	800e994 <uxr_stamp_session_header>
 800dc28:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800dc2a:	9a03      	ldr	r2, [sp, #12]
 800dc2c:	685d      	ldr	r5, [r3, #4]
 800dc2e:	6818      	ldr	r0, [r3, #0]
 800dc30:	9902      	ldr	r1, [sp, #8]
 800dc32:	47a8      	blx	r5
 800dc34:	f109 0901 	add.w	r9, r9, #1
 800dc38:	7e23      	ldrb	r3, [r4, #24]
 800dc3a:	fa5f f089 	uxtb.w	r0, r9
 800dc3e:	4283      	cmp	r3, r0
 800dc40:	d8d8      	bhi.n	800dbf4 <uxr_flash_output_streams+0x2c>
 800dc42:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800dc46:	b38b      	cbz	r3, 800dcac <uxr_flash_output_streams+0xe4>
 800dc48:	f04f 0900 	mov.w	r9, #0
 800dc4c:	f10d 0802 	add.w	r8, sp, #2
 800dc50:	af03      	add	r7, sp, #12
 800dc52:	ae02      	add	r6, sp, #8
 800dc54:	4648      	mov	r0, r9
 800dc56:	2201      	movs	r2, #1
 800dc58:	2102      	movs	r1, #2
 800dc5a:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800dc5e:	f000 ff27 	bl	800eab0 <uxr_stream_id>
 800dc62:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800dc66:	3520      	adds	r5, #32
 800dc68:	9001      	str	r0, [sp, #4]
 800dc6a:	e00d      	b.n	800dc88 <uxr_flash_output_streams+0xc0>
 800dc6c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800dc70:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800dc74:	9b02      	ldr	r3, [sp, #8]
 800dc76:	f000 fe8d 	bl	800e994 <uxr_stamp_session_header>
 800dc7a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800dc7c:	9a03      	ldr	r2, [sp, #12]
 800dc7e:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800dc82:	9902      	ldr	r1, [sp, #8]
 800dc84:	6818      	ldr	r0, [r3, #0]
 800dc86:	47d0      	blx	sl
 800dc88:	4643      	mov	r3, r8
 800dc8a:	463a      	mov	r2, r7
 800dc8c:	4631      	mov	r1, r6
 800dc8e:	4628      	mov	r0, r5
 800dc90:	f007 fdd4 	bl	801583c <uxr_prepare_next_reliable_buffer_to_send>
 800dc94:	4603      	mov	r3, r0
 800dc96:	4620      	mov	r0, r4
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d1e7      	bne.n	800dc6c <uxr_flash_output_streams+0xa4>
 800dc9c:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800dca0:	f109 0901 	add.w	r9, r9, #1
 800dca4:	fa5f f089 	uxtb.w	r0, r9
 800dca8:	4283      	cmp	r3, r0
 800dcaa:	d8d4      	bhi.n	800dc56 <uxr_flash_output_streams+0x8e>
 800dcac:	b004      	add	sp, #16
 800dcae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dcb2:	bf00      	nop

0800dcb4 <read_submessage_info>:
 800dcb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcb8:	460d      	mov	r5, r1
 800dcba:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800dcbe:	4669      	mov	r1, sp
 800dcc0:	4607      	mov	r7, r0
 800dcc2:	4628      	mov	r0, r5
 800dcc4:	f002 f814 	bl	800fcf0 <uxr_deserialize_BaseObjectReply>
 800dcc8:	a902      	add	r1, sp, #8
 800dcca:	4604      	mov	r4, r0
 800dccc:	4628      	mov	r0, r5
 800dcce:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800dcd2:	f006 f923 	bl	8013f1c <ucdr_deserialize_bool>
 800dcd6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800dcda:	4004      	ands	r4, r0
 800dcdc:	b2e4      	uxtb	r4, r4
 800dcde:	b95b      	cbnz	r3, 800dcf8 <read_submessage_info+0x44>
 800dce0:	a987      	add	r1, sp, #540	@ 0x21c
 800dce2:	4628      	mov	r0, r5
 800dce4:	f006 f91a 	bl	8013f1c <ucdr_deserialize_bool>
 800dce8:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 800dcec:	4606      	mov	r6, r0
 800dcee:	b94b      	cbnz	r3, 800dd04 <read_submessage_info+0x50>
 800dcf0:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800dcf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcf8:	a903      	add	r1, sp, #12
 800dcfa:	4628      	mov	r0, r5
 800dcfc:	f001 fea0 	bl	800fa40 <uxr_deserialize_ObjectVariant>
 800dd00:	4004      	ands	r4, r0
 800dd02:	e7ed      	b.n	800dce0 <read_submessage_info+0x2c>
 800dd04:	a988      	add	r1, sp, #544	@ 0x220
 800dd06:	4628      	mov	r0, r5
 800dd08:	f006 f936 	bl	8013f78 <ucdr_deserialize_uint8_t>
 800dd0c:	4234      	tst	r4, r6
 800dd0e:	d0ef      	beq.n	800dcf0 <read_submessage_info+0x3c>
 800dd10:	2800      	cmp	r0, #0
 800dd12:	d0ed      	beq.n	800dcf0 <read_submessage_info+0x3c>
 800dd14:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 800dd18:	2b0d      	cmp	r3, #13
 800dd1a:	d1e9      	bne.n	800dcf0 <read_submessage_info+0x3c>
 800dd1c:	a98a      	add	r1, sp, #552	@ 0x228
 800dd1e:	4628      	mov	r0, r5
 800dd20:	f006 fed0 	bl	8014ac4 <ucdr_deserialize_int16_t>
 800dd24:	b140      	cbz	r0, 800dd38 <read_submessage_info+0x84>
 800dd26:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	dd07      	ble.n	800dd3e <read_submessage_info+0x8a>
 800dd2e:	f1b8 0f00 	cmp.w	r8, #0
 800dd32:	bf14      	ite	ne
 800dd34:	2001      	movne	r0, #1
 800dd36:	2002      	moveq	r0, #2
 800dd38:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 800dd3c:	e7d8      	b.n	800dcf0 <read_submessage_info+0x3c>
 800dd3e:	2000      	movs	r0, #0
 800dd40:	e7fa      	b.n	800dd38 <read_submessage_info+0x84>
 800dd42:	bf00      	nop

0800dd44 <read_submessage_list>:
 800dd44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd48:	b097      	sub	sp, #92	@ 0x5c
 800dd4a:	4ec1      	ldr	r6, [pc, #772]	@ (800e050 <read_submessage_list+0x30c>)
 800dd4c:	9209      	str	r2, [sp, #36]	@ 0x24
 800dd4e:	4604      	mov	r4, r0
 800dd50:	460d      	mov	r5, r1
 800dd52:	f04f 0801 	mov.w	r8, #1
 800dd56:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 800dd5a:	aa0c      	add	r2, sp, #48	@ 0x30
 800dd5c:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 800dd60:	4628      	mov	r0, r5
 800dd62:	f000 fff7 	bl	800ed54 <uxr_read_submessage_header>
 800dd66:	2800      	cmp	r0, #0
 800dd68:	f000 813e 	beq.w	800dfe8 <read_submessage_list+0x2a4>
 800dd6c:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 800dd70:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 800dd74:	3b02      	subs	r3, #2
 800dd76:	2b0d      	cmp	r3, #13
 800dd78:	d8ed      	bhi.n	800dd56 <read_submessage_list+0x12>
 800dd7a:	a101      	add	r1, pc, #4	@ (adr r1, 800dd80 <read_submessage_list+0x3c>)
 800dd7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dd80:	0800dfdf 	.word	0x0800dfdf
 800dd84:	0800dd57 	.word	0x0800dd57
 800dd88:	0800dfcf 	.word	0x0800dfcf
 800dd8c:	0800df6d 	.word	0x0800df6d
 800dd90:	0800df63 	.word	0x0800df63
 800dd94:	0800dd57 	.word	0x0800dd57
 800dd98:	0800dd57 	.word	0x0800dd57
 800dd9c:	0800dec3 	.word	0x0800dec3
 800dda0:	0800de53 	.word	0x0800de53
 800dda4:	0800de13 	.word	0x0800de13
 800dda8:	0800dd57 	.word	0x0800dd57
 800ddac:	0800dd57 	.word	0x0800dd57
 800ddb0:	0800dd57 	.word	0x0800dd57
 800ddb4:	0800ddb9 	.word	0x0800ddb9
 800ddb8:	a910      	add	r1, sp, #64	@ 0x40
 800ddba:	4628      	mov	r0, r5
 800ddbc:	f002 f9bc 	bl	8010138 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800ddc0:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 800ddc4:	f1b9 0f00 	cmp.w	r9, #0
 800ddc8:	f000 8116 	beq.w	800dff8 <read_submessage_list+0x2b4>
 800ddcc:	f001 f808 	bl	800ede0 <uxr_nanos>
 800ddd0:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800ddd2:	4602      	mov	r2, r0
 800ddd4:	460b      	mov	r3, r1
 800ddd6:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800ddd8:	2100      	movs	r1, #0
 800ddda:	468c      	mov	ip, r1
 800dddc:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800dde0:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 800dde4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800dde6:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 800dde8:	468c      	mov	ip, r1
 800ddea:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800ddee:	46e2      	mov	sl, ip
 800ddf0:	46bc      	mov	ip, r7
 800ddf2:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 800ddf6:	fbc0 7106 	smlal	r7, r1, r0, r6
 800ddfa:	e9cd ca02 	strd	ip, sl, [sp, #8]
 800ddfe:	e9cd 7100 	strd	r7, r1, [sp]
 800de02:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800de06:	9106      	str	r1, [sp, #24]
 800de08:	4620      	mov	r0, r4
 800de0a:	47c8      	blx	r9
 800de0c:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 800de10:	e7a1      	b.n	800dd56 <read_submessage_list+0x12>
 800de12:	a910      	add	r1, sp, #64	@ 0x40
 800de14:	4628      	mov	r0, r5
 800de16:	f002 f97d 	bl	8010114 <uxr_deserialize_HEARTBEAT_Payload>
 800de1a:	2100      	movs	r1, #0
 800de1c:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800de20:	f000 fe70 	bl	800eb04 <uxr_stream_id_from_raw>
 800de24:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800de28:	900f      	str	r0, [sp, #60]	@ 0x3c
 800de2a:	4639      	mov	r1, r7
 800de2c:	f104 0008 	add.w	r0, r4, #8
 800de30:	f000 ff56 	bl	800ece0 <uxr_get_input_reliable_stream>
 800de34:	2800      	cmp	r0, #0
 800de36:	d08e      	beq.n	800dd56 <read_submessage_list+0x12>
 800de38:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 800de3c:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 800de40:	f007 fa4c 	bl	80152dc <uxr_process_heartbeat>
 800de44:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 800de48:	463a      	mov	r2, r7
 800de4a:	4620      	mov	r0, r4
 800de4c:	f7ff fdf6 	bl	800da3c <write_submessage_acknack.isra.0>
 800de50:	e781      	b.n	800dd56 <read_submessage_list+0x12>
 800de52:	a910      	add	r1, sp, #64	@ 0x40
 800de54:	4628      	mov	r0, r5
 800de56:	f002 f935 	bl	80100c4 <uxr_deserialize_ACKNACK_Payload>
 800de5a:	2100      	movs	r1, #0
 800de5c:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800de60:	f000 fe50 	bl	800eb04 <uxr_stream_id_from_raw>
 800de64:	900d      	str	r0, [sp, #52]	@ 0x34
 800de66:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800de6a:	f104 0008 	add.w	r0, r4, #8
 800de6e:	f000 ff23 	bl	800ecb8 <uxr_get_output_reliable_stream>
 800de72:	4607      	mov	r7, r0
 800de74:	2800      	cmp	r0, #0
 800de76:	f43f af6e 	beq.w	800dd56 <read_submessage_list+0x12>
 800de7a:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 800de7e:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 800de82:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800de86:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800de8a:	b289      	uxth	r1, r1
 800de8c:	f007 fd80 	bl	8015990 <uxr_process_acknack>
 800de90:	4638      	mov	r0, r7
 800de92:	f007 fd3d 	bl	8015910 <uxr_begin_output_nack_buffer_it>
 800de96:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800de9a:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 800de9e:	e006      	b.n	800deae <read_submessage_list+0x16a>
 800dea0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800dea2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800dea4:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800dea8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800deaa:	6818      	ldr	r0, [r3, #0]
 800deac:	47c8      	blx	r9
 800deae:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 800deb2:	aa0f      	add	r2, sp, #60	@ 0x3c
 800deb4:	4651      	mov	r1, sl
 800deb6:	4638      	mov	r0, r7
 800deb8:	f007 fd2c 	bl	8015914 <uxr_next_reliable_nack_buffer_to_send>
 800debc:	2800      	cmp	r0, #0
 800debe:	d1ef      	bne.n	800dea0 <read_submessage_list+0x15c>
 800dec0:	e749      	b.n	800dd56 <read_submessage_list+0x12>
 800dec2:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 800dec6:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 800deca:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800dece:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 800ded2:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 800ded6:	4651      	mov	r1, sl
 800ded8:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800dedc:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 800dee0:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 800dee4:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 800dee8:	4628      	mov	r0, r5
 800deea:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 800deee:	f001 fe49 	bl	800fb84 <uxr_deserialize_BaseObjectRequest>
 800def2:	4650      	mov	r0, sl
 800def4:	a90f      	add	r1, sp, #60	@ 0x3c
 800def6:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 800defa:	f000 fdc7 	bl	800ea8c <uxr_parse_base_object_request>
 800defe:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 800df02:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800df04:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 800df08:	9110      	str	r1, [sp, #64]	@ 0x40
 800df0a:	3f04      	subs	r7, #4
 800df0c:	f009 090e 	and.w	r9, r9, #14
 800df10:	b2bf      	uxth	r7, r7
 800df12:	f1bb 0f00 	cmp.w	fp, #0
 800df16:	d006      	beq.n	800df26 <read_submessage_list+0x1e2>
 800df18:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800df1c:	9300      	str	r3, [sp, #0]
 800df1e:	4652      	mov	r2, sl
 800df20:	2300      	movs	r3, #0
 800df22:	4620      	mov	r0, r4
 800df24:	47d8      	blx	fp
 800df26:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800df28:	b16a      	cbz	r2, 800df46 <read_submessage_list+0x202>
 800df2a:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800df2c:	2100      	movs	r1, #0
 800df2e:	3802      	subs	r0, #2
 800df30:	e002      	b.n	800df38 <read_submessage_list+0x1f4>
 800df32:	3101      	adds	r1, #1
 800df34:	4291      	cmp	r1, r2
 800df36:	d006      	beq.n	800df46 <read_submessage_list+0x202>
 800df38:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800df3c:	4553      	cmp	r3, sl
 800df3e:	d1f8      	bne.n	800df32 <read_submessage_list+0x1ee>
 800df40:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800df42:	2200      	movs	r2, #0
 800df44:	545a      	strb	r2, [r3, r1]
 800df46:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 800df4a:	9102      	str	r1, [sp, #8]
 800df4c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800df4e:	9101      	str	r1, [sp, #4]
 800df50:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800df52:	9100      	str	r1, [sp, #0]
 800df54:	464b      	mov	r3, r9
 800df56:	463a      	mov	r2, r7
 800df58:	4629      	mov	r1, r5
 800df5a:	4620      	mov	r0, r4
 800df5c:	f7ff fc4c 	bl	800d7f8 <read_submessage_format>
 800df60:	e6f9      	b.n	800dd56 <read_submessage_list+0x12>
 800df62:	4629      	mov	r1, r5
 800df64:	4620      	mov	r0, r4
 800df66:	f7ff fea5 	bl	800dcb4 <read_submessage_info>
 800df6a:	e6f4      	b.n	800dd56 <read_submessage_list+0x12>
 800df6c:	2a00      	cmp	r2, #0
 800df6e:	d03e      	beq.n	800dfee <read_submessage_list+0x2aa>
 800df70:	a910      	add	r1, sp, #64	@ 0x40
 800df72:	4628      	mov	r0, r5
 800df74:	f002 f802 	bl	800ff7c <uxr_deserialize_STATUS_Payload>
 800df78:	a90e      	add	r1, sp, #56	@ 0x38
 800df7a:	aa0d      	add	r2, sp, #52	@ 0x34
 800df7c:	a810      	add	r0, sp, #64	@ 0x40
 800df7e:	f000 fd85 	bl	800ea8c <uxr_parse_base_object_request>
 800df82:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 800df86:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800df88:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 800df8c:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 800df90:	910f      	str	r1, [sp, #60]	@ 0x3c
 800df92:	f1ba 0f00 	cmp.w	sl, #0
 800df96:	d006      	beq.n	800dfa6 <read_submessage_list+0x262>
 800df98:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800df9c:	9300      	str	r3, [sp, #0]
 800df9e:	463a      	mov	r2, r7
 800dfa0:	464b      	mov	r3, r9
 800dfa2:	4620      	mov	r0, r4
 800dfa4:	47d0      	blx	sl
 800dfa6:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800dfa8:	2a00      	cmp	r2, #0
 800dfaa:	f43f aed4 	beq.w	800dd56 <read_submessage_list+0x12>
 800dfae:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800dfb0:	2100      	movs	r1, #0
 800dfb2:	3802      	subs	r0, #2
 800dfb4:	e003      	b.n	800dfbe <read_submessage_list+0x27a>
 800dfb6:	3101      	adds	r1, #1
 800dfb8:	4291      	cmp	r1, r2
 800dfba:	f43f aecc 	beq.w	800dd56 <read_submessage_list+0x12>
 800dfbe:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800dfc2:	42bb      	cmp	r3, r7
 800dfc4:	d1f7      	bne.n	800dfb6 <read_submessage_list+0x272>
 800dfc6:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800dfc8:	f803 9001 	strb.w	r9, [r3, r1]
 800dfcc:	e6c3      	b.n	800dd56 <read_submessage_list+0x12>
 800dfce:	2a00      	cmp	r2, #0
 800dfd0:	f47f aec1 	bne.w	800dd56 <read_submessage_list+0x12>
 800dfd4:	4629      	mov	r1, r5
 800dfd6:	4620      	mov	r0, r4
 800dfd8:	f000 fc9e 	bl	800e918 <uxr_read_create_session_status>
 800dfdc:	e6bb      	b.n	800dd56 <read_submessage_list+0x12>
 800dfde:	4629      	mov	r1, r5
 800dfe0:	4620      	mov	r0, r4
 800dfe2:	f7ff fcf5 	bl	800d9d0 <read_submessage_get_info>
 800dfe6:	e6b6      	b.n	800dd56 <read_submessage_list+0x12>
 800dfe8:	b017      	add	sp, #92	@ 0x5c
 800dfea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfee:	4629      	mov	r1, r5
 800dff0:	4620      	mov	r0, r4
 800dff2:	f000 fc9d 	bl	800e930 <uxr_read_delete_session_status>
 800dff6:	e6ae      	b.n	800dd56 <read_submessage_list+0x12>
 800dff8:	f000 fef2 	bl	800ede0 <uxr_nanos>
 800dffc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800dffe:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800e000:	464f      	mov	r7, r9
 800e002:	fbc3 2706 	smlal	r2, r7, r3, r6
 800e006:	1812      	adds	r2, r2, r0
 800e008:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e00a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800e00c:	eb47 0101 	adc.w	r1, r7, r1
 800e010:	464f      	mov	r7, r9
 800e012:	fbc3 0706 	smlal	r0, r7, r3, r6
 800e016:	463b      	mov	r3, r7
 800e018:	4684      	mov	ip, r0
 800e01a:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 800e01e:	fbc7 0906 	smlal	r0, r9, r7, r6
 800e022:	eb1c 0c00 	adds.w	ip, ip, r0
 800e026:	464f      	mov	r7, r9
 800e028:	eb43 0307 	adc.w	r3, r3, r7
 800e02c:	ebb2 0c0c 	subs.w	ip, r2, ip
 800e030:	eb61 0303 	sbc.w	r3, r1, r3
 800e034:	0fda      	lsrs	r2, r3, #31
 800e036:	eb12 020c 	adds.w	r2, r2, ip
 800e03a:	f143 0300 	adc.w	r3, r3, #0
 800e03e:	0852      	lsrs	r2, r2, #1
 800e040:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800e044:	105b      	asrs	r3, r3, #1
 800e046:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 800e04a:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 800e04e:	e6dd      	b.n	800de0c <read_submessage_list+0xc8>
 800e050:	3b9aca00 	.word	0x3b9aca00

0800e054 <listen_message_reliably>:
 800e054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e058:	1e0b      	subs	r3, r1, #0
 800e05a:	b09d      	sub	sp, #116	@ 0x74
 800e05c:	bfb8      	it	lt
 800e05e:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 800e062:	4680      	mov	r8, r0
 800e064:	9305      	str	r3, [sp, #20]
 800e066:	f000 fea1 	bl	800edac <uxr_millis>
 800e06a:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 800e06e:	4681      	mov	r9, r0
 800e070:	2a00      	cmp	r2, #0
 800e072:	f000 80a1 	beq.w	800e1b8 <listen_message_reliably+0x164>
 800e076:	2600      	movs	r6, #0
 800e078:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800e07c:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800e080:	9303      	str	r3, [sp, #12]
 800e082:	4630      	mov	r0, r6
 800e084:	460f      	mov	r7, r1
 800e086:	e00f      	b.n	800e0a8 <listen_message_reliably+0x54>
 800e088:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800e08c:	9903      	ldr	r1, [sp, #12]
 800e08e:	455a      	cmp	r2, fp
 800e090:	f106 0601 	add.w	r6, r6, #1
 800e094:	eb73 0101 	sbcs.w	r1, r3, r1
 800e098:	b2f0      	uxtb	r0, r6
 800e09a:	da01      	bge.n	800e0a0 <listen_message_reliably+0x4c>
 800e09c:	4693      	mov	fp, r2
 800e09e:	9303      	str	r3, [sp, #12]
 800e0a0:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800e0a4:	4283      	cmp	r3, r0
 800e0a6:	d960      	bls.n	800e16a <listen_message_reliably+0x116>
 800e0a8:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800e0ac:	2102      	movs	r1, #2
 800e0ae:	2201      	movs	r2, #1
 800e0b0:	f000 fcfe 	bl	800eab0 <uxr_stream_id>
 800e0b4:	00e4      	lsls	r4, r4, #3
 800e0b6:	f104 0520 	add.w	r5, r4, #32
 800e0ba:	4445      	add	r5, r8
 800e0bc:	4601      	mov	r1, r0
 800e0be:	463b      	mov	r3, r7
 800e0c0:	464a      	mov	r2, r9
 800e0c2:	4628      	mov	r0, r5
 800e0c4:	9109      	str	r1, [sp, #36]	@ 0x24
 800e0c6:	f007 fbf9 	bl	80158bc <uxr_update_output_stream_heartbeat_timestamp>
 800e0ca:	eb08 0304 	add.w	r3, r8, r4
 800e0ce:	2800      	cmp	r0, #0
 800e0d0:	d0da      	beq.n	800e088 <listen_message_reliably+0x34>
 800e0d2:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800e0d6:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 800e0da:	9304      	str	r3, [sp, #16]
 800e0dc:	4640      	mov	r0, r8
 800e0de:	f000 fcaf 	bl	800ea40 <uxr_session_header_offset>
 800e0e2:	3501      	adds	r5, #1
 800e0e4:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 800e0e8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800e0ec:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	2211      	movs	r2, #17
 800e0f4:	9000      	str	r0, [sp, #0]
 800e0f6:	a90c      	add	r1, sp, #48	@ 0x30
 800e0f8:	4650      	mov	r0, sl
 800e0fa:	f7ff f80b 	bl	800d114 <ucdr_init_buffer_origin_offset>
 800e0fe:	2300      	movs	r3, #0
 800e100:	2205      	movs	r2, #5
 800e102:	210b      	movs	r1, #11
 800e104:	4650      	mov	r0, sl
 800e106:	f000 fe0b 	bl	800ed20 <uxr_buffer_submessage_header>
 800e10a:	8968      	ldrh	r0, [r5, #10]
 800e10c:	2101      	movs	r1, #1
 800e10e:	f007 fc97 	bl	8015a40 <uxr_seq_num_add>
 800e112:	892b      	ldrh	r3, [r5, #8]
 800e114:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800e118:	4602      	mov	r2, r0
 800e11a:	9b04      	ldr	r3, [sp, #16]
 800e11c:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800e120:	a90a      	add	r1, sp, #40	@ 0x28
 800e122:	4650      	mov	r0, sl
 800e124:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 800e128:	f001 ffe0 	bl	80100ec <uxr_serialize_HEARTBEAT_Payload>
 800e12c:	2200      	movs	r2, #0
 800e12e:	4611      	mov	r1, r2
 800e130:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e132:	4640      	mov	r0, r8
 800e134:	f000 fc2e 	bl	800e994 <uxr_stamp_session_header>
 800e138:	4650      	mov	r0, sl
 800e13a:	f7ff f829 	bl	800d190 <ucdr_buffer_length>
 800e13e:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800e142:	4602      	mov	r2, r0
 800e144:	a90c      	add	r1, sp, #48	@ 0x30
 800e146:	e9d3 0500 	ldrd	r0, r5, [r3]
 800e14a:	4444      	add	r4, r8
 800e14c:	47a8      	blx	r5
 800e14e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 800e152:	9903      	ldr	r1, [sp, #12]
 800e154:	455a      	cmp	r2, fp
 800e156:	f106 0601 	add.w	r6, r6, #1
 800e15a:	eb73 0101 	sbcs.w	r1, r3, r1
 800e15e:	b2f0      	uxtb	r0, r6
 800e160:	db9c      	blt.n	800e09c <listen_message_reliably+0x48>
 800e162:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800e166:	4283      	cmp	r3, r0
 800e168:	d89e      	bhi.n	800e0a8 <listen_message_reliably+0x54>
 800e16a:	9a03      	ldr	r2, [sp, #12]
 800e16c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800e170:	429a      	cmp	r2, r3
 800e172:	bf08      	it	eq
 800e174:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 800e178:	d01e      	beq.n	800e1b8 <listen_message_reliably+0x164>
 800e17a:	ebab 0309 	sub.w	r3, fp, r9
 800e17e:	9905      	ldr	r1, [sp, #20]
 800e180:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 800e184:	2b00      	cmp	r3, #0
 800e186:	bf08      	it	eq
 800e188:	2301      	moveq	r3, #1
 800e18a:	4299      	cmp	r1, r3
 800e18c:	bfa8      	it	ge
 800e18e:	4619      	movge	r1, r3
 800e190:	6894      	ldr	r4, [r2, #8]
 800e192:	6810      	ldr	r0, [r2, #0]
 800e194:	4689      	mov	r9, r1
 800e196:	460b      	mov	r3, r1
 800e198:	aa08      	add	r2, sp, #32
 800e19a:	a907      	add	r1, sp, #28
 800e19c:	47a0      	blx	r4
 800e19e:	b968      	cbnz	r0, 800e1bc <listen_message_reliably+0x168>
 800e1a0:	9b05      	ldr	r3, [sp, #20]
 800e1a2:	eba3 0309 	sub.w	r3, r3, r9
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	9305      	str	r3, [sp, #20]
 800e1aa:	f73f af5c 	bgt.w	800e066 <listen_message_reliably+0x12>
 800e1ae:	4604      	mov	r4, r0
 800e1b0:	4620      	mov	r0, r4
 800e1b2:	b01d      	add	sp, #116	@ 0x74
 800e1b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1b8:	9b05      	ldr	r3, [sp, #20]
 800e1ba:	e7e0      	b.n	800e17e <listen_message_reliably+0x12a>
 800e1bc:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800e1c0:	4604      	mov	r4, r0
 800e1c2:	a80c      	add	r0, sp, #48	@ 0x30
 800e1c4:	f7fe ffb8 	bl	800d138 <ucdr_init_buffer>
 800e1c8:	2500      	movs	r5, #0
 800e1ca:	f10d 031a 	add.w	r3, sp, #26
 800e1ce:	aa06      	add	r2, sp, #24
 800e1d0:	a90c      	add	r1, sp, #48	@ 0x30
 800e1d2:	4640      	mov	r0, r8
 800e1d4:	f88d 5018 	strb.w	r5, [sp, #24]
 800e1d8:	f000 fbf0 	bl	800e9bc <uxr_read_session_header>
 800e1dc:	b918      	cbnz	r0, 800e1e6 <listen_message_reliably+0x192>
 800e1de:	4620      	mov	r0, r4
 800e1e0:	b01d      	add	sp, #116	@ 0x74
 800e1e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1e6:	4629      	mov	r1, r5
 800e1e8:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800e1ec:	f000 fc8a 	bl	800eb04 <uxr_stream_id_from_raw>
 800e1f0:	f3c0 4507 	ubfx	r5, r0, #16, #8
 800e1f4:	2d01      	cmp	r5, #1
 800e1f6:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800e1fa:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 800e1fe:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800e202:	d04b      	beq.n	800e29c <listen_message_reliably+0x248>
 800e204:	2d02      	cmp	r5, #2
 800e206:	d00f      	beq.n	800e228 <listen_message_reliably+0x1d4>
 800e208:	2d00      	cmp	r5, #0
 800e20a:	d1e8      	bne.n	800e1de <listen_message_reliably+0x18a>
 800e20c:	4629      	mov	r1, r5
 800e20e:	4628      	mov	r0, r5
 800e210:	f000 fc78 	bl	800eb04 <uxr_stream_id_from_raw>
 800e214:	a90c      	add	r1, sp, #48	@ 0x30
 800e216:	4602      	mov	r2, r0
 800e218:	4640      	mov	r0, r8
 800e21a:	920a      	str	r2, [sp, #40]	@ 0x28
 800e21c:	f7ff fd92 	bl	800dd44 <read_submessage_list>
 800e220:	4620      	mov	r0, r4
 800e222:	b01d      	add	sp, #116	@ 0x74
 800e224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e228:	4631      	mov	r1, r6
 800e22a:	f108 0008 	add.w	r0, r8, #8
 800e22e:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 800e232:	f000 fd55 	bl	800ece0 <uxr_get_input_reliable_stream>
 800e236:	4607      	mov	r7, r0
 800e238:	b338      	cbz	r0, 800e28a <listen_message_reliably+0x236>
 800e23a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e23c:	9203      	str	r2, [sp, #12]
 800e23e:	a80c      	add	r0, sp, #48	@ 0x30
 800e240:	f7fe ffaa 	bl	800d198 <ucdr_buffer_remaining>
 800e244:	4603      	mov	r3, r0
 800e246:	f10d 0019 	add.w	r0, sp, #25
 800e24a:	9000      	str	r0, [sp, #0]
 800e24c:	9a03      	ldr	r2, [sp, #12]
 800e24e:	4651      	mov	r1, sl
 800e250:	4638      	mov	r0, r7
 800e252:	f006 ff49 	bl	80150e8 <uxr_receive_reliable_message>
 800e256:	b1c0      	cbz	r0, 800e28a <listen_message_reliably+0x236>
 800e258:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800e25c:	b393      	cbz	r3, 800e2c4 <listen_message_reliably+0x270>
 800e25e:	ad14      	add	r5, sp, #80	@ 0x50
 800e260:	f04f 0a02 	mov.w	sl, #2
 800e264:	e00a      	b.n	800e27c <listen_message_reliably+0x228>
 800e266:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 800e26a:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 800e26e:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 800e272:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e274:	4629      	mov	r1, r5
 800e276:	4640      	mov	r0, r8
 800e278:	f7ff fd64 	bl	800dd44 <read_submessage_list>
 800e27c:	2204      	movs	r2, #4
 800e27e:	4629      	mov	r1, r5
 800e280:	4638      	mov	r0, r7
 800e282:	f006 ffb1 	bl	80151e8 <uxr_next_input_reliable_buffer_available>
 800e286:	2800      	cmp	r0, #0
 800e288:	d1ed      	bne.n	800e266 <listen_message_reliably+0x212>
 800e28a:	4640      	mov	r0, r8
 800e28c:	4632      	mov	r2, r6
 800e28e:	4649      	mov	r1, r9
 800e290:	f7ff fbd4 	bl	800da3c <write_submessage_acknack.isra.0>
 800e294:	4620      	mov	r0, r4
 800e296:	b01d      	add	sp, #116	@ 0x74
 800e298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e29c:	4631      	mov	r1, r6
 800e29e:	f108 0008 	add.w	r0, r8, #8
 800e2a2:	f000 fd13 	bl	800eccc <uxr_get_input_best_effort_stream>
 800e2a6:	2800      	cmp	r0, #0
 800e2a8:	d099      	beq.n	800e1de <listen_message_reliably+0x18a>
 800e2aa:	4651      	mov	r1, sl
 800e2ac:	f006 fe88 	bl	8014fc0 <uxr_receive_best_effort_message>
 800e2b0:	2800      	cmp	r0, #0
 800e2b2:	d094      	beq.n	800e1de <listen_message_reliably+0x18a>
 800e2b4:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800e2b8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e2ba:	a90c      	add	r1, sp, #48	@ 0x30
 800e2bc:	4640      	mov	r0, r8
 800e2be:	f7ff fd41 	bl	800dd44 <read_submessage_list>
 800e2c2:	e78c      	b.n	800e1de <listen_message_reliably+0x18a>
 800e2c4:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800e2c8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e2ca:	a90c      	add	r1, sp, #48	@ 0x30
 800e2cc:	4640      	mov	r0, r8
 800e2ce:	f7ff fd39 	bl	800dd44 <read_submessage_list>
 800e2d2:	e7c4      	b.n	800e25e <listen_message_reliably+0x20a>

0800e2d4 <uxr_run_session_timeout>:
 800e2d4:	b570      	push	{r4, r5, r6, lr}
 800e2d6:	4604      	mov	r4, r0
 800e2d8:	460d      	mov	r5, r1
 800e2da:	f000 fd67 	bl	800edac <uxr_millis>
 800e2de:	4606      	mov	r6, r0
 800e2e0:	4620      	mov	r0, r4
 800e2e2:	f7ff fc71 	bl	800dbc8 <uxr_flash_output_streams>
 800e2e6:	4629      	mov	r1, r5
 800e2e8:	4620      	mov	r0, r4
 800e2ea:	f7ff feb3 	bl	800e054 <listen_message_reliably>
 800e2ee:	f000 fd5d 	bl	800edac <uxr_millis>
 800e2f2:	1b83      	subs	r3, r0, r6
 800e2f4:	1ae9      	subs	r1, r5, r3
 800e2f6:	2900      	cmp	r1, #0
 800e2f8:	dcf6      	bgt.n	800e2e8 <uxr_run_session_timeout+0x14>
 800e2fa:	f104 0008 	add.w	r0, r4, #8
 800e2fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e302:	f000 bcf7 	b.w	800ecf4 <uxr_output_streams_confirmed>
 800e306:	bf00      	nop

0800e308 <uxr_run_session_until_data>:
 800e308:	b570      	push	{r4, r5, r6, lr}
 800e30a:	4604      	mov	r4, r0
 800e30c:	460d      	mov	r5, r1
 800e30e:	f000 fd4d 	bl	800edac <uxr_millis>
 800e312:	4606      	mov	r6, r0
 800e314:	4620      	mov	r0, r4
 800e316:	f7ff fc57 	bl	800dbc8 <uxr_flash_output_streams>
 800e31a:	2300      	movs	r3, #0
 800e31c:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 800e320:	4629      	mov	r1, r5
 800e322:	e005      	b.n	800e330 <uxr_run_session_until_data+0x28>
 800e324:	f000 fd42 	bl	800edac <uxr_millis>
 800e328:	1b83      	subs	r3, r0, r6
 800e32a:	1ae9      	subs	r1, r5, r3
 800e32c:	2900      	cmp	r1, #0
 800e32e:	dd07      	ble.n	800e340 <uxr_run_session_until_data+0x38>
 800e330:	4620      	mov	r0, r4
 800e332:	f7ff fe8f 	bl	800e054 <listen_message_reliably>
 800e336:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800e33a:	2800      	cmp	r0, #0
 800e33c:	d0f2      	beq.n	800e324 <uxr_run_session_until_data+0x1c>
 800e33e:	bd70      	pop	{r4, r5, r6, pc}
 800e340:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800e344:	bd70      	pop	{r4, r5, r6, pc}
 800e346:	bf00      	nop

0800e348 <uxr_run_session_until_confirm_delivery>:
 800e348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e34c:	4606      	mov	r6, r0
 800e34e:	460d      	mov	r5, r1
 800e350:	f000 fd2c 	bl	800edac <uxr_millis>
 800e354:	4607      	mov	r7, r0
 800e356:	4630      	mov	r0, r6
 800e358:	f7ff fc36 	bl	800dbc8 <uxr_flash_output_streams>
 800e35c:	2d00      	cmp	r5, #0
 800e35e:	f106 0808 	add.w	r8, r6, #8
 800e362:	bfa8      	it	ge
 800e364:	462c      	movge	r4, r5
 800e366:	da07      	bge.n	800e378 <uxr_run_session_until_confirm_delivery+0x30>
 800e368:	e00e      	b.n	800e388 <uxr_run_session_until_confirm_delivery+0x40>
 800e36a:	f7ff fe73 	bl	800e054 <listen_message_reliably>
 800e36e:	f000 fd1d 	bl	800edac <uxr_millis>
 800e372:	1bc3      	subs	r3, r0, r7
 800e374:	1aec      	subs	r4, r5, r3
 800e376:	d407      	bmi.n	800e388 <uxr_run_session_until_confirm_delivery+0x40>
 800e378:	4640      	mov	r0, r8
 800e37a:	f000 fcbb 	bl	800ecf4 <uxr_output_streams_confirmed>
 800e37e:	4603      	mov	r3, r0
 800e380:	4621      	mov	r1, r4
 800e382:	4630      	mov	r0, r6
 800e384:	2b00      	cmp	r3, #0
 800e386:	d0f0      	beq.n	800e36a <uxr_run_session_until_confirm_delivery+0x22>
 800e388:	4640      	mov	r0, r8
 800e38a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e38e:	f000 bcb1 	b.w	800ecf4 <uxr_output_streams_confirmed>
 800e392:	bf00      	nop

0800e394 <uxr_run_session_until_all_status>:
 800e394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e398:	9c08      	ldr	r4, [sp, #32]
 800e39a:	4606      	mov	r6, r0
 800e39c:	460f      	mov	r7, r1
 800e39e:	4691      	mov	r9, r2
 800e3a0:	461d      	mov	r5, r3
 800e3a2:	f7ff fc11 	bl	800dbc8 <uxr_flash_output_streams>
 800e3a6:	b124      	cbz	r4, 800e3b2 <uxr_run_session_until_all_status+0x1e>
 800e3a8:	4622      	mov	r2, r4
 800e3aa:	21ff      	movs	r1, #255	@ 0xff
 800e3ac:	4628      	mov	r0, r5
 800e3ae:	f009 fd0b 	bl	8017dc8 <memset>
 800e3b2:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 800e3b6:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800e3b8:	f000 fcf8 	bl	800edac <uxr_millis>
 800e3bc:	3d01      	subs	r5, #1
 800e3be:	f1a9 0902 	sub.w	r9, r9, #2
 800e3c2:	4680      	mov	r8, r0
 800e3c4:	4639      	mov	r1, r7
 800e3c6:	4630      	mov	r0, r6
 800e3c8:	f7ff fe44 	bl	800e054 <listen_message_reliably>
 800e3cc:	f000 fcee 	bl	800edac <uxr_millis>
 800e3d0:	eba0 0008 	sub.w	r0, r0, r8
 800e3d4:	1a39      	subs	r1, r7, r0
 800e3d6:	b344      	cbz	r4, 800e42a <uxr_run_session_until_all_status+0x96>
 800e3d8:	4628      	mov	r0, r5
 800e3da:	46ac      	mov	ip, r5
 800e3dc:	2301      	movs	r3, #1
 800e3de:	e002      	b.n	800e3e6 <uxr_run_session_until_all_status+0x52>
 800e3e0:	42a3      	cmp	r3, r4
 800e3e2:	d20d      	bcs.n	800e400 <uxr_run_session_until_all_status+0x6c>
 800e3e4:	3301      	adds	r3, #1
 800e3e6:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 800e3ea:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 800e3ee:	d1f7      	bne.n	800e3e0 <uxr_run_session_until_all_status+0x4c>
 800e3f0:	42a3      	cmp	r3, r4
 800e3f2:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 800e3f6:	d213      	bcs.n	800e420 <uxr_run_session_until_all_status+0x8c>
 800e3f8:	2a00      	cmp	r2, #0
 800e3fa:	d0f3      	beq.n	800e3e4 <uxr_run_session_until_all_status+0x50>
 800e3fc:	2900      	cmp	r1, #0
 800e3fe:	dce2      	bgt.n	800e3c6 <uxr_run_session_until_all_status+0x32>
 800e400:	2300      	movs	r3, #0
 800e402:	67f3      	str	r3, [r6, #124]	@ 0x7c
 800e404:	442c      	add	r4, r5
 800e406:	e001      	b.n	800e40c <uxr_run_session_until_all_status+0x78>
 800e408:	2b01      	cmp	r3, #1
 800e40a:	d812      	bhi.n	800e432 <uxr_run_session_until_all_status+0x9e>
 800e40c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800e410:	4284      	cmp	r4, r0
 800e412:	d1f9      	bne.n	800e408 <uxr_run_session_until_all_status+0x74>
 800e414:	2b01      	cmp	r3, #1
 800e416:	bf8c      	ite	hi
 800e418:	2000      	movhi	r0, #0
 800e41a:	2001      	movls	r0, #1
 800e41c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e420:	2900      	cmp	r1, #0
 800e422:	dded      	ble.n	800e400 <uxr_run_session_until_all_status+0x6c>
 800e424:	2a00      	cmp	r2, #0
 800e426:	d1ce      	bne.n	800e3c6 <uxr_run_session_until_all_status+0x32>
 800e428:	e7ea      	b.n	800e400 <uxr_run_session_until_all_status+0x6c>
 800e42a:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800e42c:	2001      	movs	r0, #1
 800e42e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e432:	2000      	movs	r0, #0
 800e434:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800e438 <wait_session_status>:
 800e438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e43c:	4604      	mov	r4, r0
 800e43e:	b09d      	sub	sp, #116	@ 0x74
 800e440:	20ff      	movs	r0, #255	@ 0xff
 800e442:	7160      	strb	r0, [r4, #5]
 800e444:	9303      	str	r3, [sp, #12]
 800e446:	2b00      	cmp	r3, #0
 800e448:	f000 80b6 	beq.w	800e5b8 <wait_session_status+0x180>
 800e44c:	468a      	mov	sl, r1
 800e44e:	4691      	mov	r9, r2
 800e450:	f04f 0b00 	mov.w	fp, #0
 800e454:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e456:	464a      	mov	r2, r9
 800e458:	e9d3 0500 	ldrd	r0, r5, [r3]
 800e45c:	4651      	mov	r1, sl
 800e45e:	47a8      	blx	r5
 800e460:	f000 fca4 	bl	800edac <uxr_millis>
 800e464:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800e468:	4605      	mov	r5, r0
 800e46a:	e009      	b.n	800e480 <wait_session_status+0x48>
 800e46c:	f000 fc9e 	bl	800edac <uxr_millis>
 800e470:	1b40      	subs	r0, r0, r5
 800e472:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800e476:	2b00      	cmp	r3, #0
 800e478:	dd40      	ble.n	800e4fc <wait_session_status+0xc4>
 800e47a:	7960      	ldrb	r0, [r4, #5]
 800e47c:	28ff      	cmp	r0, #255	@ 0xff
 800e47e:	d145      	bne.n	800e50c <wait_session_status+0xd4>
 800e480:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800e482:	a908      	add	r1, sp, #32
 800e484:	6896      	ldr	r6, [r2, #8]
 800e486:	6810      	ldr	r0, [r2, #0]
 800e488:	aa09      	add	r2, sp, #36	@ 0x24
 800e48a:	47b0      	blx	r6
 800e48c:	2800      	cmp	r0, #0
 800e48e:	d0ed      	beq.n	800e46c <wait_session_status+0x34>
 800e490:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800e494:	a80c      	add	r0, sp, #48	@ 0x30
 800e496:	f7fe fe4f 	bl	800d138 <ucdr_init_buffer>
 800e49a:	2600      	movs	r6, #0
 800e49c:	f10d 031e 	add.w	r3, sp, #30
 800e4a0:	aa07      	add	r2, sp, #28
 800e4a2:	a90c      	add	r1, sp, #48	@ 0x30
 800e4a4:	4620      	mov	r0, r4
 800e4a6:	f88d 601c 	strb.w	r6, [sp, #28]
 800e4aa:	f000 fa87 	bl	800e9bc <uxr_read_session_header>
 800e4ae:	2800      	cmp	r0, #0
 800e4b0:	d0dc      	beq.n	800e46c <wait_session_status+0x34>
 800e4b2:	4631      	mov	r1, r6
 800e4b4:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800e4b8:	f000 fb24 	bl	800eb04 <uxr_stream_id_from_raw>
 800e4bc:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800e4c0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800e4c4:	9302      	str	r3, [sp, #8]
 800e4c6:	2f01      	cmp	r7, #1
 800e4c8:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 800e4cc:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800e4d0:	d05c      	beq.n	800e58c <wait_session_status+0x154>
 800e4d2:	2f02      	cmp	r7, #2
 800e4d4:	d020      	beq.n	800e518 <wait_session_status+0xe0>
 800e4d6:	2f00      	cmp	r7, #0
 800e4d8:	d1c8      	bne.n	800e46c <wait_session_status+0x34>
 800e4da:	4639      	mov	r1, r7
 800e4dc:	4638      	mov	r0, r7
 800e4de:	f000 fb11 	bl	800eb04 <uxr_stream_id_from_raw>
 800e4e2:	a90c      	add	r1, sp, #48	@ 0x30
 800e4e4:	4602      	mov	r2, r0
 800e4e6:	900b      	str	r0, [sp, #44]	@ 0x2c
 800e4e8:	4620      	mov	r0, r4
 800e4ea:	f7ff fc2b 	bl	800dd44 <read_submessage_list>
 800e4ee:	f000 fc5d 	bl	800edac <uxr_millis>
 800e4f2:	1b40      	subs	r0, r0, r5
 800e4f4:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	dcbe      	bgt.n	800e47a <wait_session_status+0x42>
 800e4fc:	9b03      	ldr	r3, [sp, #12]
 800e4fe:	7960      	ldrb	r0, [r4, #5]
 800e500:	f10b 0b01 	add.w	fp, fp, #1
 800e504:	455b      	cmp	r3, fp
 800e506:	d001      	beq.n	800e50c <wait_session_status+0xd4>
 800e508:	28ff      	cmp	r0, #255	@ 0xff
 800e50a:	d0a3      	beq.n	800e454 <wait_session_status+0x1c>
 800e50c:	38ff      	subs	r0, #255	@ 0xff
 800e50e:	bf18      	it	ne
 800e510:	2001      	movne	r0, #1
 800e512:	b01d      	add	sp, #116	@ 0x74
 800e514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e518:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 800e51c:	9304      	str	r3, [sp, #16]
 800e51e:	4631      	mov	r1, r6
 800e520:	f104 0008 	add.w	r0, r4, #8
 800e524:	f000 fbdc 	bl	800ece0 <uxr_get_input_reliable_stream>
 800e528:	4680      	mov	r8, r0
 800e52a:	b348      	cbz	r0, 800e580 <wait_session_status+0x148>
 800e52c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e52e:	9205      	str	r2, [sp, #20]
 800e530:	a80c      	add	r0, sp, #48	@ 0x30
 800e532:	f7fe fe31 	bl	800d198 <ucdr_buffer_remaining>
 800e536:	4603      	mov	r3, r0
 800e538:	f10d 001d 	add.w	r0, sp, #29
 800e53c:	9000      	str	r0, [sp, #0]
 800e53e:	9a05      	ldr	r2, [sp, #20]
 800e540:	9902      	ldr	r1, [sp, #8]
 800e542:	4640      	mov	r0, r8
 800e544:	f006 fdd0 	bl	80150e8 <uxr_receive_reliable_message>
 800e548:	b1d0      	cbz	r0, 800e580 <wait_session_status+0x148>
 800e54a:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d03a      	beq.n	800e5c8 <wait_session_status+0x190>
 800e552:	9f04      	ldr	r7, [sp, #16]
 800e554:	e00a      	b.n	800e56c <wait_session_status+0x134>
 800e556:	f04f 0302 	mov.w	r3, #2
 800e55a:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 800e55e:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 800e562:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 800e566:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e568:	f7ff fbec 	bl	800dd44 <read_submessage_list>
 800e56c:	a914      	add	r1, sp, #80	@ 0x50
 800e56e:	2204      	movs	r2, #4
 800e570:	4640      	mov	r0, r8
 800e572:	f006 fe39 	bl	80151e8 <uxr_next_input_reliable_buffer_available>
 800e576:	4603      	mov	r3, r0
 800e578:	a914      	add	r1, sp, #80	@ 0x50
 800e57a:	4620      	mov	r0, r4
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d1ea      	bne.n	800e556 <wait_session_status+0x11e>
 800e580:	9904      	ldr	r1, [sp, #16]
 800e582:	4632      	mov	r2, r6
 800e584:	4620      	mov	r0, r4
 800e586:	f7ff fa59 	bl	800da3c <write_submessage_acknack.isra.0>
 800e58a:	e76f      	b.n	800e46c <wait_session_status+0x34>
 800e58c:	4631      	mov	r1, r6
 800e58e:	f104 0008 	add.w	r0, r4, #8
 800e592:	f000 fb9b 	bl	800eccc <uxr_get_input_best_effort_stream>
 800e596:	2800      	cmp	r0, #0
 800e598:	f43f af68 	beq.w	800e46c <wait_session_status+0x34>
 800e59c:	9902      	ldr	r1, [sp, #8]
 800e59e:	f006 fd0f 	bl	8014fc0 <uxr_receive_best_effort_message>
 800e5a2:	2800      	cmp	r0, #0
 800e5a4:	f43f af62 	beq.w	800e46c <wait_session_status+0x34>
 800e5a8:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800e5ac:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e5ae:	a90c      	add	r1, sp, #48	@ 0x30
 800e5b0:	4620      	mov	r0, r4
 800e5b2:	f7ff fbc7 	bl	800dd44 <read_submessage_list>
 800e5b6:	e759      	b.n	800e46c <wait_session_status+0x34>
 800e5b8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e5ba:	e9d3 0400 	ldrd	r0, r4, [r3]
 800e5be:	47a0      	blx	r4
 800e5c0:	2001      	movs	r0, #1
 800e5c2:	b01d      	add	sp, #116	@ 0x74
 800e5c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5c8:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800e5cc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e5ce:	a90c      	add	r1, sp, #48	@ 0x30
 800e5d0:	4620      	mov	r0, r4
 800e5d2:	f7ff fbb7 	bl	800dd44 <read_submessage_list>
 800e5d6:	e7bc      	b.n	800e552 <wait_session_status+0x11a>

0800e5d8 <uxr_delete_session_retries>:
 800e5d8:	b530      	push	{r4, r5, lr}
 800e5da:	b08f      	sub	sp, #60	@ 0x3c
 800e5dc:	4604      	mov	r4, r0
 800e5de:	460d      	mov	r5, r1
 800e5e0:	f000 fa2e 	bl	800ea40 <uxr_session_header_offset>
 800e5e4:	2300      	movs	r3, #0
 800e5e6:	2210      	movs	r2, #16
 800e5e8:	9000      	str	r0, [sp, #0]
 800e5ea:	a902      	add	r1, sp, #8
 800e5ec:	a806      	add	r0, sp, #24
 800e5ee:	f7fe fd91 	bl	800d114 <ucdr_init_buffer_origin_offset>
 800e5f2:	a906      	add	r1, sp, #24
 800e5f4:	4620      	mov	r0, r4
 800e5f6:	f000 f973 	bl	800e8e0 <uxr_buffer_delete_session>
 800e5fa:	2200      	movs	r2, #0
 800e5fc:	4611      	mov	r1, r2
 800e5fe:	9b06      	ldr	r3, [sp, #24]
 800e600:	4620      	mov	r0, r4
 800e602:	f000 f9c7 	bl	800e994 <uxr_stamp_session_header>
 800e606:	a806      	add	r0, sp, #24
 800e608:	f7fe fdc2 	bl	800d190 <ucdr_buffer_length>
 800e60c:	462b      	mov	r3, r5
 800e60e:	4602      	mov	r2, r0
 800e610:	a902      	add	r1, sp, #8
 800e612:	4620      	mov	r0, r4
 800e614:	f7ff ff10 	bl	800e438 <wait_session_status>
 800e618:	b118      	cbz	r0, 800e622 <uxr_delete_session_retries+0x4a>
 800e61a:	7960      	ldrb	r0, [r4, #5]
 800e61c:	fab0 f080 	clz	r0, r0
 800e620:	0940      	lsrs	r0, r0, #5
 800e622:	b00f      	add	sp, #60	@ 0x3c
 800e624:	bd30      	pop	{r4, r5, pc}
 800e626:	bf00      	nop

0800e628 <uxr_create_session>:
 800e628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e62c:	f100 0b08 	add.w	fp, r0, #8
 800e630:	b0ab      	sub	sp, #172	@ 0xac
 800e632:	4604      	mov	r4, r0
 800e634:	4658      	mov	r0, fp
 800e636:	f000 fa99 	bl	800eb6c <uxr_reset_stream_storage>
 800e63a:	4620      	mov	r0, r4
 800e63c:	f000 fa00 	bl	800ea40 <uxr_session_header_offset>
 800e640:	2300      	movs	r3, #0
 800e642:	9000      	str	r0, [sp, #0]
 800e644:	221c      	movs	r2, #28
 800e646:	a90b      	add	r1, sp, #44	@ 0x2c
 800e648:	a812      	add	r0, sp, #72	@ 0x48
 800e64a:	f7fe fd63 	bl	800d114 <ucdr_init_buffer_origin_offset>
 800e64e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e650:	8a1a      	ldrh	r2, [r3, #16]
 800e652:	3a04      	subs	r2, #4
 800e654:	b292      	uxth	r2, r2
 800e656:	a912      	add	r1, sp, #72	@ 0x48
 800e658:	4620      	mov	r0, r4
 800e65a:	f000 f917 	bl	800e88c <uxr_buffer_create_session>
 800e65e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e660:	4620      	mov	r0, r4
 800e662:	f000 f983 	bl	800e96c <uxr_stamp_create_session_header>
 800e666:	a812      	add	r0, sp, #72	@ 0x48
 800e668:	f7fe fd92 	bl	800d190 <ucdr_buffer_length>
 800e66c:	23ff      	movs	r3, #255	@ 0xff
 800e66e:	7163      	strb	r3, [r4, #5]
 800e670:	230a      	movs	r3, #10
 800e672:	46da      	mov	sl, fp
 800e674:	9303      	str	r3, [sp, #12]
 800e676:	4683      	mov	fp, r0
 800e678:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e67a:	465a      	mov	r2, fp
 800e67c:	e9d3 0500 	ldrd	r0, r5, [r3]
 800e680:	a90b      	add	r1, sp, #44	@ 0x2c
 800e682:	47a8      	blx	r5
 800e684:	f000 fb92 	bl	800edac <uxr_millis>
 800e688:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800e68c:	4605      	mov	r5, r0
 800e68e:	e009      	b.n	800e6a4 <uxr_create_session+0x7c>
 800e690:	f000 fb8c 	bl	800edac <uxr_millis>
 800e694:	1b40      	subs	r0, r0, r5
 800e696:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	7962      	ldrb	r2, [r4, #5]
 800e69e:	dd38      	ble.n	800e712 <uxr_create_session+0xea>
 800e6a0:	2aff      	cmp	r2, #255	@ 0xff
 800e6a2:	d13c      	bne.n	800e71e <uxr_create_session+0xf6>
 800e6a4:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800e6a6:	a907      	add	r1, sp, #28
 800e6a8:	6896      	ldr	r6, [r2, #8]
 800e6aa:	6810      	ldr	r0, [r2, #0]
 800e6ac:	aa08      	add	r2, sp, #32
 800e6ae:	47b0      	blx	r6
 800e6b0:	2800      	cmp	r0, #0
 800e6b2:	d0ed      	beq.n	800e690 <uxr_create_session+0x68>
 800e6b4:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800e6b8:	a81a      	add	r0, sp, #104	@ 0x68
 800e6ba:	f7fe fd3d 	bl	800d138 <ucdr_init_buffer>
 800e6be:	2600      	movs	r6, #0
 800e6c0:	f10d 031a 	add.w	r3, sp, #26
 800e6c4:	aa06      	add	r2, sp, #24
 800e6c6:	a91a      	add	r1, sp, #104	@ 0x68
 800e6c8:	4620      	mov	r0, r4
 800e6ca:	f88d 6018 	strb.w	r6, [sp, #24]
 800e6ce:	f000 f975 	bl	800e9bc <uxr_read_session_header>
 800e6d2:	2800      	cmp	r0, #0
 800e6d4:	d0dc      	beq.n	800e690 <uxr_create_session+0x68>
 800e6d6:	4631      	mov	r1, r6
 800e6d8:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800e6dc:	f000 fa12 	bl	800eb04 <uxr_stream_id_from_raw>
 800e6e0:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800e6e4:	2e01      	cmp	r6, #1
 800e6e6:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800e6ea:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 800e6ee:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800e6f2:	d053      	beq.n	800e79c <uxr_create_session+0x174>
 800e6f4:	2e02      	cmp	r6, #2
 800e6f6:	d018      	beq.n	800e72a <uxr_create_session+0x102>
 800e6f8:	2e00      	cmp	r6, #0
 800e6fa:	d1c9      	bne.n	800e690 <uxr_create_session+0x68>
 800e6fc:	4631      	mov	r1, r6
 800e6fe:	4630      	mov	r0, r6
 800e700:	f000 fa00 	bl	800eb04 <uxr_stream_id_from_raw>
 800e704:	a91a      	add	r1, sp, #104	@ 0x68
 800e706:	4602      	mov	r2, r0
 800e708:	900a      	str	r0, [sp, #40]	@ 0x28
 800e70a:	4620      	mov	r0, r4
 800e70c:	f7ff fb1a 	bl	800dd44 <read_submessage_list>
 800e710:	e7be      	b.n	800e690 <uxr_create_session+0x68>
 800e712:	9b03      	ldr	r3, [sp, #12]
 800e714:	3b01      	subs	r3, #1
 800e716:	9303      	str	r3, [sp, #12]
 800e718:	d001      	beq.n	800e71e <uxr_create_session+0xf6>
 800e71a:	2aff      	cmp	r2, #255	@ 0xff
 800e71c:	d0ac      	beq.n	800e678 <uxr_create_session+0x50>
 800e71e:	2a00      	cmp	r2, #0
 800e720:	d051      	beq.n	800e7c6 <uxr_create_session+0x19e>
 800e722:	2000      	movs	r0, #0
 800e724:	b02b      	add	sp, #172	@ 0xac
 800e726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e72a:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800e72e:	9304      	str	r3, [sp, #16]
 800e730:	4639      	mov	r1, r7
 800e732:	4650      	mov	r0, sl
 800e734:	f000 fad4 	bl	800ece0 <uxr_get_input_reliable_stream>
 800e738:	4680      	mov	r8, r0
 800e73a:	b348      	cbz	r0, 800e790 <uxr_create_session+0x168>
 800e73c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800e73e:	9205      	str	r2, [sp, #20]
 800e740:	a81a      	add	r0, sp, #104	@ 0x68
 800e742:	f7fe fd29 	bl	800d198 <ucdr_buffer_remaining>
 800e746:	4603      	mov	r3, r0
 800e748:	f10d 0019 	add.w	r0, sp, #25
 800e74c:	9000      	str	r0, [sp, #0]
 800e74e:	9a05      	ldr	r2, [sp, #20]
 800e750:	4649      	mov	r1, r9
 800e752:	4640      	mov	r0, r8
 800e754:	f006 fcc8 	bl	80150e8 <uxr_receive_reliable_message>
 800e758:	b1d0      	cbz	r0, 800e790 <uxr_create_session+0x168>
 800e75a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d038      	beq.n	800e7d4 <uxr_create_session+0x1ac>
 800e762:	9e04      	ldr	r6, [sp, #16]
 800e764:	e00a      	b.n	800e77c <uxr_create_session+0x154>
 800e766:	f04f 0302 	mov.w	r3, #2
 800e76a:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 800e76e:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 800e772:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e776:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e778:	f7ff fae4 	bl	800dd44 <read_submessage_list>
 800e77c:	a922      	add	r1, sp, #136	@ 0x88
 800e77e:	2204      	movs	r2, #4
 800e780:	4640      	mov	r0, r8
 800e782:	f006 fd31 	bl	80151e8 <uxr_next_input_reliable_buffer_available>
 800e786:	4603      	mov	r3, r0
 800e788:	a922      	add	r1, sp, #136	@ 0x88
 800e78a:	4620      	mov	r0, r4
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d1ea      	bne.n	800e766 <uxr_create_session+0x13e>
 800e790:	9904      	ldr	r1, [sp, #16]
 800e792:	463a      	mov	r2, r7
 800e794:	4620      	mov	r0, r4
 800e796:	f7ff f951 	bl	800da3c <write_submessage_acknack.isra.0>
 800e79a:	e779      	b.n	800e690 <uxr_create_session+0x68>
 800e79c:	4639      	mov	r1, r7
 800e79e:	4650      	mov	r0, sl
 800e7a0:	f000 fa94 	bl	800eccc <uxr_get_input_best_effort_stream>
 800e7a4:	2800      	cmp	r0, #0
 800e7a6:	f43f af73 	beq.w	800e690 <uxr_create_session+0x68>
 800e7aa:	4649      	mov	r1, r9
 800e7ac:	f006 fc08 	bl	8014fc0 <uxr_receive_best_effort_message>
 800e7b0:	2800      	cmp	r0, #0
 800e7b2:	f43f af6d 	beq.w	800e690 <uxr_create_session+0x68>
 800e7b6:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800e7ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e7bc:	a91a      	add	r1, sp, #104	@ 0x68
 800e7be:	4620      	mov	r0, r4
 800e7c0:	f7ff fac0 	bl	800dd44 <read_submessage_list>
 800e7c4:	e764      	b.n	800e690 <uxr_create_session+0x68>
 800e7c6:	4650      	mov	r0, sl
 800e7c8:	f000 f9d0 	bl	800eb6c <uxr_reset_stream_storage>
 800e7cc:	2001      	movs	r0, #1
 800e7ce:	b02b      	add	sp, #172	@ 0xac
 800e7d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7d4:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800e7d8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e7da:	a91a      	add	r1, sp, #104	@ 0x68
 800e7dc:	4620      	mov	r0, r4
 800e7de:	f7ff fab1 	bl	800dd44 <read_submessage_list>
 800e7e2:	e7be      	b.n	800e762 <uxr_create_session+0x13a>

0800e7e4 <uxr_prepare_stream_to_write_submessage>:
 800e7e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e7e8:	b082      	sub	sp, #8
 800e7ea:	4682      	mov	sl, r0
 800e7ec:	4610      	mov	r0, r2
 800e7ee:	4615      	mov	r5, r2
 800e7f0:	461e      	mov	r6, r3
 800e7f2:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 800e7f6:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 800e7fa:	9101      	str	r1, [sp, #4]
 800e7fc:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800e800:	f000 face 	bl	800eda0 <uxr_submessage_padding>
 800e804:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e808:	f105 0904 	add.w	r9, r5, #4
 800e80c:	2b01      	cmp	r3, #1
 800e80e:	4481      	add	r9, r0
 800e810:	d01d      	beq.n	800e84e <uxr_prepare_stream_to_write_submessage+0x6a>
 800e812:	2b02      	cmp	r3, #2
 800e814:	d116      	bne.n	800e844 <uxr_prepare_stream_to_write_submessage+0x60>
 800e816:	4621      	mov	r1, r4
 800e818:	f10a 0008 	add.w	r0, sl, #8
 800e81c:	f000 fa4c 	bl	800ecb8 <uxr_get_output_reliable_stream>
 800e820:	4604      	mov	r4, r0
 800e822:	b158      	cbz	r0, 800e83c <uxr_prepare_stream_to_write_submessage+0x58>
 800e824:	4649      	mov	r1, r9
 800e826:	4632      	mov	r2, r6
 800e828:	f006 fe9a 	bl	8015560 <uxr_prepare_reliable_buffer_to_write>
 800e82c:	4604      	mov	r4, r0
 800e82e:	b12c      	cbz	r4, 800e83c <uxr_prepare_stream_to_write_submessage+0x58>
 800e830:	4643      	mov	r3, r8
 800e832:	b2aa      	uxth	r2, r5
 800e834:	4639      	mov	r1, r7
 800e836:	4630      	mov	r0, r6
 800e838:	f000 fa72 	bl	800ed20 <uxr_buffer_submessage_header>
 800e83c:	4620      	mov	r0, r4
 800e83e:	b002      	add	sp, #8
 800e840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e844:	2400      	movs	r4, #0
 800e846:	4620      	mov	r0, r4
 800e848:	b002      	add	sp, #8
 800e84a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e84e:	4621      	mov	r1, r4
 800e850:	f10a 0008 	add.w	r0, sl, #8
 800e854:	f000 fa28 	bl	800eca8 <uxr_get_output_best_effort_stream>
 800e858:	4604      	mov	r4, r0
 800e85a:	2800      	cmp	r0, #0
 800e85c:	d0ee      	beq.n	800e83c <uxr_prepare_stream_to_write_submessage+0x58>
 800e85e:	4649      	mov	r1, r9
 800e860:	4632      	mov	r2, r6
 800e862:	f006 fdad 	bl	80153c0 <uxr_prepare_best_effort_buffer_to_write>
 800e866:	4604      	mov	r4, r0
 800e868:	e7e1      	b.n	800e82e <uxr_prepare_stream_to_write_submessage+0x4a>
 800e86a:	bf00      	nop

0800e86c <uxr_init_session_info>:
 800e86c:	0e13      	lsrs	r3, r2, #24
 800e86e:	7043      	strb	r3, [r0, #1]
 800e870:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800e874:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800e878:	7001      	strb	r1, [r0, #0]
 800e87a:	70c3      	strb	r3, [r0, #3]
 800e87c:	2109      	movs	r1, #9
 800e87e:	23ff      	movs	r3, #255	@ 0xff
 800e880:	f880 c002 	strb.w	ip, [r0, #2]
 800e884:	7102      	strb	r2, [r0, #4]
 800e886:	80c1      	strh	r1, [r0, #6]
 800e888:	7143      	strb	r3, [r0, #5]
 800e88a:	4770      	bx	lr

0800e88c <uxr_buffer_create_session>:
 800e88c:	b530      	push	{r4, r5, lr}
 800e88e:	b089      	sub	sp, #36	@ 0x24
 800e890:	2300      	movs	r3, #0
 800e892:	4d12      	ldr	r5, [pc, #72]	@ (800e8dc <uxr_buffer_create_session+0x50>)
 800e894:	9307      	str	r3, [sp, #28]
 800e896:	f8ad 201c 	strh.w	r2, [sp, #28]
 800e89a:	2201      	movs	r2, #1
 800e89c:	9301      	str	r3, [sp, #4]
 800e89e:	80c2      	strh	r2, [r0, #6]
 800e8a0:	f88d 2004 	strb.w	r2, [sp, #4]
 800e8a4:	682a      	ldr	r2, [r5, #0]
 800e8a6:	9200      	str	r2, [sp, #0]
 800e8a8:	88aa      	ldrh	r2, [r5, #4]
 800e8aa:	f8ad 2006 	strh.w	r2, [sp, #6]
 800e8ae:	f8d0 2001 	ldr.w	r2, [r0, #1]
 800e8b2:	9202      	str	r2, [sp, #8]
 800e8b4:	460c      	mov	r4, r1
 800e8b6:	7802      	ldrb	r2, [r0, #0]
 800e8b8:	9303      	str	r3, [sp, #12]
 800e8ba:	4619      	mov	r1, r3
 800e8bc:	f88d 200c 	strb.w	r2, [sp, #12]
 800e8c0:	4620      	mov	r0, r4
 800e8c2:	2210      	movs	r2, #16
 800e8c4:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800e8c8:	9306      	str	r3, [sp, #24]
 800e8ca:	f000 fa29 	bl	800ed20 <uxr_buffer_submessage_header>
 800e8ce:	4669      	mov	r1, sp
 800e8d0:	4620      	mov	r0, r4
 800e8d2:	f001 fa6d 	bl	800fdb0 <uxr_serialize_CREATE_CLIENT_Payload>
 800e8d6:	b009      	add	sp, #36	@ 0x24
 800e8d8:	bd30      	pop	{r4, r5, pc}
 800e8da:	bf00      	nop
 800e8dc:	08019f7c 	.word	0x08019f7c

0800e8e0 <uxr_buffer_delete_session>:
 800e8e0:	b510      	push	{r4, lr}
 800e8e2:	4b0c      	ldr	r3, [pc, #48]	@ (800e914 <uxr_buffer_delete_session+0x34>)
 800e8e4:	b082      	sub	sp, #8
 800e8e6:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 800e8ea:	f8ad c006 	strh.w	ip, [sp, #6]
 800e8ee:	460c      	mov	r4, r1
 800e8f0:	2202      	movs	r2, #2
 800e8f2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e8f6:	80c2      	strh	r2, [r0, #6]
 800e8f8:	f8ad 3004 	strh.w	r3, [sp, #4]
 800e8fc:	2204      	movs	r2, #4
 800e8fe:	2300      	movs	r3, #0
 800e900:	2103      	movs	r1, #3
 800e902:	4620      	mov	r0, r4
 800e904:	f000 fa0c 	bl	800ed20 <uxr_buffer_submessage_header>
 800e908:	a901      	add	r1, sp, #4
 800e90a:	4620      	mov	r0, r4
 800e90c:	f001 faf6 	bl	800fefc <uxr_serialize_DELETE_Payload>
 800e910:	b002      	add	sp, #8
 800e912:	bd10      	pop	{r4, pc}
 800e914:	08019f7c 	.word	0x08019f7c

0800e918 <uxr_read_create_session_status>:
 800e918:	b510      	push	{r4, lr}
 800e91a:	b088      	sub	sp, #32
 800e91c:	4604      	mov	r4, r0
 800e91e:	4608      	mov	r0, r1
 800e920:	a901      	add	r1, sp, #4
 800e922:	f001 fafb 	bl	800ff1c <uxr_deserialize_STATUS_AGENT_Payload>
 800e926:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e92a:	7163      	strb	r3, [r4, #5]
 800e92c:	b008      	add	sp, #32
 800e92e:	bd10      	pop	{r4, pc}

0800e930 <uxr_read_delete_session_status>:
 800e930:	b510      	push	{r4, lr}
 800e932:	4604      	mov	r4, r0
 800e934:	b084      	sub	sp, #16
 800e936:	4608      	mov	r0, r1
 800e938:	a902      	add	r1, sp, #8
 800e93a:	f001 fb1f 	bl	800ff7c <uxr_deserialize_STATUS_Payload>
 800e93e:	88e3      	ldrh	r3, [r4, #6]
 800e940:	2b02      	cmp	r3, #2
 800e942:	d001      	beq.n	800e948 <uxr_read_delete_session_status+0x18>
 800e944:	b004      	add	sp, #16
 800e946:	bd10      	pop	{r4, pc}
 800e948:	f10d 000a 	add.w	r0, sp, #10
 800e94c:	f7fe fecc 	bl	800d6e8 <uxr_object_id_from_raw>
 800e950:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800e954:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800e958:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800e95c:	b29b      	uxth	r3, r3
 800e95e:	2b02      	cmp	r3, #2
 800e960:	bf04      	itt	eq
 800e962:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 800e966:	7163      	strbeq	r3, [r4, #5]
 800e968:	b004      	add	sp, #16
 800e96a:	bd10      	pop	{r4, pc}

0800e96c <uxr_stamp_create_session_header>:
 800e96c:	b510      	push	{r4, lr}
 800e96e:	2208      	movs	r2, #8
 800e970:	b08a      	sub	sp, #40	@ 0x28
 800e972:	4604      	mov	r4, r0
 800e974:	eb0d 0002 	add.w	r0, sp, r2
 800e978:	f7fe fbde 	bl	800d138 <ucdr_init_buffer>
 800e97c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e980:	9400      	str	r4, [sp, #0]
 800e982:	2300      	movs	r3, #0
 800e984:	461a      	mov	r2, r3
 800e986:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 800e98a:	a802      	add	r0, sp, #8
 800e98c:	f000 fbc2 	bl	800f114 <uxr_serialize_message_header>
 800e990:	b00a      	add	sp, #40	@ 0x28
 800e992:	bd10      	pop	{r4, pc}

0800e994 <uxr_stamp_session_header>:
 800e994:	b530      	push	{r4, r5, lr}
 800e996:	b08d      	sub	sp, #52	@ 0x34
 800e998:	4604      	mov	r4, r0
 800e99a:	460d      	mov	r5, r1
 800e99c:	9203      	str	r2, [sp, #12]
 800e99e:	4619      	mov	r1, r3
 800e9a0:	a804      	add	r0, sp, #16
 800e9a2:	2208      	movs	r2, #8
 800e9a4:	f7fe fbc8 	bl	800d138 <ucdr_init_buffer>
 800e9a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9ac:	9b03      	ldr	r3, [sp, #12]
 800e9ae:	9400      	str	r4, [sp, #0]
 800e9b0:	462a      	mov	r2, r5
 800e9b2:	a804      	add	r0, sp, #16
 800e9b4:	f000 fbae 	bl	800f114 <uxr_serialize_message_header>
 800e9b8:	b00d      	add	sp, #52	@ 0x34
 800e9ba:	bd30      	pop	{r4, r5, pc}

0800e9bc <uxr_read_session_header>:
 800e9bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9c0:	4607      	mov	r7, r0
 800e9c2:	b084      	sub	sp, #16
 800e9c4:	4608      	mov	r0, r1
 800e9c6:	460c      	mov	r4, r1
 800e9c8:	4615      	mov	r5, r2
 800e9ca:	461e      	mov	r6, r3
 800e9cc:	f7fe fbe4 	bl	800d198 <ucdr_buffer_remaining>
 800e9d0:	2808      	cmp	r0, #8
 800e9d2:	d803      	bhi.n	800e9dc <uxr_read_session_header+0x20>
 800e9d4:	2000      	movs	r0, #0
 800e9d6:	b004      	add	sp, #16
 800e9d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9dc:	f10d 080c 	add.w	r8, sp, #12
 800e9e0:	4633      	mov	r3, r6
 800e9e2:	462a      	mov	r2, r5
 800e9e4:	f8cd 8000 	str.w	r8, [sp]
 800e9e8:	4620      	mov	r0, r4
 800e9ea:	f10d 010b 	add.w	r1, sp, #11
 800e9ee:	f000 fbaf 	bl	800f150 <uxr_deserialize_message_header>
 800e9f2:	783a      	ldrb	r2, [r7, #0]
 800e9f4:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800e9f8:	4293      	cmp	r3, r2
 800e9fa:	d1eb      	bne.n	800e9d4 <uxr_read_session_header+0x18>
 800e9fc:	061b      	lsls	r3, r3, #24
 800e9fe:	d41c      	bmi.n	800ea3a <uxr_read_session_header+0x7e>
 800ea00:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800ea04:	787b      	ldrb	r3, [r7, #1]
 800ea06:	429a      	cmp	r2, r3
 800ea08:	d003      	beq.n	800ea12 <uxr_read_session_header+0x56>
 800ea0a:	2001      	movs	r0, #1
 800ea0c:	f080 0001 	eor.w	r0, r0, #1
 800ea10:	e7e1      	b.n	800e9d6 <uxr_read_session_header+0x1a>
 800ea12:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800ea16:	78bb      	ldrb	r3, [r7, #2]
 800ea18:	429a      	cmp	r2, r3
 800ea1a:	f107 0102 	add.w	r1, r7, #2
 800ea1e:	d1f4      	bne.n	800ea0a <uxr_read_session_header+0x4e>
 800ea20:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800ea24:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ea28:	429a      	cmp	r2, r3
 800ea2a:	d1ee      	bne.n	800ea0a <uxr_read_session_header+0x4e>
 800ea2c:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800ea30:	784b      	ldrb	r3, [r1, #1]
 800ea32:	429a      	cmp	r2, r3
 800ea34:	d1e9      	bne.n	800ea0a <uxr_read_session_header+0x4e>
 800ea36:	2000      	movs	r0, #0
 800ea38:	e7e8      	b.n	800ea0c <uxr_read_session_header+0x50>
 800ea3a:	2001      	movs	r0, #1
 800ea3c:	e7cb      	b.n	800e9d6 <uxr_read_session_header+0x1a>
 800ea3e:	bf00      	nop

0800ea40 <uxr_session_header_offset>:
 800ea40:	f990 3000 	ldrsb.w	r3, [r0]
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	bfac      	ite	ge
 800ea48:	2008      	movge	r0, #8
 800ea4a:	2004      	movlt	r0, #4
 800ea4c:	4770      	bx	lr
 800ea4e:	bf00      	nop

0800ea50 <uxr_init_base_object_request>:
 800ea50:	b510      	push	{r4, lr}
 800ea52:	88c3      	ldrh	r3, [r0, #6]
 800ea54:	b082      	sub	sp, #8
 800ea56:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 800ea5a:	9101      	str	r1, [sp, #4]
 800ea5c:	f1a3 010a 	sub.w	r1, r3, #10
 800ea60:	b289      	uxth	r1, r1
 800ea62:	42a1      	cmp	r1, r4
 800ea64:	d80e      	bhi.n	800ea84 <uxr_init_base_object_request+0x34>
 800ea66:	3301      	adds	r3, #1
 800ea68:	b29c      	uxth	r4, r3
 800ea6a:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800ea6e:	b2db      	uxtb	r3, r3
 800ea70:	80c4      	strh	r4, [r0, #6]
 800ea72:	9801      	ldr	r0, [sp, #4]
 800ea74:	7011      	strb	r1, [r2, #0]
 800ea76:	7053      	strb	r3, [r2, #1]
 800ea78:	1c91      	adds	r1, r2, #2
 800ea7a:	f7fe fe49 	bl	800d710 <uxr_object_id_to_raw>
 800ea7e:	4620      	mov	r0, r4
 800ea80:	b002      	add	sp, #8
 800ea82:	bd10      	pop	{r4, pc}
 800ea84:	230a      	movs	r3, #10
 800ea86:	2100      	movs	r1, #0
 800ea88:	461c      	mov	r4, r3
 800ea8a:	e7f1      	b.n	800ea70 <uxr_init_base_object_request+0x20>

0800ea8c <uxr_parse_base_object_request>:
 800ea8c:	b570      	push	{r4, r5, r6, lr}
 800ea8e:	4604      	mov	r4, r0
 800ea90:	3002      	adds	r0, #2
 800ea92:	460d      	mov	r5, r1
 800ea94:	4616      	mov	r6, r2
 800ea96:	f7fe fe27 	bl	800d6e8 <uxr_object_id_from_raw>
 800ea9a:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800ea9e:	8028      	strh	r0, [r5, #0]
 800eaa0:	806b      	strh	r3, [r5, #2]
 800eaa2:	7822      	ldrb	r2, [r4, #0]
 800eaa4:	7863      	ldrb	r3, [r4, #1]
 800eaa6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800eaaa:	8033      	strh	r3, [r6, #0]
 800eaac:	bd70      	pop	{r4, r5, r6, pc}
 800eaae:	bf00      	nop

0800eab0 <uxr_stream_id>:
 800eab0:	2901      	cmp	r1, #1
 800eab2:	b082      	sub	sp, #8
 800eab4:	d01d      	beq.n	800eaf2 <uxr_stream_id+0x42>
 800eab6:	2902      	cmp	r1, #2
 800eab8:	f04f 0c00 	mov.w	ip, #0
 800eabc:	d01e      	beq.n	800eafc <uxr_stream_id+0x4c>
 800eabe:	2300      	movs	r3, #0
 800eac0:	f36c 0307 	bfi	r3, ip, #0, #8
 800eac4:	f360 230f 	bfi	r3, r0, #8, #8
 800eac8:	f361 4317 	bfi	r3, r1, #16, #8
 800eacc:	f362 631f 	bfi	r3, r2, #24, #8
 800ead0:	b2da      	uxtb	r2, r3
 800ead2:	2000      	movs	r0, #0
 800ead4:	f362 0007 	bfi	r0, r2, #0, #8
 800ead8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800eadc:	f362 200f 	bfi	r0, r2, #8, #8
 800eae0:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800eae4:	f362 4017 	bfi	r0, r2, #16, #8
 800eae8:	0e1b      	lsrs	r3, r3, #24
 800eaea:	f363 601f 	bfi	r0, r3, #24, #8
 800eaee:	b002      	add	sp, #8
 800eaf0:	4770      	bx	lr
 800eaf2:	f100 0c01 	add.w	ip, r0, #1
 800eaf6:	fa5f fc8c 	uxtb.w	ip, ip
 800eafa:	e7e0      	b.n	800eabe <uxr_stream_id+0xe>
 800eafc:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 800eb00:	e7dd      	b.n	800eabe <uxr_stream_id+0xe>
 800eb02:	bf00      	nop

0800eb04 <uxr_stream_id_from_raw>:
 800eb04:	b082      	sub	sp, #8
 800eb06:	b130      	cbz	r0, 800eb16 <uxr_stream_id_from_raw+0x12>
 800eb08:	0603      	lsls	r3, r0, #24
 800eb0a:	d420      	bmi.n	800eb4e <uxr_stream_id_from_raw+0x4a>
 800eb0c:	1e42      	subs	r2, r0, #1
 800eb0e:	b2d2      	uxtb	r2, r2
 800eb10:	f04f 0c01 	mov.w	ip, #1
 800eb14:	e001      	b.n	800eb1a <uxr_stream_id_from_raw+0x16>
 800eb16:	4684      	mov	ip, r0
 800eb18:	4602      	mov	r2, r0
 800eb1a:	2300      	movs	r3, #0
 800eb1c:	f360 0307 	bfi	r3, r0, #0, #8
 800eb20:	f362 230f 	bfi	r3, r2, #8, #8
 800eb24:	f36c 4317 	bfi	r3, ip, #16, #8
 800eb28:	f361 631f 	bfi	r3, r1, #24, #8
 800eb2c:	b2da      	uxtb	r2, r3
 800eb2e:	2000      	movs	r0, #0
 800eb30:	f362 0007 	bfi	r0, r2, #0, #8
 800eb34:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800eb38:	f362 200f 	bfi	r0, r2, #8, #8
 800eb3c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800eb40:	f362 4017 	bfi	r0, r2, #16, #8
 800eb44:	0e1b      	lsrs	r3, r3, #24
 800eb46:	f363 601f 	bfi	r0, r3, #24, #8
 800eb4a:	b002      	add	sp, #8
 800eb4c:	4770      	bx	lr
 800eb4e:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 800eb52:	f04f 0c02 	mov.w	ip, #2
 800eb56:	e7e0      	b.n	800eb1a <uxr_stream_id_from_raw+0x16>

0800eb58 <uxr_init_stream_storage>:
 800eb58:	2300      	movs	r3, #0
 800eb5a:	7403      	strb	r3, [r0, #16]
 800eb5c:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 800eb60:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 800eb64:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 800eb68:	4770      	bx	lr
 800eb6a:	bf00      	nop

0800eb6c <uxr_reset_stream_storage>:
 800eb6c:	b570      	push	{r4, r5, r6, lr}
 800eb6e:	7c03      	ldrb	r3, [r0, #16]
 800eb70:	4604      	mov	r4, r0
 800eb72:	b153      	cbz	r3, 800eb8a <uxr_reset_stream_storage+0x1e>
 800eb74:	4606      	mov	r6, r0
 800eb76:	2500      	movs	r5, #0
 800eb78:	4630      	mov	r0, r6
 800eb7a:	f006 fc1b 	bl	80153b4 <uxr_reset_output_best_effort_stream>
 800eb7e:	7c23      	ldrb	r3, [r4, #16]
 800eb80:	3501      	adds	r5, #1
 800eb82:	42ab      	cmp	r3, r5
 800eb84:	f106 0610 	add.w	r6, r6, #16
 800eb88:	d8f6      	bhi.n	800eb78 <uxr_reset_stream_storage+0xc>
 800eb8a:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800eb8e:	b163      	cbz	r3, 800ebaa <uxr_reset_stream_storage+0x3e>
 800eb90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800eb94:	2500      	movs	r5, #0
 800eb96:	4630      	mov	r0, r6
 800eb98:	f006 fa0e 	bl	8014fb8 <uxr_reset_input_best_effort_stream>
 800eb9c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800eba0:	3501      	adds	r5, #1
 800eba2:	42ab      	cmp	r3, r5
 800eba4:	f106 0602 	add.w	r6, r6, #2
 800eba8:	d8f5      	bhi.n	800eb96 <uxr_reset_stream_storage+0x2a>
 800ebaa:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800ebae:	b163      	cbz	r3, 800ebca <uxr_reset_stream_storage+0x5e>
 800ebb0:	f104 0618 	add.w	r6, r4, #24
 800ebb4:	2500      	movs	r5, #0
 800ebb6:	4630      	mov	r0, r6
 800ebb8:	f006 fca8 	bl	801550c <uxr_reset_output_reliable_stream>
 800ebbc:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800ebc0:	3501      	adds	r5, #1
 800ebc2:	42ab      	cmp	r3, r5
 800ebc4:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 800ebc8:	d8f5      	bhi.n	800ebb6 <uxr_reset_stream_storage+0x4a>
 800ebca:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800ebce:	b163      	cbz	r3, 800ebea <uxr_reset_stream_storage+0x7e>
 800ebd0:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 800ebd4:	2500      	movs	r5, #0
 800ebd6:	4630      	mov	r0, r6
 800ebd8:	f006 fa62 	bl	80150a0 <uxr_reset_input_reliable_stream>
 800ebdc:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800ebe0:	3501      	adds	r5, #1
 800ebe2:	42ab      	cmp	r3, r5
 800ebe4:	f106 0618 	add.w	r6, r6, #24
 800ebe8:	d8f5      	bhi.n	800ebd6 <uxr_reset_stream_storage+0x6a>
 800ebea:	bd70      	pop	{r4, r5, r6, pc}

0800ebec <uxr_add_output_best_effort_buffer>:
 800ebec:	b510      	push	{r4, lr}
 800ebee:	7c04      	ldrb	r4, [r0, #16]
 800ebf0:	f104 0c01 	add.w	ip, r4, #1
 800ebf4:	b082      	sub	sp, #8
 800ebf6:	f880 c010 	strb.w	ip, [r0, #16]
 800ebfa:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800ebfe:	f006 fbcf 	bl	80153a0 <uxr_init_output_best_effort_stream>
 800ec02:	2201      	movs	r2, #1
 800ec04:	4611      	mov	r1, r2
 800ec06:	4620      	mov	r0, r4
 800ec08:	b002      	add	sp, #8
 800ec0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec0e:	f7ff bf4f 	b.w	800eab0 <uxr_stream_id>
 800ec12:	bf00      	nop

0800ec14 <uxr_add_output_reliable_buffer>:
 800ec14:	b510      	push	{r4, lr}
 800ec16:	b084      	sub	sp, #16
 800ec18:	4684      	mov	ip, r0
 800ec1a:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800ec1e:	9000      	str	r0, [sp, #0]
 800ec20:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 800ec24:	2028      	movs	r0, #40	@ 0x28
 800ec26:	fb00 c004 	mla	r0, r0, r4, ip
 800ec2a:	f104 0e01 	add.w	lr, r4, #1
 800ec2e:	3018      	adds	r0, #24
 800ec30:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 800ec34:	f006 fc32 	bl	801549c <uxr_init_output_reliable_stream>
 800ec38:	2201      	movs	r2, #1
 800ec3a:	2102      	movs	r1, #2
 800ec3c:	4620      	mov	r0, r4
 800ec3e:	b004      	add	sp, #16
 800ec40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec44:	f7ff bf34 	b.w	800eab0 <uxr_stream_id>

0800ec48 <uxr_add_input_best_effort_buffer>:
 800ec48:	b510      	push	{r4, lr}
 800ec4a:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 800ec4e:	4603      	mov	r3, r0
 800ec50:	1c62      	adds	r2, r4, #1
 800ec52:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 800ec56:	b082      	sub	sp, #8
 800ec58:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800ec5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ec60:	f006 f9a6 	bl	8014fb0 <uxr_init_input_best_effort_stream>
 800ec64:	2200      	movs	r2, #0
 800ec66:	2101      	movs	r1, #1
 800ec68:	4620      	mov	r0, r4
 800ec6a:	b002      	add	sp, #8
 800ec6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec70:	f7ff bf1e 	b.w	800eab0 <uxr_stream_id>

0800ec74 <uxr_add_input_reliable_buffer>:
 800ec74:	b510      	push	{r4, lr}
 800ec76:	b084      	sub	sp, #16
 800ec78:	4684      	mov	ip, r0
 800ec7a:	9806      	ldr	r0, [sp, #24]
 800ec7c:	9000      	str	r0, [sp, #0]
 800ec7e:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 800ec82:	2018      	movs	r0, #24
 800ec84:	fb00 c004 	mla	r0, r0, r4, ip
 800ec88:	f104 0e01 	add.w	lr, r4, #1
 800ec8c:	3048      	adds	r0, #72	@ 0x48
 800ec8e:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 800ec92:	f006 f9d9 	bl	8015048 <uxr_init_input_reliable_stream>
 800ec96:	2200      	movs	r2, #0
 800ec98:	2102      	movs	r1, #2
 800ec9a:	4620      	mov	r0, r4
 800ec9c:	b004      	add	sp, #16
 800ec9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eca2:	f7ff bf05 	b.w	800eab0 <uxr_stream_id>
 800eca6:	bf00      	nop

0800eca8 <uxr_get_output_best_effort_stream>:
 800eca8:	7c03      	ldrb	r3, [r0, #16]
 800ecaa:	428b      	cmp	r3, r1
 800ecac:	bf8c      	ite	hi
 800ecae:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800ecb2:	2000      	movls	r0, #0
 800ecb4:	4770      	bx	lr
 800ecb6:	bf00      	nop

0800ecb8 <uxr_get_output_reliable_stream>:
 800ecb8:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800ecbc:	428b      	cmp	r3, r1
 800ecbe:	bf83      	ittte	hi
 800ecc0:	2328      	movhi	r3, #40	@ 0x28
 800ecc2:	fb03 0001 	mlahi	r0, r3, r1, r0
 800ecc6:	3018      	addhi	r0, #24
 800ecc8:	2000      	movls	r0, #0
 800ecca:	4770      	bx	lr

0800eccc <uxr_get_input_best_effort_stream>:
 800eccc:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800ecd0:	428b      	cmp	r3, r1
 800ecd2:	bf86      	itte	hi
 800ecd4:	3121      	addhi	r1, #33	@ 0x21
 800ecd6:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 800ecda:	2000      	movls	r0, #0
 800ecdc:	4770      	bx	lr
 800ecde:	bf00      	nop

0800ece0 <uxr_get_input_reliable_stream>:
 800ece0:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 800ece4:	428b      	cmp	r3, r1
 800ece6:	bf83      	ittte	hi
 800ece8:	2318      	movhi	r3, #24
 800ecea:	fb03 0001 	mlahi	r0, r3, r1, r0
 800ecee:	3048      	addhi	r0, #72	@ 0x48
 800ecf0:	2000      	movls	r0, #0
 800ecf2:	4770      	bx	lr

0800ecf4 <uxr_output_streams_confirmed>:
 800ecf4:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800ecf8:	b183      	cbz	r3, 800ed1c <uxr_output_streams_confirmed+0x28>
 800ecfa:	b570      	push	{r4, r5, r6, lr}
 800ecfc:	4606      	mov	r6, r0
 800ecfe:	f100 0518 	add.w	r5, r0, #24
 800ed02:	2400      	movs	r4, #0
 800ed04:	e001      	b.n	800ed0a <uxr_output_streams_confirmed+0x16>
 800ed06:	3528      	adds	r5, #40	@ 0x28
 800ed08:	b138      	cbz	r0, 800ed1a <uxr_output_streams_confirmed+0x26>
 800ed0a:	4628      	mov	r0, r5
 800ed0c:	f006 fe6e 	bl	80159ec <uxr_is_output_up_to_date>
 800ed10:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 800ed14:	3401      	adds	r4, #1
 800ed16:	42a3      	cmp	r3, r4
 800ed18:	d8f5      	bhi.n	800ed06 <uxr_output_streams_confirmed+0x12>
 800ed1a:	bd70      	pop	{r4, r5, r6, pc}
 800ed1c:	2001      	movs	r0, #1
 800ed1e:	4770      	bx	lr

0800ed20 <uxr_buffer_submessage_header>:
 800ed20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed22:	4604      	mov	r4, r0
 800ed24:	460e      	mov	r6, r1
 800ed26:	2104      	movs	r1, #4
 800ed28:	4615      	mov	r5, r2
 800ed2a:	461f      	mov	r7, r3
 800ed2c:	f7fe fa1e 	bl	800d16c <ucdr_align_to>
 800ed30:	2301      	movs	r3, #1
 800ed32:	ea47 0203 	orr.w	r2, r7, r3
 800ed36:	4631      	mov	r1, r6
 800ed38:	7523      	strb	r3, [r4, #20]
 800ed3a:	4620      	mov	r0, r4
 800ed3c:	462b      	mov	r3, r5
 800ed3e:	f000 fa27 	bl	800f190 <uxr_serialize_submessage_header>
 800ed42:	4620      	mov	r0, r4
 800ed44:	f7fe fa28 	bl	800d198 <ucdr_buffer_remaining>
 800ed48:	42a8      	cmp	r0, r5
 800ed4a:	bf34      	ite	cc
 800ed4c:	2000      	movcc	r0, #0
 800ed4e:	2001      	movcs	r0, #1
 800ed50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed52:	bf00      	nop

0800ed54 <uxr_read_submessage_header>:
 800ed54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed58:	4604      	mov	r4, r0
 800ed5a:	460d      	mov	r5, r1
 800ed5c:	2104      	movs	r1, #4
 800ed5e:	4616      	mov	r6, r2
 800ed60:	4698      	mov	r8, r3
 800ed62:	f7fe fa03 	bl	800d16c <ucdr_align_to>
 800ed66:	4620      	mov	r0, r4
 800ed68:	f7fe fa16 	bl	800d198 <ucdr_buffer_remaining>
 800ed6c:	2803      	cmp	r0, #3
 800ed6e:	bf8c      	ite	hi
 800ed70:	2701      	movhi	r7, #1
 800ed72:	2700      	movls	r7, #0
 800ed74:	d802      	bhi.n	800ed7c <uxr_read_submessage_header+0x28>
 800ed76:	4638      	mov	r0, r7
 800ed78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed7c:	4633      	mov	r3, r6
 800ed7e:	4642      	mov	r2, r8
 800ed80:	4620      	mov	r0, r4
 800ed82:	4629      	mov	r1, r5
 800ed84:	f000 fa18 	bl	800f1b8 <uxr_deserialize_submessage_header>
 800ed88:	f898 3000 	ldrb.w	r3, [r8]
 800ed8c:	f003 0201 	and.w	r2, r3, #1
 800ed90:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800ed94:	f888 3000 	strb.w	r3, [r8]
 800ed98:	7522      	strb	r2, [r4, #20]
 800ed9a:	4638      	mov	r0, r7
 800ed9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800eda0 <uxr_submessage_padding>:
 800eda0:	f010 0003 	ands.w	r0, r0, #3
 800eda4:	bf18      	it	ne
 800eda6:	f1c0 0004 	rsbne	r0, r0, #4
 800edaa:	4770      	bx	lr

0800edac <uxr_millis>:
 800edac:	b510      	push	{r4, lr}
 800edae:	b084      	sub	sp, #16
 800edb0:	4669      	mov	r1, sp
 800edb2:	2001      	movs	r0, #1
 800edb4:	f7f3 fa70 	bl	8002298 <clock_gettime>
 800edb8:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 800edbc:	4906      	ldr	r1, [pc, #24]	@ (800edd8 <uxr_millis+0x2c>)
 800edbe:	fba0 0301 	umull	r0, r3, r0, r1
 800edc2:	1900      	adds	r0, r0, r4
 800edc4:	fb01 3102 	mla	r1, r1, r2, r3
 800edc8:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800edcc:	4a03      	ldr	r2, [pc, #12]	@ (800eddc <uxr_millis+0x30>)
 800edce:	2300      	movs	r3, #0
 800edd0:	f7f1 ff1a 	bl	8000c08 <__aeabi_ldivmod>
 800edd4:	b004      	add	sp, #16
 800edd6:	bd10      	pop	{r4, pc}
 800edd8:	3b9aca00 	.word	0x3b9aca00
 800eddc:	000f4240 	.word	0x000f4240

0800ede0 <uxr_nanos>:
 800ede0:	b510      	push	{r4, lr}
 800ede2:	b084      	sub	sp, #16
 800ede4:	4669      	mov	r1, sp
 800ede6:	2001      	movs	r0, #1
 800ede8:	f7f3 fa56 	bl	8002298 <clock_gettime>
 800edec:	4a06      	ldr	r2, [pc, #24]	@ (800ee08 <uxr_nanos+0x28>)
 800edee:	9800      	ldr	r0, [sp, #0]
 800edf0:	9902      	ldr	r1, [sp, #8]
 800edf2:	9c01      	ldr	r4, [sp, #4]
 800edf4:	fba0 0302 	umull	r0, r3, r0, r2
 800edf8:	1840      	adds	r0, r0, r1
 800edfa:	fb02 3304 	mla	r3, r2, r4, r3
 800edfe:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 800ee02:	b004      	add	sp, #16
 800ee04:	bd10      	pop	{r4, pc}
 800ee06:	bf00      	nop
 800ee08:	3b9aca00 	.word	0x3b9aca00

0800ee0c <on_full_output_buffer_fragmented>:
 800ee0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee10:	460c      	mov	r4, r1
 800ee12:	b08a      	sub	sp, #40	@ 0x28
 800ee14:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 800ee18:	4606      	mov	r6, r0
 800ee1a:	f104 0008 	add.w	r0, r4, #8
 800ee1e:	f7ff ff4b 	bl	800ecb8 <uxr_get_output_reliable_stream>
 800ee22:	4605      	mov	r5, r0
 800ee24:	f006 fdec 	bl	8015a00 <get_available_free_slots>
 800ee28:	b968      	cbnz	r0, 800ee46 <on_full_output_buffer_fragmented+0x3a>
 800ee2a:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 800ee2e:	4620      	mov	r0, r4
 800ee30:	4798      	blx	r3
 800ee32:	b918      	cbnz	r0, 800ee3c <on_full_output_buffer_fragmented+0x30>
 800ee34:	2001      	movs	r0, #1
 800ee36:	b00a      	add	sp, #40	@ 0x28
 800ee38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee3c:	4628      	mov	r0, r5
 800ee3e:	f006 fddf 	bl	8015a00 <get_available_free_slots>
 800ee42:	2800      	cmp	r0, #0
 800ee44:	d0f6      	beq.n	800ee34 <on_full_output_buffer_fragmented+0x28>
 800ee46:	8929      	ldrh	r1, [r5, #8]
 800ee48:	89eb      	ldrh	r3, [r5, #14]
 800ee4a:	7b28      	ldrb	r0, [r5, #12]
 800ee4c:	686a      	ldr	r2, [r5, #4]
 800ee4e:	fbb2 f8f1 	udiv	r8, r2, r1
 800ee52:	fbb3 f2f1 	udiv	r2, r3, r1
 800ee56:	fb01 3112 	mls	r1, r1, r2, r3
 800ee5a:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 800ee5e:	b289      	uxth	r1, r1
 800ee60:	fb08 f101 	mul.w	r1, r8, r1
 800ee64:	30fc      	adds	r0, #252	@ 0xfc
 800ee66:	f1a8 0804 	sub.w	r8, r8, #4
 800ee6a:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 800ee6e:	4440      	add	r0, r8
 800ee70:	b287      	uxth	r7, r0
 800ee72:	1bdb      	subs	r3, r3, r7
 800ee74:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 800ee78:	682b      	ldr	r3, [r5, #0]
 800ee7a:	3104      	adds	r1, #4
 800ee7c:	4419      	add	r1, r3
 800ee7e:	4642      	mov	r2, r8
 800ee80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ee84:	9300      	str	r3, [sp, #0]
 800ee86:	a802      	add	r0, sp, #8
 800ee88:	2300      	movs	r3, #0
 800ee8a:	f7fe f943 	bl	800d114 <ucdr_init_buffer_origin_offset>
 800ee8e:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 800ee92:	f102 0308 	add.w	r3, r2, #8
 800ee96:	4543      	cmp	r3, r8
 800ee98:	d928      	bls.n	800eeec <on_full_output_buffer_fragmented+0xe0>
 800ee9a:	463a      	mov	r2, r7
 800ee9c:	2300      	movs	r3, #0
 800ee9e:	210d      	movs	r1, #13
 800eea0:	a802      	add	r0, sp, #8
 800eea2:	f7ff ff3d 	bl	800ed20 <uxr_buffer_submessage_header>
 800eea6:	8929      	ldrh	r1, [r5, #8]
 800eea8:	89eb      	ldrh	r3, [r5, #14]
 800eeaa:	fbb3 f2f1 	udiv	r2, r3, r1
 800eeae:	fb01 3312 	mls	r3, r1, r2, r3
 800eeb2:	b29b      	uxth	r3, r3
 800eeb4:	686a      	ldr	r2, [r5, #4]
 800eeb6:	fbb2 f2f1 	udiv	r2, r2, r1
 800eeba:	fb02 f303 	mul.w	r3, r2, r3
 800eebe:	682a      	ldr	r2, [r5, #0]
 800eec0:	f842 8003 	str.w	r8, [r2, r3]
 800eec4:	89e8      	ldrh	r0, [r5, #14]
 800eec6:	2101      	movs	r1, #1
 800eec8:	f006 fdba 	bl	8015a40 <uxr_seq_num_add>
 800eecc:	9904      	ldr	r1, [sp, #16]
 800eece:	9a03      	ldr	r2, [sp, #12]
 800eed0:	81e8      	strh	r0, [r5, #14]
 800eed2:	1a52      	subs	r2, r2, r1
 800eed4:	4630      	mov	r0, r6
 800eed6:	f7fe f92f 	bl	800d138 <ucdr_init_buffer>
 800eeda:	4630      	mov	r0, r6
 800eedc:	490f      	ldr	r1, [pc, #60]	@ (800ef1c <on_full_output_buffer_fragmented+0x110>)
 800eede:	4622      	mov	r2, r4
 800eee0:	f7fe f8fe 	bl	800d0e0 <ucdr_set_on_full_buffer_callback>
 800eee4:	2000      	movs	r0, #0
 800eee6:	b00a      	add	sp, #40	@ 0x28
 800eee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eeec:	b292      	uxth	r2, r2
 800eeee:	2302      	movs	r3, #2
 800eef0:	210d      	movs	r1, #13
 800eef2:	a802      	add	r0, sp, #8
 800eef4:	f7ff ff14 	bl	800ed20 <uxr_buffer_submessage_header>
 800eef8:	8928      	ldrh	r0, [r5, #8]
 800eefa:	89eb      	ldrh	r3, [r5, #14]
 800eefc:	fbb3 f1f0 	udiv	r1, r3, r0
 800ef00:	fb00 3311 	mls	r3, r0, r1, r3
 800ef04:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 800ef08:	6869      	ldr	r1, [r5, #4]
 800ef0a:	fbb1 f1f0 	udiv	r1, r1, r0
 800ef0e:	b29b      	uxth	r3, r3
 800ef10:	fb01 f303 	mul.w	r3, r1, r3
 800ef14:	6829      	ldr	r1, [r5, #0]
 800ef16:	3208      	adds	r2, #8
 800ef18:	50ca      	str	r2, [r1, r3]
 800ef1a:	e7d3      	b.n	800eec4 <on_full_output_buffer_fragmented+0xb8>
 800ef1c:	0800ee0d 	.word	0x0800ee0d

0800ef20 <uxr_prepare_output_stream>:
 800ef20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef22:	b087      	sub	sp, #28
 800ef24:	2707      	movs	r7, #7
 800ef26:	9202      	str	r2, [sp, #8]
 800ef28:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ef2a:	9103      	str	r1, [sp, #12]
 800ef2c:	2500      	movs	r5, #0
 800ef2e:	3204      	adds	r2, #4
 800ef30:	e9cd 7500 	strd	r7, r5, [sp]
 800ef34:	461c      	mov	r4, r3
 800ef36:	4606      	mov	r6, r0
 800ef38:	f7ff fc54 	bl	800e7e4 <uxr_prepare_stream_to_write_submessage>
 800ef3c:	f080 0201 	eor.w	r2, r0, #1
 800ef40:	b2d2      	uxtb	r2, r2
 800ef42:	75a2      	strb	r2, [r4, #22]
 800ef44:	b112      	cbz	r2, 800ef4c <uxr_prepare_output_stream+0x2c>
 800ef46:	4628      	mov	r0, r5
 800ef48:	b007      	add	sp, #28
 800ef4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef4c:	aa05      	add	r2, sp, #20
 800ef4e:	9902      	ldr	r1, [sp, #8]
 800ef50:	4630      	mov	r0, r6
 800ef52:	f7ff fd7d 	bl	800ea50 <uxr_init_base_object_request>
 800ef56:	a905      	add	r1, sp, #20
 800ef58:	4605      	mov	r5, r0
 800ef5a:	4620      	mov	r0, r4
 800ef5c:	f001 f88c 	bl	8010078 <uxr_serialize_WRITE_DATA_Payload_Data>
 800ef60:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 800ef64:	69a6      	ldr	r6, [r4, #24]
 800ef66:	69e7      	ldr	r7, [r4, #28]
 800ef68:	1a52      	subs	r2, r2, r1
 800ef6a:	4620      	mov	r0, r4
 800ef6c:	f7fe f8e4 	bl	800d138 <ucdr_init_buffer>
 800ef70:	4620      	mov	r0, r4
 800ef72:	463a      	mov	r2, r7
 800ef74:	4631      	mov	r1, r6
 800ef76:	f7fe f8b3 	bl	800d0e0 <ucdr_set_on_full_buffer_callback>
 800ef7a:	4628      	mov	r0, r5
 800ef7c:	b007      	add	sp, #28
 800ef7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ef80 <uxr_prepare_output_stream_fragmented>:
 800ef80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef84:	b091      	sub	sp, #68	@ 0x44
 800ef86:	4605      	mov	r5, r0
 800ef88:	9105      	str	r1, [sp, #20]
 800ef8a:	3008      	adds	r0, #8
 800ef8c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800ef90:	461e      	mov	r6, r3
 800ef92:	9204      	str	r2, [sp, #16]
 800ef94:	f7ff fe90 	bl	800ecb8 <uxr_get_output_reliable_stream>
 800ef98:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800ef9c:	2b01      	cmp	r3, #1
 800ef9e:	f000 8091 	beq.w	800f0c4 <uxr_prepare_output_stream_fragmented+0x144>
 800efa2:	4604      	mov	r4, r0
 800efa4:	2800      	cmp	r0, #0
 800efa6:	f000 808d 	beq.w	800f0c4 <uxr_prepare_output_stream_fragmented+0x144>
 800efaa:	f006 fd29 	bl	8015a00 <get_available_free_slots>
 800efae:	2800      	cmp	r0, #0
 800efb0:	f000 8083 	beq.w	800f0ba <uxr_prepare_output_stream_fragmented+0x13a>
 800efb4:	8922      	ldrh	r2, [r4, #8]
 800efb6:	89e7      	ldrh	r7, [r4, #14]
 800efb8:	fbb7 f9f2 	udiv	r9, r7, r2
 800efbc:	fb02 7919 	mls	r9, r2, r9, r7
 800efc0:	fa1f f989 	uxth.w	r9, r9
 800efc4:	6863      	ldr	r3, [r4, #4]
 800efc6:	fbb3 f2f2 	udiv	r2, r3, r2
 800efca:	6823      	ldr	r3, [r4, #0]
 800efcc:	9203      	str	r2, [sp, #12]
 800efce:	fb02 f909 	mul.w	r9, r2, r9
 800efd2:	f109 0904 	add.w	r9, r9, #4
 800efd6:	4499      	add	r9, r3
 800efd8:	7b23      	ldrb	r3, [r4, #12]
 800efda:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800efde:	4543      	cmp	r3, r8
 800efe0:	f1a2 0b04 	sub.w	fp, r2, #4
 800efe4:	d37a      	bcc.n	800f0dc <uxr_prepare_output_stream_fragmented+0x15c>
 800efe6:	f1ab 0a04 	sub.w	sl, fp, #4
 800efea:	ebaa 0a03 	sub.w	sl, sl, r3
 800efee:	465a      	mov	r2, fp
 800eff0:	2300      	movs	r3, #0
 800eff2:	4649      	mov	r1, r9
 800eff4:	a808      	add	r0, sp, #32
 800eff6:	f8cd 8000 	str.w	r8, [sp]
 800effa:	f7fe f88b 	bl	800d114 <ucdr_init_buffer_origin_offset>
 800effe:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800f000:	fa1f fa8a 	uxth.w	sl, sl
 800f004:	4652      	mov	r2, sl
 800f006:	f103 0a08 	add.w	sl, r3, #8
 800f00a:	45da      	cmp	sl, fp
 800f00c:	bf34      	ite	cc
 800f00e:	2302      	movcc	r3, #2
 800f010:	2300      	movcs	r3, #0
 800f012:	210d      	movs	r1, #13
 800f014:	a808      	add	r0, sp, #32
 800f016:	f7ff fe83 	bl	800ed20 <uxr_buffer_submessage_header>
 800f01a:	8921      	ldrh	r1, [r4, #8]
 800f01c:	fbb7 f2f1 	udiv	r2, r7, r1
 800f020:	fb01 7212 	mls	r2, r1, r2, r7
 800f024:	b292      	uxth	r2, r2
 800f026:	6863      	ldr	r3, [r4, #4]
 800f028:	fbb3 f3f1 	udiv	r3, r3, r1
 800f02c:	fb02 f303 	mul.w	r3, r2, r3
 800f030:	6822      	ldr	r2, [r4, #0]
 800f032:	4638      	mov	r0, r7
 800f034:	f842 b003 	str.w	fp, [r2, r3]
 800f038:	2101      	movs	r1, #1
 800f03a:	f006 fd01 	bl	8015a40 <uxr_seq_num_add>
 800f03e:	9b03      	ldr	r3, [sp, #12]
 800f040:	f108 0104 	add.w	r1, r8, #4
 800f044:	f1a3 0208 	sub.w	r2, r3, #8
 800f048:	eba2 0208 	sub.w	r2, r2, r8
 800f04c:	4449      	add	r1, r9
 800f04e:	4607      	mov	r7, r0
 800f050:	4630      	mov	r0, r6
 800f052:	f7fe f871 	bl	800d138 <ucdr_init_buffer>
 800f056:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800f058:	81e7      	strh	r7, [r4, #14]
 800f05a:	1d1a      	adds	r2, r3, #4
 800f05c:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800f060:	bf28      	it	cs
 800f062:	2200      	movcs	r2, #0
 800f064:	2300      	movs	r3, #0
 800f066:	b292      	uxth	r2, r2
 800f068:	2107      	movs	r1, #7
 800f06a:	4630      	mov	r0, r6
 800f06c:	f7ff fe58 	bl	800ed20 <uxr_buffer_submessage_header>
 800f070:	9904      	ldr	r1, [sp, #16]
 800f072:	aa07      	add	r2, sp, #28
 800f074:	4628      	mov	r0, r5
 800f076:	f7ff fceb 	bl	800ea50 <uxr_init_base_object_request>
 800f07a:	4604      	mov	r4, r0
 800f07c:	b318      	cbz	r0, 800f0c6 <uxr_prepare_output_stream_fragmented+0x146>
 800f07e:	a907      	add	r1, sp, #28
 800f080:	4630      	mov	r0, r6
 800f082:	f000 fff9 	bl	8010078 <uxr_serialize_WRITE_DATA_Payload_Data>
 800f086:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 800f08a:	4630      	mov	r0, r6
 800f08c:	1a52      	subs	r2, r2, r1
 800f08e:	f7fe f853 	bl	800d138 <ucdr_init_buffer>
 800f092:	9b05      	ldr	r3, [sp, #20]
 800f094:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 800f098:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800f09a:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 800f09e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800f0a0:	491b      	ldr	r1, [pc, #108]	@ (800f110 <uxr_prepare_output_stream_fragmented+0x190>)
 800f0a2:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 800f0a6:	4630      	mov	r0, r6
 800f0a8:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 800f0ac:	462a      	mov	r2, r5
 800f0ae:	f7fe f817 	bl	800d0e0 <ucdr_set_on_full_buffer_callback>
 800f0b2:	4620      	mov	r0, r4
 800f0b4:	b011      	add	sp, #68	@ 0x44
 800f0b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0ba:	991c      	ldr	r1, [sp, #112]	@ 0x70
 800f0bc:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800f0be:	4628      	mov	r0, r5
 800f0c0:	4798      	blx	r3
 800f0c2:	b920      	cbnz	r0, 800f0ce <uxr_prepare_output_stream_fragmented+0x14e>
 800f0c4:	2400      	movs	r4, #0
 800f0c6:	4620      	mov	r0, r4
 800f0c8:	b011      	add	sp, #68	@ 0x44
 800f0ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0ce:	4620      	mov	r0, r4
 800f0d0:	f006 fc96 	bl	8015a00 <get_available_free_slots>
 800f0d4:	2800      	cmp	r0, #0
 800f0d6:	f47f af6d 	bne.w	800efb4 <uxr_prepare_output_stream_fragmented+0x34>
 800f0da:	e7f3      	b.n	800f0c4 <uxr_prepare_output_stream_fragmented+0x144>
 800f0dc:	4638      	mov	r0, r7
 800f0de:	2101      	movs	r1, #1
 800f0e0:	f006 fcae 	bl	8015a40 <uxr_seq_num_add>
 800f0e4:	8921      	ldrh	r1, [r4, #8]
 800f0e6:	fbb0 f2f1 	udiv	r2, r0, r1
 800f0ea:	fb01 0912 	mls	r9, r1, r2, r0
 800f0ee:	fa1f f289 	uxth.w	r2, r9
 800f0f2:	6863      	ldr	r3, [r4, #4]
 800f0f4:	fbb3 f9f1 	udiv	r9, r3, r1
 800f0f8:	6823      	ldr	r3, [r4, #0]
 800f0fa:	fb02 f909 	mul.w	r9, r2, r9
 800f0fe:	f109 0904 	add.w	r9, r9, #4
 800f102:	4499      	add	r9, r3
 800f104:	4607      	mov	r7, r0
 800f106:	7b23      	ldrb	r3, [r4, #12]
 800f108:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800f10c:	e76b      	b.n	800efe6 <uxr_prepare_output_stream_fragmented+0x66>
 800f10e:	bf00      	nop
 800f110:	0800ee0d 	.word	0x0800ee0d

0800f114 <uxr_serialize_message_header>:
 800f114:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f116:	b083      	sub	sp, #12
 800f118:	4616      	mov	r6, r2
 800f11a:	4604      	mov	r4, r0
 800f11c:	9301      	str	r3, [sp, #4]
 800f11e:	460d      	mov	r5, r1
 800f120:	9f08      	ldr	r7, [sp, #32]
 800f122:	f004 ff13 	bl	8013f4c <ucdr_serialize_uint8_t>
 800f126:	4631      	mov	r1, r6
 800f128:	4620      	mov	r0, r4
 800f12a:	f004 ff0f 	bl	8013f4c <ucdr_serialize_uint8_t>
 800f12e:	9a01      	ldr	r2, [sp, #4]
 800f130:	2101      	movs	r1, #1
 800f132:	4620      	mov	r0, r4
 800f134:	f004 ffb6 	bl	80140a4 <ucdr_serialize_endian_uint16_t>
 800f138:	062b      	lsls	r3, r5, #24
 800f13a:	d501      	bpl.n	800f140 <uxr_serialize_message_header+0x2c>
 800f13c:	b003      	add	sp, #12
 800f13e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f140:	2204      	movs	r2, #4
 800f142:	4639      	mov	r1, r7
 800f144:	4620      	mov	r0, r4
 800f146:	b003      	add	sp, #12
 800f148:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f14c:	f004 be08 	b.w	8013d60 <ucdr_serialize_array_uint8_t>

0800f150 <uxr_deserialize_message_header>:
 800f150:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f152:	b083      	sub	sp, #12
 800f154:	4616      	mov	r6, r2
 800f156:	4604      	mov	r4, r0
 800f158:	9301      	str	r3, [sp, #4]
 800f15a:	460d      	mov	r5, r1
 800f15c:	9f08      	ldr	r7, [sp, #32]
 800f15e:	f004 ff0b 	bl	8013f78 <ucdr_deserialize_uint8_t>
 800f162:	4631      	mov	r1, r6
 800f164:	4620      	mov	r0, r4
 800f166:	f004 ff07 	bl	8013f78 <ucdr_deserialize_uint8_t>
 800f16a:	9a01      	ldr	r2, [sp, #4]
 800f16c:	2101      	movs	r1, #1
 800f16e:	4620      	mov	r0, r4
 800f170:	f005 f88c 	bl	801428c <ucdr_deserialize_endian_uint16_t>
 800f174:	f995 3000 	ldrsb.w	r3, [r5]
 800f178:	2b00      	cmp	r3, #0
 800f17a:	da01      	bge.n	800f180 <uxr_deserialize_message_header+0x30>
 800f17c:	b003      	add	sp, #12
 800f17e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f180:	2204      	movs	r2, #4
 800f182:	4639      	mov	r1, r7
 800f184:	4620      	mov	r0, r4
 800f186:	b003      	add	sp, #12
 800f188:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f18c:	f004 be4c 	b.w	8013e28 <ucdr_deserialize_array_uint8_t>

0800f190 <uxr_serialize_submessage_header>:
 800f190:	b530      	push	{r4, r5, lr}
 800f192:	b083      	sub	sp, #12
 800f194:	4615      	mov	r5, r2
 800f196:	4604      	mov	r4, r0
 800f198:	9301      	str	r3, [sp, #4]
 800f19a:	f004 fed7 	bl	8013f4c <ucdr_serialize_uint8_t>
 800f19e:	4629      	mov	r1, r5
 800f1a0:	4620      	mov	r0, r4
 800f1a2:	f004 fed3 	bl	8013f4c <ucdr_serialize_uint8_t>
 800f1a6:	9a01      	ldr	r2, [sp, #4]
 800f1a8:	2101      	movs	r1, #1
 800f1aa:	4620      	mov	r0, r4
 800f1ac:	b003      	add	sp, #12
 800f1ae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f1b2:	f004 bf77 	b.w	80140a4 <ucdr_serialize_endian_uint16_t>
 800f1b6:	bf00      	nop

0800f1b8 <uxr_deserialize_submessage_header>:
 800f1b8:	b530      	push	{r4, r5, lr}
 800f1ba:	b083      	sub	sp, #12
 800f1bc:	4615      	mov	r5, r2
 800f1be:	4604      	mov	r4, r0
 800f1c0:	9301      	str	r3, [sp, #4]
 800f1c2:	f004 fed9 	bl	8013f78 <ucdr_deserialize_uint8_t>
 800f1c6:	4629      	mov	r1, r5
 800f1c8:	4620      	mov	r0, r4
 800f1ca:	f004 fed5 	bl	8013f78 <ucdr_deserialize_uint8_t>
 800f1ce:	9a01      	ldr	r2, [sp, #4]
 800f1d0:	2101      	movs	r1, #1
 800f1d2:	4620      	mov	r0, r4
 800f1d4:	b003      	add	sp, #12
 800f1d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f1da:	f005 b857 	b.w	801428c <ucdr_deserialize_endian_uint16_t>
 800f1de:	bf00      	nop

0800f1e0 <uxr_serialize_CLIENT_Representation>:
 800f1e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f1e4:	2204      	movs	r2, #4
 800f1e6:	460e      	mov	r6, r1
 800f1e8:	4605      	mov	r5, r0
 800f1ea:	f004 fdb9 	bl	8013d60 <ucdr_serialize_array_uint8_t>
 800f1ee:	2202      	movs	r2, #2
 800f1f0:	4607      	mov	r7, r0
 800f1f2:	1d31      	adds	r1, r6, #4
 800f1f4:	4628      	mov	r0, r5
 800f1f6:	f004 fdb3 	bl	8013d60 <ucdr_serialize_array_uint8_t>
 800f1fa:	4038      	ands	r0, r7
 800f1fc:	2202      	movs	r2, #2
 800f1fe:	1db1      	adds	r1, r6, #6
 800f200:	b2c7      	uxtb	r7, r0
 800f202:	4628      	mov	r0, r5
 800f204:	f004 fdac 	bl	8013d60 <ucdr_serialize_array_uint8_t>
 800f208:	2204      	movs	r2, #4
 800f20a:	4007      	ands	r7, r0
 800f20c:	f106 0108 	add.w	r1, r6, #8
 800f210:	4628      	mov	r0, r5
 800f212:	f004 fda5 	bl	8013d60 <ucdr_serialize_array_uint8_t>
 800f216:	7b31      	ldrb	r1, [r6, #12]
 800f218:	4007      	ands	r7, r0
 800f21a:	4628      	mov	r0, r5
 800f21c:	f004 fe96 	bl	8013f4c <ucdr_serialize_uint8_t>
 800f220:	7b71      	ldrb	r1, [r6, #13]
 800f222:	4007      	ands	r7, r0
 800f224:	4628      	mov	r0, r5
 800f226:	f004 fe63 	bl	8013ef0 <ucdr_serialize_bool>
 800f22a:	7b73      	ldrb	r3, [r6, #13]
 800f22c:	ea07 0800 	and.w	r8, r7, r0
 800f230:	b93b      	cbnz	r3, 800f242 <uxr_serialize_CLIENT_Representation+0x62>
 800f232:	8bb1      	ldrh	r1, [r6, #28]
 800f234:	4628      	mov	r0, r5
 800f236:	f004 feb5 	bl	8013fa4 <ucdr_serialize_uint16_t>
 800f23a:	ea08 0000 	and.w	r0, r8, r0
 800f23e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f242:	6931      	ldr	r1, [r6, #16]
 800f244:	4628      	mov	r0, r5
 800f246:	f005 f897 	bl	8014378 <ucdr_serialize_uint32_t>
 800f24a:	6933      	ldr	r3, [r6, #16]
 800f24c:	b1e3      	cbz	r3, 800f288 <uxr_serialize_CLIENT_Representation+0xa8>
 800f24e:	b1c0      	cbz	r0, 800f282 <uxr_serialize_CLIENT_Representation+0xa2>
 800f250:	4637      	mov	r7, r6
 800f252:	f04f 0900 	mov.w	r9, #0
 800f256:	e001      	b.n	800f25c <uxr_serialize_CLIENT_Representation+0x7c>
 800f258:	3708      	adds	r7, #8
 800f25a:	b194      	cbz	r4, 800f282 <uxr_serialize_CLIENT_Representation+0xa2>
 800f25c:	6979      	ldr	r1, [r7, #20]
 800f25e:	4628      	mov	r0, r5
 800f260:	f005 fdcc 	bl	8014dfc <ucdr_serialize_string>
 800f264:	69b9      	ldr	r1, [r7, #24]
 800f266:	4604      	mov	r4, r0
 800f268:	4628      	mov	r0, r5
 800f26a:	f005 fdc7 	bl	8014dfc <ucdr_serialize_string>
 800f26e:	6933      	ldr	r3, [r6, #16]
 800f270:	f109 0901 	add.w	r9, r9, #1
 800f274:	4004      	ands	r4, r0
 800f276:	4599      	cmp	r9, r3
 800f278:	b2e4      	uxtb	r4, r4
 800f27a:	d3ed      	bcc.n	800f258 <uxr_serialize_CLIENT_Representation+0x78>
 800f27c:	ea08 0804 	and.w	r8, r8, r4
 800f280:	e7d7      	b.n	800f232 <uxr_serialize_CLIENT_Representation+0x52>
 800f282:	f04f 0800 	mov.w	r8, #0
 800f286:	e7d4      	b.n	800f232 <uxr_serialize_CLIENT_Representation+0x52>
 800f288:	ea08 0800 	and.w	r8, r8, r0
 800f28c:	e7d1      	b.n	800f232 <uxr_serialize_CLIENT_Representation+0x52>
 800f28e:	bf00      	nop

0800f290 <uxr_deserialize_CLIENT_Representation>:
 800f290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f294:	2204      	movs	r2, #4
 800f296:	460c      	mov	r4, r1
 800f298:	4605      	mov	r5, r0
 800f29a:	f004 fdc5 	bl	8013e28 <ucdr_deserialize_array_uint8_t>
 800f29e:	2202      	movs	r2, #2
 800f2a0:	4607      	mov	r7, r0
 800f2a2:	1d21      	adds	r1, r4, #4
 800f2a4:	4628      	mov	r0, r5
 800f2a6:	f004 fdbf 	bl	8013e28 <ucdr_deserialize_array_uint8_t>
 800f2aa:	4038      	ands	r0, r7
 800f2ac:	2202      	movs	r2, #2
 800f2ae:	1da1      	adds	r1, r4, #6
 800f2b0:	b2c6      	uxtb	r6, r0
 800f2b2:	4628      	mov	r0, r5
 800f2b4:	f004 fdb8 	bl	8013e28 <ucdr_deserialize_array_uint8_t>
 800f2b8:	2204      	movs	r2, #4
 800f2ba:	4006      	ands	r6, r0
 800f2bc:	f104 0108 	add.w	r1, r4, #8
 800f2c0:	4628      	mov	r0, r5
 800f2c2:	f004 fdb1 	bl	8013e28 <ucdr_deserialize_array_uint8_t>
 800f2c6:	f104 010c 	add.w	r1, r4, #12
 800f2ca:	4006      	ands	r6, r0
 800f2cc:	4628      	mov	r0, r5
 800f2ce:	f004 fe53 	bl	8013f78 <ucdr_deserialize_uint8_t>
 800f2d2:	f104 010d 	add.w	r1, r4, #13
 800f2d6:	ea06 0700 	and.w	r7, r6, r0
 800f2da:	4628      	mov	r0, r5
 800f2dc:	f004 fe1e 	bl	8013f1c <ucdr_deserialize_bool>
 800f2e0:	7b63      	ldrb	r3, [r4, #13]
 800f2e2:	4007      	ands	r7, r0
 800f2e4:	b93b      	cbnz	r3, 800f2f6 <uxr_deserialize_CLIENT_Representation+0x66>
 800f2e6:	f104 011c 	add.w	r1, r4, #28
 800f2ea:	4628      	mov	r0, r5
 800f2ec:	f004 ff5a 	bl	80141a4 <ucdr_deserialize_uint16_t>
 800f2f0:	4038      	ands	r0, r7
 800f2f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f2f6:	f104 0110 	add.w	r1, r4, #16
 800f2fa:	4628      	mov	r0, r5
 800f2fc:	f005 f96c 	bl	80145d8 <ucdr_deserialize_uint32_t>
 800f300:	6923      	ldr	r3, [r4, #16]
 800f302:	2b01      	cmp	r3, #1
 800f304:	d903      	bls.n	800f30e <uxr_deserialize_CLIENT_Representation+0x7e>
 800f306:	2301      	movs	r3, #1
 800f308:	75ab      	strb	r3, [r5, #22]
 800f30a:	2700      	movs	r7, #0
 800f30c:	e7eb      	b.n	800f2e6 <uxr_deserialize_CLIENT_Representation+0x56>
 800f30e:	b30b      	cbz	r3, 800f354 <uxr_deserialize_CLIENT_Representation+0xc4>
 800f310:	2800      	cmp	r0, #0
 800f312:	d0fa      	beq.n	800f30a <uxr_deserialize_CLIENT_Representation+0x7a>
 800f314:	46a0      	mov	r8, r4
 800f316:	f04f 0900 	mov.w	r9, #0
 800f31a:	e001      	b.n	800f320 <uxr_deserialize_CLIENT_Representation+0x90>
 800f31c:	2e00      	cmp	r6, #0
 800f31e:	d0f4      	beq.n	800f30a <uxr_deserialize_CLIENT_Representation+0x7a>
 800f320:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800f324:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f328:	4628      	mov	r0, r5
 800f32a:	f005 fd77 	bl	8014e1c <ucdr_deserialize_string>
 800f32e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f332:	4606      	mov	r6, r0
 800f334:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800f338:	4628      	mov	r0, r5
 800f33a:	f005 fd6f 	bl	8014e1c <ucdr_deserialize_string>
 800f33e:	6923      	ldr	r3, [r4, #16]
 800f340:	f109 0901 	add.w	r9, r9, #1
 800f344:	4006      	ands	r6, r0
 800f346:	4599      	cmp	r9, r3
 800f348:	f108 0808 	add.w	r8, r8, #8
 800f34c:	b2f6      	uxtb	r6, r6
 800f34e:	d3e5      	bcc.n	800f31c <uxr_deserialize_CLIENT_Representation+0x8c>
 800f350:	4037      	ands	r7, r6
 800f352:	e7c8      	b.n	800f2e6 <uxr_deserialize_CLIENT_Representation+0x56>
 800f354:	4007      	ands	r7, r0
 800f356:	e7c6      	b.n	800f2e6 <uxr_deserialize_CLIENT_Representation+0x56>

0800f358 <uxr_serialize_AGENT_Representation>:
 800f358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f35c:	2204      	movs	r2, #4
 800f35e:	460f      	mov	r7, r1
 800f360:	4605      	mov	r5, r0
 800f362:	f004 fcfd 	bl	8013d60 <ucdr_serialize_array_uint8_t>
 800f366:	2202      	movs	r2, #2
 800f368:	4604      	mov	r4, r0
 800f36a:	1d39      	adds	r1, r7, #4
 800f36c:	4628      	mov	r0, r5
 800f36e:	f004 fcf7 	bl	8013d60 <ucdr_serialize_array_uint8_t>
 800f372:	4020      	ands	r0, r4
 800f374:	2202      	movs	r2, #2
 800f376:	1db9      	adds	r1, r7, #6
 800f378:	b2c4      	uxtb	r4, r0
 800f37a:	4628      	mov	r0, r5
 800f37c:	f004 fcf0 	bl	8013d60 <ucdr_serialize_array_uint8_t>
 800f380:	7a39      	ldrb	r1, [r7, #8]
 800f382:	4004      	ands	r4, r0
 800f384:	4628      	mov	r0, r5
 800f386:	f004 fdb3 	bl	8013ef0 <ucdr_serialize_bool>
 800f38a:	7a3b      	ldrb	r3, [r7, #8]
 800f38c:	ea00 0804 	and.w	r8, r0, r4
 800f390:	b913      	cbnz	r3, 800f398 <uxr_serialize_AGENT_Representation+0x40>
 800f392:	4640      	mov	r0, r8
 800f394:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f398:	68f9      	ldr	r1, [r7, #12]
 800f39a:	4628      	mov	r0, r5
 800f39c:	f004 ffec 	bl	8014378 <ucdr_serialize_uint32_t>
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	b303      	cbz	r3, 800f3e6 <uxr_serialize_AGENT_Representation+0x8e>
 800f3a4:	b1d0      	cbz	r0, 800f3dc <uxr_serialize_AGENT_Representation+0x84>
 800f3a6:	463e      	mov	r6, r7
 800f3a8:	f04f 0900 	mov.w	r9, #0
 800f3ac:	e001      	b.n	800f3b2 <uxr_serialize_AGENT_Representation+0x5a>
 800f3ae:	3608      	adds	r6, #8
 800f3b0:	b1a4      	cbz	r4, 800f3dc <uxr_serialize_AGENT_Representation+0x84>
 800f3b2:	6931      	ldr	r1, [r6, #16]
 800f3b4:	4628      	mov	r0, r5
 800f3b6:	f005 fd21 	bl	8014dfc <ucdr_serialize_string>
 800f3ba:	6971      	ldr	r1, [r6, #20]
 800f3bc:	4604      	mov	r4, r0
 800f3be:	4628      	mov	r0, r5
 800f3c0:	f005 fd1c 	bl	8014dfc <ucdr_serialize_string>
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	f109 0901 	add.w	r9, r9, #1
 800f3ca:	4004      	ands	r4, r0
 800f3cc:	4599      	cmp	r9, r3
 800f3ce:	b2e4      	uxtb	r4, r4
 800f3d0:	d3ed      	bcc.n	800f3ae <uxr_serialize_AGENT_Representation+0x56>
 800f3d2:	ea08 0804 	and.w	r8, r8, r4
 800f3d6:	4640      	mov	r0, r8
 800f3d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f3dc:	f04f 0800 	mov.w	r8, #0
 800f3e0:	4640      	mov	r0, r8
 800f3e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f3e6:	ea08 0800 	and.w	r8, r8, r0
 800f3ea:	e7d2      	b.n	800f392 <uxr_serialize_AGENT_Representation+0x3a>

0800f3ec <uxr_serialize_DATAWRITER_Representation>:
 800f3ec:	b570      	push	{r4, r5, r6, lr}
 800f3ee:	460d      	mov	r5, r1
 800f3f0:	7809      	ldrb	r1, [r1, #0]
 800f3f2:	4606      	mov	r6, r0
 800f3f4:	f004 fdaa 	bl	8013f4c <ucdr_serialize_uint8_t>
 800f3f8:	4604      	mov	r4, r0
 800f3fa:	b130      	cbz	r0, 800f40a <uxr_serialize_DATAWRITER_Representation+0x1e>
 800f3fc:	782b      	ldrb	r3, [r5, #0]
 800f3fe:	2b02      	cmp	r3, #2
 800f400:	d00c      	beq.n	800f41c <uxr_serialize_DATAWRITER_Representation+0x30>
 800f402:	2b03      	cmp	r3, #3
 800f404:	d010      	beq.n	800f428 <uxr_serialize_DATAWRITER_Representation+0x3c>
 800f406:	2b01      	cmp	r3, #1
 800f408:	d008      	beq.n	800f41c <uxr_serialize_DATAWRITER_Representation+0x30>
 800f40a:	2202      	movs	r2, #2
 800f40c:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 800f410:	4630      	mov	r0, r6
 800f412:	f004 fca5 	bl	8013d60 <ucdr_serialize_array_uint8_t>
 800f416:	4020      	ands	r0, r4
 800f418:	b2c0      	uxtb	r0, r0
 800f41a:	bd70      	pop	{r4, r5, r6, pc}
 800f41c:	6869      	ldr	r1, [r5, #4]
 800f41e:	4630      	mov	r0, r6
 800f420:	f005 fcec 	bl	8014dfc <ucdr_serialize_string>
 800f424:	4604      	mov	r4, r0
 800f426:	e7f0      	b.n	800f40a <uxr_serialize_DATAWRITER_Representation+0x1e>
 800f428:	4629      	mov	r1, r5
 800f42a:	4630      	mov	r0, r6
 800f42c:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800f430:	3104      	adds	r1, #4
 800f432:	f7fd ff1d 	bl	800d270 <ucdr_serialize_sequence_uint8_t>
 800f436:	4604      	mov	r4, r0
 800f438:	e7e7      	b.n	800f40a <uxr_serialize_DATAWRITER_Representation+0x1e>
 800f43a:	bf00      	nop

0800f43c <uxr_serialize_ObjectVariant.part.0>:
 800f43c:	b570      	push	{r4, r5, r6, lr}
 800f43e:	780b      	ldrb	r3, [r1, #0]
 800f440:	3b01      	subs	r3, #1
 800f442:	460c      	mov	r4, r1
 800f444:	4605      	mov	r5, r0
 800f446:	2b0d      	cmp	r3, #13
 800f448:	d854      	bhi.n	800f4f4 <uxr_serialize_ObjectVariant.part.0+0xb8>
 800f44a:	e8df f003 	tbb	[pc, r3]
 800f44e:	0730      	.short	0x0730
 800f450:	07071b1b 	.word	0x07071b1b
 800f454:	0c530707 	.word	0x0c530707
 800f458:	494e0c0c 	.word	0x494e0c0c
 800f45c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f460:	3104      	adds	r1, #4
 800f462:	f7ff bfc3 	b.w	800f3ec <uxr_serialize_DATAWRITER_Representation>
 800f466:	7909      	ldrb	r1, [r1, #4]
 800f468:	f004 fd70 	bl	8013f4c <ucdr_serialize_uint8_t>
 800f46c:	b1e8      	cbz	r0, 800f4aa <uxr_serialize_ObjectVariant.part.0+0x6e>
 800f46e:	7923      	ldrb	r3, [r4, #4]
 800f470:	2b01      	cmp	r3, #1
 800f472:	d001      	beq.n	800f478 <uxr_serialize_ObjectVariant.part.0+0x3c>
 800f474:	2b02      	cmp	r3, #2
 800f476:	d13d      	bne.n	800f4f4 <uxr_serialize_ObjectVariant.part.0+0xb8>
 800f478:	68a1      	ldr	r1, [r4, #8]
 800f47a:	4628      	mov	r0, r5
 800f47c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f480:	f005 bcbc 	b.w	8014dfc <ucdr_serialize_string>
 800f484:	7909      	ldrb	r1, [r1, #4]
 800f486:	f004 fd61 	bl	8013f4c <ucdr_serialize_uint8_t>
 800f48a:	4606      	mov	r6, r0
 800f48c:	b120      	cbz	r0, 800f498 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800f48e:	7923      	ldrb	r3, [r4, #4]
 800f490:	2b02      	cmp	r3, #2
 800f492:	d039      	beq.n	800f508 <uxr_serialize_ObjectVariant.part.0+0xcc>
 800f494:	2b03      	cmp	r3, #3
 800f496:	d02f      	beq.n	800f4f8 <uxr_serialize_ObjectVariant.part.0+0xbc>
 800f498:	2202      	movs	r2, #2
 800f49a:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 800f49e:	4628      	mov	r0, r5
 800f4a0:	f004 fc5e 	bl	8013d60 <ucdr_serialize_array_uint8_t>
 800f4a4:	4030      	ands	r0, r6
 800f4a6:	b2c0      	uxtb	r0, r0
 800f4a8:	bd70      	pop	{r4, r5, r6, pc}
 800f4aa:	2000      	movs	r0, #0
 800f4ac:	bd70      	pop	{r4, r5, r6, pc}
 800f4ae:	7909      	ldrb	r1, [r1, #4]
 800f4b0:	f004 fd4c 	bl	8013f4c <ucdr_serialize_uint8_t>
 800f4b4:	4606      	mov	r6, r0
 800f4b6:	b158      	cbz	r0, 800f4d0 <uxr_serialize_ObjectVariant.part.0+0x94>
 800f4b8:	7923      	ldrb	r3, [r4, #4]
 800f4ba:	2b02      	cmp	r3, #2
 800f4bc:	d003      	beq.n	800f4c6 <uxr_serialize_ObjectVariant.part.0+0x8a>
 800f4be:	2b03      	cmp	r3, #3
 800f4c0:	d028      	beq.n	800f514 <uxr_serialize_ObjectVariant.part.0+0xd8>
 800f4c2:	2b01      	cmp	r3, #1
 800f4c4:	d104      	bne.n	800f4d0 <uxr_serialize_ObjectVariant.part.0+0x94>
 800f4c6:	68a1      	ldr	r1, [r4, #8]
 800f4c8:	4628      	mov	r0, r5
 800f4ca:	f005 fc97 	bl	8014dfc <ucdr_serialize_string>
 800f4ce:	4606      	mov	r6, r0
 800f4d0:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 800f4d4:	4628      	mov	r0, r5
 800f4d6:	f005 fa75 	bl	80149c4 <ucdr_serialize_int16_t>
 800f4da:	4030      	ands	r0, r6
 800f4dc:	b2c0      	uxtb	r0, r0
 800f4de:	bd70      	pop	{r4, r5, r6, pc}
 800f4e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f4e4:	3104      	adds	r1, #4
 800f4e6:	f7ff be7b 	b.w	800f1e0 <uxr_serialize_CLIENT_Representation>
 800f4ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f4ee:	3104      	adds	r1, #4
 800f4f0:	f7ff bf32 	b.w	800f358 <uxr_serialize_AGENT_Representation>
 800f4f4:	2001      	movs	r0, #1
 800f4f6:	bd70      	pop	{r4, r5, r6, pc}
 800f4f8:	68a2      	ldr	r2, [r4, #8]
 800f4fa:	f104 010c 	add.w	r1, r4, #12
 800f4fe:	4628      	mov	r0, r5
 800f500:	f7fd feb6 	bl	800d270 <ucdr_serialize_sequence_uint8_t>
 800f504:	4606      	mov	r6, r0
 800f506:	e7c7      	b.n	800f498 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800f508:	68a1      	ldr	r1, [r4, #8]
 800f50a:	4628      	mov	r0, r5
 800f50c:	f005 fc76 	bl	8014dfc <ucdr_serialize_string>
 800f510:	4606      	mov	r6, r0
 800f512:	e7c1      	b.n	800f498 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800f514:	68a2      	ldr	r2, [r4, #8]
 800f516:	f104 010c 	add.w	r1, r4, #12
 800f51a:	4628      	mov	r0, r5
 800f51c:	f7fd fea8 	bl	800d270 <ucdr_serialize_sequence_uint8_t>
 800f520:	4606      	mov	r6, r0
 800f522:	e7d5      	b.n	800f4d0 <uxr_serialize_ObjectVariant.part.0+0x94>

0800f524 <uxr_deserialize_DATAWRITER_Representation>:
 800f524:	b570      	push	{r4, r5, r6, lr}
 800f526:	4606      	mov	r6, r0
 800f528:	460d      	mov	r5, r1
 800f52a:	f004 fd25 	bl	8013f78 <ucdr_deserialize_uint8_t>
 800f52e:	4604      	mov	r4, r0
 800f530:	b130      	cbz	r0, 800f540 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800f532:	782b      	ldrb	r3, [r5, #0]
 800f534:	2b02      	cmp	r3, #2
 800f536:	d00c      	beq.n	800f552 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800f538:	2b03      	cmp	r3, #3
 800f53a:	d012      	beq.n	800f562 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 800f53c:	2b01      	cmp	r3, #1
 800f53e:	d008      	beq.n	800f552 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800f540:	2202      	movs	r2, #2
 800f542:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 800f546:	4630      	mov	r0, r6
 800f548:	f004 fc6e 	bl	8013e28 <ucdr_deserialize_array_uint8_t>
 800f54c:	4020      	ands	r0, r4
 800f54e:	b2c0      	uxtb	r0, r0
 800f550:	bd70      	pop	{r4, r5, r6, pc}
 800f552:	6869      	ldr	r1, [r5, #4]
 800f554:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f558:	4630      	mov	r0, r6
 800f55a:	f005 fc5f 	bl	8014e1c <ucdr_deserialize_string>
 800f55e:	4604      	mov	r4, r0
 800f560:	e7ee      	b.n	800f540 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800f562:	1d2b      	adds	r3, r5, #4
 800f564:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f568:	f105 0108 	add.w	r1, r5, #8
 800f56c:	4630      	mov	r0, r6
 800f56e:	f7fd fe91 	bl	800d294 <ucdr_deserialize_sequence_uint8_t>
 800f572:	4604      	mov	r4, r0
 800f574:	e7e4      	b.n	800f540 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800f576:	bf00      	nop

0800f578 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 800f578:	b570      	push	{r4, r5, r6, lr}
 800f57a:	460d      	mov	r5, r1
 800f57c:	7809      	ldrb	r1, [r1, #0]
 800f57e:	4606      	mov	r6, r0
 800f580:	f004 fcb6 	bl	8013ef0 <ucdr_serialize_bool>
 800f584:	782b      	ldrb	r3, [r5, #0]
 800f586:	4604      	mov	r4, r0
 800f588:	b94b      	cbnz	r3, 800f59e <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 800f58a:	7a29      	ldrb	r1, [r5, #8]
 800f58c:	4630      	mov	r0, r6
 800f58e:	f004 fcaf 	bl	8013ef0 <ucdr_serialize_bool>
 800f592:	7a2b      	ldrb	r3, [r5, #8]
 800f594:	4004      	ands	r4, r0
 800f596:	b2e4      	uxtb	r4, r4
 800f598:	b943      	cbnz	r3, 800f5ac <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 800f59a:	4620      	mov	r0, r4
 800f59c:	bd70      	pop	{r4, r5, r6, pc}
 800f59e:	6869      	ldr	r1, [r5, #4]
 800f5a0:	4630      	mov	r0, r6
 800f5a2:	f005 fc2b 	bl	8014dfc <ucdr_serialize_string>
 800f5a6:	4004      	ands	r4, r0
 800f5a8:	b2e4      	uxtb	r4, r4
 800f5aa:	e7ee      	b.n	800f58a <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 800f5ac:	68e9      	ldr	r1, [r5, #12]
 800f5ae:	4630      	mov	r0, r6
 800f5b0:	f005 fc24 	bl	8014dfc <ucdr_serialize_string>
 800f5b4:	4004      	ands	r4, r0
 800f5b6:	4620      	mov	r0, r4
 800f5b8:	bd70      	pop	{r4, r5, r6, pc}
 800f5ba:	bf00      	nop

0800f5bc <uxr_serialize_OBJK_Topic_Binary>:
 800f5bc:	b570      	push	{r4, r5, r6, lr}
 800f5be:	460d      	mov	r5, r1
 800f5c0:	6809      	ldr	r1, [r1, #0]
 800f5c2:	4606      	mov	r6, r0
 800f5c4:	f005 fc1a 	bl	8014dfc <ucdr_serialize_string>
 800f5c8:	7929      	ldrb	r1, [r5, #4]
 800f5ca:	4604      	mov	r4, r0
 800f5cc:	4630      	mov	r0, r6
 800f5ce:	f004 fc8f 	bl	8013ef0 <ucdr_serialize_bool>
 800f5d2:	792b      	ldrb	r3, [r5, #4]
 800f5d4:	4004      	ands	r4, r0
 800f5d6:	b2e4      	uxtb	r4, r4
 800f5d8:	b943      	cbnz	r3, 800f5ec <uxr_serialize_OBJK_Topic_Binary+0x30>
 800f5da:	7b29      	ldrb	r1, [r5, #12]
 800f5dc:	4630      	mov	r0, r6
 800f5de:	f004 fc87 	bl	8013ef0 <ucdr_serialize_bool>
 800f5e2:	7b2b      	ldrb	r3, [r5, #12]
 800f5e4:	4004      	ands	r4, r0
 800f5e6:	b93b      	cbnz	r3, 800f5f8 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 800f5e8:	4620      	mov	r0, r4
 800f5ea:	bd70      	pop	{r4, r5, r6, pc}
 800f5ec:	68a9      	ldr	r1, [r5, #8]
 800f5ee:	4630      	mov	r0, r6
 800f5f0:	f005 fc04 	bl	8014dfc <ucdr_serialize_string>
 800f5f4:	4004      	ands	r4, r0
 800f5f6:	e7f0      	b.n	800f5da <uxr_serialize_OBJK_Topic_Binary+0x1e>
 800f5f8:	6929      	ldr	r1, [r5, #16]
 800f5fa:	4630      	mov	r0, r6
 800f5fc:	f005 fbfe 	bl	8014dfc <ucdr_serialize_string>
 800f600:	4004      	ands	r4, r0
 800f602:	b2e4      	uxtb	r4, r4
 800f604:	4620      	mov	r0, r4
 800f606:	bd70      	pop	{r4, r5, r6, pc}

0800f608 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 800f608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f60c:	460c      	mov	r4, r1
 800f60e:	7809      	ldrb	r1, [r1, #0]
 800f610:	4606      	mov	r6, r0
 800f612:	f004 fc6d 	bl	8013ef0 <ucdr_serialize_bool>
 800f616:	7823      	ldrb	r3, [r4, #0]
 800f618:	4605      	mov	r5, r0
 800f61a:	b96b      	cbnz	r3, 800f638 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 800f61c:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 800f620:	4630      	mov	r0, r6
 800f622:	f004 fc65 	bl	8013ef0 <ucdr_serialize_bool>
 800f626:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800f62a:	4005      	ands	r5, r0
 800f62c:	b2ed      	uxtb	r5, r5
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d169      	bne.n	800f706 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 800f632:	4628      	mov	r0, r5
 800f634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f638:	6861      	ldr	r1, [r4, #4]
 800f63a:	4630      	mov	r0, r6
 800f63c:	f004 fe9c 	bl	8014378 <ucdr_serialize_uint32_t>
 800f640:	6863      	ldr	r3, [r4, #4]
 800f642:	2b00      	cmp	r3, #0
 800f644:	d06b      	beq.n	800f71e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 800f646:	2800      	cmp	r0, #0
 800f648:	d067      	beq.n	800f71a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f64a:	68a1      	ldr	r1, [r4, #8]
 800f64c:	4630      	mov	r0, r6
 800f64e:	f005 fbd5 	bl	8014dfc <ucdr_serialize_string>
 800f652:	6863      	ldr	r3, [r4, #4]
 800f654:	2b01      	cmp	r3, #1
 800f656:	d953      	bls.n	800f700 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f658:	2800      	cmp	r0, #0
 800f65a:	d05e      	beq.n	800f71a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f65c:	68e1      	ldr	r1, [r4, #12]
 800f65e:	4630      	mov	r0, r6
 800f660:	f005 fbcc 	bl	8014dfc <ucdr_serialize_string>
 800f664:	6863      	ldr	r3, [r4, #4]
 800f666:	2b02      	cmp	r3, #2
 800f668:	d94a      	bls.n	800f700 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f66a:	2800      	cmp	r0, #0
 800f66c:	d055      	beq.n	800f71a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f66e:	6921      	ldr	r1, [r4, #16]
 800f670:	4630      	mov	r0, r6
 800f672:	f005 fbc3 	bl	8014dfc <ucdr_serialize_string>
 800f676:	6863      	ldr	r3, [r4, #4]
 800f678:	2b03      	cmp	r3, #3
 800f67a:	d941      	bls.n	800f700 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f67c:	2800      	cmp	r0, #0
 800f67e:	d04c      	beq.n	800f71a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f680:	6961      	ldr	r1, [r4, #20]
 800f682:	4630      	mov	r0, r6
 800f684:	f005 fbba 	bl	8014dfc <ucdr_serialize_string>
 800f688:	6863      	ldr	r3, [r4, #4]
 800f68a:	2b04      	cmp	r3, #4
 800f68c:	d938      	bls.n	800f700 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f68e:	2800      	cmp	r0, #0
 800f690:	d043      	beq.n	800f71a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f692:	69a1      	ldr	r1, [r4, #24]
 800f694:	4630      	mov	r0, r6
 800f696:	f005 fbb1 	bl	8014dfc <ucdr_serialize_string>
 800f69a:	6863      	ldr	r3, [r4, #4]
 800f69c:	2b05      	cmp	r3, #5
 800f69e:	d92f      	bls.n	800f700 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f6a0:	2800      	cmp	r0, #0
 800f6a2:	d03a      	beq.n	800f71a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f6a4:	69e1      	ldr	r1, [r4, #28]
 800f6a6:	4630      	mov	r0, r6
 800f6a8:	f005 fba8 	bl	8014dfc <ucdr_serialize_string>
 800f6ac:	6863      	ldr	r3, [r4, #4]
 800f6ae:	2b06      	cmp	r3, #6
 800f6b0:	d926      	bls.n	800f700 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f6b2:	b390      	cbz	r0, 800f71a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f6b4:	6a21      	ldr	r1, [r4, #32]
 800f6b6:	4630      	mov	r0, r6
 800f6b8:	f005 fba0 	bl	8014dfc <ucdr_serialize_string>
 800f6bc:	6863      	ldr	r3, [r4, #4]
 800f6be:	2b07      	cmp	r3, #7
 800f6c0:	d91e      	bls.n	800f700 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f6c2:	b350      	cbz	r0, 800f71a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f6c4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800f6c6:	4630      	mov	r0, r6
 800f6c8:	f005 fb98 	bl	8014dfc <ucdr_serialize_string>
 800f6cc:	6863      	ldr	r3, [r4, #4]
 800f6ce:	2b08      	cmp	r3, #8
 800f6d0:	d916      	bls.n	800f700 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f6d2:	b310      	cbz	r0, 800f71a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f6d4:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800f6d6:	4630      	mov	r0, r6
 800f6d8:	f005 fb90 	bl	8014dfc <ucdr_serialize_string>
 800f6dc:	6863      	ldr	r3, [r4, #4]
 800f6de:	2b09      	cmp	r3, #9
 800f6e0:	d90e      	bls.n	800f700 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f6e2:	b1d0      	cbz	r0, 800f71a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f6e4:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 800f6e8:	2709      	movs	r7, #9
 800f6ea:	e000      	b.n	800f6ee <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 800f6ec:	b1a8      	cbz	r0, 800f71a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f6ee:	f858 1b04 	ldr.w	r1, [r8], #4
 800f6f2:	4630      	mov	r0, r6
 800f6f4:	f005 fb82 	bl	8014dfc <ucdr_serialize_string>
 800f6f8:	6862      	ldr	r2, [r4, #4]
 800f6fa:	3701      	adds	r7, #1
 800f6fc:	4297      	cmp	r7, r2
 800f6fe:	d3f5      	bcc.n	800f6ec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 800f700:	4005      	ands	r5, r0
 800f702:	b2ed      	uxtb	r5, r5
 800f704:	e78a      	b.n	800f61c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800f706:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800f708:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800f70c:	4630      	mov	r0, r6
 800f70e:	f7fd fdaf 	bl	800d270 <ucdr_serialize_sequence_uint8_t>
 800f712:	4005      	ands	r5, r0
 800f714:	4628      	mov	r0, r5
 800f716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f71a:	2500      	movs	r5, #0
 800f71c:	e77e      	b.n	800f61c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800f71e:	4028      	ands	r0, r5
 800f720:	b2c5      	uxtb	r5, r0
 800f722:	e77b      	b.n	800f61c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

0800f724 <uxr_serialize_OBJK_Publisher_Binary>:
 800f724:	b570      	push	{r4, r5, r6, lr}
 800f726:	460d      	mov	r5, r1
 800f728:	7809      	ldrb	r1, [r1, #0]
 800f72a:	4606      	mov	r6, r0
 800f72c:	f004 fbe0 	bl	8013ef0 <ucdr_serialize_bool>
 800f730:	782b      	ldrb	r3, [r5, #0]
 800f732:	4604      	mov	r4, r0
 800f734:	b94b      	cbnz	r3, 800f74a <uxr_serialize_OBJK_Publisher_Binary+0x26>
 800f736:	7a29      	ldrb	r1, [r5, #8]
 800f738:	4630      	mov	r0, r6
 800f73a:	f004 fbd9 	bl	8013ef0 <ucdr_serialize_bool>
 800f73e:	7a2b      	ldrb	r3, [r5, #8]
 800f740:	4004      	ands	r4, r0
 800f742:	b2e4      	uxtb	r4, r4
 800f744:	b943      	cbnz	r3, 800f758 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 800f746:	4620      	mov	r0, r4
 800f748:	bd70      	pop	{r4, r5, r6, pc}
 800f74a:	6869      	ldr	r1, [r5, #4]
 800f74c:	4630      	mov	r0, r6
 800f74e:	f005 fb55 	bl	8014dfc <ucdr_serialize_string>
 800f752:	4004      	ands	r4, r0
 800f754:	b2e4      	uxtb	r4, r4
 800f756:	e7ee      	b.n	800f736 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 800f758:	f105 010c 	add.w	r1, r5, #12
 800f75c:	4630      	mov	r0, r6
 800f75e:	f7ff ff53 	bl	800f608 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 800f762:	4004      	ands	r4, r0
 800f764:	4620      	mov	r0, r4
 800f766:	bd70      	pop	{r4, r5, r6, pc}

0800f768 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 800f768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f76c:	460c      	mov	r4, r1
 800f76e:	7809      	ldrb	r1, [r1, #0]
 800f770:	4606      	mov	r6, r0
 800f772:	f004 fbbd 	bl	8013ef0 <ucdr_serialize_bool>
 800f776:	7823      	ldrb	r3, [r4, #0]
 800f778:	4605      	mov	r5, r0
 800f77a:	b96b      	cbnz	r3, 800f798 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 800f77c:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 800f780:	4630      	mov	r0, r6
 800f782:	f004 fbb5 	bl	8013ef0 <ucdr_serialize_bool>
 800f786:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800f78a:	4005      	ands	r5, r0
 800f78c:	b2ed      	uxtb	r5, r5
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d169      	bne.n	800f866 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 800f792:	4628      	mov	r0, r5
 800f794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f798:	6861      	ldr	r1, [r4, #4]
 800f79a:	4630      	mov	r0, r6
 800f79c:	f004 fdec 	bl	8014378 <ucdr_serialize_uint32_t>
 800f7a0:	6863      	ldr	r3, [r4, #4]
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d06b      	beq.n	800f87e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 800f7a6:	2800      	cmp	r0, #0
 800f7a8:	d067      	beq.n	800f87a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f7aa:	68a1      	ldr	r1, [r4, #8]
 800f7ac:	4630      	mov	r0, r6
 800f7ae:	f005 fb25 	bl	8014dfc <ucdr_serialize_string>
 800f7b2:	6863      	ldr	r3, [r4, #4]
 800f7b4:	2b01      	cmp	r3, #1
 800f7b6:	d953      	bls.n	800f860 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f7b8:	2800      	cmp	r0, #0
 800f7ba:	d05e      	beq.n	800f87a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f7bc:	68e1      	ldr	r1, [r4, #12]
 800f7be:	4630      	mov	r0, r6
 800f7c0:	f005 fb1c 	bl	8014dfc <ucdr_serialize_string>
 800f7c4:	6863      	ldr	r3, [r4, #4]
 800f7c6:	2b02      	cmp	r3, #2
 800f7c8:	d94a      	bls.n	800f860 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f7ca:	2800      	cmp	r0, #0
 800f7cc:	d055      	beq.n	800f87a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f7ce:	6921      	ldr	r1, [r4, #16]
 800f7d0:	4630      	mov	r0, r6
 800f7d2:	f005 fb13 	bl	8014dfc <ucdr_serialize_string>
 800f7d6:	6863      	ldr	r3, [r4, #4]
 800f7d8:	2b03      	cmp	r3, #3
 800f7da:	d941      	bls.n	800f860 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f7dc:	2800      	cmp	r0, #0
 800f7de:	d04c      	beq.n	800f87a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f7e0:	6961      	ldr	r1, [r4, #20]
 800f7e2:	4630      	mov	r0, r6
 800f7e4:	f005 fb0a 	bl	8014dfc <ucdr_serialize_string>
 800f7e8:	6863      	ldr	r3, [r4, #4]
 800f7ea:	2b04      	cmp	r3, #4
 800f7ec:	d938      	bls.n	800f860 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f7ee:	2800      	cmp	r0, #0
 800f7f0:	d043      	beq.n	800f87a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f7f2:	69a1      	ldr	r1, [r4, #24]
 800f7f4:	4630      	mov	r0, r6
 800f7f6:	f005 fb01 	bl	8014dfc <ucdr_serialize_string>
 800f7fa:	6863      	ldr	r3, [r4, #4]
 800f7fc:	2b05      	cmp	r3, #5
 800f7fe:	d92f      	bls.n	800f860 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f800:	2800      	cmp	r0, #0
 800f802:	d03a      	beq.n	800f87a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f804:	69e1      	ldr	r1, [r4, #28]
 800f806:	4630      	mov	r0, r6
 800f808:	f005 faf8 	bl	8014dfc <ucdr_serialize_string>
 800f80c:	6863      	ldr	r3, [r4, #4]
 800f80e:	2b06      	cmp	r3, #6
 800f810:	d926      	bls.n	800f860 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f812:	b390      	cbz	r0, 800f87a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f814:	6a21      	ldr	r1, [r4, #32]
 800f816:	4630      	mov	r0, r6
 800f818:	f005 faf0 	bl	8014dfc <ucdr_serialize_string>
 800f81c:	6863      	ldr	r3, [r4, #4]
 800f81e:	2b07      	cmp	r3, #7
 800f820:	d91e      	bls.n	800f860 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f822:	b350      	cbz	r0, 800f87a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f824:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800f826:	4630      	mov	r0, r6
 800f828:	f005 fae8 	bl	8014dfc <ucdr_serialize_string>
 800f82c:	6863      	ldr	r3, [r4, #4]
 800f82e:	2b08      	cmp	r3, #8
 800f830:	d916      	bls.n	800f860 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f832:	b310      	cbz	r0, 800f87a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f834:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800f836:	4630      	mov	r0, r6
 800f838:	f005 fae0 	bl	8014dfc <ucdr_serialize_string>
 800f83c:	6863      	ldr	r3, [r4, #4]
 800f83e:	2b09      	cmp	r3, #9
 800f840:	d90e      	bls.n	800f860 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f842:	b1d0      	cbz	r0, 800f87a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f844:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 800f848:	2709      	movs	r7, #9
 800f84a:	e000      	b.n	800f84e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 800f84c:	b1a8      	cbz	r0, 800f87a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f84e:	f858 1b04 	ldr.w	r1, [r8], #4
 800f852:	4630      	mov	r0, r6
 800f854:	f005 fad2 	bl	8014dfc <ucdr_serialize_string>
 800f858:	6862      	ldr	r2, [r4, #4]
 800f85a:	3701      	adds	r7, #1
 800f85c:	4297      	cmp	r7, r2
 800f85e:	d3f5      	bcc.n	800f84c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 800f860:	4005      	ands	r5, r0
 800f862:	b2ed      	uxtb	r5, r5
 800f864:	e78a      	b.n	800f77c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 800f866:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800f868:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800f86c:	4630      	mov	r0, r6
 800f86e:	f7fd fcff 	bl	800d270 <ucdr_serialize_sequence_uint8_t>
 800f872:	4005      	ands	r5, r0
 800f874:	4628      	mov	r0, r5
 800f876:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f87a:	2500      	movs	r5, #0
 800f87c:	e77e      	b.n	800f77c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 800f87e:	4028      	ands	r0, r5
 800f880:	b2c5      	uxtb	r5, r0
 800f882:	e77b      	b.n	800f77c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

0800f884 <uxr_serialize_OBJK_Subscriber_Binary>:
 800f884:	b570      	push	{r4, r5, r6, lr}
 800f886:	460d      	mov	r5, r1
 800f888:	7809      	ldrb	r1, [r1, #0]
 800f88a:	4606      	mov	r6, r0
 800f88c:	f004 fb30 	bl	8013ef0 <ucdr_serialize_bool>
 800f890:	782b      	ldrb	r3, [r5, #0]
 800f892:	4604      	mov	r4, r0
 800f894:	b94b      	cbnz	r3, 800f8aa <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 800f896:	7a29      	ldrb	r1, [r5, #8]
 800f898:	4630      	mov	r0, r6
 800f89a:	f004 fb29 	bl	8013ef0 <ucdr_serialize_bool>
 800f89e:	7a2b      	ldrb	r3, [r5, #8]
 800f8a0:	4004      	ands	r4, r0
 800f8a2:	b2e4      	uxtb	r4, r4
 800f8a4:	b943      	cbnz	r3, 800f8b8 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 800f8a6:	4620      	mov	r0, r4
 800f8a8:	bd70      	pop	{r4, r5, r6, pc}
 800f8aa:	6869      	ldr	r1, [r5, #4]
 800f8ac:	4630      	mov	r0, r6
 800f8ae:	f005 faa5 	bl	8014dfc <ucdr_serialize_string>
 800f8b2:	4004      	ands	r4, r0
 800f8b4:	b2e4      	uxtb	r4, r4
 800f8b6:	e7ee      	b.n	800f896 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 800f8b8:	f105 010c 	add.w	r1, r5, #12
 800f8bc:	4630      	mov	r0, r6
 800f8be:	f7ff ff53 	bl	800f768 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 800f8c2:	4004      	ands	r4, r0
 800f8c4:	4620      	mov	r0, r4
 800f8c6:	bd70      	pop	{r4, r5, r6, pc}

0800f8c8 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 800f8c8:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 800f8cc:	4688      	mov	r8, r1
 800f8ce:	8809      	ldrh	r1, [r1, #0]
 800f8d0:	4681      	mov	r9, r0
 800f8d2:	f004 fb67 	bl	8013fa4 <ucdr_serialize_uint16_t>
 800f8d6:	f898 1002 	ldrb.w	r1, [r8, #2]
 800f8da:	4606      	mov	r6, r0
 800f8dc:	4648      	mov	r0, r9
 800f8de:	f004 fb07 	bl	8013ef0 <ucdr_serialize_bool>
 800f8e2:	f898 3002 	ldrb.w	r3, [r8, #2]
 800f8e6:	4006      	ands	r6, r0
 800f8e8:	b2f5      	uxtb	r5, r6
 800f8ea:	b9eb      	cbnz	r3, 800f928 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 800f8ec:	f898 1006 	ldrb.w	r1, [r8, #6]
 800f8f0:	4648      	mov	r0, r9
 800f8f2:	f004 fafd 	bl	8013ef0 <ucdr_serialize_bool>
 800f8f6:	f898 3006 	ldrb.w	r3, [r8, #6]
 800f8fa:	4005      	ands	r5, r0
 800f8fc:	bb7b      	cbnz	r3, 800f95e <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 800f8fe:	f898 100c 	ldrb.w	r1, [r8, #12]
 800f902:	4648      	mov	r0, r9
 800f904:	f004 faf4 	bl	8013ef0 <ucdr_serialize_bool>
 800f908:	f898 300c 	ldrb.w	r3, [r8, #12]
 800f90c:	4005      	ands	r5, r0
 800f90e:	b9f3      	cbnz	r3, 800f94e <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 800f910:	f898 1014 	ldrb.w	r1, [r8, #20]
 800f914:	4648      	mov	r0, r9
 800f916:	f004 faeb 	bl	8013ef0 <ucdr_serialize_bool>
 800f91a:	f898 3014 	ldrb.w	r3, [r8, #20]
 800f91e:	4005      	ands	r5, r0
 800f920:	b94b      	cbnz	r3, 800f936 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 800f922:	4628      	mov	r0, r5
 800f924:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800f928:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 800f92c:	4648      	mov	r0, r9
 800f92e:	f004 fb39 	bl	8013fa4 <ucdr_serialize_uint16_t>
 800f932:	4005      	ands	r5, r0
 800f934:	e7da      	b.n	800f8ec <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 800f936:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800f93a:	f108 011c 	add.w	r1, r8, #28
 800f93e:	4648      	mov	r0, r9
 800f940:	f7fd fc96 	bl	800d270 <ucdr_serialize_sequence_uint8_t>
 800f944:	4028      	ands	r0, r5
 800f946:	b2c5      	uxtb	r5, r0
 800f948:	4628      	mov	r0, r5
 800f94a:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800f94e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800f952:	4648      	mov	r0, r9
 800f954:	f004 fd10 	bl	8014378 <ucdr_serialize_uint32_t>
 800f958:	4028      	ands	r0, r5
 800f95a:	b2c5      	uxtb	r5, r0
 800f95c:	e7d8      	b.n	800f910 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 800f95e:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800f962:	4648      	mov	r0, r9
 800f964:	f004 fd08 	bl	8014378 <ucdr_serialize_uint32_t>
 800f968:	4028      	ands	r0, r5
 800f96a:	b2c5      	uxtb	r5, r0
 800f96c:	e7c7      	b.n	800f8fe <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 800f96e:	bf00      	nop

0800f970 <uxr_serialize_OBJK_DataReader_Binary>:
 800f970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f972:	2202      	movs	r2, #2
 800f974:	460c      	mov	r4, r1
 800f976:	4606      	mov	r6, r0
 800f978:	f004 f9f2 	bl	8013d60 <ucdr_serialize_array_uint8_t>
 800f97c:	78a1      	ldrb	r1, [r4, #2]
 800f97e:	4605      	mov	r5, r0
 800f980:	4630      	mov	r0, r6
 800f982:	f004 fab5 	bl	8013ef0 <ucdr_serialize_bool>
 800f986:	78a3      	ldrb	r3, [r4, #2]
 800f988:	4005      	ands	r5, r0
 800f98a:	b2ed      	uxtb	r5, r5
 800f98c:	b90b      	cbnz	r3, 800f992 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 800f98e:	4628      	mov	r0, r5
 800f990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f992:	f104 0108 	add.w	r1, r4, #8
 800f996:	4630      	mov	r0, r6
 800f998:	f7ff ff96 	bl	800f8c8 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800f99c:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800f9a0:	4607      	mov	r7, r0
 800f9a2:	4630      	mov	r0, r6
 800f9a4:	f004 faa4 	bl	8013ef0 <ucdr_serialize_bool>
 800f9a8:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800f9ac:	4038      	ands	r0, r7
 800f9ae:	b2c7      	uxtb	r7, r0
 800f9b0:	b95b      	cbnz	r3, 800f9ca <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 800f9b2:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 800f9b6:	4630      	mov	r0, r6
 800f9b8:	f004 fa9a 	bl	8013ef0 <ucdr_serialize_bool>
 800f9bc:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800f9c0:	4007      	ands	r7, r0
 800f9c2:	b94b      	cbnz	r3, 800f9d8 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 800f9c4:	403d      	ands	r5, r7
 800f9c6:	4628      	mov	r0, r5
 800f9c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f9ca:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 800f9ce:	4630      	mov	r0, r6
 800f9d0:	f004 ff28 	bl	8014824 <ucdr_serialize_uint64_t>
 800f9d4:	4007      	ands	r7, r0
 800f9d6:	e7ec      	b.n	800f9b2 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 800f9d8:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 800f9da:	4630      	mov	r0, r6
 800f9dc:	f005 fa0e 	bl	8014dfc <ucdr_serialize_string>
 800f9e0:	4007      	ands	r7, r0
 800f9e2:	b2ff      	uxtb	r7, r7
 800f9e4:	e7ee      	b.n	800f9c4 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 800f9e6:	bf00      	nop

0800f9e8 <uxr_serialize_OBJK_DataWriter_Binary>:
 800f9e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9ea:	2202      	movs	r2, #2
 800f9ec:	460d      	mov	r5, r1
 800f9ee:	4606      	mov	r6, r0
 800f9f0:	f004 f9b6 	bl	8013d60 <ucdr_serialize_array_uint8_t>
 800f9f4:	78a9      	ldrb	r1, [r5, #2]
 800f9f6:	4604      	mov	r4, r0
 800f9f8:	4630      	mov	r0, r6
 800f9fa:	f004 fa79 	bl	8013ef0 <ucdr_serialize_bool>
 800f9fe:	78ab      	ldrb	r3, [r5, #2]
 800fa00:	4004      	ands	r4, r0
 800fa02:	b2e4      	uxtb	r4, r4
 800fa04:	b90b      	cbnz	r3, 800fa0a <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 800fa06:	4620      	mov	r0, r4
 800fa08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa0a:	f105 0108 	add.w	r1, r5, #8
 800fa0e:	4630      	mov	r0, r6
 800fa10:	f7ff ff5a 	bl	800f8c8 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800fa14:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 800fa18:	4607      	mov	r7, r0
 800fa1a:	4630      	mov	r0, r6
 800fa1c:	f004 fa68 	bl	8013ef0 <ucdr_serialize_bool>
 800fa20:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 800fa24:	4038      	ands	r0, r7
 800fa26:	b2c7      	uxtb	r7, r0
 800fa28:	b913      	cbnz	r3, 800fa30 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 800fa2a:	403c      	ands	r4, r7
 800fa2c:	4620      	mov	r0, r4
 800fa2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa30:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 800fa34:	4630      	mov	r0, r6
 800fa36:	f004 fef5 	bl	8014824 <ucdr_serialize_uint64_t>
 800fa3a:	4007      	ands	r7, r0
 800fa3c:	e7f5      	b.n	800fa2a <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 800fa3e:	bf00      	nop

0800fa40 <uxr_deserialize_ObjectVariant>:
 800fa40:	b570      	push	{r4, r5, r6, lr}
 800fa42:	4605      	mov	r5, r0
 800fa44:	460e      	mov	r6, r1
 800fa46:	f004 fa97 	bl	8013f78 <ucdr_deserialize_uint8_t>
 800fa4a:	b168      	cbz	r0, 800fa68 <uxr_deserialize_ObjectVariant+0x28>
 800fa4c:	7833      	ldrb	r3, [r6, #0]
 800fa4e:	3b01      	subs	r3, #1
 800fa50:	4604      	mov	r4, r0
 800fa52:	2b0d      	cmp	r3, #13
 800fa54:	d809      	bhi.n	800fa6a <uxr_deserialize_ObjectVariant+0x2a>
 800fa56:	e8df f003 	tbb	[pc, r3]
 800fa5a:	0a41      	.short	0x0a41
 800fa5c:	0a0a2323 	.word	0x0a0a2323
 800fa60:	10080a0a 	.word	0x10080a0a
 800fa64:	565c1010 	.word	0x565c1010
 800fa68:	2400      	movs	r4, #0
 800fa6a:	4620      	mov	r0, r4
 800fa6c:	bd70      	pop	{r4, r5, r6, pc}
 800fa6e:	1d31      	adds	r1, r6, #4
 800fa70:	4628      	mov	r0, r5
 800fa72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fa76:	f7ff bd55 	b.w	800f524 <uxr_deserialize_DATAWRITER_Representation>
 800fa7a:	1d31      	adds	r1, r6, #4
 800fa7c:	4628      	mov	r0, r5
 800fa7e:	f004 fa7b 	bl	8013f78 <ucdr_deserialize_uint8_t>
 800fa82:	2800      	cmp	r0, #0
 800fa84:	d0f0      	beq.n	800fa68 <uxr_deserialize_ObjectVariant+0x28>
 800fa86:	7933      	ldrb	r3, [r6, #4]
 800fa88:	2b01      	cmp	r3, #1
 800fa8a:	d001      	beq.n	800fa90 <uxr_deserialize_ObjectVariant+0x50>
 800fa8c:	2b02      	cmp	r3, #2
 800fa8e:	d1ec      	bne.n	800fa6a <uxr_deserialize_ObjectVariant+0x2a>
 800fa90:	68b1      	ldr	r1, [r6, #8]
 800fa92:	4628      	mov	r0, r5
 800fa94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fa98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fa9c:	f005 b9be 	b.w	8014e1c <ucdr_deserialize_string>
 800faa0:	1d31      	adds	r1, r6, #4
 800faa2:	4628      	mov	r0, r5
 800faa4:	f004 fa68 	bl	8013f78 <ucdr_deserialize_uint8_t>
 800faa8:	4604      	mov	r4, r0
 800faaa:	b170      	cbz	r0, 800faca <uxr_deserialize_ObjectVariant+0x8a>
 800faac:	7933      	ldrb	r3, [r6, #4]
 800faae:	2b02      	cmp	r3, #2
 800fab0:	d04c      	beq.n	800fb4c <uxr_deserialize_ObjectVariant+0x10c>
 800fab2:	2b03      	cmp	r3, #3
 800fab4:	d109      	bne.n	800faca <uxr_deserialize_ObjectVariant+0x8a>
 800fab6:	f106 0308 	add.w	r3, r6, #8
 800faba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fabe:	f106 010c 	add.w	r1, r6, #12
 800fac2:	4628      	mov	r0, r5
 800fac4:	f7fd fbe6 	bl	800d294 <ucdr_deserialize_sequence_uint8_t>
 800fac8:	4604      	mov	r4, r0
 800faca:	2202      	movs	r2, #2
 800facc:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800fad0:	4628      	mov	r0, r5
 800fad2:	f004 f9a9 	bl	8013e28 <ucdr_deserialize_array_uint8_t>
 800fad6:	4020      	ands	r0, r4
 800fad8:	b2c4      	uxtb	r4, r0
 800fada:	e7c6      	b.n	800fa6a <uxr_deserialize_ObjectVariant+0x2a>
 800fadc:	1d31      	adds	r1, r6, #4
 800fade:	4628      	mov	r0, r5
 800fae0:	f004 fa4a 	bl	8013f78 <ucdr_deserialize_uint8_t>
 800fae4:	4604      	mov	r4, r0
 800fae6:	b130      	cbz	r0, 800faf6 <uxr_deserialize_ObjectVariant+0xb6>
 800fae8:	7933      	ldrb	r3, [r6, #4]
 800faea:	2b02      	cmp	r3, #2
 800faec:	d036      	beq.n	800fb5c <uxr_deserialize_ObjectVariant+0x11c>
 800faee:	2b03      	cmp	r3, #3
 800faf0:	d03c      	beq.n	800fb6c <uxr_deserialize_ObjectVariant+0x12c>
 800faf2:	2b01      	cmp	r3, #1
 800faf4:	d032      	beq.n	800fb5c <uxr_deserialize_ObjectVariant+0x11c>
 800faf6:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800fafa:	4628      	mov	r0, r5
 800fafc:	f004 ffe2 	bl	8014ac4 <ucdr_deserialize_int16_t>
 800fb00:	4020      	ands	r0, r4
 800fb02:	b2c4      	uxtb	r4, r0
 800fb04:	e7b1      	b.n	800fa6a <uxr_deserialize_ObjectVariant+0x2a>
 800fb06:	1d31      	adds	r1, r6, #4
 800fb08:	4628      	mov	r0, r5
 800fb0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fb0e:	f7ff bbbf 	b.w	800f290 <uxr_deserialize_CLIENT_Representation>
 800fb12:	2204      	movs	r2, #4
 800fb14:	18b1      	adds	r1, r6, r2
 800fb16:	4628      	mov	r0, r5
 800fb18:	f004 f986 	bl	8013e28 <ucdr_deserialize_array_uint8_t>
 800fb1c:	2202      	movs	r2, #2
 800fb1e:	f106 0108 	add.w	r1, r6, #8
 800fb22:	4604      	mov	r4, r0
 800fb24:	4628      	mov	r0, r5
 800fb26:	f004 f97f 	bl	8013e28 <ucdr_deserialize_array_uint8_t>
 800fb2a:	2202      	movs	r2, #2
 800fb2c:	4004      	ands	r4, r0
 800fb2e:	f106 010a 	add.w	r1, r6, #10
 800fb32:	4628      	mov	r0, r5
 800fb34:	f004 f978 	bl	8013e28 <ucdr_deserialize_array_uint8_t>
 800fb38:	b2e4      	uxtb	r4, r4
 800fb3a:	4603      	mov	r3, r0
 800fb3c:	f106 010c 	add.w	r1, r6, #12
 800fb40:	4628      	mov	r0, r5
 800fb42:	401c      	ands	r4, r3
 800fb44:	f004 f9ea 	bl	8013f1c <ucdr_deserialize_bool>
 800fb48:	4004      	ands	r4, r0
 800fb4a:	e78e      	b.n	800fa6a <uxr_deserialize_ObjectVariant+0x2a>
 800fb4c:	68b1      	ldr	r1, [r6, #8]
 800fb4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fb52:	4628      	mov	r0, r5
 800fb54:	f005 f962 	bl	8014e1c <ucdr_deserialize_string>
 800fb58:	4604      	mov	r4, r0
 800fb5a:	e7b6      	b.n	800faca <uxr_deserialize_ObjectVariant+0x8a>
 800fb5c:	68b1      	ldr	r1, [r6, #8]
 800fb5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fb62:	4628      	mov	r0, r5
 800fb64:	f005 f95a 	bl	8014e1c <ucdr_deserialize_string>
 800fb68:	4604      	mov	r4, r0
 800fb6a:	e7c4      	b.n	800faf6 <uxr_deserialize_ObjectVariant+0xb6>
 800fb6c:	f106 0308 	add.w	r3, r6, #8
 800fb70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fb74:	f106 010c 	add.w	r1, r6, #12
 800fb78:	4628      	mov	r0, r5
 800fb7a:	f7fd fb8b 	bl	800d294 <ucdr_deserialize_sequence_uint8_t>
 800fb7e:	4604      	mov	r4, r0
 800fb80:	e7b9      	b.n	800faf6 <uxr_deserialize_ObjectVariant+0xb6>
 800fb82:	bf00      	nop

0800fb84 <uxr_deserialize_BaseObjectRequest>:
 800fb84:	b570      	push	{r4, r5, r6, lr}
 800fb86:	2202      	movs	r2, #2
 800fb88:	4605      	mov	r5, r0
 800fb8a:	460e      	mov	r6, r1
 800fb8c:	f004 f94c 	bl	8013e28 <ucdr_deserialize_array_uint8_t>
 800fb90:	2202      	movs	r2, #2
 800fb92:	4604      	mov	r4, r0
 800fb94:	18b1      	adds	r1, r6, r2
 800fb96:	4628      	mov	r0, r5
 800fb98:	f004 f946 	bl	8013e28 <ucdr_deserialize_array_uint8_t>
 800fb9c:	4020      	ands	r0, r4
 800fb9e:	b2c0      	uxtb	r0, r0
 800fba0:	bd70      	pop	{r4, r5, r6, pc}
 800fba2:	bf00      	nop

0800fba4 <uxr_serialize_ActivityInfoVariant>:
 800fba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fba8:	460d      	mov	r5, r1
 800fbaa:	7809      	ldrb	r1, [r1, #0]
 800fbac:	4607      	mov	r7, r0
 800fbae:	f004 f9cd 	bl	8013f4c <ucdr_serialize_uint8_t>
 800fbb2:	4681      	mov	r9, r0
 800fbb4:	b138      	cbz	r0, 800fbc6 <uxr_serialize_ActivityInfoVariant+0x22>
 800fbb6:	782b      	ldrb	r3, [r5, #0]
 800fbb8:	2b06      	cmp	r3, #6
 800fbba:	f000 8082 	beq.w	800fcc2 <uxr_serialize_ActivityInfoVariant+0x11e>
 800fbbe:	2b0d      	cmp	r3, #13
 800fbc0:	d016      	beq.n	800fbf0 <uxr_serialize_ActivityInfoVariant+0x4c>
 800fbc2:	2b05      	cmp	r3, #5
 800fbc4:	d002      	beq.n	800fbcc <uxr_serialize_ActivityInfoVariant+0x28>
 800fbc6:	4648      	mov	r0, r9
 800fbc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fbcc:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800fbd0:	4638      	mov	r0, r7
 800fbd2:	f004 fef7 	bl	80149c4 <ucdr_serialize_int16_t>
 800fbd6:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 800fbda:	4681      	mov	r9, r0
 800fbdc:	4638      	mov	r0, r7
 800fbde:	f004 fe21 	bl	8014824 <ucdr_serialize_uint64_t>
 800fbe2:	ea09 0000 	and.w	r0, r9, r0
 800fbe6:	fa5f f980 	uxtb.w	r9, r0
 800fbea:	4648      	mov	r0, r9
 800fbec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fbf0:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800fbf4:	4638      	mov	r0, r7
 800fbf6:	f004 fee5 	bl	80149c4 <ucdr_serialize_int16_t>
 800fbfa:	68e9      	ldr	r1, [r5, #12]
 800fbfc:	4681      	mov	r9, r0
 800fbfe:	4638      	mov	r0, r7
 800fc00:	f004 fbba 	bl	8014378 <ucdr_serialize_uint32_t>
 800fc04:	68eb      	ldr	r3, [r5, #12]
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d0eb      	beq.n	800fbe2 <uxr_serialize_ActivityInfoVariant+0x3e>
 800fc0a:	b320      	cbz	r0, 800fc56 <uxr_serialize_ActivityInfoVariant+0xb2>
 800fc0c:	f105 080c 	add.w	r8, r5, #12
 800fc10:	2600      	movs	r6, #0
 800fc12:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 800fc16:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 800fc1a:	f89a 1010 	ldrb.w	r1, [sl, #16]
 800fc1e:	4638      	mov	r0, r7
 800fc20:	f004 f994 	bl	8013f4c <ucdr_serialize_uint8_t>
 800fc24:	2800      	cmp	r0, #0
 800fc26:	d053      	beq.n	800fcd0 <uxr_serialize_ActivityInfoVariant+0x12c>
 800fc28:	f89a 3010 	ldrb.w	r3, [sl, #16]
 800fc2c:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 800fc30:	0074      	lsls	r4, r6, #1
 800fc32:	00c9      	lsls	r1, r1, #3
 800fc34:	2b03      	cmp	r3, #3
 800fc36:	d854      	bhi.n	800fce2 <uxr_serialize_ActivityInfoVariant+0x13e>
 800fc38:	e8df f003 	tbb	[pc, r3]
 800fc3c:	02102132 	.word	0x02102132
 800fc40:	4441      	add	r1, r8
 800fc42:	4638      	mov	r0, r7
 800fc44:	6889      	ldr	r1, [r1, #8]
 800fc46:	f005 f8d9 	bl	8014dfc <ucdr_serialize_string>
 800fc4a:	68ea      	ldr	r2, [r5, #12]
 800fc4c:	3601      	adds	r6, #1
 800fc4e:	4296      	cmp	r6, r2
 800fc50:	d242      	bcs.n	800fcd8 <uxr_serialize_ActivityInfoVariant+0x134>
 800fc52:	2800      	cmp	r0, #0
 800fc54:	d1dd      	bne.n	800fc12 <uxr_serialize_ActivityInfoVariant+0x6e>
 800fc56:	f04f 0900 	mov.w	r9, #0
 800fc5a:	e7b4      	b.n	800fbc6 <uxr_serialize_ActivityInfoVariant+0x22>
 800fc5c:	3108      	adds	r1, #8
 800fc5e:	4441      	add	r1, r8
 800fc60:	2210      	movs	r2, #16
 800fc62:	4638      	mov	r0, r7
 800fc64:	f004 f87c 	bl	8013d60 <ucdr_serialize_array_uint8_t>
 800fc68:	4434      	add	r4, r6
 800fc6a:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800fc6e:	4604      	mov	r4, r0
 800fc70:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800fc72:	4638      	mov	r0, r7
 800fc74:	f004 fb80 	bl	8014378 <ucdr_serialize_uint32_t>
 800fc78:	4020      	ands	r0, r4
 800fc7a:	b2c0      	uxtb	r0, r0
 800fc7c:	e7e5      	b.n	800fc4a <uxr_serialize_ActivityInfoVariant+0xa6>
 800fc7e:	3108      	adds	r1, #8
 800fc80:	4441      	add	r1, r8
 800fc82:	2204      	movs	r2, #4
 800fc84:	4638      	mov	r0, r7
 800fc86:	f004 f86b 	bl	8013d60 <ucdr_serialize_array_uint8_t>
 800fc8a:	4434      	add	r4, r6
 800fc8c:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800fc90:	4604      	mov	r4, r0
 800fc92:	8b19      	ldrh	r1, [r3, #24]
 800fc94:	4638      	mov	r0, r7
 800fc96:	f004 f985 	bl	8013fa4 <ucdr_serialize_uint16_t>
 800fc9a:	4020      	ands	r0, r4
 800fc9c:	b2c0      	uxtb	r0, r0
 800fc9e:	e7d4      	b.n	800fc4a <uxr_serialize_ActivityInfoVariant+0xa6>
 800fca0:	3108      	adds	r1, #8
 800fca2:	4441      	add	r1, r8
 800fca4:	2202      	movs	r2, #2
 800fca6:	4638      	mov	r0, r7
 800fca8:	f004 f85a 	bl	8013d60 <ucdr_serialize_array_uint8_t>
 800fcac:	4434      	add	r4, r6
 800fcae:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800fcb2:	4604      	mov	r4, r0
 800fcb4:	7d99      	ldrb	r1, [r3, #22]
 800fcb6:	4638      	mov	r0, r7
 800fcb8:	f004 f948 	bl	8013f4c <ucdr_serialize_uint8_t>
 800fcbc:	4020      	ands	r0, r4
 800fcbe:	b2c0      	uxtb	r0, r0
 800fcc0:	e7c3      	b.n	800fc4a <uxr_serialize_ActivityInfoVariant+0xa6>
 800fcc2:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800fcc6:	4638      	mov	r0, r7
 800fcc8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fccc:	f004 be7a 	b.w	80149c4 <ucdr_serialize_int16_t>
 800fcd0:	68ea      	ldr	r2, [r5, #12]
 800fcd2:	3601      	adds	r6, #1
 800fcd4:	42b2      	cmp	r2, r6
 800fcd6:	d8be      	bhi.n	800fc56 <uxr_serialize_ActivityInfoVariant+0xb2>
 800fcd8:	ea09 0900 	and.w	r9, r9, r0
 800fcdc:	fa5f f989 	uxtb.w	r9, r9
 800fce0:	e771      	b.n	800fbc6 <uxr_serialize_ActivityInfoVariant+0x22>
 800fce2:	68eb      	ldr	r3, [r5, #12]
 800fce4:	3601      	adds	r6, #1
 800fce6:	429e      	cmp	r6, r3
 800fce8:	f10a 0a18 	add.w	sl, sl, #24
 800fcec:	d395      	bcc.n	800fc1a <uxr_serialize_ActivityInfoVariant+0x76>
 800fcee:	e76a      	b.n	800fbc6 <uxr_serialize_ActivityInfoVariant+0x22>

0800fcf0 <uxr_deserialize_BaseObjectReply>:
 800fcf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcf4:	2202      	movs	r2, #2
 800fcf6:	4606      	mov	r6, r0
 800fcf8:	460f      	mov	r7, r1
 800fcfa:	f004 f895 	bl	8013e28 <ucdr_deserialize_array_uint8_t>
 800fcfe:	2202      	movs	r2, #2
 800fd00:	18b9      	adds	r1, r7, r2
 800fd02:	4605      	mov	r5, r0
 800fd04:	4630      	mov	r0, r6
 800fd06:	f004 f88f 	bl	8013e28 <ucdr_deserialize_array_uint8_t>
 800fd0a:	1d39      	adds	r1, r7, #4
 800fd0c:	4680      	mov	r8, r0
 800fd0e:	4630      	mov	r0, r6
 800fd10:	f004 f932 	bl	8013f78 <ucdr_deserialize_uint8_t>
 800fd14:	1d79      	adds	r1, r7, #5
 800fd16:	4604      	mov	r4, r0
 800fd18:	4630      	mov	r0, r6
 800fd1a:	f004 f92d 	bl	8013f78 <ucdr_deserialize_uint8_t>
 800fd1e:	ea05 0508 	and.w	r5, r5, r8
 800fd22:	402c      	ands	r4, r5
 800fd24:	4020      	ands	r0, r4
 800fd26:	b2c0      	uxtb	r0, r0
 800fd28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800fd2c <uxr_serialize_ReadSpecification>:
 800fd2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd30:	460e      	mov	r6, r1
 800fd32:	7809      	ldrb	r1, [r1, #0]
 800fd34:	4607      	mov	r7, r0
 800fd36:	f004 f909 	bl	8013f4c <ucdr_serialize_uint8_t>
 800fd3a:	7871      	ldrb	r1, [r6, #1]
 800fd3c:	4604      	mov	r4, r0
 800fd3e:	4638      	mov	r0, r7
 800fd40:	f004 f904 	bl	8013f4c <ucdr_serialize_uint8_t>
 800fd44:	78b1      	ldrb	r1, [r6, #2]
 800fd46:	4004      	ands	r4, r0
 800fd48:	4638      	mov	r0, r7
 800fd4a:	f004 f8d1 	bl	8013ef0 <ucdr_serialize_bool>
 800fd4e:	78b3      	ldrb	r3, [r6, #2]
 800fd50:	b2e4      	uxtb	r4, r4
 800fd52:	4004      	ands	r4, r0
 800fd54:	b94b      	cbnz	r3, 800fd6a <uxr_serialize_ReadSpecification+0x3e>
 800fd56:	7a31      	ldrb	r1, [r6, #8]
 800fd58:	4638      	mov	r0, r7
 800fd5a:	f004 f8c9 	bl	8013ef0 <ucdr_serialize_bool>
 800fd5e:	7a33      	ldrb	r3, [r6, #8]
 800fd60:	4004      	ands	r4, r0
 800fd62:	b943      	cbnz	r3, 800fd76 <uxr_serialize_ReadSpecification+0x4a>
 800fd64:	4620      	mov	r0, r4
 800fd66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd6a:	6871      	ldr	r1, [r6, #4]
 800fd6c:	4638      	mov	r0, r7
 800fd6e:	f005 f845 	bl	8014dfc <ucdr_serialize_string>
 800fd72:	4004      	ands	r4, r0
 800fd74:	e7ef      	b.n	800fd56 <uxr_serialize_ReadSpecification+0x2a>
 800fd76:	8971      	ldrh	r1, [r6, #10]
 800fd78:	4638      	mov	r0, r7
 800fd7a:	f004 f913 	bl	8013fa4 <ucdr_serialize_uint16_t>
 800fd7e:	89b1      	ldrh	r1, [r6, #12]
 800fd80:	4605      	mov	r5, r0
 800fd82:	4638      	mov	r0, r7
 800fd84:	f004 f90e 	bl	8013fa4 <ucdr_serialize_uint16_t>
 800fd88:	89f1      	ldrh	r1, [r6, #14]
 800fd8a:	4005      	ands	r5, r0
 800fd8c:	4638      	mov	r0, r7
 800fd8e:	f004 f909 	bl	8013fa4 <ucdr_serialize_uint16_t>
 800fd92:	8a31      	ldrh	r1, [r6, #16]
 800fd94:	4680      	mov	r8, r0
 800fd96:	4638      	mov	r0, r7
 800fd98:	f004 f904 	bl	8013fa4 <ucdr_serialize_uint16_t>
 800fd9c:	b2ed      	uxtb	r5, r5
 800fd9e:	4025      	ands	r5, r4
 800fda0:	ea08 0505 	and.w	r5, r8, r5
 800fda4:	ea00 0405 	and.w	r4, r0, r5
 800fda8:	4620      	mov	r0, r4
 800fdaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fdae:	bf00      	nop

0800fdb0 <uxr_serialize_CREATE_CLIENT_Payload>:
 800fdb0:	f7ff ba16 	b.w	800f1e0 <uxr_serialize_CLIENT_Representation>

0800fdb4 <uxr_serialize_CREATE_Payload>:
 800fdb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdb6:	2202      	movs	r2, #2
 800fdb8:	4607      	mov	r7, r0
 800fdba:	460e      	mov	r6, r1
 800fdbc:	f003 ffd0 	bl	8013d60 <ucdr_serialize_array_uint8_t>
 800fdc0:	2202      	movs	r2, #2
 800fdc2:	18b1      	adds	r1, r6, r2
 800fdc4:	4605      	mov	r5, r0
 800fdc6:	4638      	mov	r0, r7
 800fdc8:	f003 ffca 	bl	8013d60 <ucdr_serialize_array_uint8_t>
 800fdcc:	7931      	ldrb	r1, [r6, #4]
 800fdce:	4604      	mov	r4, r0
 800fdd0:	4638      	mov	r0, r7
 800fdd2:	f004 f8bb 	bl	8013f4c <ucdr_serialize_uint8_t>
 800fdd6:	b170      	cbz	r0, 800fdf6 <uxr_serialize_CREATE_Payload+0x42>
 800fdd8:	7933      	ldrb	r3, [r6, #4]
 800fdda:	402c      	ands	r4, r5
 800fddc:	3b01      	subs	r3, #1
 800fdde:	b2e4      	uxtb	r4, r4
 800fde0:	2b0d      	cmp	r3, #13
 800fde2:	d809      	bhi.n	800fdf8 <uxr_serialize_CREATE_Payload+0x44>
 800fde4:	e8df f003 	tbb	[pc, r3]
 800fde8:	23230a4c 	.word	0x23230a4c
 800fdec:	0a0a0a0a 	.word	0x0a0a0a0a
 800fdf0:	12121208 	.word	0x12121208
 800fdf4:	3e45      	.short	0x3e45
 800fdf6:	2400      	movs	r4, #0
 800fdf8:	4620      	mov	r0, r4
 800fdfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fdfc:	f106 0108 	add.w	r1, r6, #8
 800fe00:	4638      	mov	r0, r7
 800fe02:	f7ff faf3 	bl	800f3ec <uxr_serialize_DATAWRITER_Representation>
 800fe06:	4004      	ands	r4, r0
 800fe08:	4620      	mov	r0, r4
 800fe0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe0c:	7a31      	ldrb	r1, [r6, #8]
 800fe0e:	4638      	mov	r0, r7
 800fe10:	f004 f89c 	bl	8013f4c <ucdr_serialize_uint8_t>
 800fe14:	2800      	cmp	r0, #0
 800fe16:	d0ee      	beq.n	800fdf6 <uxr_serialize_CREATE_Payload+0x42>
 800fe18:	7a33      	ldrb	r3, [r6, #8]
 800fe1a:	2b01      	cmp	r3, #1
 800fe1c:	d001      	beq.n	800fe22 <uxr_serialize_CREATE_Payload+0x6e>
 800fe1e:	2b02      	cmp	r3, #2
 800fe20:	d1ea      	bne.n	800fdf8 <uxr_serialize_CREATE_Payload+0x44>
 800fe22:	68f1      	ldr	r1, [r6, #12]
 800fe24:	4638      	mov	r0, r7
 800fe26:	f004 ffe9 	bl	8014dfc <ucdr_serialize_string>
 800fe2a:	4004      	ands	r4, r0
 800fe2c:	e7e4      	b.n	800fdf8 <uxr_serialize_CREATE_Payload+0x44>
 800fe2e:	7a31      	ldrb	r1, [r6, #8]
 800fe30:	4638      	mov	r0, r7
 800fe32:	f004 f88b 	bl	8013f4c <ucdr_serialize_uint8_t>
 800fe36:	4605      	mov	r5, r0
 800fe38:	b158      	cbz	r0, 800fe52 <uxr_serialize_CREATE_Payload+0x9e>
 800fe3a:	7a33      	ldrb	r3, [r6, #8]
 800fe3c:	2b02      	cmp	r3, #2
 800fe3e:	d034      	beq.n	800feaa <uxr_serialize_CREATE_Payload+0xf6>
 800fe40:	2b03      	cmp	r3, #3
 800fe42:	d106      	bne.n	800fe52 <uxr_serialize_CREATE_Payload+0x9e>
 800fe44:	68f2      	ldr	r2, [r6, #12]
 800fe46:	f106 0110 	add.w	r1, r6, #16
 800fe4a:	4638      	mov	r0, r7
 800fe4c:	f7fd fa10 	bl	800d270 <ucdr_serialize_sequence_uint8_t>
 800fe50:	4605      	mov	r5, r0
 800fe52:	2202      	movs	r2, #2
 800fe54:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 800fe58:	4638      	mov	r0, r7
 800fe5a:	f003 ff81 	bl	8013d60 <ucdr_serialize_array_uint8_t>
 800fe5e:	4028      	ands	r0, r5
 800fe60:	4004      	ands	r4, r0
 800fe62:	e7c9      	b.n	800fdf8 <uxr_serialize_CREATE_Payload+0x44>
 800fe64:	f106 0108 	add.w	r1, r6, #8
 800fe68:	4638      	mov	r0, r7
 800fe6a:	f7ff f9b9 	bl	800f1e0 <uxr_serialize_CLIENT_Representation>
 800fe6e:	4004      	ands	r4, r0
 800fe70:	e7c2      	b.n	800fdf8 <uxr_serialize_CREATE_Payload+0x44>
 800fe72:	f106 0108 	add.w	r1, r6, #8
 800fe76:	4638      	mov	r0, r7
 800fe78:	f7ff fa6e 	bl	800f358 <uxr_serialize_AGENT_Representation>
 800fe7c:	4004      	ands	r4, r0
 800fe7e:	e7bb      	b.n	800fdf8 <uxr_serialize_CREATE_Payload+0x44>
 800fe80:	7a31      	ldrb	r1, [r6, #8]
 800fe82:	4638      	mov	r0, r7
 800fe84:	f004 f862 	bl	8013f4c <ucdr_serialize_uint8_t>
 800fe88:	4605      	mov	r5, r0
 800fe8a:	b130      	cbz	r0, 800fe9a <uxr_serialize_CREATE_Payload+0xe6>
 800fe8c:	7a33      	ldrb	r3, [r6, #8]
 800fe8e:	2b02      	cmp	r3, #2
 800fe90:	d011      	beq.n	800feb6 <uxr_serialize_CREATE_Payload+0x102>
 800fe92:	2b03      	cmp	r3, #3
 800fe94:	d015      	beq.n	800fec2 <uxr_serialize_CREATE_Payload+0x10e>
 800fe96:	2b01      	cmp	r3, #1
 800fe98:	d00d      	beq.n	800feb6 <uxr_serialize_CREATE_Payload+0x102>
 800fe9a:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 800fe9e:	4638      	mov	r0, r7
 800fea0:	f004 fd90 	bl	80149c4 <ucdr_serialize_int16_t>
 800fea4:	4028      	ands	r0, r5
 800fea6:	4004      	ands	r4, r0
 800fea8:	e7a6      	b.n	800fdf8 <uxr_serialize_CREATE_Payload+0x44>
 800feaa:	68f1      	ldr	r1, [r6, #12]
 800feac:	4638      	mov	r0, r7
 800feae:	f004 ffa5 	bl	8014dfc <ucdr_serialize_string>
 800feb2:	4605      	mov	r5, r0
 800feb4:	e7cd      	b.n	800fe52 <uxr_serialize_CREATE_Payload+0x9e>
 800feb6:	68f1      	ldr	r1, [r6, #12]
 800feb8:	4638      	mov	r0, r7
 800feba:	f004 ff9f 	bl	8014dfc <ucdr_serialize_string>
 800febe:	4605      	mov	r5, r0
 800fec0:	e7eb      	b.n	800fe9a <uxr_serialize_CREATE_Payload+0xe6>
 800fec2:	68f2      	ldr	r2, [r6, #12]
 800fec4:	f106 0110 	add.w	r1, r6, #16
 800fec8:	4638      	mov	r0, r7
 800feca:	f7fd f9d1 	bl	800d270 <ucdr_serialize_sequence_uint8_t>
 800fece:	4605      	mov	r5, r0
 800fed0:	e7e3      	b.n	800fe9a <uxr_serialize_CREATE_Payload+0xe6>
 800fed2:	bf00      	nop

0800fed4 <uxr_deserialize_GET_INFO_Payload>:
 800fed4:	b570      	push	{r4, r5, r6, lr}
 800fed6:	2202      	movs	r2, #2
 800fed8:	4605      	mov	r5, r0
 800feda:	460e      	mov	r6, r1
 800fedc:	f003 ffa4 	bl	8013e28 <ucdr_deserialize_array_uint8_t>
 800fee0:	2202      	movs	r2, #2
 800fee2:	18b1      	adds	r1, r6, r2
 800fee4:	4604      	mov	r4, r0
 800fee6:	4628      	mov	r0, r5
 800fee8:	f003 ff9e 	bl	8013e28 <ucdr_deserialize_array_uint8_t>
 800feec:	1d31      	adds	r1, r6, #4
 800feee:	4004      	ands	r4, r0
 800fef0:	4628      	mov	r0, r5
 800fef2:	f004 fb71 	bl	80145d8 <ucdr_deserialize_uint32_t>
 800fef6:	b2e4      	uxtb	r4, r4
 800fef8:	4020      	ands	r0, r4
 800fefa:	bd70      	pop	{r4, r5, r6, pc}

0800fefc <uxr_serialize_DELETE_Payload>:
 800fefc:	b570      	push	{r4, r5, r6, lr}
 800fefe:	2202      	movs	r2, #2
 800ff00:	4605      	mov	r5, r0
 800ff02:	460e      	mov	r6, r1
 800ff04:	f003 ff2c 	bl	8013d60 <ucdr_serialize_array_uint8_t>
 800ff08:	2202      	movs	r2, #2
 800ff0a:	4604      	mov	r4, r0
 800ff0c:	18b1      	adds	r1, r6, r2
 800ff0e:	4628      	mov	r0, r5
 800ff10:	f003 ff26 	bl	8013d60 <ucdr_serialize_array_uint8_t>
 800ff14:	4020      	ands	r0, r4
 800ff16:	b2c0      	uxtb	r0, r0
 800ff18:	bd70      	pop	{r4, r5, r6, pc}
 800ff1a:	bf00      	nop

0800ff1c <uxr_deserialize_STATUS_AGENT_Payload>:
 800ff1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff20:	4605      	mov	r5, r0
 800ff22:	460e      	mov	r6, r1
 800ff24:	f004 f828 	bl	8013f78 <ucdr_deserialize_uint8_t>
 800ff28:	1c71      	adds	r1, r6, #1
 800ff2a:	4604      	mov	r4, r0
 800ff2c:	4628      	mov	r0, r5
 800ff2e:	f004 f823 	bl	8013f78 <ucdr_deserialize_uint8_t>
 800ff32:	2204      	movs	r2, #4
 800ff34:	18b1      	adds	r1, r6, r2
 800ff36:	4680      	mov	r8, r0
 800ff38:	4628      	mov	r0, r5
 800ff3a:	f003 ff75 	bl	8013e28 <ucdr_deserialize_array_uint8_t>
 800ff3e:	f106 0108 	add.w	r1, r6, #8
 800ff42:	4607      	mov	r7, r0
 800ff44:	2202      	movs	r2, #2
 800ff46:	4628      	mov	r0, r5
 800ff48:	f003 ff6e 	bl	8013e28 <ucdr_deserialize_array_uint8_t>
 800ff4c:	ea04 0308 	and.w	r3, r4, r8
 800ff50:	b2db      	uxtb	r3, r3
 800ff52:	ea03 0407 	and.w	r4, r3, r7
 800ff56:	2202      	movs	r2, #2
 800ff58:	4607      	mov	r7, r0
 800ff5a:	f106 010a 	add.w	r1, r6, #10
 800ff5e:	4628      	mov	r0, r5
 800ff60:	f003 ff62 	bl	8013e28 <ucdr_deserialize_array_uint8_t>
 800ff64:	f106 010c 	add.w	r1, r6, #12
 800ff68:	4603      	mov	r3, r0
 800ff6a:	4628      	mov	r0, r5
 800ff6c:	461d      	mov	r5, r3
 800ff6e:	f003 ffd5 	bl	8013f1c <ucdr_deserialize_bool>
 800ff72:	403c      	ands	r4, r7
 800ff74:	4025      	ands	r5, r4
 800ff76:	4028      	ands	r0, r5
 800ff78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ff7c <uxr_deserialize_STATUS_Payload>:
 800ff7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff80:	2202      	movs	r2, #2
 800ff82:	4606      	mov	r6, r0
 800ff84:	460f      	mov	r7, r1
 800ff86:	f003 ff4f 	bl	8013e28 <ucdr_deserialize_array_uint8_t>
 800ff8a:	2202      	movs	r2, #2
 800ff8c:	18b9      	adds	r1, r7, r2
 800ff8e:	4605      	mov	r5, r0
 800ff90:	4630      	mov	r0, r6
 800ff92:	f003 ff49 	bl	8013e28 <ucdr_deserialize_array_uint8_t>
 800ff96:	1d39      	adds	r1, r7, #4
 800ff98:	4680      	mov	r8, r0
 800ff9a:	4630      	mov	r0, r6
 800ff9c:	f003 ffec 	bl	8013f78 <ucdr_deserialize_uint8_t>
 800ffa0:	1d79      	adds	r1, r7, #5
 800ffa2:	4604      	mov	r4, r0
 800ffa4:	4630      	mov	r0, r6
 800ffa6:	f003 ffe7 	bl	8013f78 <ucdr_deserialize_uint8_t>
 800ffaa:	ea05 0508 	and.w	r5, r5, r8
 800ffae:	402c      	ands	r4, r5
 800ffb0:	4020      	ands	r0, r4
 800ffb2:	b2c0      	uxtb	r0, r0
 800ffb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ffb8 <uxr_serialize_INFO_Payload>:
 800ffb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffbc:	2202      	movs	r2, #2
 800ffbe:	460c      	mov	r4, r1
 800ffc0:	4605      	mov	r5, r0
 800ffc2:	f003 fecd 	bl	8013d60 <ucdr_serialize_array_uint8_t>
 800ffc6:	2202      	movs	r2, #2
 800ffc8:	18a1      	adds	r1, r4, r2
 800ffca:	4680      	mov	r8, r0
 800ffcc:	4628      	mov	r0, r5
 800ffce:	f003 fec7 	bl	8013d60 <ucdr_serialize_array_uint8_t>
 800ffd2:	7921      	ldrb	r1, [r4, #4]
 800ffd4:	4607      	mov	r7, r0
 800ffd6:	4628      	mov	r0, r5
 800ffd8:	f003 ffb8 	bl	8013f4c <ucdr_serialize_uint8_t>
 800ffdc:	7961      	ldrb	r1, [r4, #5]
 800ffde:	4606      	mov	r6, r0
 800ffe0:	4628      	mov	r0, r5
 800ffe2:	f003 ffb3 	bl	8013f4c <ucdr_serialize_uint8_t>
 800ffe6:	ea08 0807 	and.w	r8, r8, r7
 800ffea:	ea06 0608 	and.w	r6, r6, r8
 800ffee:	4006      	ands	r6, r0
 800fff0:	7a21      	ldrb	r1, [r4, #8]
 800fff2:	4628      	mov	r0, r5
 800fff4:	f003 ff7c 	bl	8013ef0 <ucdr_serialize_bool>
 800fff8:	7a23      	ldrb	r3, [r4, #8]
 800fffa:	b2f7      	uxtb	r7, r6
 800fffc:	4606      	mov	r6, r0
 800fffe:	b96b      	cbnz	r3, 801001c <uxr_serialize_INFO_Payload+0x64>
 8010000:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8010004:	4628      	mov	r0, r5
 8010006:	f003 ff73 	bl	8013ef0 <ucdr_serialize_bool>
 801000a:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 801000e:	4030      	ands	r0, r6
 8010010:	b2c6      	uxtb	r6, r0
 8010012:	b983      	cbnz	r3, 8010036 <uxr_serialize_INFO_Payload+0x7e>
 8010014:	ea06 0007 	and.w	r0, r6, r7
 8010018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801001c:	7b21      	ldrb	r1, [r4, #12]
 801001e:	4628      	mov	r0, r5
 8010020:	f003 ff94 	bl	8013f4c <ucdr_serialize_uint8_t>
 8010024:	b188      	cbz	r0, 801004a <uxr_serialize_INFO_Payload+0x92>
 8010026:	f104 010c 	add.w	r1, r4, #12
 801002a:	4628      	mov	r0, r5
 801002c:	f7ff fa06 	bl	800f43c <uxr_serialize_ObjectVariant.part.0>
 8010030:	4030      	ands	r0, r6
 8010032:	b2c6      	uxtb	r6, r0
 8010034:	e7e4      	b.n	8010000 <uxr_serialize_INFO_Payload+0x48>
 8010036:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 801003a:	4628      	mov	r0, r5
 801003c:	f7ff fdb2 	bl	800fba4 <uxr_serialize_ActivityInfoVariant>
 8010040:	4006      	ands	r6, r0
 8010042:	ea06 0007 	and.w	r0, r6, r7
 8010046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801004a:	4606      	mov	r6, r0
 801004c:	e7d8      	b.n	8010000 <uxr_serialize_INFO_Payload+0x48>
 801004e:	bf00      	nop

08010050 <uxr_serialize_READ_DATA_Payload>:
 8010050:	b570      	push	{r4, r5, r6, lr}
 8010052:	2202      	movs	r2, #2
 8010054:	4605      	mov	r5, r0
 8010056:	460e      	mov	r6, r1
 8010058:	f003 fe82 	bl	8013d60 <ucdr_serialize_array_uint8_t>
 801005c:	2202      	movs	r2, #2
 801005e:	18b1      	adds	r1, r6, r2
 8010060:	4604      	mov	r4, r0
 8010062:	4628      	mov	r0, r5
 8010064:	f003 fe7c 	bl	8013d60 <ucdr_serialize_array_uint8_t>
 8010068:	1d31      	adds	r1, r6, #4
 801006a:	4004      	ands	r4, r0
 801006c:	4628      	mov	r0, r5
 801006e:	f7ff fe5d 	bl	800fd2c <uxr_serialize_ReadSpecification>
 8010072:	b2e4      	uxtb	r4, r4
 8010074:	4020      	ands	r0, r4
 8010076:	bd70      	pop	{r4, r5, r6, pc}

08010078 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8010078:	b570      	push	{r4, r5, r6, lr}
 801007a:	2202      	movs	r2, #2
 801007c:	4605      	mov	r5, r0
 801007e:	460e      	mov	r6, r1
 8010080:	f003 fe6e 	bl	8013d60 <ucdr_serialize_array_uint8_t>
 8010084:	2202      	movs	r2, #2
 8010086:	4604      	mov	r4, r0
 8010088:	18b1      	adds	r1, r6, r2
 801008a:	4628      	mov	r0, r5
 801008c:	f003 fe68 	bl	8013d60 <ucdr_serialize_array_uint8_t>
 8010090:	4020      	ands	r0, r4
 8010092:	b2c0      	uxtb	r0, r0
 8010094:	bd70      	pop	{r4, r5, r6, pc}
 8010096:	bf00      	nop

08010098 <uxr_serialize_ACKNACK_Payload>:
 8010098:	b570      	push	{r4, r5, r6, lr}
 801009a:	460c      	mov	r4, r1
 801009c:	460e      	mov	r6, r1
 801009e:	f834 1b02 	ldrh.w	r1, [r4], #2
 80100a2:	4605      	mov	r5, r0
 80100a4:	f003 ff7e 	bl	8013fa4 <ucdr_serialize_uint16_t>
 80100a8:	2202      	movs	r2, #2
 80100aa:	4621      	mov	r1, r4
 80100ac:	4604      	mov	r4, r0
 80100ae:	4628      	mov	r0, r5
 80100b0:	f003 fe56 	bl	8013d60 <ucdr_serialize_array_uint8_t>
 80100b4:	7931      	ldrb	r1, [r6, #4]
 80100b6:	4004      	ands	r4, r0
 80100b8:	4628      	mov	r0, r5
 80100ba:	f003 ff47 	bl	8013f4c <ucdr_serialize_uint8_t>
 80100be:	b2e4      	uxtb	r4, r4
 80100c0:	4020      	ands	r0, r4
 80100c2:	bd70      	pop	{r4, r5, r6, pc}

080100c4 <uxr_deserialize_ACKNACK_Payload>:
 80100c4:	b570      	push	{r4, r5, r6, lr}
 80100c6:	4605      	mov	r5, r0
 80100c8:	460e      	mov	r6, r1
 80100ca:	f004 f86b 	bl	80141a4 <ucdr_deserialize_uint16_t>
 80100ce:	2202      	movs	r2, #2
 80100d0:	18b1      	adds	r1, r6, r2
 80100d2:	4604      	mov	r4, r0
 80100d4:	4628      	mov	r0, r5
 80100d6:	f003 fea7 	bl	8013e28 <ucdr_deserialize_array_uint8_t>
 80100da:	1d31      	adds	r1, r6, #4
 80100dc:	4004      	ands	r4, r0
 80100de:	4628      	mov	r0, r5
 80100e0:	f003 ff4a 	bl	8013f78 <ucdr_deserialize_uint8_t>
 80100e4:	b2e4      	uxtb	r4, r4
 80100e6:	4020      	ands	r0, r4
 80100e8:	bd70      	pop	{r4, r5, r6, pc}
 80100ea:	bf00      	nop

080100ec <uxr_serialize_HEARTBEAT_Payload>:
 80100ec:	b570      	push	{r4, r5, r6, lr}
 80100ee:	460d      	mov	r5, r1
 80100f0:	8809      	ldrh	r1, [r1, #0]
 80100f2:	4606      	mov	r6, r0
 80100f4:	f003 ff56 	bl	8013fa4 <ucdr_serialize_uint16_t>
 80100f8:	8869      	ldrh	r1, [r5, #2]
 80100fa:	4604      	mov	r4, r0
 80100fc:	4630      	mov	r0, r6
 80100fe:	f003 ff51 	bl	8013fa4 <ucdr_serialize_uint16_t>
 8010102:	7929      	ldrb	r1, [r5, #4]
 8010104:	4004      	ands	r4, r0
 8010106:	4630      	mov	r0, r6
 8010108:	f003 ff20 	bl	8013f4c <ucdr_serialize_uint8_t>
 801010c:	b2e4      	uxtb	r4, r4
 801010e:	4020      	ands	r0, r4
 8010110:	bd70      	pop	{r4, r5, r6, pc}
 8010112:	bf00      	nop

08010114 <uxr_deserialize_HEARTBEAT_Payload>:
 8010114:	b570      	push	{r4, r5, r6, lr}
 8010116:	4605      	mov	r5, r0
 8010118:	460e      	mov	r6, r1
 801011a:	f004 f843 	bl	80141a4 <ucdr_deserialize_uint16_t>
 801011e:	1cb1      	adds	r1, r6, #2
 8010120:	4604      	mov	r4, r0
 8010122:	4628      	mov	r0, r5
 8010124:	f004 f83e 	bl	80141a4 <ucdr_deserialize_uint16_t>
 8010128:	1d31      	adds	r1, r6, #4
 801012a:	4004      	ands	r4, r0
 801012c:	4628      	mov	r0, r5
 801012e:	f003 ff23 	bl	8013f78 <ucdr_deserialize_uint8_t>
 8010132:	b2e4      	uxtb	r4, r4
 8010134:	4020      	ands	r0, r4
 8010136:	bd70      	pop	{r4, r5, r6, pc}

08010138 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8010138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801013c:	4605      	mov	r5, r0
 801013e:	460e      	mov	r6, r1
 8010140:	f004 fdcc 	bl	8014cdc <ucdr_deserialize_int32_t>
 8010144:	1d31      	adds	r1, r6, #4
 8010146:	4607      	mov	r7, r0
 8010148:	4628      	mov	r0, r5
 801014a:	f004 fa45 	bl	80145d8 <ucdr_deserialize_uint32_t>
 801014e:	f106 0108 	add.w	r1, r6, #8
 8010152:	4680      	mov	r8, r0
 8010154:	4628      	mov	r0, r5
 8010156:	f004 fdc1 	bl	8014cdc <ucdr_deserialize_int32_t>
 801015a:	f106 010c 	add.w	r1, r6, #12
 801015e:	4604      	mov	r4, r0
 8010160:	4628      	mov	r0, r5
 8010162:	f004 fa39 	bl	80145d8 <ucdr_deserialize_uint32_t>
 8010166:	ea07 0708 	and.w	r7, r7, r8
 801016a:	403c      	ands	r4, r7
 801016c:	f106 0110 	add.w	r1, r6, #16
 8010170:	4004      	ands	r4, r0
 8010172:	4628      	mov	r0, r5
 8010174:	f004 fdb2 	bl	8014cdc <ucdr_deserialize_int32_t>
 8010178:	f106 0114 	add.w	r1, r6, #20
 801017c:	4607      	mov	r7, r0
 801017e:	4628      	mov	r0, r5
 8010180:	f004 fa2a 	bl	80145d8 <ucdr_deserialize_uint32_t>
 8010184:	b2e4      	uxtb	r4, r4
 8010186:	403c      	ands	r4, r7
 8010188:	4020      	ands	r0, r4
 801018a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801018e:	bf00      	nop

08010190 <uxr_serialize_SampleIdentity>:
 8010190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010194:	220c      	movs	r2, #12
 8010196:	4604      	mov	r4, r0
 8010198:	460d      	mov	r5, r1
 801019a:	f003 fde1 	bl	8013d60 <ucdr_serialize_array_uint8_t>
 801019e:	2203      	movs	r2, #3
 80101a0:	f105 010c 	add.w	r1, r5, #12
 80101a4:	4607      	mov	r7, r0
 80101a6:	4620      	mov	r0, r4
 80101a8:	f003 fdda 	bl	8013d60 <ucdr_serialize_array_uint8_t>
 80101ac:	7be9      	ldrb	r1, [r5, #15]
 80101ae:	4680      	mov	r8, r0
 80101b0:	4620      	mov	r0, r4
 80101b2:	f003 fecb 	bl	8013f4c <ucdr_serialize_uint8_t>
 80101b6:	6929      	ldr	r1, [r5, #16]
 80101b8:	4606      	mov	r6, r0
 80101ba:	4620      	mov	r0, r4
 80101bc:	f004 fcf6 	bl	8014bac <ucdr_serialize_int32_t>
 80101c0:	6969      	ldr	r1, [r5, #20]
 80101c2:	4603      	mov	r3, r0
 80101c4:	4620      	mov	r0, r4
 80101c6:	ea07 0708 	and.w	r7, r7, r8
 80101ca:	461c      	mov	r4, r3
 80101cc:	f004 f8d4 	bl	8014378 <ucdr_serialize_uint32_t>
 80101d0:	403e      	ands	r6, r7
 80101d2:	4034      	ands	r4, r6
 80101d4:	4020      	ands	r0, r4
 80101d6:	b2c0      	uxtb	r0, r0
 80101d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080101dc <uxr_deserialize_SampleIdentity>:
 80101dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101e0:	220c      	movs	r2, #12
 80101e2:	4604      	mov	r4, r0
 80101e4:	460d      	mov	r5, r1
 80101e6:	f003 fe1f 	bl	8013e28 <ucdr_deserialize_array_uint8_t>
 80101ea:	2203      	movs	r2, #3
 80101ec:	f105 010c 	add.w	r1, r5, #12
 80101f0:	4607      	mov	r7, r0
 80101f2:	4620      	mov	r0, r4
 80101f4:	f003 fe18 	bl	8013e28 <ucdr_deserialize_array_uint8_t>
 80101f8:	f105 010f 	add.w	r1, r5, #15
 80101fc:	4680      	mov	r8, r0
 80101fe:	4620      	mov	r0, r4
 8010200:	f003 feba 	bl	8013f78 <ucdr_deserialize_uint8_t>
 8010204:	f105 0110 	add.w	r1, r5, #16
 8010208:	4606      	mov	r6, r0
 801020a:	4620      	mov	r0, r4
 801020c:	f004 fd66 	bl	8014cdc <ucdr_deserialize_int32_t>
 8010210:	f105 0114 	add.w	r1, r5, #20
 8010214:	4603      	mov	r3, r0
 8010216:	4620      	mov	r0, r4
 8010218:	ea07 0708 	and.w	r7, r7, r8
 801021c:	461c      	mov	r4, r3
 801021e:	f004 f9db 	bl	80145d8 <ucdr_deserialize_uint32_t>
 8010222:	403e      	ands	r6, r7
 8010224:	4034      	ands	r4, r6
 8010226:	4020      	ands	r0, r4
 8010228:	b2c0      	uxtb	r0, r0
 801022a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801022e:	bf00      	nop

08010230 <rcl_client_get_rmw_handle>:
 8010230:	b118      	cbz	r0, 801023a <rcl_client_get_rmw_handle+0xa>
 8010232:	6800      	ldr	r0, [r0, #0]
 8010234:	b108      	cbz	r0, 801023a <rcl_client_get_rmw_handle+0xa>
 8010236:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801023a:	4770      	bx	lr

0801023c <rcl_send_request>:
 801023c:	b570      	push	{r4, r5, r6, lr}
 801023e:	b082      	sub	sp, #8
 8010240:	b1e8      	cbz	r0, 801027e <rcl_send_request+0x42>
 8010242:	4604      	mov	r4, r0
 8010244:	6800      	ldr	r0, [r0, #0]
 8010246:	b1d0      	cbz	r0, 801027e <rcl_send_request+0x42>
 8010248:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 801024c:	b1bb      	cbz	r3, 801027e <rcl_send_request+0x42>
 801024e:	460e      	mov	r6, r1
 8010250:	b1d1      	cbz	r1, 8010288 <rcl_send_request+0x4c>
 8010252:	4615      	mov	r5, r2
 8010254:	b1c2      	cbz	r2, 8010288 <rcl_send_request+0x4c>
 8010256:	2105      	movs	r1, #5
 8010258:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 801025c:	f002 fb3c 	bl	80128d8 <__atomic_load_8>
 8010260:	6823      	ldr	r3, [r4, #0]
 8010262:	e9c5 0100 	strd	r0, r1, [r5]
 8010266:	462a      	mov	r2, r5
 8010268:	4631      	mov	r1, r6
 801026a:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801026e:	f003 f9c1 	bl	80135f4 <rmw_send_request>
 8010272:	4606      	mov	r6, r0
 8010274:	b160      	cbz	r0, 8010290 <rcl_send_request+0x54>
 8010276:	2601      	movs	r6, #1
 8010278:	4630      	mov	r0, r6
 801027a:	b002      	add	sp, #8
 801027c:	bd70      	pop	{r4, r5, r6, pc}
 801027e:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 8010282:	4630      	mov	r0, r6
 8010284:	b002      	add	sp, #8
 8010286:	bd70      	pop	{r4, r5, r6, pc}
 8010288:	260b      	movs	r6, #11
 801028a:	4630      	mov	r0, r6
 801028c:	b002      	add	sp, #8
 801028e:	bd70      	pop	{r4, r5, r6, pc}
 8010290:	6820      	ldr	r0, [r4, #0]
 8010292:	2105      	movs	r1, #5
 8010294:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010298:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 801029c:	9100      	str	r1, [sp, #0]
 801029e:	f002 fb87 	bl	80129b0 <__atomic_exchange_8>
 80102a2:	4630      	mov	r0, r6
 80102a4:	b002      	add	sp, #8
 80102a6:	bd70      	pop	{r4, r5, r6, pc}

080102a8 <rcl_take_response>:
 80102a8:	b570      	push	{r4, r5, r6, lr}
 80102aa:	468e      	mov	lr, r1
 80102ac:	460c      	mov	r4, r1
 80102ae:	4616      	mov	r6, r2
 80102b0:	4605      	mov	r5, r0
 80102b2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80102b6:	b08c      	sub	sp, #48	@ 0x30
 80102b8:	f10d 0c18 	add.w	ip, sp, #24
 80102bc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80102c0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80102c4:	e88c 0003 	stmia.w	ip, {r0, r1}
 80102c8:	b35d      	cbz	r5, 8010322 <rcl_take_response+0x7a>
 80102ca:	682b      	ldr	r3, [r5, #0]
 80102cc:	b34b      	cbz	r3, 8010322 <rcl_take_response+0x7a>
 80102ce:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80102d2:	b330      	cbz	r0, 8010322 <rcl_take_response+0x7a>
 80102d4:	b346      	cbz	r6, 8010328 <rcl_take_response+0x80>
 80102d6:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8010330 <rcl_take_response+0x88>
 80102da:	2300      	movs	r3, #0
 80102dc:	f88d 3007 	strb.w	r3, [sp, #7]
 80102e0:	4632      	mov	r2, r6
 80102e2:	f10d 0307 	add.w	r3, sp, #7
 80102e6:	a902      	add	r1, sp, #8
 80102e8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80102ec:	ed8d 7b04 	vstr	d7, [sp, #16]
 80102f0:	f003 fa88 	bl	8013804 <rmw_take_response>
 80102f4:	4605      	mov	r5, r0
 80102f6:	b9c8      	cbnz	r0, 801032c <rcl_take_response+0x84>
 80102f8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80102fc:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8010300:	2a00      	cmp	r2, #0
 8010302:	bf08      	it	eq
 8010304:	461d      	moveq	r5, r3
 8010306:	f10d 0e18 	add.w	lr, sp, #24
 801030a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801030e:	46a4      	mov	ip, r4
 8010310:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010314:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8010318:	e88c 0003 	stmia.w	ip, {r0, r1}
 801031c:	4628      	mov	r0, r5
 801031e:	b00c      	add	sp, #48	@ 0x30
 8010320:	bd70      	pop	{r4, r5, r6, pc}
 8010322:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 8010326:	e7ee      	b.n	8010306 <rcl_take_response+0x5e>
 8010328:	250b      	movs	r5, #11
 801032a:	e7ec      	b.n	8010306 <rcl_take_response+0x5e>
 801032c:	2501      	movs	r5, #1
 801032e:	e7ea      	b.n	8010306 <rcl_take_response+0x5e>
	...

08010338 <rcl_client_is_valid>:
 8010338:	b130      	cbz	r0, 8010348 <rcl_client_is_valid+0x10>
 801033a:	6800      	ldr	r0, [r0, #0]
 801033c:	b120      	cbz	r0, 8010348 <rcl_client_is_valid+0x10>
 801033e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8010342:	3800      	subs	r0, #0
 8010344:	bf18      	it	ne
 8010346:	2001      	movne	r0, #1
 8010348:	4770      	bx	lr
 801034a:	bf00      	nop

0801034c <rcl_convert_rmw_ret_to_rcl_ret>:
 801034c:	280b      	cmp	r0, #11
 801034e:	dc0d      	bgt.n	801036c <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8010350:	2800      	cmp	r0, #0
 8010352:	db09      	blt.n	8010368 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8010354:	280b      	cmp	r0, #11
 8010356:	d807      	bhi.n	8010368 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8010358:	e8df f000 	tbb	[pc, r0]
 801035c:	07060607 	.word	0x07060607
 8010360:	06060606 	.word	0x06060606
 8010364:	07070606 	.word	0x07070606
 8010368:	2001      	movs	r0, #1
 801036a:	4770      	bx	lr
 801036c:	28cb      	cmp	r0, #203	@ 0xcb
 801036e:	bf18      	it	ne
 8010370:	2001      	movne	r0, #1
 8010372:	4770      	bx	lr

08010374 <rcl_get_zero_initialized_context>:
 8010374:	4a03      	ldr	r2, [pc, #12]	@ (8010384 <rcl_get_zero_initialized_context+0x10>)
 8010376:	4603      	mov	r3, r0
 8010378:	e892 0003 	ldmia.w	r2, {r0, r1}
 801037c:	e883 0003 	stmia.w	r3, {r0, r1}
 8010380:	4618      	mov	r0, r3
 8010382:	4770      	bx	lr
 8010384:	0801a6ac 	.word	0x0801a6ac

08010388 <rcl_context_is_valid>:
 8010388:	b118      	cbz	r0, 8010392 <rcl_context_is_valid+0xa>
 801038a:	6840      	ldr	r0, [r0, #4]
 801038c:	3800      	subs	r0, #0
 801038e:	bf18      	it	ne
 8010390:	2001      	movne	r0, #1
 8010392:	4770      	bx	lr

08010394 <__cleanup_context>:
 8010394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010398:	4606      	mov	r6, r0
 801039a:	6800      	ldr	r0, [r0, #0]
 801039c:	2300      	movs	r3, #0
 801039e:	6073      	str	r3, [r6, #4]
 80103a0:	2800      	cmp	r0, #0
 80103a2:	d049      	beq.n	8010438 <__cleanup_context+0xa4>
 80103a4:	6947      	ldr	r7, [r0, #20]
 80103a6:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80103aa:	f8d0 9010 	ldr.w	r9, [r0, #16]
 80103ae:	b137      	cbz	r7, 80103be <__cleanup_context+0x2a>
 80103b0:	3014      	adds	r0, #20
 80103b2:	f000 fa6d 	bl	8010890 <rcl_init_options_fini>
 80103b6:	4607      	mov	r7, r0
 80103b8:	2800      	cmp	r0, #0
 80103ba:	d144      	bne.n	8010446 <__cleanup_context+0xb2>
 80103bc:	6830      	ldr	r0, [r6, #0]
 80103be:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80103c0:	b143      	cbz	r3, 80103d4 <__cleanup_context+0x40>
 80103c2:	3028      	adds	r0, #40	@ 0x28
 80103c4:	f003 f872 	bl	80134ac <rmw_context_fini>
 80103c8:	b118      	cbz	r0, 80103d2 <__cleanup_context+0x3e>
 80103ca:	2f00      	cmp	r7, #0
 80103cc:	d03e      	beq.n	801044c <__cleanup_context+0xb8>
 80103ce:	f7fb faeb 	bl	800b9a8 <rcutils_reset_error>
 80103d2:	6830      	ldr	r0, [r6, #0]
 80103d4:	6a03      	ldr	r3, [r0, #32]
 80103d6:	b1db      	cbz	r3, 8010410 <__cleanup_context+0x7c>
 80103d8:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 80103dc:	2a01      	cmp	r2, #1
 80103de:	f17c 0100 	sbcs.w	r1, ip, #0
 80103e2:	db11      	blt.n	8010408 <__cleanup_context+0x74>
 80103e4:	2400      	movs	r4, #0
 80103e6:	4625      	mov	r5, r4
 80103e8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80103ec:	4649      	mov	r1, r9
 80103ee:	b1b8      	cbz	r0, 8010420 <__cleanup_context+0x8c>
 80103f0:	47c0      	blx	r8
 80103f2:	6833      	ldr	r3, [r6, #0]
 80103f4:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 80103f8:	3401      	adds	r4, #1
 80103fa:	f145 0500 	adc.w	r5, r5, #0
 80103fe:	4294      	cmp	r4, r2
 8010400:	eb75 010c 	sbcs.w	r1, r5, ip
 8010404:	6a1b      	ldr	r3, [r3, #32]
 8010406:	dbef      	blt.n	80103e8 <__cleanup_context+0x54>
 8010408:	4618      	mov	r0, r3
 801040a:	4649      	mov	r1, r9
 801040c:	47c0      	blx	r8
 801040e:	6830      	ldr	r0, [r6, #0]
 8010410:	4649      	mov	r1, r9
 8010412:	47c0      	blx	r8
 8010414:	2300      	movs	r3, #0
 8010416:	e9c6 3300 	strd	r3, r3, [r6]
 801041a:	4638      	mov	r0, r7
 801041c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010420:	3401      	adds	r4, #1
 8010422:	f145 0500 	adc.w	r5, r5, #0
 8010426:	4294      	cmp	r4, r2
 8010428:	eb75 010c 	sbcs.w	r1, r5, ip
 801042c:	dbdc      	blt.n	80103e8 <__cleanup_context+0x54>
 801042e:	4618      	mov	r0, r3
 8010430:	4649      	mov	r1, r9
 8010432:	47c0      	blx	r8
 8010434:	6830      	ldr	r0, [r6, #0]
 8010436:	e7eb      	b.n	8010410 <__cleanup_context+0x7c>
 8010438:	4607      	mov	r7, r0
 801043a:	2300      	movs	r3, #0
 801043c:	e9c6 3300 	strd	r3, r3, [r6]
 8010440:	4638      	mov	r0, r7
 8010442:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010446:	f7fb faaf 	bl	800b9a8 <rcutils_reset_error>
 801044a:	e7b7      	b.n	80103bc <__cleanup_context+0x28>
 801044c:	f7ff ff7e 	bl	801034c <rcl_convert_rmw_ret_to_rcl_ret>
 8010450:	4607      	mov	r7, r0
 8010452:	e7bc      	b.n	80103ce <__cleanup_context+0x3a>

08010454 <rcl_get_zero_initialized_guard_condition>:
 8010454:	4a03      	ldr	r2, [pc, #12]	@ (8010464 <rcl_get_zero_initialized_guard_condition+0x10>)
 8010456:	4603      	mov	r3, r0
 8010458:	e892 0003 	ldmia.w	r2, {r0, r1}
 801045c:	e883 0003 	stmia.w	r3, {r0, r1}
 8010460:	4618      	mov	r0, r3
 8010462:	4770      	bx	lr
 8010464:	0801a6b4 	.word	0x0801a6b4

08010468 <rcl_guard_condition_init_from_rmw>:
 8010468:	b082      	sub	sp, #8
 801046a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801046e:	b086      	sub	sp, #24
 8010470:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8010474:	4604      	mov	r4, r0
 8010476:	f84c 3f04 	str.w	r3, [ip, #4]!
 801047a:	460e      	mov	r6, r1
 801047c:	4617      	mov	r7, r2
 801047e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010482:	f10d 0e04 	add.w	lr, sp, #4
 8010486:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801048a:	f8dc 3000 	ldr.w	r3, [ip]
 801048e:	f8ce 3000 	str.w	r3, [lr]
 8010492:	a801      	add	r0, sp, #4
 8010494:	f7fb fa4c 	bl	800b930 <rcutils_allocator_is_valid>
 8010498:	b350      	cbz	r0, 80104f0 <rcl_guard_condition_init_from_rmw+0x88>
 801049a:	b34c      	cbz	r4, 80104f0 <rcl_guard_condition_init_from_rmw+0x88>
 801049c:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80104a0:	f1b8 0f00 	cmp.w	r8, #0
 80104a4:	d11e      	bne.n	80104e4 <rcl_guard_condition_init_from_rmw+0x7c>
 80104a6:	b31f      	cbz	r7, 80104f0 <rcl_guard_condition_init_from_rmw+0x88>
 80104a8:	4638      	mov	r0, r7
 80104aa:	f7ff ff6d 	bl	8010388 <rcl_context_is_valid>
 80104ae:	b328      	cbz	r0, 80104fc <rcl_guard_condition_init_from_rmw+0x94>
 80104b0:	9b01      	ldr	r3, [sp, #4]
 80104b2:	9905      	ldr	r1, [sp, #20]
 80104b4:	201c      	movs	r0, #28
 80104b6:	4798      	blx	r3
 80104b8:	4605      	mov	r5, r0
 80104ba:	6060      	str	r0, [r4, #4]
 80104bc:	b358      	cbz	r0, 8010516 <rcl_guard_condition_init_from_rmw+0xae>
 80104be:	b1fe      	cbz	r6, 8010500 <rcl_guard_condition_init_from_rmw+0x98>
 80104c0:	6006      	str	r6, [r0, #0]
 80104c2:	f880 8004 	strb.w	r8, [r0, #4]
 80104c6:	ac01      	add	r4, sp, #4
 80104c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80104ca:	f105 0c08 	add.w	ip, r5, #8
 80104ce:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80104d2:	6823      	ldr	r3, [r4, #0]
 80104d4:	f8cc 3000 	str.w	r3, [ip]
 80104d8:	2000      	movs	r0, #0
 80104da:	b006      	add	sp, #24
 80104dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80104e0:	b002      	add	sp, #8
 80104e2:	4770      	bx	lr
 80104e4:	2064      	movs	r0, #100	@ 0x64
 80104e6:	b006      	add	sp, #24
 80104e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80104ec:	b002      	add	sp, #8
 80104ee:	4770      	bx	lr
 80104f0:	200b      	movs	r0, #11
 80104f2:	b006      	add	sp, #24
 80104f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80104f8:	b002      	add	sp, #8
 80104fa:	4770      	bx	lr
 80104fc:	2065      	movs	r0, #101	@ 0x65
 80104fe:	e7f2      	b.n	80104e6 <rcl_guard_condition_init_from_rmw+0x7e>
 8010500:	6838      	ldr	r0, [r7, #0]
 8010502:	3028      	adds	r0, #40	@ 0x28
 8010504:	f002 fd7c 	bl	8013000 <rmw_create_guard_condition>
 8010508:	6028      	str	r0, [r5, #0]
 801050a:	6865      	ldr	r5, [r4, #4]
 801050c:	682e      	ldr	r6, [r5, #0]
 801050e:	b126      	cbz	r6, 801051a <rcl_guard_condition_init_from_rmw+0xb2>
 8010510:	2301      	movs	r3, #1
 8010512:	712b      	strb	r3, [r5, #4]
 8010514:	e7d7      	b.n	80104c6 <rcl_guard_condition_init_from_rmw+0x5e>
 8010516:	200a      	movs	r0, #10
 8010518:	e7e5      	b.n	80104e6 <rcl_guard_condition_init_from_rmw+0x7e>
 801051a:	4628      	mov	r0, r5
 801051c:	9b02      	ldr	r3, [sp, #8]
 801051e:	9905      	ldr	r1, [sp, #20]
 8010520:	4798      	blx	r3
 8010522:	6066      	str	r6, [r4, #4]
 8010524:	2001      	movs	r0, #1
 8010526:	e7de      	b.n	80104e6 <rcl_guard_condition_init_from_rmw+0x7e>

08010528 <rcl_guard_condition_fini>:
 8010528:	b570      	push	{r4, r5, r6, lr}
 801052a:	b082      	sub	sp, #8
 801052c:	b1f0      	cbz	r0, 801056c <rcl_guard_condition_fini+0x44>
 801052e:	6843      	ldr	r3, [r0, #4]
 8010530:	4604      	mov	r4, r0
 8010532:	b163      	cbz	r3, 801054e <rcl_guard_condition_fini+0x26>
 8010534:	6818      	ldr	r0, [r3, #0]
 8010536:	68de      	ldr	r6, [r3, #12]
 8010538:	6999      	ldr	r1, [r3, #24]
 801053a:	b160      	cbz	r0, 8010556 <rcl_guard_condition_fini+0x2e>
 801053c:	791d      	ldrb	r5, [r3, #4]
 801053e:	b965      	cbnz	r5, 801055a <rcl_guard_condition_fini+0x32>
 8010540:	4618      	mov	r0, r3
 8010542:	47b0      	blx	r6
 8010544:	2300      	movs	r3, #0
 8010546:	4628      	mov	r0, r5
 8010548:	6063      	str	r3, [r4, #4]
 801054a:	b002      	add	sp, #8
 801054c:	bd70      	pop	{r4, r5, r6, pc}
 801054e:	461d      	mov	r5, r3
 8010550:	4628      	mov	r0, r5
 8010552:	b002      	add	sp, #8
 8010554:	bd70      	pop	{r4, r5, r6, pc}
 8010556:	4605      	mov	r5, r0
 8010558:	e7f2      	b.n	8010540 <rcl_guard_condition_fini+0x18>
 801055a:	9101      	str	r1, [sp, #4]
 801055c:	f002 fd64 	bl	8013028 <rmw_destroy_guard_condition>
 8010560:	1e05      	subs	r5, r0, #0
 8010562:	6863      	ldr	r3, [r4, #4]
 8010564:	9901      	ldr	r1, [sp, #4]
 8010566:	bf18      	it	ne
 8010568:	2501      	movne	r5, #1
 801056a:	e7e9      	b.n	8010540 <rcl_guard_condition_fini+0x18>
 801056c:	250b      	movs	r5, #11
 801056e:	4628      	mov	r0, r5
 8010570:	b002      	add	sp, #8
 8010572:	bd70      	pop	{r4, r5, r6, pc}

08010574 <rcl_guard_condition_get_default_options>:
 8010574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010576:	b087      	sub	sp, #28
 8010578:	4606      	mov	r6, r0
 801057a:	4668      	mov	r0, sp
 801057c:	f7fb f9ca 	bl	800b914 <rcutils_get_default_allocator>
 8010580:	4b09      	ldr	r3, [pc, #36]	@ (80105a8 <rcl_guard_condition_get_default_options+0x34>)
 8010582:	46ee      	mov	lr, sp
 8010584:	469c      	mov	ip, r3
 8010586:	461d      	mov	r5, r3
 8010588:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801058c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010590:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010592:	4634      	mov	r4, r6
 8010594:	f8de 7000 	ldr.w	r7, [lr]
 8010598:	f8cc 7000 	str.w	r7, [ip]
 801059c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801059e:	4630      	mov	r0, r6
 80105a0:	6027      	str	r7, [r4, #0]
 80105a2:	b007      	add	sp, #28
 80105a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80105a6:	bf00      	nop
 80105a8:	2001122c 	.word	0x2001122c

080105ac <rcl_guard_condition_get_rmw_handle>:
 80105ac:	b110      	cbz	r0, 80105b4 <rcl_guard_condition_get_rmw_handle+0x8>
 80105ae:	6840      	ldr	r0, [r0, #4]
 80105b0:	b100      	cbz	r0, 80105b4 <rcl_guard_condition_get_rmw_handle+0x8>
 80105b2:	6800      	ldr	r0, [r0, #0]
 80105b4:	4770      	bx	lr
 80105b6:	bf00      	nop

080105b8 <rcl_init>:
 80105b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80105bc:	1e05      	subs	r5, r0, #0
 80105be:	b09e      	sub	sp, #120	@ 0x78
 80105c0:	460e      	mov	r6, r1
 80105c2:	4690      	mov	r8, r2
 80105c4:	461f      	mov	r7, r3
 80105c6:	f340 809c 	ble.w	8010702 <rcl_init+0x14a>
 80105ca:	2900      	cmp	r1, #0
 80105cc:	f000 809c 	beq.w	8010708 <rcl_init+0x150>
 80105d0:	f1a1 0e04 	sub.w	lr, r1, #4
 80105d4:	f04f 0c00 	mov.w	ip, #0
 80105d8:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 80105dc:	f10c 0c01 	add.w	ip, ip, #1
 80105e0:	2c00      	cmp	r4, #0
 80105e2:	f000 8091 	beq.w	8010708 <rcl_init+0x150>
 80105e6:	4565      	cmp	r5, ip
 80105e8:	d1f6      	bne.n	80105d8 <rcl_init+0x20>
 80105ea:	f1b8 0f00 	cmp.w	r8, #0
 80105ee:	f000 808b 	beq.w	8010708 <rcl_init+0x150>
 80105f2:	f8d8 4000 	ldr.w	r4, [r8]
 80105f6:	2c00      	cmp	r4, #0
 80105f8:	f000 8086 	beq.w	8010708 <rcl_init+0x150>
 80105fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80105fe:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 8010602:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010606:	6823      	ldr	r3, [r4, #0]
 8010608:	f8cc 3000 	str.w	r3, [ip]
 801060c:	a819      	add	r0, sp, #100	@ 0x64
 801060e:	f7fb f98f 	bl	800b930 <rcutils_allocator_is_valid>
 8010612:	2800      	cmp	r0, #0
 8010614:	d078      	beq.n	8010708 <rcl_init+0x150>
 8010616:	2f00      	cmp	r7, #0
 8010618:	d076      	beq.n	8010708 <rcl_init+0x150>
 801061a:	683b      	ldr	r3, [r7, #0]
 801061c:	2b00      	cmp	r3, #0
 801061e:	d178      	bne.n	8010712 <rcl_init+0x15a>
 8010620:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8010624:	2178      	movs	r1, #120	@ 0x78
 8010626:	2001      	movs	r0, #1
 8010628:	4798      	blx	r3
 801062a:	4604      	mov	r4, r0
 801062c:	6038      	str	r0, [r7, #0]
 801062e:	2800      	cmp	r0, #0
 8010630:	f000 80b6 	beq.w	80107a0 <rcl_init+0x1e8>
 8010634:	a802      	add	r0, sp, #8
 8010636:	f002 fb57 	bl	8012ce8 <rmw_get_zero_initialized_context>
 801063a:	a902      	add	r1, sp, #8
 801063c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8010640:	2250      	movs	r2, #80	@ 0x50
 8010642:	ac19      	add	r4, sp, #100	@ 0x64
 8010644:	f007 fce3 	bl	801800e <memcpy>
 8010648:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801064a:	f8d7 e000 	ldr.w	lr, [r7]
 801064e:	46f4      	mov	ip, lr
 8010650:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010654:	6823      	ldr	r3, [r4, #0]
 8010656:	f8cc 3000 	str.w	r3, [ip]
 801065a:	f10e 0114 	add.w	r1, lr, #20
 801065e:	4640      	mov	r0, r8
 8010660:	f000 f940 	bl	80108e4 <rcl_init_options_copy>
 8010664:	4604      	mov	r4, r0
 8010666:	2800      	cmp	r0, #0
 8010668:	d144      	bne.n	80106f4 <rcl_init+0x13c>
 801066a:	f8d7 9000 	ldr.w	r9, [r7]
 801066e:	ea4f 78e5 	mov.w	r8, r5, asr #31
 8010672:	f8c9 0020 	str.w	r0, [r9, #32]
 8010676:	f8c9 5018 	str.w	r5, [r9, #24]
 801067a:	f8c9 801c 	str.w	r8, [r9, #28]
 801067e:	2d00      	cmp	r5, #0
 8010680:	d04e      	beq.n	8010720 <rcl_init+0x168>
 8010682:	2e00      	cmp	r6, #0
 8010684:	d04c      	beq.n	8010720 <rcl_init+0x168>
 8010686:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 801068a:	2104      	movs	r1, #4
 801068c:	4628      	mov	r0, r5
 801068e:	4798      	blx	r3
 8010690:	f8c9 0020 	str.w	r0, [r9, #32]
 8010694:	f8d7 9000 	ldr.w	r9, [r7]
 8010698:	f8d9 3020 	ldr.w	r3, [r9, #32]
 801069c:	46ca      	mov	sl, r9
 801069e:	b343      	cbz	r3, 80106f2 <rcl_init+0x13a>
 80106a0:	2d01      	cmp	r5, #1
 80106a2:	f178 0300 	sbcs.w	r3, r8, #0
 80106a6:	db3b      	blt.n	8010720 <rcl_init+0x168>
 80106a8:	2400      	movs	r4, #0
 80106aa:	3e04      	subs	r6, #4
 80106ac:	46a1      	mov	r9, r4
 80106ae:	e00b      	b.n	80106c8 <rcl_init+0x110>
 80106b0:	6831      	ldr	r1, [r6, #0]
 80106b2:	f007 fcac 	bl	801800e <memcpy>
 80106b6:	3401      	adds	r4, #1
 80106b8:	f149 0900 	adc.w	r9, r9, #0
 80106bc:	45c8      	cmp	r8, r9
 80106be:	bf08      	it	eq
 80106c0:	42a5      	cmpeq	r5, r4
 80106c2:	d02b      	beq.n	801071c <rcl_init+0x164>
 80106c4:	f8d7 a000 	ldr.w	sl, [r7]
 80106c8:	f856 0f04 	ldr.w	r0, [r6, #4]!
 80106cc:	f7ef fe00 	bl	80002d0 <strlen>
 80106d0:	1c42      	adds	r2, r0, #1
 80106d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80106d4:	991d      	ldr	r1, [sp, #116]	@ 0x74
 80106d6:	f8da a020 	ldr.w	sl, [sl, #32]
 80106da:	9201      	str	r2, [sp, #4]
 80106dc:	4610      	mov	r0, r2
 80106de:	4798      	blx	r3
 80106e0:	683b      	ldr	r3, [r7, #0]
 80106e2:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 80106e6:	6a1b      	ldr	r3, [r3, #32]
 80106e8:	9a01      	ldr	r2, [sp, #4]
 80106ea:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80106ee:	2800      	cmp	r0, #0
 80106f0:	d1de      	bne.n	80106b0 <rcl_init+0xf8>
 80106f2:	240a      	movs	r4, #10
 80106f4:	4638      	mov	r0, r7
 80106f6:	f7ff fe4d 	bl	8010394 <__cleanup_context>
 80106fa:	4620      	mov	r0, r4
 80106fc:	b01e      	add	sp, #120	@ 0x78
 80106fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010702:	2900      	cmp	r1, #0
 8010704:	f43f af71 	beq.w	80105ea <rcl_init+0x32>
 8010708:	240b      	movs	r4, #11
 801070a:	4620      	mov	r0, r4
 801070c:	b01e      	add	sp, #120	@ 0x78
 801070e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010712:	2464      	movs	r4, #100	@ 0x64
 8010714:	4620      	mov	r0, r4
 8010716:	b01e      	add	sp, #120	@ 0x78
 8010718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801071c:	f8d7 9000 	ldr.w	r9, [r7]
 8010720:	4926      	ldr	r1, [pc, #152]	@ (80107bc <rcl_init+0x204>)
 8010722:	680b      	ldr	r3, [r1, #0]
 8010724:	3301      	adds	r3, #1
 8010726:	d036      	beq.n	8010796 <rcl_init+0x1de>
 8010728:	600b      	str	r3, [r1, #0]
 801072a:	461a      	mov	r2, r3
 801072c:	2400      	movs	r4, #0
 801072e:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8010732:	607b      	str	r3, [r7, #4]
 8010734:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8010736:	3301      	adds	r3, #1
 8010738:	e9c0 2406 	strd	r2, r4, [r0, #24]
 801073c:	d034      	beq.n	80107a8 <rcl_init+0x1f0>
 801073e:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 8010742:	b93b      	cbnz	r3, 8010754 <rcl_init+0x19c>
 8010744:	3030      	adds	r0, #48	@ 0x30
 8010746:	f000 f939 	bl	80109bc <rcl_get_localhost_only>
 801074a:	4604      	mov	r4, r0
 801074c:	2800      	cmp	r0, #0
 801074e:	d1d1      	bne.n	80106f4 <rcl_init+0x13c>
 8010750:	683b      	ldr	r3, [r7, #0]
 8010752:	6958      	ldr	r0, [r3, #20]
 8010754:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8010756:	aa18      	add	r2, sp, #96	@ 0x60
 8010758:	a917      	add	r1, sp, #92	@ 0x5c
 801075a:	f000 fd59 	bl	8011210 <rcl_validate_enclave_name>
 801075e:	4604      	mov	r4, r0
 8010760:	2800      	cmp	r0, #0
 8010762:	d1c7      	bne.n	80106f4 <rcl_init+0x13c>
 8010764:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8010766:	b9eb      	cbnz	r3, 80107a4 <rcl_init+0x1ec>
 8010768:	6839      	ldr	r1, [r7, #0]
 801076a:	694b      	ldr	r3, [r1, #20]
 801076c:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 801076e:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8010772:	f000 fa99 	bl	8010ca8 <rcl_get_security_options_from_environment>
 8010776:	4604      	mov	r4, r0
 8010778:	2800      	cmp	r0, #0
 801077a:	d1bb      	bne.n	80106f4 <rcl_init+0x13c>
 801077c:	6839      	ldr	r1, [r7, #0]
 801077e:	6948      	ldr	r0, [r1, #20]
 8010780:	3128      	adds	r1, #40	@ 0x28
 8010782:	3018      	adds	r0, #24
 8010784:	f002 fd5c 	bl	8013240 <rmw_init>
 8010788:	4604      	mov	r4, r0
 801078a:	2800      	cmp	r0, #0
 801078c:	d0bd      	beq.n	801070a <rcl_init+0x152>
 801078e:	f7ff fddd 	bl	801034c <rcl_convert_rmw_ret_to_rcl_ret>
 8010792:	4604      	mov	r4, r0
 8010794:	e7ae      	b.n	80106f4 <rcl_init+0x13c>
 8010796:	2201      	movs	r2, #1
 8010798:	461c      	mov	r4, r3
 801079a:	600a      	str	r2, [r1, #0]
 801079c:	4613      	mov	r3, r2
 801079e:	e7c6      	b.n	801072e <rcl_init+0x176>
 80107a0:	240a      	movs	r4, #10
 80107a2:	e7b2      	b.n	801070a <rcl_init+0x152>
 80107a4:	2401      	movs	r4, #1
 80107a6:	e7a5      	b.n	80106f4 <rcl_init+0x13c>
 80107a8:	3024      	adds	r0, #36	@ 0x24
 80107aa:	f005 fdfb 	bl	80163a4 <rcl_get_default_domain_id>
 80107ae:	4604      	mov	r4, r0
 80107b0:	2800      	cmp	r0, #0
 80107b2:	d19f      	bne.n	80106f4 <rcl_init+0x13c>
 80107b4:	683b      	ldr	r3, [r7, #0]
 80107b6:	6958      	ldr	r0, [r3, #20]
 80107b8:	e7c1      	b.n	801073e <rcl_init+0x186>
 80107ba:	bf00      	nop
 80107bc:	20011240 	.word	0x20011240

080107c0 <rcl_get_zero_initialized_init_options>:
 80107c0:	2000      	movs	r0, #0
 80107c2:	4770      	bx	lr

080107c4 <rcl_init_options_init>:
 80107c4:	b084      	sub	sp, #16
 80107c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80107c8:	b097      	sub	sp, #92	@ 0x5c
 80107ca:	ae1d      	add	r6, sp, #116	@ 0x74
 80107cc:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 80107d0:	2800      	cmp	r0, #0
 80107d2:	d058      	beq.n	8010886 <rcl_init_options_init+0xc2>
 80107d4:	6803      	ldr	r3, [r0, #0]
 80107d6:	4605      	mov	r5, r0
 80107d8:	b133      	cbz	r3, 80107e8 <rcl_init_options_init+0x24>
 80107da:	2464      	movs	r4, #100	@ 0x64
 80107dc:	4620      	mov	r0, r4
 80107de:	b017      	add	sp, #92	@ 0x5c
 80107e0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80107e4:	b004      	add	sp, #16
 80107e6:	4770      	bx	lr
 80107e8:	4630      	mov	r0, r6
 80107ea:	f7fb f8a1 	bl	800b930 <rcutils_allocator_is_valid>
 80107ee:	2800      	cmp	r0, #0
 80107f0:	d049      	beq.n	8010886 <rcl_init_options_init+0xc2>
 80107f2:	46b4      	mov	ip, r6
 80107f4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80107f8:	ac11      	add	r4, sp, #68	@ 0x44
 80107fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80107fc:	f8dc 3000 	ldr.w	r3, [ip]
 8010800:	6023      	str	r3, [r4, #0]
 8010802:	9921      	ldr	r1, [sp, #132]	@ 0x84
 8010804:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010806:	2050      	movs	r0, #80	@ 0x50
 8010808:	4798      	blx	r3
 801080a:	4604      	mov	r4, r0
 801080c:	6028      	str	r0, [r5, #0]
 801080e:	2800      	cmp	r0, #0
 8010810:	d03b      	beq.n	801088a <rcl_init_options_init+0xc6>
 8010812:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8010816:	4686      	mov	lr, r0
 8010818:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801081c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010820:	f8dc 3000 	ldr.w	r3, [ip]
 8010824:	f8ce 3000 	str.w	r3, [lr]
 8010828:	a802      	add	r0, sp, #8
 801082a:	f002 fa6d 	bl	8012d08 <rmw_get_zero_initialized_init_options>
 801082e:	f10d 0e08 	add.w	lr, sp, #8
 8010832:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010836:	f104 0c18 	add.w	ip, r4, #24
 801083a:	682f      	ldr	r7, [r5, #0]
 801083c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010840:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010844:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010848:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801084c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010850:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8010854:	ac20      	add	r4, sp, #128	@ 0x80
 8010856:	e88c 0003 	stmia.w	ip, {r0, r1}
 801085a:	e894 0003 	ldmia.w	r4, {r0, r1}
 801085e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8010862:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8010866:	f107 0018 	add.w	r0, r7, #24
 801086a:	f002 fbf1 	bl	8013050 <rmw_init_options_init>
 801086e:	4604      	mov	r4, r0
 8010870:	2800      	cmp	r0, #0
 8010872:	d0b3      	beq.n	80107dc <rcl_init_options_init+0x18>
 8010874:	9921      	ldr	r1, [sp, #132]	@ 0x84
 8010876:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8010878:	6828      	ldr	r0, [r5, #0]
 801087a:	4798      	blx	r3
 801087c:	4620      	mov	r0, r4
 801087e:	f7ff fd65 	bl	801034c <rcl_convert_rmw_ret_to_rcl_ret>
 8010882:	4604      	mov	r4, r0
 8010884:	e7aa      	b.n	80107dc <rcl_init_options_init+0x18>
 8010886:	240b      	movs	r4, #11
 8010888:	e7a8      	b.n	80107dc <rcl_init_options_init+0x18>
 801088a:	240a      	movs	r4, #10
 801088c:	e7a6      	b.n	80107dc <rcl_init_options_init+0x18>
 801088e:	bf00      	nop

08010890 <rcl_init_options_fini>:
 8010890:	b530      	push	{r4, r5, lr}
 8010892:	b087      	sub	sp, #28
 8010894:	b1f0      	cbz	r0, 80108d4 <rcl_init_options_fini+0x44>
 8010896:	6803      	ldr	r3, [r0, #0]
 8010898:	4604      	mov	r4, r0
 801089a:	b1db      	cbz	r3, 80108d4 <rcl_init_options_fini+0x44>
 801089c:	469c      	mov	ip, r3
 801089e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80108a2:	f10d 0e04 	add.w	lr, sp, #4
 80108a6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80108aa:	f8dc 3000 	ldr.w	r3, [ip]
 80108ae:	f8ce 3000 	str.w	r3, [lr]
 80108b2:	a801      	add	r0, sp, #4
 80108b4:	f7fb f83c 	bl	800b930 <rcutils_allocator_is_valid>
 80108b8:	b160      	cbz	r0, 80108d4 <rcl_init_options_fini+0x44>
 80108ba:	6820      	ldr	r0, [r4, #0]
 80108bc:	3018      	adds	r0, #24
 80108be:	f002 fc77 	bl	80131b0 <rmw_init_options_fini>
 80108c2:	4605      	mov	r5, r0
 80108c4:	b950      	cbnz	r0, 80108dc <rcl_init_options_fini+0x4c>
 80108c6:	6820      	ldr	r0, [r4, #0]
 80108c8:	9b02      	ldr	r3, [sp, #8]
 80108ca:	9905      	ldr	r1, [sp, #20]
 80108cc:	4798      	blx	r3
 80108ce:	4628      	mov	r0, r5
 80108d0:	b007      	add	sp, #28
 80108d2:	bd30      	pop	{r4, r5, pc}
 80108d4:	250b      	movs	r5, #11
 80108d6:	4628      	mov	r0, r5
 80108d8:	b007      	add	sp, #28
 80108da:	bd30      	pop	{r4, r5, pc}
 80108dc:	f7ff fd36 	bl	801034c <rcl_convert_rmw_ret_to_rcl_ret>
 80108e0:	4605      	mov	r5, r0
 80108e2:	e7f8      	b.n	80108d6 <rcl_init_options_fini+0x46>

080108e4 <rcl_init_options_copy>:
 80108e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108e8:	b094      	sub	sp, #80	@ 0x50
 80108ea:	2800      	cmp	r0, #0
 80108ec:	d058      	beq.n	80109a0 <rcl_init_options_copy+0xbc>
 80108ee:	4604      	mov	r4, r0
 80108f0:	6800      	ldr	r0, [r0, #0]
 80108f2:	2800      	cmp	r0, #0
 80108f4:	d054      	beq.n	80109a0 <rcl_init_options_copy+0xbc>
 80108f6:	460e      	mov	r6, r1
 80108f8:	f7fb f81a 	bl	800b930 <rcutils_allocator_is_valid>
 80108fc:	2800      	cmp	r0, #0
 80108fe:	d04f      	beq.n	80109a0 <rcl_init_options_copy+0xbc>
 8010900:	2e00      	cmp	r6, #0
 8010902:	d04d      	beq.n	80109a0 <rcl_init_options_copy+0xbc>
 8010904:	6833      	ldr	r3, [r6, #0]
 8010906:	b123      	cbz	r3, 8010912 <rcl_init_options_copy+0x2e>
 8010908:	2464      	movs	r4, #100	@ 0x64
 801090a:	4620      	mov	r0, r4
 801090c:	b014      	add	sp, #80	@ 0x50
 801090e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010912:	6827      	ldr	r7, [r4, #0]
 8010914:	46bc      	mov	ip, r7
 8010916:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801091a:	ad0f      	add	r5, sp, #60	@ 0x3c
 801091c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801091e:	f8dc 3000 	ldr.w	r3, [ip]
 8010922:	f8d7 8000 	ldr.w	r8, [r7]
 8010926:	602b      	str	r3, [r5, #0]
 8010928:	4619      	mov	r1, r3
 801092a:	2050      	movs	r0, #80	@ 0x50
 801092c:	47c0      	blx	r8
 801092e:	4605      	mov	r5, r0
 8010930:	6030      	str	r0, [r6, #0]
 8010932:	b3d0      	cbz	r0, 80109aa <rcl_init_options_copy+0xc6>
 8010934:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 8010938:	4686      	mov	lr, r0
 801093a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801093e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010942:	f8dc 3000 	ldr.w	r3, [ip]
 8010946:	f8ce 3000 	str.w	r3, [lr]
 801094a:	4668      	mov	r0, sp
 801094c:	f002 f9dc 	bl	8012d08 <rmw_get_zero_initialized_init_options>
 8010950:	46ee      	mov	lr, sp
 8010952:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010956:	f105 0c18 	add.w	ip, r5, #24
 801095a:	6824      	ldr	r4, [r4, #0]
 801095c:	6835      	ldr	r5, [r6, #0]
 801095e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010962:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010966:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801096a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801096e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010972:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8010976:	e88c 0003 	stmia.w	ip, {r0, r1}
 801097a:	f104 0018 	add.w	r0, r4, #24
 801097e:	f105 0118 	add.w	r1, r5, #24
 8010982:	f002 fbcd 	bl	8013120 <rmw_init_options_copy>
 8010986:	4604      	mov	r4, r0
 8010988:	2800      	cmp	r0, #0
 801098a:	d0be      	beq.n	801090a <rcl_init_options_copy+0x26>
 801098c:	f7fa fff6 	bl	800b97c <rcutils_get_error_string>
 8010990:	f7fb f80a 	bl	800b9a8 <rcutils_reset_error>
 8010994:	4630      	mov	r0, r6
 8010996:	f7ff ff7b 	bl	8010890 <rcl_init_options_fini>
 801099a:	b140      	cbz	r0, 80109ae <rcl_init_options_copy+0xca>
 801099c:	4604      	mov	r4, r0
 801099e:	e7b4      	b.n	801090a <rcl_init_options_copy+0x26>
 80109a0:	240b      	movs	r4, #11
 80109a2:	4620      	mov	r0, r4
 80109a4:	b014      	add	sp, #80	@ 0x50
 80109a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109aa:	240a      	movs	r4, #10
 80109ac:	e7ad      	b.n	801090a <rcl_init_options_copy+0x26>
 80109ae:	4620      	mov	r0, r4
 80109b0:	b014      	add	sp, #80	@ 0x50
 80109b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80109b6:	f7ff bcc9 	b.w	801034c <rcl_convert_rmw_ret_to_rcl_ret>
 80109ba:	bf00      	nop

080109bc <rcl_get_localhost_only>:
 80109bc:	b510      	push	{r4, lr}
 80109be:	b082      	sub	sp, #8
 80109c0:	2300      	movs	r3, #0
 80109c2:	9301      	str	r3, [sp, #4]
 80109c4:	b1b8      	cbz	r0, 80109f6 <rcl_get_localhost_only+0x3a>
 80109c6:	4604      	mov	r4, r0
 80109c8:	a901      	add	r1, sp, #4
 80109ca:	480c      	ldr	r0, [pc, #48]	@ (80109fc <rcl_get_localhost_only+0x40>)
 80109cc:	f7fa ffbe 	bl	800b94c <rcutils_get_env>
 80109d0:	b110      	cbz	r0, 80109d8 <rcl_get_localhost_only+0x1c>
 80109d2:	2001      	movs	r0, #1
 80109d4:	b002      	add	sp, #8
 80109d6:	bd10      	pop	{r4, pc}
 80109d8:	9b01      	ldr	r3, [sp, #4]
 80109da:	b113      	cbz	r3, 80109e2 <rcl_get_localhost_only+0x26>
 80109dc:	781a      	ldrb	r2, [r3, #0]
 80109de:	2a31      	cmp	r2, #49	@ 0x31
 80109e0:	d004      	beq.n	80109ec <rcl_get_localhost_only+0x30>
 80109e2:	2302      	movs	r3, #2
 80109e4:	2000      	movs	r0, #0
 80109e6:	7023      	strb	r3, [r4, #0]
 80109e8:	b002      	add	sp, #8
 80109ea:	bd10      	pop	{r4, pc}
 80109ec:	785b      	ldrb	r3, [r3, #1]
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d1f7      	bne.n	80109e2 <rcl_get_localhost_only+0x26>
 80109f2:	2301      	movs	r3, #1
 80109f4:	e7f6      	b.n	80109e4 <rcl_get_localhost_only+0x28>
 80109f6:	200b      	movs	r0, #11
 80109f8:	b002      	add	sp, #8
 80109fa:	bd10      	pop	{r4, pc}
 80109fc:	0801a6bc 	.word	0x0801a6bc

08010a00 <rcl_node_resolve_name>:
 8010a00:	b082      	sub	sp, #8
 8010a02:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a06:	b091      	sub	sp, #68	@ 0x44
 8010a08:	ac1a      	add	r4, sp, #104	@ 0x68
 8010a0a:	e884 000c 	stmia.w	r4, {r2, r3}
 8010a0e:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 8010a12:	2800      	cmp	r0, #0
 8010a14:	d03b      	beq.n	8010a8e <rcl_node_resolve_name+0x8e>
 8010a16:	460c      	mov	r4, r1
 8010a18:	4605      	mov	r5, r0
 8010a1a:	f7f9 fd29 	bl	800a470 <rcl_node_get_options>
 8010a1e:	2800      	cmp	r0, #0
 8010a20:	d037      	beq.n	8010a92 <rcl_node_resolve_name+0x92>
 8010a22:	4628      	mov	r0, r5
 8010a24:	f7f9 fd14 	bl	800a450 <rcl_node_get_name>
 8010a28:	4606      	mov	r6, r0
 8010a2a:	4628      	mov	r0, r5
 8010a2c:	f7f9 fd18 	bl	800a460 <rcl_node_get_namespace>
 8010a30:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8010a34:	4681      	mov	r9, r0
 8010a36:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010a3a:	ad0b      	add	r5, sp, #44	@ 0x2c
 8010a3c:	46ac      	mov	ip, r5
 8010a3e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010a42:	f8de 3000 	ldr.w	r3, [lr]
 8010a46:	f8cc 3000 	str.w	r3, [ip]
 8010a4a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010a4c:	b1fb      	cbz	r3, 8010a8e <rcl_node_resolve_name+0x8e>
 8010a4e:	468a      	mov	sl, r1
 8010a50:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 8010a54:	f002 f81c 	bl	8012a90 <rcutils_get_zero_initialized_string_map>
 8010a58:	ab10      	add	r3, sp, #64	@ 0x40
 8010a5a:	9008      	str	r0, [sp, #32]
 8010a5c:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8010a60:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8010a64:	2100      	movs	r1, #0
 8010a66:	e895 000c 	ldmia.w	r5, {r2, r3}
 8010a6a:	a808      	add	r0, sp, #32
 8010a6c:	f002 f888 	bl	8012b80 <rcutils_string_map_init>
 8010a70:	4607      	mov	r7, r0
 8010a72:	b180      	cbz	r0, 8010a96 <rcl_node_resolve_name+0x96>
 8010a74:	f7fa ff82 	bl	800b97c <rcutils_get_error_string>
 8010a78:	f7fa ff96 	bl	800b9a8 <rcutils_reset_error>
 8010a7c:	2f0a      	cmp	r7, #10
 8010a7e:	bf18      	it	ne
 8010a80:	2701      	movne	r7, #1
 8010a82:	4638      	mov	r0, r7
 8010a84:	b011      	add	sp, #68	@ 0x44
 8010a86:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a8a:	b002      	add	sp, #8
 8010a8c:	4770      	bx	lr
 8010a8e:	270b      	movs	r7, #11
 8010a90:	e7f7      	b.n	8010a82 <rcl_node_resolve_name+0x82>
 8010a92:	2701      	movs	r7, #1
 8010a94:	e7f5      	b.n	8010a82 <rcl_node_resolve_name+0x82>
 8010a96:	9009      	str	r0, [sp, #36]	@ 0x24
 8010a98:	9007      	str	r0, [sp, #28]
 8010a9a:	a808      	add	r0, sp, #32
 8010a9c:	f005 fe14 	bl	80166c8 <rcl_get_default_topic_name_substitutions>
 8010aa0:	4607      	mov	r7, r0
 8010aa2:	b1a8      	cbz	r0, 8010ad0 <rcl_node_resolve_name+0xd0>
 8010aa4:	280a      	cmp	r0, #10
 8010aa6:	9c07      	ldr	r4, [sp, #28]
 8010aa8:	d000      	beq.n	8010aac <rcl_node_resolve_name+0xac>
 8010aaa:	2701      	movs	r7, #1
 8010aac:	a808      	add	r0, sp, #32
 8010aae:	f002 f8a7 	bl	8012c00 <rcutils_string_map_fini>
 8010ab2:	2800      	cmp	r0, #0
 8010ab4:	d13d      	bne.n	8010b32 <rcl_node_resolve_name+0x132>
 8010ab6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010ab8:	4659      	mov	r1, fp
 8010aba:	47d0      	blx	sl
 8010abc:	4659      	mov	r1, fp
 8010abe:	4620      	mov	r0, r4
 8010ac0:	47d0      	blx	sl
 8010ac2:	f1b8 0f00 	cmp.w	r8, #0
 8010ac6:	d0dc      	beq.n	8010a82 <rcl_node_resolve_name+0x82>
 8010ac8:	2f67      	cmp	r7, #103	@ 0x67
 8010aca:	bf08      	it	eq
 8010acc:	2768      	moveq	r7, #104	@ 0x68
 8010ace:	e7d8      	b.n	8010a82 <rcl_node_resolve_name+0x82>
 8010ad0:	ab09      	add	r3, sp, #36	@ 0x24
 8010ad2:	9305      	str	r3, [sp, #20]
 8010ad4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010ad6:	46ec      	mov	ip, sp
 8010ad8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010adc:	682b      	ldr	r3, [r5, #0]
 8010ade:	f8cc 3000 	str.w	r3, [ip]
 8010ae2:	464a      	mov	r2, r9
 8010ae4:	4631      	mov	r1, r6
 8010ae6:	4620      	mov	r0, r4
 8010ae8:	ab08      	add	r3, sp, #32
 8010aea:	f005 fc8f 	bl	801640c <rcl_expand_topic_name>
 8010aee:	4607      	mov	r7, r0
 8010af0:	b9b8      	cbnz	r0, 8010b22 <rcl_node_resolve_name+0x122>
 8010af2:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8010af4:	9009      	str	r0, [sp, #36]	@ 0x24
 8010af6:	4602      	mov	r2, r0
 8010af8:	a90a      	add	r1, sp, #40	@ 0x28
 8010afa:	4620      	mov	r0, r4
 8010afc:	f002 f99c 	bl	8012e38 <rmw_validate_full_topic_name>
 8010b00:	b988      	cbnz	r0, 8010b26 <rcl_node_resolve_name+0x126>
 8010b02:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8010b04:	b9d5      	cbnz	r5, 8010b3c <rcl_node_resolve_name+0x13c>
 8010b06:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010b08:	a808      	add	r0, sp, #32
 8010b0a:	601c      	str	r4, [r3, #0]
 8010b0c:	f002 f878 	bl	8012c00 <rcutils_string_map_fini>
 8010b10:	4607      	mov	r7, r0
 8010b12:	b1a8      	cbz	r0, 8010b40 <rcl_node_resolve_name+0x140>
 8010b14:	f7fa ff32 	bl	800b97c <rcutils_get_error_string>
 8010b18:	462c      	mov	r4, r5
 8010b1a:	f7fa ff45 	bl	800b9a8 <rcutils_reset_error>
 8010b1e:	2701      	movs	r7, #1
 8010b20:	e7c9      	b.n	8010ab6 <rcl_node_resolve_name+0xb6>
 8010b22:	9c07      	ldr	r4, [sp, #28]
 8010b24:	e7c2      	b.n	8010aac <rcl_node_resolve_name+0xac>
 8010b26:	f7fa ff29 	bl	800b97c <rcutils_get_error_string>
 8010b2a:	2701      	movs	r7, #1
 8010b2c:	f7fa ff3c 	bl	800b9a8 <rcutils_reset_error>
 8010b30:	e7bc      	b.n	8010aac <rcl_node_resolve_name+0xac>
 8010b32:	f7fa ff23 	bl	800b97c <rcutils_get_error_string>
 8010b36:	f7fa ff37 	bl	800b9a8 <rcutils_reset_error>
 8010b3a:	e7bc      	b.n	8010ab6 <rcl_node_resolve_name+0xb6>
 8010b3c:	2767      	movs	r7, #103	@ 0x67
 8010b3e:	e7b5      	b.n	8010aac <rcl_node_resolve_name+0xac>
 8010b40:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010b42:	4659      	mov	r1, fp
 8010b44:	47d0      	blx	sl
 8010b46:	4659      	mov	r1, fp
 8010b48:	4638      	mov	r0, r7
 8010b4a:	47d0      	blx	sl
 8010b4c:	e799      	b.n	8010a82 <rcl_node_resolve_name+0x82>
 8010b4e:	bf00      	nop

08010b50 <exact_match_lookup>:
 8010b50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010b52:	f102 0708 	add.w	r7, r2, #8
 8010b56:	460b      	mov	r3, r1
 8010b58:	4614      	mov	r4, r2
 8010b5a:	4606      	mov	r6, r0
 8010b5c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8010b60:	b085      	sub	sp, #20
 8010b62:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8010b66:	4618      	mov	r0, r3
 8010b68:	4919      	ldr	r1, [pc, #100]	@ (8010bd0 <exact_match_lookup+0x80>)
 8010b6a:	e894 000c 	ldmia.w	r4, {r2, r3}
 8010b6e:	f001 ff59 	bl	8012a24 <rcutils_join_path>
 8010b72:	7833      	ldrb	r3, [r6, #0]
 8010b74:	2b2f      	cmp	r3, #47	@ 0x2f
 8010b76:	4605      	mov	r5, r0
 8010b78:	d023      	beq.n	8010bc2 <exact_match_lookup+0x72>
 8010b7a:	f104 030c 	add.w	r3, r4, #12
 8010b7e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010b82:	e88d 0003 	stmia.w	sp, {r0, r1}
 8010b86:	1c70      	adds	r0, r6, #1
 8010b88:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8010b8c:	f001 ff50 	bl	8012a30 <rcutils_to_native_path>
 8010b90:	4606      	mov	r6, r0
 8010b92:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8010b96:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8010b9a:	4631      	mov	r1, r6
 8010b9c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8010ba0:	4628      	mov	r0, r5
 8010ba2:	f001 ff3f 	bl	8012a24 <rcutils_join_path>
 8010ba6:	6862      	ldr	r2, [r4, #4]
 8010ba8:	6921      	ldr	r1, [r4, #16]
 8010baa:	4603      	mov	r3, r0
 8010bac:	4630      	mov	r0, r6
 8010bae:	461e      	mov	r6, r3
 8010bb0:	4790      	blx	r2
 8010bb2:	4628      	mov	r0, r5
 8010bb4:	6863      	ldr	r3, [r4, #4]
 8010bb6:	6921      	ldr	r1, [r4, #16]
 8010bb8:	4798      	blx	r3
 8010bba:	4635      	mov	r5, r6
 8010bbc:	4628      	mov	r0, r5
 8010bbe:	b005      	add	sp, #20
 8010bc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010bc2:	7873      	ldrb	r3, [r6, #1]
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d1d8      	bne.n	8010b7a <exact_match_lookup+0x2a>
 8010bc8:	4628      	mov	r0, r5
 8010bca:	b005      	add	sp, #20
 8010bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010bce:	bf00      	nop
 8010bd0:	0801a70c 	.word	0x0801a70c

08010bd4 <rcl_get_secure_root>:
 8010bd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010bd8:	b085      	sub	sp, #20
 8010bda:	b168      	cbz	r0, 8010bf8 <rcl_get_secure_root+0x24>
 8010bdc:	4607      	mov	r7, r0
 8010bde:	4608      	mov	r0, r1
 8010be0:	460c      	mov	r4, r1
 8010be2:	f7fa fea5 	bl	800b930 <rcutils_allocator_is_valid>
 8010be6:	b138      	cbz	r0, 8010bf8 <rcl_get_secure_root+0x24>
 8010be8:	2300      	movs	r3, #0
 8010bea:	482d      	ldr	r0, [pc, #180]	@ (8010ca0 <rcl_get_secure_root+0xcc>)
 8010bec:	9303      	str	r3, [sp, #12]
 8010bee:	a903      	add	r1, sp, #12
 8010bf0:	f7fa feac 	bl	800b94c <rcutils_get_env>
 8010bf4:	4605      	mov	r5, r0
 8010bf6:	b120      	cbz	r0, 8010c02 <rcl_get_secure_root+0x2e>
 8010bf8:	2500      	movs	r5, #0
 8010bfa:	4628      	mov	r0, r5
 8010bfc:	b005      	add	sp, #20
 8010bfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010c02:	9b03      	ldr	r3, [sp, #12]
 8010c04:	781a      	ldrb	r2, [r3, #0]
 8010c06:	2a00      	cmp	r2, #0
 8010c08:	d0f6      	beq.n	8010bf8 <rcl_get_secure_root+0x24>
 8010c0a:	f104 090c 	add.w	r9, r4, #12
 8010c0e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8010c12:	e88d 0003 	stmia.w	sp, {r0, r1}
 8010c16:	4618      	mov	r0, r3
 8010c18:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8010c1c:	f7fa fffa 	bl	800bc14 <rcutils_strdup>
 8010c20:	4680      	mov	r8, r0
 8010c22:	2800      	cmp	r0, #0
 8010c24:	d0e8      	beq.n	8010bf8 <rcl_get_secure_root+0x24>
 8010c26:	481f      	ldr	r0, [pc, #124]	@ (8010ca4 <rcl_get_secure_root+0xd0>)
 8010c28:	9503      	str	r5, [sp, #12]
 8010c2a:	a903      	add	r1, sp, #12
 8010c2c:	f7fa fe8e 	bl	800b94c <rcutils_get_env>
 8010c30:	b160      	cbz	r0, 8010c4c <rcl_get_secure_root+0x78>
 8010c32:	2600      	movs	r6, #0
 8010c34:	6863      	ldr	r3, [r4, #4]
 8010c36:	6921      	ldr	r1, [r4, #16]
 8010c38:	4630      	mov	r0, r6
 8010c3a:	4798      	blx	r3
 8010c3c:	4640      	mov	r0, r8
 8010c3e:	6863      	ldr	r3, [r4, #4]
 8010c40:	6921      	ldr	r1, [r4, #16]
 8010c42:	4798      	blx	r3
 8010c44:	4628      	mov	r0, r5
 8010c46:	b005      	add	sp, #20
 8010c48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010c4c:	9b03      	ldr	r3, [sp, #12]
 8010c4e:	781e      	ldrb	r6, [r3, #0]
 8010c50:	b1f6      	cbz	r6, 8010c90 <rcl_get_secure_root+0xbc>
 8010c52:	e899 0003 	ldmia.w	r9, {r0, r1}
 8010c56:	e88d 0003 	stmia.w	sp, {r0, r1}
 8010c5a:	4618      	mov	r0, r3
 8010c5c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8010c60:	f7fa ffd8 	bl	800bc14 <rcutils_strdup>
 8010c64:	4606      	mov	r6, r0
 8010c66:	2800      	cmp	r0, #0
 8010c68:	d0e3      	beq.n	8010c32 <rcl_get_secure_root+0x5e>
 8010c6a:	4622      	mov	r2, r4
 8010c6c:	4641      	mov	r1, r8
 8010c6e:	f7ff ff6f 	bl	8010b50 <exact_match_lookup>
 8010c72:	4605      	mov	r5, r0
 8010c74:	2d00      	cmp	r5, #0
 8010c76:	d0dd      	beq.n	8010c34 <rcl_get_secure_root+0x60>
 8010c78:	4628      	mov	r0, r5
 8010c7a:	f001 fed1 	bl	8012a20 <rcutils_is_directory>
 8010c7e:	4603      	mov	r3, r0
 8010c80:	2800      	cmp	r0, #0
 8010c82:	d1d7      	bne.n	8010c34 <rcl_get_secure_root+0x60>
 8010c84:	4628      	mov	r0, r5
 8010c86:	6921      	ldr	r1, [r4, #16]
 8010c88:	461d      	mov	r5, r3
 8010c8a:	6863      	ldr	r3, [r4, #4]
 8010c8c:	4798      	blx	r3
 8010c8e:	e7d1      	b.n	8010c34 <rcl_get_secure_root+0x60>
 8010c90:	4622      	mov	r2, r4
 8010c92:	4638      	mov	r0, r7
 8010c94:	4641      	mov	r1, r8
 8010c96:	f7ff ff5b 	bl	8010b50 <exact_match_lookup>
 8010c9a:	4605      	mov	r5, r0
 8010c9c:	e7ea      	b.n	8010c74 <rcl_get_secure_root+0xa0>
 8010c9e:	bf00      	nop
 8010ca0:	0801a718 	.word	0x0801a718
 8010ca4:	0801a730 	.word	0x0801a730

08010ca8 <rcl_get_security_options_from_environment>:
 8010ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010cac:	b082      	sub	sp, #8
 8010cae:	2300      	movs	r3, #0
 8010cb0:	4606      	mov	r6, r0
 8010cb2:	460f      	mov	r7, r1
 8010cb4:	4820      	ldr	r0, [pc, #128]	@ (8010d38 <rcl_get_security_options_from_environment+0x90>)
 8010cb6:	9301      	str	r3, [sp, #4]
 8010cb8:	a901      	add	r1, sp, #4
 8010cba:	4690      	mov	r8, r2
 8010cbc:	f7fa fe46 	bl	800b94c <rcutils_get_env>
 8010cc0:	b120      	cbz	r0, 8010ccc <rcl_get_security_options_from_environment+0x24>
 8010cc2:	2501      	movs	r5, #1
 8010cc4:	4628      	mov	r0, r5
 8010cc6:	b002      	add	sp, #8
 8010cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ccc:	491b      	ldr	r1, [pc, #108]	@ (8010d3c <rcl_get_security_options_from_environment+0x94>)
 8010cce:	4604      	mov	r4, r0
 8010cd0:	9801      	ldr	r0, [sp, #4]
 8010cd2:	f7ef fa9d 	bl	8000210 <strcmp>
 8010cd6:	4605      	mov	r5, r0
 8010cd8:	b9e8      	cbnz	r0, 8010d16 <rcl_get_security_options_from_environment+0x6e>
 8010cda:	9001      	str	r0, [sp, #4]
 8010cdc:	f1b8 0f00 	cmp.w	r8, #0
 8010ce0:	d020      	beq.n	8010d24 <rcl_get_security_options_from_environment+0x7c>
 8010ce2:	4817      	ldr	r0, [pc, #92]	@ (8010d40 <rcl_get_security_options_from_environment+0x98>)
 8010ce4:	a901      	add	r1, sp, #4
 8010ce6:	f7fa fe31 	bl	800b94c <rcutils_get_env>
 8010cea:	2800      	cmp	r0, #0
 8010cec:	d1e9      	bne.n	8010cc2 <rcl_get_security_options_from_environment+0x1a>
 8010cee:	4915      	ldr	r1, [pc, #84]	@ (8010d44 <rcl_get_security_options_from_environment+0x9c>)
 8010cf0:	9801      	ldr	r0, [sp, #4]
 8010cf2:	f7ef fa8d 	bl	8000210 <strcmp>
 8010cf6:	fab0 f080 	clz	r0, r0
 8010cfa:	0940      	lsrs	r0, r0, #5
 8010cfc:	f888 0000 	strb.w	r0, [r8]
 8010d00:	4639      	mov	r1, r7
 8010d02:	4630      	mov	r0, r6
 8010d04:	f7ff ff66 	bl	8010bd4 <rcl_get_secure_root>
 8010d08:	b170      	cbz	r0, 8010d28 <rcl_get_security_options_from_environment+0x80>
 8010d0a:	f8c8 0004 	str.w	r0, [r8, #4]
 8010d0e:	4628      	mov	r0, r5
 8010d10:	b002      	add	sp, #8
 8010d12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d16:	4625      	mov	r5, r4
 8010d18:	4628      	mov	r0, r5
 8010d1a:	f888 4000 	strb.w	r4, [r8]
 8010d1e:	b002      	add	sp, #8
 8010d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d24:	250b      	movs	r5, #11
 8010d26:	e7cd      	b.n	8010cc4 <rcl_get_security_options_from_environment+0x1c>
 8010d28:	f898 5000 	ldrb.w	r5, [r8]
 8010d2c:	f1a5 0501 	sub.w	r5, r5, #1
 8010d30:	fab5 f585 	clz	r5, r5
 8010d34:	096d      	lsrs	r5, r5, #5
 8010d36:	e7c5      	b.n	8010cc4 <rcl_get_security_options_from_environment+0x1c>
 8010d38:	0801a6d0 	.word	0x0801a6d0
 8010d3c:	0801a6e4 	.word	0x0801a6e4
 8010d40:	0801a6ec 	.word	0x0801a6ec
 8010d44:	0801a704 	.word	0x0801a704

08010d48 <rcl_service_get_rmw_handle>:
 8010d48:	b118      	cbz	r0, 8010d52 <rcl_service_get_rmw_handle+0xa>
 8010d4a:	6800      	ldr	r0, [r0, #0]
 8010d4c:	b108      	cbz	r0, 8010d52 <rcl_service_get_rmw_handle+0xa>
 8010d4e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8010d52:	4770      	bx	lr

08010d54 <rcl_take_request>:
 8010d54:	b570      	push	{r4, r5, r6, lr}
 8010d56:	468e      	mov	lr, r1
 8010d58:	460c      	mov	r4, r1
 8010d5a:	4616      	mov	r6, r2
 8010d5c:	4605      	mov	r5, r0
 8010d5e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010d62:	b08c      	sub	sp, #48	@ 0x30
 8010d64:	f10d 0c18 	add.w	ip, sp, #24
 8010d68:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010d6c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8010d70:	e88c 0003 	stmia.w	ip, {r0, r1}
 8010d74:	b30d      	cbz	r5, 8010dba <rcl_take_request+0x66>
 8010d76:	682b      	ldr	r3, [r5, #0]
 8010d78:	b1fb      	cbz	r3, 8010dba <rcl_take_request+0x66>
 8010d7a:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8010d7e:	b1e0      	cbz	r0, 8010dba <rcl_take_request+0x66>
 8010d80:	b336      	cbz	r6, 8010dd0 <rcl_take_request+0x7c>
 8010d82:	2300      	movs	r3, #0
 8010d84:	f88d 3007 	strb.w	r3, [sp, #7]
 8010d88:	4632      	mov	r2, r6
 8010d8a:	f10d 0307 	add.w	r3, sp, #7
 8010d8e:	a902      	add	r1, sp, #8
 8010d90:	f002 fc7e 	bl	8013690 <rmw_take_request>
 8010d94:	4605      	mov	r5, r0
 8010d96:	b198      	cbz	r0, 8010dc0 <rcl_take_request+0x6c>
 8010d98:	280a      	cmp	r0, #10
 8010d9a:	bf18      	it	ne
 8010d9c:	2501      	movne	r5, #1
 8010d9e:	f10d 0e18 	add.w	lr, sp, #24
 8010da2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010da6:	46a4      	mov	ip, r4
 8010da8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010dac:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8010db0:	e88c 0003 	stmia.w	ip, {r0, r1}
 8010db4:	4628      	mov	r0, r5
 8010db6:	b00c      	add	sp, #48	@ 0x30
 8010db8:	bd70      	pop	{r4, r5, r6, pc}
 8010dba:	f44f 7516 	mov.w	r5, #600	@ 0x258
 8010dbe:	e7ee      	b.n	8010d9e <rcl_take_request+0x4a>
 8010dc0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8010dc4:	f240 2359 	movw	r3, #601	@ 0x259
 8010dc8:	2a00      	cmp	r2, #0
 8010dca:	bf08      	it	eq
 8010dcc:	461d      	moveq	r5, r3
 8010dce:	e7e6      	b.n	8010d9e <rcl_take_request+0x4a>
 8010dd0:	250b      	movs	r5, #11
 8010dd2:	e7e4      	b.n	8010d9e <rcl_take_request+0x4a>

08010dd4 <rcl_send_response>:
 8010dd4:	b170      	cbz	r0, 8010df4 <rcl_send_response+0x20>
 8010dd6:	6800      	ldr	r0, [r0, #0]
 8010dd8:	b160      	cbz	r0, 8010df4 <rcl_send_response+0x20>
 8010dda:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8010dde:	b148      	cbz	r0, 8010df4 <rcl_send_response+0x20>
 8010de0:	b159      	cbz	r1, 8010dfa <rcl_send_response+0x26>
 8010de2:	b510      	push	{r4, lr}
 8010de4:	b15a      	cbz	r2, 8010dfe <rcl_send_response+0x2a>
 8010de6:	f002 fcb1 	bl	801374c <rmw_send_response>
 8010dea:	b110      	cbz	r0, 8010df2 <rcl_send_response+0x1e>
 8010dec:	2802      	cmp	r0, #2
 8010dee:	bf18      	it	ne
 8010df0:	2001      	movne	r0, #1
 8010df2:	bd10      	pop	{r4, pc}
 8010df4:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8010df8:	4770      	bx	lr
 8010dfa:	200b      	movs	r0, #11
 8010dfc:	4770      	bx	lr
 8010dfe:	200b      	movs	r0, #11
 8010e00:	bd10      	pop	{r4, pc}
 8010e02:	bf00      	nop

08010e04 <rcl_service_is_valid>:
 8010e04:	b130      	cbz	r0, 8010e14 <rcl_service_is_valid+0x10>
 8010e06:	6800      	ldr	r0, [r0, #0]
 8010e08:	b120      	cbz	r0, 8010e14 <rcl_service_is_valid+0x10>
 8010e0a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8010e0e:	3800      	subs	r0, #0
 8010e10:	bf18      	it	ne
 8010e12:	2001      	movne	r0, #1
 8010e14:	4770      	bx	lr
 8010e16:	bf00      	nop

08010e18 <rcl_get_system_time>:
 8010e18:	4608      	mov	r0, r1
 8010e1a:	f7fa bf39 	b.w	800bc90 <rcutils_system_time_now>
 8010e1e:	bf00      	nop

08010e20 <rcl_get_steady_time>:
 8010e20:	4608      	mov	r0, r1
 8010e22:	f7fa bf5d 	b.w	800bce0 <rcutils_steady_time_now>
 8010e26:	bf00      	nop

08010e28 <rcl_get_ros_time>:
 8010e28:	7a03      	ldrb	r3, [r0, #8]
 8010e2a:	b510      	push	{r4, lr}
 8010e2c:	460c      	mov	r4, r1
 8010e2e:	b133      	cbz	r3, 8010e3e <rcl_get_ros_time+0x16>
 8010e30:	2105      	movs	r1, #5
 8010e32:	f001 fd51 	bl	80128d8 <__atomic_load_8>
 8010e36:	e9c4 0100 	strd	r0, r1, [r4]
 8010e3a:	2000      	movs	r0, #0
 8010e3c:	bd10      	pop	{r4, pc}
 8010e3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010e42:	4608      	mov	r0, r1
 8010e44:	f7fa bf24 	b.w	800bc90 <rcutils_system_time_now>

08010e48 <rcl_clock_init>:
 8010e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e4a:	4605      	mov	r5, r0
 8010e4c:	4610      	mov	r0, r2
 8010e4e:	4614      	mov	r4, r2
 8010e50:	460e      	mov	r6, r1
 8010e52:	f7fa fd6d 	bl	800b930 <rcutils_allocator_is_valid>
 8010e56:	b128      	cbz	r0, 8010e64 <rcl_clock_init+0x1c>
 8010e58:	2d03      	cmp	r5, #3
 8010e5a:	d803      	bhi.n	8010e64 <rcl_clock_init+0x1c>
 8010e5c:	e8df f005 	tbb	[pc, r5]
 8010e60:	06532e1d 	.word	0x06532e1d
 8010e64:	f04f 0c0b 	mov.w	ip, #11
 8010e68:	4660      	mov	r0, ip
 8010e6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010e6c:	2e00      	cmp	r6, #0
 8010e6e:	d0f9      	beq.n	8010e64 <rcl_clock_init+0x1c>
 8010e70:	2c00      	cmp	r4, #0
 8010e72:	d0f7      	beq.n	8010e64 <rcl_clock_init+0x1c>
 8010e74:	2300      	movs	r3, #0
 8010e76:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8010e7a:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 8010f30 <rcl_clock_init+0xe8>
 8010e7e:	6133      	str	r3, [r6, #16]
 8010e80:	f106 0514 	add.w	r5, r6, #20
 8010e84:	469c      	mov	ip, r3
 8010e86:	2703      	movs	r7, #3
 8010e88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010e8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010e8c:	6823      	ldr	r3, [r4, #0]
 8010e8e:	602b      	str	r3, [r5, #0]
 8010e90:	7037      	strb	r7, [r6, #0]
 8010e92:	f8c6 e00c 	str.w	lr, [r6, #12]
 8010e96:	4660      	mov	r0, ip
 8010e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010e9a:	2e00      	cmp	r6, #0
 8010e9c:	d0e2      	beq.n	8010e64 <rcl_clock_init+0x1c>
 8010e9e:	2300      	movs	r3, #0
 8010ea0:	7033      	strb	r3, [r6, #0]
 8010ea2:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8010ea6:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8010eaa:	469c      	mov	ip, r3
 8010eac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010eae:	f106 0514 	add.w	r5, r6, #20
 8010eb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010eb4:	6823      	ldr	r3, [r4, #0]
 8010eb6:	602b      	str	r3, [r5, #0]
 8010eb8:	4660      	mov	r0, ip
 8010eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ebc:	2e00      	cmp	r6, #0
 8010ebe:	d0d1      	beq.n	8010e64 <rcl_clock_init+0x1c>
 8010ec0:	2c00      	cmp	r4, #0
 8010ec2:	d0cf      	beq.n	8010e64 <rcl_clock_init+0x1c>
 8010ec4:	2700      	movs	r7, #0
 8010ec6:	7037      	strb	r7, [r6, #0]
 8010ec8:	46a4      	mov	ip, r4
 8010eca:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010ece:	f106 0514 	add.w	r5, r6, #20
 8010ed2:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8010ed6:	e9c6 7703 	strd	r7, r7, [r6, #12]
 8010eda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010edc:	f8dc 3000 	ldr.w	r3, [ip]
 8010ee0:	602b      	str	r3, [r5, #0]
 8010ee2:	6921      	ldr	r1, [r4, #16]
 8010ee4:	6823      	ldr	r3, [r4, #0]
 8010ee6:	2010      	movs	r0, #16
 8010ee8:	4798      	blx	r3
 8010eea:	6130      	str	r0, [r6, #16]
 8010eec:	b1d0      	cbz	r0, 8010f24 <rcl_clock_init+0xdc>
 8010eee:	2200      	movs	r2, #0
 8010ef0:	2300      	movs	r3, #0
 8010ef2:	e9c0 2300 	strd	r2, r3, [r0]
 8010ef6:	2301      	movs	r3, #1
 8010ef8:	7207      	strb	r7, [r0, #8]
 8010efa:	4a0c      	ldr	r2, [pc, #48]	@ (8010f2c <rcl_clock_init+0xe4>)
 8010efc:	7033      	strb	r3, [r6, #0]
 8010efe:	46bc      	mov	ip, r7
 8010f00:	60f2      	str	r2, [r6, #12]
 8010f02:	4660      	mov	r0, ip
 8010f04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010f06:	2e00      	cmp	r6, #0
 8010f08:	d0ac      	beq.n	8010e64 <rcl_clock_init+0x1c>
 8010f0a:	2c00      	cmp	r4, #0
 8010f0c:	d0aa      	beq.n	8010e64 <rcl_clock_init+0x1c>
 8010f0e:	2300      	movs	r3, #0
 8010f10:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8010f14:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 8010f34 <rcl_clock_init+0xec>
 8010f18:	6133      	str	r3, [r6, #16]
 8010f1a:	f106 0514 	add.w	r5, r6, #20
 8010f1e:	469c      	mov	ip, r3
 8010f20:	2702      	movs	r7, #2
 8010f22:	e7b1      	b.n	8010e88 <rcl_clock_init+0x40>
 8010f24:	f04f 0c0a 	mov.w	ip, #10
 8010f28:	e79e      	b.n	8010e68 <rcl_clock_init+0x20>
 8010f2a:	bf00      	nop
 8010f2c:	08010e29 	.word	0x08010e29
 8010f30:	08010e21 	.word	0x08010e21
 8010f34:	08010e19 	.word	0x08010e19

08010f38 <rcl_clock_get_now>:
 8010f38:	b140      	cbz	r0, 8010f4c <rcl_clock_get_now+0x14>
 8010f3a:	b139      	cbz	r1, 8010f4c <rcl_clock_get_now+0x14>
 8010f3c:	7803      	ldrb	r3, [r0, #0]
 8010f3e:	b11b      	cbz	r3, 8010f48 <rcl_clock_get_now+0x10>
 8010f40:	68c3      	ldr	r3, [r0, #12]
 8010f42:	b10b      	cbz	r3, 8010f48 <rcl_clock_get_now+0x10>
 8010f44:	6900      	ldr	r0, [r0, #16]
 8010f46:	4718      	bx	r3
 8010f48:	2001      	movs	r0, #1
 8010f4a:	4770      	bx	lr
 8010f4c:	200b      	movs	r0, #11
 8010f4e:	4770      	bx	lr

08010f50 <rcl_timer_call>:
 8010f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f54:	b087      	sub	sp, #28
 8010f56:	2800      	cmp	r0, #0
 8010f58:	d06d      	beq.n	8011036 <rcl_timer_call+0xe6>
 8010f5a:	6803      	ldr	r3, [r0, #0]
 8010f5c:	4604      	mov	r4, r0
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	d063      	beq.n	801102a <rcl_timer_call+0xda>
 8010f62:	f3bf 8f5b 	dmb	ish
 8010f66:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8010f6a:	f3bf 8f5b 	dmb	ish
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	d150      	bne.n	8011014 <rcl_timer_call+0xc4>
 8010f72:	6803      	ldr	r3, [r0, #0]
 8010f74:	a904      	add	r1, sp, #16
 8010f76:	6818      	ldr	r0, [r3, #0]
 8010f78:	f7ff ffde 	bl	8010f38 <rcl_clock_get_now>
 8010f7c:	4605      	mov	r5, r0
 8010f7e:	2800      	cmp	r0, #0
 8010f80:	d14a      	bne.n	8011018 <rcl_timer_call+0xc8>
 8010f82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	db4a      	blt.n	8011020 <rcl_timer_call+0xd0>
 8010f8a:	6820      	ldr	r0, [r4, #0]
 8010f8c:	f04f 0a05 	mov.w	sl, #5
 8010f90:	f8cd a000 	str.w	sl, [sp]
 8010f94:	3020      	adds	r0, #32
 8010f96:	f001 fd0b 	bl	80129b0 <__atomic_exchange_8>
 8010f9a:	6823      	ldr	r3, [r4, #0]
 8010f9c:	f3bf 8f5b 	dmb	ish
 8010fa0:	4680      	mov	r8, r0
 8010fa2:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8010fa6:	f3bf 8f5b 	dmb	ish
 8010faa:	6820      	ldr	r0, [r4, #0]
 8010fac:	4689      	mov	r9, r1
 8010fae:	3028      	adds	r0, #40	@ 0x28
 8010fb0:	4651      	mov	r1, sl
 8010fb2:	f001 fc91 	bl	80128d8 <__atomic_load_8>
 8010fb6:	4606      	mov	r6, r0
 8010fb8:	6820      	ldr	r0, [r4, #0]
 8010fba:	460f      	mov	r7, r1
 8010fbc:	3018      	adds	r0, #24
 8010fbe:	4651      	mov	r1, sl
 8010fc0:	f001 fc8a 	bl	80128d8 <__atomic_load_8>
 8010fc4:	1836      	adds	r6, r6, r0
 8010fc6:	4602      	mov	r2, r0
 8010fc8:	4682      	mov	sl, r0
 8010fca:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 8010fce:	eb47 0701 	adc.w	r7, r7, r1
 8010fd2:	4286      	cmp	r6, r0
 8010fd4:	460b      	mov	r3, r1
 8010fd6:	eb77 010c 	sbcs.w	r1, r7, ip
 8010fda:	da04      	bge.n	8010fe6 <rcl_timer_call+0x96>
 8010fdc:	ea53 0102 	orrs.w	r1, r3, r2
 8010fe0:	d12e      	bne.n	8011040 <rcl_timer_call+0xf0>
 8010fe2:	4606      	mov	r6, r0
 8010fe4:	4667      	mov	r7, ip
 8010fe6:	6820      	ldr	r0, [r4, #0]
 8010fe8:	2105      	movs	r1, #5
 8010fea:	4632      	mov	r2, r6
 8010fec:	463b      	mov	r3, r7
 8010fee:	3028      	adds	r0, #40	@ 0x28
 8010ff0:	9100      	str	r1, [sp, #0]
 8010ff2:	f001 fca7 	bl	8012944 <__atomic_store_8>
 8010ff6:	f1bb 0f00 	cmp.w	fp, #0
 8010ffa:	d00d      	beq.n	8011018 <rcl_timer_call+0xc8>
 8010ffc:	9a04      	ldr	r2, [sp, #16]
 8010ffe:	9b05      	ldr	r3, [sp, #20]
 8011000:	ebb2 0208 	subs.w	r2, r2, r8
 8011004:	4620      	mov	r0, r4
 8011006:	eb63 0309 	sbc.w	r3, r3, r9
 801100a:	47d8      	blx	fp
 801100c:	4628      	mov	r0, r5
 801100e:	b007      	add	sp, #28
 8011010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011014:	f240 3521 	movw	r5, #801	@ 0x321
 8011018:	4628      	mov	r0, r5
 801101a:	b007      	add	sp, #28
 801101c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011020:	2501      	movs	r5, #1
 8011022:	4628      	mov	r0, r5
 8011024:	b007      	add	sp, #28
 8011026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801102a:	f44f 7548 	mov.w	r5, #800	@ 0x320
 801102e:	4628      	mov	r0, r5
 8011030:	b007      	add	sp, #28
 8011032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011036:	250b      	movs	r5, #11
 8011038:	4628      	mov	r0, r5
 801103a:	b007      	add	sp, #28
 801103c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011040:	1b80      	subs	r0, r0, r6
 8011042:	eb6c 0107 	sbc.w	r1, ip, r7
 8011046:	3801      	subs	r0, #1
 8011048:	f161 0100 	sbc.w	r1, r1, #0
 801104c:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8011050:	f7ef fdda 	bl	8000c08 <__aeabi_ldivmod>
 8011054:	9b02      	ldr	r3, [sp, #8]
 8011056:	3001      	adds	r0, #1
 8011058:	f141 0100 	adc.w	r1, r1, #0
 801105c:	fb00 f303 	mul.w	r3, r0, r3
 8011060:	fb01 330a 	mla	r3, r1, sl, r3
 8011064:	fba0 0a0a 	umull	r0, sl, r0, sl
 8011068:	1986      	adds	r6, r0, r6
 801106a:	4453      	add	r3, sl
 801106c:	eb43 0707 	adc.w	r7, r3, r7
 8011070:	e7b9      	b.n	8010fe6 <rcl_timer_call+0x96>
 8011072:	bf00      	nop

08011074 <rcl_timer_is_ready>:
 8011074:	b570      	push	{r4, r5, r6, lr}
 8011076:	b082      	sub	sp, #8
 8011078:	b378      	cbz	r0, 80110da <rcl_timer_is_ready+0x66>
 801107a:	6803      	ldr	r3, [r0, #0]
 801107c:	4604      	mov	r4, r0
 801107e:	b383      	cbz	r3, 80110e2 <rcl_timer_is_ready+0x6e>
 8011080:	460d      	mov	r5, r1
 8011082:	b351      	cbz	r1, 80110da <rcl_timer_is_ready+0x66>
 8011084:	f3bf 8f5b 	dmb	ish
 8011088:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801108c:	f3bf 8f5b 	dmb	ish
 8011090:	b953      	cbnz	r3, 80110a8 <rcl_timer_is_ready+0x34>
 8011092:	6803      	ldr	r3, [r0, #0]
 8011094:	4669      	mov	r1, sp
 8011096:	6818      	ldr	r0, [r3, #0]
 8011098:	f7ff ff4e 	bl	8010f38 <rcl_clock_get_now>
 801109c:	4606      	mov	r6, r0
 801109e:	b140      	cbz	r0, 80110b2 <rcl_timer_is_ready+0x3e>
 80110a0:	f240 3321 	movw	r3, #801	@ 0x321
 80110a4:	4298      	cmp	r0, r3
 80110a6:	d101      	bne.n	80110ac <rcl_timer_is_ready+0x38>
 80110a8:	2600      	movs	r6, #0
 80110aa:	702e      	strb	r6, [r5, #0]
 80110ac:	4630      	mov	r0, r6
 80110ae:	b002      	add	sp, #8
 80110b0:	bd70      	pop	{r4, r5, r6, pc}
 80110b2:	6820      	ldr	r0, [r4, #0]
 80110b4:	2105      	movs	r1, #5
 80110b6:	3028      	adds	r0, #40	@ 0x28
 80110b8:	f001 fc0e 	bl	80128d8 <__atomic_load_8>
 80110bc:	9b00      	ldr	r3, [sp, #0]
 80110be:	1ac0      	subs	r0, r0, r3
 80110c0:	9b01      	ldr	r3, [sp, #4]
 80110c2:	eb61 0103 	sbc.w	r1, r1, r3
 80110c6:	2801      	cmp	r0, #1
 80110c8:	f171 0300 	sbcs.w	r3, r1, #0
 80110cc:	bfb4      	ite	lt
 80110ce:	2301      	movlt	r3, #1
 80110d0:	2300      	movge	r3, #0
 80110d2:	4630      	mov	r0, r6
 80110d4:	702b      	strb	r3, [r5, #0]
 80110d6:	b002      	add	sp, #8
 80110d8:	bd70      	pop	{r4, r5, r6, pc}
 80110da:	260b      	movs	r6, #11
 80110dc:	4630      	mov	r0, r6
 80110de:	b002      	add	sp, #8
 80110e0:	bd70      	pop	{r4, r5, r6, pc}
 80110e2:	f44f 7648 	mov.w	r6, #800	@ 0x320
 80110e6:	e7e1      	b.n	80110ac <rcl_timer_is_ready+0x38>

080110e8 <rcl_timer_get_time_until_next_call>:
 80110e8:	b570      	push	{r4, r5, r6, lr}
 80110ea:	b082      	sub	sp, #8
 80110ec:	b330      	cbz	r0, 801113c <rcl_timer_get_time_until_next_call+0x54>
 80110ee:	6803      	ldr	r3, [r0, #0]
 80110f0:	4604      	mov	r4, r0
 80110f2:	b33b      	cbz	r3, 8011144 <rcl_timer_get_time_until_next_call+0x5c>
 80110f4:	460d      	mov	r5, r1
 80110f6:	b309      	cbz	r1, 801113c <rcl_timer_get_time_until_next_call+0x54>
 80110f8:	f3bf 8f5b 	dmb	ish
 80110fc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8011100:	f3bf 8f5b 	dmb	ish
 8011104:	b9ab      	cbnz	r3, 8011132 <rcl_timer_get_time_until_next_call+0x4a>
 8011106:	6803      	ldr	r3, [r0, #0]
 8011108:	4669      	mov	r1, sp
 801110a:	6818      	ldr	r0, [r3, #0]
 801110c:	f7ff ff14 	bl	8010f38 <rcl_clock_get_now>
 8011110:	4606      	mov	r6, r0
 8011112:	b958      	cbnz	r0, 801112c <rcl_timer_get_time_until_next_call+0x44>
 8011114:	6820      	ldr	r0, [r4, #0]
 8011116:	2105      	movs	r1, #5
 8011118:	3028      	adds	r0, #40	@ 0x28
 801111a:	f001 fbdd 	bl	80128d8 <__atomic_load_8>
 801111e:	9b00      	ldr	r3, [sp, #0]
 8011120:	1ac0      	subs	r0, r0, r3
 8011122:	9b01      	ldr	r3, [sp, #4]
 8011124:	6028      	str	r0, [r5, #0]
 8011126:	eb61 0103 	sbc.w	r1, r1, r3
 801112a:	6069      	str	r1, [r5, #4]
 801112c:	4630      	mov	r0, r6
 801112e:	b002      	add	sp, #8
 8011130:	bd70      	pop	{r4, r5, r6, pc}
 8011132:	f240 3621 	movw	r6, #801	@ 0x321
 8011136:	4630      	mov	r0, r6
 8011138:	b002      	add	sp, #8
 801113a:	bd70      	pop	{r4, r5, r6, pc}
 801113c:	260b      	movs	r6, #11
 801113e:	4630      	mov	r0, r6
 8011140:	b002      	add	sp, #8
 8011142:	bd70      	pop	{r4, r5, r6, pc}
 8011144:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8011148:	e7f0      	b.n	801112c <rcl_timer_get_time_until_next_call+0x44>
 801114a:	bf00      	nop

0801114c <rcl_timer_get_guard_condition>:
 801114c:	b130      	cbz	r0, 801115c <rcl_timer_get_guard_condition+0x10>
 801114e:	6800      	ldr	r0, [r0, #0]
 8011150:	b120      	cbz	r0, 801115c <rcl_timer_get_guard_condition+0x10>
 8011152:	68c3      	ldr	r3, [r0, #12]
 8011154:	b10b      	cbz	r3, 801115a <rcl_timer_get_guard_condition+0xe>
 8011156:	3008      	adds	r0, #8
 8011158:	4770      	bx	lr
 801115a:	4618      	mov	r0, r3
 801115c:	4770      	bx	lr
 801115e:	bf00      	nop

08011160 <rcl_validate_enclave_name_with_size>:
 8011160:	b378      	cbz	r0, 80111c2 <rcl_validate_enclave_name_with_size+0x62>
 8011162:	b570      	push	{r4, r5, r6, lr}
 8011164:	4615      	mov	r5, r2
 8011166:	b0c2      	sub	sp, #264	@ 0x108
 8011168:	b302      	cbz	r2, 80111ac <rcl_validate_enclave_name_with_size+0x4c>
 801116a:	461e      	mov	r6, r3
 801116c:	466a      	mov	r2, sp
 801116e:	ab01      	add	r3, sp, #4
 8011170:	460c      	mov	r4, r1
 8011172:	f7fa fe09 	bl	800bd88 <rmw_validate_namespace_with_size>
 8011176:	4684      	mov	ip, r0
 8011178:	b9e8      	cbnz	r0, 80111b6 <rcl_validate_enclave_name_with_size+0x56>
 801117a:	9b00      	ldr	r3, [sp, #0]
 801117c:	b923      	cbnz	r3, 8011188 <rcl_validate_enclave_name_with_size+0x28>
 801117e:	2300      	movs	r3, #0
 8011180:	602b      	str	r3, [r5, #0]
 8011182:	4660      	mov	r0, ip
 8011184:	b042      	add	sp, #264	@ 0x108
 8011186:	bd70      	pop	{r4, r5, r6, pc}
 8011188:	2b07      	cmp	r3, #7
 801118a:	d007      	beq.n	801119c <rcl_validate_enclave_name_with_size+0x3c>
 801118c:	1e5a      	subs	r2, r3, #1
 801118e:	2a05      	cmp	r2, #5
 8011190:	d833      	bhi.n	80111fa <rcl_validate_enclave_name_with_size+0x9a>
 8011192:	e8df f002 	tbb	[pc, r2]
 8011196:	2c2f      	.short	0x2c2f
 8011198:	1a232629 	.word	0x1a232629
 801119c:	2cff      	cmp	r4, #255	@ 0xff
 801119e:	d9ee      	bls.n	801117e <rcl_validate_enclave_name_with_size+0x1e>
 80111a0:	602b      	str	r3, [r5, #0]
 80111a2:	2e00      	cmp	r6, #0
 80111a4:	d0ed      	beq.n	8011182 <rcl_validate_enclave_name_with_size+0x22>
 80111a6:	23fe      	movs	r3, #254	@ 0xfe
 80111a8:	6033      	str	r3, [r6, #0]
 80111aa:	e7ea      	b.n	8011182 <rcl_validate_enclave_name_with_size+0x22>
 80111ac:	f04f 0c0b 	mov.w	ip, #11
 80111b0:	4660      	mov	r0, ip
 80111b2:	b042      	add	sp, #264	@ 0x108
 80111b4:	bd70      	pop	{r4, r5, r6, pc}
 80111b6:	f7ff f8c9 	bl	801034c <rcl_convert_rmw_ret_to_rcl_ret>
 80111ba:	4684      	mov	ip, r0
 80111bc:	4660      	mov	r0, ip
 80111be:	b042      	add	sp, #264	@ 0x108
 80111c0:	bd70      	pop	{r4, r5, r6, pc}
 80111c2:	f04f 0c0b 	mov.w	ip, #11
 80111c6:	4660      	mov	r0, ip
 80111c8:	4770      	bx	lr
 80111ca:	2306      	movs	r3, #6
 80111cc:	602b      	str	r3, [r5, #0]
 80111ce:	2e00      	cmp	r6, #0
 80111d0:	d0d7      	beq.n	8011182 <rcl_validate_enclave_name_with_size+0x22>
 80111d2:	9b01      	ldr	r3, [sp, #4]
 80111d4:	6033      	str	r3, [r6, #0]
 80111d6:	4660      	mov	r0, ip
 80111d8:	b042      	add	sp, #264	@ 0x108
 80111da:	bd70      	pop	{r4, r5, r6, pc}
 80111dc:	2305      	movs	r3, #5
 80111de:	602b      	str	r3, [r5, #0]
 80111e0:	e7f5      	b.n	80111ce <rcl_validate_enclave_name_with_size+0x6e>
 80111e2:	2304      	movs	r3, #4
 80111e4:	602b      	str	r3, [r5, #0]
 80111e6:	e7f2      	b.n	80111ce <rcl_validate_enclave_name_with_size+0x6e>
 80111e8:	2303      	movs	r3, #3
 80111ea:	602b      	str	r3, [r5, #0]
 80111ec:	e7ef      	b.n	80111ce <rcl_validate_enclave_name_with_size+0x6e>
 80111ee:	2302      	movs	r3, #2
 80111f0:	602b      	str	r3, [r5, #0]
 80111f2:	e7ec      	b.n	80111ce <rcl_validate_enclave_name_with_size+0x6e>
 80111f4:	2301      	movs	r3, #1
 80111f6:	602b      	str	r3, [r5, #0]
 80111f8:	e7e9      	b.n	80111ce <rcl_validate_enclave_name_with_size+0x6e>
 80111fa:	4a04      	ldr	r2, [pc, #16]	@ (801120c <rcl_validate_enclave_name_with_size+0xac>)
 80111fc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011200:	a802      	add	r0, sp, #8
 8011202:	f7fa fcdb 	bl	800bbbc <rcutils_snprintf>
 8011206:	f04f 0c01 	mov.w	ip, #1
 801120a:	e7ba      	b.n	8011182 <rcl_validate_enclave_name_with_size+0x22>
 801120c:	0801a750 	.word	0x0801a750

08011210 <rcl_validate_enclave_name>:
 8011210:	b168      	cbz	r0, 801122e <rcl_validate_enclave_name+0x1e>
 8011212:	b570      	push	{r4, r5, r6, lr}
 8011214:	460d      	mov	r5, r1
 8011216:	4616      	mov	r6, r2
 8011218:	4604      	mov	r4, r0
 801121a:	f7ef f859 	bl	80002d0 <strlen>
 801121e:	4633      	mov	r3, r6
 8011220:	4601      	mov	r1, r0
 8011222:	462a      	mov	r2, r5
 8011224:	4620      	mov	r0, r4
 8011226:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801122a:	f7ff bf99 	b.w	8011160 <rcl_validate_enclave_name_with_size>
 801122e:	200b      	movs	r0, #11
 8011230:	4770      	bx	lr
 8011232:	bf00      	nop

08011234 <rcl_get_zero_initialized_wait_set>:
 8011234:	b510      	push	{r4, lr}
 8011236:	4c08      	ldr	r4, [pc, #32]	@ (8011258 <rcl_get_zero_initialized_wait_set+0x24>)
 8011238:	4686      	mov	lr, r0
 801123a:	4684      	mov	ip, r0
 801123c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801123e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011242:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011244:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011248:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801124a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801124e:	6823      	ldr	r3, [r4, #0]
 8011250:	f8cc 3000 	str.w	r3, [ip]
 8011254:	4670      	mov	r0, lr
 8011256:	bd10      	pop	{r4, pc}
 8011258:	0801a7b0 	.word	0x0801a7b0

0801125c <rcl_wait_set_is_valid>:
 801125c:	b118      	cbz	r0, 8011266 <rcl_wait_set_is_valid+0xa>
 801125e:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8011260:	3800      	subs	r0, #0
 8011262:	bf18      	it	ne
 8011264:	2001      	movne	r0, #1
 8011266:	4770      	bx	lr

08011268 <rcl_wait_set_fini>:
 8011268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801126c:	b082      	sub	sp, #8
 801126e:	2800      	cmp	r0, #0
 8011270:	f000 8095 	beq.w	801139e <rcl_wait_set_fini+0x136>
 8011274:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8011276:	4604      	mov	r4, r0
 8011278:	2e00      	cmp	r6, #0
 801127a:	f000 808c 	beq.w	8011396 <rcl_wait_set_fini+0x12e>
 801127e:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 8011280:	f002 fca4 	bl	8013bcc <rmw_destroy_wait_set>
 8011284:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011286:	1e06      	subs	r6, r0, #0
 8011288:	bf18      	it	ne
 801128a:	f44f 7661 	movne.w	r6, #900	@ 0x384
 801128e:	2d00      	cmp	r5, #0
 8011290:	f000 8081 	beq.w	8011396 <rcl_wait_set_fini+0x12e>
 8011294:	6820      	ldr	r0, [r4, #0]
 8011296:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 801129a:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801129c:	2700      	movs	r7, #0
 801129e:	6067      	str	r7, [r4, #4]
 80112a0:	602f      	str	r7, [r5, #0]
 80112a2:	b120      	cbz	r0, 80112ae <rcl_wait_set_fini+0x46>
 80112a4:	9101      	str	r1, [sp, #4]
 80112a6:	47c0      	blx	r8
 80112a8:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80112aa:	9901      	ldr	r1, [sp, #4]
 80112ac:	6027      	str	r7, [r4, #0]
 80112ae:	68a8      	ldr	r0, [r5, #8]
 80112b0:	b120      	cbz	r0, 80112bc <rcl_wait_set_fini+0x54>
 80112b2:	47c0      	blx	r8
 80112b4:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80112b6:	2300      	movs	r3, #0
 80112b8:	e9c5 3301 	strd	r3, r3, [r5, #4]
 80112bc:	68a0      	ldr	r0, [r4, #8]
 80112be:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80112c0:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80112c2:	f04f 0800 	mov.w	r8, #0
 80112c6:	f8c4 800c 	str.w	r8, [r4, #12]
 80112ca:	f8c5 800c 	str.w	r8, [r5, #12]
 80112ce:	b128      	cbz	r0, 80112dc <rcl_wait_set_fini+0x74>
 80112d0:	47b8      	blx	r7
 80112d2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80112d4:	f8c4 8008 	str.w	r8, [r4, #8]
 80112d8:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80112da:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80112dc:	6968      	ldr	r0, [r5, #20]
 80112de:	f04f 0800 	mov.w	r8, #0
 80112e2:	f8c5 8010 	str.w	r8, [r5, #16]
 80112e6:	b128      	cbz	r0, 80112f4 <rcl_wait_set_fini+0x8c>
 80112e8:	47b8      	blx	r7
 80112ea:	f8c5 8014 	str.w	r8, [r5, #20]
 80112ee:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80112f0:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80112f2:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80112f4:	6920      	ldr	r0, [r4, #16]
 80112f6:	f04f 0800 	mov.w	r8, #0
 80112fa:	f8c4 8014 	str.w	r8, [r4, #20]
 80112fe:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 8011302:	b128      	cbz	r0, 8011310 <rcl_wait_set_fini+0xa8>
 8011304:	47b8      	blx	r7
 8011306:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011308:	f8c4 8010 	str.w	r8, [r4, #16]
 801130c:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801130e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8011310:	69a0      	ldr	r0, [r4, #24]
 8011312:	f04f 0800 	mov.w	r8, #0
 8011316:	f8c4 801c 	str.w	r8, [r4, #28]
 801131a:	f8c5 8018 	str.w	r8, [r5, #24]
 801131e:	b128      	cbz	r0, 801132c <rcl_wait_set_fini+0xc4>
 8011320:	9101      	str	r1, [sp, #4]
 8011322:	47b8      	blx	r7
 8011324:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011326:	9901      	ldr	r1, [sp, #4]
 8011328:	f8c4 8018 	str.w	r8, [r4, #24]
 801132c:	6a28      	ldr	r0, [r5, #32]
 801132e:	b120      	cbz	r0, 801133a <rcl_wait_set_fini+0xd2>
 8011330:	47b8      	blx	r7
 8011332:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011334:	2300      	movs	r3, #0
 8011336:	e9c5 3307 	strd	r3, r3, [r5, #28]
 801133a:	6a20      	ldr	r0, [r4, #32]
 801133c:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8011340:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8011342:	2700      	movs	r7, #0
 8011344:	6267      	str	r7, [r4, #36]	@ 0x24
 8011346:	626f      	str	r7, [r5, #36]	@ 0x24
 8011348:	b120      	cbz	r0, 8011354 <rcl_wait_set_fini+0xec>
 801134a:	9101      	str	r1, [sp, #4]
 801134c:	47c0      	blx	r8
 801134e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011350:	9901      	ldr	r1, [sp, #4]
 8011352:	6227      	str	r7, [r4, #32]
 8011354:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8011356:	b120      	cbz	r0, 8011362 <rcl_wait_set_fini+0xfa>
 8011358:	47c0      	blx	r8
 801135a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801135c:	2300      	movs	r3, #0
 801135e:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8011362:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8011364:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8011368:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801136a:	2700      	movs	r7, #0
 801136c:	62e7      	str	r7, [r4, #44]	@ 0x2c
 801136e:	632f      	str	r7, [r5, #48]	@ 0x30
 8011370:	b120      	cbz	r0, 801137c <rcl_wait_set_fini+0x114>
 8011372:	9101      	str	r1, [sp, #4]
 8011374:	47c0      	blx	r8
 8011376:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011378:	9901      	ldr	r1, [sp, #4]
 801137a:	62a7      	str	r7, [r4, #40]	@ 0x28
 801137c:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 801137e:	b120      	cbz	r0, 801138a <rcl_wait_set_fini+0x122>
 8011380:	47c0      	blx	r8
 8011382:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011384:	2300      	movs	r3, #0
 8011386:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 801138a:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 801138c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801138e:	4628      	mov	r0, r5
 8011390:	4798      	blx	r3
 8011392:	2300      	movs	r3, #0
 8011394:	6323      	str	r3, [r4, #48]	@ 0x30
 8011396:	4630      	mov	r0, r6
 8011398:	b002      	add	sp, #8
 801139a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801139e:	260b      	movs	r6, #11
 80113a0:	4630      	mov	r0, r6
 80113a2:	b002      	add	sp, #8
 80113a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080113a8 <rcl_wait_set_add_subscription>:
 80113a8:	b318      	cbz	r0, 80113f2 <rcl_wait_set_add_subscription+0x4a>
 80113aa:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80113ac:	b570      	push	{r4, r5, r6, lr}
 80113ae:	4604      	mov	r4, r0
 80113b0:	b30b      	cbz	r3, 80113f6 <rcl_wait_set_add_subscription+0x4e>
 80113b2:	b319      	cbz	r1, 80113fc <rcl_wait_set_add_subscription+0x54>
 80113b4:	681d      	ldr	r5, [r3, #0]
 80113b6:	6840      	ldr	r0, [r0, #4]
 80113b8:	4285      	cmp	r5, r0
 80113ba:	d217      	bcs.n	80113ec <rcl_wait_set_add_subscription+0x44>
 80113bc:	6820      	ldr	r0, [r4, #0]
 80113be:	1c6e      	adds	r6, r5, #1
 80113c0:	601e      	str	r6, [r3, #0]
 80113c2:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80113c6:	b102      	cbz	r2, 80113ca <rcl_wait_set_add_subscription+0x22>
 80113c8:	6015      	str	r5, [r2, #0]
 80113ca:	4608      	mov	r0, r1
 80113cc:	f7f9 fb4e 	bl	800aa6c <rcl_subscription_get_rmw_handle>
 80113d0:	b150      	cbz	r0, 80113e8 <rcl_wait_set_add_subscription+0x40>
 80113d2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80113d4:	6842      	ldr	r2, [r0, #4]
 80113d6:	689b      	ldr	r3, [r3, #8]
 80113d8:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80113dc:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80113de:	6853      	ldr	r3, [r2, #4]
 80113e0:	3301      	adds	r3, #1
 80113e2:	2000      	movs	r0, #0
 80113e4:	6053      	str	r3, [r2, #4]
 80113e6:	bd70      	pop	{r4, r5, r6, pc}
 80113e8:	2001      	movs	r0, #1
 80113ea:	bd70      	pop	{r4, r5, r6, pc}
 80113ec:	f240 3086 	movw	r0, #902	@ 0x386
 80113f0:	bd70      	pop	{r4, r5, r6, pc}
 80113f2:	200b      	movs	r0, #11
 80113f4:	4770      	bx	lr
 80113f6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80113fa:	bd70      	pop	{r4, r5, r6, pc}
 80113fc:	200b      	movs	r0, #11
 80113fe:	bd70      	pop	{r4, r5, r6, pc}

08011400 <rcl_wait_set_clear>:
 8011400:	2800      	cmp	r0, #0
 8011402:	d073      	beq.n	80114ec <rcl_wait_set_clear+0xec>
 8011404:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8011406:	b510      	push	{r4, lr}
 8011408:	4604      	mov	r4, r0
 801140a:	2b00      	cmp	r3, #0
 801140c:	d070      	beq.n	80114f0 <rcl_wait_set_clear+0xf0>
 801140e:	6800      	ldr	r0, [r0, #0]
 8011410:	b138      	cbz	r0, 8011422 <rcl_wait_set_clear+0x22>
 8011412:	6862      	ldr	r2, [r4, #4]
 8011414:	2100      	movs	r1, #0
 8011416:	0092      	lsls	r2, r2, #2
 8011418:	f006 fcd6 	bl	8017dc8 <memset>
 801141c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801141e:	2200      	movs	r2, #0
 8011420:	601a      	str	r2, [r3, #0]
 8011422:	68a0      	ldr	r0, [r4, #8]
 8011424:	b138      	cbz	r0, 8011436 <rcl_wait_set_clear+0x36>
 8011426:	68e2      	ldr	r2, [r4, #12]
 8011428:	2100      	movs	r1, #0
 801142a:	0092      	lsls	r2, r2, #2
 801142c:	f006 fccc 	bl	8017dc8 <memset>
 8011430:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011432:	2200      	movs	r2, #0
 8011434:	60da      	str	r2, [r3, #12]
 8011436:	69a0      	ldr	r0, [r4, #24]
 8011438:	b138      	cbz	r0, 801144a <rcl_wait_set_clear+0x4a>
 801143a:	69e2      	ldr	r2, [r4, #28]
 801143c:	2100      	movs	r1, #0
 801143e:	0092      	lsls	r2, r2, #2
 8011440:	f006 fcc2 	bl	8017dc8 <memset>
 8011444:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011446:	2200      	movs	r2, #0
 8011448:	619a      	str	r2, [r3, #24]
 801144a:	6a20      	ldr	r0, [r4, #32]
 801144c:	b138      	cbz	r0, 801145e <rcl_wait_set_clear+0x5e>
 801144e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8011450:	2100      	movs	r1, #0
 8011452:	0092      	lsls	r2, r2, #2
 8011454:	f006 fcb8 	bl	8017dc8 <memset>
 8011458:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801145a:	2200      	movs	r2, #0
 801145c:	625a      	str	r2, [r3, #36]	@ 0x24
 801145e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8011460:	b138      	cbz	r0, 8011472 <rcl_wait_set_clear+0x72>
 8011462:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8011464:	2100      	movs	r1, #0
 8011466:	0092      	lsls	r2, r2, #2
 8011468:	f006 fcae 	bl	8017dc8 <memset>
 801146c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801146e:	2200      	movs	r2, #0
 8011470:	631a      	str	r2, [r3, #48]	@ 0x30
 8011472:	6920      	ldr	r0, [r4, #16]
 8011474:	b138      	cbz	r0, 8011486 <rcl_wait_set_clear+0x86>
 8011476:	6962      	ldr	r2, [r4, #20]
 8011478:	2100      	movs	r1, #0
 801147a:	0092      	lsls	r2, r2, #2
 801147c:	f006 fca4 	bl	8017dc8 <memset>
 8011480:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011482:	2200      	movs	r2, #0
 8011484:	641a      	str	r2, [r3, #64]	@ 0x40
 8011486:	6898      	ldr	r0, [r3, #8]
 8011488:	b138      	cbz	r0, 801149a <rcl_wait_set_clear+0x9a>
 801148a:	685a      	ldr	r2, [r3, #4]
 801148c:	2100      	movs	r1, #0
 801148e:	0092      	lsls	r2, r2, #2
 8011490:	f006 fc9a 	bl	8017dc8 <memset>
 8011494:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011496:	2200      	movs	r2, #0
 8011498:	605a      	str	r2, [r3, #4]
 801149a:	6958      	ldr	r0, [r3, #20]
 801149c:	b138      	cbz	r0, 80114ae <rcl_wait_set_clear+0xae>
 801149e:	691a      	ldr	r2, [r3, #16]
 80114a0:	2100      	movs	r1, #0
 80114a2:	0092      	lsls	r2, r2, #2
 80114a4:	f006 fc90 	bl	8017dc8 <memset>
 80114a8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80114aa:	2200      	movs	r2, #0
 80114ac:	611a      	str	r2, [r3, #16]
 80114ae:	6a18      	ldr	r0, [r3, #32]
 80114b0:	b138      	cbz	r0, 80114c2 <rcl_wait_set_clear+0xc2>
 80114b2:	69da      	ldr	r2, [r3, #28]
 80114b4:	2100      	movs	r1, #0
 80114b6:	0092      	lsls	r2, r2, #2
 80114b8:	f006 fc86 	bl	8017dc8 <memset>
 80114bc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80114be:	2200      	movs	r2, #0
 80114c0:	61da      	str	r2, [r3, #28]
 80114c2:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80114c4:	b138      	cbz	r0, 80114d6 <rcl_wait_set_clear+0xd6>
 80114c6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80114c8:	2100      	movs	r1, #0
 80114ca:	0092      	lsls	r2, r2, #2
 80114cc:	f006 fc7c 	bl	8017dc8 <memset>
 80114d0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80114d2:	2200      	movs	r2, #0
 80114d4:	629a      	str	r2, [r3, #40]	@ 0x28
 80114d6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80114d8:	b138      	cbz	r0, 80114ea <rcl_wait_set_clear+0xea>
 80114da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80114dc:	2100      	movs	r1, #0
 80114de:	0092      	lsls	r2, r2, #2
 80114e0:	f006 fc72 	bl	8017dc8 <memset>
 80114e4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80114e6:	2000      	movs	r0, #0
 80114e8:	6358      	str	r0, [r3, #52]	@ 0x34
 80114ea:	bd10      	pop	{r4, pc}
 80114ec:	200b      	movs	r0, #11
 80114ee:	4770      	bx	lr
 80114f0:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80114f4:	bd10      	pop	{r4, pc}
 80114f6:	bf00      	nop

080114f8 <rcl_wait_set_resize>:
 80114f8:	2800      	cmp	r0, #0
 80114fa:	f000 8185 	beq.w	8011808 <rcl_wait_set_resize+0x310>
 80114fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011502:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8011504:	b083      	sub	sp, #12
 8011506:	4605      	mov	r5, r0
 8011508:	2c00      	cmp	r4, #0
 801150a:	f000 817f 	beq.w	801180c <rcl_wait_set_resize+0x314>
 801150e:	f04f 0900 	mov.w	r9, #0
 8011512:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 8011516:	461f      	mov	r7, r3
 8011518:	4688      	mov	r8, r1
 801151a:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 801151e:	4616      	mov	r6, r2
 8011520:	f8c0 9004 	str.w	r9, [r0, #4]
 8011524:	f8c4 9000 	str.w	r9, [r4]
 8011528:	2900      	cmp	r1, #0
 801152a:	f000 80bd 	beq.w	80116a8 <rcl_wait_set_resize+0x1b0>
 801152e:	008c      	lsls	r4, r1, #2
 8011530:	6800      	ldr	r0, [r0, #0]
 8011532:	9301      	str	r3, [sp, #4]
 8011534:	4652      	mov	r2, sl
 8011536:	4621      	mov	r1, r4
 8011538:	4798      	blx	r3
 801153a:	9b01      	ldr	r3, [sp, #4]
 801153c:	6028      	str	r0, [r5, #0]
 801153e:	2800      	cmp	r0, #0
 8011540:	f000 80cb 	beq.w	80116da <rcl_wait_set_resize+0x1e2>
 8011544:	4622      	mov	r2, r4
 8011546:	4649      	mov	r1, r9
 8011548:	9301      	str	r3, [sp, #4]
 801154a:	f006 fc3d 	bl	8017dc8 <memset>
 801154e:	f8c5 8004 	str.w	r8, [r5, #4]
 8011552:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 8011556:	9b01      	ldr	r3, [sp, #4]
 8011558:	f8d8 0008 	ldr.w	r0, [r8, #8]
 801155c:	f8c8 9004 	str.w	r9, [r8, #4]
 8011560:	4652      	mov	r2, sl
 8011562:	4621      	mov	r1, r4
 8011564:	4798      	blx	r3
 8011566:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8011568:	f8c8 0008 	str.w	r0, [r8, #8]
 801156c:	689b      	ldr	r3, [r3, #8]
 801156e:	2b00      	cmp	r3, #0
 8011570:	f000 80ac 	beq.w	80116cc <rcl_wait_set_resize+0x1d4>
 8011574:	4622      	mov	r2, r4
 8011576:	4649      	mov	r1, r9
 8011578:	4618      	mov	r0, r3
 801157a:	f006 fc25 	bl	8017dc8 <memset>
 801157e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011580:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8011584:	f04f 0800 	mov.w	r8, #0
 8011588:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 801158c:	f8c5 800c 	str.w	r8, [r5, #12]
 8011590:	f8c4 800c 	str.w	r8, [r4, #12]
 8011594:	2e00      	cmp	r6, #0
 8011596:	f040 80a4 	bne.w	80116e2 <rcl_wait_set_resize+0x1ea>
 801159a:	68a8      	ldr	r0, [r5, #8]
 801159c:	b128      	cbz	r0, 80115aa <rcl_wait_set_resize+0xb2>
 801159e:	4649      	mov	r1, r9
 80115a0:	4790      	blx	r2
 80115a2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80115a4:	60ae      	str	r6, [r5, #8]
 80115a6:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80115aa:	f04f 0800 	mov.w	r8, #0
 80115ae:	19f6      	adds	r6, r6, r7
 80115b0:	f8c4 8010 	str.w	r8, [r4, #16]
 80115b4:	f040 80ac 	bne.w	8011710 <rcl_wait_set_resize+0x218>
 80115b8:	6960      	ldr	r0, [r4, #20]
 80115ba:	b130      	cbz	r0, 80115ca <rcl_wait_set_resize+0xd2>
 80115bc:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80115be:	4649      	mov	r1, r9
 80115c0:	4798      	blx	r3
 80115c2:	6166      	str	r6, [r4, #20]
 80115c4:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80115c6:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80115ca:	2600      	movs	r6, #0
 80115cc:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 80115d0:	616e      	str	r6, [r5, #20]
 80115d2:	6426      	str	r6, [r4, #64]	@ 0x40
 80115d4:	2f00      	cmp	r7, #0
 80115d6:	f040 80ad 	bne.w	8011734 <rcl_wait_set_resize+0x23c>
 80115da:	6928      	ldr	r0, [r5, #16]
 80115dc:	b138      	cbz	r0, 80115ee <rcl_wait_set_resize+0xf6>
 80115de:	4649      	mov	r1, r9
 80115e0:	47d0      	blx	sl
 80115e2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80115e4:	612f      	str	r7, [r5, #16]
 80115e6:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 80115ea:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80115ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80115f0:	2600      	movs	r6, #0
 80115f2:	61ee      	str	r6, [r5, #28]
 80115f4:	61a6      	str	r6, [r4, #24]
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	f040 80af 	bne.w	801175a <rcl_wait_set_resize+0x262>
 80115fc:	69a8      	ldr	r0, [r5, #24]
 80115fe:	b120      	cbz	r0, 801160a <rcl_wait_set_resize+0x112>
 8011600:	4649      	mov	r1, r9
 8011602:	47d0      	blx	sl
 8011604:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011606:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011608:	61ab      	str	r3, [r5, #24]
 801160a:	6a20      	ldr	r0, [r4, #32]
 801160c:	b128      	cbz	r0, 801161a <rcl_wait_set_resize+0x122>
 801160e:	4649      	mov	r1, r9
 8011610:	47d0      	blx	sl
 8011612:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011614:	2300      	movs	r3, #0
 8011616:	e9c4 3307 	strd	r3, r3, [r4, #28]
 801161a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801161c:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 801161e:	2600      	movs	r6, #0
 8011620:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8011624:	626e      	str	r6, [r5, #36]	@ 0x24
 8011626:	6266      	str	r6, [r4, #36]	@ 0x24
 8011628:	2b00      	cmp	r3, #0
 801162a:	f000 80b6 	beq.w	801179a <rcl_wait_set_resize+0x2a2>
 801162e:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8011632:	6a28      	ldr	r0, [r5, #32]
 8011634:	463a      	mov	r2, r7
 8011636:	4651      	mov	r1, sl
 8011638:	47c8      	blx	r9
 801163a:	6228      	str	r0, [r5, #32]
 801163c:	2800      	cmp	r0, #0
 801163e:	d04c      	beq.n	80116da <rcl_wait_set_resize+0x1e2>
 8011640:	4652      	mov	r2, sl
 8011642:	4631      	mov	r1, r6
 8011644:	f006 fbc0 	bl	8017dc8 <memset>
 8011648:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801164a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801164c:	626b      	str	r3, [r5, #36]	@ 0x24
 801164e:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8011650:	62a6      	str	r6, [r4, #40]	@ 0x28
 8011652:	463a      	mov	r2, r7
 8011654:	4651      	mov	r1, sl
 8011656:	47c8      	blx	r9
 8011658:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801165a:	62e0      	str	r0, [r4, #44]	@ 0x2c
 801165c:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 801165e:	2c00      	cmp	r4, #0
 8011660:	f000 80f0 	beq.w	8011844 <rcl_wait_set_resize+0x34c>
 8011664:	4620      	mov	r0, r4
 8011666:	4652      	mov	r2, sl
 8011668:	4631      	mov	r1, r6
 801166a:	f006 fbad 	bl	8017dc8 <memset>
 801166e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011670:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011672:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8011674:	2600      	movs	r6, #0
 8011676:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 801167a:	62ee      	str	r6, [r5, #44]	@ 0x2c
 801167c:	6326      	str	r6, [r4, #48]	@ 0x30
 801167e:	2b00      	cmp	r3, #0
 8011680:	f040 809d 	bne.w	80117be <rcl_wait_set_resize+0x2c6>
 8011684:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8011686:	b120      	cbz	r0, 8011692 <rcl_wait_set_resize+0x19a>
 8011688:	4639      	mov	r1, r7
 801168a:	47c0      	blx	r8
 801168c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801168e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011690:	62ab      	str	r3, [r5, #40]	@ 0x28
 8011692:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8011694:	b310      	cbz	r0, 80116dc <rcl_wait_set_resize+0x1e4>
 8011696:	4639      	mov	r1, r7
 8011698:	47c0      	blx	r8
 801169a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801169c:	2000      	movs	r0, #0
 801169e:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 80116a2:	b003      	add	sp, #12
 80116a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116a8:	6800      	ldr	r0, [r0, #0]
 80116aa:	b120      	cbz	r0, 80116b6 <rcl_wait_set_resize+0x1be>
 80116ac:	4651      	mov	r1, sl
 80116ae:	47d8      	blx	fp
 80116b0:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80116b2:	f8c5 8000 	str.w	r8, [r5]
 80116b6:	68a0      	ldr	r0, [r4, #8]
 80116b8:	2800      	cmp	r0, #0
 80116ba:	f43f af61 	beq.w	8011580 <rcl_wait_set_resize+0x88>
 80116be:	4651      	mov	r1, sl
 80116c0:	47d8      	blx	fp
 80116c2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80116c4:	2300      	movs	r3, #0
 80116c6:	e9c4 3301 	strd	r3, r3, [r4, #4]
 80116ca:	e759      	b.n	8011580 <rcl_wait_set_resize+0x88>
 80116cc:	6828      	ldr	r0, [r5, #0]
 80116ce:	9301      	str	r3, [sp, #4]
 80116d0:	4651      	mov	r1, sl
 80116d2:	47d8      	blx	fp
 80116d4:	9b01      	ldr	r3, [sp, #4]
 80116d6:	e9c5 3300 	strd	r3, r3, [r5]
 80116da:	200a      	movs	r0, #10
 80116dc:	b003      	add	sp, #12
 80116de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116e2:	00b4      	lsls	r4, r6, #2
 80116e4:	68a8      	ldr	r0, [r5, #8]
 80116e6:	464a      	mov	r2, r9
 80116e8:	4621      	mov	r1, r4
 80116ea:	4798      	blx	r3
 80116ec:	60a8      	str	r0, [r5, #8]
 80116ee:	2800      	cmp	r0, #0
 80116f0:	d0f3      	beq.n	80116da <rcl_wait_set_resize+0x1e2>
 80116f2:	4622      	mov	r2, r4
 80116f4:	4641      	mov	r1, r8
 80116f6:	f006 fb67 	bl	8017dc8 <memset>
 80116fa:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80116fc:	60ee      	str	r6, [r5, #12]
 80116fe:	f04f 0800 	mov.w	r8, #0
 8011702:	19f6      	adds	r6, r6, r7
 8011704:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8011708:	f8c4 8010 	str.w	r8, [r4, #16]
 801170c:	f43f af54 	beq.w	80115b8 <rcl_wait_set_resize+0xc0>
 8011710:	00b6      	lsls	r6, r6, #2
 8011712:	464a      	mov	r2, r9
 8011714:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8011716:	6960      	ldr	r0, [r4, #20]
 8011718:	4631      	mov	r1, r6
 801171a:	4798      	blx	r3
 801171c:	4681      	mov	r9, r0
 801171e:	6160      	str	r0, [r4, #20]
 8011720:	2800      	cmp	r0, #0
 8011722:	d076      	beq.n	8011812 <rcl_wait_set_resize+0x31a>
 8011724:	4632      	mov	r2, r6
 8011726:	4641      	mov	r1, r8
 8011728:	f006 fb4e 	bl	8017dc8 <memset>
 801172c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801172e:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8011732:	e74a      	b.n	80115ca <rcl_wait_set_resize+0xd2>
 8011734:	00bc      	lsls	r4, r7, #2
 8011736:	6928      	ldr	r0, [r5, #16]
 8011738:	464a      	mov	r2, r9
 801173a:	4621      	mov	r1, r4
 801173c:	47c0      	blx	r8
 801173e:	6128      	str	r0, [r5, #16]
 8011740:	2800      	cmp	r0, #0
 8011742:	d0ca      	beq.n	80116da <rcl_wait_set_resize+0x1e2>
 8011744:	4622      	mov	r2, r4
 8011746:	4631      	mov	r1, r6
 8011748:	f006 fb3e 	bl	8017dc8 <memset>
 801174c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801174e:	616f      	str	r7, [r5, #20]
 8011750:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8011754:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8011758:	e749      	b.n	80115ee <rcl_wait_set_resize+0xf6>
 801175a:	009c      	lsls	r4, r3, #2
 801175c:	69a8      	ldr	r0, [r5, #24]
 801175e:	464a      	mov	r2, r9
 8011760:	4621      	mov	r1, r4
 8011762:	47c0      	blx	r8
 8011764:	61a8      	str	r0, [r5, #24]
 8011766:	2800      	cmp	r0, #0
 8011768:	d0b7      	beq.n	80116da <rcl_wait_set_resize+0x1e2>
 801176a:	4622      	mov	r2, r4
 801176c:	4631      	mov	r1, r6
 801176e:	f006 fb2b 	bl	8017dc8 <memset>
 8011772:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 8011774:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011776:	61eb      	str	r3, [r5, #28]
 8011778:	6a38      	ldr	r0, [r7, #32]
 801177a:	61fe      	str	r6, [r7, #28]
 801177c:	464a      	mov	r2, r9
 801177e:	4621      	mov	r1, r4
 8011780:	47c0      	blx	r8
 8011782:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8011784:	6238      	str	r0, [r7, #32]
 8011786:	6a1f      	ldr	r7, [r3, #32]
 8011788:	2f00      	cmp	r7, #0
 801178a:	d054      	beq.n	8011836 <rcl_wait_set_resize+0x33e>
 801178c:	4622      	mov	r2, r4
 801178e:	4631      	mov	r1, r6
 8011790:	4638      	mov	r0, r7
 8011792:	f006 fb19 	bl	8017dc8 <memset>
 8011796:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011798:	e73f      	b.n	801161a <rcl_wait_set_resize+0x122>
 801179a:	6a28      	ldr	r0, [r5, #32]
 801179c:	b120      	cbz	r0, 80117a8 <rcl_wait_set_resize+0x2b0>
 801179e:	4639      	mov	r1, r7
 80117a0:	47c0      	blx	r8
 80117a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80117a4:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80117a6:	622b      	str	r3, [r5, #32]
 80117a8:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80117aa:	2800      	cmp	r0, #0
 80117ac:	f43f af60 	beq.w	8011670 <rcl_wait_set_resize+0x178>
 80117b0:	4639      	mov	r1, r7
 80117b2:	47c0      	blx	r8
 80117b4:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80117b6:	2300      	movs	r3, #0
 80117b8:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 80117bc:	e758      	b.n	8011670 <rcl_wait_set_resize+0x178>
 80117be:	009c      	lsls	r4, r3, #2
 80117c0:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 80117c2:	463a      	mov	r2, r7
 80117c4:	4621      	mov	r1, r4
 80117c6:	47c8      	blx	r9
 80117c8:	62a8      	str	r0, [r5, #40]	@ 0x28
 80117ca:	2800      	cmp	r0, #0
 80117cc:	d085      	beq.n	80116da <rcl_wait_set_resize+0x1e2>
 80117ce:	4622      	mov	r2, r4
 80117d0:	4631      	mov	r1, r6
 80117d2:	f006 faf9 	bl	8017dc8 <memset>
 80117d6:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 80117da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80117dc:	62eb      	str	r3, [r5, #44]	@ 0x2c
 80117de:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 80117e2:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 80117e6:	463a      	mov	r2, r7
 80117e8:	4621      	mov	r1, r4
 80117ea:	47c8      	blx	r9
 80117ec:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80117ee:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 80117f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80117f4:	b36b      	cbz	r3, 8011852 <rcl_wait_set_resize+0x35a>
 80117f6:	4622      	mov	r2, r4
 80117f8:	4631      	mov	r1, r6
 80117fa:	4618      	mov	r0, r3
 80117fc:	f006 fae4 	bl	8017dc8 <memset>
 8011800:	4630      	mov	r0, r6
 8011802:	b003      	add	sp, #12
 8011804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011808:	200b      	movs	r0, #11
 801180a:	4770      	bx	lr
 801180c:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011810:	e764      	b.n	80116dc <rcl_wait_set_resize+0x1e4>
 8011812:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8011814:	68a8      	ldr	r0, [r5, #8]
 8011816:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8011818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801181a:	4798      	blx	r3
 801181c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801181e:	6928      	ldr	r0, [r5, #16]
 8011820:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011822:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8011824:	f8c5 900c 	str.w	r9, [r5, #12]
 8011828:	f8c5 9008 	str.w	r9, [r5, #8]
 801182c:	4790      	blx	r2
 801182e:	e9c5 9904 	strd	r9, r9, [r5, #16]
 8011832:	200a      	movs	r0, #10
 8011834:	e752      	b.n	80116dc <rcl_wait_set_resize+0x1e4>
 8011836:	69a8      	ldr	r0, [r5, #24]
 8011838:	4649      	mov	r1, r9
 801183a:	47d0      	blx	sl
 801183c:	e9c5 7706 	strd	r7, r7, [r5, #24]
 8011840:	200a      	movs	r0, #10
 8011842:	e74b      	b.n	80116dc <rcl_wait_set_resize+0x1e4>
 8011844:	6a28      	ldr	r0, [r5, #32]
 8011846:	4639      	mov	r1, r7
 8011848:	47c0      	blx	r8
 801184a:	e9c5 4408 	strd	r4, r4, [r5, #32]
 801184e:	200a      	movs	r0, #10
 8011850:	e744      	b.n	80116dc <rcl_wait_set_resize+0x1e4>
 8011852:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8011854:	9301      	str	r3, [sp, #4]
 8011856:	4639      	mov	r1, r7
 8011858:	47c0      	blx	r8
 801185a:	9b01      	ldr	r3, [sp, #4]
 801185c:	200a      	movs	r0, #10
 801185e:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8011862:	e73b      	b.n	80116dc <rcl_wait_set_resize+0x1e4>

08011864 <rcl_wait_set_init>:
 8011864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011868:	b084      	sub	sp, #16
 801186a:	4604      	mov	r4, r0
 801186c:	a810      	add	r0, sp, #64	@ 0x40
 801186e:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 8011872:	460f      	mov	r7, r1
 8011874:	4690      	mov	r8, r2
 8011876:	4699      	mov	r9, r3
 8011878:	f7fa f85a 	bl	800b930 <rcutils_allocator_is_valid>
 801187c:	2800      	cmp	r0, #0
 801187e:	d06b      	beq.n	8011958 <rcl_wait_set_init+0xf4>
 8011880:	2c00      	cmp	r4, #0
 8011882:	d069      	beq.n	8011958 <rcl_wait_set_init+0xf4>
 8011884:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011886:	b125      	cbz	r5, 8011892 <rcl_wait_set_init+0x2e>
 8011888:	2564      	movs	r5, #100	@ 0x64
 801188a:	4628      	mov	r0, r5
 801188c:	b004      	add	sp, #16
 801188e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011892:	f1ba 0f00 	cmp.w	sl, #0
 8011896:	d05f      	beq.n	8011958 <rcl_wait_set_init+0xf4>
 8011898:	4650      	mov	r0, sl
 801189a:	f7fe fd75 	bl	8010388 <rcl_context_is_valid>
 801189e:	2800      	cmp	r0, #0
 80118a0:	d067      	beq.n	8011972 <rcl_wait_set_init+0x10e>
 80118a2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80118a4:	9914      	ldr	r1, [sp, #80]	@ 0x50
 80118a6:	205c      	movs	r0, #92	@ 0x5c
 80118a8:	4798      	blx	r3
 80118aa:	6320      	str	r0, [r4, #48]	@ 0x30
 80118ac:	2800      	cmp	r0, #0
 80118ae:	d062      	beq.n	8011976 <rcl_wait_set_init+0x112>
 80118b0:	4629      	mov	r1, r5
 80118b2:	225c      	movs	r2, #92	@ 0x5c
 80118b4:	f006 fa88 	bl	8017dc8 <memset>
 80118b8:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 80118bc:	eb03 0e02 	add.w	lr, r3, r2
 80118c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80118c2:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 80118c4:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 80118c8:	449e      	add	lr, r3
 80118ca:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80118ce:	e9c6 5501 	strd	r5, r5, [r6, #4]
 80118d2:	e9c6 5504 	strd	r5, r5, [r6, #16]
 80118d6:	e9c6 5507 	strd	r5, r5, [r6, #28]
 80118da:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 80118de:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 80118e2:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 80118e6:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 80118ea:	f8da a000 	ldr.w	sl, [sl]
 80118ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80118f0:	44c6      	add	lr, r8
 80118f2:	f8dc 3000 	ldr.w	r3, [ip]
 80118f6:	602b      	str	r3, [r5, #0]
 80118f8:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 80118fc:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 8011900:	f002 f95a 	bl	8013bb8 <rmw_create_wait_set>
 8011904:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011906:	63f0      	str	r0, [r6, #60]	@ 0x3c
 8011908:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801190a:	b350      	cbz	r0, 8011962 <rcl_wait_set_init+0xfe>
 801190c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801190e:	9302      	str	r3, [sp, #8]
 8011910:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011912:	9301      	str	r3, [sp, #4]
 8011914:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011916:	9300      	str	r3, [sp, #0]
 8011918:	4642      	mov	r2, r8
 801191a:	464b      	mov	r3, r9
 801191c:	4639      	mov	r1, r7
 801191e:	4620      	mov	r0, r4
 8011920:	f7ff fdea 	bl	80114f8 <rcl_wait_set_resize>
 8011924:	4605      	mov	r5, r0
 8011926:	2800      	cmp	r0, #0
 8011928:	d0af      	beq.n	801188a <rcl_wait_set_init+0x26>
 801192a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801192c:	bb2b      	cbnz	r3, 801197a <rcl_wait_set_init+0x116>
 801192e:	2600      	movs	r6, #0
 8011930:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8011934:	9600      	str	r6, [sp, #0]
 8011936:	4633      	mov	r3, r6
 8011938:	4632      	mov	r2, r6
 801193a:	4631      	mov	r1, r6
 801193c:	4620      	mov	r0, r4
 801193e:	f7ff fddb 	bl	80114f8 <rcl_wait_set_resize>
 8011942:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8011944:	2800      	cmp	r0, #0
 8011946:	d0a0      	beq.n	801188a <rcl_wait_set_init+0x26>
 8011948:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 801194a:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 801194c:	4798      	blx	r3
 801194e:	4628      	mov	r0, r5
 8011950:	6326      	str	r6, [r4, #48]	@ 0x30
 8011952:	b004      	add	sp, #16
 8011954:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011958:	250b      	movs	r5, #11
 801195a:	4628      	mov	r0, r5
 801195c:	b004      	add	sp, #16
 801195e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011962:	2501      	movs	r5, #1
 8011964:	f002 f932 	bl	8013bcc <rmw_destroy_wait_set>
 8011968:	2800      	cmp	r0, #0
 801196a:	bf18      	it	ne
 801196c:	f44f 7561 	movne.w	r5, #900	@ 0x384
 8011970:	e7dd      	b.n	801192e <rcl_wait_set_init+0xca>
 8011972:	2565      	movs	r5, #101	@ 0x65
 8011974:	e789      	b.n	801188a <rcl_wait_set_init+0x26>
 8011976:	250a      	movs	r5, #10
 8011978:	e787      	b.n	801188a <rcl_wait_set_init+0x26>
 801197a:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801197c:	e7f2      	b.n	8011964 <rcl_wait_set_init+0x100>
 801197e:	bf00      	nop

08011980 <rcl_wait_set_add_guard_condition>:
 8011980:	b318      	cbz	r0, 80119ca <rcl_wait_set_add_guard_condition+0x4a>
 8011982:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8011984:	b570      	push	{r4, r5, r6, lr}
 8011986:	4604      	mov	r4, r0
 8011988:	b30b      	cbz	r3, 80119ce <rcl_wait_set_add_guard_condition+0x4e>
 801198a:	b319      	cbz	r1, 80119d4 <rcl_wait_set_add_guard_condition+0x54>
 801198c:	68dd      	ldr	r5, [r3, #12]
 801198e:	68c0      	ldr	r0, [r0, #12]
 8011990:	4285      	cmp	r5, r0
 8011992:	d217      	bcs.n	80119c4 <rcl_wait_set_add_guard_condition+0x44>
 8011994:	68a0      	ldr	r0, [r4, #8]
 8011996:	1c6e      	adds	r6, r5, #1
 8011998:	60de      	str	r6, [r3, #12]
 801199a:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801199e:	b102      	cbz	r2, 80119a2 <rcl_wait_set_add_guard_condition+0x22>
 80119a0:	6015      	str	r5, [r2, #0]
 80119a2:	4608      	mov	r0, r1
 80119a4:	f7fe fe02 	bl	80105ac <rcl_guard_condition_get_rmw_handle>
 80119a8:	b150      	cbz	r0, 80119c0 <rcl_wait_set_add_guard_condition+0x40>
 80119aa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80119ac:	6842      	ldr	r2, [r0, #4]
 80119ae:	695b      	ldr	r3, [r3, #20]
 80119b0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80119b4:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80119b6:	6913      	ldr	r3, [r2, #16]
 80119b8:	3301      	adds	r3, #1
 80119ba:	2000      	movs	r0, #0
 80119bc:	6113      	str	r3, [r2, #16]
 80119be:	bd70      	pop	{r4, r5, r6, pc}
 80119c0:	2001      	movs	r0, #1
 80119c2:	bd70      	pop	{r4, r5, r6, pc}
 80119c4:	f240 3086 	movw	r0, #902	@ 0x386
 80119c8:	bd70      	pop	{r4, r5, r6, pc}
 80119ca:	200b      	movs	r0, #11
 80119cc:	4770      	bx	lr
 80119ce:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80119d2:	bd70      	pop	{r4, r5, r6, pc}
 80119d4:	200b      	movs	r0, #11
 80119d6:	bd70      	pop	{r4, r5, r6, pc}

080119d8 <rcl_wait_set_add_timer>:
 80119d8:	b328      	cbz	r0, 8011a26 <rcl_wait_set_add_timer+0x4e>
 80119da:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80119dc:	b570      	push	{r4, r5, r6, lr}
 80119de:	4604      	mov	r4, r0
 80119e0:	b31b      	cbz	r3, 8011a2a <rcl_wait_set_add_timer+0x52>
 80119e2:	b329      	cbz	r1, 8011a30 <rcl_wait_set_add_timer+0x58>
 80119e4:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 80119e6:	6965      	ldr	r5, [r4, #20]
 80119e8:	42a8      	cmp	r0, r5
 80119ea:	d219      	bcs.n	8011a20 <rcl_wait_set_add_timer+0x48>
 80119ec:	6925      	ldr	r5, [r4, #16]
 80119ee:	1c46      	adds	r6, r0, #1
 80119f0:	641e      	str	r6, [r3, #64]	@ 0x40
 80119f2:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 80119f6:	b102      	cbz	r2, 80119fa <rcl_wait_set_add_timer+0x22>
 80119f8:	6010      	str	r0, [r2, #0]
 80119fa:	4608      	mov	r0, r1
 80119fc:	f7ff fba6 	bl	801114c <rcl_timer_get_guard_condition>
 8011a00:	b168      	cbz	r0, 8011a1e <rcl_wait_set_add_timer+0x46>
 8011a02:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8011a04:	68e3      	ldr	r3, [r4, #12]
 8011a06:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8011a08:	3b01      	subs	r3, #1
 8011a0a:	441d      	add	r5, r3
 8011a0c:	f7fe fdce 	bl	80105ac <rcl_guard_condition_get_rmw_handle>
 8011a10:	b180      	cbz	r0, 8011a34 <rcl_wait_set_add_timer+0x5c>
 8011a12:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011a14:	6842      	ldr	r2, [r0, #4]
 8011a16:	695b      	ldr	r3, [r3, #20]
 8011a18:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011a1c:	2000      	movs	r0, #0
 8011a1e:	bd70      	pop	{r4, r5, r6, pc}
 8011a20:	f240 3086 	movw	r0, #902	@ 0x386
 8011a24:	bd70      	pop	{r4, r5, r6, pc}
 8011a26:	200b      	movs	r0, #11
 8011a28:	4770      	bx	lr
 8011a2a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011a2e:	bd70      	pop	{r4, r5, r6, pc}
 8011a30:	200b      	movs	r0, #11
 8011a32:	bd70      	pop	{r4, r5, r6, pc}
 8011a34:	2001      	movs	r0, #1
 8011a36:	bd70      	pop	{r4, r5, r6, pc}

08011a38 <rcl_wait_set_add_client>:
 8011a38:	b318      	cbz	r0, 8011a82 <rcl_wait_set_add_client+0x4a>
 8011a3a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8011a3c:	b570      	push	{r4, r5, r6, lr}
 8011a3e:	4604      	mov	r4, r0
 8011a40:	b30b      	cbz	r3, 8011a86 <rcl_wait_set_add_client+0x4e>
 8011a42:	b319      	cbz	r1, 8011a8c <rcl_wait_set_add_client+0x54>
 8011a44:	699d      	ldr	r5, [r3, #24]
 8011a46:	69c0      	ldr	r0, [r0, #28]
 8011a48:	4285      	cmp	r5, r0
 8011a4a:	d217      	bcs.n	8011a7c <rcl_wait_set_add_client+0x44>
 8011a4c:	69a0      	ldr	r0, [r4, #24]
 8011a4e:	1c6e      	adds	r6, r5, #1
 8011a50:	619e      	str	r6, [r3, #24]
 8011a52:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8011a56:	b102      	cbz	r2, 8011a5a <rcl_wait_set_add_client+0x22>
 8011a58:	6015      	str	r5, [r2, #0]
 8011a5a:	4608      	mov	r0, r1
 8011a5c:	f7fe fbe8 	bl	8010230 <rcl_client_get_rmw_handle>
 8011a60:	b150      	cbz	r0, 8011a78 <rcl_wait_set_add_client+0x40>
 8011a62:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011a64:	6842      	ldr	r2, [r0, #4]
 8011a66:	6a1b      	ldr	r3, [r3, #32]
 8011a68:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011a6c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8011a6e:	69d3      	ldr	r3, [r2, #28]
 8011a70:	3301      	adds	r3, #1
 8011a72:	2000      	movs	r0, #0
 8011a74:	61d3      	str	r3, [r2, #28]
 8011a76:	bd70      	pop	{r4, r5, r6, pc}
 8011a78:	2001      	movs	r0, #1
 8011a7a:	bd70      	pop	{r4, r5, r6, pc}
 8011a7c:	f240 3086 	movw	r0, #902	@ 0x386
 8011a80:	bd70      	pop	{r4, r5, r6, pc}
 8011a82:	200b      	movs	r0, #11
 8011a84:	4770      	bx	lr
 8011a86:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011a8a:	bd70      	pop	{r4, r5, r6, pc}
 8011a8c:	200b      	movs	r0, #11
 8011a8e:	bd70      	pop	{r4, r5, r6, pc}

08011a90 <rcl_wait_set_add_service>:
 8011a90:	b318      	cbz	r0, 8011ada <rcl_wait_set_add_service+0x4a>
 8011a92:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8011a94:	b570      	push	{r4, r5, r6, lr}
 8011a96:	4604      	mov	r4, r0
 8011a98:	b30b      	cbz	r3, 8011ade <rcl_wait_set_add_service+0x4e>
 8011a9a:	b319      	cbz	r1, 8011ae4 <rcl_wait_set_add_service+0x54>
 8011a9c:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8011a9e:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8011aa0:	4285      	cmp	r5, r0
 8011aa2:	d217      	bcs.n	8011ad4 <rcl_wait_set_add_service+0x44>
 8011aa4:	6a20      	ldr	r0, [r4, #32]
 8011aa6:	1c6e      	adds	r6, r5, #1
 8011aa8:	625e      	str	r6, [r3, #36]	@ 0x24
 8011aaa:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8011aae:	b102      	cbz	r2, 8011ab2 <rcl_wait_set_add_service+0x22>
 8011ab0:	6015      	str	r5, [r2, #0]
 8011ab2:	4608      	mov	r0, r1
 8011ab4:	f7ff f948 	bl	8010d48 <rcl_service_get_rmw_handle>
 8011ab8:	b150      	cbz	r0, 8011ad0 <rcl_wait_set_add_service+0x40>
 8011aba:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011abc:	6842      	ldr	r2, [r0, #4]
 8011abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011ac0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011ac4:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8011ac6:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8011ac8:	3301      	adds	r3, #1
 8011aca:	2000      	movs	r0, #0
 8011acc:	6293      	str	r3, [r2, #40]	@ 0x28
 8011ace:	bd70      	pop	{r4, r5, r6, pc}
 8011ad0:	2001      	movs	r0, #1
 8011ad2:	bd70      	pop	{r4, r5, r6, pc}
 8011ad4:	f240 3086 	movw	r0, #902	@ 0x386
 8011ad8:	bd70      	pop	{r4, r5, r6, pc}
 8011ada:	200b      	movs	r0, #11
 8011adc:	4770      	bx	lr
 8011ade:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011ae2:	bd70      	pop	{r4, r5, r6, pc}
 8011ae4:	200b      	movs	r0, #11
 8011ae6:	bd70      	pop	{r4, r5, r6, pc}

08011ae8 <rcl_wait>:
 8011ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011aec:	ed2d 8b02 	vpush	{d8}
 8011af0:	b08d      	sub	sp, #52	@ 0x34
 8011af2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011af6:	2800      	cmp	r0, #0
 8011af8:	f000 8143 	beq.w	8011d82 <rcl_wait+0x29a>
 8011afc:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8011afe:	4605      	mov	r5, r0
 8011b00:	2e00      	cmp	r6, #0
 8011b02:	f000 8112 	beq.w	8011d2a <rcl_wait+0x242>
 8011b06:	6843      	ldr	r3, [r0, #4]
 8011b08:	b983      	cbnz	r3, 8011b2c <rcl_wait+0x44>
 8011b0a:	68eb      	ldr	r3, [r5, #12]
 8011b0c:	b973      	cbnz	r3, 8011b2c <rcl_wait+0x44>
 8011b0e:	696b      	ldr	r3, [r5, #20]
 8011b10:	b963      	cbnz	r3, 8011b2c <rcl_wait+0x44>
 8011b12:	69eb      	ldr	r3, [r5, #28]
 8011b14:	b953      	cbnz	r3, 8011b2c <rcl_wait+0x44>
 8011b16:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8011b18:	b943      	cbnz	r3, 8011b2c <rcl_wait+0x44>
 8011b1a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8011b1c:	b933      	cbnz	r3, 8011b2c <rcl_wait+0x44>
 8011b1e:	f240 3085 	movw	r0, #901	@ 0x385
 8011b22:	b00d      	add	sp, #52	@ 0x34
 8011b24:	ecbd 8b02 	vpop	{d8}
 8011b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b2c:	9b04      	ldr	r3, [sp, #16]
 8011b2e:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8011b30:	2b01      	cmp	r3, #1
 8011b32:	9b05      	ldr	r3, [sp, #20]
 8011b34:	f173 0300 	sbcs.w	r3, r3, #0
 8011b38:	f2c0 80f0 	blt.w	8011d1c <rcl_wait+0x234>
 8011b3c:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8011b40:	4643      	mov	r3, r8
 8011b42:	2a00      	cmp	r2, #0
 8011b44:	f000 8133 	beq.w	8011dae <rcl_wait+0x2c6>
 8011b48:	2400      	movs	r4, #0
 8011b4a:	4613      	mov	r3, r2
 8011b4c:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 8011dc0 <rcl_wait+0x2d8>
 8011b50:	46a2      	mov	sl, r4
 8011b52:	46a3      	mov	fp, r4
 8011b54:	f240 3921 	movw	r9, #801	@ 0x321
 8011b58:	4632      	mov	r2, r6
 8011b5a:	e014      	b.n	8011b86 <rcl_wait+0x9e>
 8011b5c:	2800      	cmp	r0, #0
 8011b5e:	d1e0      	bne.n	8011b22 <rcl_wait+0x3a>
 8011b60:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8011b64:	4542      	cmp	r2, r8
 8011b66:	eb73 0107 	sbcs.w	r1, r3, r7
 8011b6a:	da03      	bge.n	8011b74 <rcl_wait+0x8c>
 8011b6c:	4690      	mov	r8, r2
 8011b6e:	461f      	mov	r7, r3
 8011b70:	f04f 0b01 	mov.w	fp, #1
 8011b74:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8011b76:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8011b78:	3401      	adds	r4, #1
 8011b7a:	f14a 0a00 	adc.w	sl, sl, #0
 8011b7e:	429c      	cmp	r4, r3
 8011b80:	f17a 0100 	sbcs.w	r1, sl, #0
 8011b84:	d228      	bcs.n	8011bd8 <rcl_wait+0xf0>
 8011b86:	6928      	ldr	r0, [r5, #16]
 8011b88:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8011b8c:	a908      	add	r1, sp, #32
 8011b8e:	00a6      	lsls	r6, r4, #2
 8011b90:	2800      	cmp	r0, #0
 8011b92:	d0f1      	beq.n	8011b78 <rcl_wait+0x90>
 8011b94:	68eb      	ldr	r3, [r5, #12]
 8011b96:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8011b9a:	4423      	add	r3, r4
 8011b9c:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8011ba0:	f1be 0f00 	cmp.w	lr, #0
 8011ba4:	d006      	beq.n	8011bb4 <rcl_wait+0xcc>
 8011ba6:	6913      	ldr	r3, [r2, #16]
 8011ba8:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8011bac:	3301      	adds	r3, #1
 8011bae:	6113      	str	r3, [r2, #16]
 8011bb0:	692b      	ldr	r3, [r5, #16]
 8011bb2:	5998      	ldr	r0, [r3, r6]
 8011bb4:	ed8d 8b08 	vstr	d8, [sp, #32]
 8011bb8:	f7ff fa96 	bl	80110e8 <rcl_timer_get_time_until_next_call>
 8011bbc:	4548      	cmp	r0, r9
 8011bbe:	d1cd      	bne.n	8011b5c <rcl_wait+0x74>
 8011bc0:	692b      	ldr	r3, [r5, #16]
 8011bc2:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8011bc4:	2100      	movs	r1, #0
 8011bc6:	5199      	str	r1, [r3, r6]
 8011bc8:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8011bca:	3401      	adds	r4, #1
 8011bcc:	f14a 0a00 	adc.w	sl, sl, #0
 8011bd0:	429c      	cmp	r4, r3
 8011bd2:	f17a 0100 	sbcs.w	r1, sl, #0
 8011bd6:	d3d6      	bcc.n	8011b86 <rcl_wait+0x9e>
 8011bd8:	4616      	mov	r6, r2
 8011bda:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8011bde:	4313      	orrs	r3, r2
 8011be0:	46d9      	mov	r9, fp
 8011be2:	f040 80a9 	bne.w	8011d38 <rcl_wait+0x250>
 8011be6:	2300      	movs	r3, #0
 8011be8:	2200      	movs	r2, #0
 8011bea:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011bee:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8011bf2:	ab08      	add	r3, sp, #32
 8011bf4:	9302      	str	r3, [sp, #8]
 8011bf6:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 8011bf8:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 8011bfc:	e9cd 3200 	strd	r3, r2, [sp]
 8011c00:	f106 0110 	add.w	r1, r6, #16
 8011c04:	f106 031c 	add.w	r3, r6, #28
 8011c08:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 8011c0c:	1d30      	adds	r0, r6, #4
 8011c0e:	f001 fe5b 	bl	80138c8 <rmw_wait>
 8011c12:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8011c14:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011c16:	4680      	mov	r8, r0
 8011c18:	b1ca      	cbz	r2, 8011c4e <rcl_wait+0x166>
 8011c1a:	2400      	movs	r4, #0
 8011c1c:	4627      	mov	r7, r4
 8011c1e:	692a      	ldr	r2, [r5, #16]
 8011c20:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8011c24:	f10d 011f 	add.w	r1, sp, #31
 8011c28:	00a6      	lsls	r6, r4, #2
 8011c2a:	b160      	cbz	r0, 8011c46 <rcl_wait+0x15e>
 8011c2c:	f88d 701f 	strb.w	r7, [sp, #31]
 8011c30:	f7ff fa20 	bl	8011074 <rcl_timer_is_ready>
 8011c34:	2800      	cmp	r0, #0
 8011c36:	f47f af74 	bne.w	8011b22 <rcl_wait+0x3a>
 8011c3a:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8011c3e:	b90b      	cbnz	r3, 8011c44 <rcl_wait+0x15c>
 8011c40:	692a      	ldr	r2, [r5, #16]
 8011c42:	5193      	str	r3, [r2, r6]
 8011c44:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8011c46:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011c48:	3401      	adds	r4, #1
 8011c4a:	42a2      	cmp	r2, r4
 8011c4c:	d8e7      	bhi.n	8011c1e <rcl_wait+0x136>
 8011c4e:	f038 0002 	bics.w	r0, r8, #2
 8011c52:	f040 8090 	bne.w	8011d76 <rcl_wait+0x28e>
 8011c56:	686e      	ldr	r6, [r5, #4]
 8011c58:	4602      	mov	r2, r0
 8011c5a:	b91e      	cbnz	r6, 8011c64 <rcl_wait+0x17c>
 8011c5c:	e00d      	b.n	8011c7a <rcl_wait+0x192>
 8011c5e:	3201      	adds	r2, #1
 8011c60:	42b2      	cmp	r2, r6
 8011c62:	d00a      	beq.n	8011c7a <rcl_wait+0x192>
 8011c64:	6899      	ldr	r1, [r3, #8]
 8011c66:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8011c6a:	2900      	cmp	r1, #0
 8011c6c:	d1f7      	bne.n	8011c5e <rcl_wait+0x176>
 8011c6e:	682c      	ldr	r4, [r5, #0]
 8011c70:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8011c74:	3201      	adds	r2, #1
 8011c76:	42b2      	cmp	r2, r6
 8011c78:	d1f4      	bne.n	8011c64 <rcl_wait+0x17c>
 8011c7a:	68ee      	ldr	r6, [r5, #12]
 8011c7c:	2200      	movs	r2, #0
 8011c7e:	b91e      	cbnz	r6, 8011c88 <rcl_wait+0x1a0>
 8011c80:	e00d      	b.n	8011c9e <rcl_wait+0x1b6>
 8011c82:	3201      	adds	r2, #1
 8011c84:	42b2      	cmp	r2, r6
 8011c86:	d00a      	beq.n	8011c9e <rcl_wait+0x1b6>
 8011c88:	6959      	ldr	r1, [r3, #20]
 8011c8a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8011c8e:	2900      	cmp	r1, #0
 8011c90:	d1f7      	bne.n	8011c82 <rcl_wait+0x19a>
 8011c92:	68ac      	ldr	r4, [r5, #8]
 8011c94:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8011c98:	3201      	adds	r2, #1
 8011c9a:	42b2      	cmp	r2, r6
 8011c9c:	d1f4      	bne.n	8011c88 <rcl_wait+0x1a0>
 8011c9e:	69ee      	ldr	r6, [r5, #28]
 8011ca0:	2200      	movs	r2, #0
 8011ca2:	b91e      	cbnz	r6, 8011cac <rcl_wait+0x1c4>
 8011ca4:	e00d      	b.n	8011cc2 <rcl_wait+0x1da>
 8011ca6:	3201      	adds	r2, #1
 8011ca8:	42b2      	cmp	r2, r6
 8011caa:	d00a      	beq.n	8011cc2 <rcl_wait+0x1da>
 8011cac:	6a19      	ldr	r1, [r3, #32]
 8011cae:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8011cb2:	2900      	cmp	r1, #0
 8011cb4:	d1f7      	bne.n	8011ca6 <rcl_wait+0x1be>
 8011cb6:	69ac      	ldr	r4, [r5, #24]
 8011cb8:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8011cbc:	3201      	adds	r2, #1
 8011cbe:	42b2      	cmp	r2, r6
 8011cc0:	d1f4      	bne.n	8011cac <rcl_wait+0x1c4>
 8011cc2:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 8011cc4:	2200      	movs	r2, #0
 8011cc6:	b91e      	cbnz	r6, 8011cd0 <rcl_wait+0x1e8>
 8011cc8:	e00d      	b.n	8011ce6 <rcl_wait+0x1fe>
 8011cca:	3201      	adds	r2, #1
 8011ccc:	4296      	cmp	r6, r2
 8011cce:	d00a      	beq.n	8011ce6 <rcl_wait+0x1fe>
 8011cd0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8011cd2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8011cd6:	2900      	cmp	r1, #0
 8011cd8:	d1f7      	bne.n	8011cca <rcl_wait+0x1e2>
 8011cda:	6a2c      	ldr	r4, [r5, #32]
 8011cdc:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8011ce0:	3201      	adds	r2, #1
 8011ce2:	4296      	cmp	r6, r2
 8011ce4:	d1f4      	bne.n	8011cd0 <rcl_wait+0x1e8>
 8011ce6:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 8011ce8:	2200      	movs	r2, #0
 8011cea:	b91e      	cbnz	r6, 8011cf4 <rcl_wait+0x20c>
 8011cec:	e00d      	b.n	8011d0a <rcl_wait+0x222>
 8011cee:	3201      	adds	r2, #1
 8011cf0:	42b2      	cmp	r2, r6
 8011cf2:	d00a      	beq.n	8011d0a <rcl_wait+0x222>
 8011cf4:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8011cf6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8011cfa:	2900      	cmp	r1, #0
 8011cfc:	d1f7      	bne.n	8011cee <rcl_wait+0x206>
 8011cfe:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 8011d00:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8011d04:	3201      	adds	r2, #1
 8011d06:	42b2      	cmp	r2, r6
 8011d08:	d1f4      	bne.n	8011cf4 <rcl_wait+0x20c>
 8011d0a:	f1b8 0f02 	cmp.w	r8, #2
 8011d0e:	f47f af08 	bne.w	8011b22 <rcl_wait+0x3a>
 8011d12:	464b      	mov	r3, r9
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	bf08      	it	eq
 8011d18:	2002      	moveq	r0, #2
 8011d1a:	e702      	b.n	8011b22 <rcl_wait+0x3a>
 8011d1c:	2a00      	cmp	r2, #0
 8011d1e:	d03a      	beq.n	8011d96 <rcl_wait+0x2ae>
 8011d20:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8011d24:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8011d28:	e70e      	b.n	8011b48 <rcl_wait+0x60>
 8011d2a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011d2e:	b00d      	add	sp, #52	@ 0x34
 8011d30:	ecbd 8b02 	vpop	{d8}
 8011d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d38:	9b04      	ldr	r3, [sp, #16]
 8011d3a:	2b01      	cmp	r3, #1
 8011d3c:	9b05      	ldr	r3, [sp, #20]
 8011d3e:	f173 0300 	sbcs.w	r3, r3, #0
 8011d42:	db24      	blt.n	8011d8e <rcl_wait+0x2a6>
 8011d44:	2f00      	cmp	r7, #0
 8011d46:	bfbc      	itt	lt
 8011d48:	f04f 0800 	movlt.w	r8, #0
 8011d4c:	4647      	movlt	r7, r8
 8011d4e:	a31e      	add	r3, pc, #120	@ (adr r3, 8011dc8 <rcl_wait+0x2e0>)
 8011d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d54:	4640      	mov	r0, r8
 8011d56:	4639      	mov	r1, r7
 8011d58:	f7ee ff56 	bl	8000c08 <__aeabi_ldivmod>
 8011d5c:	a31a      	add	r3, pc, #104	@ (adr r3, 8011dc8 <rcl_wait+0x2e0>)
 8011d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d62:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011d66:	4640      	mov	r0, r8
 8011d68:	4639      	mov	r1, r7
 8011d6a:	f7ee ff4d 	bl	8000c08 <__aeabi_ldivmod>
 8011d6e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8011d72:	ab08      	add	r3, sp, #32
 8011d74:	e73e      	b.n	8011bf4 <rcl_wait+0x10c>
 8011d76:	2001      	movs	r0, #1
 8011d78:	b00d      	add	sp, #52	@ 0x34
 8011d7a:	ecbd 8b02 	vpop	{d8}
 8011d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d82:	200b      	movs	r0, #11
 8011d84:	b00d      	add	sp, #52	@ 0x34
 8011d86:	ecbd 8b02 	vpop	{d8}
 8011d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d8e:	465b      	mov	r3, fp
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d1d7      	bne.n	8011d44 <rcl_wait+0x25c>
 8011d94:	e72e      	b.n	8011bf4 <rcl_wait+0x10c>
 8011d96:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8011d9a:	430b      	orrs	r3, r1
 8011d9c:	bf08      	it	eq
 8011d9e:	4691      	moveq	r9, r2
 8011da0:	f43f af21 	beq.w	8011be6 <rcl_wait+0xfe>
 8011da4:	9b04      	ldr	r3, [sp, #16]
 8011da6:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8011daa:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8011dae:	2b01      	cmp	r3, #1
 8011db0:	9b05      	ldr	r3, [sp, #20]
 8011db2:	f173 0300 	sbcs.w	r3, r3, #0
 8011db6:	f04f 0300 	mov.w	r3, #0
 8011dba:	4699      	mov	r9, r3
 8011dbc:	dac2      	bge.n	8011d44 <rcl_wait+0x25c>
 8011dbe:	e719      	b.n	8011bf4 <rcl_wait+0x10c>
 8011dc0:	ffffffff 	.word	0xffffffff
 8011dc4:	7fffffff 	.word	0x7fffffff
 8011dc8:	3b9aca00 	.word	0x3b9aca00
 8011dcc:	00000000 	.word	0x00000000

08011dd0 <rcl_action_take_goal_response>:
 8011dd0:	2800      	cmp	r0, #0
 8011dd2:	d039      	beq.n	8011e48 <rcl_action_take_goal_response+0x78>
 8011dd4:	b570      	push	{r4, r5, r6, lr}
 8011dd6:	4604      	mov	r4, r0
 8011dd8:	6800      	ldr	r0, [r0, #0]
 8011dda:	b380      	cbz	r0, 8011e3e <rcl_action_take_goal_response+0x6e>
 8011ddc:	460d      	mov	r5, r1
 8011dde:	4616      	mov	r6, r2
 8011de0:	f7fe faaa 	bl	8010338 <rcl_client_is_valid>
 8011de4:	b330      	cbz	r0, 8011e34 <rcl_action_take_goal_response+0x64>
 8011de6:	6820      	ldr	r0, [r4, #0]
 8011de8:	3004      	adds	r0, #4
 8011dea:	f7fe faa5 	bl	8010338 <rcl_client_is_valid>
 8011dee:	b308      	cbz	r0, 8011e34 <rcl_action_take_goal_response+0x64>
 8011df0:	6820      	ldr	r0, [r4, #0]
 8011df2:	3008      	adds	r0, #8
 8011df4:	f7fe faa0 	bl	8010338 <rcl_client_is_valid>
 8011df8:	b1e0      	cbz	r0, 8011e34 <rcl_action_take_goal_response+0x64>
 8011dfa:	6820      	ldr	r0, [r4, #0]
 8011dfc:	300c      	adds	r0, #12
 8011dfe:	f7f8 fe3b 	bl	800aa78 <rcl_subscription_is_valid>
 8011e02:	b1b8      	cbz	r0, 8011e34 <rcl_action_take_goal_response+0x64>
 8011e04:	6820      	ldr	r0, [r4, #0]
 8011e06:	3010      	adds	r0, #16
 8011e08:	f7f8 fe36 	bl	800aa78 <rcl_subscription_is_valid>
 8011e0c:	b190      	cbz	r0, 8011e34 <rcl_action_take_goal_response+0x64>
 8011e0e:	b1cd      	cbz	r5, 8011e44 <rcl_action_take_goal_response+0x74>
 8011e10:	b1c6      	cbz	r6, 8011e44 <rcl_action_take_goal_response+0x74>
 8011e12:	6820      	ldr	r0, [r4, #0]
 8011e14:	4632      	mov	r2, r6
 8011e16:	4629      	mov	r1, r5
 8011e18:	f7fe fa46 	bl	80102a8 <rcl_take_response>
 8011e1c:	b148      	cbz	r0, 8011e32 <rcl_action_take_goal_response+0x62>
 8011e1e:	280a      	cmp	r0, #10
 8011e20:	d007      	beq.n	8011e32 <rcl_action_take_goal_response+0x62>
 8011e22:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8011e26:	f640 0337 	movw	r3, #2103	@ 0x837
 8011e2a:	4290      	cmp	r0, r2
 8011e2c:	bf0c      	ite	eq
 8011e2e:	4618      	moveq	r0, r3
 8011e30:	2001      	movne	r0, #1
 8011e32:	bd70      	pop	{r4, r5, r6, pc}
 8011e34:	f7f9 fdb8 	bl	800b9a8 <rcutils_reset_error>
 8011e38:	f640 0036 	movw	r0, #2102	@ 0x836
 8011e3c:	bd70      	pop	{r4, r5, r6, pc}
 8011e3e:	f640 0036 	movw	r0, #2102	@ 0x836
 8011e42:	bd70      	pop	{r4, r5, r6, pc}
 8011e44:	200b      	movs	r0, #11
 8011e46:	bd70      	pop	{r4, r5, r6, pc}
 8011e48:	f640 0036 	movw	r0, #2102	@ 0x836
 8011e4c:	4770      	bx	lr
 8011e4e:	bf00      	nop

08011e50 <rcl_action_send_result_request>:
 8011e50:	b390      	cbz	r0, 8011eb8 <rcl_action_send_result_request+0x68>
 8011e52:	b570      	push	{r4, r5, r6, lr}
 8011e54:	4604      	mov	r4, r0
 8011e56:	6800      	ldr	r0, [r0, #0]
 8011e58:	b348      	cbz	r0, 8011eae <rcl_action_send_result_request+0x5e>
 8011e5a:	460d      	mov	r5, r1
 8011e5c:	4616      	mov	r6, r2
 8011e5e:	f7fe fa6b 	bl	8010338 <rcl_client_is_valid>
 8011e62:	b1f8      	cbz	r0, 8011ea4 <rcl_action_send_result_request+0x54>
 8011e64:	6820      	ldr	r0, [r4, #0]
 8011e66:	3004      	adds	r0, #4
 8011e68:	f7fe fa66 	bl	8010338 <rcl_client_is_valid>
 8011e6c:	b1d0      	cbz	r0, 8011ea4 <rcl_action_send_result_request+0x54>
 8011e6e:	6820      	ldr	r0, [r4, #0]
 8011e70:	3008      	adds	r0, #8
 8011e72:	f7fe fa61 	bl	8010338 <rcl_client_is_valid>
 8011e76:	b1a8      	cbz	r0, 8011ea4 <rcl_action_send_result_request+0x54>
 8011e78:	6820      	ldr	r0, [r4, #0]
 8011e7a:	300c      	adds	r0, #12
 8011e7c:	f7f8 fdfc 	bl	800aa78 <rcl_subscription_is_valid>
 8011e80:	b180      	cbz	r0, 8011ea4 <rcl_action_send_result_request+0x54>
 8011e82:	6820      	ldr	r0, [r4, #0]
 8011e84:	3010      	adds	r0, #16
 8011e86:	f7f8 fdf7 	bl	800aa78 <rcl_subscription_is_valid>
 8011e8a:	b158      	cbz	r0, 8011ea4 <rcl_action_send_result_request+0x54>
 8011e8c:	b195      	cbz	r5, 8011eb4 <rcl_action_send_result_request+0x64>
 8011e8e:	b18e      	cbz	r6, 8011eb4 <rcl_action_send_result_request+0x64>
 8011e90:	6820      	ldr	r0, [r4, #0]
 8011e92:	4632      	mov	r2, r6
 8011e94:	4629      	mov	r1, r5
 8011e96:	3008      	adds	r0, #8
 8011e98:	f7fe f9d0 	bl	801023c <rcl_send_request>
 8011e9c:	3800      	subs	r0, #0
 8011e9e:	bf18      	it	ne
 8011ea0:	2001      	movne	r0, #1
 8011ea2:	bd70      	pop	{r4, r5, r6, pc}
 8011ea4:	f7f9 fd80 	bl	800b9a8 <rcutils_reset_error>
 8011ea8:	f640 0036 	movw	r0, #2102	@ 0x836
 8011eac:	bd70      	pop	{r4, r5, r6, pc}
 8011eae:	f640 0036 	movw	r0, #2102	@ 0x836
 8011eb2:	bd70      	pop	{r4, r5, r6, pc}
 8011eb4:	200b      	movs	r0, #11
 8011eb6:	bd70      	pop	{r4, r5, r6, pc}
 8011eb8:	f640 0036 	movw	r0, #2102	@ 0x836
 8011ebc:	4770      	bx	lr
 8011ebe:	bf00      	nop

08011ec0 <rcl_action_take_result_response>:
 8011ec0:	2800      	cmp	r0, #0
 8011ec2:	d03a      	beq.n	8011f3a <rcl_action_take_result_response+0x7a>
 8011ec4:	b570      	push	{r4, r5, r6, lr}
 8011ec6:	4604      	mov	r4, r0
 8011ec8:	6800      	ldr	r0, [r0, #0]
 8011eca:	b388      	cbz	r0, 8011f30 <rcl_action_take_result_response+0x70>
 8011ecc:	460d      	mov	r5, r1
 8011ece:	4616      	mov	r6, r2
 8011ed0:	f7fe fa32 	bl	8010338 <rcl_client_is_valid>
 8011ed4:	b338      	cbz	r0, 8011f26 <rcl_action_take_result_response+0x66>
 8011ed6:	6820      	ldr	r0, [r4, #0]
 8011ed8:	3004      	adds	r0, #4
 8011eda:	f7fe fa2d 	bl	8010338 <rcl_client_is_valid>
 8011ede:	b310      	cbz	r0, 8011f26 <rcl_action_take_result_response+0x66>
 8011ee0:	6820      	ldr	r0, [r4, #0]
 8011ee2:	3008      	adds	r0, #8
 8011ee4:	f7fe fa28 	bl	8010338 <rcl_client_is_valid>
 8011ee8:	b1e8      	cbz	r0, 8011f26 <rcl_action_take_result_response+0x66>
 8011eea:	6820      	ldr	r0, [r4, #0]
 8011eec:	300c      	adds	r0, #12
 8011eee:	f7f8 fdc3 	bl	800aa78 <rcl_subscription_is_valid>
 8011ef2:	b1c0      	cbz	r0, 8011f26 <rcl_action_take_result_response+0x66>
 8011ef4:	6820      	ldr	r0, [r4, #0]
 8011ef6:	3010      	adds	r0, #16
 8011ef8:	f7f8 fdbe 	bl	800aa78 <rcl_subscription_is_valid>
 8011efc:	b198      	cbz	r0, 8011f26 <rcl_action_take_result_response+0x66>
 8011efe:	b1d5      	cbz	r5, 8011f36 <rcl_action_take_result_response+0x76>
 8011f00:	b1ce      	cbz	r6, 8011f36 <rcl_action_take_result_response+0x76>
 8011f02:	6820      	ldr	r0, [r4, #0]
 8011f04:	4632      	mov	r2, r6
 8011f06:	4629      	mov	r1, r5
 8011f08:	3008      	adds	r0, #8
 8011f0a:	f7fe f9cd 	bl	80102a8 <rcl_take_response>
 8011f0e:	b148      	cbz	r0, 8011f24 <rcl_action_take_result_response+0x64>
 8011f10:	280a      	cmp	r0, #10
 8011f12:	d007      	beq.n	8011f24 <rcl_action_take_result_response+0x64>
 8011f14:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8011f18:	f640 0337 	movw	r3, #2103	@ 0x837
 8011f1c:	4290      	cmp	r0, r2
 8011f1e:	bf0c      	ite	eq
 8011f20:	4618      	moveq	r0, r3
 8011f22:	2001      	movne	r0, #1
 8011f24:	bd70      	pop	{r4, r5, r6, pc}
 8011f26:	f7f9 fd3f 	bl	800b9a8 <rcutils_reset_error>
 8011f2a:	f640 0036 	movw	r0, #2102	@ 0x836
 8011f2e:	bd70      	pop	{r4, r5, r6, pc}
 8011f30:	f640 0036 	movw	r0, #2102	@ 0x836
 8011f34:	bd70      	pop	{r4, r5, r6, pc}
 8011f36:	200b      	movs	r0, #11
 8011f38:	bd70      	pop	{r4, r5, r6, pc}
 8011f3a:	f640 0036 	movw	r0, #2102	@ 0x836
 8011f3e:	4770      	bx	lr

08011f40 <rcl_action_take_cancel_response>:
 8011f40:	2800      	cmp	r0, #0
 8011f42:	d03a      	beq.n	8011fba <rcl_action_take_cancel_response+0x7a>
 8011f44:	b570      	push	{r4, r5, r6, lr}
 8011f46:	4604      	mov	r4, r0
 8011f48:	6800      	ldr	r0, [r0, #0]
 8011f4a:	b388      	cbz	r0, 8011fb0 <rcl_action_take_cancel_response+0x70>
 8011f4c:	460d      	mov	r5, r1
 8011f4e:	4616      	mov	r6, r2
 8011f50:	f7fe f9f2 	bl	8010338 <rcl_client_is_valid>
 8011f54:	b338      	cbz	r0, 8011fa6 <rcl_action_take_cancel_response+0x66>
 8011f56:	6820      	ldr	r0, [r4, #0]
 8011f58:	3004      	adds	r0, #4
 8011f5a:	f7fe f9ed 	bl	8010338 <rcl_client_is_valid>
 8011f5e:	b310      	cbz	r0, 8011fa6 <rcl_action_take_cancel_response+0x66>
 8011f60:	6820      	ldr	r0, [r4, #0]
 8011f62:	3008      	adds	r0, #8
 8011f64:	f7fe f9e8 	bl	8010338 <rcl_client_is_valid>
 8011f68:	b1e8      	cbz	r0, 8011fa6 <rcl_action_take_cancel_response+0x66>
 8011f6a:	6820      	ldr	r0, [r4, #0]
 8011f6c:	300c      	adds	r0, #12
 8011f6e:	f7f8 fd83 	bl	800aa78 <rcl_subscription_is_valid>
 8011f72:	b1c0      	cbz	r0, 8011fa6 <rcl_action_take_cancel_response+0x66>
 8011f74:	6820      	ldr	r0, [r4, #0]
 8011f76:	3010      	adds	r0, #16
 8011f78:	f7f8 fd7e 	bl	800aa78 <rcl_subscription_is_valid>
 8011f7c:	b198      	cbz	r0, 8011fa6 <rcl_action_take_cancel_response+0x66>
 8011f7e:	b1d5      	cbz	r5, 8011fb6 <rcl_action_take_cancel_response+0x76>
 8011f80:	b1ce      	cbz	r6, 8011fb6 <rcl_action_take_cancel_response+0x76>
 8011f82:	6820      	ldr	r0, [r4, #0]
 8011f84:	4632      	mov	r2, r6
 8011f86:	4629      	mov	r1, r5
 8011f88:	3004      	adds	r0, #4
 8011f8a:	f7fe f98d 	bl	80102a8 <rcl_take_response>
 8011f8e:	b148      	cbz	r0, 8011fa4 <rcl_action_take_cancel_response+0x64>
 8011f90:	280a      	cmp	r0, #10
 8011f92:	d007      	beq.n	8011fa4 <rcl_action_take_cancel_response+0x64>
 8011f94:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8011f98:	f640 0337 	movw	r3, #2103	@ 0x837
 8011f9c:	4290      	cmp	r0, r2
 8011f9e:	bf0c      	ite	eq
 8011fa0:	4618      	moveq	r0, r3
 8011fa2:	2001      	movne	r0, #1
 8011fa4:	bd70      	pop	{r4, r5, r6, pc}
 8011fa6:	f7f9 fcff 	bl	800b9a8 <rcutils_reset_error>
 8011faa:	f640 0036 	movw	r0, #2102	@ 0x836
 8011fae:	bd70      	pop	{r4, r5, r6, pc}
 8011fb0:	f640 0036 	movw	r0, #2102	@ 0x836
 8011fb4:	bd70      	pop	{r4, r5, r6, pc}
 8011fb6:	200b      	movs	r0, #11
 8011fb8:	bd70      	pop	{r4, r5, r6, pc}
 8011fba:	f640 0036 	movw	r0, #2102	@ 0x836
 8011fbe:	4770      	bx	lr

08011fc0 <rcl_action_take_feedback>:
 8011fc0:	2800      	cmp	r0, #0
 8011fc2:	d038      	beq.n	8012036 <rcl_action_take_feedback+0x76>
 8011fc4:	b530      	push	{r4, r5, lr}
 8011fc6:	4604      	mov	r4, r0
 8011fc8:	6800      	ldr	r0, [r0, #0]
 8011fca:	b091      	sub	sp, #68	@ 0x44
 8011fcc:	b378      	cbz	r0, 801202e <rcl_action_take_feedback+0x6e>
 8011fce:	460d      	mov	r5, r1
 8011fd0:	f7fe f9b2 	bl	8010338 <rcl_client_is_valid>
 8011fd4:	b328      	cbz	r0, 8012022 <rcl_action_take_feedback+0x62>
 8011fd6:	6820      	ldr	r0, [r4, #0]
 8011fd8:	3004      	adds	r0, #4
 8011fda:	f7fe f9ad 	bl	8010338 <rcl_client_is_valid>
 8011fde:	b300      	cbz	r0, 8012022 <rcl_action_take_feedback+0x62>
 8011fe0:	6820      	ldr	r0, [r4, #0]
 8011fe2:	3008      	adds	r0, #8
 8011fe4:	f7fe f9a8 	bl	8010338 <rcl_client_is_valid>
 8011fe8:	b1d8      	cbz	r0, 8012022 <rcl_action_take_feedback+0x62>
 8011fea:	6820      	ldr	r0, [r4, #0]
 8011fec:	300c      	adds	r0, #12
 8011fee:	f7f8 fd43 	bl	800aa78 <rcl_subscription_is_valid>
 8011ff2:	b1b0      	cbz	r0, 8012022 <rcl_action_take_feedback+0x62>
 8011ff4:	6820      	ldr	r0, [r4, #0]
 8011ff6:	3010      	adds	r0, #16
 8011ff8:	f7f8 fd3e 	bl	800aa78 <rcl_subscription_is_valid>
 8011ffc:	b188      	cbz	r0, 8012022 <rcl_action_take_feedback+0x62>
 8011ffe:	b1ed      	cbz	r5, 801203c <rcl_action_take_feedback+0x7c>
 8012000:	6820      	ldr	r0, [r4, #0]
 8012002:	2300      	movs	r3, #0
 8012004:	466a      	mov	r2, sp
 8012006:	4629      	mov	r1, r5
 8012008:	300c      	adds	r0, #12
 801200a:	f7f8 fcd7 	bl	800a9bc <rcl_take>
 801200e:	b160      	cbz	r0, 801202a <rcl_action_take_feedback+0x6a>
 8012010:	f240 1391 	movw	r3, #401	@ 0x191
 8012014:	4298      	cmp	r0, r3
 8012016:	d014      	beq.n	8012042 <rcl_action_take_feedback+0x82>
 8012018:	280a      	cmp	r0, #10
 801201a:	bf18      	it	ne
 801201c:	2001      	movne	r0, #1
 801201e:	b011      	add	sp, #68	@ 0x44
 8012020:	bd30      	pop	{r4, r5, pc}
 8012022:	f7f9 fcc1 	bl	800b9a8 <rcutils_reset_error>
 8012026:	f640 0036 	movw	r0, #2102	@ 0x836
 801202a:	b011      	add	sp, #68	@ 0x44
 801202c:	bd30      	pop	{r4, r5, pc}
 801202e:	f640 0036 	movw	r0, #2102	@ 0x836
 8012032:	b011      	add	sp, #68	@ 0x44
 8012034:	bd30      	pop	{r4, r5, pc}
 8012036:	f640 0036 	movw	r0, #2102	@ 0x836
 801203a:	4770      	bx	lr
 801203c:	200b      	movs	r0, #11
 801203e:	b011      	add	sp, #68	@ 0x44
 8012040:	bd30      	pop	{r4, r5, pc}
 8012042:	f640 0037 	movw	r0, #2103	@ 0x837
 8012046:	e7f0      	b.n	801202a <rcl_action_take_feedback+0x6a>

08012048 <rcl_action_wait_set_add_action_client>:
 8012048:	2800      	cmp	r0, #0
 801204a:	d048      	beq.n	80120de <rcl_action_wait_set_add_action_client+0x96>
 801204c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801204e:	460c      	mov	r4, r1
 8012050:	2900      	cmp	r1, #0
 8012052:	d03c      	beq.n	80120ce <rcl_action_wait_set_add_action_client+0x86>
 8012054:	4605      	mov	r5, r0
 8012056:	6808      	ldr	r0, [r1, #0]
 8012058:	2800      	cmp	r0, #0
 801205a:	d038      	beq.n	80120ce <rcl_action_wait_set_add_action_client+0x86>
 801205c:	4617      	mov	r7, r2
 801205e:	461e      	mov	r6, r3
 8012060:	f7fe f96a 	bl	8010338 <rcl_client_is_valid>
 8012064:	b3b0      	cbz	r0, 80120d4 <rcl_action_wait_set_add_action_client+0x8c>
 8012066:	6820      	ldr	r0, [r4, #0]
 8012068:	3004      	adds	r0, #4
 801206a:	f7fe f965 	bl	8010338 <rcl_client_is_valid>
 801206e:	b388      	cbz	r0, 80120d4 <rcl_action_wait_set_add_action_client+0x8c>
 8012070:	6820      	ldr	r0, [r4, #0]
 8012072:	3008      	adds	r0, #8
 8012074:	f7fe f960 	bl	8010338 <rcl_client_is_valid>
 8012078:	b360      	cbz	r0, 80120d4 <rcl_action_wait_set_add_action_client+0x8c>
 801207a:	6820      	ldr	r0, [r4, #0]
 801207c:	300c      	adds	r0, #12
 801207e:	f7f8 fcfb 	bl	800aa78 <rcl_subscription_is_valid>
 8012082:	b338      	cbz	r0, 80120d4 <rcl_action_wait_set_add_action_client+0x8c>
 8012084:	6820      	ldr	r0, [r4, #0]
 8012086:	3010      	adds	r0, #16
 8012088:	f7f8 fcf6 	bl	800aa78 <rcl_subscription_is_valid>
 801208c:	b310      	cbz	r0, 80120d4 <rcl_action_wait_set_add_action_client+0x8c>
 801208e:	6821      	ldr	r1, [r4, #0]
 8012090:	4628      	mov	r0, r5
 8012092:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 8012096:	f7ff fccf 	bl	8011a38 <rcl_wait_set_add_client>
 801209a:	b9b8      	cbnz	r0, 80120cc <rcl_action_wait_set_add_action_client+0x84>
 801209c:	6821      	ldr	r1, [r4, #0]
 801209e:	4628      	mov	r0, r5
 80120a0:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 80120a4:	3104      	adds	r1, #4
 80120a6:	f7ff fcc7 	bl	8011a38 <rcl_wait_set_add_client>
 80120aa:	b978      	cbnz	r0, 80120cc <rcl_action_wait_set_add_action_client+0x84>
 80120ac:	6821      	ldr	r1, [r4, #0]
 80120ae:	4628      	mov	r0, r5
 80120b0:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 80120b4:	3108      	adds	r1, #8
 80120b6:	f7ff fcbf 	bl	8011a38 <rcl_wait_set_add_client>
 80120ba:	b938      	cbnz	r0, 80120cc <rcl_action_wait_set_add_action_client+0x84>
 80120bc:	6821      	ldr	r1, [r4, #0]
 80120be:	4628      	mov	r0, r5
 80120c0:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 80120c4:	310c      	adds	r1, #12
 80120c6:	f7ff f96f 	bl	80113a8 <rcl_wait_set_add_subscription>
 80120ca:	b158      	cbz	r0, 80120e4 <rcl_action_wait_set_add_action_client+0x9c>
 80120cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80120ce:	f640 0036 	movw	r0, #2102	@ 0x836
 80120d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80120d4:	f7f9 fc68 	bl	800b9a8 <rcutils_reset_error>
 80120d8:	f640 0036 	movw	r0, #2102	@ 0x836
 80120dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80120de:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80120e2:	4770      	bx	lr
 80120e4:	6821      	ldr	r1, [r4, #0]
 80120e6:	4628      	mov	r0, r5
 80120e8:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 80120ec:	3110      	adds	r1, #16
 80120ee:	f7ff f95b 	bl	80113a8 <rcl_wait_set_add_subscription>
 80120f2:	2800      	cmp	r0, #0
 80120f4:	d1ea      	bne.n	80120cc <rcl_action_wait_set_add_action_client+0x84>
 80120f6:	b11f      	cbz	r7, 8012100 <rcl_action_wait_set_add_action_client+0xb8>
 80120f8:	6823      	ldr	r3, [r4, #0]
 80120fa:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 80120fe:	603b      	str	r3, [r7, #0]
 8012100:	2e00      	cmp	r6, #0
 8012102:	d0e3      	beq.n	80120cc <rcl_action_wait_set_add_action_client+0x84>
 8012104:	6823      	ldr	r3, [r4, #0]
 8012106:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 801210a:	6033      	str	r3, [r6, #0]
 801210c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801210e:	bf00      	nop

08012110 <rcl_action_client_wait_set_get_entities_ready>:
 8012110:	2800      	cmp	r0, #0
 8012112:	f000 808d 	beq.w	8012230 <rcl_action_client_wait_set_get_entities_ready+0x120>
 8012116:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801211a:	460c      	mov	r4, r1
 801211c:	2900      	cmp	r1, #0
 801211e:	d077      	beq.n	8012210 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8012120:	4605      	mov	r5, r0
 8012122:	6808      	ldr	r0, [r1, #0]
 8012124:	2800      	cmp	r0, #0
 8012126:	d073      	beq.n	8012210 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8012128:	4616      	mov	r6, r2
 801212a:	461f      	mov	r7, r3
 801212c:	f7fe f904 	bl	8010338 <rcl_client_is_valid>
 8012130:	2800      	cmp	r0, #0
 8012132:	d071      	beq.n	8012218 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8012134:	6820      	ldr	r0, [r4, #0]
 8012136:	3004      	adds	r0, #4
 8012138:	f7fe f8fe 	bl	8010338 <rcl_client_is_valid>
 801213c:	2800      	cmp	r0, #0
 801213e:	d06b      	beq.n	8012218 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8012140:	6820      	ldr	r0, [r4, #0]
 8012142:	3008      	adds	r0, #8
 8012144:	f7fe f8f8 	bl	8010338 <rcl_client_is_valid>
 8012148:	2800      	cmp	r0, #0
 801214a:	d065      	beq.n	8012218 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801214c:	6820      	ldr	r0, [r4, #0]
 801214e:	300c      	adds	r0, #12
 8012150:	f7f8 fc92 	bl	800aa78 <rcl_subscription_is_valid>
 8012154:	2800      	cmp	r0, #0
 8012156:	d05f      	beq.n	8012218 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8012158:	6820      	ldr	r0, [r4, #0]
 801215a:	3010      	adds	r0, #16
 801215c:	f7f8 fc8c 	bl	800aa78 <rcl_subscription_is_valid>
 8012160:	2800      	cmp	r0, #0
 8012162:	d059      	beq.n	8012218 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8012164:	2e00      	cmp	r6, #0
 8012166:	d060      	beq.n	801222a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8012168:	2f00      	cmp	r7, #0
 801216a:	d05e      	beq.n	801222a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 801216c:	9b06      	ldr	r3, [sp, #24]
 801216e:	2b00      	cmp	r3, #0
 8012170:	d05b      	beq.n	801222a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8012172:	9b07      	ldr	r3, [sp, #28]
 8012174:	2b00      	cmp	r3, #0
 8012176:	d058      	beq.n	801222a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8012178:	9b08      	ldr	r3, [sp, #32]
 801217a:	2b00      	cmp	r3, #0
 801217c:	d055      	beq.n	801222a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 801217e:	6823      	ldr	r3, [r4, #0]
 8012180:	686a      	ldr	r2, [r5, #4]
 8012182:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 8012186:	428a      	cmp	r2, r1
 8012188:	d94c      	bls.n	8012224 <rcl_action_client_wait_set_get_entities_ready+0x114>
 801218a:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 801218e:	4282      	cmp	r2, r0
 8012190:	d948      	bls.n	8012224 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8012192:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 8012196:	69ea      	ldr	r2, [r5, #28]
 8012198:	42a2      	cmp	r2, r4
 801219a:	d943      	bls.n	8012224 <rcl_action_client_wait_set_get_entities_ready+0x114>
 801219c:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 80121a0:	4562      	cmp	r2, ip
 80121a2:	d93f      	bls.n	8012224 <rcl_action_client_wait_set_get_entities_ready+0x114>
 80121a4:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 80121a8:	4572      	cmp	r2, lr
 80121aa:	d93b      	bls.n	8012224 <rcl_action_client_wait_set_get_entities_ready+0x114>
 80121ac:	69aa      	ldr	r2, [r5, #24]
 80121ae:	682d      	ldr	r5, [r5, #0]
 80121b0:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 80121b4:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 80121b8:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 80121bc:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 80121c0:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 80121c4:	f103 0c0c 	add.w	ip, r3, #12
 80121c8:	eba5 050c 	sub.w	r5, r5, ip
 80121cc:	fab5 f585 	clz	r5, r5
 80121d0:	096d      	lsrs	r5, r5, #5
 80121d2:	7035      	strb	r5, [r6, #0]
 80121d4:	f103 0510 	add.w	r5, r3, #16
 80121d8:	1b64      	subs	r4, r4, r5
 80121da:	fab4 f484 	clz	r4, r4
 80121de:	0964      	lsrs	r4, r4, #5
 80121e0:	703c      	strb	r4, [r7, #0]
 80121e2:	eba3 0008 	sub.w	r0, r3, r8
 80121e6:	1d1c      	adds	r4, r3, #4
 80121e8:	3308      	adds	r3, #8
 80121ea:	1ad3      	subs	r3, r2, r3
 80121ec:	fab0 f080 	clz	r0, r0
 80121f0:	9a06      	ldr	r2, [sp, #24]
 80121f2:	0940      	lsrs	r0, r0, #5
 80121f4:	1b09      	subs	r1, r1, r4
 80121f6:	7010      	strb	r0, [r2, #0]
 80121f8:	fab1 f181 	clz	r1, r1
 80121fc:	9a07      	ldr	r2, [sp, #28]
 80121fe:	0949      	lsrs	r1, r1, #5
 8012200:	7011      	strb	r1, [r2, #0]
 8012202:	fab3 f383 	clz	r3, r3
 8012206:	9a08      	ldr	r2, [sp, #32]
 8012208:	095b      	lsrs	r3, r3, #5
 801220a:	2000      	movs	r0, #0
 801220c:	7013      	strb	r3, [r2, #0]
 801220e:	e001      	b.n	8012214 <rcl_action_client_wait_set_get_entities_ready+0x104>
 8012210:	f640 0036 	movw	r0, #2102	@ 0x836
 8012214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012218:	f7f9 fbc6 	bl	800b9a8 <rcutils_reset_error>
 801221c:	f640 0036 	movw	r0, #2102	@ 0x836
 8012220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012224:	2001      	movs	r0, #1
 8012226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801222a:	200b      	movs	r0, #11
 801222c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012230:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012234:	4770      	bx	lr
 8012236:	bf00      	nop

08012238 <rcl_action_take_goal_request>:
 8012238:	2800      	cmp	r0, #0
 801223a:	d039      	beq.n	80122b0 <rcl_action_take_goal_request+0x78>
 801223c:	b570      	push	{r4, r5, r6, lr}
 801223e:	4604      	mov	r4, r0
 8012240:	6800      	ldr	r0, [r0, #0]
 8012242:	b380      	cbz	r0, 80122a6 <rcl_action_take_goal_request+0x6e>
 8012244:	460d      	mov	r5, r1
 8012246:	4616      	mov	r6, r2
 8012248:	f7fe fddc 	bl	8010e04 <rcl_service_is_valid>
 801224c:	b330      	cbz	r0, 801229c <rcl_action_take_goal_request+0x64>
 801224e:	6820      	ldr	r0, [r4, #0]
 8012250:	3004      	adds	r0, #4
 8012252:	f7fe fdd7 	bl	8010e04 <rcl_service_is_valid>
 8012256:	b308      	cbz	r0, 801229c <rcl_action_take_goal_request+0x64>
 8012258:	6820      	ldr	r0, [r4, #0]
 801225a:	3008      	adds	r0, #8
 801225c:	f7fe fdd2 	bl	8010e04 <rcl_service_is_valid>
 8012260:	b1e0      	cbz	r0, 801229c <rcl_action_take_goal_request+0x64>
 8012262:	6820      	ldr	r0, [r4, #0]
 8012264:	300c      	adds	r0, #12
 8012266:	f7f8 fa57 	bl	800a718 <rcl_publisher_is_valid>
 801226a:	b1b8      	cbz	r0, 801229c <rcl_action_take_goal_request+0x64>
 801226c:	6820      	ldr	r0, [r4, #0]
 801226e:	3010      	adds	r0, #16
 8012270:	f7f8 fa52 	bl	800a718 <rcl_publisher_is_valid>
 8012274:	b190      	cbz	r0, 801229c <rcl_action_take_goal_request+0x64>
 8012276:	b1cd      	cbz	r5, 80122ac <rcl_action_take_goal_request+0x74>
 8012278:	b1c6      	cbz	r6, 80122ac <rcl_action_take_goal_request+0x74>
 801227a:	6820      	ldr	r0, [r4, #0]
 801227c:	4632      	mov	r2, r6
 801227e:	4629      	mov	r1, r5
 8012280:	f7fe fd68 	bl	8010d54 <rcl_take_request>
 8012284:	b148      	cbz	r0, 801229a <rcl_action_take_goal_request+0x62>
 8012286:	280a      	cmp	r0, #10
 8012288:	d007      	beq.n	801229a <rcl_action_take_goal_request+0x62>
 801228a:	f240 2259 	movw	r2, #601	@ 0x259
 801228e:	f640 0399 	movw	r3, #2201	@ 0x899
 8012292:	4290      	cmp	r0, r2
 8012294:	bf0c      	ite	eq
 8012296:	4618      	moveq	r0, r3
 8012298:	2001      	movne	r0, #1
 801229a:	bd70      	pop	{r4, r5, r6, pc}
 801229c:	f7f9 fb84 	bl	800b9a8 <rcutils_reset_error>
 80122a0:	f640 0098 	movw	r0, #2200	@ 0x898
 80122a4:	bd70      	pop	{r4, r5, r6, pc}
 80122a6:	f640 0098 	movw	r0, #2200	@ 0x898
 80122aa:	bd70      	pop	{r4, r5, r6, pc}
 80122ac:	200b      	movs	r0, #11
 80122ae:	bd70      	pop	{r4, r5, r6, pc}
 80122b0:	f640 0098 	movw	r0, #2200	@ 0x898
 80122b4:	4770      	bx	lr
 80122b6:	bf00      	nop

080122b8 <rcl_action_send_goal_response>:
 80122b8:	b390      	cbz	r0, 8012320 <rcl_action_send_goal_response+0x68>
 80122ba:	b570      	push	{r4, r5, r6, lr}
 80122bc:	4604      	mov	r4, r0
 80122be:	6800      	ldr	r0, [r0, #0]
 80122c0:	b348      	cbz	r0, 8012316 <rcl_action_send_goal_response+0x5e>
 80122c2:	460d      	mov	r5, r1
 80122c4:	4616      	mov	r6, r2
 80122c6:	f7fe fd9d 	bl	8010e04 <rcl_service_is_valid>
 80122ca:	b1f8      	cbz	r0, 801230c <rcl_action_send_goal_response+0x54>
 80122cc:	6820      	ldr	r0, [r4, #0]
 80122ce:	3004      	adds	r0, #4
 80122d0:	f7fe fd98 	bl	8010e04 <rcl_service_is_valid>
 80122d4:	b1d0      	cbz	r0, 801230c <rcl_action_send_goal_response+0x54>
 80122d6:	6820      	ldr	r0, [r4, #0]
 80122d8:	3008      	adds	r0, #8
 80122da:	f7fe fd93 	bl	8010e04 <rcl_service_is_valid>
 80122de:	b1a8      	cbz	r0, 801230c <rcl_action_send_goal_response+0x54>
 80122e0:	6820      	ldr	r0, [r4, #0]
 80122e2:	300c      	adds	r0, #12
 80122e4:	f7f8 fa18 	bl	800a718 <rcl_publisher_is_valid>
 80122e8:	b180      	cbz	r0, 801230c <rcl_action_send_goal_response+0x54>
 80122ea:	6820      	ldr	r0, [r4, #0]
 80122ec:	3010      	adds	r0, #16
 80122ee:	f7f8 fa13 	bl	800a718 <rcl_publisher_is_valid>
 80122f2:	b158      	cbz	r0, 801230c <rcl_action_send_goal_response+0x54>
 80122f4:	b195      	cbz	r5, 801231c <rcl_action_send_goal_response+0x64>
 80122f6:	b18e      	cbz	r6, 801231c <rcl_action_send_goal_response+0x64>
 80122f8:	6820      	ldr	r0, [r4, #0]
 80122fa:	4632      	mov	r2, r6
 80122fc:	4629      	mov	r1, r5
 80122fe:	f7fe fd69 	bl	8010dd4 <rcl_send_response>
 8012302:	b110      	cbz	r0, 801230a <rcl_action_send_goal_response+0x52>
 8012304:	2802      	cmp	r0, #2
 8012306:	bf18      	it	ne
 8012308:	2001      	movne	r0, #1
 801230a:	bd70      	pop	{r4, r5, r6, pc}
 801230c:	f7f9 fb4c 	bl	800b9a8 <rcutils_reset_error>
 8012310:	f640 0098 	movw	r0, #2200	@ 0x898
 8012314:	bd70      	pop	{r4, r5, r6, pc}
 8012316:	f640 0098 	movw	r0, #2200	@ 0x898
 801231a:	bd70      	pop	{r4, r5, r6, pc}
 801231c:	200b      	movs	r0, #11
 801231e:	bd70      	pop	{r4, r5, r6, pc}
 8012320:	f640 0098 	movw	r0, #2200	@ 0x898
 8012324:	4770      	bx	lr
 8012326:	bf00      	nop

08012328 <rcl_action_take_result_request>:
 8012328:	2800      	cmp	r0, #0
 801232a:	d03a      	beq.n	80123a2 <rcl_action_take_result_request+0x7a>
 801232c:	b570      	push	{r4, r5, r6, lr}
 801232e:	4604      	mov	r4, r0
 8012330:	6800      	ldr	r0, [r0, #0]
 8012332:	b388      	cbz	r0, 8012398 <rcl_action_take_result_request+0x70>
 8012334:	460d      	mov	r5, r1
 8012336:	4616      	mov	r6, r2
 8012338:	f7fe fd64 	bl	8010e04 <rcl_service_is_valid>
 801233c:	b338      	cbz	r0, 801238e <rcl_action_take_result_request+0x66>
 801233e:	6820      	ldr	r0, [r4, #0]
 8012340:	3004      	adds	r0, #4
 8012342:	f7fe fd5f 	bl	8010e04 <rcl_service_is_valid>
 8012346:	b310      	cbz	r0, 801238e <rcl_action_take_result_request+0x66>
 8012348:	6820      	ldr	r0, [r4, #0]
 801234a:	3008      	adds	r0, #8
 801234c:	f7fe fd5a 	bl	8010e04 <rcl_service_is_valid>
 8012350:	b1e8      	cbz	r0, 801238e <rcl_action_take_result_request+0x66>
 8012352:	6820      	ldr	r0, [r4, #0]
 8012354:	300c      	adds	r0, #12
 8012356:	f7f8 f9df 	bl	800a718 <rcl_publisher_is_valid>
 801235a:	b1c0      	cbz	r0, 801238e <rcl_action_take_result_request+0x66>
 801235c:	6820      	ldr	r0, [r4, #0]
 801235e:	3010      	adds	r0, #16
 8012360:	f7f8 f9da 	bl	800a718 <rcl_publisher_is_valid>
 8012364:	b198      	cbz	r0, 801238e <rcl_action_take_result_request+0x66>
 8012366:	b1d5      	cbz	r5, 801239e <rcl_action_take_result_request+0x76>
 8012368:	b1ce      	cbz	r6, 801239e <rcl_action_take_result_request+0x76>
 801236a:	6820      	ldr	r0, [r4, #0]
 801236c:	4632      	mov	r2, r6
 801236e:	4629      	mov	r1, r5
 8012370:	3008      	adds	r0, #8
 8012372:	f7fe fcef 	bl	8010d54 <rcl_take_request>
 8012376:	b148      	cbz	r0, 801238c <rcl_action_take_result_request+0x64>
 8012378:	280a      	cmp	r0, #10
 801237a:	d007      	beq.n	801238c <rcl_action_take_result_request+0x64>
 801237c:	f240 2259 	movw	r2, #601	@ 0x259
 8012380:	f640 0399 	movw	r3, #2201	@ 0x899
 8012384:	4290      	cmp	r0, r2
 8012386:	bf0c      	ite	eq
 8012388:	4618      	moveq	r0, r3
 801238a:	2001      	movne	r0, #1
 801238c:	bd70      	pop	{r4, r5, r6, pc}
 801238e:	f7f9 fb0b 	bl	800b9a8 <rcutils_reset_error>
 8012392:	f640 0098 	movw	r0, #2200	@ 0x898
 8012396:	bd70      	pop	{r4, r5, r6, pc}
 8012398:	f640 0098 	movw	r0, #2200	@ 0x898
 801239c:	bd70      	pop	{r4, r5, r6, pc}
 801239e:	200b      	movs	r0, #11
 80123a0:	bd70      	pop	{r4, r5, r6, pc}
 80123a2:	f640 0098 	movw	r0, #2200	@ 0x898
 80123a6:	4770      	bx	lr

080123a8 <rcl_action_take_cancel_request>:
 80123a8:	2800      	cmp	r0, #0
 80123aa:	d03a      	beq.n	8012422 <rcl_action_take_cancel_request+0x7a>
 80123ac:	b570      	push	{r4, r5, r6, lr}
 80123ae:	4604      	mov	r4, r0
 80123b0:	6800      	ldr	r0, [r0, #0]
 80123b2:	b388      	cbz	r0, 8012418 <rcl_action_take_cancel_request+0x70>
 80123b4:	460d      	mov	r5, r1
 80123b6:	4616      	mov	r6, r2
 80123b8:	f7fe fd24 	bl	8010e04 <rcl_service_is_valid>
 80123bc:	b338      	cbz	r0, 801240e <rcl_action_take_cancel_request+0x66>
 80123be:	6820      	ldr	r0, [r4, #0]
 80123c0:	3004      	adds	r0, #4
 80123c2:	f7fe fd1f 	bl	8010e04 <rcl_service_is_valid>
 80123c6:	b310      	cbz	r0, 801240e <rcl_action_take_cancel_request+0x66>
 80123c8:	6820      	ldr	r0, [r4, #0]
 80123ca:	3008      	adds	r0, #8
 80123cc:	f7fe fd1a 	bl	8010e04 <rcl_service_is_valid>
 80123d0:	b1e8      	cbz	r0, 801240e <rcl_action_take_cancel_request+0x66>
 80123d2:	6820      	ldr	r0, [r4, #0]
 80123d4:	300c      	adds	r0, #12
 80123d6:	f7f8 f99f 	bl	800a718 <rcl_publisher_is_valid>
 80123da:	b1c0      	cbz	r0, 801240e <rcl_action_take_cancel_request+0x66>
 80123dc:	6820      	ldr	r0, [r4, #0]
 80123de:	3010      	adds	r0, #16
 80123e0:	f7f8 f99a 	bl	800a718 <rcl_publisher_is_valid>
 80123e4:	b198      	cbz	r0, 801240e <rcl_action_take_cancel_request+0x66>
 80123e6:	b1d5      	cbz	r5, 801241e <rcl_action_take_cancel_request+0x76>
 80123e8:	b1ce      	cbz	r6, 801241e <rcl_action_take_cancel_request+0x76>
 80123ea:	6820      	ldr	r0, [r4, #0]
 80123ec:	4632      	mov	r2, r6
 80123ee:	4629      	mov	r1, r5
 80123f0:	3004      	adds	r0, #4
 80123f2:	f7fe fcaf 	bl	8010d54 <rcl_take_request>
 80123f6:	b148      	cbz	r0, 801240c <rcl_action_take_cancel_request+0x64>
 80123f8:	280a      	cmp	r0, #10
 80123fa:	d007      	beq.n	801240c <rcl_action_take_cancel_request+0x64>
 80123fc:	f240 2259 	movw	r2, #601	@ 0x259
 8012400:	f640 0399 	movw	r3, #2201	@ 0x899
 8012404:	4290      	cmp	r0, r2
 8012406:	bf0c      	ite	eq
 8012408:	4618      	moveq	r0, r3
 801240a:	2001      	movne	r0, #1
 801240c:	bd70      	pop	{r4, r5, r6, pc}
 801240e:	f7f9 facb 	bl	800b9a8 <rcutils_reset_error>
 8012412:	f640 0098 	movw	r0, #2200	@ 0x898
 8012416:	bd70      	pop	{r4, r5, r6, pc}
 8012418:	f640 0098 	movw	r0, #2200	@ 0x898
 801241c:	bd70      	pop	{r4, r5, r6, pc}
 801241e:	200b      	movs	r0, #11
 8012420:	bd70      	pop	{r4, r5, r6, pc}
 8012422:	f640 0098 	movw	r0, #2200	@ 0x898
 8012426:	4770      	bx	lr

08012428 <rcl_action_send_cancel_response>:
 8012428:	b398      	cbz	r0, 8012492 <rcl_action_send_cancel_response+0x6a>
 801242a:	b570      	push	{r4, r5, r6, lr}
 801242c:	4604      	mov	r4, r0
 801242e:	6800      	ldr	r0, [r0, #0]
 8012430:	b350      	cbz	r0, 8012488 <rcl_action_send_cancel_response+0x60>
 8012432:	460d      	mov	r5, r1
 8012434:	4616      	mov	r6, r2
 8012436:	f7fe fce5 	bl	8010e04 <rcl_service_is_valid>
 801243a:	b300      	cbz	r0, 801247e <rcl_action_send_cancel_response+0x56>
 801243c:	6820      	ldr	r0, [r4, #0]
 801243e:	3004      	adds	r0, #4
 8012440:	f7fe fce0 	bl	8010e04 <rcl_service_is_valid>
 8012444:	b1d8      	cbz	r0, 801247e <rcl_action_send_cancel_response+0x56>
 8012446:	6820      	ldr	r0, [r4, #0]
 8012448:	3008      	adds	r0, #8
 801244a:	f7fe fcdb 	bl	8010e04 <rcl_service_is_valid>
 801244e:	b1b0      	cbz	r0, 801247e <rcl_action_send_cancel_response+0x56>
 8012450:	6820      	ldr	r0, [r4, #0]
 8012452:	300c      	adds	r0, #12
 8012454:	f7f8 f960 	bl	800a718 <rcl_publisher_is_valid>
 8012458:	b188      	cbz	r0, 801247e <rcl_action_send_cancel_response+0x56>
 801245a:	6820      	ldr	r0, [r4, #0]
 801245c:	3010      	adds	r0, #16
 801245e:	f7f8 f95b 	bl	800a718 <rcl_publisher_is_valid>
 8012462:	b160      	cbz	r0, 801247e <rcl_action_send_cancel_response+0x56>
 8012464:	b19d      	cbz	r5, 801248e <rcl_action_send_cancel_response+0x66>
 8012466:	b196      	cbz	r6, 801248e <rcl_action_send_cancel_response+0x66>
 8012468:	6820      	ldr	r0, [r4, #0]
 801246a:	4632      	mov	r2, r6
 801246c:	4629      	mov	r1, r5
 801246e:	3004      	adds	r0, #4
 8012470:	f7fe fcb0 	bl	8010dd4 <rcl_send_response>
 8012474:	b110      	cbz	r0, 801247c <rcl_action_send_cancel_response+0x54>
 8012476:	2802      	cmp	r0, #2
 8012478:	bf18      	it	ne
 801247a:	2001      	movne	r0, #1
 801247c:	bd70      	pop	{r4, r5, r6, pc}
 801247e:	f7f9 fa93 	bl	800b9a8 <rcutils_reset_error>
 8012482:	f640 0098 	movw	r0, #2200	@ 0x898
 8012486:	bd70      	pop	{r4, r5, r6, pc}
 8012488:	f640 0098 	movw	r0, #2200	@ 0x898
 801248c:	bd70      	pop	{r4, r5, r6, pc}
 801248e:	200b      	movs	r0, #11
 8012490:	bd70      	pop	{r4, r5, r6, pc}
 8012492:	f640 0098 	movw	r0, #2200	@ 0x898
 8012496:	4770      	bx	lr

08012498 <rcl_action_wait_set_add_action_server>:
 8012498:	2800      	cmp	r0, #0
 801249a:	d04d      	beq.n	8012538 <rcl_action_wait_set_add_action_server+0xa0>
 801249c:	b570      	push	{r4, r5, r6, lr}
 801249e:	460c      	mov	r4, r1
 80124a0:	b159      	cbz	r1, 80124ba <rcl_action_wait_set_add_action_server+0x22>
 80124a2:	4605      	mov	r5, r0
 80124a4:	6808      	ldr	r0, [r1, #0]
 80124a6:	b140      	cbz	r0, 80124ba <rcl_action_wait_set_add_action_server+0x22>
 80124a8:	4616      	mov	r6, r2
 80124aa:	f7fe fcab 	bl	8010e04 <rcl_service_is_valid>
 80124ae:	b120      	cbz	r0, 80124ba <rcl_action_wait_set_add_action_server+0x22>
 80124b0:	6820      	ldr	r0, [r4, #0]
 80124b2:	3004      	adds	r0, #4
 80124b4:	f7fe fca6 	bl	8010e04 <rcl_service_is_valid>
 80124b8:	b910      	cbnz	r0, 80124c0 <rcl_action_wait_set_add_action_server+0x28>
 80124ba:	f640 0098 	movw	r0, #2200	@ 0x898
 80124be:	bd70      	pop	{r4, r5, r6, pc}
 80124c0:	6820      	ldr	r0, [r4, #0]
 80124c2:	3008      	adds	r0, #8
 80124c4:	f7fe fc9e 	bl	8010e04 <rcl_service_is_valid>
 80124c8:	2800      	cmp	r0, #0
 80124ca:	d0f6      	beq.n	80124ba <rcl_action_wait_set_add_action_server+0x22>
 80124cc:	6820      	ldr	r0, [r4, #0]
 80124ce:	300c      	adds	r0, #12
 80124d0:	f7f8 f93a 	bl	800a748 <rcl_publisher_is_valid_except_context>
 80124d4:	2800      	cmp	r0, #0
 80124d6:	d0f0      	beq.n	80124ba <rcl_action_wait_set_add_action_server+0x22>
 80124d8:	6820      	ldr	r0, [r4, #0]
 80124da:	3010      	adds	r0, #16
 80124dc:	f7f8 f934 	bl	800a748 <rcl_publisher_is_valid_except_context>
 80124e0:	2800      	cmp	r0, #0
 80124e2:	d0ea      	beq.n	80124ba <rcl_action_wait_set_add_action_server+0x22>
 80124e4:	6821      	ldr	r1, [r4, #0]
 80124e6:	4628      	mov	r0, r5
 80124e8:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 80124ec:	f7ff fad0 	bl	8011a90 <rcl_wait_set_add_service>
 80124f0:	2800      	cmp	r0, #0
 80124f2:	d1e4      	bne.n	80124be <rcl_action_wait_set_add_action_server+0x26>
 80124f4:	6821      	ldr	r1, [r4, #0]
 80124f6:	4628      	mov	r0, r5
 80124f8:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 80124fc:	3104      	adds	r1, #4
 80124fe:	f7ff fac7 	bl	8011a90 <rcl_wait_set_add_service>
 8012502:	2800      	cmp	r0, #0
 8012504:	d1db      	bne.n	80124be <rcl_action_wait_set_add_action_server+0x26>
 8012506:	6821      	ldr	r1, [r4, #0]
 8012508:	4628      	mov	r0, r5
 801250a:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 801250e:	3108      	adds	r1, #8
 8012510:	f7ff fabe 	bl	8011a90 <rcl_wait_set_add_service>
 8012514:	2800      	cmp	r0, #0
 8012516:	d1d2      	bne.n	80124be <rcl_action_wait_set_add_action_server+0x26>
 8012518:	6821      	ldr	r1, [r4, #0]
 801251a:	4628      	mov	r0, r5
 801251c:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 8012520:	3114      	adds	r1, #20
 8012522:	f7ff fa59 	bl	80119d8 <rcl_wait_set_add_timer>
 8012526:	2800      	cmp	r0, #0
 8012528:	d1c9      	bne.n	80124be <rcl_action_wait_set_add_action_server+0x26>
 801252a:	2e00      	cmp	r6, #0
 801252c:	d0c7      	beq.n	80124be <rcl_action_wait_set_add_action_server+0x26>
 801252e:	6823      	ldr	r3, [r4, #0]
 8012530:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 8012534:	6033      	str	r3, [r6, #0]
 8012536:	bd70      	pop	{r4, r5, r6, pc}
 8012538:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801253c:	4770      	bx	lr
 801253e:	bf00      	nop

08012540 <rcl_action_server_wait_set_get_entities_ready>:
 8012540:	2800      	cmp	r0, #0
 8012542:	d05a      	beq.n	80125fa <rcl_action_server_wait_set_get_entities_ready+0xba>
 8012544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012546:	460c      	mov	r4, r1
 8012548:	b161      	cbz	r1, 8012564 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801254a:	4605      	mov	r5, r0
 801254c:	6808      	ldr	r0, [r1, #0]
 801254e:	b148      	cbz	r0, 8012564 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8012550:	4616      	mov	r6, r2
 8012552:	461f      	mov	r7, r3
 8012554:	f7fe fc56 	bl	8010e04 <rcl_service_is_valid>
 8012558:	b120      	cbz	r0, 8012564 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801255a:	6820      	ldr	r0, [r4, #0]
 801255c:	3004      	adds	r0, #4
 801255e:	f7fe fc51 	bl	8010e04 <rcl_service_is_valid>
 8012562:	b910      	cbnz	r0, 801256a <rcl_action_server_wait_set_get_entities_ready+0x2a>
 8012564:	f640 0098 	movw	r0, #2200	@ 0x898
 8012568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801256a:	6820      	ldr	r0, [r4, #0]
 801256c:	3008      	adds	r0, #8
 801256e:	f7fe fc49 	bl	8010e04 <rcl_service_is_valid>
 8012572:	2800      	cmp	r0, #0
 8012574:	d0f6      	beq.n	8012564 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8012576:	6820      	ldr	r0, [r4, #0]
 8012578:	300c      	adds	r0, #12
 801257a:	f7f8 f8e5 	bl	800a748 <rcl_publisher_is_valid_except_context>
 801257e:	2800      	cmp	r0, #0
 8012580:	d0f0      	beq.n	8012564 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8012582:	6820      	ldr	r0, [r4, #0]
 8012584:	3010      	adds	r0, #16
 8012586:	f7f8 f8df 	bl	800a748 <rcl_publisher_is_valid_except_context>
 801258a:	2800      	cmp	r0, #0
 801258c:	d0ea      	beq.n	8012564 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801258e:	b3be      	cbz	r6, 8012600 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8012590:	b3b7      	cbz	r7, 8012600 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8012592:	9b06      	ldr	r3, [sp, #24]
 8012594:	b3a3      	cbz	r3, 8012600 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8012596:	9b07      	ldr	r3, [sp, #28]
 8012598:	b393      	cbz	r3, 8012600 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801259a:	6821      	ldr	r1, [r4, #0]
 801259c:	692a      	ldr	r2, [r5, #16]
 801259e:	6a2c      	ldr	r4, [r5, #32]
 80125a0:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 80125a4:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 80125a8:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 80125ac:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 80125b0:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 80125b4:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 80125b8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80125bc:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 80125c0:	1a64      	subs	r4, r4, r1
 80125c2:	fab4 f484 	clz	r4, r4
 80125c6:	0964      	lsrs	r4, r4, #5
 80125c8:	7034      	strb	r4, [r6, #0]
 80125ca:	1d0c      	adds	r4, r1, #4
 80125cc:	1b1b      	subs	r3, r3, r4
 80125ce:	fab3 f383 	clz	r3, r3
 80125d2:	095b      	lsrs	r3, r3, #5
 80125d4:	f101 0408 	add.w	r4, r1, #8
 80125d8:	703b      	strb	r3, [r7, #0]
 80125da:	f101 0314 	add.w	r3, r1, #20
 80125de:	1b01      	subs	r1, r0, r4
 80125e0:	1ad3      	subs	r3, r2, r3
 80125e2:	fab1 f181 	clz	r1, r1
 80125e6:	9a06      	ldr	r2, [sp, #24]
 80125e8:	0949      	lsrs	r1, r1, #5
 80125ea:	7011      	strb	r1, [r2, #0]
 80125ec:	fab3 f383 	clz	r3, r3
 80125f0:	9a07      	ldr	r2, [sp, #28]
 80125f2:	095b      	lsrs	r3, r3, #5
 80125f4:	2000      	movs	r0, #0
 80125f6:	7013      	strb	r3, [r2, #0]
 80125f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80125fa:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80125fe:	4770      	bx	lr
 8012600:	200b      	movs	r0, #11
 8012602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012604 <_execute_event_handler>:
 8012604:	2002      	movs	r0, #2
 8012606:	4770      	bx	lr

08012608 <_cancel_goal_event_handler>:
 8012608:	2003      	movs	r0, #3
 801260a:	4770      	bx	lr

0801260c <_succeed_event_handler>:
 801260c:	2004      	movs	r0, #4
 801260e:	4770      	bx	lr

08012610 <_abort_event_handler>:
 8012610:	2006      	movs	r0, #6
 8012612:	4770      	bx	lr

08012614 <_canceled_event_handler>:
 8012614:	2005      	movs	r0, #5
 8012616:	4770      	bx	lr

08012618 <rcl_action_transition_goal_state>:
 8012618:	b2c2      	uxtb	r2, r0
 801261a:	2a06      	cmp	r2, #6
 801261c:	d80c      	bhi.n	8012638 <rcl_action_transition_goal_state+0x20>
 801261e:	2904      	cmp	r1, #4
 8012620:	d80a      	bhi.n	8012638 <rcl_action_transition_goal_state+0x20>
 8012622:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8012626:	b410      	push	{r4}
 8012628:	1853      	adds	r3, r2, r1
 801262a:	4c06      	ldr	r4, [pc, #24]	@ (8012644 <rcl_action_transition_goal_state+0x2c>)
 801262c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8012630:	b123      	cbz	r3, 801263c <rcl_action_transition_goal_state+0x24>
 8012632:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012636:	4718      	bx	r3
 8012638:	2000      	movs	r0, #0
 801263a:	4770      	bx	lr
 801263c:	2000      	movs	r0, #0
 801263e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012642:	4770      	bx	lr
 8012644:	0801a7e4 	.word	0x0801a7e4

08012648 <rcl_action_get_zero_initialized_cancel_response>:
 8012648:	b510      	push	{r4, lr}
 801264a:	4c07      	ldr	r4, [pc, #28]	@ (8012668 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 801264c:	4686      	mov	lr, r0
 801264e:	4684      	mov	ip, r0
 8012650:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012652:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012656:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012658:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801265c:	6823      	ldr	r3, [r4, #0]
 801265e:	f8cc 3000 	str.w	r3, [ip]
 8012662:	4670      	mov	r0, lr
 8012664:	bd10      	pop	{r4, pc}
 8012666:	bf00      	nop
 8012668:	0801a870 	.word	0x0801a870

0801266c <rclc_action_send_result_request>:
 801266c:	b1d0      	cbz	r0, 80126a4 <rclc_action_send_result_request+0x38>
 801266e:	b500      	push	{lr}
 8012670:	4684      	mov	ip, r0
 8012672:	b087      	sub	sp, #28
 8012674:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8012678:	f8dc 100d 	ldr.w	r1, [ip, #13]
 801267c:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8012680:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8012684:	f10d 0e08 	add.w	lr, sp, #8
 8012688:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801268c:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8012690:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 8012694:	a902      	add	r1, sp, #8
 8012696:	3010      	adds	r0, #16
 8012698:	f7ff fbda 	bl	8011e50 <rcl_action_send_result_request>
 801269c:	b920      	cbnz	r0, 80126a8 <rclc_action_send_result_request+0x3c>
 801269e:	b007      	add	sp, #28
 80126a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80126a4:	200b      	movs	r0, #11
 80126a6:	4770      	bx	lr
 80126a8:	9001      	str	r0, [sp, #4]
 80126aa:	f7f9 f97d 	bl	800b9a8 <rcutils_reset_error>
 80126ae:	9801      	ldr	r0, [sp, #4]
 80126b0:	b007      	add	sp, #28
 80126b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80126b6:	bf00      	nop

080126b8 <rclc_action_take_goal_handle>:
 80126b8:	b160      	cbz	r0, 80126d4 <rclc_action_take_goal_handle+0x1c>
 80126ba:	6883      	ldr	r3, [r0, #8]
 80126bc:	b143      	cbz	r3, 80126d0 <rclc_action_take_goal_handle+0x18>
 80126be:	6819      	ldr	r1, [r3, #0]
 80126c0:	6081      	str	r1, [r0, #8]
 80126c2:	2200      	movs	r2, #0
 80126c4:	721a      	strb	r2, [r3, #8]
 80126c6:	68c1      	ldr	r1, [r0, #12]
 80126c8:	6019      	str	r1, [r3, #0]
 80126ca:	621a      	str	r2, [r3, #32]
 80126cc:	849a      	strh	r2, [r3, #36]	@ 0x24
 80126ce:	60c3      	str	r3, [r0, #12]
 80126d0:	4618      	mov	r0, r3
 80126d2:	4770      	bx	lr
 80126d4:	4603      	mov	r3, r0
 80126d6:	e7fb      	b.n	80126d0 <rclc_action_take_goal_handle+0x18>

080126d8 <rclc_action_remove_used_goal_handle>:
 80126d8:	b180      	cbz	r0, 80126fc <rclc_action_remove_used_goal_handle+0x24>
 80126da:	b179      	cbz	r1, 80126fc <rclc_action_remove_used_goal_handle+0x24>
 80126dc:	68c3      	ldr	r3, [r0, #12]
 80126de:	4299      	cmp	r1, r3
 80126e0:	d00d      	beq.n	80126fe <rclc_action_remove_used_goal_handle+0x26>
 80126e2:	b12b      	cbz	r3, 80126f0 <rclc_action_remove_used_goal_handle+0x18>
 80126e4:	681a      	ldr	r2, [r3, #0]
 80126e6:	4291      	cmp	r1, r2
 80126e8:	d003      	beq.n	80126f2 <rclc_action_remove_used_goal_handle+0x1a>
 80126ea:	4613      	mov	r3, r2
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d1f9      	bne.n	80126e4 <rclc_action_remove_used_goal_handle+0xc>
 80126f0:	4770      	bx	lr
 80126f2:	680a      	ldr	r2, [r1, #0]
 80126f4:	601a      	str	r2, [r3, #0]
 80126f6:	6883      	ldr	r3, [r0, #8]
 80126f8:	600b      	str	r3, [r1, #0]
 80126fa:	6081      	str	r1, [r0, #8]
 80126fc:	4770      	bx	lr
 80126fe:	680b      	ldr	r3, [r1, #0]
 8012700:	60c3      	str	r3, [r0, #12]
 8012702:	e7f8      	b.n	80126f6 <rclc_action_remove_used_goal_handle+0x1e>

08012704 <rclc_action_find_goal_handle_by_uuid>:
 8012704:	b538      	push	{r3, r4, r5, lr}
 8012706:	b180      	cbz	r0, 801272a <rclc_action_find_goal_handle_by_uuid+0x26>
 8012708:	460d      	mov	r5, r1
 801270a:	b181      	cbz	r1, 801272e <rclc_action_find_goal_handle_by_uuid+0x2a>
 801270c:	68c4      	ldr	r4, [r0, #12]
 801270e:	b914      	cbnz	r4, 8012716 <rclc_action_find_goal_handle_by_uuid+0x12>
 8012710:	e009      	b.n	8012726 <rclc_action_find_goal_handle_by_uuid+0x22>
 8012712:	6824      	ldr	r4, [r4, #0]
 8012714:	b13c      	cbz	r4, 8012726 <rclc_action_find_goal_handle_by_uuid+0x22>
 8012716:	f104 0009 	add.w	r0, r4, #9
 801271a:	2210      	movs	r2, #16
 801271c:	4629      	mov	r1, r5
 801271e:	f005 fb29 	bl	8017d74 <memcmp>
 8012722:	2800      	cmp	r0, #0
 8012724:	d1f5      	bne.n	8012712 <rclc_action_find_goal_handle_by_uuid+0xe>
 8012726:	4620      	mov	r0, r4
 8012728:	bd38      	pop	{r3, r4, r5, pc}
 801272a:	4604      	mov	r4, r0
 801272c:	e7fb      	b.n	8012726 <rclc_action_find_goal_handle_by_uuid+0x22>
 801272e:	460c      	mov	r4, r1
 8012730:	e7f9      	b.n	8012726 <rclc_action_find_goal_handle_by_uuid+0x22>
 8012732:	bf00      	nop

08012734 <rclc_action_find_first_handle_by_status>:
 8012734:	b140      	cbz	r0, 8012748 <rclc_action_find_first_handle_by_status+0x14>
 8012736:	68c0      	ldr	r0, [r0, #12]
 8012738:	b910      	cbnz	r0, 8012740 <rclc_action_find_first_handle_by_status+0xc>
 801273a:	e005      	b.n	8012748 <rclc_action_find_first_handle_by_status+0x14>
 801273c:	6800      	ldr	r0, [r0, #0]
 801273e:	b118      	cbz	r0, 8012748 <rclc_action_find_first_handle_by_status+0x14>
 8012740:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8012744:	428b      	cmp	r3, r1
 8012746:	d1f9      	bne.n	801273c <rclc_action_find_first_handle_by_status+0x8>
 8012748:	4770      	bx	lr
 801274a:	bf00      	nop

0801274c <rclc_action_find_first_terminated_handle>:
 801274c:	b140      	cbz	r0, 8012760 <rclc_action_find_first_terminated_handle+0x14>
 801274e:	68c0      	ldr	r0, [r0, #12]
 8012750:	b910      	cbnz	r0, 8012758 <rclc_action_find_first_terminated_handle+0xc>
 8012752:	e005      	b.n	8012760 <rclc_action_find_first_terminated_handle+0x14>
 8012754:	6800      	ldr	r0, [r0, #0]
 8012756:	b118      	cbz	r0, 8012760 <rclc_action_find_first_terminated_handle+0x14>
 8012758:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801275c:	2b03      	cmp	r3, #3
 801275e:	ddf9      	ble.n	8012754 <rclc_action_find_first_terminated_handle+0x8>
 8012760:	4770      	bx	lr
 8012762:	bf00      	nop

08012764 <rclc_action_find_handle_by_goal_request_sequence_number>:
 8012764:	b170      	cbz	r0, 8012784 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8012766:	68c0      	ldr	r0, [r0, #12]
 8012768:	b160      	cbz	r0, 8012784 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801276a:	b410      	push	{r4}
 801276c:	e001      	b.n	8012772 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 801276e:	6800      	ldr	r0, [r0, #0]
 8012770:	b128      	cbz	r0, 801277e <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8012772:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 8012776:	4299      	cmp	r1, r3
 8012778:	bf08      	it	eq
 801277a:	4294      	cmpeq	r4, r2
 801277c:	d1f7      	bne.n	801276e <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 801277e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012782:	4770      	bx	lr
 8012784:	4770      	bx	lr
 8012786:	bf00      	nop

08012788 <rclc_action_find_handle_by_result_request_sequence_number>:
 8012788:	b170      	cbz	r0, 80127a8 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801278a:	68c0      	ldr	r0, [r0, #12]
 801278c:	b160      	cbz	r0, 80127a8 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801278e:	b410      	push	{r4}
 8012790:	e001      	b.n	8012796 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 8012792:	6800      	ldr	r0, [r0, #0]
 8012794:	b128      	cbz	r0, 80127a2 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 8012796:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 801279a:	4299      	cmp	r1, r3
 801279c:	bf08      	it	eq
 801279e:	4294      	cmpeq	r4, r2
 80127a0:	d1f7      	bne.n	8012792 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 80127a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80127a6:	4770      	bx	lr
 80127a8:	4770      	bx	lr
 80127aa:	bf00      	nop

080127ac <rclc_action_find_handle_by_cancel_request_sequence_number>:
 80127ac:	b170      	cbz	r0, 80127cc <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 80127ae:	68c0      	ldr	r0, [r0, #12]
 80127b0:	b160      	cbz	r0, 80127cc <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 80127b2:	b410      	push	{r4}
 80127b4:	e001      	b.n	80127ba <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 80127b6:	6800      	ldr	r0, [r0, #0]
 80127b8:	b128      	cbz	r0, 80127c6 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 80127ba:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 80127be:	4299      	cmp	r1, r3
 80127c0:	bf08      	it	eq
 80127c2:	4294      	cmpeq	r4, r2
 80127c4:	d1f7      	bne.n	80127b6 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 80127c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80127ca:	4770      	bx	lr
 80127cc:	4770      	bx	lr
 80127ce:	bf00      	nop

080127d0 <rclc_action_find_first_handle_with_goal_response>:
 80127d0:	b140      	cbz	r0, 80127e4 <rclc_action_find_first_handle_with_goal_response+0x14>
 80127d2:	68c0      	ldr	r0, [r0, #12]
 80127d4:	b910      	cbnz	r0, 80127dc <rclc_action_find_first_handle_with_goal_response+0xc>
 80127d6:	e005      	b.n	80127e4 <rclc_action_find_first_handle_with_goal_response+0x14>
 80127d8:	6800      	ldr	r0, [r0, #0]
 80127da:	b118      	cbz	r0, 80127e4 <rclc_action_find_first_handle_with_goal_response+0x14>
 80127dc:	f890 3020 	ldrb.w	r3, [r0, #32]
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	d0f9      	beq.n	80127d8 <rclc_action_find_first_handle_with_goal_response+0x8>
 80127e4:	4770      	bx	lr
 80127e6:	bf00      	nop

080127e8 <rclc_action_find_first_handle_with_result_response>:
 80127e8:	b140      	cbz	r0, 80127fc <rclc_action_find_first_handle_with_result_response+0x14>
 80127ea:	68c0      	ldr	r0, [r0, #12]
 80127ec:	b910      	cbnz	r0, 80127f4 <rclc_action_find_first_handle_with_result_response+0xc>
 80127ee:	e005      	b.n	80127fc <rclc_action_find_first_handle_with_result_response+0x14>
 80127f0:	6800      	ldr	r0, [r0, #0]
 80127f2:	b118      	cbz	r0, 80127fc <rclc_action_find_first_handle_with_result_response+0x14>
 80127f4:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	d0f9      	beq.n	80127f0 <rclc_action_find_first_handle_with_result_response+0x8>
 80127fc:	4770      	bx	lr
 80127fe:	bf00      	nop

08012800 <rclc_action_server_response_goal_request>:
 8012800:	b198      	cbz	r0, 801282a <rclc_action_server_response_goal_request+0x2a>
 8012802:	b510      	push	{r4, lr}
 8012804:	6844      	ldr	r4, [r0, #4]
 8012806:	b086      	sub	sp, #24
 8012808:	2200      	movs	r2, #0
 801280a:	e9cd 2203 	strd	r2, r2, [sp, #12]
 801280e:	460b      	mov	r3, r1
 8012810:	9205      	str	r2, [sp, #20]
 8012812:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 8012816:	aa03      	add	r2, sp, #12
 8012818:	f104 0010 	add.w	r0, r4, #16
 801281c:	f88d 300c 	strb.w	r3, [sp, #12]
 8012820:	f7ff fd4a 	bl	80122b8 <rcl_action_send_goal_response>
 8012824:	b918      	cbnz	r0, 801282e <rclc_action_server_response_goal_request+0x2e>
 8012826:	b006      	add	sp, #24
 8012828:	bd10      	pop	{r4, pc}
 801282a:	200b      	movs	r0, #11
 801282c:	4770      	bx	lr
 801282e:	9001      	str	r0, [sp, #4]
 8012830:	f7f9 f8ba 	bl	800b9a8 <rcutils_reset_error>
 8012834:	9801      	ldr	r0, [sp, #4]
 8012836:	b006      	add	sp, #24
 8012838:	bd10      	pop	{r4, pc}
 801283a:	bf00      	nop
 801283c:	0000      	movs	r0, r0
	...

08012840 <rclc_action_server_goal_cancel_accept>:
 8012840:	b310      	cbz	r0, 8012888 <rclc_action_server_goal_cancel_accept+0x48>
 8012842:	b510      	push	{r4, lr}
 8012844:	b090      	sub	sp, #64	@ 0x40
 8012846:	4604      	mov	r4, r0
 8012848:	a806      	add	r0, sp, #24
 801284a:	f7ff fefd 	bl	8012648 <rcl_action_get_zero_initialized_cancel_response>
 801284e:	2300      	movs	r3, #0
 8012850:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8012854:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8012858:	f8d4 2011 	ldr.w	r2, [r4, #17]
 801285c:	f88d 3018 	strb.w	r3, [sp, #24]
 8012860:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8012864:	f8cd d01c 	str.w	sp, [sp, #28]
 8012868:	46ec      	mov	ip, sp
 801286a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801286e:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8012890 <rclc_action_server_goal_cancel_accept+0x50>
 8012872:	6860      	ldr	r0, [r4, #4]
 8012874:	aa06      	add	r2, sp, #24
 8012876:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 801287a:	3010      	adds	r0, #16
 801287c:	ed8d 7b08 	vstr	d7, [sp, #32]
 8012880:	f7ff fdd2 	bl	8012428 <rcl_action_send_cancel_response>
 8012884:	b010      	add	sp, #64	@ 0x40
 8012886:	bd10      	pop	{r4, pc}
 8012888:	200b      	movs	r0, #11
 801288a:	4770      	bx	lr
 801288c:	f3af 8000 	nop.w
 8012890:	00000001 	.word	0x00000001
 8012894:	00000001 	.word	0x00000001

08012898 <rclc_action_server_goal_cancel_reject>:
 8012898:	b082      	sub	sp, #8
 801289a:	b530      	push	{r4, r5, lr}
 801289c:	b08b      	sub	sp, #44	@ 0x2c
 801289e:	ac0e      	add	r4, sp, #56	@ 0x38
 80128a0:	e884 000c 	stmia.w	r4, {r2, r3}
 80128a4:	b188      	cbz	r0, 80128ca <rclc_action_server_goal_cancel_reject+0x32>
 80128a6:	4604      	mov	r4, r0
 80128a8:	a801      	add	r0, sp, #4
 80128aa:	460d      	mov	r5, r1
 80128ac:	f7ff fecc 	bl	8012648 <rcl_action_get_zero_initialized_cancel_response>
 80128b0:	aa01      	add	r2, sp, #4
 80128b2:	a90e      	add	r1, sp, #56	@ 0x38
 80128b4:	f104 0010 	add.w	r0, r4, #16
 80128b8:	f88d 5004 	strb.w	r5, [sp, #4]
 80128bc:	f7ff fdb4 	bl	8012428 <rcl_action_send_cancel_response>
 80128c0:	b00b      	add	sp, #44	@ 0x2c
 80128c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80128c6:	b002      	add	sp, #8
 80128c8:	4770      	bx	lr
 80128ca:	200b      	movs	r0, #11
 80128cc:	b00b      	add	sp, #44	@ 0x2c
 80128ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80128d2:	b002      	add	sp, #8
 80128d4:	4770      	bx	lr
 80128d6:	bf00      	nop

080128d8 <__atomic_load_8>:
 80128d8:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 80128dc:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 80128e0:	4a15      	ldr	r2, [pc, #84]	@ (8012938 <__atomic_load_8+0x60>)
 80128e2:	4b16      	ldr	r3, [pc, #88]	@ (801293c <__atomic_load_8+0x64>)
 80128e4:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80128e8:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 80128ec:	fb02 f101 	mul.w	r1, r2, r1
 80128f0:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 80128f4:	fba3 2301 	umull	r2, r3, r3, r1
 80128f8:	091b      	lsrs	r3, r3, #4
 80128fa:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80128fe:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8012902:	b4d0      	push	{r4, r6, r7}
 8012904:	4c0e      	ldr	r4, [pc, #56]	@ (8012940 <__atomic_load_8+0x68>)
 8012906:	1ac9      	subs	r1, r1, r3
 8012908:	1862      	adds	r2, r4, r1
 801290a:	f04f 0c01 	mov.w	ip, #1
 801290e:	e8d2 3f4f 	ldrexb	r3, [r2]
 8012912:	e8c2 cf46 	strexb	r6, ip, [r2]
 8012916:	2e00      	cmp	r6, #0
 8012918:	d1f9      	bne.n	801290e <__atomic_load_8+0x36>
 801291a:	f3bf 8f5b 	dmb	ish
 801291e:	b2db      	uxtb	r3, r3
 8012920:	2b00      	cmp	r3, #0
 8012922:	d1f4      	bne.n	801290e <__atomic_load_8+0x36>
 8012924:	e9d0 6700 	ldrd	r6, r7, [r0]
 8012928:	f3bf 8f5b 	dmb	ish
 801292c:	5463      	strb	r3, [r4, r1]
 801292e:	4630      	mov	r0, r6
 8012930:	4639      	mov	r1, r7
 8012932:	bcd0      	pop	{r4, r6, r7}
 8012934:	4770      	bx	lr
 8012936:	bf00      	nop
 8012938:	27d4eb2d 	.word	0x27d4eb2d
 801293c:	b21642c9 	.word	0xb21642c9
 8012940:	20011244 	.word	0x20011244

08012944 <__atomic_store_8>:
 8012944:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8012948:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 801294c:	b570      	push	{r4, r5, r6, lr}
 801294e:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8012952:	4c14      	ldr	r4, [pc, #80]	@ (80129a4 <__atomic_store_8+0x60>)
 8012954:	4d14      	ldr	r5, [pc, #80]	@ (80129a8 <__atomic_store_8+0x64>)
 8012956:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 801295a:	fb04 f101 	mul.w	r1, r4, r1
 801295e:	4c13      	ldr	r4, [pc, #76]	@ (80129ac <__atomic_store_8+0x68>)
 8012960:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8012964:	fba4 4e01 	umull	r4, lr, r4, r1
 8012968:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 801296c:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 8012970:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 8012974:	eba1 0e0e 	sub.w	lr, r1, lr
 8012978:	eb05 0c0e 	add.w	ip, r5, lr
 801297c:	f04f 0401 	mov.w	r4, #1
 8012980:	e8dc 1f4f 	ldrexb	r1, [ip]
 8012984:	e8cc 4f46 	strexb	r6, r4, [ip]
 8012988:	2e00      	cmp	r6, #0
 801298a:	d1f9      	bne.n	8012980 <__atomic_store_8+0x3c>
 801298c:	f3bf 8f5b 	dmb	ish
 8012990:	b2c9      	uxtb	r1, r1
 8012992:	2900      	cmp	r1, #0
 8012994:	d1f4      	bne.n	8012980 <__atomic_store_8+0x3c>
 8012996:	e9c0 2300 	strd	r2, r3, [r0]
 801299a:	f3bf 8f5b 	dmb	ish
 801299e:	f805 100e 	strb.w	r1, [r5, lr]
 80129a2:	bd70      	pop	{r4, r5, r6, pc}
 80129a4:	27d4eb2d 	.word	0x27d4eb2d
 80129a8:	20011244 	.word	0x20011244
 80129ac:	b21642c9 	.word	0xb21642c9

080129b0 <__atomic_exchange_8>:
 80129b0:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 80129b4:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 80129b8:	4916      	ldr	r1, [pc, #88]	@ (8012a14 <__atomic_exchange_8+0x64>)
 80129ba:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 80129be:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 80129c2:	fb01 fc0c 	mul.w	ip, r1, ip
 80129c6:	4914      	ldr	r1, [pc, #80]	@ (8012a18 <__atomic_exchange_8+0x68>)
 80129c8:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 80129cc:	b570      	push	{r4, r5, r6, lr}
 80129ce:	4605      	mov	r5, r0
 80129d0:	fba1 010c 	umull	r0, r1, r1, ip
 80129d4:	0909      	lsrs	r1, r1, #4
 80129d6:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 80129da:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 80129de:	4e0f      	ldr	r6, [pc, #60]	@ (8012a1c <__atomic_exchange_8+0x6c>)
 80129e0:	ebac 0c01 	sub.w	ip, ip, r1
 80129e4:	eb06 010c 	add.w	r1, r6, ip
 80129e8:	f04f 0e01 	mov.w	lr, #1
 80129ec:	e8d1 4f4f 	ldrexb	r4, [r1]
 80129f0:	e8c1 ef40 	strexb	r0, lr, [r1]
 80129f4:	2800      	cmp	r0, #0
 80129f6:	d1f9      	bne.n	80129ec <__atomic_exchange_8+0x3c>
 80129f8:	f3bf 8f5b 	dmb	ish
 80129fc:	b2e4      	uxtb	r4, r4
 80129fe:	2c00      	cmp	r4, #0
 8012a00:	d1f4      	bne.n	80129ec <__atomic_exchange_8+0x3c>
 8012a02:	e9d5 0100 	ldrd	r0, r1, [r5]
 8012a06:	e9c5 2300 	strd	r2, r3, [r5]
 8012a0a:	f3bf 8f5b 	dmb	ish
 8012a0e:	f806 400c 	strb.w	r4, [r6, ip]
 8012a12:	bd70      	pop	{r4, r5, r6, pc}
 8012a14:	27d4eb2d 	.word	0x27d4eb2d
 8012a18:	b21642c9 	.word	0xb21642c9
 8012a1c:	20011244 	.word	0x20011244

08012a20 <rcutils_is_directory>:
 8012a20:	2000      	movs	r0, #0
 8012a22:	4770      	bx	lr

08012a24 <rcutils_join_path>:
 8012a24:	b082      	sub	sp, #8
 8012a26:	e88d 000c 	stmia.w	sp, {r2, r3}
 8012a2a:	2000      	movs	r0, #0
 8012a2c:	b002      	add	sp, #8
 8012a2e:	4770      	bx	lr

08012a30 <rcutils_to_native_path>:
 8012a30:	b084      	sub	sp, #16
 8012a32:	a801      	add	r0, sp, #4
 8012a34:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8012a38:	b004      	add	sp, #16
 8012a3a:	2000      	movs	r0, #0
 8012a3c:	4770      	bx	lr
 8012a3e:	bf00      	nop

08012a40 <rcutils_string_array_fini>:
 8012a40:	b320      	cbz	r0, 8012a8c <rcutils_string_array_fini+0x4c>
 8012a42:	b570      	push	{r4, r5, r6, lr}
 8012a44:	4604      	mov	r4, r0
 8012a46:	6840      	ldr	r0, [r0, #4]
 8012a48:	b1d8      	cbz	r0, 8012a82 <rcutils_string_array_fini+0x42>
 8012a4a:	f104 0008 	add.w	r0, r4, #8
 8012a4e:	f7f8 ff6f 	bl	800b930 <rcutils_allocator_is_valid>
 8012a52:	b1b8      	cbz	r0, 8012a84 <rcutils_string_array_fini+0x44>
 8012a54:	6823      	ldr	r3, [r4, #0]
 8012a56:	b1bb      	cbz	r3, 8012a88 <rcutils_string_array_fini+0x48>
 8012a58:	2500      	movs	r5, #0
 8012a5a:	6860      	ldr	r0, [r4, #4]
 8012a5c:	462e      	mov	r6, r5
 8012a5e:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8012a62:	68e3      	ldr	r3, [r4, #12]
 8012a64:	69a1      	ldr	r1, [r4, #24]
 8012a66:	4798      	blx	r3
 8012a68:	e9d4 3000 	ldrd	r3, r0, [r4]
 8012a6c:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 8012a70:	3501      	adds	r5, #1
 8012a72:	429d      	cmp	r5, r3
 8012a74:	d3f3      	bcc.n	8012a5e <rcutils_string_array_fini+0x1e>
 8012a76:	68e3      	ldr	r3, [r4, #12]
 8012a78:	69a1      	ldr	r1, [r4, #24]
 8012a7a:	4798      	blx	r3
 8012a7c:	2000      	movs	r0, #0
 8012a7e:	e9c4 0000 	strd	r0, r0, [r4]
 8012a82:	bd70      	pop	{r4, r5, r6, pc}
 8012a84:	200b      	movs	r0, #11
 8012a86:	bd70      	pop	{r4, r5, r6, pc}
 8012a88:	6860      	ldr	r0, [r4, #4]
 8012a8a:	e7f4      	b.n	8012a76 <rcutils_string_array_fini+0x36>
 8012a8c:	200b      	movs	r0, #11
 8012a8e:	4770      	bx	lr

08012a90 <rcutils_get_zero_initialized_string_map>:
 8012a90:	4b01      	ldr	r3, [pc, #4]	@ (8012a98 <rcutils_get_zero_initialized_string_map+0x8>)
 8012a92:	2000      	movs	r0, #0
 8012a94:	6018      	str	r0, [r3, #0]
 8012a96:	4770      	bx	lr
 8012a98:	2001125c 	.word	0x2001125c

08012a9c <rcutils_string_map_reserve>:
 8012a9c:	2800      	cmp	r0, #0
 8012a9e:	d05f      	beq.n	8012b60 <rcutils_string_map_reserve+0xc4>
 8012aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012aa4:	460c      	mov	r4, r1
 8012aa6:	6801      	ldr	r1, [r0, #0]
 8012aa8:	b082      	sub	sp, #8
 8012aaa:	4605      	mov	r5, r0
 8012aac:	b129      	cbz	r1, 8012aba <rcutils_string_map_reserve+0x1e>
 8012aae:	68cb      	ldr	r3, [r1, #12]
 8012ab0:	42a3      	cmp	r3, r4
 8012ab2:	d906      	bls.n	8012ac2 <rcutils_string_map_reserve+0x26>
 8012ab4:	461c      	mov	r4, r3
 8012ab6:	2900      	cmp	r1, #0
 8012ab8:	d1f9      	bne.n	8012aae <rcutils_string_map_reserve+0x12>
 8012aba:	201f      	movs	r0, #31
 8012abc:	b002      	add	sp, #8
 8012abe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ac2:	688b      	ldr	r3, [r1, #8]
 8012ac4:	42a3      	cmp	r3, r4
 8012ac6:	d047      	beq.n	8012b58 <rcutils_string_map_reserve+0xbc>
 8012ac8:	6a0e      	ldr	r6, [r1, #32]
 8012aca:	2c00      	cmp	r4, #0
 8012acc:	d034      	beq.n	8012b38 <rcutils_string_map_reserve+0x9c>
 8012ace:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8012ad2:	d243      	bcs.n	8012b5c <rcutils_string_map_reserve+0xc0>
 8012ad4:	00a7      	lsls	r7, r4, #2
 8012ad6:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8012ada:	6808      	ldr	r0, [r1, #0]
 8012adc:	4632      	mov	r2, r6
 8012ade:	4639      	mov	r1, r7
 8012ae0:	47c0      	blx	r8
 8012ae2:	2800      	cmp	r0, #0
 8012ae4:	d03a      	beq.n	8012b5c <rcutils_string_map_reserve+0xc0>
 8012ae6:	682b      	ldr	r3, [r5, #0]
 8012ae8:	4632      	mov	r2, r6
 8012aea:	6018      	str	r0, [r3, #0]
 8012aec:	4639      	mov	r1, r7
 8012aee:	6858      	ldr	r0, [r3, #4]
 8012af0:	47c0      	blx	r8
 8012af2:	2800      	cmp	r0, #0
 8012af4:	d032      	beq.n	8012b5c <rcutils_string_map_reserve+0xc0>
 8012af6:	682d      	ldr	r5, [r5, #0]
 8012af8:	68ab      	ldr	r3, [r5, #8]
 8012afa:	6068      	str	r0, [r5, #4]
 8012afc:	42a3      	cmp	r3, r4
 8012afe:	d226      	bcs.n	8012b4e <rcutils_string_map_reserve+0xb2>
 8012b00:	682a      	ldr	r2, [r5, #0]
 8012b02:	eb00 0c07 	add.w	ip, r0, r7
 8012b06:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8012b0a:	45e6      	cmp	lr, ip
 8012b0c:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8012b10:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8012b14:	d203      	bcs.n	8012b1e <rcutils_string_map_reserve+0x82>
 8012b16:	eb02 0c07 	add.w	ip, r2, r7
 8012b1a:	4566      	cmp	r6, ip
 8012b1c:	d322      	bcc.n	8012b64 <rcutils_string_map_reserve+0xc8>
 8012b1e:	1ae3      	subs	r3, r4, r3
 8012b20:	009a      	lsls	r2, r3, #2
 8012b22:	4670      	mov	r0, lr
 8012b24:	2100      	movs	r1, #0
 8012b26:	9201      	str	r2, [sp, #4]
 8012b28:	f005 f94e 	bl	8017dc8 <memset>
 8012b2c:	9a01      	ldr	r2, [sp, #4]
 8012b2e:	2100      	movs	r1, #0
 8012b30:	4630      	mov	r0, r6
 8012b32:	f005 f949 	bl	8017dc8 <memset>
 8012b36:	e00a      	b.n	8012b4e <rcutils_string_map_reserve+0xb2>
 8012b38:	694f      	ldr	r7, [r1, #20]
 8012b3a:	6808      	ldr	r0, [r1, #0]
 8012b3c:	4631      	mov	r1, r6
 8012b3e:	47b8      	blx	r7
 8012b40:	682b      	ldr	r3, [r5, #0]
 8012b42:	4631      	mov	r1, r6
 8012b44:	6858      	ldr	r0, [r3, #4]
 8012b46:	601c      	str	r4, [r3, #0]
 8012b48:	47b8      	blx	r7
 8012b4a:	682d      	ldr	r5, [r5, #0]
 8012b4c:	606c      	str	r4, [r5, #4]
 8012b4e:	2000      	movs	r0, #0
 8012b50:	60ac      	str	r4, [r5, #8]
 8012b52:	b002      	add	sp, #8
 8012b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b58:	2000      	movs	r0, #0
 8012b5a:	e7af      	b.n	8012abc <rcutils_string_map_reserve+0x20>
 8012b5c:	200a      	movs	r0, #10
 8012b5e:	e7ad      	b.n	8012abc <rcutils_string_map_reserve+0x20>
 8012b60:	200b      	movs	r0, #11
 8012b62:	4770      	bx	lr
 8012b64:	1f0b      	subs	r3, r1, #4
 8012b66:	4418      	add	r0, r3
 8012b68:	4413      	add	r3, r2
 8012b6a:	3a04      	subs	r2, #4
 8012b6c:	4417      	add	r7, r2
 8012b6e:	2200      	movs	r2, #0
 8012b70:	f843 2f04 	str.w	r2, [r3, #4]!
 8012b74:	42bb      	cmp	r3, r7
 8012b76:	f840 2f04 	str.w	r2, [r0, #4]!
 8012b7a:	d1f9      	bne.n	8012b70 <rcutils_string_map_reserve+0xd4>
 8012b7c:	e7e7      	b.n	8012b4e <rcutils_string_map_reserve+0xb2>
 8012b7e:	bf00      	nop

08012b80 <rcutils_string_map_init>:
 8012b80:	b082      	sub	sp, #8
 8012b82:	b570      	push	{r4, r5, r6, lr}
 8012b84:	ac04      	add	r4, sp, #16
 8012b86:	e884 000c 	stmia.w	r4, {r2, r3}
 8012b8a:	b380      	cbz	r0, 8012bee <rcutils_string_map_init+0x6e>
 8012b8c:	6806      	ldr	r6, [r0, #0]
 8012b8e:	4604      	mov	r4, r0
 8012b90:	b12e      	cbz	r6, 8012b9e <rcutils_string_map_init+0x1e>
 8012b92:	251e      	movs	r5, #30
 8012b94:	4628      	mov	r0, r5
 8012b96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012b9a:	b002      	add	sp, #8
 8012b9c:	4770      	bx	lr
 8012b9e:	a804      	add	r0, sp, #16
 8012ba0:	460d      	mov	r5, r1
 8012ba2:	f7f8 fec5 	bl	800b930 <rcutils_allocator_is_valid>
 8012ba6:	b310      	cbz	r0, 8012bee <rcutils_string_map_init+0x6e>
 8012ba8:	9b04      	ldr	r3, [sp, #16]
 8012baa:	9908      	ldr	r1, [sp, #32]
 8012bac:	2024      	movs	r0, #36	@ 0x24
 8012bae:	4798      	blx	r3
 8012bb0:	6020      	str	r0, [r4, #0]
 8012bb2:	b310      	cbz	r0, 8012bfa <rcutils_string_map_init+0x7a>
 8012bb4:	f10d 0e10 	add.w	lr, sp, #16
 8012bb8:	e9c0 6600 	strd	r6, r6, [r0]
 8012bbc:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8012bc0:	f100 0c10 	add.w	ip, r0, #16
 8012bc4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012bc8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012bcc:	f8de 3000 	ldr.w	r3, [lr]
 8012bd0:	f8cc 3000 	str.w	r3, [ip]
 8012bd4:	4629      	mov	r1, r5
 8012bd6:	4620      	mov	r0, r4
 8012bd8:	f7ff ff60 	bl	8012a9c <rcutils_string_map_reserve>
 8012bdc:	4605      	mov	r5, r0
 8012bde:	2800      	cmp	r0, #0
 8012be0:	d0d8      	beq.n	8012b94 <rcutils_string_map_init+0x14>
 8012be2:	9b05      	ldr	r3, [sp, #20]
 8012be4:	9908      	ldr	r1, [sp, #32]
 8012be6:	6820      	ldr	r0, [r4, #0]
 8012be8:	4798      	blx	r3
 8012bea:	6026      	str	r6, [r4, #0]
 8012bec:	e7d2      	b.n	8012b94 <rcutils_string_map_init+0x14>
 8012bee:	250b      	movs	r5, #11
 8012bf0:	4628      	mov	r0, r5
 8012bf2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012bf6:	b002      	add	sp, #8
 8012bf8:	4770      	bx	lr
 8012bfa:	250a      	movs	r5, #10
 8012bfc:	e7ca      	b.n	8012b94 <rcutils_string_map_init+0x14>
 8012bfe:	bf00      	nop

08012c00 <rcutils_string_map_fini>:
 8012c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c04:	b082      	sub	sp, #8
 8012c06:	2800      	cmp	r0, #0
 8012c08:	d03a      	beq.n	8012c80 <rcutils_string_map_fini+0x80>
 8012c0a:	6804      	ldr	r4, [r0, #0]
 8012c0c:	4606      	mov	r6, r0
 8012c0e:	2c00      	cmp	r4, #0
 8012c10:	d032      	beq.n	8012c78 <rcutils_string_map_fini+0x78>
 8012c12:	68a3      	ldr	r3, [r4, #8]
 8012c14:	b32b      	cbz	r3, 8012c62 <rcutils_string_map_fini+0x62>
 8012c16:	2500      	movs	r5, #0
 8012c18:	6822      	ldr	r2, [r4, #0]
 8012c1a:	462f      	mov	r7, r5
 8012c1c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8012c20:	b1e0      	cbz	r0, 8012c5c <rcutils_string_map_fini+0x5c>
 8012c22:	6a21      	ldr	r1, [r4, #32]
 8012c24:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8012c28:	9101      	str	r1, [sp, #4]
 8012c2a:	47c0      	blx	r8
 8012c2c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8012c30:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8012c34:	9901      	ldr	r1, [sp, #4]
 8012c36:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012c3a:	47c0      	blx	r8
 8012c3c:	68e3      	ldr	r3, [r4, #12]
 8012c3e:	6862      	ldr	r2, [r4, #4]
 8012c40:	3b01      	subs	r3, #1
 8012c42:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8012c46:	60e3      	str	r3, [r4, #12]
 8012c48:	6834      	ldr	r4, [r6, #0]
 8012c4a:	68a3      	ldr	r3, [r4, #8]
 8012c4c:	3501      	adds	r5, #1
 8012c4e:	429d      	cmp	r5, r3
 8012c50:	d207      	bcs.n	8012c62 <rcutils_string_map_fini+0x62>
 8012c52:	6822      	ldr	r2, [r4, #0]
 8012c54:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8012c58:	2800      	cmp	r0, #0
 8012c5a:	d1e2      	bne.n	8012c22 <rcutils_string_map_fini+0x22>
 8012c5c:	3501      	adds	r5, #1
 8012c5e:	429d      	cmp	r5, r3
 8012c60:	d3dc      	bcc.n	8012c1c <rcutils_string_map_fini+0x1c>
 8012c62:	2100      	movs	r1, #0
 8012c64:	4630      	mov	r0, r6
 8012c66:	f7ff ff19 	bl	8012a9c <rcutils_string_map_reserve>
 8012c6a:	4604      	mov	r4, r0
 8012c6c:	b920      	cbnz	r0, 8012c78 <rcutils_string_map_fini+0x78>
 8012c6e:	6830      	ldr	r0, [r6, #0]
 8012c70:	6943      	ldr	r3, [r0, #20]
 8012c72:	6a01      	ldr	r1, [r0, #32]
 8012c74:	4798      	blx	r3
 8012c76:	6034      	str	r4, [r6, #0]
 8012c78:	4620      	mov	r0, r4
 8012c7a:	b002      	add	sp, #8
 8012c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c80:	240b      	movs	r4, #11
 8012c82:	4620      	mov	r0, r4
 8012c84:	b002      	add	sp, #8
 8012c86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c8a:	bf00      	nop

08012c8c <rcutils_string_map_getn>:
 8012c8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c90:	b300      	cbz	r0, 8012cd4 <rcutils_string_map_getn+0x48>
 8012c92:	6807      	ldr	r7, [r0, #0]
 8012c94:	b1ff      	cbz	r7, 8012cd6 <rcutils_string_map_getn+0x4a>
 8012c96:	4688      	mov	r8, r1
 8012c98:	b1e1      	cbz	r1, 8012cd4 <rcutils_string_map_getn+0x48>
 8012c9a:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8012c9e:	683e      	ldr	r6, [r7, #0]
 8012ca0:	f1ba 0f00 	cmp.w	sl, #0
 8012ca4:	d016      	beq.n	8012cd4 <rcutils_string_map_getn+0x48>
 8012ca6:	4691      	mov	r9, r2
 8012ca8:	3e04      	subs	r6, #4
 8012caa:	2400      	movs	r4, #0
 8012cac:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8012cb0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8012cb4:	4628      	mov	r0, r5
 8012cb6:	3401      	adds	r4, #1
 8012cb8:	b155      	cbz	r5, 8012cd0 <rcutils_string_map_getn+0x44>
 8012cba:	f7ed fb09 	bl	80002d0 <strlen>
 8012cbe:	4548      	cmp	r0, r9
 8012cc0:	4602      	mov	r2, r0
 8012cc2:	4629      	mov	r1, r5
 8012cc4:	bf38      	it	cc
 8012cc6:	464a      	movcc	r2, r9
 8012cc8:	4640      	mov	r0, r8
 8012cca:	f005 f892 	bl	8017df2 <strncmp>
 8012cce:	b128      	cbz	r0, 8012cdc <rcutils_string_map_getn+0x50>
 8012cd0:	45a2      	cmp	sl, r4
 8012cd2:	d1eb      	bne.n	8012cac <rcutils_string_map_getn+0x20>
 8012cd4:	2700      	movs	r7, #0
 8012cd6:	4638      	mov	r0, r7
 8012cd8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	f853 700b 	ldr.w	r7, [r3, fp]
 8012ce2:	4638      	mov	r0, r7
 8012ce4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012ce8 <rmw_get_zero_initialized_context>:
 8012ce8:	b510      	push	{r4, lr}
 8012cea:	4604      	mov	r4, r0
 8012cec:	3010      	adds	r0, #16
 8012cee:	f000 f80b 	bl	8012d08 <rmw_get_zero_initialized_init_options>
 8012cf2:	2300      	movs	r3, #0
 8012cf4:	2000      	movs	r0, #0
 8012cf6:	2100      	movs	r1, #0
 8012cf8:	e9c4 0100 	strd	r0, r1, [r4]
 8012cfc:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 8012d00:	60a3      	str	r3, [r4, #8]
 8012d02:	4620      	mov	r0, r4
 8012d04:	bd10      	pop	{r4, pc}
 8012d06:	bf00      	nop

08012d08 <rmw_get_zero_initialized_init_options>:
 8012d08:	b510      	push	{r4, lr}
 8012d0a:	2238      	movs	r2, #56	@ 0x38
 8012d0c:	4604      	mov	r4, r0
 8012d0e:	2100      	movs	r1, #0
 8012d10:	f005 f85a 	bl	8017dc8 <memset>
 8012d14:	f104 0010 	add.w	r0, r4, #16
 8012d18:	f000 f806 	bl	8012d28 <rmw_get_default_security_options>
 8012d1c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012d20:	60e3      	str	r3, [r4, #12]
 8012d22:	4620      	mov	r0, r4
 8012d24:	bd10      	pop	{r4, pc}
 8012d26:	bf00      	nop

08012d28 <rmw_get_default_security_options>:
 8012d28:	2200      	movs	r2, #0
 8012d2a:	7002      	strb	r2, [r0, #0]
 8012d2c:	6042      	str	r2, [r0, #4]
 8012d2e:	4770      	bx	lr

08012d30 <rmw_time_equal>:
 8012d30:	b4f0      	push	{r4, r5, r6, r7}
 8012d32:	b084      	sub	sp, #16
 8012d34:	ac04      	add	r4, sp, #16
 8012d36:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8012d3a:	4603      	mov	r3, r0
 8012d3c:	4924      	ldr	r1, [pc, #144]	@ (8012dd0 <rmw_time_equal+0xa0>)
 8012d3e:	9e03      	ldr	r6, [sp, #12]
 8012d40:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8012d44:	2202      	movs	r2, #2
 8012d46:	4299      	cmp	r1, r3
 8012d48:	41aa      	sbcs	r2, r5
 8012d4a:	d330      	bcc.n	8012dae <rmw_time_equal+0x7e>
 8012d4c:	4c21      	ldr	r4, [pc, #132]	@ (8012dd4 <rmw_time_equal+0xa4>)
 8012d4e:	fba3 3204 	umull	r3, r2, r3, r4
 8012d52:	fb04 2205 	mla	r2, r4, r5, r2
 8012d56:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012d5a:	43dd      	mvns	r5, r3
 8012d5c:	1a8c      	subs	r4, r1, r2
 8012d5e:	4285      	cmp	r5, r0
 8012d60:	41b4      	sbcs	r4, r6
 8012d62:	d332      	bcc.n	8012dca <rmw_time_equal+0x9a>
 8012d64:	eb10 0c03 	adds.w	ip, r0, r3
 8012d68:	eb42 0106 	adc.w	r1, r2, r6
 8012d6c:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8012d70:	4817      	ldr	r0, [pc, #92]	@ (8012dd0 <rmw_time_equal+0xa0>)
 8012d72:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8012d74:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8012d76:	2202      	movs	r2, #2
 8012d78:	4298      	cmp	r0, r3
 8012d7a:	41b2      	sbcs	r2, r6
 8012d7c:	d31c      	bcc.n	8012db8 <rmw_time_equal+0x88>
 8012d7e:	4c15      	ldr	r4, [pc, #84]	@ (8012dd4 <rmw_time_equal+0xa4>)
 8012d80:	fba3 3204 	umull	r3, r2, r3, r4
 8012d84:	fb04 2206 	mla	r2, r4, r6, r2
 8012d88:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8012d8c:	43de      	mvns	r6, r3
 8012d8e:	1a84      	subs	r4, r0, r2
 8012d90:	42ae      	cmp	r6, r5
 8012d92:	41bc      	sbcs	r4, r7
 8012d94:	d315      	bcc.n	8012dc2 <rmw_time_equal+0x92>
 8012d96:	195b      	adds	r3, r3, r5
 8012d98:	eb42 0207 	adc.w	r2, r2, r7
 8012d9c:	428a      	cmp	r2, r1
 8012d9e:	bf08      	it	eq
 8012da0:	4563      	cmpeq	r3, ip
 8012da2:	bf0c      	ite	eq
 8012da4:	2001      	moveq	r0, #1
 8012da6:	2000      	movne	r0, #0
 8012da8:	b004      	add	sp, #16
 8012daa:	bcf0      	pop	{r4, r5, r6, r7}
 8012dac:	4770      	bx	lr
 8012dae:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8012db2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012db6:	e7d9      	b.n	8012d6c <rmw_time_equal+0x3c>
 8012db8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012dbc:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8012dc0:	e7ec      	b.n	8012d9c <rmw_time_equal+0x6c>
 8012dc2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012dc6:	4602      	mov	r2, r0
 8012dc8:	e7e8      	b.n	8012d9c <rmw_time_equal+0x6c>
 8012dca:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8012dce:	e7cd      	b.n	8012d6c <rmw_time_equal+0x3c>
 8012dd0:	25c17d04 	.word	0x25c17d04
 8012dd4:	3b9aca00 	.word	0x3b9aca00

08012dd8 <rmw_time_total_nsec>:
 8012dd8:	b470      	push	{r4, r5, r6}
 8012dda:	b085      	sub	sp, #20
 8012ddc:	ac04      	add	r4, sp, #16
 8012dde:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8012de2:	4603      	mov	r3, r0
 8012de4:	4912      	ldr	r1, [pc, #72]	@ (8012e30 <rmw_time_total_nsec+0x58>)
 8012de6:	9e03      	ldr	r6, [sp, #12]
 8012de8:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8012dec:	2202      	movs	r2, #2
 8012dee:	4299      	cmp	r1, r3
 8012df0:	41aa      	sbcs	r2, r5
 8012df2:	d311      	bcc.n	8012e18 <rmw_time_total_nsec+0x40>
 8012df4:	4c0f      	ldr	r4, [pc, #60]	@ (8012e34 <rmw_time_total_nsec+0x5c>)
 8012df6:	fba3 3204 	umull	r3, r2, r3, r4
 8012dfa:	fb04 2205 	mla	r2, r4, r5, r2
 8012dfe:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012e02:	43dd      	mvns	r5, r3
 8012e04:	1a8c      	subs	r4, r1, r2
 8012e06:	4285      	cmp	r5, r0
 8012e08:	41b4      	sbcs	r4, r6
 8012e0a:	d30c      	bcc.n	8012e26 <rmw_time_total_nsec+0x4e>
 8012e0c:	1818      	adds	r0, r3, r0
 8012e0e:	eb42 0106 	adc.w	r1, r2, r6
 8012e12:	b005      	add	sp, #20
 8012e14:	bc70      	pop	{r4, r5, r6}
 8012e16:	4770      	bx	lr
 8012e18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012e1c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012e20:	b005      	add	sp, #20
 8012e22:	bc70      	pop	{r4, r5, r6}
 8012e24:	4770      	bx	lr
 8012e26:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012e2a:	b005      	add	sp, #20
 8012e2c:	bc70      	pop	{r4, r5, r6}
 8012e2e:	4770      	bx	lr
 8012e30:	25c17d04 	.word	0x25c17d04
 8012e34:	3b9aca00 	.word	0x3b9aca00

08012e38 <rmw_validate_full_topic_name>:
 8012e38:	2800      	cmp	r0, #0
 8012e3a:	d057      	beq.n	8012eec <rmw_validate_full_topic_name+0xb4>
 8012e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e40:	460d      	mov	r5, r1
 8012e42:	2900      	cmp	r1, #0
 8012e44:	d054      	beq.n	8012ef0 <rmw_validate_full_topic_name+0xb8>
 8012e46:	4616      	mov	r6, r2
 8012e48:	4604      	mov	r4, r0
 8012e4a:	f7ed fa41 	bl	80002d0 <strlen>
 8012e4e:	b148      	cbz	r0, 8012e64 <rmw_validate_full_topic_name+0x2c>
 8012e50:	7823      	ldrb	r3, [r4, #0]
 8012e52:	2b2f      	cmp	r3, #47	@ 0x2f
 8012e54:	d00d      	beq.n	8012e72 <rmw_validate_full_topic_name+0x3a>
 8012e56:	2302      	movs	r3, #2
 8012e58:	602b      	str	r3, [r5, #0]
 8012e5a:	b13e      	cbz	r6, 8012e6c <rmw_validate_full_topic_name+0x34>
 8012e5c:	2000      	movs	r0, #0
 8012e5e:	6030      	str	r0, [r6, #0]
 8012e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e64:	2301      	movs	r3, #1
 8012e66:	602b      	str	r3, [r5, #0]
 8012e68:	2e00      	cmp	r6, #0
 8012e6a:	d1f7      	bne.n	8012e5c <rmw_validate_full_topic_name+0x24>
 8012e6c:	2000      	movs	r0, #0
 8012e6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e72:	1e43      	subs	r3, r0, #1
 8012e74:	5ce2      	ldrb	r2, [r4, r3]
 8012e76:	2a2f      	cmp	r2, #47	@ 0x2f
 8012e78:	d03c      	beq.n	8012ef4 <rmw_validate_full_topic_name+0xbc>
 8012e7a:	1e63      	subs	r3, r4, #1
 8012e7c:	eb03 0800 	add.w	r8, r3, r0
 8012e80:	f1c4 0e01 	rsb	lr, r4, #1
 8012e84:	eb0e 0703 	add.w	r7, lr, r3
 8012e88:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8012e8c:	f021 0220 	bic.w	r2, r1, #32
 8012e90:	3a41      	subs	r2, #65	@ 0x41
 8012e92:	2a19      	cmp	r2, #25
 8012e94:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 8012e98:	d90b      	bls.n	8012eb2 <rmw_validate_full_topic_name+0x7a>
 8012e9a:	295f      	cmp	r1, #95	@ 0x5f
 8012e9c:	d009      	beq.n	8012eb2 <rmw_validate_full_topic_name+0x7a>
 8012e9e:	f1bc 0f0a 	cmp.w	ip, #10
 8012ea2:	d906      	bls.n	8012eb2 <rmw_validate_full_topic_name+0x7a>
 8012ea4:	2304      	movs	r3, #4
 8012ea6:	602b      	str	r3, [r5, #0]
 8012ea8:	2e00      	cmp	r6, #0
 8012eaa:	d0df      	beq.n	8012e6c <rmw_validate_full_topic_name+0x34>
 8012eac:	6037      	str	r7, [r6, #0]
 8012eae:	2000      	movs	r0, #0
 8012eb0:	e7d6      	b.n	8012e60 <rmw_validate_full_topic_name+0x28>
 8012eb2:	4543      	cmp	r3, r8
 8012eb4:	d1e6      	bne.n	8012e84 <rmw_validate_full_topic_name+0x4c>
 8012eb6:	4f1a      	ldr	r7, [pc, #104]	@ (8012f20 <rmw_validate_full_topic_name+0xe8>)
 8012eb8:	2301      	movs	r3, #1
 8012eba:	e004      	b.n	8012ec6 <rmw_validate_full_topic_name+0x8e>
 8012ebc:	4298      	cmp	r0, r3
 8012ebe:	f104 0401 	add.w	r4, r4, #1
 8012ec2:	d91c      	bls.n	8012efe <rmw_validate_full_topic_name+0xc6>
 8012ec4:	4613      	mov	r3, r2
 8012ec6:	4298      	cmp	r0, r3
 8012ec8:	f103 0201 	add.w	r2, r3, #1
 8012ecc:	d0f6      	beq.n	8012ebc <rmw_validate_full_topic_name+0x84>
 8012ece:	7821      	ldrb	r1, [r4, #0]
 8012ed0:	292f      	cmp	r1, #47	@ 0x2f
 8012ed2:	d1f3      	bne.n	8012ebc <rmw_validate_full_topic_name+0x84>
 8012ed4:	7861      	ldrb	r1, [r4, #1]
 8012ed6:	292f      	cmp	r1, #47	@ 0x2f
 8012ed8:	d01c      	beq.n	8012f14 <rmw_validate_full_topic_name+0xdc>
 8012eda:	5dc9      	ldrb	r1, [r1, r7]
 8012edc:	0749      	lsls	r1, r1, #29
 8012ede:	d5ed      	bpl.n	8012ebc <rmw_validate_full_topic_name+0x84>
 8012ee0:	2206      	movs	r2, #6
 8012ee2:	602a      	str	r2, [r5, #0]
 8012ee4:	2e00      	cmp	r6, #0
 8012ee6:	d0c1      	beq.n	8012e6c <rmw_validate_full_topic_name+0x34>
 8012ee8:	6033      	str	r3, [r6, #0]
 8012eea:	e7bf      	b.n	8012e6c <rmw_validate_full_topic_name+0x34>
 8012eec:	200b      	movs	r0, #11
 8012eee:	4770      	bx	lr
 8012ef0:	200b      	movs	r0, #11
 8012ef2:	e7b5      	b.n	8012e60 <rmw_validate_full_topic_name+0x28>
 8012ef4:	2203      	movs	r2, #3
 8012ef6:	602a      	str	r2, [r5, #0]
 8012ef8:	2e00      	cmp	r6, #0
 8012efa:	d1f5      	bne.n	8012ee8 <rmw_validate_full_topic_name+0xb0>
 8012efc:	e7b6      	b.n	8012e6c <rmw_validate_full_topic_name+0x34>
 8012efe:	28f7      	cmp	r0, #247	@ 0xf7
 8012f00:	d802      	bhi.n	8012f08 <rmw_validate_full_topic_name+0xd0>
 8012f02:	2000      	movs	r0, #0
 8012f04:	6028      	str	r0, [r5, #0]
 8012f06:	e7ab      	b.n	8012e60 <rmw_validate_full_topic_name+0x28>
 8012f08:	2307      	movs	r3, #7
 8012f0a:	602b      	str	r3, [r5, #0]
 8012f0c:	2e00      	cmp	r6, #0
 8012f0e:	d0ad      	beq.n	8012e6c <rmw_validate_full_topic_name+0x34>
 8012f10:	23f6      	movs	r3, #246	@ 0xf6
 8012f12:	e7e9      	b.n	8012ee8 <rmw_validate_full_topic_name+0xb0>
 8012f14:	2205      	movs	r2, #5
 8012f16:	602a      	str	r2, [r5, #0]
 8012f18:	2e00      	cmp	r6, #0
 8012f1a:	d1e5      	bne.n	8012ee8 <rmw_validate_full_topic_name+0xb0>
 8012f1c:	e7a6      	b.n	8012e6c <rmw_validate_full_topic_name+0x34>
 8012f1e:	bf00      	nop
 8012f20:	0801ac5e 	.word	0x0801ac5e

08012f24 <get_memory>:
 8012f24:	4603      	mov	r3, r0
 8012f26:	6840      	ldr	r0, [r0, #4]
 8012f28:	b158      	cbz	r0, 8012f42 <get_memory+0x1e>
 8012f2a:	6842      	ldr	r2, [r0, #4]
 8012f2c:	605a      	str	r2, [r3, #4]
 8012f2e:	b10a      	cbz	r2, 8012f34 <get_memory+0x10>
 8012f30:	2100      	movs	r1, #0
 8012f32:	6011      	str	r1, [r2, #0]
 8012f34:	681a      	ldr	r2, [r3, #0]
 8012f36:	6042      	str	r2, [r0, #4]
 8012f38:	b102      	cbz	r2, 8012f3c <get_memory+0x18>
 8012f3a:	6010      	str	r0, [r2, #0]
 8012f3c:	2200      	movs	r2, #0
 8012f3e:	6002      	str	r2, [r0, #0]
 8012f40:	6018      	str	r0, [r3, #0]
 8012f42:	4770      	bx	lr

08012f44 <put_memory>:
 8012f44:	680b      	ldr	r3, [r1, #0]
 8012f46:	b10b      	cbz	r3, 8012f4c <put_memory+0x8>
 8012f48:	684a      	ldr	r2, [r1, #4]
 8012f4a:	605a      	str	r2, [r3, #4]
 8012f4c:	684a      	ldr	r2, [r1, #4]
 8012f4e:	b102      	cbz	r2, 8012f52 <put_memory+0xe>
 8012f50:	6013      	str	r3, [r2, #0]
 8012f52:	6803      	ldr	r3, [r0, #0]
 8012f54:	428b      	cmp	r3, r1
 8012f56:	6843      	ldr	r3, [r0, #4]
 8012f58:	bf08      	it	eq
 8012f5a:	6002      	streq	r2, [r0, #0]
 8012f5c:	604b      	str	r3, [r1, #4]
 8012f5e:	b103      	cbz	r3, 8012f62 <put_memory+0x1e>
 8012f60:	6019      	str	r1, [r3, #0]
 8012f62:	2300      	movs	r3, #0
 8012f64:	600b      	str	r3, [r1, #0]
 8012f66:	6041      	str	r1, [r0, #4]
 8012f68:	4770      	bx	lr
 8012f6a:	bf00      	nop

08012f6c <rmw_destroy_client>:
 8012f6c:	b570      	push	{r4, r5, r6, lr}
 8012f6e:	b128      	cbz	r0, 8012f7c <rmw_destroy_client+0x10>
 8012f70:	4604      	mov	r4, r0
 8012f72:	6800      	ldr	r0, [r0, #0]
 8012f74:	460d      	mov	r5, r1
 8012f76:	f7f9 ffe1 	bl	800cf3c <is_uxrce_rmw_identifier_valid>
 8012f7a:	b910      	cbnz	r0, 8012f82 <rmw_destroy_client+0x16>
 8012f7c:	2401      	movs	r4, #1
 8012f7e:	4620      	mov	r0, r4
 8012f80:	bd70      	pop	{r4, r5, r6, pc}
 8012f82:	6863      	ldr	r3, [r4, #4]
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	d0f9      	beq.n	8012f7c <rmw_destroy_client+0x10>
 8012f88:	2d00      	cmp	r5, #0
 8012f8a:	d0f7      	beq.n	8012f7c <rmw_destroy_client+0x10>
 8012f8c:	6828      	ldr	r0, [r5, #0]
 8012f8e:	f7f9 ffd5 	bl	800cf3c <is_uxrce_rmw_identifier_valid>
 8012f92:	2800      	cmp	r0, #0
 8012f94:	d0f2      	beq.n	8012f7c <rmw_destroy_client+0x10>
 8012f96:	686e      	ldr	r6, [r5, #4]
 8012f98:	2e00      	cmp	r6, #0
 8012f9a:	d0ef      	beq.n	8012f7c <rmw_destroy_client+0x10>
 8012f9c:	6864      	ldr	r4, [r4, #4]
 8012f9e:	6932      	ldr	r2, [r6, #16]
 8012fa0:	6920      	ldr	r0, [r4, #16]
 8012fa2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8012fa6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012faa:	6819      	ldr	r1, [r3, #0]
 8012fac:	f7fa fbf8 	bl	800d7a0 <uxr_buffer_cancel_data>
 8012fb0:	4602      	mov	r2, r0
 8012fb2:	6920      	ldr	r0, [r4, #16]
 8012fb4:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8012fb8:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8012fbc:	f7f9 ff3e 	bl	800ce3c <run_xrce_session>
 8012fc0:	6920      	ldr	r0, [r4, #16]
 8012fc2:	6932      	ldr	r2, [r6, #16]
 8012fc4:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8012fc8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012fcc:	6819      	ldr	r1, [r3, #0]
 8012fce:	f7fa f97b 	bl	800d2c8 <uxr_buffer_delete_entity>
 8012fd2:	4602      	mov	r2, r0
 8012fd4:	6920      	ldr	r0, [r4, #16]
 8012fd6:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8012fda:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8012fde:	f7f9 ff2d 	bl	800ce3c <run_xrce_session>
 8012fe2:	2800      	cmp	r0, #0
 8012fe4:	4628      	mov	r0, r5
 8012fe6:	bf14      	ite	ne
 8012fe8:	2400      	movne	r4, #0
 8012fea:	2402      	moveq	r4, #2
 8012fec:	f7f9 fe0e 	bl	800cc0c <rmw_uxrce_fini_client_memory>
 8012ff0:	e7c5      	b.n	8012f7e <rmw_destroy_client+0x12>
 8012ff2:	bf00      	nop

08012ff4 <rmw_get_implementation_identifier>:
 8012ff4:	4b01      	ldr	r3, [pc, #4]	@ (8012ffc <rmw_get_implementation_identifier+0x8>)
 8012ff6:	6818      	ldr	r0, [r3, #0]
 8012ff8:	4770      	bx	lr
 8012ffa:	bf00      	nop
 8012ffc:	0801a8ac 	.word	0x0801a8ac

08013000 <rmw_create_guard_condition>:
 8013000:	b538      	push	{r3, r4, r5, lr}
 8013002:	4605      	mov	r5, r0
 8013004:	4807      	ldr	r0, [pc, #28]	@ (8013024 <rmw_create_guard_condition+0x24>)
 8013006:	f7ff ff8d 	bl	8012f24 <get_memory>
 801300a:	b148      	cbz	r0, 8013020 <rmw_create_guard_condition+0x20>
 801300c:	6884      	ldr	r4, [r0, #8]
 801300e:	2300      	movs	r3, #0
 8013010:	7423      	strb	r3, [r4, #16]
 8013012:	61e5      	str	r5, [r4, #28]
 8013014:	f7ff ffee 	bl	8012ff4 <rmw_get_implementation_identifier>
 8013018:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801301c:	f104 0014 	add.w	r0, r4, #20
 8013020:	bd38      	pop	{r3, r4, r5, pc}
 8013022:	bf00      	nop
 8013024:	2001118c 	.word	0x2001118c

08013028 <rmw_destroy_guard_condition>:
 8013028:	b508      	push	{r3, lr}
 801302a:	4b08      	ldr	r3, [pc, #32]	@ (801304c <rmw_destroy_guard_condition+0x24>)
 801302c:	6819      	ldr	r1, [r3, #0]
 801302e:	b911      	cbnz	r1, 8013036 <rmw_destroy_guard_condition+0xe>
 8013030:	e00a      	b.n	8013048 <rmw_destroy_guard_condition+0x20>
 8013032:	6849      	ldr	r1, [r1, #4]
 8013034:	b141      	cbz	r1, 8013048 <rmw_destroy_guard_condition+0x20>
 8013036:	688b      	ldr	r3, [r1, #8]
 8013038:	3314      	adds	r3, #20
 801303a:	4298      	cmp	r0, r3
 801303c:	d1f9      	bne.n	8013032 <rmw_destroy_guard_condition+0xa>
 801303e:	4803      	ldr	r0, [pc, #12]	@ (801304c <rmw_destroy_guard_condition+0x24>)
 8013040:	f7ff ff80 	bl	8012f44 <put_memory>
 8013044:	2000      	movs	r0, #0
 8013046:	bd08      	pop	{r3, pc}
 8013048:	2001      	movs	r0, #1
 801304a:	bd08      	pop	{r3, pc}
 801304c:	2001118c 	.word	0x2001118c

08013050 <rmw_init_options_init>:
 8013050:	b084      	sub	sp, #16
 8013052:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013054:	b083      	sub	sp, #12
 8013056:	ad09      	add	r5, sp, #36	@ 0x24
 8013058:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 801305c:	b130      	cbz	r0, 801306c <rmw_init_options_init+0x1c>
 801305e:	4604      	mov	r4, r0
 8013060:	4628      	mov	r0, r5
 8013062:	f7f8 fc65 	bl	800b930 <rcutils_allocator_is_valid>
 8013066:	b108      	cbz	r0, 801306c <rmw_init_options_init+0x1c>
 8013068:	68a6      	ldr	r6, [r4, #8]
 801306a:	b12e      	cbz	r6, 8013078 <rmw_init_options_init+0x28>
 801306c:	200b      	movs	r0, #11
 801306e:	b003      	add	sp, #12
 8013070:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013074:	b004      	add	sp, #16
 8013076:	4770      	bx	lr
 8013078:	2200      	movs	r2, #0
 801307a:	2300      	movs	r3, #0
 801307c:	e9c4 2300 	strd	r2, r3, [r4]
 8013080:	4b22      	ldr	r3, [pc, #136]	@ (801310c <rmw_init_options_init+0xbc>)
 8013082:	f8df e098 	ldr.w	lr, [pc, #152]	@ 801311c <rmw_init_options_init+0xcc>
 8013086:	681b      	ldr	r3, [r3, #0]
 8013088:	60a3      	str	r3, [r4, #8]
 801308a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801308c:	f104 0c20 	add.w	ip, r4, #32
 8013090:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013094:	466f      	mov	r7, sp
 8013096:	682b      	ldr	r3, [r5, #0]
 8013098:	f8cc 3000 	str.w	r3, [ip]
 801309c:	4638      	mov	r0, r7
 801309e:	f8c4 e01c 	str.w	lr, [r4, #28]
 80130a2:	60e6      	str	r6, [r4, #12]
 80130a4:	f7ff fe40 	bl	8012d28 <rmw_get_default_security_options>
 80130a8:	e897 0003 	ldmia.w	r7, {r0, r1}
 80130ac:	f104 0310 	add.w	r3, r4, #16
 80130b0:	e883 0003 	stmia.w	r3, {r0, r1}
 80130b4:	2203      	movs	r2, #3
 80130b6:	4816      	ldr	r0, [pc, #88]	@ (8013110 <rmw_init_options_init+0xc0>)
 80130b8:	4916      	ldr	r1, [pc, #88]	@ (8013114 <rmw_init_options_init+0xc4>)
 80130ba:	7626      	strb	r6, [r4, #24]
 80130bc:	f7f9 fce6 	bl	800ca8c <rmw_uxrce_init_init_options_impl_memory>
 80130c0:	4813      	ldr	r0, [pc, #76]	@ (8013110 <rmw_init_options_init+0xc0>)
 80130c2:	f7ff ff2f 	bl	8012f24 <get_memory>
 80130c6:	b1f0      	cbz	r0, 8013106 <rmw_init_options_init+0xb6>
 80130c8:	4a13      	ldr	r2, [pc, #76]	@ (8013118 <rmw_init_options_init+0xc8>)
 80130ca:	6883      	ldr	r3, [r0, #8]
 80130cc:	6851      	ldr	r1, [r2, #4]
 80130ce:	7810      	ldrb	r0, [r2, #0]
 80130d0:	6363      	str	r3, [r4, #52]	@ 0x34
 80130d2:	7418      	strb	r0, [r3, #16]
 80130d4:	6159      	str	r1, [r3, #20]
 80130d6:	68d1      	ldr	r1, [r2, #12]
 80130d8:	61d9      	str	r1, [r3, #28]
 80130da:	6911      	ldr	r1, [r2, #16]
 80130dc:	6219      	str	r1, [r3, #32]
 80130de:	6951      	ldr	r1, [r2, #20]
 80130e0:	6892      	ldr	r2, [r2, #8]
 80130e2:	619a      	str	r2, [r3, #24]
 80130e4:	6259      	str	r1, [r3, #36]	@ 0x24
 80130e6:	f7fb fe7b 	bl	800ede0 <uxr_nanos>
 80130ea:	f003 fe3f 	bl	8016d6c <srand>
 80130ee:	f003 fe6b 	bl	8016dc8 <rand>
 80130f2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80130f4:	6298      	str	r0, [r3, #40]	@ 0x28
 80130f6:	2800      	cmp	r0, #0
 80130f8:	d0f9      	beq.n	80130ee <rmw_init_options_init+0x9e>
 80130fa:	2000      	movs	r0, #0
 80130fc:	b003      	add	sp, #12
 80130fe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013102:	b004      	add	sp, #16
 8013104:	4770      	bx	lr
 8013106:	2001      	movs	r0, #1
 8013108:	e7b1      	b.n	801306e <rmw_init_options_init+0x1e>
 801310a:	bf00      	nop
 801310c:	0801a8ac 	.word	0x0801a8ac
 8013110:	2001119c 	.word	0x2001119c
 8013114:	2000ca38 	.word	0x2000ca38
 8013118:	2000c884 	.word	0x2000c884
 801311c:	08019fbc 	.word	0x08019fbc

08013120 <rmw_init_options_copy>:
 8013120:	b570      	push	{r4, r5, r6, lr}
 8013122:	b158      	cbz	r0, 801313c <rmw_init_options_copy+0x1c>
 8013124:	460d      	mov	r5, r1
 8013126:	b149      	cbz	r1, 801313c <rmw_init_options_copy+0x1c>
 8013128:	4604      	mov	r4, r0
 801312a:	6880      	ldr	r0, [r0, #8]
 801312c:	b120      	cbz	r0, 8013138 <rmw_init_options_copy+0x18>
 801312e:	4b1e      	ldr	r3, [pc, #120]	@ (80131a8 <rmw_init_options_copy+0x88>)
 8013130:	6819      	ldr	r1, [r3, #0]
 8013132:	f7ed f86d 	bl	8000210 <strcmp>
 8013136:	bb90      	cbnz	r0, 801319e <rmw_init_options_copy+0x7e>
 8013138:	68ab      	ldr	r3, [r5, #8]
 801313a:	b113      	cbz	r3, 8013142 <rmw_init_options_copy+0x22>
 801313c:	250b      	movs	r5, #11
 801313e:	4628      	mov	r0, r5
 8013140:	bd70      	pop	{r4, r5, r6, pc}
 8013142:	4623      	mov	r3, r4
 8013144:	462a      	mov	r2, r5
 8013146:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 801314a:	f8d3 c000 	ldr.w	ip, [r3]
 801314e:	6858      	ldr	r0, [r3, #4]
 8013150:	6899      	ldr	r1, [r3, #8]
 8013152:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8013156:	f8c2 e00c 	str.w	lr, [r2, #12]
 801315a:	3310      	adds	r3, #16
 801315c:	42b3      	cmp	r3, r6
 801315e:	f8c2 c000 	str.w	ip, [r2]
 8013162:	6050      	str	r0, [r2, #4]
 8013164:	6091      	str	r1, [r2, #8]
 8013166:	f102 0210 	add.w	r2, r2, #16
 801316a:	d1ee      	bne.n	801314a <rmw_init_options_copy+0x2a>
 801316c:	6819      	ldr	r1, [r3, #0]
 801316e:	685b      	ldr	r3, [r3, #4]
 8013170:	480e      	ldr	r0, [pc, #56]	@ (80131ac <rmw_init_options_copy+0x8c>)
 8013172:	6053      	str	r3, [r2, #4]
 8013174:	6011      	str	r1, [r2, #0]
 8013176:	f7ff fed5 	bl	8012f24 <get_memory>
 801317a:	b198      	cbz	r0, 80131a4 <rmw_init_options_copy+0x84>
 801317c:	6883      	ldr	r3, [r0, #8]
 801317e:	636b      	str	r3, [r5, #52]	@ 0x34
 8013180:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8013182:	f102 0c10 	add.w	ip, r2, #16
 8013186:	f103 0410 	add.w	r4, r3, #16
 801318a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801318e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013190:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8013194:	2500      	movs	r5, #0
 8013196:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801319a:	4628      	mov	r0, r5
 801319c:	bd70      	pop	{r4, r5, r6, pc}
 801319e:	250c      	movs	r5, #12
 80131a0:	4628      	mov	r0, r5
 80131a2:	bd70      	pop	{r4, r5, r6, pc}
 80131a4:	2501      	movs	r5, #1
 80131a6:	e7ca      	b.n	801313e <rmw_init_options_copy+0x1e>
 80131a8:	0801a8ac 	.word	0x0801a8ac
 80131ac:	2001119c 	.word	0x2001119c

080131b0 <rmw_init_options_fini>:
 80131b0:	2800      	cmp	r0, #0
 80131b2:	d03d      	beq.n	8013230 <rmw_init_options_fini+0x80>
 80131b4:	b510      	push	{r4, lr}
 80131b6:	4604      	mov	r4, r0
 80131b8:	b08e      	sub	sp, #56	@ 0x38
 80131ba:	3020      	adds	r0, #32
 80131bc:	f7f8 fbb8 	bl	800b930 <rcutils_allocator_is_valid>
 80131c0:	b360      	cbz	r0, 801321c <rmw_init_options_fini+0x6c>
 80131c2:	68a0      	ldr	r0, [r4, #8]
 80131c4:	b120      	cbz	r0, 80131d0 <rmw_init_options_fini+0x20>
 80131c6:	4b1c      	ldr	r3, [pc, #112]	@ (8013238 <rmw_init_options_fini+0x88>)
 80131c8:	6819      	ldr	r1, [r3, #0]
 80131ca:	f7ed f821 	bl	8000210 <strcmp>
 80131ce:	bb68      	cbnz	r0, 801322c <rmw_init_options_fini+0x7c>
 80131d0:	4b1a      	ldr	r3, [pc, #104]	@ (801323c <rmw_init_options_fini+0x8c>)
 80131d2:	6819      	ldr	r1, [r3, #0]
 80131d4:	b331      	cbz	r1, 8013224 <rmw_init_options_fini+0x74>
 80131d6:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80131d8:	e001      	b.n	80131de <rmw_init_options_fini+0x2e>
 80131da:	6849      	ldr	r1, [r1, #4]
 80131dc:	b311      	cbz	r1, 8013224 <rmw_init_options_fini+0x74>
 80131de:	688b      	ldr	r3, [r1, #8]
 80131e0:	429a      	cmp	r2, r3
 80131e2:	d1fa      	bne.n	80131da <rmw_init_options_fini+0x2a>
 80131e4:	4815      	ldr	r0, [pc, #84]	@ (801323c <rmw_init_options_fini+0x8c>)
 80131e6:	f7ff fead 	bl	8012f44 <put_memory>
 80131ea:	4668      	mov	r0, sp
 80131ec:	f7ff fd8c 	bl	8012d08 <rmw_get_zero_initialized_init_options>
 80131f0:	46ee      	mov	lr, sp
 80131f2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80131f6:	46a4      	mov	ip, r4
 80131f8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80131fc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013200:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013204:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013208:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801320c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8013210:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013214:	2300      	movs	r3, #0
 8013216:	4618      	mov	r0, r3
 8013218:	b00e      	add	sp, #56	@ 0x38
 801321a:	bd10      	pop	{r4, pc}
 801321c:	230b      	movs	r3, #11
 801321e:	4618      	mov	r0, r3
 8013220:	b00e      	add	sp, #56	@ 0x38
 8013222:	bd10      	pop	{r4, pc}
 8013224:	2301      	movs	r3, #1
 8013226:	4618      	mov	r0, r3
 8013228:	b00e      	add	sp, #56	@ 0x38
 801322a:	bd10      	pop	{r4, pc}
 801322c:	230c      	movs	r3, #12
 801322e:	e7f2      	b.n	8013216 <rmw_init_options_fini+0x66>
 8013230:	230b      	movs	r3, #11
 8013232:	4618      	mov	r0, r3
 8013234:	4770      	bx	lr
 8013236:	bf00      	nop
 8013238:	0801a8ac 	.word	0x0801a8ac
 801323c:	2001119c 	.word	0x2001119c

08013240 <rmw_init>:
 8013240:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013244:	b083      	sub	sp, #12
 8013246:	2800      	cmp	r0, #0
 8013248:	f000 80d3 	beq.w	80133f2 <rmw_init+0x1b2>
 801324c:	460e      	mov	r6, r1
 801324e:	2900      	cmp	r1, #0
 8013250:	f000 80cf 	beq.w	80133f2 <rmw_init+0x1b2>
 8013254:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8013256:	4605      	mov	r5, r0
 8013258:	2b00      	cmp	r3, #0
 801325a:	f000 80ca 	beq.w	80133f2 <rmw_init+0x1b2>
 801325e:	4b78      	ldr	r3, [pc, #480]	@ (8013440 <rmw_init+0x200>)
 8013260:	6880      	ldr	r0, [r0, #8]
 8013262:	681f      	ldr	r7, [r3, #0]
 8013264:	b128      	cbz	r0, 8013272 <rmw_init+0x32>
 8013266:	4639      	mov	r1, r7
 8013268:	f7ec ffd2 	bl	8000210 <strcmp>
 801326c:	2800      	cmp	r0, #0
 801326e:	f040 80ca 	bne.w	8013406 <rmw_init+0x1c6>
 8013272:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013276:	4c73      	ldr	r4, [pc, #460]	@ (8013444 <rmw_init+0x204>)
 8013278:	4973      	ldr	r1, [pc, #460]	@ (8013448 <rmw_init+0x208>)
 801327a:	4874      	ldr	r0, [pc, #464]	@ (801344c <rmw_init+0x20c>)
 801327c:	60b7      	str	r7, [r6, #8]
 801327e:	e9c6 2300 	strd	r2, r3, [r6]
 8013282:	68eb      	ldr	r3, [r5, #12]
 8013284:	64b3      	str	r3, [r6, #72]	@ 0x48
 8013286:	2201      	movs	r2, #1
 8013288:	f7f9 fba0 	bl	800c9cc <rmw_uxrce_init_session_memory>
 801328c:	4620      	mov	r0, r4
 801328e:	4970      	ldr	r1, [pc, #448]	@ (8013450 <rmw_init+0x210>)
 8013290:	2204      	movs	r2, #4
 8013292:	f7f9 fbdb 	bl	800ca4c <rmw_uxrce_init_static_input_buffer_memory>
 8013296:	f04f 0800 	mov.w	r8, #0
 801329a:	486c      	ldr	r0, [pc, #432]	@ (801344c <rmw_init+0x20c>)
 801329c:	f884 800d 	strb.w	r8, [r4, #13]
 80132a0:	f7ff fe40 	bl	8012f24 <get_memory>
 80132a4:	2800      	cmp	r0, #0
 80132a6:	f000 80a9 	beq.w	80133fc <rmw_init+0x1bc>
 80132aa:	6884      	ldr	r4, [r0, #8]
 80132ac:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 80132ae:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 80132b0:	f890 c010 	ldrb.w	ip, [r0, #16]
 80132b4:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 80132b8:	9101      	str	r1, [sp, #4]
 80132ba:	6a00      	ldr	r0, [r0, #32]
 80132bc:	9000      	str	r0, [sp, #0]
 80132be:	f104 0910 	add.w	r9, r4, #16
 80132c2:	4661      	mov	r1, ip
 80132c4:	4648      	mov	r0, r9
 80132c6:	f001 fe2d 	bl	8014f24 <uxr_set_custom_transport_callbacks>
 80132ca:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 80132ce:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80132d2:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 80132d6:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 80132da:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 80132de:	495d      	ldr	r1, [pc, #372]	@ (8013454 <rmw_init+0x214>)
 80132e0:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 80132e4:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 80132e8:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 80132ec:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 80132f0:	4859      	ldr	r0, [pc, #356]	@ (8013458 <rmw_init+0x218>)
 80132f2:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 80132f6:	2201      	movs	r2, #1
 80132f8:	64f4      	str	r4, [r6, #76]	@ 0x4c
 80132fa:	f7f9 fb47 	bl	800c98c <rmw_uxrce_init_node_memory>
 80132fe:	4957      	ldr	r1, [pc, #348]	@ (801345c <rmw_init+0x21c>)
 8013300:	4857      	ldr	r0, [pc, #348]	@ (8013460 <rmw_init+0x220>)
 8013302:	2205      	movs	r2, #5
 8013304:	f7f9 fb22 	bl	800c94c <rmw_uxrce_init_subscription_memory>
 8013308:	4956      	ldr	r1, [pc, #344]	@ (8013464 <rmw_init+0x224>)
 801330a:	4857      	ldr	r0, [pc, #348]	@ (8013468 <rmw_init+0x228>)
 801330c:	220a      	movs	r2, #10
 801330e:	f7f9 fafd 	bl	800c90c <rmw_uxrce_init_publisher_memory>
 8013312:	4956      	ldr	r1, [pc, #344]	@ (801346c <rmw_init+0x22c>)
 8013314:	4856      	ldr	r0, [pc, #344]	@ (8013470 <rmw_init+0x230>)
 8013316:	2201      	movs	r2, #1
 8013318:	f7f9 fab8 	bl	800c88c <rmw_uxrce_init_service_memory>
 801331c:	4955      	ldr	r1, [pc, #340]	@ (8013474 <rmw_init+0x234>)
 801331e:	4856      	ldr	r0, [pc, #344]	@ (8013478 <rmw_init+0x238>)
 8013320:	2201      	movs	r2, #1
 8013322:	f7f9 fad3 	bl	800c8cc <rmw_uxrce_init_client_memory>
 8013326:	4955      	ldr	r1, [pc, #340]	@ (801347c <rmw_init+0x23c>)
 8013328:	4855      	ldr	r0, [pc, #340]	@ (8013480 <rmw_init+0x240>)
 801332a:	220f      	movs	r2, #15
 801332c:	f7f9 fb6e 	bl	800ca0c <rmw_uxrce_init_topic_memory>
 8013330:	4954      	ldr	r1, [pc, #336]	@ (8013484 <rmw_init+0x244>)
 8013332:	4855      	ldr	r0, [pc, #340]	@ (8013488 <rmw_init+0x248>)
 8013334:	2203      	movs	r2, #3
 8013336:	f7f9 fba9 	bl	800ca8c <rmw_uxrce_init_init_options_impl_memory>
 801333a:	4954      	ldr	r1, [pc, #336]	@ (801348c <rmw_init+0x24c>)
 801333c:	4854      	ldr	r0, [pc, #336]	@ (8013490 <rmw_init+0x250>)
 801333e:	2204      	movs	r2, #4
 8013340:	f7f9 fbc4 	bl	800cacc <rmw_uxrce_init_wait_set_memory>
 8013344:	4953      	ldr	r1, [pc, #332]	@ (8013494 <rmw_init+0x254>)
 8013346:	4854      	ldr	r0, [pc, #336]	@ (8013498 <rmw_init+0x258>)
 8013348:	2204      	movs	r2, #4
 801334a:	f7f9 fbdf 	bl	800cb0c <rmw_uxrce_init_guard_condition_memory>
 801334e:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8013350:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 8013352:	4642      	mov	r2, r8
 8013354:	f000 faa0 	bl	8013898 <rmw_uxrce_transport_init>
 8013358:	4607      	mov	r7, r0
 801335a:	2800      	cmp	r0, #0
 801335c:	d158      	bne.n	8013410 <rmw_init+0x1d0>
 801335e:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8013360:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 8013364:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8013366:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 801336a:	4628      	mov	r0, r5
 801336c:	f7fa fb9c 	bl	800daa8 <uxr_init_session>
 8013370:	494a      	ldr	r1, [pc, #296]	@ (801349c <rmw_init+0x25c>)
 8013372:	4622      	mov	r2, r4
 8013374:	4628      	mov	r0, r5
 8013376:	f7fa fbbb 	bl	800daf0 <uxr_set_topic_callback>
 801337a:	4949      	ldr	r1, [pc, #292]	@ (80134a0 <rmw_init+0x260>)
 801337c:	463a      	mov	r2, r7
 801337e:	4628      	mov	r0, r5
 8013380:	f7fa fbb2 	bl	800dae8 <uxr_set_status_callback>
 8013384:	4947      	ldr	r1, [pc, #284]	@ (80134a4 <rmw_init+0x264>)
 8013386:	463a      	mov	r2, r7
 8013388:	4628      	mov	r0, r5
 801338a:	f7fa fbb5 	bl	800daf8 <uxr_set_request_callback>
 801338e:	4946      	ldr	r1, [pc, #280]	@ (80134a8 <rmw_init+0x268>)
 8013390:	463a      	mov	r2, r7
 8013392:	4628      	mov	r0, r5
 8013394:	f7fa fbb4 	bl	800db00 <uxr_set_reply_callback>
 8013398:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 801339c:	2304      	movs	r3, #4
 801339e:	0092      	lsls	r2, r2, #2
 80133a0:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 80133a4:	4628      	mov	r0, r5
 80133a6:	f7fa fbe9 	bl	800db7c <uxr_create_input_reliable_stream>
 80133aa:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 80133ae:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 80133b2:	0092      	lsls	r2, r2, #2
 80133b4:	2304      	movs	r3, #4
 80133b6:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 80133ba:	4628      	mov	r0, r5
 80133bc:	f7fa fbb6 	bl	800db2c <uxr_create_output_reliable_stream>
 80133c0:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 80133c4:	4628      	mov	r0, r5
 80133c6:	f7fa fbd3 	bl	800db70 <uxr_create_input_best_effort_stream>
 80133ca:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 80133ce:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 80133d2:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 80133d6:	3114      	adds	r1, #20
 80133d8:	4628      	mov	r0, r5
 80133da:	f7fa fb95 	bl	800db08 <uxr_create_output_best_effort_stream>
 80133de:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 80133e2:	4628      	mov	r0, r5
 80133e4:	f7fb f920 	bl	800e628 <uxr_create_session>
 80133e8:	b1f8      	cbz	r0, 801342a <rmw_init+0x1ea>
 80133ea:	4638      	mov	r0, r7
 80133ec:	b003      	add	sp, #12
 80133ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80133f2:	270b      	movs	r7, #11
 80133f4:	4638      	mov	r0, r7
 80133f6:	b003      	add	sp, #12
 80133f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80133fc:	2701      	movs	r7, #1
 80133fe:	4638      	mov	r0, r7
 8013400:	b003      	add	sp, #12
 8013402:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013406:	270c      	movs	r7, #12
 8013408:	4638      	mov	r0, r7
 801340a:	b003      	add	sp, #12
 801340c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013410:	4648      	mov	r0, r9
 8013412:	f001 fdc9 	bl	8014fa8 <uxr_close_custom_transport>
 8013416:	480d      	ldr	r0, [pc, #52]	@ (801344c <rmw_init+0x20c>)
 8013418:	4621      	mov	r1, r4
 801341a:	f7ff fd93 	bl	8012f44 <put_memory>
 801341e:	4638      	mov	r0, r7
 8013420:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 8013424:	b003      	add	sp, #12
 8013426:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801342a:	4648      	mov	r0, r9
 801342c:	f001 fdbc 	bl	8014fa8 <uxr_close_custom_transport>
 8013430:	4806      	ldr	r0, [pc, #24]	@ (801344c <rmw_init+0x20c>)
 8013432:	4621      	mov	r1, r4
 8013434:	f7ff fd86 	bl	8012f44 <put_memory>
 8013438:	64f7      	str	r7, [r6, #76]	@ 0x4c
 801343a:	2701      	movs	r7, #1
 801343c:	e7d5      	b.n	80133ea <rmw_init+0x1aa>
 801343e:	bf00      	nop
 8013440:	0801a8ac 	.word	0x0801a8ac
 8013444:	200111ec 	.word	0x200111ec
 8013448:	2000d498 	.word	0x2000d498
 801344c:	200111dc 	.word	0x200111dc
 8013450:	2000ea40 	.word	0x2000ea40
 8013454:	2000cabc 	.word	0x2000cabc
 8013458:	200111ac 	.word	0x200111ac
 801345c:	20010b40 	.word	0x20010b40
 8013460:	200111fc 	.word	0x200111fc
 8013464:	2000cb60 	.word	0x2000cb60
 8013468:	200111bc 	.word	0x200111bc
 801346c:	2000d3d0 	.word	0x2000d3d0
 8013470:	200111cc 	.word	0x200111cc
 8013474:	2000c8f0 	.word	0x2000c8f0
 8013478:	2000c8dc 	.word	0x2000c8dc
 801347c:	20010f78 	.word	0x20010f78
 8013480:	2001120c 	.word	0x2001120c
 8013484:	2000ca38 	.word	0x2000ca38
 8013488:	2001119c 	.word	0x2001119c
 801348c:	2001111c 	.word	0x2001111c
 8013490:	2001121c 	.word	0x2001121c
 8013494:	2000c9b8 	.word	0x2000c9b8
 8013498:	2001118c 	.word	0x2001118c
 801349c:	08016881 	.word	0x08016881
 80134a0:	08016879 	.word	0x08016879
 80134a4:	08016919 	.word	0x08016919
 80134a8:	080169b5 	.word	0x080169b5

080134ac <rmw_context_fini>:
 80134ac:	4b17      	ldr	r3, [pc, #92]	@ (801350c <rmw_context_fini+0x60>)
 80134ae:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 80134b0:	b570      	push	{r4, r5, r6, lr}
 80134b2:	681c      	ldr	r4, [r3, #0]
 80134b4:	4605      	mov	r5, r0
 80134b6:	b334      	cbz	r4, 8013506 <rmw_context_fini+0x5a>
 80134b8:	2600      	movs	r6, #0
 80134ba:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 80134be:	6902      	ldr	r2, [r0, #16]
 80134c0:	428a      	cmp	r2, r1
 80134c2:	d018      	beq.n	80134f6 <rmw_context_fini+0x4a>
 80134c4:	2c00      	cmp	r4, #0
 80134c6:	d1f8      	bne.n	80134ba <rmw_context_fini+0xe>
 80134c8:	b189      	cbz	r1, 80134ee <rmw_context_fini+0x42>
 80134ca:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 80134ce:	789b      	ldrb	r3, [r3, #2]
 80134d0:	2b01      	cmp	r3, #1
 80134d2:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 80134d6:	bf14      	ite	ne
 80134d8:	210a      	movne	r1, #10
 80134da:	2100      	moveq	r1, #0
 80134dc:	f7fb f87c 	bl	800e5d8 <uxr_delete_session_retries>
 80134e0:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 80134e2:	f7f9 fb33 	bl	800cb4c <rmw_uxrce_fini_session_memory>
 80134e6:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 80134e8:	3010      	adds	r0, #16
 80134ea:	f001 fd5d 	bl	8014fa8 <uxr_close_custom_transport>
 80134ee:	2300      	movs	r3, #0
 80134f0:	64eb      	str	r3, [r5, #76]	@ 0x4c
 80134f2:	4630      	mov	r0, r6
 80134f4:	bd70      	pop	{r4, r5, r6, pc}
 80134f6:	3018      	adds	r0, #24
 80134f8:	f7f8 fdb8 	bl	800c06c <rmw_destroy_node>
 80134fc:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80134fe:	4606      	mov	r6, r0
 8013500:	2c00      	cmp	r4, #0
 8013502:	d1da      	bne.n	80134ba <rmw_context_fini+0xe>
 8013504:	e7e0      	b.n	80134c8 <rmw_context_fini+0x1c>
 8013506:	4626      	mov	r6, r4
 8013508:	e7de      	b.n	80134c8 <rmw_context_fini+0x1c>
 801350a:	bf00      	nop
 801350c:	200111ac 	.word	0x200111ac

08013510 <create_topic>:
 8013510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013514:	4605      	mov	r5, r0
 8013516:	b084      	sub	sp, #16
 8013518:	4822      	ldr	r0, [pc, #136]	@ (80135a4 <create_topic+0x94>)
 801351a:	460f      	mov	r7, r1
 801351c:	4616      	mov	r6, r2
 801351e:	f7ff fd01 	bl	8012f24 <get_memory>
 8013522:	4604      	mov	r4, r0
 8013524:	2800      	cmp	r0, #0
 8013526:	d039      	beq.n	801359c <create_topic+0x8c>
 8013528:	692b      	ldr	r3, [r5, #16]
 801352a:	6884      	ldr	r4, [r0, #8]
 801352c:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 80135ac <create_topic+0x9c>
 8013530:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8013534:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8013538:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 801353c:	1c42      	adds	r2, r0, #1
 801353e:	2102      	movs	r1, #2
 8013540:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 8013544:	f7fa f8c2 	bl	800d6cc <uxr_object_id>
 8013548:	223c      	movs	r2, #60	@ 0x3c
 801354a:	6120      	str	r0, [r4, #16]
 801354c:	4641      	mov	r1, r8
 801354e:	4638      	mov	r0, r7
 8013550:	f7f9 fcda 	bl	800cf08 <generate_topic_name>
 8013554:	b1f0      	cbz	r0, 8013594 <create_topic+0x84>
 8013556:	4f14      	ldr	r7, [pc, #80]	@ (80135a8 <create_topic+0x98>)
 8013558:	4630      	mov	r0, r6
 801355a:	2264      	movs	r2, #100	@ 0x64
 801355c:	4639      	mov	r1, r7
 801355e:	f7f9 fca3 	bl	800cea8 <generate_type_name>
 8013562:	b1b8      	cbz	r0, 8013594 <create_topic+0x84>
 8013564:	6928      	ldr	r0, [r5, #16]
 8013566:	2306      	movs	r3, #6
 8013568:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 801356c:	f8cd 8000 	str.w	r8, [sp]
 8013570:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8013574:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013578:	6811      	ldr	r1, [r2, #0]
 801357a:	696b      	ldr	r3, [r5, #20]
 801357c:	6922      	ldr	r2, [r4, #16]
 801357e:	f7f9 ff21 	bl	800d3c4 <uxr_buffer_create_topic_bin>
 8013582:	4602      	mov	r2, r0
 8013584:	6928      	ldr	r0, [r5, #16]
 8013586:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801358a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801358e:	f7f9 fc55 	bl	800ce3c <run_xrce_session>
 8013592:	b918      	cbnz	r0, 801359c <create_topic+0x8c>
 8013594:	4620      	mov	r0, r4
 8013596:	f7f9 fb4f 	bl	800cc38 <rmw_uxrce_fini_topic_memory>
 801359a:	2400      	movs	r4, #0
 801359c:	4620      	mov	r0, r4
 801359e:	b004      	add	sp, #16
 80135a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80135a4:	2001120c 	.word	0x2001120c
 80135a8:	2001129c 	.word	0x2001129c
 80135ac:	20011260 	.word	0x20011260

080135b0 <destroy_topic>:
 80135b0:	b538      	push	{r3, r4, r5, lr}
 80135b2:	6985      	ldr	r5, [r0, #24]
 80135b4:	b1d5      	cbz	r5, 80135ec <destroy_topic+0x3c>
 80135b6:	4604      	mov	r4, r0
 80135b8:	6928      	ldr	r0, [r5, #16]
 80135ba:	6922      	ldr	r2, [r4, #16]
 80135bc:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80135c0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80135c4:	6819      	ldr	r1, [r3, #0]
 80135c6:	f7f9 fe7f 	bl	800d2c8 <uxr_buffer_delete_entity>
 80135ca:	4602      	mov	r2, r0
 80135cc:	6928      	ldr	r0, [r5, #16]
 80135ce:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80135d2:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80135d6:	f7f9 fc31 	bl	800ce3c <run_xrce_session>
 80135da:	2800      	cmp	r0, #0
 80135dc:	4620      	mov	r0, r4
 80135de:	bf14      	ite	ne
 80135e0:	2400      	movne	r4, #0
 80135e2:	2402      	moveq	r4, #2
 80135e4:	f7f9 fb28 	bl	800cc38 <rmw_uxrce_fini_topic_memory>
 80135e8:	4620      	mov	r0, r4
 80135ea:	bd38      	pop	{r3, r4, r5, pc}
 80135ec:	2401      	movs	r4, #1
 80135ee:	4620      	mov	r0, r4
 80135f0:	bd38      	pop	{r3, r4, r5, pc}
 80135f2:	bf00      	nop

080135f4 <rmw_send_request>:
 80135f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80135f8:	4604      	mov	r4, r0
 80135fa:	6800      	ldr	r0, [r0, #0]
 80135fc:	b08b      	sub	sp, #44	@ 0x2c
 80135fe:	460e      	mov	r6, r1
 8013600:	4615      	mov	r5, r2
 8013602:	b128      	cbz	r0, 8013610 <rmw_send_request+0x1c>
 8013604:	4b21      	ldr	r3, [pc, #132]	@ (801368c <rmw_send_request+0x98>)
 8013606:	6819      	ldr	r1, [r3, #0]
 8013608:	f7ec fe02 	bl	8000210 <strcmp>
 801360c:	2800      	cmp	r0, #0
 801360e:	d139      	bne.n	8013684 <rmw_send_request+0x90>
 8013610:	6864      	ldr	r4, [r4, #4]
 8013612:	6963      	ldr	r3, [r4, #20]
 8013614:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 8013618:	689b      	ldr	r3, [r3, #8]
 801361a:	4798      	blx	r3
 801361c:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8013620:	4630      	mov	r0, r6
 8013622:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013626:	4798      	blx	r3
 8013628:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801362c:	9000      	str	r0, [sp, #0]
 801362e:	6922      	ldr	r2, [r4, #16]
 8013630:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8013632:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8013636:	ab02      	add	r3, sp, #8
 8013638:	f7fb fc72 	bl	800ef20 <uxr_prepare_output_stream>
 801363c:	2700      	movs	r7, #0
 801363e:	6028      	str	r0, [r5, #0]
 8013640:	606f      	str	r7, [r5, #4]
 8013642:	b198      	cbz	r0, 801366c <rmw_send_request+0x78>
 8013644:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8013648:	a902      	add	r1, sp, #8
 801364a:	4630      	mov	r0, r6
 801364c:	4798      	blx	r3
 801364e:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 8013652:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8013656:	2b01      	cmp	r3, #1
 8013658:	d00c      	beq.n	8013674 <rmw_send_request+0x80>
 801365a:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 801365c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013660:	f7fa fe72 	bl	800e348 <uxr_run_session_until_confirm_delivery>
 8013664:	4638      	mov	r0, r7
 8013666:	b00b      	add	sp, #44	@ 0x2c
 8013668:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801366c:	2001      	movs	r0, #1
 801366e:	b00b      	add	sp, #44	@ 0x2c
 8013670:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013674:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013678:	f7fa faa6 	bl	800dbc8 <uxr_flash_output_streams>
 801367c:	4638      	mov	r0, r7
 801367e:	b00b      	add	sp, #44	@ 0x2c
 8013680:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013684:	200c      	movs	r0, #12
 8013686:	b00b      	add	sp, #44	@ 0x2c
 8013688:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801368c:	0801a8ac 	.word	0x0801a8ac

08013690 <rmw_take_request>:
 8013690:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013694:	4605      	mov	r5, r0
 8013696:	6800      	ldr	r0, [r0, #0]
 8013698:	b089      	sub	sp, #36	@ 0x24
 801369a:	460c      	mov	r4, r1
 801369c:	4690      	mov	r8, r2
 801369e:	461e      	mov	r6, r3
 80136a0:	b128      	cbz	r0, 80136ae <rmw_take_request+0x1e>
 80136a2:	4b28      	ldr	r3, [pc, #160]	@ (8013744 <rmw_take_request+0xb4>)
 80136a4:	6819      	ldr	r1, [r3, #0]
 80136a6:	f7ec fdb3 	bl	8000210 <strcmp>
 80136aa:	2800      	cmp	r0, #0
 80136ac:	d146      	bne.n	801373c <rmw_take_request+0xac>
 80136ae:	b10e      	cbz	r6, 80136b4 <rmw_take_request+0x24>
 80136b0:	2300      	movs	r3, #0
 80136b2:	7033      	strb	r3, [r6, #0]
 80136b4:	f8d5 9004 	ldr.w	r9, [r5, #4]
 80136b8:	f7f9 fb42 	bl	800cd40 <rmw_uxrce_clean_expired_static_input_buffer>
 80136bc:	4648      	mov	r0, r9
 80136be:	f7f9 fb17 	bl	800ccf0 <rmw_uxrce_find_static_input_buffer_by_owner>
 80136c2:	4607      	mov	r7, r0
 80136c4:	b3b0      	cbz	r0, 8013734 <rmw_take_request+0xa4>
 80136c6:	6885      	ldr	r5, [r0, #8]
 80136c8:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 80136cc:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 80136d0:	e9c4 2308 	strd	r2, r3, [r4, #32]
 80136d4:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 80136d8:	7423      	strb	r3, [r4, #16]
 80136da:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 80136de:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 80136e2:	74e2      	strb	r2, [r4, #19]
 80136e4:	f8a4 3011 	strh.w	r3, [r4, #17]
 80136e8:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 80136ec:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 80136f0:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 80136f4:	61e1      	str	r1, [r4, #28]
 80136f6:	6162      	str	r2, [r4, #20]
 80136f8:	61a3      	str	r3, [r4, #24]
 80136fa:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80136fe:	689b      	ldr	r3, [r3, #8]
 8013700:	4798      	blx	r3
 8013702:	6844      	ldr	r4, [r0, #4]
 8013704:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 8013708:	f105 0110 	add.w	r1, r5, #16
 801370c:	4668      	mov	r0, sp
 801370e:	f7f9 fd13 	bl	800d138 <ucdr_init_buffer>
 8013712:	68e3      	ldr	r3, [r4, #12]
 8013714:	4641      	mov	r1, r8
 8013716:	4668      	mov	r0, sp
 8013718:	4798      	blx	r3
 801371a:	4639      	mov	r1, r7
 801371c:	4604      	mov	r4, r0
 801371e:	480a      	ldr	r0, [pc, #40]	@ (8013748 <rmw_take_request+0xb8>)
 8013720:	f7ff fc10 	bl	8012f44 <put_memory>
 8013724:	b106      	cbz	r6, 8013728 <rmw_take_request+0x98>
 8013726:	7034      	strb	r4, [r6, #0]
 8013728:	f084 0001 	eor.w	r0, r4, #1
 801372c:	b2c0      	uxtb	r0, r0
 801372e:	b009      	add	sp, #36	@ 0x24
 8013730:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013734:	2001      	movs	r0, #1
 8013736:	b009      	add	sp, #36	@ 0x24
 8013738:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801373c:	200c      	movs	r0, #12
 801373e:	b009      	add	sp, #36	@ 0x24
 8013740:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013744:	0801a8ac 	.word	0x0801a8ac
 8013748:	200111ec 	.word	0x200111ec

0801374c <rmw_send_response>:
 801374c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801374e:	4605      	mov	r5, r0
 8013750:	6800      	ldr	r0, [r0, #0]
 8013752:	b091      	sub	sp, #68	@ 0x44
 8013754:	460c      	mov	r4, r1
 8013756:	4616      	mov	r6, r2
 8013758:	b128      	cbz	r0, 8013766 <rmw_send_response+0x1a>
 801375a:	4b29      	ldr	r3, [pc, #164]	@ (8013800 <rmw_send_response+0xb4>)
 801375c:	6819      	ldr	r1, [r3, #0]
 801375e:	f7ec fd57 	bl	8000210 <strcmp>
 8013762:	2800      	cmp	r0, #0
 8013764:	d141      	bne.n	80137ea <rmw_send_response+0x9e>
 8013766:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 801376a:	9306      	str	r3, [sp, #24]
 801376c:	4623      	mov	r3, r4
 801376e:	9207      	str	r2, [sp, #28]
 8013770:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013774:	686d      	ldr	r5, [r5, #4]
 8013776:	789b      	ldrb	r3, [r3, #2]
 8013778:	68a1      	ldr	r1, [r4, #8]
 801377a:	f88d 2017 	strb.w	r2, [sp, #23]
 801377e:	f88d 3016 	strb.w	r3, [sp, #22]
 8013782:	68e2      	ldr	r2, [r4, #12]
 8013784:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8013788:	6860      	ldr	r0, [r4, #4]
 801378a:	f8ad 3014 	strh.w	r3, [sp, #20]
 801378e:	ab02      	add	r3, sp, #8
 8013790:	c307      	stmia	r3!, {r0, r1, r2}
 8013792:	696b      	ldr	r3, [r5, #20]
 8013794:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 8013796:	68db      	ldr	r3, [r3, #12]
 8013798:	4798      	blx	r3
 801379a:	6844      	ldr	r4, [r0, #4]
 801379c:	4630      	mov	r0, r6
 801379e:	6923      	ldr	r3, [r4, #16]
 80137a0:	4798      	blx	r3
 80137a2:	f100 0318 	add.w	r3, r0, #24
 80137a6:	6938      	ldr	r0, [r7, #16]
 80137a8:	9300      	str	r3, [sp, #0]
 80137aa:	692a      	ldr	r2, [r5, #16]
 80137ac:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 80137ae:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80137b2:	ab08      	add	r3, sp, #32
 80137b4:	f7fb fbb4 	bl	800ef20 <uxr_prepare_output_stream>
 80137b8:	b910      	cbnz	r0, 80137c0 <rmw_send_response+0x74>
 80137ba:	2001      	movs	r0, #1
 80137bc:	b011      	add	sp, #68	@ 0x44
 80137be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80137c0:	a902      	add	r1, sp, #8
 80137c2:	a808      	add	r0, sp, #32
 80137c4:	f7fc fce4 	bl	8010190 <uxr_serialize_SampleIdentity>
 80137c8:	68a3      	ldr	r3, [r4, #8]
 80137ca:	a908      	add	r1, sp, #32
 80137cc:	4630      	mov	r0, r6
 80137ce:	4798      	blx	r3
 80137d0:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 80137d4:	6938      	ldr	r0, [r7, #16]
 80137d6:	2b01      	cmp	r3, #1
 80137d8:	d00a      	beq.n	80137f0 <rmw_send_response+0xa4>
 80137da:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 80137dc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80137e0:	f7fa fdb2 	bl	800e348 <uxr_run_session_until_confirm_delivery>
 80137e4:	2000      	movs	r0, #0
 80137e6:	b011      	add	sp, #68	@ 0x44
 80137e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80137ea:	200c      	movs	r0, #12
 80137ec:	b011      	add	sp, #68	@ 0x44
 80137ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80137f0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80137f4:	f7fa f9e8 	bl	800dbc8 <uxr_flash_output_streams>
 80137f8:	2000      	movs	r0, #0
 80137fa:	b011      	add	sp, #68	@ 0x44
 80137fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80137fe:	bf00      	nop
 8013800:	0801a8ac 	.word	0x0801a8ac

08013804 <rmw_take_response>:
 8013804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013808:	4604      	mov	r4, r0
 801380a:	6800      	ldr	r0, [r0, #0]
 801380c:	b088      	sub	sp, #32
 801380e:	4688      	mov	r8, r1
 8013810:	4617      	mov	r7, r2
 8013812:	461d      	mov	r5, r3
 8013814:	b120      	cbz	r0, 8013820 <rmw_take_response+0x1c>
 8013816:	4b1e      	ldr	r3, [pc, #120]	@ (8013890 <rmw_take_response+0x8c>)
 8013818:	6819      	ldr	r1, [r3, #0]
 801381a:	f7ec fcf9 	bl	8000210 <strcmp>
 801381e:	bb78      	cbnz	r0, 8013880 <rmw_take_response+0x7c>
 8013820:	b10d      	cbz	r5, 8013826 <rmw_take_response+0x22>
 8013822:	2300      	movs	r3, #0
 8013824:	702b      	strb	r3, [r5, #0]
 8013826:	6864      	ldr	r4, [r4, #4]
 8013828:	f7f9 fa8a 	bl	800cd40 <rmw_uxrce_clean_expired_static_input_buffer>
 801382c:	4620      	mov	r0, r4
 801382e:	f7f9 fa5f 	bl	800ccf0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013832:	4606      	mov	r6, r0
 8013834:	b340      	cbz	r0, 8013888 <rmw_take_response+0x84>
 8013836:	6963      	ldr	r3, [r4, #20]
 8013838:	6884      	ldr	r4, [r0, #8]
 801383a:	68db      	ldr	r3, [r3, #12]
 801383c:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 8013840:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8013844:	e9c8 0108 	strd	r0, r1, [r8, #32]
 8013848:	4798      	blx	r3
 801384a:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801384e:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 8013852:	f104 0110 	add.w	r1, r4, #16
 8013856:	4668      	mov	r0, sp
 8013858:	f7f9 fc6e 	bl	800d138 <ucdr_init_buffer>
 801385c:	4639      	mov	r1, r7
 801385e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013862:	4668      	mov	r0, sp
 8013864:	4798      	blx	r3
 8013866:	4631      	mov	r1, r6
 8013868:	4604      	mov	r4, r0
 801386a:	480a      	ldr	r0, [pc, #40]	@ (8013894 <rmw_take_response+0x90>)
 801386c:	f7ff fb6a 	bl	8012f44 <put_memory>
 8013870:	b105      	cbz	r5, 8013874 <rmw_take_response+0x70>
 8013872:	702c      	strb	r4, [r5, #0]
 8013874:	f084 0001 	eor.w	r0, r4, #1
 8013878:	b2c0      	uxtb	r0, r0
 801387a:	b008      	add	sp, #32
 801387c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013880:	200c      	movs	r0, #12
 8013882:	b008      	add	sp, #32
 8013884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013888:	2001      	movs	r0, #1
 801388a:	b008      	add	sp, #32
 801388c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013890:	0801a8ac 	.word	0x0801a8ac
 8013894:	200111ec 	.word	0x200111ec

08013898 <rmw_uxrce_transport_init>:
 8013898:	b508      	push	{r3, lr}
 801389a:	b108      	cbz	r0, 80138a0 <rmw_uxrce_transport_init+0x8>
 801389c:	f100 0210 	add.w	r2, r0, #16
 80138a0:	b139      	cbz	r1, 80138b2 <rmw_uxrce_transport_init+0x1a>
 80138a2:	6949      	ldr	r1, [r1, #20]
 80138a4:	4610      	mov	r0, r2
 80138a6:	f001 fb4b 	bl	8014f40 <uxr_init_custom_transport>
 80138aa:	f080 0001 	eor.w	r0, r0, #1
 80138ae:	b2c0      	uxtb	r0, r0
 80138b0:	bd08      	pop	{r3, pc}
 80138b2:	4b04      	ldr	r3, [pc, #16]	@ (80138c4 <rmw_uxrce_transport_init+0x2c>)
 80138b4:	4610      	mov	r0, r2
 80138b6:	6859      	ldr	r1, [r3, #4]
 80138b8:	f001 fb42 	bl	8014f40 <uxr_init_custom_transport>
 80138bc:	f080 0001 	eor.w	r0, r0, #1
 80138c0:	b2c0      	uxtb	r0, r0
 80138c2:	bd08      	pop	{r3, pc}
 80138c4:	2000c884 	.word	0x2000c884

080138c8 <rmw_wait>:
 80138c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80138cc:	b089      	sub	sp, #36	@ 0x24
 80138ce:	4605      	mov	r5, r0
 80138d0:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80138d2:	460e      	mov	r6, r1
 80138d4:	4698      	mov	r8, r3
 80138d6:	4691      	mov	r9, r2
 80138d8:	2a00      	cmp	r2, #0
 80138da:	f000 810a 	beq.w	8013af2 <rmw_wait+0x22a>
 80138de:	b16c      	cbz	r4, 80138fc <rmw_wait+0x34>
 80138e0:	4bae      	ldr	r3, [pc, #696]	@ (8013b9c <rmw_wait+0x2d4>)
 80138e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80138e4:	af04      	add	r7, sp, #16
 80138e6:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 80138ea:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80138ee:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80138f2:	f7ff fa1d 	bl	8012d30 <rmw_time_equal>
 80138f6:	2800      	cmp	r0, #0
 80138f8:	f000 8127 	beq.w	8013b4a <rmw_wait+0x282>
 80138fc:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8013900:	f7f9 fa1e 	bl	800cd40 <rmw_uxrce_clean_expired_static_input_buffer>
 8013904:	4ba6      	ldr	r3, [pc, #664]	@ (8013ba0 <rmw_wait+0x2d8>)
 8013906:	681c      	ldr	r4, [r3, #0]
 8013908:	b14c      	cbz	r4, 801391e <rmw_wait+0x56>
 801390a:	4623      	mov	r3, r4
 801390c:	2100      	movs	r1, #0
 801390e:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8013912:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8013916:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 801391a:	2b00      	cmp	r3, #0
 801391c:	d1f7      	bne.n	801390e <rmw_wait+0x46>
 801391e:	f1b9 0f00 	cmp.w	r9, #0
 8013922:	d011      	beq.n	8013948 <rmw_wait+0x80>
 8013924:	f8d9 1000 	ldr.w	r1, [r9]
 8013928:	b171      	cbz	r1, 8013948 <rmw_wait+0x80>
 801392a:	f8d9 c004 	ldr.w	ip, [r9, #4]
 801392e:	2300      	movs	r3, #0
 8013930:	2001      	movs	r0, #1
 8013932:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8013936:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8013938:	6912      	ldr	r2, [r2, #16]
 801393a:	3301      	adds	r3, #1
 801393c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8013940:	4299      	cmp	r1, r3
 8013942:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8013946:	d1f4      	bne.n	8013932 <rmw_wait+0x6a>
 8013948:	f1b8 0f00 	cmp.w	r8, #0
 801394c:	d011      	beq.n	8013972 <rmw_wait+0xaa>
 801394e:	f8d8 1000 	ldr.w	r1, [r8]
 8013952:	b171      	cbz	r1, 8013972 <rmw_wait+0xaa>
 8013954:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8013958:	2300      	movs	r3, #0
 801395a:	2001      	movs	r0, #1
 801395c:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8013960:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8013962:	6912      	ldr	r2, [r2, #16]
 8013964:	3301      	adds	r3, #1
 8013966:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801396a:	4299      	cmp	r1, r3
 801396c:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8013970:	d1f4      	bne.n	801395c <rmw_wait+0x94>
 8013972:	b185      	cbz	r5, 8013996 <rmw_wait+0xce>
 8013974:	6829      	ldr	r1, [r5, #0]
 8013976:	b171      	cbz	r1, 8013996 <rmw_wait+0xce>
 8013978:	f8d5 c004 	ldr.w	ip, [r5, #4]
 801397c:	2300      	movs	r3, #0
 801397e:	2001      	movs	r0, #1
 8013980:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8013984:	6a12      	ldr	r2, [r2, #32]
 8013986:	6912      	ldr	r2, [r2, #16]
 8013988:	3301      	adds	r3, #1
 801398a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801398e:	4299      	cmp	r1, r3
 8013990:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8013994:	d1f4      	bne.n	8013980 <rmw_wait+0xb8>
 8013996:	b34c      	cbz	r4, 80139ec <rmw_wait+0x124>
 8013998:	4622      	mov	r2, r4
 801399a:	2300      	movs	r3, #0
 801399c:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 80139a0:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 80139a4:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 80139a8:	440b      	add	r3, r1
 80139aa:	b2db      	uxtb	r3, r3
 80139ac:	2a00      	cmp	r2, #0
 80139ae:	d1f5      	bne.n	801399c <rmw_wait+0xd4>
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	f000 8084 	beq.w	8013abe <rmw_wait+0x1f6>
 80139b6:	1c7a      	adds	r2, r7, #1
 80139b8:	d00d      	beq.n	80139d6 <rmw_wait+0x10e>
 80139ba:	ee07 7a90 	vmov	s15, r7
 80139be:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80139c2:	ee07 3a90 	vmov	s15, r3
 80139c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80139ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80139ce:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80139d2:	ee17 7a90 	vmov	r7, s15
 80139d6:	68a0      	ldr	r0, [r4, #8]
 80139d8:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 80139dc:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	f040 8090 	bne.w	8013b06 <rmw_wait+0x23e>
 80139e6:	6864      	ldr	r4, [r4, #4]
 80139e8:	2c00      	cmp	r4, #0
 80139ea:	d1f4      	bne.n	80139d6 <rmw_wait+0x10e>
 80139ec:	f1b9 0f00 	cmp.w	r9, #0
 80139f0:	f000 80bc 	beq.w	8013b6c <rmw_wait+0x2a4>
 80139f4:	f8d9 7000 	ldr.w	r7, [r9]
 80139f8:	2f00      	cmp	r7, #0
 80139fa:	f000 808e 	beq.w	8013b1a <rmw_wait+0x252>
 80139fe:	2400      	movs	r4, #0
 8013a00:	4627      	mov	r7, r4
 8013a02:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8013a06:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013a0a:	f7f9 f971 	bl	800ccf0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013a0e:	2800      	cmp	r0, #0
 8013a10:	d05f      	beq.n	8013ad2 <rmw_wait+0x20a>
 8013a12:	f8d9 3000 	ldr.w	r3, [r9]
 8013a16:	3401      	adds	r4, #1
 8013a18:	42a3      	cmp	r3, r4
 8013a1a:	f04f 0701 	mov.w	r7, #1
 8013a1e:	d8f0      	bhi.n	8013a02 <rmw_wait+0x13a>
 8013a20:	f1b8 0f00 	cmp.w	r8, #0
 8013a24:	d012      	beq.n	8013a4c <rmw_wait+0x184>
 8013a26:	f8d8 3000 	ldr.w	r3, [r8]
 8013a2a:	b17b      	cbz	r3, 8013a4c <rmw_wait+0x184>
 8013a2c:	2400      	movs	r4, #0
 8013a2e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013a32:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013a36:	f7f9 f95b 	bl	800ccf0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013a3a:	2800      	cmp	r0, #0
 8013a3c:	d051      	beq.n	8013ae2 <rmw_wait+0x21a>
 8013a3e:	f8d8 3000 	ldr.w	r3, [r8]
 8013a42:	3401      	adds	r4, #1
 8013a44:	42a3      	cmp	r3, r4
 8013a46:	f04f 0701 	mov.w	r7, #1
 8013a4a:	d8f0      	bhi.n	8013a2e <rmw_wait+0x166>
 8013a4c:	b1dd      	cbz	r5, 8013a86 <rmw_wait+0x1be>
 8013a4e:	682b      	ldr	r3, [r5, #0]
 8013a50:	b1cb      	cbz	r3, 8013a86 <rmw_wait+0x1be>
 8013a52:	2400      	movs	r4, #0
 8013a54:	686b      	ldr	r3, [r5, #4]
 8013a56:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013a5a:	f7f9 f949 	bl	800ccf0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013a5e:	b158      	cbz	r0, 8013a78 <rmw_wait+0x1b0>
 8013a60:	682b      	ldr	r3, [r5, #0]
 8013a62:	3401      	adds	r4, #1
 8013a64:	42a3      	cmp	r3, r4
 8013a66:	d969      	bls.n	8013b3c <rmw_wait+0x274>
 8013a68:	686b      	ldr	r3, [r5, #4]
 8013a6a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013a6e:	2701      	movs	r7, #1
 8013a70:	f7f9 f93e 	bl	800ccf0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013a74:	2800      	cmp	r0, #0
 8013a76:	d1f3      	bne.n	8013a60 <rmw_wait+0x198>
 8013a78:	e9d5 3200 	ldrd	r3, r2, [r5]
 8013a7c:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8013a80:	3401      	adds	r4, #1
 8013a82:	42a3      	cmp	r3, r4
 8013a84:	d8e6      	bhi.n	8013a54 <rmw_wait+0x18c>
 8013a86:	b1a6      	cbz	r6, 8013ab2 <rmw_wait+0x1ea>
 8013a88:	6834      	ldr	r4, [r6, #0]
 8013a8a:	b194      	cbz	r4, 8013ab2 <rmw_wait+0x1ea>
 8013a8c:	2300      	movs	r3, #0
 8013a8e:	461d      	mov	r5, r3
 8013a90:	e004      	b.n	8013a9c <rmw_wait+0x1d4>
 8013a92:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8013a96:	3301      	adds	r3, #1
 8013a98:	42a3      	cmp	r3, r4
 8013a9a:	d00a      	beq.n	8013ab2 <rmw_wait+0x1ea>
 8013a9c:	6870      	ldr	r0, [r6, #4]
 8013a9e:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8013aa2:	7c0a      	ldrb	r2, [r1, #16]
 8013aa4:	2a00      	cmp	r2, #0
 8013aa6:	d0f4      	beq.n	8013a92 <rmw_wait+0x1ca>
 8013aa8:	3301      	adds	r3, #1
 8013aaa:	42a3      	cmp	r3, r4
 8013aac:	740d      	strb	r5, [r1, #16]
 8013aae:	4617      	mov	r7, r2
 8013ab0:	d1f4      	bne.n	8013a9c <rmw_wait+0x1d4>
 8013ab2:	2f00      	cmp	r7, #0
 8013ab4:	d03e      	beq.n	8013b34 <rmw_wait+0x26c>
 8013ab6:	2000      	movs	r0, #0
 8013ab8:	b009      	add	sp, #36	@ 0x24
 8013aba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013abe:	68a0      	ldr	r0, [r4, #8]
 8013ac0:	2100      	movs	r1, #0
 8013ac2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013ac6:	f7fa fc05 	bl	800e2d4 <uxr_run_session_timeout>
 8013aca:	6864      	ldr	r4, [r4, #4]
 8013acc:	2c00      	cmp	r4, #0
 8013ace:	d1f6      	bne.n	8013abe <rmw_wait+0x1f6>
 8013ad0:	e78c      	b.n	80139ec <rmw_wait+0x124>
 8013ad2:	e9d9 3200 	ldrd	r3, r2, [r9]
 8013ad6:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8013ada:	3401      	adds	r4, #1
 8013adc:	42a3      	cmp	r3, r4
 8013ade:	d890      	bhi.n	8013a02 <rmw_wait+0x13a>
 8013ae0:	e79e      	b.n	8013a20 <rmw_wait+0x158>
 8013ae2:	e9d8 3200 	ldrd	r3, r2, [r8]
 8013ae6:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8013aea:	3401      	adds	r4, #1
 8013aec:	429c      	cmp	r4, r3
 8013aee:	d39e      	bcc.n	8013a2e <rmw_wait+0x166>
 8013af0:	e7ac      	b.n	8013a4c <rmw_wait+0x184>
 8013af2:	2b00      	cmp	r3, #0
 8013af4:	f47f aef3 	bne.w	80138de <rmw_wait+0x16>
 8013af8:	2800      	cmp	r0, #0
 8013afa:	f47f aef0 	bne.w	80138de <rmw_wait+0x16>
 8013afe:	2900      	cmp	r1, #0
 8013b00:	f47f aeed 	bne.w	80138de <rmw_wait+0x16>
 8013b04:	e7d7      	b.n	8013ab6 <rmw_wait+0x1ee>
 8013b06:	4639      	mov	r1, r7
 8013b08:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013b0c:	f7fa fbfc 	bl	800e308 <uxr_run_session_until_data>
 8013b10:	6864      	ldr	r4, [r4, #4]
 8013b12:	2c00      	cmp	r4, #0
 8013b14:	f47f af5f 	bne.w	80139d6 <rmw_wait+0x10e>
 8013b18:	e768      	b.n	80139ec <rmw_wait+0x124>
 8013b1a:	f1b8 0f00 	cmp.w	r8, #0
 8013b1e:	d032      	beq.n	8013b86 <rmw_wait+0x2be>
 8013b20:	f8d8 3000 	ldr.w	r3, [r8]
 8013b24:	2b00      	cmp	r3, #0
 8013b26:	d181      	bne.n	8013a2c <rmw_wait+0x164>
 8013b28:	461f      	mov	r7, r3
 8013b2a:	2d00      	cmp	r5, #0
 8013b2c:	d18f      	bne.n	8013a4e <rmw_wait+0x186>
 8013b2e:	462f      	mov	r7, r5
 8013b30:	2e00      	cmp	r6, #0
 8013b32:	d1a9      	bne.n	8013a88 <rmw_wait+0x1c0>
 8013b34:	2002      	movs	r0, #2
 8013b36:	b009      	add	sp, #36	@ 0x24
 8013b38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013b3c:	2e00      	cmp	r6, #0
 8013b3e:	d0ba      	beq.n	8013ab6 <rmw_wait+0x1ee>
 8013b40:	6834      	ldr	r4, [r6, #0]
 8013b42:	2701      	movs	r7, #1
 8013b44:	2c00      	cmp	r4, #0
 8013b46:	d1a1      	bne.n	8013a8c <rmw_wait+0x1c4>
 8013b48:	e7b5      	b.n	8013ab6 <rmw_wait+0x1ee>
 8013b4a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8013b4e:	f7ff f943 	bl	8012dd8 <rmw_time_total_nsec>
 8013b52:	2300      	movs	r3, #0
 8013b54:	4a13      	ldr	r2, [pc, #76]	@ (8013ba4 <rmw_wait+0x2dc>)
 8013b56:	f7ed f8a7 	bl	8000ca8 <__aeabi_uldivmod>
 8013b5a:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8013b5e:	f171 0300 	sbcs.w	r3, r1, #0
 8013b62:	4607      	mov	r7, r0
 8013b64:	bfa8      	it	ge
 8013b66:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 8013b6a:	e6c9      	b.n	8013900 <rmw_wait+0x38>
 8013b6c:	f1b8 0f00 	cmp.w	r8, #0
 8013b70:	d009      	beq.n	8013b86 <rmw_wait+0x2be>
 8013b72:	f8d8 3000 	ldr.w	r3, [r8]
 8013b76:	464f      	mov	r7, r9
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	f47f af57 	bne.w	8013a2c <rmw_wait+0x164>
 8013b7e:	2d00      	cmp	r5, #0
 8013b80:	f47f af65 	bne.w	8013a4e <rmw_wait+0x186>
 8013b84:	e7d3      	b.n	8013b2e <rmw_wait+0x266>
 8013b86:	b17d      	cbz	r5, 8013ba8 <rmw_wait+0x2e0>
 8013b88:	682b      	ldr	r3, [r5, #0]
 8013b8a:	4647      	mov	r7, r8
 8013b8c:	2b00      	cmp	r3, #0
 8013b8e:	f47f af60 	bne.w	8013a52 <rmw_wait+0x18a>
 8013b92:	2e00      	cmp	r6, #0
 8013b94:	f47f af78 	bne.w	8013a88 <rmw_wait+0x1c0>
 8013b98:	e7cc      	b.n	8013b34 <rmw_wait+0x26c>
 8013b9a:	bf00      	nop
 8013b9c:	08019f88 	.word	0x08019f88
 8013ba0:	200111dc 	.word	0x200111dc
 8013ba4:	000f4240 	.word	0x000f4240
 8013ba8:	2e00      	cmp	r6, #0
 8013baa:	d0c3      	beq.n	8013b34 <rmw_wait+0x26c>
 8013bac:	6834      	ldr	r4, [r6, #0]
 8013bae:	462f      	mov	r7, r5
 8013bb0:	2c00      	cmp	r4, #0
 8013bb2:	f47f af6b 	bne.w	8013a8c <rmw_wait+0x1c4>
 8013bb6:	e7bd      	b.n	8013b34 <rmw_wait+0x26c>

08013bb8 <rmw_create_wait_set>:
 8013bb8:	b508      	push	{r3, lr}
 8013bba:	4803      	ldr	r0, [pc, #12]	@ (8013bc8 <rmw_create_wait_set+0x10>)
 8013bbc:	f7ff f9b2 	bl	8012f24 <get_memory>
 8013bc0:	b108      	cbz	r0, 8013bc6 <rmw_create_wait_set+0xe>
 8013bc2:	6880      	ldr	r0, [r0, #8]
 8013bc4:	3010      	adds	r0, #16
 8013bc6:	bd08      	pop	{r3, pc}
 8013bc8:	2001121c 	.word	0x2001121c

08013bcc <rmw_destroy_wait_set>:
 8013bcc:	b508      	push	{r3, lr}
 8013bce:	4b08      	ldr	r3, [pc, #32]	@ (8013bf0 <rmw_destroy_wait_set+0x24>)
 8013bd0:	6819      	ldr	r1, [r3, #0]
 8013bd2:	b911      	cbnz	r1, 8013bda <rmw_destroy_wait_set+0xe>
 8013bd4:	e00a      	b.n	8013bec <rmw_destroy_wait_set+0x20>
 8013bd6:	6849      	ldr	r1, [r1, #4]
 8013bd8:	b141      	cbz	r1, 8013bec <rmw_destroy_wait_set+0x20>
 8013bda:	688b      	ldr	r3, [r1, #8]
 8013bdc:	3310      	adds	r3, #16
 8013bde:	4298      	cmp	r0, r3
 8013be0:	d1f9      	bne.n	8013bd6 <rmw_destroy_wait_set+0xa>
 8013be2:	4803      	ldr	r0, [pc, #12]	@ (8013bf0 <rmw_destroy_wait_set+0x24>)
 8013be4:	f7ff f9ae 	bl	8012f44 <put_memory>
 8013be8:	2000      	movs	r0, #0
 8013bea:	bd08      	pop	{r3, pc}
 8013bec:	2001      	movs	r0, #1
 8013bee:	bd08      	pop	{r3, pc}
 8013bf0:	2001121c 	.word	0x2001121c

08013bf4 <rmw_uros_epoch_nanos>:
 8013bf4:	4b05      	ldr	r3, [pc, #20]	@ (8013c0c <rmw_uros_epoch_nanos+0x18>)
 8013bf6:	681b      	ldr	r3, [r3, #0]
 8013bf8:	b123      	cbz	r3, 8013c04 <rmw_uros_epoch_nanos+0x10>
 8013bfa:	6898      	ldr	r0, [r3, #8]
 8013bfc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013c00:	f7f9 bfd8 	b.w	800dbb4 <uxr_epoch_nanos>
 8013c04:	2000      	movs	r0, #0
 8013c06:	2100      	movs	r1, #0
 8013c08:	4770      	bx	lr
 8013c0a:	bf00      	nop
 8013c0c:	200111dc 	.word	0x200111dc

08013c10 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8013c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c14:	6805      	ldr	r5, [r0, #0]
 8013c16:	4604      	mov	r4, r0
 8013c18:	4628      	mov	r0, r5
 8013c1a:	460e      	mov	r6, r1
 8013c1c:	f7ec faf8 	bl	8000210 <strcmp>
 8013c20:	b1c8      	cbz	r0, 8013c56 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 8013c22:	4b11      	ldr	r3, [pc, #68]	@ (8013c68 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 8013c24:	681b      	ldr	r3, [r3, #0]
 8013c26:	429d      	cmp	r5, r3
 8013c28:	d112      	bne.n	8013c50 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8013c2a:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8013c2e:	f8d8 4000 	ldr.w	r4, [r8]
 8013c32:	b16c      	cbz	r4, 8013c50 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8013c34:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8013c38:	2700      	movs	r7, #0
 8013c3a:	3d04      	subs	r5, #4
 8013c3c:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8013c40:	4631      	mov	r1, r6
 8013c42:	f7ec fae5 	bl	8000210 <strcmp>
 8013c46:	00bb      	lsls	r3, r7, #2
 8013c48:	b140      	cbz	r0, 8013c5c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 8013c4a:	3701      	adds	r7, #1
 8013c4c:	42bc      	cmp	r4, r7
 8013c4e:	d1f5      	bne.n	8013c3c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8013c50:	2000      	movs	r0, #0
 8013c52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c56:	4620      	mov	r0, r4
 8013c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c5c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8013c60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013c64:	58d3      	ldr	r3, [r2, r3]
 8013c66:	4718      	bx	r3
 8013c68:	200000b4 	.word	0x200000b4

08013c6c <std_msgs__msg__String__init>:
 8013c6c:	b538      	push	{r3, r4, r5, lr}
 8013c6e:	4604      	mov	r4, r0
 8013c70:	b128      	cbz	r0, 8013c7e <std_msgs__msg__String__init+0x12>
 8013c72:	f002 fee9 	bl	8016a48 <rosidl_runtime_c__String__init>
 8013c76:	4605      	mov	r5, r0
 8013c78:	b120      	cbz	r0, 8013c84 <std_msgs__msg__String__init+0x18>
 8013c7a:	4628      	mov	r0, r5
 8013c7c:	bd38      	pop	{r3, r4, r5, pc}
 8013c7e:	4605      	mov	r5, r0
 8013c80:	4628      	mov	r0, r5
 8013c82:	bd38      	pop	{r3, r4, r5, pc}
 8013c84:	4620      	mov	r0, r4
 8013c86:	f002 fef5 	bl	8016a74 <rosidl_runtime_c__String__fini>
 8013c8a:	4628      	mov	r0, r5
 8013c8c:	bd38      	pop	{r3, r4, r5, pc}
 8013c8e:	bf00      	nop

08013c90 <std_msgs__msg__String__fini>:
 8013c90:	b108      	cbz	r0, 8013c96 <std_msgs__msg__String__fini+0x6>
 8013c92:	f002 beef 	b.w	8016a74 <rosidl_runtime_c__String__fini>
 8013c96:	4770      	bx	lr

08013c98 <ucdr_serialize_endian_array_char>:
 8013c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c9c:	4619      	mov	r1, r3
 8013c9e:	461f      	mov	r7, r3
 8013ca0:	4605      	mov	r5, r0
 8013ca2:	4690      	mov	r8, r2
 8013ca4:	f7f9 f9f4 	bl	800d090 <ucdr_check_buffer_available_for>
 8013ca8:	b9e0      	cbnz	r0, 8013ce4 <ucdr_serialize_endian_array_char+0x4c>
 8013caa:	463e      	mov	r6, r7
 8013cac:	e009      	b.n	8013cc2 <ucdr_serialize_endian_array_char+0x2a>
 8013cae:	68a8      	ldr	r0, [r5, #8]
 8013cb0:	f004 f9ad 	bl	801800e <memcpy>
 8013cb4:	68ab      	ldr	r3, [r5, #8]
 8013cb6:	6928      	ldr	r0, [r5, #16]
 8013cb8:	4423      	add	r3, r4
 8013cba:	4420      	add	r0, r4
 8013cbc:	1b36      	subs	r6, r6, r4
 8013cbe:	60ab      	str	r3, [r5, #8]
 8013cc0:	6128      	str	r0, [r5, #16]
 8013cc2:	4631      	mov	r1, r6
 8013cc4:	2201      	movs	r2, #1
 8013cc6:	4628      	mov	r0, r5
 8013cc8:	f7f9 fa6a 	bl	800d1a0 <ucdr_check_final_buffer_behavior_array>
 8013ccc:	1bb9      	subs	r1, r7, r6
 8013cce:	4441      	add	r1, r8
 8013cd0:	4604      	mov	r4, r0
 8013cd2:	4602      	mov	r2, r0
 8013cd4:	2800      	cmp	r0, #0
 8013cd6:	d1ea      	bne.n	8013cae <ucdr_serialize_endian_array_char+0x16>
 8013cd8:	2301      	movs	r3, #1
 8013cda:	7da8      	ldrb	r0, [r5, #22]
 8013cdc:	756b      	strb	r3, [r5, #21]
 8013cde:	4058      	eors	r0, r3
 8013ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ce4:	463a      	mov	r2, r7
 8013ce6:	68a8      	ldr	r0, [r5, #8]
 8013ce8:	4641      	mov	r1, r8
 8013cea:	f004 f990 	bl	801800e <memcpy>
 8013cee:	68aa      	ldr	r2, [r5, #8]
 8013cf0:	692b      	ldr	r3, [r5, #16]
 8013cf2:	443a      	add	r2, r7
 8013cf4:	443b      	add	r3, r7
 8013cf6:	60aa      	str	r2, [r5, #8]
 8013cf8:	612b      	str	r3, [r5, #16]
 8013cfa:	e7ed      	b.n	8013cd8 <ucdr_serialize_endian_array_char+0x40>

08013cfc <ucdr_deserialize_endian_array_char>:
 8013cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d00:	4619      	mov	r1, r3
 8013d02:	461f      	mov	r7, r3
 8013d04:	4605      	mov	r5, r0
 8013d06:	4690      	mov	r8, r2
 8013d08:	f7f9 f9c2 	bl	800d090 <ucdr_check_buffer_available_for>
 8013d0c:	b9e0      	cbnz	r0, 8013d48 <ucdr_deserialize_endian_array_char+0x4c>
 8013d0e:	463e      	mov	r6, r7
 8013d10:	e009      	b.n	8013d26 <ucdr_deserialize_endian_array_char+0x2a>
 8013d12:	68a9      	ldr	r1, [r5, #8]
 8013d14:	f004 f97b 	bl	801800e <memcpy>
 8013d18:	68ab      	ldr	r3, [r5, #8]
 8013d1a:	6928      	ldr	r0, [r5, #16]
 8013d1c:	4423      	add	r3, r4
 8013d1e:	4420      	add	r0, r4
 8013d20:	1b36      	subs	r6, r6, r4
 8013d22:	60ab      	str	r3, [r5, #8]
 8013d24:	6128      	str	r0, [r5, #16]
 8013d26:	2201      	movs	r2, #1
 8013d28:	4631      	mov	r1, r6
 8013d2a:	4628      	mov	r0, r5
 8013d2c:	f7f9 fa38 	bl	800d1a0 <ucdr_check_final_buffer_behavior_array>
 8013d30:	4604      	mov	r4, r0
 8013d32:	1bb8      	subs	r0, r7, r6
 8013d34:	4440      	add	r0, r8
 8013d36:	4622      	mov	r2, r4
 8013d38:	2c00      	cmp	r4, #0
 8013d3a:	d1ea      	bne.n	8013d12 <ucdr_deserialize_endian_array_char+0x16>
 8013d3c:	2301      	movs	r3, #1
 8013d3e:	7da8      	ldrb	r0, [r5, #22]
 8013d40:	756b      	strb	r3, [r5, #21]
 8013d42:	4058      	eors	r0, r3
 8013d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d48:	463a      	mov	r2, r7
 8013d4a:	68a9      	ldr	r1, [r5, #8]
 8013d4c:	4640      	mov	r0, r8
 8013d4e:	f004 f95e 	bl	801800e <memcpy>
 8013d52:	68aa      	ldr	r2, [r5, #8]
 8013d54:	692b      	ldr	r3, [r5, #16]
 8013d56:	443a      	add	r2, r7
 8013d58:	443b      	add	r3, r7
 8013d5a:	60aa      	str	r2, [r5, #8]
 8013d5c:	612b      	str	r3, [r5, #16]
 8013d5e:	e7ed      	b.n	8013d3c <ucdr_deserialize_endian_array_char+0x40>

08013d60 <ucdr_serialize_array_uint8_t>:
 8013d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d64:	4688      	mov	r8, r1
 8013d66:	4611      	mov	r1, r2
 8013d68:	4617      	mov	r7, r2
 8013d6a:	4605      	mov	r5, r0
 8013d6c:	f7f9 f990 	bl	800d090 <ucdr_check_buffer_available_for>
 8013d70:	b9e0      	cbnz	r0, 8013dac <ucdr_serialize_array_uint8_t+0x4c>
 8013d72:	463e      	mov	r6, r7
 8013d74:	e009      	b.n	8013d8a <ucdr_serialize_array_uint8_t+0x2a>
 8013d76:	68a8      	ldr	r0, [r5, #8]
 8013d78:	f004 f949 	bl	801800e <memcpy>
 8013d7c:	68aa      	ldr	r2, [r5, #8]
 8013d7e:	692b      	ldr	r3, [r5, #16]
 8013d80:	4422      	add	r2, r4
 8013d82:	4423      	add	r3, r4
 8013d84:	1b36      	subs	r6, r6, r4
 8013d86:	60aa      	str	r2, [r5, #8]
 8013d88:	612b      	str	r3, [r5, #16]
 8013d8a:	4631      	mov	r1, r6
 8013d8c:	2201      	movs	r2, #1
 8013d8e:	4628      	mov	r0, r5
 8013d90:	f7f9 fa06 	bl	800d1a0 <ucdr_check_final_buffer_behavior_array>
 8013d94:	1bb9      	subs	r1, r7, r6
 8013d96:	4441      	add	r1, r8
 8013d98:	4604      	mov	r4, r0
 8013d9a:	4602      	mov	r2, r0
 8013d9c:	2800      	cmp	r0, #0
 8013d9e:	d1ea      	bne.n	8013d76 <ucdr_serialize_array_uint8_t+0x16>
 8013da0:	2301      	movs	r3, #1
 8013da2:	7da8      	ldrb	r0, [r5, #22]
 8013da4:	756b      	strb	r3, [r5, #21]
 8013da6:	4058      	eors	r0, r3
 8013da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013dac:	463a      	mov	r2, r7
 8013dae:	68a8      	ldr	r0, [r5, #8]
 8013db0:	4641      	mov	r1, r8
 8013db2:	f004 f92c 	bl	801800e <memcpy>
 8013db6:	68aa      	ldr	r2, [r5, #8]
 8013db8:	692b      	ldr	r3, [r5, #16]
 8013dba:	443a      	add	r2, r7
 8013dbc:	443b      	add	r3, r7
 8013dbe:	60aa      	str	r2, [r5, #8]
 8013dc0:	612b      	str	r3, [r5, #16]
 8013dc2:	e7ed      	b.n	8013da0 <ucdr_serialize_array_uint8_t+0x40>

08013dc4 <ucdr_serialize_endian_array_uint8_t>:
 8013dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013dc8:	4619      	mov	r1, r3
 8013dca:	461f      	mov	r7, r3
 8013dcc:	4605      	mov	r5, r0
 8013dce:	4690      	mov	r8, r2
 8013dd0:	f7f9 f95e 	bl	800d090 <ucdr_check_buffer_available_for>
 8013dd4:	b9e0      	cbnz	r0, 8013e10 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8013dd6:	463e      	mov	r6, r7
 8013dd8:	e009      	b.n	8013dee <ucdr_serialize_endian_array_uint8_t+0x2a>
 8013dda:	68a8      	ldr	r0, [r5, #8]
 8013ddc:	f004 f917 	bl	801800e <memcpy>
 8013de0:	68ab      	ldr	r3, [r5, #8]
 8013de2:	6928      	ldr	r0, [r5, #16]
 8013de4:	4423      	add	r3, r4
 8013de6:	4420      	add	r0, r4
 8013de8:	1b36      	subs	r6, r6, r4
 8013dea:	60ab      	str	r3, [r5, #8]
 8013dec:	6128      	str	r0, [r5, #16]
 8013dee:	4631      	mov	r1, r6
 8013df0:	2201      	movs	r2, #1
 8013df2:	4628      	mov	r0, r5
 8013df4:	f7f9 f9d4 	bl	800d1a0 <ucdr_check_final_buffer_behavior_array>
 8013df8:	1bb9      	subs	r1, r7, r6
 8013dfa:	4441      	add	r1, r8
 8013dfc:	4604      	mov	r4, r0
 8013dfe:	4602      	mov	r2, r0
 8013e00:	2800      	cmp	r0, #0
 8013e02:	d1ea      	bne.n	8013dda <ucdr_serialize_endian_array_uint8_t+0x16>
 8013e04:	2301      	movs	r3, #1
 8013e06:	7da8      	ldrb	r0, [r5, #22]
 8013e08:	756b      	strb	r3, [r5, #21]
 8013e0a:	4058      	eors	r0, r3
 8013e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e10:	463a      	mov	r2, r7
 8013e12:	68a8      	ldr	r0, [r5, #8]
 8013e14:	4641      	mov	r1, r8
 8013e16:	f004 f8fa 	bl	801800e <memcpy>
 8013e1a:	68aa      	ldr	r2, [r5, #8]
 8013e1c:	692b      	ldr	r3, [r5, #16]
 8013e1e:	443a      	add	r2, r7
 8013e20:	443b      	add	r3, r7
 8013e22:	60aa      	str	r2, [r5, #8]
 8013e24:	612b      	str	r3, [r5, #16]
 8013e26:	e7ed      	b.n	8013e04 <ucdr_serialize_endian_array_uint8_t+0x40>

08013e28 <ucdr_deserialize_array_uint8_t>:
 8013e28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e2c:	4688      	mov	r8, r1
 8013e2e:	4611      	mov	r1, r2
 8013e30:	4617      	mov	r7, r2
 8013e32:	4605      	mov	r5, r0
 8013e34:	f7f9 f92c 	bl	800d090 <ucdr_check_buffer_available_for>
 8013e38:	b9e0      	cbnz	r0, 8013e74 <ucdr_deserialize_array_uint8_t+0x4c>
 8013e3a:	463e      	mov	r6, r7
 8013e3c:	e009      	b.n	8013e52 <ucdr_deserialize_array_uint8_t+0x2a>
 8013e3e:	68a9      	ldr	r1, [r5, #8]
 8013e40:	f004 f8e5 	bl	801800e <memcpy>
 8013e44:	68aa      	ldr	r2, [r5, #8]
 8013e46:	692b      	ldr	r3, [r5, #16]
 8013e48:	4422      	add	r2, r4
 8013e4a:	4423      	add	r3, r4
 8013e4c:	1b36      	subs	r6, r6, r4
 8013e4e:	60aa      	str	r2, [r5, #8]
 8013e50:	612b      	str	r3, [r5, #16]
 8013e52:	2201      	movs	r2, #1
 8013e54:	4631      	mov	r1, r6
 8013e56:	4628      	mov	r0, r5
 8013e58:	f7f9 f9a2 	bl	800d1a0 <ucdr_check_final_buffer_behavior_array>
 8013e5c:	4604      	mov	r4, r0
 8013e5e:	1bb8      	subs	r0, r7, r6
 8013e60:	4440      	add	r0, r8
 8013e62:	4622      	mov	r2, r4
 8013e64:	2c00      	cmp	r4, #0
 8013e66:	d1ea      	bne.n	8013e3e <ucdr_deserialize_array_uint8_t+0x16>
 8013e68:	2301      	movs	r3, #1
 8013e6a:	7da8      	ldrb	r0, [r5, #22]
 8013e6c:	756b      	strb	r3, [r5, #21]
 8013e6e:	4058      	eors	r0, r3
 8013e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e74:	463a      	mov	r2, r7
 8013e76:	68a9      	ldr	r1, [r5, #8]
 8013e78:	4640      	mov	r0, r8
 8013e7a:	f004 f8c8 	bl	801800e <memcpy>
 8013e7e:	68aa      	ldr	r2, [r5, #8]
 8013e80:	692b      	ldr	r3, [r5, #16]
 8013e82:	443a      	add	r2, r7
 8013e84:	443b      	add	r3, r7
 8013e86:	60aa      	str	r2, [r5, #8]
 8013e88:	612b      	str	r3, [r5, #16]
 8013e8a:	e7ed      	b.n	8013e68 <ucdr_deserialize_array_uint8_t+0x40>

08013e8c <ucdr_deserialize_endian_array_uint8_t>:
 8013e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e90:	4619      	mov	r1, r3
 8013e92:	461f      	mov	r7, r3
 8013e94:	4605      	mov	r5, r0
 8013e96:	4690      	mov	r8, r2
 8013e98:	f7f9 f8fa 	bl	800d090 <ucdr_check_buffer_available_for>
 8013e9c:	b9e0      	cbnz	r0, 8013ed8 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8013e9e:	463e      	mov	r6, r7
 8013ea0:	e009      	b.n	8013eb6 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8013ea2:	68a9      	ldr	r1, [r5, #8]
 8013ea4:	f004 f8b3 	bl	801800e <memcpy>
 8013ea8:	68ab      	ldr	r3, [r5, #8]
 8013eaa:	6928      	ldr	r0, [r5, #16]
 8013eac:	4423      	add	r3, r4
 8013eae:	4420      	add	r0, r4
 8013eb0:	1b36      	subs	r6, r6, r4
 8013eb2:	60ab      	str	r3, [r5, #8]
 8013eb4:	6128      	str	r0, [r5, #16]
 8013eb6:	2201      	movs	r2, #1
 8013eb8:	4631      	mov	r1, r6
 8013eba:	4628      	mov	r0, r5
 8013ebc:	f7f9 f970 	bl	800d1a0 <ucdr_check_final_buffer_behavior_array>
 8013ec0:	4604      	mov	r4, r0
 8013ec2:	1bb8      	subs	r0, r7, r6
 8013ec4:	4440      	add	r0, r8
 8013ec6:	4622      	mov	r2, r4
 8013ec8:	2c00      	cmp	r4, #0
 8013eca:	d1ea      	bne.n	8013ea2 <ucdr_deserialize_endian_array_uint8_t+0x16>
 8013ecc:	2301      	movs	r3, #1
 8013ece:	7da8      	ldrb	r0, [r5, #22]
 8013ed0:	756b      	strb	r3, [r5, #21]
 8013ed2:	4058      	eors	r0, r3
 8013ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ed8:	463a      	mov	r2, r7
 8013eda:	68a9      	ldr	r1, [r5, #8]
 8013edc:	4640      	mov	r0, r8
 8013ede:	f004 f896 	bl	801800e <memcpy>
 8013ee2:	68aa      	ldr	r2, [r5, #8]
 8013ee4:	692b      	ldr	r3, [r5, #16]
 8013ee6:	443a      	add	r2, r7
 8013ee8:	443b      	add	r3, r7
 8013eea:	60aa      	str	r2, [r5, #8]
 8013eec:	612b      	str	r3, [r5, #16]
 8013eee:	e7ed      	b.n	8013ecc <ucdr_deserialize_endian_array_uint8_t+0x40>

08013ef0 <ucdr_serialize_bool>:
 8013ef0:	b538      	push	{r3, r4, r5, lr}
 8013ef2:	460d      	mov	r5, r1
 8013ef4:	2101      	movs	r1, #1
 8013ef6:	4604      	mov	r4, r0
 8013ef8:	f7f9 f8d6 	bl	800d0a8 <ucdr_check_final_buffer_behavior>
 8013efc:	b148      	cbz	r0, 8013f12 <ucdr_serialize_bool+0x22>
 8013efe:	68a3      	ldr	r3, [r4, #8]
 8013f00:	701d      	strb	r5, [r3, #0]
 8013f02:	68a2      	ldr	r2, [r4, #8]
 8013f04:	6923      	ldr	r3, [r4, #16]
 8013f06:	2101      	movs	r1, #1
 8013f08:	440a      	add	r2, r1
 8013f0a:	440b      	add	r3, r1
 8013f0c:	60a2      	str	r2, [r4, #8]
 8013f0e:	6123      	str	r3, [r4, #16]
 8013f10:	7561      	strb	r1, [r4, #21]
 8013f12:	7da0      	ldrb	r0, [r4, #22]
 8013f14:	f080 0001 	eor.w	r0, r0, #1
 8013f18:	bd38      	pop	{r3, r4, r5, pc}
 8013f1a:	bf00      	nop

08013f1c <ucdr_deserialize_bool>:
 8013f1c:	b538      	push	{r3, r4, r5, lr}
 8013f1e:	460d      	mov	r5, r1
 8013f20:	2101      	movs	r1, #1
 8013f22:	4604      	mov	r4, r0
 8013f24:	f7f9 f8c0 	bl	800d0a8 <ucdr_check_final_buffer_behavior>
 8013f28:	b160      	cbz	r0, 8013f44 <ucdr_deserialize_bool+0x28>
 8013f2a:	68a2      	ldr	r2, [r4, #8]
 8013f2c:	6923      	ldr	r3, [r4, #16]
 8013f2e:	f812 1b01 	ldrb.w	r1, [r2], #1
 8013f32:	3900      	subs	r1, #0
 8013f34:	bf18      	it	ne
 8013f36:	2101      	movne	r1, #1
 8013f38:	7029      	strb	r1, [r5, #0]
 8013f3a:	3301      	adds	r3, #1
 8013f3c:	2101      	movs	r1, #1
 8013f3e:	60a2      	str	r2, [r4, #8]
 8013f40:	6123      	str	r3, [r4, #16]
 8013f42:	7561      	strb	r1, [r4, #21]
 8013f44:	7da0      	ldrb	r0, [r4, #22]
 8013f46:	f080 0001 	eor.w	r0, r0, #1
 8013f4a:	bd38      	pop	{r3, r4, r5, pc}

08013f4c <ucdr_serialize_uint8_t>:
 8013f4c:	b538      	push	{r3, r4, r5, lr}
 8013f4e:	460d      	mov	r5, r1
 8013f50:	2101      	movs	r1, #1
 8013f52:	4604      	mov	r4, r0
 8013f54:	f7f9 f8a8 	bl	800d0a8 <ucdr_check_final_buffer_behavior>
 8013f58:	b148      	cbz	r0, 8013f6e <ucdr_serialize_uint8_t+0x22>
 8013f5a:	68a3      	ldr	r3, [r4, #8]
 8013f5c:	701d      	strb	r5, [r3, #0]
 8013f5e:	68a2      	ldr	r2, [r4, #8]
 8013f60:	6923      	ldr	r3, [r4, #16]
 8013f62:	2101      	movs	r1, #1
 8013f64:	440a      	add	r2, r1
 8013f66:	440b      	add	r3, r1
 8013f68:	60a2      	str	r2, [r4, #8]
 8013f6a:	6123      	str	r3, [r4, #16]
 8013f6c:	7561      	strb	r1, [r4, #21]
 8013f6e:	7da0      	ldrb	r0, [r4, #22]
 8013f70:	f080 0001 	eor.w	r0, r0, #1
 8013f74:	bd38      	pop	{r3, r4, r5, pc}
 8013f76:	bf00      	nop

08013f78 <ucdr_deserialize_uint8_t>:
 8013f78:	b538      	push	{r3, r4, r5, lr}
 8013f7a:	460d      	mov	r5, r1
 8013f7c:	2101      	movs	r1, #1
 8013f7e:	4604      	mov	r4, r0
 8013f80:	f7f9 f892 	bl	800d0a8 <ucdr_check_final_buffer_behavior>
 8013f84:	b150      	cbz	r0, 8013f9c <ucdr_deserialize_uint8_t+0x24>
 8013f86:	68a3      	ldr	r3, [r4, #8]
 8013f88:	781b      	ldrb	r3, [r3, #0]
 8013f8a:	702b      	strb	r3, [r5, #0]
 8013f8c:	68a2      	ldr	r2, [r4, #8]
 8013f8e:	6923      	ldr	r3, [r4, #16]
 8013f90:	2101      	movs	r1, #1
 8013f92:	440a      	add	r2, r1
 8013f94:	440b      	add	r3, r1
 8013f96:	60a2      	str	r2, [r4, #8]
 8013f98:	6123      	str	r3, [r4, #16]
 8013f9a:	7561      	strb	r1, [r4, #21]
 8013f9c:	7da0      	ldrb	r0, [r4, #22]
 8013f9e:	f080 0001 	eor.w	r0, r0, #1
 8013fa2:	bd38      	pop	{r3, r4, r5, pc}

08013fa4 <ucdr_serialize_uint16_t>:
 8013fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013fa8:	b082      	sub	sp, #8
 8013faa:	460b      	mov	r3, r1
 8013fac:	2102      	movs	r1, #2
 8013fae:	4604      	mov	r4, r0
 8013fb0:	f8ad 3006 	strh.w	r3, [sp, #6]
 8013fb4:	f7f9 f8cc 	bl	800d150 <ucdr_buffer_alignment>
 8013fb8:	4601      	mov	r1, r0
 8013fba:	4620      	mov	r0, r4
 8013fbc:	7d67      	ldrb	r7, [r4, #21]
 8013fbe:	f7f9 f90b 	bl	800d1d8 <ucdr_advance_buffer>
 8013fc2:	2102      	movs	r1, #2
 8013fc4:	4620      	mov	r0, r4
 8013fc6:	f7f9 f863 	bl	800d090 <ucdr_check_buffer_available_for>
 8013fca:	bb78      	cbnz	r0, 801402c <ucdr_serialize_uint16_t+0x88>
 8013fcc:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8013fd0:	42ab      	cmp	r3, r5
 8013fd2:	d926      	bls.n	8014022 <ucdr_serialize_uint16_t+0x7e>
 8013fd4:	1b5e      	subs	r6, r3, r5
 8013fd6:	60a3      	str	r3, [r4, #8]
 8013fd8:	6923      	ldr	r3, [r4, #16]
 8013fda:	f1c6 0802 	rsb	r8, r6, #2
 8013fde:	4433      	add	r3, r6
 8013fe0:	6123      	str	r3, [r4, #16]
 8013fe2:	4641      	mov	r1, r8
 8013fe4:	4620      	mov	r0, r4
 8013fe6:	f7f9 f85f 	bl	800d0a8 <ucdr_check_final_buffer_behavior>
 8013fea:	2800      	cmp	r0, #0
 8013fec:	d03b      	beq.n	8014066 <ucdr_serialize_uint16_t+0xc2>
 8013fee:	7d23      	ldrb	r3, [r4, #20]
 8013ff0:	2b01      	cmp	r3, #1
 8013ff2:	d04a      	beq.n	801408a <ucdr_serialize_uint16_t+0xe6>
 8013ff4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013ff8:	702b      	strb	r3, [r5, #0]
 8013ffa:	2e00      	cmp	r6, #0
 8013ffc:	d040      	beq.n	8014080 <ucdr_serialize_uint16_t+0xdc>
 8013ffe:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8014002:	706b      	strb	r3, [r5, #1]
 8014004:	6923      	ldr	r3, [r4, #16]
 8014006:	68a2      	ldr	r2, [r4, #8]
 8014008:	7da0      	ldrb	r0, [r4, #22]
 801400a:	3302      	adds	r3, #2
 801400c:	1b9e      	subs	r6, r3, r6
 801400e:	4442      	add	r2, r8
 8014010:	2302      	movs	r3, #2
 8014012:	f080 0001 	eor.w	r0, r0, #1
 8014016:	60a2      	str	r2, [r4, #8]
 8014018:	6126      	str	r6, [r4, #16]
 801401a:	7563      	strb	r3, [r4, #21]
 801401c:	b002      	add	sp, #8
 801401e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014022:	2102      	movs	r1, #2
 8014024:	4620      	mov	r0, r4
 8014026:	f7f9 f83f 	bl	800d0a8 <ucdr_check_final_buffer_behavior>
 801402a:	b190      	cbz	r0, 8014052 <ucdr_serialize_uint16_t+0xae>
 801402c:	7d23      	ldrb	r3, [r4, #20]
 801402e:	2b01      	cmp	r3, #1
 8014030:	68a3      	ldr	r3, [r4, #8]
 8014032:	d014      	beq.n	801405e <ucdr_serialize_uint16_t+0xba>
 8014034:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8014038:	701a      	strb	r2, [r3, #0]
 801403a:	68a3      	ldr	r3, [r4, #8]
 801403c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8014040:	705a      	strb	r2, [r3, #1]
 8014042:	68a2      	ldr	r2, [r4, #8]
 8014044:	6923      	ldr	r3, [r4, #16]
 8014046:	3202      	adds	r2, #2
 8014048:	3302      	adds	r3, #2
 801404a:	2102      	movs	r1, #2
 801404c:	60a2      	str	r2, [r4, #8]
 801404e:	6123      	str	r3, [r4, #16]
 8014050:	7561      	strb	r1, [r4, #21]
 8014052:	7da0      	ldrb	r0, [r4, #22]
 8014054:	f080 0001 	eor.w	r0, r0, #1
 8014058:	b002      	add	sp, #8
 801405a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801405e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8014062:	801a      	strh	r2, [r3, #0]
 8014064:	e7ed      	b.n	8014042 <ucdr_serialize_uint16_t+0x9e>
 8014066:	68a2      	ldr	r2, [r4, #8]
 8014068:	6923      	ldr	r3, [r4, #16]
 801406a:	7da0      	ldrb	r0, [r4, #22]
 801406c:	7567      	strb	r7, [r4, #21]
 801406e:	1b92      	subs	r2, r2, r6
 8014070:	1b9b      	subs	r3, r3, r6
 8014072:	f080 0001 	eor.w	r0, r0, #1
 8014076:	60a2      	str	r2, [r4, #8]
 8014078:	6123      	str	r3, [r4, #16]
 801407a:	b002      	add	sp, #8
 801407c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014080:	68a3      	ldr	r3, [r4, #8]
 8014082:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8014086:	701a      	strb	r2, [r3, #0]
 8014088:	e7bc      	b.n	8014004 <ucdr_serialize_uint16_t+0x60>
 801408a:	4628      	mov	r0, r5
 801408c:	f10d 0506 	add.w	r5, sp, #6
 8014090:	4629      	mov	r1, r5
 8014092:	4632      	mov	r2, r6
 8014094:	f003 ffbb 	bl	801800e <memcpy>
 8014098:	68a0      	ldr	r0, [r4, #8]
 801409a:	4642      	mov	r2, r8
 801409c:	19a9      	adds	r1, r5, r6
 801409e:	f003 ffb6 	bl	801800e <memcpy>
 80140a2:	e7af      	b.n	8014004 <ucdr_serialize_uint16_t+0x60>

080140a4 <ucdr_serialize_endian_uint16_t>:
 80140a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80140a8:	b083      	sub	sp, #12
 80140aa:	460d      	mov	r5, r1
 80140ac:	2102      	movs	r1, #2
 80140ae:	4604      	mov	r4, r0
 80140b0:	f8ad 2006 	strh.w	r2, [sp, #6]
 80140b4:	f7f9 f84c 	bl	800d150 <ucdr_buffer_alignment>
 80140b8:	4601      	mov	r1, r0
 80140ba:	4620      	mov	r0, r4
 80140bc:	f894 8015 	ldrb.w	r8, [r4, #21]
 80140c0:	f7f9 f88a 	bl	800d1d8 <ucdr_advance_buffer>
 80140c4:	2102      	movs	r1, #2
 80140c6:	4620      	mov	r0, r4
 80140c8:	f7f8 ffe2 	bl	800d090 <ucdr_check_buffer_available_for>
 80140cc:	bb70      	cbnz	r0, 801412c <ucdr_serialize_endian_uint16_t+0x88>
 80140ce:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80140d2:	42be      	cmp	r6, r7
 80140d4:	d925      	bls.n	8014122 <ucdr_serialize_endian_uint16_t+0x7e>
 80140d6:	6923      	ldr	r3, [r4, #16]
 80140d8:	60a6      	str	r6, [r4, #8]
 80140da:	1bf6      	subs	r6, r6, r7
 80140dc:	4433      	add	r3, r6
 80140de:	f1c6 0902 	rsb	r9, r6, #2
 80140e2:	6123      	str	r3, [r4, #16]
 80140e4:	4649      	mov	r1, r9
 80140e6:	4620      	mov	r0, r4
 80140e8:	f7f8 ffde 	bl	800d0a8 <ucdr_check_final_buffer_behavior>
 80140ec:	2800      	cmp	r0, #0
 80140ee:	d039      	beq.n	8014164 <ucdr_serialize_endian_uint16_t+0xc0>
 80140f0:	2d01      	cmp	r5, #1
 80140f2:	d04a      	beq.n	801418a <ucdr_serialize_endian_uint16_t+0xe6>
 80140f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80140f8:	703b      	strb	r3, [r7, #0]
 80140fa:	2e00      	cmp	r6, #0
 80140fc:	d040      	beq.n	8014180 <ucdr_serialize_endian_uint16_t+0xdc>
 80140fe:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8014102:	707b      	strb	r3, [r7, #1]
 8014104:	6923      	ldr	r3, [r4, #16]
 8014106:	68a2      	ldr	r2, [r4, #8]
 8014108:	7da0      	ldrb	r0, [r4, #22]
 801410a:	3302      	adds	r3, #2
 801410c:	444a      	add	r2, r9
 801410e:	1b9b      	subs	r3, r3, r6
 8014110:	2102      	movs	r1, #2
 8014112:	f080 0001 	eor.w	r0, r0, #1
 8014116:	60a2      	str	r2, [r4, #8]
 8014118:	6123      	str	r3, [r4, #16]
 801411a:	7561      	strb	r1, [r4, #21]
 801411c:	b003      	add	sp, #12
 801411e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014122:	2102      	movs	r1, #2
 8014124:	4620      	mov	r0, r4
 8014126:	f7f8 ffbf 	bl	800d0a8 <ucdr_check_final_buffer_behavior>
 801412a:	b188      	cbz	r0, 8014150 <ucdr_serialize_endian_uint16_t+0xac>
 801412c:	2d01      	cmp	r5, #1
 801412e:	68a3      	ldr	r3, [r4, #8]
 8014130:	d014      	beq.n	801415c <ucdr_serialize_endian_uint16_t+0xb8>
 8014132:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8014136:	701a      	strb	r2, [r3, #0]
 8014138:	68a3      	ldr	r3, [r4, #8]
 801413a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801413e:	705a      	strb	r2, [r3, #1]
 8014140:	68a2      	ldr	r2, [r4, #8]
 8014142:	6923      	ldr	r3, [r4, #16]
 8014144:	3202      	adds	r2, #2
 8014146:	3302      	adds	r3, #2
 8014148:	2102      	movs	r1, #2
 801414a:	60a2      	str	r2, [r4, #8]
 801414c:	6123      	str	r3, [r4, #16]
 801414e:	7561      	strb	r1, [r4, #21]
 8014150:	7da0      	ldrb	r0, [r4, #22]
 8014152:	f080 0001 	eor.w	r0, r0, #1
 8014156:	b003      	add	sp, #12
 8014158:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801415c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8014160:	801a      	strh	r2, [r3, #0]
 8014162:	e7ed      	b.n	8014140 <ucdr_serialize_endian_uint16_t+0x9c>
 8014164:	68a2      	ldr	r2, [r4, #8]
 8014166:	6923      	ldr	r3, [r4, #16]
 8014168:	7da0      	ldrb	r0, [r4, #22]
 801416a:	f884 8015 	strb.w	r8, [r4, #21]
 801416e:	1b92      	subs	r2, r2, r6
 8014170:	1b9b      	subs	r3, r3, r6
 8014172:	f080 0001 	eor.w	r0, r0, #1
 8014176:	60a2      	str	r2, [r4, #8]
 8014178:	6123      	str	r3, [r4, #16]
 801417a:	b003      	add	sp, #12
 801417c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014180:	68a3      	ldr	r3, [r4, #8]
 8014182:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8014186:	701a      	strb	r2, [r3, #0]
 8014188:	e7bc      	b.n	8014104 <ucdr_serialize_endian_uint16_t+0x60>
 801418a:	f10d 0506 	add.w	r5, sp, #6
 801418e:	4629      	mov	r1, r5
 8014190:	4632      	mov	r2, r6
 8014192:	4638      	mov	r0, r7
 8014194:	f003 ff3b 	bl	801800e <memcpy>
 8014198:	68a0      	ldr	r0, [r4, #8]
 801419a:	464a      	mov	r2, r9
 801419c:	19a9      	adds	r1, r5, r6
 801419e:	f003 ff36 	bl	801800e <memcpy>
 80141a2:	e7af      	b.n	8014104 <ucdr_serialize_endian_uint16_t+0x60>

080141a4 <ucdr_deserialize_uint16_t>:
 80141a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80141a8:	460d      	mov	r5, r1
 80141aa:	2102      	movs	r1, #2
 80141ac:	4604      	mov	r4, r0
 80141ae:	f7f8 ffcf 	bl	800d150 <ucdr_buffer_alignment>
 80141b2:	4601      	mov	r1, r0
 80141b4:	4620      	mov	r0, r4
 80141b6:	f894 8015 	ldrb.w	r8, [r4, #21]
 80141ba:	f7f9 f80d 	bl	800d1d8 <ucdr_advance_buffer>
 80141be:	2102      	movs	r1, #2
 80141c0:	4620      	mov	r0, r4
 80141c2:	f7f8 ff65 	bl	800d090 <ucdr_check_buffer_available_for>
 80141c6:	bb60      	cbnz	r0, 8014222 <ucdr_deserialize_uint16_t+0x7e>
 80141c8:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80141cc:	42be      	cmp	r6, r7
 80141ce:	d923      	bls.n	8014218 <ucdr_deserialize_uint16_t+0x74>
 80141d0:	6923      	ldr	r3, [r4, #16]
 80141d2:	60a6      	str	r6, [r4, #8]
 80141d4:	1bf6      	subs	r6, r6, r7
 80141d6:	4433      	add	r3, r6
 80141d8:	f1c6 0902 	rsb	r9, r6, #2
 80141dc:	6123      	str	r3, [r4, #16]
 80141de:	4649      	mov	r1, r9
 80141e0:	4620      	mov	r0, r4
 80141e2:	f7f8 ff61 	bl	800d0a8 <ucdr_check_final_buffer_behavior>
 80141e6:	2800      	cmp	r0, #0
 80141e8:	d034      	beq.n	8014254 <ucdr_deserialize_uint16_t+0xb0>
 80141ea:	7d23      	ldrb	r3, [r4, #20]
 80141ec:	2b01      	cmp	r3, #1
 80141ee:	d042      	beq.n	8014276 <ucdr_deserialize_uint16_t+0xd2>
 80141f0:	787b      	ldrb	r3, [r7, #1]
 80141f2:	702b      	strb	r3, [r5, #0]
 80141f4:	2e00      	cmp	r6, #0
 80141f6:	d03a      	beq.n	801426e <ucdr_deserialize_uint16_t+0xca>
 80141f8:	783b      	ldrb	r3, [r7, #0]
 80141fa:	706b      	strb	r3, [r5, #1]
 80141fc:	6923      	ldr	r3, [r4, #16]
 80141fe:	68a2      	ldr	r2, [r4, #8]
 8014200:	7da0      	ldrb	r0, [r4, #22]
 8014202:	2102      	movs	r1, #2
 8014204:	3302      	adds	r3, #2
 8014206:	444a      	add	r2, r9
 8014208:	1b9b      	subs	r3, r3, r6
 801420a:	7561      	strb	r1, [r4, #21]
 801420c:	60a2      	str	r2, [r4, #8]
 801420e:	6123      	str	r3, [r4, #16]
 8014210:	f080 0001 	eor.w	r0, r0, #1
 8014214:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014218:	2102      	movs	r1, #2
 801421a:	4620      	mov	r0, r4
 801421c:	f7f8 ff44 	bl	800d0a8 <ucdr_check_final_buffer_behavior>
 8014220:	b180      	cbz	r0, 8014244 <ucdr_deserialize_uint16_t+0xa0>
 8014222:	7d23      	ldrb	r3, [r4, #20]
 8014224:	2b01      	cmp	r3, #1
 8014226:	68a3      	ldr	r3, [r4, #8]
 8014228:	d011      	beq.n	801424e <ucdr_deserialize_uint16_t+0xaa>
 801422a:	785b      	ldrb	r3, [r3, #1]
 801422c:	702b      	strb	r3, [r5, #0]
 801422e:	68a3      	ldr	r3, [r4, #8]
 8014230:	781b      	ldrb	r3, [r3, #0]
 8014232:	706b      	strb	r3, [r5, #1]
 8014234:	68a2      	ldr	r2, [r4, #8]
 8014236:	6923      	ldr	r3, [r4, #16]
 8014238:	3202      	adds	r2, #2
 801423a:	3302      	adds	r3, #2
 801423c:	2102      	movs	r1, #2
 801423e:	60a2      	str	r2, [r4, #8]
 8014240:	6123      	str	r3, [r4, #16]
 8014242:	7561      	strb	r1, [r4, #21]
 8014244:	7da0      	ldrb	r0, [r4, #22]
 8014246:	f080 0001 	eor.w	r0, r0, #1
 801424a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801424e:	881b      	ldrh	r3, [r3, #0]
 8014250:	802b      	strh	r3, [r5, #0]
 8014252:	e7ef      	b.n	8014234 <ucdr_deserialize_uint16_t+0x90>
 8014254:	68a2      	ldr	r2, [r4, #8]
 8014256:	6923      	ldr	r3, [r4, #16]
 8014258:	7da0      	ldrb	r0, [r4, #22]
 801425a:	f884 8015 	strb.w	r8, [r4, #21]
 801425e:	1b92      	subs	r2, r2, r6
 8014260:	1b9b      	subs	r3, r3, r6
 8014262:	60a2      	str	r2, [r4, #8]
 8014264:	6123      	str	r3, [r4, #16]
 8014266:	f080 0001 	eor.w	r0, r0, #1
 801426a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801426e:	68a3      	ldr	r3, [r4, #8]
 8014270:	781b      	ldrb	r3, [r3, #0]
 8014272:	706b      	strb	r3, [r5, #1]
 8014274:	e7c2      	b.n	80141fc <ucdr_deserialize_uint16_t+0x58>
 8014276:	4639      	mov	r1, r7
 8014278:	4632      	mov	r2, r6
 801427a:	4628      	mov	r0, r5
 801427c:	f003 fec7 	bl	801800e <memcpy>
 8014280:	68a1      	ldr	r1, [r4, #8]
 8014282:	464a      	mov	r2, r9
 8014284:	19a8      	adds	r0, r5, r6
 8014286:	f003 fec2 	bl	801800e <memcpy>
 801428a:	e7b7      	b.n	80141fc <ucdr_deserialize_uint16_t+0x58>

0801428c <ucdr_deserialize_endian_uint16_t>:
 801428c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014290:	460e      	mov	r6, r1
 8014292:	2102      	movs	r1, #2
 8014294:	4604      	mov	r4, r0
 8014296:	4615      	mov	r5, r2
 8014298:	f7f8 ff5a 	bl	800d150 <ucdr_buffer_alignment>
 801429c:	4601      	mov	r1, r0
 801429e:	4620      	mov	r0, r4
 80142a0:	f894 9015 	ldrb.w	r9, [r4, #21]
 80142a4:	f7f8 ff98 	bl	800d1d8 <ucdr_advance_buffer>
 80142a8:	2102      	movs	r1, #2
 80142aa:	4620      	mov	r0, r4
 80142ac:	f7f8 fef0 	bl	800d090 <ucdr_check_buffer_available_for>
 80142b0:	bb70      	cbnz	r0, 8014310 <ucdr_deserialize_endian_uint16_t+0x84>
 80142b2:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 80142b6:	4547      	cmp	r7, r8
 80142b8:	d925      	bls.n	8014306 <ucdr_deserialize_endian_uint16_t+0x7a>
 80142ba:	6923      	ldr	r3, [r4, #16]
 80142bc:	60a7      	str	r7, [r4, #8]
 80142be:	eba7 0708 	sub.w	r7, r7, r8
 80142c2:	443b      	add	r3, r7
 80142c4:	f1c7 0a02 	rsb	sl, r7, #2
 80142c8:	6123      	str	r3, [r4, #16]
 80142ca:	4651      	mov	r1, sl
 80142cc:	4620      	mov	r0, r4
 80142ce:	f7f8 feeb 	bl	800d0a8 <ucdr_check_final_buffer_behavior>
 80142d2:	2800      	cmp	r0, #0
 80142d4:	d034      	beq.n	8014340 <ucdr_deserialize_endian_uint16_t+0xb4>
 80142d6:	2e01      	cmp	r6, #1
 80142d8:	d043      	beq.n	8014362 <ucdr_deserialize_endian_uint16_t+0xd6>
 80142da:	f898 3001 	ldrb.w	r3, [r8, #1]
 80142de:	702b      	strb	r3, [r5, #0]
 80142e0:	2f00      	cmp	r7, #0
 80142e2:	d03a      	beq.n	801435a <ucdr_deserialize_endian_uint16_t+0xce>
 80142e4:	f898 3000 	ldrb.w	r3, [r8]
 80142e8:	706b      	strb	r3, [r5, #1]
 80142ea:	6923      	ldr	r3, [r4, #16]
 80142ec:	68a2      	ldr	r2, [r4, #8]
 80142ee:	7da0      	ldrb	r0, [r4, #22]
 80142f0:	2102      	movs	r1, #2
 80142f2:	3302      	adds	r3, #2
 80142f4:	4452      	add	r2, sl
 80142f6:	1bdb      	subs	r3, r3, r7
 80142f8:	7561      	strb	r1, [r4, #21]
 80142fa:	60a2      	str	r2, [r4, #8]
 80142fc:	6123      	str	r3, [r4, #16]
 80142fe:	f080 0001 	eor.w	r0, r0, #1
 8014302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014306:	2102      	movs	r1, #2
 8014308:	4620      	mov	r0, r4
 801430a:	f7f8 fecd 	bl	800d0a8 <ucdr_check_final_buffer_behavior>
 801430e:	b178      	cbz	r0, 8014330 <ucdr_deserialize_endian_uint16_t+0xa4>
 8014310:	2e01      	cmp	r6, #1
 8014312:	68a3      	ldr	r3, [r4, #8]
 8014314:	d011      	beq.n	801433a <ucdr_deserialize_endian_uint16_t+0xae>
 8014316:	785b      	ldrb	r3, [r3, #1]
 8014318:	702b      	strb	r3, [r5, #0]
 801431a:	68a3      	ldr	r3, [r4, #8]
 801431c:	781b      	ldrb	r3, [r3, #0]
 801431e:	706b      	strb	r3, [r5, #1]
 8014320:	68a2      	ldr	r2, [r4, #8]
 8014322:	6923      	ldr	r3, [r4, #16]
 8014324:	3202      	adds	r2, #2
 8014326:	3302      	adds	r3, #2
 8014328:	2102      	movs	r1, #2
 801432a:	60a2      	str	r2, [r4, #8]
 801432c:	6123      	str	r3, [r4, #16]
 801432e:	7561      	strb	r1, [r4, #21]
 8014330:	7da0      	ldrb	r0, [r4, #22]
 8014332:	f080 0001 	eor.w	r0, r0, #1
 8014336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801433a:	881b      	ldrh	r3, [r3, #0]
 801433c:	802b      	strh	r3, [r5, #0]
 801433e:	e7ef      	b.n	8014320 <ucdr_deserialize_endian_uint16_t+0x94>
 8014340:	68a2      	ldr	r2, [r4, #8]
 8014342:	6923      	ldr	r3, [r4, #16]
 8014344:	7da0      	ldrb	r0, [r4, #22]
 8014346:	f884 9015 	strb.w	r9, [r4, #21]
 801434a:	1bd2      	subs	r2, r2, r7
 801434c:	1bdb      	subs	r3, r3, r7
 801434e:	60a2      	str	r2, [r4, #8]
 8014350:	6123      	str	r3, [r4, #16]
 8014352:	f080 0001 	eor.w	r0, r0, #1
 8014356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801435a:	68a3      	ldr	r3, [r4, #8]
 801435c:	781b      	ldrb	r3, [r3, #0]
 801435e:	706b      	strb	r3, [r5, #1]
 8014360:	e7c3      	b.n	80142ea <ucdr_deserialize_endian_uint16_t+0x5e>
 8014362:	4641      	mov	r1, r8
 8014364:	463a      	mov	r2, r7
 8014366:	4628      	mov	r0, r5
 8014368:	f003 fe51 	bl	801800e <memcpy>
 801436c:	68a1      	ldr	r1, [r4, #8]
 801436e:	4652      	mov	r2, sl
 8014370:	19e8      	adds	r0, r5, r7
 8014372:	f003 fe4c 	bl	801800e <memcpy>
 8014376:	e7b8      	b.n	80142ea <ucdr_deserialize_endian_uint16_t+0x5e>

08014378 <ucdr_serialize_uint32_t>:
 8014378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801437c:	b082      	sub	sp, #8
 801437e:	4604      	mov	r4, r0
 8014380:	9101      	str	r1, [sp, #4]
 8014382:	2104      	movs	r1, #4
 8014384:	f7f8 fee4 	bl	800d150 <ucdr_buffer_alignment>
 8014388:	4601      	mov	r1, r0
 801438a:	4620      	mov	r0, r4
 801438c:	7d67      	ldrb	r7, [r4, #21]
 801438e:	f7f8 ff23 	bl	800d1d8 <ucdr_advance_buffer>
 8014392:	2104      	movs	r1, #4
 8014394:	4620      	mov	r0, r4
 8014396:	f7f8 fe7b 	bl	800d090 <ucdr_check_buffer_available_for>
 801439a:	2800      	cmp	r0, #0
 801439c:	d139      	bne.n	8014412 <ucdr_serialize_uint32_t+0x9a>
 801439e:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80143a2:	42ab      	cmp	r3, r5
 80143a4:	d930      	bls.n	8014408 <ucdr_serialize_uint32_t+0x90>
 80143a6:	1b5e      	subs	r6, r3, r5
 80143a8:	60a3      	str	r3, [r4, #8]
 80143aa:	6923      	ldr	r3, [r4, #16]
 80143ac:	f1c6 0804 	rsb	r8, r6, #4
 80143b0:	4433      	add	r3, r6
 80143b2:	6123      	str	r3, [r4, #16]
 80143b4:	4641      	mov	r1, r8
 80143b6:	4620      	mov	r0, r4
 80143b8:	f7f8 fe76 	bl	800d0a8 <ucdr_check_final_buffer_behavior>
 80143bc:	2800      	cmp	r0, #0
 80143be:	d04c      	beq.n	801445a <ucdr_serialize_uint32_t+0xe2>
 80143c0:	7d23      	ldrb	r3, [r4, #20]
 80143c2:	2b01      	cmp	r3, #1
 80143c4:	d063      	beq.n	801448e <ucdr_serialize_uint32_t+0x116>
 80143c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80143ca:	702b      	strb	r3, [r5, #0]
 80143cc:	2e00      	cmp	r6, #0
 80143ce:	d051      	beq.n	8014474 <ucdr_serialize_uint32_t+0xfc>
 80143d0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80143d4:	706b      	strb	r3, [r5, #1]
 80143d6:	2e01      	cmp	r6, #1
 80143d8:	d050      	beq.n	801447c <ucdr_serialize_uint32_t+0x104>
 80143da:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80143de:	70ab      	strb	r3, [r5, #2]
 80143e0:	2e02      	cmp	r6, #2
 80143e2:	d04f      	beq.n	8014484 <ucdr_serialize_uint32_t+0x10c>
 80143e4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80143e8:	70eb      	strb	r3, [r5, #3]
 80143ea:	6923      	ldr	r3, [r4, #16]
 80143ec:	68a2      	ldr	r2, [r4, #8]
 80143ee:	7da0      	ldrb	r0, [r4, #22]
 80143f0:	3304      	adds	r3, #4
 80143f2:	1b9e      	subs	r6, r3, r6
 80143f4:	4442      	add	r2, r8
 80143f6:	2304      	movs	r3, #4
 80143f8:	f080 0001 	eor.w	r0, r0, #1
 80143fc:	60a2      	str	r2, [r4, #8]
 80143fe:	6126      	str	r6, [r4, #16]
 8014400:	7563      	strb	r3, [r4, #21]
 8014402:	b002      	add	sp, #8
 8014404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014408:	2104      	movs	r1, #4
 801440a:	4620      	mov	r0, r4
 801440c:	f7f8 fe4c 	bl	800d0a8 <ucdr_check_final_buffer_behavior>
 8014410:	b1d0      	cbz	r0, 8014448 <ucdr_serialize_uint32_t+0xd0>
 8014412:	7d23      	ldrb	r3, [r4, #20]
 8014414:	2b01      	cmp	r3, #1
 8014416:	68a3      	ldr	r3, [r4, #8]
 8014418:	d01c      	beq.n	8014454 <ucdr_serialize_uint32_t+0xdc>
 801441a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801441e:	701a      	strb	r2, [r3, #0]
 8014420:	68a3      	ldr	r3, [r4, #8]
 8014422:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8014426:	705a      	strb	r2, [r3, #1]
 8014428:	68a3      	ldr	r3, [r4, #8]
 801442a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801442e:	709a      	strb	r2, [r3, #2]
 8014430:	68a3      	ldr	r3, [r4, #8]
 8014432:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8014436:	70da      	strb	r2, [r3, #3]
 8014438:	68a2      	ldr	r2, [r4, #8]
 801443a:	6923      	ldr	r3, [r4, #16]
 801443c:	3204      	adds	r2, #4
 801443e:	3304      	adds	r3, #4
 8014440:	2104      	movs	r1, #4
 8014442:	60a2      	str	r2, [r4, #8]
 8014444:	6123      	str	r3, [r4, #16]
 8014446:	7561      	strb	r1, [r4, #21]
 8014448:	7da0      	ldrb	r0, [r4, #22]
 801444a:	f080 0001 	eor.w	r0, r0, #1
 801444e:	b002      	add	sp, #8
 8014450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014454:	9a01      	ldr	r2, [sp, #4]
 8014456:	601a      	str	r2, [r3, #0]
 8014458:	e7ee      	b.n	8014438 <ucdr_serialize_uint32_t+0xc0>
 801445a:	68a2      	ldr	r2, [r4, #8]
 801445c:	6923      	ldr	r3, [r4, #16]
 801445e:	7da0      	ldrb	r0, [r4, #22]
 8014460:	7567      	strb	r7, [r4, #21]
 8014462:	1b92      	subs	r2, r2, r6
 8014464:	1b9b      	subs	r3, r3, r6
 8014466:	f080 0001 	eor.w	r0, r0, #1
 801446a:	60a2      	str	r2, [r4, #8]
 801446c:	6123      	str	r3, [r4, #16]
 801446e:	b002      	add	sp, #8
 8014470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014474:	68a3      	ldr	r3, [r4, #8]
 8014476:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801447a:	701a      	strb	r2, [r3, #0]
 801447c:	68a3      	ldr	r3, [r4, #8]
 801447e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8014482:	701a      	strb	r2, [r3, #0]
 8014484:	68a3      	ldr	r3, [r4, #8]
 8014486:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801448a:	701a      	strb	r2, [r3, #0]
 801448c:	e7ad      	b.n	80143ea <ucdr_serialize_uint32_t+0x72>
 801448e:	4628      	mov	r0, r5
 8014490:	ad01      	add	r5, sp, #4
 8014492:	4629      	mov	r1, r5
 8014494:	4632      	mov	r2, r6
 8014496:	f003 fdba 	bl	801800e <memcpy>
 801449a:	68a0      	ldr	r0, [r4, #8]
 801449c:	4642      	mov	r2, r8
 801449e:	19a9      	adds	r1, r5, r6
 80144a0:	f003 fdb5 	bl	801800e <memcpy>
 80144a4:	e7a1      	b.n	80143ea <ucdr_serialize_uint32_t+0x72>
 80144a6:	bf00      	nop

080144a8 <ucdr_serialize_endian_uint32_t>:
 80144a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80144ac:	b083      	sub	sp, #12
 80144ae:	460d      	mov	r5, r1
 80144b0:	2104      	movs	r1, #4
 80144b2:	4604      	mov	r4, r0
 80144b4:	9201      	str	r2, [sp, #4]
 80144b6:	f7f8 fe4b 	bl	800d150 <ucdr_buffer_alignment>
 80144ba:	4601      	mov	r1, r0
 80144bc:	4620      	mov	r0, r4
 80144be:	f894 8015 	ldrb.w	r8, [r4, #21]
 80144c2:	f7f8 fe89 	bl	800d1d8 <ucdr_advance_buffer>
 80144c6:	2104      	movs	r1, #4
 80144c8:	4620      	mov	r0, r4
 80144ca:	f7f8 fde1 	bl	800d090 <ucdr_check_buffer_available_for>
 80144ce:	2800      	cmp	r0, #0
 80144d0:	d138      	bne.n	8014544 <ucdr_serialize_endian_uint32_t+0x9c>
 80144d2:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80144d6:	42b7      	cmp	r7, r6
 80144d8:	d92f      	bls.n	801453a <ucdr_serialize_endian_uint32_t+0x92>
 80144da:	6923      	ldr	r3, [r4, #16]
 80144dc:	60a7      	str	r7, [r4, #8]
 80144de:	1bbf      	subs	r7, r7, r6
 80144e0:	443b      	add	r3, r7
 80144e2:	f1c7 0904 	rsb	r9, r7, #4
 80144e6:	6123      	str	r3, [r4, #16]
 80144e8:	4649      	mov	r1, r9
 80144ea:	4620      	mov	r0, r4
 80144ec:	f7f8 fddc 	bl	800d0a8 <ucdr_check_final_buffer_behavior>
 80144f0:	2800      	cmp	r0, #0
 80144f2:	d04a      	beq.n	801458a <ucdr_serialize_endian_uint32_t+0xe2>
 80144f4:	2d01      	cmp	r5, #1
 80144f6:	d063      	beq.n	80145c0 <ucdr_serialize_endian_uint32_t+0x118>
 80144f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80144fc:	7033      	strb	r3, [r6, #0]
 80144fe:	2f00      	cmp	r7, #0
 8014500:	d051      	beq.n	80145a6 <ucdr_serialize_endian_uint32_t+0xfe>
 8014502:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8014506:	7073      	strb	r3, [r6, #1]
 8014508:	2f01      	cmp	r7, #1
 801450a:	d050      	beq.n	80145ae <ucdr_serialize_endian_uint32_t+0x106>
 801450c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8014510:	70b3      	strb	r3, [r6, #2]
 8014512:	2f02      	cmp	r7, #2
 8014514:	d04f      	beq.n	80145b6 <ucdr_serialize_endian_uint32_t+0x10e>
 8014516:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801451a:	70f3      	strb	r3, [r6, #3]
 801451c:	6923      	ldr	r3, [r4, #16]
 801451e:	68a2      	ldr	r2, [r4, #8]
 8014520:	7da0      	ldrb	r0, [r4, #22]
 8014522:	3304      	adds	r3, #4
 8014524:	444a      	add	r2, r9
 8014526:	1bdb      	subs	r3, r3, r7
 8014528:	2104      	movs	r1, #4
 801452a:	f080 0001 	eor.w	r0, r0, #1
 801452e:	60a2      	str	r2, [r4, #8]
 8014530:	6123      	str	r3, [r4, #16]
 8014532:	7561      	strb	r1, [r4, #21]
 8014534:	b003      	add	sp, #12
 8014536:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801453a:	2104      	movs	r1, #4
 801453c:	4620      	mov	r0, r4
 801453e:	f7f8 fdb3 	bl	800d0a8 <ucdr_check_final_buffer_behavior>
 8014542:	b1c8      	cbz	r0, 8014578 <ucdr_serialize_endian_uint32_t+0xd0>
 8014544:	2d01      	cmp	r5, #1
 8014546:	68a3      	ldr	r3, [r4, #8]
 8014548:	d01c      	beq.n	8014584 <ucdr_serialize_endian_uint32_t+0xdc>
 801454a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801454e:	701a      	strb	r2, [r3, #0]
 8014550:	68a3      	ldr	r3, [r4, #8]
 8014552:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8014556:	705a      	strb	r2, [r3, #1]
 8014558:	68a3      	ldr	r3, [r4, #8]
 801455a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801455e:	709a      	strb	r2, [r3, #2]
 8014560:	68a3      	ldr	r3, [r4, #8]
 8014562:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8014566:	70da      	strb	r2, [r3, #3]
 8014568:	68a2      	ldr	r2, [r4, #8]
 801456a:	6923      	ldr	r3, [r4, #16]
 801456c:	3204      	adds	r2, #4
 801456e:	3304      	adds	r3, #4
 8014570:	2104      	movs	r1, #4
 8014572:	60a2      	str	r2, [r4, #8]
 8014574:	6123      	str	r3, [r4, #16]
 8014576:	7561      	strb	r1, [r4, #21]
 8014578:	7da0      	ldrb	r0, [r4, #22]
 801457a:	f080 0001 	eor.w	r0, r0, #1
 801457e:	b003      	add	sp, #12
 8014580:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014584:	9a01      	ldr	r2, [sp, #4]
 8014586:	601a      	str	r2, [r3, #0]
 8014588:	e7ee      	b.n	8014568 <ucdr_serialize_endian_uint32_t+0xc0>
 801458a:	68a2      	ldr	r2, [r4, #8]
 801458c:	6923      	ldr	r3, [r4, #16]
 801458e:	7da0      	ldrb	r0, [r4, #22]
 8014590:	f884 8015 	strb.w	r8, [r4, #21]
 8014594:	1bd2      	subs	r2, r2, r7
 8014596:	1bdb      	subs	r3, r3, r7
 8014598:	f080 0001 	eor.w	r0, r0, #1
 801459c:	60a2      	str	r2, [r4, #8]
 801459e:	6123      	str	r3, [r4, #16]
 80145a0:	b003      	add	sp, #12
 80145a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80145a6:	68a3      	ldr	r3, [r4, #8]
 80145a8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80145ac:	701a      	strb	r2, [r3, #0]
 80145ae:	68a3      	ldr	r3, [r4, #8]
 80145b0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80145b4:	701a      	strb	r2, [r3, #0]
 80145b6:	68a3      	ldr	r3, [r4, #8]
 80145b8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80145bc:	701a      	strb	r2, [r3, #0]
 80145be:	e7ad      	b.n	801451c <ucdr_serialize_endian_uint32_t+0x74>
 80145c0:	ad01      	add	r5, sp, #4
 80145c2:	4629      	mov	r1, r5
 80145c4:	463a      	mov	r2, r7
 80145c6:	4630      	mov	r0, r6
 80145c8:	f003 fd21 	bl	801800e <memcpy>
 80145cc:	68a0      	ldr	r0, [r4, #8]
 80145ce:	464a      	mov	r2, r9
 80145d0:	19e9      	adds	r1, r5, r7
 80145d2:	f003 fd1c 	bl	801800e <memcpy>
 80145d6:	e7a1      	b.n	801451c <ucdr_serialize_endian_uint32_t+0x74>

080145d8 <ucdr_deserialize_uint32_t>:
 80145d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80145dc:	460d      	mov	r5, r1
 80145de:	2104      	movs	r1, #4
 80145e0:	4604      	mov	r4, r0
 80145e2:	f7f8 fdb5 	bl	800d150 <ucdr_buffer_alignment>
 80145e6:	4601      	mov	r1, r0
 80145e8:	4620      	mov	r0, r4
 80145ea:	f894 8015 	ldrb.w	r8, [r4, #21]
 80145ee:	f7f8 fdf3 	bl	800d1d8 <ucdr_advance_buffer>
 80145f2:	2104      	movs	r1, #4
 80145f4:	4620      	mov	r0, r4
 80145f6:	f7f8 fd4b 	bl	800d090 <ucdr_check_buffer_available_for>
 80145fa:	2800      	cmp	r0, #0
 80145fc:	d138      	bne.n	8014670 <ucdr_deserialize_uint32_t+0x98>
 80145fe:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8014602:	42b7      	cmp	r7, r6
 8014604:	d92f      	bls.n	8014666 <ucdr_deserialize_uint32_t+0x8e>
 8014606:	6923      	ldr	r3, [r4, #16]
 8014608:	60a7      	str	r7, [r4, #8]
 801460a:	1bbf      	subs	r7, r7, r6
 801460c:	443b      	add	r3, r7
 801460e:	f1c7 0904 	rsb	r9, r7, #4
 8014612:	6123      	str	r3, [r4, #16]
 8014614:	4649      	mov	r1, r9
 8014616:	4620      	mov	r0, r4
 8014618:	f7f8 fd46 	bl	800d0a8 <ucdr_check_final_buffer_behavior>
 801461c:	2800      	cmp	r0, #0
 801461e:	d046      	beq.n	80146ae <ucdr_deserialize_uint32_t+0xd6>
 8014620:	7d23      	ldrb	r3, [r4, #20]
 8014622:	2b01      	cmp	r3, #1
 8014624:	d05c      	beq.n	80146e0 <ucdr_deserialize_uint32_t+0x108>
 8014626:	78f3      	ldrb	r3, [r6, #3]
 8014628:	702b      	strb	r3, [r5, #0]
 801462a:	2f00      	cmp	r7, #0
 801462c:	d04c      	beq.n	80146c8 <ucdr_deserialize_uint32_t+0xf0>
 801462e:	78b3      	ldrb	r3, [r6, #2]
 8014630:	706b      	strb	r3, [r5, #1]
 8014632:	2f01      	cmp	r7, #1
 8014634:	f105 0302 	add.w	r3, r5, #2
 8014638:	d04a      	beq.n	80146d0 <ucdr_deserialize_uint32_t+0xf8>
 801463a:	7873      	ldrb	r3, [r6, #1]
 801463c:	70ab      	strb	r3, [r5, #2]
 801463e:	2f02      	cmp	r7, #2
 8014640:	f105 0303 	add.w	r3, r5, #3
 8014644:	d048      	beq.n	80146d8 <ucdr_deserialize_uint32_t+0x100>
 8014646:	7833      	ldrb	r3, [r6, #0]
 8014648:	70eb      	strb	r3, [r5, #3]
 801464a:	6923      	ldr	r3, [r4, #16]
 801464c:	68a2      	ldr	r2, [r4, #8]
 801464e:	7da0      	ldrb	r0, [r4, #22]
 8014650:	2104      	movs	r1, #4
 8014652:	3304      	adds	r3, #4
 8014654:	444a      	add	r2, r9
 8014656:	1bdb      	subs	r3, r3, r7
 8014658:	7561      	strb	r1, [r4, #21]
 801465a:	60a2      	str	r2, [r4, #8]
 801465c:	6123      	str	r3, [r4, #16]
 801465e:	f080 0001 	eor.w	r0, r0, #1
 8014662:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014666:	2104      	movs	r1, #4
 8014668:	4620      	mov	r0, r4
 801466a:	f7f8 fd1d 	bl	800d0a8 <ucdr_check_final_buffer_behavior>
 801466e:	b1b0      	cbz	r0, 801469e <ucdr_deserialize_uint32_t+0xc6>
 8014670:	7d23      	ldrb	r3, [r4, #20]
 8014672:	2b01      	cmp	r3, #1
 8014674:	68a3      	ldr	r3, [r4, #8]
 8014676:	d017      	beq.n	80146a8 <ucdr_deserialize_uint32_t+0xd0>
 8014678:	78db      	ldrb	r3, [r3, #3]
 801467a:	702b      	strb	r3, [r5, #0]
 801467c:	68a3      	ldr	r3, [r4, #8]
 801467e:	789b      	ldrb	r3, [r3, #2]
 8014680:	706b      	strb	r3, [r5, #1]
 8014682:	68a3      	ldr	r3, [r4, #8]
 8014684:	785b      	ldrb	r3, [r3, #1]
 8014686:	70ab      	strb	r3, [r5, #2]
 8014688:	68a3      	ldr	r3, [r4, #8]
 801468a:	781b      	ldrb	r3, [r3, #0]
 801468c:	70eb      	strb	r3, [r5, #3]
 801468e:	68a2      	ldr	r2, [r4, #8]
 8014690:	6923      	ldr	r3, [r4, #16]
 8014692:	3204      	adds	r2, #4
 8014694:	3304      	adds	r3, #4
 8014696:	2104      	movs	r1, #4
 8014698:	60a2      	str	r2, [r4, #8]
 801469a:	6123      	str	r3, [r4, #16]
 801469c:	7561      	strb	r1, [r4, #21]
 801469e:	7da0      	ldrb	r0, [r4, #22]
 80146a0:	f080 0001 	eor.w	r0, r0, #1
 80146a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80146a8:	681b      	ldr	r3, [r3, #0]
 80146aa:	602b      	str	r3, [r5, #0]
 80146ac:	e7ef      	b.n	801468e <ucdr_deserialize_uint32_t+0xb6>
 80146ae:	68a2      	ldr	r2, [r4, #8]
 80146b0:	6923      	ldr	r3, [r4, #16]
 80146b2:	7da0      	ldrb	r0, [r4, #22]
 80146b4:	f884 8015 	strb.w	r8, [r4, #21]
 80146b8:	1bd2      	subs	r2, r2, r7
 80146ba:	1bdb      	subs	r3, r3, r7
 80146bc:	60a2      	str	r2, [r4, #8]
 80146be:	6123      	str	r3, [r4, #16]
 80146c0:	f080 0001 	eor.w	r0, r0, #1
 80146c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80146c8:	68a3      	ldr	r3, [r4, #8]
 80146ca:	789b      	ldrb	r3, [r3, #2]
 80146cc:	706b      	strb	r3, [r5, #1]
 80146ce:	1cab      	adds	r3, r5, #2
 80146d0:	68a2      	ldr	r2, [r4, #8]
 80146d2:	7852      	ldrb	r2, [r2, #1]
 80146d4:	f803 2b01 	strb.w	r2, [r3], #1
 80146d8:	68a2      	ldr	r2, [r4, #8]
 80146da:	7812      	ldrb	r2, [r2, #0]
 80146dc:	701a      	strb	r2, [r3, #0]
 80146de:	e7b4      	b.n	801464a <ucdr_deserialize_uint32_t+0x72>
 80146e0:	4631      	mov	r1, r6
 80146e2:	463a      	mov	r2, r7
 80146e4:	4628      	mov	r0, r5
 80146e6:	f003 fc92 	bl	801800e <memcpy>
 80146ea:	68a1      	ldr	r1, [r4, #8]
 80146ec:	464a      	mov	r2, r9
 80146ee:	19e8      	adds	r0, r5, r7
 80146f0:	f003 fc8d 	bl	801800e <memcpy>
 80146f4:	e7a9      	b.n	801464a <ucdr_deserialize_uint32_t+0x72>
 80146f6:	bf00      	nop

080146f8 <ucdr_deserialize_endian_uint32_t>:
 80146f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80146fc:	460e      	mov	r6, r1
 80146fe:	2104      	movs	r1, #4
 8014700:	4604      	mov	r4, r0
 8014702:	4615      	mov	r5, r2
 8014704:	f7f8 fd24 	bl	800d150 <ucdr_buffer_alignment>
 8014708:	4601      	mov	r1, r0
 801470a:	4620      	mov	r0, r4
 801470c:	f894 9015 	ldrb.w	r9, [r4, #21]
 8014710:	f7f8 fd62 	bl	800d1d8 <ucdr_advance_buffer>
 8014714:	2104      	movs	r1, #4
 8014716:	4620      	mov	r0, r4
 8014718:	f7f8 fcba 	bl	800d090 <ucdr_check_buffer_available_for>
 801471c:	2800      	cmp	r0, #0
 801471e:	d13c      	bne.n	801479a <ucdr_deserialize_endian_uint32_t+0xa2>
 8014720:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 8014724:	42bb      	cmp	r3, r7
 8014726:	d933      	bls.n	8014790 <ucdr_deserialize_endian_uint32_t+0x98>
 8014728:	eba3 0807 	sub.w	r8, r3, r7
 801472c:	60a3      	str	r3, [r4, #8]
 801472e:	6923      	ldr	r3, [r4, #16]
 8014730:	f1c8 0a04 	rsb	sl, r8, #4
 8014734:	4443      	add	r3, r8
 8014736:	6123      	str	r3, [r4, #16]
 8014738:	4651      	mov	r1, sl
 801473a:	4620      	mov	r0, r4
 801473c:	f7f8 fcb4 	bl	800d0a8 <ucdr_check_final_buffer_behavior>
 8014740:	2800      	cmp	r0, #0
 8014742:	d048      	beq.n	80147d6 <ucdr_deserialize_endian_uint32_t+0xde>
 8014744:	2e01      	cmp	r6, #1
 8014746:	d061      	beq.n	801480c <ucdr_deserialize_endian_uint32_t+0x114>
 8014748:	78fb      	ldrb	r3, [r7, #3]
 801474a:	702b      	strb	r3, [r5, #0]
 801474c:	f1b8 0f00 	cmp.w	r8, #0
 8014750:	d050      	beq.n	80147f4 <ucdr_deserialize_endian_uint32_t+0xfc>
 8014752:	78bb      	ldrb	r3, [r7, #2]
 8014754:	706b      	strb	r3, [r5, #1]
 8014756:	f1b8 0f01 	cmp.w	r8, #1
 801475a:	f105 0302 	add.w	r3, r5, #2
 801475e:	d04d      	beq.n	80147fc <ucdr_deserialize_endian_uint32_t+0x104>
 8014760:	787b      	ldrb	r3, [r7, #1]
 8014762:	70ab      	strb	r3, [r5, #2]
 8014764:	f1b8 0f02 	cmp.w	r8, #2
 8014768:	f105 0303 	add.w	r3, r5, #3
 801476c:	d04a      	beq.n	8014804 <ucdr_deserialize_endian_uint32_t+0x10c>
 801476e:	783b      	ldrb	r3, [r7, #0]
 8014770:	70eb      	strb	r3, [r5, #3]
 8014772:	6923      	ldr	r3, [r4, #16]
 8014774:	68a2      	ldr	r2, [r4, #8]
 8014776:	7da0      	ldrb	r0, [r4, #22]
 8014778:	2104      	movs	r1, #4
 801477a:	3304      	adds	r3, #4
 801477c:	4452      	add	r2, sl
 801477e:	eba3 0308 	sub.w	r3, r3, r8
 8014782:	7561      	strb	r1, [r4, #21]
 8014784:	60a2      	str	r2, [r4, #8]
 8014786:	6123      	str	r3, [r4, #16]
 8014788:	f080 0001 	eor.w	r0, r0, #1
 801478c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014790:	2104      	movs	r1, #4
 8014792:	4620      	mov	r0, r4
 8014794:	f7f8 fc88 	bl	800d0a8 <ucdr_check_final_buffer_behavior>
 8014798:	b1a8      	cbz	r0, 80147c6 <ucdr_deserialize_endian_uint32_t+0xce>
 801479a:	2e01      	cmp	r6, #1
 801479c:	68a3      	ldr	r3, [r4, #8]
 801479e:	d017      	beq.n	80147d0 <ucdr_deserialize_endian_uint32_t+0xd8>
 80147a0:	78db      	ldrb	r3, [r3, #3]
 80147a2:	702b      	strb	r3, [r5, #0]
 80147a4:	68a3      	ldr	r3, [r4, #8]
 80147a6:	789b      	ldrb	r3, [r3, #2]
 80147a8:	706b      	strb	r3, [r5, #1]
 80147aa:	68a3      	ldr	r3, [r4, #8]
 80147ac:	785b      	ldrb	r3, [r3, #1]
 80147ae:	70ab      	strb	r3, [r5, #2]
 80147b0:	68a3      	ldr	r3, [r4, #8]
 80147b2:	781b      	ldrb	r3, [r3, #0]
 80147b4:	70eb      	strb	r3, [r5, #3]
 80147b6:	68a2      	ldr	r2, [r4, #8]
 80147b8:	6923      	ldr	r3, [r4, #16]
 80147ba:	3204      	adds	r2, #4
 80147bc:	3304      	adds	r3, #4
 80147be:	2104      	movs	r1, #4
 80147c0:	60a2      	str	r2, [r4, #8]
 80147c2:	6123      	str	r3, [r4, #16]
 80147c4:	7561      	strb	r1, [r4, #21]
 80147c6:	7da0      	ldrb	r0, [r4, #22]
 80147c8:	f080 0001 	eor.w	r0, r0, #1
 80147cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80147d0:	681b      	ldr	r3, [r3, #0]
 80147d2:	602b      	str	r3, [r5, #0]
 80147d4:	e7ef      	b.n	80147b6 <ucdr_deserialize_endian_uint32_t+0xbe>
 80147d6:	68a2      	ldr	r2, [r4, #8]
 80147d8:	6923      	ldr	r3, [r4, #16]
 80147da:	7da0      	ldrb	r0, [r4, #22]
 80147dc:	f884 9015 	strb.w	r9, [r4, #21]
 80147e0:	eba2 0208 	sub.w	r2, r2, r8
 80147e4:	eba3 0308 	sub.w	r3, r3, r8
 80147e8:	60a2      	str	r2, [r4, #8]
 80147ea:	6123      	str	r3, [r4, #16]
 80147ec:	f080 0001 	eor.w	r0, r0, #1
 80147f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80147f4:	68a3      	ldr	r3, [r4, #8]
 80147f6:	789b      	ldrb	r3, [r3, #2]
 80147f8:	706b      	strb	r3, [r5, #1]
 80147fa:	1cab      	adds	r3, r5, #2
 80147fc:	68a2      	ldr	r2, [r4, #8]
 80147fe:	7852      	ldrb	r2, [r2, #1]
 8014800:	f803 2b01 	strb.w	r2, [r3], #1
 8014804:	68a2      	ldr	r2, [r4, #8]
 8014806:	7812      	ldrb	r2, [r2, #0]
 8014808:	701a      	strb	r2, [r3, #0]
 801480a:	e7b2      	b.n	8014772 <ucdr_deserialize_endian_uint32_t+0x7a>
 801480c:	4639      	mov	r1, r7
 801480e:	4642      	mov	r2, r8
 8014810:	4628      	mov	r0, r5
 8014812:	f003 fbfc 	bl	801800e <memcpy>
 8014816:	68a1      	ldr	r1, [r4, #8]
 8014818:	4652      	mov	r2, sl
 801481a:	eb05 0008 	add.w	r0, r5, r8
 801481e:	f003 fbf6 	bl	801800e <memcpy>
 8014822:	e7a6      	b.n	8014772 <ucdr_deserialize_endian_uint32_t+0x7a>

08014824 <ucdr_serialize_uint64_t>:
 8014824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014828:	2108      	movs	r1, #8
 801482a:	b082      	sub	sp, #8
 801482c:	4604      	mov	r4, r0
 801482e:	e9cd 2300 	strd	r2, r3, [sp]
 8014832:	f7f8 fc8d 	bl	800d150 <ucdr_buffer_alignment>
 8014836:	4601      	mov	r1, r0
 8014838:	4620      	mov	r0, r4
 801483a:	7d67      	ldrb	r7, [r4, #21]
 801483c:	f7f8 fccc 	bl	800d1d8 <ucdr_advance_buffer>
 8014840:	2108      	movs	r1, #8
 8014842:	4620      	mov	r0, r4
 8014844:	f7f8 fc24 	bl	800d090 <ucdr_check_buffer_available_for>
 8014848:	2800      	cmp	r0, #0
 801484a:	d14e      	bne.n	80148ea <ucdr_serialize_uint64_t+0xc6>
 801484c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8014850:	42ab      	cmp	r3, r5
 8014852:	d945      	bls.n	80148e0 <ucdr_serialize_uint64_t+0xbc>
 8014854:	1b5e      	subs	r6, r3, r5
 8014856:	60a3      	str	r3, [r4, #8]
 8014858:	6923      	ldr	r3, [r4, #16]
 801485a:	f1c6 0808 	rsb	r8, r6, #8
 801485e:	4433      	add	r3, r6
 8014860:	6123      	str	r3, [r4, #16]
 8014862:	4641      	mov	r1, r8
 8014864:	4620      	mov	r0, r4
 8014866:	f7f8 fc1f 	bl	800d0a8 <ucdr_check_final_buffer_behavior>
 801486a:	2800      	cmp	r0, #0
 801486c:	d074      	beq.n	8014958 <ucdr_serialize_uint64_t+0x134>
 801486e:	7d23      	ldrb	r3, [r4, #20]
 8014870:	2b01      	cmp	r3, #1
 8014872:	f000 809b 	beq.w	80149ac <ucdr_serialize_uint64_t+0x188>
 8014876:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801487a:	702b      	strb	r3, [r5, #0]
 801487c:	2e00      	cmp	r6, #0
 801487e:	d078      	beq.n	8014972 <ucdr_serialize_uint64_t+0x14e>
 8014880:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8014884:	706b      	strb	r3, [r5, #1]
 8014886:	2e01      	cmp	r6, #1
 8014888:	d077      	beq.n	801497a <ucdr_serialize_uint64_t+0x156>
 801488a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801488e:	70ab      	strb	r3, [r5, #2]
 8014890:	2e02      	cmp	r6, #2
 8014892:	d076      	beq.n	8014982 <ucdr_serialize_uint64_t+0x15e>
 8014894:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8014898:	70eb      	strb	r3, [r5, #3]
 801489a:	2e03      	cmp	r6, #3
 801489c:	d075      	beq.n	801498a <ucdr_serialize_uint64_t+0x166>
 801489e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80148a2:	712b      	strb	r3, [r5, #4]
 80148a4:	2e04      	cmp	r6, #4
 80148a6:	d074      	beq.n	8014992 <ucdr_serialize_uint64_t+0x16e>
 80148a8:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80148ac:	716b      	strb	r3, [r5, #5]
 80148ae:	2e05      	cmp	r6, #5
 80148b0:	d073      	beq.n	801499a <ucdr_serialize_uint64_t+0x176>
 80148b2:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80148b6:	71ab      	strb	r3, [r5, #6]
 80148b8:	2e06      	cmp	r6, #6
 80148ba:	d072      	beq.n	80149a2 <ucdr_serialize_uint64_t+0x17e>
 80148bc:	f89d 3000 	ldrb.w	r3, [sp]
 80148c0:	71eb      	strb	r3, [r5, #7]
 80148c2:	6923      	ldr	r3, [r4, #16]
 80148c4:	68a2      	ldr	r2, [r4, #8]
 80148c6:	7da0      	ldrb	r0, [r4, #22]
 80148c8:	3308      	adds	r3, #8
 80148ca:	1b9e      	subs	r6, r3, r6
 80148cc:	4442      	add	r2, r8
 80148ce:	2308      	movs	r3, #8
 80148d0:	f080 0001 	eor.w	r0, r0, #1
 80148d4:	60a2      	str	r2, [r4, #8]
 80148d6:	6126      	str	r6, [r4, #16]
 80148d8:	7563      	strb	r3, [r4, #21]
 80148da:	b002      	add	sp, #8
 80148dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80148e0:	2108      	movs	r1, #8
 80148e2:	4620      	mov	r0, r4
 80148e4:	f7f8 fbe0 	bl	800d0a8 <ucdr_check_final_buffer_behavior>
 80148e8:	b350      	cbz	r0, 8014940 <ucdr_serialize_uint64_t+0x11c>
 80148ea:	7d23      	ldrb	r3, [r4, #20]
 80148ec:	2b01      	cmp	r3, #1
 80148ee:	d02d      	beq.n	801494c <ucdr_serialize_uint64_t+0x128>
 80148f0:	68a3      	ldr	r3, [r4, #8]
 80148f2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80148f6:	701a      	strb	r2, [r3, #0]
 80148f8:	68a3      	ldr	r3, [r4, #8]
 80148fa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80148fe:	705a      	strb	r2, [r3, #1]
 8014900:	68a3      	ldr	r3, [r4, #8]
 8014902:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8014906:	709a      	strb	r2, [r3, #2]
 8014908:	68a3      	ldr	r3, [r4, #8]
 801490a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801490e:	70da      	strb	r2, [r3, #3]
 8014910:	68a3      	ldr	r3, [r4, #8]
 8014912:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8014916:	711a      	strb	r2, [r3, #4]
 8014918:	68a3      	ldr	r3, [r4, #8]
 801491a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 801491e:	715a      	strb	r2, [r3, #5]
 8014920:	68a3      	ldr	r3, [r4, #8]
 8014922:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8014926:	719a      	strb	r2, [r3, #6]
 8014928:	68a3      	ldr	r3, [r4, #8]
 801492a:	f89d 2000 	ldrb.w	r2, [sp]
 801492e:	71da      	strb	r2, [r3, #7]
 8014930:	68a2      	ldr	r2, [r4, #8]
 8014932:	6923      	ldr	r3, [r4, #16]
 8014934:	3208      	adds	r2, #8
 8014936:	3308      	adds	r3, #8
 8014938:	2108      	movs	r1, #8
 801493a:	60a2      	str	r2, [r4, #8]
 801493c:	6123      	str	r3, [r4, #16]
 801493e:	7561      	strb	r1, [r4, #21]
 8014940:	7da0      	ldrb	r0, [r4, #22]
 8014942:	f080 0001 	eor.w	r0, r0, #1
 8014946:	b002      	add	sp, #8
 8014948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801494c:	466b      	mov	r3, sp
 801494e:	cb03      	ldmia	r3!, {r0, r1}
 8014950:	68a3      	ldr	r3, [r4, #8]
 8014952:	6018      	str	r0, [r3, #0]
 8014954:	6059      	str	r1, [r3, #4]
 8014956:	e7eb      	b.n	8014930 <ucdr_serialize_uint64_t+0x10c>
 8014958:	68a2      	ldr	r2, [r4, #8]
 801495a:	6923      	ldr	r3, [r4, #16]
 801495c:	7da0      	ldrb	r0, [r4, #22]
 801495e:	7567      	strb	r7, [r4, #21]
 8014960:	1b92      	subs	r2, r2, r6
 8014962:	1b9b      	subs	r3, r3, r6
 8014964:	f080 0001 	eor.w	r0, r0, #1
 8014968:	60a2      	str	r2, [r4, #8]
 801496a:	6123      	str	r3, [r4, #16]
 801496c:	b002      	add	sp, #8
 801496e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014972:	68a3      	ldr	r3, [r4, #8]
 8014974:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8014978:	701a      	strb	r2, [r3, #0]
 801497a:	68a3      	ldr	r3, [r4, #8]
 801497c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8014980:	701a      	strb	r2, [r3, #0]
 8014982:	68a3      	ldr	r3, [r4, #8]
 8014984:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8014988:	701a      	strb	r2, [r3, #0]
 801498a:	68a3      	ldr	r3, [r4, #8]
 801498c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8014990:	701a      	strb	r2, [r3, #0]
 8014992:	68a3      	ldr	r3, [r4, #8]
 8014994:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8014998:	701a      	strb	r2, [r3, #0]
 801499a:	68a3      	ldr	r3, [r4, #8]
 801499c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80149a0:	701a      	strb	r2, [r3, #0]
 80149a2:	68a3      	ldr	r3, [r4, #8]
 80149a4:	f89d 2000 	ldrb.w	r2, [sp]
 80149a8:	701a      	strb	r2, [r3, #0]
 80149aa:	e78a      	b.n	80148c2 <ucdr_serialize_uint64_t+0x9e>
 80149ac:	4628      	mov	r0, r5
 80149ae:	466d      	mov	r5, sp
 80149b0:	4629      	mov	r1, r5
 80149b2:	4632      	mov	r2, r6
 80149b4:	f003 fb2b 	bl	801800e <memcpy>
 80149b8:	68a0      	ldr	r0, [r4, #8]
 80149ba:	4642      	mov	r2, r8
 80149bc:	19a9      	adds	r1, r5, r6
 80149be:	f003 fb26 	bl	801800e <memcpy>
 80149c2:	e77e      	b.n	80148c2 <ucdr_serialize_uint64_t+0x9e>

080149c4 <ucdr_serialize_int16_t>:
 80149c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80149c8:	b082      	sub	sp, #8
 80149ca:	460b      	mov	r3, r1
 80149cc:	2102      	movs	r1, #2
 80149ce:	4604      	mov	r4, r0
 80149d0:	f8ad 3006 	strh.w	r3, [sp, #6]
 80149d4:	f7f8 fbbc 	bl	800d150 <ucdr_buffer_alignment>
 80149d8:	4601      	mov	r1, r0
 80149da:	4620      	mov	r0, r4
 80149dc:	7d67      	ldrb	r7, [r4, #21]
 80149de:	f7f8 fbfb 	bl	800d1d8 <ucdr_advance_buffer>
 80149e2:	2102      	movs	r1, #2
 80149e4:	4620      	mov	r0, r4
 80149e6:	f7f8 fb53 	bl	800d090 <ucdr_check_buffer_available_for>
 80149ea:	bb78      	cbnz	r0, 8014a4c <ucdr_serialize_int16_t+0x88>
 80149ec:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80149f0:	42ab      	cmp	r3, r5
 80149f2:	d926      	bls.n	8014a42 <ucdr_serialize_int16_t+0x7e>
 80149f4:	1b5e      	subs	r6, r3, r5
 80149f6:	60a3      	str	r3, [r4, #8]
 80149f8:	6923      	ldr	r3, [r4, #16]
 80149fa:	f1c6 0802 	rsb	r8, r6, #2
 80149fe:	4433      	add	r3, r6
 8014a00:	6123      	str	r3, [r4, #16]
 8014a02:	4641      	mov	r1, r8
 8014a04:	4620      	mov	r0, r4
 8014a06:	f7f8 fb4f 	bl	800d0a8 <ucdr_check_final_buffer_behavior>
 8014a0a:	2800      	cmp	r0, #0
 8014a0c:	d03b      	beq.n	8014a86 <ucdr_serialize_int16_t+0xc2>
 8014a0e:	7d23      	ldrb	r3, [r4, #20]
 8014a10:	2b01      	cmp	r3, #1
 8014a12:	d04a      	beq.n	8014aaa <ucdr_serialize_int16_t+0xe6>
 8014a14:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8014a18:	702b      	strb	r3, [r5, #0]
 8014a1a:	2e00      	cmp	r6, #0
 8014a1c:	d040      	beq.n	8014aa0 <ucdr_serialize_int16_t+0xdc>
 8014a1e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8014a22:	706b      	strb	r3, [r5, #1]
 8014a24:	6923      	ldr	r3, [r4, #16]
 8014a26:	68a2      	ldr	r2, [r4, #8]
 8014a28:	7da0      	ldrb	r0, [r4, #22]
 8014a2a:	3302      	adds	r3, #2
 8014a2c:	1b9e      	subs	r6, r3, r6
 8014a2e:	4442      	add	r2, r8
 8014a30:	2302      	movs	r3, #2
 8014a32:	f080 0001 	eor.w	r0, r0, #1
 8014a36:	60a2      	str	r2, [r4, #8]
 8014a38:	6126      	str	r6, [r4, #16]
 8014a3a:	7563      	strb	r3, [r4, #21]
 8014a3c:	b002      	add	sp, #8
 8014a3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a42:	2102      	movs	r1, #2
 8014a44:	4620      	mov	r0, r4
 8014a46:	f7f8 fb2f 	bl	800d0a8 <ucdr_check_final_buffer_behavior>
 8014a4a:	b190      	cbz	r0, 8014a72 <ucdr_serialize_int16_t+0xae>
 8014a4c:	7d23      	ldrb	r3, [r4, #20]
 8014a4e:	2b01      	cmp	r3, #1
 8014a50:	68a3      	ldr	r3, [r4, #8]
 8014a52:	d014      	beq.n	8014a7e <ucdr_serialize_int16_t+0xba>
 8014a54:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8014a58:	701a      	strb	r2, [r3, #0]
 8014a5a:	68a3      	ldr	r3, [r4, #8]
 8014a5c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8014a60:	705a      	strb	r2, [r3, #1]
 8014a62:	68a2      	ldr	r2, [r4, #8]
 8014a64:	6923      	ldr	r3, [r4, #16]
 8014a66:	3202      	adds	r2, #2
 8014a68:	3302      	adds	r3, #2
 8014a6a:	2102      	movs	r1, #2
 8014a6c:	60a2      	str	r2, [r4, #8]
 8014a6e:	6123      	str	r3, [r4, #16]
 8014a70:	7561      	strb	r1, [r4, #21]
 8014a72:	7da0      	ldrb	r0, [r4, #22]
 8014a74:	f080 0001 	eor.w	r0, r0, #1
 8014a78:	b002      	add	sp, #8
 8014a7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a7e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8014a82:	801a      	strh	r2, [r3, #0]
 8014a84:	e7ed      	b.n	8014a62 <ucdr_serialize_int16_t+0x9e>
 8014a86:	68a2      	ldr	r2, [r4, #8]
 8014a88:	6923      	ldr	r3, [r4, #16]
 8014a8a:	7da0      	ldrb	r0, [r4, #22]
 8014a8c:	7567      	strb	r7, [r4, #21]
 8014a8e:	1b92      	subs	r2, r2, r6
 8014a90:	1b9b      	subs	r3, r3, r6
 8014a92:	f080 0001 	eor.w	r0, r0, #1
 8014a96:	60a2      	str	r2, [r4, #8]
 8014a98:	6123      	str	r3, [r4, #16]
 8014a9a:	b002      	add	sp, #8
 8014a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014aa0:	68a3      	ldr	r3, [r4, #8]
 8014aa2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8014aa6:	701a      	strb	r2, [r3, #0]
 8014aa8:	e7bc      	b.n	8014a24 <ucdr_serialize_int16_t+0x60>
 8014aaa:	4628      	mov	r0, r5
 8014aac:	f10d 0506 	add.w	r5, sp, #6
 8014ab0:	4629      	mov	r1, r5
 8014ab2:	4632      	mov	r2, r6
 8014ab4:	f003 faab 	bl	801800e <memcpy>
 8014ab8:	68a0      	ldr	r0, [r4, #8]
 8014aba:	4642      	mov	r2, r8
 8014abc:	19a9      	adds	r1, r5, r6
 8014abe:	f003 faa6 	bl	801800e <memcpy>
 8014ac2:	e7af      	b.n	8014a24 <ucdr_serialize_int16_t+0x60>

08014ac4 <ucdr_deserialize_int16_t>:
 8014ac4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014ac8:	460d      	mov	r5, r1
 8014aca:	2102      	movs	r1, #2
 8014acc:	4604      	mov	r4, r0
 8014ace:	f7f8 fb3f 	bl	800d150 <ucdr_buffer_alignment>
 8014ad2:	4601      	mov	r1, r0
 8014ad4:	4620      	mov	r0, r4
 8014ad6:	f894 8015 	ldrb.w	r8, [r4, #21]
 8014ada:	f7f8 fb7d 	bl	800d1d8 <ucdr_advance_buffer>
 8014ade:	2102      	movs	r1, #2
 8014ae0:	4620      	mov	r0, r4
 8014ae2:	f7f8 fad5 	bl	800d090 <ucdr_check_buffer_available_for>
 8014ae6:	bb60      	cbnz	r0, 8014b42 <ucdr_deserialize_int16_t+0x7e>
 8014ae8:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8014aec:	42be      	cmp	r6, r7
 8014aee:	d923      	bls.n	8014b38 <ucdr_deserialize_int16_t+0x74>
 8014af0:	6923      	ldr	r3, [r4, #16]
 8014af2:	60a6      	str	r6, [r4, #8]
 8014af4:	1bf6      	subs	r6, r6, r7
 8014af6:	4433      	add	r3, r6
 8014af8:	f1c6 0902 	rsb	r9, r6, #2
 8014afc:	6123      	str	r3, [r4, #16]
 8014afe:	4649      	mov	r1, r9
 8014b00:	4620      	mov	r0, r4
 8014b02:	f7f8 fad1 	bl	800d0a8 <ucdr_check_final_buffer_behavior>
 8014b06:	2800      	cmp	r0, #0
 8014b08:	d034      	beq.n	8014b74 <ucdr_deserialize_int16_t+0xb0>
 8014b0a:	7d23      	ldrb	r3, [r4, #20]
 8014b0c:	2b01      	cmp	r3, #1
 8014b0e:	d042      	beq.n	8014b96 <ucdr_deserialize_int16_t+0xd2>
 8014b10:	787b      	ldrb	r3, [r7, #1]
 8014b12:	702b      	strb	r3, [r5, #0]
 8014b14:	2e00      	cmp	r6, #0
 8014b16:	d03a      	beq.n	8014b8e <ucdr_deserialize_int16_t+0xca>
 8014b18:	783b      	ldrb	r3, [r7, #0]
 8014b1a:	706b      	strb	r3, [r5, #1]
 8014b1c:	6923      	ldr	r3, [r4, #16]
 8014b1e:	68a2      	ldr	r2, [r4, #8]
 8014b20:	7da0      	ldrb	r0, [r4, #22]
 8014b22:	2102      	movs	r1, #2
 8014b24:	3302      	adds	r3, #2
 8014b26:	444a      	add	r2, r9
 8014b28:	1b9b      	subs	r3, r3, r6
 8014b2a:	7561      	strb	r1, [r4, #21]
 8014b2c:	60a2      	str	r2, [r4, #8]
 8014b2e:	6123      	str	r3, [r4, #16]
 8014b30:	f080 0001 	eor.w	r0, r0, #1
 8014b34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014b38:	2102      	movs	r1, #2
 8014b3a:	4620      	mov	r0, r4
 8014b3c:	f7f8 fab4 	bl	800d0a8 <ucdr_check_final_buffer_behavior>
 8014b40:	b180      	cbz	r0, 8014b64 <ucdr_deserialize_int16_t+0xa0>
 8014b42:	7d23      	ldrb	r3, [r4, #20]
 8014b44:	2b01      	cmp	r3, #1
 8014b46:	68a3      	ldr	r3, [r4, #8]
 8014b48:	d011      	beq.n	8014b6e <ucdr_deserialize_int16_t+0xaa>
 8014b4a:	785b      	ldrb	r3, [r3, #1]
 8014b4c:	702b      	strb	r3, [r5, #0]
 8014b4e:	68a3      	ldr	r3, [r4, #8]
 8014b50:	781b      	ldrb	r3, [r3, #0]
 8014b52:	706b      	strb	r3, [r5, #1]
 8014b54:	68a2      	ldr	r2, [r4, #8]
 8014b56:	6923      	ldr	r3, [r4, #16]
 8014b58:	3202      	adds	r2, #2
 8014b5a:	3302      	adds	r3, #2
 8014b5c:	2102      	movs	r1, #2
 8014b5e:	60a2      	str	r2, [r4, #8]
 8014b60:	6123      	str	r3, [r4, #16]
 8014b62:	7561      	strb	r1, [r4, #21]
 8014b64:	7da0      	ldrb	r0, [r4, #22]
 8014b66:	f080 0001 	eor.w	r0, r0, #1
 8014b6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014b6e:	881b      	ldrh	r3, [r3, #0]
 8014b70:	802b      	strh	r3, [r5, #0]
 8014b72:	e7ef      	b.n	8014b54 <ucdr_deserialize_int16_t+0x90>
 8014b74:	68a2      	ldr	r2, [r4, #8]
 8014b76:	6923      	ldr	r3, [r4, #16]
 8014b78:	7da0      	ldrb	r0, [r4, #22]
 8014b7a:	f884 8015 	strb.w	r8, [r4, #21]
 8014b7e:	1b92      	subs	r2, r2, r6
 8014b80:	1b9b      	subs	r3, r3, r6
 8014b82:	60a2      	str	r2, [r4, #8]
 8014b84:	6123      	str	r3, [r4, #16]
 8014b86:	f080 0001 	eor.w	r0, r0, #1
 8014b8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014b8e:	68a3      	ldr	r3, [r4, #8]
 8014b90:	781b      	ldrb	r3, [r3, #0]
 8014b92:	706b      	strb	r3, [r5, #1]
 8014b94:	e7c2      	b.n	8014b1c <ucdr_deserialize_int16_t+0x58>
 8014b96:	4639      	mov	r1, r7
 8014b98:	4632      	mov	r2, r6
 8014b9a:	4628      	mov	r0, r5
 8014b9c:	f003 fa37 	bl	801800e <memcpy>
 8014ba0:	68a1      	ldr	r1, [r4, #8]
 8014ba2:	464a      	mov	r2, r9
 8014ba4:	19a8      	adds	r0, r5, r6
 8014ba6:	f003 fa32 	bl	801800e <memcpy>
 8014baa:	e7b7      	b.n	8014b1c <ucdr_deserialize_int16_t+0x58>

08014bac <ucdr_serialize_int32_t>:
 8014bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014bb0:	b082      	sub	sp, #8
 8014bb2:	4604      	mov	r4, r0
 8014bb4:	9101      	str	r1, [sp, #4]
 8014bb6:	2104      	movs	r1, #4
 8014bb8:	f7f8 faca 	bl	800d150 <ucdr_buffer_alignment>
 8014bbc:	4601      	mov	r1, r0
 8014bbe:	4620      	mov	r0, r4
 8014bc0:	7d67      	ldrb	r7, [r4, #21]
 8014bc2:	f7f8 fb09 	bl	800d1d8 <ucdr_advance_buffer>
 8014bc6:	2104      	movs	r1, #4
 8014bc8:	4620      	mov	r0, r4
 8014bca:	f7f8 fa61 	bl	800d090 <ucdr_check_buffer_available_for>
 8014bce:	2800      	cmp	r0, #0
 8014bd0:	d139      	bne.n	8014c46 <ucdr_serialize_int32_t+0x9a>
 8014bd2:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8014bd6:	42ab      	cmp	r3, r5
 8014bd8:	d930      	bls.n	8014c3c <ucdr_serialize_int32_t+0x90>
 8014bda:	1b5e      	subs	r6, r3, r5
 8014bdc:	60a3      	str	r3, [r4, #8]
 8014bde:	6923      	ldr	r3, [r4, #16]
 8014be0:	f1c6 0804 	rsb	r8, r6, #4
 8014be4:	4433      	add	r3, r6
 8014be6:	6123      	str	r3, [r4, #16]
 8014be8:	4641      	mov	r1, r8
 8014bea:	4620      	mov	r0, r4
 8014bec:	f7f8 fa5c 	bl	800d0a8 <ucdr_check_final_buffer_behavior>
 8014bf0:	2800      	cmp	r0, #0
 8014bf2:	d04c      	beq.n	8014c8e <ucdr_serialize_int32_t+0xe2>
 8014bf4:	7d23      	ldrb	r3, [r4, #20]
 8014bf6:	2b01      	cmp	r3, #1
 8014bf8:	d063      	beq.n	8014cc2 <ucdr_serialize_int32_t+0x116>
 8014bfa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8014bfe:	702b      	strb	r3, [r5, #0]
 8014c00:	2e00      	cmp	r6, #0
 8014c02:	d051      	beq.n	8014ca8 <ucdr_serialize_int32_t+0xfc>
 8014c04:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8014c08:	706b      	strb	r3, [r5, #1]
 8014c0a:	2e01      	cmp	r6, #1
 8014c0c:	d050      	beq.n	8014cb0 <ucdr_serialize_int32_t+0x104>
 8014c0e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8014c12:	70ab      	strb	r3, [r5, #2]
 8014c14:	2e02      	cmp	r6, #2
 8014c16:	d04f      	beq.n	8014cb8 <ucdr_serialize_int32_t+0x10c>
 8014c18:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8014c1c:	70eb      	strb	r3, [r5, #3]
 8014c1e:	6923      	ldr	r3, [r4, #16]
 8014c20:	68a2      	ldr	r2, [r4, #8]
 8014c22:	7da0      	ldrb	r0, [r4, #22]
 8014c24:	3304      	adds	r3, #4
 8014c26:	1b9e      	subs	r6, r3, r6
 8014c28:	4442      	add	r2, r8
 8014c2a:	2304      	movs	r3, #4
 8014c2c:	f080 0001 	eor.w	r0, r0, #1
 8014c30:	60a2      	str	r2, [r4, #8]
 8014c32:	6126      	str	r6, [r4, #16]
 8014c34:	7563      	strb	r3, [r4, #21]
 8014c36:	b002      	add	sp, #8
 8014c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c3c:	2104      	movs	r1, #4
 8014c3e:	4620      	mov	r0, r4
 8014c40:	f7f8 fa32 	bl	800d0a8 <ucdr_check_final_buffer_behavior>
 8014c44:	b1d0      	cbz	r0, 8014c7c <ucdr_serialize_int32_t+0xd0>
 8014c46:	7d23      	ldrb	r3, [r4, #20]
 8014c48:	2b01      	cmp	r3, #1
 8014c4a:	68a3      	ldr	r3, [r4, #8]
 8014c4c:	d01c      	beq.n	8014c88 <ucdr_serialize_int32_t+0xdc>
 8014c4e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8014c52:	701a      	strb	r2, [r3, #0]
 8014c54:	68a3      	ldr	r3, [r4, #8]
 8014c56:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8014c5a:	705a      	strb	r2, [r3, #1]
 8014c5c:	68a3      	ldr	r3, [r4, #8]
 8014c5e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8014c62:	709a      	strb	r2, [r3, #2]
 8014c64:	68a3      	ldr	r3, [r4, #8]
 8014c66:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8014c6a:	70da      	strb	r2, [r3, #3]
 8014c6c:	68a2      	ldr	r2, [r4, #8]
 8014c6e:	6923      	ldr	r3, [r4, #16]
 8014c70:	3204      	adds	r2, #4
 8014c72:	3304      	adds	r3, #4
 8014c74:	2104      	movs	r1, #4
 8014c76:	60a2      	str	r2, [r4, #8]
 8014c78:	6123      	str	r3, [r4, #16]
 8014c7a:	7561      	strb	r1, [r4, #21]
 8014c7c:	7da0      	ldrb	r0, [r4, #22]
 8014c7e:	f080 0001 	eor.w	r0, r0, #1
 8014c82:	b002      	add	sp, #8
 8014c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c88:	9a01      	ldr	r2, [sp, #4]
 8014c8a:	601a      	str	r2, [r3, #0]
 8014c8c:	e7ee      	b.n	8014c6c <ucdr_serialize_int32_t+0xc0>
 8014c8e:	68a2      	ldr	r2, [r4, #8]
 8014c90:	6923      	ldr	r3, [r4, #16]
 8014c92:	7da0      	ldrb	r0, [r4, #22]
 8014c94:	7567      	strb	r7, [r4, #21]
 8014c96:	1b92      	subs	r2, r2, r6
 8014c98:	1b9b      	subs	r3, r3, r6
 8014c9a:	f080 0001 	eor.w	r0, r0, #1
 8014c9e:	60a2      	str	r2, [r4, #8]
 8014ca0:	6123      	str	r3, [r4, #16]
 8014ca2:	b002      	add	sp, #8
 8014ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ca8:	68a3      	ldr	r3, [r4, #8]
 8014caa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8014cae:	701a      	strb	r2, [r3, #0]
 8014cb0:	68a3      	ldr	r3, [r4, #8]
 8014cb2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8014cb6:	701a      	strb	r2, [r3, #0]
 8014cb8:	68a3      	ldr	r3, [r4, #8]
 8014cba:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8014cbe:	701a      	strb	r2, [r3, #0]
 8014cc0:	e7ad      	b.n	8014c1e <ucdr_serialize_int32_t+0x72>
 8014cc2:	4628      	mov	r0, r5
 8014cc4:	ad01      	add	r5, sp, #4
 8014cc6:	4629      	mov	r1, r5
 8014cc8:	4632      	mov	r2, r6
 8014cca:	f003 f9a0 	bl	801800e <memcpy>
 8014cce:	68a0      	ldr	r0, [r4, #8]
 8014cd0:	4642      	mov	r2, r8
 8014cd2:	19a9      	adds	r1, r5, r6
 8014cd4:	f003 f99b 	bl	801800e <memcpy>
 8014cd8:	e7a1      	b.n	8014c1e <ucdr_serialize_int32_t+0x72>
 8014cda:	bf00      	nop

08014cdc <ucdr_deserialize_int32_t>:
 8014cdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014ce0:	460d      	mov	r5, r1
 8014ce2:	2104      	movs	r1, #4
 8014ce4:	4604      	mov	r4, r0
 8014ce6:	f7f8 fa33 	bl	800d150 <ucdr_buffer_alignment>
 8014cea:	4601      	mov	r1, r0
 8014cec:	4620      	mov	r0, r4
 8014cee:	f894 8015 	ldrb.w	r8, [r4, #21]
 8014cf2:	f7f8 fa71 	bl	800d1d8 <ucdr_advance_buffer>
 8014cf6:	2104      	movs	r1, #4
 8014cf8:	4620      	mov	r0, r4
 8014cfa:	f7f8 f9c9 	bl	800d090 <ucdr_check_buffer_available_for>
 8014cfe:	2800      	cmp	r0, #0
 8014d00:	d138      	bne.n	8014d74 <ucdr_deserialize_int32_t+0x98>
 8014d02:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8014d06:	42b7      	cmp	r7, r6
 8014d08:	d92f      	bls.n	8014d6a <ucdr_deserialize_int32_t+0x8e>
 8014d0a:	6923      	ldr	r3, [r4, #16]
 8014d0c:	60a7      	str	r7, [r4, #8]
 8014d0e:	1bbf      	subs	r7, r7, r6
 8014d10:	443b      	add	r3, r7
 8014d12:	f1c7 0904 	rsb	r9, r7, #4
 8014d16:	6123      	str	r3, [r4, #16]
 8014d18:	4649      	mov	r1, r9
 8014d1a:	4620      	mov	r0, r4
 8014d1c:	f7f8 f9c4 	bl	800d0a8 <ucdr_check_final_buffer_behavior>
 8014d20:	2800      	cmp	r0, #0
 8014d22:	d046      	beq.n	8014db2 <ucdr_deserialize_int32_t+0xd6>
 8014d24:	7d23      	ldrb	r3, [r4, #20]
 8014d26:	2b01      	cmp	r3, #1
 8014d28:	d05c      	beq.n	8014de4 <ucdr_deserialize_int32_t+0x108>
 8014d2a:	78f3      	ldrb	r3, [r6, #3]
 8014d2c:	702b      	strb	r3, [r5, #0]
 8014d2e:	2f00      	cmp	r7, #0
 8014d30:	d04c      	beq.n	8014dcc <ucdr_deserialize_int32_t+0xf0>
 8014d32:	78b3      	ldrb	r3, [r6, #2]
 8014d34:	706b      	strb	r3, [r5, #1]
 8014d36:	2f01      	cmp	r7, #1
 8014d38:	f105 0302 	add.w	r3, r5, #2
 8014d3c:	d04a      	beq.n	8014dd4 <ucdr_deserialize_int32_t+0xf8>
 8014d3e:	7873      	ldrb	r3, [r6, #1]
 8014d40:	70ab      	strb	r3, [r5, #2]
 8014d42:	2f02      	cmp	r7, #2
 8014d44:	f105 0303 	add.w	r3, r5, #3
 8014d48:	d048      	beq.n	8014ddc <ucdr_deserialize_int32_t+0x100>
 8014d4a:	7833      	ldrb	r3, [r6, #0]
 8014d4c:	70eb      	strb	r3, [r5, #3]
 8014d4e:	6923      	ldr	r3, [r4, #16]
 8014d50:	68a2      	ldr	r2, [r4, #8]
 8014d52:	7da0      	ldrb	r0, [r4, #22]
 8014d54:	2104      	movs	r1, #4
 8014d56:	3304      	adds	r3, #4
 8014d58:	444a      	add	r2, r9
 8014d5a:	1bdb      	subs	r3, r3, r7
 8014d5c:	7561      	strb	r1, [r4, #21]
 8014d5e:	60a2      	str	r2, [r4, #8]
 8014d60:	6123      	str	r3, [r4, #16]
 8014d62:	f080 0001 	eor.w	r0, r0, #1
 8014d66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014d6a:	2104      	movs	r1, #4
 8014d6c:	4620      	mov	r0, r4
 8014d6e:	f7f8 f99b 	bl	800d0a8 <ucdr_check_final_buffer_behavior>
 8014d72:	b1b0      	cbz	r0, 8014da2 <ucdr_deserialize_int32_t+0xc6>
 8014d74:	7d23      	ldrb	r3, [r4, #20]
 8014d76:	2b01      	cmp	r3, #1
 8014d78:	68a3      	ldr	r3, [r4, #8]
 8014d7a:	d017      	beq.n	8014dac <ucdr_deserialize_int32_t+0xd0>
 8014d7c:	78db      	ldrb	r3, [r3, #3]
 8014d7e:	702b      	strb	r3, [r5, #0]
 8014d80:	68a3      	ldr	r3, [r4, #8]
 8014d82:	789b      	ldrb	r3, [r3, #2]
 8014d84:	706b      	strb	r3, [r5, #1]
 8014d86:	68a3      	ldr	r3, [r4, #8]
 8014d88:	785b      	ldrb	r3, [r3, #1]
 8014d8a:	70ab      	strb	r3, [r5, #2]
 8014d8c:	68a3      	ldr	r3, [r4, #8]
 8014d8e:	781b      	ldrb	r3, [r3, #0]
 8014d90:	70eb      	strb	r3, [r5, #3]
 8014d92:	68a2      	ldr	r2, [r4, #8]
 8014d94:	6923      	ldr	r3, [r4, #16]
 8014d96:	3204      	adds	r2, #4
 8014d98:	3304      	adds	r3, #4
 8014d9a:	2104      	movs	r1, #4
 8014d9c:	60a2      	str	r2, [r4, #8]
 8014d9e:	6123      	str	r3, [r4, #16]
 8014da0:	7561      	strb	r1, [r4, #21]
 8014da2:	7da0      	ldrb	r0, [r4, #22]
 8014da4:	f080 0001 	eor.w	r0, r0, #1
 8014da8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014dac:	681b      	ldr	r3, [r3, #0]
 8014dae:	602b      	str	r3, [r5, #0]
 8014db0:	e7ef      	b.n	8014d92 <ucdr_deserialize_int32_t+0xb6>
 8014db2:	68a2      	ldr	r2, [r4, #8]
 8014db4:	6923      	ldr	r3, [r4, #16]
 8014db6:	7da0      	ldrb	r0, [r4, #22]
 8014db8:	f884 8015 	strb.w	r8, [r4, #21]
 8014dbc:	1bd2      	subs	r2, r2, r7
 8014dbe:	1bdb      	subs	r3, r3, r7
 8014dc0:	60a2      	str	r2, [r4, #8]
 8014dc2:	6123      	str	r3, [r4, #16]
 8014dc4:	f080 0001 	eor.w	r0, r0, #1
 8014dc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014dcc:	68a3      	ldr	r3, [r4, #8]
 8014dce:	789b      	ldrb	r3, [r3, #2]
 8014dd0:	706b      	strb	r3, [r5, #1]
 8014dd2:	1cab      	adds	r3, r5, #2
 8014dd4:	68a2      	ldr	r2, [r4, #8]
 8014dd6:	7852      	ldrb	r2, [r2, #1]
 8014dd8:	f803 2b01 	strb.w	r2, [r3], #1
 8014ddc:	68a2      	ldr	r2, [r4, #8]
 8014dde:	7812      	ldrb	r2, [r2, #0]
 8014de0:	701a      	strb	r2, [r3, #0]
 8014de2:	e7b4      	b.n	8014d4e <ucdr_deserialize_int32_t+0x72>
 8014de4:	4631      	mov	r1, r6
 8014de6:	463a      	mov	r2, r7
 8014de8:	4628      	mov	r0, r5
 8014dea:	f003 f910 	bl	801800e <memcpy>
 8014dee:	68a1      	ldr	r1, [r4, #8]
 8014df0:	464a      	mov	r2, r9
 8014df2:	19e8      	adds	r0, r5, r7
 8014df4:	f003 f90b 	bl	801800e <memcpy>
 8014df8:	e7a9      	b.n	8014d4e <ucdr_deserialize_int32_t+0x72>
 8014dfa:	bf00      	nop

08014dfc <ucdr_serialize_string>:
 8014dfc:	b510      	push	{r4, lr}
 8014dfe:	b082      	sub	sp, #8
 8014e00:	4604      	mov	r4, r0
 8014e02:	4608      	mov	r0, r1
 8014e04:	9101      	str	r1, [sp, #4]
 8014e06:	f7eb fa63 	bl	80002d0 <strlen>
 8014e0a:	9901      	ldr	r1, [sp, #4]
 8014e0c:	1c42      	adds	r2, r0, #1
 8014e0e:	4620      	mov	r0, r4
 8014e10:	b002      	add	sp, #8
 8014e12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014e16:	f7f8 b9ff 	b.w	800d218 <ucdr_serialize_sequence_char>
 8014e1a:	bf00      	nop

08014e1c <ucdr_deserialize_string>:
 8014e1c:	b500      	push	{lr}
 8014e1e:	b083      	sub	sp, #12
 8014e20:	ab01      	add	r3, sp, #4
 8014e22:	f7f8 fa0b 	bl	800d23c <ucdr_deserialize_sequence_char>
 8014e26:	b003      	add	sp, #12
 8014e28:	f85d fb04 	ldr.w	pc, [sp], #4

08014e2c <get_custom_error>:
 8014e2c:	4b01      	ldr	r3, [pc, #4]	@ (8014e34 <get_custom_error+0x8>)
 8014e2e:	7818      	ldrb	r0, [r3, #0]
 8014e30:	4770      	bx	lr
 8014e32:	bf00      	nop
 8014e34:	20011300 	.word	0x20011300

08014e38 <recv_custom_msg>:
 8014e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e3c:	4693      	mov	fp, r2
 8014e3e:	b089      	sub	sp, #36	@ 0x24
 8014e40:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 8014e44:	9305      	str	r3, [sp, #20]
 8014e46:	468a      	mov	sl, r1
 8014e48:	2100      	movs	r1, #0
 8014e4a:	4604      	mov	r4, r0
 8014e4c:	f88d 101e 	strb.w	r1, [sp, #30]
 8014e50:	b322      	cbz	r2, 8014e9c <recv_custom_msg+0x64>
 8014e52:	f200 2902 	addw	r9, r0, #514	@ 0x202
 8014e56:	f10d 081f 	add.w	r8, sp, #31
 8014e5a:	af05      	add	r7, sp, #20
 8014e5c:	f10d 061e 	add.w	r6, sp, #30
 8014e60:	f44f 7500 	mov.w	r5, #512	@ 0x200
 8014e64:	e002      	b.n	8014e6c <recv_custom_msg+0x34>
 8014e66:	9b05      	ldr	r3, [sp, #20]
 8014e68:	2b00      	cmp	r3, #0
 8014e6a:	dd0f      	ble.n	8014e8c <recv_custom_msg+0x54>
 8014e6c:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 8014e70:	4623      	mov	r3, r4
 8014e72:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8014e76:	e9cd 5600 	strd	r5, r6, [sp]
 8014e7a:	4622      	mov	r2, r4
 8014e7c:	4648      	mov	r0, r9
 8014e7e:	f000 fffd 	bl	8015e7c <uxr_read_framed_msg>
 8014e82:	2800      	cmp	r0, #0
 8014e84:	d0ef      	beq.n	8014e66 <recv_custom_msg+0x2e>
 8014e86:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8014e8a:	b1b3      	cbz	r3, 8014eba <recv_custom_msg+0x82>
 8014e8c:	4b0f      	ldr	r3, [pc, #60]	@ (8014ecc <recv_custom_msg+0x94>)
 8014e8e:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8014e92:	701a      	strb	r2, [r3, #0]
 8014e94:	2000      	movs	r0, #0
 8014e96:	b009      	add	sp, #36	@ 0x24
 8014e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e9c:	f10d 021f 	add.w	r2, sp, #31
 8014ea0:	9200      	str	r2, [sp, #0]
 8014ea2:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 8014ea6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014eaa:	4601      	mov	r1, r0
 8014eac:	47a8      	blx	r5
 8014eae:	2800      	cmp	r0, #0
 8014eb0:	d0ec      	beq.n	8014e8c <recv_custom_msg+0x54>
 8014eb2:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8014eb6:	2b00      	cmp	r3, #0
 8014eb8:	d1e8      	bne.n	8014e8c <recv_custom_msg+0x54>
 8014eba:	f8cb 0000 	str.w	r0, [fp]
 8014ebe:	2001      	movs	r0, #1
 8014ec0:	f8ca 4000 	str.w	r4, [sl]
 8014ec4:	b009      	add	sp, #36	@ 0x24
 8014ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014eca:	bf00      	nop
 8014ecc:	20011300 	.word	0x20011300

08014ed0 <send_custom_msg>:
 8014ed0:	b530      	push	{r4, r5, lr}
 8014ed2:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 8014ed6:	b087      	sub	sp, #28
 8014ed8:	4615      	mov	r5, r2
 8014eda:	b974      	cbnz	r4, 8014efa <send_custom_msg+0x2a>
 8014edc:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 8014ee0:	f10d 0317 	add.w	r3, sp, #23
 8014ee4:	47a0      	blx	r4
 8014ee6:	b108      	cbz	r0, 8014eec <send_custom_msg+0x1c>
 8014ee8:	42a8      	cmp	r0, r5
 8014eea:	d015      	beq.n	8014f18 <send_custom_msg+0x48>
 8014eec:	4b0c      	ldr	r3, [pc, #48]	@ (8014f20 <send_custom_msg+0x50>)
 8014eee:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8014ef2:	701a      	strb	r2, [r3, #0]
 8014ef4:	2000      	movs	r0, #0
 8014ef6:	b007      	add	sp, #28
 8014ef8:	bd30      	pop	{r4, r5, pc}
 8014efa:	460b      	mov	r3, r1
 8014efc:	2200      	movs	r2, #0
 8014efe:	f10d 0117 	add.w	r1, sp, #23
 8014f02:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8014f06:	4602      	mov	r2, r0
 8014f08:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 8014f0c:	9500      	str	r5, [sp, #0]
 8014f0e:	f200 2002 	addw	r0, r0, #514	@ 0x202
 8014f12:	f000 fdbb 	bl	8015a8c <uxr_write_framed_msg>
 8014f16:	e7e6      	b.n	8014ee6 <send_custom_msg+0x16>
 8014f18:	2001      	movs	r0, #1
 8014f1a:	b007      	add	sp, #28
 8014f1c:	bd30      	pop	{r4, r5, pc}
 8014f1e:	bf00      	nop
 8014f20:	20011300 	.word	0x20011300

08014f24 <uxr_set_custom_transport_callbacks>:
 8014f24:	b410      	push	{r4}
 8014f26:	9c01      	ldr	r4, [sp, #4]
 8014f28:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 8014f2c:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 8014f30:	9b02      	ldr	r3, [sp, #8]
 8014f32:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 8014f36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014f3a:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 8014f3e:	4770      	bx	lr

08014f40 <uxr_init_custom_transport>:
 8014f40:	b538      	push	{r3, r4, r5, lr}
 8014f42:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 8014f46:	b303      	cbz	r3, 8014f8a <uxr_init_custom_transport+0x4a>
 8014f48:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 8014f4c:	4604      	mov	r4, r0
 8014f4e:	b1e2      	cbz	r2, 8014f8a <uxr_init_custom_transport+0x4a>
 8014f50:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 8014f54:	b1ca      	cbz	r2, 8014f8a <uxr_init_custom_transport+0x4a>
 8014f56:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 8014f5a:	b1b2      	cbz	r2, 8014f8a <uxr_init_custom_transport+0x4a>
 8014f5c:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 8014f60:	4798      	blx	r3
 8014f62:	4605      	mov	r5, r0
 8014f64:	b188      	cbz	r0, 8014f8a <uxr_init_custom_transport+0x4a>
 8014f66:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 8014f6a:	b98b      	cbnz	r3, 8014f90 <uxr_init_custom_transport+0x50>
 8014f6c:	490b      	ldr	r1, [pc, #44]	@ (8014f9c <uxr_init_custom_transport+0x5c>)
 8014f6e:	4b0c      	ldr	r3, [pc, #48]	@ (8014fa0 <uxr_init_custom_transport+0x60>)
 8014f70:	4a0c      	ldr	r2, [pc, #48]	@ (8014fa4 <uxr_init_custom_transport+0x64>)
 8014f72:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 8014f76:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8014f7a:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 8014f7e:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 8014f82:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 8014f86:	4628      	mov	r0, r5
 8014f88:	bd38      	pop	{r3, r4, r5, pc}
 8014f8a:	2500      	movs	r5, #0
 8014f8c:	4628      	mov	r0, r5
 8014f8e:	bd38      	pop	{r3, r4, r5, pc}
 8014f90:	2100      	movs	r1, #0
 8014f92:	f204 2002 	addw	r0, r4, #514	@ 0x202
 8014f96:	f000 fd73 	bl	8015a80 <uxr_init_framing_io>
 8014f9a:	e7e7      	b.n	8014f6c <uxr_init_custom_transport+0x2c>
 8014f9c:	08014ed1 	.word	0x08014ed1
 8014fa0:	08014e39 	.word	0x08014e39
 8014fa4:	08014e2d 	.word	0x08014e2d

08014fa8 <uxr_close_custom_transport>:
 8014fa8:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 8014fac:	4718      	bx	r3
 8014fae:	bf00      	nop

08014fb0 <uxr_init_input_best_effort_stream>:
 8014fb0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014fb4:	8003      	strh	r3, [r0, #0]
 8014fb6:	4770      	bx	lr

08014fb8 <uxr_reset_input_best_effort_stream>:
 8014fb8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014fbc:	8003      	strh	r3, [r0, #0]
 8014fbe:	4770      	bx	lr

08014fc0 <uxr_receive_best_effort_message>:
 8014fc0:	b538      	push	{r3, r4, r5, lr}
 8014fc2:	4604      	mov	r4, r0
 8014fc4:	8800      	ldrh	r0, [r0, #0]
 8014fc6:	460d      	mov	r5, r1
 8014fc8:	f000 fd42 	bl	8015a50 <uxr_seq_num_cmp>
 8014fcc:	4603      	mov	r3, r0
 8014fce:	2b00      	cmp	r3, #0
 8014fd0:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8014fd4:	bfb8      	it	lt
 8014fd6:	8025      	strhlt	r5, [r4, #0]
 8014fd8:	bd38      	pop	{r3, r4, r5, pc}
 8014fda:	bf00      	nop

08014fdc <on_full_input_buffer>:
 8014fdc:	b570      	push	{r4, r5, r6, lr}
 8014fde:	4605      	mov	r5, r0
 8014fe0:	460c      	mov	r4, r1
 8014fe2:	682b      	ldr	r3, [r5, #0]
 8014fe4:	6809      	ldr	r1, [r1, #0]
 8014fe6:	8920      	ldrh	r0, [r4, #8]
 8014fe8:	6862      	ldr	r2, [r4, #4]
 8014fea:	fbb2 f2f0 	udiv	r2, r2, r0
 8014fee:	eba3 0c01 	sub.w	ip, r3, r1
 8014ff2:	fbbc fcf2 	udiv	ip, ip, r2
 8014ff6:	f10c 0c01 	add.w	ip, ip, #1
 8014ffa:	fa1f f38c 	uxth.w	r3, ip
 8014ffe:	fbb3 f6f0 	udiv	r6, r3, r0
 8015002:	fb00 3316 	mls	r3, r0, r6, r3
 8015006:	b29b      	uxth	r3, r3
 8015008:	fb02 f303 	mul.w	r3, r2, r3
 801500c:	1d18      	adds	r0, r3, #4
 801500e:	4408      	add	r0, r1
 8015010:	7d26      	ldrb	r6, [r4, #20]
 8015012:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8015016:	b116      	cbz	r6, 801501e <on_full_input_buffer+0x42>
 8015018:	2600      	movs	r6, #0
 801501a:	f840 6c04 	str.w	r6, [r0, #-4]
 801501e:	2a03      	cmp	r2, #3
 8015020:	d801      	bhi.n	8015026 <on_full_input_buffer+0x4a>
 8015022:	2001      	movs	r0, #1
 8015024:	bd70      	pop	{r4, r5, r6, pc}
 8015026:	3308      	adds	r3, #8
 8015028:	4419      	add	r1, r3
 801502a:	4628      	mov	r0, r5
 801502c:	692b      	ldr	r3, [r5, #16]
 801502e:	3a04      	subs	r2, #4
 8015030:	f7f8 f87a 	bl	800d128 <ucdr_init_buffer_origin>
 8015034:	4628      	mov	r0, r5
 8015036:	4903      	ldr	r1, [pc, #12]	@ (8015044 <on_full_input_buffer+0x68>)
 8015038:	4622      	mov	r2, r4
 801503a:	f7f8 f851 	bl	800d0e0 <ucdr_set_on_full_buffer_callback>
 801503e:	2000      	movs	r0, #0
 8015040:	bd70      	pop	{r4, r5, r6, pc}
 8015042:	bf00      	nop
 8015044:	08014fdd 	.word	0x08014fdd

08015048 <uxr_init_input_reliable_stream>:
 8015048:	b500      	push	{lr}
 801504a:	e9c0 1200 	strd	r1, r2, [r0]
 801504e:	f04f 0e00 	mov.w	lr, #0
 8015052:	9a01      	ldr	r2, [sp, #4]
 8015054:	8103      	strh	r3, [r0, #8]
 8015056:	6102      	str	r2, [r0, #16]
 8015058:	f880 e014 	strb.w	lr, [r0, #20]
 801505c:	b1d3      	cbz	r3, 8015094 <uxr_init_input_reliable_stream+0x4c>
 801505e:	f8c1 e000 	str.w	lr, [r1]
 8015062:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8015066:	f1bc 0f01 	cmp.w	ip, #1
 801506a:	d913      	bls.n	8015094 <uxr_init_input_reliable_stream+0x4c>
 801506c:	2301      	movs	r3, #1
 801506e:	fbb3 f1fc 	udiv	r1, r3, ip
 8015072:	fb0c 3111 	mls	r1, ip, r1, r3
 8015076:	b289      	uxth	r1, r1
 8015078:	6842      	ldr	r2, [r0, #4]
 801507a:	fbb2 f2fc 	udiv	r2, r2, ip
 801507e:	fb01 f202 	mul.w	r2, r1, r2
 8015082:	6801      	ldr	r1, [r0, #0]
 8015084:	f841 e002 	str.w	lr, [r1, r2]
 8015088:	3301      	adds	r3, #1
 801508a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801508e:	b29b      	uxth	r3, r3
 8015090:	459c      	cmp	ip, r3
 8015092:	d8ec      	bhi.n	801506e <uxr_init_input_reliable_stream+0x26>
 8015094:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015098:	60c3      	str	r3, [r0, #12]
 801509a:	f85d fb04 	ldr.w	pc, [sp], #4
 801509e:	bf00      	nop

080150a0 <uxr_reset_input_reliable_stream>:
 80150a0:	8901      	ldrh	r1, [r0, #8]
 80150a2:	b1e9      	cbz	r1, 80150e0 <uxr_reset_input_reliable_stream+0x40>
 80150a4:	f04f 0c00 	mov.w	ip, #0
 80150a8:	b500      	push	{lr}
 80150aa:	4663      	mov	r3, ip
 80150ac:	46e6      	mov	lr, ip
 80150ae:	fbb3 f2f1 	udiv	r2, r3, r1
 80150b2:	fb01 3312 	mls	r3, r1, r2, r3
 80150b6:	b29b      	uxth	r3, r3
 80150b8:	6842      	ldr	r2, [r0, #4]
 80150ba:	fbb2 f2f1 	udiv	r2, r2, r1
 80150be:	fb02 f303 	mul.w	r3, r2, r3
 80150c2:	6802      	ldr	r2, [r0, #0]
 80150c4:	f842 e003 	str.w	lr, [r2, r3]
 80150c8:	f10c 0c01 	add.w	ip, ip, #1
 80150cc:	8901      	ldrh	r1, [r0, #8]
 80150ce:	fa1f f38c 	uxth.w	r3, ip
 80150d2:	4299      	cmp	r1, r3
 80150d4:	d8eb      	bhi.n	80150ae <uxr_reset_input_reliable_stream+0xe>
 80150d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80150da:	60c3      	str	r3, [r0, #12]
 80150dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80150e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80150e4:	60c3      	str	r3, [r0, #12]
 80150e6:	4770      	bx	lr

080150e8 <uxr_receive_reliable_message>:
 80150e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80150ec:	4604      	mov	r4, r0
 80150ee:	460d      	mov	r5, r1
 80150f0:	8901      	ldrh	r1, [r0, #8]
 80150f2:	8980      	ldrh	r0, [r0, #12]
 80150f4:	4690      	mov	r8, r2
 80150f6:	461f      	mov	r7, r3
 80150f8:	f000 fca2 	bl	8015a40 <uxr_seq_num_add>
 80150fc:	4629      	mov	r1, r5
 80150fe:	4606      	mov	r6, r0
 8015100:	89a0      	ldrh	r0, [r4, #12]
 8015102:	f000 fca5 	bl	8015a50 <uxr_seq_num_cmp>
 8015106:	2800      	cmp	r0, #0
 8015108:	db0a      	blt.n	8015120 <uxr_receive_reliable_message+0x38>
 801510a:	2600      	movs	r6, #0
 801510c:	89e0      	ldrh	r0, [r4, #14]
 801510e:	4629      	mov	r1, r5
 8015110:	f000 fc9e 	bl	8015a50 <uxr_seq_num_cmp>
 8015114:	2800      	cmp	r0, #0
 8015116:	da00      	bge.n	801511a <uxr_receive_reliable_message+0x32>
 8015118:	81e5      	strh	r5, [r4, #14]
 801511a:	4630      	mov	r0, r6
 801511c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015120:	4630      	mov	r0, r6
 8015122:	4629      	mov	r1, r5
 8015124:	f000 fc94 	bl	8015a50 <uxr_seq_num_cmp>
 8015128:	2800      	cmp	r0, #0
 801512a:	dbee      	blt.n	801510a <uxr_receive_reliable_message+0x22>
 801512c:	6923      	ldr	r3, [r4, #16]
 801512e:	4640      	mov	r0, r8
 8015130:	4798      	blx	r3
 8015132:	2101      	movs	r1, #1
 8015134:	4681      	mov	r9, r0
 8015136:	89a0      	ldrh	r0, [r4, #12]
 8015138:	f000 fc82 	bl	8015a40 <uxr_seq_num_add>
 801513c:	f1b9 0f00 	cmp.w	r9, #0
 8015140:	d101      	bne.n	8015146 <uxr_receive_reliable_message+0x5e>
 8015142:	4285      	cmp	r5, r0
 8015144:	d047      	beq.n	80151d6 <uxr_receive_reliable_message+0xee>
 8015146:	8922      	ldrh	r2, [r4, #8]
 8015148:	fbb5 f0f2 	udiv	r0, r5, r2
 801514c:	fb02 5010 	mls	r0, r2, r0, r5
 8015150:	b280      	uxth	r0, r0
 8015152:	6863      	ldr	r3, [r4, #4]
 8015154:	fbb3 f3f2 	udiv	r3, r3, r2
 8015158:	fb00 f303 	mul.w	r3, r0, r3
 801515c:	6820      	ldr	r0, [r4, #0]
 801515e:	3304      	adds	r3, #4
 8015160:	4418      	add	r0, r3
 8015162:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8015166:	2b00      	cmp	r3, #0
 8015168:	d1cf      	bne.n	801510a <uxr_receive_reliable_message+0x22>
 801516a:	4641      	mov	r1, r8
 801516c:	463a      	mov	r2, r7
 801516e:	f002 ff4e 	bl	801800e <memcpy>
 8015172:	8921      	ldrh	r1, [r4, #8]
 8015174:	fbb5 f2f1 	udiv	r2, r5, r1
 8015178:	fb01 5212 	mls	r2, r1, r2, r5
 801517c:	b292      	uxth	r2, r2
 801517e:	6863      	ldr	r3, [r4, #4]
 8015180:	fbb3 f3f1 	udiv	r3, r3, r1
 8015184:	fb02 f303 	mul.w	r3, r2, r3
 8015188:	6822      	ldr	r2, [r4, #0]
 801518a:	50d7      	str	r7, [r2, r3]
 801518c:	9a08      	ldr	r2, [sp, #32]
 801518e:	2301      	movs	r3, #1
 8015190:	7013      	strb	r3, [r2, #0]
 8015192:	f1b9 0f00 	cmp.w	r9, #0
 8015196:	d0b8      	beq.n	801510a <uxr_receive_reliable_message+0x22>
 8015198:	89a6      	ldrh	r6, [r4, #12]
 801519a:	4630      	mov	r0, r6
 801519c:	2101      	movs	r1, #1
 801519e:	f000 fc4f 	bl	8015a40 <uxr_seq_num_add>
 80151a2:	8922      	ldrh	r2, [r4, #8]
 80151a4:	6863      	ldr	r3, [r4, #4]
 80151a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80151aa:	4606      	mov	r6, r0
 80151ac:	fbb0 f0f2 	udiv	r0, r0, r2
 80151b0:	fb02 6010 	mls	r0, r2, r0, r6
 80151b4:	b280      	uxth	r0, r0
 80151b6:	fb00 f303 	mul.w	r3, r0, r3
 80151ba:	6820      	ldr	r0, [r4, #0]
 80151bc:	3304      	adds	r3, #4
 80151be:	4418      	add	r0, r3
 80151c0:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80151c4:	2b00      	cmp	r3, #0
 80151c6:	d0a0      	beq.n	801510a <uxr_receive_reliable_message+0x22>
 80151c8:	6923      	ldr	r3, [r4, #16]
 80151ca:	4798      	blx	r3
 80151cc:	2802      	cmp	r0, #2
 80151ce:	d008      	beq.n	80151e2 <uxr_receive_reliable_message+0xfa>
 80151d0:	2801      	cmp	r0, #1
 80151d2:	d0e2      	beq.n	801519a <uxr_receive_reliable_message+0xb2>
 80151d4:	e799      	b.n	801510a <uxr_receive_reliable_message+0x22>
 80151d6:	9b08      	ldr	r3, [sp, #32]
 80151d8:	81a5      	strh	r5, [r4, #12]
 80151da:	2601      	movs	r6, #1
 80151dc:	f883 9000 	strb.w	r9, [r3]
 80151e0:	e794      	b.n	801510c <uxr_receive_reliable_message+0x24>
 80151e2:	2601      	movs	r6, #1
 80151e4:	e792      	b.n	801510c <uxr_receive_reliable_message+0x24>
 80151e6:	bf00      	nop

080151e8 <uxr_next_input_reliable_buffer_available>:
 80151e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80151ec:	4604      	mov	r4, r0
 80151ee:	460f      	mov	r7, r1
 80151f0:	8980      	ldrh	r0, [r0, #12]
 80151f2:	2101      	movs	r1, #1
 80151f4:	4690      	mov	r8, r2
 80151f6:	f000 fc23 	bl	8015a40 <uxr_seq_num_add>
 80151fa:	8922      	ldrh	r2, [r4, #8]
 80151fc:	fbb0 f6f2 	udiv	r6, r0, r2
 8015200:	fb02 0616 	mls	r6, r2, r6, r0
 8015204:	b2b6      	uxth	r6, r6
 8015206:	6863      	ldr	r3, [r4, #4]
 8015208:	fbb3 f3f2 	udiv	r3, r3, r2
 801520c:	fb06 f303 	mul.w	r3, r6, r3
 8015210:	6826      	ldr	r6, [r4, #0]
 8015212:	3304      	adds	r3, #4
 8015214:	441e      	add	r6, r3
 8015216:	f856 9c04 	ldr.w	r9, [r6, #-4]
 801521a:	f1b9 0f00 	cmp.w	r9, #0
 801521e:	d023      	beq.n	8015268 <uxr_next_input_reliable_buffer_available+0x80>
 8015220:	6923      	ldr	r3, [r4, #16]
 8015222:	4605      	mov	r5, r0
 8015224:	4630      	mov	r0, r6
 8015226:	4798      	blx	r3
 8015228:	4682      	mov	sl, r0
 801522a:	b300      	cbz	r0, 801526e <uxr_next_input_reliable_buffer_available+0x86>
 801522c:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8015230:	2101      	movs	r1, #1
 8015232:	4650      	mov	r0, sl
 8015234:	f000 fc04 	bl	8015a40 <uxr_seq_num_add>
 8015238:	8921      	ldrh	r1, [r4, #8]
 801523a:	fbb0 f2f1 	udiv	r2, r0, r1
 801523e:	4682      	mov	sl, r0
 8015240:	fb01 0212 	mls	r2, r1, r2, r0
 8015244:	e9d4 0300 	ldrd	r0, r3, [r4]
 8015248:	b292      	uxth	r2, r2
 801524a:	fbb3 f3f1 	udiv	r3, r3, r1
 801524e:	fb02 f303 	mul.w	r3, r2, r3
 8015252:	3304      	adds	r3, #4
 8015254:	4418      	add	r0, r3
 8015256:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801525a:	b12b      	cbz	r3, 8015268 <uxr_next_input_reliable_buffer_available+0x80>
 801525c:	6923      	ldr	r3, [r4, #16]
 801525e:	4798      	blx	r3
 8015260:	2802      	cmp	r0, #2
 8015262:	d01b      	beq.n	801529c <uxr_next_input_reliable_buffer_available+0xb4>
 8015264:	2801      	cmp	r0, #1
 8015266:	d0e3      	beq.n	8015230 <uxr_next_input_reliable_buffer_available+0x48>
 8015268:	2000      	movs	r0, #0
 801526a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801526e:	464a      	mov	r2, r9
 8015270:	4631      	mov	r1, r6
 8015272:	4638      	mov	r0, r7
 8015274:	f7f7 ff60 	bl	800d138 <ucdr_init_buffer>
 8015278:	8921      	ldrh	r1, [r4, #8]
 801527a:	fbb5 f2f1 	udiv	r2, r5, r1
 801527e:	fb01 5212 	mls	r2, r1, r2, r5
 8015282:	b292      	uxth	r2, r2
 8015284:	6863      	ldr	r3, [r4, #4]
 8015286:	fbb3 f3f1 	udiv	r3, r3, r1
 801528a:	fb02 f303 	mul.w	r3, r2, r3
 801528e:	6822      	ldr	r2, [r4, #0]
 8015290:	f842 a003 	str.w	sl, [r2, r3]
 8015294:	2001      	movs	r0, #1
 8015296:	81a5      	strh	r5, [r4, #12]
 8015298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801529c:	8920      	ldrh	r0, [r4, #8]
 801529e:	fbb5 f3f0 	udiv	r3, r5, r0
 80152a2:	fb00 5513 	mls	r5, r0, r3, r5
 80152a6:	b2ad      	uxth	r5, r5
 80152a8:	6863      	ldr	r3, [r4, #4]
 80152aa:	fbb3 f3f0 	udiv	r3, r3, r0
 80152ae:	fb03 f505 	mul.w	r5, r3, r5
 80152b2:	6823      	ldr	r3, [r4, #0]
 80152b4:	2000      	movs	r0, #0
 80152b6:	5158      	str	r0, [r3, r5]
 80152b8:	eb06 0108 	add.w	r1, r6, r8
 80152bc:	eba9 0208 	sub.w	r2, r9, r8
 80152c0:	4638      	mov	r0, r7
 80152c2:	f7f7 ff39 	bl	800d138 <ucdr_init_buffer>
 80152c6:	4638      	mov	r0, r7
 80152c8:	4903      	ldr	r1, [pc, #12]	@ (80152d8 <uxr_next_input_reliable_buffer_available+0xf0>)
 80152ca:	4622      	mov	r2, r4
 80152cc:	f7f7 ff08 	bl	800d0e0 <ucdr_set_on_full_buffer_callback>
 80152d0:	f8a4 a00c 	strh.w	sl, [r4, #12]
 80152d4:	2001      	movs	r0, #1
 80152d6:	e7c8      	b.n	801526a <uxr_next_input_reliable_buffer_available+0x82>
 80152d8:	08014fdd 	.word	0x08014fdd

080152dc <uxr_process_heartbeat>:
 80152dc:	b538      	push	{r3, r4, r5, lr}
 80152de:	4611      	mov	r1, r2
 80152e0:	4604      	mov	r4, r0
 80152e2:	89c0      	ldrh	r0, [r0, #14]
 80152e4:	4615      	mov	r5, r2
 80152e6:	f000 fbb3 	bl	8015a50 <uxr_seq_num_cmp>
 80152ea:	2800      	cmp	r0, #0
 80152ec:	bfb8      	it	lt
 80152ee:	81e5      	strhlt	r5, [r4, #14]
 80152f0:	bd38      	pop	{r3, r4, r5, pc}
 80152f2:	bf00      	nop

080152f4 <uxr_compute_acknack>:
 80152f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80152f8:	8903      	ldrh	r3, [r0, #8]
 80152fa:	8985      	ldrh	r5, [r0, #12]
 80152fc:	4604      	mov	r4, r0
 80152fe:	460e      	mov	r6, r1
 8015300:	b1d3      	cbz	r3, 8015338 <uxr_compute_acknack+0x44>
 8015302:	4628      	mov	r0, r5
 8015304:	2701      	movs	r7, #1
 8015306:	e003      	b.n	8015310 <uxr_compute_acknack+0x1c>
 8015308:	4567      	cmp	r7, ip
 801530a:	d215      	bcs.n	8015338 <uxr_compute_acknack+0x44>
 801530c:	89a0      	ldrh	r0, [r4, #12]
 801530e:	3701      	adds	r7, #1
 8015310:	b2b9      	uxth	r1, r7
 8015312:	f000 fb95 	bl	8015a40 <uxr_seq_num_add>
 8015316:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801531a:	fbb0 f3fc 	udiv	r3, r0, ip
 801531e:	fb0c 0313 	mls	r3, ip, r3, r0
 8015322:	b29a      	uxth	r2, r3
 8015324:	e9d4 1300 	ldrd	r1, r3, [r4]
 8015328:	fbb3 f3fc 	udiv	r3, r3, ip
 801532c:	fb02 f303 	mul.w	r3, r2, r3
 8015330:	58cb      	ldr	r3, [r1, r3]
 8015332:	2b00      	cmp	r3, #0
 8015334:	d1e8      	bne.n	8015308 <uxr_compute_acknack+0x14>
 8015336:	4605      	mov	r5, r0
 8015338:	8035      	strh	r5, [r6, #0]
 801533a:	2101      	movs	r1, #1
 801533c:	4628      	mov	r0, r5
 801533e:	89e7      	ldrh	r7, [r4, #14]
 8015340:	f000 fb82 	bl	8015a48 <uxr_seq_num_sub>
 8015344:	4601      	mov	r1, r0
 8015346:	4638      	mov	r0, r7
 8015348:	f000 fb7e 	bl	8015a48 <uxr_seq_num_sub>
 801534c:	4605      	mov	r5, r0
 801534e:	b318      	cbz	r0, 8015398 <uxr_compute_acknack+0xa4>
 8015350:	f04f 0900 	mov.w	r9, #0
 8015354:	464f      	mov	r7, r9
 8015356:	f04f 0801 	mov.w	r8, #1
 801535a:	fa1f f189 	uxth.w	r1, r9
 801535e:	8830      	ldrh	r0, [r6, #0]
 8015360:	f000 fb6e 	bl	8015a40 <uxr_seq_num_add>
 8015364:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8015368:	fbb0 f3fc 	udiv	r3, r0, ip
 801536c:	e9d4 1200 	ldrd	r1, r2, [r4]
 8015370:	fb03 001c 	mls	r0, r3, ip, r0
 8015374:	b283      	uxth	r3, r0
 8015376:	fbb2 f2fc 	udiv	r2, r2, ip
 801537a:	fb02 f303 	mul.w	r3, r2, r3
 801537e:	fa08 f209 	lsl.w	r2, r8, r9
 8015382:	58cb      	ldr	r3, [r1, r3]
 8015384:	f109 0901 	add.w	r9, r9, #1
 8015388:	b90b      	cbnz	r3, 801538e <uxr_compute_acknack+0x9a>
 801538a:	4317      	orrs	r7, r2
 801538c:	b2bf      	uxth	r7, r7
 801538e:	454d      	cmp	r5, r9
 8015390:	d1e3      	bne.n	801535a <uxr_compute_acknack+0x66>
 8015392:	4638      	mov	r0, r7
 8015394:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015398:	4607      	mov	r7, r0
 801539a:	4638      	mov	r0, r7
 801539c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080153a0 <uxr_init_output_best_effort_stream>:
 80153a0:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 80153a4:	e9c0 3201 	strd	r3, r2, [r0, #4]
 80153a8:	6001      	str	r1, [r0, #0]
 80153aa:	7303      	strb	r3, [r0, #12]
 80153ac:	f8a0 c00e 	strh.w	ip, [r0, #14]
 80153b0:	4770      	bx	lr
 80153b2:	bf00      	nop

080153b4 <uxr_reset_output_best_effort_stream>:
 80153b4:	7b02      	ldrb	r2, [r0, #12]
 80153b6:	6042      	str	r2, [r0, #4]
 80153b8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80153bc:	81c3      	strh	r3, [r0, #14]
 80153be:	4770      	bx	lr

080153c0 <uxr_prepare_best_effort_buffer_to_write>:
 80153c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80153c2:	4604      	mov	r4, r0
 80153c4:	b083      	sub	sp, #12
 80153c6:	6840      	ldr	r0, [r0, #4]
 80153c8:	460d      	mov	r5, r1
 80153ca:	4616      	mov	r6, r2
 80153cc:	f7f9 fce8 	bl	800eda0 <uxr_submessage_padding>
 80153d0:	6863      	ldr	r3, [r4, #4]
 80153d2:	4418      	add	r0, r3
 80153d4:	68a3      	ldr	r3, [r4, #8]
 80153d6:	1942      	adds	r2, r0, r5
 80153d8:	4293      	cmp	r3, r2
 80153da:	bf2c      	ite	cs
 80153dc:	2701      	movcs	r7, #1
 80153de:	2700      	movcc	r7, #0
 80153e0:	d202      	bcs.n	80153e8 <uxr_prepare_best_effort_buffer_to_write+0x28>
 80153e2:	4638      	mov	r0, r7
 80153e4:	b003      	add	sp, #12
 80153e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80153e8:	9000      	str	r0, [sp, #0]
 80153ea:	6821      	ldr	r1, [r4, #0]
 80153ec:	4630      	mov	r0, r6
 80153ee:	2300      	movs	r3, #0
 80153f0:	f7f7 fe90 	bl	800d114 <ucdr_init_buffer_origin_offset>
 80153f4:	6861      	ldr	r1, [r4, #4]
 80153f6:	4638      	mov	r0, r7
 80153f8:	4429      	add	r1, r5
 80153fa:	6061      	str	r1, [r4, #4]
 80153fc:	b003      	add	sp, #12
 80153fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015400 <uxr_prepare_best_effort_buffer_to_send>:
 8015400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015404:	4604      	mov	r4, r0
 8015406:	461d      	mov	r5, r3
 8015408:	6840      	ldr	r0, [r0, #4]
 801540a:	7b23      	ldrb	r3, [r4, #12]
 801540c:	4298      	cmp	r0, r3
 801540e:	bf8c      	ite	hi
 8015410:	2601      	movhi	r6, #1
 8015412:	2600      	movls	r6, #0
 8015414:	d802      	bhi.n	801541c <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8015416:	4630      	mov	r0, r6
 8015418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801541c:	4688      	mov	r8, r1
 801541e:	89e0      	ldrh	r0, [r4, #14]
 8015420:	2101      	movs	r1, #1
 8015422:	4617      	mov	r7, r2
 8015424:	f000 fb0c 	bl	8015a40 <uxr_seq_num_add>
 8015428:	6823      	ldr	r3, [r4, #0]
 801542a:	81e0      	strh	r0, [r4, #14]
 801542c:	8028      	strh	r0, [r5, #0]
 801542e:	f8c8 3000 	str.w	r3, [r8]
 8015432:	6863      	ldr	r3, [r4, #4]
 8015434:	603b      	str	r3, [r7, #0]
 8015436:	7b23      	ldrb	r3, [r4, #12]
 8015438:	6063      	str	r3, [r4, #4]
 801543a:	4630      	mov	r0, r6
 801543c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015440 <on_full_output_buffer>:
 8015440:	b538      	push	{r3, r4, r5, lr}
 8015442:	6802      	ldr	r2, [r0, #0]
 8015444:	460c      	mov	r4, r1
 8015446:	6809      	ldr	r1, [r1, #0]
 8015448:	8923      	ldrh	r3, [r4, #8]
 801544a:	eba2 0c01 	sub.w	ip, r2, r1
 801544e:	6862      	ldr	r2, [r4, #4]
 8015450:	fbb2 f2f3 	udiv	r2, r2, r3
 8015454:	fbbc fcf2 	udiv	ip, ip, r2
 8015458:	f10c 0c01 	add.w	ip, ip, #1
 801545c:	fa1f fc8c 	uxth.w	ip, ip
 8015460:	fbbc fef3 	udiv	lr, ip, r3
 8015464:	fb03 c31e 	mls	r3, r3, lr, ip
 8015468:	b29b      	uxth	r3, r3
 801546a:	fb02 f303 	mul.w	r3, r2, r3
 801546e:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8015472:	58ca      	ldr	r2, [r1, r3]
 8015474:	4463      	add	r3, ip
 8015476:	eba2 020c 	sub.w	r2, r2, ip
 801547a:	3308      	adds	r3, #8
 801547c:	4605      	mov	r5, r0
 801547e:	4419      	add	r1, r3
 8015480:	3a04      	subs	r2, #4
 8015482:	6903      	ldr	r3, [r0, #16]
 8015484:	f7f7 fe50 	bl	800d128 <ucdr_init_buffer_origin>
 8015488:	4628      	mov	r0, r5
 801548a:	4903      	ldr	r1, [pc, #12]	@ (8015498 <on_full_output_buffer+0x58>)
 801548c:	4622      	mov	r2, r4
 801548e:	f7f7 fe27 	bl	800d0e0 <ucdr_set_on_full_buffer_callback>
 8015492:	2000      	movs	r0, #0
 8015494:	bd38      	pop	{r3, r4, r5, pc}
 8015496:	bf00      	nop
 8015498:	08015441 	.word	0x08015441

0801549c <uxr_init_output_reliable_stream>:
 801549c:	b410      	push	{r4}
 801549e:	f89d c004 	ldrb.w	ip, [sp, #4]
 80154a2:	8103      	strh	r3, [r0, #8]
 80154a4:	e9c0 1200 	strd	r1, r2, [r0]
 80154a8:	f880 c00c 	strb.w	ip, [r0, #12]
 80154ac:	b1d3      	cbz	r3, 80154e4 <uxr_init_output_reliable_stream+0x48>
 80154ae:	f8c1 c000 	str.w	ip, [r1]
 80154b2:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80154b6:	f1bc 0f01 	cmp.w	ip, #1
 80154ba:	d913      	bls.n	80154e4 <uxr_init_output_reliable_stream+0x48>
 80154bc:	2301      	movs	r3, #1
 80154be:	fbb3 f1fc 	udiv	r1, r3, ip
 80154c2:	fb0c 3111 	mls	r1, ip, r1, r3
 80154c6:	b289      	uxth	r1, r1
 80154c8:	6842      	ldr	r2, [r0, #4]
 80154ca:	6804      	ldr	r4, [r0, #0]
 80154cc:	fbb2 f2fc 	udiv	r2, r2, ip
 80154d0:	fb01 f202 	mul.w	r2, r1, r2
 80154d4:	7b01      	ldrb	r1, [r0, #12]
 80154d6:	50a1      	str	r1, [r4, r2]
 80154d8:	3301      	adds	r3, #1
 80154da:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80154de:	b29b      	uxth	r3, r3
 80154e0:	459c      	cmp	ip, r3
 80154e2:	d8ec      	bhi.n	80154be <uxr_init_output_reliable_stream+0x22>
 80154e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80154e8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80154ec:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80154f0:	4905      	ldr	r1, [pc, #20]	@ (8015508 <uxr_init_output_reliable_stream+0x6c>)
 80154f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80154f6:	f8c0 100e 	str.w	r1, [r0, #14]
 80154fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80154fe:	2300      	movs	r3, #0
 8015500:	8242      	strh	r2, [r0, #18]
 8015502:	8403      	strh	r3, [r0, #32]
 8015504:	4770      	bx	lr
 8015506:	bf00      	nop
 8015508:	ffff0000 	.word	0xffff0000

0801550c <uxr_reset_output_reliable_stream>:
 801550c:	8901      	ldrh	r1, [r0, #8]
 801550e:	b1b1      	cbz	r1, 801553e <uxr_reset_output_reliable_stream+0x32>
 8015510:	f04f 0c00 	mov.w	ip, #0
 8015514:	4663      	mov	r3, ip
 8015516:	fbb3 f2f1 	udiv	r2, r3, r1
 801551a:	fb01 3312 	mls	r3, r1, r2, r3
 801551e:	b29b      	uxth	r3, r3
 8015520:	6842      	ldr	r2, [r0, #4]
 8015522:	fbb2 f2f1 	udiv	r2, r2, r1
 8015526:	6801      	ldr	r1, [r0, #0]
 8015528:	fb02 f303 	mul.w	r3, r2, r3
 801552c:	7b02      	ldrb	r2, [r0, #12]
 801552e:	50ca      	str	r2, [r1, r3]
 8015530:	f10c 0c01 	add.w	ip, ip, #1
 8015534:	8901      	ldrh	r1, [r0, #8]
 8015536:	fa1f f38c 	uxth.w	r3, ip
 801553a:	4299      	cmp	r1, r3
 801553c:	d8eb      	bhi.n	8015516 <uxr_reset_output_reliable_stream+0xa>
 801553e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8015542:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8015546:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801554a:	4904      	ldr	r1, [pc, #16]	@ (801555c <uxr_reset_output_reliable_stream+0x50>)
 801554c:	f8c0 100e 	str.w	r1, [r0, #14]
 8015550:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015554:	2300      	movs	r3, #0
 8015556:	8242      	strh	r2, [r0, #18]
 8015558:	8403      	strh	r3, [r0, #32]
 801555a:	4770      	bx	lr
 801555c:	ffff0000 	.word	0xffff0000

08015560 <uxr_prepare_reliable_buffer_to_write>:
 8015560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015564:	4604      	mov	r4, r0
 8015566:	b091      	sub	sp, #68	@ 0x44
 8015568:	8900      	ldrh	r0, [r0, #8]
 801556a:	89e6      	ldrh	r6, [r4, #14]
 801556c:	6823      	ldr	r3, [r4, #0]
 801556e:	9204      	str	r2, [sp, #16]
 8015570:	fbb6 f2f0 	udiv	r2, r6, r0
 8015574:	fb00 6212 	mls	r2, r0, r2, r6
 8015578:	b292      	uxth	r2, r2
 801557a:	6865      	ldr	r5, [r4, #4]
 801557c:	fbb5 f5f0 	udiv	r5, r5, r0
 8015580:	fb05 3202 	mla	r2, r5, r2, r3
 8015584:	3204      	adds	r2, #4
 8015586:	f852 8c04 	ldr.w	r8, [r2, #-4]
 801558a:	f894 900c 	ldrb.w	r9, [r4, #12]
 801558e:	9203      	str	r2, [sp, #12]
 8015590:	468b      	mov	fp, r1
 8015592:	1f2f      	subs	r7, r5, #4
 8015594:	2800      	cmp	r0, #0
 8015596:	f000 814c 	beq.w	8015832 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 801559a:	f04f 0c00 	mov.w	ip, #0
 801559e:	46e2      	mov	sl, ip
 80155a0:	4661      	mov	r1, ip
 80155a2:	fbb1 f2f0 	udiv	r2, r1, r0
 80155a6:	fb00 1212 	mls	r2, r0, r2, r1
 80155aa:	b292      	uxth	r2, r2
 80155ac:	fb05 f202 	mul.w	r2, r5, r2
 80155b0:	f10c 0c01 	add.w	ip, ip, #1
 80155b4:	589a      	ldr	r2, [r3, r2]
 80155b6:	454a      	cmp	r2, r9
 80155b8:	bf08      	it	eq
 80155ba:	f10a 0a01 	addeq.w	sl, sl, #1
 80155be:	fa1f f18c 	uxth.w	r1, ip
 80155c2:	bf08      	it	eq
 80155c4:	fa1f fa8a 	uxtheq.w	sl, sl
 80155c8:	4281      	cmp	r1, r0
 80155ca:	d3ea      	bcc.n	80155a2 <uxr_prepare_reliable_buffer_to_write+0x42>
 80155cc:	4640      	mov	r0, r8
 80155ce:	2104      	movs	r1, #4
 80155d0:	f8cd a014 	str.w	sl, [sp, #20]
 80155d4:	f7f7 fdb4 	bl	800d140 <ucdr_alignment>
 80155d8:	4480      	add	r8, r0
 80155da:	eb08 020b 	add.w	r2, r8, fp
 80155de:	42ba      	cmp	r2, r7
 80155e0:	f240 80cd 	bls.w	801577e <uxr_prepare_reliable_buffer_to_write+0x21e>
 80155e4:	7b22      	ldrb	r2, [r4, #12]
 80155e6:	445a      	add	r2, fp
 80155e8:	42ba      	cmp	r2, r7
 80155ea:	f240 80b5 	bls.w	8015758 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 80155ee:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 80155f2:	33fc      	adds	r3, #252	@ 0xfc
 80155f4:	b2ba      	uxth	r2, r7
 80155f6:	4413      	add	r3, r2
 80155f8:	b29b      	uxth	r3, r3
 80155fa:	fb0a f903 	mul.w	r9, sl, r3
 80155fe:	45d9      	cmp	r9, fp
 8015600:	9305      	str	r3, [sp, #20]
 8015602:	9306      	str	r3, [sp, #24]
 8015604:	f0c0 80b7 	bcc.w	8015776 <uxr_prepare_reliable_buffer_to_write+0x216>
 8015608:	f108 0304 	add.w	r3, r8, #4
 801560c:	42bb      	cmp	r3, r7
 801560e:	f080 80db 	bcs.w	80157c8 <uxr_prepare_reliable_buffer_to_write+0x268>
 8015612:	f1a2 0904 	sub.w	r9, r2, #4
 8015616:	eba9 0908 	sub.w	r9, r9, r8
 801561a:	9b05      	ldr	r3, [sp, #20]
 801561c:	fa1f f989 	uxth.w	r9, r9
 8015620:	ebab 0b09 	sub.w	fp, fp, r9
 8015624:	fbbb f2f3 	udiv	r2, fp, r3
 8015628:	fb03 b312 	mls	r3, r3, r2, fp
 801562c:	2b00      	cmp	r3, #0
 801562e:	f000 80c8 	beq.w	80157c2 <uxr_prepare_reliable_buffer_to_write+0x262>
 8015632:	3201      	adds	r2, #1
 8015634:	b292      	uxth	r2, r2
 8015636:	9306      	str	r3, [sp, #24]
 8015638:	4552      	cmp	r2, sl
 801563a:	f200 809c 	bhi.w	8015776 <uxr_prepare_reliable_buffer_to_write+0x216>
 801563e:	f10d 0b20 	add.w	fp, sp, #32
 8015642:	2a00      	cmp	r2, #0
 8015644:	d042      	beq.n	80156cc <uxr_prepare_reliable_buffer_to_write+0x16c>
 8015646:	f8cd 801c 	str.w	r8, [sp, #28]
 801564a:	f04f 0a00 	mov.w	sl, #0
 801564e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8015652:	9505      	str	r5, [sp, #20]
 8015654:	f10d 0b20 	add.w	fp, sp, #32
 8015658:	4615      	mov	r5, r2
 801565a:	e000      	b.n	801565e <uxr_prepare_reliable_buffer_to_write+0xfe>
 801565c:	46c1      	mov	r9, r8
 801565e:	8920      	ldrh	r0, [r4, #8]
 8015660:	fbb6 f2f0 	udiv	r2, r6, r0
 8015664:	fb00 6112 	mls	r1, r0, r2, r6
 8015668:	b28a      	uxth	r2, r1
 801566a:	6863      	ldr	r3, [r4, #4]
 801566c:	fbb3 f1f0 	udiv	r1, r3, r0
 8015670:	6823      	ldr	r3, [r4, #0]
 8015672:	fb02 f101 	mul.w	r1, r2, r1
 8015676:	3104      	adds	r1, #4
 8015678:	4419      	add	r1, r3
 801567a:	4658      	mov	r0, fp
 801567c:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8015680:	9200      	str	r2, [sp, #0]
 8015682:	2300      	movs	r3, #0
 8015684:	463a      	mov	r2, r7
 8015686:	f7f7 fd45 	bl	800d114 <ucdr_init_buffer_origin_offset>
 801568a:	464a      	mov	r2, r9
 801568c:	2300      	movs	r3, #0
 801568e:	210d      	movs	r1, #13
 8015690:	4658      	mov	r0, fp
 8015692:	f7f9 fb45 	bl	800ed20 <uxr_buffer_submessage_header>
 8015696:	8921      	ldrh	r1, [r4, #8]
 8015698:	fbb6 f2f1 	udiv	r2, r6, r1
 801569c:	fb01 6212 	mls	r2, r1, r2, r6
 80156a0:	b292      	uxth	r2, r2
 80156a2:	6863      	ldr	r3, [r4, #4]
 80156a4:	fbb3 f3f1 	udiv	r3, r3, r1
 80156a8:	fb02 f303 	mul.w	r3, r2, r3
 80156ac:	6822      	ldr	r2, [r4, #0]
 80156ae:	4630      	mov	r0, r6
 80156b0:	50d7      	str	r7, [r2, r3]
 80156b2:	2101      	movs	r1, #1
 80156b4:	f000 f9c4 	bl	8015a40 <uxr_seq_num_add>
 80156b8:	f10a 0a01 	add.w	sl, sl, #1
 80156bc:	fa1f f38a 	uxth.w	r3, sl
 80156c0:	429d      	cmp	r5, r3
 80156c2:	4606      	mov	r6, r0
 80156c4:	d8ca      	bhi.n	801565c <uxr_prepare_reliable_buffer_to_write+0xfc>
 80156c6:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80156ca:	9d05      	ldr	r5, [sp, #20]
 80156cc:	8920      	ldrh	r0, [r4, #8]
 80156ce:	fbb6 f3f0 	udiv	r3, r6, r0
 80156d2:	fb00 6313 	mls	r3, r0, r3, r6
 80156d6:	b299      	uxth	r1, r3
 80156d8:	6863      	ldr	r3, [r4, #4]
 80156da:	fbb3 f3f0 	udiv	r3, r3, r0
 80156de:	fb01 f303 	mul.w	r3, r1, r3
 80156e2:	6821      	ldr	r1, [r4, #0]
 80156e4:	3304      	adds	r3, #4
 80156e6:	4419      	add	r1, r3
 80156e8:	463a      	mov	r2, r7
 80156ea:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80156ee:	9000      	str	r0, [sp, #0]
 80156f0:	2300      	movs	r3, #0
 80156f2:	4658      	mov	r0, fp
 80156f4:	f7f7 fd0e 	bl	800d114 <ucdr_init_buffer_origin_offset>
 80156f8:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80156fc:	4658      	mov	r0, fp
 80156fe:	fa1f f289 	uxth.w	r2, r9
 8015702:	2302      	movs	r3, #2
 8015704:	210d      	movs	r1, #13
 8015706:	f7f9 fb0b 	bl	800ed20 <uxr_buffer_submessage_header>
 801570a:	9b03      	ldr	r3, [sp, #12]
 801570c:	8927      	ldrh	r7, [r4, #8]
 801570e:	7b20      	ldrb	r0, [r4, #12]
 8015710:	f108 0104 	add.w	r1, r8, #4
 8015714:	440b      	add	r3, r1
 8015716:	4619      	mov	r1, r3
 8015718:	fbb6 f3f7 	udiv	r3, r6, r7
 801571c:	fb07 6313 	mls	r3, r7, r3, r6
 8015720:	f1a5 0208 	sub.w	r2, r5, #8
 8015724:	b29d      	uxth	r5, r3
 8015726:	3004      	adds	r0, #4
 8015728:	6863      	ldr	r3, [r4, #4]
 801572a:	fbb3 f3f7 	udiv	r3, r3, r7
 801572e:	fb05 f303 	mul.w	r3, r5, r3
 8015732:	6825      	ldr	r5, [r4, #0]
 8015734:	4448      	add	r0, r9
 8015736:	50e8      	str	r0, [r5, r3]
 8015738:	9d04      	ldr	r5, [sp, #16]
 801573a:	eba2 0208 	sub.w	r2, r2, r8
 801573e:	4628      	mov	r0, r5
 8015740:	f7f7 fcfa 	bl	800d138 <ucdr_init_buffer>
 8015744:	4628      	mov	r0, r5
 8015746:	493c      	ldr	r1, [pc, #240]	@ (8015838 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 8015748:	4622      	mov	r2, r4
 801574a:	f7f7 fcc9 	bl	800d0e0 <ucdr_set_on_full_buffer_callback>
 801574e:	2001      	movs	r0, #1
 8015750:	81e6      	strh	r6, [r4, #14]
 8015752:	b011      	add	sp, #68	@ 0x44
 8015754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015758:	2101      	movs	r1, #1
 801575a:	89e0      	ldrh	r0, [r4, #14]
 801575c:	f000 f970 	bl	8015a40 <uxr_seq_num_add>
 8015760:	8921      	ldrh	r1, [r4, #8]
 8015762:	4605      	mov	r5, r0
 8015764:	8a60      	ldrh	r0, [r4, #18]
 8015766:	f000 f96b 	bl	8015a40 <uxr_seq_num_add>
 801576a:	4601      	mov	r1, r0
 801576c:	4628      	mov	r0, r5
 801576e:	f000 f96f 	bl	8015a50 <uxr_seq_num_cmp>
 8015772:	2800      	cmp	r0, #0
 8015774:	dd42      	ble.n	80157fc <uxr_prepare_reliable_buffer_to_write+0x29c>
 8015776:	2000      	movs	r0, #0
 8015778:	b011      	add	sp, #68	@ 0x44
 801577a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801577e:	8921      	ldrh	r1, [r4, #8]
 8015780:	8a60      	ldrh	r0, [r4, #18]
 8015782:	9205      	str	r2, [sp, #20]
 8015784:	f000 f95c 	bl	8015a40 <uxr_seq_num_add>
 8015788:	4601      	mov	r1, r0
 801578a:	4630      	mov	r0, r6
 801578c:	f000 f960 	bl	8015a50 <uxr_seq_num_cmp>
 8015790:	2800      	cmp	r0, #0
 8015792:	9a05      	ldr	r2, [sp, #20]
 8015794:	dcef      	bgt.n	8015776 <uxr_prepare_reliable_buffer_to_write+0x216>
 8015796:	8927      	ldrh	r7, [r4, #8]
 8015798:	fbb6 f3f7 	udiv	r3, r6, r7
 801579c:	fb07 6313 	mls	r3, r7, r3, r6
 80157a0:	b29d      	uxth	r5, r3
 80157a2:	6863      	ldr	r3, [r4, #4]
 80157a4:	6824      	ldr	r4, [r4, #0]
 80157a6:	fbb3 f3f7 	udiv	r3, r3, r7
 80157aa:	fb05 f303 	mul.w	r3, r5, r3
 80157ae:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 80157b2:	50e2      	str	r2, [r4, r3]
 80157b4:	2300      	movs	r3, #0
 80157b6:	f8cd 8000 	str.w	r8, [sp]
 80157ba:	f7f7 fcab 	bl	800d114 <ucdr_init_buffer_origin_offset>
 80157be:	2001      	movs	r0, #1
 80157c0:	e7da      	b.n	8015778 <uxr_prepare_reliable_buffer_to_write+0x218>
 80157c2:	b293      	uxth	r3, r2
 80157c4:	461a      	mov	r2, r3
 80157c6:	e737      	b.n	8015638 <uxr_prepare_reliable_buffer_to_write+0xd8>
 80157c8:	4630      	mov	r0, r6
 80157ca:	2101      	movs	r1, #1
 80157cc:	9207      	str	r2, [sp, #28]
 80157ce:	f000 f937 	bl	8015a40 <uxr_seq_num_add>
 80157d2:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80157d6:	fbb0 f1fc 	udiv	r1, r0, ip
 80157da:	fb0c 0111 	mls	r1, ip, r1, r0
 80157de:	4606      	mov	r6, r0
 80157e0:	b288      	uxth	r0, r1
 80157e2:	6863      	ldr	r3, [r4, #4]
 80157e4:	fbb3 f1fc 	udiv	r1, r3, ip
 80157e8:	6823      	ldr	r3, [r4, #0]
 80157ea:	9a07      	ldr	r2, [sp, #28]
 80157ec:	fb00 f101 	mul.w	r1, r0, r1
 80157f0:	3104      	adds	r1, #4
 80157f2:	440b      	add	r3, r1
 80157f4:	9303      	str	r3, [sp, #12]
 80157f6:	f853 8c04 	ldr.w	r8, [r3, #-4]
 80157fa:	e70a      	b.n	8015612 <uxr_prepare_reliable_buffer_to_write+0xb2>
 80157fc:	8921      	ldrh	r1, [r4, #8]
 80157fe:	fbb5 f3f1 	udiv	r3, r5, r1
 8015802:	fb01 5313 	mls	r3, r1, r3, r5
 8015806:	b29a      	uxth	r2, r3
 8015808:	6863      	ldr	r3, [r4, #4]
 801580a:	fbb3 f3f1 	udiv	r3, r3, r1
 801580e:	6821      	ldr	r1, [r4, #0]
 8015810:	9804      	ldr	r0, [sp, #16]
 8015812:	fb02 f303 	mul.w	r3, r2, r3
 8015816:	3304      	adds	r3, #4
 8015818:	7b22      	ldrb	r2, [r4, #12]
 801581a:	4419      	add	r1, r3
 801581c:	445a      	add	r2, fp
 801581e:	f841 2c04 	str.w	r2, [r1, #-4]
 8015822:	7b23      	ldrb	r3, [r4, #12]
 8015824:	9300      	str	r3, [sp, #0]
 8015826:	2300      	movs	r3, #0
 8015828:	f7f7 fc74 	bl	800d114 <ucdr_init_buffer_origin_offset>
 801582c:	81e5      	strh	r5, [r4, #14]
 801582e:	2001      	movs	r0, #1
 8015830:	e7a2      	b.n	8015778 <uxr_prepare_reliable_buffer_to_write+0x218>
 8015832:	4682      	mov	sl, r0
 8015834:	e6ca      	b.n	80155cc <uxr_prepare_reliable_buffer_to_write+0x6c>
 8015836:	bf00      	nop
 8015838:	08015441 	.word	0x08015441

0801583c <uxr_prepare_next_reliable_buffer_to_send>:
 801583c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801583e:	4604      	mov	r4, r0
 8015840:	460f      	mov	r7, r1
 8015842:	8a00      	ldrh	r0, [r0, #16]
 8015844:	2101      	movs	r1, #1
 8015846:	4616      	mov	r6, r2
 8015848:	461d      	mov	r5, r3
 801584a:	f000 f8f9 	bl	8015a40 <uxr_seq_num_add>
 801584e:	8028      	strh	r0, [r5, #0]
 8015850:	8922      	ldrh	r2, [r4, #8]
 8015852:	fbb0 f3f2 	udiv	r3, r0, r2
 8015856:	fb02 0c13 	mls	ip, r2, r3, r0
 801585a:	fa1f fc8c 	uxth.w	ip, ip
 801585e:	6863      	ldr	r3, [r4, #4]
 8015860:	fbb3 f3f2 	udiv	r3, r3, r2
 8015864:	fb0c fc03 	mul.w	ip, ip, r3
 8015868:	6823      	ldr	r3, [r4, #0]
 801586a:	89e1      	ldrh	r1, [r4, #14]
 801586c:	f10c 0c04 	add.w	ip, ip, #4
 8015870:	4463      	add	r3, ip
 8015872:	603b      	str	r3, [r7, #0]
 8015874:	6823      	ldr	r3, [r4, #0]
 8015876:	449c      	add	ip, r3
 8015878:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 801587c:	6033      	str	r3, [r6, #0]
 801587e:	f000 f8e7 	bl	8015a50 <uxr_seq_num_cmp>
 8015882:	2800      	cmp	r0, #0
 8015884:	dd01      	ble.n	801588a <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8015886:	2000      	movs	r0, #0
 8015888:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801588a:	7b23      	ldrb	r3, [r4, #12]
 801588c:	6832      	ldr	r2, [r6, #0]
 801588e:	429a      	cmp	r2, r3
 8015890:	d9f9      	bls.n	8015886 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8015892:	8a61      	ldrh	r1, [r4, #18]
 8015894:	8a20      	ldrh	r0, [r4, #16]
 8015896:	f000 f8d7 	bl	8015a48 <uxr_seq_num_sub>
 801589a:	8923      	ldrh	r3, [r4, #8]
 801589c:	4283      	cmp	r3, r0
 801589e:	d0f2      	beq.n	8015886 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80158a0:	8828      	ldrh	r0, [r5, #0]
 80158a2:	89e3      	ldrh	r3, [r4, #14]
 80158a4:	8220      	strh	r0, [r4, #16]
 80158a6:	4298      	cmp	r0, r3
 80158a8:	d001      	beq.n	80158ae <uxr_prepare_next_reliable_buffer_to_send+0x72>
 80158aa:	2001      	movs	r0, #1
 80158ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80158ae:	2101      	movs	r1, #1
 80158b0:	f000 f8c6 	bl	8015a40 <uxr_seq_num_add>
 80158b4:	81e0      	strh	r0, [r4, #14]
 80158b6:	2001      	movs	r0, #1
 80158b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80158ba:	bf00      	nop

080158bc <uxr_update_output_stream_heartbeat_timestamp>:
 80158bc:	b570      	push	{r4, r5, r6, lr}
 80158be:	8a01      	ldrh	r1, [r0, #16]
 80158c0:	4604      	mov	r4, r0
 80158c2:	8a40      	ldrh	r0, [r0, #18]
 80158c4:	4615      	mov	r5, r2
 80158c6:	461e      	mov	r6, r3
 80158c8:	f000 f8c2 	bl	8015a50 <uxr_seq_num_cmp>
 80158cc:	2800      	cmp	r0, #0
 80158ce:	db07      	blt.n	80158e0 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 80158d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80158d4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80158d8:	e9c4 2306 	strd	r2, r3, [r4, #24]
 80158dc:	2000      	movs	r0, #0
 80158de:	bd70      	pop	{r4, r5, r6, pc}
 80158e0:	f894 0020 	ldrb.w	r0, [r4, #32]
 80158e4:	b940      	cbnz	r0, 80158f8 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 80158e6:	2301      	movs	r3, #1
 80158e8:	f884 3020 	strb.w	r3, [r4, #32]
 80158ec:	3564      	adds	r5, #100	@ 0x64
 80158ee:	f146 0600 	adc.w	r6, r6, #0
 80158f2:	e9c4 5606 	strd	r5, r6, [r4, #24]
 80158f6:	bd70      	pop	{r4, r5, r6, pc}
 80158f8:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 80158fc:	4295      	cmp	r5, r2
 80158fe:	eb76 0303 	sbcs.w	r3, r6, r3
 8015902:	bfa5      	ittet	ge
 8015904:	3001      	addge	r0, #1
 8015906:	f884 0020 	strbge.w	r0, [r4, #32]
 801590a:	2000      	movlt	r0, #0
 801590c:	2001      	movge	r0, #1
 801590e:	e7ed      	b.n	80158ec <uxr_update_output_stream_heartbeat_timestamp+0x30>

08015910 <uxr_begin_output_nack_buffer_it>:
 8015910:	8a40      	ldrh	r0, [r0, #18]
 8015912:	4770      	bx	lr

08015914 <uxr_next_reliable_nack_buffer_to_send>:
 8015914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015918:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 801591c:	b082      	sub	sp, #8
 801591e:	f1b8 0f00 	cmp.w	r8, #0
 8015922:	d011      	beq.n	8015948 <uxr_next_reliable_nack_buffer_to_send+0x34>
 8015924:	4604      	mov	r4, r0
 8015926:	8818      	ldrh	r0, [r3, #0]
 8015928:	460e      	mov	r6, r1
 801592a:	4617      	mov	r7, r2
 801592c:	461d      	mov	r5, r3
 801592e:	2101      	movs	r1, #1
 8015930:	f000 f886 	bl	8015a40 <uxr_seq_num_add>
 8015934:	8028      	strh	r0, [r5, #0]
 8015936:	8a21      	ldrh	r1, [r4, #16]
 8015938:	f000 f88a 	bl	8015a50 <uxr_seq_num_cmp>
 801593c:	2800      	cmp	r0, #0
 801593e:	dd07      	ble.n	8015950 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 8015940:	f04f 0800 	mov.w	r8, #0
 8015944:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 8015948:	4640      	mov	r0, r8
 801594a:	b002      	add	sp, #8
 801594c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015950:	8921      	ldrh	r1, [r4, #8]
 8015952:	8828      	ldrh	r0, [r5, #0]
 8015954:	6823      	ldr	r3, [r4, #0]
 8015956:	fbb0 f2f1 	udiv	r2, r0, r1
 801595a:	fb01 0c12 	mls	ip, r1, r2, r0
 801595e:	fa1f f28c 	uxth.w	r2, ip
 8015962:	9301      	str	r3, [sp, #4]
 8015964:	6863      	ldr	r3, [r4, #4]
 8015966:	fbb3 fcf1 	udiv	ip, r3, r1
 801596a:	9b01      	ldr	r3, [sp, #4]
 801596c:	fb02 fc0c 	mul.w	ip, r2, ip
 8015970:	f10c 0c04 	add.w	ip, ip, #4
 8015974:	4463      	add	r3, ip
 8015976:	6033      	str	r3, [r6, #0]
 8015978:	6823      	ldr	r3, [r4, #0]
 801597a:	4463      	add	r3, ip
 801597c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8015980:	603b      	str	r3, [r7, #0]
 8015982:	7b22      	ldrb	r2, [r4, #12]
 8015984:	429a      	cmp	r2, r3
 8015986:	d0d2      	beq.n	801592e <uxr_next_reliable_nack_buffer_to_send+0x1a>
 8015988:	4640      	mov	r0, r8
 801598a:	b002      	add	sp, #8
 801598c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015990 <uxr_process_acknack>:
 8015990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015992:	4604      	mov	r4, r0
 8015994:	460e      	mov	r6, r1
 8015996:	4610      	mov	r0, r2
 8015998:	2101      	movs	r1, #1
 801599a:	f000 f855 	bl	8015a48 <uxr_seq_num_sub>
 801599e:	8a61      	ldrh	r1, [r4, #18]
 80159a0:	f000 f852 	bl	8015a48 <uxr_seq_num_sub>
 80159a4:	b1c0      	cbz	r0, 80159d8 <uxr_process_acknack+0x48>
 80159a6:	4605      	mov	r5, r0
 80159a8:	2700      	movs	r7, #0
 80159aa:	2101      	movs	r1, #1
 80159ac:	8a60      	ldrh	r0, [r4, #18]
 80159ae:	f000 f847 	bl	8015a40 <uxr_seq_num_add>
 80159b2:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80159b6:	fbb0 f1fc 	udiv	r1, r0, ip
 80159ba:	e9d4 2300 	ldrd	r2, r3, [r4]
 80159be:	fb0c 0111 	mls	r1, ip, r1, r0
 80159c2:	b289      	uxth	r1, r1
 80159c4:	3701      	adds	r7, #1
 80159c6:	fbb3 f3fc 	udiv	r3, r3, ip
 80159ca:	fb01 f303 	mul.w	r3, r1, r3
 80159ce:	42bd      	cmp	r5, r7
 80159d0:	7b21      	ldrb	r1, [r4, #12]
 80159d2:	8260      	strh	r0, [r4, #18]
 80159d4:	50d1      	str	r1, [r2, r3]
 80159d6:	d1e8      	bne.n	80159aa <uxr_process_acknack+0x1a>
 80159d8:	3e00      	subs	r6, #0
 80159da:	f04f 0300 	mov.w	r3, #0
 80159de:	bf18      	it	ne
 80159e0:	2601      	movne	r6, #1
 80159e2:	f884 3020 	strb.w	r3, [r4, #32]
 80159e6:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 80159ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080159ec <uxr_is_output_up_to_date>:
 80159ec:	8a01      	ldrh	r1, [r0, #16]
 80159ee:	8a40      	ldrh	r0, [r0, #18]
 80159f0:	b508      	push	{r3, lr}
 80159f2:	f000 f82d 	bl	8015a50 <uxr_seq_num_cmp>
 80159f6:	fab0 f080 	clz	r0, r0
 80159fa:	0940      	lsrs	r0, r0, #5
 80159fc:	bd08      	pop	{r3, pc}
 80159fe:	bf00      	nop

08015a00 <get_available_free_slots>:
 8015a00:	8902      	ldrh	r2, [r0, #8]
 8015a02:	b1da      	cbz	r2, 8015a3c <get_available_free_slots+0x3c>
 8015a04:	b530      	push	{r4, r5, lr}
 8015a06:	2100      	movs	r1, #0
 8015a08:	6843      	ldr	r3, [r0, #4]
 8015a0a:	6805      	ldr	r5, [r0, #0]
 8015a0c:	7b04      	ldrb	r4, [r0, #12]
 8015a0e:	fbb3 fef2 	udiv	lr, r3, r2
 8015a12:	4608      	mov	r0, r1
 8015a14:	460b      	mov	r3, r1
 8015a16:	fbb3 fcf2 	udiv	ip, r3, r2
 8015a1a:	fb02 331c 	mls	r3, r2, ip, r3
 8015a1e:	b29b      	uxth	r3, r3
 8015a20:	fb0e f303 	mul.w	r3, lr, r3
 8015a24:	3101      	adds	r1, #1
 8015a26:	f855 c003 	ldr.w	ip, [r5, r3]
 8015a2a:	4564      	cmp	r4, ip
 8015a2c:	bf08      	it	eq
 8015a2e:	3001      	addeq	r0, #1
 8015a30:	b28b      	uxth	r3, r1
 8015a32:	bf08      	it	eq
 8015a34:	b280      	uxtheq	r0, r0
 8015a36:	4293      	cmp	r3, r2
 8015a38:	d3ed      	bcc.n	8015a16 <get_available_free_slots+0x16>
 8015a3a:	bd30      	pop	{r4, r5, pc}
 8015a3c:	4610      	mov	r0, r2
 8015a3e:	4770      	bx	lr

08015a40 <uxr_seq_num_add>:
 8015a40:	4408      	add	r0, r1
 8015a42:	b280      	uxth	r0, r0
 8015a44:	4770      	bx	lr
 8015a46:	bf00      	nop

08015a48 <uxr_seq_num_sub>:
 8015a48:	1a40      	subs	r0, r0, r1
 8015a4a:	b280      	uxth	r0, r0
 8015a4c:	4770      	bx	lr
 8015a4e:	bf00      	nop

08015a50 <uxr_seq_num_cmp>:
 8015a50:	4288      	cmp	r0, r1
 8015a52:	d011      	beq.n	8015a78 <uxr_seq_num_cmp+0x28>
 8015a54:	d309      	bcc.n	8015a6a <uxr_seq_num_cmp+0x1a>
 8015a56:	4288      	cmp	r0, r1
 8015a58:	d910      	bls.n	8015a7c <uxr_seq_num_cmp+0x2c>
 8015a5a:	1a40      	subs	r0, r0, r1
 8015a5c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8015a60:	bfd4      	ite	le
 8015a62:	2001      	movle	r0, #1
 8015a64:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 8015a68:	4770      	bx	lr
 8015a6a:	1a0b      	subs	r3, r1, r0
 8015a6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8015a70:	daf1      	bge.n	8015a56 <uxr_seq_num_cmp+0x6>
 8015a72:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015a76:	4770      	bx	lr
 8015a78:	2000      	movs	r0, #0
 8015a7a:	4770      	bx	lr
 8015a7c:	2001      	movs	r0, #1
 8015a7e:	4770      	bx	lr

08015a80 <uxr_init_framing_io>:
 8015a80:	2300      	movs	r3, #0
 8015a82:	7041      	strb	r1, [r0, #1]
 8015a84:	7003      	strb	r3, [r0, #0]
 8015a86:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8015a88:	4770      	bx	lr
 8015a8a:	bf00      	nop

08015a8c <uxr_write_framed_msg>:
 8015a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a90:	4617      	mov	r7, r2
 8015a92:	7842      	ldrb	r2, [r0, #1]
 8015a94:	b083      	sub	sp, #12
 8015a96:	460e      	mov	r6, r1
 8015a98:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 8015a9c:	469a      	mov	sl, r3
 8015a9e:	2901      	cmp	r1, #1
 8015aa0:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 8015aa4:	4604      	mov	r4, r0
 8015aa6:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8015aaa:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 8015aae:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 8015ab2:	f240 8137 	bls.w	8015d24 <uxr_write_framed_msg+0x298>
 8015ab6:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8015aba:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 8015abe:	2901      	cmp	r1, #1
 8015ac0:	f04f 0202 	mov.w	r2, #2
 8015ac4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015ac8:	f240 808f 	bls.w	8015bea <uxr_write_framed_msg+0x15e>
 8015acc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015ace:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 8015ad2:	b2dd      	uxtb	r5, r3
 8015ad4:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8015ad8:	2203      	movs	r2, #3
 8015ada:	2901      	cmp	r1, #1
 8015adc:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015ae0:	f240 809a 	bls.w	8015c18 <uxr_write_framed_msg+0x18c>
 8015ae4:	18a1      	adds	r1, r4, r2
 8015ae6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015ae8:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 8015aec:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8015af0:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8015af4:	3201      	adds	r2, #1
 8015af6:	2801      	cmp	r0, #1
 8015af8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015afc:	f240 80a0 	bls.w	8015c40 <uxr_write_framed_msg+0x1b4>
 8015b00:	18a0      	adds	r0, r4, r2
 8015b02:	3201      	adds	r2, #1
 8015b04:	b2d2      	uxtb	r2, r2
 8015b06:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8015b0a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015b0e:	2b00      	cmp	r3, #0
 8015b10:	f000 80a9 	beq.w	8015c66 <uxr_write_framed_msg+0x1da>
 8015b14:	f04f 0900 	mov.w	r9, #0
 8015b18:	46c8      	mov	r8, r9
 8015b1a:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8015b1e:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8015b22:	2901      	cmp	r1, #1
 8015b24:	f240 80c3 	bls.w	8015cae <uxr_write_framed_msg+0x222>
 8015b28:	2a29      	cmp	r2, #41	@ 0x29
 8015b2a:	f200 809f 	bhi.w	8015c6c <uxr_write_framed_msg+0x1e0>
 8015b2e:	18a1      	adds	r1, r4, r2
 8015b30:	3201      	adds	r2, #1
 8015b32:	b2d2      	uxtb	r2, r2
 8015b34:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 8015b38:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015b3c:	ea89 0303 	eor.w	r3, r9, r3
 8015b40:	498c      	ldr	r1, [pc, #560]	@ (8015d74 <uxr_write_framed_msg+0x2e8>)
 8015b42:	b2db      	uxtb	r3, r3
 8015b44:	f108 0801 	add.w	r8, r8, #1
 8015b48:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8015b4c:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 8015b50:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015b52:	4543      	cmp	r3, r8
 8015b54:	d8e1      	bhi.n	8015b1a <uxr_write_framed_msg+0x8e>
 8015b56:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8015b5a:	fa5f f889 	uxtb.w	r8, r9
 8015b5e:	9301      	str	r3, [sp, #4]
 8015b60:	f04f 0900 	mov.w	r9, #0
 8015b64:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 8015b68:	fa5f f18a 	uxtb.w	r1, sl
 8015b6c:	2901      	cmp	r1, #1
 8015b6e:	d921      	bls.n	8015bb4 <uxr_write_framed_msg+0x128>
 8015b70:	2a29      	cmp	r2, #41	@ 0x29
 8015b72:	f240 80af 	bls.w	8015cd4 <uxr_write_framed_msg+0x248>
 8015b76:	2500      	movs	r5, #0
 8015b78:	e000      	b.n	8015b7c <uxr_write_framed_msg+0xf0>
 8015b7a:	b160      	cbz	r0, 8015b96 <uxr_write_framed_msg+0x10a>
 8015b7c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8015b80:	1b52      	subs	r2, r2, r5
 8015b82:	465b      	mov	r3, fp
 8015b84:	4421      	add	r1, r4
 8015b86:	4638      	mov	r0, r7
 8015b88:	47b0      	blx	r6
 8015b8a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8015b8e:	4405      	add	r5, r0
 8015b90:	4295      	cmp	r5, r2
 8015b92:	d3f2      	bcc.n	8015b7a <uxr_write_framed_msg+0xee>
 8015b94:	d003      	beq.n	8015b9e <uxr_write_framed_msg+0x112>
 8015b96:	2000      	movs	r0, #0
 8015b98:	b003      	add	sp, #12
 8015b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b9e:	fa5f f18a 	uxtb.w	r1, sl
 8015ba2:	f04f 0300 	mov.w	r3, #0
 8015ba6:	2901      	cmp	r1, #1
 8015ba8:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8015bac:	f04f 0200 	mov.w	r2, #0
 8015bb0:	f200 8090 	bhi.w	8015cd4 <uxr_write_framed_msg+0x248>
 8015bb4:	1c51      	adds	r1, r2, #1
 8015bb6:	b2c9      	uxtb	r1, r1
 8015bb8:	2929      	cmp	r1, #41	@ 0x29
 8015bba:	d8dc      	bhi.n	8015b76 <uxr_write_framed_msg+0xea>
 8015bbc:	18a5      	adds	r5, r4, r2
 8015bbe:	4421      	add	r1, r4
 8015bc0:	3202      	adds	r2, #2
 8015bc2:	f088 0820 	eor.w	r8, r8, #32
 8015bc6:	4648      	mov	r0, r9
 8015bc8:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 8015bcc:	b2d2      	uxtb	r2, r2
 8015bce:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 8015bd2:	f04f 0901 	mov.w	r9, #1
 8015bd6:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8015bda:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015bde:	2800      	cmp	r0, #0
 8015be0:	f040 8085 	bne.w	8015cee <uxr_write_framed_msg+0x262>
 8015be4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8015be8:	e7bc      	b.n	8015b64 <uxr_write_framed_msg+0xd8>
 8015bea:	4611      	mov	r1, r2
 8015bec:	f04f 0c03 	mov.w	ip, #3
 8015bf0:	2204      	movs	r2, #4
 8015bf2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015bf4:	4421      	add	r1, r4
 8015bf6:	b2dd      	uxtb	r5, r3
 8015bf8:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 8015bfc:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 8015c00:	44a4      	add	ip, r4
 8015c02:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8015c06:	f080 0020 	eor.w	r0, r0, #32
 8015c0a:	2901      	cmp	r1, #1
 8015c0c:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 8015c10:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015c14:	f63f af66 	bhi.w	8015ae4 <uxr_write_framed_msg+0x58>
 8015c18:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015c1a:	18a0      	adds	r0, r4, r2
 8015c1c:	f085 0520 	eor.w	r5, r5, #32
 8015c20:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8015c24:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8015c28:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 8015c2c:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 8015c30:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8015c34:	3202      	adds	r2, #2
 8015c36:	2801      	cmp	r0, #1
 8015c38:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015c3c:	f63f af60 	bhi.w	8015b00 <uxr_write_framed_msg+0x74>
 8015c40:	1c50      	adds	r0, r2, #1
 8015c42:	18a5      	adds	r5, r4, r2
 8015c44:	fa54 f080 	uxtab	r0, r4, r0
 8015c48:	3202      	adds	r2, #2
 8015c4a:	f081 0120 	eor.w	r1, r1, #32
 8015c4e:	b2d2      	uxtb	r2, r2
 8015c50:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8015c54:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 8015c58:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8015c5c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015c60:	2b00      	cmp	r3, #0
 8015c62:	f47f af57 	bne.w	8015b14 <uxr_write_framed_msg+0x88>
 8015c66:	9301      	str	r3, [sp, #4]
 8015c68:	4698      	mov	r8, r3
 8015c6a:	e779      	b.n	8015b60 <uxr_write_framed_msg+0xd4>
 8015c6c:	2500      	movs	r5, #0
 8015c6e:	e001      	b.n	8015c74 <uxr_write_framed_msg+0x1e8>
 8015c70:	2800      	cmp	r0, #0
 8015c72:	d090      	beq.n	8015b96 <uxr_write_framed_msg+0x10a>
 8015c74:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8015c78:	1b52      	subs	r2, r2, r5
 8015c7a:	465b      	mov	r3, fp
 8015c7c:	4421      	add	r1, r4
 8015c7e:	4638      	mov	r0, r7
 8015c80:	47b0      	blx	r6
 8015c82:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8015c86:	4405      	add	r5, r0
 8015c88:	4295      	cmp	r5, r2
 8015c8a:	d3f1      	bcc.n	8015c70 <uxr_write_framed_msg+0x1e4>
 8015c8c:	d183      	bne.n	8015b96 <uxr_write_framed_msg+0x10a>
 8015c8e:	f04f 0300 	mov.w	r3, #0
 8015c92:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8015c96:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015c98:	4543      	cmp	r3, r8
 8015c9a:	d964      	bls.n	8015d66 <uxr_write_framed_msg+0x2da>
 8015c9c:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8015ca0:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8015ca4:	2901      	cmp	r1, #1
 8015ca6:	f04f 0200 	mov.w	r2, #0
 8015caa:	f63f af3d 	bhi.w	8015b28 <uxr_write_framed_msg+0x9c>
 8015cae:	1c51      	adds	r1, r2, #1
 8015cb0:	b2c9      	uxtb	r1, r1
 8015cb2:	2929      	cmp	r1, #41	@ 0x29
 8015cb4:	d8da      	bhi.n	8015c6c <uxr_write_framed_msg+0x1e0>
 8015cb6:	18a0      	adds	r0, r4, r2
 8015cb8:	4421      	add	r1, r4
 8015cba:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 8015cbe:	3202      	adds	r2, #2
 8015cc0:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 8015cc4:	b2d2      	uxtb	r2, r2
 8015cc6:	f083 0020 	eor.w	r0, r3, #32
 8015cca:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 8015cce:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015cd2:	e733      	b.n	8015b3c <uxr_write_framed_msg+0xb0>
 8015cd4:	18a1      	adds	r1, r4, r2
 8015cd6:	3201      	adds	r2, #1
 8015cd8:	4648      	mov	r0, r9
 8015cda:	b2d2      	uxtb	r2, r2
 8015cdc:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8015ce0:	f04f 0901 	mov.w	r9, #1
 8015ce4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015ce8:	2800      	cmp	r0, #0
 8015cea:	f43f af7b 	beq.w	8015be4 <uxr_write_framed_msg+0x158>
 8015cee:	2500      	movs	r5, #0
 8015cf0:	e002      	b.n	8015cf8 <uxr_write_framed_msg+0x26c>
 8015cf2:	2800      	cmp	r0, #0
 8015cf4:	f43f af4f 	beq.w	8015b96 <uxr_write_framed_msg+0x10a>
 8015cf8:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8015cfc:	1b52      	subs	r2, r2, r5
 8015cfe:	465b      	mov	r3, fp
 8015d00:	4421      	add	r1, r4
 8015d02:	4638      	mov	r0, r7
 8015d04:	47b0      	blx	r6
 8015d06:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8015d0a:	4405      	add	r5, r0
 8015d0c:	4295      	cmp	r5, r2
 8015d0e:	d3f0      	bcc.n	8015cf2 <uxr_write_framed_msg+0x266>
 8015d10:	f47f af41 	bne.w	8015b96 <uxr_write_framed_msg+0x10a>
 8015d14:	2300      	movs	r3, #0
 8015d16:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8015d1a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015d1c:	b298      	uxth	r0, r3
 8015d1e:	b003      	add	sp, #12
 8015d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d24:	217d      	movs	r1, #125	@ 0x7d
 8015d26:	f082 0220 	eor.w	r2, r2, #32
 8015d2a:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 8015d2e:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8015d32:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 8015d36:	2901      	cmp	r1, #1
 8015d38:	f04f 0203 	mov.w	r2, #3
 8015d3c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015d40:	d804      	bhi.n	8015d4c <uxr_write_framed_msg+0x2c0>
 8015d42:	4611      	mov	r1, r2
 8015d44:	f04f 0c04 	mov.w	ip, #4
 8015d48:	2205      	movs	r2, #5
 8015d4a:	e752      	b.n	8015bf2 <uxr_write_framed_msg+0x166>
 8015d4c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015d4e:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 8015d52:	b2dd      	uxtb	r5, r3
 8015d54:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8015d58:	2204      	movs	r2, #4
 8015d5a:	2901      	cmp	r1, #1
 8015d5c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015d60:	f63f aec0 	bhi.w	8015ae4 <uxr_write_framed_msg+0x58>
 8015d64:	e758      	b.n	8015c18 <uxr_write_framed_msg+0x18c>
 8015d66:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8015d6a:	fa5f f889 	uxtb.w	r8, r9
 8015d6e:	9301      	str	r3, [sp, #4]
 8015d70:	2200      	movs	r2, #0
 8015d72:	e6f5      	b.n	8015b60 <uxr_write_framed_msg+0xd4>
 8015d74:	0801a8c8 	.word	0x0801a8c8

08015d78 <uxr_framing_read_transport>:
 8015d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d7c:	4604      	mov	r4, r0
 8015d7e:	b083      	sub	sp, #12
 8015d80:	461f      	mov	r7, r3
 8015d82:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 8015d86:	4689      	mov	r9, r1
 8015d88:	4692      	mov	sl, r2
 8015d8a:	f7f9 f80f 	bl	800edac <uxr_millis>
 8015d8e:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8015d92:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 8015d96:	42b3      	cmp	r3, r6
 8015d98:	4680      	mov	r8, r0
 8015d9a:	d061      	beq.n	8015e60 <uxr_framing_read_transport+0xe8>
 8015d9c:	d81c      	bhi.n	8015dd8 <uxr_framing_read_transport+0x60>
 8015d9e:	1e75      	subs	r5, r6, #1
 8015da0:	1aed      	subs	r5, r5, r3
 8015da2:	b2ed      	uxtb	r5, r5
 8015da4:	2600      	movs	r6, #0
 8015da6:	455d      	cmp	r5, fp
 8015da8:	d81f      	bhi.n	8015dea <uxr_framing_read_transport+0x72>
 8015daa:	19ab      	adds	r3, r5, r6
 8015dac:	455b      	cmp	r3, fp
 8015dae:	bf84      	itt	hi
 8015db0:	ebab 0605 	subhi.w	r6, fp, r5
 8015db4:	b2f6      	uxtbhi	r6, r6
 8015db6:	b9ed      	cbnz	r5, 8015df4 <uxr_framing_read_transport+0x7c>
 8015db8:	f04f 0b00 	mov.w	fp, #0
 8015dbc:	f7f8 fff6 	bl	800edac <uxr_millis>
 8015dc0:	683b      	ldr	r3, [r7, #0]
 8015dc2:	eba0 0808 	sub.w	r8, r0, r8
 8015dc6:	eba3 0308 	sub.w	r3, r3, r8
 8015dca:	4658      	mov	r0, fp
 8015dcc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015dd0:	603b      	str	r3, [r7, #0]
 8015dd2:	b003      	add	sp, #12
 8015dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015dd8:	2e00      	cmp	r6, #0
 8015dda:	d049      	beq.n	8015e70 <uxr_framing_read_transport+0xf8>
 8015ddc:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 8015de0:	b2ed      	uxtb	r5, r5
 8015de2:	3e01      	subs	r6, #1
 8015de4:	455d      	cmp	r5, fp
 8015de6:	b2f6      	uxtb	r6, r6
 8015de8:	d9df      	bls.n	8015daa <uxr_framing_read_transport+0x32>
 8015dea:	fa5f f58b 	uxtb.w	r5, fp
 8015dee:	2600      	movs	r6, #0
 8015df0:	2d00      	cmp	r5, #0
 8015df2:	d0e1      	beq.n	8015db8 <uxr_framing_read_transport+0x40>
 8015df4:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8015df8:	3102      	adds	r1, #2
 8015dfa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015dfc:	9300      	str	r3, [sp, #0]
 8015dfe:	683b      	ldr	r3, [r7, #0]
 8015e00:	4421      	add	r1, r4
 8015e02:	462a      	mov	r2, r5
 8015e04:	4650      	mov	r0, sl
 8015e06:	47c8      	blx	r9
 8015e08:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8015e0c:	4a1a      	ldr	r2, [pc, #104]	@ (8015e78 <uxr_framing_read_transport+0x100>)
 8015e0e:	4403      	add	r3, r0
 8015e10:	0859      	lsrs	r1, r3, #1
 8015e12:	fba2 2101 	umull	r2, r1, r2, r1
 8015e16:	0889      	lsrs	r1, r1, #2
 8015e18:	222a      	movs	r2, #42	@ 0x2a
 8015e1a:	fb02 3111 	mls	r1, r2, r1, r3
 8015e1e:	4683      	mov	fp, r0
 8015e20:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 8015e24:	2800      	cmp	r0, #0
 8015e26:	d0c7      	beq.n	8015db8 <uxr_framing_read_transport+0x40>
 8015e28:	42a8      	cmp	r0, r5
 8015e2a:	d1c7      	bne.n	8015dbc <uxr_framing_read_transport+0x44>
 8015e2c:	2e00      	cmp	r6, #0
 8015e2e:	d0c5      	beq.n	8015dbc <uxr_framing_read_transport+0x44>
 8015e30:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015e32:	9300      	str	r3, [sp, #0]
 8015e34:	3102      	adds	r1, #2
 8015e36:	4632      	mov	r2, r6
 8015e38:	4421      	add	r1, r4
 8015e3a:	2300      	movs	r3, #0
 8015e3c:	4650      	mov	r0, sl
 8015e3e:	47c8      	blx	r9
 8015e40:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8015e44:	4a0c      	ldr	r2, [pc, #48]	@ (8015e78 <uxr_framing_read_transport+0x100>)
 8015e46:	180b      	adds	r3, r1, r0
 8015e48:	0859      	lsrs	r1, r3, #1
 8015e4a:	fba2 1201 	umull	r1, r2, r2, r1
 8015e4e:	0892      	lsrs	r2, r2, #2
 8015e50:	212a      	movs	r1, #42	@ 0x2a
 8015e52:	fb01 3312 	mls	r3, r1, r2, r3
 8015e56:	eb00 0b05 	add.w	fp, r0, r5
 8015e5a:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8015e5e:	e7ad      	b.n	8015dbc <uxr_framing_read_transport+0x44>
 8015e60:	2600      	movs	r6, #0
 8015e62:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 8015e66:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 8015e68:	d9bf      	bls.n	8015dea <uxr_framing_read_transport+0x72>
 8015e6a:	2102      	movs	r1, #2
 8015e6c:	2529      	movs	r5, #41	@ 0x29
 8015e6e:	e7c4      	b.n	8015dfa <uxr_framing_read_transport+0x82>
 8015e70:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 8015e74:	b2ed      	uxtb	r5, r5
 8015e76:	e796      	b.n	8015da6 <uxr_framing_read_transport+0x2e>
 8015e78:	30c30c31 	.word	0x30c30c31

08015e7c <uxr_read_framed_msg>:
 8015e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e80:	461e      	mov	r6, r3
 8015e82:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8015e86:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8015e8a:	429d      	cmp	r5, r3
 8015e8c:	b083      	sub	sp, #12
 8015e8e:	4604      	mov	r4, r0
 8015e90:	4688      	mov	r8, r1
 8015e92:	4691      	mov	r9, r2
 8015e94:	f000 8188 	beq.w	80161a8 <uxr_read_framed_msg+0x32c>
 8015e98:	7823      	ldrb	r3, [r4, #0]
 8015e9a:	4dc1      	ldr	r5, [pc, #772]	@ (80161a0 <uxr_read_framed_msg+0x324>)
 8015e9c:	4fc1      	ldr	r7, [pc, #772]	@ (80161a4 <uxr_read_framed_msg+0x328>)
 8015e9e:	2b07      	cmp	r3, #7
 8015ea0:	d8fd      	bhi.n	8015e9e <uxr_read_framed_msg+0x22>
 8015ea2:	e8df f013 	tbh	[pc, r3, lsl #1]
 8015ea6:	0115      	.short	0x0115
 8015ea8:	00d600f6 	.word	0x00d600f6
 8015eac:	009000b9 	.word	0x009000b9
 8015eb0:	0030004d 	.word	0x0030004d
 8015eb4:	0008      	.short	0x0008
 8015eb6:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8015eba:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8015ebe:	4299      	cmp	r1, r3
 8015ec0:	f000 814a 	beq.w	8016158 <uxr_read_framed_msg+0x2dc>
 8015ec4:	18e2      	adds	r2, r4, r3
 8015ec6:	7892      	ldrb	r2, [r2, #2]
 8015ec8:	2a7d      	cmp	r2, #125	@ 0x7d
 8015eca:	f000 8199 	beq.w	8016200 <uxr_read_framed_msg+0x384>
 8015ece:	3301      	adds	r3, #1
 8015ed0:	0858      	lsrs	r0, r3, #1
 8015ed2:	fba5 1000 	umull	r1, r0, r5, r0
 8015ed6:	0880      	lsrs	r0, r0, #2
 8015ed8:	212a      	movs	r1, #42	@ 0x2a
 8015eda:	fb01 3310 	mls	r3, r1, r0, r3
 8015ede:	2a7e      	cmp	r2, #126	@ 0x7e
 8015ee0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8015ee4:	f000 8252 	beq.w	801638c <uxr_read_framed_msg+0x510>
 8015ee8:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8015eea:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 8015eec:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8015ef0:	b29b      	uxth	r3, r3
 8015ef2:	2200      	movs	r2, #0
 8015ef4:	4299      	cmp	r1, r3
 8015ef6:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8015ef8:	7022      	strb	r2, [r4, #0]
 8015efa:	f000 8179 	beq.w	80161f0 <uxr_read_framed_msg+0x374>
 8015efe:	2000      	movs	r0, #0
 8015f00:	b003      	add	sp, #12
 8015f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f06:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8015f0a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8015f0e:	4299      	cmp	r1, r3
 8015f10:	f000 8131 	beq.w	8016176 <uxr_read_framed_msg+0x2fa>
 8015f14:	18e2      	adds	r2, r4, r3
 8015f16:	7890      	ldrb	r0, [r2, #2]
 8015f18:	287d      	cmp	r0, #125	@ 0x7d
 8015f1a:	f000 8190 	beq.w	801623e <uxr_read_framed_msg+0x3c2>
 8015f1e:	3301      	adds	r3, #1
 8015f20:	085a      	lsrs	r2, r3, #1
 8015f22:	fba5 1202 	umull	r1, r2, r5, r2
 8015f26:	0892      	lsrs	r2, r2, #2
 8015f28:	212a      	movs	r1, #42	@ 0x2a
 8015f2a:	fb01 3312 	mls	r3, r1, r2, r3
 8015f2e:	287e      	cmp	r0, #126	@ 0x7e
 8015f30:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8015f34:	f000 821a 	beq.w	801636c <uxr_read_framed_msg+0x4f0>
 8015f38:	2307      	movs	r3, #7
 8015f3a:	86a0      	strh	r0, [r4, #52]	@ 0x34
 8015f3c:	7023      	strb	r3, [r4, #0]
 8015f3e:	e7ae      	b.n	8015e9e <uxr_read_framed_msg+0x22>
 8015f40:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8015f42:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8015f46:	459e      	cmp	lr, r3
 8015f48:	d938      	bls.n	8015fbc <uxr_read_framed_msg+0x140>
 8015f4a:	ee07 8a90 	vmov	s15, r8
 8015f4e:	212a      	movs	r1, #42	@ 0x2a
 8015f50:	e020      	b.n	8015f94 <uxr_read_framed_msg+0x118>
 8015f52:	f89b c002 	ldrb.w	ip, [fp, #2]
 8015f56:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 8015f5a:	f000 80d4 	beq.w	8016106 <uxr_read_framed_msg+0x28a>
 8015f5e:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8015f62:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8015f66:	f000 8219 	beq.w	801639c <uxr_read_framed_msg+0x520>
 8015f6a:	f806 c003 	strb.w	ip, [r6, r3]
 8015f6e:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 8015f72:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8015f74:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8015f78:	ea8a 000c 	eor.w	r0, sl, ip
 8015f7c:	b2c0      	uxtb	r0, r0
 8015f7e:	3301      	adds	r3, #1
 8015f80:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 8015f84:	b29b      	uxth	r3, r3
 8015f86:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 8015f8a:	4573      	cmp	r3, lr
 8015f8c:	8663      	strh	r3, [r4, #50]	@ 0x32
 8015f8e:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8015f90:	f080 8120 	bcs.w	80161d4 <uxr_read_framed_msg+0x358>
 8015f94:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 8015f98:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8015f9c:	f100 0c01 	add.w	ip, r0, #1
 8015fa0:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8015fa4:	fba5 8202 	umull	r8, r2, r5, r2
 8015fa8:	0892      	lsrs	r2, r2, #2
 8015faa:	4582      	cmp	sl, r0
 8015fac:	eb04 0b00 	add.w	fp, r4, r0
 8015fb0:	fb01 c212 	mls	r2, r1, r2, ip
 8015fb4:	d1cd      	bne.n	8015f52 <uxr_read_framed_msg+0xd6>
 8015fb6:	ee17 8a90 	vmov	r8, s15
 8015fba:	459e      	cmp	lr, r3
 8015fbc:	f040 8111 	bne.w	80161e2 <uxr_read_framed_msg+0x366>
 8015fc0:	2306      	movs	r3, #6
 8015fc2:	7023      	strb	r3, [r4, #0]
 8015fc4:	e76b      	b.n	8015e9e <uxr_read_framed_msg+0x22>
 8015fc6:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8015fca:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8015fce:	4298      	cmp	r0, r3
 8015fd0:	f000 80c2 	beq.w	8016158 <uxr_read_framed_msg+0x2dc>
 8015fd4:	18e2      	adds	r2, r4, r3
 8015fd6:	7891      	ldrb	r1, [r2, #2]
 8015fd8:	297d      	cmp	r1, #125	@ 0x7d
 8015fda:	f000 814c 	beq.w	8016276 <uxr_read_framed_msg+0x3fa>
 8015fde:	3301      	adds	r3, #1
 8015fe0:	085a      	lsrs	r2, r3, #1
 8015fe2:	fba5 0202 	umull	r0, r2, r5, r2
 8015fe6:	0892      	lsrs	r2, r2, #2
 8015fe8:	202a      	movs	r0, #42	@ 0x2a
 8015fea:	fb00 3312 	mls	r3, r0, r2, r3
 8015fee:	297e      	cmp	r1, #126	@ 0x7e
 8015ff0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8015ff4:	f000 81ca 	beq.w	801638c <uxr_read_framed_msg+0x510>
 8015ff8:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8015ffa:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8015ffe:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8016000:	b29b      	uxth	r3, r3
 8016002:	2000      	movs	r0, #0
 8016004:	428b      	cmp	r3, r1
 8016006:	8623      	strh	r3, [r4, #48]	@ 0x30
 8016008:	8660      	strh	r0, [r4, #50]	@ 0x32
 801600a:	86e0      	strh	r0, [r4, #54]	@ 0x36
 801600c:	f240 80df 	bls.w	80161ce <uxr_read_framed_msg+0x352>
 8016010:	7020      	strb	r0, [r4, #0]
 8016012:	b003      	add	sp, #12
 8016014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016018:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801601c:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8016020:	4299      	cmp	r1, r3
 8016022:	f000 80a8 	beq.w	8016176 <uxr_read_framed_msg+0x2fa>
 8016026:	18e2      	adds	r2, r4, r3
 8016028:	7890      	ldrb	r0, [r2, #2]
 801602a:	287d      	cmp	r0, #125	@ 0x7d
 801602c:	f000 8164 	beq.w	80162f8 <uxr_read_framed_msg+0x47c>
 8016030:	3301      	adds	r3, #1
 8016032:	085a      	lsrs	r2, r3, #1
 8016034:	fba5 1202 	umull	r1, r2, r5, r2
 8016038:	0892      	lsrs	r2, r2, #2
 801603a:	212a      	movs	r1, #42	@ 0x2a
 801603c:	fb01 3312 	mls	r3, r1, r2, r3
 8016040:	287e      	cmp	r0, #126	@ 0x7e
 8016042:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8016046:	f000 8191 	beq.w	801636c <uxr_read_framed_msg+0x4f0>
 801604a:	2304      	movs	r3, #4
 801604c:	8620      	strh	r0, [r4, #48]	@ 0x30
 801604e:	7023      	strb	r3, [r4, #0]
 8016050:	e725      	b.n	8015e9e <uxr_read_framed_msg+0x22>
 8016052:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8016056:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801605a:	4290      	cmp	r0, r2
 801605c:	f000 80b3 	beq.w	80161c6 <uxr_read_framed_msg+0x34a>
 8016060:	18a3      	adds	r3, r4, r2
 8016062:	7899      	ldrb	r1, [r3, #2]
 8016064:	297d      	cmp	r1, #125	@ 0x7d
 8016066:	f000 8164 	beq.w	8016332 <uxr_read_framed_msg+0x4b6>
 801606a:	3201      	adds	r2, #1
 801606c:	0850      	lsrs	r0, r2, #1
 801606e:	fba5 3000 	umull	r3, r0, r5, r0
 8016072:	0880      	lsrs	r0, r0, #2
 8016074:	232a      	movs	r3, #42	@ 0x2a
 8016076:	fb03 2210 	mls	r2, r3, r0, r2
 801607a:	297e      	cmp	r1, #126	@ 0x7e
 801607c:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8016080:	f000 8188 	beq.w	8016394 <uxr_read_framed_msg+0x518>
 8016084:	7863      	ldrb	r3, [r4, #1]
 8016086:	428b      	cmp	r3, r1
 8016088:	bf0c      	ite	eq
 801608a:	2303      	moveq	r3, #3
 801608c:	2300      	movne	r3, #0
 801608e:	7023      	strb	r3, [r4, #0]
 8016090:	e705      	b.n	8015e9e <uxr_read_framed_msg+0x22>
 8016092:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8016096:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801609a:	2200      	movs	r2, #0
 801609c:	4299      	cmp	r1, r3
 801609e:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 80160a2:	d06c      	beq.n	801617e <uxr_read_framed_msg+0x302>
 80160a4:	18e2      	adds	r2, r4, r3
 80160a6:	7890      	ldrb	r0, [r2, #2]
 80160a8:	287d      	cmp	r0, #125	@ 0x7d
 80160aa:	f000 8101 	beq.w	80162b0 <uxr_read_framed_msg+0x434>
 80160ae:	3301      	adds	r3, #1
 80160b0:	085a      	lsrs	r2, r3, #1
 80160b2:	fba5 1202 	umull	r1, r2, r5, r2
 80160b6:	0892      	lsrs	r2, r2, #2
 80160b8:	212a      	movs	r1, #42	@ 0x2a
 80160ba:	fb01 3312 	mls	r3, r1, r2, r3
 80160be:	287e      	cmp	r0, #126	@ 0x7e
 80160c0:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 80160c4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80160c8:	d059      	beq.n	801617e <uxr_read_framed_msg+0x302>
 80160ca:	2302      	movs	r3, #2
 80160cc:	7023      	strb	r3, [r4, #0]
 80160ce:	e6e6      	b.n	8015e9e <uxr_read_framed_msg+0x22>
 80160d0:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 80160d4:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80160d8:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 80160dc:	1c51      	adds	r1, r2, #1
 80160de:	084b      	lsrs	r3, r1, #1
 80160e0:	fba5 c303 	umull	ip, r3, r5, r3
 80160e4:	089b      	lsrs	r3, r3, #2
 80160e6:	fb0e 1313 	mls	r3, lr, r3, r1
 80160ea:	4592      	cmp	sl, r2
 80160ec:	eb04 0002 	add.w	r0, r4, r2
 80160f0:	b2da      	uxtb	r2, r3
 80160f2:	f43f af04 	beq.w	8015efe <uxr_read_framed_msg+0x82>
 80160f6:	7883      	ldrb	r3, [r0, #2]
 80160f8:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80160fc:	2b7e      	cmp	r3, #126	@ 0x7e
 80160fe:	d1ed      	bne.n	80160dc <uxr_read_framed_msg+0x260>
 8016100:	2301      	movs	r3, #1
 8016102:	7023      	strb	r3, [r4, #0]
 8016104:	e6cb      	b.n	8015e9e <uxr_read_framed_msg+0x22>
 8016106:	f100 0c01 	add.w	ip, r0, #1
 801610a:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801610e:	fba5 8202 	umull	r8, r2, r5, r2
 8016112:	0892      	lsrs	r2, r2, #2
 8016114:	fb01 c212 	mls	r2, r1, r2, ip
 8016118:	eb04 0c02 	add.w	ip, r4, r2
 801611c:	b2d2      	uxtb	r2, r2
 801611e:	4592      	cmp	sl, r2
 8016120:	f100 0002 	add.w	r0, r0, #2
 8016124:	f43f af47 	beq.w	8015fb6 <uxr_read_framed_msg+0x13a>
 8016128:	0842      	lsrs	r2, r0, #1
 801612a:	f89c a002 	ldrb.w	sl, [ip, #2]
 801612e:	fba5 8202 	umull	r8, r2, r5, r2
 8016132:	0892      	lsrs	r2, r2, #2
 8016134:	fb01 0012 	mls	r0, r1, r2, r0
 8016138:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 801613c:	f08a 0c20 	eor.w	ip, sl, #32
 8016140:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 8016144:	f47f af11 	bne.w	8015f6a <uxr_read_framed_msg+0xee>
 8016148:	459e      	cmp	lr, r3
 801614a:	ee17 8a90 	vmov	r8, s15
 801614e:	f43f af37 	beq.w	8015fc0 <uxr_read_framed_msg+0x144>
 8016152:	2301      	movs	r3, #1
 8016154:	7023      	strb	r3, [r4, #0]
 8016156:	e6a2      	b.n	8015e9e <uxr_read_framed_msg+0x22>
 8016158:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801615a:	9300      	str	r3, [sp, #0]
 801615c:	2301      	movs	r3, #1
 801615e:	9301      	str	r3, [sp, #4]
 8016160:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016162:	464a      	mov	r2, r9
 8016164:	4641      	mov	r1, r8
 8016166:	4620      	mov	r0, r4
 8016168:	f7ff fe06 	bl	8015d78 <uxr_framing_read_transport>
 801616c:	2800      	cmp	r0, #0
 801616e:	f43f aec6 	beq.w	8015efe <uxr_read_framed_msg+0x82>
 8016172:	7823      	ldrb	r3, [r4, #0]
 8016174:	e693      	b.n	8015e9e <uxr_read_framed_msg+0x22>
 8016176:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016178:	9300      	str	r3, [sp, #0]
 801617a:	2302      	movs	r3, #2
 801617c:	e7ef      	b.n	801615e <uxr_read_framed_msg+0x2e2>
 801617e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016180:	9300      	str	r3, [sp, #0]
 8016182:	2304      	movs	r3, #4
 8016184:	9301      	str	r3, [sp, #4]
 8016186:	464a      	mov	r2, r9
 8016188:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801618a:	4641      	mov	r1, r8
 801618c:	4620      	mov	r0, r4
 801618e:	f7ff fdf3 	bl	8015d78 <uxr_framing_read_transport>
 8016192:	2800      	cmp	r0, #0
 8016194:	d1ed      	bne.n	8016172 <uxr_read_framed_msg+0x2f6>
 8016196:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 801619a:	2b7e      	cmp	r3, #126	@ 0x7e
 801619c:	d0e9      	beq.n	8016172 <uxr_read_framed_msg+0x2f6>
 801619e:	e6ae      	b.n	8015efe <uxr_read_framed_msg+0x82>
 80161a0:	30c30c31 	.word	0x30c30c31
 80161a4:	0801a8c8 	.word	0x0801a8c8
 80161a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80161aa:	9300      	str	r3, [sp, #0]
 80161ac:	2305      	movs	r3, #5
 80161ae:	9301      	str	r3, [sp, #4]
 80161b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80161b2:	f7ff fde1 	bl	8015d78 <uxr_framing_read_transport>
 80161b6:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80161ba:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80161be:	429a      	cmp	r2, r3
 80161c0:	f43f ae9d 	beq.w	8015efe <uxr_read_framed_msg+0x82>
 80161c4:	e668      	b.n	8015e98 <uxr_read_framed_msg+0x1c>
 80161c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80161c8:	9300      	str	r3, [sp, #0]
 80161ca:	2303      	movs	r3, #3
 80161cc:	e7c7      	b.n	801615e <uxr_read_framed_msg+0x2e2>
 80161ce:	2305      	movs	r3, #5
 80161d0:	7023      	strb	r3, [r4, #0]
 80161d2:	e664      	b.n	8015e9e <uxr_read_framed_msg+0x22>
 80161d4:	ee17 8a90 	vmov	r8, s15
 80161d8:	f43f aef2 	beq.w	8015fc0 <uxr_read_framed_msg+0x144>
 80161dc:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 80161e0:	d08e      	beq.n	8016100 <uxr_read_framed_msg+0x284>
 80161e2:	ebae 0303 	sub.w	r3, lr, r3
 80161e6:	3302      	adds	r3, #2
 80161e8:	9301      	str	r3, [sp, #4]
 80161ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80161ec:	9300      	str	r3, [sp, #0]
 80161ee:	e7b7      	b.n	8016160 <uxr_read_framed_msg+0x2e4>
 80161f0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80161f2:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 80161f6:	7013      	strb	r3, [r2, #0]
 80161f8:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 80161fa:	b003      	add	sp, #12
 80161fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016200:	f103 0c01 	add.w	ip, r3, #1
 8016204:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8016208:	fba5 0202 	umull	r0, r2, r5, r2
 801620c:	0892      	lsrs	r2, r2, #2
 801620e:	202a      	movs	r0, #42	@ 0x2a
 8016210:	fb00 c212 	mls	r2, r0, r2, ip
 8016214:	fa5f fc82 	uxtb.w	ip, r2
 8016218:	4561      	cmp	r1, ip
 801621a:	d09d      	beq.n	8016158 <uxr_read_framed_msg+0x2dc>
 801621c:	3302      	adds	r3, #2
 801621e:	4422      	add	r2, r4
 8016220:	0859      	lsrs	r1, r3, #1
 8016222:	7892      	ldrb	r2, [r2, #2]
 8016224:	fba5 c101 	umull	ip, r1, r5, r1
 8016228:	0889      	lsrs	r1, r1, #2
 801622a:	fb00 3311 	mls	r3, r0, r1, r3
 801622e:	2a7e      	cmp	r2, #126	@ 0x7e
 8016230:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8016234:	f000 80aa 	beq.w	801638c <uxr_read_framed_msg+0x510>
 8016238:	f082 0220 	eor.w	r2, r2, #32
 801623c:	e654      	b.n	8015ee8 <uxr_read_framed_msg+0x6c>
 801623e:	1c58      	adds	r0, r3, #1
 8016240:	0842      	lsrs	r2, r0, #1
 8016242:	fba5 c202 	umull	ip, r2, r5, r2
 8016246:	0892      	lsrs	r2, r2, #2
 8016248:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801624c:	fb0c 0212 	mls	r2, ip, r2, r0
 8016250:	b2d0      	uxtb	r0, r2
 8016252:	4281      	cmp	r1, r0
 8016254:	d08f      	beq.n	8016176 <uxr_read_framed_msg+0x2fa>
 8016256:	4422      	add	r2, r4
 8016258:	3302      	adds	r3, #2
 801625a:	7890      	ldrb	r0, [r2, #2]
 801625c:	085a      	lsrs	r2, r3, #1
 801625e:	fba5 1202 	umull	r1, r2, r5, r2
 8016262:	0892      	lsrs	r2, r2, #2
 8016264:	fb0c 3312 	mls	r3, ip, r2, r3
 8016268:	287e      	cmp	r0, #126	@ 0x7e
 801626a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801626e:	d07d      	beq.n	801636c <uxr_read_framed_msg+0x4f0>
 8016270:	f080 0020 	eor.w	r0, r0, #32
 8016274:	e660      	b.n	8015f38 <uxr_read_framed_msg+0xbc>
 8016276:	1c59      	adds	r1, r3, #1
 8016278:	084a      	lsrs	r2, r1, #1
 801627a:	fba5 c202 	umull	ip, r2, r5, r2
 801627e:	0892      	lsrs	r2, r2, #2
 8016280:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8016284:	fb0c 1212 	mls	r2, ip, r2, r1
 8016288:	b2d1      	uxtb	r1, r2
 801628a:	4288      	cmp	r0, r1
 801628c:	f43f af64 	beq.w	8016158 <uxr_read_framed_msg+0x2dc>
 8016290:	4422      	add	r2, r4
 8016292:	3302      	adds	r3, #2
 8016294:	7891      	ldrb	r1, [r2, #2]
 8016296:	085a      	lsrs	r2, r3, #1
 8016298:	fba5 0202 	umull	r0, r2, r5, r2
 801629c:	0892      	lsrs	r2, r2, #2
 801629e:	fb0c 3312 	mls	r3, ip, r2, r3
 80162a2:	297e      	cmp	r1, #126	@ 0x7e
 80162a4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80162a8:	d070      	beq.n	801638c <uxr_read_framed_msg+0x510>
 80162aa:	f081 0120 	eor.w	r1, r1, #32
 80162ae:	e6a3      	b.n	8015ff8 <uxr_read_framed_msg+0x17c>
 80162b0:	f103 0c01 	add.w	ip, r3, #1
 80162b4:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80162b8:	fba5 0202 	umull	r0, r2, r5, r2
 80162bc:	0892      	lsrs	r2, r2, #2
 80162be:	202a      	movs	r0, #42	@ 0x2a
 80162c0:	fb00 c212 	mls	r2, r0, r2, ip
 80162c4:	fa5f fc82 	uxtb.w	ip, r2
 80162c8:	4561      	cmp	r1, ip
 80162ca:	f43f af58 	beq.w	801617e <uxr_read_framed_msg+0x302>
 80162ce:	4422      	add	r2, r4
 80162d0:	3302      	adds	r3, #2
 80162d2:	7891      	ldrb	r1, [r2, #2]
 80162d4:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 80162d8:	085a      	lsrs	r2, r3, #1
 80162da:	fba5 c202 	umull	ip, r2, r5, r2
 80162de:	0892      	lsrs	r2, r2, #2
 80162e0:	fb00 3312 	mls	r3, r0, r2, r3
 80162e4:	297e      	cmp	r1, #126	@ 0x7e
 80162e6:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80162ea:	f43f af48 	beq.w	801617e <uxr_read_framed_msg+0x302>
 80162ee:	f081 0120 	eor.w	r1, r1, #32
 80162f2:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 80162f6:	e6e8      	b.n	80160ca <uxr_read_framed_msg+0x24e>
 80162f8:	1c58      	adds	r0, r3, #1
 80162fa:	0842      	lsrs	r2, r0, #1
 80162fc:	fba5 c202 	umull	ip, r2, r5, r2
 8016300:	0892      	lsrs	r2, r2, #2
 8016302:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8016306:	fb0c 0212 	mls	r2, ip, r2, r0
 801630a:	b2d0      	uxtb	r0, r2
 801630c:	4281      	cmp	r1, r0
 801630e:	f43f af32 	beq.w	8016176 <uxr_read_framed_msg+0x2fa>
 8016312:	4422      	add	r2, r4
 8016314:	3302      	adds	r3, #2
 8016316:	7890      	ldrb	r0, [r2, #2]
 8016318:	085a      	lsrs	r2, r3, #1
 801631a:	fba5 1202 	umull	r1, r2, r5, r2
 801631e:	0892      	lsrs	r2, r2, #2
 8016320:	fb0c 3312 	mls	r3, ip, r2, r3
 8016324:	287e      	cmp	r0, #126	@ 0x7e
 8016326:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801632a:	d01f      	beq.n	801636c <uxr_read_framed_msg+0x4f0>
 801632c:	f080 0020 	eor.w	r0, r0, #32
 8016330:	e68b      	b.n	801604a <uxr_read_framed_msg+0x1ce>
 8016332:	1c51      	adds	r1, r2, #1
 8016334:	084b      	lsrs	r3, r1, #1
 8016336:	fba5 c303 	umull	ip, r3, r5, r3
 801633a:	089b      	lsrs	r3, r3, #2
 801633c:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8016340:	fb0c 1313 	mls	r3, ip, r3, r1
 8016344:	b2d9      	uxtb	r1, r3
 8016346:	4288      	cmp	r0, r1
 8016348:	f43f af3d 	beq.w	80161c6 <uxr_read_framed_msg+0x34a>
 801634c:	3202      	adds	r2, #2
 801634e:	4423      	add	r3, r4
 8016350:	0850      	lsrs	r0, r2, #1
 8016352:	789b      	ldrb	r3, [r3, #2]
 8016354:	fba5 1000 	umull	r1, r0, r5, r0
 8016358:	0880      	lsrs	r0, r0, #2
 801635a:	fb0c 2210 	mls	r2, ip, r0, r2
 801635e:	2b7e      	cmp	r3, #126	@ 0x7e
 8016360:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8016364:	d016      	beq.n	8016394 <uxr_read_framed_msg+0x518>
 8016366:	f083 0120 	eor.w	r1, r3, #32
 801636a:	e68b      	b.n	8016084 <uxr_read_framed_msg+0x208>
 801636c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801636e:	9300      	str	r3, [sp, #0]
 8016370:	2302      	movs	r3, #2
 8016372:	9301      	str	r3, [sp, #4]
 8016374:	464a      	mov	r2, r9
 8016376:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016378:	4641      	mov	r1, r8
 801637a:	4620      	mov	r0, r4
 801637c:	f7ff fcfc 	bl	8015d78 <uxr_framing_read_transport>
 8016380:	2800      	cmp	r0, #0
 8016382:	f47f aef6 	bne.w	8016172 <uxr_read_framed_msg+0x2f6>
 8016386:	2301      	movs	r3, #1
 8016388:	7023      	strb	r3, [r4, #0]
 801638a:	e588      	b.n	8015e9e <uxr_read_framed_msg+0x22>
 801638c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801638e:	9300      	str	r3, [sp, #0]
 8016390:	2301      	movs	r3, #1
 8016392:	e7ee      	b.n	8016372 <uxr_read_framed_msg+0x4f6>
 8016394:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016396:	9300      	str	r3, [sp, #0]
 8016398:	2303      	movs	r3, #3
 801639a:	e7ea      	b.n	8016372 <uxr_read_framed_msg+0x4f6>
 801639c:	ee17 8a90 	vmov	r8, s15
 80163a0:	e6ae      	b.n	8016100 <uxr_read_framed_msg+0x284>
 80163a2:	bf00      	nop

080163a4 <rcl_get_default_domain_id>:
 80163a4:	b530      	push	{r4, r5, lr}
 80163a6:	b083      	sub	sp, #12
 80163a8:	2300      	movs	r3, #0
 80163aa:	9300      	str	r3, [sp, #0]
 80163ac:	b1d0      	cbz	r0, 80163e4 <rcl_get_default_domain_id+0x40>
 80163ae:	4604      	mov	r4, r0
 80163b0:	4669      	mov	r1, sp
 80163b2:	4815      	ldr	r0, [pc, #84]	@ (8016408 <rcl_get_default_domain_id+0x64>)
 80163b4:	f7f5 faca 	bl	800b94c <rcutils_get_env>
 80163b8:	4602      	mov	r2, r0
 80163ba:	b110      	cbz	r0, 80163c2 <rcl_get_default_domain_id+0x1e>
 80163bc:	2001      	movs	r0, #1
 80163be:	b003      	add	sp, #12
 80163c0:	bd30      	pop	{r4, r5, pc}
 80163c2:	9b00      	ldr	r3, [sp, #0]
 80163c4:	b18b      	cbz	r3, 80163ea <rcl_get_default_domain_id+0x46>
 80163c6:	7818      	ldrb	r0, [r3, #0]
 80163c8:	2800      	cmp	r0, #0
 80163ca:	d0f8      	beq.n	80163be <rcl_get_default_domain_id+0x1a>
 80163cc:	a901      	add	r1, sp, #4
 80163ce:	4618      	mov	r0, r3
 80163d0:	9201      	str	r2, [sp, #4]
 80163d2:	f000 fddb 	bl	8016f8c <strtoul>
 80163d6:	4605      	mov	r5, r0
 80163d8:	b150      	cbz	r0, 80163f0 <rcl_get_default_domain_id+0x4c>
 80163da:	1c43      	adds	r3, r0, #1
 80163dc:	d00d      	beq.n	80163fa <rcl_get_default_domain_id+0x56>
 80163de:	6025      	str	r5, [r4, #0]
 80163e0:	2000      	movs	r0, #0
 80163e2:	e7ec      	b.n	80163be <rcl_get_default_domain_id+0x1a>
 80163e4:	200b      	movs	r0, #11
 80163e6:	b003      	add	sp, #12
 80163e8:	bd30      	pop	{r4, r5, pc}
 80163ea:	4618      	mov	r0, r3
 80163ec:	b003      	add	sp, #12
 80163ee:	bd30      	pop	{r4, r5, pc}
 80163f0:	9b01      	ldr	r3, [sp, #4]
 80163f2:	781b      	ldrb	r3, [r3, #0]
 80163f4:	2b00      	cmp	r3, #0
 80163f6:	d0f2      	beq.n	80163de <rcl_get_default_domain_id+0x3a>
 80163f8:	e7e0      	b.n	80163bc <rcl_get_default_domain_id+0x18>
 80163fa:	f001 fdd3 	bl	8017fa4 <__errno>
 80163fe:	6803      	ldr	r3, [r0, #0]
 8016400:	2b22      	cmp	r3, #34	@ 0x22
 8016402:	d1ec      	bne.n	80163de <rcl_get_default_domain_id+0x3a>
 8016404:	e7da      	b.n	80163bc <rcl_get_default_domain_id+0x18>
 8016406:	bf00      	nop
 8016408:	0801aac8 	.word	0x0801aac8

0801640c <rcl_expand_topic_name>:
 801640c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016410:	b08b      	sub	sp, #44	@ 0x2c
 8016412:	9306      	str	r3, [sp, #24]
 8016414:	2800      	cmp	r0, #0
 8016416:	f000 80ad 	beq.w	8016574 <rcl_expand_topic_name+0x168>
 801641a:	460e      	mov	r6, r1
 801641c:	2900      	cmp	r1, #0
 801641e:	f000 80a9 	beq.w	8016574 <rcl_expand_topic_name+0x168>
 8016422:	4617      	mov	r7, r2
 8016424:	2a00      	cmp	r2, #0
 8016426:	f000 80a5 	beq.w	8016574 <rcl_expand_topic_name+0x168>
 801642a:	2b00      	cmp	r3, #0
 801642c:	f000 80a2 	beq.w	8016574 <rcl_expand_topic_name+0x168>
 8016430:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016432:	2b00      	cmp	r3, #0
 8016434:	f000 809e 	beq.w	8016574 <rcl_expand_topic_name+0x168>
 8016438:	2200      	movs	r2, #0
 801643a:	a909      	add	r1, sp, #36	@ 0x24
 801643c:	4680      	mov	r8, r0
 801643e:	f000 f949 	bl	80166d4 <rcl_validate_topic_name>
 8016442:	4604      	mov	r4, r0
 8016444:	2800      	cmp	r0, #0
 8016446:	f040 8096 	bne.w	8016576 <rcl_expand_topic_name+0x16a>
 801644a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801644c:	2b00      	cmp	r3, #0
 801644e:	f040 809a 	bne.w	8016586 <rcl_expand_topic_name+0x17a>
 8016452:	4602      	mov	r2, r0
 8016454:	a909      	add	r1, sp, #36	@ 0x24
 8016456:	4630      	mov	r0, r6
 8016458:	f7f5 fd02 	bl	800be60 <rmw_validate_node_name>
 801645c:	2800      	cmp	r0, #0
 801645e:	f040 808e 	bne.w	801657e <rcl_expand_topic_name+0x172>
 8016462:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016464:	2a00      	cmp	r2, #0
 8016466:	f040 8093 	bne.w	8016590 <rcl_expand_topic_name+0x184>
 801646a:	a909      	add	r1, sp, #36	@ 0x24
 801646c:	4638      	mov	r0, r7
 801646e:	f7f5 fcd9 	bl	800be24 <rmw_validate_namespace>
 8016472:	2800      	cmp	r0, #0
 8016474:	f040 8083 	bne.w	801657e <rcl_expand_topic_name+0x172>
 8016478:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801647a:	2c00      	cmp	r4, #0
 801647c:	f040 80ed 	bne.w	801665a <rcl_expand_topic_name+0x24e>
 8016480:	217b      	movs	r1, #123	@ 0x7b
 8016482:	4640      	mov	r0, r8
 8016484:	f001 fca8 	bl	8017dd8 <strchr>
 8016488:	f898 3000 	ldrb.w	r3, [r8]
 801648c:	2b2f      	cmp	r3, #47	@ 0x2f
 801648e:	4605      	mov	r5, r0
 8016490:	f000 809e 	beq.w	80165d0 <rcl_expand_topic_name+0x1c4>
 8016494:	2b7e      	cmp	r3, #126	@ 0x7e
 8016496:	f040 80a2 	bne.w	80165de <rcl_expand_topic_name+0x1d2>
 801649a:	4638      	mov	r0, r7
 801649c:	f7e9 ff18 	bl	80002d0 <strlen>
 80164a0:	4a82      	ldr	r2, [pc, #520]	@ (80166ac <rcl_expand_topic_name+0x2a0>)
 80164a2:	4b83      	ldr	r3, [pc, #524]	@ (80166b0 <rcl_expand_topic_name+0x2a4>)
 80164a4:	2801      	cmp	r0, #1
 80164a6:	bf18      	it	ne
 80164a8:	4613      	movne	r3, r2
 80164aa:	9302      	str	r3, [sp, #8]
 80164ac:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80164ae:	9300      	str	r3, [sp, #0]
 80164b0:	e9cd 7603 	strd	r7, r6, [sp, #12]
 80164b4:	f108 0301 	add.w	r3, r8, #1
 80164b8:	9305      	str	r3, [sp, #20]
 80164ba:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80164be:	9301      	str	r3, [sp, #4]
 80164c0:	ab14      	add	r3, sp, #80	@ 0x50
 80164c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80164c4:	f7f5 fa8c 	bl	800b9e0 <rcutils_format_string_limit>
 80164c8:	4682      	mov	sl, r0
 80164ca:	2800      	cmp	r0, #0
 80164cc:	f000 80c7 	beq.w	801665e <rcl_expand_topic_name+0x252>
 80164d0:	2d00      	cmp	r5, #0
 80164d2:	f000 80a2 	beq.w	801661a <rcl_expand_topic_name+0x20e>
 80164d6:	217b      	movs	r1, #123	@ 0x7b
 80164d8:	f001 fc7e 	bl	8017dd8 <strchr>
 80164dc:	46d1      	mov	r9, sl
 80164de:	4605      	mov	r5, r0
 80164e0:	9407      	str	r4, [sp, #28]
 80164e2:	46d3      	mov	fp, sl
 80164e4:	464c      	mov	r4, r9
 80164e6:	2d00      	cmp	r5, #0
 80164e8:	f000 80be 	beq.w	8016668 <rcl_expand_topic_name+0x25c>
 80164ec:	217d      	movs	r1, #125	@ 0x7d
 80164ee:	4620      	mov	r0, r4
 80164f0:	f001 fc72 	bl	8017dd8 <strchr>
 80164f4:	eba0 0905 	sub.w	r9, r0, r5
 80164f8:	f109 0a01 	add.w	sl, r9, #1
 80164fc:	486d      	ldr	r0, [pc, #436]	@ (80166b4 <rcl_expand_topic_name+0x2a8>)
 80164fe:	4652      	mov	r2, sl
 8016500:	4629      	mov	r1, r5
 8016502:	f001 fc76 	bl	8017df2 <strncmp>
 8016506:	2800      	cmp	r0, #0
 8016508:	d067      	beq.n	80165da <rcl_expand_topic_name+0x1ce>
 801650a:	486b      	ldr	r0, [pc, #428]	@ (80166b8 <rcl_expand_topic_name+0x2ac>)
 801650c:	4652      	mov	r2, sl
 801650e:	4629      	mov	r1, r5
 8016510:	f001 fc6f 	bl	8017df2 <strncmp>
 8016514:	b130      	cbz	r0, 8016524 <rcl_expand_topic_name+0x118>
 8016516:	4869      	ldr	r0, [pc, #420]	@ (80166bc <rcl_expand_topic_name+0x2b0>)
 8016518:	4652      	mov	r2, sl
 801651a:	4629      	mov	r1, r5
 801651c:	f001 fc69 	bl	8017df2 <strncmp>
 8016520:	2800      	cmp	r0, #0
 8016522:	d137      	bne.n	8016594 <rcl_expand_topic_name+0x188>
 8016524:	46b9      	mov	r9, r7
 8016526:	ab16      	add	r3, sp, #88	@ 0x58
 8016528:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801652c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016530:	ab14      	add	r3, sp, #80	@ 0x50
 8016532:	4628      	mov	r0, r5
 8016534:	cb0c      	ldmia	r3, {r2, r3}
 8016536:	4651      	mov	r1, sl
 8016538:	f7f5 fb8e 	bl	800bc58 <rcutils_strndup>
 801653c:	4605      	mov	r5, r0
 801653e:	2800      	cmp	r0, #0
 8016540:	f000 809c 	beq.w	801667c <rcl_expand_topic_name+0x270>
 8016544:	464a      	mov	r2, r9
 8016546:	4620      	mov	r0, r4
 8016548:	ab14      	add	r3, sp, #80	@ 0x50
 801654a:	4629      	mov	r1, r5
 801654c:	f7f5 fa82 	bl	800ba54 <rcutils_repl_str>
 8016550:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016552:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016554:	4604      	mov	r4, r0
 8016556:	4628      	mov	r0, r5
 8016558:	4798      	blx	r3
 801655a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801655c:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801655e:	4658      	mov	r0, fp
 8016560:	4798      	blx	r3
 8016562:	2c00      	cmp	r4, #0
 8016564:	d07b      	beq.n	801665e <rcl_expand_topic_name+0x252>
 8016566:	217b      	movs	r1, #123	@ 0x7b
 8016568:	4620      	mov	r0, r4
 801656a:	f001 fc35 	bl	8017dd8 <strchr>
 801656e:	46a3      	mov	fp, r4
 8016570:	4605      	mov	r5, r0
 8016572:	e7b8      	b.n	80164e6 <rcl_expand_topic_name+0xda>
 8016574:	240b      	movs	r4, #11
 8016576:	4620      	mov	r0, r4
 8016578:	b00b      	add	sp, #44	@ 0x2c
 801657a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801657e:	f7f9 fee5 	bl	801034c <rcl_convert_rmw_ret_to_rcl_ret>
 8016582:	4604      	mov	r4, r0
 8016584:	e7f7      	b.n	8016576 <rcl_expand_topic_name+0x16a>
 8016586:	2467      	movs	r4, #103	@ 0x67
 8016588:	4620      	mov	r0, r4
 801658a:	b00b      	add	sp, #44	@ 0x2c
 801658c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016590:	24c9      	movs	r4, #201	@ 0xc9
 8016592:	e7f0      	b.n	8016576 <rcl_expand_topic_name+0x16a>
 8016594:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 8016598:	9806      	ldr	r0, [sp, #24]
 801659a:	1c69      	adds	r1, r5, #1
 801659c:	f7fc fb76 	bl	8012c8c <rcutils_string_map_getn>
 80165a0:	4681      	mov	r9, r0
 80165a2:	2800      	cmp	r0, #0
 80165a4:	d1bf      	bne.n	8016526 <rcl_expand_topic_name+0x11a>
 80165a6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80165a8:	aa16      	add	r2, sp, #88	@ 0x58
 80165aa:	6018      	str	r0, [r3, #0]
 80165ac:	ca07      	ldmia	r2, {r0, r1, r2}
 80165ae:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80165b2:	ab14      	add	r3, sp, #80	@ 0x50
 80165b4:	cb0c      	ldmia	r3, {r2, r3}
 80165b6:	4651      	mov	r1, sl
 80165b8:	4628      	mov	r0, r5
 80165ba:	f7f5 fb4d 	bl	800bc58 <rcutils_strndup>
 80165be:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80165c0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80165c2:	4798      	blx	r3
 80165c4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80165c6:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80165c8:	4658      	mov	r0, fp
 80165ca:	2469      	movs	r4, #105	@ 0x69
 80165cc:	4798      	blx	r3
 80165ce:	e7d2      	b.n	8016576 <rcl_expand_topic_name+0x16a>
 80165d0:	2800      	cmp	r0, #0
 80165d2:	d05b      	beq.n	801668c <rcl_expand_topic_name+0x280>
 80165d4:	46c1      	mov	r9, r8
 80165d6:	46a2      	mov	sl, r4
 80165d8:	e782      	b.n	80164e0 <rcl_expand_topic_name+0xd4>
 80165da:	46b1      	mov	r9, r6
 80165dc:	e7a3      	b.n	8016526 <rcl_expand_topic_name+0x11a>
 80165de:	2800      	cmp	r0, #0
 80165e0:	d1f8      	bne.n	80165d4 <rcl_expand_topic_name+0x1c8>
 80165e2:	4638      	mov	r0, r7
 80165e4:	f7e9 fe74 	bl	80002d0 <strlen>
 80165e8:	4a35      	ldr	r2, [pc, #212]	@ (80166c0 <rcl_expand_topic_name+0x2b4>)
 80165ea:	4b36      	ldr	r3, [pc, #216]	@ (80166c4 <rcl_expand_topic_name+0x2b8>)
 80165ec:	f8cd 8010 	str.w	r8, [sp, #16]
 80165f0:	2801      	cmp	r0, #1
 80165f2:	bf18      	it	ne
 80165f4:	4613      	movne	r3, r2
 80165f6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80165fa:	e9cd 1301 	strd	r1, r3, [sp, #4]
 80165fe:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8016600:	9703      	str	r7, [sp, #12]
 8016602:	9200      	str	r2, [sp, #0]
 8016604:	ab14      	add	r3, sp, #80	@ 0x50
 8016606:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016608:	f7f5 f9ea 	bl	800b9e0 <rcutils_format_string_limit>
 801660c:	4682      	mov	sl, r0
 801660e:	4653      	mov	r3, sl
 8016610:	b32b      	cbz	r3, 801665e <rcl_expand_topic_name+0x252>
 8016612:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016614:	f8c3 a000 	str.w	sl, [r3]
 8016618:	e7ad      	b.n	8016576 <rcl_expand_topic_name+0x16a>
 801661a:	f89a 3000 	ldrb.w	r3, [sl]
 801661e:	2b2f      	cmp	r3, #47	@ 0x2f
 8016620:	d0f7      	beq.n	8016612 <rcl_expand_topic_name+0x206>
 8016622:	4638      	mov	r0, r7
 8016624:	f7e9 fe54 	bl	80002d0 <strlen>
 8016628:	4a25      	ldr	r2, [pc, #148]	@ (80166c0 <rcl_expand_topic_name+0x2b4>)
 801662a:	4b26      	ldr	r3, [pc, #152]	@ (80166c4 <rcl_expand_topic_name+0x2b8>)
 801662c:	f8cd a010 	str.w	sl, [sp, #16]
 8016630:	2801      	cmp	r0, #1
 8016632:	bf18      	it	ne
 8016634:	4613      	movne	r3, r2
 8016636:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801663a:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801663e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8016640:	9703      	str	r7, [sp, #12]
 8016642:	9200      	str	r2, [sp, #0]
 8016644:	ab14      	add	r3, sp, #80	@ 0x50
 8016646:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016648:	f7f5 f9ca 	bl	800b9e0 <rcutils_format_string_limit>
 801664c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801664e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016650:	4605      	mov	r5, r0
 8016652:	4650      	mov	r0, sl
 8016654:	4798      	blx	r3
 8016656:	46aa      	mov	sl, r5
 8016658:	e7d9      	b.n	801660e <rcl_expand_topic_name+0x202>
 801665a:	24ca      	movs	r4, #202	@ 0xca
 801665c:	e78b      	b.n	8016576 <rcl_expand_topic_name+0x16a>
 801665e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016660:	2300      	movs	r3, #0
 8016662:	6013      	str	r3, [r2, #0]
 8016664:	240a      	movs	r4, #10
 8016666:	e786      	b.n	8016576 <rcl_expand_topic_name+0x16a>
 8016668:	465b      	mov	r3, fp
 801666a:	9c07      	ldr	r4, [sp, #28]
 801666c:	46da      	mov	sl, fp
 801666e:	2b00      	cmp	r3, #0
 8016670:	d1d3      	bne.n	801661a <rcl_expand_topic_name+0x20e>
 8016672:	f898 3000 	ldrb.w	r3, [r8]
 8016676:	2b2f      	cmp	r3, #47	@ 0x2f
 8016678:	d0cb      	beq.n	8016612 <rcl_expand_topic_name+0x206>
 801667a:	e7b2      	b.n	80165e2 <rcl_expand_topic_name+0x1d6>
 801667c:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 8016680:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016682:	6015      	str	r5, [r2, #0]
 8016684:	4658      	mov	r0, fp
 8016686:	4798      	blx	r3
 8016688:	240a      	movs	r4, #10
 801668a:	e774      	b.n	8016576 <rcl_expand_topic_name+0x16a>
 801668c:	ab17      	add	r3, sp, #92	@ 0x5c
 801668e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016692:	e88d 0003 	stmia.w	sp, {r0, r1}
 8016696:	ab14      	add	r3, sp, #80	@ 0x50
 8016698:	cb0e      	ldmia	r3, {r1, r2, r3}
 801669a:	4640      	mov	r0, r8
 801669c:	f7f5 faba 	bl	800bc14 <rcutils_strdup>
 80166a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80166a2:	2800      	cmp	r0, #0
 80166a4:	6018      	str	r0, [r3, #0]
 80166a6:	bf08      	it	eq
 80166a8:	240a      	moveq	r4, #10
 80166aa:	e764      	b.n	8016576 <rcl_expand_topic_name+0x16a>
 80166ac:	0801aad8 	.word	0x0801aad8
 80166b0:	0801a548 	.word	0x0801a548
 80166b4:	0801aae0 	.word	0x0801aae0
 80166b8:	0801aae8 	.word	0x0801aae8
 80166bc:	0801aaf0 	.word	0x0801aaf0
 80166c0:	08019fcc 	.word	0x08019fcc
 80166c4:	08019fc4 	.word	0x08019fc4

080166c8 <rcl_get_default_topic_name_substitutions>:
 80166c8:	2800      	cmp	r0, #0
 80166ca:	bf0c      	ite	eq
 80166cc:	200b      	moveq	r0, #11
 80166ce:	2000      	movne	r0, #0
 80166d0:	4770      	bx	lr
 80166d2:	bf00      	nop

080166d4 <rcl_validate_topic_name>:
 80166d4:	2800      	cmp	r0, #0
 80166d6:	d07a      	beq.n	80167ce <rcl_validate_topic_name+0xfa>
 80166d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80166dc:	460e      	mov	r6, r1
 80166de:	2900      	cmp	r1, #0
 80166e0:	d07c      	beq.n	80167dc <rcl_validate_topic_name+0x108>
 80166e2:	4617      	mov	r7, r2
 80166e4:	4605      	mov	r5, r0
 80166e6:	f7e9 fdf3 	bl	80002d0 <strlen>
 80166ea:	b1b0      	cbz	r0, 801671a <rcl_validate_topic_name+0x46>
 80166ec:	f895 9000 	ldrb.w	r9, [r5]
 80166f0:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8016874 <rcl_validate_topic_name+0x1a0>
 80166f4:	f81c 3009 	ldrb.w	r3, [ip, r9]
 80166f8:	f013 0304 	ands.w	r3, r3, #4
 80166fc:	d169      	bne.n	80167d2 <rcl_validate_topic_name+0xfe>
 80166fe:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 8016702:	f815 2008 	ldrb.w	r2, [r5, r8]
 8016706:	2a2f      	cmp	r2, #47	@ 0x2f
 8016708:	d10e      	bne.n	8016728 <rcl_validate_topic_name+0x54>
 801670a:	2202      	movs	r2, #2
 801670c:	6032      	str	r2, [r6, #0]
 801670e:	b36f      	cbz	r7, 801676c <rcl_validate_topic_name+0x98>
 8016710:	f8c7 8000 	str.w	r8, [r7]
 8016714:	4618      	mov	r0, r3
 8016716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801671a:	2301      	movs	r3, #1
 801671c:	6033      	str	r3, [r6, #0]
 801671e:	b32f      	cbz	r7, 801676c <rcl_validate_topic_name+0x98>
 8016720:	2000      	movs	r0, #0
 8016722:	6038      	str	r0, [r7, #0]
 8016724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016728:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 801672c:	461c      	mov	r4, r3
 801672e:	4619      	mov	r1, r3
 8016730:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8016734:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8016738:	f1be 0f09 	cmp.w	lr, #9
 801673c:	d919      	bls.n	8016772 <rcl_validate_topic_name+0x9e>
 801673e:	f022 0e20 	bic.w	lr, r2, #32
 8016742:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 8016746:	f1be 0f19 	cmp.w	lr, #25
 801674a:	d912      	bls.n	8016772 <rcl_validate_topic_name+0x9e>
 801674c:	2a5f      	cmp	r2, #95	@ 0x5f
 801674e:	d019      	beq.n	8016784 <rcl_validate_topic_name+0xb0>
 8016750:	2a2f      	cmp	r2, #47	@ 0x2f
 8016752:	d051      	beq.n	80167f8 <rcl_validate_topic_name+0x124>
 8016754:	2a7e      	cmp	r2, #126	@ 0x7e
 8016756:	d048      	beq.n	80167ea <rcl_validate_topic_name+0x116>
 8016758:	2a7b      	cmp	r2, #123	@ 0x7b
 801675a:	d054      	beq.n	8016806 <rcl_validate_topic_name+0x132>
 801675c:	2a7d      	cmp	r2, #125	@ 0x7d
 801675e:	d161      	bne.n	8016824 <rcl_validate_topic_name+0x150>
 8016760:	2c00      	cmp	r4, #0
 8016762:	d155      	bne.n	8016810 <rcl_validate_topic_name+0x13c>
 8016764:	2305      	movs	r3, #5
 8016766:	6033      	str	r3, [r6, #0]
 8016768:	b107      	cbz	r7, 801676c <rcl_validate_topic_name+0x98>
 801676a:	6039      	str	r1, [r7, #0]
 801676c:	2000      	movs	r0, #0
 801676e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016772:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8016776:	0752      	lsls	r2, r2, #29
 8016778:	d504      	bpl.n	8016784 <rcl_validate_topic_name+0xb0>
 801677a:	b11c      	cbz	r4, 8016784 <rcl_validate_topic_name+0xb0>
 801677c:	b111      	cbz	r1, 8016784 <rcl_validate_topic_name+0xb0>
 801677e:	1e4a      	subs	r2, r1, #1
 8016780:	429a      	cmp	r2, r3
 8016782:	d02d      	beq.n	80167e0 <rcl_validate_topic_name+0x10c>
 8016784:	3101      	adds	r1, #1
 8016786:	4288      	cmp	r0, r1
 8016788:	d1d2      	bne.n	8016730 <rcl_validate_topic_name+0x5c>
 801678a:	2c00      	cmp	r4, #0
 801678c:	d145      	bne.n	801681a <rcl_validate_topic_name+0x146>
 801678e:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 8016792:	d04f      	beq.n	8016834 <rcl_validate_topic_name+0x160>
 8016794:	4620      	mov	r0, r4
 8016796:	2301      	movs	r3, #1
 8016798:	e006      	b.n	80167a8 <rcl_validate_topic_name+0xd4>
 801679a:	428b      	cmp	r3, r1
 801679c:	f105 0501 	add.w	r5, r5, #1
 80167a0:	f103 0201 	add.w	r2, r3, #1
 80167a4:	d236      	bcs.n	8016814 <rcl_validate_topic_name+0x140>
 80167a6:	4613      	mov	r3, r2
 80167a8:	4580      	cmp	r8, r0
 80167aa:	f100 0001 	add.w	r0, r0, #1
 80167ae:	d0f4      	beq.n	801679a <rcl_validate_topic_name+0xc6>
 80167b0:	782a      	ldrb	r2, [r5, #0]
 80167b2:	2a2f      	cmp	r2, #47	@ 0x2f
 80167b4:	d1f1      	bne.n	801679a <rcl_validate_topic_name+0xc6>
 80167b6:	786a      	ldrb	r2, [r5, #1]
 80167b8:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80167bc:	0754      	lsls	r4, r2, #29
 80167be:	d5ec      	bpl.n	801679a <rcl_validate_topic_name+0xc6>
 80167c0:	2204      	movs	r2, #4
 80167c2:	6032      	str	r2, [r6, #0]
 80167c4:	2f00      	cmp	r7, #0
 80167c6:	d0d1      	beq.n	801676c <rcl_validate_topic_name+0x98>
 80167c8:	603b      	str	r3, [r7, #0]
 80167ca:	2000      	movs	r0, #0
 80167cc:	e7aa      	b.n	8016724 <rcl_validate_topic_name+0x50>
 80167ce:	200b      	movs	r0, #11
 80167d0:	4770      	bx	lr
 80167d2:	2304      	movs	r3, #4
 80167d4:	6033      	str	r3, [r6, #0]
 80167d6:	2f00      	cmp	r7, #0
 80167d8:	d1a2      	bne.n	8016720 <rcl_validate_topic_name+0x4c>
 80167da:	e7c7      	b.n	801676c <rcl_validate_topic_name+0x98>
 80167dc:	200b      	movs	r0, #11
 80167de:	e7a1      	b.n	8016724 <rcl_validate_topic_name+0x50>
 80167e0:	2309      	movs	r3, #9
 80167e2:	6033      	str	r3, [r6, #0]
 80167e4:	2f00      	cmp	r7, #0
 80167e6:	d1c0      	bne.n	801676a <rcl_validate_topic_name+0x96>
 80167e8:	e7c0      	b.n	801676c <rcl_validate_topic_name+0x98>
 80167ea:	2900      	cmp	r1, #0
 80167ec:	d0ca      	beq.n	8016784 <rcl_validate_topic_name+0xb0>
 80167ee:	2306      	movs	r3, #6
 80167f0:	6033      	str	r3, [r6, #0]
 80167f2:	2f00      	cmp	r7, #0
 80167f4:	d1b9      	bne.n	801676a <rcl_validate_topic_name+0x96>
 80167f6:	e7b9      	b.n	801676c <rcl_validate_topic_name+0x98>
 80167f8:	2c00      	cmp	r4, #0
 80167fa:	d0c3      	beq.n	8016784 <rcl_validate_topic_name+0xb0>
 80167fc:	2308      	movs	r3, #8
 80167fe:	6033      	str	r3, [r6, #0]
 8016800:	2f00      	cmp	r7, #0
 8016802:	d1b2      	bne.n	801676a <rcl_validate_topic_name+0x96>
 8016804:	e7b2      	b.n	801676c <rcl_validate_topic_name+0x98>
 8016806:	2c00      	cmp	r4, #0
 8016808:	d1f8      	bne.n	80167fc <rcl_validate_topic_name+0x128>
 801680a:	460b      	mov	r3, r1
 801680c:	2401      	movs	r4, #1
 801680e:	e7b9      	b.n	8016784 <rcl_validate_topic_name+0xb0>
 8016810:	2400      	movs	r4, #0
 8016812:	e7b7      	b.n	8016784 <rcl_validate_topic_name+0xb0>
 8016814:	2000      	movs	r0, #0
 8016816:	6030      	str	r0, [r6, #0]
 8016818:	e784      	b.n	8016724 <rcl_validate_topic_name+0x50>
 801681a:	2205      	movs	r2, #5
 801681c:	6032      	str	r2, [r6, #0]
 801681e:	2f00      	cmp	r7, #0
 8016820:	d1d2      	bne.n	80167c8 <rcl_validate_topic_name+0xf4>
 8016822:	e7a3      	b.n	801676c <rcl_validate_topic_name+0x98>
 8016824:	2c00      	cmp	r4, #0
 8016826:	bf14      	ite	ne
 8016828:	2308      	movne	r3, #8
 801682a:	2303      	moveq	r3, #3
 801682c:	6033      	str	r3, [r6, #0]
 801682e:	2f00      	cmp	r7, #0
 8016830:	d19b      	bne.n	801676a <rcl_validate_topic_name+0x96>
 8016832:	e79b      	b.n	801676c <rcl_validate_topic_name+0x98>
 8016834:	2301      	movs	r3, #1
 8016836:	e00a      	b.n	801684e <rcl_validate_topic_name+0x17a>
 8016838:	2c01      	cmp	r4, #1
 801683a:	d013      	beq.n	8016864 <rcl_validate_topic_name+0x190>
 801683c:	4299      	cmp	r1, r3
 801683e:	f104 0401 	add.w	r4, r4, #1
 8016842:	f105 0501 	add.w	r5, r5, #1
 8016846:	f103 0201 	add.w	r2, r3, #1
 801684a:	d9e3      	bls.n	8016814 <rcl_validate_topic_name+0x140>
 801684c:	4613      	mov	r3, r2
 801684e:	45a0      	cmp	r8, r4
 8016850:	d0f4      	beq.n	801683c <rcl_validate_topic_name+0x168>
 8016852:	782a      	ldrb	r2, [r5, #0]
 8016854:	2a2f      	cmp	r2, #47	@ 0x2f
 8016856:	d1ef      	bne.n	8016838 <rcl_validate_topic_name+0x164>
 8016858:	786a      	ldrb	r2, [r5, #1]
 801685a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801685e:	0752      	lsls	r2, r2, #29
 8016860:	d5ec      	bpl.n	801683c <rcl_validate_topic_name+0x168>
 8016862:	e7ad      	b.n	80167c0 <rcl_validate_topic_name+0xec>
 8016864:	2307      	movs	r3, #7
 8016866:	6033      	str	r3, [r6, #0]
 8016868:	2f00      	cmp	r7, #0
 801686a:	f43f af7f 	beq.w	801676c <rcl_validate_topic_name+0x98>
 801686e:	603c      	str	r4, [r7, #0]
 8016870:	2000      	movs	r0, #0
 8016872:	e757      	b.n	8016724 <rcl_validate_topic_name+0x50>
 8016874:	0801ac5e 	.word	0x0801ac5e

08016878 <on_status>:
 8016878:	b082      	sub	sp, #8
 801687a:	b002      	add	sp, #8
 801687c:	4770      	bx	lr
 801687e:	bf00      	nop

08016880 <on_topic>:
 8016880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016884:	4a22      	ldr	r2, [pc, #136]	@ (8016910 <on_topic+0x90>)
 8016886:	b094      	sub	sp, #80	@ 0x50
 8016888:	6812      	ldr	r2, [r2, #0]
 801688a:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 801688c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8016890:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 8016894:	b3c2      	cbz	r2, 8016908 <on_topic+0x88>
 8016896:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 801689a:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 801689e:	e001      	b.n	80168a4 <on_topic+0x24>
 80168a0:	6852      	ldr	r2, [r2, #4]
 80168a2:	b38a      	cbz	r2, 8016908 <on_topic+0x88>
 80168a4:	6894      	ldr	r4, [r2, #8]
 80168a6:	8aa3      	ldrh	r3, [r4, #20]
 80168a8:	428b      	cmp	r3, r1
 80168aa:	d1f9      	bne.n	80168a0 <on_topic+0x20>
 80168ac:	7da3      	ldrb	r3, [r4, #22]
 80168ae:	4283      	cmp	r3, r0
 80168b0:	d1f6      	bne.n	80168a0 <on_topic+0x20>
 80168b2:	2248      	movs	r2, #72	@ 0x48
 80168b4:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80168b8:	4668      	mov	r0, sp
 80168ba:	f001 fba8 	bl	801800e <memcpy>
 80168be:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 80168c2:	cb0c      	ldmia	r3, {r2, r3}
 80168c4:	4620      	mov	r0, r4
 80168c6:	f7f6 f9c3 	bl	800cc50 <rmw_uxrce_get_static_input_buffer_for_entity>
 80168ca:	4607      	mov	r7, r0
 80168cc:	b1e0      	cbz	r0, 8016908 <on_topic+0x88>
 80168ce:	f8d0 8008 	ldr.w	r8, [r0, #8]
 80168d2:	4632      	mov	r2, r6
 80168d4:	4628      	mov	r0, r5
 80168d6:	f108 0110 	add.w	r1, r8, #16
 80168da:	f7fd faa5 	bl	8013e28 <ucdr_deserialize_array_uint8_t>
 80168de:	b930      	cbnz	r0, 80168ee <on_topic+0x6e>
 80168e0:	480c      	ldr	r0, [pc, #48]	@ (8016914 <on_topic+0x94>)
 80168e2:	4639      	mov	r1, r7
 80168e4:	b014      	add	sp, #80	@ 0x50
 80168e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80168ea:	f7fc bb2b 	b.w	8012f44 <put_memory>
 80168ee:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 80168f2:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 80168f6:	f7fd f97d 	bl	8013bf4 <rmw_uros_epoch_nanos>
 80168fa:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 80168fe:	2305      	movs	r3, #5
 8016900:	e942 0102 	strd	r0, r1, [r2, #-8]
 8016904:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8016908:	b014      	add	sp, #80	@ 0x50
 801690a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801690e:	bf00      	nop
 8016910:	200111fc 	.word	0x200111fc
 8016914:	200111ec 	.word	0x200111ec

08016918 <on_request>:
 8016918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801691c:	4823      	ldr	r0, [pc, #140]	@ (80169ac <on_request+0x94>)
 801691e:	b094      	sub	sp, #80	@ 0x50
 8016920:	6800      	ldr	r0, [r0, #0]
 8016922:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8016924:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8016928:	9113      	str	r1, [sp, #76]	@ 0x4c
 801692a:	2800      	cmp	r0, #0
 801692c:	d03b      	beq.n	80169a6 <on_request+0x8e>
 801692e:	461d      	mov	r5, r3
 8016930:	e001      	b.n	8016936 <on_request+0x1e>
 8016932:	6840      	ldr	r0, [r0, #4]
 8016934:	b3b8      	cbz	r0, 80169a6 <on_request+0x8e>
 8016936:	6884      	ldr	r4, [r0, #8]
 8016938:	8b21      	ldrh	r1, [r4, #24]
 801693a:	4291      	cmp	r1, r2
 801693c:	d1f9      	bne.n	8016932 <on_request+0x1a>
 801693e:	2248      	movs	r2, #72	@ 0x48
 8016940:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8016944:	4668      	mov	r0, sp
 8016946:	f001 fb62 	bl	801800e <memcpy>
 801694a:	f104 0320 	add.w	r3, r4, #32
 801694e:	cb0c      	ldmia	r3, {r2, r3}
 8016950:	4620      	mov	r0, r4
 8016952:	f7f6 f97d 	bl	800cc50 <rmw_uxrce_get_static_input_buffer_for_entity>
 8016956:	4680      	mov	r8, r0
 8016958:	b328      	cbz	r0, 80169a6 <on_request+0x8e>
 801695a:	4638      	mov	r0, r7
 801695c:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8016960:	4632      	mov	r2, r6
 8016962:	f107 0110 	add.w	r1, r7, #16
 8016966:	f7fd fa5f 	bl	8013e28 <ucdr_deserialize_array_uint8_t>
 801696a:	b930      	cbnz	r0, 801697a <on_request+0x62>
 801696c:	4810      	ldr	r0, [pc, #64]	@ (80169b0 <on_request+0x98>)
 801696e:	4641      	mov	r1, r8
 8016970:	b014      	add	sp, #80	@ 0x50
 8016972:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016976:	f7fc bae5 	b.w	8012f44 <put_memory>
 801697a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801697c:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 8016980:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8016984:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8016988:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801698c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8016990:	e88c 0003 	stmia.w	ip, {r0, r1}
 8016994:	f7fd f92e 	bl	8013bf4 <rmw_uros_epoch_nanos>
 8016998:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 801699c:	2303      	movs	r3, #3
 801699e:	e942 0102 	strd	r0, r1, [r2, #-8]
 80169a2:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 80169a6:	b014      	add	sp, #80	@ 0x50
 80169a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80169ac:	200111cc 	.word	0x200111cc
 80169b0:	200111ec 	.word	0x200111ec

080169b4 <on_reply>:
 80169b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80169b8:	4821      	ldr	r0, [pc, #132]	@ (8016a40 <on_reply+0x8c>)
 80169ba:	b094      	sub	sp, #80	@ 0x50
 80169bc:	6800      	ldr	r0, [r0, #0]
 80169be:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 80169c0:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 80169c4:	9113      	str	r1, [sp, #76]	@ 0x4c
 80169c6:	b3b8      	cbz	r0, 8016a38 <on_reply+0x84>
 80169c8:	461d      	mov	r5, r3
 80169ca:	e001      	b.n	80169d0 <on_reply+0x1c>
 80169cc:	6840      	ldr	r0, [r0, #4]
 80169ce:	b398      	cbz	r0, 8016a38 <on_reply+0x84>
 80169d0:	6884      	ldr	r4, [r0, #8]
 80169d2:	8b21      	ldrh	r1, [r4, #24]
 80169d4:	4291      	cmp	r1, r2
 80169d6:	d1f9      	bne.n	80169cc <on_reply+0x18>
 80169d8:	2248      	movs	r2, #72	@ 0x48
 80169da:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 80169de:	4668      	mov	r0, sp
 80169e0:	f001 fb15 	bl	801800e <memcpy>
 80169e4:	f104 0320 	add.w	r3, r4, #32
 80169e8:	cb0c      	ldmia	r3, {r2, r3}
 80169ea:	4620      	mov	r0, r4
 80169ec:	f7f6 f930 	bl	800cc50 <rmw_uxrce_get_static_input_buffer_for_entity>
 80169f0:	4680      	mov	r8, r0
 80169f2:	b308      	cbz	r0, 8016a38 <on_reply+0x84>
 80169f4:	4638      	mov	r0, r7
 80169f6:	f8d8 7008 	ldr.w	r7, [r8, #8]
 80169fa:	4632      	mov	r2, r6
 80169fc:	f107 0110 	add.w	r1, r7, #16
 8016a00:	f7fd fa12 	bl	8013e28 <ucdr_deserialize_array_uint8_t>
 8016a04:	b930      	cbnz	r0, 8016a14 <on_reply+0x60>
 8016a06:	480f      	ldr	r0, [pc, #60]	@ (8016a44 <on_reply+0x90>)
 8016a08:	4641      	mov	r1, r8
 8016a0a:	b014      	add	sp, #80	@ 0x50
 8016a0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016a10:	f7fc ba98 	b.w	8012f44 <put_memory>
 8016a14:	2200      	movs	r2, #0
 8016a16:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 8016a1a:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8016a1e:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8016a22:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 8016a26:	f7fd f8e5 	bl	8013bf4 <rmw_uros_epoch_nanos>
 8016a2a:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8016a2e:	2304      	movs	r3, #4
 8016a30:	e942 0102 	strd	r0, r1, [r2, #-8]
 8016a34:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8016a38:	b014      	add	sp, #80	@ 0x50
 8016a3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016a3e:	bf00      	nop
 8016a40:	2000c8dc 	.word	0x2000c8dc
 8016a44:	200111ec 	.word	0x200111ec

08016a48 <rosidl_runtime_c__String__init>:
 8016a48:	b510      	push	{r4, lr}
 8016a4a:	4604      	mov	r4, r0
 8016a4c:	b086      	sub	sp, #24
 8016a4e:	b170      	cbz	r0, 8016a6e <rosidl_runtime_c__String__init+0x26>
 8016a50:	a801      	add	r0, sp, #4
 8016a52:	f7f4 ff5f 	bl	800b914 <rcutils_get_default_allocator>
 8016a56:	9b01      	ldr	r3, [sp, #4]
 8016a58:	9905      	ldr	r1, [sp, #20]
 8016a5a:	2001      	movs	r0, #1
 8016a5c:	4798      	blx	r3
 8016a5e:	6020      	str	r0, [r4, #0]
 8016a60:	b128      	cbz	r0, 8016a6e <rosidl_runtime_c__String__init+0x26>
 8016a62:	2100      	movs	r1, #0
 8016a64:	2201      	movs	r2, #1
 8016a66:	7001      	strb	r1, [r0, #0]
 8016a68:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8016a6c:	4610      	mov	r0, r2
 8016a6e:	b006      	add	sp, #24
 8016a70:	bd10      	pop	{r4, pc}
 8016a72:	bf00      	nop

08016a74 <rosidl_runtime_c__String__fini>:
 8016a74:	b320      	cbz	r0, 8016ac0 <rosidl_runtime_c__String__fini+0x4c>
 8016a76:	b510      	push	{r4, lr}
 8016a78:	6803      	ldr	r3, [r0, #0]
 8016a7a:	b086      	sub	sp, #24
 8016a7c:	4604      	mov	r4, r0
 8016a7e:	b173      	cbz	r3, 8016a9e <rosidl_runtime_c__String__fini+0x2a>
 8016a80:	6883      	ldr	r3, [r0, #8]
 8016a82:	b1f3      	cbz	r3, 8016ac2 <rosidl_runtime_c__String__fini+0x4e>
 8016a84:	a801      	add	r0, sp, #4
 8016a86:	f7f4 ff45 	bl	800b914 <rcutils_get_default_allocator>
 8016a8a:	9b02      	ldr	r3, [sp, #8]
 8016a8c:	9905      	ldr	r1, [sp, #20]
 8016a8e:	6820      	ldr	r0, [r4, #0]
 8016a90:	4798      	blx	r3
 8016a92:	2300      	movs	r3, #0
 8016a94:	e9c4 3300 	strd	r3, r3, [r4]
 8016a98:	60a3      	str	r3, [r4, #8]
 8016a9a:	b006      	add	sp, #24
 8016a9c:	bd10      	pop	{r4, pc}
 8016a9e:	6843      	ldr	r3, [r0, #4]
 8016aa0:	b9db      	cbnz	r3, 8016ada <rosidl_runtime_c__String__fini+0x66>
 8016aa2:	6883      	ldr	r3, [r0, #8]
 8016aa4:	2b00      	cmp	r3, #0
 8016aa6:	d0f8      	beq.n	8016a9a <rosidl_runtime_c__String__fini+0x26>
 8016aa8:	4b12      	ldr	r3, [pc, #72]	@ (8016af4 <rosidl_runtime_c__String__fini+0x80>)
 8016aaa:	4813      	ldr	r0, [pc, #76]	@ (8016af8 <rosidl_runtime_c__String__fini+0x84>)
 8016aac:	681b      	ldr	r3, [r3, #0]
 8016aae:	2251      	movs	r2, #81	@ 0x51
 8016ab0:	68db      	ldr	r3, [r3, #12]
 8016ab2:	2101      	movs	r1, #1
 8016ab4:	f000 ffda 	bl	8017a6c <fwrite>
 8016ab8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016abc:	f000 f83e 	bl	8016b3c <exit>
 8016ac0:	4770      	bx	lr
 8016ac2:	4b0c      	ldr	r3, [pc, #48]	@ (8016af4 <rosidl_runtime_c__String__fini+0x80>)
 8016ac4:	480d      	ldr	r0, [pc, #52]	@ (8016afc <rosidl_runtime_c__String__fini+0x88>)
 8016ac6:	681b      	ldr	r3, [r3, #0]
 8016ac8:	224c      	movs	r2, #76	@ 0x4c
 8016aca:	68db      	ldr	r3, [r3, #12]
 8016acc:	2101      	movs	r1, #1
 8016ace:	f000 ffcd 	bl	8017a6c <fwrite>
 8016ad2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016ad6:	f000 f831 	bl	8016b3c <exit>
 8016ada:	4b06      	ldr	r3, [pc, #24]	@ (8016af4 <rosidl_runtime_c__String__fini+0x80>)
 8016adc:	4808      	ldr	r0, [pc, #32]	@ (8016b00 <rosidl_runtime_c__String__fini+0x8c>)
 8016ade:	681b      	ldr	r3, [r3, #0]
 8016ae0:	224e      	movs	r2, #78	@ 0x4e
 8016ae2:	68db      	ldr	r3, [r3, #12]
 8016ae4:	2101      	movs	r1, #1
 8016ae6:	f000 ffc1 	bl	8017a6c <fwrite>
 8016aea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016aee:	f000 f825 	bl	8016b3c <exit>
 8016af2:	bf00      	nop
 8016af4:	200000c8 	.word	0x200000c8
 8016af8:	0801ab9c 	.word	0x0801ab9c
 8016afc:	0801aafc 	.word	0x0801aafc
 8016b00:	0801ab4c 	.word	0x0801ab4c

08016b04 <calloc>:
 8016b04:	4b02      	ldr	r3, [pc, #8]	@ (8016b10 <calloc+0xc>)
 8016b06:	460a      	mov	r2, r1
 8016b08:	4601      	mov	r1, r0
 8016b0a:	6818      	ldr	r0, [r3, #0]
 8016b0c:	f000 b802 	b.w	8016b14 <_calloc_r>
 8016b10:	200000c8 	.word	0x200000c8

08016b14 <_calloc_r>:
 8016b14:	b570      	push	{r4, r5, r6, lr}
 8016b16:	fba1 5402 	umull	r5, r4, r1, r2
 8016b1a:	b93c      	cbnz	r4, 8016b2c <_calloc_r+0x18>
 8016b1c:	4629      	mov	r1, r5
 8016b1e:	f000 f899 	bl	8016c54 <_malloc_r>
 8016b22:	4606      	mov	r6, r0
 8016b24:	b928      	cbnz	r0, 8016b32 <_calloc_r+0x1e>
 8016b26:	2600      	movs	r6, #0
 8016b28:	4630      	mov	r0, r6
 8016b2a:	bd70      	pop	{r4, r5, r6, pc}
 8016b2c:	220c      	movs	r2, #12
 8016b2e:	6002      	str	r2, [r0, #0]
 8016b30:	e7f9      	b.n	8016b26 <_calloc_r+0x12>
 8016b32:	462a      	mov	r2, r5
 8016b34:	4621      	mov	r1, r4
 8016b36:	f001 f947 	bl	8017dc8 <memset>
 8016b3a:	e7f5      	b.n	8016b28 <_calloc_r+0x14>

08016b3c <exit>:
 8016b3c:	b508      	push	{r3, lr}
 8016b3e:	4b06      	ldr	r3, [pc, #24]	@ (8016b58 <exit+0x1c>)
 8016b40:	4604      	mov	r4, r0
 8016b42:	b113      	cbz	r3, 8016b4a <exit+0xe>
 8016b44:	2100      	movs	r1, #0
 8016b46:	f3af 8000 	nop.w
 8016b4a:	4b04      	ldr	r3, [pc, #16]	@ (8016b5c <exit+0x20>)
 8016b4c:	681b      	ldr	r3, [r3, #0]
 8016b4e:	b103      	cbz	r3, 8016b52 <exit+0x16>
 8016b50:	4798      	blx	r3
 8016b52:	4620      	mov	r0, r4
 8016b54:	f7ec f8ae 	bl	8002cb4 <_exit>
 8016b58:	00000000 	.word	0x00000000
 8016b5c:	20011444 	.word	0x20011444

08016b60 <getenv>:
 8016b60:	b507      	push	{r0, r1, r2, lr}
 8016b62:	4b04      	ldr	r3, [pc, #16]	@ (8016b74 <getenv+0x14>)
 8016b64:	4601      	mov	r1, r0
 8016b66:	aa01      	add	r2, sp, #4
 8016b68:	6818      	ldr	r0, [r3, #0]
 8016b6a:	f000 f805 	bl	8016b78 <_findenv_r>
 8016b6e:	b003      	add	sp, #12
 8016b70:	f85d fb04 	ldr.w	pc, [sp], #4
 8016b74:	200000c8 	.word	0x200000c8

08016b78 <_findenv_r>:
 8016b78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b7c:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8016bec <_findenv_r+0x74>
 8016b80:	4606      	mov	r6, r0
 8016b82:	4689      	mov	r9, r1
 8016b84:	4617      	mov	r7, r2
 8016b86:	f002 f8bb 	bl	8018d00 <__env_lock>
 8016b8a:	f8da 4000 	ldr.w	r4, [sl]
 8016b8e:	b134      	cbz	r4, 8016b9e <_findenv_r+0x26>
 8016b90:	464b      	mov	r3, r9
 8016b92:	4698      	mov	r8, r3
 8016b94:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016b98:	b13a      	cbz	r2, 8016baa <_findenv_r+0x32>
 8016b9a:	2a3d      	cmp	r2, #61	@ 0x3d
 8016b9c:	d1f9      	bne.n	8016b92 <_findenv_r+0x1a>
 8016b9e:	4630      	mov	r0, r6
 8016ba0:	f002 f8b4 	bl	8018d0c <__env_unlock>
 8016ba4:	2000      	movs	r0, #0
 8016ba6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016baa:	eba8 0809 	sub.w	r8, r8, r9
 8016bae:	46a3      	mov	fp, r4
 8016bb0:	f854 0b04 	ldr.w	r0, [r4], #4
 8016bb4:	2800      	cmp	r0, #0
 8016bb6:	d0f2      	beq.n	8016b9e <_findenv_r+0x26>
 8016bb8:	4642      	mov	r2, r8
 8016bba:	4649      	mov	r1, r9
 8016bbc:	f001 f919 	bl	8017df2 <strncmp>
 8016bc0:	2800      	cmp	r0, #0
 8016bc2:	d1f4      	bne.n	8016bae <_findenv_r+0x36>
 8016bc4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8016bc8:	eb03 0508 	add.w	r5, r3, r8
 8016bcc:	f813 3008 	ldrb.w	r3, [r3, r8]
 8016bd0:	2b3d      	cmp	r3, #61	@ 0x3d
 8016bd2:	d1ec      	bne.n	8016bae <_findenv_r+0x36>
 8016bd4:	f8da 3000 	ldr.w	r3, [sl]
 8016bd8:	ebab 0303 	sub.w	r3, fp, r3
 8016bdc:	109b      	asrs	r3, r3, #2
 8016bde:	4630      	mov	r0, r6
 8016be0:	603b      	str	r3, [r7, #0]
 8016be2:	f002 f893 	bl	8018d0c <__env_unlock>
 8016be6:	1c68      	adds	r0, r5, #1
 8016be8:	e7dd      	b.n	8016ba6 <_findenv_r+0x2e>
 8016bea:	bf00      	nop
 8016bec:	20000000 	.word	0x20000000

08016bf0 <malloc>:
 8016bf0:	4b02      	ldr	r3, [pc, #8]	@ (8016bfc <malloc+0xc>)
 8016bf2:	4601      	mov	r1, r0
 8016bf4:	6818      	ldr	r0, [r3, #0]
 8016bf6:	f000 b82d 	b.w	8016c54 <_malloc_r>
 8016bfa:	bf00      	nop
 8016bfc:	200000c8 	.word	0x200000c8

08016c00 <free>:
 8016c00:	4b02      	ldr	r3, [pc, #8]	@ (8016c0c <free+0xc>)
 8016c02:	4601      	mov	r1, r0
 8016c04:	6818      	ldr	r0, [r3, #0]
 8016c06:	f002 b887 	b.w	8018d18 <_free_r>
 8016c0a:	bf00      	nop
 8016c0c:	200000c8 	.word	0x200000c8

08016c10 <sbrk_aligned>:
 8016c10:	b570      	push	{r4, r5, r6, lr}
 8016c12:	4e0f      	ldr	r6, [pc, #60]	@ (8016c50 <sbrk_aligned+0x40>)
 8016c14:	460c      	mov	r4, r1
 8016c16:	6831      	ldr	r1, [r6, #0]
 8016c18:	4605      	mov	r5, r0
 8016c1a:	b911      	cbnz	r1, 8016c22 <sbrk_aligned+0x12>
 8016c1c:	f001 f9a0 	bl	8017f60 <_sbrk_r>
 8016c20:	6030      	str	r0, [r6, #0]
 8016c22:	4621      	mov	r1, r4
 8016c24:	4628      	mov	r0, r5
 8016c26:	f001 f99b 	bl	8017f60 <_sbrk_r>
 8016c2a:	1c43      	adds	r3, r0, #1
 8016c2c:	d103      	bne.n	8016c36 <sbrk_aligned+0x26>
 8016c2e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8016c32:	4620      	mov	r0, r4
 8016c34:	bd70      	pop	{r4, r5, r6, pc}
 8016c36:	1cc4      	adds	r4, r0, #3
 8016c38:	f024 0403 	bic.w	r4, r4, #3
 8016c3c:	42a0      	cmp	r0, r4
 8016c3e:	d0f8      	beq.n	8016c32 <sbrk_aligned+0x22>
 8016c40:	1a21      	subs	r1, r4, r0
 8016c42:	4628      	mov	r0, r5
 8016c44:	f001 f98c 	bl	8017f60 <_sbrk_r>
 8016c48:	3001      	adds	r0, #1
 8016c4a:	d1f2      	bne.n	8016c32 <sbrk_aligned+0x22>
 8016c4c:	e7ef      	b.n	8016c2e <sbrk_aligned+0x1e>
 8016c4e:	bf00      	nop
 8016c50:	20011304 	.word	0x20011304

08016c54 <_malloc_r>:
 8016c54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016c58:	1ccd      	adds	r5, r1, #3
 8016c5a:	f025 0503 	bic.w	r5, r5, #3
 8016c5e:	3508      	adds	r5, #8
 8016c60:	2d0c      	cmp	r5, #12
 8016c62:	bf38      	it	cc
 8016c64:	250c      	movcc	r5, #12
 8016c66:	2d00      	cmp	r5, #0
 8016c68:	4606      	mov	r6, r0
 8016c6a:	db01      	blt.n	8016c70 <_malloc_r+0x1c>
 8016c6c:	42a9      	cmp	r1, r5
 8016c6e:	d904      	bls.n	8016c7a <_malloc_r+0x26>
 8016c70:	230c      	movs	r3, #12
 8016c72:	6033      	str	r3, [r6, #0]
 8016c74:	2000      	movs	r0, #0
 8016c76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016c7a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8016d50 <_malloc_r+0xfc>
 8016c7e:	f000 f869 	bl	8016d54 <__malloc_lock>
 8016c82:	f8d8 3000 	ldr.w	r3, [r8]
 8016c86:	461c      	mov	r4, r3
 8016c88:	bb44      	cbnz	r4, 8016cdc <_malloc_r+0x88>
 8016c8a:	4629      	mov	r1, r5
 8016c8c:	4630      	mov	r0, r6
 8016c8e:	f7ff ffbf 	bl	8016c10 <sbrk_aligned>
 8016c92:	1c43      	adds	r3, r0, #1
 8016c94:	4604      	mov	r4, r0
 8016c96:	d158      	bne.n	8016d4a <_malloc_r+0xf6>
 8016c98:	f8d8 4000 	ldr.w	r4, [r8]
 8016c9c:	4627      	mov	r7, r4
 8016c9e:	2f00      	cmp	r7, #0
 8016ca0:	d143      	bne.n	8016d2a <_malloc_r+0xd6>
 8016ca2:	2c00      	cmp	r4, #0
 8016ca4:	d04b      	beq.n	8016d3e <_malloc_r+0xea>
 8016ca6:	6823      	ldr	r3, [r4, #0]
 8016ca8:	4639      	mov	r1, r7
 8016caa:	4630      	mov	r0, r6
 8016cac:	eb04 0903 	add.w	r9, r4, r3
 8016cb0:	f001 f956 	bl	8017f60 <_sbrk_r>
 8016cb4:	4581      	cmp	r9, r0
 8016cb6:	d142      	bne.n	8016d3e <_malloc_r+0xea>
 8016cb8:	6821      	ldr	r1, [r4, #0]
 8016cba:	1a6d      	subs	r5, r5, r1
 8016cbc:	4629      	mov	r1, r5
 8016cbe:	4630      	mov	r0, r6
 8016cc0:	f7ff ffa6 	bl	8016c10 <sbrk_aligned>
 8016cc4:	3001      	adds	r0, #1
 8016cc6:	d03a      	beq.n	8016d3e <_malloc_r+0xea>
 8016cc8:	6823      	ldr	r3, [r4, #0]
 8016cca:	442b      	add	r3, r5
 8016ccc:	6023      	str	r3, [r4, #0]
 8016cce:	f8d8 3000 	ldr.w	r3, [r8]
 8016cd2:	685a      	ldr	r2, [r3, #4]
 8016cd4:	bb62      	cbnz	r2, 8016d30 <_malloc_r+0xdc>
 8016cd6:	f8c8 7000 	str.w	r7, [r8]
 8016cda:	e00f      	b.n	8016cfc <_malloc_r+0xa8>
 8016cdc:	6822      	ldr	r2, [r4, #0]
 8016cde:	1b52      	subs	r2, r2, r5
 8016ce0:	d420      	bmi.n	8016d24 <_malloc_r+0xd0>
 8016ce2:	2a0b      	cmp	r2, #11
 8016ce4:	d917      	bls.n	8016d16 <_malloc_r+0xc2>
 8016ce6:	1961      	adds	r1, r4, r5
 8016ce8:	42a3      	cmp	r3, r4
 8016cea:	6025      	str	r5, [r4, #0]
 8016cec:	bf18      	it	ne
 8016cee:	6059      	strne	r1, [r3, #4]
 8016cf0:	6863      	ldr	r3, [r4, #4]
 8016cf2:	bf08      	it	eq
 8016cf4:	f8c8 1000 	streq.w	r1, [r8]
 8016cf8:	5162      	str	r2, [r4, r5]
 8016cfa:	604b      	str	r3, [r1, #4]
 8016cfc:	4630      	mov	r0, r6
 8016cfe:	f000 f82f 	bl	8016d60 <__malloc_unlock>
 8016d02:	f104 000b 	add.w	r0, r4, #11
 8016d06:	1d23      	adds	r3, r4, #4
 8016d08:	f020 0007 	bic.w	r0, r0, #7
 8016d0c:	1ac2      	subs	r2, r0, r3
 8016d0e:	bf1c      	itt	ne
 8016d10:	1a1b      	subne	r3, r3, r0
 8016d12:	50a3      	strne	r3, [r4, r2]
 8016d14:	e7af      	b.n	8016c76 <_malloc_r+0x22>
 8016d16:	6862      	ldr	r2, [r4, #4]
 8016d18:	42a3      	cmp	r3, r4
 8016d1a:	bf0c      	ite	eq
 8016d1c:	f8c8 2000 	streq.w	r2, [r8]
 8016d20:	605a      	strne	r2, [r3, #4]
 8016d22:	e7eb      	b.n	8016cfc <_malloc_r+0xa8>
 8016d24:	4623      	mov	r3, r4
 8016d26:	6864      	ldr	r4, [r4, #4]
 8016d28:	e7ae      	b.n	8016c88 <_malloc_r+0x34>
 8016d2a:	463c      	mov	r4, r7
 8016d2c:	687f      	ldr	r7, [r7, #4]
 8016d2e:	e7b6      	b.n	8016c9e <_malloc_r+0x4a>
 8016d30:	461a      	mov	r2, r3
 8016d32:	685b      	ldr	r3, [r3, #4]
 8016d34:	42a3      	cmp	r3, r4
 8016d36:	d1fb      	bne.n	8016d30 <_malloc_r+0xdc>
 8016d38:	2300      	movs	r3, #0
 8016d3a:	6053      	str	r3, [r2, #4]
 8016d3c:	e7de      	b.n	8016cfc <_malloc_r+0xa8>
 8016d3e:	230c      	movs	r3, #12
 8016d40:	6033      	str	r3, [r6, #0]
 8016d42:	4630      	mov	r0, r6
 8016d44:	f000 f80c 	bl	8016d60 <__malloc_unlock>
 8016d48:	e794      	b.n	8016c74 <_malloc_r+0x20>
 8016d4a:	6005      	str	r5, [r0, #0]
 8016d4c:	e7d6      	b.n	8016cfc <_malloc_r+0xa8>
 8016d4e:	bf00      	nop
 8016d50:	20011308 	.word	0x20011308

08016d54 <__malloc_lock>:
 8016d54:	4801      	ldr	r0, [pc, #4]	@ (8016d5c <__malloc_lock+0x8>)
 8016d56:	f001 b950 	b.w	8017ffa <__retarget_lock_acquire_recursive>
 8016d5a:	bf00      	nop
 8016d5c:	2001144d 	.word	0x2001144d

08016d60 <__malloc_unlock>:
 8016d60:	4801      	ldr	r0, [pc, #4]	@ (8016d68 <__malloc_unlock+0x8>)
 8016d62:	f001 b94b 	b.w	8017ffc <__retarget_lock_release_recursive>
 8016d66:	bf00      	nop
 8016d68:	2001144d 	.word	0x2001144d

08016d6c <srand>:
 8016d6c:	b538      	push	{r3, r4, r5, lr}
 8016d6e:	4b10      	ldr	r3, [pc, #64]	@ (8016db0 <srand+0x44>)
 8016d70:	681d      	ldr	r5, [r3, #0]
 8016d72:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016d74:	4604      	mov	r4, r0
 8016d76:	b9b3      	cbnz	r3, 8016da6 <srand+0x3a>
 8016d78:	2018      	movs	r0, #24
 8016d7a:	f7ff ff39 	bl	8016bf0 <malloc>
 8016d7e:	4602      	mov	r2, r0
 8016d80:	6328      	str	r0, [r5, #48]	@ 0x30
 8016d82:	b920      	cbnz	r0, 8016d8e <srand+0x22>
 8016d84:	4b0b      	ldr	r3, [pc, #44]	@ (8016db4 <srand+0x48>)
 8016d86:	480c      	ldr	r0, [pc, #48]	@ (8016db8 <srand+0x4c>)
 8016d88:	2146      	movs	r1, #70	@ 0x46
 8016d8a:	f001 f94f 	bl	801802c <__assert_func>
 8016d8e:	490b      	ldr	r1, [pc, #44]	@ (8016dbc <srand+0x50>)
 8016d90:	4b0b      	ldr	r3, [pc, #44]	@ (8016dc0 <srand+0x54>)
 8016d92:	e9c0 1300 	strd	r1, r3, [r0]
 8016d96:	4b0b      	ldr	r3, [pc, #44]	@ (8016dc4 <srand+0x58>)
 8016d98:	6083      	str	r3, [r0, #8]
 8016d9a:	230b      	movs	r3, #11
 8016d9c:	8183      	strh	r3, [r0, #12]
 8016d9e:	2100      	movs	r1, #0
 8016da0:	2001      	movs	r0, #1
 8016da2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8016da6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016da8:	2200      	movs	r2, #0
 8016daa:	611c      	str	r4, [r3, #16]
 8016dac:	615a      	str	r2, [r3, #20]
 8016dae:	bd38      	pop	{r3, r4, r5, pc}
 8016db0:	200000c8 	.word	0x200000c8
 8016db4:	0801abee 	.word	0x0801abee
 8016db8:	0801ac05 	.word	0x0801ac05
 8016dbc:	abcd330e 	.word	0xabcd330e
 8016dc0:	e66d1234 	.word	0xe66d1234
 8016dc4:	0005deec 	.word	0x0005deec

08016dc8 <rand>:
 8016dc8:	4b16      	ldr	r3, [pc, #88]	@ (8016e24 <rand+0x5c>)
 8016dca:	b510      	push	{r4, lr}
 8016dcc:	681c      	ldr	r4, [r3, #0]
 8016dce:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016dd0:	b9b3      	cbnz	r3, 8016e00 <rand+0x38>
 8016dd2:	2018      	movs	r0, #24
 8016dd4:	f7ff ff0c 	bl	8016bf0 <malloc>
 8016dd8:	4602      	mov	r2, r0
 8016dda:	6320      	str	r0, [r4, #48]	@ 0x30
 8016ddc:	b920      	cbnz	r0, 8016de8 <rand+0x20>
 8016dde:	4b12      	ldr	r3, [pc, #72]	@ (8016e28 <rand+0x60>)
 8016de0:	4812      	ldr	r0, [pc, #72]	@ (8016e2c <rand+0x64>)
 8016de2:	2152      	movs	r1, #82	@ 0x52
 8016de4:	f001 f922 	bl	801802c <__assert_func>
 8016de8:	4911      	ldr	r1, [pc, #68]	@ (8016e30 <rand+0x68>)
 8016dea:	4b12      	ldr	r3, [pc, #72]	@ (8016e34 <rand+0x6c>)
 8016dec:	e9c0 1300 	strd	r1, r3, [r0]
 8016df0:	4b11      	ldr	r3, [pc, #68]	@ (8016e38 <rand+0x70>)
 8016df2:	6083      	str	r3, [r0, #8]
 8016df4:	230b      	movs	r3, #11
 8016df6:	8183      	strh	r3, [r0, #12]
 8016df8:	2100      	movs	r1, #0
 8016dfa:	2001      	movs	r0, #1
 8016dfc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8016e00:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8016e02:	480e      	ldr	r0, [pc, #56]	@ (8016e3c <rand+0x74>)
 8016e04:	690b      	ldr	r3, [r1, #16]
 8016e06:	694c      	ldr	r4, [r1, #20]
 8016e08:	4a0d      	ldr	r2, [pc, #52]	@ (8016e40 <rand+0x78>)
 8016e0a:	4358      	muls	r0, r3
 8016e0c:	fb02 0004 	mla	r0, r2, r4, r0
 8016e10:	fba3 3202 	umull	r3, r2, r3, r2
 8016e14:	3301      	adds	r3, #1
 8016e16:	eb40 0002 	adc.w	r0, r0, r2
 8016e1a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8016e1e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8016e22:	bd10      	pop	{r4, pc}
 8016e24:	200000c8 	.word	0x200000c8
 8016e28:	0801abee 	.word	0x0801abee
 8016e2c:	0801ac05 	.word	0x0801ac05
 8016e30:	abcd330e 	.word	0xabcd330e
 8016e34:	e66d1234 	.word	0xe66d1234
 8016e38:	0005deec 	.word	0x0005deec
 8016e3c:	5851f42d 	.word	0x5851f42d
 8016e40:	4c957f2d 	.word	0x4c957f2d

08016e44 <realloc>:
 8016e44:	4b02      	ldr	r3, [pc, #8]	@ (8016e50 <realloc+0xc>)
 8016e46:	460a      	mov	r2, r1
 8016e48:	4601      	mov	r1, r0
 8016e4a:	6818      	ldr	r0, [r3, #0]
 8016e4c:	f000 b802 	b.w	8016e54 <_realloc_r>
 8016e50:	200000c8 	.word	0x200000c8

08016e54 <_realloc_r>:
 8016e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e58:	4680      	mov	r8, r0
 8016e5a:	4615      	mov	r5, r2
 8016e5c:	460c      	mov	r4, r1
 8016e5e:	b921      	cbnz	r1, 8016e6a <_realloc_r+0x16>
 8016e60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016e64:	4611      	mov	r1, r2
 8016e66:	f7ff bef5 	b.w	8016c54 <_malloc_r>
 8016e6a:	b92a      	cbnz	r2, 8016e78 <_realloc_r+0x24>
 8016e6c:	f001 ff54 	bl	8018d18 <_free_r>
 8016e70:	2400      	movs	r4, #0
 8016e72:	4620      	mov	r0, r4
 8016e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e78:	f002 fb1a 	bl	80194b0 <_malloc_usable_size_r>
 8016e7c:	4285      	cmp	r5, r0
 8016e7e:	4606      	mov	r6, r0
 8016e80:	d802      	bhi.n	8016e88 <_realloc_r+0x34>
 8016e82:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8016e86:	d8f4      	bhi.n	8016e72 <_realloc_r+0x1e>
 8016e88:	4629      	mov	r1, r5
 8016e8a:	4640      	mov	r0, r8
 8016e8c:	f7ff fee2 	bl	8016c54 <_malloc_r>
 8016e90:	4607      	mov	r7, r0
 8016e92:	2800      	cmp	r0, #0
 8016e94:	d0ec      	beq.n	8016e70 <_realloc_r+0x1c>
 8016e96:	42b5      	cmp	r5, r6
 8016e98:	462a      	mov	r2, r5
 8016e9a:	4621      	mov	r1, r4
 8016e9c:	bf28      	it	cs
 8016e9e:	4632      	movcs	r2, r6
 8016ea0:	f001 f8b5 	bl	801800e <memcpy>
 8016ea4:	4621      	mov	r1, r4
 8016ea6:	4640      	mov	r0, r8
 8016ea8:	f001 ff36 	bl	8018d18 <_free_r>
 8016eac:	463c      	mov	r4, r7
 8016eae:	e7e0      	b.n	8016e72 <_realloc_r+0x1e>

08016eb0 <_strtoul_l.constprop.0>:
 8016eb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016eb4:	4e34      	ldr	r6, [pc, #208]	@ (8016f88 <_strtoul_l.constprop.0+0xd8>)
 8016eb6:	4686      	mov	lr, r0
 8016eb8:	460d      	mov	r5, r1
 8016eba:	4628      	mov	r0, r5
 8016ebc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016ec0:	5d37      	ldrb	r7, [r6, r4]
 8016ec2:	f017 0708 	ands.w	r7, r7, #8
 8016ec6:	d1f8      	bne.n	8016eba <_strtoul_l.constprop.0+0xa>
 8016ec8:	2c2d      	cmp	r4, #45	@ 0x2d
 8016eca:	d12f      	bne.n	8016f2c <_strtoul_l.constprop.0+0x7c>
 8016ecc:	782c      	ldrb	r4, [r5, #0]
 8016ece:	2701      	movs	r7, #1
 8016ed0:	1c85      	adds	r5, r0, #2
 8016ed2:	f033 0010 	bics.w	r0, r3, #16
 8016ed6:	d109      	bne.n	8016eec <_strtoul_l.constprop.0+0x3c>
 8016ed8:	2c30      	cmp	r4, #48	@ 0x30
 8016eda:	d12c      	bne.n	8016f36 <_strtoul_l.constprop.0+0x86>
 8016edc:	7828      	ldrb	r0, [r5, #0]
 8016ede:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8016ee2:	2858      	cmp	r0, #88	@ 0x58
 8016ee4:	d127      	bne.n	8016f36 <_strtoul_l.constprop.0+0x86>
 8016ee6:	786c      	ldrb	r4, [r5, #1]
 8016ee8:	2310      	movs	r3, #16
 8016eea:	3502      	adds	r5, #2
 8016eec:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8016ef0:	2600      	movs	r6, #0
 8016ef2:	fbb8 f8f3 	udiv	r8, r8, r3
 8016ef6:	fb03 f908 	mul.w	r9, r3, r8
 8016efa:	ea6f 0909 	mvn.w	r9, r9
 8016efe:	4630      	mov	r0, r6
 8016f00:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8016f04:	f1bc 0f09 	cmp.w	ip, #9
 8016f08:	d81c      	bhi.n	8016f44 <_strtoul_l.constprop.0+0x94>
 8016f0a:	4664      	mov	r4, ip
 8016f0c:	42a3      	cmp	r3, r4
 8016f0e:	dd2a      	ble.n	8016f66 <_strtoul_l.constprop.0+0xb6>
 8016f10:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8016f14:	d007      	beq.n	8016f26 <_strtoul_l.constprop.0+0x76>
 8016f16:	4580      	cmp	r8, r0
 8016f18:	d322      	bcc.n	8016f60 <_strtoul_l.constprop.0+0xb0>
 8016f1a:	d101      	bne.n	8016f20 <_strtoul_l.constprop.0+0x70>
 8016f1c:	45a1      	cmp	r9, r4
 8016f1e:	db1f      	blt.n	8016f60 <_strtoul_l.constprop.0+0xb0>
 8016f20:	fb00 4003 	mla	r0, r0, r3, r4
 8016f24:	2601      	movs	r6, #1
 8016f26:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016f2a:	e7e9      	b.n	8016f00 <_strtoul_l.constprop.0+0x50>
 8016f2c:	2c2b      	cmp	r4, #43	@ 0x2b
 8016f2e:	bf04      	itt	eq
 8016f30:	782c      	ldrbeq	r4, [r5, #0]
 8016f32:	1c85      	addeq	r5, r0, #2
 8016f34:	e7cd      	b.n	8016ed2 <_strtoul_l.constprop.0+0x22>
 8016f36:	2b00      	cmp	r3, #0
 8016f38:	d1d8      	bne.n	8016eec <_strtoul_l.constprop.0+0x3c>
 8016f3a:	2c30      	cmp	r4, #48	@ 0x30
 8016f3c:	bf0c      	ite	eq
 8016f3e:	2308      	moveq	r3, #8
 8016f40:	230a      	movne	r3, #10
 8016f42:	e7d3      	b.n	8016eec <_strtoul_l.constprop.0+0x3c>
 8016f44:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8016f48:	f1bc 0f19 	cmp.w	ip, #25
 8016f4c:	d801      	bhi.n	8016f52 <_strtoul_l.constprop.0+0xa2>
 8016f4e:	3c37      	subs	r4, #55	@ 0x37
 8016f50:	e7dc      	b.n	8016f0c <_strtoul_l.constprop.0+0x5c>
 8016f52:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8016f56:	f1bc 0f19 	cmp.w	ip, #25
 8016f5a:	d804      	bhi.n	8016f66 <_strtoul_l.constprop.0+0xb6>
 8016f5c:	3c57      	subs	r4, #87	@ 0x57
 8016f5e:	e7d5      	b.n	8016f0c <_strtoul_l.constprop.0+0x5c>
 8016f60:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8016f64:	e7df      	b.n	8016f26 <_strtoul_l.constprop.0+0x76>
 8016f66:	1c73      	adds	r3, r6, #1
 8016f68:	d106      	bne.n	8016f78 <_strtoul_l.constprop.0+0xc8>
 8016f6a:	2322      	movs	r3, #34	@ 0x22
 8016f6c:	f8ce 3000 	str.w	r3, [lr]
 8016f70:	4630      	mov	r0, r6
 8016f72:	b932      	cbnz	r2, 8016f82 <_strtoul_l.constprop.0+0xd2>
 8016f74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016f78:	b107      	cbz	r7, 8016f7c <_strtoul_l.constprop.0+0xcc>
 8016f7a:	4240      	negs	r0, r0
 8016f7c:	2a00      	cmp	r2, #0
 8016f7e:	d0f9      	beq.n	8016f74 <_strtoul_l.constprop.0+0xc4>
 8016f80:	b106      	cbz	r6, 8016f84 <_strtoul_l.constprop.0+0xd4>
 8016f82:	1e69      	subs	r1, r5, #1
 8016f84:	6011      	str	r1, [r2, #0]
 8016f86:	e7f5      	b.n	8016f74 <_strtoul_l.constprop.0+0xc4>
 8016f88:	0801ac5e 	.word	0x0801ac5e

08016f8c <strtoul>:
 8016f8c:	4613      	mov	r3, r2
 8016f8e:	460a      	mov	r2, r1
 8016f90:	4601      	mov	r1, r0
 8016f92:	4802      	ldr	r0, [pc, #8]	@ (8016f9c <strtoul+0x10>)
 8016f94:	6800      	ldr	r0, [r0, #0]
 8016f96:	f7ff bf8b 	b.w	8016eb0 <_strtoul_l.constprop.0>
 8016f9a:	bf00      	nop
 8016f9c:	200000c8 	.word	0x200000c8

08016fa0 <__cvt>:
 8016fa0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016fa4:	ec57 6b10 	vmov	r6, r7, d0
 8016fa8:	2f00      	cmp	r7, #0
 8016faa:	460c      	mov	r4, r1
 8016fac:	4619      	mov	r1, r3
 8016fae:	463b      	mov	r3, r7
 8016fb0:	bfbb      	ittet	lt
 8016fb2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8016fb6:	461f      	movlt	r7, r3
 8016fb8:	2300      	movge	r3, #0
 8016fba:	232d      	movlt	r3, #45	@ 0x2d
 8016fbc:	700b      	strb	r3, [r1, #0]
 8016fbe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016fc0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8016fc4:	4691      	mov	r9, r2
 8016fc6:	f023 0820 	bic.w	r8, r3, #32
 8016fca:	bfbc      	itt	lt
 8016fcc:	4632      	movlt	r2, r6
 8016fce:	4616      	movlt	r6, r2
 8016fd0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8016fd4:	d005      	beq.n	8016fe2 <__cvt+0x42>
 8016fd6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8016fda:	d100      	bne.n	8016fde <__cvt+0x3e>
 8016fdc:	3401      	adds	r4, #1
 8016fde:	2102      	movs	r1, #2
 8016fe0:	e000      	b.n	8016fe4 <__cvt+0x44>
 8016fe2:	2103      	movs	r1, #3
 8016fe4:	ab03      	add	r3, sp, #12
 8016fe6:	9301      	str	r3, [sp, #4]
 8016fe8:	ab02      	add	r3, sp, #8
 8016fea:	9300      	str	r3, [sp, #0]
 8016fec:	ec47 6b10 	vmov	d0, r6, r7
 8016ff0:	4653      	mov	r3, sl
 8016ff2:	4622      	mov	r2, r4
 8016ff4:	f001 f8c0 	bl	8018178 <_dtoa_r>
 8016ff8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8016ffc:	4605      	mov	r5, r0
 8016ffe:	d119      	bne.n	8017034 <__cvt+0x94>
 8017000:	f019 0f01 	tst.w	r9, #1
 8017004:	d00e      	beq.n	8017024 <__cvt+0x84>
 8017006:	eb00 0904 	add.w	r9, r0, r4
 801700a:	2200      	movs	r2, #0
 801700c:	2300      	movs	r3, #0
 801700e:	4630      	mov	r0, r6
 8017010:	4639      	mov	r1, r7
 8017012:	f7e9 fd89 	bl	8000b28 <__aeabi_dcmpeq>
 8017016:	b108      	cbz	r0, 801701c <__cvt+0x7c>
 8017018:	f8cd 900c 	str.w	r9, [sp, #12]
 801701c:	2230      	movs	r2, #48	@ 0x30
 801701e:	9b03      	ldr	r3, [sp, #12]
 8017020:	454b      	cmp	r3, r9
 8017022:	d31e      	bcc.n	8017062 <__cvt+0xc2>
 8017024:	9b03      	ldr	r3, [sp, #12]
 8017026:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017028:	1b5b      	subs	r3, r3, r5
 801702a:	4628      	mov	r0, r5
 801702c:	6013      	str	r3, [r2, #0]
 801702e:	b004      	add	sp, #16
 8017030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017034:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8017038:	eb00 0904 	add.w	r9, r0, r4
 801703c:	d1e5      	bne.n	801700a <__cvt+0x6a>
 801703e:	7803      	ldrb	r3, [r0, #0]
 8017040:	2b30      	cmp	r3, #48	@ 0x30
 8017042:	d10a      	bne.n	801705a <__cvt+0xba>
 8017044:	2200      	movs	r2, #0
 8017046:	2300      	movs	r3, #0
 8017048:	4630      	mov	r0, r6
 801704a:	4639      	mov	r1, r7
 801704c:	f7e9 fd6c 	bl	8000b28 <__aeabi_dcmpeq>
 8017050:	b918      	cbnz	r0, 801705a <__cvt+0xba>
 8017052:	f1c4 0401 	rsb	r4, r4, #1
 8017056:	f8ca 4000 	str.w	r4, [sl]
 801705a:	f8da 3000 	ldr.w	r3, [sl]
 801705e:	4499      	add	r9, r3
 8017060:	e7d3      	b.n	801700a <__cvt+0x6a>
 8017062:	1c59      	adds	r1, r3, #1
 8017064:	9103      	str	r1, [sp, #12]
 8017066:	701a      	strb	r2, [r3, #0]
 8017068:	e7d9      	b.n	801701e <__cvt+0x7e>

0801706a <__exponent>:
 801706a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801706c:	2900      	cmp	r1, #0
 801706e:	bfba      	itte	lt
 8017070:	4249      	neglt	r1, r1
 8017072:	232d      	movlt	r3, #45	@ 0x2d
 8017074:	232b      	movge	r3, #43	@ 0x2b
 8017076:	2909      	cmp	r1, #9
 8017078:	7002      	strb	r2, [r0, #0]
 801707a:	7043      	strb	r3, [r0, #1]
 801707c:	dd29      	ble.n	80170d2 <__exponent+0x68>
 801707e:	f10d 0307 	add.w	r3, sp, #7
 8017082:	461d      	mov	r5, r3
 8017084:	270a      	movs	r7, #10
 8017086:	461a      	mov	r2, r3
 8017088:	fbb1 f6f7 	udiv	r6, r1, r7
 801708c:	fb07 1416 	mls	r4, r7, r6, r1
 8017090:	3430      	adds	r4, #48	@ 0x30
 8017092:	f802 4c01 	strb.w	r4, [r2, #-1]
 8017096:	460c      	mov	r4, r1
 8017098:	2c63      	cmp	r4, #99	@ 0x63
 801709a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 801709e:	4631      	mov	r1, r6
 80170a0:	dcf1      	bgt.n	8017086 <__exponent+0x1c>
 80170a2:	3130      	adds	r1, #48	@ 0x30
 80170a4:	1e94      	subs	r4, r2, #2
 80170a6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80170aa:	1c41      	adds	r1, r0, #1
 80170ac:	4623      	mov	r3, r4
 80170ae:	42ab      	cmp	r3, r5
 80170b0:	d30a      	bcc.n	80170c8 <__exponent+0x5e>
 80170b2:	f10d 0309 	add.w	r3, sp, #9
 80170b6:	1a9b      	subs	r3, r3, r2
 80170b8:	42ac      	cmp	r4, r5
 80170ba:	bf88      	it	hi
 80170bc:	2300      	movhi	r3, #0
 80170be:	3302      	adds	r3, #2
 80170c0:	4403      	add	r3, r0
 80170c2:	1a18      	subs	r0, r3, r0
 80170c4:	b003      	add	sp, #12
 80170c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80170c8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80170cc:	f801 6f01 	strb.w	r6, [r1, #1]!
 80170d0:	e7ed      	b.n	80170ae <__exponent+0x44>
 80170d2:	2330      	movs	r3, #48	@ 0x30
 80170d4:	3130      	adds	r1, #48	@ 0x30
 80170d6:	7083      	strb	r3, [r0, #2]
 80170d8:	70c1      	strb	r1, [r0, #3]
 80170da:	1d03      	adds	r3, r0, #4
 80170dc:	e7f1      	b.n	80170c2 <__exponent+0x58>
	...

080170e0 <_printf_float>:
 80170e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80170e4:	b08d      	sub	sp, #52	@ 0x34
 80170e6:	460c      	mov	r4, r1
 80170e8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80170ec:	4616      	mov	r6, r2
 80170ee:	461f      	mov	r7, r3
 80170f0:	4605      	mov	r5, r0
 80170f2:	f000 fea7 	bl	8017e44 <_localeconv_r>
 80170f6:	6803      	ldr	r3, [r0, #0]
 80170f8:	9304      	str	r3, [sp, #16]
 80170fa:	4618      	mov	r0, r3
 80170fc:	f7e9 f8e8 	bl	80002d0 <strlen>
 8017100:	2300      	movs	r3, #0
 8017102:	930a      	str	r3, [sp, #40]	@ 0x28
 8017104:	f8d8 3000 	ldr.w	r3, [r8]
 8017108:	9005      	str	r0, [sp, #20]
 801710a:	3307      	adds	r3, #7
 801710c:	f023 0307 	bic.w	r3, r3, #7
 8017110:	f103 0208 	add.w	r2, r3, #8
 8017114:	f894 a018 	ldrb.w	sl, [r4, #24]
 8017118:	f8d4 b000 	ldr.w	fp, [r4]
 801711c:	f8c8 2000 	str.w	r2, [r8]
 8017120:	e9d3 8900 	ldrd	r8, r9, [r3]
 8017124:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8017128:	9307      	str	r3, [sp, #28]
 801712a:	f8cd 8018 	str.w	r8, [sp, #24]
 801712e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8017132:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017136:	4b9c      	ldr	r3, [pc, #624]	@ (80173a8 <_printf_float+0x2c8>)
 8017138:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801713c:	f7e9 fd26 	bl	8000b8c <__aeabi_dcmpun>
 8017140:	bb70      	cbnz	r0, 80171a0 <_printf_float+0xc0>
 8017142:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017146:	4b98      	ldr	r3, [pc, #608]	@ (80173a8 <_printf_float+0x2c8>)
 8017148:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801714c:	f7e9 fd00 	bl	8000b50 <__aeabi_dcmple>
 8017150:	bb30      	cbnz	r0, 80171a0 <_printf_float+0xc0>
 8017152:	2200      	movs	r2, #0
 8017154:	2300      	movs	r3, #0
 8017156:	4640      	mov	r0, r8
 8017158:	4649      	mov	r1, r9
 801715a:	f7e9 fcef 	bl	8000b3c <__aeabi_dcmplt>
 801715e:	b110      	cbz	r0, 8017166 <_printf_float+0x86>
 8017160:	232d      	movs	r3, #45	@ 0x2d
 8017162:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017166:	4a91      	ldr	r2, [pc, #580]	@ (80173ac <_printf_float+0x2cc>)
 8017168:	4b91      	ldr	r3, [pc, #580]	@ (80173b0 <_printf_float+0x2d0>)
 801716a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801716e:	bf94      	ite	ls
 8017170:	4690      	movls	r8, r2
 8017172:	4698      	movhi	r8, r3
 8017174:	2303      	movs	r3, #3
 8017176:	6123      	str	r3, [r4, #16]
 8017178:	f02b 0304 	bic.w	r3, fp, #4
 801717c:	6023      	str	r3, [r4, #0]
 801717e:	f04f 0900 	mov.w	r9, #0
 8017182:	9700      	str	r7, [sp, #0]
 8017184:	4633      	mov	r3, r6
 8017186:	aa0b      	add	r2, sp, #44	@ 0x2c
 8017188:	4621      	mov	r1, r4
 801718a:	4628      	mov	r0, r5
 801718c:	f000 f9d2 	bl	8017534 <_printf_common>
 8017190:	3001      	adds	r0, #1
 8017192:	f040 808d 	bne.w	80172b0 <_printf_float+0x1d0>
 8017196:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801719a:	b00d      	add	sp, #52	@ 0x34
 801719c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80171a0:	4642      	mov	r2, r8
 80171a2:	464b      	mov	r3, r9
 80171a4:	4640      	mov	r0, r8
 80171a6:	4649      	mov	r1, r9
 80171a8:	f7e9 fcf0 	bl	8000b8c <__aeabi_dcmpun>
 80171ac:	b140      	cbz	r0, 80171c0 <_printf_float+0xe0>
 80171ae:	464b      	mov	r3, r9
 80171b0:	2b00      	cmp	r3, #0
 80171b2:	bfbc      	itt	lt
 80171b4:	232d      	movlt	r3, #45	@ 0x2d
 80171b6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80171ba:	4a7e      	ldr	r2, [pc, #504]	@ (80173b4 <_printf_float+0x2d4>)
 80171bc:	4b7e      	ldr	r3, [pc, #504]	@ (80173b8 <_printf_float+0x2d8>)
 80171be:	e7d4      	b.n	801716a <_printf_float+0x8a>
 80171c0:	6863      	ldr	r3, [r4, #4]
 80171c2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80171c6:	9206      	str	r2, [sp, #24]
 80171c8:	1c5a      	adds	r2, r3, #1
 80171ca:	d13b      	bne.n	8017244 <_printf_float+0x164>
 80171cc:	2306      	movs	r3, #6
 80171ce:	6063      	str	r3, [r4, #4]
 80171d0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80171d4:	2300      	movs	r3, #0
 80171d6:	6022      	str	r2, [r4, #0]
 80171d8:	9303      	str	r3, [sp, #12]
 80171da:	ab0a      	add	r3, sp, #40	@ 0x28
 80171dc:	e9cd a301 	strd	sl, r3, [sp, #4]
 80171e0:	ab09      	add	r3, sp, #36	@ 0x24
 80171e2:	9300      	str	r3, [sp, #0]
 80171e4:	6861      	ldr	r1, [r4, #4]
 80171e6:	ec49 8b10 	vmov	d0, r8, r9
 80171ea:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80171ee:	4628      	mov	r0, r5
 80171f0:	f7ff fed6 	bl	8016fa0 <__cvt>
 80171f4:	9b06      	ldr	r3, [sp, #24]
 80171f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80171f8:	2b47      	cmp	r3, #71	@ 0x47
 80171fa:	4680      	mov	r8, r0
 80171fc:	d129      	bne.n	8017252 <_printf_float+0x172>
 80171fe:	1cc8      	adds	r0, r1, #3
 8017200:	db02      	blt.n	8017208 <_printf_float+0x128>
 8017202:	6863      	ldr	r3, [r4, #4]
 8017204:	4299      	cmp	r1, r3
 8017206:	dd41      	ble.n	801728c <_printf_float+0x1ac>
 8017208:	f1aa 0a02 	sub.w	sl, sl, #2
 801720c:	fa5f fa8a 	uxtb.w	sl, sl
 8017210:	3901      	subs	r1, #1
 8017212:	4652      	mov	r2, sl
 8017214:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8017218:	9109      	str	r1, [sp, #36]	@ 0x24
 801721a:	f7ff ff26 	bl	801706a <__exponent>
 801721e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8017220:	1813      	adds	r3, r2, r0
 8017222:	2a01      	cmp	r2, #1
 8017224:	4681      	mov	r9, r0
 8017226:	6123      	str	r3, [r4, #16]
 8017228:	dc02      	bgt.n	8017230 <_printf_float+0x150>
 801722a:	6822      	ldr	r2, [r4, #0]
 801722c:	07d2      	lsls	r2, r2, #31
 801722e:	d501      	bpl.n	8017234 <_printf_float+0x154>
 8017230:	3301      	adds	r3, #1
 8017232:	6123      	str	r3, [r4, #16]
 8017234:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8017238:	2b00      	cmp	r3, #0
 801723a:	d0a2      	beq.n	8017182 <_printf_float+0xa2>
 801723c:	232d      	movs	r3, #45	@ 0x2d
 801723e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017242:	e79e      	b.n	8017182 <_printf_float+0xa2>
 8017244:	9a06      	ldr	r2, [sp, #24]
 8017246:	2a47      	cmp	r2, #71	@ 0x47
 8017248:	d1c2      	bne.n	80171d0 <_printf_float+0xf0>
 801724a:	2b00      	cmp	r3, #0
 801724c:	d1c0      	bne.n	80171d0 <_printf_float+0xf0>
 801724e:	2301      	movs	r3, #1
 8017250:	e7bd      	b.n	80171ce <_printf_float+0xee>
 8017252:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8017256:	d9db      	bls.n	8017210 <_printf_float+0x130>
 8017258:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801725c:	d118      	bne.n	8017290 <_printf_float+0x1b0>
 801725e:	2900      	cmp	r1, #0
 8017260:	6863      	ldr	r3, [r4, #4]
 8017262:	dd0b      	ble.n	801727c <_printf_float+0x19c>
 8017264:	6121      	str	r1, [r4, #16]
 8017266:	b913      	cbnz	r3, 801726e <_printf_float+0x18e>
 8017268:	6822      	ldr	r2, [r4, #0]
 801726a:	07d0      	lsls	r0, r2, #31
 801726c:	d502      	bpl.n	8017274 <_printf_float+0x194>
 801726e:	3301      	adds	r3, #1
 8017270:	440b      	add	r3, r1
 8017272:	6123      	str	r3, [r4, #16]
 8017274:	65a1      	str	r1, [r4, #88]	@ 0x58
 8017276:	f04f 0900 	mov.w	r9, #0
 801727a:	e7db      	b.n	8017234 <_printf_float+0x154>
 801727c:	b913      	cbnz	r3, 8017284 <_printf_float+0x1a4>
 801727e:	6822      	ldr	r2, [r4, #0]
 8017280:	07d2      	lsls	r2, r2, #31
 8017282:	d501      	bpl.n	8017288 <_printf_float+0x1a8>
 8017284:	3302      	adds	r3, #2
 8017286:	e7f4      	b.n	8017272 <_printf_float+0x192>
 8017288:	2301      	movs	r3, #1
 801728a:	e7f2      	b.n	8017272 <_printf_float+0x192>
 801728c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8017290:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017292:	4299      	cmp	r1, r3
 8017294:	db05      	blt.n	80172a2 <_printf_float+0x1c2>
 8017296:	6823      	ldr	r3, [r4, #0]
 8017298:	6121      	str	r1, [r4, #16]
 801729a:	07d8      	lsls	r0, r3, #31
 801729c:	d5ea      	bpl.n	8017274 <_printf_float+0x194>
 801729e:	1c4b      	adds	r3, r1, #1
 80172a0:	e7e7      	b.n	8017272 <_printf_float+0x192>
 80172a2:	2900      	cmp	r1, #0
 80172a4:	bfd4      	ite	le
 80172a6:	f1c1 0202 	rsble	r2, r1, #2
 80172aa:	2201      	movgt	r2, #1
 80172ac:	4413      	add	r3, r2
 80172ae:	e7e0      	b.n	8017272 <_printf_float+0x192>
 80172b0:	6823      	ldr	r3, [r4, #0]
 80172b2:	055a      	lsls	r2, r3, #21
 80172b4:	d407      	bmi.n	80172c6 <_printf_float+0x1e6>
 80172b6:	6923      	ldr	r3, [r4, #16]
 80172b8:	4642      	mov	r2, r8
 80172ba:	4631      	mov	r1, r6
 80172bc:	4628      	mov	r0, r5
 80172be:	47b8      	blx	r7
 80172c0:	3001      	adds	r0, #1
 80172c2:	d12b      	bne.n	801731c <_printf_float+0x23c>
 80172c4:	e767      	b.n	8017196 <_printf_float+0xb6>
 80172c6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80172ca:	f240 80dd 	bls.w	8017488 <_printf_float+0x3a8>
 80172ce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80172d2:	2200      	movs	r2, #0
 80172d4:	2300      	movs	r3, #0
 80172d6:	f7e9 fc27 	bl	8000b28 <__aeabi_dcmpeq>
 80172da:	2800      	cmp	r0, #0
 80172dc:	d033      	beq.n	8017346 <_printf_float+0x266>
 80172de:	4a37      	ldr	r2, [pc, #220]	@ (80173bc <_printf_float+0x2dc>)
 80172e0:	2301      	movs	r3, #1
 80172e2:	4631      	mov	r1, r6
 80172e4:	4628      	mov	r0, r5
 80172e6:	47b8      	blx	r7
 80172e8:	3001      	adds	r0, #1
 80172ea:	f43f af54 	beq.w	8017196 <_printf_float+0xb6>
 80172ee:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80172f2:	4543      	cmp	r3, r8
 80172f4:	db02      	blt.n	80172fc <_printf_float+0x21c>
 80172f6:	6823      	ldr	r3, [r4, #0]
 80172f8:	07d8      	lsls	r0, r3, #31
 80172fa:	d50f      	bpl.n	801731c <_printf_float+0x23c>
 80172fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017300:	4631      	mov	r1, r6
 8017302:	4628      	mov	r0, r5
 8017304:	47b8      	blx	r7
 8017306:	3001      	adds	r0, #1
 8017308:	f43f af45 	beq.w	8017196 <_printf_float+0xb6>
 801730c:	f04f 0900 	mov.w	r9, #0
 8017310:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8017314:	f104 0a1a 	add.w	sl, r4, #26
 8017318:	45c8      	cmp	r8, r9
 801731a:	dc09      	bgt.n	8017330 <_printf_float+0x250>
 801731c:	6823      	ldr	r3, [r4, #0]
 801731e:	079b      	lsls	r3, r3, #30
 8017320:	f100 8103 	bmi.w	801752a <_printf_float+0x44a>
 8017324:	68e0      	ldr	r0, [r4, #12]
 8017326:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017328:	4298      	cmp	r0, r3
 801732a:	bfb8      	it	lt
 801732c:	4618      	movlt	r0, r3
 801732e:	e734      	b.n	801719a <_printf_float+0xba>
 8017330:	2301      	movs	r3, #1
 8017332:	4652      	mov	r2, sl
 8017334:	4631      	mov	r1, r6
 8017336:	4628      	mov	r0, r5
 8017338:	47b8      	blx	r7
 801733a:	3001      	adds	r0, #1
 801733c:	f43f af2b 	beq.w	8017196 <_printf_float+0xb6>
 8017340:	f109 0901 	add.w	r9, r9, #1
 8017344:	e7e8      	b.n	8017318 <_printf_float+0x238>
 8017346:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017348:	2b00      	cmp	r3, #0
 801734a:	dc39      	bgt.n	80173c0 <_printf_float+0x2e0>
 801734c:	4a1b      	ldr	r2, [pc, #108]	@ (80173bc <_printf_float+0x2dc>)
 801734e:	2301      	movs	r3, #1
 8017350:	4631      	mov	r1, r6
 8017352:	4628      	mov	r0, r5
 8017354:	47b8      	blx	r7
 8017356:	3001      	adds	r0, #1
 8017358:	f43f af1d 	beq.w	8017196 <_printf_float+0xb6>
 801735c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8017360:	ea59 0303 	orrs.w	r3, r9, r3
 8017364:	d102      	bne.n	801736c <_printf_float+0x28c>
 8017366:	6823      	ldr	r3, [r4, #0]
 8017368:	07d9      	lsls	r1, r3, #31
 801736a:	d5d7      	bpl.n	801731c <_printf_float+0x23c>
 801736c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017370:	4631      	mov	r1, r6
 8017372:	4628      	mov	r0, r5
 8017374:	47b8      	blx	r7
 8017376:	3001      	adds	r0, #1
 8017378:	f43f af0d 	beq.w	8017196 <_printf_float+0xb6>
 801737c:	f04f 0a00 	mov.w	sl, #0
 8017380:	f104 0b1a 	add.w	fp, r4, #26
 8017384:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017386:	425b      	negs	r3, r3
 8017388:	4553      	cmp	r3, sl
 801738a:	dc01      	bgt.n	8017390 <_printf_float+0x2b0>
 801738c:	464b      	mov	r3, r9
 801738e:	e793      	b.n	80172b8 <_printf_float+0x1d8>
 8017390:	2301      	movs	r3, #1
 8017392:	465a      	mov	r2, fp
 8017394:	4631      	mov	r1, r6
 8017396:	4628      	mov	r0, r5
 8017398:	47b8      	blx	r7
 801739a:	3001      	adds	r0, #1
 801739c:	f43f aefb 	beq.w	8017196 <_printf_float+0xb6>
 80173a0:	f10a 0a01 	add.w	sl, sl, #1
 80173a4:	e7ee      	b.n	8017384 <_printf_float+0x2a4>
 80173a6:	bf00      	nop
 80173a8:	7fefffff 	.word	0x7fefffff
 80173ac:	0801ad5e 	.word	0x0801ad5e
 80173b0:	0801ad62 	.word	0x0801ad62
 80173b4:	0801ad66 	.word	0x0801ad66
 80173b8:	0801ad6a 	.word	0x0801ad6a
 80173bc:	0801ad6e 	.word	0x0801ad6e
 80173c0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80173c2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80173c6:	4553      	cmp	r3, sl
 80173c8:	bfa8      	it	ge
 80173ca:	4653      	movge	r3, sl
 80173cc:	2b00      	cmp	r3, #0
 80173ce:	4699      	mov	r9, r3
 80173d0:	dc36      	bgt.n	8017440 <_printf_float+0x360>
 80173d2:	f04f 0b00 	mov.w	fp, #0
 80173d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80173da:	f104 021a 	add.w	r2, r4, #26
 80173de:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80173e0:	9306      	str	r3, [sp, #24]
 80173e2:	eba3 0309 	sub.w	r3, r3, r9
 80173e6:	455b      	cmp	r3, fp
 80173e8:	dc31      	bgt.n	801744e <_printf_float+0x36e>
 80173ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80173ec:	459a      	cmp	sl, r3
 80173ee:	dc3a      	bgt.n	8017466 <_printf_float+0x386>
 80173f0:	6823      	ldr	r3, [r4, #0]
 80173f2:	07da      	lsls	r2, r3, #31
 80173f4:	d437      	bmi.n	8017466 <_printf_float+0x386>
 80173f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80173f8:	ebaa 0903 	sub.w	r9, sl, r3
 80173fc:	9b06      	ldr	r3, [sp, #24]
 80173fe:	ebaa 0303 	sub.w	r3, sl, r3
 8017402:	4599      	cmp	r9, r3
 8017404:	bfa8      	it	ge
 8017406:	4699      	movge	r9, r3
 8017408:	f1b9 0f00 	cmp.w	r9, #0
 801740c:	dc33      	bgt.n	8017476 <_printf_float+0x396>
 801740e:	f04f 0800 	mov.w	r8, #0
 8017412:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017416:	f104 0b1a 	add.w	fp, r4, #26
 801741a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801741c:	ebaa 0303 	sub.w	r3, sl, r3
 8017420:	eba3 0309 	sub.w	r3, r3, r9
 8017424:	4543      	cmp	r3, r8
 8017426:	f77f af79 	ble.w	801731c <_printf_float+0x23c>
 801742a:	2301      	movs	r3, #1
 801742c:	465a      	mov	r2, fp
 801742e:	4631      	mov	r1, r6
 8017430:	4628      	mov	r0, r5
 8017432:	47b8      	blx	r7
 8017434:	3001      	adds	r0, #1
 8017436:	f43f aeae 	beq.w	8017196 <_printf_float+0xb6>
 801743a:	f108 0801 	add.w	r8, r8, #1
 801743e:	e7ec      	b.n	801741a <_printf_float+0x33a>
 8017440:	4642      	mov	r2, r8
 8017442:	4631      	mov	r1, r6
 8017444:	4628      	mov	r0, r5
 8017446:	47b8      	blx	r7
 8017448:	3001      	adds	r0, #1
 801744a:	d1c2      	bne.n	80173d2 <_printf_float+0x2f2>
 801744c:	e6a3      	b.n	8017196 <_printf_float+0xb6>
 801744e:	2301      	movs	r3, #1
 8017450:	4631      	mov	r1, r6
 8017452:	4628      	mov	r0, r5
 8017454:	9206      	str	r2, [sp, #24]
 8017456:	47b8      	blx	r7
 8017458:	3001      	adds	r0, #1
 801745a:	f43f ae9c 	beq.w	8017196 <_printf_float+0xb6>
 801745e:	9a06      	ldr	r2, [sp, #24]
 8017460:	f10b 0b01 	add.w	fp, fp, #1
 8017464:	e7bb      	b.n	80173de <_printf_float+0x2fe>
 8017466:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801746a:	4631      	mov	r1, r6
 801746c:	4628      	mov	r0, r5
 801746e:	47b8      	blx	r7
 8017470:	3001      	adds	r0, #1
 8017472:	d1c0      	bne.n	80173f6 <_printf_float+0x316>
 8017474:	e68f      	b.n	8017196 <_printf_float+0xb6>
 8017476:	9a06      	ldr	r2, [sp, #24]
 8017478:	464b      	mov	r3, r9
 801747a:	4442      	add	r2, r8
 801747c:	4631      	mov	r1, r6
 801747e:	4628      	mov	r0, r5
 8017480:	47b8      	blx	r7
 8017482:	3001      	adds	r0, #1
 8017484:	d1c3      	bne.n	801740e <_printf_float+0x32e>
 8017486:	e686      	b.n	8017196 <_printf_float+0xb6>
 8017488:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801748c:	f1ba 0f01 	cmp.w	sl, #1
 8017490:	dc01      	bgt.n	8017496 <_printf_float+0x3b6>
 8017492:	07db      	lsls	r3, r3, #31
 8017494:	d536      	bpl.n	8017504 <_printf_float+0x424>
 8017496:	2301      	movs	r3, #1
 8017498:	4642      	mov	r2, r8
 801749a:	4631      	mov	r1, r6
 801749c:	4628      	mov	r0, r5
 801749e:	47b8      	blx	r7
 80174a0:	3001      	adds	r0, #1
 80174a2:	f43f ae78 	beq.w	8017196 <_printf_float+0xb6>
 80174a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80174aa:	4631      	mov	r1, r6
 80174ac:	4628      	mov	r0, r5
 80174ae:	47b8      	blx	r7
 80174b0:	3001      	adds	r0, #1
 80174b2:	f43f ae70 	beq.w	8017196 <_printf_float+0xb6>
 80174b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80174ba:	2200      	movs	r2, #0
 80174bc:	2300      	movs	r3, #0
 80174be:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80174c2:	f7e9 fb31 	bl	8000b28 <__aeabi_dcmpeq>
 80174c6:	b9c0      	cbnz	r0, 80174fa <_printf_float+0x41a>
 80174c8:	4653      	mov	r3, sl
 80174ca:	f108 0201 	add.w	r2, r8, #1
 80174ce:	4631      	mov	r1, r6
 80174d0:	4628      	mov	r0, r5
 80174d2:	47b8      	blx	r7
 80174d4:	3001      	adds	r0, #1
 80174d6:	d10c      	bne.n	80174f2 <_printf_float+0x412>
 80174d8:	e65d      	b.n	8017196 <_printf_float+0xb6>
 80174da:	2301      	movs	r3, #1
 80174dc:	465a      	mov	r2, fp
 80174de:	4631      	mov	r1, r6
 80174e0:	4628      	mov	r0, r5
 80174e2:	47b8      	blx	r7
 80174e4:	3001      	adds	r0, #1
 80174e6:	f43f ae56 	beq.w	8017196 <_printf_float+0xb6>
 80174ea:	f108 0801 	add.w	r8, r8, #1
 80174ee:	45d0      	cmp	r8, sl
 80174f0:	dbf3      	blt.n	80174da <_printf_float+0x3fa>
 80174f2:	464b      	mov	r3, r9
 80174f4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80174f8:	e6df      	b.n	80172ba <_printf_float+0x1da>
 80174fa:	f04f 0800 	mov.w	r8, #0
 80174fe:	f104 0b1a 	add.w	fp, r4, #26
 8017502:	e7f4      	b.n	80174ee <_printf_float+0x40e>
 8017504:	2301      	movs	r3, #1
 8017506:	4642      	mov	r2, r8
 8017508:	e7e1      	b.n	80174ce <_printf_float+0x3ee>
 801750a:	2301      	movs	r3, #1
 801750c:	464a      	mov	r2, r9
 801750e:	4631      	mov	r1, r6
 8017510:	4628      	mov	r0, r5
 8017512:	47b8      	blx	r7
 8017514:	3001      	adds	r0, #1
 8017516:	f43f ae3e 	beq.w	8017196 <_printf_float+0xb6>
 801751a:	f108 0801 	add.w	r8, r8, #1
 801751e:	68e3      	ldr	r3, [r4, #12]
 8017520:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8017522:	1a5b      	subs	r3, r3, r1
 8017524:	4543      	cmp	r3, r8
 8017526:	dcf0      	bgt.n	801750a <_printf_float+0x42a>
 8017528:	e6fc      	b.n	8017324 <_printf_float+0x244>
 801752a:	f04f 0800 	mov.w	r8, #0
 801752e:	f104 0919 	add.w	r9, r4, #25
 8017532:	e7f4      	b.n	801751e <_printf_float+0x43e>

08017534 <_printf_common>:
 8017534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017538:	4616      	mov	r6, r2
 801753a:	4698      	mov	r8, r3
 801753c:	688a      	ldr	r2, [r1, #8]
 801753e:	690b      	ldr	r3, [r1, #16]
 8017540:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8017544:	4293      	cmp	r3, r2
 8017546:	bfb8      	it	lt
 8017548:	4613      	movlt	r3, r2
 801754a:	6033      	str	r3, [r6, #0]
 801754c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8017550:	4607      	mov	r7, r0
 8017552:	460c      	mov	r4, r1
 8017554:	b10a      	cbz	r2, 801755a <_printf_common+0x26>
 8017556:	3301      	adds	r3, #1
 8017558:	6033      	str	r3, [r6, #0]
 801755a:	6823      	ldr	r3, [r4, #0]
 801755c:	0699      	lsls	r1, r3, #26
 801755e:	bf42      	ittt	mi
 8017560:	6833      	ldrmi	r3, [r6, #0]
 8017562:	3302      	addmi	r3, #2
 8017564:	6033      	strmi	r3, [r6, #0]
 8017566:	6825      	ldr	r5, [r4, #0]
 8017568:	f015 0506 	ands.w	r5, r5, #6
 801756c:	d106      	bne.n	801757c <_printf_common+0x48>
 801756e:	f104 0a19 	add.w	sl, r4, #25
 8017572:	68e3      	ldr	r3, [r4, #12]
 8017574:	6832      	ldr	r2, [r6, #0]
 8017576:	1a9b      	subs	r3, r3, r2
 8017578:	42ab      	cmp	r3, r5
 801757a:	dc26      	bgt.n	80175ca <_printf_common+0x96>
 801757c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8017580:	6822      	ldr	r2, [r4, #0]
 8017582:	3b00      	subs	r3, #0
 8017584:	bf18      	it	ne
 8017586:	2301      	movne	r3, #1
 8017588:	0692      	lsls	r2, r2, #26
 801758a:	d42b      	bmi.n	80175e4 <_printf_common+0xb0>
 801758c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8017590:	4641      	mov	r1, r8
 8017592:	4638      	mov	r0, r7
 8017594:	47c8      	blx	r9
 8017596:	3001      	adds	r0, #1
 8017598:	d01e      	beq.n	80175d8 <_printf_common+0xa4>
 801759a:	6823      	ldr	r3, [r4, #0]
 801759c:	6922      	ldr	r2, [r4, #16]
 801759e:	f003 0306 	and.w	r3, r3, #6
 80175a2:	2b04      	cmp	r3, #4
 80175a4:	bf02      	ittt	eq
 80175a6:	68e5      	ldreq	r5, [r4, #12]
 80175a8:	6833      	ldreq	r3, [r6, #0]
 80175aa:	1aed      	subeq	r5, r5, r3
 80175ac:	68a3      	ldr	r3, [r4, #8]
 80175ae:	bf0c      	ite	eq
 80175b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80175b4:	2500      	movne	r5, #0
 80175b6:	4293      	cmp	r3, r2
 80175b8:	bfc4      	itt	gt
 80175ba:	1a9b      	subgt	r3, r3, r2
 80175bc:	18ed      	addgt	r5, r5, r3
 80175be:	2600      	movs	r6, #0
 80175c0:	341a      	adds	r4, #26
 80175c2:	42b5      	cmp	r5, r6
 80175c4:	d11a      	bne.n	80175fc <_printf_common+0xc8>
 80175c6:	2000      	movs	r0, #0
 80175c8:	e008      	b.n	80175dc <_printf_common+0xa8>
 80175ca:	2301      	movs	r3, #1
 80175cc:	4652      	mov	r2, sl
 80175ce:	4641      	mov	r1, r8
 80175d0:	4638      	mov	r0, r7
 80175d2:	47c8      	blx	r9
 80175d4:	3001      	adds	r0, #1
 80175d6:	d103      	bne.n	80175e0 <_printf_common+0xac>
 80175d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80175dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80175e0:	3501      	adds	r5, #1
 80175e2:	e7c6      	b.n	8017572 <_printf_common+0x3e>
 80175e4:	18e1      	adds	r1, r4, r3
 80175e6:	1c5a      	adds	r2, r3, #1
 80175e8:	2030      	movs	r0, #48	@ 0x30
 80175ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80175ee:	4422      	add	r2, r4
 80175f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80175f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80175f8:	3302      	adds	r3, #2
 80175fa:	e7c7      	b.n	801758c <_printf_common+0x58>
 80175fc:	2301      	movs	r3, #1
 80175fe:	4622      	mov	r2, r4
 8017600:	4641      	mov	r1, r8
 8017602:	4638      	mov	r0, r7
 8017604:	47c8      	blx	r9
 8017606:	3001      	adds	r0, #1
 8017608:	d0e6      	beq.n	80175d8 <_printf_common+0xa4>
 801760a:	3601      	adds	r6, #1
 801760c:	e7d9      	b.n	80175c2 <_printf_common+0x8e>
	...

08017610 <_printf_i>:
 8017610:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017614:	7e0f      	ldrb	r7, [r1, #24]
 8017616:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8017618:	2f78      	cmp	r7, #120	@ 0x78
 801761a:	4691      	mov	r9, r2
 801761c:	4680      	mov	r8, r0
 801761e:	460c      	mov	r4, r1
 8017620:	469a      	mov	sl, r3
 8017622:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8017626:	d807      	bhi.n	8017638 <_printf_i+0x28>
 8017628:	2f62      	cmp	r7, #98	@ 0x62
 801762a:	d80a      	bhi.n	8017642 <_printf_i+0x32>
 801762c:	2f00      	cmp	r7, #0
 801762e:	f000 80d2 	beq.w	80177d6 <_printf_i+0x1c6>
 8017632:	2f58      	cmp	r7, #88	@ 0x58
 8017634:	f000 80b9 	beq.w	80177aa <_printf_i+0x19a>
 8017638:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801763c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8017640:	e03a      	b.n	80176b8 <_printf_i+0xa8>
 8017642:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8017646:	2b15      	cmp	r3, #21
 8017648:	d8f6      	bhi.n	8017638 <_printf_i+0x28>
 801764a:	a101      	add	r1, pc, #4	@ (adr r1, 8017650 <_printf_i+0x40>)
 801764c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017650:	080176a9 	.word	0x080176a9
 8017654:	080176bd 	.word	0x080176bd
 8017658:	08017639 	.word	0x08017639
 801765c:	08017639 	.word	0x08017639
 8017660:	08017639 	.word	0x08017639
 8017664:	08017639 	.word	0x08017639
 8017668:	080176bd 	.word	0x080176bd
 801766c:	08017639 	.word	0x08017639
 8017670:	08017639 	.word	0x08017639
 8017674:	08017639 	.word	0x08017639
 8017678:	08017639 	.word	0x08017639
 801767c:	080177bd 	.word	0x080177bd
 8017680:	080176e7 	.word	0x080176e7
 8017684:	08017777 	.word	0x08017777
 8017688:	08017639 	.word	0x08017639
 801768c:	08017639 	.word	0x08017639
 8017690:	080177df 	.word	0x080177df
 8017694:	08017639 	.word	0x08017639
 8017698:	080176e7 	.word	0x080176e7
 801769c:	08017639 	.word	0x08017639
 80176a0:	08017639 	.word	0x08017639
 80176a4:	0801777f 	.word	0x0801777f
 80176a8:	6833      	ldr	r3, [r6, #0]
 80176aa:	1d1a      	adds	r2, r3, #4
 80176ac:	681b      	ldr	r3, [r3, #0]
 80176ae:	6032      	str	r2, [r6, #0]
 80176b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80176b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80176b8:	2301      	movs	r3, #1
 80176ba:	e09d      	b.n	80177f8 <_printf_i+0x1e8>
 80176bc:	6833      	ldr	r3, [r6, #0]
 80176be:	6820      	ldr	r0, [r4, #0]
 80176c0:	1d19      	adds	r1, r3, #4
 80176c2:	6031      	str	r1, [r6, #0]
 80176c4:	0606      	lsls	r6, r0, #24
 80176c6:	d501      	bpl.n	80176cc <_printf_i+0xbc>
 80176c8:	681d      	ldr	r5, [r3, #0]
 80176ca:	e003      	b.n	80176d4 <_printf_i+0xc4>
 80176cc:	0645      	lsls	r5, r0, #25
 80176ce:	d5fb      	bpl.n	80176c8 <_printf_i+0xb8>
 80176d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80176d4:	2d00      	cmp	r5, #0
 80176d6:	da03      	bge.n	80176e0 <_printf_i+0xd0>
 80176d8:	232d      	movs	r3, #45	@ 0x2d
 80176da:	426d      	negs	r5, r5
 80176dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80176e0:	4859      	ldr	r0, [pc, #356]	@ (8017848 <_printf_i+0x238>)
 80176e2:	230a      	movs	r3, #10
 80176e4:	e011      	b.n	801770a <_printf_i+0xfa>
 80176e6:	6821      	ldr	r1, [r4, #0]
 80176e8:	6833      	ldr	r3, [r6, #0]
 80176ea:	0608      	lsls	r0, r1, #24
 80176ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80176f0:	d402      	bmi.n	80176f8 <_printf_i+0xe8>
 80176f2:	0649      	lsls	r1, r1, #25
 80176f4:	bf48      	it	mi
 80176f6:	b2ad      	uxthmi	r5, r5
 80176f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80176fa:	4853      	ldr	r0, [pc, #332]	@ (8017848 <_printf_i+0x238>)
 80176fc:	6033      	str	r3, [r6, #0]
 80176fe:	bf14      	ite	ne
 8017700:	230a      	movne	r3, #10
 8017702:	2308      	moveq	r3, #8
 8017704:	2100      	movs	r1, #0
 8017706:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801770a:	6866      	ldr	r6, [r4, #4]
 801770c:	60a6      	str	r6, [r4, #8]
 801770e:	2e00      	cmp	r6, #0
 8017710:	bfa2      	ittt	ge
 8017712:	6821      	ldrge	r1, [r4, #0]
 8017714:	f021 0104 	bicge.w	r1, r1, #4
 8017718:	6021      	strge	r1, [r4, #0]
 801771a:	b90d      	cbnz	r5, 8017720 <_printf_i+0x110>
 801771c:	2e00      	cmp	r6, #0
 801771e:	d04b      	beq.n	80177b8 <_printf_i+0x1a8>
 8017720:	4616      	mov	r6, r2
 8017722:	fbb5 f1f3 	udiv	r1, r5, r3
 8017726:	fb03 5711 	mls	r7, r3, r1, r5
 801772a:	5dc7      	ldrb	r7, [r0, r7]
 801772c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017730:	462f      	mov	r7, r5
 8017732:	42bb      	cmp	r3, r7
 8017734:	460d      	mov	r5, r1
 8017736:	d9f4      	bls.n	8017722 <_printf_i+0x112>
 8017738:	2b08      	cmp	r3, #8
 801773a:	d10b      	bne.n	8017754 <_printf_i+0x144>
 801773c:	6823      	ldr	r3, [r4, #0]
 801773e:	07df      	lsls	r7, r3, #31
 8017740:	d508      	bpl.n	8017754 <_printf_i+0x144>
 8017742:	6923      	ldr	r3, [r4, #16]
 8017744:	6861      	ldr	r1, [r4, #4]
 8017746:	4299      	cmp	r1, r3
 8017748:	bfde      	ittt	le
 801774a:	2330      	movle	r3, #48	@ 0x30
 801774c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8017750:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8017754:	1b92      	subs	r2, r2, r6
 8017756:	6122      	str	r2, [r4, #16]
 8017758:	f8cd a000 	str.w	sl, [sp]
 801775c:	464b      	mov	r3, r9
 801775e:	aa03      	add	r2, sp, #12
 8017760:	4621      	mov	r1, r4
 8017762:	4640      	mov	r0, r8
 8017764:	f7ff fee6 	bl	8017534 <_printf_common>
 8017768:	3001      	adds	r0, #1
 801776a:	d14a      	bne.n	8017802 <_printf_i+0x1f2>
 801776c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017770:	b004      	add	sp, #16
 8017772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017776:	6823      	ldr	r3, [r4, #0]
 8017778:	f043 0320 	orr.w	r3, r3, #32
 801777c:	6023      	str	r3, [r4, #0]
 801777e:	4833      	ldr	r0, [pc, #204]	@ (801784c <_printf_i+0x23c>)
 8017780:	2778      	movs	r7, #120	@ 0x78
 8017782:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8017786:	6823      	ldr	r3, [r4, #0]
 8017788:	6831      	ldr	r1, [r6, #0]
 801778a:	061f      	lsls	r7, r3, #24
 801778c:	f851 5b04 	ldr.w	r5, [r1], #4
 8017790:	d402      	bmi.n	8017798 <_printf_i+0x188>
 8017792:	065f      	lsls	r7, r3, #25
 8017794:	bf48      	it	mi
 8017796:	b2ad      	uxthmi	r5, r5
 8017798:	6031      	str	r1, [r6, #0]
 801779a:	07d9      	lsls	r1, r3, #31
 801779c:	bf44      	itt	mi
 801779e:	f043 0320 	orrmi.w	r3, r3, #32
 80177a2:	6023      	strmi	r3, [r4, #0]
 80177a4:	b11d      	cbz	r5, 80177ae <_printf_i+0x19e>
 80177a6:	2310      	movs	r3, #16
 80177a8:	e7ac      	b.n	8017704 <_printf_i+0xf4>
 80177aa:	4827      	ldr	r0, [pc, #156]	@ (8017848 <_printf_i+0x238>)
 80177ac:	e7e9      	b.n	8017782 <_printf_i+0x172>
 80177ae:	6823      	ldr	r3, [r4, #0]
 80177b0:	f023 0320 	bic.w	r3, r3, #32
 80177b4:	6023      	str	r3, [r4, #0]
 80177b6:	e7f6      	b.n	80177a6 <_printf_i+0x196>
 80177b8:	4616      	mov	r6, r2
 80177ba:	e7bd      	b.n	8017738 <_printf_i+0x128>
 80177bc:	6833      	ldr	r3, [r6, #0]
 80177be:	6825      	ldr	r5, [r4, #0]
 80177c0:	6961      	ldr	r1, [r4, #20]
 80177c2:	1d18      	adds	r0, r3, #4
 80177c4:	6030      	str	r0, [r6, #0]
 80177c6:	062e      	lsls	r6, r5, #24
 80177c8:	681b      	ldr	r3, [r3, #0]
 80177ca:	d501      	bpl.n	80177d0 <_printf_i+0x1c0>
 80177cc:	6019      	str	r1, [r3, #0]
 80177ce:	e002      	b.n	80177d6 <_printf_i+0x1c6>
 80177d0:	0668      	lsls	r0, r5, #25
 80177d2:	d5fb      	bpl.n	80177cc <_printf_i+0x1bc>
 80177d4:	8019      	strh	r1, [r3, #0]
 80177d6:	2300      	movs	r3, #0
 80177d8:	6123      	str	r3, [r4, #16]
 80177da:	4616      	mov	r6, r2
 80177dc:	e7bc      	b.n	8017758 <_printf_i+0x148>
 80177de:	6833      	ldr	r3, [r6, #0]
 80177e0:	1d1a      	adds	r2, r3, #4
 80177e2:	6032      	str	r2, [r6, #0]
 80177e4:	681e      	ldr	r6, [r3, #0]
 80177e6:	6862      	ldr	r2, [r4, #4]
 80177e8:	2100      	movs	r1, #0
 80177ea:	4630      	mov	r0, r6
 80177ec:	f7e8 fd20 	bl	8000230 <memchr>
 80177f0:	b108      	cbz	r0, 80177f6 <_printf_i+0x1e6>
 80177f2:	1b80      	subs	r0, r0, r6
 80177f4:	6060      	str	r0, [r4, #4]
 80177f6:	6863      	ldr	r3, [r4, #4]
 80177f8:	6123      	str	r3, [r4, #16]
 80177fa:	2300      	movs	r3, #0
 80177fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017800:	e7aa      	b.n	8017758 <_printf_i+0x148>
 8017802:	6923      	ldr	r3, [r4, #16]
 8017804:	4632      	mov	r2, r6
 8017806:	4649      	mov	r1, r9
 8017808:	4640      	mov	r0, r8
 801780a:	47d0      	blx	sl
 801780c:	3001      	adds	r0, #1
 801780e:	d0ad      	beq.n	801776c <_printf_i+0x15c>
 8017810:	6823      	ldr	r3, [r4, #0]
 8017812:	079b      	lsls	r3, r3, #30
 8017814:	d413      	bmi.n	801783e <_printf_i+0x22e>
 8017816:	68e0      	ldr	r0, [r4, #12]
 8017818:	9b03      	ldr	r3, [sp, #12]
 801781a:	4298      	cmp	r0, r3
 801781c:	bfb8      	it	lt
 801781e:	4618      	movlt	r0, r3
 8017820:	e7a6      	b.n	8017770 <_printf_i+0x160>
 8017822:	2301      	movs	r3, #1
 8017824:	4632      	mov	r2, r6
 8017826:	4649      	mov	r1, r9
 8017828:	4640      	mov	r0, r8
 801782a:	47d0      	blx	sl
 801782c:	3001      	adds	r0, #1
 801782e:	d09d      	beq.n	801776c <_printf_i+0x15c>
 8017830:	3501      	adds	r5, #1
 8017832:	68e3      	ldr	r3, [r4, #12]
 8017834:	9903      	ldr	r1, [sp, #12]
 8017836:	1a5b      	subs	r3, r3, r1
 8017838:	42ab      	cmp	r3, r5
 801783a:	dcf2      	bgt.n	8017822 <_printf_i+0x212>
 801783c:	e7eb      	b.n	8017816 <_printf_i+0x206>
 801783e:	2500      	movs	r5, #0
 8017840:	f104 0619 	add.w	r6, r4, #25
 8017844:	e7f5      	b.n	8017832 <_printf_i+0x222>
 8017846:	bf00      	nop
 8017848:	0801ad70 	.word	0x0801ad70
 801784c:	0801ad81 	.word	0x0801ad81

08017850 <std>:
 8017850:	2300      	movs	r3, #0
 8017852:	b510      	push	{r4, lr}
 8017854:	4604      	mov	r4, r0
 8017856:	e9c0 3300 	strd	r3, r3, [r0]
 801785a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801785e:	6083      	str	r3, [r0, #8]
 8017860:	8181      	strh	r1, [r0, #12]
 8017862:	6643      	str	r3, [r0, #100]	@ 0x64
 8017864:	81c2      	strh	r2, [r0, #14]
 8017866:	6183      	str	r3, [r0, #24]
 8017868:	4619      	mov	r1, r3
 801786a:	2208      	movs	r2, #8
 801786c:	305c      	adds	r0, #92	@ 0x5c
 801786e:	f000 faab 	bl	8017dc8 <memset>
 8017872:	4b0d      	ldr	r3, [pc, #52]	@ (80178a8 <std+0x58>)
 8017874:	6263      	str	r3, [r4, #36]	@ 0x24
 8017876:	4b0d      	ldr	r3, [pc, #52]	@ (80178ac <std+0x5c>)
 8017878:	62a3      	str	r3, [r4, #40]	@ 0x28
 801787a:	4b0d      	ldr	r3, [pc, #52]	@ (80178b0 <std+0x60>)
 801787c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801787e:	4b0d      	ldr	r3, [pc, #52]	@ (80178b4 <std+0x64>)
 8017880:	6323      	str	r3, [r4, #48]	@ 0x30
 8017882:	4b0d      	ldr	r3, [pc, #52]	@ (80178b8 <std+0x68>)
 8017884:	6224      	str	r4, [r4, #32]
 8017886:	429c      	cmp	r4, r3
 8017888:	d006      	beq.n	8017898 <std+0x48>
 801788a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801788e:	4294      	cmp	r4, r2
 8017890:	d002      	beq.n	8017898 <std+0x48>
 8017892:	33d0      	adds	r3, #208	@ 0xd0
 8017894:	429c      	cmp	r4, r3
 8017896:	d105      	bne.n	80178a4 <std+0x54>
 8017898:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801789c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80178a0:	f000 bbaa 	b.w	8017ff8 <__retarget_lock_init_recursive>
 80178a4:	bd10      	pop	{r4, pc}
 80178a6:	bf00      	nop
 80178a8:	08017b55 	.word	0x08017b55
 80178ac:	08017b77 	.word	0x08017b77
 80178b0:	08017baf 	.word	0x08017baf
 80178b4:	08017bd3 	.word	0x08017bd3
 80178b8:	2001130c 	.word	0x2001130c

080178bc <stdio_exit_handler>:
 80178bc:	4a02      	ldr	r2, [pc, #8]	@ (80178c8 <stdio_exit_handler+0xc>)
 80178be:	4903      	ldr	r1, [pc, #12]	@ (80178cc <stdio_exit_handler+0x10>)
 80178c0:	4803      	ldr	r0, [pc, #12]	@ (80178d0 <stdio_exit_handler+0x14>)
 80178c2:	f000 b869 	b.w	8017998 <_fwalk_sglue>
 80178c6:	bf00      	nop
 80178c8:	200000bc 	.word	0x200000bc
 80178cc:	08019afd 	.word	0x08019afd
 80178d0:	200000cc 	.word	0x200000cc

080178d4 <cleanup_stdio>:
 80178d4:	6841      	ldr	r1, [r0, #4]
 80178d6:	4b0c      	ldr	r3, [pc, #48]	@ (8017908 <cleanup_stdio+0x34>)
 80178d8:	4299      	cmp	r1, r3
 80178da:	b510      	push	{r4, lr}
 80178dc:	4604      	mov	r4, r0
 80178de:	d001      	beq.n	80178e4 <cleanup_stdio+0x10>
 80178e0:	f002 f90c 	bl	8019afc <_fflush_r>
 80178e4:	68a1      	ldr	r1, [r4, #8]
 80178e6:	4b09      	ldr	r3, [pc, #36]	@ (801790c <cleanup_stdio+0x38>)
 80178e8:	4299      	cmp	r1, r3
 80178ea:	d002      	beq.n	80178f2 <cleanup_stdio+0x1e>
 80178ec:	4620      	mov	r0, r4
 80178ee:	f002 f905 	bl	8019afc <_fflush_r>
 80178f2:	68e1      	ldr	r1, [r4, #12]
 80178f4:	4b06      	ldr	r3, [pc, #24]	@ (8017910 <cleanup_stdio+0x3c>)
 80178f6:	4299      	cmp	r1, r3
 80178f8:	d004      	beq.n	8017904 <cleanup_stdio+0x30>
 80178fa:	4620      	mov	r0, r4
 80178fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017900:	f002 b8fc 	b.w	8019afc <_fflush_r>
 8017904:	bd10      	pop	{r4, pc}
 8017906:	bf00      	nop
 8017908:	2001130c 	.word	0x2001130c
 801790c:	20011374 	.word	0x20011374
 8017910:	200113dc 	.word	0x200113dc

08017914 <global_stdio_init.part.0>:
 8017914:	b510      	push	{r4, lr}
 8017916:	4b0b      	ldr	r3, [pc, #44]	@ (8017944 <global_stdio_init.part.0+0x30>)
 8017918:	4c0b      	ldr	r4, [pc, #44]	@ (8017948 <global_stdio_init.part.0+0x34>)
 801791a:	4a0c      	ldr	r2, [pc, #48]	@ (801794c <global_stdio_init.part.0+0x38>)
 801791c:	601a      	str	r2, [r3, #0]
 801791e:	4620      	mov	r0, r4
 8017920:	2200      	movs	r2, #0
 8017922:	2104      	movs	r1, #4
 8017924:	f7ff ff94 	bl	8017850 <std>
 8017928:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801792c:	2201      	movs	r2, #1
 801792e:	2109      	movs	r1, #9
 8017930:	f7ff ff8e 	bl	8017850 <std>
 8017934:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8017938:	2202      	movs	r2, #2
 801793a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801793e:	2112      	movs	r1, #18
 8017940:	f7ff bf86 	b.w	8017850 <std>
 8017944:	20011444 	.word	0x20011444
 8017948:	2001130c 	.word	0x2001130c
 801794c:	080178bd 	.word	0x080178bd

08017950 <__sfp_lock_acquire>:
 8017950:	4801      	ldr	r0, [pc, #4]	@ (8017958 <__sfp_lock_acquire+0x8>)
 8017952:	f000 bb52 	b.w	8017ffa <__retarget_lock_acquire_recursive>
 8017956:	bf00      	nop
 8017958:	2001144e 	.word	0x2001144e

0801795c <__sfp_lock_release>:
 801795c:	4801      	ldr	r0, [pc, #4]	@ (8017964 <__sfp_lock_release+0x8>)
 801795e:	f000 bb4d 	b.w	8017ffc <__retarget_lock_release_recursive>
 8017962:	bf00      	nop
 8017964:	2001144e 	.word	0x2001144e

08017968 <__sinit>:
 8017968:	b510      	push	{r4, lr}
 801796a:	4604      	mov	r4, r0
 801796c:	f7ff fff0 	bl	8017950 <__sfp_lock_acquire>
 8017970:	6a23      	ldr	r3, [r4, #32]
 8017972:	b11b      	cbz	r3, 801797c <__sinit+0x14>
 8017974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017978:	f7ff bff0 	b.w	801795c <__sfp_lock_release>
 801797c:	4b04      	ldr	r3, [pc, #16]	@ (8017990 <__sinit+0x28>)
 801797e:	6223      	str	r3, [r4, #32]
 8017980:	4b04      	ldr	r3, [pc, #16]	@ (8017994 <__sinit+0x2c>)
 8017982:	681b      	ldr	r3, [r3, #0]
 8017984:	2b00      	cmp	r3, #0
 8017986:	d1f5      	bne.n	8017974 <__sinit+0xc>
 8017988:	f7ff ffc4 	bl	8017914 <global_stdio_init.part.0>
 801798c:	e7f2      	b.n	8017974 <__sinit+0xc>
 801798e:	bf00      	nop
 8017990:	080178d5 	.word	0x080178d5
 8017994:	20011444 	.word	0x20011444

08017998 <_fwalk_sglue>:
 8017998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801799c:	4607      	mov	r7, r0
 801799e:	4688      	mov	r8, r1
 80179a0:	4614      	mov	r4, r2
 80179a2:	2600      	movs	r6, #0
 80179a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80179a8:	f1b9 0901 	subs.w	r9, r9, #1
 80179ac:	d505      	bpl.n	80179ba <_fwalk_sglue+0x22>
 80179ae:	6824      	ldr	r4, [r4, #0]
 80179b0:	2c00      	cmp	r4, #0
 80179b2:	d1f7      	bne.n	80179a4 <_fwalk_sglue+0xc>
 80179b4:	4630      	mov	r0, r6
 80179b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80179ba:	89ab      	ldrh	r3, [r5, #12]
 80179bc:	2b01      	cmp	r3, #1
 80179be:	d907      	bls.n	80179d0 <_fwalk_sglue+0x38>
 80179c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80179c4:	3301      	adds	r3, #1
 80179c6:	d003      	beq.n	80179d0 <_fwalk_sglue+0x38>
 80179c8:	4629      	mov	r1, r5
 80179ca:	4638      	mov	r0, r7
 80179cc:	47c0      	blx	r8
 80179ce:	4306      	orrs	r6, r0
 80179d0:	3568      	adds	r5, #104	@ 0x68
 80179d2:	e7e9      	b.n	80179a8 <_fwalk_sglue+0x10>

080179d4 <_fwrite_r>:
 80179d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80179d8:	9c08      	ldr	r4, [sp, #32]
 80179da:	468a      	mov	sl, r1
 80179dc:	4690      	mov	r8, r2
 80179de:	fb02 f903 	mul.w	r9, r2, r3
 80179e2:	4606      	mov	r6, r0
 80179e4:	b118      	cbz	r0, 80179ee <_fwrite_r+0x1a>
 80179e6:	6a03      	ldr	r3, [r0, #32]
 80179e8:	b90b      	cbnz	r3, 80179ee <_fwrite_r+0x1a>
 80179ea:	f7ff ffbd 	bl	8017968 <__sinit>
 80179ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80179f0:	07dd      	lsls	r5, r3, #31
 80179f2:	d405      	bmi.n	8017a00 <_fwrite_r+0x2c>
 80179f4:	89a3      	ldrh	r3, [r4, #12]
 80179f6:	0598      	lsls	r0, r3, #22
 80179f8:	d402      	bmi.n	8017a00 <_fwrite_r+0x2c>
 80179fa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80179fc:	f000 fafd 	bl	8017ffa <__retarget_lock_acquire_recursive>
 8017a00:	89a3      	ldrh	r3, [r4, #12]
 8017a02:	0719      	lsls	r1, r3, #28
 8017a04:	d516      	bpl.n	8017a34 <_fwrite_r+0x60>
 8017a06:	6923      	ldr	r3, [r4, #16]
 8017a08:	b1a3      	cbz	r3, 8017a34 <_fwrite_r+0x60>
 8017a0a:	2500      	movs	r5, #0
 8017a0c:	454d      	cmp	r5, r9
 8017a0e:	d01f      	beq.n	8017a50 <_fwrite_r+0x7c>
 8017a10:	68a7      	ldr	r7, [r4, #8]
 8017a12:	f81a 1005 	ldrb.w	r1, [sl, r5]
 8017a16:	3f01      	subs	r7, #1
 8017a18:	2f00      	cmp	r7, #0
 8017a1a:	60a7      	str	r7, [r4, #8]
 8017a1c:	da04      	bge.n	8017a28 <_fwrite_r+0x54>
 8017a1e:	69a3      	ldr	r3, [r4, #24]
 8017a20:	429f      	cmp	r7, r3
 8017a22:	db0f      	blt.n	8017a44 <_fwrite_r+0x70>
 8017a24:	290a      	cmp	r1, #10
 8017a26:	d00d      	beq.n	8017a44 <_fwrite_r+0x70>
 8017a28:	6823      	ldr	r3, [r4, #0]
 8017a2a:	1c5a      	adds	r2, r3, #1
 8017a2c:	6022      	str	r2, [r4, #0]
 8017a2e:	7019      	strb	r1, [r3, #0]
 8017a30:	3501      	adds	r5, #1
 8017a32:	e7eb      	b.n	8017a0c <_fwrite_r+0x38>
 8017a34:	4621      	mov	r1, r4
 8017a36:	4630      	mov	r0, r6
 8017a38:	f000 f946 	bl	8017cc8 <__swsetup_r>
 8017a3c:	2800      	cmp	r0, #0
 8017a3e:	d0e4      	beq.n	8017a0a <_fwrite_r+0x36>
 8017a40:	2500      	movs	r5, #0
 8017a42:	e005      	b.n	8017a50 <_fwrite_r+0x7c>
 8017a44:	4622      	mov	r2, r4
 8017a46:	4630      	mov	r0, r6
 8017a48:	f000 f900 	bl	8017c4c <__swbuf_r>
 8017a4c:	3001      	adds	r0, #1
 8017a4e:	d1ef      	bne.n	8017a30 <_fwrite_r+0x5c>
 8017a50:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017a52:	07da      	lsls	r2, r3, #31
 8017a54:	d405      	bmi.n	8017a62 <_fwrite_r+0x8e>
 8017a56:	89a3      	ldrh	r3, [r4, #12]
 8017a58:	059b      	lsls	r3, r3, #22
 8017a5a:	d402      	bmi.n	8017a62 <_fwrite_r+0x8e>
 8017a5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017a5e:	f000 facd 	bl	8017ffc <__retarget_lock_release_recursive>
 8017a62:	fbb5 f0f8 	udiv	r0, r5, r8
 8017a66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08017a6c <fwrite>:
 8017a6c:	b507      	push	{r0, r1, r2, lr}
 8017a6e:	9300      	str	r3, [sp, #0]
 8017a70:	4613      	mov	r3, r2
 8017a72:	460a      	mov	r2, r1
 8017a74:	4601      	mov	r1, r0
 8017a76:	4803      	ldr	r0, [pc, #12]	@ (8017a84 <fwrite+0x18>)
 8017a78:	6800      	ldr	r0, [r0, #0]
 8017a7a:	f7ff ffab 	bl	80179d4 <_fwrite_r>
 8017a7e:	b003      	add	sp, #12
 8017a80:	f85d fb04 	ldr.w	pc, [sp], #4
 8017a84:	200000c8 	.word	0x200000c8

08017a88 <iprintf>:
 8017a88:	b40f      	push	{r0, r1, r2, r3}
 8017a8a:	b507      	push	{r0, r1, r2, lr}
 8017a8c:	4906      	ldr	r1, [pc, #24]	@ (8017aa8 <iprintf+0x20>)
 8017a8e:	ab04      	add	r3, sp, #16
 8017a90:	6808      	ldr	r0, [r1, #0]
 8017a92:	f853 2b04 	ldr.w	r2, [r3], #4
 8017a96:	6881      	ldr	r1, [r0, #8]
 8017a98:	9301      	str	r3, [sp, #4]
 8017a9a:	f001 fe93 	bl	80197c4 <_vfiprintf_r>
 8017a9e:	b003      	add	sp, #12
 8017aa0:	f85d eb04 	ldr.w	lr, [sp], #4
 8017aa4:	b004      	add	sp, #16
 8017aa6:	4770      	bx	lr
 8017aa8:	200000c8 	.word	0x200000c8

08017aac <sniprintf>:
 8017aac:	b40c      	push	{r2, r3}
 8017aae:	b530      	push	{r4, r5, lr}
 8017ab0:	4b17      	ldr	r3, [pc, #92]	@ (8017b10 <sniprintf+0x64>)
 8017ab2:	1e0c      	subs	r4, r1, #0
 8017ab4:	681d      	ldr	r5, [r3, #0]
 8017ab6:	b09d      	sub	sp, #116	@ 0x74
 8017ab8:	da08      	bge.n	8017acc <sniprintf+0x20>
 8017aba:	238b      	movs	r3, #139	@ 0x8b
 8017abc:	602b      	str	r3, [r5, #0]
 8017abe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017ac2:	b01d      	add	sp, #116	@ 0x74
 8017ac4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017ac8:	b002      	add	sp, #8
 8017aca:	4770      	bx	lr
 8017acc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8017ad0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017ad4:	bf14      	ite	ne
 8017ad6:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8017ada:	4623      	moveq	r3, r4
 8017adc:	9304      	str	r3, [sp, #16]
 8017ade:	9307      	str	r3, [sp, #28]
 8017ae0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017ae4:	9002      	str	r0, [sp, #8]
 8017ae6:	9006      	str	r0, [sp, #24]
 8017ae8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017aec:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8017aee:	ab21      	add	r3, sp, #132	@ 0x84
 8017af0:	a902      	add	r1, sp, #8
 8017af2:	4628      	mov	r0, r5
 8017af4:	9301      	str	r3, [sp, #4]
 8017af6:	f001 fd3f 	bl	8019578 <_svfiprintf_r>
 8017afa:	1c43      	adds	r3, r0, #1
 8017afc:	bfbc      	itt	lt
 8017afe:	238b      	movlt	r3, #139	@ 0x8b
 8017b00:	602b      	strlt	r3, [r5, #0]
 8017b02:	2c00      	cmp	r4, #0
 8017b04:	d0dd      	beq.n	8017ac2 <sniprintf+0x16>
 8017b06:	9b02      	ldr	r3, [sp, #8]
 8017b08:	2200      	movs	r2, #0
 8017b0a:	701a      	strb	r2, [r3, #0]
 8017b0c:	e7d9      	b.n	8017ac2 <sniprintf+0x16>
 8017b0e:	bf00      	nop
 8017b10:	200000c8 	.word	0x200000c8

08017b14 <siprintf>:
 8017b14:	b40e      	push	{r1, r2, r3}
 8017b16:	b500      	push	{lr}
 8017b18:	b09c      	sub	sp, #112	@ 0x70
 8017b1a:	ab1d      	add	r3, sp, #116	@ 0x74
 8017b1c:	9002      	str	r0, [sp, #8]
 8017b1e:	9006      	str	r0, [sp, #24]
 8017b20:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8017b24:	4809      	ldr	r0, [pc, #36]	@ (8017b4c <siprintf+0x38>)
 8017b26:	9107      	str	r1, [sp, #28]
 8017b28:	9104      	str	r1, [sp, #16]
 8017b2a:	4909      	ldr	r1, [pc, #36]	@ (8017b50 <siprintf+0x3c>)
 8017b2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8017b30:	9105      	str	r1, [sp, #20]
 8017b32:	6800      	ldr	r0, [r0, #0]
 8017b34:	9301      	str	r3, [sp, #4]
 8017b36:	a902      	add	r1, sp, #8
 8017b38:	f001 fd1e 	bl	8019578 <_svfiprintf_r>
 8017b3c:	9b02      	ldr	r3, [sp, #8]
 8017b3e:	2200      	movs	r2, #0
 8017b40:	701a      	strb	r2, [r3, #0]
 8017b42:	b01c      	add	sp, #112	@ 0x70
 8017b44:	f85d eb04 	ldr.w	lr, [sp], #4
 8017b48:	b003      	add	sp, #12
 8017b4a:	4770      	bx	lr
 8017b4c:	200000c8 	.word	0x200000c8
 8017b50:	ffff0208 	.word	0xffff0208

08017b54 <__sread>:
 8017b54:	b510      	push	{r4, lr}
 8017b56:	460c      	mov	r4, r1
 8017b58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017b5c:	f000 f9ee 	bl	8017f3c <_read_r>
 8017b60:	2800      	cmp	r0, #0
 8017b62:	bfab      	itete	ge
 8017b64:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8017b66:	89a3      	ldrhlt	r3, [r4, #12]
 8017b68:	181b      	addge	r3, r3, r0
 8017b6a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8017b6e:	bfac      	ite	ge
 8017b70:	6563      	strge	r3, [r4, #84]	@ 0x54
 8017b72:	81a3      	strhlt	r3, [r4, #12]
 8017b74:	bd10      	pop	{r4, pc}

08017b76 <__swrite>:
 8017b76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017b7a:	461f      	mov	r7, r3
 8017b7c:	898b      	ldrh	r3, [r1, #12]
 8017b7e:	05db      	lsls	r3, r3, #23
 8017b80:	4605      	mov	r5, r0
 8017b82:	460c      	mov	r4, r1
 8017b84:	4616      	mov	r6, r2
 8017b86:	d505      	bpl.n	8017b94 <__swrite+0x1e>
 8017b88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017b8c:	2302      	movs	r3, #2
 8017b8e:	2200      	movs	r2, #0
 8017b90:	f000 f9c2 	bl	8017f18 <_lseek_r>
 8017b94:	89a3      	ldrh	r3, [r4, #12]
 8017b96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017b9a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8017b9e:	81a3      	strh	r3, [r4, #12]
 8017ba0:	4632      	mov	r2, r6
 8017ba2:	463b      	mov	r3, r7
 8017ba4:	4628      	mov	r0, r5
 8017ba6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017baa:	f000 b9e9 	b.w	8017f80 <_write_r>

08017bae <__sseek>:
 8017bae:	b510      	push	{r4, lr}
 8017bb0:	460c      	mov	r4, r1
 8017bb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017bb6:	f000 f9af 	bl	8017f18 <_lseek_r>
 8017bba:	1c43      	adds	r3, r0, #1
 8017bbc:	89a3      	ldrh	r3, [r4, #12]
 8017bbe:	bf15      	itete	ne
 8017bc0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8017bc2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8017bc6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8017bca:	81a3      	strheq	r3, [r4, #12]
 8017bcc:	bf18      	it	ne
 8017bce:	81a3      	strhne	r3, [r4, #12]
 8017bd0:	bd10      	pop	{r4, pc}

08017bd2 <__sclose>:
 8017bd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017bd6:	f000 b939 	b.w	8017e4c <_close_r>

08017bda <_vsniprintf_r>:
 8017bda:	b530      	push	{r4, r5, lr}
 8017bdc:	4614      	mov	r4, r2
 8017bde:	2c00      	cmp	r4, #0
 8017be0:	b09b      	sub	sp, #108	@ 0x6c
 8017be2:	4605      	mov	r5, r0
 8017be4:	461a      	mov	r2, r3
 8017be6:	da05      	bge.n	8017bf4 <_vsniprintf_r+0x1a>
 8017be8:	238b      	movs	r3, #139	@ 0x8b
 8017bea:	6003      	str	r3, [r0, #0]
 8017bec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017bf0:	b01b      	add	sp, #108	@ 0x6c
 8017bf2:	bd30      	pop	{r4, r5, pc}
 8017bf4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8017bf8:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017bfc:	bf14      	ite	ne
 8017bfe:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8017c02:	4623      	moveq	r3, r4
 8017c04:	9302      	str	r3, [sp, #8]
 8017c06:	9305      	str	r3, [sp, #20]
 8017c08:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017c0c:	9100      	str	r1, [sp, #0]
 8017c0e:	9104      	str	r1, [sp, #16]
 8017c10:	f8ad 300e 	strh.w	r3, [sp, #14]
 8017c14:	4669      	mov	r1, sp
 8017c16:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8017c18:	f001 fcae 	bl	8019578 <_svfiprintf_r>
 8017c1c:	1c43      	adds	r3, r0, #1
 8017c1e:	bfbc      	itt	lt
 8017c20:	238b      	movlt	r3, #139	@ 0x8b
 8017c22:	602b      	strlt	r3, [r5, #0]
 8017c24:	2c00      	cmp	r4, #0
 8017c26:	d0e3      	beq.n	8017bf0 <_vsniprintf_r+0x16>
 8017c28:	9b00      	ldr	r3, [sp, #0]
 8017c2a:	2200      	movs	r2, #0
 8017c2c:	701a      	strb	r2, [r3, #0]
 8017c2e:	e7df      	b.n	8017bf0 <_vsniprintf_r+0x16>

08017c30 <vsniprintf>:
 8017c30:	b507      	push	{r0, r1, r2, lr}
 8017c32:	9300      	str	r3, [sp, #0]
 8017c34:	4613      	mov	r3, r2
 8017c36:	460a      	mov	r2, r1
 8017c38:	4601      	mov	r1, r0
 8017c3a:	4803      	ldr	r0, [pc, #12]	@ (8017c48 <vsniprintf+0x18>)
 8017c3c:	6800      	ldr	r0, [r0, #0]
 8017c3e:	f7ff ffcc 	bl	8017bda <_vsniprintf_r>
 8017c42:	b003      	add	sp, #12
 8017c44:	f85d fb04 	ldr.w	pc, [sp], #4
 8017c48:	200000c8 	.word	0x200000c8

08017c4c <__swbuf_r>:
 8017c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c4e:	460e      	mov	r6, r1
 8017c50:	4614      	mov	r4, r2
 8017c52:	4605      	mov	r5, r0
 8017c54:	b118      	cbz	r0, 8017c5e <__swbuf_r+0x12>
 8017c56:	6a03      	ldr	r3, [r0, #32]
 8017c58:	b90b      	cbnz	r3, 8017c5e <__swbuf_r+0x12>
 8017c5a:	f7ff fe85 	bl	8017968 <__sinit>
 8017c5e:	69a3      	ldr	r3, [r4, #24]
 8017c60:	60a3      	str	r3, [r4, #8]
 8017c62:	89a3      	ldrh	r3, [r4, #12]
 8017c64:	071a      	lsls	r2, r3, #28
 8017c66:	d501      	bpl.n	8017c6c <__swbuf_r+0x20>
 8017c68:	6923      	ldr	r3, [r4, #16]
 8017c6a:	b943      	cbnz	r3, 8017c7e <__swbuf_r+0x32>
 8017c6c:	4621      	mov	r1, r4
 8017c6e:	4628      	mov	r0, r5
 8017c70:	f000 f82a 	bl	8017cc8 <__swsetup_r>
 8017c74:	b118      	cbz	r0, 8017c7e <__swbuf_r+0x32>
 8017c76:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8017c7a:	4638      	mov	r0, r7
 8017c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017c7e:	6823      	ldr	r3, [r4, #0]
 8017c80:	6922      	ldr	r2, [r4, #16]
 8017c82:	1a98      	subs	r0, r3, r2
 8017c84:	6963      	ldr	r3, [r4, #20]
 8017c86:	b2f6      	uxtb	r6, r6
 8017c88:	4283      	cmp	r3, r0
 8017c8a:	4637      	mov	r7, r6
 8017c8c:	dc05      	bgt.n	8017c9a <__swbuf_r+0x4e>
 8017c8e:	4621      	mov	r1, r4
 8017c90:	4628      	mov	r0, r5
 8017c92:	f001 ff33 	bl	8019afc <_fflush_r>
 8017c96:	2800      	cmp	r0, #0
 8017c98:	d1ed      	bne.n	8017c76 <__swbuf_r+0x2a>
 8017c9a:	68a3      	ldr	r3, [r4, #8]
 8017c9c:	3b01      	subs	r3, #1
 8017c9e:	60a3      	str	r3, [r4, #8]
 8017ca0:	6823      	ldr	r3, [r4, #0]
 8017ca2:	1c5a      	adds	r2, r3, #1
 8017ca4:	6022      	str	r2, [r4, #0]
 8017ca6:	701e      	strb	r6, [r3, #0]
 8017ca8:	6962      	ldr	r2, [r4, #20]
 8017caa:	1c43      	adds	r3, r0, #1
 8017cac:	429a      	cmp	r2, r3
 8017cae:	d004      	beq.n	8017cba <__swbuf_r+0x6e>
 8017cb0:	89a3      	ldrh	r3, [r4, #12]
 8017cb2:	07db      	lsls	r3, r3, #31
 8017cb4:	d5e1      	bpl.n	8017c7a <__swbuf_r+0x2e>
 8017cb6:	2e0a      	cmp	r6, #10
 8017cb8:	d1df      	bne.n	8017c7a <__swbuf_r+0x2e>
 8017cba:	4621      	mov	r1, r4
 8017cbc:	4628      	mov	r0, r5
 8017cbe:	f001 ff1d 	bl	8019afc <_fflush_r>
 8017cc2:	2800      	cmp	r0, #0
 8017cc4:	d0d9      	beq.n	8017c7a <__swbuf_r+0x2e>
 8017cc6:	e7d6      	b.n	8017c76 <__swbuf_r+0x2a>

08017cc8 <__swsetup_r>:
 8017cc8:	b538      	push	{r3, r4, r5, lr}
 8017cca:	4b29      	ldr	r3, [pc, #164]	@ (8017d70 <__swsetup_r+0xa8>)
 8017ccc:	4605      	mov	r5, r0
 8017cce:	6818      	ldr	r0, [r3, #0]
 8017cd0:	460c      	mov	r4, r1
 8017cd2:	b118      	cbz	r0, 8017cdc <__swsetup_r+0x14>
 8017cd4:	6a03      	ldr	r3, [r0, #32]
 8017cd6:	b90b      	cbnz	r3, 8017cdc <__swsetup_r+0x14>
 8017cd8:	f7ff fe46 	bl	8017968 <__sinit>
 8017cdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017ce0:	0719      	lsls	r1, r3, #28
 8017ce2:	d422      	bmi.n	8017d2a <__swsetup_r+0x62>
 8017ce4:	06da      	lsls	r2, r3, #27
 8017ce6:	d407      	bmi.n	8017cf8 <__swsetup_r+0x30>
 8017ce8:	2209      	movs	r2, #9
 8017cea:	602a      	str	r2, [r5, #0]
 8017cec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017cf0:	81a3      	strh	r3, [r4, #12]
 8017cf2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017cf6:	e033      	b.n	8017d60 <__swsetup_r+0x98>
 8017cf8:	0758      	lsls	r0, r3, #29
 8017cfa:	d512      	bpl.n	8017d22 <__swsetup_r+0x5a>
 8017cfc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017cfe:	b141      	cbz	r1, 8017d12 <__swsetup_r+0x4a>
 8017d00:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017d04:	4299      	cmp	r1, r3
 8017d06:	d002      	beq.n	8017d0e <__swsetup_r+0x46>
 8017d08:	4628      	mov	r0, r5
 8017d0a:	f001 f805 	bl	8018d18 <_free_r>
 8017d0e:	2300      	movs	r3, #0
 8017d10:	6363      	str	r3, [r4, #52]	@ 0x34
 8017d12:	89a3      	ldrh	r3, [r4, #12]
 8017d14:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8017d18:	81a3      	strh	r3, [r4, #12]
 8017d1a:	2300      	movs	r3, #0
 8017d1c:	6063      	str	r3, [r4, #4]
 8017d1e:	6923      	ldr	r3, [r4, #16]
 8017d20:	6023      	str	r3, [r4, #0]
 8017d22:	89a3      	ldrh	r3, [r4, #12]
 8017d24:	f043 0308 	orr.w	r3, r3, #8
 8017d28:	81a3      	strh	r3, [r4, #12]
 8017d2a:	6923      	ldr	r3, [r4, #16]
 8017d2c:	b94b      	cbnz	r3, 8017d42 <__swsetup_r+0x7a>
 8017d2e:	89a3      	ldrh	r3, [r4, #12]
 8017d30:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8017d34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017d38:	d003      	beq.n	8017d42 <__swsetup_r+0x7a>
 8017d3a:	4621      	mov	r1, r4
 8017d3c:	4628      	mov	r0, r5
 8017d3e:	f001 ff3d 	bl	8019bbc <__smakebuf_r>
 8017d42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017d46:	f013 0201 	ands.w	r2, r3, #1
 8017d4a:	d00a      	beq.n	8017d62 <__swsetup_r+0x9a>
 8017d4c:	2200      	movs	r2, #0
 8017d4e:	60a2      	str	r2, [r4, #8]
 8017d50:	6962      	ldr	r2, [r4, #20]
 8017d52:	4252      	negs	r2, r2
 8017d54:	61a2      	str	r2, [r4, #24]
 8017d56:	6922      	ldr	r2, [r4, #16]
 8017d58:	b942      	cbnz	r2, 8017d6c <__swsetup_r+0xa4>
 8017d5a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8017d5e:	d1c5      	bne.n	8017cec <__swsetup_r+0x24>
 8017d60:	bd38      	pop	{r3, r4, r5, pc}
 8017d62:	0799      	lsls	r1, r3, #30
 8017d64:	bf58      	it	pl
 8017d66:	6962      	ldrpl	r2, [r4, #20]
 8017d68:	60a2      	str	r2, [r4, #8]
 8017d6a:	e7f4      	b.n	8017d56 <__swsetup_r+0x8e>
 8017d6c:	2000      	movs	r0, #0
 8017d6e:	e7f7      	b.n	8017d60 <__swsetup_r+0x98>
 8017d70:	200000c8 	.word	0x200000c8

08017d74 <memcmp>:
 8017d74:	b510      	push	{r4, lr}
 8017d76:	3901      	subs	r1, #1
 8017d78:	4402      	add	r2, r0
 8017d7a:	4290      	cmp	r0, r2
 8017d7c:	d101      	bne.n	8017d82 <memcmp+0xe>
 8017d7e:	2000      	movs	r0, #0
 8017d80:	e005      	b.n	8017d8e <memcmp+0x1a>
 8017d82:	7803      	ldrb	r3, [r0, #0]
 8017d84:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8017d88:	42a3      	cmp	r3, r4
 8017d8a:	d001      	beq.n	8017d90 <memcmp+0x1c>
 8017d8c:	1b18      	subs	r0, r3, r4
 8017d8e:	bd10      	pop	{r4, pc}
 8017d90:	3001      	adds	r0, #1
 8017d92:	e7f2      	b.n	8017d7a <memcmp+0x6>

08017d94 <memmove>:
 8017d94:	4288      	cmp	r0, r1
 8017d96:	b510      	push	{r4, lr}
 8017d98:	eb01 0402 	add.w	r4, r1, r2
 8017d9c:	d902      	bls.n	8017da4 <memmove+0x10>
 8017d9e:	4284      	cmp	r4, r0
 8017da0:	4623      	mov	r3, r4
 8017da2:	d807      	bhi.n	8017db4 <memmove+0x20>
 8017da4:	1e43      	subs	r3, r0, #1
 8017da6:	42a1      	cmp	r1, r4
 8017da8:	d008      	beq.n	8017dbc <memmove+0x28>
 8017daa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017dae:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017db2:	e7f8      	b.n	8017da6 <memmove+0x12>
 8017db4:	4402      	add	r2, r0
 8017db6:	4601      	mov	r1, r0
 8017db8:	428a      	cmp	r2, r1
 8017dba:	d100      	bne.n	8017dbe <memmove+0x2a>
 8017dbc:	bd10      	pop	{r4, pc}
 8017dbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017dc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017dc6:	e7f7      	b.n	8017db8 <memmove+0x24>

08017dc8 <memset>:
 8017dc8:	4402      	add	r2, r0
 8017dca:	4603      	mov	r3, r0
 8017dcc:	4293      	cmp	r3, r2
 8017dce:	d100      	bne.n	8017dd2 <memset+0xa>
 8017dd0:	4770      	bx	lr
 8017dd2:	f803 1b01 	strb.w	r1, [r3], #1
 8017dd6:	e7f9      	b.n	8017dcc <memset+0x4>

08017dd8 <strchr>:
 8017dd8:	b2c9      	uxtb	r1, r1
 8017dda:	4603      	mov	r3, r0
 8017ddc:	4618      	mov	r0, r3
 8017dde:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017de2:	b112      	cbz	r2, 8017dea <strchr+0x12>
 8017de4:	428a      	cmp	r2, r1
 8017de6:	d1f9      	bne.n	8017ddc <strchr+0x4>
 8017de8:	4770      	bx	lr
 8017dea:	2900      	cmp	r1, #0
 8017dec:	bf18      	it	ne
 8017dee:	2000      	movne	r0, #0
 8017df0:	4770      	bx	lr

08017df2 <strncmp>:
 8017df2:	b510      	push	{r4, lr}
 8017df4:	b16a      	cbz	r2, 8017e12 <strncmp+0x20>
 8017df6:	3901      	subs	r1, #1
 8017df8:	1884      	adds	r4, r0, r2
 8017dfa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017dfe:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8017e02:	429a      	cmp	r2, r3
 8017e04:	d103      	bne.n	8017e0e <strncmp+0x1c>
 8017e06:	42a0      	cmp	r0, r4
 8017e08:	d001      	beq.n	8017e0e <strncmp+0x1c>
 8017e0a:	2a00      	cmp	r2, #0
 8017e0c:	d1f5      	bne.n	8017dfa <strncmp+0x8>
 8017e0e:	1ad0      	subs	r0, r2, r3
 8017e10:	bd10      	pop	{r4, pc}
 8017e12:	4610      	mov	r0, r2
 8017e14:	e7fc      	b.n	8017e10 <strncmp+0x1e>

08017e16 <strstr>:
 8017e16:	780a      	ldrb	r2, [r1, #0]
 8017e18:	b570      	push	{r4, r5, r6, lr}
 8017e1a:	b96a      	cbnz	r2, 8017e38 <strstr+0x22>
 8017e1c:	bd70      	pop	{r4, r5, r6, pc}
 8017e1e:	429a      	cmp	r2, r3
 8017e20:	d109      	bne.n	8017e36 <strstr+0x20>
 8017e22:	460c      	mov	r4, r1
 8017e24:	4605      	mov	r5, r0
 8017e26:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8017e2a:	2b00      	cmp	r3, #0
 8017e2c:	d0f6      	beq.n	8017e1c <strstr+0x6>
 8017e2e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8017e32:	429e      	cmp	r6, r3
 8017e34:	d0f7      	beq.n	8017e26 <strstr+0x10>
 8017e36:	3001      	adds	r0, #1
 8017e38:	7803      	ldrb	r3, [r0, #0]
 8017e3a:	2b00      	cmp	r3, #0
 8017e3c:	d1ef      	bne.n	8017e1e <strstr+0x8>
 8017e3e:	4618      	mov	r0, r3
 8017e40:	e7ec      	b.n	8017e1c <strstr+0x6>
	...

08017e44 <_localeconv_r>:
 8017e44:	4800      	ldr	r0, [pc, #0]	@ (8017e48 <_localeconv_r+0x4>)
 8017e46:	4770      	bx	lr
 8017e48:	20000208 	.word	0x20000208

08017e4c <_close_r>:
 8017e4c:	b538      	push	{r3, r4, r5, lr}
 8017e4e:	4d06      	ldr	r5, [pc, #24]	@ (8017e68 <_close_r+0x1c>)
 8017e50:	2300      	movs	r3, #0
 8017e52:	4604      	mov	r4, r0
 8017e54:	4608      	mov	r0, r1
 8017e56:	602b      	str	r3, [r5, #0]
 8017e58:	f7ea ff70 	bl	8002d3c <_close>
 8017e5c:	1c43      	adds	r3, r0, #1
 8017e5e:	d102      	bne.n	8017e66 <_close_r+0x1a>
 8017e60:	682b      	ldr	r3, [r5, #0]
 8017e62:	b103      	cbz	r3, 8017e66 <_close_r+0x1a>
 8017e64:	6023      	str	r3, [r4, #0]
 8017e66:	bd38      	pop	{r3, r4, r5, pc}
 8017e68:	20011448 	.word	0x20011448

08017e6c <_reclaim_reent>:
 8017e6c:	4b29      	ldr	r3, [pc, #164]	@ (8017f14 <_reclaim_reent+0xa8>)
 8017e6e:	681b      	ldr	r3, [r3, #0]
 8017e70:	4283      	cmp	r3, r0
 8017e72:	b570      	push	{r4, r5, r6, lr}
 8017e74:	4604      	mov	r4, r0
 8017e76:	d04b      	beq.n	8017f10 <_reclaim_reent+0xa4>
 8017e78:	69c3      	ldr	r3, [r0, #28]
 8017e7a:	b1ab      	cbz	r3, 8017ea8 <_reclaim_reent+0x3c>
 8017e7c:	68db      	ldr	r3, [r3, #12]
 8017e7e:	b16b      	cbz	r3, 8017e9c <_reclaim_reent+0x30>
 8017e80:	2500      	movs	r5, #0
 8017e82:	69e3      	ldr	r3, [r4, #28]
 8017e84:	68db      	ldr	r3, [r3, #12]
 8017e86:	5959      	ldr	r1, [r3, r5]
 8017e88:	2900      	cmp	r1, #0
 8017e8a:	d13b      	bne.n	8017f04 <_reclaim_reent+0x98>
 8017e8c:	3504      	adds	r5, #4
 8017e8e:	2d80      	cmp	r5, #128	@ 0x80
 8017e90:	d1f7      	bne.n	8017e82 <_reclaim_reent+0x16>
 8017e92:	69e3      	ldr	r3, [r4, #28]
 8017e94:	4620      	mov	r0, r4
 8017e96:	68d9      	ldr	r1, [r3, #12]
 8017e98:	f000 ff3e 	bl	8018d18 <_free_r>
 8017e9c:	69e3      	ldr	r3, [r4, #28]
 8017e9e:	6819      	ldr	r1, [r3, #0]
 8017ea0:	b111      	cbz	r1, 8017ea8 <_reclaim_reent+0x3c>
 8017ea2:	4620      	mov	r0, r4
 8017ea4:	f000 ff38 	bl	8018d18 <_free_r>
 8017ea8:	6961      	ldr	r1, [r4, #20]
 8017eaa:	b111      	cbz	r1, 8017eb2 <_reclaim_reent+0x46>
 8017eac:	4620      	mov	r0, r4
 8017eae:	f000 ff33 	bl	8018d18 <_free_r>
 8017eb2:	69e1      	ldr	r1, [r4, #28]
 8017eb4:	b111      	cbz	r1, 8017ebc <_reclaim_reent+0x50>
 8017eb6:	4620      	mov	r0, r4
 8017eb8:	f000 ff2e 	bl	8018d18 <_free_r>
 8017ebc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8017ebe:	b111      	cbz	r1, 8017ec6 <_reclaim_reent+0x5a>
 8017ec0:	4620      	mov	r0, r4
 8017ec2:	f000 ff29 	bl	8018d18 <_free_r>
 8017ec6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017ec8:	b111      	cbz	r1, 8017ed0 <_reclaim_reent+0x64>
 8017eca:	4620      	mov	r0, r4
 8017ecc:	f000 ff24 	bl	8018d18 <_free_r>
 8017ed0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8017ed2:	b111      	cbz	r1, 8017eda <_reclaim_reent+0x6e>
 8017ed4:	4620      	mov	r0, r4
 8017ed6:	f000 ff1f 	bl	8018d18 <_free_r>
 8017eda:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8017edc:	b111      	cbz	r1, 8017ee4 <_reclaim_reent+0x78>
 8017ede:	4620      	mov	r0, r4
 8017ee0:	f000 ff1a 	bl	8018d18 <_free_r>
 8017ee4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8017ee6:	b111      	cbz	r1, 8017eee <_reclaim_reent+0x82>
 8017ee8:	4620      	mov	r0, r4
 8017eea:	f000 ff15 	bl	8018d18 <_free_r>
 8017eee:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8017ef0:	b111      	cbz	r1, 8017ef8 <_reclaim_reent+0x8c>
 8017ef2:	4620      	mov	r0, r4
 8017ef4:	f000 ff10 	bl	8018d18 <_free_r>
 8017ef8:	6a23      	ldr	r3, [r4, #32]
 8017efa:	b14b      	cbz	r3, 8017f10 <_reclaim_reent+0xa4>
 8017efc:	4620      	mov	r0, r4
 8017efe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017f02:	4718      	bx	r3
 8017f04:	680e      	ldr	r6, [r1, #0]
 8017f06:	4620      	mov	r0, r4
 8017f08:	f000 ff06 	bl	8018d18 <_free_r>
 8017f0c:	4631      	mov	r1, r6
 8017f0e:	e7bb      	b.n	8017e88 <_reclaim_reent+0x1c>
 8017f10:	bd70      	pop	{r4, r5, r6, pc}
 8017f12:	bf00      	nop
 8017f14:	200000c8 	.word	0x200000c8

08017f18 <_lseek_r>:
 8017f18:	b538      	push	{r3, r4, r5, lr}
 8017f1a:	4d07      	ldr	r5, [pc, #28]	@ (8017f38 <_lseek_r+0x20>)
 8017f1c:	4604      	mov	r4, r0
 8017f1e:	4608      	mov	r0, r1
 8017f20:	4611      	mov	r1, r2
 8017f22:	2200      	movs	r2, #0
 8017f24:	602a      	str	r2, [r5, #0]
 8017f26:	461a      	mov	r2, r3
 8017f28:	f7ea ff2f 	bl	8002d8a <_lseek>
 8017f2c:	1c43      	adds	r3, r0, #1
 8017f2e:	d102      	bne.n	8017f36 <_lseek_r+0x1e>
 8017f30:	682b      	ldr	r3, [r5, #0]
 8017f32:	b103      	cbz	r3, 8017f36 <_lseek_r+0x1e>
 8017f34:	6023      	str	r3, [r4, #0]
 8017f36:	bd38      	pop	{r3, r4, r5, pc}
 8017f38:	20011448 	.word	0x20011448

08017f3c <_read_r>:
 8017f3c:	b538      	push	{r3, r4, r5, lr}
 8017f3e:	4d07      	ldr	r5, [pc, #28]	@ (8017f5c <_read_r+0x20>)
 8017f40:	4604      	mov	r4, r0
 8017f42:	4608      	mov	r0, r1
 8017f44:	4611      	mov	r1, r2
 8017f46:	2200      	movs	r2, #0
 8017f48:	602a      	str	r2, [r5, #0]
 8017f4a:	461a      	mov	r2, r3
 8017f4c:	f7ea febd 	bl	8002cca <_read>
 8017f50:	1c43      	adds	r3, r0, #1
 8017f52:	d102      	bne.n	8017f5a <_read_r+0x1e>
 8017f54:	682b      	ldr	r3, [r5, #0]
 8017f56:	b103      	cbz	r3, 8017f5a <_read_r+0x1e>
 8017f58:	6023      	str	r3, [r4, #0]
 8017f5a:	bd38      	pop	{r3, r4, r5, pc}
 8017f5c:	20011448 	.word	0x20011448

08017f60 <_sbrk_r>:
 8017f60:	b538      	push	{r3, r4, r5, lr}
 8017f62:	4d06      	ldr	r5, [pc, #24]	@ (8017f7c <_sbrk_r+0x1c>)
 8017f64:	2300      	movs	r3, #0
 8017f66:	4604      	mov	r4, r0
 8017f68:	4608      	mov	r0, r1
 8017f6a:	602b      	str	r3, [r5, #0]
 8017f6c:	f7ea ff1a 	bl	8002da4 <_sbrk>
 8017f70:	1c43      	adds	r3, r0, #1
 8017f72:	d102      	bne.n	8017f7a <_sbrk_r+0x1a>
 8017f74:	682b      	ldr	r3, [r5, #0]
 8017f76:	b103      	cbz	r3, 8017f7a <_sbrk_r+0x1a>
 8017f78:	6023      	str	r3, [r4, #0]
 8017f7a:	bd38      	pop	{r3, r4, r5, pc}
 8017f7c:	20011448 	.word	0x20011448

08017f80 <_write_r>:
 8017f80:	b538      	push	{r3, r4, r5, lr}
 8017f82:	4d07      	ldr	r5, [pc, #28]	@ (8017fa0 <_write_r+0x20>)
 8017f84:	4604      	mov	r4, r0
 8017f86:	4608      	mov	r0, r1
 8017f88:	4611      	mov	r1, r2
 8017f8a:	2200      	movs	r2, #0
 8017f8c:	602a      	str	r2, [r5, #0]
 8017f8e:	461a      	mov	r2, r3
 8017f90:	f7ea feb8 	bl	8002d04 <_write>
 8017f94:	1c43      	adds	r3, r0, #1
 8017f96:	d102      	bne.n	8017f9e <_write_r+0x1e>
 8017f98:	682b      	ldr	r3, [r5, #0]
 8017f9a:	b103      	cbz	r3, 8017f9e <_write_r+0x1e>
 8017f9c:	6023      	str	r3, [r4, #0]
 8017f9e:	bd38      	pop	{r3, r4, r5, pc}
 8017fa0:	20011448 	.word	0x20011448

08017fa4 <__errno>:
 8017fa4:	4b01      	ldr	r3, [pc, #4]	@ (8017fac <__errno+0x8>)
 8017fa6:	6818      	ldr	r0, [r3, #0]
 8017fa8:	4770      	bx	lr
 8017faa:	bf00      	nop
 8017fac:	200000c8 	.word	0x200000c8

08017fb0 <__libc_init_array>:
 8017fb0:	b570      	push	{r4, r5, r6, lr}
 8017fb2:	4d0d      	ldr	r5, [pc, #52]	@ (8017fe8 <__libc_init_array+0x38>)
 8017fb4:	4c0d      	ldr	r4, [pc, #52]	@ (8017fec <__libc_init_array+0x3c>)
 8017fb6:	1b64      	subs	r4, r4, r5
 8017fb8:	10a4      	asrs	r4, r4, #2
 8017fba:	2600      	movs	r6, #0
 8017fbc:	42a6      	cmp	r6, r4
 8017fbe:	d109      	bne.n	8017fd4 <__libc_init_array+0x24>
 8017fc0:	4d0b      	ldr	r5, [pc, #44]	@ (8017ff0 <__libc_init_array+0x40>)
 8017fc2:	4c0c      	ldr	r4, [pc, #48]	@ (8017ff4 <__libc_init_array+0x44>)
 8017fc4:	f001 fec2 	bl	8019d4c <_init>
 8017fc8:	1b64      	subs	r4, r4, r5
 8017fca:	10a4      	asrs	r4, r4, #2
 8017fcc:	2600      	movs	r6, #0
 8017fce:	42a6      	cmp	r6, r4
 8017fd0:	d105      	bne.n	8017fde <__libc_init_array+0x2e>
 8017fd2:	bd70      	pop	{r4, r5, r6, pc}
 8017fd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8017fd8:	4798      	blx	r3
 8017fda:	3601      	adds	r6, #1
 8017fdc:	e7ee      	b.n	8017fbc <__libc_init_array+0xc>
 8017fde:	f855 3b04 	ldr.w	r3, [r5], #4
 8017fe2:	4798      	blx	r3
 8017fe4:	3601      	adds	r6, #1
 8017fe6:	e7f2      	b.n	8017fce <__libc_init_array+0x1e>
 8017fe8:	0801afc4 	.word	0x0801afc4
 8017fec:	0801afc4 	.word	0x0801afc4
 8017ff0:	0801afc4 	.word	0x0801afc4
 8017ff4:	0801afcc 	.word	0x0801afcc

08017ff8 <__retarget_lock_init_recursive>:
 8017ff8:	4770      	bx	lr

08017ffa <__retarget_lock_acquire_recursive>:
 8017ffa:	4770      	bx	lr

08017ffc <__retarget_lock_release_recursive>:
 8017ffc:	4770      	bx	lr

08017ffe <strcpy>:
 8017ffe:	4603      	mov	r3, r0
 8018000:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018004:	f803 2b01 	strb.w	r2, [r3], #1
 8018008:	2a00      	cmp	r2, #0
 801800a:	d1f9      	bne.n	8018000 <strcpy+0x2>
 801800c:	4770      	bx	lr

0801800e <memcpy>:
 801800e:	440a      	add	r2, r1
 8018010:	4291      	cmp	r1, r2
 8018012:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8018016:	d100      	bne.n	801801a <memcpy+0xc>
 8018018:	4770      	bx	lr
 801801a:	b510      	push	{r4, lr}
 801801c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018020:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018024:	4291      	cmp	r1, r2
 8018026:	d1f9      	bne.n	801801c <memcpy+0xe>
 8018028:	bd10      	pop	{r4, pc}
	...

0801802c <__assert_func>:
 801802c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801802e:	4614      	mov	r4, r2
 8018030:	461a      	mov	r2, r3
 8018032:	4b09      	ldr	r3, [pc, #36]	@ (8018058 <__assert_func+0x2c>)
 8018034:	681b      	ldr	r3, [r3, #0]
 8018036:	4605      	mov	r5, r0
 8018038:	68d8      	ldr	r0, [r3, #12]
 801803a:	b954      	cbnz	r4, 8018052 <__assert_func+0x26>
 801803c:	4b07      	ldr	r3, [pc, #28]	@ (801805c <__assert_func+0x30>)
 801803e:	461c      	mov	r4, r3
 8018040:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018044:	9100      	str	r1, [sp, #0]
 8018046:	462b      	mov	r3, r5
 8018048:	4905      	ldr	r1, [pc, #20]	@ (8018060 <__assert_func+0x34>)
 801804a:	f001 fd7f 	bl	8019b4c <fiprintf>
 801804e:	f001 fe13 	bl	8019c78 <abort>
 8018052:	4b04      	ldr	r3, [pc, #16]	@ (8018064 <__assert_func+0x38>)
 8018054:	e7f4      	b.n	8018040 <__assert_func+0x14>
 8018056:	bf00      	nop
 8018058:	200000c8 	.word	0x200000c8
 801805c:	0801adcd 	.word	0x0801adcd
 8018060:	0801ad9f 	.word	0x0801ad9f
 8018064:	0801ad92 	.word	0x0801ad92

08018068 <quorem>:
 8018068:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801806c:	6903      	ldr	r3, [r0, #16]
 801806e:	690c      	ldr	r4, [r1, #16]
 8018070:	42a3      	cmp	r3, r4
 8018072:	4607      	mov	r7, r0
 8018074:	db7e      	blt.n	8018174 <quorem+0x10c>
 8018076:	3c01      	subs	r4, #1
 8018078:	f101 0814 	add.w	r8, r1, #20
 801807c:	00a3      	lsls	r3, r4, #2
 801807e:	f100 0514 	add.w	r5, r0, #20
 8018082:	9300      	str	r3, [sp, #0]
 8018084:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018088:	9301      	str	r3, [sp, #4]
 801808a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801808e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8018092:	3301      	adds	r3, #1
 8018094:	429a      	cmp	r2, r3
 8018096:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801809a:	fbb2 f6f3 	udiv	r6, r2, r3
 801809e:	d32e      	bcc.n	80180fe <quorem+0x96>
 80180a0:	f04f 0a00 	mov.w	sl, #0
 80180a4:	46c4      	mov	ip, r8
 80180a6:	46ae      	mov	lr, r5
 80180a8:	46d3      	mov	fp, sl
 80180aa:	f85c 3b04 	ldr.w	r3, [ip], #4
 80180ae:	b298      	uxth	r0, r3
 80180b0:	fb06 a000 	mla	r0, r6, r0, sl
 80180b4:	0c02      	lsrs	r2, r0, #16
 80180b6:	0c1b      	lsrs	r3, r3, #16
 80180b8:	fb06 2303 	mla	r3, r6, r3, r2
 80180bc:	f8de 2000 	ldr.w	r2, [lr]
 80180c0:	b280      	uxth	r0, r0
 80180c2:	b292      	uxth	r2, r2
 80180c4:	1a12      	subs	r2, r2, r0
 80180c6:	445a      	add	r2, fp
 80180c8:	f8de 0000 	ldr.w	r0, [lr]
 80180cc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80180d0:	b29b      	uxth	r3, r3
 80180d2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80180d6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80180da:	b292      	uxth	r2, r2
 80180dc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80180e0:	45e1      	cmp	r9, ip
 80180e2:	f84e 2b04 	str.w	r2, [lr], #4
 80180e6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80180ea:	d2de      	bcs.n	80180aa <quorem+0x42>
 80180ec:	9b00      	ldr	r3, [sp, #0]
 80180ee:	58eb      	ldr	r3, [r5, r3]
 80180f0:	b92b      	cbnz	r3, 80180fe <quorem+0x96>
 80180f2:	9b01      	ldr	r3, [sp, #4]
 80180f4:	3b04      	subs	r3, #4
 80180f6:	429d      	cmp	r5, r3
 80180f8:	461a      	mov	r2, r3
 80180fa:	d32f      	bcc.n	801815c <quorem+0xf4>
 80180fc:	613c      	str	r4, [r7, #16]
 80180fe:	4638      	mov	r0, r7
 8018100:	f001 f8ce 	bl	80192a0 <__mcmp>
 8018104:	2800      	cmp	r0, #0
 8018106:	db25      	blt.n	8018154 <quorem+0xec>
 8018108:	4629      	mov	r1, r5
 801810a:	2000      	movs	r0, #0
 801810c:	f858 2b04 	ldr.w	r2, [r8], #4
 8018110:	f8d1 c000 	ldr.w	ip, [r1]
 8018114:	fa1f fe82 	uxth.w	lr, r2
 8018118:	fa1f f38c 	uxth.w	r3, ip
 801811c:	eba3 030e 	sub.w	r3, r3, lr
 8018120:	4403      	add	r3, r0
 8018122:	0c12      	lsrs	r2, r2, #16
 8018124:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8018128:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801812c:	b29b      	uxth	r3, r3
 801812e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018132:	45c1      	cmp	r9, r8
 8018134:	f841 3b04 	str.w	r3, [r1], #4
 8018138:	ea4f 4022 	mov.w	r0, r2, asr #16
 801813c:	d2e6      	bcs.n	801810c <quorem+0xa4>
 801813e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8018142:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018146:	b922      	cbnz	r2, 8018152 <quorem+0xea>
 8018148:	3b04      	subs	r3, #4
 801814a:	429d      	cmp	r5, r3
 801814c:	461a      	mov	r2, r3
 801814e:	d30b      	bcc.n	8018168 <quorem+0x100>
 8018150:	613c      	str	r4, [r7, #16]
 8018152:	3601      	adds	r6, #1
 8018154:	4630      	mov	r0, r6
 8018156:	b003      	add	sp, #12
 8018158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801815c:	6812      	ldr	r2, [r2, #0]
 801815e:	3b04      	subs	r3, #4
 8018160:	2a00      	cmp	r2, #0
 8018162:	d1cb      	bne.n	80180fc <quorem+0x94>
 8018164:	3c01      	subs	r4, #1
 8018166:	e7c6      	b.n	80180f6 <quorem+0x8e>
 8018168:	6812      	ldr	r2, [r2, #0]
 801816a:	3b04      	subs	r3, #4
 801816c:	2a00      	cmp	r2, #0
 801816e:	d1ef      	bne.n	8018150 <quorem+0xe8>
 8018170:	3c01      	subs	r4, #1
 8018172:	e7ea      	b.n	801814a <quorem+0xe2>
 8018174:	2000      	movs	r0, #0
 8018176:	e7ee      	b.n	8018156 <quorem+0xee>

08018178 <_dtoa_r>:
 8018178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801817c:	69c7      	ldr	r7, [r0, #28]
 801817e:	b099      	sub	sp, #100	@ 0x64
 8018180:	ed8d 0b02 	vstr	d0, [sp, #8]
 8018184:	ec55 4b10 	vmov	r4, r5, d0
 8018188:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801818a:	9109      	str	r1, [sp, #36]	@ 0x24
 801818c:	4683      	mov	fp, r0
 801818e:	920e      	str	r2, [sp, #56]	@ 0x38
 8018190:	9313      	str	r3, [sp, #76]	@ 0x4c
 8018192:	b97f      	cbnz	r7, 80181b4 <_dtoa_r+0x3c>
 8018194:	2010      	movs	r0, #16
 8018196:	f7fe fd2b 	bl	8016bf0 <malloc>
 801819a:	4602      	mov	r2, r0
 801819c:	f8cb 001c 	str.w	r0, [fp, #28]
 80181a0:	b920      	cbnz	r0, 80181ac <_dtoa_r+0x34>
 80181a2:	4ba7      	ldr	r3, [pc, #668]	@ (8018440 <_dtoa_r+0x2c8>)
 80181a4:	21ef      	movs	r1, #239	@ 0xef
 80181a6:	48a7      	ldr	r0, [pc, #668]	@ (8018444 <_dtoa_r+0x2cc>)
 80181a8:	f7ff ff40 	bl	801802c <__assert_func>
 80181ac:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80181b0:	6007      	str	r7, [r0, #0]
 80181b2:	60c7      	str	r7, [r0, #12]
 80181b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80181b8:	6819      	ldr	r1, [r3, #0]
 80181ba:	b159      	cbz	r1, 80181d4 <_dtoa_r+0x5c>
 80181bc:	685a      	ldr	r2, [r3, #4]
 80181be:	604a      	str	r2, [r1, #4]
 80181c0:	2301      	movs	r3, #1
 80181c2:	4093      	lsls	r3, r2
 80181c4:	608b      	str	r3, [r1, #8]
 80181c6:	4658      	mov	r0, fp
 80181c8:	f000 fe30 	bl	8018e2c <_Bfree>
 80181cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80181d0:	2200      	movs	r2, #0
 80181d2:	601a      	str	r2, [r3, #0]
 80181d4:	1e2b      	subs	r3, r5, #0
 80181d6:	bfb9      	ittee	lt
 80181d8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80181dc:	9303      	strlt	r3, [sp, #12]
 80181de:	2300      	movge	r3, #0
 80181e0:	6033      	strge	r3, [r6, #0]
 80181e2:	9f03      	ldr	r7, [sp, #12]
 80181e4:	4b98      	ldr	r3, [pc, #608]	@ (8018448 <_dtoa_r+0x2d0>)
 80181e6:	bfbc      	itt	lt
 80181e8:	2201      	movlt	r2, #1
 80181ea:	6032      	strlt	r2, [r6, #0]
 80181ec:	43bb      	bics	r3, r7
 80181ee:	d112      	bne.n	8018216 <_dtoa_r+0x9e>
 80181f0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80181f2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80181f6:	6013      	str	r3, [r2, #0]
 80181f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80181fc:	4323      	orrs	r3, r4
 80181fe:	f000 854d 	beq.w	8018c9c <_dtoa_r+0xb24>
 8018202:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8018204:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801845c <_dtoa_r+0x2e4>
 8018208:	2b00      	cmp	r3, #0
 801820a:	f000 854f 	beq.w	8018cac <_dtoa_r+0xb34>
 801820e:	f10a 0303 	add.w	r3, sl, #3
 8018212:	f000 bd49 	b.w	8018ca8 <_dtoa_r+0xb30>
 8018216:	ed9d 7b02 	vldr	d7, [sp, #8]
 801821a:	2200      	movs	r2, #0
 801821c:	ec51 0b17 	vmov	r0, r1, d7
 8018220:	2300      	movs	r3, #0
 8018222:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8018226:	f7e8 fc7f 	bl	8000b28 <__aeabi_dcmpeq>
 801822a:	4680      	mov	r8, r0
 801822c:	b158      	cbz	r0, 8018246 <_dtoa_r+0xce>
 801822e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8018230:	2301      	movs	r3, #1
 8018232:	6013      	str	r3, [r2, #0]
 8018234:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8018236:	b113      	cbz	r3, 801823e <_dtoa_r+0xc6>
 8018238:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801823a:	4b84      	ldr	r3, [pc, #528]	@ (801844c <_dtoa_r+0x2d4>)
 801823c:	6013      	str	r3, [r2, #0]
 801823e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8018460 <_dtoa_r+0x2e8>
 8018242:	f000 bd33 	b.w	8018cac <_dtoa_r+0xb34>
 8018246:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801824a:	aa16      	add	r2, sp, #88	@ 0x58
 801824c:	a917      	add	r1, sp, #92	@ 0x5c
 801824e:	4658      	mov	r0, fp
 8018250:	f001 f8d6 	bl	8019400 <__d2b>
 8018254:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8018258:	4681      	mov	r9, r0
 801825a:	2e00      	cmp	r6, #0
 801825c:	d077      	beq.n	801834e <_dtoa_r+0x1d6>
 801825e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018260:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8018264:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018268:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801826c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8018270:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8018274:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8018278:	4619      	mov	r1, r3
 801827a:	2200      	movs	r2, #0
 801827c:	4b74      	ldr	r3, [pc, #464]	@ (8018450 <_dtoa_r+0x2d8>)
 801827e:	f7e8 f833 	bl	80002e8 <__aeabi_dsub>
 8018282:	a369      	add	r3, pc, #420	@ (adr r3, 8018428 <_dtoa_r+0x2b0>)
 8018284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018288:	f7e8 f9e6 	bl	8000658 <__aeabi_dmul>
 801828c:	a368      	add	r3, pc, #416	@ (adr r3, 8018430 <_dtoa_r+0x2b8>)
 801828e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018292:	f7e8 f82b 	bl	80002ec <__adddf3>
 8018296:	4604      	mov	r4, r0
 8018298:	4630      	mov	r0, r6
 801829a:	460d      	mov	r5, r1
 801829c:	f7e8 f972 	bl	8000584 <__aeabi_i2d>
 80182a0:	a365      	add	r3, pc, #404	@ (adr r3, 8018438 <_dtoa_r+0x2c0>)
 80182a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80182a6:	f7e8 f9d7 	bl	8000658 <__aeabi_dmul>
 80182aa:	4602      	mov	r2, r0
 80182ac:	460b      	mov	r3, r1
 80182ae:	4620      	mov	r0, r4
 80182b0:	4629      	mov	r1, r5
 80182b2:	f7e8 f81b 	bl	80002ec <__adddf3>
 80182b6:	4604      	mov	r4, r0
 80182b8:	460d      	mov	r5, r1
 80182ba:	f7e8 fc7d 	bl	8000bb8 <__aeabi_d2iz>
 80182be:	2200      	movs	r2, #0
 80182c0:	4607      	mov	r7, r0
 80182c2:	2300      	movs	r3, #0
 80182c4:	4620      	mov	r0, r4
 80182c6:	4629      	mov	r1, r5
 80182c8:	f7e8 fc38 	bl	8000b3c <__aeabi_dcmplt>
 80182cc:	b140      	cbz	r0, 80182e0 <_dtoa_r+0x168>
 80182ce:	4638      	mov	r0, r7
 80182d0:	f7e8 f958 	bl	8000584 <__aeabi_i2d>
 80182d4:	4622      	mov	r2, r4
 80182d6:	462b      	mov	r3, r5
 80182d8:	f7e8 fc26 	bl	8000b28 <__aeabi_dcmpeq>
 80182dc:	b900      	cbnz	r0, 80182e0 <_dtoa_r+0x168>
 80182de:	3f01      	subs	r7, #1
 80182e0:	2f16      	cmp	r7, #22
 80182e2:	d851      	bhi.n	8018388 <_dtoa_r+0x210>
 80182e4:	4b5b      	ldr	r3, [pc, #364]	@ (8018454 <_dtoa_r+0x2dc>)
 80182e6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80182ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80182ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80182f2:	f7e8 fc23 	bl	8000b3c <__aeabi_dcmplt>
 80182f6:	2800      	cmp	r0, #0
 80182f8:	d048      	beq.n	801838c <_dtoa_r+0x214>
 80182fa:	3f01      	subs	r7, #1
 80182fc:	2300      	movs	r3, #0
 80182fe:	9312      	str	r3, [sp, #72]	@ 0x48
 8018300:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8018302:	1b9b      	subs	r3, r3, r6
 8018304:	1e5a      	subs	r2, r3, #1
 8018306:	bf44      	itt	mi
 8018308:	f1c3 0801 	rsbmi	r8, r3, #1
 801830c:	2300      	movmi	r3, #0
 801830e:	9208      	str	r2, [sp, #32]
 8018310:	bf54      	ite	pl
 8018312:	f04f 0800 	movpl.w	r8, #0
 8018316:	9308      	strmi	r3, [sp, #32]
 8018318:	2f00      	cmp	r7, #0
 801831a:	db39      	blt.n	8018390 <_dtoa_r+0x218>
 801831c:	9b08      	ldr	r3, [sp, #32]
 801831e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8018320:	443b      	add	r3, r7
 8018322:	9308      	str	r3, [sp, #32]
 8018324:	2300      	movs	r3, #0
 8018326:	930a      	str	r3, [sp, #40]	@ 0x28
 8018328:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801832a:	2b09      	cmp	r3, #9
 801832c:	d864      	bhi.n	80183f8 <_dtoa_r+0x280>
 801832e:	2b05      	cmp	r3, #5
 8018330:	bfc4      	itt	gt
 8018332:	3b04      	subgt	r3, #4
 8018334:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8018336:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018338:	f1a3 0302 	sub.w	r3, r3, #2
 801833c:	bfcc      	ite	gt
 801833e:	2400      	movgt	r4, #0
 8018340:	2401      	movle	r4, #1
 8018342:	2b03      	cmp	r3, #3
 8018344:	d863      	bhi.n	801840e <_dtoa_r+0x296>
 8018346:	e8df f003 	tbb	[pc, r3]
 801834a:	372a      	.short	0x372a
 801834c:	5535      	.short	0x5535
 801834e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8018352:	441e      	add	r6, r3
 8018354:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8018358:	2b20      	cmp	r3, #32
 801835a:	bfc1      	itttt	gt
 801835c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8018360:	409f      	lslgt	r7, r3
 8018362:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8018366:	fa24 f303 	lsrgt.w	r3, r4, r3
 801836a:	bfd6      	itet	le
 801836c:	f1c3 0320 	rsble	r3, r3, #32
 8018370:	ea47 0003 	orrgt.w	r0, r7, r3
 8018374:	fa04 f003 	lslle.w	r0, r4, r3
 8018378:	f7e8 f8f4 	bl	8000564 <__aeabi_ui2d>
 801837c:	2201      	movs	r2, #1
 801837e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8018382:	3e01      	subs	r6, #1
 8018384:	9214      	str	r2, [sp, #80]	@ 0x50
 8018386:	e777      	b.n	8018278 <_dtoa_r+0x100>
 8018388:	2301      	movs	r3, #1
 801838a:	e7b8      	b.n	80182fe <_dtoa_r+0x186>
 801838c:	9012      	str	r0, [sp, #72]	@ 0x48
 801838e:	e7b7      	b.n	8018300 <_dtoa_r+0x188>
 8018390:	427b      	negs	r3, r7
 8018392:	930a      	str	r3, [sp, #40]	@ 0x28
 8018394:	2300      	movs	r3, #0
 8018396:	eba8 0807 	sub.w	r8, r8, r7
 801839a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801839c:	e7c4      	b.n	8018328 <_dtoa_r+0x1b0>
 801839e:	2300      	movs	r3, #0
 80183a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80183a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80183a4:	2b00      	cmp	r3, #0
 80183a6:	dc35      	bgt.n	8018414 <_dtoa_r+0x29c>
 80183a8:	2301      	movs	r3, #1
 80183aa:	9300      	str	r3, [sp, #0]
 80183ac:	9307      	str	r3, [sp, #28]
 80183ae:	461a      	mov	r2, r3
 80183b0:	920e      	str	r2, [sp, #56]	@ 0x38
 80183b2:	e00b      	b.n	80183cc <_dtoa_r+0x254>
 80183b4:	2301      	movs	r3, #1
 80183b6:	e7f3      	b.n	80183a0 <_dtoa_r+0x228>
 80183b8:	2300      	movs	r3, #0
 80183ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 80183bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80183be:	18fb      	adds	r3, r7, r3
 80183c0:	9300      	str	r3, [sp, #0]
 80183c2:	3301      	adds	r3, #1
 80183c4:	2b01      	cmp	r3, #1
 80183c6:	9307      	str	r3, [sp, #28]
 80183c8:	bfb8      	it	lt
 80183ca:	2301      	movlt	r3, #1
 80183cc:	f8db 001c 	ldr.w	r0, [fp, #28]
 80183d0:	2100      	movs	r1, #0
 80183d2:	2204      	movs	r2, #4
 80183d4:	f102 0514 	add.w	r5, r2, #20
 80183d8:	429d      	cmp	r5, r3
 80183da:	d91f      	bls.n	801841c <_dtoa_r+0x2a4>
 80183dc:	6041      	str	r1, [r0, #4]
 80183de:	4658      	mov	r0, fp
 80183e0:	f000 fce4 	bl	8018dac <_Balloc>
 80183e4:	4682      	mov	sl, r0
 80183e6:	2800      	cmp	r0, #0
 80183e8:	d13c      	bne.n	8018464 <_dtoa_r+0x2ec>
 80183ea:	4b1b      	ldr	r3, [pc, #108]	@ (8018458 <_dtoa_r+0x2e0>)
 80183ec:	4602      	mov	r2, r0
 80183ee:	f240 11af 	movw	r1, #431	@ 0x1af
 80183f2:	e6d8      	b.n	80181a6 <_dtoa_r+0x2e>
 80183f4:	2301      	movs	r3, #1
 80183f6:	e7e0      	b.n	80183ba <_dtoa_r+0x242>
 80183f8:	2401      	movs	r4, #1
 80183fa:	2300      	movs	r3, #0
 80183fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80183fe:	940b      	str	r4, [sp, #44]	@ 0x2c
 8018400:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018404:	9300      	str	r3, [sp, #0]
 8018406:	9307      	str	r3, [sp, #28]
 8018408:	2200      	movs	r2, #0
 801840a:	2312      	movs	r3, #18
 801840c:	e7d0      	b.n	80183b0 <_dtoa_r+0x238>
 801840e:	2301      	movs	r3, #1
 8018410:	930b      	str	r3, [sp, #44]	@ 0x2c
 8018412:	e7f5      	b.n	8018400 <_dtoa_r+0x288>
 8018414:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018416:	9300      	str	r3, [sp, #0]
 8018418:	9307      	str	r3, [sp, #28]
 801841a:	e7d7      	b.n	80183cc <_dtoa_r+0x254>
 801841c:	3101      	adds	r1, #1
 801841e:	0052      	lsls	r2, r2, #1
 8018420:	e7d8      	b.n	80183d4 <_dtoa_r+0x25c>
 8018422:	bf00      	nop
 8018424:	f3af 8000 	nop.w
 8018428:	636f4361 	.word	0x636f4361
 801842c:	3fd287a7 	.word	0x3fd287a7
 8018430:	8b60c8b3 	.word	0x8b60c8b3
 8018434:	3fc68a28 	.word	0x3fc68a28
 8018438:	509f79fb 	.word	0x509f79fb
 801843c:	3fd34413 	.word	0x3fd34413
 8018440:	0801abee 	.word	0x0801abee
 8018444:	0801addb 	.word	0x0801addb
 8018448:	7ff00000 	.word	0x7ff00000
 801844c:	0801ad6f 	.word	0x0801ad6f
 8018450:	3ff80000 	.word	0x3ff80000
 8018454:	0801aed8 	.word	0x0801aed8
 8018458:	0801ae33 	.word	0x0801ae33
 801845c:	0801add7 	.word	0x0801add7
 8018460:	0801ad6e 	.word	0x0801ad6e
 8018464:	f8db 301c 	ldr.w	r3, [fp, #28]
 8018468:	6018      	str	r0, [r3, #0]
 801846a:	9b07      	ldr	r3, [sp, #28]
 801846c:	2b0e      	cmp	r3, #14
 801846e:	f200 80a4 	bhi.w	80185ba <_dtoa_r+0x442>
 8018472:	2c00      	cmp	r4, #0
 8018474:	f000 80a1 	beq.w	80185ba <_dtoa_r+0x442>
 8018478:	2f00      	cmp	r7, #0
 801847a:	dd33      	ble.n	80184e4 <_dtoa_r+0x36c>
 801847c:	4bad      	ldr	r3, [pc, #692]	@ (8018734 <_dtoa_r+0x5bc>)
 801847e:	f007 020f 	and.w	r2, r7, #15
 8018482:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018486:	ed93 7b00 	vldr	d7, [r3]
 801848a:	05f8      	lsls	r0, r7, #23
 801848c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8018490:	ea4f 1427 	mov.w	r4, r7, asr #4
 8018494:	d516      	bpl.n	80184c4 <_dtoa_r+0x34c>
 8018496:	4ba8      	ldr	r3, [pc, #672]	@ (8018738 <_dtoa_r+0x5c0>)
 8018498:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801849c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80184a0:	f7e8 fa04 	bl	80008ac <__aeabi_ddiv>
 80184a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80184a8:	f004 040f 	and.w	r4, r4, #15
 80184ac:	2603      	movs	r6, #3
 80184ae:	4da2      	ldr	r5, [pc, #648]	@ (8018738 <_dtoa_r+0x5c0>)
 80184b0:	b954      	cbnz	r4, 80184c8 <_dtoa_r+0x350>
 80184b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80184b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80184ba:	f7e8 f9f7 	bl	80008ac <__aeabi_ddiv>
 80184be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80184c2:	e028      	b.n	8018516 <_dtoa_r+0x39e>
 80184c4:	2602      	movs	r6, #2
 80184c6:	e7f2      	b.n	80184ae <_dtoa_r+0x336>
 80184c8:	07e1      	lsls	r1, r4, #31
 80184ca:	d508      	bpl.n	80184de <_dtoa_r+0x366>
 80184cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80184d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80184d4:	f7e8 f8c0 	bl	8000658 <__aeabi_dmul>
 80184d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80184dc:	3601      	adds	r6, #1
 80184de:	1064      	asrs	r4, r4, #1
 80184e0:	3508      	adds	r5, #8
 80184e2:	e7e5      	b.n	80184b0 <_dtoa_r+0x338>
 80184e4:	f000 80d2 	beq.w	801868c <_dtoa_r+0x514>
 80184e8:	427c      	negs	r4, r7
 80184ea:	4b92      	ldr	r3, [pc, #584]	@ (8018734 <_dtoa_r+0x5bc>)
 80184ec:	4d92      	ldr	r5, [pc, #584]	@ (8018738 <_dtoa_r+0x5c0>)
 80184ee:	f004 020f 	and.w	r2, r4, #15
 80184f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80184f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80184fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80184fe:	f7e8 f8ab 	bl	8000658 <__aeabi_dmul>
 8018502:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018506:	1124      	asrs	r4, r4, #4
 8018508:	2300      	movs	r3, #0
 801850a:	2602      	movs	r6, #2
 801850c:	2c00      	cmp	r4, #0
 801850e:	f040 80b2 	bne.w	8018676 <_dtoa_r+0x4fe>
 8018512:	2b00      	cmp	r3, #0
 8018514:	d1d3      	bne.n	80184be <_dtoa_r+0x346>
 8018516:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8018518:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801851c:	2b00      	cmp	r3, #0
 801851e:	f000 80b7 	beq.w	8018690 <_dtoa_r+0x518>
 8018522:	4b86      	ldr	r3, [pc, #536]	@ (801873c <_dtoa_r+0x5c4>)
 8018524:	2200      	movs	r2, #0
 8018526:	4620      	mov	r0, r4
 8018528:	4629      	mov	r1, r5
 801852a:	f7e8 fb07 	bl	8000b3c <__aeabi_dcmplt>
 801852e:	2800      	cmp	r0, #0
 8018530:	f000 80ae 	beq.w	8018690 <_dtoa_r+0x518>
 8018534:	9b07      	ldr	r3, [sp, #28]
 8018536:	2b00      	cmp	r3, #0
 8018538:	f000 80aa 	beq.w	8018690 <_dtoa_r+0x518>
 801853c:	9b00      	ldr	r3, [sp, #0]
 801853e:	2b00      	cmp	r3, #0
 8018540:	dd37      	ble.n	80185b2 <_dtoa_r+0x43a>
 8018542:	1e7b      	subs	r3, r7, #1
 8018544:	9304      	str	r3, [sp, #16]
 8018546:	4620      	mov	r0, r4
 8018548:	4b7d      	ldr	r3, [pc, #500]	@ (8018740 <_dtoa_r+0x5c8>)
 801854a:	2200      	movs	r2, #0
 801854c:	4629      	mov	r1, r5
 801854e:	f7e8 f883 	bl	8000658 <__aeabi_dmul>
 8018552:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018556:	9c00      	ldr	r4, [sp, #0]
 8018558:	3601      	adds	r6, #1
 801855a:	4630      	mov	r0, r6
 801855c:	f7e8 f812 	bl	8000584 <__aeabi_i2d>
 8018560:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018564:	f7e8 f878 	bl	8000658 <__aeabi_dmul>
 8018568:	4b76      	ldr	r3, [pc, #472]	@ (8018744 <_dtoa_r+0x5cc>)
 801856a:	2200      	movs	r2, #0
 801856c:	f7e7 febe 	bl	80002ec <__adddf3>
 8018570:	4605      	mov	r5, r0
 8018572:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8018576:	2c00      	cmp	r4, #0
 8018578:	f040 808d 	bne.w	8018696 <_dtoa_r+0x51e>
 801857c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018580:	4b71      	ldr	r3, [pc, #452]	@ (8018748 <_dtoa_r+0x5d0>)
 8018582:	2200      	movs	r2, #0
 8018584:	f7e7 feb0 	bl	80002e8 <__aeabi_dsub>
 8018588:	4602      	mov	r2, r0
 801858a:	460b      	mov	r3, r1
 801858c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8018590:	462a      	mov	r2, r5
 8018592:	4633      	mov	r3, r6
 8018594:	f7e8 faf0 	bl	8000b78 <__aeabi_dcmpgt>
 8018598:	2800      	cmp	r0, #0
 801859a:	f040 828b 	bne.w	8018ab4 <_dtoa_r+0x93c>
 801859e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80185a2:	462a      	mov	r2, r5
 80185a4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80185a8:	f7e8 fac8 	bl	8000b3c <__aeabi_dcmplt>
 80185ac:	2800      	cmp	r0, #0
 80185ae:	f040 8128 	bne.w	8018802 <_dtoa_r+0x68a>
 80185b2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80185b6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80185ba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80185bc:	2b00      	cmp	r3, #0
 80185be:	f2c0 815a 	blt.w	8018876 <_dtoa_r+0x6fe>
 80185c2:	2f0e      	cmp	r7, #14
 80185c4:	f300 8157 	bgt.w	8018876 <_dtoa_r+0x6fe>
 80185c8:	4b5a      	ldr	r3, [pc, #360]	@ (8018734 <_dtoa_r+0x5bc>)
 80185ca:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80185ce:	ed93 7b00 	vldr	d7, [r3]
 80185d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80185d4:	2b00      	cmp	r3, #0
 80185d6:	ed8d 7b00 	vstr	d7, [sp]
 80185da:	da03      	bge.n	80185e4 <_dtoa_r+0x46c>
 80185dc:	9b07      	ldr	r3, [sp, #28]
 80185de:	2b00      	cmp	r3, #0
 80185e0:	f340 8101 	ble.w	80187e6 <_dtoa_r+0x66e>
 80185e4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80185e8:	4656      	mov	r6, sl
 80185ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80185ee:	4620      	mov	r0, r4
 80185f0:	4629      	mov	r1, r5
 80185f2:	f7e8 f95b 	bl	80008ac <__aeabi_ddiv>
 80185f6:	f7e8 fadf 	bl	8000bb8 <__aeabi_d2iz>
 80185fa:	4680      	mov	r8, r0
 80185fc:	f7e7 ffc2 	bl	8000584 <__aeabi_i2d>
 8018600:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018604:	f7e8 f828 	bl	8000658 <__aeabi_dmul>
 8018608:	4602      	mov	r2, r0
 801860a:	460b      	mov	r3, r1
 801860c:	4620      	mov	r0, r4
 801860e:	4629      	mov	r1, r5
 8018610:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8018614:	f7e7 fe68 	bl	80002e8 <__aeabi_dsub>
 8018618:	f806 4b01 	strb.w	r4, [r6], #1
 801861c:	9d07      	ldr	r5, [sp, #28]
 801861e:	eba6 040a 	sub.w	r4, r6, sl
 8018622:	42a5      	cmp	r5, r4
 8018624:	4602      	mov	r2, r0
 8018626:	460b      	mov	r3, r1
 8018628:	f040 8117 	bne.w	801885a <_dtoa_r+0x6e2>
 801862c:	f7e7 fe5e 	bl	80002ec <__adddf3>
 8018630:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018634:	4604      	mov	r4, r0
 8018636:	460d      	mov	r5, r1
 8018638:	f7e8 fa9e 	bl	8000b78 <__aeabi_dcmpgt>
 801863c:	2800      	cmp	r0, #0
 801863e:	f040 80f9 	bne.w	8018834 <_dtoa_r+0x6bc>
 8018642:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018646:	4620      	mov	r0, r4
 8018648:	4629      	mov	r1, r5
 801864a:	f7e8 fa6d 	bl	8000b28 <__aeabi_dcmpeq>
 801864e:	b118      	cbz	r0, 8018658 <_dtoa_r+0x4e0>
 8018650:	f018 0f01 	tst.w	r8, #1
 8018654:	f040 80ee 	bne.w	8018834 <_dtoa_r+0x6bc>
 8018658:	4649      	mov	r1, r9
 801865a:	4658      	mov	r0, fp
 801865c:	f000 fbe6 	bl	8018e2c <_Bfree>
 8018660:	2300      	movs	r3, #0
 8018662:	7033      	strb	r3, [r6, #0]
 8018664:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8018666:	3701      	adds	r7, #1
 8018668:	601f      	str	r7, [r3, #0]
 801866a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801866c:	2b00      	cmp	r3, #0
 801866e:	f000 831d 	beq.w	8018cac <_dtoa_r+0xb34>
 8018672:	601e      	str	r6, [r3, #0]
 8018674:	e31a      	b.n	8018cac <_dtoa_r+0xb34>
 8018676:	07e2      	lsls	r2, r4, #31
 8018678:	d505      	bpl.n	8018686 <_dtoa_r+0x50e>
 801867a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801867e:	f7e7 ffeb 	bl	8000658 <__aeabi_dmul>
 8018682:	3601      	adds	r6, #1
 8018684:	2301      	movs	r3, #1
 8018686:	1064      	asrs	r4, r4, #1
 8018688:	3508      	adds	r5, #8
 801868a:	e73f      	b.n	801850c <_dtoa_r+0x394>
 801868c:	2602      	movs	r6, #2
 801868e:	e742      	b.n	8018516 <_dtoa_r+0x39e>
 8018690:	9c07      	ldr	r4, [sp, #28]
 8018692:	9704      	str	r7, [sp, #16]
 8018694:	e761      	b.n	801855a <_dtoa_r+0x3e2>
 8018696:	4b27      	ldr	r3, [pc, #156]	@ (8018734 <_dtoa_r+0x5bc>)
 8018698:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801869a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801869e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80186a2:	4454      	add	r4, sl
 80186a4:	2900      	cmp	r1, #0
 80186a6:	d053      	beq.n	8018750 <_dtoa_r+0x5d8>
 80186a8:	4928      	ldr	r1, [pc, #160]	@ (801874c <_dtoa_r+0x5d4>)
 80186aa:	2000      	movs	r0, #0
 80186ac:	f7e8 f8fe 	bl	80008ac <__aeabi_ddiv>
 80186b0:	4633      	mov	r3, r6
 80186b2:	462a      	mov	r2, r5
 80186b4:	f7e7 fe18 	bl	80002e8 <__aeabi_dsub>
 80186b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80186bc:	4656      	mov	r6, sl
 80186be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80186c2:	f7e8 fa79 	bl	8000bb8 <__aeabi_d2iz>
 80186c6:	4605      	mov	r5, r0
 80186c8:	f7e7 ff5c 	bl	8000584 <__aeabi_i2d>
 80186cc:	4602      	mov	r2, r0
 80186ce:	460b      	mov	r3, r1
 80186d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80186d4:	f7e7 fe08 	bl	80002e8 <__aeabi_dsub>
 80186d8:	3530      	adds	r5, #48	@ 0x30
 80186da:	4602      	mov	r2, r0
 80186dc:	460b      	mov	r3, r1
 80186de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80186e2:	f806 5b01 	strb.w	r5, [r6], #1
 80186e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80186ea:	f7e8 fa27 	bl	8000b3c <__aeabi_dcmplt>
 80186ee:	2800      	cmp	r0, #0
 80186f0:	d171      	bne.n	80187d6 <_dtoa_r+0x65e>
 80186f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80186f6:	4911      	ldr	r1, [pc, #68]	@ (801873c <_dtoa_r+0x5c4>)
 80186f8:	2000      	movs	r0, #0
 80186fa:	f7e7 fdf5 	bl	80002e8 <__aeabi_dsub>
 80186fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8018702:	f7e8 fa1b 	bl	8000b3c <__aeabi_dcmplt>
 8018706:	2800      	cmp	r0, #0
 8018708:	f040 8095 	bne.w	8018836 <_dtoa_r+0x6be>
 801870c:	42a6      	cmp	r6, r4
 801870e:	f43f af50 	beq.w	80185b2 <_dtoa_r+0x43a>
 8018712:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8018716:	4b0a      	ldr	r3, [pc, #40]	@ (8018740 <_dtoa_r+0x5c8>)
 8018718:	2200      	movs	r2, #0
 801871a:	f7e7 ff9d 	bl	8000658 <__aeabi_dmul>
 801871e:	4b08      	ldr	r3, [pc, #32]	@ (8018740 <_dtoa_r+0x5c8>)
 8018720:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8018724:	2200      	movs	r2, #0
 8018726:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801872a:	f7e7 ff95 	bl	8000658 <__aeabi_dmul>
 801872e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018732:	e7c4      	b.n	80186be <_dtoa_r+0x546>
 8018734:	0801aed8 	.word	0x0801aed8
 8018738:	0801aeb0 	.word	0x0801aeb0
 801873c:	3ff00000 	.word	0x3ff00000
 8018740:	40240000 	.word	0x40240000
 8018744:	401c0000 	.word	0x401c0000
 8018748:	40140000 	.word	0x40140000
 801874c:	3fe00000 	.word	0x3fe00000
 8018750:	4631      	mov	r1, r6
 8018752:	4628      	mov	r0, r5
 8018754:	f7e7 ff80 	bl	8000658 <__aeabi_dmul>
 8018758:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801875c:	9415      	str	r4, [sp, #84]	@ 0x54
 801875e:	4656      	mov	r6, sl
 8018760:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018764:	f7e8 fa28 	bl	8000bb8 <__aeabi_d2iz>
 8018768:	4605      	mov	r5, r0
 801876a:	f7e7 ff0b 	bl	8000584 <__aeabi_i2d>
 801876e:	4602      	mov	r2, r0
 8018770:	460b      	mov	r3, r1
 8018772:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018776:	f7e7 fdb7 	bl	80002e8 <__aeabi_dsub>
 801877a:	3530      	adds	r5, #48	@ 0x30
 801877c:	f806 5b01 	strb.w	r5, [r6], #1
 8018780:	4602      	mov	r2, r0
 8018782:	460b      	mov	r3, r1
 8018784:	42a6      	cmp	r6, r4
 8018786:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801878a:	f04f 0200 	mov.w	r2, #0
 801878e:	d124      	bne.n	80187da <_dtoa_r+0x662>
 8018790:	4bac      	ldr	r3, [pc, #688]	@ (8018a44 <_dtoa_r+0x8cc>)
 8018792:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8018796:	f7e7 fda9 	bl	80002ec <__adddf3>
 801879a:	4602      	mov	r2, r0
 801879c:	460b      	mov	r3, r1
 801879e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80187a2:	f7e8 f9e9 	bl	8000b78 <__aeabi_dcmpgt>
 80187a6:	2800      	cmp	r0, #0
 80187a8:	d145      	bne.n	8018836 <_dtoa_r+0x6be>
 80187aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80187ae:	49a5      	ldr	r1, [pc, #660]	@ (8018a44 <_dtoa_r+0x8cc>)
 80187b0:	2000      	movs	r0, #0
 80187b2:	f7e7 fd99 	bl	80002e8 <__aeabi_dsub>
 80187b6:	4602      	mov	r2, r0
 80187b8:	460b      	mov	r3, r1
 80187ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80187be:	f7e8 f9bd 	bl	8000b3c <__aeabi_dcmplt>
 80187c2:	2800      	cmp	r0, #0
 80187c4:	f43f aef5 	beq.w	80185b2 <_dtoa_r+0x43a>
 80187c8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80187ca:	1e73      	subs	r3, r6, #1
 80187cc:	9315      	str	r3, [sp, #84]	@ 0x54
 80187ce:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80187d2:	2b30      	cmp	r3, #48	@ 0x30
 80187d4:	d0f8      	beq.n	80187c8 <_dtoa_r+0x650>
 80187d6:	9f04      	ldr	r7, [sp, #16]
 80187d8:	e73e      	b.n	8018658 <_dtoa_r+0x4e0>
 80187da:	4b9b      	ldr	r3, [pc, #620]	@ (8018a48 <_dtoa_r+0x8d0>)
 80187dc:	f7e7 ff3c 	bl	8000658 <__aeabi_dmul>
 80187e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80187e4:	e7bc      	b.n	8018760 <_dtoa_r+0x5e8>
 80187e6:	d10c      	bne.n	8018802 <_dtoa_r+0x68a>
 80187e8:	4b98      	ldr	r3, [pc, #608]	@ (8018a4c <_dtoa_r+0x8d4>)
 80187ea:	2200      	movs	r2, #0
 80187ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80187f0:	f7e7 ff32 	bl	8000658 <__aeabi_dmul>
 80187f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80187f8:	f7e8 f9b4 	bl	8000b64 <__aeabi_dcmpge>
 80187fc:	2800      	cmp	r0, #0
 80187fe:	f000 8157 	beq.w	8018ab0 <_dtoa_r+0x938>
 8018802:	2400      	movs	r4, #0
 8018804:	4625      	mov	r5, r4
 8018806:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018808:	43db      	mvns	r3, r3
 801880a:	9304      	str	r3, [sp, #16]
 801880c:	4656      	mov	r6, sl
 801880e:	2700      	movs	r7, #0
 8018810:	4621      	mov	r1, r4
 8018812:	4658      	mov	r0, fp
 8018814:	f000 fb0a 	bl	8018e2c <_Bfree>
 8018818:	2d00      	cmp	r5, #0
 801881a:	d0dc      	beq.n	80187d6 <_dtoa_r+0x65e>
 801881c:	b12f      	cbz	r7, 801882a <_dtoa_r+0x6b2>
 801881e:	42af      	cmp	r7, r5
 8018820:	d003      	beq.n	801882a <_dtoa_r+0x6b2>
 8018822:	4639      	mov	r1, r7
 8018824:	4658      	mov	r0, fp
 8018826:	f000 fb01 	bl	8018e2c <_Bfree>
 801882a:	4629      	mov	r1, r5
 801882c:	4658      	mov	r0, fp
 801882e:	f000 fafd 	bl	8018e2c <_Bfree>
 8018832:	e7d0      	b.n	80187d6 <_dtoa_r+0x65e>
 8018834:	9704      	str	r7, [sp, #16]
 8018836:	4633      	mov	r3, r6
 8018838:	461e      	mov	r6, r3
 801883a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801883e:	2a39      	cmp	r2, #57	@ 0x39
 8018840:	d107      	bne.n	8018852 <_dtoa_r+0x6da>
 8018842:	459a      	cmp	sl, r3
 8018844:	d1f8      	bne.n	8018838 <_dtoa_r+0x6c0>
 8018846:	9a04      	ldr	r2, [sp, #16]
 8018848:	3201      	adds	r2, #1
 801884a:	9204      	str	r2, [sp, #16]
 801884c:	2230      	movs	r2, #48	@ 0x30
 801884e:	f88a 2000 	strb.w	r2, [sl]
 8018852:	781a      	ldrb	r2, [r3, #0]
 8018854:	3201      	adds	r2, #1
 8018856:	701a      	strb	r2, [r3, #0]
 8018858:	e7bd      	b.n	80187d6 <_dtoa_r+0x65e>
 801885a:	4b7b      	ldr	r3, [pc, #492]	@ (8018a48 <_dtoa_r+0x8d0>)
 801885c:	2200      	movs	r2, #0
 801885e:	f7e7 fefb 	bl	8000658 <__aeabi_dmul>
 8018862:	2200      	movs	r2, #0
 8018864:	2300      	movs	r3, #0
 8018866:	4604      	mov	r4, r0
 8018868:	460d      	mov	r5, r1
 801886a:	f7e8 f95d 	bl	8000b28 <__aeabi_dcmpeq>
 801886e:	2800      	cmp	r0, #0
 8018870:	f43f aebb 	beq.w	80185ea <_dtoa_r+0x472>
 8018874:	e6f0      	b.n	8018658 <_dtoa_r+0x4e0>
 8018876:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8018878:	2a00      	cmp	r2, #0
 801887a:	f000 80db 	beq.w	8018a34 <_dtoa_r+0x8bc>
 801887e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018880:	2a01      	cmp	r2, #1
 8018882:	f300 80bf 	bgt.w	8018a04 <_dtoa_r+0x88c>
 8018886:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8018888:	2a00      	cmp	r2, #0
 801888a:	f000 80b7 	beq.w	80189fc <_dtoa_r+0x884>
 801888e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8018892:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8018894:	4646      	mov	r6, r8
 8018896:	9a08      	ldr	r2, [sp, #32]
 8018898:	2101      	movs	r1, #1
 801889a:	441a      	add	r2, r3
 801889c:	4658      	mov	r0, fp
 801889e:	4498      	add	r8, r3
 80188a0:	9208      	str	r2, [sp, #32]
 80188a2:	f000 fb77 	bl	8018f94 <__i2b>
 80188a6:	4605      	mov	r5, r0
 80188a8:	b15e      	cbz	r6, 80188c2 <_dtoa_r+0x74a>
 80188aa:	9b08      	ldr	r3, [sp, #32]
 80188ac:	2b00      	cmp	r3, #0
 80188ae:	dd08      	ble.n	80188c2 <_dtoa_r+0x74a>
 80188b0:	42b3      	cmp	r3, r6
 80188b2:	9a08      	ldr	r2, [sp, #32]
 80188b4:	bfa8      	it	ge
 80188b6:	4633      	movge	r3, r6
 80188b8:	eba8 0803 	sub.w	r8, r8, r3
 80188bc:	1af6      	subs	r6, r6, r3
 80188be:	1ad3      	subs	r3, r2, r3
 80188c0:	9308      	str	r3, [sp, #32]
 80188c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80188c4:	b1f3      	cbz	r3, 8018904 <_dtoa_r+0x78c>
 80188c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80188c8:	2b00      	cmp	r3, #0
 80188ca:	f000 80b7 	beq.w	8018a3c <_dtoa_r+0x8c4>
 80188ce:	b18c      	cbz	r4, 80188f4 <_dtoa_r+0x77c>
 80188d0:	4629      	mov	r1, r5
 80188d2:	4622      	mov	r2, r4
 80188d4:	4658      	mov	r0, fp
 80188d6:	f000 fc1d 	bl	8019114 <__pow5mult>
 80188da:	464a      	mov	r2, r9
 80188dc:	4601      	mov	r1, r0
 80188de:	4605      	mov	r5, r0
 80188e0:	4658      	mov	r0, fp
 80188e2:	f000 fb6d 	bl	8018fc0 <__multiply>
 80188e6:	4649      	mov	r1, r9
 80188e8:	9004      	str	r0, [sp, #16]
 80188ea:	4658      	mov	r0, fp
 80188ec:	f000 fa9e 	bl	8018e2c <_Bfree>
 80188f0:	9b04      	ldr	r3, [sp, #16]
 80188f2:	4699      	mov	r9, r3
 80188f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80188f6:	1b1a      	subs	r2, r3, r4
 80188f8:	d004      	beq.n	8018904 <_dtoa_r+0x78c>
 80188fa:	4649      	mov	r1, r9
 80188fc:	4658      	mov	r0, fp
 80188fe:	f000 fc09 	bl	8019114 <__pow5mult>
 8018902:	4681      	mov	r9, r0
 8018904:	2101      	movs	r1, #1
 8018906:	4658      	mov	r0, fp
 8018908:	f000 fb44 	bl	8018f94 <__i2b>
 801890c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801890e:	4604      	mov	r4, r0
 8018910:	2b00      	cmp	r3, #0
 8018912:	f000 81cf 	beq.w	8018cb4 <_dtoa_r+0xb3c>
 8018916:	461a      	mov	r2, r3
 8018918:	4601      	mov	r1, r0
 801891a:	4658      	mov	r0, fp
 801891c:	f000 fbfa 	bl	8019114 <__pow5mult>
 8018920:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018922:	2b01      	cmp	r3, #1
 8018924:	4604      	mov	r4, r0
 8018926:	f300 8095 	bgt.w	8018a54 <_dtoa_r+0x8dc>
 801892a:	9b02      	ldr	r3, [sp, #8]
 801892c:	2b00      	cmp	r3, #0
 801892e:	f040 8087 	bne.w	8018a40 <_dtoa_r+0x8c8>
 8018932:	9b03      	ldr	r3, [sp, #12]
 8018934:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018938:	2b00      	cmp	r3, #0
 801893a:	f040 8089 	bne.w	8018a50 <_dtoa_r+0x8d8>
 801893e:	9b03      	ldr	r3, [sp, #12]
 8018940:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8018944:	0d1b      	lsrs	r3, r3, #20
 8018946:	051b      	lsls	r3, r3, #20
 8018948:	b12b      	cbz	r3, 8018956 <_dtoa_r+0x7de>
 801894a:	9b08      	ldr	r3, [sp, #32]
 801894c:	3301      	adds	r3, #1
 801894e:	9308      	str	r3, [sp, #32]
 8018950:	f108 0801 	add.w	r8, r8, #1
 8018954:	2301      	movs	r3, #1
 8018956:	930a      	str	r3, [sp, #40]	@ 0x28
 8018958:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801895a:	2b00      	cmp	r3, #0
 801895c:	f000 81b0 	beq.w	8018cc0 <_dtoa_r+0xb48>
 8018960:	6923      	ldr	r3, [r4, #16]
 8018962:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8018966:	6918      	ldr	r0, [r3, #16]
 8018968:	f000 fac8 	bl	8018efc <__hi0bits>
 801896c:	f1c0 0020 	rsb	r0, r0, #32
 8018970:	9b08      	ldr	r3, [sp, #32]
 8018972:	4418      	add	r0, r3
 8018974:	f010 001f 	ands.w	r0, r0, #31
 8018978:	d077      	beq.n	8018a6a <_dtoa_r+0x8f2>
 801897a:	f1c0 0320 	rsb	r3, r0, #32
 801897e:	2b04      	cmp	r3, #4
 8018980:	dd6b      	ble.n	8018a5a <_dtoa_r+0x8e2>
 8018982:	9b08      	ldr	r3, [sp, #32]
 8018984:	f1c0 001c 	rsb	r0, r0, #28
 8018988:	4403      	add	r3, r0
 801898a:	4480      	add	r8, r0
 801898c:	4406      	add	r6, r0
 801898e:	9308      	str	r3, [sp, #32]
 8018990:	f1b8 0f00 	cmp.w	r8, #0
 8018994:	dd05      	ble.n	80189a2 <_dtoa_r+0x82a>
 8018996:	4649      	mov	r1, r9
 8018998:	4642      	mov	r2, r8
 801899a:	4658      	mov	r0, fp
 801899c:	f000 fc14 	bl	80191c8 <__lshift>
 80189a0:	4681      	mov	r9, r0
 80189a2:	9b08      	ldr	r3, [sp, #32]
 80189a4:	2b00      	cmp	r3, #0
 80189a6:	dd05      	ble.n	80189b4 <_dtoa_r+0x83c>
 80189a8:	4621      	mov	r1, r4
 80189aa:	461a      	mov	r2, r3
 80189ac:	4658      	mov	r0, fp
 80189ae:	f000 fc0b 	bl	80191c8 <__lshift>
 80189b2:	4604      	mov	r4, r0
 80189b4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80189b6:	2b00      	cmp	r3, #0
 80189b8:	d059      	beq.n	8018a6e <_dtoa_r+0x8f6>
 80189ba:	4621      	mov	r1, r4
 80189bc:	4648      	mov	r0, r9
 80189be:	f000 fc6f 	bl	80192a0 <__mcmp>
 80189c2:	2800      	cmp	r0, #0
 80189c4:	da53      	bge.n	8018a6e <_dtoa_r+0x8f6>
 80189c6:	1e7b      	subs	r3, r7, #1
 80189c8:	9304      	str	r3, [sp, #16]
 80189ca:	4649      	mov	r1, r9
 80189cc:	2300      	movs	r3, #0
 80189ce:	220a      	movs	r2, #10
 80189d0:	4658      	mov	r0, fp
 80189d2:	f000 fa4d 	bl	8018e70 <__multadd>
 80189d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80189d8:	4681      	mov	r9, r0
 80189da:	2b00      	cmp	r3, #0
 80189dc:	f000 8172 	beq.w	8018cc4 <_dtoa_r+0xb4c>
 80189e0:	2300      	movs	r3, #0
 80189e2:	4629      	mov	r1, r5
 80189e4:	220a      	movs	r2, #10
 80189e6:	4658      	mov	r0, fp
 80189e8:	f000 fa42 	bl	8018e70 <__multadd>
 80189ec:	9b00      	ldr	r3, [sp, #0]
 80189ee:	2b00      	cmp	r3, #0
 80189f0:	4605      	mov	r5, r0
 80189f2:	dc67      	bgt.n	8018ac4 <_dtoa_r+0x94c>
 80189f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80189f6:	2b02      	cmp	r3, #2
 80189f8:	dc41      	bgt.n	8018a7e <_dtoa_r+0x906>
 80189fa:	e063      	b.n	8018ac4 <_dtoa_r+0x94c>
 80189fc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80189fe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8018a02:	e746      	b.n	8018892 <_dtoa_r+0x71a>
 8018a04:	9b07      	ldr	r3, [sp, #28]
 8018a06:	1e5c      	subs	r4, r3, #1
 8018a08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018a0a:	42a3      	cmp	r3, r4
 8018a0c:	bfbf      	itttt	lt
 8018a0e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8018a10:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8018a12:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8018a14:	1ae3      	sublt	r3, r4, r3
 8018a16:	bfb4      	ite	lt
 8018a18:	18d2      	addlt	r2, r2, r3
 8018a1a:	1b1c      	subge	r4, r3, r4
 8018a1c:	9b07      	ldr	r3, [sp, #28]
 8018a1e:	bfbc      	itt	lt
 8018a20:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8018a22:	2400      	movlt	r4, #0
 8018a24:	2b00      	cmp	r3, #0
 8018a26:	bfb5      	itete	lt
 8018a28:	eba8 0603 	sublt.w	r6, r8, r3
 8018a2c:	9b07      	ldrge	r3, [sp, #28]
 8018a2e:	2300      	movlt	r3, #0
 8018a30:	4646      	movge	r6, r8
 8018a32:	e730      	b.n	8018896 <_dtoa_r+0x71e>
 8018a34:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8018a36:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8018a38:	4646      	mov	r6, r8
 8018a3a:	e735      	b.n	80188a8 <_dtoa_r+0x730>
 8018a3c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018a3e:	e75c      	b.n	80188fa <_dtoa_r+0x782>
 8018a40:	2300      	movs	r3, #0
 8018a42:	e788      	b.n	8018956 <_dtoa_r+0x7de>
 8018a44:	3fe00000 	.word	0x3fe00000
 8018a48:	40240000 	.word	0x40240000
 8018a4c:	40140000 	.word	0x40140000
 8018a50:	9b02      	ldr	r3, [sp, #8]
 8018a52:	e780      	b.n	8018956 <_dtoa_r+0x7de>
 8018a54:	2300      	movs	r3, #0
 8018a56:	930a      	str	r3, [sp, #40]	@ 0x28
 8018a58:	e782      	b.n	8018960 <_dtoa_r+0x7e8>
 8018a5a:	d099      	beq.n	8018990 <_dtoa_r+0x818>
 8018a5c:	9a08      	ldr	r2, [sp, #32]
 8018a5e:	331c      	adds	r3, #28
 8018a60:	441a      	add	r2, r3
 8018a62:	4498      	add	r8, r3
 8018a64:	441e      	add	r6, r3
 8018a66:	9208      	str	r2, [sp, #32]
 8018a68:	e792      	b.n	8018990 <_dtoa_r+0x818>
 8018a6a:	4603      	mov	r3, r0
 8018a6c:	e7f6      	b.n	8018a5c <_dtoa_r+0x8e4>
 8018a6e:	9b07      	ldr	r3, [sp, #28]
 8018a70:	9704      	str	r7, [sp, #16]
 8018a72:	2b00      	cmp	r3, #0
 8018a74:	dc20      	bgt.n	8018ab8 <_dtoa_r+0x940>
 8018a76:	9300      	str	r3, [sp, #0]
 8018a78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018a7a:	2b02      	cmp	r3, #2
 8018a7c:	dd1e      	ble.n	8018abc <_dtoa_r+0x944>
 8018a7e:	9b00      	ldr	r3, [sp, #0]
 8018a80:	2b00      	cmp	r3, #0
 8018a82:	f47f aec0 	bne.w	8018806 <_dtoa_r+0x68e>
 8018a86:	4621      	mov	r1, r4
 8018a88:	2205      	movs	r2, #5
 8018a8a:	4658      	mov	r0, fp
 8018a8c:	f000 f9f0 	bl	8018e70 <__multadd>
 8018a90:	4601      	mov	r1, r0
 8018a92:	4604      	mov	r4, r0
 8018a94:	4648      	mov	r0, r9
 8018a96:	f000 fc03 	bl	80192a0 <__mcmp>
 8018a9a:	2800      	cmp	r0, #0
 8018a9c:	f77f aeb3 	ble.w	8018806 <_dtoa_r+0x68e>
 8018aa0:	4656      	mov	r6, sl
 8018aa2:	2331      	movs	r3, #49	@ 0x31
 8018aa4:	f806 3b01 	strb.w	r3, [r6], #1
 8018aa8:	9b04      	ldr	r3, [sp, #16]
 8018aaa:	3301      	adds	r3, #1
 8018aac:	9304      	str	r3, [sp, #16]
 8018aae:	e6ae      	b.n	801880e <_dtoa_r+0x696>
 8018ab0:	9c07      	ldr	r4, [sp, #28]
 8018ab2:	9704      	str	r7, [sp, #16]
 8018ab4:	4625      	mov	r5, r4
 8018ab6:	e7f3      	b.n	8018aa0 <_dtoa_r+0x928>
 8018ab8:	9b07      	ldr	r3, [sp, #28]
 8018aba:	9300      	str	r3, [sp, #0]
 8018abc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018abe:	2b00      	cmp	r3, #0
 8018ac0:	f000 8104 	beq.w	8018ccc <_dtoa_r+0xb54>
 8018ac4:	2e00      	cmp	r6, #0
 8018ac6:	dd05      	ble.n	8018ad4 <_dtoa_r+0x95c>
 8018ac8:	4629      	mov	r1, r5
 8018aca:	4632      	mov	r2, r6
 8018acc:	4658      	mov	r0, fp
 8018ace:	f000 fb7b 	bl	80191c8 <__lshift>
 8018ad2:	4605      	mov	r5, r0
 8018ad4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018ad6:	2b00      	cmp	r3, #0
 8018ad8:	d05a      	beq.n	8018b90 <_dtoa_r+0xa18>
 8018ada:	6869      	ldr	r1, [r5, #4]
 8018adc:	4658      	mov	r0, fp
 8018ade:	f000 f965 	bl	8018dac <_Balloc>
 8018ae2:	4606      	mov	r6, r0
 8018ae4:	b928      	cbnz	r0, 8018af2 <_dtoa_r+0x97a>
 8018ae6:	4b84      	ldr	r3, [pc, #528]	@ (8018cf8 <_dtoa_r+0xb80>)
 8018ae8:	4602      	mov	r2, r0
 8018aea:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8018aee:	f7ff bb5a 	b.w	80181a6 <_dtoa_r+0x2e>
 8018af2:	692a      	ldr	r2, [r5, #16]
 8018af4:	3202      	adds	r2, #2
 8018af6:	0092      	lsls	r2, r2, #2
 8018af8:	f105 010c 	add.w	r1, r5, #12
 8018afc:	300c      	adds	r0, #12
 8018afe:	f7ff fa86 	bl	801800e <memcpy>
 8018b02:	2201      	movs	r2, #1
 8018b04:	4631      	mov	r1, r6
 8018b06:	4658      	mov	r0, fp
 8018b08:	f000 fb5e 	bl	80191c8 <__lshift>
 8018b0c:	f10a 0301 	add.w	r3, sl, #1
 8018b10:	9307      	str	r3, [sp, #28]
 8018b12:	9b00      	ldr	r3, [sp, #0]
 8018b14:	4453      	add	r3, sl
 8018b16:	930b      	str	r3, [sp, #44]	@ 0x2c
 8018b18:	9b02      	ldr	r3, [sp, #8]
 8018b1a:	f003 0301 	and.w	r3, r3, #1
 8018b1e:	462f      	mov	r7, r5
 8018b20:	930a      	str	r3, [sp, #40]	@ 0x28
 8018b22:	4605      	mov	r5, r0
 8018b24:	9b07      	ldr	r3, [sp, #28]
 8018b26:	4621      	mov	r1, r4
 8018b28:	3b01      	subs	r3, #1
 8018b2a:	4648      	mov	r0, r9
 8018b2c:	9300      	str	r3, [sp, #0]
 8018b2e:	f7ff fa9b 	bl	8018068 <quorem>
 8018b32:	4639      	mov	r1, r7
 8018b34:	9002      	str	r0, [sp, #8]
 8018b36:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8018b3a:	4648      	mov	r0, r9
 8018b3c:	f000 fbb0 	bl	80192a0 <__mcmp>
 8018b40:	462a      	mov	r2, r5
 8018b42:	9008      	str	r0, [sp, #32]
 8018b44:	4621      	mov	r1, r4
 8018b46:	4658      	mov	r0, fp
 8018b48:	f000 fbc6 	bl	80192d8 <__mdiff>
 8018b4c:	68c2      	ldr	r2, [r0, #12]
 8018b4e:	4606      	mov	r6, r0
 8018b50:	bb02      	cbnz	r2, 8018b94 <_dtoa_r+0xa1c>
 8018b52:	4601      	mov	r1, r0
 8018b54:	4648      	mov	r0, r9
 8018b56:	f000 fba3 	bl	80192a0 <__mcmp>
 8018b5a:	4602      	mov	r2, r0
 8018b5c:	4631      	mov	r1, r6
 8018b5e:	4658      	mov	r0, fp
 8018b60:	920e      	str	r2, [sp, #56]	@ 0x38
 8018b62:	f000 f963 	bl	8018e2c <_Bfree>
 8018b66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018b68:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018b6a:	9e07      	ldr	r6, [sp, #28]
 8018b6c:	ea43 0102 	orr.w	r1, r3, r2
 8018b70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018b72:	4319      	orrs	r1, r3
 8018b74:	d110      	bne.n	8018b98 <_dtoa_r+0xa20>
 8018b76:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8018b7a:	d029      	beq.n	8018bd0 <_dtoa_r+0xa58>
 8018b7c:	9b08      	ldr	r3, [sp, #32]
 8018b7e:	2b00      	cmp	r3, #0
 8018b80:	dd02      	ble.n	8018b88 <_dtoa_r+0xa10>
 8018b82:	9b02      	ldr	r3, [sp, #8]
 8018b84:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8018b88:	9b00      	ldr	r3, [sp, #0]
 8018b8a:	f883 8000 	strb.w	r8, [r3]
 8018b8e:	e63f      	b.n	8018810 <_dtoa_r+0x698>
 8018b90:	4628      	mov	r0, r5
 8018b92:	e7bb      	b.n	8018b0c <_dtoa_r+0x994>
 8018b94:	2201      	movs	r2, #1
 8018b96:	e7e1      	b.n	8018b5c <_dtoa_r+0x9e4>
 8018b98:	9b08      	ldr	r3, [sp, #32]
 8018b9a:	2b00      	cmp	r3, #0
 8018b9c:	db04      	blt.n	8018ba8 <_dtoa_r+0xa30>
 8018b9e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8018ba0:	430b      	orrs	r3, r1
 8018ba2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8018ba4:	430b      	orrs	r3, r1
 8018ba6:	d120      	bne.n	8018bea <_dtoa_r+0xa72>
 8018ba8:	2a00      	cmp	r2, #0
 8018baa:	dded      	ble.n	8018b88 <_dtoa_r+0xa10>
 8018bac:	4649      	mov	r1, r9
 8018bae:	2201      	movs	r2, #1
 8018bb0:	4658      	mov	r0, fp
 8018bb2:	f000 fb09 	bl	80191c8 <__lshift>
 8018bb6:	4621      	mov	r1, r4
 8018bb8:	4681      	mov	r9, r0
 8018bba:	f000 fb71 	bl	80192a0 <__mcmp>
 8018bbe:	2800      	cmp	r0, #0
 8018bc0:	dc03      	bgt.n	8018bca <_dtoa_r+0xa52>
 8018bc2:	d1e1      	bne.n	8018b88 <_dtoa_r+0xa10>
 8018bc4:	f018 0f01 	tst.w	r8, #1
 8018bc8:	d0de      	beq.n	8018b88 <_dtoa_r+0xa10>
 8018bca:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8018bce:	d1d8      	bne.n	8018b82 <_dtoa_r+0xa0a>
 8018bd0:	9a00      	ldr	r2, [sp, #0]
 8018bd2:	2339      	movs	r3, #57	@ 0x39
 8018bd4:	7013      	strb	r3, [r2, #0]
 8018bd6:	4633      	mov	r3, r6
 8018bd8:	461e      	mov	r6, r3
 8018bda:	3b01      	subs	r3, #1
 8018bdc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8018be0:	2a39      	cmp	r2, #57	@ 0x39
 8018be2:	d052      	beq.n	8018c8a <_dtoa_r+0xb12>
 8018be4:	3201      	adds	r2, #1
 8018be6:	701a      	strb	r2, [r3, #0]
 8018be8:	e612      	b.n	8018810 <_dtoa_r+0x698>
 8018bea:	2a00      	cmp	r2, #0
 8018bec:	dd07      	ble.n	8018bfe <_dtoa_r+0xa86>
 8018bee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8018bf2:	d0ed      	beq.n	8018bd0 <_dtoa_r+0xa58>
 8018bf4:	9a00      	ldr	r2, [sp, #0]
 8018bf6:	f108 0301 	add.w	r3, r8, #1
 8018bfa:	7013      	strb	r3, [r2, #0]
 8018bfc:	e608      	b.n	8018810 <_dtoa_r+0x698>
 8018bfe:	9b07      	ldr	r3, [sp, #28]
 8018c00:	9a07      	ldr	r2, [sp, #28]
 8018c02:	f803 8c01 	strb.w	r8, [r3, #-1]
 8018c06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018c08:	4293      	cmp	r3, r2
 8018c0a:	d028      	beq.n	8018c5e <_dtoa_r+0xae6>
 8018c0c:	4649      	mov	r1, r9
 8018c0e:	2300      	movs	r3, #0
 8018c10:	220a      	movs	r2, #10
 8018c12:	4658      	mov	r0, fp
 8018c14:	f000 f92c 	bl	8018e70 <__multadd>
 8018c18:	42af      	cmp	r7, r5
 8018c1a:	4681      	mov	r9, r0
 8018c1c:	f04f 0300 	mov.w	r3, #0
 8018c20:	f04f 020a 	mov.w	r2, #10
 8018c24:	4639      	mov	r1, r7
 8018c26:	4658      	mov	r0, fp
 8018c28:	d107      	bne.n	8018c3a <_dtoa_r+0xac2>
 8018c2a:	f000 f921 	bl	8018e70 <__multadd>
 8018c2e:	4607      	mov	r7, r0
 8018c30:	4605      	mov	r5, r0
 8018c32:	9b07      	ldr	r3, [sp, #28]
 8018c34:	3301      	adds	r3, #1
 8018c36:	9307      	str	r3, [sp, #28]
 8018c38:	e774      	b.n	8018b24 <_dtoa_r+0x9ac>
 8018c3a:	f000 f919 	bl	8018e70 <__multadd>
 8018c3e:	4629      	mov	r1, r5
 8018c40:	4607      	mov	r7, r0
 8018c42:	2300      	movs	r3, #0
 8018c44:	220a      	movs	r2, #10
 8018c46:	4658      	mov	r0, fp
 8018c48:	f000 f912 	bl	8018e70 <__multadd>
 8018c4c:	4605      	mov	r5, r0
 8018c4e:	e7f0      	b.n	8018c32 <_dtoa_r+0xaba>
 8018c50:	9b00      	ldr	r3, [sp, #0]
 8018c52:	2b00      	cmp	r3, #0
 8018c54:	bfcc      	ite	gt
 8018c56:	461e      	movgt	r6, r3
 8018c58:	2601      	movle	r6, #1
 8018c5a:	4456      	add	r6, sl
 8018c5c:	2700      	movs	r7, #0
 8018c5e:	4649      	mov	r1, r9
 8018c60:	2201      	movs	r2, #1
 8018c62:	4658      	mov	r0, fp
 8018c64:	f000 fab0 	bl	80191c8 <__lshift>
 8018c68:	4621      	mov	r1, r4
 8018c6a:	4681      	mov	r9, r0
 8018c6c:	f000 fb18 	bl	80192a0 <__mcmp>
 8018c70:	2800      	cmp	r0, #0
 8018c72:	dcb0      	bgt.n	8018bd6 <_dtoa_r+0xa5e>
 8018c74:	d102      	bne.n	8018c7c <_dtoa_r+0xb04>
 8018c76:	f018 0f01 	tst.w	r8, #1
 8018c7a:	d1ac      	bne.n	8018bd6 <_dtoa_r+0xa5e>
 8018c7c:	4633      	mov	r3, r6
 8018c7e:	461e      	mov	r6, r3
 8018c80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018c84:	2a30      	cmp	r2, #48	@ 0x30
 8018c86:	d0fa      	beq.n	8018c7e <_dtoa_r+0xb06>
 8018c88:	e5c2      	b.n	8018810 <_dtoa_r+0x698>
 8018c8a:	459a      	cmp	sl, r3
 8018c8c:	d1a4      	bne.n	8018bd8 <_dtoa_r+0xa60>
 8018c8e:	9b04      	ldr	r3, [sp, #16]
 8018c90:	3301      	adds	r3, #1
 8018c92:	9304      	str	r3, [sp, #16]
 8018c94:	2331      	movs	r3, #49	@ 0x31
 8018c96:	f88a 3000 	strb.w	r3, [sl]
 8018c9a:	e5b9      	b.n	8018810 <_dtoa_r+0x698>
 8018c9c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8018c9e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8018cfc <_dtoa_r+0xb84>
 8018ca2:	b11b      	cbz	r3, 8018cac <_dtoa_r+0xb34>
 8018ca4:	f10a 0308 	add.w	r3, sl, #8
 8018ca8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8018caa:	6013      	str	r3, [r2, #0]
 8018cac:	4650      	mov	r0, sl
 8018cae:	b019      	add	sp, #100	@ 0x64
 8018cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018cb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018cb6:	2b01      	cmp	r3, #1
 8018cb8:	f77f ae37 	ble.w	801892a <_dtoa_r+0x7b2>
 8018cbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018cbe:	930a      	str	r3, [sp, #40]	@ 0x28
 8018cc0:	2001      	movs	r0, #1
 8018cc2:	e655      	b.n	8018970 <_dtoa_r+0x7f8>
 8018cc4:	9b00      	ldr	r3, [sp, #0]
 8018cc6:	2b00      	cmp	r3, #0
 8018cc8:	f77f aed6 	ble.w	8018a78 <_dtoa_r+0x900>
 8018ccc:	4656      	mov	r6, sl
 8018cce:	4621      	mov	r1, r4
 8018cd0:	4648      	mov	r0, r9
 8018cd2:	f7ff f9c9 	bl	8018068 <quorem>
 8018cd6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8018cda:	f806 8b01 	strb.w	r8, [r6], #1
 8018cde:	9b00      	ldr	r3, [sp, #0]
 8018ce0:	eba6 020a 	sub.w	r2, r6, sl
 8018ce4:	4293      	cmp	r3, r2
 8018ce6:	ddb3      	ble.n	8018c50 <_dtoa_r+0xad8>
 8018ce8:	4649      	mov	r1, r9
 8018cea:	2300      	movs	r3, #0
 8018cec:	220a      	movs	r2, #10
 8018cee:	4658      	mov	r0, fp
 8018cf0:	f000 f8be 	bl	8018e70 <__multadd>
 8018cf4:	4681      	mov	r9, r0
 8018cf6:	e7ea      	b.n	8018cce <_dtoa_r+0xb56>
 8018cf8:	0801ae33 	.word	0x0801ae33
 8018cfc:	0801adce 	.word	0x0801adce

08018d00 <__env_lock>:
 8018d00:	4801      	ldr	r0, [pc, #4]	@ (8018d08 <__env_lock+0x8>)
 8018d02:	f7ff b97a 	b.w	8017ffa <__retarget_lock_acquire_recursive>
 8018d06:	bf00      	nop
 8018d08:	2001144c 	.word	0x2001144c

08018d0c <__env_unlock>:
 8018d0c:	4801      	ldr	r0, [pc, #4]	@ (8018d14 <__env_unlock+0x8>)
 8018d0e:	f7ff b975 	b.w	8017ffc <__retarget_lock_release_recursive>
 8018d12:	bf00      	nop
 8018d14:	2001144c 	.word	0x2001144c

08018d18 <_free_r>:
 8018d18:	b538      	push	{r3, r4, r5, lr}
 8018d1a:	4605      	mov	r5, r0
 8018d1c:	2900      	cmp	r1, #0
 8018d1e:	d041      	beq.n	8018da4 <_free_r+0x8c>
 8018d20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018d24:	1f0c      	subs	r4, r1, #4
 8018d26:	2b00      	cmp	r3, #0
 8018d28:	bfb8      	it	lt
 8018d2a:	18e4      	addlt	r4, r4, r3
 8018d2c:	f7fe f812 	bl	8016d54 <__malloc_lock>
 8018d30:	4a1d      	ldr	r2, [pc, #116]	@ (8018da8 <_free_r+0x90>)
 8018d32:	6813      	ldr	r3, [r2, #0]
 8018d34:	b933      	cbnz	r3, 8018d44 <_free_r+0x2c>
 8018d36:	6063      	str	r3, [r4, #4]
 8018d38:	6014      	str	r4, [r2, #0]
 8018d3a:	4628      	mov	r0, r5
 8018d3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018d40:	f7fe b80e 	b.w	8016d60 <__malloc_unlock>
 8018d44:	42a3      	cmp	r3, r4
 8018d46:	d908      	bls.n	8018d5a <_free_r+0x42>
 8018d48:	6820      	ldr	r0, [r4, #0]
 8018d4a:	1821      	adds	r1, r4, r0
 8018d4c:	428b      	cmp	r3, r1
 8018d4e:	bf01      	itttt	eq
 8018d50:	6819      	ldreq	r1, [r3, #0]
 8018d52:	685b      	ldreq	r3, [r3, #4]
 8018d54:	1809      	addeq	r1, r1, r0
 8018d56:	6021      	streq	r1, [r4, #0]
 8018d58:	e7ed      	b.n	8018d36 <_free_r+0x1e>
 8018d5a:	461a      	mov	r2, r3
 8018d5c:	685b      	ldr	r3, [r3, #4]
 8018d5e:	b10b      	cbz	r3, 8018d64 <_free_r+0x4c>
 8018d60:	42a3      	cmp	r3, r4
 8018d62:	d9fa      	bls.n	8018d5a <_free_r+0x42>
 8018d64:	6811      	ldr	r1, [r2, #0]
 8018d66:	1850      	adds	r0, r2, r1
 8018d68:	42a0      	cmp	r0, r4
 8018d6a:	d10b      	bne.n	8018d84 <_free_r+0x6c>
 8018d6c:	6820      	ldr	r0, [r4, #0]
 8018d6e:	4401      	add	r1, r0
 8018d70:	1850      	adds	r0, r2, r1
 8018d72:	4283      	cmp	r3, r0
 8018d74:	6011      	str	r1, [r2, #0]
 8018d76:	d1e0      	bne.n	8018d3a <_free_r+0x22>
 8018d78:	6818      	ldr	r0, [r3, #0]
 8018d7a:	685b      	ldr	r3, [r3, #4]
 8018d7c:	6053      	str	r3, [r2, #4]
 8018d7e:	4408      	add	r0, r1
 8018d80:	6010      	str	r0, [r2, #0]
 8018d82:	e7da      	b.n	8018d3a <_free_r+0x22>
 8018d84:	d902      	bls.n	8018d8c <_free_r+0x74>
 8018d86:	230c      	movs	r3, #12
 8018d88:	602b      	str	r3, [r5, #0]
 8018d8a:	e7d6      	b.n	8018d3a <_free_r+0x22>
 8018d8c:	6820      	ldr	r0, [r4, #0]
 8018d8e:	1821      	adds	r1, r4, r0
 8018d90:	428b      	cmp	r3, r1
 8018d92:	bf04      	itt	eq
 8018d94:	6819      	ldreq	r1, [r3, #0]
 8018d96:	685b      	ldreq	r3, [r3, #4]
 8018d98:	6063      	str	r3, [r4, #4]
 8018d9a:	bf04      	itt	eq
 8018d9c:	1809      	addeq	r1, r1, r0
 8018d9e:	6021      	streq	r1, [r4, #0]
 8018da0:	6054      	str	r4, [r2, #4]
 8018da2:	e7ca      	b.n	8018d3a <_free_r+0x22>
 8018da4:	bd38      	pop	{r3, r4, r5, pc}
 8018da6:	bf00      	nop
 8018da8:	20011308 	.word	0x20011308

08018dac <_Balloc>:
 8018dac:	b570      	push	{r4, r5, r6, lr}
 8018dae:	69c6      	ldr	r6, [r0, #28]
 8018db0:	4604      	mov	r4, r0
 8018db2:	460d      	mov	r5, r1
 8018db4:	b976      	cbnz	r6, 8018dd4 <_Balloc+0x28>
 8018db6:	2010      	movs	r0, #16
 8018db8:	f7fd ff1a 	bl	8016bf0 <malloc>
 8018dbc:	4602      	mov	r2, r0
 8018dbe:	61e0      	str	r0, [r4, #28]
 8018dc0:	b920      	cbnz	r0, 8018dcc <_Balloc+0x20>
 8018dc2:	4b18      	ldr	r3, [pc, #96]	@ (8018e24 <_Balloc+0x78>)
 8018dc4:	4818      	ldr	r0, [pc, #96]	@ (8018e28 <_Balloc+0x7c>)
 8018dc6:	216b      	movs	r1, #107	@ 0x6b
 8018dc8:	f7ff f930 	bl	801802c <__assert_func>
 8018dcc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018dd0:	6006      	str	r6, [r0, #0]
 8018dd2:	60c6      	str	r6, [r0, #12]
 8018dd4:	69e6      	ldr	r6, [r4, #28]
 8018dd6:	68f3      	ldr	r3, [r6, #12]
 8018dd8:	b183      	cbz	r3, 8018dfc <_Balloc+0x50>
 8018dda:	69e3      	ldr	r3, [r4, #28]
 8018ddc:	68db      	ldr	r3, [r3, #12]
 8018dde:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8018de2:	b9b8      	cbnz	r0, 8018e14 <_Balloc+0x68>
 8018de4:	2101      	movs	r1, #1
 8018de6:	fa01 f605 	lsl.w	r6, r1, r5
 8018dea:	1d72      	adds	r2, r6, #5
 8018dec:	0092      	lsls	r2, r2, #2
 8018dee:	4620      	mov	r0, r4
 8018df0:	f7fd fe90 	bl	8016b14 <_calloc_r>
 8018df4:	b160      	cbz	r0, 8018e10 <_Balloc+0x64>
 8018df6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8018dfa:	e00e      	b.n	8018e1a <_Balloc+0x6e>
 8018dfc:	2221      	movs	r2, #33	@ 0x21
 8018dfe:	2104      	movs	r1, #4
 8018e00:	4620      	mov	r0, r4
 8018e02:	f7fd fe87 	bl	8016b14 <_calloc_r>
 8018e06:	69e3      	ldr	r3, [r4, #28]
 8018e08:	60f0      	str	r0, [r6, #12]
 8018e0a:	68db      	ldr	r3, [r3, #12]
 8018e0c:	2b00      	cmp	r3, #0
 8018e0e:	d1e4      	bne.n	8018dda <_Balloc+0x2e>
 8018e10:	2000      	movs	r0, #0
 8018e12:	bd70      	pop	{r4, r5, r6, pc}
 8018e14:	6802      	ldr	r2, [r0, #0]
 8018e16:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018e1a:	2300      	movs	r3, #0
 8018e1c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018e20:	e7f7      	b.n	8018e12 <_Balloc+0x66>
 8018e22:	bf00      	nop
 8018e24:	0801abee 	.word	0x0801abee
 8018e28:	0801ae44 	.word	0x0801ae44

08018e2c <_Bfree>:
 8018e2c:	b570      	push	{r4, r5, r6, lr}
 8018e2e:	69c6      	ldr	r6, [r0, #28]
 8018e30:	4605      	mov	r5, r0
 8018e32:	460c      	mov	r4, r1
 8018e34:	b976      	cbnz	r6, 8018e54 <_Bfree+0x28>
 8018e36:	2010      	movs	r0, #16
 8018e38:	f7fd feda 	bl	8016bf0 <malloc>
 8018e3c:	4602      	mov	r2, r0
 8018e3e:	61e8      	str	r0, [r5, #28]
 8018e40:	b920      	cbnz	r0, 8018e4c <_Bfree+0x20>
 8018e42:	4b09      	ldr	r3, [pc, #36]	@ (8018e68 <_Bfree+0x3c>)
 8018e44:	4809      	ldr	r0, [pc, #36]	@ (8018e6c <_Bfree+0x40>)
 8018e46:	218f      	movs	r1, #143	@ 0x8f
 8018e48:	f7ff f8f0 	bl	801802c <__assert_func>
 8018e4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018e50:	6006      	str	r6, [r0, #0]
 8018e52:	60c6      	str	r6, [r0, #12]
 8018e54:	b13c      	cbz	r4, 8018e66 <_Bfree+0x3a>
 8018e56:	69eb      	ldr	r3, [r5, #28]
 8018e58:	6862      	ldr	r2, [r4, #4]
 8018e5a:	68db      	ldr	r3, [r3, #12]
 8018e5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018e60:	6021      	str	r1, [r4, #0]
 8018e62:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8018e66:	bd70      	pop	{r4, r5, r6, pc}
 8018e68:	0801abee 	.word	0x0801abee
 8018e6c:	0801ae44 	.word	0x0801ae44

08018e70 <__multadd>:
 8018e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018e74:	690d      	ldr	r5, [r1, #16]
 8018e76:	4607      	mov	r7, r0
 8018e78:	460c      	mov	r4, r1
 8018e7a:	461e      	mov	r6, r3
 8018e7c:	f101 0c14 	add.w	ip, r1, #20
 8018e80:	2000      	movs	r0, #0
 8018e82:	f8dc 3000 	ldr.w	r3, [ip]
 8018e86:	b299      	uxth	r1, r3
 8018e88:	fb02 6101 	mla	r1, r2, r1, r6
 8018e8c:	0c1e      	lsrs	r6, r3, #16
 8018e8e:	0c0b      	lsrs	r3, r1, #16
 8018e90:	fb02 3306 	mla	r3, r2, r6, r3
 8018e94:	b289      	uxth	r1, r1
 8018e96:	3001      	adds	r0, #1
 8018e98:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8018e9c:	4285      	cmp	r5, r0
 8018e9e:	f84c 1b04 	str.w	r1, [ip], #4
 8018ea2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8018ea6:	dcec      	bgt.n	8018e82 <__multadd+0x12>
 8018ea8:	b30e      	cbz	r6, 8018eee <__multadd+0x7e>
 8018eaa:	68a3      	ldr	r3, [r4, #8]
 8018eac:	42ab      	cmp	r3, r5
 8018eae:	dc19      	bgt.n	8018ee4 <__multadd+0x74>
 8018eb0:	6861      	ldr	r1, [r4, #4]
 8018eb2:	4638      	mov	r0, r7
 8018eb4:	3101      	adds	r1, #1
 8018eb6:	f7ff ff79 	bl	8018dac <_Balloc>
 8018eba:	4680      	mov	r8, r0
 8018ebc:	b928      	cbnz	r0, 8018eca <__multadd+0x5a>
 8018ebe:	4602      	mov	r2, r0
 8018ec0:	4b0c      	ldr	r3, [pc, #48]	@ (8018ef4 <__multadd+0x84>)
 8018ec2:	480d      	ldr	r0, [pc, #52]	@ (8018ef8 <__multadd+0x88>)
 8018ec4:	21ba      	movs	r1, #186	@ 0xba
 8018ec6:	f7ff f8b1 	bl	801802c <__assert_func>
 8018eca:	6922      	ldr	r2, [r4, #16]
 8018ecc:	3202      	adds	r2, #2
 8018ece:	f104 010c 	add.w	r1, r4, #12
 8018ed2:	0092      	lsls	r2, r2, #2
 8018ed4:	300c      	adds	r0, #12
 8018ed6:	f7ff f89a 	bl	801800e <memcpy>
 8018eda:	4621      	mov	r1, r4
 8018edc:	4638      	mov	r0, r7
 8018ede:	f7ff ffa5 	bl	8018e2c <_Bfree>
 8018ee2:	4644      	mov	r4, r8
 8018ee4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8018ee8:	3501      	adds	r5, #1
 8018eea:	615e      	str	r6, [r3, #20]
 8018eec:	6125      	str	r5, [r4, #16]
 8018eee:	4620      	mov	r0, r4
 8018ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018ef4:	0801ae33 	.word	0x0801ae33
 8018ef8:	0801ae44 	.word	0x0801ae44

08018efc <__hi0bits>:
 8018efc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8018f00:	4603      	mov	r3, r0
 8018f02:	bf36      	itet	cc
 8018f04:	0403      	lslcc	r3, r0, #16
 8018f06:	2000      	movcs	r0, #0
 8018f08:	2010      	movcc	r0, #16
 8018f0a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8018f0e:	bf3c      	itt	cc
 8018f10:	021b      	lslcc	r3, r3, #8
 8018f12:	3008      	addcc	r0, #8
 8018f14:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8018f18:	bf3c      	itt	cc
 8018f1a:	011b      	lslcc	r3, r3, #4
 8018f1c:	3004      	addcc	r0, #4
 8018f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8018f22:	bf3c      	itt	cc
 8018f24:	009b      	lslcc	r3, r3, #2
 8018f26:	3002      	addcc	r0, #2
 8018f28:	2b00      	cmp	r3, #0
 8018f2a:	db05      	blt.n	8018f38 <__hi0bits+0x3c>
 8018f2c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8018f30:	f100 0001 	add.w	r0, r0, #1
 8018f34:	bf08      	it	eq
 8018f36:	2020      	moveq	r0, #32
 8018f38:	4770      	bx	lr

08018f3a <__lo0bits>:
 8018f3a:	6803      	ldr	r3, [r0, #0]
 8018f3c:	4602      	mov	r2, r0
 8018f3e:	f013 0007 	ands.w	r0, r3, #7
 8018f42:	d00b      	beq.n	8018f5c <__lo0bits+0x22>
 8018f44:	07d9      	lsls	r1, r3, #31
 8018f46:	d421      	bmi.n	8018f8c <__lo0bits+0x52>
 8018f48:	0798      	lsls	r0, r3, #30
 8018f4a:	bf49      	itett	mi
 8018f4c:	085b      	lsrmi	r3, r3, #1
 8018f4e:	089b      	lsrpl	r3, r3, #2
 8018f50:	2001      	movmi	r0, #1
 8018f52:	6013      	strmi	r3, [r2, #0]
 8018f54:	bf5c      	itt	pl
 8018f56:	6013      	strpl	r3, [r2, #0]
 8018f58:	2002      	movpl	r0, #2
 8018f5a:	4770      	bx	lr
 8018f5c:	b299      	uxth	r1, r3
 8018f5e:	b909      	cbnz	r1, 8018f64 <__lo0bits+0x2a>
 8018f60:	0c1b      	lsrs	r3, r3, #16
 8018f62:	2010      	movs	r0, #16
 8018f64:	b2d9      	uxtb	r1, r3
 8018f66:	b909      	cbnz	r1, 8018f6c <__lo0bits+0x32>
 8018f68:	3008      	adds	r0, #8
 8018f6a:	0a1b      	lsrs	r3, r3, #8
 8018f6c:	0719      	lsls	r1, r3, #28
 8018f6e:	bf04      	itt	eq
 8018f70:	091b      	lsreq	r3, r3, #4
 8018f72:	3004      	addeq	r0, #4
 8018f74:	0799      	lsls	r1, r3, #30
 8018f76:	bf04      	itt	eq
 8018f78:	089b      	lsreq	r3, r3, #2
 8018f7a:	3002      	addeq	r0, #2
 8018f7c:	07d9      	lsls	r1, r3, #31
 8018f7e:	d403      	bmi.n	8018f88 <__lo0bits+0x4e>
 8018f80:	085b      	lsrs	r3, r3, #1
 8018f82:	f100 0001 	add.w	r0, r0, #1
 8018f86:	d003      	beq.n	8018f90 <__lo0bits+0x56>
 8018f88:	6013      	str	r3, [r2, #0]
 8018f8a:	4770      	bx	lr
 8018f8c:	2000      	movs	r0, #0
 8018f8e:	4770      	bx	lr
 8018f90:	2020      	movs	r0, #32
 8018f92:	4770      	bx	lr

08018f94 <__i2b>:
 8018f94:	b510      	push	{r4, lr}
 8018f96:	460c      	mov	r4, r1
 8018f98:	2101      	movs	r1, #1
 8018f9a:	f7ff ff07 	bl	8018dac <_Balloc>
 8018f9e:	4602      	mov	r2, r0
 8018fa0:	b928      	cbnz	r0, 8018fae <__i2b+0x1a>
 8018fa2:	4b05      	ldr	r3, [pc, #20]	@ (8018fb8 <__i2b+0x24>)
 8018fa4:	4805      	ldr	r0, [pc, #20]	@ (8018fbc <__i2b+0x28>)
 8018fa6:	f240 1145 	movw	r1, #325	@ 0x145
 8018faa:	f7ff f83f 	bl	801802c <__assert_func>
 8018fae:	2301      	movs	r3, #1
 8018fb0:	6144      	str	r4, [r0, #20]
 8018fb2:	6103      	str	r3, [r0, #16]
 8018fb4:	bd10      	pop	{r4, pc}
 8018fb6:	bf00      	nop
 8018fb8:	0801ae33 	.word	0x0801ae33
 8018fbc:	0801ae44 	.word	0x0801ae44

08018fc0 <__multiply>:
 8018fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018fc4:	4614      	mov	r4, r2
 8018fc6:	690a      	ldr	r2, [r1, #16]
 8018fc8:	6923      	ldr	r3, [r4, #16]
 8018fca:	429a      	cmp	r2, r3
 8018fcc:	bfa8      	it	ge
 8018fce:	4623      	movge	r3, r4
 8018fd0:	460f      	mov	r7, r1
 8018fd2:	bfa4      	itt	ge
 8018fd4:	460c      	movge	r4, r1
 8018fd6:	461f      	movge	r7, r3
 8018fd8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8018fdc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8018fe0:	68a3      	ldr	r3, [r4, #8]
 8018fe2:	6861      	ldr	r1, [r4, #4]
 8018fe4:	eb0a 0609 	add.w	r6, sl, r9
 8018fe8:	42b3      	cmp	r3, r6
 8018fea:	b085      	sub	sp, #20
 8018fec:	bfb8      	it	lt
 8018fee:	3101      	addlt	r1, #1
 8018ff0:	f7ff fedc 	bl	8018dac <_Balloc>
 8018ff4:	b930      	cbnz	r0, 8019004 <__multiply+0x44>
 8018ff6:	4602      	mov	r2, r0
 8018ff8:	4b44      	ldr	r3, [pc, #272]	@ (801910c <__multiply+0x14c>)
 8018ffa:	4845      	ldr	r0, [pc, #276]	@ (8019110 <__multiply+0x150>)
 8018ffc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8019000:	f7ff f814 	bl	801802c <__assert_func>
 8019004:	f100 0514 	add.w	r5, r0, #20
 8019008:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801900c:	462b      	mov	r3, r5
 801900e:	2200      	movs	r2, #0
 8019010:	4543      	cmp	r3, r8
 8019012:	d321      	bcc.n	8019058 <__multiply+0x98>
 8019014:	f107 0114 	add.w	r1, r7, #20
 8019018:	f104 0214 	add.w	r2, r4, #20
 801901c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8019020:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8019024:	9302      	str	r3, [sp, #8]
 8019026:	1b13      	subs	r3, r2, r4
 8019028:	3b15      	subs	r3, #21
 801902a:	f023 0303 	bic.w	r3, r3, #3
 801902e:	3304      	adds	r3, #4
 8019030:	f104 0715 	add.w	r7, r4, #21
 8019034:	42ba      	cmp	r2, r7
 8019036:	bf38      	it	cc
 8019038:	2304      	movcc	r3, #4
 801903a:	9301      	str	r3, [sp, #4]
 801903c:	9b02      	ldr	r3, [sp, #8]
 801903e:	9103      	str	r1, [sp, #12]
 8019040:	428b      	cmp	r3, r1
 8019042:	d80c      	bhi.n	801905e <__multiply+0x9e>
 8019044:	2e00      	cmp	r6, #0
 8019046:	dd03      	ble.n	8019050 <__multiply+0x90>
 8019048:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801904c:	2b00      	cmp	r3, #0
 801904e:	d05b      	beq.n	8019108 <__multiply+0x148>
 8019050:	6106      	str	r6, [r0, #16]
 8019052:	b005      	add	sp, #20
 8019054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019058:	f843 2b04 	str.w	r2, [r3], #4
 801905c:	e7d8      	b.n	8019010 <__multiply+0x50>
 801905e:	f8b1 a000 	ldrh.w	sl, [r1]
 8019062:	f1ba 0f00 	cmp.w	sl, #0
 8019066:	d024      	beq.n	80190b2 <__multiply+0xf2>
 8019068:	f104 0e14 	add.w	lr, r4, #20
 801906c:	46a9      	mov	r9, r5
 801906e:	f04f 0c00 	mov.w	ip, #0
 8019072:	f85e 7b04 	ldr.w	r7, [lr], #4
 8019076:	f8d9 3000 	ldr.w	r3, [r9]
 801907a:	fa1f fb87 	uxth.w	fp, r7
 801907e:	b29b      	uxth	r3, r3
 8019080:	fb0a 330b 	mla	r3, sl, fp, r3
 8019084:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8019088:	f8d9 7000 	ldr.w	r7, [r9]
 801908c:	4463      	add	r3, ip
 801908e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8019092:	fb0a c70b 	mla	r7, sl, fp, ip
 8019096:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801909a:	b29b      	uxth	r3, r3
 801909c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80190a0:	4572      	cmp	r2, lr
 80190a2:	f849 3b04 	str.w	r3, [r9], #4
 80190a6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80190aa:	d8e2      	bhi.n	8019072 <__multiply+0xb2>
 80190ac:	9b01      	ldr	r3, [sp, #4]
 80190ae:	f845 c003 	str.w	ip, [r5, r3]
 80190b2:	9b03      	ldr	r3, [sp, #12]
 80190b4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80190b8:	3104      	adds	r1, #4
 80190ba:	f1b9 0f00 	cmp.w	r9, #0
 80190be:	d021      	beq.n	8019104 <__multiply+0x144>
 80190c0:	682b      	ldr	r3, [r5, #0]
 80190c2:	f104 0c14 	add.w	ip, r4, #20
 80190c6:	46ae      	mov	lr, r5
 80190c8:	f04f 0a00 	mov.w	sl, #0
 80190cc:	f8bc b000 	ldrh.w	fp, [ip]
 80190d0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80190d4:	fb09 770b 	mla	r7, r9, fp, r7
 80190d8:	4457      	add	r7, sl
 80190da:	b29b      	uxth	r3, r3
 80190dc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80190e0:	f84e 3b04 	str.w	r3, [lr], #4
 80190e4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80190e8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80190ec:	f8be 3000 	ldrh.w	r3, [lr]
 80190f0:	fb09 330a 	mla	r3, r9, sl, r3
 80190f4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80190f8:	4562      	cmp	r2, ip
 80190fa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80190fe:	d8e5      	bhi.n	80190cc <__multiply+0x10c>
 8019100:	9f01      	ldr	r7, [sp, #4]
 8019102:	51eb      	str	r3, [r5, r7]
 8019104:	3504      	adds	r5, #4
 8019106:	e799      	b.n	801903c <__multiply+0x7c>
 8019108:	3e01      	subs	r6, #1
 801910a:	e79b      	b.n	8019044 <__multiply+0x84>
 801910c:	0801ae33 	.word	0x0801ae33
 8019110:	0801ae44 	.word	0x0801ae44

08019114 <__pow5mult>:
 8019114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019118:	4615      	mov	r5, r2
 801911a:	f012 0203 	ands.w	r2, r2, #3
 801911e:	4607      	mov	r7, r0
 8019120:	460e      	mov	r6, r1
 8019122:	d007      	beq.n	8019134 <__pow5mult+0x20>
 8019124:	4c25      	ldr	r4, [pc, #148]	@ (80191bc <__pow5mult+0xa8>)
 8019126:	3a01      	subs	r2, #1
 8019128:	2300      	movs	r3, #0
 801912a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801912e:	f7ff fe9f 	bl	8018e70 <__multadd>
 8019132:	4606      	mov	r6, r0
 8019134:	10ad      	asrs	r5, r5, #2
 8019136:	d03d      	beq.n	80191b4 <__pow5mult+0xa0>
 8019138:	69fc      	ldr	r4, [r7, #28]
 801913a:	b97c      	cbnz	r4, 801915c <__pow5mult+0x48>
 801913c:	2010      	movs	r0, #16
 801913e:	f7fd fd57 	bl	8016bf0 <malloc>
 8019142:	4602      	mov	r2, r0
 8019144:	61f8      	str	r0, [r7, #28]
 8019146:	b928      	cbnz	r0, 8019154 <__pow5mult+0x40>
 8019148:	4b1d      	ldr	r3, [pc, #116]	@ (80191c0 <__pow5mult+0xac>)
 801914a:	481e      	ldr	r0, [pc, #120]	@ (80191c4 <__pow5mult+0xb0>)
 801914c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8019150:	f7fe ff6c 	bl	801802c <__assert_func>
 8019154:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8019158:	6004      	str	r4, [r0, #0]
 801915a:	60c4      	str	r4, [r0, #12]
 801915c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8019160:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8019164:	b94c      	cbnz	r4, 801917a <__pow5mult+0x66>
 8019166:	f240 2171 	movw	r1, #625	@ 0x271
 801916a:	4638      	mov	r0, r7
 801916c:	f7ff ff12 	bl	8018f94 <__i2b>
 8019170:	2300      	movs	r3, #0
 8019172:	f8c8 0008 	str.w	r0, [r8, #8]
 8019176:	4604      	mov	r4, r0
 8019178:	6003      	str	r3, [r0, #0]
 801917a:	f04f 0900 	mov.w	r9, #0
 801917e:	07eb      	lsls	r3, r5, #31
 8019180:	d50a      	bpl.n	8019198 <__pow5mult+0x84>
 8019182:	4631      	mov	r1, r6
 8019184:	4622      	mov	r2, r4
 8019186:	4638      	mov	r0, r7
 8019188:	f7ff ff1a 	bl	8018fc0 <__multiply>
 801918c:	4631      	mov	r1, r6
 801918e:	4680      	mov	r8, r0
 8019190:	4638      	mov	r0, r7
 8019192:	f7ff fe4b 	bl	8018e2c <_Bfree>
 8019196:	4646      	mov	r6, r8
 8019198:	106d      	asrs	r5, r5, #1
 801919a:	d00b      	beq.n	80191b4 <__pow5mult+0xa0>
 801919c:	6820      	ldr	r0, [r4, #0]
 801919e:	b938      	cbnz	r0, 80191b0 <__pow5mult+0x9c>
 80191a0:	4622      	mov	r2, r4
 80191a2:	4621      	mov	r1, r4
 80191a4:	4638      	mov	r0, r7
 80191a6:	f7ff ff0b 	bl	8018fc0 <__multiply>
 80191aa:	6020      	str	r0, [r4, #0]
 80191ac:	f8c0 9000 	str.w	r9, [r0]
 80191b0:	4604      	mov	r4, r0
 80191b2:	e7e4      	b.n	801917e <__pow5mult+0x6a>
 80191b4:	4630      	mov	r0, r6
 80191b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80191ba:	bf00      	nop
 80191bc:	0801aea0 	.word	0x0801aea0
 80191c0:	0801abee 	.word	0x0801abee
 80191c4:	0801ae44 	.word	0x0801ae44

080191c8 <__lshift>:
 80191c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80191cc:	460c      	mov	r4, r1
 80191ce:	6849      	ldr	r1, [r1, #4]
 80191d0:	6923      	ldr	r3, [r4, #16]
 80191d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80191d6:	68a3      	ldr	r3, [r4, #8]
 80191d8:	4607      	mov	r7, r0
 80191da:	4691      	mov	r9, r2
 80191dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80191e0:	f108 0601 	add.w	r6, r8, #1
 80191e4:	42b3      	cmp	r3, r6
 80191e6:	db0b      	blt.n	8019200 <__lshift+0x38>
 80191e8:	4638      	mov	r0, r7
 80191ea:	f7ff fddf 	bl	8018dac <_Balloc>
 80191ee:	4605      	mov	r5, r0
 80191f0:	b948      	cbnz	r0, 8019206 <__lshift+0x3e>
 80191f2:	4602      	mov	r2, r0
 80191f4:	4b28      	ldr	r3, [pc, #160]	@ (8019298 <__lshift+0xd0>)
 80191f6:	4829      	ldr	r0, [pc, #164]	@ (801929c <__lshift+0xd4>)
 80191f8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80191fc:	f7fe ff16 	bl	801802c <__assert_func>
 8019200:	3101      	adds	r1, #1
 8019202:	005b      	lsls	r3, r3, #1
 8019204:	e7ee      	b.n	80191e4 <__lshift+0x1c>
 8019206:	2300      	movs	r3, #0
 8019208:	f100 0114 	add.w	r1, r0, #20
 801920c:	f100 0210 	add.w	r2, r0, #16
 8019210:	4618      	mov	r0, r3
 8019212:	4553      	cmp	r3, sl
 8019214:	db33      	blt.n	801927e <__lshift+0xb6>
 8019216:	6920      	ldr	r0, [r4, #16]
 8019218:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801921c:	f104 0314 	add.w	r3, r4, #20
 8019220:	f019 091f 	ands.w	r9, r9, #31
 8019224:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8019228:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801922c:	d02b      	beq.n	8019286 <__lshift+0xbe>
 801922e:	f1c9 0e20 	rsb	lr, r9, #32
 8019232:	468a      	mov	sl, r1
 8019234:	2200      	movs	r2, #0
 8019236:	6818      	ldr	r0, [r3, #0]
 8019238:	fa00 f009 	lsl.w	r0, r0, r9
 801923c:	4310      	orrs	r0, r2
 801923e:	f84a 0b04 	str.w	r0, [sl], #4
 8019242:	f853 2b04 	ldr.w	r2, [r3], #4
 8019246:	459c      	cmp	ip, r3
 8019248:	fa22 f20e 	lsr.w	r2, r2, lr
 801924c:	d8f3      	bhi.n	8019236 <__lshift+0x6e>
 801924e:	ebac 0304 	sub.w	r3, ip, r4
 8019252:	3b15      	subs	r3, #21
 8019254:	f023 0303 	bic.w	r3, r3, #3
 8019258:	3304      	adds	r3, #4
 801925a:	f104 0015 	add.w	r0, r4, #21
 801925e:	4584      	cmp	ip, r0
 8019260:	bf38      	it	cc
 8019262:	2304      	movcc	r3, #4
 8019264:	50ca      	str	r2, [r1, r3]
 8019266:	b10a      	cbz	r2, 801926c <__lshift+0xa4>
 8019268:	f108 0602 	add.w	r6, r8, #2
 801926c:	3e01      	subs	r6, #1
 801926e:	4638      	mov	r0, r7
 8019270:	612e      	str	r6, [r5, #16]
 8019272:	4621      	mov	r1, r4
 8019274:	f7ff fdda 	bl	8018e2c <_Bfree>
 8019278:	4628      	mov	r0, r5
 801927a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801927e:	f842 0f04 	str.w	r0, [r2, #4]!
 8019282:	3301      	adds	r3, #1
 8019284:	e7c5      	b.n	8019212 <__lshift+0x4a>
 8019286:	3904      	subs	r1, #4
 8019288:	f853 2b04 	ldr.w	r2, [r3], #4
 801928c:	f841 2f04 	str.w	r2, [r1, #4]!
 8019290:	459c      	cmp	ip, r3
 8019292:	d8f9      	bhi.n	8019288 <__lshift+0xc0>
 8019294:	e7ea      	b.n	801926c <__lshift+0xa4>
 8019296:	bf00      	nop
 8019298:	0801ae33 	.word	0x0801ae33
 801929c:	0801ae44 	.word	0x0801ae44

080192a0 <__mcmp>:
 80192a0:	690a      	ldr	r2, [r1, #16]
 80192a2:	4603      	mov	r3, r0
 80192a4:	6900      	ldr	r0, [r0, #16]
 80192a6:	1a80      	subs	r0, r0, r2
 80192a8:	b530      	push	{r4, r5, lr}
 80192aa:	d10e      	bne.n	80192ca <__mcmp+0x2a>
 80192ac:	3314      	adds	r3, #20
 80192ae:	3114      	adds	r1, #20
 80192b0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80192b4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80192b8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80192bc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80192c0:	4295      	cmp	r5, r2
 80192c2:	d003      	beq.n	80192cc <__mcmp+0x2c>
 80192c4:	d205      	bcs.n	80192d2 <__mcmp+0x32>
 80192c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80192ca:	bd30      	pop	{r4, r5, pc}
 80192cc:	42a3      	cmp	r3, r4
 80192ce:	d3f3      	bcc.n	80192b8 <__mcmp+0x18>
 80192d0:	e7fb      	b.n	80192ca <__mcmp+0x2a>
 80192d2:	2001      	movs	r0, #1
 80192d4:	e7f9      	b.n	80192ca <__mcmp+0x2a>
	...

080192d8 <__mdiff>:
 80192d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80192dc:	4689      	mov	r9, r1
 80192de:	4606      	mov	r6, r0
 80192e0:	4611      	mov	r1, r2
 80192e2:	4648      	mov	r0, r9
 80192e4:	4614      	mov	r4, r2
 80192e6:	f7ff ffdb 	bl	80192a0 <__mcmp>
 80192ea:	1e05      	subs	r5, r0, #0
 80192ec:	d112      	bne.n	8019314 <__mdiff+0x3c>
 80192ee:	4629      	mov	r1, r5
 80192f0:	4630      	mov	r0, r6
 80192f2:	f7ff fd5b 	bl	8018dac <_Balloc>
 80192f6:	4602      	mov	r2, r0
 80192f8:	b928      	cbnz	r0, 8019306 <__mdiff+0x2e>
 80192fa:	4b3f      	ldr	r3, [pc, #252]	@ (80193f8 <__mdiff+0x120>)
 80192fc:	f240 2137 	movw	r1, #567	@ 0x237
 8019300:	483e      	ldr	r0, [pc, #248]	@ (80193fc <__mdiff+0x124>)
 8019302:	f7fe fe93 	bl	801802c <__assert_func>
 8019306:	2301      	movs	r3, #1
 8019308:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801930c:	4610      	mov	r0, r2
 801930e:	b003      	add	sp, #12
 8019310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019314:	bfbc      	itt	lt
 8019316:	464b      	movlt	r3, r9
 8019318:	46a1      	movlt	r9, r4
 801931a:	4630      	mov	r0, r6
 801931c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8019320:	bfba      	itte	lt
 8019322:	461c      	movlt	r4, r3
 8019324:	2501      	movlt	r5, #1
 8019326:	2500      	movge	r5, #0
 8019328:	f7ff fd40 	bl	8018dac <_Balloc>
 801932c:	4602      	mov	r2, r0
 801932e:	b918      	cbnz	r0, 8019338 <__mdiff+0x60>
 8019330:	4b31      	ldr	r3, [pc, #196]	@ (80193f8 <__mdiff+0x120>)
 8019332:	f240 2145 	movw	r1, #581	@ 0x245
 8019336:	e7e3      	b.n	8019300 <__mdiff+0x28>
 8019338:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801933c:	6926      	ldr	r6, [r4, #16]
 801933e:	60c5      	str	r5, [r0, #12]
 8019340:	f109 0310 	add.w	r3, r9, #16
 8019344:	f109 0514 	add.w	r5, r9, #20
 8019348:	f104 0e14 	add.w	lr, r4, #20
 801934c:	f100 0b14 	add.w	fp, r0, #20
 8019350:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8019354:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8019358:	9301      	str	r3, [sp, #4]
 801935a:	46d9      	mov	r9, fp
 801935c:	f04f 0c00 	mov.w	ip, #0
 8019360:	9b01      	ldr	r3, [sp, #4]
 8019362:	f85e 0b04 	ldr.w	r0, [lr], #4
 8019366:	f853 af04 	ldr.w	sl, [r3, #4]!
 801936a:	9301      	str	r3, [sp, #4]
 801936c:	fa1f f38a 	uxth.w	r3, sl
 8019370:	4619      	mov	r1, r3
 8019372:	b283      	uxth	r3, r0
 8019374:	1acb      	subs	r3, r1, r3
 8019376:	0c00      	lsrs	r0, r0, #16
 8019378:	4463      	add	r3, ip
 801937a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801937e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8019382:	b29b      	uxth	r3, r3
 8019384:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8019388:	4576      	cmp	r6, lr
 801938a:	f849 3b04 	str.w	r3, [r9], #4
 801938e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8019392:	d8e5      	bhi.n	8019360 <__mdiff+0x88>
 8019394:	1b33      	subs	r3, r6, r4
 8019396:	3b15      	subs	r3, #21
 8019398:	f023 0303 	bic.w	r3, r3, #3
 801939c:	3415      	adds	r4, #21
 801939e:	3304      	adds	r3, #4
 80193a0:	42a6      	cmp	r6, r4
 80193a2:	bf38      	it	cc
 80193a4:	2304      	movcc	r3, #4
 80193a6:	441d      	add	r5, r3
 80193a8:	445b      	add	r3, fp
 80193aa:	461e      	mov	r6, r3
 80193ac:	462c      	mov	r4, r5
 80193ae:	4544      	cmp	r4, r8
 80193b0:	d30e      	bcc.n	80193d0 <__mdiff+0xf8>
 80193b2:	f108 0103 	add.w	r1, r8, #3
 80193b6:	1b49      	subs	r1, r1, r5
 80193b8:	f021 0103 	bic.w	r1, r1, #3
 80193bc:	3d03      	subs	r5, #3
 80193be:	45a8      	cmp	r8, r5
 80193c0:	bf38      	it	cc
 80193c2:	2100      	movcc	r1, #0
 80193c4:	440b      	add	r3, r1
 80193c6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80193ca:	b191      	cbz	r1, 80193f2 <__mdiff+0x11a>
 80193cc:	6117      	str	r7, [r2, #16]
 80193ce:	e79d      	b.n	801930c <__mdiff+0x34>
 80193d0:	f854 1b04 	ldr.w	r1, [r4], #4
 80193d4:	46e6      	mov	lr, ip
 80193d6:	0c08      	lsrs	r0, r1, #16
 80193d8:	fa1c fc81 	uxtah	ip, ip, r1
 80193dc:	4471      	add	r1, lr
 80193de:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80193e2:	b289      	uxth	r1, r1
 80193e4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80193e8:	f846 1b04 	str.w	r1, [r6], #4
 80193ec:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80193f0:	e7dd      	b.n	80193ae <__mdiff+0xd6>
 80193f2:	3f01      	subs	r7, #1
 80193f4:	e7e7      	b.n	80193c6 <__mdiff+0xee>
 80193f6:	bf00      	nop
 80193f8:	0801ae33 	.word	0x0801ae33
 80193fc:	0801ae44 	.word	0x0801ae44

08019400 <__d2b>:
 8019400:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8019404:	460f      	mov	r7, r1
 8019406:	2101      	movs	r1, #1
 8019408:	ec59 8b10 	vmov	r8, r9, d0
 801940c:	4616      	mov	r6, r2
 801940e:	f7ff fccd 	bl	8018dac <_Balloc>
 8019412:	4604      	mov	r4, r0
 8019414:	b930      	cbnz	r0, 8019424 <__d2b+0x24>
 8019416:	4602      	mov	r2, r0
 8019418:	4b23      	ldr	r3, [pc, #140]	@ (80194a8 <__d2b+0xa8>)
 801941a:	4824      	ldr	r0, [pc, #144]	@ (80194ac <__d2b+0xac>)
 801941c:	f240 310f 	movw	r1, #783	@ 0x30f
 8019420:	f7fe fe04 	bl	801802c <__assert_func>
 8019424:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8019428:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801942c:	b10d      	cbz	r5, 8019432 <__d2b+0x32>
 801942e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8019432:	9301      	str	r3, [sp, #4]
 8019434:	f1b8 0300 	subs.w	r3, r8, #0
 8019438:	d023      	beq.n	8019482 <__d2b+0x82>
 801943a:	4668      	mov	r0, sp
 801943c:	9300      	str	r3, [sp, #0]
 801943e:	f7ff fd7c 	bl	8018f3a <__lo0bits>
 8019442:	e9dd 1200 	ldrd	r1, r2, [sp]
 8019446:	b1d0      	cbz	r0, 801947e <__d2b+0x7e>
 8019448:	f1c0 0320 	rsb	r3, r0, #32
 801944c:	fa02 f303 	lsl.w	r3, r2, r3
 8019450:	430b      	orrs	r3, r1
 8019452:	40c2      	lsrs	r2, r0
 8019454:	6163      	str	r3, [r4, #20]
 8019456:	9201      	str	r2, [sp, #4]
 8019458:	9b01      	ldr	r3, [sp, #4]
 801945a:	61a3      	str	r3, [r4, #24]
 801945c:	2b00      	cmp	r3, #0
 801945e:	bf0c      	ite	eq
 8019460:	2201      	moveq	r2, #1
 8019462:	2202      	movne	r2, #2
 8019464:	6122      	str	r2, [r4, #16]
 8019466:	b1a5      	cbz	r5, 8019492 <__d2b+0x92>
 8019468:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801946c:	4405      	add	r5, r0
 801946e:	603d      	str	r5, [r7, #0]
 8019470:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8019474:	6030      	str	r0, [r6, #0]
 8019476:	4620      	mov	r0, r4
 8019478:	b003      	add	sp, #12
 801947a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801947e:	6161      	str	r1, [r4, #20]
 8019480:	e7ea      	b.n	8019458 <__d2b+0x58>
 8019482:	a801      	add	r0, sp, #4
 8019484:	f7ff fd59 	bl	8018f3a <__lo0bits>
 8019488:	9b01      	ldr	r3, [sp, #4]
 801948a:	6163      	str	r3, [r4, #20]
 801948c:	3020      	adds	r0, #32
 801948e:	2201      	movs	r2, #1
 8019490:	e7e8      	b.n	8019464 <__d2b+0x64>
 8019492:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8019496:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801949a:	6038      	str	r0, [r7, #0]
 801949c:	6918      	ldr	r0, [r3, #16]
 801949e:	f7ff fd2d 	bl	8018efc <__hi0bits>
 80194a2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80194a6:	e7e5      	b.n	8019474 <__d2b+0x74>
 80194a8:	0801ae33 	.word	0x0801ae33
 80194ac:	0801ae44 	.word	0x0801ae44

080194b0 <_malloc_usable_size_r>:
 80194b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80194b4:	1f18      	subs	r0, r3, #4
 80194b6:	2b00      	cmp	r3, #0
 80194b8:	bfbc      	itt	lt
 80194ba:	580b      	ldrlt	r3, [r1, r0]
 80194bc:	18c0      	addlt	r0, r0, r3
 80194be:	4770      	bx	lr

080194c0 <__ssputs_r>:
 80194c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80194c4:	688e      	ldr	r6, [r1, #8]
 80194c6:	461f      	mov	r7, r3
 80194c8:	42be      	cmp	r6, r7
 80194ca:	680b      	ldr	r3, [r1, #0]
 80194cc:	4682      	mov	sl, r0
 80194ce:	460c      	mov	r4, r1
 80194d0:	4690      	mov	r8, r2
 80194d2:	d82d      	bhi.n	8019530 <__ssputs_r+0x70>
 80194d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80194d8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80194dc:	d026      	beq.n	801952c <__ssputs_r+0x6c>
 80194de:	6965      	ldr	r5, [r4, #20]
 80194e0:	6909      	ldr	r1, [r1, #16]
 80194e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80194e6:	eba3 0901 	sub.w	r9, r3, r1
 80194ea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80194ee:	1c7b      	adds	r3, r7, #1
 80194f0:	444b      	add	r3, r9
 80194f2:	106d      	asrs	r5, r5, #1
 80194f4:	429d      	cmp	r5, r3
 80194f6:	bf38      	it	cc
 80194f8:	461d      	movcc	r5, r3
 80194fa:	0553      	lsls	r3, r2, #21
 80194fc:	d527      	bpl.n	801954e <__ssputs_r+0x8e>
 80194fe:	4629      	mov	r1, r5
 8019500:	f7fd fba8 	bl	8016c54 <_malloc_r>
 8019504:	4606      	mov	r6, r0
 8019506:	b360      	cbz	r0, 8019562 <__ssputs_r+0xa2>
 8019508:	6921      	ldr	r1, [r4, #16]
 801950a:	464a      	mov	r2, r9
 801950c:	f7fe fd7f 	bl	801800e <memcpy>
 8019510:	89a3      	ldrh	r3, [r4, #12]
 8019512:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8019516:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801951a:	81a3      	strh	r3, [r4, #12]
 801951c:	6126      	str	r6, [r4, #16]
 801951e:	6165      	str	r5, [r4, #20]
 8019520:	444e      	add	r6, r9
 8019522:	eba5 0509 	sub.w	r5, r5, r9
 8019526:	6026      	str	r6, [r4, #0]
 8019528:	60a5      	str	r5, [r4, #8]
 801952a:	463e      	mov	r6, r7
 801952c:	42be      	cmp	r6, r7
 801952e:	d900      	bls.n	8019532 <__ssputs_r+0x72>
 8019530:	463e      	mov	r6, r7
 8019532:	6820      	ldr	r0, [r4, #0]
 8019534:	4632      	mov	r2, r6
 8019536:	4641      	mov	r1, r8
 8019538:	f7fe fc2c 	bl	8017d94 <memmove>
 801953c:	68a3      	ldr	r3, [r4, #8]
 801953e:	1b9b      	subs	r3, r3, r6
 8019540:	60a3      	str	r3, [r4, #8]
 8019542:	6823      	ldr	r3, [r4, #0]
 8019544:	4433      	add	r3, r6
 8019546:	6023      	str	r3, [r4, #0]
 8019548:	2000      	movs	r0, #0
 801954a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801954e:	462a      	mov	r2, r5
 8019550:	f7fd fc80 	bl	8016e54 <_realloc_r>
 8019554:	4606      	mov	r6, r0
 8019556:	2800      	cmp	r0, #0
 8019558:	d1e0      	bne.n	801951c <__ssputs_r+0x5c>
 801955a:	6921      	ldr	r1, [r4, #16]
 801955c:	4650      	mov	r0, sl
 801955e:	f7ff fbdb 	bl	8018d18 <_free_r>
 8019562:	230c      	movs	r3, #12
 8019564:	f8ca 3000 	str.w	r3, [sl]
 8019568:	89a3      	ldrh	r3, [r4, #12]
 801956a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801956e:	81a3      	strh	r3, [r4, #12]
 8019570:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019574:	e7e9      	b.n	801954a <__ssputs_r+0x8a>
	...

08019578 <_svfiprintf_r>:
 8019578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801957c:	4698      	mov	r8, r3
 801957e:	898b      	ldrh	r3, [r1, #12]
 8019580:	061b      	lsls	r3, r3, #24
 8019582:	b09d      	sub	sp, #116	@ 0x74
 8019584:	4607      	mov	r7, r0
 8019586:	460d      	mov	r5, r1
 8019588:	4614      	mov	r4, r2
 801958a:	d510      	bpl.n	80195ae <_svfiprintf_r+0x36>
 801958c:	690b      	ldr	r3, [r1, #16]
 801958e:	b973      	cbnz	r3, 80195ae <_svfiprintf_r+0x36>
 8019590:	2140      	movs	r1, #64	@ 0x40
 8019592:	f7fd fb5f 	bl	8016c54 <_malloc_r>
 8019596:	6028      	str	r0, [r5, #0]
 8019598:	6128      	str	r0, [r5, #16]
 801959a:	b930      	cbnz	r0, 80195aa <_svfiprintf_r+0x32>
 801959c:	230c      	movs	r3, #12
 801959e:	603b      	str	r3, [r7, #0]
 80195a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80195a4:	b01d      	add	sp, #116	@ 0x74
 80195a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80195aa:	2340      	movs	r3, #64	@ 0x40
 80195ac:	616b      	str	r3, [r5, #20]
 80195ae:	2300      	movs	r3, #0
 80195b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80195b2:	2320      	movs	r3, #32
 80195b4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80195b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80195bc:	2330      	movs	r3, #48	@ 0x30
 80195be:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801975c <_svfiprintf_r+0x1e4>
 80195c2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80195c6:	f04f 0901 	mov.w	r9, #1
 80195ca:	4623      	mov	r3, r4
 80195cc:	469a      	mov	sl, r3
 80195ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80195d2:	b10a      	cbz	r2, 80195d8 <_svfiprintf_r+0x60>
 80195d4:	2a25      	cmp	r2, #37	@ 0x25
 80195d6:	d1f9      	bne.n	80195cc <_svfiprintf_r+0x54>
 80195d8:	ebba 0b04 	subs.w	fp, sl, r4
 80195dc:	d00b      	beq.n	80195f6 <_svfiprintf_r+0x7e>
 80195de:	465b      	mov	r3, fp
 80195e0:	4622      	mov	r2, r4
 80195e2:	4629      	mov	r1, r5
 80195e4:	4638      	mov	r0, r7
 80195e6:	f7ff ff6b 	bl	80194c0 <__ssputs_r>
 80195ea:	3001      	adds	r0, #1
 80195ec:	f000 80a7 	beq.w	801973e <_svfiprintf_r+0x1c6>
 80195f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80195f2:	445a      	add	r2, fp
 80195f4:	9209      	str	r2, [sp, #36]	@ 0x24
 80195f6:	f89a 3000 	ldrb.w	r3, [sl]
 80195fa:	2b00      	cmp	r3, #0
 80195fc:	f000 809f 	beq.w	801973e <_svfiprintf_r+0x1c6>
 8019600:	2300      	movs	r3, #0
 8019602:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8019606:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801960a:	f10a 0a01 	add.w	sl, sl, #1
 801960e:	9304      	str	r3, [sp, #16]
 8019610:	9307      	str	r3, [sp, #28]
 8019612:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8019616:	931a      	str	r3, [sp, #104]	@ 0x68
 8019618:	4654      	mov	r4, sl
 801961a:	2205      	movs	r2, #5
 801961c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019620:	484e      	ldr	r0, [pc, #312]	@ (801975c <_svfiprintf_r+0x1e4>)
 8019622:	f7e6 fe05 	bl	8000230 <memchr>
 8019626:	9a04      	ldr	r2, [sp, #16]
 8019628:	b9d8      	cbnz	r0, 8019662 <_svfiprintf_r+0xea>
 801962a:	06d0      	lsls	r0, r2, #27
 801962c:	bf44      	itt	mi
 801962e:	2320      	movmi	r3, #32
 8019630:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019634:	0711      	lsls	r1, r2, #28
 8019636:	bf44      	itt	mi
 8019638:	232b      	movmi	r3, #43	@ 0x2b
 801963a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801963e:	f89a 3000 	ldrb.w	r3, [sl]
 8019642:	2b2a      	cmp	r3, #42	@ 0x2a
 8019644:	d015      	beq.n	8019672 <_svfiprintf_r+0xfa>
 8019646:	9a07      	ldr	r2, [sp, #28]
 8019648:	4654      	mov	r4, sl
 801964a:	2000      	movs	r0, #0
 801964c:	f04f 0c0a 	mov.w	ip, #10
 8019650:	4621      	mov	r1, r4
 8019652:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019656:	3b30      	subs	r3, #48	@ 0x30
 8019658:	2b09      	cmp	r3, #9
 801965a:	d94b      	bls.n	80196f4 <_svfiprintf_r+0x17c>
 801965c:	b1b0      	cbz	r0, 801968c <_svfiprintf_r+0x114>
 801965e:	9207      	str	r2, [sp, #28]
 8019660:	e014      	b.n	801968c <_svfiprintf_r+0x114>
 8019662:	eba0 0308 	sub.w	r3, r0, r8
 8019666:	fa09 f303 	lsl.w	r3, r9, r3
 801966a:	4313      	orrs	r3, r2
 801966c:	9304      	str	r3, [sp, #16]
 801966e:	46a2      	mov	sl, r4
 8019670:	e7d2      	b.n	8019618 <_svfiprintf_r+0xa0>
 8019672:	9b03      	ldr	r3, [sp, #12]
 8019674:	1d19      	adds	r1, r3, #4
 8019676:	681b      	ldr	r3, [r3, #0]
 8019678:	9103      	str	r1, [sp, #12]
 801967a:	2b00      	cmp	r3, #0
 801967c:	bfbb      	ittet	lt
 801967e:	425b      	neglt	r3, r3
 8019680:	f042 0202 	orrlt.w	r2, r2, #2
 8019684:	9307      	strge	r3, [sp, #28]
 8019686:	9307      	strlt	r3, [sp, #28]
 8019688:	bfb8      	it	lt
 801968a:	9204      	strlt	r2, [sp, #16]
 801968c:	7823      	ldrb	r3, [r4, #0]
 801968e:	2b2e      	cmp	r3, #46	@ 0x2e
 8019690:	d10a      	bne.n	80196a8 <_svfiprintf_r+0x130>
 8019692:	7863      	ldrb	r3, [r4, #1]
 8019694:	2b2a      	cmp	r3, #42	@ 0x2a
 8019696:	d132      	bne.n	80196fe <_svfiprintf_r+0x186>
 8019698:	9b03      	ldr	r3, [sp, #12]
 801969a:	1d1a      	adds	r2, r3, #4
 801969c:	681b      	ldr	r3, [r3, #0]
 801969e:	9203      	str	r2, [sp, #12]
 80196a0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80196a4:	3402      	adds	r4, #2
 80196a6:	9305      	str	r3, [sp, #20]
 80196a8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801976c <_svfiprintf_r+0x1f4>
 80196ac:	7821      	ldrb	r1, [r4, #0]
 80196ae:	2203      	movs	r2, #3
 80196b0:	4650      	mov	r0, sl
 80196b2:	f7e6 fdbd 	bl	8000230 <memchr>
 80196b6:	b138      	cbz	r0, 80196c8 <_svfiprintf_r+0x150>
 80196b8:	9b04      	ldr	r3, [sp, #16]
 80196ba:	eba0 000a 	sub.w	r0, r0, sl
 80196be:	2240      	movs	r2, #64	@ 0x40
 80196c0:	4082      	lsls	r2, r0
 80196c2:	4313      	orrs	r3, r2
 80196c4:	3401      	adds	r4, #1
 80196c6:	9304      	str	r3, [sp, #16]
 80196c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80196cc:	4824      	ldr	r0, [pc, #144]	@ (8019760 <_svfiprintf_r+0x1e8>)
 80196ce:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80196d2:	2206      	movs	r2, #6
 80196d4:	f7e6 fdac 	bl	8000230 <memchr>
 80196d8:	2800      	cmp	r0, #0
 80196da:	d036      	beq.n	801974a <_svfiprintf_r+0x1d2>
 80196dc:	4b21      	ldr	r3, [pc, #132]	@ (8019764 <_svfiprintf_r+0x1ec>)
 80196de:	bb1b      	cbnz	r3, 8019728 <_svfiprintf_r+0x1b0>
 80196e0:	9b03      	ldr	r3, [sp, #12]
 80196e2:	3307      	adds	r3, #7
 80196e4:	f023 0307 	bic.w	r3, r3, #7
 80196e8:	3308      	adds	r3, #8
 80196ea:	9303      	str	r3, [sp, #12]
 80196ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80196ee:	4433      	add	r3, r6
 80196f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80196f2:	e76a      	b.n	80195ca <_svfiprintf_r+0x52>
 80196f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80196f8:	460c      	mov	r4, r1
 80196fa:	2001      	movs	r0, #1
 80196fc:	e7a8      	b.n	8019650 <_svfiprintf_r+0xd8>
 80196fe:	2300      	movs	r3, #0
 8019700:	3401      	adds	r4, #1
 8019702:	9305      	str	r3, [sp, #20]
 8019704:	4619      	mov	r1, r3
 8019706:	f04f 0c0a 	mov.w	ip, #10
 801970a:	4620      	mov	r0, r4
 801970c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019710:	3a30      	subs	r2, #48	@ 0x30
 8019712:	2a09      	cmp	r2, #9
 8019714:	d903      	bls.n	801971e <_svfiprintf_r+0x1a6>
 8019716:	2b00      	cmp	r3, #0
 8019718:	d0c6      	beq.n	80196a8 <_svfiprintf_r+0x130>
 801971a:	9105      	str	r1, [sp, #20]
 801971c:	e7c4      	b.n	80196a8 <_svfiprintf_r+0x130>
 801971e:	fb0c 2101 	mla	r1, ip, r1, r2
 8019722:	4604      	mov	r4, r0
 8019724:	2301      	movs	r3, #1
 8019726:	e7f0      	b.n	801970a <_svfiprintf_r+0x192>
 8019728:	ab03      	add	r3, sp, #12
 801972a:	9300      	str	r3, [sp, #0]
 801972c:	462a      	mov	r2, r5
 801972e:	4b0e      	ldr	r3, [pc, #56]	@ (8019768 <_svfiprintf_r+0x1f0>)
 8019730:	a904      	add	r1, sp, #16
 8019732:	4638      	mov	r0, r7
 8019734:	f7fd fcd4 	bl	80170e0 <_printf_float>
 8019738:	1c42      	adds	r2, r0, #1
 801973a:	4606      	mov	r6, r0
 801973c:	d1d6      	bne.n	80196ec <_svfiprintf_r+0x174>
 801973e:	89ab      	ldrh	r3, [r5, #12]
 8019740:	065b      	lsls	r3, r3, #25
 8019742:	f53f af2d 	bmi.w	80195a0 <_svfiprintf_r+0x28>
 8019746:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019748:	e72c      	b.n	80195a4 <_svfiprintf_r+0x2c>
 801974a:	ab03      	add	r3, sp, #12
 801974c:	9300      	str	r3, [sp, #0]
 801974e:	462a      	mov	r2, r5
 8019750:	4b05      	ldr	r3, [pc, #20]	@ (8019768 <_svfiprintf_r+0x1f0>)
 8019752:	a904      	add	r1, sp, #16
 8019754:	4638      	mov	r0, r7
 8019756:	f7fd ff5b 	bl	8017610 <_printf_i>
 801975a:	e7ed      	b.n	8019738 <_svfiprintf_r+0x1c0>
 801975c:	0801afa0 	.word	0x0801afa0
 8019760:	0801afaa 	.word	0x0801afaa
 8019764:	080170e1 	.word	0x080170e1
 8019768:	080194c1 	.word	0x080194c1
 801976c:	0801afa6 	.word	0x0801afa6

08019770 <__sfputc_r>:
 8019770:	6893      	ldr	r3, [r2, #8]
 8019772:	3b01      	subs	r3, #1
 8019774:	2b00      	cmp	r3, #0
 8019776:	b410      	push	{r4}
 8019778:	6093      	str	r3, [r2, #8]
 801977a:	da08      	bge.n	801978e <__sfputc_r+0x1e>
 801977c:	6994      	ldr	r4, [r2, #24]
 801977e:	42a3      	cmp	r3, r4
 8019780:	db01      	blt.n	8019786 <__sfputc_r+0x16>
 8019782:	290a      	cmp	r1, #10
 8019784:	d103      	bne.n	801978e <__sfputc_r+0x1e>
 8019786:	f85d 4b04 	ldr.w	r4, [sp], #4
 801978a:	f7fe ba5f 	b.w	8017c4c <__swbuf_r>
 801978e:	6813      	ldr	r3, [r2, #0]
 8019790:	1c58      	adds	r0, r3, #1
 8019792:	6010      	str	r0, [r2, #0]
 8019794:	7019      	strb	r1, [r3, #0]
 8019796:	4608      	mov	r0, r1
 8019798:	f85d 4b04 	ldr.w	r4, [sp], #4
 801979c:	4770      	bx	lr

0801979e <__sfputs_r>:
 801979e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80197a0:	4606      	mov	r6, r0
 80197a2:	460f      	mov	r7, r1
 80197a4:	4614      	mov	r4, r2
 80197a6:	18d5      	adds	r5, r2, r3
 80197a8:	42ac      	cmp	r4, r5
 80197aa:	d101      	bne.n	80197b0 <__sfputs_r+0x12>
 80197ac:	2000      	movs	r0, #0
 80197ae:	e007      	b.n	80197c0 <__sfputs_r+0x22>
 80197b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80197b4:	463a      	mov	r2, r7
 80197b6:	4630      	mov	r0, r6
 80197b8:	f7ff ffda 	bl	8019770 <__sfputc_r>
 80197bc:	1c43      	adds	r3, r0, #1
 80197be:	d1f3      	bne.n	80197a8 <__sfputs_r+0xa>
 80197c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080197c4 <_vfiprintf_r>:
 80197c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80197c8:	460d      	mov	r5, r1
 80197ca:	b09d      	sub	sp, #116	@ 0x74
 80197cc:	4614      	mov	r4, r2
 80197ce:	4698      	mov	r8, r3
 80197d0:	4606      	mov	r6, r0
 80197d2:	b118      	cbz	r0, 80197dc <_vfiprintf_r+0x18>
 80197d4:	6a03      	ldr	r3, [r0, #32]
 80197d6:	b90b      	cbnz	r3, 80197dc <_vfiprintf_r+0x18>
 80197d8:	f7fe f8c6 	bl	8017968 <__sinit>
 80197dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80197de:	07d9      	lsls	r1, r3, #31
 80197e0:	d405      	bmi.n	80197ee <_vfiprintf_r+0x2a>
 80197e2:	89ab      	ldrh	r3, [r5, #12]
 80197e4:	059a      	lsls	r2, r3, #22
 80197e6:	d402      	bmi.n	80197ee <_vfiprintf_r+0x2a>
 80197e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80197ea:	f7fe fc06 	bl	8017ffa <__retarget_lock_acquire_recursive>
 80197ee:	89ab      	ldrh	r3, [r5, #12]
 80197f0:	071b      	lsls	r3, r3, #28
 80197f2:	d501      	bpl.n	80197f8 <_vfiprintf_r+0x34>
 80197f4:	692b      	ldr	r3, [r5, #16]
 80197f6:	b99b      	cbnz	r3, 8019820 <_vfiprintf_r+0x5c>
 80197f8:	4629      	mov	r1, r5
 80197fa:	4630      	mov	r0, r6
 80197fc:	f7fe fa64 	bl	8017cc8 <__swsetup_r>
 8019800:	b170      	cbz	r0, 8019820 <_vfiprintf_r+0x5c>
 8019802:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019804:	07dc      	lsls	r4, r3, #31
 8019806:	d504      	bpl.n	8019812 <_vfiprintf_r+0x4e>
 8019808:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801980c:	b01d      	add	sp, #116	@ 0x74
 801980e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019812:	89ab      	ldrh	r3, [r5, #12]
 8019814:	0598      	lsls	r0, r3, #22
 8019816:	d4f7      	bmi.n	8019808 <_vfiprintf_r+0x44>
 8019818:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801981a:	f7fe fbef 	bl	8017ffc <__retarget_lock_release_recursive>
 801981e:	e7f3      	b.n	8019808 <_vfiprintf_r+0x44>
 8019820:	2300      	movs	r3, #0
 8019822:	9309      	str	r3, [sp, #36]	@ 0x24
 8019824:	2320      	movs	r3, #32
 8019826:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801982a:	f8cd 800c 	str.w	r8, [sp, #12]
 801982e:	2330      	movs	r3, #48	@ 0x30
 8019830:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80199e0 <_vfiprintf_r+0x21c>
 8019834:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8019838:	f04f 0901 	mov.w	r9, #1
 801983c:	4623      	mov	r3, r4
 801983e:	469a      	mov	sl, r3
 8019840:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019844:	b10a      	cbz	r2, 801984a <_vfiprintf_r+0x86>
 8019846:	2a25      	cmp	r2, #37	@ 0x25
 8019848:	d1f9      	bne.n	801983e <_vfiprintf_r+0x7a>
 801984a:	ebba 0b04 	subs.w	fp, sl, r4
 801984e:	d00b      	beq.n	8019868 <_vfiprintf_r+0xa4>
 8019850:	465b      	mov	r3, fp
 8019852:	4622      	mov	r2, r4
 8019854:	4629      	mov	r1, r5
 8019856:	4630      	mov	r0, r6
 8019858:	f7ff ffa1 	bl	801979e <__sfputs_r>
 801985c:	3001      	adds	r0, #1
 801985e:	f000 80a7 	beq.w	80199b0 <_vfiprintf_r+0x1ec>
 8019862:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019864:	445a      	add	r2, fp
 8019866:	9209      	str	r2, [sp, #36]	@ 0x24
 8019868:	f89a 3000 	ldrb.w	r3, [sl]
 801986c:	2b00      	cmp	r3, #0
 801986e:	f000 809f 	beq.w	80199b0 <_vfiprintf_r+0x1ec>
 8019872:	2300      	movs	r3, #0
 8019874:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8019878:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801987c:	f10a 0a01 	add.w	sl, sl, #1
 8019880:	9304      	str	r3, [sp, #16]
 8019882:	9307      	str	r3, [sp, #28]
 8019884:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8019888:	931a      	str	r3, [sp, #104]	@ 0x68
 801988a:	4654      	mov	r4, sl
 801988c:	2205      	movs	r2, #5
 801988e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019892:	4853      	ldr	r0, [pc, #332]	@ (80199e0 <_vfiprintf_r+0x21c>)
 8019894:	f7e6 fccc 	bl	8000230 <memchr>
 8019898:	9a04      	ldr	r2, [sp, #16]
 801989a:	b9d8      	cbnz	r0, 80198d4 <_vfiprintf_r+0x110>
 801989c:	06d1      	lsls	r1, r2, #27
 801989e:	bf44      	itt	mi
 80198a0:	2320      	movmi	r3, #32
 80198a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80198a6:	0713      	lsls	r3, r2, #28
 80198a8:	bf44      	itt	mi
 80198aa:	232b      	movmi	r3, #43	@ 0x2b
 80198ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80198b0:	f89a 3000 	ldrb.w	r3, [sl]
 80198b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80198b6:	d015      	beq.n	80198e4 <_vfiprintf_r+0x120>
 80198b8:	9a07      	ldr	r2, [sp, #28]
 80198ba:	4654      	mov	r4, sl
 80198bc:	2000      	movs	r0, #0
 80198be:	f04f 0c0a 	mov.w	ip, #10
 80198c2:	4621      	mov	r1, r4
 80198c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80198c8:	3b30      	subs	r3, #48	@ 0x30
 80198ca:	2b09      	cmp	r3, #9
 80198cc:	d94b      	bls.n	8019966 <_vfiprintf_r+0x1a2>
 80198ce:	b1b0      	cbz	r0, 80198fe <_vfiprintf_r+0x13a>
 80198d0:	9207      	str	r2, [sp, #28]
 80198d2:	e014      	b.n	80198fe <_vfiprintf_r+0x13a>
 80198d4:	eba0 0308 	sub.w	r3, r0, r8
 80198d8:	fa09 f303 	lsl.w	r3, r9, r3
 80198dc:	4313      	orrs	r3, r2
 80198de:	9304      	str	r3, [sp, #16]
 80198e0:	46a2      	mov	sl, r4
 80198e2:	e7d2      	b.n	801988a <_vfiprintf_r+0xc6>
 80198e4:	9b03      	ldr	r3, [sp, #12]
 80198e6:	1d19      	adds	r1, r3, #4
 80198e8:	681b      	ldr	r3, [r3, #0]
 80198ea:	9103      	str	r1, [sp, #12]
 80198ec:	2b00      	cmp	r3, #0
 80198ee:	bfbb      	ittet	lt
 80198f0:	425b      	neglt	r3, r3
 80198f2:	f042 0202 	orrlt.w	r2, r2, #2
 80198f6:	9307      	strge	r3, [sp, #28]
 80198f8:	9307      	strlt	r3, [sp, #28]
 80198fa:	bfb8      	it	lt
 80198fc:	9204      	strlt	r2, [sp, #16]
 80198fe:	7823      	ldrb	r3, [r4, #0]
 8019900:	2b2e      	cmp	r3, #46	@ 0x2e
 8019902:	d10a      	bne.n	801991a <_vfiprintf_r+0x156>
 8019904:	7863      	ldrb	r3, [r4, #1]
 8019906:	2b2a      	cmp	r3, #42	@ 0x2a
 8019908:	d132      	bne.n	8019970 <_vfiprintf_r+0x1ac>
 801990a:	9b03      	ldr	r3, [sp, #12]
 801990c:	1d1a      	adds	r2, r3, #4
 801990e:	681b      	ldr	r3, [r3, #0]
 8019910:	9203      	str	r2, [sp, #12]
 8019912:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8019916:	3402      	adds	r4, #2
 8019918:	9305      	str	r3, [sp, #20]
 801991a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80199f0 <_vfiprintf_r+0x22c>
 801991e:	7821      	ldrb	r1, [r4, #0]
 8019920:	2203      	movs	r2, #3
 8019922:	4650      	mov	r0, sl
 8019924:	f7e6 fc84 	bl	8000230 <memchr>
 8019928:	b138      	cbz	r0, 801993a <_vfiprintf_r+0x176>
 801992a:	9b04      	ldr	r3, [sp, #16]
 801992c:	eba0 000a 	sub.w	r0, r0, sl
 8019930:	2240      	movs	r2, #64	@ 0x40
 8019932:	4082      	lsls	r2, r0
 8019934:	4313      	orrs	r3, r2
 8019936:	3401      	adds	r4, #1
 8019938:	9304      	str	r3, [sp, #16]
 801993a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801993e:	4829      	ldr	r0, [pc, #164]	@ (80199e4 <_vfiprintf_r+0x220>)
 8019940:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8019944:	2206      	movs	r2, #6
 8019946:	f7e6 fc73 	bl	8000230 <memchr>
 801994a:	2800      	cmp	r0, #0
 801994c:	d03f      	beq.n	80199ce <_vfiprintf_r+0x20a>
 801994e:	4b26      	ldr	r3, [pc, #152]	@ (80199e8 <_vfiprintf_r+0x224>)
 8019950:	bb1b      	cbnz	r3, 801999a <_vfiprintf_r+0x1d6>
 8019952:	9b03      	ldr	r3, [sp, #12]
 8019954:	3307      	adds	r3, #7
 8019956:	f023 0307 	bic.w	r3, r3, #7
 801995a:	3308      	adds	r3, #8
 801995c:	9303      	str	r3, [sp, #12]
 801995e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019960:	443b      	add	r3, r7
 8019962:	9309      	str	r3, [sp, #36]	@ 0x24
 8019964:	e76a      	b.n	801983c <_vfiprintf_r+0x78>
 8019966:	fb0c 3202 	mla	r2, ip, r2, r3
 801996a:	460c      	mov	r4, r1
 801996c:	2001      	movs	r0, #1
 801996e:	e7a8      	b.n	80198c2 <_vfiprintf_r+0xfe>
 8019970:	2300      	movs	r3, #0
 8019972:	3401      	adds	r4, #1
 8019974:	9305      	str	r3, [sp, #20]
 8019976:	4619      	mov	r1, r3
 8019978:	f04f 0c0a 	mov.w	ip, #10
 801997c:	4620      	mov	r0, r4
 801997e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019982:	3a30      	subs	r2, #48	@ 0x30
 8019984:	2a09      	cmp	r2, #9
 8019986:	d903      	bls.n	8019990 <_vfiprintf_r+0x1cc>
 8019988:	2b00      	cmp	r3, #0
 801998a:	d0c6      	beq.n	801991a <_vfiprintf_r+0x156>
 801998c:	9105      	str	r1, [sp, #20]
 801998e:	e7c4      	b.n	801991a <_vfiprintf_r+0x156>
 8019990:	fb0c 2101 	mla	r1, ip, r1, r2
 8019994:	4604      	mov	r4, r0
 8019996:	2301      	movs	r3, #1
 8019998:	e7f0      	b.n	801997c <_vfiprintf_r+0x1b8>
 801999a:	ab03      	add	r3, sp, #12
 801999c:	9300      	str	r3, [sp, #0]
 801999e:	462a      	mov	r2, r5
 80199a0:	4b12      	ldr	r3, [pc, #72]	@ (80199ec <_vfiprintf_r+0x228>)
 80199a2:	a904      	add	r1, sp, #16
 80199a4:	4630      	mov	r0, r6
 80199a6:	f7fd fb9b 	bl	80170e0 <_printf_float>
 80199aa:	4607      	mov	r7, r0
 80199ac:	1c78      	adds	r0, r7, #1
 80199ae:	d1d6      	bne.n	801995e <_vfiprintf_r+0x19a>
 80199b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80199b2:	07d9      	lsls	r1, r3, #31
 80199b4:	d405      	bmi.n	80199c2 <_vfiprintf_r+0x1fe>
 80199b6:	89ab      	ldrh	r3, [r5, #12]
 80199b8:	059a      	lsls	r2, r3, #22
 80199ba:	d402      	bmi.n	80199c2 <_vfiprintf_r+0x1fe>
 80199bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80199be:	f7fe fb1d 	bl	8017ffc <__retarget_lock_release_recursive>
 80199c2:	89ab      	ldrh	r3, [r5, #12]
 80199c4:	065b      	lsls	r3, r3, #25
 80199c6:	f53f af1f 	bmi.w	8019808 <_vfiprintf_r+0x44>
 80199ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80199cc:	e71e      	b.n	801980c <_vfiprintf_r+0x48>
 80199ce:	ab03      	add	r3, sp, #12
 80199d0:	9300      	str	r3, [sp, #0]
 80199d2:	462a      	mov	r2, r5
 80199d4:	4b05      	ldr	r3, [pc, #20]	@ (80199ec <_vfiprintf_r+0x228>)
 80199d6:	a904      	add	r1, sp, #16
 80199d8:	4630      	mov	r0, r6
 80199da:	f7fd fe19 	bl	8017610 <_printf_i>
 80199de:	e7e4      	b.n	80199aa <_vfiprintf_r+0x1e6>
 80199e0:	0801afa0 	.word	0x0801afa0
 80199e4:	0801afaa 	.word	0x0801afaa
 80199e8:	080170e1 	.word	0x080170e1
 80199ec:	0801979f 	.word	0x0801979f
 80199f0:	0801afa6 	.word	0x0801afa6

080199f4 <__sflush_r>:
 80199f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80199f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80199fc:	0716      	lsls	r6, r2, #28
 80199fe:	4605      	mov	r5, r0
 8019a00:	460c      	mov	r4, r1
 8019a02:	d454      	bmi.n	8019aae <__sflush_r+0xba>
 8019a04:	684b      	ldr	r3, [r1, #4]
 8019a06:	2b00      	cmp	r3, #0
 8019a08:	dc02      	bgt.n	8019a10 <__sflush_r+0x1c>
 8019a0a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8019a0c:	2b00      	cmp	r3, #0
 8019a0e:	dd48      	ble.n	8019aa2 <__sflush_r+0xae>
 8019a10:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8019a12:	2e00      	cmp	r6, #0
 8019a14:	d045      	beq.n	8019aa2 <__sflush_r+0xae>
 8019a16:	2300      	movs	r3, #0
 8019a18:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8019a1c:	682f      	ldr	r7, [r5, #0]
 8019a1e:	6a21      	ldr	r1, [r4, #32]
 8019a20:	602b      	str	r3, [r5, #0]
 8019a22:	d030      	beq.n	8019a86 <__sflush_r+0x92>
 8019a24:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8019a26:	89a3      	ldrh	r3, [r4, #12]
 8019a28:	0759      	lsls	r1, r3, #29
 8019a2a:	d505      	bpl.n	8019a38 <__sflush_r+0x44>
 8019a2c:	6863      	ldr	r3, [r4, #4]
 8019a2e:	1ad2      	subs	r2, r2, r3
 8019a30:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8019a32:	b10b      	cbz	r3, 8019a38 <__sflush_r+0x44>
 8019a34:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8019a36:	1ad2      	subs	r2, r2, r3
 8019a38:	2300      	movs	r3, #0
 8019a3a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8019a3c:	6a21      	ldr	r1, [r4, #32]
 8019a3e:	4628      	mov	r0, r5
 8019a40:	47b0      	blx	r6
 8019a42:	1c43      	adds	r3, r0, #1
 8019a44:	89a3      	ldrh	r3, [r4, #12]
 8019a46:	d106      	bne.n	8019a56 <__sflush_r+0x62>
 8019a48:	6829      	ldr	r1, [r5, #0]
 8019a4a:	291d      	cmp	r1, #29
 8019a4c:	d82b      	bhi.n	8019aa6 <__sflush_r+0xb2>
 8019a4e:	4a2a      	ldr	r2, [pc, #168]	@ (8019af8 <__sflush_r+0x104>)
 8019a50:	410a      	asrs	r2, r1
 8019a52:	07d6      	lsls	r6, r2, #31
 8019a54:	d427      	bmi.n	8019aa6 <__sflush_r+0xb2>
 8019a56:	2200      	movs	r2, #0
 8019a58:	6062      	str	r2, [r4, #4]
 8019a5a:	04d9      	lsls	r1, r3, #19
 8019a5c:	6922      	ldr	r2, [r4, #16]
 8019a5e:	6022      	str	r2, [r4, #0]
 8019a60:	d504      	bpl.n	8019a6c <__sflush_r+0x78>
 8019a62:	1c42      	adds	r2, r0, #1
 8019a64:	d101      	bne.n	8019a6a <__sflush_r+0x76>
 8019a66:	682b      	ldr	r3, [r5, #0]
 8019a68:	b903      	cbnz	r3, 8019a6c <__sflush_r+0x78>
 8019a6a:	6560      	str	r0, [r4, #84]	@ 0x54
 8019a6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019a6e:	602f      	str	r7, [r5, #0]
 8019a70:	b1b9      	cbz	r1, 8019aa2 <__sflush_r+0xae>
 8019a72:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8019a76:	4299      	cmp	r1, r3
 8019a78:	d002      	beq.n	8019a80 <__sflush_r+0x8c>
 8019a7a:	4628      	mov	r0, r5
 8019a7c:	f7ff f94c 	bl	8018d18 <_free_r>
 8019a80:	2300      	movs	r3, #0
 8019a82:	6363      	str	r3, [r4, #52]	@ 0x34
 8019a84:	e00d      	b.n	8019aa2 <__sflush_r+0xae>
 8019a86:	2301      	movs	r3, #1
 8019a88:	4628      	mov	r0, r5
 8019a8a:	47b0      	blx	r6
 8019a8c:	4602      	mov	r2, r0
 8019a8e:	1c50      	adds	r0, r2, #1
 8019a90:	d1c9      	bne.n	8019a26 <__sflush_r+0x32>
 8019a92:	682b      	ldr	r3, [r5, #0]
 8019a94:	2b00      	cmp	r3, #0
 8019a96:	d0c6      	beq.n	8019a26 <__sflush_r+0x32>
 8019a98:	2b1d      	cmp	r3, #29
 8019a9a:	d001      	beq.n	8019aa0 <__sflush_r+0xac>
 8019a9c:	2b16      	cmp	r3, #22
 8019a9e:	d11e      	bne.n	8019ade <__sflush_r+0xea>
 8019aa0:	602f      	str	r7, [r5, #0]
 8019aa2:	2000      	movs	r0, #0
 8019aa4:	e022      	b.n	8019aec <__sflush_r+0xf8>
 8019aa6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019aaa:	b21b      	sxth	r3, r3
 8019aac:	e01b      	b.n	8019ae6 <__sflush_r+0xf2>
 8019aae:	690f      	ldr	r7, [r1, #16]
 8019ab0:	2f00      	cmp	r7, #0
 8019ab2:	d0f6      	beq.n	8019aa2 <__sflush_r+0xae>
 8019ab4:	0793      	lsls	r3, r2, #30
 8019ab6:	680e      	ldr	r6, [r1, #0]
 8019ab8:	bf08      	it	eq
 8019aba:	694b      	ldreq	r3, [r1, #20]
 8019abc:	600f      	str	r7, [r1, #0]
 8019abe:	bf18      	it	ne
 8019ac0:	2300      	movne	r3, #0
 8019ac2:	eba6 0807 	sub.w	r8, r6, r7
 8019ac6:	608b      	str	r3, [r1, #8]
 8019ac8:	f1b8 0f00 	cmp.w	r8, #0
 8019acc:	dde9      	ble.n	8019aa2 <__sflush_r+0xae>
 8019ace:	6a21      	ldr	r1, [r4, #32]
 8019ad0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8019ad2:	4643      	mov	r3, r8
 8019ad4:	463a      	mov	r2, r7
 8019ad6:	4628      	mov	r0, r5
 8019ad8:	47b0      	blx	r6
 8019ada:	2800      	cmp	r0, #0
 8019adc:	dc08      	bgt.n	8019af0 <__sflush_r+0xfc>
 8019ade:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019ae2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019ae6:	81a3      	strh	r3, [r4, #12]
 8019ae8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019af0:	4407      	add	r7, r0
 8019af2:	eba8 0800 	sub.w	r8, r8, r0
 8019af6:	e7e7      	b.n	8019ac8 <__sflush_r+0xd4>
 8019af8:	dfbffffe 	.word	0xdfbffffe

08019afc <_fflush_r>:
 8019afc:	b538      	push	{r3, r4, r5, lr}
 8019afe:	690b      	ldr	r3, [r1, #16]
 8019b00:	4605      	mov	r5, r0
 8019b02:	460c      	mov	r4, r1
 8019b04:	b913      	cbnz	r3, 8019b0c <_fflush_r+0x10>
 8019b06:	2500      	movs	r5, #0
 8019b08:	4628      	mov	r0, r5
 8019b0a:	bd38      	pop	{r3, r4, r5, pc}
 8019b0c:	b118      	cbz	r0, 8019b16 <_fflush_r+0x1a>
 8019b0e:	6a03      	ldr	r3, [r0, #32]
 8019b10:	b90b      	cbnz	r3, 8019b16 <_fflush_r+0x1a>
 8019b12:	f7fd ff29 	bl	8017968 <__sinit>
 8019b16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019b1a:	2b00      	cmp	r3, #0
 8019b1c:	d0f3      	beq.n	8019b06 <_fflush_r+0xa>
 8019b1e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8019b20:	07d0      	lsls	r0, r2, #31
 8019b22:	d404      	bmi.n	8019b2e <_fflush_r+0x32>
 8019b24:	0599      	lsls	r1, r3, #22
 8019b26:	d402      	bmi.n	8019b2e <_fflush_r+0x32>
 8019b28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019b2a:	f7fe fa66 	bl	8017ffa <__retarget_lock_acquire_recursive>
 8019b2e:	4628      	mov	r0, r5
 8019b30:	4621      	mov	r1, r4
 8019b32:	f7ff ff5f 	bl	80199f4 <__sflush_r>
 8019b36:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8019b38:	07da      	lsls	r2, r3, #31
 8019b3a:	4605      	mov	r5, r0
 8019b3c:	d4e4      	bmi.n	8019b08 <_fflush_r+0xc>
 8019b3e:	89a3      	ldrh	r3, [r4, #12]
 8019b40:	059b      	lsls	r3, r3, #22
 8019b42:	d4e1      	bmi.n	8019b08 <_fflush_r+0xc>
 8019b44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019b46:	f7fe fa59 	bl	8017ffc <__retarget_lock_release_recursive>
 8019b4a:	e7dd      	b.n	8019b08 <_fflush_r+0xc>

08019b4c <fiprintf>:
 8019b4c:	b40e      	push	{r1, r2, r3}
 8019b4e:	b503      	push	{r0, r1, lr}
 8019b50:	4601      	mov	r1, r0
 8019b52:	ab03      	add	r3, sp, #12
 8019b54:	4805      	ldr	r0, [pc, #20]	@ (8019b6c <fiprintf+0x20>)
 8019b56:	f853 2b04 	ldr.w	r2, [r3], #4
 8019b5a:	6800      	ldr	r0, [r0, #0]
 8019b5c:	9301      	str	r3, [sp, #4]
 8019b5e:	f7ff fe31 	bl	80197c4 <_vfiprintf_r>
 8019b62:	b002      	add	sp, #8
 8019b64:	f85d eb04 	ldr.w	lr, [sp], #4
 8019b68:	b003      	add	sp, #12
 8019b6a:	4770      	bx	lr
 8019b6c:	200000c8 	.word	0x200000c8

08019b70 <__swhatbuf_r>:
 8019b70:	b570      	push	{r4, r5, r6, lr}
 8019b72:	460c      	mov	r4, r1
 8019b74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019b78:	2900      	cmp	r1, #0
 8019b7a:	b096      	sub	sp, #88	@ 0x58
 8019b7c:	4615      	mov	r5, r2
 8019b7e:	461e      	mov	r6, r3
 8019b80:	da0d      	bge.n	8019b9e <__swhatbuf_r+0x2e>
 8019b82:	89a3      	ldrh	r3, [r4, #12]
 8019b84:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8019b88:	f04f 0100 	mov.w	r1, #0
 8019b8c:	bf14      	ite	ne
 8019b8e:	2340      	movne	r3, #64	@ 0x40
 8019b90:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8019b94:	2000      	movs	r0, #0
 8019b96:	6031      	str	r1, [r6, #0]
 8019b98:	602b      	str	r3, [r5, #0]
 8019b9a:	b016      	add	sp, #88	@ 0x58
 8019b9c:	bd70      	pop	{r4, r5, r6, pc}
 8019b9e:	466a      	mov	r2, sp
 8019ba0:	f000 f848 	bl	8019c34 <_fstat_r>
 8019ba4:	2800      	cmp	r0, #0
 8019ba6:	dbec      	blt.n	8019b82 <__swhatbuf_r+0x12>
 8019ba8:	9901      	ldr	r1, [sp, #4]
 8019baa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8019bae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8019bb2:	4259      	negs	r1, r3
 8019bb4:	4159      	adcs	r1, r3
 8019bb6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8019bba:	e7eb      	b.n	8019b94 <__swhatbuf_r+0x24>

08019bbc <__smakebuf_r>:
 8019bbc:	898b      	ldrh	r3, [r1, #12]
 8019bbe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019bc0:	079d      	lsls	r5, r3, #30
 8019bc2:	4606      	mov	r6, r0
 8019bc4:	460c      	mov	r4, r1
 8019bc6:	d507      	bpl.n	8019bd8 <__smakebuf_r+0x1c>
 8019bc8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8019bcc:	6023      	str	r3, [r4, #0]
 8019bce:	6123      	str	r3, [r4, #16]
 8019bd0:	2301      	movs	r3, #1
 8019bd2:	6163      	str	r3, [r4, #20]
 8019bd4:	b003      	add	sp, #12
 8019bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019bd8:	ab01      	add	r3, sp, #4
 8019bda:	466a      	mov	r2, sp
 8019bdc:	f7ff ffc8 	bl	8019b70 <__swhatbuf_r>
 8019be0:	9f00      	ldr	r7, [sp, #0]
 8019be2:	4605      	mov	r5, r0
 8019be4:	4639      	mov	r1, r7
 8019be6:	4630      	mov	r0, r6
 8019be8:	f7fd f834 	bl	8016c54 <_malloc_r>
 8019bec:	b948      	cbnz	r0, 8019c02 <__smakebuf_r+0x46>
 8019bee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019bf2:	059a      	lsls	r2, r3, #22
 8019bf4:	d4ee      	bmi.n	8019bd4 <__smakebuf_r+0x18>
 8019bf6:	f023 0303 	bic.w	r3, r3, #3
 8019bfa:	f043 0302 	orr.w	r3, r3, #2
 8019bfe:	81a3      	strh	r3, [r4, #12]
 8019c00:	e7e2      	b.n	8019bc8 <__smakebuf_r+0xc>
 8019c02:	89a3      	ldrh	r3, [r4, #12]
 8019c04:	6020      	str	r0, [r4, #0]
 8019c06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019c0a:	81a3      	strh	r3, [r4, #12]
 8019c0c:	9b01      	ldr	r3, [sp, #4]
 8019c0e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8019c12:	b15b      	cbz	r3, 8019c2c <__smakebuf_r+0x70>
 8019c14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019c18:	4630      	mov	r0, r6
 8019c1a:	f000 f81d 	bl	8019c58 <_isatty_r>
 8019c1e:	b128      	cbz	r0, 8019c2c <__smakebuf_r+0x70>
 8019c20:	89a3      	ldrh	r3, [r4, #12]
 8019c22:	f023 0303 	bic.w	r3, r3, #3
 8019c26:	f043 0301 	orr.w	r3, r3, #1
 8019c2a:	81a3      	strh	r3, [r4, #12]
 8019c2c:	89a3      	ldrh	r3, [r4, #12]
 8019c2e:	431d      	orrs	r5, r3
 8019c30:	81a5      	strh	r5, [r4, #12]
 8019c32:	e7cf      	b.n	8019bd4 <__smakebuf_r+0x18>

08019c34 <_fstat_r>:
 8019c34:	b538      	push	{r3, r4, r5, lr}
 8019c36:	4d07      	ldr	r5, [pc, #28]	@ (8019c54 <_fstat_r+0x20>)
 8019c38:	2300      	movs	r3, #0
 8019c3a:	4604      	mov	r4, r0
 8019c3c:	4608      	mov	r0, r1
 8019c3e:	4611      	mov	r1, r2
 8019c40:	602b      	str	r3, [r5, #0]
 8019c42:	f7e9 f887 	bl	8002d54 <_fstat>
 8019c46:	1c43      	adds	r3, r0, #1
 8019c48:	d102      	bne.n	8019c50 <_fstat_r+0x1c>
 8019c4a:	682b      	ldr	r3, [r5, #0]
 8019c4c:	b103      	cbz	r3, 8019c50 <_fstat_r+0x1c>
 8019c4e:	6023      	str	r3, [r4, #0]
 8019c50:	bd38      	pop	{r3, r4, r5, pc}
 8019c52:	bf00      	nop
 8019c54:	20011448 	.word	0x20011448

08019c58 <_isatty_r>:
 8019c58:	b538      	push	{r3, r4, r5, lr}
 8019c5a:	4d06      	ldr	r5, [pc, #24]	@ (8019c74 <_isatty_r+0x1c>)
 8019c5c:	2300      	movs	r3, #0
 8019c5e:	4604      	mov	r4, r0
 8019c60:	4608      	mov	r0, r1
 8019c62:	602b      	str	r3, [r5, #0]
 8019c64:	f7e9 f886 	bl	8002d74 <_isatty>
 8019c68:	1c43      	adds	r3, r0, #1
 8019c6a:	d102      	bne.n	8019c72 <_isatty_r+0x1a>
 8019c6c:	682b      	ldr	r3, [r5, #0]
 8019c6e:	b103      	cbz	r3, 8019c72 <_isatty_r+0x1a>
 8019c70:	6023      	str	r3, [r4, #0]
 8019c72:	bd38      	pop	{r3, r4, r5, pc}
 8019c74:	20011448 	.word	0x20011448

08019c78 <abort>:
 8019c78:	b508      	push	{r3, lr}
 8019c7a:	2006      	movs	r0, #6
 8019c7c:	f000 f84a 	bl	8019d14 <raise>
 8019c80:	2001      	movs	r0, #1
 8019c82:	f7e9 f817 	bl	8002cb4 <_exit>

08019c86 <__ascii_mbtowc>:
 8019c86:	b082      	sub	sp, #8
 8019c88:	b901      	cbnz	r1, 8019c8c <__ascii_mbtowc+0x6>
 8019c8a:	a901      	add	r1, sp, #4
 8019c8c:	b142      	cbz	r2, 8019ca0 <__ascii_mbtowc+0x1a>
 8019c8e:	b14b      	cbz	r3, 8019ca4 <__ascii_mbtowc+0x1e>
 8019c90:	7813      	ldrb	r3, [r2, #0]
 8019c92:	600b      	str	r3, [r1, #0]
 8019c94:	7812      	ldrb	r2, [r2, #0]
 8019c96:	1e10      	subs	r0, r2, #0
 8019c98:	bf18      	it	ne
 8019c9a:	2001      	movne	r0, #1
 8019c9c:	b002      	add	sp, #8
 8019c9e:	4770      	bx	lr
 8019ca0:	4610      	mov	r0, r2
 8019ca2:	e7fb      	b.n	8019c9c <__ascii_mbtowc+0x16>
 8019ca4:	f06f 0001 	mvn.w	r0, #1
 8019ca8:	e7f8      	b.n	8019c9c <__ascii_mbtowc+0x16>

08019caa <__ascii_wctomb>:
 8019caa:	4603      	mov	r3, r0
 8019cac:	4608      	mov	r0, r1
 8019cae:	b141      	cbz	r1, 8019cc2 <__ascii_wctomb+0x18>
 8019cb0:	2aff      	cmp	r2, #255	@ 0xff
 8019cb2:	d904      	bls.n	8019cbe <__ascii_wctomb+0x14>
 8019cb4:	228a      	movs	r2, #138	@ 0x8a
 8019cb6:	601a      	str	r2, [r3, #0]
 8019cb8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019cbc:	4770      	bx	lr
 8019cbe:	700a      	strb	r2, [r1, #0]
 8019cc0:	2001      	movs	r0, #1
 8019cc2:	4770      	bx	lr

08019cc4 <_raise_r>:
 8019cc4:	291f      	cmp	r1, #31
 8019cc6:	b538      	push	{r3, r4, r5, lr}
 8019cc8:	4605      	mov	r5, r0
 8019cca:	460c      	mov	r4, r1
 8019ccc:	d904      	bls.n	8019cd8 <_raise_r+0x14>
 8019cce:	2316      	movs	r3, #22
 8019cd0:	6003      	str	r3, [r0, #0]
 8019cd2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019cd6:	bd38      	pop	{r3, r4, r5, pc}
 8019cd8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8019cda:	b112      	cbz	r2, 8019ce2 <_raise_r+0x1e>
 8019cdc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019ce0:	b94b      	cbnz	r3, 8019cf6 <_raise_r+0x32>
 8019ce2:	4628      	mov	r0, r5
 8019ce4:	f000 f830 	bl	8019d48 <_getpid_r>
 8019ce8:	4622      	mov	r2, r4
 8019cea:	4601      	mov	r1, r0
 8019cec:	4628      	mov	r0, r5
 8019cee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019cf2:	f000 b817 	b.w	8019d24 <_kill_r>
 8019cf6:	2b01      	cmp	r3, #1
 8019cf8:	d00a      	beq.n	8019d10 <_raise_r+0x4c>
 8019cfa:	1c59      	adds	r1, r3, #1
 8019cfc:	d103      	bne.n	8019d06 <_raise_r+0x42>
 8019cfe:	2316      	movs	r3, #22
 8019d00:	6003      	str	r3, [r0, #0]
 8019d02:	2001      	movs	r0, #1
 8019d04:	e7e7      	b.n	8019cd6 <_raise_r+0x12>
 8019d06:	2100      	movs	r1, #0
 8019d08:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8019d0c:	4620      	mov	r0, r4
 8019d0e:	4798      	blx	r3
 8019d10:	2000      	movs	r0, #0
 8019d12:	e7e0      	b.n	8019cd6 <_raise_r+0x12>

08019d14 <raise>:
 8019d14:	4b02      	ldr	r3, [pc, #8]	@ (8019d20 <raise+0xc>)
 8019d16:	4601      	mov	r1, r0
 8019d18:	6818      	ldr	r0, [r3, #0]
 8019d1a:	f7ff bfd3 	b.w	8019cc4 <_raise_r>
 8019d1e:	bf00      	nop
 8019d20:	200000c8 	.word	0x200000c8

08019d24 <_kill_r>:
 8019d24:	b538      	push	{r3, r4, r5, lr}
 8019d26:	4d07      	ldr	r5, [pc, #28]	@ (8019d44 <_kill_r+0x20>)
 8019d28:	2300      	movs	r3, #0
 8019d2a:	4604      	mov	r4, r0
 8019d2c:	4608      	mov	r0, r1
 8019d2e:	4611      	mov	r1, r2
 8019d30:	602b      	str	r3, [r5, #0]
 8019d32:	f7e8 ffaf 	bl	8002c94 <_kill>
 8019d36:	1c43      	adds	r3, r0, #1
 8019d38:	d102      	bne.n	8019d40 <_kill_r+0x1c>
 8019d3a:	682b      	ldr	r3, [r5, #0]
 8019d3c:	b103      	cbz	r3, 8019d40 <_kill_r+0x1c>
 8019d3e:	6023      	str	r3, [r4, #0]
 8019d40:	bd38      	pop	{r3, r4, r5, pc}
 8019d42:	bf00      	nop
 8019d44:	20011448 	.word	0x20011448

08019d48 <_getpid_r>:
 8019d48:	f7e8 bf9c 	b.w	8002c84 <_getpid>

08019d4c <_init>:
 8019d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019d4e:	bf00      	nop
 8019d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019d52:	bc08      	pop	{r3}
 8019d54:	469e      	mov	lr, r3
 8019d56:	4770      	bx	lr

08019d58 <_fini>:
 8019d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019d5a:	bf00      	nop
 8019d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019d5e:	bc08      	pop	{r3}
 8019d60:	469e      	mov	lr, r3
 8019d62:	4770      	bx	lr
